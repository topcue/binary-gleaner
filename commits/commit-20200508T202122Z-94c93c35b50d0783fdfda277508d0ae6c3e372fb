{
  "sha": "94c93c35b50d0783fdfda277508d0ae6c3e372fb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTRjOTNjMzViNTBkMDc4M2ZkZmRhMjc3NTA4ZDBhZTZjM2UzNzJmYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-08T20:21:22Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-08T20:21:22Z"
    },
    "message": "Remove ALL_PSPACES\n\nThis removes the ALL_PSPACES macro.  In this case it seemed cleanest\nto change how program spaces are stored -- instead of using a linked\nlist, they are now stored in a std::vector.\n\ngdb/ChangeLog\n2020-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (set_symbol_cache_size)\n\t(maintenance_print_symbol_cache, maintenance_flush_symbol_cache)\n\t(maintenance_print_symbol_cache_statistics): Update.\n\t* symmisc.c (print_symbol_bcache_statistics)\n\t(print_objfile_statistics, maintenance_print_objfiles)\n\t(maintenance_info_symtabs, maintenance_check_symtabs)\n\t(maintenance_expand_symtabs, maintenance_info_line_tables):\n\tUpdate.\n\t* symfile-debug.c (set_debug_symfile): Update.\n\t* source.c (forget_cached_source_info): Update.\n\t* python/python.c (gdbpy_progspaces): Update.\n\t* psymtab.c (maintenance_info_psymtabs): Update.\n\t* probe.c (parse_probes): Update.\n\t* linespec.c (iterate_over_all_matching_symtabs)\n\t(collect_symtabs_from_filename, search_minsyms_for_name): Update.\n\t* guile/scm-progspace.c (gdbscm_progspaces): Update.\n\t* exec.c (exec_target::close): Update.\n\t* ada-tasks.c (ada_tasks_new_objfile_observer): Update.\n\t* breakpoint.c (print_one_breakpoint_location)\n\t(create_longjmp_master_breakpoint)\n\t(create_std_terminate_master_breakpoint): Update.\n\t* progspace.c (program_spaces): Now a std::vector.\n\t(maybe_new_address_space): Update.\n\t(add_program_space): Remove.\n\t(program_space::program_space): Update.\n\t(remove_program_space): Update.\n\t(number_of_program_spaces): Remove.\n\t(print_program_space, update_address_spaces): Update.\n\t* progspace.h (program_spaces): Change type.\n\t(ALL_PSPACES): Remove.\n\t(number_of_program_spaces): Don't declare.\n\t(struct program_space) <next>: Remove.",
    "tree": {
      "sha": "e7df63b540b33dc1f070c3394b1ad942121470eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e7df63b540b33dc1f070c3394b1ad942121470eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94c93c35b50d0783fdfda277508d0ae6c3e372fb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94c93c35b50d0783fdfda277508d0ae6c3e372fb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94c93c35b50d0783fdfda277508d0ae6c3e372fb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94c93c35b50d0783fdfda277508d0ae6c3e372fb/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1fd1ac9def557cbb7570cf90178a00cb26e7fef"
    }
  ],
  "stats": {
    "total": 678,
    "additions": 309,
    "deletions": 369
  },
  "files": [
    {
      "sha": "747f4c3cb64c1c6003be7a98aea90dbf882fa14a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1,3 +1,38 @@\n+2020-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (set_symbol_cache_size)\n+\t(maintenance_print_symbol_cache, maintenance_flush_symbol_cache)\n+\t(maintenance_print_symbol_cache_statistics): Update.\n+\t* symmisc.c (print_symbol_bcache_statistics)\n+\t(print_objfile_statistics, maintenance_print_objfiles)\n+\t(maintenance_info_symtabs, maintenance_check_symtabs)\n+\t(maintenance_expand_symtabs, maintenance_info_line_tables):\n+\tUpdate.\n+\t* symfile-debug.c (set_debug_symfile): Update.\n+\t* source.c (forget_cached_source_info): Update.\n+\t* python/python.c (gdbpy_progspaces): Update.\n+\t* psymtab.c (maintenance_info_psymtabs): Update.\n+\t* probe.c (parse_probes): Update.\n+\t* linespec.c (iterate_over_all_matching_symtabs)\n+\t(collect_symtabs_from_filename, search_minsyms_for_name): Update.\n+\t* guile/scm-progspace.c (gdbscm_progspaces): Update.\n+\t* exec.c (exec_target::close): Update.\n+\t* ada-tasks.c (ada_tasks_new_objfile_observer): Update.\n+\t* breakpoint.c (print_one_breakpoint_location)\n+\t(create_longjmp_master_breakpoint)\n+\t(create_std_terminate_master_breakpoint): Update.\n+\t* progspace.c (program_spaces): Now a std::vector.\n+\t(maybe_new_address_space): Update.\n+\t(add_program_space): Remove.\n+\t(program_space::program_space): Update.\n+\t(remove_program_space): Update.\n+\t(number_of_program_spaces): Remove.\n+\t(print_program_space, update_address_spaces): Update.\n+\t* progspace.h (program_spaces): Change type.\n+\t(ALL_PSPACES): Remove.\n+\t(number_of_program_spaces): Don't declare.\n+\t(struct program_space) <next>: Remove.\n+\n 2020-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* mi/mi-cmd-file.c (mi_cmd_file_list_shared_libraries): Update."
    },
    {
      "sha": "266335387a317e86e6f8cfc10ebc22b3c0dccba9",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1433,9 +1433,7 @@ ada_tasks_new_objfile_observer (struct objfile *objfile)\n     {\n       /* All objfiles are being cleared, so we should clear all\n \t our caches for all program spaces.  */\n-      struct program_space *pspace;\n-\n-      for (pspace = program_spaces; pspace != NULL; pspace = pspace->next)\n+      for (struct program_space *pspace : program_spaces)\n         ada_tasks_invalidate_pspace_data (pspace);\n     }\n   else"
    },
    {
      "sha": "22ddb3d5e811bdb8e1d998ee1d478405dc56d402",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 113,
      "deletions": 115,
      "changes": 228,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -3224,153 +3224,151 @@ create_overlay_event_breakpoint (void)\n static void\n create_longjmp_master_breakpoint (void)\n {\n-  struct program_space *pspace;\n-\n   scoped_restore_current_program_space restore_pspace;\n \n-  ALL_PSPACES (pspace)\n-  {\n-    set_current_program_space (pspace);\n+  for (struct program_space *pspace : program_spaces)\n+    {\n+      set_current_program_space (pspace);\n \n-    for (objfile *objfile : current_program_space->objfiles ())\n-      {\n-\tint i;\n-\tstruct gdbarch *gdbarch;\n-\tstruct breakpoint_objfile_data *bp_objfile_data;\n+      for (objfile *objfile : current_program_space->objfiles ())\n+\t{\n+\t  int i;\n+\t  struct gdbarch *gdbarch;\n+\t  struct breakpoint_objfile_data *bp_objfile_data;\n \n-\tgdbarch = objfile->arch ();\n+\t  gdbarch = objfile->arch ();\n \n-\tbp_objfile_data = get_breakpoint_objfile_data (objfile);\n+\t  bp_objfile_data = get_breakpoint_objfile_data (objfile);\n \n-\tif (!bp_objfile_data->longjmp_searched)\n-\t  {\n-\t    std::vector<probe *> ret\n-\t      = find_probes_in_objfile (objfile, \"libc\", \"longjmp\");\n+\t  if (!bp_objfile_data->longjmp_searched)\n+\t    {\n+\t      std::vector<probe *> ret\n+\t\t= find_probes_in_objfile (objfile, \"libc\", \"longjmp\");\n \n-\t    if (!ret.empty ())\n-\t      {\n-\t\t/* We are only interested in checking one element.  */\n-\t\tprobe *p = ret[0];\n+\t      if (!ret.empty ())\n+\t\t{\n+\t\t  /* We are only interested in checking one element.  */\n+\t\t  probe *p = ret[0];\n \n-\t\tif (!p->can_evaluate_arguments ())\n-\t\t  {\n-\t\t    /* We cannot use the probe interface here, because it does\n-\t\t       not know how to evaluate arguments.  */\n-\t\t    ret.clear ();\n-\t\t  }\n-\t      }\n-\t    bp_objfile_data->longjmp_probes = ret;\n-\t    bp_objfile_data->longjmp_searched = 1;\n-\t  }\n+\t\t  if (!p->can_evaluate_arguments ())\n+\t\t    {\n+\t\t      /* We cannot use the probe interface here,\n+\t\t\t because it does not know how to evaluate\n+\t\t\t arguments.  */\n+\t\t      ret.clear ();\n+\t\t    }\n+\t\t}\n+\t      bp_objfile_data->longjmp_probes = ret;\n+\t      bp_objfile_data->longjmp_searched = 1;\n+\t    }\n \n-\tif (!bp_objfile_data->longjmp_probes.empty ())\n-\t  {\n-\t    for (probe *p : bp_objfile_data->longjmp_probes)\n-\t      {\n-\t\tstruct breakpoint *b;\n-\n-\t\tb = create_internal_breakpoint (gdbarch,\n-\t\t\t\t\t\tp->get_relocated_address (objfile),\n-\t\t\t\t\t\tbp_longjmp_master,\n-\t\t\t\t\t\t&internal_breakpoint_ops);\n-\t\tb->location = new_probe_location (\"-probe-stap libc:longjmp\");\n-\t\tb->enable_state = bp_disabled;\n-\t      }\n+\t  if (!bp_objfile_data->longjmp_probes.empty ())\n+\t    {\n+\t      for (probe *p : bp_objfile_data->longjmp_probes)\n+\t\t{\n+\t\t  struct breakpoint *b;\n+\n+\t\t  b = create_internal_breakpoint (gdbarch,\n+\t\t\t\t\t\t  p->get_relocated_address (objfile),\n+\t\t\t\t\t\t  bp_longjmp_master,\n+\t\t\t\t\t\t  &internal_breakpoint_ops);\n+\t\t  b->location = new_probe_location (\"-probe-stap libc:longjmp\");\n+\t\t  b->enable_state = bp_disabled;\n+\t\t}\n \n-\t    continue;\n-\t  }\n+\t      continue;\n+\t    }\n \n-\tif (!gdbarch_get_longjmp_target_p (gdbarch))\n-\t  continue;\n+\t  if (!gdbarch_get_longjmp_target_p (gdbarch))\n+\t    continue;\n \n-\tfor (i = 0; i < NUM_LONGJMP_NAMES; i++)\n-\t  {\n-\t    struct breakpoint *b;\n-\t    const char *func_name;\n-\t    CORE_ADDR addr;\n-\t    struct explicit_location explicit_loc;\n+\t  for (i = 0; i < NUM_LONGJMP_NAMES; i++)\n+\t    {\n+\t      struct breakpoint *b;\n+\t      const char *func_name;\n+\t      CORE_ADDR addr;\n+\t      struct explicit_location explicit_loc;\n \n-\t    if (msym_not_found_p (bp_objfile_data->longjmp_msym[i].minsym))\n-\t      continue;\n+\t      if (msym_not_found_p (bp_objfile_data->longjmp_msym[i].minsym))\n+\t\tcontinue;\n \n-\t    func_name = longjmp_names[i];\n-\t    if (bp_objfile_data->longjmp_msym[i].minsym == NULL)\n-\t      {\n-\t\tstruct bound_minimal_symbol m;\n+\t      func_name = longjmp_names[i];\n+\t      if (bp_objfile_data->longjmp_msym[i].minsym == NULL)\n+\t\t{\n+\t\t  struct bound_minimal_symbol m;\n \n-\t\tm = lookup_minimal_symbol_text (func_name, objfile);\n-\t\tif (m.minsym == NULL)\n-\t\t  {\n-\t\t    /* Prevent future lookups in this objfile.  */\n-\t\t    bp_objfile_data->longjmp_msym[i].minsym = &msym_not_found;\n-\t\t    continue;\n-\t\t  }\n-\t\tbp_objfile_data->longjmp_msym[i] = m;\n-\t      }\n+\t\t  m = lookup_minimal_symbol_text (func_name, objfile);\n+\t\t  if (m.minsym == NULL)\n+\t\t    {\n+\t\t      /* Prevent future lookups in this objfile.  */\n+\t\t      bp_objfile_data->longjmp_msym[i].minsym = &msym_not_found;\n+\t\t      continue;\n+\t\t    }\n+\t\t  bp_objfile_data->longjmp_msym[i] = m;\n+\t\t}\n \n-\t    addr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->longjmp_msym[i]);\n-\t    b = create_internal_breakpoint (gdbarch, addr, bp_longjmp_master,\n-\t\t\t\t\t    &internal_breakpoint_ops);\n-\t    initialize_explicit_location (&explicit_loc);\n-\t    explicit_loc.function_name = ASTRDUP (func_name);\n-\t    b->location = new_explicit_location (&explicit_loc);\n-\t    b->enable_state = bp_disabled;\n-\t  }\n-      }\n-  }\n+\t      addr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->longjmp_msym[i]);\n+\t      b = create_internal_breakpoint (gdbarch, addr, bp_longjmp_master,\n+\t\t\t\t\t      &internal_breakpoint_ops);\n+\t      initialize_explicit_location (&explicit_loc);\n+\t      explicit_loc.function_name = ASTRDUP (func_name);\n+\t      b->location = new_explicit_location (&explicit_loc);\n+\t      b->enable_state = bp_disabled;\n+\t    }\n+\t}\n+    }\n }\n \n /* Create a master std::terminate breakpoint.  */\n static void\n create_std_terminate_master_breakpoint (void)\n {\n-  struct program_space *pspace;\n   const char *const func_name = \"std::terminate()\";\n \n   scoped_restore_current_program_space restore_pspace;\n \n-  ALL_PSPACES (pspace)\n-  {\n-    CORE_ADDR addr;\n+  for (struct program_space *pspace : program_spaces)\n+    {\n+      CORE_ADDR addr;\n \n-    set_current_program_space (pspace);\n+      set_current_program_space (pspace);\n \n-    for (objfile *objfile : current_program_space->objfiles ())\n-      {\n-\tstruct breakpoint *b;\n-\tstruct breakpoint_objfile_data *bp_objfile_data;\n-\tstruct explicit_location explicit_loc;\n+      for (objfile *objfile : current_program_space->objfiles ())\n+\t{\n+\t  struct breakpoint *b;\n+\t  struct breakpoint_objfile_data *bp_objfile_data;\n+\t  struct explicit_location explicit_loc;\n \n-\tbp_objfile_data = get_breakpoint_objfile_data (objfile);\n+\t  bp_objfile_data = get_breakpoint_objfile_data (objfile);\n \n-\tif (msym_not_found_p (bp_objfile_data->terminate_msym.minsym))\n-\t  continue;\n+\t  if (msym_not_found_p (bp_objfile_data->terminate_msym.minsym))\n+\t    continue;\n \n-\tif (bp_objfile_data->terminate_msym.minsym == NULL)\n-\t  {\n-\t    struct bound_minimal_symbol m;\n+\t  if (bp_objfile_data->terminate_msym.minsym == NULL)\n+\t    {\n+\t      struct bound_minimal_symbol m;\n \n-\t    m = lookup_minimal_symbol (func_name, NULL, objfile);\n-\t    if (m.minsym == NULL || (MSYMBOL_TYPE (m.minsym) != mst_text\n-\t\t\t\t     && MSYMBOL_TYPE (m.minsym) != mst_file_text))\n-\t      {\n-\t\t/* Prevent future lookups in this objfile.  */\n-\t\tbp_objfile_data->terminate_msym.minsym = &msym_not_found;\n-\t\tcontinue;\n-\t      }\n-\t    bp_objfile_data->terminate_msym = m;\n-\t  }\n+\t      m = lookup_minimal_symbol (func_name, NULL, objfile);\n+\t      if (m.minsym == NULL || (MSYMBOL_TYPE (m.minsym) != mst_text\n+\t\t\t\t       && MSYMBOL_TYPE (m.minsym) != mst_file_text))\n+\t\t{\n+\t\t  /* Prevent future lookups in this objfile.  */\n+\t\t  bp_objfile_data->terminate_msym.minsym = &msym_not_found;\n+\t\t  continue;\n+\t\t}\n+\t      bp_objfile_data->terminate_msym = m;\n+\t    }\n \n-\taddr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->terminate_msym);\n-\tb = create_internal_breakpoint (objfile->arch (), addr,\n-\t\t\t\t\tbp_std_terminate_master,\n-\t\t\t\t\t&internal_breakpoint_ops);\n-\tinitialize_explicit_location (&explicit_loc);\n-\texplicit_loc.function_name = ASTRDUP (func_name);\n-\tb->location = new_explicit_location (&explicit_loc);\n-\tb->enable_state = bp_disabled;\n-      }\n-  }\n+\t  addr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->terminate_msym);\n+\t  b = create_internal_breakpoint (objfile->arch (), addr,\n+\t\t\t\t\t  bp_std_terminate_master,\n+\t\t\t\t\t  &internal_breakpoint_ops);\n+\t  initialize_explicit_location (&explicit_loc);\n+\t  explicit_loc.function_name = ASTRDUP (func_name);\n+\t  b->location = new_explicit_location (&explicit_loc);\n+\t  b->enable_state = bp_disabled;\n+\t}\n+    }\n }\n \n /* Install a master breakpoint on the unwinder's debug hook.  */\n@@ -6088,7 +6086,7 @@ print_one_breakpoint_location (struct breakpoint *b,\n \t   there are several.  Always display for MI. */\n \tif (allflag\n \t    || (!gdbarch_has_global_breakpoints (target_gdbarch ())\n-\t\t&& (number_of_program_spaces () > 1\n+\t\t&& (program_spaces.size () > 1\n \t\t    || number_of_inferiors () > 1)\n \t\t/* LOC is for existing B, it cannot be in\n \t\t   moribund_locations and thus having NULL OWNER.  */"
    },
    {
      "sha": "a2added5e2295ea8cc8558bbe8fdb3b2d638274f",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -177,10 +177,9 @@ exec_close (void)\n void\n exec_target::close ()\n {\n-  struct program_space *ss;\n   scoped_restore_current_program_space restore_pspace;\n \n-  ALL_PSPACES (ss)\n+  for (struct program_space *ss : program_spaces)\n     {\n       set_current_program_space (ss);\n       clear_section_table (current_target_sections);"
    },
    {
      "sha": "49c3e36227fb73d04ab00294881f20269c6f5e44",
      "filename": "gdb/guile/scm-progspace.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/guile/scm-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/guile/scm-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-progspace.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -353,17 +353,16 @@ gdbscm_current_progspace (void)\n static SCM\n gdbscm_progspaces (void)\n {\n-  struct program_space *ps;\n   SCM result;\n \n   result = SCM_EOL;\n \n-  ALL_PSPACES (ps)\n-  {\n-    SCM item = psscm_scm_from_pspace (ps);\n+  for (struct program_space *ps : program_spaces)\n+    {\n+      SCM item = psscm_scm_from_pspace (ps);\n \n-    result = scm_cons (item, result);\n-  }\n+      result = scm_cons (item, result);\n+    }\n \n   return scm_reverse_x (result, SCM_EOL);\n }"
    },
    {
      "sha": "1f289873f5e1aced14c76a5b129ade841cdf8153",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 65,
      "deletions": 71,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1133,58 +1133,56 @@ iterate_over_all_matching_symtabs\n    struct program_space *search_pspace, bool include_inline,\n    gdb::function_view<symbol_found_callback_ftype> callback)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n-  {\n-    if (search_pspace != NULL && search_pspace != pspace)\n-      continue;\n-    if (pspace->executing_startup)\n-      continue;\n+  for (struct program_space *pspace : program_spaces)\n+    {\n+      if (search_pspace != NULL && search_pspace != pspace)\n+\tcontinue;\n+      if (pspace->executing_startup)\n+\tcontinue;\n \n-    set_current_program_space (pspace);\n+      set_current_program_space (pspace);\n \n-    for (objfile *objfile : current_program_space->objfiles ())\n-      {\n-\tif (objfile->sf)\n-\t  objfile->sf->qf->expand_symtabs_matching (objfile,\n-\t\t\t\t\t\t    NULL,\n-\t\t\t\t\t\t    &lookup_name,\n-\t\t\t\t\t\t    NULL, NULL,\n-\t\t\t\t\t\t    search_domain);\n-\n-\tfor (compunit_symtab *cu : objfile->compunits ())\n-\t  {\n-\t    struct symtab *symtab = COMPUNIT_FILETABS (cu);\n+      for (objfile *objfile : current_program_space->objfiles ())\n+\t{\n+\t  if (objfile->sf)\n+\t    objfile->sf->qf->expand_symtabs_matching (objfile,\n+\t\t\t\t\t\t      NULL,\n+\t\t\t\t\t\t      &lookup_name,\n+\t\t\t\t\t\t      NULL, NULL,\n+\t\t\t\t\t\t      search_domain);\n+\n+\t  for (compunit_symtab *cu : objfile->compunits ())\n+\t    {\n+\t      struct symtab *symtab = COMPUNIT_FILETABS (cu);\n \n-\t    iterate_over_file_blocks (symtab, lookup_name, name_domain,\n-\t\t\t\t      callback);\n+\t      iterate_over_file_blocks (symtab, lookup_name, name_domain,\n+\t\t\t\t\tcallback);\n \n-\t    if (include_inline)\n-\t      {\n-\t\tconst struct block *block;\n-\t\tint i;\n+\t      if (include_inline)\n+\t\t{\n+\t\t  const struct block *block;\n+\t\t  int i;\n \n-\t\tfor (i = FIRST_LOCAL_BLOCK;\n-\t\t     i < BLOCKVECTOR_NBLOCKS (SYMTAB_BLOCKVECTOR (symtab));\n-\t\t     i++)\n-\t\t  {\n-\t\t    block = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), i);\n-\t\t    state->language->la_iterate_over_symbols\n-\t\t      (block, lookup_name, name_domain,\n-\t\t       [&] (block_symbol *bsym)\n-\t\t       {\n-\t\t\t /* Restrict calls to CALLBACK to symbols\n-\t\t\t    representing inline symbols only.  */\n-\t\t\t if (SYMBOL_INLINED (bsym->symbol))\n-\t\t\t   return callback (bsym);\n-\t\t\t return true;\n-\t\t       });\n-\t\t  }\n-\t      }\n-\t  }\n-      }\n-  }\n+\t\t  for (i = FIRST_LOCAL_BLOCK;\n+\t\t       i < BLOCKVECTOR_NBLOCKS (SYMTAB_BLOCKVECTOR (symtab));\n+\t\t       i++)\n+\t\t    {\n+\t\t      block = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), i);\n+\t\t      state->language->la_iterate_over_symbols\n+\t\t\t(block, lookup_name, name_domain,\n+\t\t\t [&] (block_symbol *bsym)\n+\t\t\t {\n+\t\t\t   /* Restrict calls to CALLBACK to symbols\n+\t\t\t      representing inline symbols only.  */\n+\t\t\t   if (SYMBOL_INLINED (bsym->symbol))\n+\t\t\t     return callback (bsym);\n+\t\t\t   return true;\n+\t\t\t });\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n }\n \n /* Returns the block to be used for symbol searches from\n@@ -3786,9 +3784,7 @@ collect_symtabs_from_filename (const char *file,\n   /* Find that file's data.  */\n   if (search_pspace == NULL)\n     {\n-      struct program_space *pspace;\n-\n-      ALL_PSPACES (pspace)\n+      for (struct program_space *pspace : program_spaces)\n         {\n \t  if (pspace->executing_startup)\n \t    continue;\n@@ -4335,29 +4331,27 @@ search_minsyms_for_name (struct collect_info *info,\n \n   if (symtab == NULL)\n     {\n-      struct program_space *pspace;\n-\n-      ALL_PSPACES (pspace)\n-      {\n-\tif (search_pspace != NULL && search_pspace != pspace)\n-\t  continue;\n-\tif (pspace->executing_startup)\n-\t  continue;\n+      for (struct program_space *pspace : program_spaces)\n+\t{\n+\t  if (search_pspace != NULL && search_pspace != pspace)\n+\t    continue;\n+\t  if (pspace->executing_startup)\n+\t    continue;\n \n-\tset_current_program_space (pspace);\n+\t  set_current_program_space (pspace);\n \n-\tfor (objfile *objfile : current_program_space->objfiles ())\n-\t  {\n-\t    iterate_over_minimal_symbols (objfile, name,\n-\t\t\t\t\t  [&] (struct minimal_symbol *msym)\n-\t\t\t\t\t  {\n-\t\t\t\t\t    add_minsym (msym, objfile, nullptr,\n-\t\t\t\t\t\t\tinfo->state->list_mode,\n-\t\t\t\t\t\t\t&minsyms);\n-\t\t\t\t\t    return false;\n-\t\t\t\t\t  });\n-\t  }\n-      }\n+\t  for (objfile *objfile : current_program_space->objfiles ())\n+\t    {\n+\t      iterate_over_minimal_symbols (objfile, name,\n+\t\t\t\t\t    [&] (struct minimal_symbol *msym)\n+\t\t\t\t\t    {\n+\t\t\t\t\t      add_minsym (msym, objfile, nullptr,\n+\t\t\t\t\t\t\t  info->state->list_mode,\n+\t\t\t\t\t\t\t  &minsyms);\n+\t\t\t\t\t      return false;\n+\t\t\t\t\t    });\n+\t    }\n+\t}\n     }\n   else\n     {"
    },
    {
      "sha": "dca02f0780e73a4bb33163aa32dc9259bf810f54",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -185,9 +185,7 @@ parse_probes (const struct event_location *location,\n     }\n   else\n     {\n-      struct program_space *pspace;\n-\n-      ALL_PSPACES (pspace)\n+      for (struct program_space *pspace : program_spaces)\n \tparse_probes_in_pspace (spops, pspace, objfile_namestr,\n \t\t\t\tprovider, name, &result);\n     }"
    },
    {
      "sha": "a0b14a6d2eb7cfec0af972e0343a57c11d3f3201",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 12,
      "deletions": 57,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -32,7 +32,7 @@\n int last_program_space_num = 0;\n \n /* The head of the program spaces list.  */\n-struct program_space *program_spaces;\n+std::vector<struct program_space *> program_spaces;\n \n /* Pointer to the current program space.  */\n struct program_space *current_program_space;\n@@ -80,7 +80,7 @@ maybe_new_address_space (void)\n   if (shared_aspace)\n     {\n       /* Just return the first in the list.  */\n-      return program_spaces->aspace;\n+      return program_spaces[0]->aspace;\n     }\n \n   return new_address_space ();\n@@ -109,44 +109,17 @@ init_address_spaces (void)\n \n \f\n \n-/* Add a program space from the program spaces list.  */\n-\n-static void\n-add_program_space (program_space *pspace)\n-{\n-  if (program_spaces == NULL)\n-    program_spaces = pspace;\n-  else\n-    {\n-      program_space *last;\n-\n-      for (last = program_spaces; last->next != NULL; last = last->next)\n-\t;\n-      last->next = pspace;\n-    }\n-}\n-\n /* Remove a program space from the program spaces list.  */\n \n static void\n remove_program_space (program_space *pspace)\n {\n-  program_space *ss, **ss_link;\n   gdb_assert (pspace != NULL);\n \n-  ss = program_spaces;\n-  ss_link = &program_spaces;\n-  while (ss != NULL)\n-    {\n-      if (ss == pspace)\n-\t{\n-\t  *ss_link = ss->next;\n-\t  return;\n-\t}\n-\n-      ss_link = &ss->next;\n-      ss = *ss_link;\n-    }\n+  auto iter = std::find (program_spaces.begin (), program_spaces.end (),\n+\t\t\t pspace);\n+  gdb_assert (iter != program_spaces.end ());\n+  program_spaces.erase (iter);\n }\n \n /* See progspace.h.  */\n@@ -157,7 +130,7 @@ program_space::program_space (address_space *aspace_)\n {\n   program_space_alloc_data (this);\n \n-  add_program_space (this);\n+  program_spaces.push_back (this);\n }\n \n /* See progspace.h.  */\n@@ -301,11 +274,10 @@ program_space_empty_p (struct program_space *pspace)\n static void\n print_program_space (struct ui_out *uiout, int requested)\n {\n-  struct program_space *pspace;\n   int count = 0;\n \n   /* Compute number of pspaces we will print.  */\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       if (requested != -1 && pspace->num != requested)\n \tcontinue;\n@@ -322,7 +294,7 @@ print_program_space (struct ui_out *uiout, int requested)\n   uiout->table_header (17, ui_left, \"exec\", \"Executable\");\n   uiout->table_body ();\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       struct inferior *inf;\n       int printed_header;\n@@ -375,9 +347,7 @@ print_program_space (struct ui_out *uiout, int requested)\n static int\n valid_program_space_id (int num)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     if (pspace->num == num)\n       return 1;\n \n@@ -403,20 +373,6 @@ maintenance_info_program_spaces_command (const char *args, int from_tty)\n   print_program_space (current_uiout, requested);\n }\n \n-/* Simply returns the count of program spaces.  */\n-\n-int\n-number_of_program_spaces (void)\n-{\n-  struct program_space *pspace;\n-  int count = 0;\n-\n-  ALL_PSPACES (pspace)\n-    count++;\n-\n-  return count;\n-}\n-\n /* Update all program spaces matching to address spaces.  The user may\n    have created several program spaces, and loaded executables into\n    them before connecting to the target interface that will create the\n@@ -432,7 +388,6 @@ void\n update_address_spaces (void)\n {\n   int shared_aspace = gdbarch_has_shared_address_space (target_gdbarch ());\n-  struct program_space *pspace;\n   struct inferior *inf;\n \n   init_address_spaces ();\n@@ -442,11 +397,11 @@ update_address_spaces (void)\n       struct address_space *aspace = new_address_space ();\n \n       free_address_space (current_program_space->aspace);\n-      ALL_PSPACES (pspace)\n+      for (struct program_space *pspace : program_spaces)\n \tpspace->aspace = aspace;\n     }\n   else\n-    ALL_PSPACES (pspace)\n+    for (struct program_space *pspace : program_spaces)\n       {\n \tfree_address_space (pspace->aspace);\n \tpspace->aspace = new_address_space ();"
    },
    {
      "sha": "099b4dc0b3a4c4df4d5b70fd23159aa8ede9eb45",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -28,6 +28,7 @@\n #include \"gdbsupport/next-iterator.h\"\n #include \"gdbsupport/safe-iterator.h\"\n #include <list>\n+#include <vector>\n \n struct target_ops;\n struct bfd;\n@@ -272,9 +273,6 @@ struct program_space\n   next_adapter<struct so_list> solibs () const;\n \n \n-  /* Pointer to next in linked list.  */\n-  struct program_space *next = NULL;\n-\n   /* Unique ID number.  */\n   int num = 0;\n \n@@ -369,17 +367,11 @@ struct address_space\n #define current_target_sections (&current_program_space->target_sections)\n \n /* The list of all program spaces.  There's always at least one.  */\n-extern struct program_space *program_spaces;\n+extern std::vector<struct program_space *>program_spaces;\n \n /* The current program space.  This is always non-null.  */\n extern struct program_space *current_program_space;\n \n-#define ALL_PSPACES(pspace) \\\n-  for ((pspace) = program_spaces; (pspace) != NULL; (pspace) = (pspace)->next)\n-\n-/* Returns the number of program spaces listed.  */\n-extern int number_of_program_spaces (void);\n-\n /* Returns true iff there's no inferior bound to PSPACE.  */\n extern int program_space_empty_p (struct program_space *pspace);\n "
    },
    {
      "sha": "1fce7a3983848b8eac11553d8fcd5026c8be0a63",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1994,12 +1994,10 @@ maintenance_print_psymbols (const char *args, int from_tty)\n static void\n maintenance_info_psymtabs (const char *regexp, int from_tty)\n {\n-  struct program_space *pspace;\n-\n   if (regexp)\n     re_comp (regexp);\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tstruct gdbarch *gdbarch = objfile->arch ();"
    },
    {
      "sha": "67f362b852d03ea195340d7a62929a606f916599",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1350,19 +1350,17 @@ gdbpy_print_stack_or_quit ()\n static PyObject *\n gdbpy_progspaces (PyObject *unused1, PyObject *unused2)\n {\n-  struct program_space *ps;\n-\n   gdbpy_ref<> list (PyList_New (0));\n   if (list == NULL)\n     return NULL;\n \n-  ALL_PSPACES (ps)\n-  {\n-    gdbpy_ref<> item = pspace_to_pspace_object (ps);\n+  for (struct program_space *ps : program_spaces)\n+    {\n+      gdbpy_ref<> item = pspace_to_pspace_object (ps);\n \n-    if (item == NULL || PyList_Append (list.get (), item.get ()) == -1)\n-      return NULL;\n-  }\n+      if (item == NULL || PyList_Append (list.get (), item.get ()) == -1)\n+\treturn NULL;\n+    }\n \n   return list.release ();\n }"
    },
    {
      "sha": "b94c6af487d29a3b5e26ca92a912a4558aa5fdbd",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -421,9 +421,7 @@ forget_cached_source_info_for_objfile (struct objfile *objfile)\n void\n forget_cached_source_info (void)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tforget_cached_source_info_for_objfile (objfile);"
    },
    {
      "sha": "203609c326bc3ca9732cd3dfc5fdb11a83d7370e",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -621,9 +621,7 @@ objfile_set_sym_fns (struct objfile *objfile, const struct sym_fns *sf)\n static void\n set_debug_symfile (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tif (debug_symfile)"
    },
    {
      "sha": "a00009fc066cac47ab2e1829acb23ff96cf7c245",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 61,
      "deletions": 73,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -61,9 +61,7 @@ static void print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n void\n print_symbol_bcache_statistics (void)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tQUIT;\n@@ -78,64 +76,63 @@ print_symbol_bcache_statistics (void)\n void\n print_objfile_statistics (void)\n {\n-  struct program_space *pspace;\n   int i, linetables, blockvectors;\n \n-  ALL_PSPACES (pspace)\n-  for (objfile *objfile : pspace->objfiles ())\n-    {\n-      QUIT;\n-      printf_filtered (_(\"Statistics for '%s':\\n\"), objfile_name (objfile));\n-      if (OBJSTAT (objfile, n_stabs) > 0)\n-\tprintf_filtered (_(\"  Number of \\\"stab\\\" symbols read: %d\\n\"),\n-\t\t\t OBJSTAT (objfile, n_stabs));\n-      if (objfile->per_bfd->n_minsyms > 0)\n-\tprintf_filtered (_(\"  Number of \\\"minimal\\\" symbols read: %d\\n\"),\n-\t\t\t objfile->per_bfd->n_minsyms);\n-      if (OBJSTAT (objfile, n_psyms) > 0)\n-\tprintf_filtered (_(\"  Number of \\\"partial\\\" symbols read: %d\\n\"),\n-\t\t\t OBJSTAT (objfile, n_psyms));\n-      if (OBJSTAT (objfile, n_syms) > 0)\n-\tprintf_filtered (_(\"  Number of \\\"full\\\" symbols read: %d\\n\"),\n-\t\t\t OBJSTAT (objfile, n_syms));\n-      if (OBJSTAT (objfile, n_types) > 0)\n-\tprintf_filtered (_(\"  Number of \\\"types\\\" defined: %d\\n\"),\n-\t\t\t OBJSTAT (objfile, n_types));\n-      if (objfile->sf)\n-\tobjfile->sf->qf->print_stats (objfile);\n-      i = linetables = 0;\n-      for (compunit_symtab *cu : objfile->compunits ())\n-\t{\n-\t  for (symtab *s : compunit_filetabs (cu))\n-\t    {\n-\t      i++;\n-\t      if (SYMTAB_LINETABLE (s) != NULL)\n-\t\tlinetables++;\n-\t    }\n-\t}\n-      blockvectors = std::distance (objfile->compunits ().begin (),\n-\t\t\t\t    objfile->compunits ().end ());\n-      printf_filtered (_(\"  Number of symbol tables: %d\\n\"), i);\n-      printf_filtered (_(\"  Number of symbol tables with line tables: %d\\n\"),\n-\t\t       linetables);\n-      printf_filtered (_(\"  Number of symbol tables with blockvectors: %d\\n\"),\n-\t\t       blockvectors);\n-\n-      if (OBJSTAT (objfile, sz_strtab) > 0)\n-\tprintf_filtered (_(\"  Space used by string tables: %d\\n\"),\n-\t\t\t OBJSTAT (objfile, sz_strtab));\n-      printf_filtered (_(\"  Total memory used for objfile obstack: %s\\n\"),\n-\t\t       pulongest (obstack_memory_used (&objfile\n-\t\t\t\t\t\t       ->objfile_obstack)));\n-      printf_filtered (_(\"  Total memory used for BFD obstack: %s\\n\"),\n-\t\t       pulongest (obstack_memory_used (&objfile->per_bfd\n-\t\t\t\t\t\t       ->storage_obstack)));\n-      printf_filtered\n-\t(_(\"  Total memory used for psymbol cache: %d\\n\"),\n-\t objfile->partial_symtabs->psymbol_cache.memory_used ());\n-      printf_filtered (_(\"  Total memory used for string cache: %d\\n\"),\n-\t\t       objfile->per_bfd->string_cache.memory_used ());\n-    }\n+  for (struct program_space *pspace : program_spaces)\n+    for (objfile *objfile : pspace->objfiles ())\n+      {\n+\tQUIT;\n+\tprintf_filtered (_(\"Statistics for '%s':\\n\"), objfile_name (objfile));\n+\tif (OBJSTAT (objfile, n_stabs) > 0)\n+\t  printf_filtered (_(\"  Number of \\\"stab\\\" symbols read: %d\\n\"),\n+\t\t\t   OBJSTAT (objfile, n_stabs));\n+\tif (objfile->per_bfd->n_minsyms > 0)\n+\t  printf_filtered (_(\"  Number of \\\"minimal\\\" symbols read: %d\\n\"),\n+\t\t\t   objfile->per_bfd->n_minsyms);\n+\tif (OBJSTAT (objfile, n_psyms) > 0)\n+\t  printf_filtered (_(\"  Number of \\\"partial\\\" symbols read: %d\\n\"),\n+\t\t\t   OBJSTAT (objfile, n_psyms));\n+\tif (OBJSTAT (objfile, n_syms) > 0)\n+\t  printf_filtered (_(\"  Number of \\\"full\\\" symbols read: %d\\n\"),\n+\t\t\t   OBJSTAT (objfile, n_syms));\n+\tif (OBJSTAT (objfile, n_types) > 0)\n+\t  printf_filtered (_(\"  Number of \\\"types\\\" defined: %d\\n\"),\n+\t\t\t   OBJSTAT (objfile, n_types));\n+\tif (objfile->sf)\n+\t  objfile->sf->qf->print_stats (objfile);\n+\ti = linetables = 0;\n+\tfor (compunit_symtab *cu : objfile->compunits ())\n+\t  {\n+\t    for (symtab *s : compunit_filetabs (cu))\n+\t      {\n+\t\ti++;\n+\t\tif (SYMTAB_LINETABLE (s) != NULL)\n+\t\t  linetables++;\n+\t      }\n+\t  }\n+\tblockvectors = std::distance (objfile->compunits ().begin (),\n+\t\t\t\t      objfile->compunits ().end ());\n+\tprintf_filtered (_(\"  Number of symbol tables: %d\\n\"), i);\n+\tprintf_filtered (_(\"  Number of symbol tables with line tables: %d\\n\"),\n+\t\t\t linetables);\n+\tprintf_filtered (_(\"  Number of symbol tables with blockvectors: %d\\n\"),\n+\t\t\t blockvectors);\n+\n+\tif (OBJSTAT (objfile, sz_strtab) > 0)\n+\t  printf_filtered (_(\"  Space used by string tables: %d\\n\"),\n+\t\t\t   OBJSTAT (objfile, sz_strtab));\n+\tprintf_filtered (_(\"  Total memory used for objfile obstack: %s\\n\"),\n+\t\t\t pulongest (obstack_memory_used (&objfile\n+\t\t\t\t\t\t\t ->objfile_obstack)));\n+\tprintf_filtered (_(\"  Total memory used for BFD obstack: %s\\n\"),\n+\t\t\t pulongest (obstack_memory_used (&objfile->per_bfd\n+\t\t\t\t\t\t\t ->storage_obstack)));\n+\tprintf_filtered\n+\t  (_(\"  Total memory used for psymbol cache: %d\\n\"),\n+\t   objfile->partial_symtabs->psymbol_cache.memory_used ());\n+\tprintf_filtered (_(\"  Total memory used for string cache: %d\\n\"),\n+\t\t\t objfile->per_bfd->string_cache.memory_used ());\n+      }\n }\n \n static void\n@@ -762,14 +759,12 @@ maintenance_print_msymbols (const char *args, int from_tty)\n static void\n maintenance_print_objfiles (const char *regexp, int from_tty)\n {\n-  struct program_space *pspace;\n-\n   dont_repeat ();\n \n   if (regexp)\n     re_comp (regexp);\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tQUIT;\n@@ -784,14 +779,12 @@ maintenance_print_objfiles (const char *regexp, int from_tty)\n static void\n maintenance_info_symtabs (const char *regexp, int from_tty)\n {\n-  struct program_space *pspace;\n-\n   dont_repeat ();\n \n   if (regexp)\n     re_comp (regexp);\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \t/* We don't want to print anything for this objfile until we\n@@ -896,9 +889,7 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n static void\n maintenance_check_symtabs (const char *ignore, int from_tty)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \t/* We don't want to print anything for this objfile until we\n@@ -944,7 +935,6 @@ maintenance_check_symtabs (const char *ignore, int from_tty)\n static void\n maintenance_expand_symtabs (const char *args, int from_tty)\n {\n-  struct program_space *pspace;\n   char *regexp = NULL;\n \n   /* We use buildargv here so that we handle spaces in the regexp\n@@ -964,7 +954,7 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n   if (regexp)\n     re_comp (regexp);\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tif (objfile->sf)\n@@ -1065,14 +1055,12 @@ maintenance_print_one_line_table (struct symtab *symtab, void *data)\n static void\n maintenance_info_line_tables (const char *regexp, int from_tty)\n {\n-  struct program_space *pspace;\n-\n   dont_repeat ();\n \n   if (regexp != NULL)\n     re_comp (regexp);\n \n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n \tfor (compunit_symtab *cust : objfile->compunits ())"
    },
    {
      "sha": "b765a583c421ca0caa8451b49cc123ac5db72ad2",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94c93c35b50d0783fdfda277508d0ae6c3e372fb/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "patch": "@@ -1276,9 +1276,7 @@ get_symbol_cache (struct program_space *pspace)\n static void\n set_symbol_cache_size (unsigned int new_size)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       struct symbol_cache *cache = symbol_cache_key.get (pspace);\n \n@@ -1526,9 +1524,7 @@ symbol_cache_dump (const struct symbol_cache *cache)\n static void\n maintenance_print_symbol_cache (const char *args, int from_tty)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       struct symbol_cache *cache;\n \n@@ -1552,9 +1548,7 @@ maintenance_print_symbol_cache (const char *args, int from_tty)\n static void\n maintenance_flush_symbol_cache (const char *args, int from_tty)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       symbol_cache_flush (pspace);\n     }\n@@ -1597,9 +1591,7 @@ symbol_cache_stats (struct symbol_cache *cache)\n static void\n maintenance_print_symbol_cache_statistics (const char *args, int from_tty)\n {\n-  struct program_space *pspace;\n-\n-  ALL_PSPACES (pspace)\n+  for (struct program_space *pspace : program_spaces)\n     {\n       struct symbol_cache *cache;\n "
    }
  ]
}