{
  "sha": "64cb3757a9df273b990adf4f28333324edc3cae8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRjYjM3NTdhOWRmMjczYjk5MGFkZjRmMjgzMzMzMjRlZGMzY2FlOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-07T09:08:01Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-06T14:06:06Z"
    },
    "message": "gdb/python: New method to access list of register groups\n\nAdd a new method gdb.Architecture.register_groups which returns a new\nobject of type gdb.RegisterGroupsIterator.  This new iterator then\nreturns objects of type gdb.RegisterGroup.\n\nEach gdb.RegisterGroup object just wraps a single reggroup pointer,\nand (currently) has just one read-only property 'name' that is a\nstring, the name of the register group.\n\nAs with the previous commit (adding gdb.RegisterDescriptor) I made\ngdb.RegisterGroup an object rather than just a string in case we want\nto add additional properties in the future.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention additions to Python API.\n\t* python/py-arch.c (archpy_register_groups): New function.\n\t(arch_object_methods): Add 'register_groups' method.\n\t* python/py-registers.c (reggroup_iterator_object): New struct.\n\t(reggroup_object): New struct.\n\t(gdbpy_new_reggroup): New function.\n\t(gdbpy_reggroup_to_string): New function.\n\t(gdbpy_reggroup_name): New function.\n\t(gdbpy_reggroup_iter): New function.\n\t(gdbpy_reggroup_iter_next): New function.\n\t(gdbpy_new_reggroup_iterator): New function\n\t(gdbpy_initialize_registers): Register new types.\n\t(reggroup_iterator_object_type): Define new Python type.\n\t(gdbpy_reggroup_getset): New static global.\n\t(reggroup_object_type): Define new Python type.\n\t* python/python-internal.h\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-arch-reg-groups.exp: New file.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texi (Registers): Add @anchor for 'info registers\n\t<reggroup>' command.\n\t* python.texi (Architectures In Python): Document new\n\tregister_groups method.\n\t(Registers In Python): Document two new object types related to\n\tregister groups.",
    "tree": {
      "sha": "bd2f7edb9b8da04b018d532afa24b489f020499d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bd2f7edb9b8da04b018d532afa24b489f020499d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64cb3757a9df273b990adf4f28333324edc3cae8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64cb3757a9df273b990adf4f28333324edc3cae8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64cb3757a9df273b990adf4f28333324edc3cae8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64cb3757a9df273b990adf4f28333324edc3cae8/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b"
    }
  ],
  "stats": {
    "total": 371,
    "additions": 371,
    "deletions": 0
  },
  "files": [
    {
      "sha": "98096bf8cd80701eca8a2107285fcaedf0c5b351",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -1,3 +1,22 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention additions to Python API.\n+\t* python/py-arch.c (archpy_register_groups): New function.\n+\t(arch_object_methods): Add 'register_groups' method.\n+\t* python/py-registers.c (reggroup_iterator_object): New struct.\n+\t(reggroup_object): New struct.\n+\t(gdbpy_new_reggroup): New function.\n+\t(gdbpy_reggroup_to_string): New function.\n+\t(gdbpy_reggroup_name): New function.\n+\t(gdbpy_reggroup_iter): New function.\n+\t(gdbpy_reggroup_iter_next): New function.\n+\t(gdbpy_new_reggroup_iterator): New function\n+\t(gdbpy_initialize_registers): Register new types.\n+\t(reggroup_iterator_object_type): Define new Python type.\n+\t(gdbpy_reggroup_getset): New static global.\n+\t(reggroup_object_type): Define new Python type.\n+\t* python/python-internal.h\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.in (SUBDIR_PYTHON_SRCS): Add py-registers.c"
    },
    {
      "sha": "ded544d6400f2b30e606553592eafb9e658b7c02",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -125,6 +125,11 @@ GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n      gdb.RegisterDescriptor objects.  The new RegisterDescriptor is a\n      way to query the registers available for an architecture.\n \n+  ** New gdb.Architecture.register_groups method that returns a\n+     gdb.RegisterGroupIterator object, an iterator that returns\n+     gdb.RegisterGroup objects.  The new RegisterGroup is a way to\n+     discover the available register groups.\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "ee6a866258d55266ce75d586d8d6d89841cfd904",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texi (Registers): Add @anchor for 'info registers\n+\t<reggroup>' command.\n+\t* python.texi (Architectures In Python): Document new\n+\tregister_groups method.\n+\t(Registers In Python): Document two new object types related to\n+\tregister groups.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texi (Python API): Add new section to the menu."
    },
    {
      "sha": "fb6fd9eb8705a059a619cf864a80c3691390a98b",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -12435,6 +12435,7 @@ and vector registers (in the selected stack frame).\n Print the names and values of all registers, including floating-point\n and vector registers (in the selected stack frame).\n \n+@anchor{info_registers_reggroup}\n @item info registers @var{reggroup} @dots{}\n Print the name and value of the registers in each of the specified\n @var{reggroup}s.  The @var{reggroup} can be any of those returned by"
    },
    {
      "sha": "4fb994ca6d95d17dbdc7bbd708a4be7ed5aeb824",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -5725,6 +5725,13 @@ the name of a register group.  If @var{reggroup} is omitted, or is the\n empty string, then the register group @samp{all} is assumed.\n @end defun\n \n+@anchor{gdbpy_architecture_reggroups}\n+@defun Architecture.register_groups ()\n+Return a @code{gdb.RegisterGroupsIterator} (@pxref{Registers In\n+Python}) for all of the register groups available for the\n+@code{gdb.Architecture}.\n+@end defun\n+\n @node Registers In Python\n @subsubsection Registers In Python\n @cindex Registers In Python\n@@ -5748,6 +5755,31 @@ A @code{gdb.RegisterDescriptor} has the following read-only properties:\n The name of this register.\n @end defvar\n \n+Python code can also request from a @code{gdb.Architecture}\n+information about the set of register groups available on a given\n+architecture\n+(@pxref{gdbpy_architecture_reggroups,,@code{Architecture.register_groups}}).\n+\n+Every register can be a member of zero or more register groups.  Some\n+register groups are used internally within @value{GDBN} to control\n+things like which registers must be saved when calling into the\n+program being debugged (@pxref{Calling,,Calling Program Functions}).\n+Other register groups exist to allow users to easily see related sets\n+of registers in commands like @code{info registers}\n+(@pxref{info_registers_reggroup,,@code{info registers\n+@var{reggroup}}}).\n+\n+The register groups information is returned as a\n+@code{gdb.RegisterGroupsIterator}, which is an iterator that in turn\n+returns @code{gdb.RegisterGroup} objects.\n+\n+A @code{gdb.RegisterGroup} object has the following read-only\n+properties:\n+\n+@defvar RegisterGroup.name\n+A string that is the name of this register group.\n+@end defvar\n+\n @node TUI Windows In Python\n @subsubsection Implementing new TUI windows\n @cindex Python TUI Windows"
    },
    {
      "sha": "d9eaf81a30a76f57abd69586607eef3916a587f9",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -248,6 +248,20 @@ archpy_registers (PyObject *self, PyObject *args, PyObject *kw)\n   return gdbpy_new_register_descriptor_iterator (gdbarch, group_name);\n }\n \n+/* Implementation of gdb.Architecture.register_groups (self) -> Iterator.\n+   Returns an iterator that will give up all valid register groups in the\n+   architecture SELF.  */\n+\n+static PyObject *\n+archpy_register_groups (PyObject *self, PyObject *args)\n+{\n+  struct gdbarch *gdbarch = NULL;\n+\n+  /* Extract the gdbarch from the self object.  */\n+  ARCHPY_REQUIRE_VALID (self, gdbarch);\n+  return gdbpy_new_reggroup_iterator (gdbarch);\n+}\n+\n /* Initializes the Architecture class in the gdb module.  */\n \n int\n@@ -276,6 +290,10 @@ END_PC.\" },\n     \"registers ([ group-name ]) -> Iterator.\\n\\\n Return an iterator of register descriptors for the registers in register\\n\\\n group GROUP-NAME.\" },\n+  { \"register_groups\", archpy_register_groups,\n+    METH_NOARGS,\n+    \"register_groups () -> Iterator.\\n\\\n+Return an iterator over all of the register groups in this architecture.\" },\n   {NULL}  /* Sentinel */\n };\n "
    },
    {
      "sha": "db0fe37eecbabd4385e8dae2743865933334a355",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 195,
      "deletions": 0,
      "changes": 195,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -56,6 +56,67 @@ typedef struct {\n extern PyTypeObject register_descriptor_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"register_descriptor_object\");\n \n+/* Structure for iterator over register groups.  */\n+typedef struct {\n+  PyObject_HEAD\n+\n+  /* The last register group returned.  Initially this will be NULL.  */\n+  struct reggroup *reggroup;\n+\n+  /* Pointer back to the architecture we're finding registers for.  */\n+  struct gdbarch *gdbarch;\n+} reggroup_iterator_object;\n+\n+extern PyTypeObject reggroup_iterator_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"reggroup_iterator_object\");\n+\n+/* A register group object.  */\n+typedef struct {\n+  PyObject_HEAD\n+\n+  /* The register group being described.  */\n+  struct reggroup *reggroup;\n+} reggroup_object;\n+\n+extern PyTypeObject reggroup_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"reggroup_object\");\n+\n+/* Create a new gdb.RegisterGroup object wrapping REGGROUP.  */\n+\n+static PyObject *\n+gdbpy_new_reggroup (struct reggroup *reggroup)\n+{\n+  /* Create a new object and fill in its details.  */\n+  reggroup_object *group\n+    = PyObject_New (reggroup_object, &reggroup_object_type);\n+  if (group == NULL)\n+    return NULL;\n+  group->reggroup = reggroup;\n+  return (PyObject *) group;\n+}\n+\n+/* Convert a gdb.RegisterGroup to a string, it just returns the name of\n+   the register group.  */\n+\n+static PyObject *\n+gdbpy_reggroup_to_string (PyObject *self)\n+{\n+  reggroup_object *group = (reggroup_object *) self;\n+  struct reggroup *reggroup = group->reggroup;\n+\n+  const char *name = reggroup_name (reggroup);\n+  return PyString_FromString (name);\n+}\n+\n+/* Implement gdb.RegisterGroup.name (self) -> String.\n+   Return a string that is the name of this register group.  */\n+\n+static PyObject *\n+gdbpy_reggroup_name (PyObject *self, void *closure)\n+{\n+  return gdbpy_reggroup_to_string (self);\n+}\n+\n /* Create an return a new gdb.RegisterDescriptor object.  */\n static PyObject *\n gdbpy_new_register_descriptor (struct gdbarch *gdbarch,\n@@ -96,6 +157,54 @@ gdbpy_register_descriptor_name (PyObject *self, void *closure)\n   return gdbpy_register_descriptor_to_string (self);\n }\n \n+/* Return a reference to the gdb.RegisterGroupsIterator object.  */\n+\n+static PyObject *\n+gdbpy_reggroup_iter (PyObject *self)\n+{\n+  Py_INCREF (self);\n+  return self;\n+}\n+\n+/* Return the next gdb.RegisterGroup object from the iterator.  */\n+\n+static PyObject *\n+gdbpy_reggroup_iter_next (PyObject *self)\n+{\n+  reggroup_iterator_object *iter_obj\n+    = (reggroup_iterator_object *) self;\n+  struct gdbarch *gdbarch = iter_obj->gdbarch;\n+\n+  struct reggroup *next_group = reggroup_next (gdbarch, iter_obj->reggroup);\n+  if (next_group == NULL)\n+    {\n+      PyErr_SetString (PyExc_StopIteration, _(\"No more groups\"));\n+      return NULL;\n+    }\n+\n+  iter_obj->reggroup = next_group;\n+  return gdbpy_new_reggroup (iter_obj->reggroup);\n+}\n+\n+/* Return a new gdb.RegisterGroupsIterator over all the register groups in\n+   GDBARCH.  */\n+\n+PyObject *\n+gdbpy_new_reggroup_iterator (struct gdbarch *gdbarch)\n+{\n+  gdb_assert (gdbarch != nullptr);\n+\n+  /* Create a new object and fill in its internal state.  */\n+  reggroup_iterator_object *iter\n+    = PyObject_New (reggroup_iterator_object,\n+\t\t    &reggroup_iterator_object_type);\n+  if (iter == NULL)\n+    return NULL;\n+  iter->reggroup = NULL;\n+  iter->gdbarch = gdbarch;\n+  return (PyObject *) iter;\n+}\n+\n /* Create and return a new gdb.RegisterDescriptorIterator object which\n    will iterate over all registers in GROUP_NAME for GDBARCH.  If\n    GROUP_NAME is either NULL or the empty string then the ALL_REGGROUP is\n@@ -190,6 +299,22 @@ gdbpy_initialize_registers ()\n        (PyObject *) &register_descriptor_object_type) < 0)\n     return -1;\n \n+  reggroup_iterator_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&reggroup_iterator_object_type) < 0)\n+    return -1;\n+  if (gdb_pymodule_addobject\n+      (gdb_module, \"RegisterGroupsIterator\",\n+       (PyObject *) &reggroup_iterator_object_type) < 0)\n+    return -1;\n+\n+  reggroup_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&reggroup_object_type) < 0)\n+    return -1;\n+  if (gdb_pymodule_addobject\n+      (gdb_module, \"RegisterGroup\",\n+       (PyObject *) &reggroup_object_type) < 0)\n+    return -1;\n+\n   register_descriptor_iterator_object_type.tp_new = PyType_GenericNew;\n   if (PyType_Ready (&register_descriptor_iterator_object_type) < 0)\n     return -1;\n@@ -267,3 +392,73 @@ PyTypeObject register_descriptor_object_type = {\n   0,\t\t\t\t  /*tp_members */\n   gdbpy_register_descriptor_getset\t\t\t/*tp_getset */\n };\n+\n+PyTypeObject reggroup_iterator_object_type = {\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.RegisterGroupsIterator\",\t  /*tp_name*/\n+  sizeof (reggroup_iterator_object),\t\t/*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  0,\t\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  0,\t\t\t\t  /*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro*/\n+  0,\t\t\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_ITER,\t/*tp_flags*/\n+  \"GDB register groups iterator object\",\t/*tp_doc */\n+  0,\t\t\t\t  /*tp_traverse */\n+  0,\t\t\t\t  /*tp_clear */\n+  0,\t\t\t\t  /*tp_richcompare */\n+  0,\t\t\t\t  /*tp_weaklistoffset */\n+  gdbpy_reggroup_iter,\t\t  /*tp_iter */\n+  gdbpy_reggroup_iter_next,\t  /*tp_iternext */\n+  0\t\t\t\t  /*tp_methods */\n+};\n+\n+static gdb_PyGetSetDef gdbpy_reggroup_getset[] = {\n+  { \"name\", gdbpy_reggroup_name, NULL,\n+    \"The name of this register group.\", NULL },\n+  { NULL }  /* Sentinel */\n+};\n+\n+PyTypeObject reggroup_object_type = {\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.RegisterGroup\",\t\t  /*tp_name*/\n+  sizeof (reggroup_object),\t  /*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  0,\t\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  gdbpy_reggroup_to_string,\t  /*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro*/\n+  0,\t\t\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT,\t\t  /*tp_flags*/\n+  \"GDB register group object\",\t  /*tp_doc */\n+  0,\t\t\t\t  /*tp_traverse */\n+  0,\t\t\t\t  /*tp_clear */\n+  0,\t\t\t\t  /*tp_richcompare */\n+  0,\t\t\t\t  /*tp_weaklistoffset */\n+  0,\t\t\t\t  /*tp_iter */\n+  0,\t\t\t\t  /*tp_iternext */\n+  0,\t\t\t\t  /*tp_methods */\n+  0,\t\t\t\t  /*tp_members */\n+  gdbpy_reggroup_getset\t\t  /*tp_getset */\n+};"
    },
    {
      "sha": "1e6dcf3dbb0f4c654c283bff332fbadf90395518",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -475,6 +475,7 @@ PyObject *gdbarch_to_arch_object (struct gdbarch *gdbarch);\n \n PyObject *gdbpy_new_register_descriptor_iterator (struct gdbarch *gdbarch,\n \t\t\t\t\t\t  const char *group_name);\n+PyObject *gdbpy_new_reggroup_iterator (struct gdbarch *gdbarch);\n \n gdbpy_ref<thread_object> create_thread_object (struct thread_info *tp);\n gdbpy_ref<> thread_to_thread_object (thread_info *thr);;"
    },
    {
      "sha": "63fb5e667e055abad29cd512009e7a011cb7d78f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-arch-reg-groups.exp: New file.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-arch-reg-names.exp: New file."
    },
    {
      "sha": "ea9aa77b0faa4d3cbbd3633cb979df5463daa301",
      "filename": "gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64cb3757a9df273b990adf4f28333324edc3cae8/gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch-reg-groups.exp?ref=64cb3757a9df273b990adf4f28333324edc3cae8",
      "patch": "@@ -0,0 +1,87 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check the gdb.Architecture.register_groups functionality.\n+\n+load_lib gdb-python.exp\n+standard_testfile py-arch.c\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+if ![runto_main] {\n+   return -1\n+}\n+\n+# First, use 'maint print reggroups' to get a list of all register\n+# groups.\n+set groups {}\n+set test \"maint print reggroups\"\n+gdb_test_multiple $test $test {\n+    -re \".*Group\\[ \\t\\]+Type\\[ \\t\\]+\\r\\n\" {\n+\texp_continue\n+    }\n+    -re \"^ (\\[^ \\t\\]+)\\[ \\t\\]+\\[^\\r\\n\\]+\\r\\n\" {\n+\tlappend groups $expect_out(1,string)\n+\texp_continue\n+    }\n+    -re \"^$gdb_prompt \" {\n+    }\n+}\n+gdb_assert {[llength $groups] > 0} \\\n+    \"Found at least one register group\"\n+\n+# Now get the same register names using Python API.\n+gdb_py_test_silent_cmd \\\n+    \"python frame = gdb.selected_frame()\" \"get frame\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python arch = frame.architecture()\" \"get arch\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python groups = list (arch.register_groups ())\" \\\n+    \"get register groups\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python groups = map (lambda obj: obj.name, groups)\" \\\n+    \"convert groups to names\" 0\n+\n+set py_groups {}\n+gdb_test_multiple \"python print (\\\"\\\\n\\\".join (groups))\" \\\n+    \"register groups from python\" {\n+\t-re \"^python print \\[^\\r\\n\\]+\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-re \"^(\\[^\\r\\n\\]+)\\r\\n\" {\n+\t    lappend py_groups $expect_out(1,string)\n+\t    exp_continue\n+\t}\n+\t-re \"^$gdb_prompt \" {\n+\t}\n+    }\n+\n+gdb_assert {[llength $py_groups] > 0} \\\n+    \"Found at least one register group from python\"\n+gdb_assert {[llength $py_groups] == [llength $groups]} \\\n+    \"Same numnber of registers groups found\"\n+\n+set found_non_match 0\n+for { set i 0 } { $i < [llength $groups] } { incr i } {\n+    if {[lindex $groups $i] != [lindex $py_groups $i]} {\n+\tset found_non_match 1\n+    }\n+}\n+gdb_assert { $found_non_match == 0 } \"all register groups match\""
    }
  ]
}