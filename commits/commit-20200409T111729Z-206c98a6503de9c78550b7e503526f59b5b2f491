{
  "sha": "206c98a6503de9c78550b7e503526f59b5b2f491",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjA2Yzk4YTY1MDNkZTljNzg1NTBiN2U1MDM1MjZmNTliNWIyZjQ5MQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-08T02:01:10Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-09T11:17:29Z"
    },
    "message": "Add SVR4 psABI specific parser for AUXV entries\n\nNetBSD and OpenBSD always use an int to store the type as\ndefined in the SVR4 psABI specifications rather than long\nas assumed by the default parser.\n\nDefine svr4_auxv_parse() that shares code with default_auxv_parse().\n\nRemove obsd_auxv_parse() and switch OpenBSD to svr4_auxv_parse().\nRemove not fully accurate comment from obsd-tdep.c.\n\nUse svr4_auxv_parse() on NetBSD.\n\ngdb/ChangeLog:\n\n\t* auxv.h (svr4_auxv_parse): New.\n\t* auxv.c (default_auxv_parse): Split into default_auxv_parse\n\tand generic_auxv_parse.\n\t(svr4_auxv_parse): Add.\n\t* obsd-tdep.c: Include \"auxv.h\".\n\t(obsd_auxv_parse): Remove.\n\t(obsd_init_abi): Remove comment.\n\t(obsd_init_abi): Change set_gdbarch_auxv_parse passed argument\n\tfrom `obsd_auxv_parse' to `svr4_auxv_parse'.\n\t* nbsd-tdep.c: Include \"auxv.h\".\n\t(nbsd_init_abi): Call set_gdbarch_auxv_parse.",
    "tree": {
      "sha": "02f2c466cd4d19c55101974b3a293016b724e946",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/02f2c466cd4d19c55101974b3a293016b724e946"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/206c98a6503de9c78550b7e503526f59b5b2f491",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/206c98a6503de9c78550b7e503526f59b5b2f491",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/206c98a6503de9c78550b7e503526f59b5b2f491",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/206c98a6503de9c78550b7e503526f59b5b2f491/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae4b1d73f97e0b2a5975b3c0039b12a7f64b793b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae4b1d73f97e0b2a5975b3c0039b12a7f64b793b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae4b1d73f97e0b2a5975b3c0039b12a7f64b793b"
    }
  ],
  "stats": {
    "total": 124,
    "additions": 80,
    "deletions": 44
  },
  "files": [
    {
      "sha": "56dd4b3a1dc5eeb5f7c8e388408abc09bbaebcec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=206c98a6503de9c78550b7e503526f59b5b2f491",
      "patch": "@@ -1,3 +1,17 @@\n+2020-04-09  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* auxv.h (svr4_auxv_parse): New.\n+\t* auxv.c (default_auxv_parse): Split into default_auxv_parse\n+\tand generic_auxv_parse.\n+\t(svr4_auxv_parse): Add.\n+\t* obsd-tdep.c: Include \"auxv.h\".\n+\t(obsd_auxv_parse): Remove.\n+\t(obsd_init_abi): Remove comment.\n+\t(obsd_init_abi): Change set_gdbarch_auxv_parse passed argument\n+\tfrom `obsd_auxv_parse' to `svr4_auxv_parse'.\n+\t* nbsd-tdep.c: Include \"auxv.h\".\n+\t(nbsd_init_abi): Call set_gdbarch_auxv_parse.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* nat/windows-nat.h (last_wait_event): Don't declare."
    },
    {
      "sha": "2ffcd73b9882bd3d9833b9999cbae9f00539ee70",
      "filename": "gdb/auxv.c",
      "status": "modified",
      "additions": 46,
      "deletions": 15,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/auxv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/auxv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auxv.c?ref=206c98a6503de9c78550b7e503526f59b5b2f491",
      "patch": "@@ -248,34 +248,65 @@ memory_xfer_auxv (struct target_ops *ops,\n   return procfs_xfer_auxv (readbuf, writebuf, offset, len, xfered_len);\n }\n \n-/* Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n-   Return 0 if *READPTR is already at the end of the buffer.\n-   Return -1 if there is insufficient buffer for a whole entry.\n-   Return 1 if an entry was read into *TYPEP and *VALP.  */\n-int\n-default_auxv_parse (struct target_ops *ops, gdb_byte **readptr,\n-\t\t   gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp)\n+/* This function compared to other auxv_parse functions: it takes the size of\n+   the auxv type field as a parameter.  */\n+\n+static int\n+generic_auxv_parse (struct gdbarch *gdbarch, gdb_byte **readptr,\n+\t\t    gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp,\n+\t\t    int sizeof_auxv_type)\n {\n-  const int sizeof_auxv_field = gdbarch_ptr_bit (target_gdbarch ())\n-\t\t\t\t/ TARGET_CHAR_BIT;\n-  const enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());\n+  struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n+  const int sizeof_auxv_val = TYPE_LENGTH (ptr_type);\n+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   gdb_byte *ptr = *readptr;\n \n   if (endptr == ptr)\n     return 0;\n \n-  if (endptr - ptr < sizeof_auxv_field * 2)\n+  if (endptr - ptr < 2 * sizeof_auxv_val)\n     return -1;\n \n-  *typep = extract_unsigned_integer (ptr, sizeof_auxv_field, byte_order);\n-  ptr += sizeof_auxv_field;\n-  *valp = extract_unsigned_integer (ptr, sizeof_auxv_field, byte_order);\n-  ptr += sizeof_auxv_field;\n+  *typep = extract_unsigned_integer (ptr, sizeof_auxv_type, byte_order);\n+  /* Even if the auxv type takes less space than an auxv value, there is\n+     padding after the type such that the value is aligned on a multiple of\n+     its size (and this is why we advance by `sizeof_auxv_val` and not\n+     `sizeof_auxv_type`).  */\n+  ptr += sizeof_auxv_val;\n+  *valp = extract_unsigned_integer (ptr, sizeof_auxv_val, byte_order);\n+  ptr += sizeof_auxv_val;\n \n   *readptr = ptr;\n   return 1;\n }\n \n+/* See auxv.h.  */\n+\n+int\n+default_auxv_parse (struct target_ops *ops, gdb_byte **readptr,\n+\t\t    gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp)\n+{\n+  struct gdbarch *gdbarch = target_gdbarch ();\n+  struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n+  const int sizeof_auxv_type = TYPE_LENGTH (ptr_type);\n+\n+  return generic_auxv_parse (gdbarch, readptr, endptr, typep, valp,\n+\t\t\t     sizeof_auxv_type);\n+}\n+\n+/* See auxv.h.  */\n+\n+int\n+svr4_auxv_parse (struct gdbarch *gdbarch, gdb_byte **readptr,\n+\t\t gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp)\n+{\n+  struct type *int_type = builtin_type (gdbarch)->builtin_int;\n+  const int sizeof_auxv_type = TYPE_LENGTH (int_type);\n+\n+  return generic_auxv_parse (gdbarch, readptr, endptr, typep, valp,\n+\t\t\t     sizeof_auxv_type);\n+}\n+\n /* Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n    Return 0 if *READPTR is already at the end of the buffer.\n    Return -1 if there is insufficient buffer for a whole entry."
    },
    {
      "sha": "9525801e37dbfda7e452178129ab96830cfb2a9c",
      "filename": "gdb/auxv.h",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/auxv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/auxv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auxv.h?ref=206c98a6503de9c78550b7e503526f59b5b2f491",
      "patch": "@@ -25,12 +25,27 @@\n /* See \"include/elf/common.h\" for the definition of valid AT_* values.  */\n \n /* The default implementation of to_auxv_parse, used by the target\n-   stack.  */\n+   stack.\n \n+   Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n+   Return 0 if *READPTR is already at the end of the buffer.\n+   Return -1 if there is insufficient buffer for a whole entry.\n+   Return 1 if an entry was read into *TYPEP and *VALP.  */\n extern int default_auxv_parse (struct target_ops *ops, gdb_byte **readptr,\n \t\t\t       gdb_byte *endptr, CORE_ADDR *typep,\n \t\t\t       CORE_ADDR *valp);\n \n+/* The SVR4 psABI implementation of to_auxv_parse, that uses an int to\n+   store the type rather than long as assumed by the default parser.\n+\n+   Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n+   Return 0 if *READPTR is already at the end of the buffer.\n+   Return -1 if there is insufficient buffer for a whole entry.\n+   Return 1 if an entry was read into *TYPEP and *VALP.  */\n+extern int svr4_auxv_parse (struct gdbarch *gdbarch, gdb_byte **readptr,\n+\t\t\t    gdb_byte *endptr, CORE_ADDR *typep,\n+\t\t\t    CORE_ADDR *valp);\n+\n /* Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n    Return 0 if *READPTR is already at the end of the buffer.\n    Return -1 if there is insufficient buffer for a whole entry."
    },
    {
      "sha": "158a43bebaa1e2ccc48bc7e4313ee81551500e2a",
      "filename": "gdb/nbsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/nbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/nbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-tdep.c?ref=206c98a6503de9c78550b7e503526f59b5b2f491",
      "patch": "@@ -20,6 +20,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"auxv.h\"\n #include \"solib-svr4.h\"\n #include \"nbsd-tdep.h\"\n #include \"gdbarch.h\"\n@@ -362,4 +363,5 @@ nbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_gdb_signal_from_target (gdbarch, nbsd_gdb_signal_from_target);\n   set_gdbarch_gdb_signal_to_target (gdbarch, nbsd_gdb_signal_to_target);\n   set_gdbarch_skip_solib_resolver (gdbarch, nbsd_skip_solib_resolver);\n+  set_gdbarch_auxv_parse (gdbarch, svr4_auxv_parse);\n }"
    },
    {
      "sha": "f2c4d2988512886e958b3ae47420b4632db3dd49",
      "filename": "gdb/obsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 28,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206c98a6503de9c78550b7e503526f59b5b2f491/gdb/obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-tdep.c?ref=206c98a6503de9c78550b7e503526f59b5b2f491",
      "patch": "@@ -18,6 +18,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"auxv.h\"\n #include \"frame.h\"\n #include \"symtab.h\"\n #include \"objfiles.h\"\n@@ -289,32 +290,6 @@ obsd_gdb_signal_to_target (struct gdbarch *gdbarch,\n   return -1;\n }\n \n-static int\n-obsd_auxv_parse (struct gdbarch *gdbarch, gdb_byte **readptr,\n-\t\t gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp)\n-{\n-  struct type *int_type = builtin_type (gdbarch)->builtin_int;\n-  struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n-  const int sizeof_auxv_type = TYPE_LENGTH (int_type);\n-  const int sizeof_auxv_val = TYPE_LENGTH (ptr_type);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n-  gdb_byte *ptr = *readptr;\n-\n-  if (endptr == ptr)\n-    return 0;\n-\n-  if (endptr - ptr < 2 * sizeof_auxv_val)\n-    return -1;\n-\n-  *typep = extract_unsigned_integer (ptr, sizeof_auxv_type, byte_order);\n-  ptr += sizeof_auxv_val;\t/* Alignment.  */\n-  *valp = extract_unsigned_integer (ptr, sizeof_auxv_val, byte_order);\n-  ptr += sizeof_auxv_val;\n-\n-  *readptr = ptr;\n-  return 1;\n-}\n-\n void\n obsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n@@ -323,6 +298,5 @@ obsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_gdb_signal_to_target (gdbarch,\n \t\t\t\t    obsd_gdb_signal_to_target);\n \n-  /* Unlike Linux, OpenBSD actually follows the ELF standard.  */\n-  set_gdbarch_auxv_parse (gdbarch, obsd_auxv_parse);\n+  set_gdbarch_auxv_parse (gdbarch, svr4_auxv_parse);\n }"
    }
  ]
}