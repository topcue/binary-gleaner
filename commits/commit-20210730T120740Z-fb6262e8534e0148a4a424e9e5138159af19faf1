{
  "sha": "fb6262e8534e0148a4a424e9e5138159af19faf1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI2MjYyZTg1MzRlMDE0OGE0YTQyNGU5ZTUxMzgxNTlhZjE5ZmFmMQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-07-30T12:07:40Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-07-30T12:07:40Z"
    },
    "message": "[gdb/build] Disable attribute nonnull\n\nWith trunk gcc (12.0) we're running into a -Werror=nonnull-compare build\nbreaker in gdb, which caused a broader review of the usage of the nonnull\nattribute.\n\nThe current conclusion is that it's best to disable this.  This is explained\nat length in the gdbsupport/common-defs.h comment.\n\nTested by building with trunk gcc.\n\ngdb/ChangeLog:\n\n2021-07-29  Tom de Vries  <tdevries@suse.de>\n\n\t* gdbsupport/common-defs.h (ATTRIBUTE_NONNULL): Disable.",
    "tree": {
      "sha": "a710f96bbfe6f017bf4823ce6047e7a635d88fb4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a710f96bbfe6f017bf4823ce6047e7a635d88fb4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb6262e8534e0148a4a424e9e5138159af19faf1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb6262e8534e0148a4a424e9e5138159af19faf1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb6262e8534e0148a4a424e9e5138159af19faf1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb6262e8534e0148a4a424e9e5138159af19faf1/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f681e5867de63f1c8ca692023cf86e4c884fdae7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f681e5867de63f1c8ca692023cf86e4c884fdae7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f681e5867de63f1c8ca692023cf86e4c884fdae7"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 75,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5678076575664633628da4efb85fb74925294006",
      "filename": "gdbsupport/common-defs.h",
      "status": "modified",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb6262e8534e0148a4a424e9e5138159af19faf1/gdbsupport/common-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb6262e8534e0148a4a424e9e5138159af19faf1/gdbsupport/common-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-defs.h?ref=fb6262e8534e0148a4a424e9e5138159af19faf1",
      "patch": "@@ -110,6 +110,81 @@\n #undef ATTRIBUTE_PRINTF\n #define ATTRIBUTE_PRINTF _GL_ATTRIBUTE_FORMAT_PRINTF_STANDARD\n \n+/* This is defined by ansidecl.h, but we disable the attribute.\n+\n+   Say a developer starts out with:\n+   ...\n+   extern void foo (void *ptr) __atttribute__((nonnull (1)));\n+   void foo (void *ptr) {}\n+   ...\n+   with the idea in mind to catch:\n+   ...\n+   foo (nullptr);\n+   ...\n+   at compile time with -Werror=nonnull, and then adds:\n+   ...\n+    void foo (void *ptr) {\n+   +  gdb_assert (ptr != nullptr);\n+    }\n+   ...\n+   to catch:\n+   ...\n+   foo (variable_with_nullptr_value);\n+   ...\n+   at runtime as well.\n+\n+   Said developer then verifies that the assert works (using -O0), and commits\n+   the code.\n+\n+   Some other developer then checks out the code and accidentally writes some\n+   variant of:\n+   ...\n+   foo (variable_with_nullptr_value);\n+   ...\n+   and builds with -O2, and ... the assert doesn't trigger, because it's\n+   optimized away by gcc.\n+\n+   There's no suppported recipe to prevent the assertion from being optimized\n+   away (other than: build with -O0, or remove the nonnull attribute).  Note\n+   that -fno-delete-null-pointer-checks does not help.  A patch was submitted\n+   to improve gcc documentation to point this out more clearly (\n+   https://gcc.gnu.org/pipermail/gcc-patches/2021-July/576218.html ).  The\n+   patch also mentions a possible workaround that obfuscates the pointer\n+   using:\n+   ...\n+    void foo (void *ptr) {\n+   +  asm (\"\" : \"+r\"(ptr));\n+      gdb_assert (ptr != nullptr);\n+    }\n+   ...\n+   but that still requires the developer to manually add this in all cases\n+   where that's necessary.\n+\n+   A warning was added to detect the situation: -Wnonnull-compare, which does\n+   help in detecting those cases, but each new gcc release may indicate a new\n+   batch of locations that needs fixing, which means we've added a maintenance\n+   burden.\n+\n+   We could try to deal with the problem more proactively by introducing a\n+   gdb_assert variant like:\n+   ...\n+   void gdb_assert_non_null (void *ptr) {\n+      asm (\"\" : \"+r\"(ptr));\n+      gdb_assert (ptr != nullptr);\n+    }\n+    void foo (void *ptr) {\n+      gdb_assert_nonnull (ptr);\n+    }\n+   ...\n+   and make it a coding style to use it everywhere, but again, maintenance\n+   burden.\n+\n+   With all these things considered, for now we go with the solution with the\n+   least maintenance burden: disable the attribute, such that we reliably deal\n+   with it everywhere.  */\n+#undef ATTRIBUTE_NONNULL\n+#define ATTRIBUTE_NONNULL(m)\n+\n #if GCC_VERSION >= 3004\n #define ATTRIBUTE_UNUSED_RESULT __attribute__ ((__warn_unused_result__))\n #else"
    }
  ]
}