{
  "sha": "13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNhYTVjZWIwMWNjOTRhMGU2MTdmMzk3YzBjNTQzNGZjMjJiYjFlNQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-19T09:25:43Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-19T09:25:43Z"
    },
    "message": "Silence warnings about incompatible plugins.\n\nI have been looking at a Fedora bug report[1] from a user who was\nreceiving warning messages from the BFD library about incompatible\nplugins.  It turns out that they had both 32-bit and 64-bit versions\nof the same plugin installed, and the BFD library was attempting to\nload all of them.\n\nAfter thinking about it for a while, it seemed to me that the simplest\nsolution was to not warn about incompatible plugins whilst attempting\nto create a list of viable plugins.\n\n[1]: https://bugzilla.redhat.com/show_bug.cgi?id=1836618\n\n\t* plugin.c (try_load_plugin): Suppress the error message about\n\tbeing unable to open a plugin if creating a list of viable\n\tplugins.",
    "tree": {
      "sha": "61e0caac198832bef13da17ce3ba1ff35e71ffcf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/61e0caac198832bef13da17ce3ba1ff35e71ffcf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e443398846ee51d66b3df2524f7e0ddcb26cdae3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e443398846ee51d66b3df2524f7e0ddcb26cdae3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e443398846ee51d66b3df2524f7e0ddcb26cdae3"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 27,
    "deletions": 15
  },
  "files": [
    {
      "sha": "6996d040f90a8d09d2a4240da648c42d74398b0d",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-19  Nick Clifton  <nickc@redhat.com>\n+\n+\t* plugin.c (try_load_plugin): Suppress the error message about\n+\tbeing unable to open a plugin if creating a list of viable\n+\tplugins.\n+\n 2020-06-16  Alan Modra  <amodra@gmail.com>\n \n \t* aout-tic30.c: Delete file."
    },
    {
      "sha": "5ed87578091403e7bffd5b6634984d9af7b10956",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 21,
      "deletions": 15,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=13aa5ceb01cc94a0e617f397c0c5434fc22bb1e5",
      "patch": "@@ -249,17 +249,18 @@ try_claim (bfd *abfd)\n   return claimed;\n }\n \n-static int\n-try_load_plugin (const char *pname,\n-\t\t struct plugin_list_entry *plugin_list_iter,\n-\t\t bfd *abfd, bfd_boolean build_list_p)\n+static bfd_boolean\n+try_load_plugin (const char *                pname,\n+\t\t struct plugin_list_entry *  plugin_list_iter,\n+\t\t bfd *                       abfd,\n+\t\t bfd_boolean                 build_list_p)\n {\n   void *plugin_handle;\n   struct ld_plugin_tv tv[5];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n-  int result = 0;\n+  bfd_boolean result = FALSE;\n \n   /* NB: Each object is independent.  Reuse the previous plugin from\n      the last run will lead to wrong result.  */\n@@ -273,15 +274,20 @@ try_load_plugin (const char *pname,\n   plugin_handle = dlopen (pname, RTLD_NOW);\n   if (!plugin_handle)\n     {\n-      _bfd_error_handler (\"Failed to load plugin '%s', reason: %s\\n\",\n-\t\t\t  pname, dlerror ());\n-      return 0;\n+      /* If we are building a list of viable plugins, then\n+\t we do not bother the user with the details of any\n+\t plugins that cannot be loaded.  */\n+      if (! build_list_p)\n+\t_bfd_error_handler (\"Failed to load plugin '%s', reason: %s\\n\",\n+\t\t\t    pname, dlerror ());\n+      return FALSE;\n     }\n \n   if (plugin_list_iter == NULL)\n     {\n       size_t length_plugin_name = strlen (pname) + 1;\n       char *plugin_name = bfd_malloc (length_plugin_name);\n+\n       if (plugin_name == NULL)\n \tgoto short_circuit;\n       plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);\n@@ -342,7 +348,7 @@ try_load_plugin (const char *pname,\n     goto short_circuit;\n \n   abfd->plugin_format = bfd_plugin_yes;\n-  result = 1;\n+  result = TRUE;\n \n  short_circuit:\n   dlclose (plugin_handle);\n@@ -446,7 +452,7 @@ build_plugin_list (bfd *abfd)\n \n \t\t  full_name = concat (plugin_dir, \"/\", ent->d_name, NULL);\n \t\t  if (stat (full_name, &st) == 0 && S_ISREG (st.st_mode))\n-\t\t    try_load_plugin (full_name, NULL, abfd, TRUE);\n+\t\t    (void) try_load_plugin (full_name, NULL, abfd, TRUE);\n \t\t  free (full_name);\n \t\t}\n \t      closedir (d);\n@@ -458,7 +464,7 @@ build_plugin_list (bfd *abfd)\n   has_plugin_list = plugin_list != NULL;\n }\n \n-static int\n+static bfd_boolean\n load_plugin (bfd *abfd)\n {\n   struct plugin_list_entry *plugin_list_iter;\n@@ -467,17 +473,17 @@ load_plugin (bfd *abfd)\n     return try_load_plugin (plugin_name, plugin_list, abfd, FALSE);\n \n   if (plugin_program_name == NULL)\n-    return 0;\n+    return FALSE;\n \n   build_plugin_list (abfd);\n \n   for (plugin_list_iter = plugin_list;\n        plugin_list_iter;\n        plugin_list_iter = plugin_list_iter->next)\n-    if (try_load_plugin (NULL, plugin_list_iter, abfd, FALSE))\n-      return 1;\n+    if (try_load_plugin (NULL, plugin_list_iter, abfd,FALSE))\n+      return TRUE;\n \n-  return 0;\n+  return FALSE;\n }\n \n "
    }
  ]
}