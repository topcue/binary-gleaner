{
  "sha": "128a391fe45a234587dc585e03a7726cd6ee0255",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTI4YTM5MWZlNDVhMjM0NTg3ZGM1ODVlMDNhNzcyNmNkNmVlMDI1NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-23T15:50:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-01-26T23:40:21Z"
    },
    "message": "Virtualize \"readin\" and \"compunit_symtab\"\n\nThis patch removes the \"readin\" and \"compunit_symtab\" members from\npartial_symtab, replacing them with methods.  Then it introduces a new\n\"standard_psymtab\" class, which restores these members; and changes\nthe symbol readers to use this intermediate class as the base class of\ntheir partial symtab subclasses.\n\nThe reason for this is to make it possible for a symbol reader to\nimplement an alternate mapping between partial and full symbol tables.\nThis is important in order to be able to share psymtabs across\nobjfiles -- whether a psymtab has been \"readin\" is objfile-dependent,\nas are the pointers to the full symbol tables.\n\ngdb/ChangeLog\n2020-01-26  Tom Tromey  <tom@tromey.com>\n\n\t* psymtab.c (partial_map_expand_apply)\n\t(psym_find_pc_sect_compunit_symtab, psym_lookup_symbol)\n\t(psymtab_to_symtab, psym_find_last_source_symtab, dump_psymtab)\n\t(psym_print_stats, psym_expand_symtabs_for_function)\n\t(psym_map_symbol_filenames, psym_map_matching_symbols)\n\t(psym_expand_symtabs_matching)\n\t(partial_symtab::read_dependencies, maintenance_info_psymtabs)\n\t(maintenance_check_psymtabs): Use new methods.\n\t* psympriv.h (struct partial_symtab) <readin_p,\n\tget_compunit_symtab>: New methods.\n\t<readin, compunit_symtab>: Remove members.\n\t(struct standard_psymtab): New.\n\t(struct legacy_psymtab): Derive from standard_psymtab.\n\t* dwarf2read.h (struct dwarf2_psymtab): Derive from\n\tstandard_psymtab.\n\t* ctfread.c (struct ctf_psymtab): Derive from standard_psymtab.\n\nChange-Id: Idb923f196d7e03bf7cb9cfc8134ed06dd3f211ce",
    "tree": {
      "sha": "138e6a68a6da90b5aefea011f0e7c113b721fe56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/138e6a68a6da90b5aefea011f0e7c113b721fe56"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/128a391fe45a234587dc585e03a7726cd6ee0255",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/128a391fe45a234587dc585e03a7726cd6ee0255",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/128a391fe45a234587dc585e03a7726cd6ee0255",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/128a391fe45a234587dc585e03a7726cd6ee0255/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0494dbecdfa0b0b9065393755a1ac64431997da1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0494dbecdfa0b0b9065393755a1ac64431997da1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0494dbecdfa0b0b9065393755a1ac64431997da1"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 90,
    "deletions": 35
  },
  "files": [
    {
      "sha": "77e52f3c5a4b90b172f715eb42e448c076e692ad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=128a391fe45a234587dc585e03a7726cd6ee0255",
      "patch": "@@ -1,3 +1,22 @@\n+2020-01-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.c (partial_map_expand_apply)\n+\t(psym_find_pc_sect_compunit_symtab, psym_lookup_symbol)\n+\t(psymtab_to_symtab, psym_find_last_source_symtab, dump_psymtab)\n+\t(psym_print_stats, psym_expand_symtabs_for_function)\n+\t(psym_map_symbol_filenames, psym_map_matching_symbols)\n+\t(psym_expand_symtabs_matching)\n+\t(partial_symtab::read_dependencies, maintenance_info_psymtabs)\n+\t(maintenance_check_psymtabs): Use new methods.\n+\t* psympriv.h (struct partial_symtab) <readin_p,\n+\tget_compunit_symtab>: New methods.\n+\t<readin, compunit_symtab>: Remove members.\n+\t(struct standard_psymtab): New.\n+\t(struct legacy_psymtab): Derive from standard_psymtab.\n+\t* dwarf2read.h (struct dwarf2_psymtab): Derive from\n+\tstandard_psymtab.\n+\t* ctfread.c (struct ctf_psymtab): Derive from standard_psymtab.\n+\n 2020-01-26  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (xcoff_psymtab_to_symtab_1): Call"
    },
    {
      "sha": "d363ce6a11da7f2587ef360fda6b6cdc75efde93",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=128a391fe45a234587dc585e03a7726cd6ee0255",
      "patch": "@@ -116,10 +116,10 @@ struct ctf_context\n };\n \n /* A partial symtab, specialized for this module.  */\n-struct ctf_psymtab : public partial_symtab\n+struct ctf_psymtab : public standard_psymtab\n {\n   ctf_psymtab (const char *filename, struct objfile *objfile, CORE_ADDR addr)\n-    : partial_symtab (filename, objfile, addr)\n+    : standard_psymtab (filename, objfile, addr)\n   {\n   }\n "
    },
    {
      "sha": "3f9731f5a03b4d572c8d5c5f6ca590ab07da5d21",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=128a391fe45a234587dc585e03a7726cd6ee0255",
      "patch": "@@ -271,16 +271,16 @@ struct dwarf2_per_objfile\n dwarf2_per_objfile *get_dwarf2_per_objfile (struct objfile *objfile);\n \n /* A partial symtab specialized for DWARF.  */\n-struct dwarf2_psymtab : public partial_symtab\n+struct dwarf2_psymtab : public standard_psymtab\n {\n   dwarf2_psymtab (const char *filename, struct objfile *objfile)\n-    : partial_symtab (filename, objfile)\n+    : standard_psymtab (filename, objfile)\n   {\n   }\n \n   dwarf2_psymtab (const char *filename, struct objfile *objfile,\n \t\t  CORE_ADDR addr)\n-    : partial_symtab (filename, objfile, addr)\n+    : standard_psymtab (filename, objfile, addr)\n   {\n   }\n "
    },
    {
      "sha": "1b1f57cf764ce94d4b94945bbb6e23bdc2c9d868",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 46,
      "deletions": 9,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=128a391fe45a234587dc585e03a7726cd6ee0255",
      "patch": "@@ -137,6 +137,15 @@ struct partial_symtab\n   /* Ensure that all the dependencies are read in.  */\n   void read_dependencies (struct objfile *);\n \n+  /* Return true if the symtab corresponding to this psymtab has been\n+     readin.  */\n+  virtual bool readin_p () const = 0;\n+\n+  /* Return a pointer to the compunit allocated for this source file.\n+     Return nullptr if !readin or if there was no symtab.  */\n+  virtual struct compunit_symtab *get_compunit_symtab () const = 0;\n+\n+\n   /* Return the raw low text address of this partial_symtab.  */\n   CORE_ADDR raw_text_low () const\n   {\n@@ -265,12 +274,6 @@ struct partial_symtab\n   int statics_offset = 0;\n   int n_static_syms = 0;\n \n-  /* True if the symtab corresponding to this psymtab has been readin.\n-     This is located here so that this structure packs better on\n-     64-bit systems.  */\n-\n-  bool readin = false;\n-\n   /* True iff objfile->psymtabs_addrmap is properly populated for this\n      partial_symtab.  For discontiguous overlapping psymtabs is the only usable\n      info in PSYMTABS_ADDRMAP.  */\n@@ -289,6 +292,40 @@ struct partial_symtab\n \n   unsigned int text_low_valid : 1;\n   unsigned int text_high_valid : 1;\n+};\n+\n+/* A partial symtab that tracks the \"readin\" and \"compunit_symtab\"\n+   information in the ordinary way -- by storing it directly in this\n+   object.  */\n+struct standard_psymtab : public partial_symtab\n+{\n+  standard_psymtab (const char *filename, struct objfile *objfile)\n+    : partial_symtab (filename, objfile)\n+  {\n+  }\n+\n+  standard_psymtab (const char *filename, struct objfile *objfile,\n+\t\t    CORE_ADDR addr)\n+    : partial_symtab (filename, objfile, addr)\n+  {\n+  }\n+\n+  bool readin_p () const override\n+  {\n+    return readin;\n+  }\n+\n+  /* Return a pointer to the compunit allocated for this source file.\n+     Return nullptr if !readin or if there was no symtab.  */\n+  struct compunit_symtab *get_compunit_symtab () const override\n+  {\n+    return compunit_symtab;\n+  }\n+\n+  /* True if the symtab corresponding to this psymtab has been\n+     readin.  */\n+\n+  bool readin = false;\n \n   /* Pointer to compunit eventually allocated for this source file, 0 if\n      !readin or if we haven't looked for the symtab after it was readin.  */\n@@ -300,16 +337,16 @@ struct partial_symtab\n    not be used in new code, but exists to transition the somewhat\n    unmaintained \"legacy\" debug formats.  */\n \n-struct legacy_psymtab : public partial_symtab\n+struct legacy_psymtab : public standard_psymtab\n {\n   legacy_psymtab (const char *filename, struct objfile *objfile)\n-    : partial_symtab (filename, objfile)\n+    : standard_psymtab (filename, objfile)\n   {\n   }\n \n   legacy_psymtab (const char *filename, struct objfile *objfile,\n \t\t  CORE_ADDR addr)\n-    : partial_symtab (filename, objfile, addr)\n+    : standard_psymtab (filename, objfile, addr)\n   {\n   }\n "
    },
    {
      "sha": "56576b3bcec2eb3be60ffc1f1dc6cf3cd363e93a",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 20,
      "deletions": 21,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128a391fe45a234587dc585e03a7726cd6ee0255/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=128a391fe45a234587dc585e03a7726cd6ee0255",
      "patch": "@@ -131,7 +131,7 @@ partial_map_expand_apply (struct objfile *objfile,\n   gdb_assert (pst->user == NULL);\n \n   /* Don't visit already-expanded psymtabs.  */\n-  if (pst->readin)\n+  if (pst->readin_p ())\n     return 0;\n \n   /* This may expand more than one symtab, and we want to iterate over\n@@ -385,15 +385,15 @@ psym_find_pc_sect_compunit_symtab (struct objfile *objfile,\n \t\t\t\t\t\t    msymbol);\n   if (ps != NULL)\n     {\n-      if (warn_if_readin && ps->readin)\n+      if (warn_if_readin && ps->readin_p ())\n \t/* Might want to error() here (in case symtab is corrupt and\n \t   will cause a core dump), but maybe we can successfully\n \t   continue, so let's not.  */\n \twarning (_(\"\\\n (Internal error: pc %s in read in psymtab, but not in symtab.)\\n\"),\n \t\t paddress (get_objfile_arch (objfile), pc));\n       psymtab_to_symtab (objfile, ps);\n-      return ps->compunit_symtab;\n+      return ps->get_compunit_symtab ();\n     }\n   return NULL;\n }\n@@ -484,8 +484,8 @@ psym_lookup_symbol (struct objfile *objfile,\n \n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (!ps->readin && lookup_partial_symbol (objfile, ps, name,\n-\t\t\t\t\t\tpsymtab_index, domain))\n+      if (!ps->readin_p () && lookup_partial_symbol (objfile, ps, name,\n+\t\t\t\t\t\t     psymtab_index, domain))\n \t{\n \t  struct symbol *sym, *with_opaque = NULL;\n \t  struct compunit_symtab *stab = psymtab_to_symtab (objfile, ps);\n@@ -750,11 +750,11 @@ psymtab_to_symtab (struct objfile *objfile, struct partial_symtab *pst)\n     pst = pst->user;\n \n   /* If it's been looked up before, return it.  */\n-  if (pst->compunit_symtab)\n-    return pst->compunit_symtab;\n+  if (pst->get_compunit_symtab ())\n+    return pst->get_compunit_symtab ();\n \n   /* If it has not yet been read in, read it.  */\n-  if (!pst->readin)\n+  if (!pst->readin_p ())\n     {\n       scoped_restore decrementer = increment_reading_symtab ();\n \n@@ -772,7 +772,7 @@ psymtab_to_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \tprintf_filtered (_(\"done.\\n\"));\n     }\n \n-  return pst->compunit_symtab;\n+  return pst->get_compunit_symtab ();\n }\n \n /* Psymtab version of find_last_source_symtab.  See its definition in\n@@ -795,7 +795,7 @@ psym_find_last_source_symtab (struct objfile *ofp)\n \n   if (cs_pst)\n     {\n-      if (cs_pst->readin)\n+      if (cs_pst->readin_p ())\n \t{\n \t  internal_error (__FILE__, __LINE__,\n \t\t\t  _(\"select_source_symtab: \"\n@@ -952,11 +952,11 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n   gdb_print_host_address (objfile, outfile);\n   fprintf_filtered (outfile, \")\\n\");\n \n-  if (psymtab->readin)\n+  if (psymtab->readin_p ())\n     {\n       fprintf_filtered (outfile,\n \t\t\t\"  Full symtab was read (at \");\n-      gdb_print_host_address (psymtab->compunit_symtab, outfile);\n+      gdb_print_host_address (psymtab->get_compunit_symtab (), outfile);\n       fprintf_filtered (outfile, \")\\n\");\n     }\n \n@@ -1010,7 +1010,7 @@ psym_print_stats (struct objfile *objfile)\n   i = 0;\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (!ps->readin)\n+      if (!ps->readin_p ())\n \ti++;\n     }\n   printf_filtered (_(\"  Number of psym tables (not yet expanded): %d\\n\"), i);\n@@ -1050,7 +1050,7 @@ psym_expand_symtabs_for_function (struct objfile *objfile,\n {\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (ps->readin)\n+      if (ps->readin_p ())\n \tcontinue;\n \n       if ((lookup_partial_symbol (objfile, ps, func_name, 1, VAR_DOMAIN)\n@@ -1105,7 +1105,7 @@ psym_map_symbol_filenames (struct objfile *objfile,\n     {\n       const char *fullname;\n \n-      if (ps->readin)\n+      if (ps->readin_p ())\n \tcontinue;\n \n       /* We can skip shared psymtabs here, because any file name will be\n@@ -1185,7 +1185,7 @@ psym_map_matching_symbols\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n       QUIT;\n-      if (ps->readin\n+      if (ps->readin_p ()\n \t  || match_partial_symbol (objfile, ps, global, name, domain,\n \t\t\t\t   ordered_compare))\n \t{\n@@ -1320,7 +1320,7 @@ psym_expand_symtabs_matching\n     {\n       QUIT;\n \n-      if (ps->readin)\n+      if (ps->readin_p ())\n \tcontinue;\n \n       /* We skip shared psymtabs because file-matching doesn't apply\n@@ -1659,7 +1659,6 @@ partial_symtab::partial_symtab (const char *filename_, struct objfile *objfile)\n   filename\n     = ((const char *) objfile->per_bfd->filename_cache.insert\n        (filename_, strlen (filename_) + 1));\n-  compunit_symtab = NULL;\n \n   if (symtab_create_debug)\n     {\n@@ -1689,7 +1688,7 @@ partial_symtab::read_dependencies (struct objfile *objfile)\n {\n   for (int i = 0; i < number_of_dependencies; ++i)\n     {\n-      if (!dependencies[i]->readin)\n+      if (!dependencies[i]->readin_p ())\n \t{\n \t  /* Inform about additional files to be read in.  */\n \t  if (info_verbose)\n@@ -2001,7 +2000,7 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\t\t\t host_address_to_string (psymtab));\n \n \t\tprintf_filtered (\"    readin %s\\n\",\n-\t\t\t\t psymtab->readin ? \"yes\" : \"no\");\n+\t\t\t\t psymtab->readin_p () ? \"yes\" : \"no\");\n \t\tprintf_filtered (\"    fullname %s\\n\",\n \t\t\t\t psymtab->fullname\n \t\t\t\t ? psymtab->fullname : \"(null)\");\n@@ -2092,7 +2091,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t/* We don't call psymtab_to_symtab here because that may cause symtab\n \t   expansion.  When debugging a problem it helps if checkers leave\n \t   things unchanged.  */\n-\tcust = ps->compunit_symtab;\n+\tcust = ps->get_compunit_symtab ();\n \n \t/* First do some checks that don't require the associated symtab.  */\n \tif (ps->text_high (objfile) < ps->text_low (objfile))"
    }
  ]
}