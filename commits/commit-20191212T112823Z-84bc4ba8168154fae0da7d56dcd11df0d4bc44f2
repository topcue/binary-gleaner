{
  "sha": "84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODRiYzRiYTgxNjgxNTRmYWUwZGE3ZDU2ZGNkMTFkZjBkNGJjNDRmMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-12T06:17:21Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-12T11:28:23Z"
    },
    "message": "obj-evax.c tidy\n\nThis started out as fixing decode_16, which used a char to index a 256\nbyte decodings array.  When char is signed that could result in an out\nof bounds array access.  The rest of the patch is for consistency and\njust general cleanup.\n\n\t* config/obj-evax.c (crc32, encode_32, encode_16, decode_16):\n\tRemove unnecessary prototypes.\n\t(number_of_codings): Delete, use ARRAY_SIZE instead throughout.\n\t(codings, decodings): Make arrays of unsigned char.\n\t(crc32): Use unsigned variables.  Delete unnecessary mask.\n\t(encode_32, encode_16): Return unsigned char*, and make static\n\tbuffer an unsigned char array.\n\t(decode_16): Make arg an unsigned char*.  Remove useless casts.\n\t(shorten_identifier): Use unsigned char crc_chars.\n\t(is_truncated_identifier): Make ptr an unsigned char*.",
    "tree": {
      "sha": "ab68efb69511b8743faed531578826377b7b4ced",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab68efb69511b8743faed531578826377b7b4ced"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "967354c3b9b0306785dde600ab6f851fe1418612",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/967354c3b9b0306785dde600ab6f851fe1418612",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/967354c3b9b0306785dde600ab6f851fe1418612"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 35,
    "deletions": 29
  },
  "files": [
    {
      "sha": "d8c5a17b3d3c95e63903036a6663e6841eb0ca03",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
      "patch": "@@ -1,3 +1,16 @@\n+2019-12-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/obj-evax.c (crc32, encode_32, encode_16, decode_16):\n+\tRemove unnecessary prototypes.\n+\t(number_of_codings): Delete, use ARRAY_SIZE instead throughout.\n+\t(codings, decodings): Make arrays of unsigned char.\n+\t(crc32): Use unsigned variables.  Delete unnecessary mask.\n+\t(encode_32, encode_16): Return unsigned char*, and make static\n+\tbuffer an unsigned char array.\n+\t(decode_16): Make arg an unsigned char*.  Remove useless casts.\n+\t(shorten_identifier): Use unsigned char crc_chars.\n+\t(is_truncated_identifier): Make ptr an unsigned char*.\n+\n 2019-12-11  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/tc-arm.c (warn_on_restrict_it): Add new variable."
    },
    {
      "sha": "dd0907763201be6139f4a8353f4b7134a2c370be",
      "filename": "gas/config/obj-evax.c",
      "status": "modified",
      "additions": 22,
      "deletions": 29,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2/gas/config/obj-evax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84bc4ba8168154fae0da7d56dcd11df0d4bc44f2/gas/config/obj-evax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-evax.c?ref=84bc4ba8168154fae0da7d56dcd11df0d4bc44f2",
      "patch": "@@ -30,10 +30,6 @@\n #include \"safe-ctype.h\"\n \n static void s_evax_weak (int);\n-static unsigned int crc32 (unsigned char *, int);\n-static char *encode_32 (unsigned int);\n-static char *encode_16 (unsigned int);\n-static int decode_16 (const char *);\n \n const pseudo_typeS obj_pseudo_table[] =\n {\n@@ -338,19 +334,16 @@ evax_shorten_name (char *id)\n \n /* Table used to convert an integer into a string.  */\n \n-static const char codings[] = {\n+static const unsigned char codings[] = {\n   'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n   'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n   'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n   'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n   '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_'};\n \n-/* The number of codings in the above table.  */\n-static const int number_of_codings = sizeof (codings) / sizeof (char);\n-\n /* Table used by decode_16 () to convert an encoded string back into\n    an integer.  */\n-static char decodings[256];\n+static unsigned char decodings[256];\n \n /* Table used by the crc32 function to calculate the checksum.  */\n static unsigned int crc32_table[256] = {0, 0};\n@@ -367,7 +360,7 @@ crc32 (unsigned char *buf, int len)\n   if (! crc32_table[1])\n     {\n       /* Initialize the CRC table and the decoding table. */\n-      int i, j;\n+      unsigned int i, j;\n       unsigned int c;\n \n       for (i = 0; i < 256; i++)\n@@ -377,8 +370,8 @@ crc32 (unsigned char *buf, int len)\n \t  crc32_table[i] = c;\n \t  decodings[i] = 0;\n \t}\n-      for (i = 0; i < number_of_codings; i++)\n-\tdecodings[codings[i] & 255] = i;\n+      for (i = 0; i < ARRAY_SIZE (codings); i++)\n+\tdecodings[codings[i]] = i;\n     }\n \n   while (len--)\n@@ -391,34 +384,34 @@ crc32 (unsigned char *buf, int len)\n \n /* Encode the lower 32 bits of VALUE as a 5-character string.  */\n \n-static char *\n+static unsigned char *\n encode_32 (unsigned int value)\n {\n-  static char res[6];\n+  static unsigned char res[6];\n   int x;\n \n   res[5] = 0;\n   for(x = 0; x < 5; x++)\n     {\n-      res[x] = codings[value % number_of_codings];\n-      value = value / number_of_codings;\n+      res[x] = codings[value % ARRAY_SIZE (codings)];\n+      value = value / ARRAY_SIZE (codings);\n     }\n   return res;\n }\n \n /* Encode the lower 16 bits of VALUE as a 3-character string.  */\n \n-static char *\n+static unsigned char *\n encode_16 (unsigned int value)\n {\n-  static char res[4];\n+  static unsigned char res[4];\n   int x;\n \n   res[3] = 0;\n   for(x = 0; x < 3; x++)\n     {\n-      res[x] = codings[value % number_of_codings];\n-      value = value / number_of_codings;\n+      res[x] = codings[value % ARRAY_SIZE (codings)];\n+      value = value / ARRAY_SIZE (codings);\n     }\n   return res;\n }\n@@ -427,11 +420,11 @@ encode_16 (unsigned int value)\n    16-bit integer.  */\n \n static int\n-decode_16 (const char *string)\n+decode_16 (const unsigned char *string)\n {\n-  return decodings[(int) string[2]] * number_of_codings * number_of_codings\n-    + decodings[(int) string[1]] * number_of_codings\n-    + decodings[(int) string[0]];\n+  return (decodings[string[2]] * ARRAY_SIZE (codings) * ARRAY_SIZE (codings)\n+\t  + decodings[string[1]] * ARRAY_SIZE (codings)\n+\t  + decodings[string[0]]);\n }\n \n /* ID_SUFFIX_LENGTH is used to determine how many characters in the\n@@ -452,14 +445,14 @@ static char *\n shorten_identifier (char *name)\n {\n   int crc, len, sum, x, final_len;\n-  char *crc_chars;\n+  unsigned char *crc_chars;\n   int suffix_length = ID_SUFFIX_LENGTH (name);\n \n   if ((len = strlen (name)) <= MAX_LABEL_LENGTH)\n     return name;\n \n   final_len = MAX_LABEL_LENGTH - 2 - 5 - 3 - 3 - suffix_length;\n-  crc = crc32 ((unsigned char *)name + final_len,\n+  crc = crc32 ((unsigned char *) name + final_len,\n \t       len - final_len - suffix_length);\n   crc_chars = encode_32 (crc);\n   sum = 0;\n@@ -487,7 +480,7 @@ shorten_identifier (char *name)\n static int\n is_truncated_identifier (char *id)\n {\n-  char *ptr;\n+  unsigned char *ptr;\n   int len = strlen (id);\n   /* If it's not exactly MAX_LABEL_LENGTH characters long, it can't be\n      a truncated identifier.  */\n@@ -496,8 +489,8 @@ is_truncated_identifier (char *id)\n \n   /* Start scanning backwards for a _h.  */\n   len = len - 3 - 3 - 5 - 2;\n-  ptr = id + len;\n-  while (ptr >= id)\n+  ptr = (unsigned char *) id + len;\n+  while (ptr >= (unsigned char *) id)\n     {\n       if (ptr[0] == '_' && ptr[1] == 'h')\n \t{"
    }
  ]
}