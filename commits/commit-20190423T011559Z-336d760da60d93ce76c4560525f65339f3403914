{
  "sha": "336d760da60d93ce76c4560525f65339f3403914",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzM2ZDc2MGRhNjBkOTNjZTc2YzQ1NjA1MjVmNjUzMzlmMzQwMzkxNA==",
  "commit": {
    "author": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-03-30T02:29:24Z"
    },
    "committer": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-04-23T01:15:59Z"
    },
    "message": "Support for DW_OP_addrx and DW_FORM_addrx tags\n\nDW_OP_addrx is the new name of DW_OP_GNU_addr_index, and DW_FORM_addrx\nis the name of DW_FORM_addr_index in the Dwarf 5 standard. This is a small\nstep towards supporting Dwarf 5 in gdb.\n\nNote: I could not find any tests specifically for *_GNU_addr_index, and\nI did not add any new tests, please advise.",
    "tree": {
      "sha": "046540585a0d50120caa44e4ff530acc16c70f67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/046540585a0d50120caa44e4ff530acc16c70f67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/336d760da60d93ce76c4560525f65339f3403914",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336d760da60d93ce76c4560525f65339f3403914",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/336d760da60d93ce76c4560525f65339f3403914",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336d760da60d93ce76c4560525f65339f3403914/comments",
  "author": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a4153dfc945701938b6f52795cf234fa0a5f5fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4153dfc945701938b6f52795cf234fa0a5f5fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a4153dfc945701938b6f52795cf234fa0a5f5fe"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 44,
    "deletions": 10
  },
  "files": [
    {
      "sha": "7c5e4fb3cd405170f0679dafb76b9e981e6d5e82",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -1,3 +1,24 @@\n+\n+2019-03-27  Ali Tamur  <tamur@google.com>\n+\n+\t* dwarf2-frame.c(dwarf_expr_executor::get_addr_index): Update comment\n+\t* dwarf2expr.c(dwarf_expr_context::execute_stack_op): Add DW_OP_addrx\n+\t* dwarf2expr.h(dwarf_expr_context::offset): Update comment\n+\t(dwarf_expr_context::get_addr_index): Likewise\n+\t* dwarf2loc.c(dwarf_evaluate_loc_desc::get_addr_index): Likewise\n+\t(symbol_needs_eval_context::get_addr_index): Likewise\n+\t(disassemble_dwarf_expression): Add DW_OP_addrx\n+\t* dwarf2read.c(attr_value_as_address): Add DW_FORM_addrx\n+\t(read_cutu_die_from_dwo): Update comment\n+\t(skip_one_die): Add DW_FORM_addrx\n+\t(read_attribute_value): Likewise\n+\t(var_decode_location): Add DW_OP_addrx\n+\t(dwarf2_const_value_attr): Add DW_FORM_addrx\n+\t(dump_die_shallow): Likewise\n+\t(dwarf2_fetch_constant_bytes): Likewise\n+\t(decode_locdesc): Add DW_OP_addrx\n+\t(skip_form_bytes): Add DW_FORM_addrx\n+\n 2019-04-22  Ali Tamur  <tamur@google.com>\n \n \t* MAINTAINERS (Write After Approval): Add self."
    },
    {
      "sha": "e2bf61bd3099465b7fc76ee748f88e47fda791de",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -290,7 +290,7 @@ class dwarf_expr_executor : public dwarf_expr_context\n \n   CORE_ADDR get_addr_index (unsigned int index) override\n   {\n-    invalid (\"DW_OP_GNU_addr_index\");\n+    invalid (\"DW_OP_addrx or DW_OP_GNU_addr_index\");\n   }\n \n  private:"
    },
    {
      "sha": "3bd9abc4401e4d555704bb27987c9487a72571e1",
      "filename": "gdb/dwarf2expr.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2expr.c?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -634,6 +634,7 @@ dwarf_expr_context::execute_stack_op (const gdb_byte *op_ptr,\n \t  result_val = value_from_ulongest (address_type, result);\n \t  break;\n \n+\tcase DW_OP_addrx:\n \tcase DW_OP_GNU_addr_index:\n \t  op_ptr = safe_read_uleb128 (op_ptr, op_end, &uoffset);\n \t  result = this->get_addr_index (uoffset);"
    },
    {
      "sha": "2a92a28908d44e16b4304fd15bb80e21b72bbebb",
      "filename": "gdb/dwarf2expr.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2expr.h?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -139,7 +139,8 @@ struct dwarf_expr_context\n      context and operations depending on DW_FORM_ref_addr are not allowed.  */\n   int ref_addr_size;\n \n-  /* Offset used to relocate DW_OP_addr and DW_OP_GNU_addr_index arguments.  */\n+  /* Offset used to relocate DW_OP_addr, DW_OP_addrx, and\n+     DW_OP_GNU_addr_index arguments.  */\n   CORE_ADDR offset;\n \n   /* The current depth of dwarf expression recursion, via DW_OP_call*,\n@@ -242,7 +243,7 @@ struct dwarf_expr_context\n \t\t\t\t\t   union call_site_parameter_u kind_u,\n \t\t\t\t\t   int deref_size) = 0;\n \n-  /* Return the address indexed by DW_OP_GNU_addr_index.\n+  /* Return the address indexed by DW_OP_addrx or DW_OP_GNU_addr_index.\n      This can throw an exception if the index is out of range.  */\n   virtual CORE_ADDR get_addr_index (unsigned int index) = 0;\n "
    },
    {
      "sha": "bd630ee0588693636989c31cdc34fae5ed00e2b9",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -636,7 +636,7 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n   }\n \n   /* Callback function for dwarf2_evaluate_loc_desc.\n-     Fetch the address indexed by DW_OP_GNU_addr_index.  */\n+     Fetch the address indexed by DW_OP_addrx or DW_OP_GNU_addr_index.  */\n \n   CORE_ADDR get_addr_index (unsigned int index) override\n   {\n@@ -2642,7 +2642,7 @@ class symbol_needs_eval_context : public dwarf_expr_context\n     push_address (0, 0);\n   }\n \n-  /* DW_OP_GNU_addr_index doesn't require a frame.  */\n+  /* DW_OP_addrx and DW_OP_GNU_addr_index doesn't require a frame.  */\n \n    CORE_ADDR get_addr_index (unsigned int index) override\n    {\n@@ -4086,6 +4086,7 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \t  fprintf_filtered (stream, \" offset %s\", phex_nz (ul, 4));\n \t  break;\n \n+\tcase DW_OP_addrx:\n \tcase DW_OP_GNU_addr_index:\n \t  data = safe_read_uleb128 (data, end, &ul);\n \t  ul = dwarf2_read_addr_index (per_cu, ul);"
    },
    {
      "sha": "829b07f01ac3d92193ebf61ecfc92fd4de38723c",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336d760da60d93ce76c4560525f65339f3403914/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=336d760da60d93ce76c4560525f65339f3403914",
      "patch": "@@ -2134,7 +2134,8 @@ attr_value_as_address (struct attribute *attr)\n {\n   CORE_ADDR addr;\n \n-  if (attr->form != DW_FORM_addr && attr->form != DW_FORM_GNU_addr_index)\n+  if (attr->form != DW_FORM_addr && attr->form != DW_FORM_addrx\n+      && attr->form != DW_FORM_GNU_addr_index)\n     {\n       /* Aside from a few clearly defined exceptions, attributes that\n \t contain an address must always be in DW_FORM_addr form.\n@@ -7229,7 +7230,8 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n       comp_dir = dwarf2_attr (stub_comp_unit_die, DW_AT_comp_dir, cu);\n \n       /* There should be a DW_AT_addr_base attribute here (if needed).\n-\t We need the value before we can process DW_FORM_GNU_addr_index.  */\n+\t We need the value before we can process DW_FORM_GNU_addr_index\n+         or DW_FORM_addrx.  */\n       cu->addr_base = 0;\n       attr = dwarf2_attr (stub_comp_unit_die, DW_AT_GNU_addr_base, cu);\n       if (attr)\n@@ -9366,6 +9368,7 @@ skip_one_die (const struct die_reader_specs *reader, const gdb_byte *info_ptr,\n \tcase DW_FORM_block4:\n \t  info_ptr += 4 + read_4_bytes (abfd, info_ptr);\n \t  break;\n+\tcase DW_FORM_addrx:\n \tcase DW_FORM_sdata:\n \tcase DW_FORM_udata:\n \tcase DW_FORM_ref_udata:\n@@ -19279,6 +19282,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n     case DW_FORM_implicit_const:\n       DW_SND (attr) = implicit_const;\n       break;\n+    case DW_FORM_addrx:\n     case DW_FORM_GNU_addr_index:\n       if (reader->dwo_file == NULL)\n \t{\n@@ -21360,13 +21364,14 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n \n   /* Handle one degenerate form of location expression specially, to\n      preserve GDB's previous behavior when section offsets are\n-     specified.  If this is just a DW_OP_addr or DW_OP_GNU_addr_index\n-     then mark this symbol as LOC_STATIC.  */\n+     specified.  If this is just a DW_OP_addr, DW_OP_addrx, or\n+     DW_OP_GNU_addr_index then mark this symbol as LOC_STATIC.  */\n \n   if (attr_form_is_block (attr)\n       && ((DW_BLOCK (attr)->data[0] == DW_OP_addr\n \t   && DW_BLOCK (attr)->size == 1 + cu_header->addr_size)\n-\t  || (DW_BLOCK (attr)->data[0] == DW_OP_GNU_addr_index\n+\t  || ((DW_BLOCK (attr)->data[0] == DW_OP_GNU_addr_index\n+               || DW_BLOCK (attr)->data[0] == DW_OP_addrx)\n \t      && (DW_BLOCK (attr)->size\n \t\t  == 1 + leb128_size (&DW_BLOCK (attr)->data[1])))))\n     {\n@@ -21863,6 +21868,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n   switch (attr->form)\n     {\n     case DW_FORM_addr:\n+    case DW_FORM_addrx:\n     case DW_FORM_GNU_addr_index:\n       {\n \tgdb_byte *data;\n@@ -22839,6 +22845,7 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n       switch (die->attrs[i].form)\n \t{\n \tcase DW_FORM_addr:\n+\tcase DW_FORM_addrx:\n \tcase DW_FORM_GNU_addr_index:\n \t  fprintf_unfiltered (f, \"address: \");\n \t  fputs_filtered (hex_string (DW_ADDR (&die->attrs[i])), f);\n@@ -23308,6 +23315,7 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n   switch (attr->form)\n     {\n     case DW_FORM_addr:\n+    case DW_FORM_addrx:\n     case DW_FORM_GNU_addr_index:\n       {\n \tgdb_byte *tem;\n@@ -23912,6 +23920,7 @@ decode_locdesc (struct dwarf_block *blk, struct dwarf2_cu *cu)\n \tcase DW_OP_GNU_uninit:\n \t  break;\n \n+\tcase DW_OP_addrx:\n \tcase DW_OP_GNU_addr_index:\n \tcase DW_OP_GNU_const_index:\n \t  stack[++stacki] = read_addr_index_from_leb128 (cu, &data[i],\n@@ -24282,6 +24291,7 @@ skip_form_bytes (bfd *abfd, const gdb_byte *bytes, const gdb_byte *buffer_end,\n       bytes += 4 + read_4_bytes (abfd, bytes);\n       break;\n \n+    case DW_FORM_addrx:\n     case DW_FORM_sdata:\n     case DW_FORM_udata:\n     case DW_FORM_GNU_addr_index:"
    }
  ]
}