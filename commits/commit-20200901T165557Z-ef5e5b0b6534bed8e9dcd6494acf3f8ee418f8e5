{
  "sha": "ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWY1ZTViMGI2NTM0YmVkOGU5ZGNkNjQ5NGFjZjNmOGVlNDE4ZjhlNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-01T16:54:38Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-01T16:55:57Z"
    },
    "message": "gdb: change bcache::insert `added` parameter to bool\n\nIt is currently an int, but it is used as a bool.\n\ngdb/ChangeLog:\n\n\t* bcache.h (struct bcache) <insert>: Change type of `added` to\n\tpointer to bool.\n\t* bcache.c (bcache::insert): Likewise.\n\t* gdbtypes.c (check_types_worklist): Adjust.\n\t* psymtab.c (add_psymbol_to_bcache): Adjust.\n\nChange-Id: I06b1041636c656782a89cb6106c9ae2593f61616",
    "tree": {
      "sha": "9b864d1f92574dd5b51d29e7cc4bac2dd2555404",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b864d1f92574dd5b51d29e7cc4bac2dd2555404"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c8584be76a2b95cd4876ac8622cb0f2d0fc1ad4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c8584be76a2b95cd4876ac8622cb0f2d0fc1ad4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c8584be76a2b95cd4876ac8622cb0f2d0fc1ad4"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 20,
    "deletions": 15
  },
  "files": [
    {
      "sha": "ab003afa3e44cb0cbb55c3552d0bd167b5241bf8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
      "patch": "@@ -1,3 +1,11 @@\n+2020-09-01  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* bcache.h (struct bcache) <insert>: Change type of `added` to\n+\tpointer to bool.\n+\t* bcache.c (bcache::insert): Likewise.\n+\t* gdbtypes.c (check_types_worklist): Adjust.\n+\t* psymtab.c (add_psymbol_to_bcache): Adjust.\n+\n 2020-08-31  Kevin Buettner  <kevinb@redhat.com>\n \n \t* corelow.c (unordered_set): Include."
    },
    {
      "sha": "9a8fb87bbe0f0ec8d8463a07d01f86c7571f1016",
      "filename": "gdb/bcache.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/bcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/bcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.c?ref=ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
      "patch": "@@ -140,15 +140,15 @@ bcache::expand_hash_table ()\n    returning an old entry.  */\n \n const void *\n-bcache::insert (const void *addr, int length, int *added)\n+bcache::insert (const void *addr, int length, bool *added)\n {\n   unsigned long full_hash;\n   unsigned short half_hash;\n   int hash_index;\n   struct bstring *s;\n \n-  if (added)\n-    *added = 0;\n+  if (added != nullptr)\n+    *added = false;\n \n   /* Lazily initialize the obstack.  This can save quite a bit of\n      memory in some cases.  */\n@@ -203,8 +203,8 @@ bcache::insert (const void *addr, int length, int *added)\n     m_unique_size += length;\n     m_structure_size += BSTRING_SIZE (length);\n \n-    if (added)\n-      *added = 1;\n+    if (added != nullptr)\n+      *added = true;\n \n     return &newobj->d.data;\n   }"
    },
    {
      "sha": "d8b18dcc441b951a049437f72512afa8e082b53d",
      "filename": "gdb/bcache.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/bcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/bcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.h?ref=ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
      "patch": "@@ -161,12 +161,12 @@ struct bcache\n   /* Find a copy of the LENGTH bytes at ADDR in BCACHE.  If BCACHE has\n      never seen those bytes before, add a copy of them to BCACHE.  In\n      either case, return a pointer to BCACHE's copy of that string.\n-     Since the cached value is ment to be read-only, return a const\n+     Since the cached value is meant to be read-only, return a const\n      buffer.  If ADDED is not NULL, set *ADDED to true if the bytes\n      were newly added to the cache, or to false if the bytes were\n      found in the cache.  */\n \n-  const void *insert (const void *addr, int length, int *added = nullptr);\n+  const void *insert (const void *addr, int length, bool *added = nullptr);\n \n   /* Print statistics on this bcache's memory usage and efficacity at\n      eliminating duplication.  TYPE should be a string describing the"
    },
    {
      "sha": "ab44ec3bc00a30775542a4060d9e04e3cbb93940",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
      "patch": "@@ -4088,7 +4088,7 @@ check_types_worklist (std::vector<type_equality_entry> *worklist,\n {\n   while (!worklist->empty ())\n     {\n-      int added;\n+      bool added;\n \n       struct type_equality_entry entry = std::move (worklist->back ());\n       worklist->pop_back ();"
    },
    {
      "sha": "59db469e5597724b2864aeb75ba1f144ddb9b702",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=ef5e5b0b6534bed8e9dcd6494acf3f8ee418f8e5",
      "patch": "@@ -1590,9 +1590,8 @@ psymbol_compare (const void *addr1, const void *addr2, int length)\n    different domain (or address) is possible and correct.  */\n \n static struct partial_symbol *\n-add_psymbol_to_bcache (const partial_symbol &psymbol,\n-\t\t       struct objfile *objfile,\n-\t\t       int *added)\n+add_psymbol_to_bcache (const partial_symbol &psymbol, struct objfile *objfile,\n+\t\t       bool *added)\n {\n   /* Stash the partial symbol away in the cache.  */\n   return ((struct partial_symbol *)\n@@ -1618,12 +1617,10 @@ add_psymbol_to_list (const partial_symbol &psymbol,\n \t\t     psymbol_placement where,\n \t\t     struct objfile *objfile)\n {\n-  struct partial_symbol *psym;\n-\n-  int added;\n+  bool added;\n \n   /* Stash the partial symbol away in the cache.  */\n-  psym = add_psymbol_to_bcache (psymbol, objfile, &added);\n+  partial_symbol *psym = add_psymbol_to_bcache (psymbol, objfile, &added);\n \n   /* Do not duplicate global partial symbols.  */\n   if (where == psymbol_placement::GLOBAL && !added)"
    }
  ]
}