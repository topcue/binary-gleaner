{
  "sha": "7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2NjYmI0NDM3YTI5ODk2OTU1YTZmZjNiMDQwNmIxY2MyYTdmNmZlMg==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:09Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:09Z"
    },
    "message": "sim/or1k: Regenerate sim\n\nThis picks up changes for:\n\n - new orfpx64a32 spec\n - new unordered instructions\n - documentation and symbol updates\n\nsim/ChangeLog:\n\n\t* or1k/cpu.c: Regenerate.\n\t* or1k/cpu.h: Regenerate.\n\t* or1k/decode.c: Regenerate.\n\t* or1k/decode.h: Regenerate.\n\t* or1k/model.c: Regenerate.\n\t* or1k/sem-switch.c: Regenerate.\n\t* or1k/sem.c: Regenerate.",
    "tree": {
      "sha": "bd7c4ad6a0b33e2fc26cd2b817c41828c975fe0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bd7c4ad6a0b33e2fc26cd2b817c41828c975fe0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "66eb1ed3882aa3c54daa2fe24b7479b5ee0538f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66eb1ed3882aa3c54daa2fe24b7479b5ee0538f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/66eb1ed3882aa3c54daa2fe24b7479b5ee0538f2"
    }
  ],
  "stats": {
    "total": 3587,
    "additions": 3198,
    "deletions": 389
  },
  "files": [
    {
      "sha": "d16f2cfa57c78201a1f0a3c0620f0864223e5936",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -1,3 +1,13 @@\n+2019-06-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* or1k/cpu.c: Regenerate.\n+\t* or1k/cpu.h: Regenerate.\n+\t* or1k/decode.c: Regenerate.\n+\t* or1k/decode.h: Regenerate.\n+\t* or1k/model.c: Regenerate.\n+\t* or1k/sem-switch.c: Regenerate.\n+\t* or1k/sem.c: Regenerate.\n+\n 2019-02-28  Joel Brobecker  <brobecker@adacore.com>\n \n \t* MAINTAINERS: Move Mike Frysinger to past maintainers' section."
    },
    {
      "sha": "ad317d6a9063ee837f528de9c0d9beb05dbcd6c7",
      "filename": "sim/or1k/arch.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/arch.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n "
    },
    {
      "sha": "1e8f90a561977a40ebc8e7b20727b0134dd0a496",
      "filename": "sim/or1k/arch.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/arch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/arch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/arch.h?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n "
    },
    {
      "sha": "a668ac4811bbd825324ecc6eadf90f38f5352795",
      "filename": "sim/or1k/cpu.c",
      "status": "modified",
      "additions": 63,
      "deletions": 15,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/cpu.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -44,6 +44,38 @@ or1k32bf_h_pc_set (SIM_CPU *current_cpu, USI newval)\n   SET_H_PC (newval);\n }\n \n+/* Get the value of h-spr.  */\n+\n+USI\n+or1k32bf_h_spr_get (SIM_CPU *current_cpu, UINT regno)\n+{\n+  return GET_H_SPR (regno);\n+}\n+\n+/* Set a value for h-spr.  */\n+\n+void\n+or1k32bf_h_spr_set (SIM_CPU *current_cpu, UINT regno, USI newval)\n+{\n+  SET_H_SPR (regno, newval);\n+}\n+\n+/* Get the value of h-gpr.  */\n+\n+USI\n+or1k32bf_h_gpr_get (SIM_CPU *current_cpu, UINT regno)\n+{\n+  return GET_H_GPR (regno);\n+}\n+\n+/* Set a value for h-gpr.  */\n+\n+void\n+or1k32bf_h_gpr_set (SIM_CPU *current_cpu, UINT regno, USI newval)\n+{\n+  SET_H_GPR (regno, newval);\n+}\n+\n /* Get the value of h-fsr.  */\n \n SF\n@@ -60,36 +92,36 @@ or1k32bf_h_fsr_set (SIM_CPU *current_cpu, UINT regno, SF newval)\n   SET_H_FSR (regno, newval);\n }\n \n-/* Get the value of h-spr.  */\n+/* Get the value of h-fd32r.  */\n \n-USI\n-or1k32bf_h_spr_get (SIM_CPU *current_cpu, UINT regno)\n+DF\n+or1k32bf_h_fd32r_get (SIM_CPU *current_cpu, UINT regno)\n {\n-  return GET_H_SPR (regno);\n+  return GET_H_FD32R (regno);\n }\n \n-/* Set a value for h-spr.  */\n+/* Set a value for h-fd32r.  */\n \n void\n-or1k32bf_h_spr_set (SIM_CPU *current_cpu, UINT regno, USI newval)\n+or1k32bf_h_fd32r_set (SIM_CPU *current_cpu, UINT regno, DF newval)\n {\n-  SET_H_SPR (regno, newval);\n+  SET_H_FD32R (regno, newval);\n }\n \n-/* Get the value of h-gpr.  */\n+/* Get the value of h-i64r.  */\n \n-USI\n-or1k32bf_h_gpr_get (SIM_CPU *current_cpu, UINT regno)\n+DI\n+or1k32bf_h_i64r_get (SIM_CPU *current_cpu, UINT regno)\n {\n-  return GET_H_GPR (regno);\n+  return GET_H_I64R (regno);\n }\n \n-/* Set a value for h-gpr.  */\n+/* Set a value for h-i64r.  */\n \n void\n-or1k32bf_h_gpr_set (SIM_CPU *current_cpu, UINT regno, USI newval)\n+or1k32bf_h_i64r_set (SIM_CPU *current_cpu, UINT regno, DI newval)\n {\n-  SET_H_GPR (regno, newval);\n+  SET_H_I64R (regno, newval);\n }\n \n /* Get the value of h-sys-vr.  */\n@@ -10172,6 +10204,22 @@ or1k32bf_h_atomic_address_set (SIM_CPU *current_cpu, SI newval)\n   CPU (h_atomic_address) = newval;\n }\n \n+/* Get the value of h-roff1.  */\n+\n+BI\n+or1k32bf_h_roff1_get (SIM_CPU *current_cpu)\n+{\n+  return CPU (h_roff1);\n+}\n+\n+/* Set a value for h-roff1.  */\n+\n+void\n+or1k32bf_h_roff1_set (SIM_CPU *current_cpu, BI newval)\n+{\n+  CPU (h_roff1) = newval;\n+}\n+\n /* Record trace results for INSN.  */\n \n void"
    },
    {
      "sha": "730392f411b1771c695014a12a7375576f7a1c9e",
      "filename": "sim/or1k/cpu.h",
      "status": "modified",
      "additions": 166,
      "deletions": 8,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/cpu.h?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -67,21 +67,41 @@ SET_H_SPR ((((index)) + (ORSI (SLLSI (SPR_GROUP_SYS, 11), SPR_INDEX_SYS_GPR0))),\n   SI h_atomic_address;\n #define GET_H_ATOMIC_ADDRESS() CPU (h_atomic_address)\n #define SET_H_ATOMIC_ADDRESS(x) (CPU (h_atomic_address) = (x))\n+  /* 1-bit offset flag */\n+  BI h_roff1;\n+#define GET_H_ROFF1() CPU (h_roff1)\n+#define SET_H_ROFF1(x) (CPU (h_roff1) = (x))\n   } hardware;\n #define CPU_CGEN_HW(cpu) (& (cpu)->cpu_data.hardware)\n } OR1K32BF_CPU_DATA;\n \n /* Virtual regs.  */\n \n+#define GET_H_SPR(index) or1k32bf_h_spr_get_raw (current_cpu, index)\n+#define SET_H_SPR(index, x) \\\n+do { \\\n+or1k32bf_h_spr_set_raw (current_cpu, (index), (x));\\\n+;} while (0)\n #define GET_H_FSR(index) SUBWORDSISF (TRUNCSISI (GET_H_GPR (index)))\n #define SET_H_FSR(index, x) \\\n do { \\\n SET_H_GPR ((index), ZEXTSISI (SUBWORDSFSI ((x))));\\\n ;} while (0)\n-#define GET_H_SPR(index) or1k32bf_h_spr_get_raw (current_cpu, index)\n-#define SET_H_SPR(index, x) \\\n+#define GET_H_FD32R(index) JOINSIDF (GET_H_GPR (((index) & (31))), GET_H_GPR (((((index) & (31))) + (((((((INT) (index) >> (5))) == (1))) ? (2) : (1))))))\n+#define SET_H_FD32R(index, x) \\\n do { \\\n-or1k32bf_h_spr_set_raw (current_cpu, (index), (x));\\\n+{\\\n+SET_H_GPR ((((index)) & (31)), SUBWORDDFSI ((x), 0));\\\n+SET_H_GPR ((((((index)) & (31))) + (((((((INT) ((index)) >> (5))) == (1))) ? (2) : (1)))), SUBWORDDFSI ((x), 1));\\\n+}\\\n+;} while (0)\n+#define GET_H_I64R(index) JOINSIDI (GET_H_GPR (((index) & (31))), GET_H_GPR (((((index) & (31))) + (((((((INT) (index) >> (5))) == (1))) ? (2) : (1))))))\n+#define SET_H_I64R(index, x) \\\n+do { \\\n+{\\\n+SET_H_GPR ((((index)) & (31)), SUBWORDDISI ((x), 0));\\\n+SET_H_GPR ((((((index)) & (31))) + (((((((INT) ((index)) >> (5))) == (1))) ? (2) : (1)))), SUBWORDDISI ((x), 1));\\\n+}\\\n ;} while (0)\n #define GET_H_SYS_VR() GET_H_SPR (ORSI (SLLSI (SPR_GROUP_SYS, 11), SPR_INDEX_SYS_VR))\n #define SET_H_SYS_VR(x) \\\n@@ -3227,12 +3247,16 @@ or1k32bf_h_spr_field_set_raw (current_cpu, ORSI (SLLSI (SPR_GROUP_SYS, 11), SPR_\n /* Cover fns for register access.  */\n USI or1k32bf_h_pc_get (SIM_CPU *);\n void or1k32bf_h_pc_set (SIM_CPU *, USI);\n-SF or1k32bf_h_fsr_get (SIM_CPU *, UINT);\n-void or1k32bf_h_fsr_set (SIM_CPU *, UINT, SF);\n USI or1k32bf_h_spr_get (SIM_CPU *, UINT);\n void or1k32bf_h_spr_set (SIM_CPU *, UINT, USI);\n USI or1k32bf_h_gpr_get (SIM_CPU *, UINT);\n void or1k32bf_h_gpr_set (SIM_CPU *, UINT, USI);\n+SF or1k32bf_h_fsr_get (SIM_CPU *, UINT);\n+void or1k32bf_h_fsr_set (SIM_CPU *, UINT, SF);\n+DF or1k32bf_h_fd32r_get (SIM_CPU *, UINT);\n+void or1k32bf_h_fd32r_set (SIM_CPU *, UINT, DF);\n+DI or1k32bf_h_i64r_get (SIM_CPU *, UINT);\n+void or1k32bf_h_i64r_set (SIM_CPU *, UINT, DI);\n USI or1k32bf_h_sys_vr_get (SIM_CPU *);\n void or1k32bf_h_sys_vr_set (SIM_CPU *, USI);\n USI or1k32bf_h_sys_upr_get (SIM_CPU *);\n@@ -4493,6 +4517,8 @@ BI or1k32bf_h_atomic_reserve_get (SIM_CPU *);\n void or1k32bf_h_atomic_reserve_set (SIM_CPU *, BI);\n SI or1k32bf_h_atomic_address_get (SIM_CPU *);\n void or1k32bf_h_atomic_address_set (SIM_CPU *, SI);\n+BI or1k32bf_h_roff1_get (SIM_CPU *);\n+void or1k32bf_h_roff1_set (SIM_CPU *, BI);\n \n /* These must be hand-written.  */\n extern CPUREG_FETCH_FN or1k32bf_fetch_register;\n@@ -4519,6 +4545,11 @@ union sem_fields {\n     IADDR i_disp21;\n     UINT f_r1;\n   } sfmt_l_adrp;\n+  struct { /*  */\n+    SI f_rad32;\n+    SI f_rbd32;\n+    SI f_rdd32;\n+  } sfmt_lf_add_d32;\n   struct { /*  */\n     UINT f_r1;\n     UINT f_r2;\n@@ -4978,6 +5009,33 @@ struct scache {\n   f_resv_10_3 = EXTRACT_LSB0_UINT (insn, 32, 10, 3); \\\n   f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n \n+#define EXTRACT_IFMT_LF_ADD_D32_VARS \\\n+  UINT f_opcode; \\\n+  UINT f_r1; \\\n+  UINT f_rdoff_10_1; \\\n+  SI f_rdd32; \\\n+  UINT f_r2; \\\n+  UINT f_raoff_9_1; \\\n+  SI f_rad32; \\\n+  UINT f_r3; \\\n+  UINT f_rboff_8_1; \\\n+  SI f_rbd32; \\\n+  UINT f_op_7_8; \\\n+  unsigned int length;\n+#define EXTRACT_IFMT_LF_ADD_D32_CODE \\\n+  length = 4; \\\n+  f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n+  f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n+  f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1); \\\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\\\n+  f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5); \\\n+  f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1); \\\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\\\n+  f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5); \\\n+  f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1); \\\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\\\n+  f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n+\n #define EXTRACT_IFMT_LF_ITOF_S_VARS \\\n   UINT f_opcode; \\\n   UINT f_r1; \\\n@@ -4995,6 +5053,31 @@ struct scache {\n   f_resv_10_3 = EXTRACT_LSB0_UINT (insn, 32, 10, 3); \\\n   f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n \n+#define EXTRACT_IFMT_LF_ITOF_D32_VARS \\\n+  UINT f_opcode; \\\n+  UINT f_r3; \\\n+  UINT f_r1; \\\n+  UINT f_rdoff_10_1; \\\n+  SI f_rdd32; \\\n+  UINT f_r2; \\\n+  UINT f_raoff_9_1; \\\n+  SI f_rad32; \\\n+  UINT f_resv_8_1; \\\n+  UINT f_op_7_8; \\\n+  unsigned int length;\n+#define EXTRACT_IFMT_LF_ITOF_D32_CODE \\\n+  length = 4; \\\n+  f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n+  f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5); \\\n+  f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n+  f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1); \\\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\\\n+  f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5); \\\n+  f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1); \\\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\\\n+  f_resv_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1); \\\n+  f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n+\n #define EXTRACT_IFMT_LF_FTOI_S_VARS \\\n   UINT f_opcode; \\\n   UINT f_r1; \\\n@@ -5012,15 +5095,40 @@ struct scache {\n   f_resv_10_3 = EXTRACT_LSB0_UINT (insn, 32, 10, 3); \\\n   f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n \n-#define EXTRACT_IFMT_LF_EQ_S_VARS \\\n+#define EXTRACT_IFMT_LF_FTOI_D32_VARS \\\n+  UINT f_opcode; \\\n+  UINT f_r3; \\\n+  UINT f_r1; \\\n+  UINT f_rdoff_10_1; \\\n+  SI f_rdd32; \\\n+  UINT f_r2; \\\n+  UINT f_raoff_9_1; \\\n+  SI f_rad32; \\\n+  UINT f_resv_8_1; \\\n+  UINT f_op_7_8; \\\n+  unsigned int length;\n+#define EXTRACT_IFMT_LF_FTOI_D32_CODE \\\n+  length = 4; \\\n+  f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n+  f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5); \\\n+  f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n+  f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1); \\\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\\\n+  f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5); \\\n+  f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1); \\\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\\\n+  f_resv_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1); \\\n+  f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n+\n+#define EXTRACT_IFMT_LF_SFEQ_S_VARS \\\n   UINT f_opcode; \\\n   UINT f_r1; \\\n   UINT f_r2; \\\n   UINT f_r3; \\\n   UINT f_resv_10_3; \\\n   UINT f_op_7_8; \\\n   unsigned int length;\n-#define EXTRACT_IFMT_LF_EQ_S_CODE \\\n+#define EXTRACT_IFMT_LF_SFEQ_S_CODE \\\n   length = 4; \\\n   f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n   f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n@@ -5029,6 +5137,31 @@ struct scache {\n   f_resv_10_3 = EXTRACT_LSB0_UINT (insn, 32, 10, 3); \\\n   f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n \n+#define EXTRACT_IFMT_LF_SFEQ_D32_VARS \\\n+  UINT f_opcode; \\\n+  UINT f_r1; \\\n+  UINT f_resv_10_1; \\\n+  UINT f_r2; \\\n+  UINT f_raoff_9_1; \\\n+  SI f_rad32; \\\n+  UINT f_r3; \\\n+  UINT f_rboff_8_1; \\\n+  SI f_rbd32; \\\n+  UINT f_op_7_8; \\\n+  unsigned int length;\n+#define EXTRACT_IFMT_LF_SFEQ_D32_CODE \\\n+  length = 4; \\\n+  f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n+  f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n+  f_resv_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1); \\\n+  f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5); \\\n+  f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1); \\\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\\\n+  f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5); \\\n+  f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1); \\\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\\\n+  f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n+\n #define EXTRACT_IFMT_LF_CUST1_S_VARS \\\n   UINT f_opcode; \\\n   UINT f_resv_25_5; \\\n@@ -5046,6 +5179,31 @@ struct scache {\n   f_resv_10_3 = EXTRACT_LSB0_UINT (insn, 32, 10, 3); \\\n   f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n \n+#define EXTRACT_IFMT_LF_CUST1_D32_VARS \\\n+  UINT f_opcode; \\\n+  UINT f_resv_25_5; \\\n+  UINT f_resv_10_1; \\\n+  UINT f_r2; \\\n+  UINT f_raoff_9_1; \\\n+  SI f_rad32; \\\n+  UINT f_r3; \\\n+  UINT f_rboff_8_1; \\\n+  SI f_rbd32; \\\n+  UINT f_op_7_8; \\\n+  unsigned int length;\n+#define EXTRACT_IFMT_LF_CUST1_D32_CODE \\\n+  length = 4; \\\n+  f_opcode = EXTRACT_LSB0_UINT (insn, 32, 31, 6); \\\n+  f_resv_25_5 = EXTRACT_LSB0_UINT (insn, 32, 25, 5); \\\n+  f_resv_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1); \\\n+  f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5); \\\n+  f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1); \\\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\\\n+  f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5); \\\n+  f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1); \\\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\\\n+  f_op_7_8 = EXTRACT_LSB0_UINT (insn, 32, 7, 8); \\\n+\n /* Collection of various things for the trace handler to use.  */\n \n typedef struct trace_record {"
    },
    {
      "sha": "a6371ccb3f00aec39402bc0b698105f0663aa832",
      "filename": "sim/or1k/cpuall.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpuall.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/cpuall.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/cpuall.h?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n "
    },
    {
      "sha": "779594b6cf2dfbf5565262aa61acb005c29e402b",
      "filename": "sim/or1k/decode.c",
      "status": "modified",
      "additions": 478,
      "deletions": 90,
      "changes": 568,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/decode.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -144,20 +144,49 @@ static const struct insn_sem or1k32bf_insn_sem[] =\n   { OR1K_INSN_L_CUST7, OR1K32BF_INSN_L_CUST7, OR1K32BF_SFMT_L_MSYNC },\n   { OR1K_INSN_L_CUST8, OR1K32BF_INSN_L_CUST8, OR1K32BF_SFMT_L_MSYNC },\n   { OR1K_INSN_LF_ADD_S, OR1K32BF_INSN_LF_ADD_S, OR1K32BF_SFMT_LF_ADD_S },\n+  { OR1K_INSN_LF_ADD_D32, OR1K32BF_INSN_LF_ADD_D32, OR1K32BF_SFMT_LF_ADD_D32 },\n   { OR1K_INSN_LF_SUB_S, OR1K32BF_INSN_LF_SUB_S, OR1K32BF_SFMT_LF_ADD_S },\n+  { OR1K_INSN_LF_SUB_D32, OR1K32BF_INSN_LF_SUB_D32, OR1K32BF_SFMT_LF_ADD_D32 },\n   { OR1K_INSN_LF_MUL_S, OR1K32BF_INSN_LF_MUL_S, OR1K32BF_SFMT_LF_ADD_S },\n+  { OR1K_INSN_LF_MUL_D32, OR1K32BF_INSN_LF_MUL_D32, OR1K32BF_SFMT_LF_ADD_D32 },\n   { OR1K_INSN_LF_DIV_S, OR1K32BF_INSN_LF_DIV_S, OR1K32BF_SFMT_LF_ADD_S },\n+  { OR1K_INSN_LF_DIV_D32, OR1K32BF_INSN_LF_DIV_D32, OR1K32BF_SFMT_LF_ADD_D32 },\n   { OR1K_INSN_LF_REM_S, OR1K32BF_INSN_LF_REM_S, OR1K32BF_SFMT_LF_ADD_S },\n+  { OR1K_INSN_LF_REM_D32, OR1K32BF_INSN_LF_REM_D32, OR1K32BF_SFMT_LF_ADD_D32 },\n   { OR1K_INSN_LF_ITOF_S, OR1K32BF_INSN_LF_ITOF_S, OR1K32BF_SFMT_LF_ITOF_S },\n+  { OR1K_INSN_LF_ITOF_D32, OR1K32BF_INSN_LF_ITOF_D32, OR1K32BF_SFMT_LF_ITOF_D32 },\n   { OR1K_INSN_LF_FTOI_S, OR1K32BF_INSN_LF_FTOI_S, OR1K32BF_SFMT_LF_FTOI_S },\n-  { OR1K_INSN_LF_EQ_S, OR1K32BF_INSN_LF_EQ_S, OR1K32BF_SFMT_LF_EQ_S },\n-  { OR1K_INSN_LF_NE_S, OR1K32BF_INSN_LF_NE_S, OR1K32BF_SFMT_LF_EQ_S },\n-  { OR1K_INSN_LF_GE_S, OR1K32BF_INSN_LF_GE_S, OR1K32BF_SFMT_LF_EQ_S },\n-  { OR1K_INSN_LF_GT_S, OR1K32BF_INSN_LF_GT_S, OR1K32BF_SFMT_LF_EQ_S },\n-  { OR1K_INSN_LF_LT_S, OR1K32BF_INSN_LF_LT_S, OR1K32BF_SFMT_LF_EQ_S },\n-  { OR1K_INSN_LF_LE_S, OR1K32BF_INSN_LF_LE_S, OR1K32BF_SFMT_LF_EQ_S },\n+  { OR1K_INSN_LF_FTOI_D32, OR1K32BF_INSN_LF_FTOI_D32, OR1K32BF_SFMT_LF_FTOI_D32 },\n+  { OR1K_INSN_LF_SFEQ_S, OR1K32BF_INSN_LF_SFEQ_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFEQ_D32, OR1K32BF_INSN_LF_SFEQ_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFNE_S, OR1K32BF_INSN_LF_SFNE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFNE_D32, OR1K32BF_INSN_LF_SFNE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFGE_S, OR1K32BF_INSN_LF_SFGE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFGE_D32, OR1K32BF_INSN_LF_SFGE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFGT_S, OR1K32BF_INSN_LF_SFGT_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFGT_D32, OR1K32BF_INSN_LF_SFGT_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFLT_S, OR1K32BF_INSN_LF_SFLT_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFLT_D32, OR1K32BF_INSN_LF_SFLT_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFLE_S, OR1K32BF_INSN_LF_SFLE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFLE_D32, OR1K32BF_INSN_LF_SFLE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFUEQ_S, OR1K32BF_INSN_LF_SFUEQ_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFUEQ_D32, OR1K32BF_INSN_LF_SFUEQ_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFUNE_S, OR1K32BF_INSN_LF_SFUNE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFUNE_D32, OR1K32BF_INSN_LF_SFUNE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFUGT_S, OR1K32BF_INSN_LF_SFUGT_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFUGT_D32, OR1K32BF_INSN_LF_SFUGT_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFUGE_S, OR1K32BF_INSN_LF_SFUGE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFUGE_D32, OR1K32BF_INSN_LF_SFUGE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFULT_S, OR1K32BF_INSN_LF_SFULT_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFULT_D32, OR1K32BF_INSN_LF_SFULT_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFULE_S, OR1K32BF_INSN_LF_SFULE_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFULE_D32, OR1K32BF_INSN_LF_SFULE_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n+  { OR1K_INSN_LF_SFUN_S, OR1K32BF_INSN_LF_SFUN_S, OR1K32BF_SFMT_LF_SFEQ_S },\n+  { OR1K_INSN_LF_SFUN_D32, OR1K32BF_INSN_LF_SFUN_D32, OR1K32BF_SFMT_LF_SFEQ_D32 },\n   { OR1K_INSN_LF_MADD_S, OR1K32BF_INSN_LF_MADD_S, OR1K32BF_SFMT_LF_MADD_S },\n+  { OR1K_INSN_LF_MADD_D32, OR1K32BF_INSN_LF_MADD_D32, OR1K32BF_SFMT_LF_MADD_D32 },\n   { OR1K_INSN_LF_CUST1_S, OR1K32BF_INSN_LF_CUST1_S, OR1K32BF_SFMT_L_MSYNC },\n+  { OR1K_INSN_LF_CUST1_D32, OR1K32BF_INSN_LF_CUST1_D32, OR1K32BF_SFMT_L_MSYNC },\n };\n \n static const struct insn_sem or1k32bf_insn_sem_invalid =\n@@ -235,7 +264,7 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n     CGEN_INSN_WORD insn = base_insn;\n \n     {\n-      unsigned int val = (((insn >> 21) & (63 << 5)) | ((insn >> 2) & (1 << 4)) | ((insn >> 0) & (15 << 0)));\n+      unsigned int val = (((insn >> 21) & (63 << 5)) | ((insn >> 0) & (31 << 0)));\n       switch (val)\n       {\n       case 0 : /* fall through */\n@@ -1083,22 +1112,7 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n       case 1484 : /* fall through */\n       case 1485 : /* fall through */\n       case 1486 : /* fall through */\n-      case 1487 :\n-        {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n-          switch (val)\n-          {\n-          case 0 :\n-            if ((entire_insn & 0xfc00ffc0) == 0xb8000000)\n-              { itype = OR1K32BF_INSN_L_SLLI; goto extract_sfmt_l_slli; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          case 1 :\n-            if ((entire_insn & 0xfc00ffc0) == 0xb8000080)\n-              { itype = OR1K32BF_INSN_L_SRAI; goto extract_sfmt_l_slli; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          }\n-        }\n+      case 1487 : /* fall through */\n       case 1488 : /* fall through */\n       case 1489 : /* fall through */\n       case 1490 : /* fall through */\n@@ -1116,14 +1130,22 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n       case 1502 : /* fall through */\n       case 1503 :\n         {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n+          unsigned int val = (((insn >> 6) & (3 << 0)));\n           switch (val)\n           {\n           case 0 :\n+            if ((entire_insn & 0xfc00ffc0) == 0xb8000000)\n+              { itype = OR1K32BF_INSN_L_SLLI; goto extract_sfmt_l_slli; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n             if ((entire_insn & 0xfc00ffc0) == 0xb8000040)\n               { itype = OR1K32BF_INSN_L_SRLI; goto extract_sfmt_l_slli; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          case 1 :\n+          case 2 :\n+            if ((entire_insn & 0xfc00ffc0) == 0xb8000080)\n+              { itype = OR1K32BF_INSN_L_SRAI; goto extract_sfmt_l_slli; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 3 :\n             if ((entire_insn & 0xfc00ffc0) == 0xb80000c0)\n               { itype = OR1K32BF_INSN_L_RORI; goto extract_sfmt_l_slli; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n@@ -1258,9 +1280,21 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n           { itype = OR1K32BF_INSN_L_MSBU; goto extract_sfmt_l_macu; }\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1600 :\n-        if ((entire_insn & 0xfc0007ff) == 0xc8000000)\n-          { itype = OR1K32BF_INSN_LF_ADD_S; goto extract_sfmt_lf_add_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (7 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xfc0007ff) == 0xc8000000)\n+              { itype = OR1K32BF_INSN_LF_ADD_S; goto extract_sfmt_lf_add_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 7 :\n+            if ((entire_insn & 0xffe004ff) == 0xc80000e0)\n+              { itype = OR1K32BF_INSN_LF_CUST1_D32; goto extract_sfmt_l_msync; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1601 :\n         if ((entire_insn & 0xfc0007ff) == 0xc8000001)\n           { itype = OR1K32BF_INSN_LF_SUB_S; goto extract_sfmt_lf_add_s; }\n@@ -1290,32 +1324,248 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n           { itype = OR1K32BF_INSN_LF_MADD_S; goto extract_sfmt_lf_madd_s; }\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1608 :\n-        if ((entire_insn & 0xffe007ff) == 0xc8000008)\n-          { itype = OR1K32BF_INSN_LF_EQ_S; goto extract_sfmt_lf_eq_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc8000008)\n+              { itype = OR1K32BF_INSN_LF_SFEQ_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc8000028)\n+              { itype = OR1K32BF_INSN_LF_SFUEQ_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1609 :\n-        if ((entire_insn & 0xffe007ff) == 0xc8000009)\n-          { itype = OR1K32BF_INSN_LF_NE_S; goto extract_sfmt_lf_eq_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc8000009)\n+              { itype = OR1K32BF_INSN_LF_SFNE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc8000029)\n+              { itype = OR1K32BF_INSN_LF_SFUNE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1610 :\n-        if ((entire_insn & 0xffe007ff) == 0xc800000a)\n-          { itype = OR1K32BF_INSN_LF_GT_S; goto extract_sfmt_lf_eq_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800000a)\n+              { itype = OR1K32BF_INSN_LF_SFGT_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800002a)\n+              { itype = OR1K32BF_INSN_LF_SFUGT_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1611 :\n-        if ((entire_insn & 0xffe007ff) == 0xc800000b)\n-          { itype = OR1K32BF_INSN_LF_GE_S; goto extract_sfmt_lf_eq_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800000b)\n+              { itype = OR1K32BF_INSN_LF_SFGE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800002b)\n+              { itype = OR1K32BF_INSN_LF_SFUGE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1612 :\n-        if ((entire_insn & 0xffe007ff) == 0xc800000c)\n-          { itype = OR1K32BF_INSN_LF_LT_S; goto extract_sfmt_lf_eq_s; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800000c)\n+              { itype = OR1K32BF_INSN_LF_SFLT_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800002c)\n+              { itype = OR1K32BF_INSN_LF_SFULT_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n       case 1613 :\n-        if ((entire_insn & 0xffe007ff) == 0xc800000d)\n-          { itype = OR1K32BF_INSN_LF_LE_S; goto extract_sfmt_lf_eq_s; }\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800000d)\n+              { itype = OR1K32BF_INSN_LF_SFLE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe007ff) == 0xc800002d)\n+              { itype = OR1K32BF_INSN_LF_SFULE_S; goto extract_sfmt_lf_sfeq_s; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1614 :\n+        if ((entire_insn & 0xffe007ff) == 0xc800002e)\n+          { itype = OR1K32BF_INSN_LF_SFUN_S; goto extract_sfmt_lf_sfeq_s; }\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1616 :\n-        if ((entire_insn & 0xffe007ff) == 0xc80000d0)\n-          { itype = OR1K32BF_INSN_LF_CUST1_S; goto extract_sfmt_l_msync; }\n+        {\n+          unsigned int val = (((insn >> 6) & (3 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xfc0000ff) == 0xc8000010)\n+              { itype = OR1K32BF_INSN_LF_ADD_D32; goto extract_sfmt_lf_add_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 3 :\n+            if ((entire_insn & 0xffe007ff) == 0xc80000d0)\n+              { itype = OR1K32BF_INSN_LF_CUST1_S; goto extract_sfmt_l_msync; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1617 :\n+        if ((entire_insn & 0xfc0000ff) == 0xc8000011)\n+          { itype = OR1K32BF_INSN_LF_SUB_D32; goto extract_sfmt_lf_add_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1618 :\n+        if ((entire_insn & 0xfc0000ff) == 0xc8000012)\n+          { itype = OR1K32BF_INSN_LF_MUL_D32; goto extract_sfmt_lf_add_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1619 :\n+        if ((entire_insn & 0xfc0000ff) == 0xc8000013)\n+          { itype = OR1K32BF_INSN_LF_DIV_D32; goto extract_sfmt_lf_add_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1620 :\n+        if ((entire_insn & 0xfc00f9ff) == 0xc8000014)\n+          { itype = OR1K32BF_INSN_LF_ITOF_D32; goto extract_sfmt_lf_itof_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1621 :\n+        if ((entire_insn & 0xfc00f9ff) == 0xc8000015)\n+          { itype = OR1K32BF_INSN_LF_FTOI_D32; goto extract_sfmt_lf_ftoi_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1622 :\n+        if ((entire_insn & 0xfc0000ff) == 0xc8000016)\n+          { itype = OR1K32BF_INSN_LF_REM_D32; goto extract_sfmt_lf_add_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1623 :\n+        if ((entire_insn & 0xfc0000ff) == 0xc8000017)\n+          { itype = OR1K32BF_INSN_LF_MADD_D32; goto extract_sfmt_lf_madd_d32; }\n+        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+      case 1624 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc8000018)\n+              { itype = OR1K32BF_INSN_LF_SFEQ_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc8000038)\n+              { itype = OR1K32BF_INSN_LF_SFUEQ_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1625 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc8000019)\n+              { itype = OR1K32BF_INSN_LF_SFNE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc8000039)\n+              { itype = OR1K32BF_INSN_LF_SFUNE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1626 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800001a)\n+              { itype = OR1K32BF_INSN_LF_SFGT_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800003a)\n+              { itype = OR1K32BF_INSN_LF_SFUGT_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1627 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800001b)\n+              { itype = OR1K32BF_INSN_LF_SFGE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800003b)\n+              { itype = OR1K32BF_INSN_LF_SFUGE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1628 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800001c)\n+              { itype = OR1K32BF_INSN_LF_SFLT_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800003c)\n+              { itype = OR1K32BF_INSN_LF_SFULT_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1629 :\n+        {\n+          unsigned int val = (((insn >> 5) & (1 << 0)));\n+          switch (val)\n+          {\n+          case 0 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800001d)\n+              { itype = OR1K32BF_INSN_LF_SFLE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 1 :\n+            if ((entire_insn & 0xffe004ff) == 0xc800003d)\n+              { itype = OR1K32BF_INSN_LF_SFULE_D32; goto extract_sfmt_lf_sfeq_d32; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          }\n+        }\n+      case 1630 :\n+        if ((entire_insn & 0xffe004ff) == 0xc800003e)\n+          { itype = OR1K32BF_INSN_LF_SFUN_D32; goto extract_sfmt_lf_sfeq_d32; }\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1632 : /* fall through */\n       case 1633 : /* fall through */\n@@ -1479,17 +1729,25 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1800 :\n         {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n+          unsigned int val = (((insn >> 6) & (3 << 0)));\n           switch (val)\n           {\n           case 0 :\n             if ((entire_insn & 0xfc0007ff) == 0xe0000008)\n               { itype = OR1K32BF_INSN_L_SLL; goto extract_sfmt_l_sll; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           case 1 :\n+            if ((entire_insn & 0xfc0007ff) == 0xe0000048)\n+              { itype = OR1K32BF_INSN_L_SRL; goto extract_sfmt_l_sll; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 2 :\n             if ((entire_insn & 0xfc0007ff) == 0xe0000088)\n               { itype = OR1K32BF_INSN_L_SRA; goto extract_sfmt_l_sll; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 3 :\n+            if ((entire_insn & 0xfc0007ff) == 0xe00000c8)\n+              { itype = OR1K32BF_INSN_L_ROR; goto extract_sfmt_l_sll; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           }\n         }\n@@ -1507,30 +1765,42 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n         itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1804 :\n         {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n+          unsigned int val = (((insn >> 6) & (3 << 0)));\n           switch (val)\n           {\n           case 0 :\n             if ((entire_insn & 0xfc00ffff) == 0xe000000c)\n               { itype = OR1K32BF_INSN_L_EXTHS; goto extract_sfmt_l_exths; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           case 1 :\n+            if ((entire_insn & 0xfc00ffff) == 0xe000004c)\n+              { itype = OR1K32BF_INSN_L_EXTBS; goto extract_sfmt_l_exths; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 2 :\n             if ((entire_insn & 0xfc00ffff) == 0xe000008c)\n               { itype = OR1K32BF_INSN_L_EXTHZ; goto extract_sfmt_l_exths; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 3 :\n+            if ((entire_insn & 0xfc00ffff) == 0xe00000cc)\n+              { itype = OR1K32BF_INSN_L_EXTBZ; goto extract_sfmt_l_exths; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           }\n         }\n       case 1805 :\n         {\n-          unsigned int val = (((insn >> 8) & (3 << 0)));\n+          unsigned int val = (((insn >> 7) & (3 << 1)) | ((insn >> 6) & (1 << 0)));\n           switch (val)\n           {\n           case 0 :\n             if ((entire_insn & 0xfc00ffff) == 0xe000000d)\n               { itype = OR1K32BF_INSN_L_EXTWS; goto extract_sfmt_l_exths; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          case 3 :\n+          case 1 :\n+            if ((entire_insn & 0xfc00ffff) == 0xe000004d)\n+              { itype = OR1K32BF_INSN_L_EXTWZ; goto extract_sfmt_l_exths; }\n+            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n+          case 6 :\n             if ((entire_insn & 0xffe007ff) == 0xe000030d)\n               { itype = OR1K32BF_INSN_L_MULDU; goto extract_sfmt_l_muld; }\n             itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n@@ -1557,42 +1827,6 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n           default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n           }\n         }\n-      case 1816 :\n-        {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n-          switch (val)\n-          {\n-          case 0 :\n-            if ((entire_insn & 0xfc0007ff) == 0xe0000048)\n-              { itype = OR1K32BF_INSN_L_SRL; goto extract_sfmt_l_sll; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          case 1 :\n-            if ((entire_insn & 0xfc0007ff) == 0xe00000c8)\n-              { itype = OR1K32BF_INSN_L_ROR; goto extract_sfmt_l_sll; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          }\n-        }\n-      case 1820 :\n-        {\n-          unsigned int val = (((insn >> 7) & (1 << 0)));\n-          switch (val)\n-          {\n-          case 0 :\n-            if ((entire_insn & 0xfc00ffff) == 0xe000004c)\n-              { itype = OR1K32BF_INSN_L_EXTBS; goto extract_sfmt_l_exths; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          case 1 :\n-            if ((entire_insn & 0xfc00ffff) == 0xe00000cc)\n-              { itype = OR1K32BF_INSN_L_EXTBZ; goto extract_sfmt_l_exths; }\n-            itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          default : itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n-          }\n-        }\n-      case 1821 :\n-        if ((entire_insn & 0xfc00ffff) == 0xe000004d)\n-          { itype = OR1K32BF_INSN_L_EXTWZ; goto extract_sfmt_l_exths; }\n-        itype = OR1K32BF_INSN_X_INVALID; goto extract_sfmt_empty;\n       case 1824 :\n         {\n           unsigned int val = (((insn >> 21) & (15 << 0)));\n@@ -2682,6 +2916,41 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n   FLD (f_r1) = f_r1;\n   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_add_s\", \"f_r2 0x%x\", 'x', f_r2, \"f_r3 0x%x\", 'x', f_r3, \"f_r1 0x%x\", 'x', f_r1, (char *) 0));\n \n+#undef FLD\n+    return idesc;\n+  }\n+\n+ extract_sfmt_lf_add_d32:\n+  {\n+    const IDESC *idesc = &or1k32bf_insn_data[itype];\n+    CGEN_INSN_WORD insn = entire_insn;\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+    UINT f_r1;\n+    UINT f_r2;\n+    UINT f_r3;\n+    UINT f_rdoff_10_1;\n+    UINT f_raoff_9_1;\n+    UINT f_rboff_8_1;\n+    SI f_rdd32;\n+    SI f_rad32;\n+    SI f_rbd32;\n+\n+    f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5);\n+    f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5);\n+    f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5);\n+    f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1);\n+    f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1);\n+    f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1);\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\n+\n+  /* Record the fields for the semantic handler.  */\n+  FLD (f_rad32) = f_rad32;\n+  FLD (f_rbd32) = f_rbd32;\n+  FLD (f_rdd32) = f_rdd32;\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_add_d32\", \"f_rad32 0x%x\", 'x', f_rad32, \"f_rbd32 0x%x\", 'x', f_rbd32, \"f_rdd32 0x%x\", 'x', f_rdd32, (char *) 0));\n+\n #undef FLD\n     return idesc;\n   }\n@@ -2702,6 +2971,34 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n   FLD (f_r1) = f_r1;\n   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_itof_s\", \"f_r2 0x%x\", 'x', f_r2, \"f_r1 0x%x\", 'x', f_r1, (char *) 0));\n \n+#undef FLD\n+    return idesc;\n+  }\n+\n+ extract_sfmt_lf_itof_d32:\n+  {\n+    const IDESC *idesc = &or1k32bf_insn_data[itype];\n+    CGEN_INSN_WORD insn = entire_insn;\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+    UINT f_r1;\n+    UINT f_r2;\n+    UINT f_rdoff_10_1;\n+    UINT f_raoff_9_1;\n+    SI f_rdd32;\n+    SI f_rad32;\n+\n+    f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5);\n+    f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5);\n+    f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1);\n+    f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1);\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\n+\n+  /* Record the fields for the semantic handler.  */\n+  FLD (f_rad32) = f_rad32;\n+  FLD (f_rdd32) = f_rdd32;\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_itof_d32\", \"f_rad32 0x%x\", 'x', f_rad32, \"f_rdd32 0x%x\", 'x', f_rdd32, (char *) 0));\n+\n #undef FLD\n     return idesc;\n   }\n@@ -2726,7 +3023,35 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n     return idesc;\n   }\n \n- extract_sfmt_lf_eq_s:\n+ extract_sfmt_lf_ftoi_d32:\n+  {\n+    const IDESC *idesc = &or1k32bf_insn_data[itype];\n+    CGEN_INSN_WORD insn = entire_insn;\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+    UINT f_r1;\n+    UINT f_r2;\n+    UINT f_rdoff_10_1;\n+    UINT f_raoff_9_1;\n+    SI f_rdd32;\n+    SI f_rad32;\n+\n+    f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5);\n+    f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5);\n+    f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1);\n+    f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1);\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\n+\n+  /* Record the fields for the semantic handler.  */\n+  FLD (f_rad32) = f_rad32;\n+  FLD (f_rdd32) = f_rdd32;\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_ftoi_d32\", \"f_rad32 0x%x\", 'x', f_rad32, \"f_rdd32 0x%x\", 'x', f_rdd32, (char *) 0));\n+\n+#undef FLD\n+    return idesc;\n+  }\n+\n+ extract_sfmt_lf_sfeq_s:\n   {\n     const IDESC *idesc = &or1k32bf_insn_data[itype];\n     CGEN_INSN_WORD insn = entire_insn;\n@@ -2740,7 +3065,35 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n   /* Record the fields for the semantic handler.  */\n   FLD (f_r2) = f_r2;\n   FLD (f_r3) = f_r3;\n-  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_eq_s\", \"f_r2 0x%x\", 'x', f_r2, \"f_r3 0x%x\", 'x', f_r3, (char *) 0));\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_sfeq_s\", \"f_r2 0x%x\", 'x', f_r2, \"f_r3 0x%x\", 'x', f_r3, (char *) 0));\n+\n+#undef FLD\n+    return idesc;\n+  }\n+\n+ extract_sfmt_lf_sfeq_d32:\n+  {\n+    const IDESC *idesc = &or1k32bf_insn_data[itype];\n+    CGEN_INSN_WORD insn = entire_insn;\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+    UINT f_r2;\n+    UINT f_r3;\n+    UINT f_raoff_9_1;\n+    UINT f_rboff_8_1;\n+    SI f_rad32;\n+    SI f_rbd32;\n+\n+    f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5);\n+    f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5);\n+    f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1);\n+    f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1);\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\n+\n+  /* Record the fields for the semantic handler.  */\n+  FLD (f_rad32) = f_rad32;\n+  FLD (f_rbd32) = f_rbd32;\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_sfeq_d32\", \"f_rad32 0x%x\", 'x', f_rad32, \"f_rbd32 0x%x\", 'x', f_rbd32, (char *) 0));\n \n #undef FLD\n     return idesc;\n@@ -2765,6 +3118,41 @@ or1k32bf_decode (SIM_CPU *current_cpu, IADDR pc,\n   FLD (f_r1) = f_r1;\n   TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_madd_s\", \"f_r2 0x%x\", 'x', f_r2, \"f_r3 0x%x\", 'x', f_r3, \"f_r1 0x%x\", 'x', f_r1, (char *) 0));\n \n+#undef FLD\n+    return idesc;\n+  }\n+\n+ extract_sfmt_lf_madd_d32:\n+  {\n+    const IDESC *idesc = &or1k32bf_insn_data[itype];\n+    CGEN_INSN_WORD insn = entire_insn;\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+    UINT f_r1;\n+    UINT f_r2;\n+    UINT f_r3;\n+    UINT f_rdoff_10_1;\n+    UINT f_raoff_9_1;\n+    UINT f_rboff_8_1;\n+    SI f_rdd32;\n+    SI f_rad32;\n+    SI f_rbd32;\n+\n+    f_r1 = EXTRACT_LSB0_UINT (insn, 32, 25, 5);\n+    f_r2 = EXTRACT_LSB0_UINT (insn, 32, 20, 5);\n+    f_r3 = EXTRACT_LSB0_UINT (insn, 32, 15, 5);\n+    f_rdoff_10_1 = EXTRACT_LSB0_UINT (insn, 32, 10, 1);\n+    f_raoff_9_1 = EXTRACT_LSB0_UINT (insn, 32, 9, 1);\n+    f_rboff_8_1 = EXTRACT_LSB0_UINT (insn, 32, 8, 1);\n+  f_rdd32 = ((f_r1) | (((f_rdoff_10_1) << (5))));\n+  f_rad32 = ((f_r2) | (((f_raoff_9_1) << (5))));\n+  f_rbd32 = ((f_r3) | (((f_rboff_8_1) << (5))));\n+\n+  /* Record the fields for the semantic handler.  */\n+  FLD (f_rad32) = f_rad32;\n+  FLD (f_rbd32) = f_rbd32;\n+  FLD (f_rdd32) = f_rdd32;\n+  TRACE_EXTRACT (current_cpu, abuf, (current_cpu, pc, \"sfmt_lf_madd_d32\", \"f_rad32 0x%x\", 'x', f_rad32, \"f_rbd32 0x%x\", 'x', f_rbd32, \"f_rdd32 0x%x\", 'x', f_rdd32, (char *) 0));\n+\n #undef FLD\n     return idesc;\n   }"
    },
    {
      "sha": "b338ba69c235deab642245ab2070358495484441",
      "filename": "sim/or1k/decode.h",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/decode.h?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -60,10 +60,17 @@ typedef enum or1k32bf_insn_type {\n  , OR1K32BF_INSN_L_MACU, OR1K32BF_INSN_L_MSB, OR1K32BF_INSN_L_MSBU, OR1K32BF_INSN_L_CUST1\n  , OR1K32BF_INSN_L_CUST2, OR1K32BF_INSN_L_CUST3, OR1K32BF_INSN_L_CUST4, OR1K32BF_INSN_L_CUST5\n  , OR1K32BF_INSN_L_CUST6, OR1K32BF_INSN_L_CUST7, OR1K32BF_INSN_L_CUST8, OR1K32BF_INSN_LF_ADD_S\n- , OR1K32BF_INSN_LF_SUB_S, OR1K32BF_INSN_LF_MUL_S, OR1K32BF_INSN_LF_DIV_S, OR1K32BF_INSN_LF_REM_S\n- , OR1K32BF_INSN_LF_ITOF_S, OR1K32BF_INSN_LF_FTOI_S, OR1K32BF_INSN_LF_EQ_S, OR1K32BF_INSN_LF_NE_S\n- , OR1K32BF_INSN_LF_GE_S, OR1K32BF_INSN_LF_GT_S, OR1K32BF_INSN_LF_LT_S, OR1K32BF_INSN_LF_LE_S\n- , OR1K32BF_INSN_LF_MADD_S, OR1K32BF_INSN_LF_CUST1_S, OR1K32BF_INSN__MAX\n+ , OR1K32BF_INSN_LF_ADD_D32, OR1K32BF_INSN_LF_SUB_S, OR1K32BF_INSN_LF_SUB_D32, OR1K32BF_INSN_LF_MUL_S\n+ , OR1K32BF_INSN_LF_MUL_D32, OR1K32BF_INSN_LF_DIV_S, OR1K32BF_INSN_LF_DIV_D32, OR1K32BF_INSN_LF_REM_S\n+ , OR1K32BF_INSN_LF_REM_D32, OR1K32BF_INSN_LF_ITOF_S, OR1K32BF_INSN_LF_ITOF_D32, OR1K32BF_INSN_LF_FTOI_S\n+ , OR1K32BF_INSN_LF_FTOI_D32, OR1K32BF_INSN_LF_SFEQ_S, OR1K32BF_INSN_LF_SFEQ_D32, OR1K32BF_INSN_LF_SFNE_S\n+ , OR1K32BF_INSN_LF_SFNE_D32, OR1K32BF_INSN_LF_SFGE_S, OR1K32BF_INSN_LF_SFGE_D32, OR1K32BF_INSN_LF_SFGT_S\n+ , OR1K32BF_INSN_LF_SFGT_D32, OR1K32BF_INSN_LF_SFLT_S, OR1K32BF_INSN_LF_SFLT_D32, OR1K32BF_INSN_LF_SFLE_S\n+ , OR1K32BF_INSN_LF_SFLE_D32, OR1K32BF_INSN_LF_SFUEQ_S, OR1K32BF_INSN_LF_SFUEQ_D32, OR1K32BF_INSN_LF_SFUNE_S\n+ , OR1K32BF_INSN_LF_SFUNE_D32, OR1K32BF_INSN_LF_SFUGT_S, OR1K32BF_INSN_LF_SFUGT_D32, OR1K32BF_INSN_LF_SFUGE_S\n+ , OR1K32BF_INSN_LF_SFUGE_D32, OR1K32BF_INSN_LF_SFULT_S, OR1K32BF_INSN_LF_SFULT_D32, OR1K32BF_INSN_LF_SFULE_S\n+ , OR1K32BF_INSN_LF_SFULE_D32, OR1K32BF_INSN_LF_SFUN_S, OR1K32BF_INSN_LF_SFUN_D32, OR1K32BF_INSN_LF_MADD_S\n+ , OR1K32BF_INSN_LF_MADD_D32, OR1K32BF_INSN_LF_CUST1_S, OR1K32BF_INSN_LF_CUST1_D32, OR1K32BF_INSN__MAX\n } OR1K32BF_INSN_TYPE;\n \n /* Enum declaration for semantic formats in cpu family or1k32bf.  */\n@@ -80,7 +87,9 @@ typedef enum or1k32bf_sfmt_type {\n  , OR1K32BF_SFMT_L_XORI, OR1K32BF_SFMT_L_ADDI, OR1K32BF_SFMT_L_ADDIC, OR1K32BF_SFMT_L_MULI\n  , OR1K32BF_SFMT_L_EXTHS, OR1K32BF_SFMT_L_CMOV, OR1K32BF_SFMT_L_SFGTS, OR1K32BF_SFMT_L_SFGTSI\n  , OR1K32BF_SFMT_L_MAC, OR1K32BF_SFMT_L_MACI, OR1K32BF_SFMT_L_MACU, OR1K32BF_SFMT_LF_ADD_S\n- , OR1K32BF_SFMT_LF_ITOF_S, OR1K32BF_SFMT_LF_FTOI_S, OR1K32BF_SFMT_LF_EQ_S, OR1K32BF_SFMT_LF_MADD_S\n+ , OR1K32BF_SFMT_LF_ADD_D32, OR1K32BF_SFMT_LF_ITOF_S, OR1K32BF_SFMT_LF_ITOF_D32, OR1K32BF_SFMT_LF_FTOI_S\n+ , OR1K32BF_SFMT_LF_FTOI_D32, OR1K32BF_SFMT_LF_SFEQ_S, OR1K32BF_SFMT_LF_SFEQ_D32, OR1K32BF_SFMT_LF_MADD_S\n+ , OR1K32BF_SFMT_LF_MADD_D32\n } OR1K32BF_SFMT_TYPE;\n \n /* Function unit handlers (user written).  */"
    },
    {
      "sha": "255023d4c2e34dbafb3dd2fd72a9f40aca0ac8cd",
      "filename": "sim/or1k/model.c",
      "status": "modified",
      "additions": 1221,
      "deletions": 235,
      "changes": 1456,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/model.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/model.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/model.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -1602,6 +1602,22 @@ model_or1200_lf_add_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_add_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_sub_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1618,6 +1634,22 @@ model_or1200_lf_sub_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_sub_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_mul_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1634,6 +1666,22 @@ model_or1200_lf_mul_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_mul_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_div_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1650,6 +1698,22 @@ model_or1200_lf_div_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_div_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_rem_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1666,6 +1730,22 @@ model_or1200_lf_rem_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_rem_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_itof_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1682,6 +1762,22 @@ model_or1200_lf_itof_s (SIM_CPU *current_cpu, void *sem_arg)\n #undef FLD\n }\n \n+static int\n+model_or1200_lf_itof_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n static int\n model_or1200_lf_ftoi_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n@@ -1699,9 +1795,9 @@ model_or1200_lf_ftoi_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_eq_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_ftoi_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -1715,7 +1811,7 @@ model_or1200_lf_eq_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_ne_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfeq_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1731,9 +1827,9 @@ model_or1200_lf_ne_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_ge_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfeq_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -1747,7 +1843,7 @@ model_or1200_lf_ge_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_gt_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfne_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1763,7 +1859,23 @@ model_or1200_lf_gt_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_lt_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfne_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200_lf_sfge_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1779,7 +1891,23 @@ model_or1200_lf_lt_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_le_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfge_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200_lf_sfgt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1795,7 +1923,23 @@ model_or1200_lf_le_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfgt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200_lf_sflt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1811,9 +1955,9 @@ model_or1200_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200_lf_cust1_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sflt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -1827,55 +1971,71 @@ model_or1200_lf_cust1_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_j (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfle_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_j.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_adrp (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfle_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_adrp.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_jal (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfueq_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_j.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_jr (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfueq_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200_lf_sfune_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1884,14 +2044,30 @@ model_or1200nd_l_jr (SIM_CPU *current_cpu, void *sem_arg)\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_jalr (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfune_d32 (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200_lf_sfugt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -1900,208 +2076,224 @@ model_or1200nd_l_jalr (SIM_CPU *current_cpu, void *sem_arg)\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_bnf (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfugt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_j.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_bf (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfuge_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_j.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_trap (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfuge_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_sys (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfult_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_msync (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfult_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_psync (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfule_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_csync (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfule_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_rfe (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfun_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_nop_imm (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_sfun_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_movhi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_macrc (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_madd_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_adrp.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_mfspr (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_cust1_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n   {\n     int referenced = 0;\n     int UNUSED insn_referenced = abuf->written;\n-    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n   }\n   return cycles;\n #undef FLD\n }\n \n static int\n-model_or1200nd_l_mtspr (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200_lf_cust1_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mtspr.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_j (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_j.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2115,7 +2307,375 @@ model_or1200nd_l_mtspr (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lwz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_adrp (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_adrp.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_jal (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_j.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_jr (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_jalr (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_bnf (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_j.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_bf (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_j.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_trap (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sys (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_msync (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_psync (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_csync (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_rfe (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_nop_imm (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_movhi (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_macrc (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_adrp.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_mfspr (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_mtspr (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_mtspr.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lwz (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lws (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lwa (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lbz (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lbs (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lhz (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_lhs (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2131,9 +2691,377 @@ model_or1200nd_l_lwz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lws (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sw (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sw.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sb (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sw.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sh (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sw.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_swa (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sw.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sll (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_slli (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_srl (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_srli (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sra (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_srai (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_ror (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_rori (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_and (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_or (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_xor (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_add (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_sub (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_addc (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_mul (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_muld (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_mulu (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_muldu (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_div (SIM_CPU *current_cpu, void *sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n+  const IDESC * UNUSED idesc = abuf->idesc;\n+  int cycles = 0;\n+  {\n+    int referenced = 0;\n+    int UNUSED insn_referenced = abuf->written;\n+    cycles += or1k32bf_model_or1200nd_u_exec (current_cpu, idesc, 0, referenced);\n+  }\n+  return cycles;\n+#undef FLD\n+}\n+\n+static int\n+model_or1200nd_l_divu (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2147,9 +3075,9 @@ model_or1200nd_l_lws (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lwa (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_ff1 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2163,9 +3091,9 @@ model_or1200nd_l_lwa (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lbz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_fl1 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2179,9 +3107,9 @@ model_or1200nd_l_lbz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lbs (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_andi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2195,9 +3123,9 @@ model_or1200nd_l_lbs (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lhz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_ori (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2211,7 +3139,7 @@ model_or1200nd_l_lhz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_lhs (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_xori (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2227,9 +3155,9 @@ model_or1200nd_l_lhs (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sw (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_addi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sw.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2243,9 +3171,9 @@ model_or1200nd_l_sw (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sb (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_addic (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sw.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2259,9 +3187,9 @@ model_or1200nd_l_sb (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sh (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_muli (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sw.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2275,9 +3203,9 @@ model_or1200nd_l_sh (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_swa (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_exths (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sw.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2291,9 +3219,9 @@ model_or1200nd_l_swa (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sll (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_extbs (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2307,7 +3235,7 @@ model_or1200nd_l_sll (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_slli (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_exthz (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2323,9 +3251,9 @@ model_or1200nd_l_slli (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_srl (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_extbz (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2339,7 +3267,7 @@ model_or1200nd_l_srl (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_srli (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_extws (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2355,9 +3283,9 @@ model_or1200nd_l_srli (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sra (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_extwz (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2371,9 +3299,9 @@ model_or1200nd_l_sra (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_srai (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cmov (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2387,7 +3315,7 @@ model_or1200nd_l_srai (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_ror (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgts (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2403,9 +3331,9 @@ model_or1200nd_l_ror (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_rori (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgtsi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2419,7 +3347,7 @@ model_or1200nd_l_rori (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_and (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgtu (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2435,9 +3363,9 @@ model_or1200nd_l_and (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_or (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgtui (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2451,7 +3379,7 @@ model_or1200nd_l_or (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_xor (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfges (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2467,9 +3395,9 @@ model_or1200nd_l_xor (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_add (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgesi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2483,7 +3411,7 @@ model_or1200nd_l_add (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sub (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgeu (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2499,9 +3427,9 @@ model_or1200nd_l_sub (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_addc (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfgeui (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2515,7 +3443,7 @@ model_or1200nd_l_addc (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_mul (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sflts (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2531,9 +3459,9 @@ model_or1200nd_l_mul (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_muld (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfltsi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2547,7 +3475,7 @@ model_or1200nd_l_muld (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_mulu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfltu (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2563,9 +3491,9 @@ model_or1200nd_l_mulu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_muldu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfltui (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2579,7 +3507,7 @@ model_or1200nd_l_muldu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_div (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfles (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2595,9 +3523,9 @@ model_or1200nd_l_div (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_divu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sflesi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2611,9 +3539,9 @@ model_or1200nd_l_divu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_ff1 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfleu (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2627,9 +3555,9 @@ model_or1200nd_l_ff1 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_fl1 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfleui (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2643,9 +3571,9 @@ model_or1200nd_l_fl1 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_andi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfeq (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2659,9 +3587,9 @@ model_or1200nd_l_andi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_ori (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfeqi (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_mfspr.f\n+#define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2675,9 +3603,9 @@ model_or1200nd_l_ori (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_xori (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfne (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2691,7 +3619,7 @@ model_or1200nd_l_xori (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_addi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_sfnei (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2707,9 +3635,9 @@ model_or1200nd_l_addi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_addic (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_mac (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2723,7 +3651,7 @@ model_or1200nd_l_addic (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_muli (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_maci (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_lwz.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2739,9 +3667,9 @@ model_or1200nd_l_muli (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_exths (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_macu (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2755,9 +3683,9 @@ model_or1200nd_l_exths (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_extbs (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_msb (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2771,9 +3699,9 @@ model_or1200nd_l_extbs (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_exthz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_msbu (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2787,9 +3715,9 @@ model_or1200nd_l_exthz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_extbz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust1 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2803,9 +3731,9 @@ model_or1200nd_l_extbz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_extws (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust2 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2819,9 +3747,9 @@ model_or1200nd_l_extws (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_extwz (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust3 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2835,9 +3763,9 @@ model_or1200nd_l_extwz (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cmov (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust4 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2851,9 +3779,9 @@ model_or1200nd_l_cmov (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgts (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust5 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2867,9 +3795,9 @@ model_or1200nd_l_sfgts (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgtsi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust6 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2883,9 +3811,9 @@ model_or1200nd_l_sfgtsi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgtu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust7 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2899,9 +3827,9 @@ model_or1200nd_l_sfgtu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgtui (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_l_cust8 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2915,7 +3843,7 @@ model_or1200nd_l_sfgtui (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfges (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_add_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2931,9 +3859,9 @@ model_or1200nd_l_sfges (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgesi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_add_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2947,7 +3875,7 @@ model_or1200nd_l_sfgesi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgeu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sub_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2963,9 +3891,9 @@ model_or1200nd_l_sfgeu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfgeui (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sub_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -2979,7 +3907,7 @@ model_or1200nd_l_sfgeui (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sflts (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_mul_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -2995,9 +3923,9 @@ model_or1200nd_l_sflts (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfltsi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_mul_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3011,7 +3939,7 @@ model_or1200nd_l_sfltsi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfltu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_div_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3027,9 +3955,9 @@ model_or1200nd_l_sfltu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfltui (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_div_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3043,7 +3971,7 @@ model_or1200nd_l_sfltui (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfles (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_rem_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3059,9 +3987,9 @@ model_or1200nd_l_sfles (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sflesi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_rem_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3075,9 +4003,9 @@ model_or1200nd_l_sflesi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfleu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_itof_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3091,9 +4019,9 @@ model_or1200nd_l_sfleu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfleui (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_itof_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3107,9 +4035,9 @@ model_or1200nd_l_sfleui (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfeq (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_ftoi_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_l_slli.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3123,9 +4051,9 @@ model_or1200nd_l_sfeq (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfeqi (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_ftoi_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3139,7 +4067,7 @@ model_or1200nd_l_sfeqi (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfne (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfeq_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3155,9 +4083,9 @@ model_or1200nd_l_sfne (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_sfnei (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfeq_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3171,7 +4099,7 @@ model_or1200nd_l_sfnei (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_mac (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfne_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3187,9 +4115,9 @@ model_or1200nd_l_mac (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_maci (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfne_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_lwz.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3203,7 +4131,7 @@ model_or1200nd_l_maci (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_macu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfge_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3219,9 +4147,9 @@ model_or1200nd_l_macu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_msb (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfge_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3235,7 +4163,7 @@ model_or1200nd_l_msb (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_msbu (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfgt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3251,9 +4179,9 @@ model_or1200nd_l_msbu (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust1 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfgt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3267,9 +4195,9 @@ model_or1200nd_l_cust1 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust2 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sflt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3283,9 +4211,9 @@ model_or1200nd_l_cust2 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust3 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sflt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3299,9 +4227,9 @@ model_or1200nd_l_cust3 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust4 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfle_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3315,9 +4243,9 @@ model_or1200nd_l_cust4 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust5 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfle_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3331,9 +4259,9 @@ model_or1200nd_l_cust5 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust6 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfueq_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3347,9 +4275,9 @@ model_or1200nd_l_cust6 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust7 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfueq_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3363,9 +4291,9 @@ model_or1200nd_l_cust7 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_l_cust8 (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfune_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_empty.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3379,9 +4307,9 @@ model_or1200nd_l_cust8 (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_add_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfune_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3395,7 +4323,7 @@ model_or1200nd_lf_add_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_sub_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfugt_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3411,9 +4339,9 @@ model_or1200nd_lf_sub_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_mul_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfugt_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3427,7 +4355,7 @@ model_or1200nd_lf_mul_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_div_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfuge_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3443,9 +4371,9 @@ model_or1200nd_lf_div_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_rem_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfuge_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3459,9 +4387,9 @@ model_or1200nd_lf_rem_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_itof_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfult_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3475,9 +4403,9 @@ model_or1200nd_lf_itof_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_ftoi_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfult_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_slli.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3491,7 +4419,7 @@ model_or1200nd_lf_ftoi_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_eq_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfule_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3507,9 +4435,9 @@ model_or1200nd_lf_eq_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_ne_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfule_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3523,7 +4451,7 @@ model_or1200nd_lf_ne_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_ge_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfun_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3539,9 +4467,9 @@ model_or1200nd_lf_ge_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_gt_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_sfun_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3555,7 +4483,7 @@ model_or1200nd_lf_gt_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_lt_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3571,9 +4499,9 @@ model_or1200nd_lf_lt_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_le_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_madd_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3587,9 +4515,9 @@ model_or1200nd_lf_le_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_cust1_s (SIM_CPU *current_cpu, void *sem_arg)\n {\n-#define FLD(f) abuf->fields.sfmt_l_sll.f\n+#define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n   const IDESC * UNUSED idesc = abuf->idesc;\n   int cycles = 0;\n@@ -3603,7 +4531,7 @@ model_or1200nd_lf_madd_s (SIM_CPU *current_cpu, void *sem_arg)\n }\n \n static int\n-model_or1200nd_lf_cust1_s (SIM_CPU *current_cpu, void *sem_arg)\n+model_or1200nd_lf_cust1_d32 (SIM_CPU *current_cpu, void *sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_empty.f\n   const ARGBUF * UNUSED abuf = SEM_ARGBUF ((SEM_ARG) sem_arg);\n@@ -3728,20 +4656,49 @@ static const INSN_TIMING or1200_timing[] = {\n   { OR1K32BF_INSN_L_CUST7, model_or1200_l_cust7, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_L_CUST8, model_or1200_l_cust8, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_ADD_S, model_or1200_lf_add_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_ADD_D32, model_or1200_lf_add_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_SUB_S, model_or1200_lf_sub_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SUB_D32, model_or1200_lf_sub_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_MUL_S, model_or1200_lf_mul_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_MUL_D32, model_or1200_lf_mul_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_DIV_S, model_or1200_lf_div_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_DIV_D32, model_or1200_lf_div_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_REM_S, model_or1200_lf_rem_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_REM_D32, model_or1200_lf_rem_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_ITOF_S, model_or1200_lf_itof_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_ITOF_D32, model_or1200_lf_itof_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_FTOI_S, model_or1200_lf_ftoi_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_EQ_S, model_or1200_lf_eq_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_NE_S, model_or1200_lf_ne_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_GE_S, model_or1200_lf_ge_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_GT_S, model_or1200_lf_gt_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_LT_S, model_or1200_lf_lt_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_LE_S, model_or1200_lf_le_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_FTOI_D32, model_or1200_lf_ftoi_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFEQ_S, model_or1200_lf_sfeq_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFEQ_D32, model_or1200_lf_sfeq_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFNE_S, model_or1200_lf_sfne_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFNE_D32, model_or1200_lf_sfne_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGE_S, model_or1200_lf_sfge_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGE_D32, model_or1200_lf_sfge_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGT_S, model_or1200_lf_sfgt_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGT_D32, model_or1200_lf_sfgt_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLT_S, model_or1200_lf_sflt_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLT_D32, model_or1200_lf_sflt_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLE_S, model_or1200_lf_sfle_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLE_D32, model_or1200_lf_sfle_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUEQ_S, model_or1200_lf_sfueq_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUEQ_D32, model_or1200_lf_sfueq_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUNE_S, model_or1200_lf_sfune_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUNE_D32, model_or1200_lf_sfune_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGT_S, model_or1200_lf_sfugt_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGT_D32, model_or1200_lf_sfugt_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGE_S, model_or1200_lf_sfuge_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGE_D32, model_or1200_lf_sfuge_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULT_S, model_or1200_lf_sfult_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULT_D32, model_or1200_lf_sfult_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULE_S, model_or1200_lf_sfule_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULE_D32, model_or1200_lf_sfule_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUN_S, model_or1200_lf_sfun_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUN_D32, model_or1200_lf_sfun_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_MADD_S, model_or1200_lf_madd_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_MADD_D32, model_or1200_lf_madd_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_CUST1_S, model_or1200_lf_cust1_s, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_CUST1_D32, model_or1200_lf_cust1_d32, { { (int) UNIT_OR1200_U_EXEC, 1, 1 } } },\n };\n \n /* Model timing data for `or1200nd'.  */\n@@ -3851,20 +4808,49 @@ static const INSN_TIMING or1200nd_timing[] = {\n   { OR1K32BF_INSN_L_CUST7, model_or1200nd_l_cust7, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_L_CUST8, model_or1200nd_l_cust8, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_ADD_S, model_or1200nd_lf_add_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_ADD_D32, model_or1200nd_lf_add_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_SUB_S, model_or1200nd_lf_sub_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SUB_D32, model_or1200nd_lf_sub_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_MUL_S, model_or1200nd_lf_mul_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_MUL_D32, model_or1200nd_lf_mul_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_DIV_S, model_or1200nd_lf_div_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_DIV_D32, model_or1200nd_lf_div_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_REM_S, model_or1200nd_lf_rem_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_REM_D32, model_or1200nd_lf_rem_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_ITOF_S, model_or1200nd_lf_itof_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_ITOF_D32, model_or1200nd_lf_itof_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_FTOI_S, model_or1200nd_lf_ftoi_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_EQ_S, model_or1200nd_lf_eq_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_NE_S, model_or1200nd_lf_ne_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_GE_S, model_or1200nd_lf_ge_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_GT_S, model_or1200nd_lf_gt_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_LT_S, model_or1200nd_lf_lt_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n-  { OR1K32BF_INSN_LF_LE_S, model_or1200nd_lf_le_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_FTOI_D32, model_or1200nd_lf_ftoi_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFEQ_S, model_or1200nd_lf_sfeq_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFEQ_D32, model_or1200nd_lf_sfeq_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFNE_S, model_or1200nd_lf_sfne_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFNE_D32, model_or1200nd_lf_sfne_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGE_S, model_or1200nd_lf_sfge_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGE_D32, model_or1200nd_lf_sfge_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGT_S, model_or1200nd_lf_sfgt_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFGT_D32, model_or1200nd_lf_sfgt_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLT_S, model_or1200nd_lf_sflt_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLT_D32, model_or1200nd_lf_sflt_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLE_S, model_or1200nd_lf_sfle_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFLE_D32, model_or1200nd_lf_sfle_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUEQ_S, model_or1200nd_lf_sfueq_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUEQ_D32, model_or1200nd_lf_sfueq_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUNE_S, model_or1200nd_lf_sfune_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUNE_D32, model_or1200nd_lf_sfune_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGT_S, model_or1200nd_lf_sfugt_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGT_D32, model_or1200nd_lf_sfugt_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGE_S, model_or1200nd_lf_sfuge_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUGE_D32, model_or1200nd_lf_sfuge_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULT_S, model_or1200nd_lf_sfult_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULT_D32, model_or1200nd_lf_sfult_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULE_S, model_or1200nd_lf_sfule_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFULE_D32, model_or1200nd_lf_sfule_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUN_S, model_or1200nd_lf_sfun_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_SFUN_D32, model_or1200nd_lf_sfun_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_MADD_S, model_or1200nd_lf_madd_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_MADD_D32, model_or1200nd_lf_madd_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n   { OR1K32BF_INSN_LF_CUST1_S, model_or1200nd_lf_cust1_s, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n+  { OR1K32BF_INSN_LF_CUST1_D32, model_or1200nd_lf_cust1_d32, { { (int) UNIT_OR1200ND_U_EXEC, 1, 1 } } },\n };\n \n #endif /* WITH_PROFILE_MODEL_P */"
    },
    {
      "sha": "ac29177057dfb3860c782bb81feedde169de453b",
      "filename": "sim/or1k/sem-switch.c",
      "status": "modified",
      "additions": 589,
      "deletions": 13,
      "changes": 602,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/sem-switch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/sem-switch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/sem-switch.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -136,20 +136,49 @@ This file is part of the GNU simulators.\n     { OR1K32BF_INSN_L_CUST7, && case_sem_INSN_L_CUST7 },\n     { OR1K32BF_INSN_L_CUST8, && case_sem_INSN_L_CUST8 },\n     { OR1K32BF_INSN_LF_ADD_S, && case_sem_INSN_LF_ADD_S },\n+    { OR1K32BF_INSN_LF_ADD_D32, && case_sem_INSN_LF_ADD_D32 },\n     { OR1K32BF_INSN_LF_SUB_S, && case_sem_INSN_LF_SUB_S },\n+    { OR1K32BF_INSN_LF_SUB_D32, && case_sem_INSN_LF_SUB_D32 },\n     { OR1K32BF_INSN_LF_MUL_S, && case_sem_INSN_LF_MUL_S },\n+    { OR1K32BF_INSN_LF_MUL_D32, && case_sem_INSN_LF_MUL_D32 },\n     { OR1K32BF_INSN_LF_DIV_S, && case_sem_INSN_LF_DIV_S },\n+    { OR1K32BF_INSN_LF_DIV_D32, && case_sem_INSN_LF_DIV_D32 },\n     { OR1K32BF_INSN_LF_REM_S, && case_sem_INSN_LF_REM_S },\n+    { OR1K32BF_INSN_LF_REM_D32, && case_sem_INSN_LF_REM_D32 },\n     { OR1K32BF_INSN_LF_ITOF_S, && case_sem_INSN_LF_ITOF_S },\n+    { OR1K32BF_INSN_LF_ITOF_D32, && case_sem_INSN_LF_ITOF_D32 },\n     { OR1K32BF_INSN_LF_FTOI_S, && case_sem_INSN_LF_FTOI_S },\n-    { OR1K32BF_INSN_LF_EQ_S, && case_sem_INSN_LF_EQ_S },\n-    { OR1K32BF_INSN_LF_NE_S, && case_sem_INSN_LF_NE_S },\n-    { OR1K32BF_INSN_LF_GE_S, && case_sem_INSN_LF_GE_S },\n-    { OR1K32BF_INSN_LF_GT_S, && case_sem_INSN_LF_GT_S },\n-    { OR1K32BF_INSN_LF_LT_S, && case_sem_INSN_LF_LT_S },\n-    { OR1K32BF_INSN_LF_LE_S, && case_sem_INSN_LF_LE_S },\n+    { OR1K32BF_INSN_LF_FTOI_D32, && case_sem_INSN_LF_FTOI_D32 },\n+    { OR1K32BF_INSN_LF_SFEQ_S, && case_sem_INSN_LF_SFEQ_S },\n+    { OR1K32BF_INSN_LF_SFEQ_D32, && case_sem_INSN_LF_SFEQ_D32 },\n+    { OR1K32BF_INSN_LF_SFNE_S, && case_sem_INSN_LF_SFNE_S },\n+    { OR1K32BF_INSN_LF_SFNE_D32, && case_sem_INSN_LF_SFNE_D32 },\n+    { OR1K32BF_INSN_LF_SFGE_S, && case_sem_INSN_LF_SFGE_S },\n+    { OR1K32BF_INSN_LF_SFGE_D32, && case_sem_INSN_LF_SFGE_D32 },\n+    { OR1K32BF_INSN_LF_SFGT_S, && case_sem_INSN_LF_SFGT_S },\n+    { OR1K32BF_INSN_LF_SFGT_D32, && case_sem_INSN_LF_SFGT_D32 },\n+    { OR1K32BF_INSN_LF_SFLT_S, && case_sem_INSN_LF_SFLT_S },\n+    { OR1K32BF_INSN_LF_SFLT_D32, && case_sem_INSN_LF_SFLT_D32 },\n+    { OR1K32BF_INSN_LF_SFLE_S, && case_sem_INSN_LF_SFLE_S },\n+    { OR1K32BF_INSN_LF_SFLE_D32, && case_sem_INSN_LF_SFLE_D32 },\n+    { OR1K32BF_INSN_LF_SFUEQ_S, && case_sem_INSN_LF_SFUEQ_S },\n+    { OR1K32BF_INSN_LF_SFUEQ_D32, && case_sem_INSN_LF_SFUEQ_D32 },\n+    { OR1K32BF_INSN_LF_SFUNE_S, && case_sem_INSN_LF_SFUNE_S },\n+    { OR1K32BF_INSN_LF_SFUNE_D32, && case_sem_INSN_LF_SFUNE_D32 },\n+    { OR1K32BF_INSN_LF_SFUGT_S, && case_sem_INSN_LF_SFUGT_S },\n+    { OR1K32BF_INSN_LF_SFUGT_D32, && case_sem_INSN_LF_SFUGT_D32 },\n+    { OR1K32BF_INSN_LF_SFUGE_S, && case_sem_INSN_LF_SFUGE_S },\n+    { OR1K32BF_INSN_LF_SFUGE_D32, && case_sem_INSN_LF_SFUGE_D32 },\n+    { OR1K32BF_INSN_LF_SFULT_S, && case_sem_INSN_LF_SFULT_S },\n+    { OR1K32BF_INSN_LF_SFULT_D32, && case_sem_INSN_LF_SFULT_D32 },\n+    { OR1K32BF_INSN_LF_SFULE_S, && case_sem_INSN_LF_SFULE_S },\n+    { OR1K32BF_INSN_LF_SFULE_D32, && case_sem_INSN_LF_SFULE_D32 },\n+    { OR1K32BF_INSN_LF_SFUN_S, && case_sem_INSN_LF_SFUN_S },\n+    { OR1K32BF_INSN_LF_SFUN_D32, && case_sem_INSN_LF_SFUN_D32 },\n     { OR1K32BF_INSN_LF_MADD_S, && case_sem_INSN_LF_MADD_S },\n+    { OR1K32BF_INSN_LF_MADD_D32, && case_sem_INSN_LF_MADD_D32 },\n     { OR1K32BF_INSN_LF_CUST1_S, && case_sem_INSN_LF_CUST1_S },\n+    { OR1K32BF_INSN_LF_CUST1_D32, && case_sem_INSN_LF_CUST1_D32 },\n     { 0, 0 }\n   };\n   int i;\n@@ -2646,6 +2675,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_ADD_D32) : /* lf.add.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->adddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2665,6 +2713,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SUB_D32) : /* lf.sub.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->subdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2684,6 +2751,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_MUL_D32) : /* lf.mul.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->muldf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2703,6 +2789,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_DIV_D32) : /* lf.div.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->divdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2722,6 +2827,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_REM_D32) : /* lf.rem.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->remdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2741,6 +2865,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_ITOF_D32) : /* lf.itof.d $rDD32F,$rADI */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->floatdidf (CGEN_CPU_FPU (current_cpu), (GET_H_SYS_FPCSR_RM () == 0) ? (1) : (GET_H_SYS_FPCSR_RM () == 1) ? (3) : (GET_H_SYS_FPCSR_RM () == 2) ? (4) : (5), GET_H_I64R (FLD (f_rad32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2764,7 +2907,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_EQ_S) : /* lf.sfeq.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_FTOI_D32) : /* lf.ftoi.d $rDDI,$rAD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DI opval = CGEN_CPU_FPU (current_cpu)->ops->fixdfdi (CGEN_CPU_FPU (current_cpu), (GET_H_SYS_FPCSR_RM () == 0) ? (1) : (GET_H_SYS_FPCSR_RM () == 1) ? (3) : (GET_H_SYS_FPCSR_RM () == 2) ? (4) : (5), GET_H_FD32R (FLD (f_rad32)));\n+    SET_H_I64R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"i64r\", 'D', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFEQ_S) : /* lf.sfeq.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2783,7 +2945,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_NE_S) : /* lf.sfne.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_SFEQ_D32) : /* lf.sfeq.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->eqdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFNE_S) : /* lf.sfne.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2802,7 +2983,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_GE_S) : /* lf.sfge.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_SFNE_D32) : /* lf.sfne.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->nedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFGE_S) : /* lf.sfge.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2821,7 +3021,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_GT_S) : /* lf.sfgt.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_SFGE_D32) : /* lf.sfge.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->gedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFGT_S) : /* lf.sfgt.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2840,7 +3059,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_LT_S) : /* lf.sflt.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_SFGT_D32) : /* lf.sfgt.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->gtdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFLT_S) : /* lf.sflt.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2859,7 +3097,26 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n }\n   NEXT (vpc);\n \n-  CASE (sem, INSN_LF_LE_S) : /* lf.sfle.s $rASF,$rBSF */\n+  CASE (sem, INSN_LF_SFLT_D32) : /* lf.sflt.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->ltdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFLE_S) : /* lf.sfle.s $rASF,$rBSF */\n {\n   SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2874,6 +3131,291 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFLE_D32) : /* lf.sfle.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->ledf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUEQ_S) : /* lf.sfueq.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->eqsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUEQ_D32) : /* lf.sfueq.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->eqdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUNE_S) : /* lf.sfune.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->nesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUNE_D32) : /* lf.sfune.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->nedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUGT_S) : /* lf.sfugt.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->gtsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUGT_D32) : /* lf.sfugt.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->gtdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUGE_S) : /* lf.sfuge.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->gesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUGE_D32) : /* lf.sfuge.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->gedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFULT_S) : /* lf.sfult.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->ltsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFULT_D32) : /* lf.sfult.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->ltdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFULE_S) : /* lf.sfule.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->lesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFULE_D32) : /* lf.sfule.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->ledf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUN_S) : /* lf.sfun.s $rASF,$rBSF */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_SFUN_D32) : /* lf.sfun.d $rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2893,6 +3435,25 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"fsr\", 'f', opval);\n   }\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_MADD_D32) : /* lf.madd.d $rDD32F,$rAD32F,$rBD32F */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->adddf (CGEN_CPU_FPU (current_cpu), CGEN_CPU_FPU (current_cpu)->ops->muldf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), GET_H_FD32R (FLD (f_rdd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n #undef FLD\n }\n   NEXT (vpc);\n@@ -2908,6 +3469,21 @@ or1k32bf_exception (current_cpu, pc, EXCEPT_RANGE);\n \n ((void) 0); /*nop*/\n \n+#undef FLD\n+}\n+  NEXT (vpc);\n+\n+  CASE (sem, INSN_LF_CUST1_D32) : /* lf.cust1.d */\n+{\n+  SEM_ARG sem_arg = SEM_SEM_ARG (vpc, sc);\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+((void) 0); /*nop*/\n+\n #undef FLD\n }\n   NEXT (vpc);"
    },
    {
      "sha": "ff3886b8a5699814193272b5e724e300defc8dac",
      "filename": "sim/or1k/sem.c",
      "status": "modified",
      "additions": 653,
      "deletions": 19,
      "changes": 672,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/sem.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2/sim/or1k/sem.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/or1k/sem.c?ref=7ccbb4437a29896955a6ff3b0406b1cc2a7f6fe2",
      "patch": "@@ -2,7 +2,7 @@\n \n THIS FILE IS MACHINE GENERATED WITH CGEN.\n \n-Copyright 1996-2019 Free Software Foundation, Inc.\n+Copyright (C) 1996-2019 Free Software Foundation, Inc.\n \n This file is part of the GNU simulators.\n \n@@ -2694,6 +2694,27 @@ SEM_FN_NAME (or1k32bf,lf_add_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-add-d32: lf.add.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_add_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->adddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-sub-s: lf.sub.s $rDSF,$rASF,$rBSF */\n \n static SEM_PC\n@@ -2715,6 +2736,27 @@ SEM_FN_NAME (or1k32bf,lf_sub_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-sub-d32: lf.sub.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sub_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->subdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-mul-s: lf.mul.s $rDSF,$rASF,$rBSF */\n \n static SEM_PC\n@@ -2736,6 +2778,27 @@ SEM_FN_NAME (or1k32bf,lf_mul_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-mul-d32: lf.mul.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_mul_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->muldf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-div-s: lf.div.s $rDSF,$rASF,$rBSF */\n \n static SEM_PC\n@@ -2757,6 +2820,27 @@ SEM_FN_NAME (or1k32bf,lf_div_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-div-d32: lf.div.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_div_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->divdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-rem-s: lf.rem.s $rDSF,$rASF,$rBSF */\n \n static SEM_PC\n@@ -2778,6 +2862,27 @@ SEM_FN_NAME (or1k32bf,lf_rem_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-rem-d32: lf.rem.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_rem_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->remdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-itof-s: lf.itof.s $rDSF,$rA */\n \n static SEM_PC\n@@ -2799,6 +2904,27 @@ SEM_FN_NAME (or1k32bf,lf_itof_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-itof-d32: lf.itof.d $rDD32F,$rADI */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_itof_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->floatdidf (CGEN_CPU_FPU (current_cpu), (GET_H_SYS_FPCSR_RM () == 0) ? (1) : (GET_H_SYS_FPCSR_RM () == 1) ? (3) : (GET_H_SYS_FPCSR_RM () == 2) ? (4) : (5), GET_H_I64R (FLD (f_rad32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-ftoi-s: lf.ftoi.s $rD,$rASF */\n \n static SEM_PC\n@@ -2820,10 +2946,31 @@ SEM_FN_NAME (or1k32bf,lf_ftoi_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-eq-s: lf.sfeq.s $rASF,$rBSF */\n+/* lf-ftoi-d32: lf.ftoi.d $rDDI,$rAD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_ftoi_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DI opval = CGEN_CPU_FPU (current_cpu)->ops->fixdfdi (CGEN_CPU_FPU (current_cpu), (GET_H_SYS_FPCSR_RM () == 0) ? (1) : (GET_H_SYS_FPCSR_RM () == 1) ? (3) : (GET_H_SYS_FPCSR_RM () == 2) ? (4) : (5), GET_H_FD32R (FLD (f_rad32)));\n+    SET_H_I64R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"i64r\", 'D', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfeq-s: lf.sfeq.s $rASF,$rBSF */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_eq_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sfeq_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2841,10 +2988,31 @@ SEM_FN_NAME (or1k32bf,lf_eq_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-ne-s: lf.sfne.s $rASF,$rBSF */\n+/* lf-sfeq-d32: lf.sfeq.d $rAD32F,$rBD32F */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_ne_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sfeq_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->eqdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfne-s: lf.sfne.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfne_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2862,10 +3030,31 @@ SEM_FN_NAME (or1k32bf,lf_ne_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-ge-s: lf.sfge.s $rASF,$rBSF */\n+/* lf-sfne-d32: lf.sfne.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfne_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->nedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfge-s: lf.sfge.s $rASF,$rBSF */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_ge_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sfge_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2883,10 +3072,31 @@ SEM_FN_NAME (or1k32bf,lf_ge_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-gt-s: lf.sfgt.s $rASF,$rBSF */\n+/* lf-sfge-d32: lf.sfge.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfge_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->gedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfgt-s: lf.sfgt.s $rASF,$rBSF */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_gt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sfgt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2904,10 +3114,31 @@ SEM_FN_NAME (or1k32bf,lf_gt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-lt-s: lf.sflt.s $rASF,$rBSF */\n+/* lf-sfgt-d32: lf.sfgt.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfgt_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->gtdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sflt-s: lf.sflt.s $rASF,$rBSF */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_lt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sflt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2925,10 +3156,31 @@ SEM_FN_NAME (or1k32bf,lf_lt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n-/* lf-le-s: lf.sfle.s $rASF,$rBSF */\n+/* lf-sflt-d32: lf.sflt.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sflt_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->ltdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfle-s: lf.sfle.s $rASF,$rBSF */\n \n static SEM_PC\n-SEM_FN_NAME (or1k32bf,lf_le_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+SEM_FN_NAME (or1k32bf,lf_sfle_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n {\n #define FLD(f) abuf->fields.sfmt_l_sll.f\n   ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n@@ -2946,6 +3198,321 @@ SEM_FN_NAME (or1k32bf,lf_le_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-sfle-d32: lf.sfle.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfle_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->ledf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfueq-s: lf.sfueq.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfueq_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->eqsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfueq-d32: lf.sfueq.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfueq_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->eqdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfune-s: lf.sfune.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfune_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->nesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfune-d32: lf.sfune.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfune_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->nedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfugt-s: lf.sfugt.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfugt_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->gtsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfugt-d32: lf.sfugt.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfugt_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->gtdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfuge-s: lf.sfuge.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfuge_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->gesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfuge-d32: lf.sfuge.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfuge_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->gedf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfult-s: lf.sfult.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfult_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->ltsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfult-d32: lf.sfult.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfult_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->ltdf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfule-s: lf.sfule.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfule_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))), CGEN_CPU_FPU (current_cpu)->ops->lesf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfule-d32: lf.sfule.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfule_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = ORBI (CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), CGEN_CPU_FPU (current_cpu)->ops->ledf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfun-s: lf.sfun.s $rASF,$rBSF */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfun_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_l_sll.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->unorderedsf (CGEN_CPU_FPU (current_cpu), GET_H_FSR (FLD (f_r2)), GET_H_FSR (FLD (f_r3)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n+/* lf-sfun-d32: lf.sfun.d $rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_sfun_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    BI opval = CGEN_CPU_FPU (current_cpu)->ops->unordereddf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32)));\n+    SET_H_SYS_SR_F (opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"sys-sr-f\", 'x', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-madd-s: lf.madd.s $rDSF,$rASF,$rBSF */\n \n static SEM_PC\n@@ -2967,6 +3534,27 @@ SEM_FN_NAME (or1k32bf,lf_madd_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-madd-d32: lf.madd.d $rDD32F,$rAD32F,$rBD32F */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_madd_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_lf_add_d32.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+  {\n+    DF opval = CGEN_CPU_FPU (current_cpu)->ops->adddf (CGEN_CPU_FPU (current_cpu), CGEN_CPU_FPU (current_cpu)->ops->muldf (CGEN_CPU_FPU (current_cpu), GET_H_FD32R (FLD (f_rad32)), GET_H_FD32R (FLD (f_rbd32))), GET_H_FD32R (FLD (f_rdd32)));\n+    SET_H_FD32R (FLD (f_rdd32), opval);\n+    CGEN_TRACE_RESULT (current_cpu, abuf, \"fd32r\", 'f', opval);\n+  }\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* lf-cust1-s: lf.cust1.s $rASF,$rBSF */\n \n static SEM_PC\n@@ -2984,6 +3572,23 @@ SEM_FN_NAME (or1k32bf,lf_cust1_s) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n #undef FLD\n }\n \n+/* lf-cust1-d32: lf.cust1.d */\n+\n+static SEM_PC\n+SEM_FN_NAME (or1k32bf,lf_cust1_d32) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n+{\n+#define FLD(f) abuf->fields.sfmt_empty.f\n+  ARGBUF *abuf = SEM_ARGBUF (sem_arg);\n+  int UNUSED written = 0;\n+  IADDR UNUSED pc = abuf->addr;\n+  SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 4);\n+\n+((void) 0); /*nop*/\n+\n+  return vpc;\n+#undef FLD\n+}\n+\n /* Table of all semantic fns.  */\n \n static const struct sem_fn_desc sem_fns[] = {\n@@ -3091,20 +3696,49 @@ static const struct sem_fn_desc sem_fns[] = {\n   { OR1K32BF_INSN_L_CUST7, SEM_FN_NAME (or1k32bf,l_cust7) },\n   { OR1K32BF_INSN_L_CUST8, SEM_FN_NAME (or1k32bf,l_cust8) },\n   { OR1K32BF_INSN_LF_ADD_S, SEM_FN_NAME (or1k32bf,lf_add_s) },\n+  { OR1K32BF_INSN_LF_ADD_D32, SEM_FN_NAME (or1k32bf,lf_add_d32) },\n   { OR1K32BF_INSN_LF_SUB_S, SEM_FN_NAME (or1k32bf,lf_sub_s) },\n+  { OR1K32BF_INSN_LF_SUB_D32, SEM_FN_NAME (or1k32bf,lf_sub_d32) },\n   { OR1K32BF_INSN_LF_MUL_S, SEM_FN_NAME (or1k32bf,lf_mul_s) },\n+  { OR1K32BF_INSN_LF_MUL_D32, SEM_FN_NAME (or1k32bf,lf_mul_d32) },\n   { OR1K32BF_INSN_LF_DIV_S, SEM_FN_NAME (or1k32bf,lf_div_s) },\n+  { OR1K32BF_INSN_LF_DIV_D32, SEM_FN_NAME (or1k32bf,lf_div_d32) },\n   { OR1K32BF_INSN_LF_REM_S, SEM_FN_NAME (or1k32bf,lf_rem_s) },\n+  { OR1K32BF_INSN_LF_REM_D32, SEM_FN_NAME (or1k32bf,lf_rem_d32) },\n   { OR1K32BF_INSN_LF_ITOF_S, SEM_FN_NAME (or1k32bf,lf_itof_s) },\n+  { OR1K32BF_INSN_LF_ITOF_D32, SEM_FN_NAME (or1k32bf,lf_itof_d32) },\n   { OR1K32BF_INSN_LF_FTOI_S, SEM_FN_NAME (or1k32bf,lf_ftoi_s) },\n-  { OR1K32BF_INSN_LF_EQ_S, SEM_FN_NAME (or1k32bf,lf_eq_s) },\n-  { OR1K32BF_INSN_LF_NE_S, SEM_FN_NAME (or1k32bf,lf_ne_s) },\n-  { OR1K32BF_INSN_LF_GE_S, SEM_FN_NAME (or1k32bf,lf_ge_s) },\n-  { OR1K32BF_INSN_LF_GT_S, SEM_FN_NAME (or1k32bf,lf_gt_s) },\n-  { OR1K32BF_INSN_LF_LT_S, SEM_FN_NAME (or1k32bf,lf_lt_s) },\n-  { OR1K32BF_INSN_LF_LE_S, SEM_FN_NAME (or1k32bf,lf_le_s) },\n+  { OR1K32BF_INSN_LF_FTOI_D32, SEM_FN_NAME (or1k32bf,lf_ftoi_d32) },\n+  { OR1K32BF_INSN_LF_SFEQ_S, SEM_FN_NAME (or1k32bf,lf_sfeq_s) },\n+  { OR1K32BF_INSN_LF_SFEQ_D32, SEM_FN_NAME (or1k32bf,lf_sfeq_d32) },\n+  { OR1K32BF_INSN_LF_SFNE_S, SEM_FN_NAME (or1k32bf,lf_sfne_s) },\n+  { OR1K32BF_INSN_LF_SFNE_D32, SEM_FN_NAME (or1k32bf,lf_sfne_d32) },\n+  { OR1K32BF_INSN_LF_SFGE_S, SEM_FN_NAME (or1k32bf,lf_sfge_s) },\n+  { OR1K32BF_INSN_LF_SFGE_D32, SEM_FN_NAME (or1k32bf,lf_sfge_d32) },\n+  { OR1K32BF_INSN_LF_SFGT_S, SEM_FN_NAME (or1k32bf,lf_sfgt_s) },\n+  { OR1K32BF_INSN_LF_SFGT_D32, SEM_FN_NAME (or1k32bf,lf_sfgt_d32) },\n+  { OR1K32BF_INSN_LF_SFLT_S, SEM_FN_NAME (or1k32bf,lf_sflt_s) },\n+  { OR1K32BF_INSN_LF_SFLT_D32, SEM_FN_NAME (or1k32bf,lf_sflt_d32) },\n+  { OR1K32BF_INSN_LF_SFLE_S, SEM_FN_NAME (or1k32bf,lf_sfle_s) },\n+  { OR1K32BF_INSN_LF_SFLE_D32, SEM_FN_NAME (or1k32bf,lf_sfle_d32) },\n+  { OR1K32BF_INSN_LF_SFUEQ_S, SEM_FN_NAME (or1k32bf,lf_sfueq_s) },\n+  { OR1K32BF_INSN_LF_SFUEQ_D32, SEM_FN_NAME (or1k32bf,lf_sfueq_d32) },\n+  { OR1K32BF_INSN_LF_SFUNE_S, SEM_FN_NAME (or1k32bf,lf_sfune_s) },\n+  { OR1K32BF_INSN_LF_SFUNE_D32, SEM_FN_NAME (or1k32bf,lf_sfune_d32) },\n+  { OR1K32BF_INSN_LF_SFUGT_S, SEM_FN_NAME (or1k32bf,lf_sfugt_s) },\n+  { OR1K32BF_INSN_LF_SFUGT_D32, SEM_FN_NAME (or1k32bf,lf_sfugt_d32) },\n+  { OR1K32BF_INSN_LF_SFUGE_S, SEM_FN_NAME (or1k32bf,lf_sfuge_s) },\n+  { OR1K32BF_INSN_LF_SFUGE_D32, SEM_FN_NAME (or1k32bf,lf_sfuge_d32) },\n+  { OR1K32BF_INSN_LF_SFULT_S, SEM_FN_NAME (or1k32bf,lf_sfult_s) },\n+  { OR1K32BF_INSN_LF_SFULT_D32, SEM_FN_NAME (or1k32bf,lf_sfult_d32) },\n+  { OR1K32BF_INSN_LF_SFULE_S, SEM_FN_NAME (or1k32bf,lf_sfule_s) },\n+  { OR1K32BF_INSN_LF_SFULE_D32, SEM_FN_NAME (or1k32bf,lf_sfule_d32) },\n+  { OR1K32BF_INSN_LF_SFUN_S, SEM_FN_NAME (or1k32bf,lf_sfun_s) },\n+  { OR1K32BF_INSN_LF_SFUN_D32, SEM_FN_NAME (or1k32bf,lf_sfun_d32) },\n   { OR1K32BF_INSN_LF_MADD_S, SEM_FN_NAME (or1k32bf,lf_madd_s) },\n+  { OR1K32BF_INSN_LF_MADD_D32, SEM_FN_NAME (or1k32bf,lf_madd_d32) },\n   { OR1K32BF_INSN_LF_CUST1_S, SEM_FN_NAME (or1k32bf,lf_cust1_s) },\n+  { OR1K32BF_INSN_LF_CUST1_D32, SEM_FN_NAME (or1k32bf,lf_cust1_d32) },\n   { 0, 0 }\n };\n "
    }
  ]
}