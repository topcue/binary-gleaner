{
  "sha": "b74dbc2093191b10f4963f43ee570b54c9593404",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Yjc0ZGJjMjA5MzE5MWIxMGY0OTYzZjQzZWU1NzBiNTRjOTU5MzQwNA==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:18:35Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-15T08:18:35Z"
    },
    "message": "Add support for fixed-point type comparison operators\n\nThis patch adds support for binary comparison operators with\nfixed-point type values.\n\ngdb/ChangeLog:\n\n        * valarith.c (fixed_point_binop): Add BINOP_EQUAL and BINOP_LESS\n        handling.\n        (value_less): Add fixed-point handling.\n\ngdb/testsuite/ChangeLog:\n\n        * gdb.ada/fixed_cmp.exp: Add -fgnat-encodings=minimal testing.\n        * gdb.dwarf2/dw2-fixed-point.c (pck__fp1_var2): New global.\n        (main): Add reference to pck__fp1_var2.\n        * gdb.dwarf2/dw2-fixed-point.exp: Add comparison operator testing.",
    "tree": {
      "sha": "32f600bc82951ac58ec59e2142f7140174098208",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/32f600bc82951ac58ec59e2142f7140174098208"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b74dbc2093191b10f4963f43ee570b54c9593404",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b74dbc2093191b10f4963f43ee570b54c9593404",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b74dbc2093191b10f4963f43ee570b54c9593404",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b74dbc2093191b10f4963f43ee570b54c9593404/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0a12719e51c456a5220f75950ebf9c07457c753b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a12719e51c456a5220f75950ebf9c07457c753b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0a12719e51c456a5220f75950ebf9c07457c753b"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 137,
    "deletions": 2
  },
  "files": [
    {
      "sha": "6d0a0c649100434a7dfdeb8aff61ecbbf2459921",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* valarith.c (fixed_point_binop): Add BINOP_EQUAL and BINOP_LESS\n+\thandling.\n+\t(value_less): Add fixed-point handling.\n+\n 2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n \n \t* eval.c (binop_promote): Add fixed-point type handling."
    },
    {
      "sha": "6ecb04cf0ad18f090d11d8e6546a27220d93dd01",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -1,3 +1,10 @@\n+2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdb.ada/fixed_cmp.exp: Add -fgnat-encodings=minimal testing.\n+\t* gdb.dwarf2/dw2-fixed-point.c (pck__fp1_var2): New global.\n+\t(main): Add reference to pck__fp1_var2.\n+\t* gdb.dwarf2/dw2-fixed-point.exp: Add comparison operator testing.\n+\n 2020-11-15  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gdb.dwarf2/dw2-fixed-point.exp: Add arithmetic tests."
    },
    {
      "sha": "e2c88b8c902d913c782d1d85ef4acc2a6973b281",
      "filename": "gdb/testsuite/gdb.ada/fixed_cmp.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.ada/fixed_cmp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.ada/fixed_cmp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/fixed_cmp.exp?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -19,7 +19,7 @@ if { [skip_ada_tests] } { return -1 }\n \n standard_ada_testfile fixed\n \n-foreach_with_prefix gnat_encodings {all} {\n+foreach_with_prefix gnat_encodings {all minimal} {\n     set flags [list debug additional_flags=-fgnat-encodings=$gnat_encodings]\n \n     if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\" } {"
    },
    {
      "sha": "971a7a89b9de870de2f715449d7b5ffc81442a8c",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-fixed-point.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.c?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -22,6 +22,12 @@\n       FP1_Var : FP1_Type := 0.25;  */\n int8_t pck__fp1_var = 4;\n \n+/* Simulate an Ada variable declared inside package Pck as follow:\n+      type FP1_Type is delta 0.1 range -1.0 .. +1.0;\n+      FP1_Var2 : FP1_Type := 0.50;\n+   Basically, the same as FP1_Var, but with a different value.  */\n+int8_t pck__fp1_var2 = 8;\n+\n /* Simulate an Ada variable declared inside package Pck as follow:\n       type FP2_Type is delta 0.01 digits 14;\n       FP2_Var : FP2_Type := -0.01;  */\n@@ -41,6 +47,7 @@ int\n main (void)\n {\n   pck__fp1_var++;\n+  pck__fp1_var2++;\n   pck__fp2_var++;\n   pck__fp3_var++;\n   pck__fp1_range_var++;"
    },
    {
      "sha": "a82a9af32392d2c8e877e1e8580fe727f1155c05",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "status": "modified",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-fixed-point.exp?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -49,6 +49,15 @@ Dwarf::assemble $asm_file {\n                 {external 1 flag}\n             }\n \n+            DW_TAG_variable {\n+                {DW_AT_name pck__fp1_var2}\n+                {DW_AT_type :$fp1_base_type}\n+                {DW_AT_location {\n+                    DW_OP_addr [gdb_target_symbol pck__fp1_var2]\n+                } SPECIAL_expr}\n+                {external 1 flag}\n+            }\n+\n             fp2_base_type: DW_TAG_base_type {\n                 {DW_AT_byte_size     1 DW_FORM_sdata}\n                 {DW_AT_encoding      @DW_ATE_signed_fixed}\n@@ -161,6 +170,99 @@ gdb_test \"print pck.fp1_range_var - 0.5\" \\\n gdb_test \"print -pck.fp1_var\" \\\n          \" = -0.25\"\n \n+gdb_test \"print pck.fp1_var = pck.fp1_var\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var = pck.fp1_var2\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var /= pck.fp1_var\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var /= pck.fp1_var2\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var < pck.fp1_var\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var < pck.fp1_var2\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <= pck.fp1_var2\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <= pck.fp1_var\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var > pck.fp1_var2\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var2 > pck.fp1_var\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var >= pck.fp1_var\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var >= pck.fp1_var2\" \\\n+         \" = false\"\n+\n+# Same as above, but with litterals...\n+\n+gdb_test \"print pck.fp1_var = 0.25\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var = 0.5\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var = 1\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var /= 0.25\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var /= 0.5\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var /= 1\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var < 0.25\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var <  0.5\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <  1\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <= 0.25\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <= 0.5\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var <= 1\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var > 0.25\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var > 0.5\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var > 1\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var >= 0.25\" \\\n+         \" = true\"\n+\n+gdb_test \"print pck.fp1_var >= 0.5\" \\\n+         \" = false\"\n+\n+gdb_test \"print pck.fp1_var >= 1\" \\\n+         \" = false\"\n+\n+\n # Set the language to LANG and do a ptype test on pck__fp1_var,\n # pck__fp2_var and pck__fp3_var, verifying that the output matches\n # FP1_RE, FP2_RE, FP2_RE (resp.)."
    },
    {
      "sha": "f4497cd223f42ced6b0556d1d7517136cf67bda2",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b74dbc2093191b10f4963f43ee570b54c9593404/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=b74dbc2093191b10f4963f43ee570b54c9593404",
      "patch": "@@ -890,7 +890,9 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n {\n   struct type *type1 = check_typedef (value_type (arg1));\n   struct type *type2 = check_typedef (value_type (arg2));\n+  const struct language_defn *language = current_language;\n \n+  struct gdbarch *gdbarch = get_type_arch (type1);\n   struct value *val;\n \n   gdb_assert (is_fixed_point_type (type1) || is_fixed_point_type (type2));\n@@ -952,6 +954,16 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n       INIT_VAL_WITH_FIXED_POINT_VAL (res);\n       break;\n \n+    case BINOP_EQUAL:\n+      val = value_from_ulongest (language_bool_type (language, gdbarch),\n+\t\t\t\t mpq_cmp (v1.val, v2.val) == 0 ? 1 : 0);\n+      break;\n+\n+    case BINOP_LESS:\n+      val = value_from_ulongest (language_bool_type (language, gdbarch),\n+\t\t\t\t mpq_cmp (v1.val, v2.val) < 0 ? 1 : 0);\n+      break;\n+\n     default:\n       error (_(\"Integer-only operation on fixed point number.\"));\n     }\n@@ -1774,7 +1786,8 @@ value_less (struct value *arg1, struct value *arg2)\n   is_int1 = is_integral_type (type1);\n   is_int2 = is_integral_type (type2);\n \n-  if (is_int1 && is_int2)\n+  if ((is_int1 && is_int2)\n+      || (is_fixed_point_type (type1) && is_fixed_point_type (type2)))\n     return longest_to_int (value_as_long (value_binop (arg1, arg2,\n \t\t\t\t\t\t       BINOP_LESS)));\n   else if ((is_floating_value (arg1) || is_int1)"
    }
  ]
}