{
  "sha": "13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNlYTAxNGFlZWZiNGExMWQ0M2MyZTlkOWUyODA2NGE0NmJkNWE0YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:08Z"
    },
    "message": "Split helper functions\n\nThis splits a couple of address-of and sizeof functions, so that the\nbody can be reused by the (coming) new expression code.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (evaluate_subexp_for_address_base): New function.\n\t(evaluate_subexp_for_address): Use it.\n\t(evaluate_subexp_for_sizeof_base): New function.\n\t(evaluate_subexp_for_sizeof): Use it.",
    "tree": {
      "sha": "4d2010fd11bcfd1d9beed9c624ab8e513645a8d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d2010fd11bcfd1d9beed9c624ab8e513645a8d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1fa41fc710dd282dacb67cd035af7e350b1b1057",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fa41fc710dd282dacb67cd035af7e350b1b1057",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1fa41fc710dd282dacb67cd035af7e350b1b1057"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 49,
    "deletions": 23
  },
  "files": [
    {
      "sha": "0f3967ffae57400ad778973f031a0ac148096f15",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (evaluate_subexp_for_address_base): New function.\n+\t(evaluate_subexp_for_address): Use it.\n+\t(evaluate_subexp_for_sizeof_base): New function.\n+\t(evaluate_subexp_for_sizeof): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* rust-lang.c (eval_op_rust_structop): New function."
    },
    {
      "sha": "def1220888300b6ff99aace6f239f42666da1515",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 42,
      "deletions": 23,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=13ea014aeefb4a11d43c2e9d9e28064a46bd5a4a",
      "patch": "@@ -3081,6 +3081,29 @@ evaluate_subexp_standard (struct type *expect_type,\n   gdb_assert_not_reached (\"missed return?\");\n }\n \f\n+/* Helper for evaluate_subexp_for_address.  */\n+\n+static value *\n+evaluate_subexp_for_address_base (struct expression *exp, enum noside noside,\n+\t\t\t\t  value *x)\n+{\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    {\n+      struct type *type = check_typedef (value_type (x));\n+\n+      if (TYPE_IS_REFERENCE (type))\n+\treturn value_zero (lookup_pointer_type (TYPE_TARGET_TYPE (type)),\n+\t\t\t   not_lval);\n+      else if (VALUE_LVAL (x) == lval_memory || value_must_coerce_to_target (x))\n+\treturn value_zero (lookup_pointer_type (value_type (x)),\n+\t\t\t   not_lval);\n+      else\n+\terror (_(\"Attempt to take address of \"\n+\t\t \"value not located in memory.\"));\n+    }\n+  return value_addr (x);\n+}\n+\n /* Evaluate a subexpression of EXP, at index *POS,\n    and return the address of that subexpression.\n    Advance *POS over the subexpression.\n@@ -3188,21 +3211,7 @@ evaluate_subexp_for_address (struct expression *exp, int *pos,\n     default_case:\n       x = evaluate_subexp (nullptr, exp, pos, noside);\n     default_case_after_eval:\n-      if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t{\n-\t  struct type *type = check_typedef (value_type (x));\n-\n-\t  if (TYPE_IS_REFERENCE (type))\n-\t    return value_zero (lookup_pointer_type (TYPE_TARGET_TYPE (type)),\n-\t\t\t       not_lval);\n-\t  else if (VALUE_LVAL (x) == lval_memory || value_must_coerce_to_target (x))\n-\t    return value_zero (lookup_pointer_type (value_type (x)),\n-\t\t\t       not_lval);\n-\t  else\n-\t    error (_(\"Attempt to take address of \"\n-\t\t     \"value not located in memory.\"));\n-\t}\n-      return value_addr (x);\n+      return evaluate_subexp_for_address_base (exp, noside, x);\n     }\n }\n \n@@ -3251,6 +3260,23 @@ evaluate_subexp_with_coercion (struct expression *exp,\n     }\n }\n \n+/* Helper function for evaluating the size of a type.  */\n+\n+static value *\n+evaluate_subexp_for_sizeof_base (struct expression *exp, struct type *type)\n+{\n+  /* FIXME: This should be size_t.  */\n+  struct type *size_type = builtin_type (exp->gdbarch)->builtin_int;\n+  /* $5.3.3/2 of the C++ Standard (n3290 draft) says of sizeof:\n+     \"When applied to a reference or a reference type, the result is\n+     the size of the referenced type.\"  */\n+  type = check_typedef (type);\n+  if (exp->language_defn->la_language == language_cplus\n+      && (TYPE_IS_REFERENCE (type)))\n+    type = check_typedef (TYPE_TARGET_TYPE (type));\n+  return value_from_longest (size_type, (LONGEST) TYPE_LENGTH (type));\n+}\n+\n /* Evaluate a subexpression of EXP, at index *POS,\n    and return a value for the size of that subexpression.\n    Advance *POS over the subexpression.  If NOSIDE is EVAL_NORMAL\n@@ -3374,14 +3400,7 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n       break;\n     }\n \n-  /* $5.3.3/2 of the C++ Standard (n3290 draft) says of sizeof:\n-     \"When applied to a reference or a reference type, the result is\n-     the size of the referenced type.\"  */\n-  type = check_typedef (type);\n-  if (exp->language_defn->la_language == language_cplus\n-      && (TYPE_IS_REFERENCE (type)))\n-    type = check_typedef (TYPE_TARGET_TYPE (type));\n-  return value_from_longest (size_type, (LONGEST) TYPE_LENGTH (type));\n+  return evaluate_subexp_for_sizeof_base (exp, type);\n }\n \n /* Evaluate a subexpression of EXP, at index *POS, and return a value"
    }
  ]
}