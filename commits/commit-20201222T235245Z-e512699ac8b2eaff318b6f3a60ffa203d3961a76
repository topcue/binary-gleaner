{
  "sha": "e512699ac8b2eaff318b6f3a60ffa203d3961a76",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTUxMjY5OWFjOGIyZWFmZjMxOGI2ZjNhNjBmZmEyMDNkMzk2MWE3Ng==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-12-22T17:08:41Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-12-22T23:52:45Z"
    },
    "message": "Remove trailing white spaces in gdb/frame.{c,h}\n\ngdb/ChangeLog:\n\n\t* frame.c: Remove trailing white spaces.\n\t* frame.h: Likewise.",
    "tree": {
      "sha": "ed9d9b5d032c97d9fc28b9a2392689c8ffe62f33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ed9d9b5d032c97d9fc28b9a2392689c8ffe62f33"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e512699ac8b2eaff318b6f3a60ffa203d3961a76",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e512699ac8b2eaff318b6f3a60ffa203d3961a76",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e512699ac8b2eaff318b6f3a60ffa203d3961a76",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e512699ac8b2eaff318b6f3a60ffa203d3961a76/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "acf10cacc6bd596ef7327063038bb1ee020c07d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/acf10cacc6bd596ef7327063038bb1ee020c07d0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/acf10cacc6bd596ef7327063038bb1ee020c07d0"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 13,
    "deletions": 8
  },
  "files": [
    {
      "sha": "0d7f1ef6d92a11b1feb3310a467e4b95051f5f86",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e512699ac8b2eaff318b6f3a60ffa203d3961a76",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-22  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* frame.c: Remove trailing white spaces.\n+\t* frame.h: Likewise.\n+\n 2020-12-22  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arc-linux-tdep.c: Replace \"regnum\" with \"REGNUM\" in comments."
    },
    {
      "sha": "1ed894f7129c708014da3c528b81b9150012a9ed",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=e512699ac8b2eaff318b6f3a60ffa203d3961a76",
      "patch": "@@ -2250,7 +2250,7 @@ get_prev_frame_always_1 (struct frame_info *this_frame)\n       CORE_ADDR this_pc_in_block;\n       struct minimal_symbol *morestack_msym;\n       const char *morestack_name = NULL;\n-      \n+\n       /* gcc -fsplit-stack __morestack can continue the stack anywhere.  */\n       this_pc_in_block = get_frame_address_in_block (this_frame);\n       morestack_msym = lookup_minimal_symbol_by_pc (this_pc_in_block).minsym;\n@@ -2518,9 +2518,9 @@ get_prev_frame (struct frame_info *this_frame)\n      pcsqh register (space register for the instruction at the head of the\n      instruction queue) cannot be written directly; the only way to set it\n      is to branch to code that is in the target space.  In order to implement\n-     frame dummies on HPUX, the called function is made to jump back to where \n-     the inferior was when the user function was called.  If gdb was inside \n-     the main function when we created the dummy frame, the dummy frame will \n+     frame dummies on HPUX, the called function is made to jump back to where\n+     the inferior was when the user function was called.  If gdb was inside\n+     the main function when we created the dummy frame, the dummy frame will\n      point inside the main function.  */\n   if (this_frame->level >= 0\n       && get_frame_type (this_frame) == NORMAL_FRAME\n@@ -2565,7 +2565,7 @@ get_prev_frame (struct frame_info *this_frame)\n      That should provide a far better stopper than the current\n      heuristics.  */\n   /* NOTE: tausq/2004-10-09: this is needed if, for example, the compiler\n-     applied tail-call optimizations to main so that a function called \n+     applied tail-call optimizations to main so that a function called\n      from main returns directly to the caller of main.  Since we don't\n      stop at main, we should at least stop at the entry point of the\n      application.  */\n@@ -2600,7 +2600,7 @@ get_prev_frame_id_by_id (struct frame_id id)\n {\n   struct frame_id prev_id;\n   struct frame_info *frame;\n-  \n+\n   frame = frame_find_by_id (id);\n \n   if (frame != NULL)"
    },
    {
      "sha": "fab9dd8aaabdcfa9fd90b89bd657cb5985a29e60",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e512699ac8b2eaff318b6f3a60ffa203d3961a76/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=e512699ac8b2eaff318b6f3a60ffa203d3961a76",
      "patch": "@@ -149,8 +149,8 @@ struct frame_id\n \n   /* The frame's special address.  This shall be constant through out the\n      lifetime of the frame.  This is used for architectures that may have\n-     frames that do not change the stack but are still distinct and have \n-     some form of distinct identifier (e.g. the ia64 which uses a 2nd \n+     frames that do not change the stack but are still distinct and have\n+     some form of distinct identifier (e.g. the ia64 which uses a 2nd\n      stack for registers).  This field is treated as unordered - i.e. will\n      not be used in frame ordering comparisons.\n "
    }
  ]
}