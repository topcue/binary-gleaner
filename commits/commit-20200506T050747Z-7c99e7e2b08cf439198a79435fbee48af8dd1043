{
  "sha": "7c99e7e2b08cf439198a79435fbee48af8dd1043",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2M5OWU3ZTJiMDhjZjQzOTE5OGE3OTQzNWZiZWU0OGFmOGRkMTA0Mw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-06T05:07:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-06T05:07:47Z"
    },
    "message": "[gdb/testsuite] Fix gdb.base/consecutive.exp with gcc-8\n\nWhen running test-case gdb.base/consecutive.exp with gcc-8 instead of gcc-7,\nwe get:\n...\n (gdb) step^M\n ^M\n-Breakpoint 3, 0x00000000004004b1 in foo () at consecutive.c:10^M\n+Breakpoint 3, foo () at consecutive.c:10^M\n 10        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6];^M\n-(gdb) PASS: gdb.base/consecutive.exp: stopped at bp, 2nd instr\n+(gdb) FAIL: gdb.base/consecutive.exp: stopped at bp, 2nd instr\n...\n\nThis is due to the fact that gcc-8 generates more precise line info, making\nthe breakpoint address a \"recommended breakpoint location\", and consequently\ngdb doesn't print the address prefix anymore.\n\nFix the FAIL by checking in the test-case whether the breakpoint address is at\n\"recommended breakpoint location\" or not.\n\ngdb/testsuite/ChangeLog:\n\n2020-05-06  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (is_stmt_addresses, hex_in_list): New proc, factored out\n\tof ...\n\t* gdb.base/async.exp: ... here.\n\t* gdb.base/consecutive.exp: Handle if 2nd breakpoint is at a\n\t\"recommended breakpoint location\".",
    "tree": {
      "sha": "e884e65e507b7e28fbb6eb8c3cb5c47c89aedc05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e884e65e507b7e28fbb6eb8c3cb5c47c89aedc05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c99e7e2b08cf439198a79435fbee48af8dd1043",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c99e7e2b08cf439198a79435fbee48af8dd1043",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c99e7e2b08cf439198a79435fbee48af8dd1043",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c99e7e2b08cf439198a79435fbee48af8dd1043/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6173d6a696349bd934166b4694c24f4eda7362c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6173d6a696349bd934166b4694c24f4eda7362c0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6173d6a696349bd934166b4694c24f4eda7362c0"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 56,
    "deletions": 13
  },
  "files": [
    {
      "sha": "4ffff5dcbe5d0617975b224b4c23fbb637bc3db3",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7c99e7e2b08cf439198a79435fbee48af8dd1043",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (is_stmt_addresses, hex_in_list): New proc, factored out\n+\tof ...\n+\t* gdb.base/async.exp: ... here.\n+\t* gdb.base/consecutive.exp: Handle if 2nd breakpoint is at a\n+\t\"recommended breakpoint location\".\n+\n 2020-05-06  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.compile/compile-ifunc.exp: Use -Wno-attribute-alias."
    },
    {
      "sha": "1a4d3fbee83915a86cff4153b9d5161165d803fc",
      "filename": "gdb/testsuite/gdb.base/async.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/gdb.base/async.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/gdb.base/async.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/async.exp?ref=7c99e7e2b08cf439198a79435fbee48af8dd1043",
      "patch": "@@ -79,16 +79,7 @@ test_background \"step&\" \"\" \".*y = foo \\\\(\\\\).*\" \"step& #1\"\n \n test_background \"step&\" \"\" \" foo \\\\(\\\\) at .*async.c.*x = 5.*\" \"step& #2\"\n \n-set is_stmt [list]\n-gdb_test_multiple \"maint info line-table async.c\" \"\" {\n-    -re \"\\r\\n$decimal\\[ \\t\\]+$decimal\\[ \\t\\]+($hex)\\[ \\t\\]+Y\\[^\\r\\n\\]*\" {\n-\tlappend is_stmt $expect_out(1,string)\n-\texp_continue\n-    }\n-    -re -wrap \"\" {\n-\tpass $gdb_test_name\n-    }\n-}\n+set is_stmt [is_stmt_addresses $srcfile]\n \n # Get the next instruction address.\n set next_insn_addr \"\"\n@@ -99,8 +90,7 @@ gdb_test_multiple {x/2i $pc} \"$test\" {\n \tpass \"$test\"\n     }\n }\n-set next_insn_is_stmt \\\n-    [expr [lsearch -regexp $is_stmt 0x0*$next_insn_addr] != -1]\n+set next_insn_is_stmt [hex_in_list $next_insn_addr $is_stmt]\n \n if { $next_insn_is_stmt } {\n     set prefix \"\""
    },
    {
      "sha": "d0f541f1a252bd64ce25785d26092452a8a6313f",
      "filename": "gdb/testsuite/gdb.base/consecutive.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/gdb.base/consecutive.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/gdb.base/consecutive.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/consecutive.exp?ref=7c99e7e2b08cf439198a79435fbee48af8dd1043",
      "patch": "@@ -35,6 +35,8 @@ if ![runto_main] then {\n     continue\n }\n \n+set is_stmt [is_stmt_addresses $srcfile]\n+\n set nl \"\\[\\r\\n\\]+\"\n \n gdb_breakpoint foo\n@@ -55,13 +57,24 @@ gdb_test \"break \\*$bp_addr\" \"Breakpoint $decimal at $bp_addr: file .*\" \\\n \t\"set bp, 2nd instr\"\n \n gdb_test_multiple \"step\" \"stopped at bp, 2nd instr\" {\n-    -re \"Breakpoint $decimal, ($hex) in foo.*$gdb_prompt $\" {\n+    -re -wrap \"Breakpoint $decimal, ($hex) in foo.*\" {\n \tset stop_addr $expect_out(1,string)\n \tif [eval expr \"$bp_addr == $stop_addr\"] then {\n \t    pass \"stopped at bp, 2nd instr\"\n \t} else {\n \t    fail \"stopped at bp, 2nd instr (wrong address)\"\n \t}\n     }\n+    -re -wrap \"Breakpoint $decimal, foo.*\" {\n+\tset stop_addr [get_valueof \"/x\" \"\\$pc\" \"\" \"value of pc\"]\n+\tset stop_addr_is_stmt [hex_in_list $stop_addr $is_stmt]\n+\tif { ! $stop_addr_is_stmt } {\n+\t    fail \"stopped at bp, 2nd instr (missing hex prefix)\"\n+\t} elseif [eval expr \"$bp_addr == $stop_addr\"] then {\n+\t    pass \"stopped at bp, 2nd instr\"\n+\t} else {\n+\t    fail \"stopped at bp, 2nd instr (wrong address)\"\n+\t}\n+    }\n }\n "
    },
    {
      "sha": "239871114d2ddff7302ed47beaa3e4bbc217ab45",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c99e7e2b08cf439198a79435fbee48af8dd1043/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=7c99e7e2b08cf439198a79435fbee48af8dd1043",
      "patch": "@@ -7136,5 +7136,37 @@ proc debug_types { } {\n     return 0\n }\n \n+# Return the addresses in the line table for FILE for which is_stmt is true.\n+\n+proc is_stmt_addresses { file } {\n+    global decimal\n+    global hex\n+\n+    set is_stmt [list]\n+\n+    gdb_test_multiple \"maint info line-table $file\" \"\" {\n+\t-re \"\\r\\n$decimal\\[ \\t\\]+$decimal\\[ \\t\\]+($hex)\\[ \\t\\]+Y\\[^\\r\\n\\]*\" {\n+\t    lappend is_stmt $expect_out(1,string)\n+\t    exp_continue\n+\t}\n+\t-re -wrap \"\" {\n+\t}\n+    }\n+\n+    return $is_stmt\n+}\n+\n+# Return 1 if hex number VAL is an element of HEXLIST.\n+\n+proc hex_in_list { val hexlist } {\n+    # Normalize val by removing 0x prefix, and leading zeros.\n+    set val [regsub ^0x $val \"\"]\n+    set val [regsub ^0+ $val \"0\"]\n+\n+    set re 0x0*$val\n+    set index [lsearch -regexp $hexlist $re]\n+    return [expr $index != -1]\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    }
  ]
}