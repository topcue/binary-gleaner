{
  "sha": "98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OThhNjE3ZjhkNWNmOWJmYjUzYjJlMWQ1Y2YzZjBlMGYxODhkOWU1Mw==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-07-13T22:59:44Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-07-27T20:43:10Z"
    },
    "message": "Fix stepping bug associated with non-contiguous blocks\n\nI recently noticed the following behavior while debugging\ndw2-ranges-func-low-cold.  This is one of the test programs associated\nwith the test gdb.dwarf2/dw2-ranges-func.exp.\n\n(gdb) b 70\nBreakpoint 1 at 0x401129: file dw2-ranges-func-lo-cold.c, line 70.\n(gdb) run\nStarting program: dw2-ranges-func-lo-cold\n\nBreakpoint 1, foo ()\n    at dw2-ranges-func-lo-cold.c:70\n70\t  if (e) foo_cold ();\t\t\t\t/* foo foo_cold call */\n(gdb) set var e=1\n(gdb) step\n[Inferior 1 (process 12545) exited normally]\n\nThis is incorrect.  When stepping, we expect a step to occur.  We do not\nexpect the program to exit.  Instead, we should see the following behavior:\n\n...\n(gdb) set var e=1\n(gdb) step\nfoo ()\n    at dw2-ranges-func-lo-cold.c:54\n54\t  baz ();\t\t\t\t\t/* foo_cold baz call */\n\n(Note that I've shortened the paths in the above sessions to improve\nreadability.)\n\nThe bug is in fill_in_stop_func() in infrun.c.  While working on\nnon-contiguous address range improvements in 2018, I replaced the\ncall to find_pc_partial_function() with a call to\nfind_function_entry_range_from_pc().  Although this seemed like the\nright thing to do at the time, I now think that calling\nfind_pc_partial_function (along with some other tweaks) is the right\nthing to do.\n\nFor blocks with a single contiguous range, these functions do pretty\nmuch the same thing: when the function succeeds, the function name,\nstart address, and end address are all filled in.  Additionally,\nfind_pc_partial_function contains an additional output parameter\nwhich is set to the block containing that PC.\n\nFor blocks with non-contiguous ranges, find_pc_partial_function\nsets the start and end addresses to the start and end addresses\nof the range containing the pc.  find_function_entry_range_from_pc\ndoes what it says; it sets the start and end addresses to those\nof the range containing the entry pc.\n\nThe reason that I had thought that using the entry pc range was\ncorrect is due to the fact that fill_in_stop_func() contains some\ncode for advancing past the function start and entry point.  To do\nthis, we'd need the range that contains the entry pc.\n\nHowever, when stepping, we actually want the range that contains the\nstop pc.  If that range also contains the entry pc, we should then\nattempt to advance stop_func_start past the start offset and entry\npoint.  (I haven't thought very hard about the reason for advancing\nthe stop_func_start in this manner.  Since it's been there for quite\na while, I'm assuming that it's still a good idea.)\n\nBack when I wrote the test case, I had included a test for doing the\nstep shown in the example above.  I had problems with it, however.  At\nthe time, I thought it was due to differing compiler versions, so I\ndisabled that portion of the test.  I have now reenabled those tests,\nbut have left in place the logic which may be used to disable it.\n\nThe changes to dw2-ranges-func.exp depend on my other recent changes\nto the file which have not been pushed yet.\n\nFinally, I'll note that the only caller of\nfind_function_entry_range_from_pc() is/was fill_in_stop_func().  Once\nthis commit goes in, it'll be dead code.  I considered removing it,\nbut I think that it ought to be used (instead of\nfind_pc_partial_function) for determining the correct range to scan\nfor prologue analysis, so I'm going to leave it in place for now.\n\ngdb/ChangeLog:\n\n\t* infrun.c (fill_in_stop_func): Use find_pc_partial_function\n\tinstead of find_function_entry_range_from_pc.\n\ntestsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-ranges-func.exp (enable_foo_cold_stepping):\n\tEnable tests associated with this flag.  Adjust regex\n\treferencing \"foo_low\" to now refer to \"foo_cold\" instead.",
    "tree": {
      "sha": "e2d0f50a9016508e1538146404955d99ca95999b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e2d0f50a9016508e1538146404955d99ca95999b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c076da45ce9a24d47046ddb0bac02e158e6bf58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c076da45ce9a24d47046ddb0bac02e158e6bf58",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c076da45ce9a24d47046ddb0bac02e158e6bf58"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 62,
    "deletions": 23
  },
  "files": [
    {
      "sha": "bca9b72e0fb7d897843d4d3621ed501120fc74a9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* infrun.c (fill_in_stop_func): Use find_pc_partial_function\n+\tinstead of find_function_entry_range_from_pc.\n+\n 2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n \n \t* stack.c (find_frame_funname): Remove code which preferred"
    },
    {
      "sha": "a9588f896a5f6f489402faf67073a3a44b4639b0",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 27,
      "deletions": 10,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
      "patch": "@@ -4115,18 +4115,35 @@ fill_in_stop_func (struct gdbarch *gdbarch,\n {\n   if (!ecs->stop_func_filled_in)\n     {\n+      const block *block;\n+\n       /* Don't care about return value; stop_func_start and stop_func_name\n \t will both be 0 if it doesn't work.  */\n-      find_function_entry_range_from_pc (ecs->event_thread->suspend.stop_pc,\n-\t\t\t\t         &ecs->stop_func_name,\n-\t\t\t\t         &ecs->stop_func_start,\n-\t\t\t\t\t &ecs->stop_func_end);\n-      ecs->stop_func_start\n-\t+= gdbarch_deprecated_function_start_offset (gdbarch);\n-\n-      if (gdbarch_skip_entrypoint_p (gdbarch))\n-\tecs->stop_func_start = gdbarch_skip_entrypoint (gdbarch,\n-\t\t\t\t\t\t\tecs->stop_func_start);\n+      find_pc_partial_function (ecs->event_thread->suspend.stop_pc,\n+\t\t\t\t&ecs->stop_func_name,\n+\t\t\t\t&ecs->stop_func_start,\n+\t\t\t\t&ecs->stop_func_end,\n+\t\t\t\t&block);\n+\n+      /* The call to find_pc_partial_function, above, will set\n+\t stop_func_start and stop_func_end to the start and end\n+\t of the range containing the stop pc.  If this range\n+\t contains the entry pc for the block (which is always the\n+\t case for contiguous blocks), advance stop_func_start past\n+\t the function's start offset and entrypoint.  Note that\n+\t stop_func_start is NOT advanced when in a range of a\n+\t non-contiguous block that does not contain the entry pc.  */\n+      if (block != nullptr\n+\t  && ecs->stop_func_start <= BLOCK_ENTRY_PC (block)\n+\t  && BLOCK_ENTRY_PC (block) < ecs->stop_func_end)\n+\t{\n+\t  ecs->stop_func_start\n+\t    += gdbarch_deprecated_function_start_offset (gdbarch);\n+\n+\t  if (gdbarch_skip_entrypoint_p (gdbarch))\n+\t    ecs->stop_func_start\n+\t      = gdbarch_skip_entrypoint (gdbarch, ecs->stop_func_start);\n+\t}\n \n       ecs->stop_func_filled_in = 1;\n     }"
    },
    {
      "sha": "7cd3f9c797427ab03ad59bd3ea2202ae21cc3a62",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.dwarf2/dw2-ranges-func.exp (enable_foo_cold_stepping):\n+\tEnable tests associated with this flag.  Adjust regex\n+\treferencing \"foo_low\" to now refer to \"foo_cold\" instead.\n+\n 2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n \n \t* gdb.dwarf2/dw2-ranges-func.c: Rename to..."
    },
    {
      "sha": "bd0564f18864bcab5a2d0f06cc31a3818fe02d3d",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 13,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp?ref=98a617f8d5cf9bfb53b2e1d5cf3f0e0f188d9e53",
      "patch": "@@ -395,20 +395,31 @@ proc do_test {suffix} {\n \t\t \"foo(_label2)? \\\\(\\\\).*foo_cold \\\\(\\\\);.*foo foo_cold call.*\" \\\n \t\t \"step out of bar to foo\"\n \n-\t# The tests in the \"enable_foo_cold_stepping\" section, below, work\n-\t# with some versions of gcc, though it's not clear that they\n-\t# should.  This test case causes foo_cold, originally a separate\n-\t# function invoked via a subroutine call, to be considered as part\n-\t# of foo via use of DW_AT_ranges.  Real code that I've looked at\n-\t# uses a branch instruction to cause code in the \"cold\" range to\n-\t# be executed. \n+\t# Tests in the \"enable_foo_cold_stepping\" section, below, did\n+\t# not work prior to July, 2019.  They had been disabled via\n+\t# use of the \"enable_foo_cold_stepping\" flag.\n+\t# \n+\t# As noted elsewhere, this test case causes foo_cold,\n+\t# originally a separate function invoked via a subroutine\n+\t# call, to be considered as part of foo via use of\n+\t# DW_AT_ranges.  Real code that I've looked at uses a branch\n+\t# instruction to cause code in the \"cold\" range to be\n+\t# executed.  These tests used to fail which is why they were\n+\t# disabled.\n \t#\n-\t# For the moment though, these tests have been left in place, but\n-\t# disabled, in case we decide that making such a subroutine call\n-\t# is a reasonable thing to do that should also be supported by\n-\t# GDB.\n+\t# After adding a \"hi\" cold test, I found that we were able to\n+\t# step into foo_cold from foo for the \"hi\" version, but for\n+\t# the \"lo\" version, GDB would run to either the next\n+\t# breakpoint or until the inferior exited when there were no\n+\t# breakpoints.  Not being able to step is definitely a bug\n+\t# even if it's unlikely that this problem would ever be hit in\n+\t# a real program.  Therefore, the bug was fixed in GDB and\n+\t# these tests are now enabled.\n+\t#\n+\t# I've left in place the flag (and test) which may be used to\n+\t# disable these tests.\n \n-\tset enable_foo_cold_stepping false\n+\tset enable_foo_cold_stepping true\n \n \tif { $enable_foo_cold_stepping } {\n \t    gdb_test_no_output \"set variable e=1\"\n@@ -422,7 +433,7 @@ proc do_test {suffix} {\n \t\t\t     \"step to baz call in foo_cold\"\n \n \t\t}\n-\t\t-re \"foo(_low)? \\\\(\\\\).*baz \\\\(\\\\);.*foo_cold baz call.*${gdb_prompt}\" {\n+\t\t-re \"foo(_cold)? \\\\(\\\\).*baz \\\\(\\\\);.*foo_cold baz call.*${gdb_prompt}\" {\n \t\t    pass $test\n \t\t}\n \t    }"
    }
  ]
}