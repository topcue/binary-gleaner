{
  "sha": "a9f14fa5499a9f8d089c188f72c154de731551a0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTlmMTRmYTU0OTlhOWY4ZDA4OWMxODhmNzJjMTU0ZGU3MzE1NTFhMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-17T18:25:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-11T15:01:47Z"
    },
    "message": "Handle CPU offset for Ravenscar\n\nThe Ravenscar support assumes that the thread ID is the same as the\nCPU ID that appears in the Ada task structure.  However, on some\nsystems, gdbserver will report thread IDs that are off by some\nconstant.  This can happen, e.g., with qemu in a scenario where there\nis an additional (unreported) CPU in the emulation.\n\nThe Ada Ravenscar runtimes have been modified to store this offset in\na global variable.  This patch changes gdb to read this variable, when\nit exists, and apply the offset to the base CPU ID.  This fixes some\ncrashes that otherwise occur.\n\n2020-12-11  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-tasks.c (struct ada_tasks_pspace_data) <cpu_id_offset>: New\n\tfield.\n\t(ada_get_tcb_types_info): Look for __gnat_gdb_cpu_first_id.\n\t(read_atcb): Use cpu_id_offset.",
    "tree": {
      "sha": "e22499752cf8c5f8376fe699092911e550c34d27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e22499752cf8c5f8376fe699092911e550c34d27"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9f14fa5499a9f8d089c188f72c154de731551a0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9f14fa5499a9f8d089c188f72c154de731551a0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9f14fa5499a9f8d089c188f72c154de731551a0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9f14fa5499a9f8d089c188f72c154de731551a0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b143e2d506bee1020752597f979d5af174edc36d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b143e2d506bee1020752597f979d5af174edc36d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b143e2d506bee1020752597f979d5af174edc36d"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 27,
    "deletions": 2
  },
  "files": [
    {
      "sha": "4533a6a7b8b9f215d25cdd07f0ea345848fc443c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9f14fa5499a9f8d089c188f72c154de731551a0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9f14fa5499a9f8d089c188f72c154de731551a0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a9f14fa5499a9f8d089c188f72c154de731551a0",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-11  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-tasks.c (struct ada_tasks_pspace_data) <cpu_id_offset>: New\n+\tfield.\n+\t(ada_get_tcb_types_info): Look for __gnat_gdb_cpu_first_id.\n+\t(read_atcb): Use cpu_id_offset.\n+\n 2020-12-10  Kevin Buettner  <kevinb@redhat.com>\n \n \t* ada-lang.c (ada_fold_name): Fix off-by-one error."
    },
    {
      "sha": "151490676090c82d8310a77685ae81155bdab3f9",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9f14fa5499a9f8d089c188f72c154de731551a0/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9f14fa5499a9f8d089c188f72c154de731551a0/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=a9f14fa5499a9f8d089c188f72c154de731551a0",
      "patch": "@@ -159,6 +159,10 @@ struct ada_tasks_pspace_data\n \n   /* The index of various fields in the ATCB record and sub-records.  */\n   struct atcb_fieldnos atcb_fieldno {};\n+\n+  /* On some systems, gdbserver applies an offset to the CPU that is\n+     reported.  */\n+  unsigned int cpu_id_offset = 0;\n };\n \n /* Key to our per-program-space data.  */\n@@ -564,6 +568,18 @@ ada_get_tcb_types_info (void)\n   if (fieldnos.ll_lwp < 0)\n     fieldnos.ll_lwp = ada_get_field_index (ll_type, \"thread_id\", 1);\n \n+  /* Check for the CPU offset.  */\n+  bound_minimal_symbol first_id_sym\n+    = lookup_bound_minimal_symbol (\"__gnat_gdb_cpu_first_id\");\n+  unsigned int first_id = 0;\n+  if (first_id_sym.minsym != nullptr)\n+    {\n+      CORE_ADDR addr = BMSYMBOL_VALUE_ADDRESS (first_id_sym);\n+      /* This symbol always has type uint32_t.  */\n+      struct type *u32type = builtin_type (target_gdbarch ())->builtin_uint32;\n+      first_id = value_as_long (value_at (u32type, addr));\n+    }\n+\n   /* Set all the out parameters all at once, now that we are certain\n      that there are no potential error() anymore.  */\n   pspace_data = get_ada_tasks_pspace_data (current_program_space);\n@@ -573,6 +589,7 @@ ada_get_tcb_types_info (void)\n   pspace_data->atcb_ll_type = ll_type;\n   pspace_data->atcb_call_type = call_type;\n   pspace_data->atcb_fieldno = fieldnos;\n+  pspace_data->cpu_id_offset = first_id;\n   return NULL;\n }\n \n@@ -769,8 +786,9 @@ read_atcb (CORE_ADDR task_id, struct ada_task_info *task_info)\n     }\n \n   task_info->base_cpu\n-    = value_as_long (value_field (common_value,\n-\t\t\t\t  pspace_data->atcb_fieldno.base_cpu));\n+    = (pspace_data->cpu_id_offset\n+      + value_as_long (value_field (common_value,\n+\t\t\t\t    pspace_data->atcb_fieldno.base_cpu)));\n \n   /* And finally, compute the task ptid.  Note that there is not point\n      in computing it if the task is no longer alive, in which case"
    }
  ]
}