{
  "sha": "063e75c9e4307d21b787a71b6d5b61a2560f5073",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDYzZTc1YzllNDMwN2QyMWI3ODdhNzFiNmQ1YjYxYTI1NjBmNTA3Mw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-29T16:41:43Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-29T16:41:43Z"
    },
    "message": "Fix illegal memory accesses when parsing a corrupt SOM format file.\n\n\tPR 27792\n\t* som.c (som_slurp_string_table): Place a terminating NUL byte at\n\tthe end of the table.\n\t(som_slurp_symbol_table): Check for an over-large offset into the\n\tstring string table.",
    "tree": {
      "sha": "654ec96b82519cdc9a82f1b976507bf9cc6f693e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/654ec96b82519cdc9a82f1b976507bf9cc6f693e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/063e75c9e4307d21b787a71b6d5b61a2560f5073",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/063e75c9e4307d21b787a71b6d5b61a2560f5073",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/063e75c9e4307d21b787a71b6d5b61a2560f5073",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/063e75c9e4307d21b787a71b6d5b61a2560f5073/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89ba430c6b4cba43a2e77fe9a103e26e6c96bc12",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89ba430c6b4cba43a2e77fe9a103e26e6c96bc12",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89ba430c6b4cba43a2e77fe9a103e26e6c96bc12"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 20,
    "deletions": 4
  },
  "files": [
    {
      "sha": "3144a72d21d524da2dc8c163ac35914f0e62c7c9",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/063e75c9e4307d21b787a71b6d5b61a2560f5073/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/063e75c9e4307d21b787a71b6d5b61a2560f5073/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=063e75c9e4307d21b787a71b6d5b61a2560f5073",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-29  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 27792\n+\t* som.c (som_slurp_string_table): Place a terminating NUL byte at\n+\tthe end of the table.\n+\t(som_slurp_symbol_table): Check for an over-large offset into the\n+\tstring string table.\n+\n 2021-04-28  Nick Clifton  <nickc@redhat.com>\n \n \t* elf.c (_bfd_elf_maybe_function_sym): Do not accept annobin"
    },
    {
      "sha": "656ded96b697197e00c78a964a3bc10edaa5ff27",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/063e75c9e4307d21b787a71b6d5b61a2560f5073/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/063e75c9e4307d21b787a71b6d5b61a2560f5073/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=063e75c9e4307d21b787a71b6d5b61a2560f5073",
      "patch": "@@ -4576,9 +4576,11 @@ som_slurp_string_table (bfd *abfd)\n   if (bfd_seek (abfd, obj_som_str_filepos (abfd), SEEK_SET) != 0)\n     return false;\n   amt = obj_som_stringtab_size (abfd);\n-  stringtab = (char *) _bfd_malloc_and_read (abfd, amt, amt);\n+  stringtab = (char *) _bfd_malloc_and_read (abfd, amt + 1, amt);\n   if (stringtab == NULL)\n     return false;\n+  /* Make sure that the strings are zero-terminated.  */\n+  stringtab[amt] = 0;\n \n   /* Save our results and return success.  */\n   obj_som_stringtab (abfd) = stringtab;\n@@ -4697,6 +4699,7 @@ som_slurp_symbol_table (bfd *abfd)\n \t(flags >> SOM_SYMBOL_TYPE_SH) & SOM_SYMBOL_TYPE_MASK;\n       unsigned int symbol_scope =\n \t(flags >> SOM_SYMBOL_SCOPE_SH) & SOM_SYMBOL_SCOPE_MASK;\n+      bfd_vma offset;\n \n       /* I don't think we care about these.  */\n       if (symbol_type == ST_SYM_EXT || symbol_type == ST_ARG_EXT)\n@@ -4728,7 +4731,14 @@ som_slurp_symbol_table (bfd *abfd)\n \n       /* Some reasonable defaults.  */\n       sym->symbol.the_bfd = abfd;\n-      sym->symbol.name = bfd_getb32 (bufp->name) + stringtab;\n+      offset = bfd_getb32 (bufp->name);\n+      if (offset < obj_som_stringtab_size (abfd))\n+\tsym->symbol.name = offset + stringtab;\n+      else\n+\t{\n+\t  bfd_set_error (bfd_error_bad_value);\n+\t  goto error_return;\n+\t}\n       sym->symbol.value = bfd_getb32 (bufp->symbol_value);\n       sym->symbol.section = 0;\n       sym->symbol.flags = 0;\n@@ -4795,7 +4805,6 @@ som_slurp_symbol_table (bfd *abfd)\n       /* Check for a weak symbol.  */\n       if (flags & SOM_SYMBOL_SECONDARY_DEF)\n \tsym->symbol.flags |= BSF_WEAK;\n-\n       /* Mark section symbols and symbols used by the debugger.\n \t Note $START$ is a magic code symbol, NOT a section symbol.  */\n       if (sym->symbol.name[0] == '$'\n@@ -4809,7 +4818,6 @@ som_slurp_symbol_table (bfd *abfd)\n \t}\n       else if (startswith (sym->symbol.name, \"L$0\\001\"))\n \tsym->symbol.flags |= BSF_DEBUGGING;\n-\n       /* Note increment at bottom of loop, since we skip some symbols\n \t we can not include it as part of the for statement.  */\n       sym++;"
    }
  ]
}