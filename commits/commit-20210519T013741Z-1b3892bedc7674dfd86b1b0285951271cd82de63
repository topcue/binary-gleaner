{
  "sha": "1b3892bedc7674dfd86b1b0285951271cd82de63",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWIzODkyYmVkYzc2NzRkZmQ4NmIxYjAyODU5NTEyNzFjZDgyZGU2Mw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-18T14:11:10Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-19T01:37:41Z"
    },
    "message": "PR27884, skip_attr_bytes: Assertion (data) <= (end) failed\n\n\tPR 27884\n\t* dwarf.c (get_type_abbrev_from_form): Replace cu_offset_return\n\tparam with map_return, and return map for DW_FORM_ref_addr.\n\t(get_type_signedness): Adjust calls to get_type_abbrev_from_form.\n\tPass returned cu map start and end to recursive call.\n\t(read_and_display_attr_value): Similarly.",
    "tree": {
      "sha": "e77445b283e53e6ea4f4a279b54f2d3bcd0d4c01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e77445b283e53e6ea4f4a279b54f2d3bcd0d4c01"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b3892bedc7674dfd86b1b0285951271cd82de63",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b3892bedc7674dfd86b1b0285951271cd82de63",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b3892bedc7674dfd86b1b0285951271cd82de63",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b3892bedc7674dfd86b1b0285951271cd82de63/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d9e2a340ba50670f406afa314acaa9a2c34ec64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d9e2a340ba50670f406afa314acaa9a2c34ec64",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d9e2a340ba50670f406afa314acaa9a2c34ec64"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 32,
    "deletions": 19
  },
  "files": [
    {
      "sha": "8373280aaaa6a6f330266ba32b9a567a8d5812e2",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b3892bedc7674dfd86b1b0285951271cd82de63/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b3892bedc7674dfd86b1b0285951271cd82de63/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1b3892bedc7674dfd86b1b0285951271cd82de63",
      "patch": "@@ -1,3 +1,12 @@\n+2021-05-19  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27884\n+\t* dwarf.c (get_type_abbrev_from_form): Replace cu_offset_return\n+\tparam with map_return, and return map for DW_FORM_ref_addr.\n+\t(get_type_signedness): Adjust calls to get_type_abbrev_from_form.\n+\tPass returned cu map start and end to recursive call.\n+\t(read_and_display_attr_value): Similarly.\n+\n 2021-05-19  Alan Modra  <amodra@gmail.com>\n \n \tPR 27879"
    },
    {
      "sha": "6dd98789e2893f9211ed8b698b348fe423c5f6b3",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 23,
      "deletions": 19,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b3892bedc7674dfd86b1b0285951271cd82de63/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b3892bedc7674dfd86b1b0285951271cd82de63/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=1b3892bedc7674dfd86b1b0285951271cd82de63",
      "patch": "@@ -2059,13 +2059,13 @@ skip_attr_bytes (unsigned long form,\n    associated with it.  */\n \n static abbrev_entry *\n-get_type_abbrev_from_form (unsigned long                 form,\n-\t\t\t   unsigned long                 uvalue,\n-\t\t\t   dwarf_vma                     cu_offset,\n-\t\t\t   const struct dwarf_section *  section,\n-\t\t\t   unsigned long *               abbrev_num_return,\n-\t\t\t   unsigned char **              data_return,\n-\t\t\t   unsigned long *               cu_offset_return)\n+get_type_abbrev_from_form (unsigned long form,\n+\t\t\t   unsigned long uvalue,\n+\t\t\t   dwarf_vma cu_offset,\n+\t\t\t   const struct dwarf_section *section,\n+\t\t\t   unsigned long *abbrev_num_return,\n+\t\t\t   unsigned char **data_return,\n+\t\t\t   abbrev_map **map_return)\n {\n   unsigned long   abbrev_number;\n   abbrev_map *    map;\n@@ -2132,12 +2132,12 @@ get_type_abbrev_from_form (unsigned long                 form,\n       return NULL;\n     }\n \n-  if (cu_offset_return != NULL)\n+  if (map_return != NULL)\n     {\n       if (form == DW_FORM_ref_addr)\n-\t* cu_offset_return = map->start;\n+\t*map_return = map;\n       else\n-\t* cu_offset_return = cu_offset;\n+\t*map_return = NULL;\n     }\n \t\n   READ_ULEB (abbrev_number, data, section->start + section->size);\n@@ -2214,21 +2214,23 @@ get_type_signedness (abbrev_entry *entry,\n \tcase DW_AT_type:\n \t  /* Recurse.  */\n \t  {\n-\t    abbrev_entry *  type_abbrev;\n-\t    unsigned char * type_data;\n-\t    unsigned long   type_cu_offset;\n+\t    abbrev_entry *type_abbrev;\n+\t    unsigned char *type_data;\n+\t    abbrev_map *map;\n \n \t    type_abbrev = get_type_abbrev_from_form (attr->form,\n \t\t\t\t\t\t     uvalue,\n \t\t\t\t\t\t     cu_offset,\n \t\t\t\t\t\t     section,\n \t\t\t\t\t\t     NULL /* abbrev num return */,\n-\t\t\t\t\t\t     & type_data,\n-\t\t\t\t\t\t     & type_cu_offset);\n+\t\t\t\t\t\t     &type_data,\n+\t\t\t\t\t\t     &map);\n \t    if (type_abbrev == NULL)\n \t      break;\n \n-\t    get_type_signedness (type_abbrev, section, type_data, end, type_cu_offset,\n+\t    get_type_signedness (type_abbrev, section, type_data,\n+\t\t\t\t map ? section->start + map->end : end,\n+\t\t\t\t map ? map->start : cu_offset,\n \t\t\t\t pointer_size, offset_size, dwarf_version,\n \t\t\t\t is_signed, nesting + 1);\n \t  }\n@@ -2951,13 +2953,15 @@ read_and_display_attr_value (unsigned long           attribute,\n \t  bool is_signed = false;\n \t  abbrev_entry *type_abbrev;\n \t  unsigned char *type_data;\n-\t  unsigned long type_cu_offset;\n+\t  abbrev_map *map;\n \n \t  type_abbrev = get_type_abbrev_from_form (form, uvalue, cu_offset,\n-\t\t\t\t\t\t   section, NULL, & type_data, & type_cu_offset);\n+\t\t\t\t\t\t   section, NULL, &type_data, &map);\n \t  if (type_abbrev != NULL)\n \t    {\n-\t      get_type_signedness (type_abbrev, section, type_data, end, type_cu_offset,\n+\t      get_type_signedness (type_abbrev, section, type_data,\n+\t\t\t\t   map ? section->start + map->end : end,\n+\t\t\t\t   map ? map->start : cu_offset,\n \t\t\t\t   pointer_size, offset_size, dwarf_version,\n \t\t\t\t   & is_signed, 0);\n \t    }"
    }
  ]
}