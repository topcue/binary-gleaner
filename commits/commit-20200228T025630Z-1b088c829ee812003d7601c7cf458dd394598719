{
  "sha": "1b088c829ee812003d7601c7cf458dd394598719",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWIwODhjODI5ZWU4MTIwMDNkNzYwMWM3Y2Y0NThkZDM5NDU5ODcxOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-28T02:05:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-28T02:56:30Z"
    },
    "message": "alpha-vms: large memory allocation\n\nThis patch simplifies reading of image headers.  It's really not worth\ntrying to avoid re-reading a 12 byte buffer and then read in\nVMS_BLOCK_SIZE chunks, better just to throw the buffer away and use\n_bfd_malloc_and_read which does checks against file size.\n\n\t* vms-alpha.c (alpha_vms_object_p): Use _bfd_malloc_and_read.\n\tRemove duplicate undersize check.",
    "tree": {
      "sha": "e93c2827d0998074c7250f7f7de39ecda3340f65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e93c2827d0998074c7250f7f7de39ecda3340f65"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b088c829ee812003d7601c7cf458dd394598719",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b088c829ee812003d7601c7cf458dd394598719",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b088c829ee812003d7601c7cf458dd394598719",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b088c829ee812003d7601c7cf458dd394598719/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e5da11393a16416afc0c0a1da9914b6424f37fa8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5da11393a16416afc0c0a1da9914b6424f37fa8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e5da11393a16416afc0c0a1da9914b6424f37fa8"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 20,
    "deletions": 44
  },
  "files": [
    {
      "sha": "57e6b7c923979645aa0f5497804eada233a53ea2",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b088c829ee812003d7601c7cf458dd394598719/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b088c829ee812003d7601c7cf458dd394598719/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1b088c829ee812003d7601c7cf458dd394598719",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-28  Alan Modra  <amodra@gmail.com>\n+\n+\t* vms-alpha.c (alpha_vms_object_p): Use _bfd_malloc_and_read.\n+\tRemove duplicate undersize check.\n+\n 2020-02-27  Alan Modra  <amodra@gmail.com>\n \n \tPR 24511"
    },
    {
      "sha": "8470047498ec335d15f7a855844d01bad7d67ebe",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 15,
      "deletions": 44,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b088c829ee812003d7601c7cf458dd394598719/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b088c829ee812003d7601c7cf458dd394598719/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=1b088c829ee812003d7601c7cf458dd394598719",
      "patch": "@@ -2719,7 +2719,7 @@ alpha_vms_object_p (bfd *abfd)\n     }\n \n   if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET))\n-    goto err_wrong_format;\n+    goto error_ret;\n \n   /* The first challenge with VMS is to discover the kind of the file.\n \n@@ -2738,27 +2738,17 @@ alpha_vms_object_p (bfd *abfd)\n      2 bytes size repeated) and 12 bytes for images (4 bytes major id,\n      4 bytes minor id, 4 bytes length).  */\n   test_len = 12;\n-\n-  /* Size the main buffer.  */\n-  buf = (unsigned char *) bfd_malloc (test_len);\n+  buf = _bfd_malloc_and_read (abfd, test_len, test_len);\n   if (buf == NULL)\n     goto error_ret;\n   PRIV (recrd.buf) = buf;\n   PRIV (recrd.buf_size) = test_len;\n-\n-  /* Initialize the record pointer.  */\n   PRIV (recrd.rec) = buf;\n \n-  if (bfd_bread (buf, test_len, abfd) != test_len)\n-    goto err_wrong_format;\n-\n   /* Is it an image?  */\n   if ((bfd_getl32 (buf) == EIHD__K_MAJORID)\n       && (bfd_getl32 (buf + 4) == EIHD__K_MINORID))\n     {\n-      unsigned int to_read;\n-      unsigned int read_so_far;\n-      unsigned int remaining;\n       unsigned int eisd_offset, eihs_offset;\n \n       /* Extract the header size.  */\n@@ -2768,44 +2758,25 @@ alpha_vms_object_p (bfd *abfd)\n       if (PRIV (recrd.rec_size) == 0)\n \tPRIV (recrd.rec_size) = sizeof (struct vms_eihd);\n \n-      if (PRIV (recrd.rec_size) > PRIV (recrd.buf_size))\n-\t{\n-\t  buf = bfd_realloc_or_free (buf, PRIV (recrd.rec_size));\n-\n-\t  if (buf == NULL)\n-\t    {\n-\t      PRIV (recrd.buf) = NULL;\n-\t      goto error_ret;\n-\t    }\n-\t  PRIV (recrd.buf) = buf;\n-\t  PRIV (recrd.buf_size) = PRIV (recrd.rec_size);\n-\t}\n-\n       /* PR 21813: Check for a truncated record.  */\n-      if (PRIV (recrd.rec_size < test_len))\n-\tgoto error_ret;\n-      /* Read the remaining record.  */\n-      remaining = PRIV (recrd.rec_size) - test_len;\n-      to_read = MIN (VMS_BLOCK_SIZE - test_len, remaining);\n-      read_so_far = test_len;\n-\n-      while (remaining > 0)\n-\t{\n-\t  if (bfd_bread (buf + read_so_far, to_read, abfd) != to_read)\n-\t    goto err_wrong_format;\n+      /* PR 17512: file: 7d7c57c2.  */\n+      if (PRIV (recrd.rec_size) < sizeof (struct vms_eihd))\n+\tgoto err_wrong_format;\n \n-\t  read_so_far += to_read;\n-\t  remaining -= to_read;\n+      if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET))\n+\tgoto error_ret;\n \n-\t  to_read = MIN (VMS_BLOCK_SIZE, remaining);\n-\t}\n+      free (PRIV (recrd.buf));\n+      PRIV (recrd.buf) = NULL;\n+      buf = _bfd_malloc_and_read (abfd, PRIV (recrd.rec_size),\n+\t\t\t\t  PRIV (recrd.rec_size));\n+      if (buf == NULL)\n+\tgoto error_ret;\n \n-      /* Reset the record pointer.  */\n+      PRIV (recrd.buf) = buf;\n+      PRIV (recrd.buf_size) = PRIV (recrd.rec_size);\n       PRIV (recrd.rec) = buf;\n \n-      /* PR 17512: file: 7d7c57c2.  */\n-      if (PRIV (recrd.rec_size) < sizeof (struct vms_eihd))\n-\tgoto error_ret;\n       vms_debug2 ((2, \"file type is image\\n\"));\n \n       if (!_bfd_vms_slurp_eihd (abfd, &eisd_offset, &eihs_offset))"
    }
  ]
}