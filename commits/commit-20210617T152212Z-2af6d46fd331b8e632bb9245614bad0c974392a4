{
  "sha": "2af6d46fd331b8e632bb9245614bad0c974392a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmFmNmQ0NmZkMzMxYjhlNjMyYmI5MjQ1NjE0YmFkMGM5NzQzOTJhNA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-17T15:16:55Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-17T15:22:12Z"
    },
    "message": "Add a unit test for scoped_ignore_sigpipe\n\ngdb/ChangeLog:\nyyyy-mm-dd  Pedro Alves  <pedro@palves.net>\n\n\t* Makefile.in (SELFTESTS_SRCS): Add\n\tunittests/scoped_ignore_signal-selftests.c.\n\t* unittests/scoped_ignore_signal-selftests.c: New.\n\nChange-Id: Idce24aa9432a3f1eb7065bc9aa030b1d0d7dcad5",
    "tree": {
      "sha": "7e1c5466a274a2a80f7dc455acee6436a4c6efe2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7e1c5466a274a2a80f7dc455acee6436a4c6efe2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2af6d46fd331b8e632bb9245614bad0c974392a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2af6d46fd331b8e632bb9245614bad0c974392a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2af6d46fd331b8e632bb9245614bad0c974392a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2af6d46fd331b8e632bb9245614bad0c974392a4/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "606a431366407ca2f041206dd4708450c2edc318",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/606a431366407ca2f041206dd4708450c2edc318",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/606a431366407ca2f041206dd4708450c2edc318"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 133,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e4e58173ee6b6e6c9a0edf2943b7493fdeac38f0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2af6d46fd331b8e632bb9245614bad0c974392a4",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-17  Pedro Alves  <pedro@palves.net>\n+\n+\t* Makefile.in (SELFTESTS_SRCS): Add\n+\tunittests/scoped_ignore_signal-selftests.c.\n+\t* unittests/scoped_ignore_signal-selftests.c: New.\n+\n 2021-06-17  Pedro Alves  <pedro@palves.net>\n \n \t* gdbsupport/scoped_ignore_signal.h: New."
    },
    {
      "sha": "1bc97885536e0d70b03cd9fe6d8b40304ee53555",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=2af6d46fd331b8e632bb9245614bad0c974392a4",
      "patch": "@@ -461,6 +461,7 @@ SELFTESTS_SRCS = \\\n \tunittests/mkdir-recursive-selftests.c \\\n \tunittests/rsp-low-selftests.c \\\n \tunittests/scoped_fd-selftests.c \\\n+\tunittests/scoped_ignore_signal-selftests.c \\\n \tunittests/scoped_mmap-selftests.c \\\n \tunittests/scoped_restore-selftests.c \\\n \tunittests/search-memory-selftests.c \\"
    },
    {
      "sha": "29826e325dce815faceeef0268e1f2e325eb5f4e",
      "filename": "gdb/unittests/scoped_ignore_signal-selftests.c",
      "status": "added",
      "additions": 126,
      "deletions": 0,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/unittests/scoped_ignore_signal-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2af6d46fd331b8e632bb9245614bad0c974392a4/gdb/unittests/scoped_ignore_signal-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/scoped_ignore_signal-selftests.c?ref=2af6d46fd331b8e632bb9245614bad0c974392a4",
      "patch": "@@ -0,0 +1,126 @@\n+/* Self tests for scoped_ignored_signal for GDB, the GNU debugger.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"gdbsupport/scoped_ignore_signal.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"gdbsupport/scope-exit.h\"\n+#include <unistd.h>\n+#include <signal.h>\n+\n+namespace selftests {\n+namespace scoped_ignore_sig {\n+\n+#ifdef SIGPIPE\n+\n+/* True if the SIGPIPE handler ran.  */\n+static volatile sig_atomic_t got_sigpipe = 0;\n+\n+/* SIGPIPE handler for testing.  */\n+\n+static void\n+handle_sigpipe (int)\n+{\n+  got_sigpipe = 1;\n+}\n+\n+/* Test scoped_ignore_sigpipe.  */\n+\n+static void\n+test_sigpipe ()\n+{\n+  auto *osig = signal (SIGPIPE, handle_sigpipe);\n+  SCOPE_EXIT { signal (SIGPIPE, osig); };\n+\n+#ifdef HAVE_SIGPROCMASK\n+  /* Make sure SIGPIPE isn't blocked.  */\n+  sigset_t set, old_state;\n+  sigemptyset (&set);\n+  sigaddset (&set, SIGPIPE);\n+  sigprocmask (SIG_UNBLOCK, &set, &old_state);\n+  SCOPE_EXIT { sigprocmask (SIG_SETMASK, &old_state, nullptr); };\n+#endif\n+\n+  /* Create pipe, and close read end so that writes to the pipe fail\n+     with EPIPE.  */\n+\n+  int fd[2];\n+  char c = 0xff;\n+  int r;\n+\n+  r = pipe (fd);\n+  SELF_CHECK (r == 0);\n+\n+  close (fd[0]);\n+  SCOPE_EXIT { close (fd[1]); };\n+\n+  /* Check that writing to the pipe results in EPIPE.  EXPECT_SIG\n+     indicates whether a SIGPIPE signal is expected.  */\n+  auto check_pipe_write = [&] (bool expect_sig)\n+  {\n+    got_sigpipe = 0;\n+    errno = 0;\n+\n+    r = write (fd[1], &c, 1);\n+    SELF_CHECK (r == -1 && errno == EPIPE\n+\t\t&& got_sigpipe == expect_sig);\n+  };\n+\n+  /* Check that without a scoped_ignore_sigpipe in scope we indeed get\n+     a SIGPIPE signal.  */\n+  check_pipe_write (true);\n+\n+  /* Now check that with a scoped_ignore_sigpipe in scope, SIGPIPE is\n+     ignored/blocked.  */\n+  {\n+    scoped_ignore_sigpipe ignore1;\n+\n+    check_pipe_write (false);\n+\n+    /* Check that scoped_ignore_sigpipe nests correctly.  */\n+    {\n+      scoped_ignore_sigpipe ignore2;\n+\n+      check_pipe_write (false);\n+    }\n+\n+    /* If nesting works correctly, this write results in no\n+       SIGPIPE.  */\n+    check_pipe_write (false);\n+  }\n+\n+  /* No scoped_ignore_sigpipe is in scope anymore, so this should\n+     result in a SIGPIPE signal.  */\n+  check_pipe_write (true);\n+}\n+\n+#endif /* SIGPIPE */\n+\n+} /* namespace scoped_ignore_sig */\n+} /* namespace selftests */\n+\n+void _initialize_scoped_ignore_signal_selftests ();\n+void\n+_initialize_scoped_ignore_signal_selftests ()\n+{\n+#ifdef SIGPIPE\n+  selftests::register_test (\"scoped_ignore_sigpipe\",\n+\t\t\t    selftests::scoped_ignore_sig::test_sigpipe);\n+#endif\n+}"
    }
  ]
}