{
  "sha": "90d92a632aaf75ce698335efeb383ddf785c12d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTBkOTJhNjMyYWFmNzVjZTY5ODMzNWVmZWIzODNkZGY3ODVjMTJkOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T01:04:46Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T12:02:51Z"
    },
    "message": "Use bfd_set_filename more\n\nFixes a few leaks in bfd and ld.\n\nbfd/\n\t* mach-o.c (bfd_mach_o_fat_member_init): Likewise.  Replace\n\txstrdup and xmalloc with bfd_strdup and bfd_malloc.  Return an\n\terror status.  Adjust calls.\n\t* vms-lib.c (_bfd_vms_lib_get_module): Test mhd->id earlier.\n\tClose bfd on failure.  Replace xstrdup/bfd_alloc use with\n\tbfd_malloc.  Use bfd_set_filename.\ngdb/\n\t* solib-spu.c (spu_bfd_open): Use bfd_set_filename.\n\t* spu-linux-nat.c (spu_bfd_open): Likewise.\nld/\n\t* emultempl/pe.em (after_open): Use bfd_set_filename.\n\t* emultempl/pep.em (after_open): Use bfd_set_filename.",
    "tree": {
      "sha": "66d29393e4100245fd03bfd25d97e98861772cf2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66d29393e4100245fd03bfd25d97e98861772cf2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/90d92a632aaf75ce698335efeb383ddf785c12d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90d92a632aaf75ce698335efeb383ddf785c12d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/90d92a632aaf75ce698335efeb383ddf785c12d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90d92a632aaf75ce698335efeb383ddf785c12d8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1bdd8facfbf6f94fa9603f528c7e8bdf91d90bfd"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 66,
    "deletions": 30
  },
  "files": [
    {
      "sha": "08605c3a80a8984e6b6dfbdbc32a0067eefb5bbb",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1,3 +1,12 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* mach-o.c (bfd_mach_o_fat_member_init): Likewise.  Replace\n+\txstrdup and xmalloc with bfd_strdup and bfd_malloc.  Return an\n+\terror status.  Adjust calls.\n+\t* vms-lib.c (_bfd_vms_lib_get_module): Test mhd->id earlier.\n+\tClose bfd on failure.  Replace xstrdup/bfd_alloc use with\n+\tbfd_malloc.  Use bfd_set_filename.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (must_be_dyn_reloc): Return 0 for TOC16 relocs."
    },
    {
      "sha": "7d70087c95e151ac8c3ceb8fe0754251d69de5aa",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -5417,7 +5417,7 @@ bfd_mach_o_fat_archive_p (bfd *abfd)\n    ARCH_TYPE/ARCH_SUBTYPE and corresponding entry in header is ENTRY.\n    Set arelt_data and origin fields too.  */\n \n-static void\n+static bfd_boolean\n bfd_mach_o_fat_member_init (bfd *abfd,\n \t\t\t    enum bfd_architecture arch_type,\n \t\t\t    unsigned long arch_subtype,\n@@ -5426,27 +5426,35 @@ bfd_mach_o_fat_member_init (bfd *abfd,\n   struct areltdata *areltdata;\n   /* Create the member filename. Use ARCH_NAME.  */\n   const bfd_arch_info_type *ap = bfd_lookup_arch (arch_type, arch_subtype);\n+  char *filename;\n \n   if (ap)\n     {\n       /* Use the architecture name if known.  */\n-      abfd->filename = xstrdup (ap->printable_name);\n+      filename = bfd_strdup (ap->printable_name);\n+      if (filename == NULL)\n+\treturn FALSE;\n     }\n   else\n     {\n       /* Forge a uniq id.  */\n       const size_t namelen = 2 + 8 + 1 + 2 + 8 + 1;\n-      char *name = xmalloc (namelen);\n-      snprintf (name, namelen, \"0x%lx-0x%lx\",\n+      filename = bfd_malloc (namelen);\n+      if (filename == NULL)\n+\treturn FALSE;\n+      snprintf (filename, namelen, \"0x%lx-0x%lx\",\n \t\tentry->cputype, entry->cpusubtype);\n-      abfd->filename = name;\n     }\n+  bfd_set_filename (abfd, filename);\n \n   areltdata = bfd_zmalloc (sizeof (struct areltdata));\n+  if (areltdata == NULL)\n+    return FALSE;\n   areltdata->parsed_size = entry->size;\n   abfd->arelt_data = areltdata;\n   abfd->iostream = NULL;\n   abfd->origin = entry->offset;\n+  return TRUE;\n }\n \n bfd *\n@@ -5502,7 +5510,11 @@ bfd_mach_o_fat_openr_next_archived_file (bfd *archive, bfd *prev)\n   bfd_mach_o_convert_architecture (entry->cputype, entry->cpusubtype,\n \t\t\t\t   &arch_type, &arch_subtype);\n \n-  bfd_mach_o_fat_member_init (nbfd, arch_type, arch_subtype, entry);\n+  if (!bfd_mach_o_fat_member_init (nbfd, arch_type, arch_subtype, entry))\n+    {\n+      bfd_close (nbfd);\n+      return NULL;\n+    }\n \n   bfd_set_arch_mach (nbfd, arch_type, arch_subtype);\n \n@@ -5574,9 +5586,8 @@ bfd_mach_o_fat_extract (bfd *abfd,\n       if (res == NULL)\n \treturn NULL;\n \n-      bfd_mach_o_fat_member_init (res, cpu_type, cpu_subtype, e);\n-\n-      if (bfd_check_format (res, format))\n+      if (bfd_mach_o_fat_member_init (res, cpu_type, cpu_subtype, e)\n+\t  && bfd_check_format (res, format))\n \t{\n \t  BFD_ASSERT (bfd_get_arch_info (res) == arch);\n \t  return res;"
    },
    {
      "sha": "43addd46ecf9c6a38dd58f1cf46de235e4b77d3a",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1297,7 +1297,9 @@ _bfd_vms_lib_get_module (bfd *abfd, unsigned int modidx)\n   struct lib_tdata *tdata = bfd_libdata (abfd);\n   bfd *res;\n   file_ptr file_off;\n-  char *name;\n+  const char *name;\n+  char *newname;\n+  size_t namelen;\n \n   /* Sanity check.  */\n   if (modidx >= tdata->nbr_modules)\n@@ -1335,18 +1337,22 @@ _bfd_vms_lib_get_module (bfd *abfd, unsigned int modidx)\n       if (bfd_bread (buf, tdata->mhd_size, abfd) != tdata->mhd_size)\n \treturn NULL;\n \n+      mhd = (struct vms_mhd *) buf;\n+      if (mhd->id != MHD__C_MHDID)\n+\treturn NULL;\n+\n       res = _bfd_create_empty_archive_element_shell (abfd);\n       if (res == NULL)\n \treturn NULL;\n       arelt = bfd_zmalloc (sizeof (*arelt));\n       if (arelt == NULL)\n-\treturn NULL;\n+\t{\n+\t  bfd_close (res);\n+\t  return NULL;\n+\t}\n       res->arelt_data = arelt;\n \n       /* Get info from mhd.  */\n-      mhd = (struct vms_mhd *)buf;\n-      if (mhd->id != MHD__C_MHDID)\n-\treturn NULL;\n       if (tdata->mhd_size >= offsetof (struct vms_mhd, objstat) + 1)\n \tres->selective_search = (mhd->objstat & MHD__M_SELSRC) ? 1 : 0;\n       res->mtime = vms_rawtime_to_time_t (mhd->datim);\n@@ -1361,23 +1367,25 @@ _bfd_vms_lib_get_module (bfd *abfd, unsigned int modidx)\n \n   /* Set filename.  */\n   name = tdata->modules[modidx].name;\n+  namelen = strlen (name);\n+  newname = bfd_malloc (namelen + 4 + 1);\n+  if (newname == NULL)\n+    {\n+      bfd_close (res);\n+      return NULL;\n+    }\n+  strcpy (newname, name);\n   switch (tdata->type)\n     {\n     case LBR__C_TYP_IOBJ:\n     case LBR__C_TYP_EOBJ:\n       /* For object archives, append .obj to mimic standard behaviour.  */\n-      {\n-\tsize_t namelen = strlen (name);\n-\tchar *name1 = bfd_alloc (res, namelen + 4 + 1);\n-\tmemcpy (name1, name, namelen);\n-\tstrcpy (name1 + namelen, \".obj\");\n-\tname = name1;\n-      }\n+      strcpy (newname + namelen, \".obj\");\n       break;\n     default:\n       break;\n     }\n-  res->filename = xstrdup (name);\n+  bfd_set_filename (res, newname);\n \n   tdata->cache[modidx] = res;\n "
    },
    {
      "sha": "9ad5000480c20be322b5122c0289d7dcd4087acd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* solib-spu.c (spu_bfd_open): Use bfd_set_filename.\n+\t* spu-linux-nat.c (spu_bfd_open): Likewise.\n+\n 2019-09-18  Christian Biesinger  <cbiesinger@google.com>\n \n \t* dwarf2loc.c: Change extern declaration of dwarf_always_disassemble"
    },
    {
      "sha": "c5e0acaf02ac23bb50d74ba6576ec3b6248b07b2",
      "filename": "gdb/solib-spu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/solib-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/solib-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-spu.c?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -377,8 +377,7 @@ spu_bfd_open (const char *pathname)\n \n \t  strcat (buf, original_name);\n \n-\t  xfree ((char *)abfd->filename);\n-\t  abfd->filename = xstrdup (buf);\n+\t  bfd_set_filename (abfd.get (), xstrdup (buf));\n \t}\n     }\n "
    },
    {
      "sha": "9dbb6337344fda981c8c9b372f3e65eab68904f2",
      "filename": "gdb/spu-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/spu-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/gdb/spu-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/spu-linux-nat.c?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -371,8 +371,7 @@ spu_bfd_open (ULONGEST addr)\n \t\t\t\t    sect_size - 20);\n \t  buf[sect_size - 20] = '\\0';\n \n-\t  xfree ((char *)nbfd->filename);\n-\t  nbfd->filename = xstrdup (buf);\n+\t  bfd_set_filename (nbfd.get (), xstrdup (buf));\n \t}\n     }\n "
    },
    {
      "sha": "81935a408c582226d4bd7da57914ba249c619402",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/pe.em (after_open): Use bfd_set_filename.\n+\t* emultempl/pep.em (after_open): Use bfd_set_filename.\n+\n 2019-09-16  Alan Modra  <amodra@gmail.com>\n \n \tPR 25002"
    },
    {
      "sha": "2e78f26ad8b1c4e19642bc5fb69d52ba2e81b938",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1543,7 +1543,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\t/* Rename this implib to match the other one.  */\n \t\t\tn = xmalloc (strlen (other_bfd_filename) + 1);\n \t\t\tstrcpy (n, other_bfd_filename);\n-\t\t\tis->the_bfd->my_archive->filename = n;\n+\t\t\tbfd_set_filename (is->the_bfd->my_archive, n);\n \t\t      }\n \n \t\t    free (relocs);\n@@ -1648,7 +1648,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \n \t\tnew_name = xmalloc (strlen (is->the_bfd->filename) + 3);\n \t\tsprintf (new_name, \"%s.%c\", is->the_bfd->filename, seq);\n-\t\tis->the_bfd->filename = new_name;\n+\t\tbfd_set_filename (is->the_bfd, new_name);\n \n \t\tnew_name = xmalloc (strlen (is->filename) + 3);\n \t\tsprintf (new_name, \"%s.%c\", is->filename, seq);"
    },
    {
      "sha": "601ef11c2014aaec8bfd7d864f69a78344e00358",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d92a632aaf75ce698335efeb383ddf785c12d8/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=90d92a632aaf75ce698335efeb383ddf785c12d8",
      "patch": "@@ -1510,7 +1510,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\t/* Rename this implib to match the other one.  */\n \t\t\tn = xmalloc (strlen (other_bfd_filename) + 1);\n \t\t\tstrcpy (n, other_bfd_filename);\n-\t\t\tis->the_bfd->my_archive->filename = n;\n+\t\t\tbfd_set_filename (is->the_bfd->my_archive, n);\n \t\t      }\n \n \t\t    free (relocs);\n@@ -1615,7 +1615,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \n \t\tnew_name = xmalloc (strlen (is->the_bfd->filename) + 3);\n \t\tsprintf (new_name, \"%s.%c\", is->the_bfd->filename, seq);\n-\t\tis->the_bfd->filename = new_name;\n+\t\tbfd_set_filename (is->the_bfd, new_name);\n \n \t\tnew_name = xmalloc (strlen (is->filename) + 3);\n \t\tsprintf (new_name, \"%s.%c\", is->filename, seq);"
    }
  ]
}