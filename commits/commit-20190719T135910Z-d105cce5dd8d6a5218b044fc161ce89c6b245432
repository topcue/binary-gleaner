{
  "sha": "d105cce5dd8d6a5218b044fc161ce89c6b245432",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDEwNWNjZTVkZDhkNmE1MjE4YjA0NGZjMTYxY2U4OWM2YjI0NTQzMg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-19T13:59:10Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-19T13:59:10Z"
    },
    "message": "Arm: Add read_description read funcs and use in GDB\n\nSwitch the Arm target to get target descriptions via arm_read_description\nand aarch32_read_description, in the same style as other feature targets.\nAdd an enum to specify the different types - this will also be of use to\ngdbserver in a later patch.\n\nUnder the hood return the same existing pre-feature target descriptions.\n\ngdb/ChangeLog:\n\n\t* Makefile.in: Add new files.\n\t* aarch32-tdep.c: New file.\n\t* aarch32-tdep.h: New file.\n\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n\tCall aarch32_read_description.\n\t* arch/aarch32.c: New file.\n\t* arch/aarch32.h: New file.\n\t* arch/arm.c (arm_create_target_description)\n\t(arm_create_mprofile_target_description): New function.\n\t* arch/arm.h (arm_fp_type, arm_m_profile_type): New enum.\n\t(arm_create_target_description)\n\t(arm_create_mprofile_target_description): New declaration.\n\t* arm-fbsd-tdep.c (arm_fbsd_read_description_auxv): Call\n\tread_description functions.\n\t* arm-linux-nat.c (arm_linux_nat_target::read_description):\n\tLikewise.\n\t* arm-linux-tdep.c (arm_linux_core_read_description): Likewise.\n\t* arm-tdep.c (tdesc_arm_list): New variable.\n\t(arm_register_g_packet_guesses): Call create description functions.\n\t(arm_read_description) (arm_read_mprofile_description): New\n\tfunction.\n\t* arm-tdep.h (arm_read_description)\n\t(arm_read_mprofile_description): Add declaration.\n\t* configure.tgt: Add new files.",
    "tree": {
      "sha": "1562d65f665cc3e2dc5023d48e24de0a428eb79c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1562d65f665cc3e2dc5023d48e24de0a428eb79c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d105cce5dd8d6a5218b044fc161ce89c6b245432",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d105cce5dd8d6a5218b044fc161ce89c6b245432",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d105cce5dd8d6a5218b044fc161ce89c6b245432",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d105cce5dd8d6a5218b044fc161ce89c6b245432/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "231097b03afffd0c5a2b520cd999dbcbe8d64eda",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/231097b03afffd0c5a2b520cd999dbcbe8d64eda",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/231097b03afffd0c5a2b520cd999dbcbe8d64eda"
    }
  ],
  "stats": {
    "total": 340,
    "additions": 309,
    "deletions": 31
  },
  "files": [
    {
      "sha": "d5012b7e09dbbec49e2dcd9779a0939b680bd474",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -1,3 +1,30 @@\n+2019-07-19  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* Makefile.in: Add new files.\n+\t* aarch32-tdep.c: New file.\n+\t* aarch32-tdep.h: New file.\n+\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n+\tCall aarch32_read_description.\n+\t* arch/aarch32.c: New file.\n+\t* arch/aarch32.h: New file.\n+\t* arch/arm.c (arm_create_target_description)\n+\t(arm_create_mprofile_target_description): New function.\n+\t* arch/arm.h (arm_fp_type, arm_m_profile_type): New enum.\n+\t(arm_create_target_description)\n+\t(arm_create_mprofile_target_description): New declaration.\n+\t* arm-fbsd-tdep.c (arm_fbsd_read_description_auxv): Call\n+\tread_description functions.\n+\t* arm-linux-nat.c (arm_linux_nat_target::read_description):\n+\tLikewise.\n+\t* arm-linux-tdep.c (arm_linux_core_read_description): Likewise.\n+\t* arm-tdep.c (tdesc_arm_list): New variable.\n+\t(arm_register_g_packet_guesses): Call create description functions.\n+\t(arm_read_description) (arm_read_mprofile_description): New\n+\tfunction.\n+\t* arm-tdep.h (arm_read_description)\n+\t(arm_read_mprofile_description): Add declaration.\n+\t* configure.tgt: Add new files.\n+\n 2019-07-18  Guillaume LABARTHE  <guillaume.labarthe@gmail.com>\n \n \t* top.c (new_ui_command): Open specified terminal just once."
    },
    {
      "sha": "01ff0c0c20306547f26bce67309c700394b4729a",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -664,7 +664,9 @@ ALL_64_TARGET_OBS = \\\n \n # All other target-dependent objects files (used with --enable-targets=all).\n ALL_TARGET_OBS = \\\n+\taarch32-tdep.o \\\n \tarc-tdep.o \\\n+\tarch/aarch32.o \\\n \tarch/arm.o \\\n \tarch/arm-get-next-pcs.o \\\n \tarch/arm-linux.o \\\n@@ -1183,6 +1185,7 @@ SFILES = \\\n # right, it is probably easiest just to list .h files here directly.\n \n HFILES_NO_SRCDIR = \\\n+\taarch32-tdep.h \\\n \taarch64-ravenscar-thread.h \\\n \taarch64-tdep.h \\\n \tada-lang.h \\\n@@ -1428,6 +1431,7 @@ HFILES_NO_SRCDIR = \\\n \txml-syscall.h \\\n \txml-tdesc.h \\\n \txtensa-tdep.h \\\n+\tarch/aarch32.h \\\n \tarch/aarch64.h \\\n \tarch/aarch64-insn.h \\\n \tarch/arm.h \\\n@@ -2132,6 +2136,7 @@ force_update:\n MAKEOVERRIDES =\n \n ALLDEPFILES = \\\n+\taarch32-tdep.c \\\n \taarch64-fbsd-nat.c \\\n \taarch64-fbsd-tdep.c \\\n \taarch64-linux-nat.c \\"
    },
    {
      "sha": "12d464171ccfa0ba076bbef049632b0133f20eaa",
      "filename": "gdb/aarch32-tdep.c",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch32-tdep.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -0,0 +1,33 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/common-regcache.h\"\n+#include \"arch/aarch32.h\"\n+\n+static struct target_desc *tdesc_aarch32;\n+\n+/* See aarch32-tdep.h.  */\n+\n+const target_desc *\n+aarch32_read_description ()\n+{\n+  if (tdesc_aarch32 == nullptr)\n+    tdesc_aarch32 = aarch32_create_target_description ();\n+\n+  return tdesc_aarch32;\n+}"
    },
    {
      "sha": "7fcea0adb90030ed518e7edcbdca0818e17db11a",
      "filename": "gdb/aarch32-tdep.h",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch32-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch32-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch32-tdep.h?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -0,0 +1,25 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef AARCH32_TDEP_H\n+#define AARCH32_TDEP_H\n+\n+/* Get the AArch32 target description.  */\n+\n+const target_desc *aarch32_read_description ();\n+\n+#endif /* aarch32-tdep.h.  */"
    },
    {
      "sha": "2c1f4d9f9851c32628208998c22cd9288865c34c",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -30,6 +30,7 @@\n #include \"aarch64-tdep.h\"\n #include \"aarch64-linux-tdep.h\"\n #include \"aarch32-linux-nat.h\"\n+#include \"aarch32-tdep.h\"\n #include \"arch/arm.h\"\n #include \"nat/aarch64-linux.h\"\n #include \"nat/aarch64-linux-hw-point.h\"\n@@ -631,8 +632,6 @@ aarch64_linux_nat_target::post_attach (int pid)\n   linux_nat_target::post_attach (pid);\n }\n \n-extern struct target_desc *tdesc_arm_with_neon;\n-\n /* Implement the \"read_description\" target_ops method.  */\n \n const struct target_desc *\n@@ -649,7 +648,7 @@ aarch64_linux_nat_target::read_description ()\n \n   ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iovec);\n   if (ret == 0)\n-    return tdesc_arm_with_neon;\n+    return aarch32_read_description ();\n \n   CORE_ADDR hwcap = linux_get_hwcap (this);\n "
    },
    {
      "sha": "14d6987d3f05b32a99a7b7f276e12f14ee2e284d",
      "filename": "gdb/arch/aarch32.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/aarch32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/aarch32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch32.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"aarch32.h\"\n+\n+extern struct target_desc *tdesc_arm_with_neon;\n+\n+/* See aarch32.h.  */\n+\n+target_desc *\n+aarch32_create_target_description ()\n+{\n+  return tdesc_arm_with_neon;\n+}"
    },
    {
      "sha": "d2c00472167fd1f4a25faa5b33e06431c37e176a",
      "filename": "gdb/arch/aarch32.h",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/aarch32.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/aarch32.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch32.h?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARCH_AARCH32_H\n+#define ARCH_AARCH32_H\n+\n+#include \"gdbsupport/tdesc.h\"\n+\n+/* Create the AArch32 target description.  */\n+\n+target_desc *aarch32_create_target_description ();\n+\n+#endif /* aarch32.h.  */"
    },
    {
      "sha": "7a0f36e4c490705880d29e9fb541662cddf1782a",
      "filename": "gdb/arch/arm.c",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -21,6 +21,17 @@\n #include \"gdbsupport/common-regcache.h\"\n #include \"arm.h\"\n \n+extern struct target_desc *tdesc_arm_with_vfpv2;\n+extern struct target_desc *tdesc_arm_with_vfpv3;\n+extern struct target_desc *tdesc_arm_with_iwmmxt;\n+\n+/* Temporary ifdef.  Will be removed when target descriptions are switched.  */\n+#ifndef GDBSERVER\n+extern struct target_desc *tdesc_arm_with_m;\n+extern struct target_desc *tdesc_arm_with_m_vfp_d16;\n+extern struct target_desc *tdesc_arm_with_m_fpa_layout;\n+#endif\n+\n /* See arm.h.  */\n \n int\n@@ -372,3 +383,52 @@ shifted_reg_val (struct regcache *regcache, unsigned long inst,\n \n   return res & 0xffffffff;\n }\n+\n+/* See arch/arm.h.  */\n+\n+target_desc *\n+arm_create_target_description (arm_fp_type fp_type)\n+{\n+  switch (fp_type)\n+    {\n+    case ARM_FP_TYPE_NONE:\n+      return nullptr;\n+/* Temporary ifdef.  Will be removed when target descriptions are switched.  */\n+#ifndef GDBSERVER\n+    case ARM_FP_TYPE_VFPV2:\n+      return tdesc_arm_with_vfpv2;\n+\n+    case ARM_FP_TYPE_VFPV3:\n+      return tdesc_arm_with_vfpv3;\n+\n+    case ARM_FP_TYPE_IWMMXT:\n+      return tdesc_arm_with_iwmmxt;\n+#endif\n+    default:\n+      error (_(\"Invalid Arm FP type: %d\"), fp_type);\n+    }\n+}\n+\n+/* See arch/arm.h.  */\n+\n+target_desc *\n+arm_create_mprofile_target_description (arm_m_profile_type m_type)\n+{\n+  switch (m_type)\n+    {\n+/* Temporary ifdef.  Will be removed when target descriptions are switched.  */\n+#ifndef GDBSERVER\n+    case ARM_M_TYPE_M_PROFILE:\n+      return tdesc_arm_with_m;\n+\n+    case ARM_M_TYPE_VFP_D16:\n+      return tdesc_arm_with_m_fpa_layout;\n+\n+    case ARM_M_TYPE_WITH_FPA:\n+      return tdesc_arm_with_m_vfp_d16;\n+#endif\n+    default:\n+      error (_(\"Invalid Arm M type: %d\"), m_type);\n+    }\n+}\n+"
    },
    {
      "sha": "58511c7c6b69529e74b842f37327b549c6e028c9",
      "filename": "gdb/arch/arm.h",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arch/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.h?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -19,6 +19,8 @@\n #ifndef ARCH_ARM_H\n #define ARCH_ARM_H\n \n+#include \"gdbsupport/tdesc.h\"\n+\n /* Register numbers of various important registers.  */\n \n enum gdb_regnum {\n@@ -66,6 +68,23 @@ enum arm_breakpoint_kinds\n    ARM_BP_KIND_ARM = 4,\n };\n \n+/* Supported Arm FP hardware types.  */\n+enum arm_fp_type {\n+   ARM_FP_TYPE_NONE = 0,\n+   ARM_FP_TYPE_VFPV2,\n+   ARM_FP_TYPE_VFPV3,\n+   ARM_FP_TYPE_IWMMXT,\n+   ARM_FP_TYPE_INVALID\n+};\n+\n+/* Supported M-profile Arm types.  */\n+enum arm_m_profile_type {\n+   ARM_M_TYPE_M_PROFILE,\n+   ARM_M_TYPE_VFP_D16,\n+   ARM_M_TYPE_WITH_FPA,\n+   ARM_M_TYPE_INVALID\n+};\n+\n /* Instruction condition field values.  */\n #define INST_EQ\t\t0x0\n #define INST_NE\t\t0x1\n@@ -165,4 +184,12 @@ unsigned long shifted_reg_val (struct regcache *regcache,\n \t\t\t       unsigned long pc_val,\n \t\t\t       unsigned long status_reg);\n \n+/* Create an Arm target description with the given FP hardware type.  */\n+\n+target_desc *arm_create_target_description (arm_fp_type fp_type);\n+\n+/* Create an Arm M-profile target description with the given hardware type.  */\n+\n+target_desc *arm_create_mprofile_target_description (arm_m_profile_type m_type);\n+\n #endif /* ARCH_ARM_H */"
    },
    {
      "sha": "6e1af9cda30ed0621f96ed705452283c6c117d27",
      "filename": "gdb/arm-fbsd-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-fbsd-tdep.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -20,6 +20,8 @@\n #include \"defs.h\"\n \n #include \"elf/common.h\"\n+#include \"target-descriptions.h\"\n+#include \"aarch32-tdep.h\"\n #include \"arm-tdep.h\"\n #include \"arm-fbsd-tdep.h\"\n #include \"auxv.h\"\n@@ -178,20 +180,20 @@ arm_fbsd_read_description_auxv (struct target_ops *target)\n   CORE_ADDR arm_hwcap = 0;\n \n   if (target_auxv_search (target, AT_FREEBSD_HWCAP, &arm_hwcap) != 1)\n-    return NULL;\n+    return nullptr;\n \n   if (arm_hwcap & HWCAP_VFP)\n     {\n       if (arm_hwcap & HWCAP_NEON)\n-\treturn tdesc_arm_with_neon;\n+\treturn aarch32_read_description ();\n       else if ((arm_hwcap & (HWCAP_VFPv3 | HWCAP_VFPD32))\n \t  == (HWCAP_VFPv3 | HWCAP_VFPD32))\n-\treturn tdesc_arm_with_vfpv3;\n+\treturn arm_read_description (ARM_FP_TYPE_VFPV3);\n       else\n-\treturn tdesc_arm_with_vfpv2;\n+      return arm_read_description (ARM_FP_TYPE_VFPV2);\n     }\n \n-  return NULL;\n+  return nullptr;\n }\n \n /* Implement the \"core_read_description\" gdbarch method.  */"
    },
    {
      "sha": "6a374bbc74b8d7fd6c89c3bd77f2678cdb23bb26",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -27,6 +27,7 @@\n #include \"observable.h\"\n #include \"gdbthread.h\"\n \n+#include \"aarch32-tdep.h\"\n #include \"arm-tdep.h\"\n #include \"arm-linux-tdep.h\"\n #include \"aarch32-linux-nat.h\"\n@@ -551,7 +552,7 @@ arm_linux_nat_target::read_description ()\n     }\n \n   if (arm_hwcap & HWCAP_IWMMXT)\n-    return tdesc_arm_with_iwmmxt;\n+    return arm_read_description (ARM_FP_TYPE_IWMMXT);\n \n   if (arm_hwcap & HWCAP_VFP)\n     {\n@@ -566,11 +567,11 @@ arm_linux_nat_target::read_description ()\n       /* NEON implies VFPv3-D32 or no-VFP unit.  Say that we only support\n \t Neon with VFPv3-D32.  */\n       if (arm_hwcap & HWCAP_NEON)\n-\treturn tdesc_arm_with_neon;\n+\treturn aarch32_read_description ();\n       else if ((arm_hwcap & (HWCAP_VFPv3 | HWCAP_VFPv3D16)) == HWCAP_VFPv3)\n-\treturn tdesc_arm_with_vfpv3;\n-      else\n-\treturn tdesc_arm_with_vfpv2;\n+\treturn arm_read_description (ARM_FP_TYPE_VFPV3);\n+\n+      return arm_read_description (ARM_FP_TYPE_VFPV2);\n     }\n \n   return this->beneath ()->read_description ();"
    },
    {
      "sha": "aec20877d9d2125fb03493494c416d1e405b8a6f",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -33,6 +33,7 @@\n #include \"auxv.h\"\n #include \"xml-syscall.h\"\n \n+#include \"aarch32-tdep.h\"\n #include \"arch/arm.h\"\n #include \"arch/arm-get-next-pcs.h\"\n #include \"arch/arm-linux.h\"\n@@ -738,14 +739,14 @@ arm_linux_core_read_description (struct gdbarch *gdbarch,\n       /* NEON implies VFPv3-D32 or no-VFP unit.  Say that we only support\n          Neon with VFPv3-D32.  */\n       if (arm_hwcap & HWCAP_NEON)\n-\treturn tdesc_arm_with_neon;\n+\treturn aarch32_read_description ();\n       else if ((arm_hwcap & (HWCAP_VFPv3 | HWCAP_VFPv3D16)) == HWCAP_VFPv3)\n-\treturn tdesc_arm_with_vfpv3;\n-      else\n-\treturn tdesc_arm_with_vfpv2;\n+\treturn arm_read_description (ARM_FP_TYPE_VFPV3);\n+\n+      return arm_read_description (ARM_FP_TYPE_VFPV2);\n     }\n \n-  return NULL;\n+  return nullptr;\n }\n \n "
    },
    {
      "sha": "1b19b72ca1f5233aa2f8af6d8b64b26e45c09a82",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 44,
      "deletions": 4,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -240,6 +240,10 @@ static const char **valid_disassembly_styles;\n /* Disassembly style to use. Default to \"std\" register names.  */\n static const char *disassembly_style;\n \n+/* All possible arm target descriptors.  */\n+static struct target_desc *tdesc_arm_list[ARM_FP_TYPE_INVALID];\n+static struct target_desc *tdesc_arm_mprofile_list[ARM_M_TYPE_INVALID];\n+\n /* This is used to keep the bfd arch_info in sync with the disassembly\n    style.  */\n static void set_disassembly_style_sfunc (const char *, int,\n@@ -8739,7 +8743,6 @@ arm_register_reggroup_p (struct gdbarch *gdbarch, int regnum,\n     return default_register_reggroup_p (gdbarch, regnum, group);\n }\n \n-\f\n /* For backward-compatibility we allow two 'g' packet lengths with\n    the remote protocol depending on whether FPA registers are\n    supplied.  M-profile targets do not have FPA registers, but some\n@@ -8753,21 +8756,26 @@ arm_register_g_packet_guesses (struct gdbarch *gdbarch)\n {\n   if (gdbarch_tdep (gdbarch)->is_m)\n     {\n+      const target_desc *tdesc;\n+\n       /* If we know from the executable this is an M-profile target,\n \t cater for remote targets whose register set layout is the\n \t same as the FPA layout.  */\n+      tdesc = arm_read_mprofile_description (ARM_M_TYPE_WITH_FPA);\n       register_remote_g_packet_guess (gdbarch,\n \t\t\t\t      ARM_CORE_REGS_SIZE + ARM_FP_REGS_SIZE,\n-\t\t\t\t      tdesc_arm_with_m_fpa_layout);\n+\t\t\t\t      tdesc);\n \n       /* The regular M-profile layout.  */\n+      tdesc = arm_read_mprofile_description (ARM_M_TYPE_M_PROFILE);\n       register_remote_g_packet_guess (gdbarch, ARM_CORE_REGS_SIZE,\n-\t\t\t\t      tdesc_arm_with_m);\n+\t\t\t\t      tdesc);\n \n       /* M-profile plus M4F VFP.  */\n+      tdesc = arm_read_mprofile_description (ARM_M_TYPE_VFP_D16);\n       register_remote_g_packet_guess (gdbarch,\n \t\t\t\t      ARM_CORE_REGS_SIZE + ARM_VFP2_REGS_SIZE,\n-\t\t\t\t      tdesc_arm_with_m_vfp_d16);\n+\t\t\t\t      tdesc);\n     }\n \n   /* Otherwise we don't have a useful guess.  */\n@@ -13310,3 +13318,35 @@ arm_process_record (struct gdbarch *gdbarch, struct regcache *regcache,\n \n   return ret;\n }\n+\n+/* See arm-tdep.h.  */\n+\n+const target_desc *\n+arm_read_description (arm_fp_type fp_type)\n+{\n+  struct target_desc *tdesc = tdesc_arm_list[fp_type];\n+\n+  if (tdesc == nullptr)\n+    {\n+      tdesc = arm_create_target_description (fp_type);\n+      tdesc_arm_list[fp_type] = tdesc;\n+    }\n+\n+  return tdesc;\n+}\n+\n+/* See arm-tdep.h.  */\n+\n+const target_desc *\n+arm_read_mprofile_description (arm_m_profile_type m_type)\n+{\n+  struct target_desc *tdesc = tdesc_arm_mprofile_list[m_type];\n+\n+  if (tdesc == nullptr)\n+    {\n+      tdesc = arm_create_mprofile_target_description (m_type);\n+      tdesc_arm_mprofile_list[m_type] = tdesc;\n+    }\n+\n+  return tdesc;\n+}"
    },
    {
      "sha": "6d1a91ca35ef3b6beda5fb0fe3ab7e2ce2d60310",
      "filename": "gdb/arm-tdep.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/arm-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.h?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -281,11 +281,11 @@ extern void\n \t\t\t\t       void *cb_data,\n \t\t\t\t       const struct regcache *regcache);\n \n-/* Target descriptions.  */\n-extern struct target_desc *tdesc_arm_with_m;\n-extern struct target_desc *tdesc_arm_with_iwmmxt;\n-extern struct target_desc *tdesc_arm_with_vfpv2;\n-extern struct target_desc *tdesc_arm_with_vfpv3;\n-extern struct target_desc *tdesc_arm_with_neon;\n+/* Get the correct Arm target description with given FP hardware type.  */\n+const target_desc *arm_read_description (arm_fp_type fp_type);\n+\n+/* Get the correct Arm M-Profile target description with given hardware\n+   type.  */\n+const target_desc *arm_read_mprofile_description (arm_m_profile_type m_type);\n \n #endif /* arm-tdep.h */"
    },
    {
      "sha": "7c0215e89a46d85ec8de883cd6c0b6fc59921872",
      "filename": "gdb/configure.tgt",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d105cce5dd8d6a5218b044fc161ce89c6b245432/gdb/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.tgt?ref=d105cce5dd8d6a5218b044fc161ce89c6b245432",
      "patch": "@@ -48,8 +48,9 @@ amd64_tobjs=\"amd64-tdep.o arch/amd64.o ${x86_tobjs}\"\n \n case \"${targ}\" in\n aarch64*-*-*)\n-\tcpu_obs=\"aarch64-tdep.o arch/aarch64-insn.o arch/aarch64.o \\\n-\t\t ravenscar-thread.o aarch64-ravenscar-thread.o\";;\n+\tcpu_obs=\"aarch32-tdep.o aarch64-tdep.o arch/aarch32.o \\\n+\t\t arch/aarch64-insn.o arch/aarch64.o  ravenscar-thread.o \\\n+\t\t aarch64-ravenscar-thread.o\";;\n \n alpha*-*-*)\n \t# Target: Alpha\n@@ -62,7 +63,8 @@ arc*-*-*)\n \t;;\n \n arm*-*-*)\n-\tcpu_obs=\"arch/arm.o arch/arm-get-next-pcs.o arm-tdep.o\";;\n+\tcpu_obs=\"aarch32-tdep.o arch/aarch32.o arch/arm.o \\\n+\t\t arch/arm-get-next-pcs.o arm-tdep.o\";;\n \n hppa*-*-*)\n \t# Target: HP PA-RISC"
    }
  ]
}