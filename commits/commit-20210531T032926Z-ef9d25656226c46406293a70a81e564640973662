{
  "sha": "ef9d25656226c46406293a70a81e564640973662",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWY5ZDI1NjU2MjI2YzQ2NDA2MjkzYTcwYTgxZTU2NDY0MDk3MzY2Mg==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-05-12T15:26:33Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-05-31T03:29:26Z"
    },
    "message": "RISC-V: PR27566, Do not relax when data segment phase is exp_seg_relro_adjust.\n\n2021-05-31  Nelson Chu  <nelson.chu@sifive.com>\n            Lifang Xia  <lifang_xia@c-sky.com>\n\nThe data segment phase exp_seg_relro_adjust means we are still adjusting the\nrelro segments, so we will get the symbol values which havn't consider the\nrelro.  It is dangerous and we shouldn't do the relaxations at this stage.\nOtherwise, we may get the truncated fails when the relax range crossing the\ndata segment.\n\nOne of the solution is that, we use a pointer to monitor the data segment\nphase while relaxing, to know whether the relro has been handled or not.\nOnce we check the phase is exp_seg_relro_adjust, we should skip this round\nof relaxations, since the incorrect symbol values will affect the correctness\nof relaxations.  I think we probably need to record more information about\ndata segment or alignments in the future, to make sure it is safe to doing\nrelaxations.\n\nFor the two new testcases, relro-relax-lui and relro-relax-pcrel, we get\nthe following truncated errors when using toolchains, which enable relro:\n\n(.text+0x0): relocation truncated to fit: R_RISCV_GPREL_I against symbol `SymbolRodata' defined in .rodata section in test1.o\n\nAfter applying this patch, the truncated errors should be resolved.\nHowever, only linux toolchains support -z relro, so we only test these\ntwo testcases when supporting shared library.\n\nbfd/\n    PR 27566\n    * elfnn-riscv.c (struct riscv_elf_link_hash_table): New integer pointer\n    to monitor the data segment phase.\n    (bfd_elfNN_riscv_set_data_segment_info): New function called by\n    after_allocation, to set the data_segment_phase from expld.dataseg.\n    (_bfd_riscv_relax_section): Don't relax when data_segment_phase is\n    exp_seg_relro_adjust (0x4).\n    * elfxx-riscv.h (bfd_elf32_riscv_set_data_segment_info): New extern.\n    (bfd_elf64_riscv_set_data_segment_info): Likewise.\nld/\n    PR 27566\n    * emultempl/riscvelf.em (after_allocation): Call\n    riscv_set_data_segment_info to set data segment phase before relaxing.\n    * testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.\n    * testsuite/ld-riscv-elf/relro-relax-lui.d: New testcase.\n    * testsuite/ld-riscv-elf/relro-relax-lui.s: Likewise.\n    * testsuite/ld-riscv-elf/relro-relax-pcrel.d: Likewise.\n    * testsuite/ld-riscv-elf/relro-relax-pcrel.s: Likewise.",
    "tree": {
      "sha": "ea9f54191151e9395b01c6938aa0317588b61c76",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea9f54191151e9395b01c6938aa0317588b61c76"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef9d25656226c46406293a70a81e564640973662",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef9d25656226c46406293a70a81e564640973662",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef9d25656226c46406293a70a81e564640973662",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef9d25656226c46406293a70a81e564640973662/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "cc653233da3f9dade8b95be9a7286b95727408d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc653233da3f9dade8b95be9a7286b95727408d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cc653233da3f9dade8b95be9a7286b95727408d6"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 119,
    "deletions": 2
  },
  "files": [
    {
      "sha": "fd9721e7809b8b02f9417dab96d670038ac3bf11",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -1,3 +1,16 @@\n+2021-05-31  Nelson Chu  <nelson.chu@sifive.com>\n+\t    Lifang Xia  <lifang_xia@c-sky.com>\n+\n+\tPR 27566\n+\t* elfnn-riscv.c (struct riscv_elf_link_hash_table): New integer pointer\n+\tto monitor the data segment phase.\n+\t(bfd_elfNN_riscv_set_data_segment_info): New function called by\n+\tafter_allocation, to set the data_segment_phase from expld.dataseg.\n+\t(_bfd_riscv_relax_section): Don't relax when data_segment_phase is\n+\texp_seg_relro_adjust (0x4).\n+\t* elfxx-riscv.h (bfd_elf32_riscv_set_data_segment_info): New extern.\n+\t(bfd_elf64_riscv_set_data_segment_info): Likewise\n+\n 2021-05-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/27905"
    },
    {
      "sha": "eef1e800221ac25a2435b0370b8d03e4cc1d21dd",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -132,6 +132,10 @@ struct riscv_elf_link_hash_table\n \n   /* Re-run the relaxations from relax pass 0 if TRUE.  */\n   bool restart_relax;\n+\n+  /* The data segment phase, don't relax the section\n+     when it is exp_seg_relro_adjust.  */\n+  int *data_segment_phase;\n };\n \n /* Instruction access functions. */\n@@ -4620,6 +4624,17 @@ _bfd_riscv_relax_delete (bfd *abfd,\n   return true;\n }\n \n+/* Called by after_allocation to set the information of data segment\n+   before relaxing.  */\n+\n+void\n+bfd_elfNN_riscv_set_data_segment_info (struct bfd_link_info *info,\n+                                       int *data_segment_phase)\n+{\n+  struct riscv_elf_link_hash_table *htab = riscv_elf_hash_table (info);\n+  htab->data_segment_phase = data_segment_phase;\n+}\n+\n /* Called by after_allocation to check if we need to run the whole\n    relaxations again.  */\n \n@@ -4672,7 +4687,10 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n       || (info->disable_target_specific_optimizations\n \t  && info->relax_pass < 2)\n       || (htab->restart_relax\n-\t  && info->relax_pass == 3))\n+\t  && info->relax_pass == 3)\n+      /* The exp_seg_relro_adjust is enum phase_enum (0x4),\n+\t and defined in ld/ldexp.h.  */\n+      || *(htab->data_segment_phase) == 4)\n     return true;\n \n   riscv_init_pcgp_relocs (&pcgp_relocs);"
    },
    {
      "sha": "6a2501b7be80065e4531b7fd91b3d004d6eb5f00",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -98,6 +98,10 @@ riscv_compare_subsets (const char *, const char *);\n \n extern bool\n bfd_elf32_riscv_restart_relax_sections (struct bfd_link_info *);\n-\n extern bool\n bfd_elf64_riscv_restart_relax_sections (struct bfd_link_info *);\n+\n+extern void\n+bfd_elf32_riscv_set_data_segment_info (struct bfd_link_info *, int *);\n+extern void\n+bfd_elf64_riscv_set_data_segment_info (struct bfd_link_info *, int *);"
    },
    {
      "sha": "2c6615d46c8d667bbd3f31d97787057af22b7a49",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -1,3 +1,15 @@\n+2021-05-31  Nelson Chu  <nelson.chu@sifive.com>\n+\t    Lifang Xia  <lifang_xia@c-sky.com>\n+\n+\tPR 27566\n+\t* emultempl/riscvelf.em (after_allocation): Call\n+\triscv_set_data_segment_info to set data segment phase before relaxing.\n+\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.\n+\t* testsuite/ld-riscv-elf/relro-relax-lui.d: New testcase.\n+\t* testsuite/ld-riscv-elf/relro-relax-lui.s: Likewise.\n+\t* testsuite/ld-riscv-elf/relro-relax-pcrel.d: Likewise.\n+\t* testsuite/ld-riscv-elf/relro-relax-pcrel.s: Likewise.\n+\n 2021-05-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/27905"
    },
    {
      "sha": "c625a631fe52b2bacd5d1f3e0561a1b952abdd57",
      "filename": "ld/emultempl/riscvelf.em",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/emultempl/riscvelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/emultempl/riscvelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/riscvelf.em?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -62,6 +62,20 @@ gld${EMULATION_NAME}_after_allocation (void)\n \t}\n     }\n \n+  /* PR 27566, if the phase of data segment is exp_seg_relro_adjust,\n+     that means we are still adjusting the relro, and shouldn't do the\n+     relaxations at this stage.  Otherwise, we will get the symbol\n+     values beofore handling the relro, and may cause truncated fails\n+     when the relax range crossing the data segment.  One of the solution\n+     is to monitor the data segment phase while relaxing, to know whether\n+     the relro has been handled or not.\n+\n+     I think we probably need to record more information about data\n+     segment or alignments in the future, to make sure it is safe\n+     to doing relaxations.  */\n+  enum phase_enum *phase = &(expld.dataseg.phase);\n+  bfd_elf${ELFSIZE}_riscv_set_data_segment_info (&link_info, (int *) phase);\n+\n   do\n     {\n       ldelf_map_segments (need_layout);"
    },
    {
      "sha": "0b49ddcacf607dcebf8d6deed4766ef65e4d822a",
      "filename": "ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -122,6 +122,9 @@ if [istarget \"riscv*-*-*\"] {\n \treturn\n     }\n \n+    run_dump_test \"relro-relax-lui\"\n+    run_dump_test \"relro-relax-pcrel\"\n+\n     set abis [list rv32gc ilp32 [riscv_choose_ilp32_emul] rv64gc lp64 [riscv_choose_lp64_emul]]\n     foreach { arch abi emul } $abis {\n \t# This checks whether our linker scripts handle __global_pointer$"
    },
    {
      "sha": "d29aa9d5f7a7613164f01814289e1e02d231526c",
      "filename": "ld/testsuite/ld-riscv-elf/relro-relax-lui.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-lui.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-lui.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/relro-relax-lui.d?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -0,0 +1,12 @@\n+#source: relro-relax-lui.s\n+#ld: -zrelro --relax\n+#objdump: -d -Mno-aliases\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+[0-9a-f]+ <_start>:\n+.*:[ \t]+[0-9a-f]+[ \t]+lui[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+.*<SymbolRodata>"
    },
    {
      "sha": "f284187902df7d35578231b4693deba6f03695fe",
      "filename": "ld/testsuite/ld-riscv-elf/relro-relax-lui.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-lui.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-lui.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/relro-relax-lui.s?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -0,0 +1,15 @@\n+\t.section\t.rodata\n+\t.align\t10\n+\t.globl\tSymbolRodata\n+\t.set\tSymbolRodata, . + 0x1800\n+\t.word\t0x0\n+\n+\n+\t.section\t.init_array\n+        .word\t0x0\n+\n+\t.text\n+\t.globl\t_start\n+_start:\n+\tlui\ta0, %hi (SymbolRodata)\n+\taddi\ta0, a0, %lo (SymbolRodata)"
    },
    {
      "sha": "28e11b3236c4d9f74709a297cede2af7f9b2c8c6",
      "filename": "ld/testsuite/ld-riscv-elf/relro-relax-pcrel.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.d?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -0,0 +1,12 @@\n+#source: relro-relax-pcrel.s\n+#ld: -zrelro --relax\n+#objdump: -d -Mno-aliases\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+[0-9a-f]+ <_start>:\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+.*\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+.*<SymbolRodata>"
    },
    {
      "sha": "4a88287bab3b91b2641c1cc3f289a3ed5887b941",
      "filename": "ld/testsuite/ld-riscv-elf/relro-relax-pcrel.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef9d25656226c46406293a70a81e564640973662/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/relro-relax-pcrel.s?ref=ef9d25656226c46406293a70a81e564640973662",
      "patch": "@@ -0,0 +1,14 @@\n+\t.section\t.rodata\n+\t.align\t10\n+\t.globl\tSymbolRodata\n+\t.set\tSymbolRodata, . + 0x1800\n+\t.word\t0x0\n+\n+\n+\t.section\t.init_array\n+        .word\t0x0\n+\n+\t.text\n+\t.globl\t_start\n+_start:\n+\tlla\ta0, SymbolRodata"
    }
  ]
}