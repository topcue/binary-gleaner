{
  "sha": "a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTlmNWE1NTE3ZmI3ZGY2NDBmMGZjZDRjYjBmOTk2MTgxOGI2NTA1Yg==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-03-21T22:08:48Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-03-21T22:16:19Z"
    },
    "message": "RISC-V: Fix linker crash in section symbol check.\n\nsym is only set for local symbols.  h is only set for global symbols.  Gas\nwon't let me create a global section symbol, but bfd appears to have some\nsupport for that, and I can't rule out that other assemblers might do this.\nSo we need to support both, and verify sym and h are non-NULL before using.\n\n\tbfd/\n\tPR 24365\n\t* elfnn-riscv.c (riscv_elf_relocate_section): For STT_SECTION check,\n\tverify sym non-NULL before using.  Add identical check using h.",
    "tree": {
      "sha": "a72de21479b1e52dcf700b652378fd5d04430509",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a72de21479b1e52dcf700b652378fd5d04430509"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "4e5391148d51c58785aad637f1a92d47b91b3ae6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e5391148d51c58785aad637f1a92d47b91b3ae6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e5391148d51c58785aad637f1a92d47b91b3ae6"
    }
  ],
  "stats": {
    "total": 10,
    "additions": 9,
    "deletions": 1
  },
  "files": [
    {
      "sha": "1225e3cad8fef2ddd7d9e5bf4adf6cb37c59bf9c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-21  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR 24365\n+\t* elfnn-riscv.c (riscv_elf_relocate_section): For STT_SECTION check,\n+\tverify sym non-NULL before using.  Add identical check using h.\n+\n 2019-03-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* elf-bfd.h (struct elf_backend_data): Add argument to"
    },
    {
      "sha": "bb114e59c762e3550a7ff5403c775c14ed4cef1c",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9f5a5517fb7df640f0fcd4cb0f9961818b6505b/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=a9f5a5517fb7df640f0fcd4cb0f9961818b6505b",
      "patch": "@@ -2059,7 +2059,9 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t     all relocs to update these addends.  This is also ambiguous, as\n \t     we do allow offsets to be added to the target address, which are\n \t     not to be used to find the auipc address.  */\n-\t  if ((ELF_ST_TYPE (sym->st_info) == STT_SECTION) && rel->r_addend)\n+\t  if (((sym != NULL && (ELF_ST_TYPE (sym->st_info) == STT_SECTION))\n+\t       || (h != NULL && h->type == STT_SECTION))\n+\t      && rel->r_addend)\n \t    {\n \t      r = bfd_reloc_dangerous;\n \t      break;"
    }
  ]
}