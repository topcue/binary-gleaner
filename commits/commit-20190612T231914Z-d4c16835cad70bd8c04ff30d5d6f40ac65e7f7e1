{
  "sha": "d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDRjMTY4MzVjYWQ3MGJkOGMwNGZmMzBkNWQ2ZjQwYWM2NWU3ZjdlMQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:19:14Z"
    },
    "message": "Make \"backtrace\" support -OPT options\n\nThis adds support for comand options to the \"backtrace\" command.  We'll get:\n\n  (gdb) bt -\n  -entry-values         -hide                 -past-main\n  -frame-arguments      -no-filters           -raw-frame-arguments\n  -full                 -past-entry\n\n~~~~\n(gdb) help backtrace\nPrint backtrace of all stack frames, or innermost COUNT frames.\nUsage: backtrace [OPTION]... [QUALIFIER]... [COUNT | -COUNT]\n\nOptions:\n  -entry-values no|only|preferred|if-needed|both|compact|default\n    Set printing of function arguments at function entry\n    GDB can sometimes determine the values of function arguments at entry,\n    in addition to their current values.  This option tells GDB whether\n    to print the current value, the value at entry (marked as val@entry),\n    or both.  Note that one or both of these values may be <optimized out>.\n\n  -frame-arguments all|scalars|none\n    Set printing of non-scalar frame arguments\n\n  -raw-frame-arguments [on|off]\n    Set whether to print frame arguments in raw form.\n    If set, frame arguments are printed in raw form, bypassing any\n    pretty-printers for that value.\n\n  -past-main [on|off]\n    Set whether backtraces should continue past \"main\".\n    Normally the caller of \"main\" is not of interest, so GDB will terminate\n    the backtrace at \"main\".  Set this if you need to see the rest\n    of the stack trace.\n\n  -past-entry [on|off]\n    Set whether backtraces should continue past the entry point of a program.\n    Normally there are no callers beyond the entry point of a program, so GDB\n    will terminate the backtrace there.  Set this if you need to see\n    the rest of the stack trace.\n\n  -full\n    Print values of local variables.\n\n  -no-filters\n    Prohibit frame filters from executing on a backtrace.\n\n  -hide\n    Causes Python frame filter elided frames to not be printed.\n\nFor backward compatibility, the following qualifiers are supported:\n\n   full       - same as -full option.\n   no-filters - same as -no-filters option.\n   hide       - same as -hide.\n\nWith a negative COUNT, print outermost -COUNT frames.\n~~~~\n\nImplementation wise, this:\n\n- Moves relevant options/settings globals to structures.\n- Tweaks a number of functions to pass down references to such structures.\n- Adds option_def structures describing the options/settings.\n- Makes backtrace_command parse the options, with gdb::option::process_options.\n- Tweaks \"backtrace\"'s help to describe the new options.\n- Adds testcases.\n\nNote that backtrace is a PROCESS_OPTIONS_UNKNOWN_IS_OPERAND command,\nbecause of the \"-COUNT\" argument.\n\nThe COUNT/-COUNT argument is currently parsed as an expression.  I\nconsidered whether it would be prudent here to require \"--\", but\nconcluded that the risk of causing a significant breakage here is much\nlower compared to \"print\", since printing the expression is not the\nwhole point of the \"backtrace\" command.  Seems OK to me to require\ntyping \"backtrace -past-main -- -p\" if the user truly wants to refer\nto the negative of a backtrace count stored in an inferior variable\ncalled \"p\".\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* frame.c: Include \"cli/cli-option.h.\n\t(user_set_backtrace_options): New.\n\t(backtrace_past_main, backtrace_past_entry, backtrace_limit):\n\tDelete.\n\t(get_prev_frame): Adjust.\n\t(boolean_option_def, uinteger_option_def)\n\t(set_backtrace_option_defs): New.\n\t(_initialize_frame): Adjust and use\n\tgdb::option::add_setshow_cmds_for_options to install \"set\n\tbacktrace past-main\" and \"set backtrace past-entry\".\n\t* frame.h: Include \"cli/cli-option.h\".\n\t(struct frame_print_options): Forward declare.\n\t(print_frame_arguments_all, print_frame_arguments_scalars)\n\t(print_frame_arguments_none): Declare.\n\t(print_entry_values): Delete declaration.\n\t(struct frame_print_options, user_frame_print_options): New.\n\t(struct set_backtrace_options): New.\n\t(set_backtrace_option_defs, user_set_backtrace_options): Declare.\n\t* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)\n\t(mi_cmd_stack_list_locals, mi_cmd_stack_list_args)\n\t(mi_cmd_stack_list_variables): Pass down USER_FRAME_PRINT_OPTIONS.\n\t(list_args_or_locals): Add frame_print_options parameter.\n\t(mi_cmd_stack_info_frame): Pass down USER_FRAME_PRINT_OPTIONS.\n\t* python/py-framefilter.c (enumerate_args): Pass down\n\tUSER_FRAME_PRINT_OPTIONS.\n\t* stack.c: Include \"cli/cli-option.h\".\n\t(print_frame_arguments_all, print_frame_arguments_scalars)\n\t(print_frame_arguments_none): Declare.\n\t(print_raw_frame_arguments, print_entry_values): Delete.\n\t(user_frame_print_options): New.\n\t(boolean_option_def, enum_option_def, frame_print_option_defs):\n\tNew.\n\t(struct backtrace_cmd_options): New.\n\t(bt_flag_option_def): New.\n\t(backtrace_command_option_defs): New.\n\t(print_stack_frame): Pass down USER_FRAME_PRINT_OPTIONS.\n\t(print_frame_arg, read_frame_arg, print_frame_args)\n\t(print_frame_info, print_frame): Add frame_print_options parameter\n\tand use it.\n\t(info_frame_command_core): Pass down USER_FRAME_PRINT_OPTIONS.\n\t(backtrace_command_1): Add frame_print_options and\n\tbacktrace_cmd_options parameters and use them.\n\t(make_backtrace_options_def_group): New.\n\t(backtrace_command): Process command options with\n\tgdb::option::process_options.\n\t(backtrace_command_completer): New.\n\t(_initialize_stack): Extend \"backtrace\"'s help to mention\n\tsupported options.  Install completer for \"backtrace\".\n\tInstall some settings commands with add_setshow_cmds_for_options.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/options.exp (test-backtrace): New.\n\t(top level): Call it.",
    "tree": {
      "sha": "0d491f710612a66db24b37f8ca5cb25611504c27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d491f710612a66db24b37f8ca5cb25611504c27"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2daf894ed0baf72dd3f422b7a71630145568db30",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2daf894ed0baf72dd3f422b7a71630145568db30",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2daf894ed0baf72dd3f422b7a71630145568db30"
    }
  ],
  "stats": {
    "total": 618,
    "additions": 473,
    "deletions": 145
  },
  "files": [
    {
      "sha": "08621ca805d85633b401d2d647142d747c0aa5e4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -1,3 +1,55 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* frame.c: Include \"cli/cli-option.h.\n+\t(user_set_backtrace_options): New.\n+\t(backtrace_past_main, backtrace_past_entry, backtrace_limit):\n+\tDelete.\n+\t(get_prev_frame): Adjust.\n+\t(boolean_option_def, uinteger_option_def)\n+\t(set_backtrace_option_defs): New.\n+\t(_initialize_frame): Adjust and use\n+\tgdb::option::add_setshow_cmds_for_options to install \"set\n+\tbacktrace past-main\" and \"set backtrace past-entry\".\n+\t* frame.h: Include \"cli/cli-option.h\".\n+\t(struct frame_print_options): Forward declare.\n+\t(print_frame_arguments_all, print_frame_arguments_scalars)\n+\t(print_frame_arguments_none): Declare.\n+\t(print_entry_values): Delete declaration.\n+\t(struct frame_print_options, user_frame_print_options): New.\n+\t(struct set_backtrace_options): New.\n+\t(set_backtrace_option_defs, user_set_backtrace_options): Declare.\n+\t* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)\n+\t(mi_cmd_stack_list_locals, mi_cmd_stack_list_args)\n+\t(mi_cmd_stack_list_variables): Pass down USER_FRAME_PRINT_OPTIONS.\n+\t(list_args_or_locals): Add frame_print_options parameter.\n+\t(mi_cmd_stack_info_frame): Pass down USER_FRAME_PRINT_OPTIONS.\n+\t* python/py-framefilter.c (enumerate_args): Pass down\n+\tUSER_FRAME_PRINT_OPTIONS.\n+\t* stack.c: Include \"cli/cli-option.h\".\n+\t(print_frame_arguments_all, print_frame_arguments_scalars)\n+\t(print_frame_arguments_none): Declare.\n+\t(print_raw_frame_arguments, print_entry_values): Delete.\n+\t(user_frame_print_options): New.\n+\t(boolean_option_def, enum_option_def, frame_print_option_defs):\n+\tNew.\n+\t(struct backtrace_cmd_options): New.\n+\t(bt_flag_option_def): New.\n+\t(backtrace_command_option_defs): New.\n+\t(print_stack_frame): Pass down USER_FRAME_PRINT_OPTIONS.\n+\t(print_frame_arg, read_frame_arg, print_frame_args)\n+\t(print_frame_info, print_frame): Add frame_print_options parameter\n+\tand use it.\n+\t(info_frame_command_core): Pass down USER_FRAME_PRINT_OPTIONS.\n+\t(backtrace_command_1): Add frame_print_options and\n+\tbacktrace_cmd_options parameters and use them.\n+\t(make_backtrace_options_def_group): New.\n+\t(backtrace_command): Process command options with\n+\tgdb::option::process_options.\n+\t(backtrace_command_completer): New.\n+\t(_initialize_stack): Extend \"backtrace\"'s help to mention\n+\tsupported options.  Install completer for \"backtrace\".\n+\tInstall some settings commands with add_setshow_cmds_for_options.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* NEWS (Changed commands): Mention set/show print raw-frame-arguments,"
    },
    {
      "sha": "84e0397db98e07dbfe0b476e33ec7c6c1b17c319",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 50,
      "deletions": 34,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -42,6 +42,7 @@\n #include \"tracepoint.h\"\n #include \"hashtab.h\"\n #include \"valprint.h\"\n+#include \"cli/cli-option.h\"\n \n /* The sentinel frame terminates the innermost end of the frame chain.\n    If unwound, it returns the information needed to construct an\n@@ -52,6 +53,9 @@\n \n static struct frame_info *sentinel_frame;\n \n+/* The values behind the global \"set backtrace ...\" settings.  */\n+set_backtrace_options user_set_backtrace_options;\n+\n static struct frame_info *get_prev_frame_raw (struct frame_info *this_frame);\n static const char *frame_stop_reason_symbol_string (enum unwind_stop_reason reason);\n \n@@ -295,9 +299,8 @@ show_frame_debug (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"Frame debugging is %s.\\n\"), value);\n }\n \n-/* Flag to indicate whether backtraces should stop at main et.al.  */\n+/* Implementation of \"show backtrace past-main\".  */\n \n-static int backtrace_past_main;\n static void\n show_backtrace_past_main (struct ui_file *file, int from_tty,\n \t\t\t  struct cmd_list_element *c, const char *value)\n@@ -308,7 +311,8 @@ show_backtrace_past_main (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-static int backtrace_past_entry;\n+/* Implementation of \"show backtrace past-entry\".  */\n+\n static void\n show_backtrace_past_entry (struct ui_file *file, int from_tty,\n \t\t\t   struct cmd_list_element *c, const char *value)\n@@ -318,7 +322,8 @@ show_backtrace_past_entry (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-static unsigned int backtrace_limit = UINT_MAX;\n+/* Implementation of \"show backtrace limit\".  */\n+\n static void\n show_backtrace_limit (struct ui_file *file, int from_tty,\n \t\t      struct cmd_list_element *c, const char *value)\n@@ -2276,7 +2281,7 @@ get_prev_frame (struct frame_info *this_frame)\n      point inside the main function.  */\n   if (this_frame->level >= 0\n       && get_frame_type (this_frame) == NORMAL_FRAME\n-      && !backtrace_past_main\n+      && !user_set_backtrace_options.backtrace_past_main\n       && frame_pc_p\n       && inside_main_func (this_frame))\n     /* Don't unwind past main().  Note, this is done _before_ the\n@@ -2293,7 +2298,7 @@ get_prev_frame (struct frame_info *this_frame)\n      being 1-based and the level being 0-based, and the other accounts for\n      the level of the new frame instead of the level of the current\n      frame.  */\n-  if (this_frame->level + 2 > backtrace_limit)\n+  if (this_frame->level + 2 > user_set_backtrace_options.backtrace_limit)\n     {\n       frame_debug_got_null_frame (this_frame, \"backtrace limit exceeded\");\n       return NULL;\n@@ -2323,7 +2328,7 @@ get_prev_frame (struct frame_info *this_frame)\n      application.  */\n   if (this_frame->level >= 0\n       && get_frame_type (this_frame) == NORMAL_FRAME\n-      && !backtrace_past_entry\n+      && !user_set_backtrace_options.backtrace_past_entry\n       && frame_pc_p\n       && inside_entry_func (this_frame))\n     {\n@@ -2896,6 +2901,39 @@ show_backtrace_cmd (const char *args, int from_tty)\n   cmd_show_list (show_backtrace_cmdlist, from_tty, \"\");\n }\n \n+/* Definition of the \"set backtrace\" settings that are exposed as\n+   \"backtrace\" command options.  */\n+\n+using boolean_option_def\n+  = gdb::option::boolean_option_def<set_backtrace_options>;\n+using uinteger_option_def\n+  = gdb::option::uinteger_option_def<set_backtrace_options>;\n+\n+const gdb::option::option_def set_backtrace_option_defs[] = {\n+\n+  boolean_option_def {\n+    \"past-main\",\n+    [] (set_backtrace_options *opt) { return &opt->backtrace_past_main; },\n+    show_backtrace_past_main, /* show_cmd_cb */\n+    N_(\"Set whether backtraces should continue past \\\"main\\\".\"),\n+    N_(\"Show whether backtraces should continue past \\\"main\\\".\"),\n+    N_(\"Normally the caller of \\\"main\\\" is not of interest, so GDB will terminate\\n\\\n+the backtrace at \\\"main\\\".  Set this if you need to see the rest\\n\\\n+of the stack trace.\"),\n+  },\n+\n+  boolean_option_def {\n+    \"past-entry\",\n+    [] (set_backtrace_options *opt) { return &opt->backtrace_past_entry; },\n+    show_backtrace_past_entry, /* show_cmd_cb */\n+    N_(\"Set whether backtraces should continue past the entry point of a program.\"),\n+    N_(\"Show whether backtraces should continue past the entry point of a program.\"),\n+    N_(\"Normally there are no callers beyond the entry point of a program, so GDB\\n\\\n+will terminate the backtrace there.  Set this if you need to see\\n\\\n+the rest of the stack trace.\"),\n+  },\n+};\n+\n void\n _initialize_frame (void)\n {\n@@ -2916,34 +2954,8 @@ Show backtrace variables such as the backtrace limit\"),\n \t\t  &show_backtrace_cmdlist, \"show backtrace \",\n \t\t  0/*allow-unknown*/, &showlist);\n \n-  add_setshow_boolean_cmd (\"past-main\", class_obscure,\n-\t\t\t   &backtrace_past_main, _(\"\\\n-Set whether backtraces should continue past \\\"main\\\".\"), _(\"\\\n-Show whether backtraces should continue past \\\"main\\\".\"), _(\"\\\n-Normally the caller of \\\"main\\\" is not of interest, so GDB will terminate\\n\\\n-the backtrace at \\\"main\\\".  Set this variable if you need to see the rest\\n\\\n-of the stack trace.\"),\n-\t\t\t   NULL,\n-\t\t\t   show_backtrace_past_main,\n-\t\t\t   &set_backtrace_cmdlist,\n-\t\t\t   &show_backtrace_cmdlist);\n-\n-  add_setshow_boolean_cmd (\"past-entry\", class_obscure,\n-\t\t\t   &backtrace_past_entry, _(\"\\\n-Set whether backtraces should continue past the entry point of a program.\"),\n-\t\t\t   _(\"\\\n-Show whether backtraces should continue past the entry point of a program.\"),\n-\t\t\t   _(\"\\\n-Normally there are no callers beyond the entry point of a program, so GDB\\n\\\n-will terminate the backtrace there.  Set this variable if you need to see\\n\\\n-the rest of the stack trace.\"),\n-\t\t\t   NULL,\n-\t\t\t   show_backtrace_past_entry,\n-\t\t\t   &set_backtrace_cmdlist,\n-\t\t\t   &show_backtrace_cmdlist);\n-\n   add_setshow_uinteger_cmd (\"limit\", class_obscure,\n-\t\t\t    &backtrace_limit, _(\"\\\n+\t\t\t    &user_set_backtrace_options.backtrace_limit, _(\"\\\n Set an upper bound on the number of backtrace levels.\"), _(\"\\\n Show the upper bound on the number of backtrace levels.\"), _(\"\\\n No more than the specified number of frames can be displayed or examined.\\n\\\n@@ -2953,6 +2965,10 @@ Literal \\\"unlimited\\\" or zero means no limit.\"),\n \t\t\t    &set_backtrace_cmdlist,\n \t\t\t    &show_backtrace_cmdlist);\n \n+  gdb::option::add_setshow_cmds_for_options\n+    (class_stack, &user_set_backtrace_options,\n+     set_backtrace_option_defs, &set_backtrace_cmdlist, &show_backtrace_cmdlist);\n+\n   /* Debug this files internals.  */\n   add_setshow_zuinteger_cmd (\"frame\", class_maintenance, &frame_debug,  _(\"\\\n Set frame debugging.\"), _(\"\\"
    },
    {
      "sha": "a79eeeeab166f3d76f6cba0f0d0ff26d9b3cce2c",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 52,
      "deletions": 3,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -70,6 +70,7 @@\n    */\n \n #include \"language.h\"\n+#include \"cli/cli-option.h\"\n \n struct symtab_and_line;\n struct frame_unwind;\n@@ -78,6 +79,7 @@ struct block;\n struct gdbarch;\n struct ui_file;\n struct ui_out;\n+struct frame_print_options;\n \n /* Status of a given frame's stack.  */\n \n@@ -753,7 +755,8 @@ extern void print_stack_frame (struct frame_info *, int print_level,\n \t\t\t       enum print_what print_what,\n \t\t\t       int set_current_sal);\n \n-extern void print_frame_info (struct frame_info *, int print_level,\n+extern void print_frame_info (const frame_print_options &fp_opts,\n+\t\t\t      struct frame_info *, int print_level,\n \t\t\t      enum print_what print_what, int args,\n \t\t\t      int set_current_sal);\n \n@@ -764,14 +767,35 @@ extern int deprecated_frame_register_read (struct frame_info *frame, int regnum,\n \n /* From stack.c.  */\n \n+/* The possible choices of \"set print frame-arguments\".  */\n+extern const char print_frame_arguments_all[];\n+extern const char print_frame_arguments_scalars[];\n+extern const char print_frame_arguments_none[];\n+\n+/* The possible choices of \"set print entry-values\".  */\n extern const char print_entry_values_no[];\n extern const char print_entry_values_only[];\n extern const char print_entry_values_preferred[];\n extern const char print_entry_values_if_needed[];\n extern const char print_entry_values_both[];\n extern const char print_entry_values_compact[];\n extern const char print_entry_values_default[];\n-extern const char *print_entry_values;\n+\n+/* Data for the frame-printing \"set print\" settings exposed as command\n+   options.  */\n+\n+struct frame_print_options\n+{\n+  const char *print_frame_arguments = print_frame_arguments_scalars;\n+  const char *print_entry_values = print_entry_values_default;\n+\n+  /* If non-zero, don't invoke pretty-printers for frame\n+     arguments.  */\n+  int print_raw_frame_arguments;\n+};\n+\n+/* The values behind the global \"set print ...\" settings.  */\n+extern frame_print_options user_frame_print_options;\n \n /* Inferior function parameter value read in from a frame.  */\n \n@@ -800,7 +824,8 @@ struct frame_arg\n   const char *entry_kind;\n };\n \n-extern void read_frame_arg (struct symbol *sym, struct frame_info *frame,\n+extern void read_frame_arg (const frame_print_options &fp_opts,\n+\t\t\t    symbol *sym, frame_info *frame,\n \t\t\t    struct frame_arg *argp,\n \t\t\t    struct frame_arg *entryargp);\n extern void read_frame_local (struct symbol *sym, struct frame_info *frame,\n@@ -881,4 +906,28 @@ extern struct frame_info *skip_tailcall_frames (struct frame_info *frame);\n \n extern struct frame_info *skip_unwritable_frames (struct frame_info *frame);\n \n+/* Data for the \"set backtrace\" settings.  */\n+\n+struct set_backtrace_options\n+{\n+  /* Flag to indicate whether backtraces should continue past\n+     main.  */\n+  int backtrace_past_main = 0;\n+\n+  /* Flag to indicate whether backtraces should continue past\n+     entry.  */\n+  int backtrace_past_entry = 0;\n+\n+  /* Upper bound on the number of backtrace levels.  Note this is not\n+     exposed as a command option, because \"backtrace\" and \"frame\n+     apply\" already have other means to set a frame count limit.  */\n+  unsigned int backtrace_limit = UINT_MAX;\n+};\n+\n+/* The corresponding option definitions.  */\n+extern const gdb::option::option_def set_backtrace_option_defs[2];\n+\n+/* The values behind the global \"set backtrace ...\" settings.  */\n+extern set_backtrace_options user_set_backtrace_options;\n+\n #endif /* !defined (FRAME_H)  */"
    },
    {
      "sha": "80bc7a1968edd32f494d5ee5667b1b350c8a878b",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -39,7 +39,8 @@\n \n enum what_to_list { locals, arguments, all };\n \n-static void list_args_or_locals (enum what_to_list what,\n+static void list_args_or_locals (const frame_print_options &fp_opts,\n+\t\t\t\t enum what_to_list what,\n \t\t\t\t enum print_values values,\n \t\t\t\t struct frame_info *fi,\n \t\t\t\t int skip_unavailable);\n@@ -175,7 +176,8 @@ mi_cmd_stack_list_frames (const char *command, char **argv, int argc)\n \t  QUIT;\n \t  /* Print the location and the address always, even for level 0.\n \t     If args is 0, don't print the arguments.  */\n-\t  print_frame_info (fi, 1, LOC_AND_ADDRESS, 0 /* args */, 0);\n+\t  print_frame_info (user_frame_print_options,\n+\t\t\t    fi, 1, LOC_AND_ADDRESS, 0 /* args */, 0);\n \t}\n     }\n }\n@@ -275,7 +277,8 @@ mi_cmd_stack_list_locals (const char *command, char **argv, int argc)\n       if \"--no-frame-filters\" has been specified from the command.  */\n    if (! frame_filters || raw_arg  || result == EXT_LANG_BT_NO_FILTERS)\n      {\n-       list_args_or_locals (locals, print_value, frame,\n+       list_args_or_locals (user_frame_print_options,\n+\t\t\t    locals, print_value, frame,\n \t\t\t    skip_unavailable);\n      }\n }\n@@ -389,7 +392,8 @@ mi_cmd_stack_list_args (const char *command, char **argv, int argc)\n \t  QUIT;\n \t  ui_out_emit_tuple tuple_emitter (uiout, \"frame\");\n \t  uiout->field_int (\"level\", i);\n-\t  list_args_or_locals (arguments, print_values, fi, skip_unavailable);\n+\t  list_args_or_locals (user_frame_print_options,\n+\t\t\t       arguments, print_values, fi, skip_unavailable);\n \t}\n     }\n }\n@@ -465,7 +469,8 @@ mi_cmd_stack_list_variables (const char *command, char **argv, int argc)\n       if \"--no-frame-filters\" has been specified from the command.  */\n    if (! frame_filters || raw_arg  || result == EXT_LANG_BT_NO_FILTERS)\n      {\n-       list_args_or_locals (all, print_value, frame,\n+       list_args_or_locals (user_frame_print_options,\n+\t\t\t    all, print_value, frame,\n \t\t\t    skip_unavailable);\n      }\n }\n@@ -557,7 +562,8 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n    are available.  */\n \n static void\n-list_args_or_locals (enum what_to_list what, enum print_values values,\n+list_args_or_locals (const frame_print_options &fp_opts,\n+\t\t     enum what_to_list what, enum print_values values,\n \t\t     struct frame_info *fi, int skip_unavailable)\n {\n   const struct block *block;\n@@ -652,7 +658,7 @@ list_args_or_locals (enum what_to_list what, enum print_values values,\n \t\t    {\n \t\tcase PRINT_ALL_VALUES:\n \t\t  if (SYMBOL_IS_ARGUMENT (sym))\n-\t\t    read_frame_arg (sym2, fi, &arg, &entryarg);\n+\t\t    read_frame_arg (fp_opts, sym2, fi, &arg, &entryarg);\n \t\t  else\n \t\t    read_frame_local (sym2, fi, &arg);\n \t\t    }\n@@ -764,5 +770,6 @@ mi_cmd_stack_info_frame (const char *command, char **argv, int argc)\n   if (argc > 0)\n     error (_(\"-stack-info-frame: No arguments allowed\"));\n \n-  print_frame_info (get_selected_frame (NULL), 1, LOC_AND_ADDRESS, 0, 1);\n+  print_frame_info (user_frame_print_options,\n+\t\t    get_selected_frame (NULL), 1, LOC_AND_ADDRESS, 0, 1);\n }"
    },
    {
      "sha": "95ad410f23fd852c4172786731d1265a9e93dc67",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -481,7 +481,8 @@ enumerate_args (PyObject *iter,\n \t      return EXT_LANG_BT_ERROR;\n \t    }\n \n-\t  read_frame_arg (sym, frame, &arg, &entryarg);\n+\t  read_frame_arg (user_frame_print_options,\n+\t\t\t  sym, frame, &arg, &entryarg);\n \n \t  gdb::unique_xmalloc_ptr<char> arg_holder (arg.error);\n \t  gdb::unique_xmalloc_ptr<char> entry_holder (entryarg.error);"
    },
    {
      "sha": "5e878d3c887e672d6e4b2984d4fa4cebc269b978",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 239,
      "deletions": 97,
      "changes": 336,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -52,16 +52,22 @@\n #include \"extension.h\"\n #include \"observable.h\"\n #include \"common/def-vector.h\"\n+#include \"cli/cli-option.h\"\n \n /* The possible choices of \"set print frame-arguments\", and the value\n    of this setting.  */\n \n-static const char *const print_frame_arguments_choices[] =\n-  {\"all\", \"scalars\", \"none\", NULL};\n-static const char *print_frame_arguments = \"scalars\";\n+const char print_frame_arguments_all[] = \"all\";\n+const char print_frame_arguments_scalars[] = \"scalars\";\n+const char print_frame_arguments_none[] = \"none\";\n \n-/* If non-zero, don't invoke pretty-printers for frame arguments.  */\n-static int print_raw_frame_arguments;\n+static const char *const print_frame_arguments_choices[] =\n+{\n+  print_frame_arguments_all,\n+  print_frame_arguments_scalars,\n+  print_frame_arguments_none,\n+  NULL\n+};\n \n /* The possible choices of \"set print entry-values\", and the value\n    of this setting.  */\n@@ -84,7 +90,85 @@ static const char *const print_entry_values_choices[] =\n   print_entry_values_default,\n   NULL\n };\n-const char *print_entry_values = print_entry_values_default;\n+\n+/* See frame.h.  */\n+frame_print_options user_frame_print_options;\n+\n+/* Option definitions for some frame-related \"set print ...\"\n+   settings.  */\n+\n+using boolean_option_def\n+  = gdb::option::boolean_option_def<frame_print_options>;\n+using enum_option_def\n+  = gdb::option::enum_option_def<frame_print_options>;\n+\n+static const gdb::option::option_def frame_print_option_defs[] = {\n+\n+  enum_option_def {\n+    \"entry-values\",\n+    print_entry_values_choices,\n+    [] (frame_print_options *opt) { return &opt->print_entry_values; },\n+    NULL, /* show_cmd_cb */\n+    N_(\"Set printing of function arguments at function entry\"),\n+    N_(\"Show printing of function arguments at function entry\"),\n+    N_(\"GDB can sometimes determine the values of function arguments at entry,\\n\\\n+in addition to their current values.  This option tells GDB whether\\n\\\n+to print the current value, the value at entry (marked as val@entry),\\n\\\n+or both.  Note that one or both of these values may be <optimized out>.\"),\n+  },\n+\n+  enum_option_def {\n+    \"frame-arguments\",\n+    print_frame_arguments_choices,\n+    [] (frame_print_options *opt) { return &opt->print_frame_arguments; },\n+    NULL, /* show_cmd_cb */\n+    N_(\"Set printing of non-scalar frame arguments\"),\n+    N_(\"Show printing of non-scalar frame arguments\"),\n+    NULL /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"raw-frame-arguments\",\n+    [] (frame_print_options *opt) { return &opt->print_raw_frame_arguments; },\n+    NULL, /* show_cmd_cb */\n+    N_(\"Set whether to print frame arguments in raw form.\"),\n+    N_(\"Show whether to print frame arguments in raw form.\"),\n+    N_(\"If set, frame arguments are printed in raw form, bypassing any\\n\\\n+pretty-printers for that value.\")\n+  },\n+};\n+\n+/* Options for the \"backtrace\" command.  */\n+\n+struct backtrace_cmd_options\n+{\n+  int full = 0;\n+  int no_filters = 0;\n+  int hide = 0;\n+};\n+\n+using bt_flag_option_def\n+  = gdb::option::flag_option_def<backtrace_cmd_options>;\n+\n+static const gdb::option::option_def backtrace_command_option_defs[] = {\n+  bt_flag_option_def {\n+    \"full\",\n+    [] (backtrace_cmd_options *opt) { return &opt->full; },\n+    N_(\"Print values of local variables.\")\n+  },\n+\n+  bt_flag_option_def {\n+    \"no-filters\",\n+    [] (backtrace_cmd_options *opt) { return &opt->no_filters; },\n+    N_(\"Prohibit frame filters from executing on a backtrace.\"),\n+  },\n+\n+  bt_flag_option_def {\n+    \"hide\",\n+    [] (backtrace_cmd_options *opt) { return &opt->hide; },\n+    N_(\"Causes Python frame filter elided frames to not be printed.\"),\n+  },\n+};\n \n /* Prototypes for local functions.  */\n \n@@ -93,7 +177,8 @@ static void print_frame_local_vars (struct frame_info *frame,\n \t\t\t\t    const char *regexp, const char *t_regexp,\n \t\t\t\t    int num_tabs, struct ui_file *stream);\n \n-static void print_frame (struct frame_info *frame, int print_level,\n+static void print_frame (const frame_print_options &opts,\n+\t\t\t frame_info *frame, int print_level,\n \t\t\t enum print_what print_what,  int print_args,\n \t\t\t struct symtab_and_line sal);\n \n@@ -177,7 +262,8 @@ print_stack_frame (struct frame_info *frame, int print_level,\n \n   try\n     {\n-      print_frame_info (frame, print_level, print_what, 1 /* print_args */,\n+      print_frame_info (user_frame_print_options,\n+\t\t\tframe, print_level, print_what, 1 /* print_args */,\n \t\t\tset_current_sal);\n       if (set_current_sal)\n \tset_current_sal_from_frame (frame);\n@@ -225,7 +311,8 @@ print_frame_nameless_args (struct frame_info *frame, long start, int num,\n    iff it should not be printed accoring to user settings.  */\n \n static void\n-print_frame_arg (const struct frame_arg *arg)\n+print_frame_arg (const frame_print_options &fp_opts,\n+\t\t const struct frame_arg *arg)\n {\n   struct ui_out *uiout = current_uiout;\n \n@@ -269,7 +356,7 @@ print_frame_arg (const struct frame_arg *arg)\n \t  try\n \t    {\n \t      const struct language_defn *language;\n-\t      struct value_print_options opts;\n+\t      struct value_print_options vp_opts;\n \n \t      /* Avoid value_print because it will deref ref parameters.  We\n \t\t just want to print their addresses.  Print ??? for args whose\n@@ -286,14 +373,15 @@ print_frame_arg (const struct frame_arg *arg)\n \t      else\n \t\tlanguage = current_language;\n \n-\t      get_no_prettyformat_print_options (&opts);\n-\t      opts.deref_ref = 1;\n-\t      opts.raw = print_raw_frame_arguments;\n+\t      get_no_prettyformat_print_options (&vp_opts);\n+\t      vp_opts.deref_ref = 1;\n+\t      vp_opts.raw = fp_opts.print_raw_frame_arguments;\n \n \t      /* True in \"summary\" mode, false otherwise.  */\n-\t      opts.summary = !strcmp (print_frame_arguments, \"scalars\");\n+\t      vp_opts.summary\n+\t\t= fp_opts.print_frame_arguments == print_frame_arguments_scalars;\n \n-\t      common_val_print (arg->val, &stb, 2, &opts, language);\n+\t      common_val_print (arg->val, &stb, 2, &vp_opts, language);\n \t    }\n \t  catch (const gdb_exception_error &except)\n \t    {\n@@ -333,15 +421,16 @@ read_frame_local (struct symbol *sym, struct frame_info *frame,\n    exception.  */\n \n void\n-read_frame_arg (struct symbol *sym, struct frame_info *frame,\n+read_frame_arg (const frame_print_options &fp_opts,\n+\t\tsymbol *sym, frame_info *frame,\n \t        struct frame_arg *argp, struct frame_arg *entryargp)\n {\n   struct value *val = NULL, *entryval = NULL;\n   char *val_error = NULL, *entryval_error = NULL;\n   int val_equal = 0;\n \n-  if (print_entry_values != print_entry_values_only\n-      && print_entry_values != print_entry_values_preferred)\n+  if (fp_opts.print_entry_values != print_entry_values_only\n+      && fp_opts.print_entry_values != print_entry_values_preferred)\n     {\n       try\n \t{\n@@ -356,8 +445,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \n   if (SYMBOL_COMPUTED_OPS (sym) != NULL\n       && SYMBOL_COMPUTED_OPS (sym)->read_variable_at_entry != NULL\n-      && print_entry_values != print_entry_values_no\n-      && (print_entry_values != print_entry_values_if_needed\n+      && fp_opts.print_entry_values != print_entry_values_no\n+      && (fp_opts.print_entry_values != print_entry_values_if_needed\n \t  || !val || value_optimized_out (val)))\n     {\n       try\n@@ -379,8 +468,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n       if (entryval != NULL && value_optimized_out (entryval))\n \tentryval = NULL;\n \n-      if (print_entry_values == print_entry_values_compact\n-\t  || print_entry_values == print_entry_values_default)\n+      if (fp_opts.print_entry_values == print_entry_values_compact\n+\t  || fp_opts.print_entry_values == print_entry_values_default)\n \t{\n \t  /* For MI do not try to use print_entry_values_compact for ARGP.  */\n \n@@ -463,7 +552,7 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \n   if (entryval == NULL)\n     {\n-      if (print_entry_values == print_entry_values_preferred)\n+      if (fp_opts.print_entry_values == print_entry_values_preferred)\n \t{\n \t  gdb_assert (val == NULL);\n \n@@ -477,18 +566,18 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n \t      strcpy (val_error, except.what ());\n \t    }\n \t}\n-      if (print_entry_values == print_entry_values_only\n-\t  || print_entry_values == print_entry_values_both\n-\t  || (print_entry_values == print_entry_values_preferred\n+      if (fp_opts.print_entry_values == print_entry_values_only\n+\t  || fp_opts.print_entry_values == print_entry_values_both\n+\t  || (fp_opts.print_entry_values == print_entry_values_preferred\n \t      && (!val || value_optimized_out (val))))\n \t{\n \t  entryval = allocate_optimized_out_value (SYMBOL_TYPE (sym));\n \t  entryval_error = NULL;\n \t}\n     }\n-  if ((print_entry_values == print_entry_values_compact\n-       || print_entry_values == print_entry_values_if_needed\n-       || print_entry_values == print_entry_values_preferred)\n+  if ((fp_opts.print_entry_values == print_entry_values_compact\n+       || fp_opts.print_entry_values == print_entry_values_if_needed\n+       || fp_opts.print_entry_values == print_entry_values_preferred)\n       && (!val || value_optimized_out (val)) && entryval != NULL)\n     {\n       val = NULL;\n@@ -500,8 +589,9 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n   argp->error = val_error ? xstrdup (val_error) : NULL;\n   if (!val && !val_error)\n     argp->entry_kind = print_entry_values_only;\n-  else if ((print_entry_values == print_entry_values_compact\n-\t   || print_entry_values == print_entry_values_default) && val_equal)\n+  else if ((fp_opts.print_entry_values == print_entry_values_compact\n+\t   || fp_opts.print_entry_values == print_entry_values_default)\n+\t   && val_equal)\n     {\n       argp->entry_kind = print_entry_values_compact;\n       gdb_assert (!current_uiout->is_mi_like_p ());\n@@ -528,7 +618,8 @@ read_frame_arg (struct symbol *sym, struct frame_info *frame,\n    ints of arguments according to the stack frame\".  */\n \n static void\n-print_frame_args (struct symbol *func, struct frame_info *frame,\n+print_frame_args (const frame_print_options &fp_opts,\n+\t\t  struct symbol *func, struct frame_info *frame,\n \t\t  int num, struct ui_file *stream)\n {\n   struct ui_out *uiout = current_uiout;\n@@ -540,7 +631,8 @@ print_frame_args (struct symbol *func, struct frame_info *frame,\n   /* Number of ints of arguments that we have printed so far.  */\n   int args_printed = 0;\n   /* True if we should print arguments, false otherwise.  */\n-  int print_args = strcmp (print_frame_arguments, \"none\");\n+  bool print_args\n+    = fp_opts.print_frame_arguments != print_frame_arguments_none;\n \n   if (func)\n     {\n@@ -674,10 +766,10 @@ print_frame_args (struct symbol *func, struct frame_info *frame,\n \t      entryarg.entry_kind = print_entry_values_no;\n \t    }\n \t  else\n-\t    read_frame_arg (sym, frame, &arg, &entryarg);\n+\t    read_frame_arg (fp_opts, sym, frame, &arg, &entryarg);\n \n \t  if (arg.entry_kind != print_entry_values_only)\n-\t    print_frame_arg (&arg);\n+\t    print_frame_arg (fp_opts, &arg);\n \n \t  if (entryarg.entry_kind != print_entry_values_no)\n \t    {\n@@ -687,7 +779,7 @@ print_frame_args (struct symbol *func, struct frame_info *frame,\n \t\t  uiout->wrap_hint (\"    \");\n \t\t}\n \n-\t      print_frame_arg (&entryarg);\n+\t      print_frame_arg (fp_opts, &entryarg);\n \t    }\n \n \t  xfree (arg.error);\n@@ -778,7 +870,8 @@ do_gdb_disassembly (struct gdbarch *gdbarch,\n    messages.  */\n \n void\n-print_frame_info (struct frame_info *frame, int print_level,\n+print_frame_info (const frame_print_options &fp_opts,\n+\t\t  frame_info *frame, int print_level,\n \t\t  enum print_what print_what, int print_args,\n \t\t  int set_current_sal)\n {\n@@ -855,7 +948,7 @@ print_frame_info (struct frame_info *frame, int print_level,\n \t\t    || print_what == SRC_AND_LOC);\n \n   if (location_print || !sal.symtab)\n-    print_frame (frame, print_level, print_what, print_args, sal);\n+    print_frame (fp_opts, frame, print_level, print_what, print_args, sal);\n \n   source_print = (print_what == SRC_LINE || print_what == SRC_AND_LOC);\n \n@@ -1128,7 +1221,8 @@ find_frame_funname (struct frame_info *frame, enum language *funlang,\n }\n \n static void\n-print_frame (struct frame_info *frame, int print_level,\n+print_frame (const frame_print_options &fp_opts,\n+\t     frame_info *frame, int print_level,\n \t     enum print_what print_what, int print_args,\n \t     struct symtab_and_line sal)\n {\n@@ -1198,7 +1292,7 @@ print_frame (struct frame_info *frame, int print_level,\n \t  ui_out_emit_list list_emitter (uiout, \"args\");\n \t  try\n \t    {\n-\t      print_frame_args (func, frame, numargs, gdb_stdout);\n+\t      print_frame_args (fp_opts, func, frame, numargs, gdb_stdout);\n \t    }\n \t  catch (const gdb_exception_error &e)\n \t    {\n@@ -1477,7 +1571,8 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t    else\n \t      printf_filtered (\" %d args: \", numargs);\n \t  }\n-\tprint_frame_args (func, fi, numargs, gdb_stdout);\n+\tprint_frame_args (user_frame_print_options,\n+\t\t\t  func, fi, numargs, gdb_stdout);\n \tputs_filtered (\"\\n\");\n       }\n   }\n@@ -1791,8 +1886,10 @@ static frame_command_helper <select_frame_command_core> select_frame_cmd;\n    frames.  */\n \n static void\n-backtrace_command_1 (const char *count_exp, frame_filter_flags flags,\n-\t\t     int no_filters, int from_tty)\n+backtrace_command_1 (const frame_print_options &fp_opts,\n+\t\t     const backtrace_cmd_options &bt_opts,\n+\t\t     const char *count_exp, int from_tty)\n+\n {\n   struct frame_info *fi;\n   int count;\n@@ -1821,17 +1918,24 @@ backtrace_command_1 (const char *count_exp, frame_filter_flags flags,\n       count = -1;\n     }\n \n-  if (! no_filters)\n+  frame_filter_flags flags = 0;\n+\n+  if (bt_opts.full)\n+    flags |= PRINT_LOCALS;\n+  if (bt_opts.hide)\n+    flags |= PRINT_HIDE;\n+\n+  if (!bt_opts.no_filters)\n     {\n       enum ext_lang_frame_args arg_type;\n \n       flags |= PRINT_LEVEL | PRINT_FRAME_INFO | PRINT_ARGS;\n       if (from_tty)\n \tflags |= PRINT_MORE_FRAMES;\n \n-      if (!strcmp (print_frame_arguments, \"scalars\"))\n+      if (fp_opts.print_frame_arguments == print_frame_arguments_scalars)\n \targ_type = CLI_SCALAR_VALUES;\n-      else if (!strcmp (print_frame_arguments, \"all\"))\n+      else if (fp_opts.print_frame_arguments == print_frame_arguments_all)\n \targ_type = CLI_ALL_VALUES;\n       else\n \targ_type = NO_VALUES;\n@@ -1842,8 +1946,8 @@ backtrace_command_1 (const char *count_exp, frame_filter_flags flags,\n     }\n \n   /* Run the inbuilt backtrace if there are no filters registered, or\n-     \"no-filters\" has been specified from the command.  */\n-  if (no_filters ||  result == EXT_LANG_BT_NO_FILTERS)\n+     \"-no-filters\" has been specified from the command.  */\n+  if (bt_opts.no_filters || result == EXT_LANG_BT_NO_FILTERS)\n     {\n       struct frame_info *trailing;\n \n@@ -1869,7 +1973,7 @@ backtrace_command_1 (const char *count_exp, frame_filter_flags flags,\n \t     hand, perhaps the code does or could be fixed to make sure\n \t     the frame->prev field gets set to NULL in that case).  */\n \n-\t  print_frame_info (fi, 1, LOCATION, 1, 0);\n+\t  print_frame_info (fp_opts, fi, 1, LOCATION, 1, 0);\n \t  if ((flags & PRINT_LOCALS) != 0)\n \t    {\n \t      struct frame_id frame_id = get_frame_id (fi);\n@@ -1908,17 +2012,38 @@ backtrace_command_1 (const char *count_exp, frame_filter_flags flags,\n     }\n }\n \n+/* Create an option_def_group array grouping all the \"backtrace\"\n+   options, with FP_OPTS, BT_CMD_OPT, SET_BT_OPTS as contexts.  */\n+\n+static inline std::array<gdb::option::option_def_group, 3>\n+make_backtrace_options_def_group (frame_print_options *fp_opts,\n+\t\t\t\t  backtrace_cmd_options *bt_cmd_opts,\n+\t\t\t\t  set_backtrace_options *set_bt_opts)\n+{\n+  return {{\n+    { {frame_print_option_defs}, fp_opts },\n+    { {set_backtrace_option_defs}, set_bt_opts },\n+    { {backtrace_command_option_defs}, bt_cmd_opts }\n+  }};\n+}\n+\n static void\n backtrace_command (const char *arg, int from_tty)\n {\n-  bool filters = true;\n-  frame_filter_flags flags = 0;\n+  frame_print_options fp_opts = user_frame_print_options;\n+  backtrace_cmd_options bt_cmd_opts;\n+  set_backtrace_options set_bt_opts = user_set_backtrace_options;\n \n-  if (arg)\n-    {\n-      bool done = false;\n+  auto grp\n+    = make_backtrace_options_def_group (&fp_opts, &bt_cmd_opts, &set_bt_opts);\n+  gdb::option::process_options\n+    (&arg, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, grp);\n \n-      while (!done)\n+  /* Parse non-'-'-prefixed qualifiers, for backwards\n+     compatibility.  */\n+  if (arg != NULL)\n+    {\n+      while (true)\n \t{\n \t  const char *save_arg = arg;\n \t  std::string this_arg = extract_arg (&arg);\n@@ -1927,24 +2052,46 @@ backtrace_command (const char *arg, int from_tty)\n \t    break;\n \n \t  if (subset_compare (this_arg.c_str (), \"no-filters\"))\n-\t    filters = false;\n+\t    bt_cmd_opts.no_filters = true;\n \t  else if (subset_compare (this_arg.c_str (), \"full\"))\n-\t    flags |= PRINT_LOCALS;\n+\t    bt_cmd_opts.full = true;\n \t  else if (subset_compare (this_arg.c_str (), \"hide\"))\n-\t    flags |= PRINT_HIDE;\n+\t    bt_cmd_opts.hide = true;\n \t  else\n \t    {\n \t      /* Not a recognized argument, so stop.  */\n \t      arg = save_arg;\n-\t      done = true;\n+\t      break;\n \t    }\n \t}\n \n       if (*arg == '\\0')\n \targ = NULL;\n     }\n \n-  backtrace_command_1 (arg, flags, !filters /* no frame-filters */, from_tty);\n+  /* These options are handled quite deep in the unwind machinery, so\n+     we get to pass them down by swapping globals.  */\n+  scoped_restore restore_set_backtrace_options\n+    = make_scoped_restore (&user_set_backtrace_options, set_bt_opts);\n+\n+  backtrace_command_1 (fp_opts, bt_cmd_opts, arg, from_tty);\n+}\n+\n+/* Completer for the \"backtrace\" command.  */\n+\n+static void\n+backtrace_command_completer (struct cmd_list_element *ignore,\n+\t\t\t     completion_tracker &tracker,\n+\t\t\t     const char *text, const char */*word*/)\n+{\n+  const auto group\n+    = make_backtrace_options_def_group (nullptr, nullptr, nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group))\n+    return;\n+\n+  const char *word = advance_to_expression_complete_word_point (tracker, text);\n+  expression_completer (ignore, tracker, text, word);\n }\n \n /* Iterate over the local variables of a block B, calling CB with\n@@ -3030,13 +3177,30 @@ Usage: select-frame level LEVEL\"),\n \t\t\t &select_frame_cmd_list,\n \t\t\t &cli_suppress_notification.user_selected_context);\n \n-  add_com (\"backtrace\", class_stack, backtrace_command, _(\"\\\n+  const auto backtrace_opts\n+    = make_backtrace_options_def_group (nullptr, nullptr, nullptr);\n+\n+  static std::string backtrace_help\n+    = gdb::option::build_help (N_(\"\\\n Print backtrace of all stack frames, or innermost COUNT frames.\\n\\\n-Usage: backtrace [QUALIFIERS]... [COUNT]\\n\\\n-With a negative argument, print outermost -COUNT frames.\\n\\\n-Use of the 'full' qualifier also prints the values of the local variables.\\n\\\n-Use of the 'no-filters' qualifier prohibits frame filters from executing\\n\\\n-on this backtrace.\"));\n+Usage: backtrace [OPTION]... [QUALIFIER]... [COUNT | -COUNT]\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\\n+For backward compatibility, the following qualifiers are supported:\\n\\\n+\\n\\\n+   full       - same as -full option.\\n\\\n+   no-filters - same as -no-filters option.\\n\\\n+   hide       - same as -hide.\\n\\\n+\\n\\\n+With a negative COUNT, print outermost -COUNT frames.\"),\n+\t\t\t       backtrace_opts);\n+\n+  cmd_list_element *c = add_com (\"backtrace\", class_stack,\n+\t\t\t\t backtrace_command,\n+\t\t\t\t backtrace_help.c_str ());\n+  set_cmd_completer_handle_brkchars (c, backtrace_command_completer);\n+\n   add_com_alias (\"bt\", \"backtrace\", class_stack, 0);\n \n   add_com_alias (\"where\", \"backtrace\", class_alias, 0);\n@@ -3100,33 +3264,20 @@ Prints the argument variables of the current stack frame.\\n\"),\n Select the stack frame that contains NAME.\\n\\\n Usage: func NAME\"));\n \n-  add_setshow_enum_cmd (\"frame-arguments\", class_stack,\n-\t\t\tprint_frame_arguments_choices, &print_frame_arguments,\n-\t\t\t_(\"Set printing of non-scalar frame arguments\"),\n-\t\t\t_(\"Show printing of non-scalar frame arguments\"),\n-\t\t\tNULL, NULL, NULL, &setprintlist, &showprintlist);\n-\n   /* Install \"set print raw frame-arguments\", a deprecated spelling of\n      \"set print raw-frame-arguments\".  */\n-  cmd = add_setshow_boolean_cmd (\"frame-arguments\", no_class,\n-\t\t\t\t &print_raw_frame_arguments, _(\"\\\n+  cmd = add_setshow_boolean_cmd\n+    (\"frame-arguments\", no_class,\n+     &user_frame_print_options.print_raw_frame_arguments,\n+     _(\"\\\n Set whether to print frame arguments in raw form.\"), _(\"\\\n Show whether to print frame arguments in raw form.\"), _(\"\\\n If set, frame arguments are printed in raw form, bypassing any\\n\\\n pretty-printers for that value.\"),\n-\t\t\t\t NULL, NULL,\n-\t\t\t\t &setprintrawlist, &showprintrawlist);\n+     NULL, NULL,\n+     &setprintrawlist, &showprintrawlist);\n   deprecate_cmd (cmd, \"set print raw-frame-arguments\");\n \n-  add_setshow_boolean_cmd (\"raw-frame-arguments\", no_class,\n-\t\t\t   &print_raw_frame_arguments, _(\"\\\n-Set whether to print frame arguments in raw form.\"), _(\"\\\n-Show whether to print frame arguments in raw form.\"), _(\"\\\n-If set, frame arguments are printed in raw form, bypassing any\\n\\\n-pretty-printers for that value.\"),\n-\t\t\t   NULL, NULL,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n   add_setshow_auto_boolean_cmd (\"disassemble-next-line\", class_stack,\n \t\t\t        &disassemble_next_line, _(\"\\\n Set whether to disassemble next source line or insn when execution stops.\"),\n@@ -3147,16 +3298,7 @@ source line.\"),\n \t\t\t        &setlist, &showlist);\n   disassemble_next_line = AUTO_BOOLEAN_FALSE;\n \n-  add_setshow_enum_cmd (\"entry-values\", class_stack,\n-\t\t\tprint_entry_values_choices, &print_entry_values,\n-\t\t\t_(\"Set printing of function arguments at function \"\n-\t\t\t  \"entry\"),\n-\t\t\t_(\"Show printing of function arguments at function \"\n-\t\t\t  \"entry\"),\n-\t\t\t_(\"\\\n-GDB can sometimes determine the values of function arguments at entry,\\n\\\n-in addition to their current values.  This option tells GDB whether\\n\\\n-to print the current value, the value at entry (marked as val@entry),\\n\\\n-or both.  Note that one or both of these values may be <optimized out>.\"),\n-\t\t\tNULL, NULL, &setprintlist, &showprintlist);\n+  gdb::option::add_setshow_cmds_for_options\n+    (class_stack, &user_frame_print_options,\n+     frame_print_option_defs, &setprintlist, &showprintlist);\n }"
    },
    {
      "sha": "4485f29f1b0b7dfb21db744d1bd13e53fbedf2ba",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/options.exp (test-backtrace): New.\n+\t(top level): Call it.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.guile/scm-frame-args.exp: Use \"set print"
    },
    {
      "sha": "17573460b4d4480370f54066a64da1f977785aaf",
      "filename": "gdb/testsuite/gdb.base/options.exp",
      "status": "modified",
      "additions": 58,
      "deletions": 2,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/testsuite/gdb.base/options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1/gdb/testsuite/gdb.base/options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/options.exp?ref=d4c16835cad70bd8c04ff30d5d6f40ac65e7f7e1",
      "patch": "@@ -20,8 +20,11 @@\n # The test uses the \"maintenance test-options\" subcommands to exercise\n # TAB-completion and option processing.\n #\n-# It also tests option integration in various commands, including\n-# \"print\" and \"compile print\".\n+# It also tests option integration in various commands, including:\n+#\n+#  - print\n+#  - compile print\n+#  - backtrace\n \n load_lib completion-support.exp\n \n@@ -231,6 +234,56 @@ proc_with_prefix test-print {{prefix \"\"}} {\n \t\"Left operand of assignment is not an lvalue\\\\.\"\n }\n \n+# Basic option-machinery + \"backtrace\" command integration tests.\n+proc_with_prefix test-backtrace {} {\n+    clean_restart\n+\n+    test_gdb_complete_unique \"backtrace\" \"backtrace\"\n+    test_gdb_complete_none \"backtrace \"\n+\n+    gdb_test \"backtrace -\" \"Ambiguous option at: -\"\n+    gdb_test \"backtrace --\" \"No stack\\\\.\"\n+    gdb_test \"backtrace -- -\" \"No stack\\\\.\"\n+\n+    test_gdb_complete_multiple \"backtrace \" \"-\" \"\" {\n+\t\"-entry-values\"\n+\t\"-frame-arguments\"\n+\t\"-full\"\n+\t\"-hide\"\n+\t\"-no-filters\"\n+\t\"-past-entry\"\n+\t\"-past-main\"\n+\t\"-raw-frame-arguments\"\n+    }\n+\n+    global binfile\n+    clean_restart $binfile\n+\n+    if ![runto_main] {\n+\tfail \"cannot run to main\"\n+\treturn\n+    }\n+\n+    # COUNT in \"backtrace COUNT\" is parsed as an expression.  Check\n+    # that we complete expressions.\n+\n+    test_gdb_complete_unique \\\n+\t\"backtrace xxx\" \\\n+\t\"backtrace xxx1\"\n+\n+    test_gdb_complete_unique \\\n+\t\"backtrace -xxx\" \\\n+\t\"backtrace -xxx1\"\n+\n+    test_gdb_complete_unique \\\n+\t\"backtrace 1 + xxx\" \\\n+\t\"backtrace 1 + xxx1\"\n+\n+    test_gdb_complete_unique \\\n+\t\"backtrace (1 + xxx\" \\\n+\t\"backtrace (1 + xxx1\"\n+}\n+\n # Miscellaneous tests.\n proc_with_prefix test-misc {variant} {\n     global all_options\n@@ -674,3 +727,6 @@ test-print \"\"\n if ![skip_compile_feature_tests] {\n     test-print \"compile \"\n }\n+\n+# Basic \"backtrace\" integration tests.\n+test-backtrace"
    }
  ]
}