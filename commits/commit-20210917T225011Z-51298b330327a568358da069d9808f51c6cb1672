{
  "sha": "51298b330327a568358da069d9808f51c6cb1672",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTEyOThiMzMwMzI3YTU2ODM1OGRhMDY5ZDk4MDhmNTFjNmNiMTY3Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-16T23:38:15Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-17T22:50:11Z"
    },
    "message": "PR28149, debug info with wrong file association\n\ngcc-11 and gcc-12 pass -gdwarf-5 to gas, in order to prime gas for\nDWARF 5 level debug info.  Unfortunately it seems there are cases\nwhere the compiler does not emit a .file or .loc dwarf debug directive\nbefore any machine instructions.  (Note that the .file directive\ntypically emitted as the first line of assembly output doesn't count as\na dwarf debug directive.  The dwarf .file has a file number before the\nfile name string.)\n\nThis patch delays allocation of file numbers for gas generated line\ndebug info until the end of assembly, thus avoiding any clashes with\ncompiler generated file numbers.  Two fixes for test case source are\nnecessary;  A .loc can't use a file number that hasn't already been\nspecified with .file.\n\nA followup patch will remove all the gas generated line info on\nseeing a .file directive.\n\n\tPR 28149\n\t* dwarf2dbg.c (num_of_auto_assigned): Delete.\n\t(current): Update initialisation.\n\t(set_or_check_view): Replace all accesses to view with u.view.\n\t(dwarf2_consume_line_info): Likewise.\n\t(dwarf2_directive_loc): Likewise.  Assert that we aren't generating\n\tline info.\n\t(dwarf2_gen_line_info_1): Don't call set_or_check_view on\n\tgas generated line entries.\n\t(dwarf2_gen_line_info): Set and track filenames for gas generated\n\tline entries.  Simplify generation of labels.\n\t(get_directory_table_entry): Use filename_cmp when comparing dirs.\n\t(do_allocate_filenum): New function.\n\t(dwarf2_where): Set u.filename and filenum to -1 for gas generated\n\tline entries.\n\t(dwarf2_directive_filename): Remove num_of_auto_assigned handling.\n\t(process_entries): Update view field access.  Call\n\tdo_allocate_filenum.\n\t* dwarf2dbg.h (struct dwarf2_line_info): Add filename field in\n\tunion aliasing view.\n\t* testsuite/gas/i386/dwarf2-line-3.s: Add .file directive.\n\t* testsuite/gas/i386/dwarf2-line-4.s: Likewise.\n\t* testsuite/gas/i386/dwarf2-line-4.d: Update expected output.\n\t* testsuite/gas/i386/dwarf4-line-1.d: Likewise.\n\t* testsuite/gas/i386/dwarf5-line-1.d: Likewise.\n\t* testsuite/gas/i386/dwarf5-line-2.d: Likewise.",
    "tree": {
      "sha": "b908c032df61054658e5a47a4479346f0a0c159f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b908c032df61054658e5a47a4479346f0a0c159f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/51298b330327a568358da069d9808f51c6cb1672",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51298b330327a568358da069d9808f51c6cb1672",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/51298b330327a568358da069d9808f51c6cb1672",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51298b330327a568358da069d9808f51c6cb1672/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5cdb4f14426a99ec8fcba843fa503efdc55fa078",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cdb4f14426a99ec8fcba843fa503efdc55fa078",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5cdb4f14426a99ec8fcba843fa503efdc55fa078"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 105,
    "deletions": 72
  },
  "files": [
    {
      "sha": "c6303ba94a66e9d15a017eb02fb9199b8c0b0011",
      "filename": "gas/dwarf2dbg.c",
      "status": "modified",
      "additions": 85,
      "deletions": 67,
      "changes": 152,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/dwarf2dbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/dwarf2dbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dwarf2dbg.c?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -207,7 +207,6 @@ struct file_entry\n static struct file_entry *files;\n static unsigned int files_in_use;\n static unsigned int files_allocated;\n-static unsigned int num_of_auto_assigned;\n \n /* Table of directories used by .debug_line.  */\n static char **       dirs = NULL;\n@@ -233,7 +232,7 @@ static struct dwarf2_line_info current =\n {\n   1, 1, 0, 0,\n   DWARF2_LINE_DEFAULT_IS_STMT ? DWARF2_FLAG_IS_STMT : 0,\n-  0, NULL\n+  0, { NULL }\n };\n \n /* This symbol is used to recognize view number forced resets in loc\n@@ -342,7 +341,7 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n   /* First, compute !(E->label > P->label), to tell whether or not\n      we're to reset the view number.  If we can't resolve it to a\n      constant, keep it symbolic.  */\n-  if (!p || (e->loc.view == force_reset_view && force_reset_view))\n+  if (!p || (e->loc.u.view == force_reset_view && force_reset_view))\n     {\n       viewx.X_op = O_constant;\n       viewx.X_add_number = 0;\n@@ -367,9 +366,9 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n \t}\n     }\n \n-  if (S_IS_DEFINED (e->loc.view) && symbol_constant_p (e->loc.view))\n+  if (S_IS_DEFINED (e->loc.u.view) && symbol_constant_p (e->loc.u.view))\n     {\n-      expressionS *value = symbol_get_value_expression (e->loc.view);\n+      expressionS *value = symbol_get_value_expression (e->loc.u.view);\n       /* We can't compare the view numbers at this point, because in\n \t VIEWX we've only determined whether we're to reset it so\n \t far.  */\n@@ -404,16 +403,16 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n     {\n       expressionS incv;\n \n-      if (!p->loc.view)\n+      if (!p->loc.u.view)\n \t{\n-\t  p->loc.view = symbol_temp_make ();\n-\t  gas_assert (!S_IS_DEFINED (p->loc.view));\n+\t  p->loc.u.view = symbol_temp_make ();\n+\t  gas_assert (!S_IS_DEFINED (p->loc.u.view));\n \t}\n \n       memset (&incv, 0, sizeof (incv));\n       incv.X_unsigned = 1;\n       incv.X_op = O_symbol;\n-      incv.X_add_symbol = p->loc.view;\n+      incv.X_add_symbol = p->loc.u.view;\n       incv.X_add_number = 1;\n \n       if (viewx.X_op == O_constant)\n@@ -430,16 +429,16 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n \t}\n     }\n \n-  if (!S_IS_DEFINED (e->loc.view))\n+  if (!S_IS_DEFINED (e->loc.u.view))\n     {\n-      symbol_set_value_expression (e->loc.view, &viewx);\n-      S_SET_SEGMENT (e->loc.view, expr_section);\n-      symbol_set_frag (e->loc.view, &zero_address_frag);\n+      symbol_set_value_expression (e->loc.u.view, &viewx);\n+      S_SET_SEGMENT (e->loc.u.view, expr_section);\n+      symbol_set_frag (e->loc.u.view, &zero_address_frag);\n     }\n \n   /* Define and attempt to simplify any earlier views needed to\n      compute E's.  */\n-  if (h && p && p->loc.view && !S_IS_DEFINED (p->loc.view))\n+  if (h && p && p->loc.u.view && !S_IS_DEFINED (p->loc.u.view))\n     {\n       struct line_entry *h2;\n       /* Reverse the list to avoid quadratic behavior going backwards\n@@ -459,7 +458,9 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n \t    break;\n \t  set_or_check_view (r, r->next, NULL);\n \t}\n-      while (r->next && r->next->loc.view && !S_IS_DEFINED (r->next->loc.view)\n+      while (r->next\n+\t     && r->next->loc.u.view\n+\t     && !S_IS_DEFINED (r->next->loc.u.view)\n \t     && (r = r->next));\n \n       /* Unreverse the list, so that we can go forward again.  */\n@@ -475,14 +476,14 @@ set_or_check_view (struct line_entry *e, struct line_entry *p,\n \t     view of the previous subsegment.  */\n \t  if (r == h)\n \t    continue;\n-\t  gas_assert (S_IS_DEFINED (r->loc.view));\n-\t  resolve_expression (symbol_get_value_expression (r->loc.view));\n+\t  gas_assert (S_IS_DEFINED (r->loc.u.view));\n+\t  resolve_expression (symbol_get_value_expression (r->loc.u.view));\n \t}\n       while (r != p && (r = r->next));\n \n       /* Now that we've defined and computed all earlier views that might\n \t be needed to compute E's, attempt to simplify it.  */\n-      resolve_expression (symbol_get_value_expression (e->loc.view));\n+      resolve_expression (symbol_get_value_expression (e->loc.u.view));\n     }\n }\n \n@@ -518,10 +519,8 @@ dwarf2_gen_line_info_1 (symbolS *label, struct dwarf2_line_info *loc)\n \n   /* Subseg heads are chained to previous subsegs in\n      dwarf2_finish.  */\n-  if (loc->view && lss->head)\n-    set_or_check_view (e,\n-\t\t       (struct line_entry *)lss->ptail,\n-\t\t       lss->head);\n+  if (loc->filenum != -1u && loc->u.view && lss->head)\n+    set_or_check_view (e, (struct line_entry *) lss->ptail, lss->head);\n \n   *lss->ptail = e;\n   lss->ptail = &e->next;\n@@ -532,9 +531,6 @@ dwarf2_gen_line_info_1 (symbolS *label, struct dwarf2_line_info *loc)\n void\n dwarf2_gen_line_info (addressT ofs, struct dwarf2_line_info *loc)\n {\n-  static unsigned int line = -1;\n-  static unsigned int filenum = -1;\n-\n   symbolS *sym;\n \n   /* Early out for as-yet incomplete location information.  */\n@@ -552,20 +548,35 @@ dwarf2_gen_line_info (addressT ofs, struct dwarf2_line_info *loc)\n      symbols apply to assembler code.  It is necessary to emit\n      duplicate line symbols when a compiler asks for them, because GDB\n      uses them to determine the end of the prologue.  */\n-  if (debug_type == DEBUG_DWARF2\n-      && line == loc->line && filenum == loc->filenum)\n-    return;\n+  if (debug_type == DEBUG_DWARF2)\n+    {\n+      static unsigned int line = -1;\n+      static const char *filename = NULL;\n+\n+      if (line == loc->line)\n+\t{\n+\t  if (filename == loc->u.filename)\n+\t    return;\n+\t  if (filename_cmp (filename, loc->u.filename) == 0)\n+\t    {\n+\t      filename = loc->u.filename;\n+\t      return;\n+\t    }\n+\t}\n \n-  line = loc->line;\n-  filenum = loc->filenum;\n+      line = loc->line;\n+      filename = loc->u.filename;\n+    }\n \n   if (linkrelax)\n     {\n-      char name[120];\n+      static int label_num = 0;\n+      char name[32];\n \n       /* Use a non-fake name for the line number location,\n \t so that it can be referred to by relocations.  */\n-      sprintf (name, \".Loc.%u.%u\", line, filenum);\n+      sprintf (name, \".Loc.%u\", label_num);\n+      label_num++;\n       sym = symbol_new (name, now_seg, frag_now, ofs);\n     }\n   else\n@@ -624,13 +635,15 @@ get_directory_table_entry (const char *dirname,\n \t{\n \t  const char * pwd = file0_dirname ? file0_dirname : getpwd ();\n \n-\t  if (dwarf_level >= 5 && strcmp (dirname, pwd) != 0)\n+\t  if (dwarf_level >= 5 && filename_cmp (dirname, pwd) != 0)\n \t    {\n-\t      /* In DWARF-5 the 0 entry in the directory table is expected to be\n-\t\t the same as the DW_AT_comp_dir (which is set to the current build\n-\t\t directory).  Since we are about to create a directory entry that\n-\t\t is not the same, allocate the current directory first.\n-\t\t FIXME: Alternatively we could generate an error message here.  */\n+\t      /* In DWARF-5 the 0 entry in the directory table is\n+\t\t expected to be the same as the DW_AT_comp_dir (which\n+\t\t is set to the current build directory).  Since we are\n+\t\t about to create a directory entry that is not the\n+\t\t same, allocate the current directory first.\n+\t\t FIXME: Alternatively we could generate an error\n+\t\t message here.  */\n \t      (void) get_directory_table_entry (pwd, NULL, strlen (pwd),\n \t\t\t\t\t\ttrue);\n \t      d = 1;\n@@ -745,14 +758,30 @@ allocate_filenum (const char * pathname)\n   if (!assign_file_to_slot (i, file, dir))\n     return -1;\n \n-  num_of_auto_assigned++;\n-\n   last_used = i;\n   last_used_dir_len = dir_len;\n \n   return i;\n }\n \n+/* Run through the list of line entries starting at E, allocating\n+   file entries for gas generated debug.  */\n+\n+static void\n+do_allocate_filenum (struct line_entry *e)\n+{\n+  do\n+    {\n+      if (e->loc.filenum == -1u)\n+\t{\n+\t  e->loc.filenum = allocate_filenum (e->loc.u.filename);\n+\t  e->loc.u.view = NULL;\n+\t}\n+      e = e->next;\n+    }\n+  while (e);\n+}\n+\n /* Allocate slot NUM in the .debug_line file table to FILENAME.\n    If DIRNAME is not NULL or there is a directory component to FILENAME\n    then this will be stored in the directory table, if not already present.\n@@ -929,17 +958,12 @@ dwarf2_where (struct dwarf2_line_info *line)\n {\n   if (debug_type == DEBUG_DWARF2)\n     {\n-      const char *filename;\n-\n-      memset (line, 0, sizeof (*line));\n-      filename = as_where (&line->line);\n-      line->filenum = allocate_filenum (filename);\n-      /* FIXME: We should check the return value from allocate_filenum.  */\n+      line->u.filename = as_where (&line->line);\n+      line->filenum = -1u;\n       line->column = 0;\n       line->flags = DWARF2_FLAG_IS_STMT;\n       line->isa = current.isa;\n       line->discriminator = current.discriminator;\n-      line->view = NULL;\n     }\n   else\n     *line = current;\n@@ -1018,7 +1042,7 @@ dwarf2_consume_line_info (void)\n \t\t     | DWARF2_FLAG_PROLOGUE_END\n \t\t     | DWARF2_FLAG_EPILOGUE_BEGIN);\n   current.discriminator = 0;\n-  current.view = NULL;\n+  current.u.view = NULL;\n }\n \n /* Called for each (preferably code) label.  If dwarf2_loc_mark_labels\n@@ -1060,7 +1084,6 @@ dwarf2_directive_filename (void)\n   char *filename;\n   const char * dirname = NULL;\n   int filename_len;\n-  unsigned int i;\n \n   /* Continue to accept a bare string and pass it off.  */\n   SKIP_WHITESPACE ();\n@@ -1132,18 +1155,6 @@ dwarf2_directive_filename (void)\n       return NULL;\n     }\n \n-  if (num_of_auto_assigned)\n-    {\n-      /* Clear slots auto-assigned before the first .file <NUMBER>\n-\t directive was seen.  */\n-      if (files_in_use != (num_of_auto_assigned + 1))\n-\tabort ();\n-      for (i = 1; i < files_in_use; i++)\n-\tfiles[i].filename = NULL;\n-      files_in_use = 0;\n-      num_of_auto_assigned = 0;\n-    }\n-\n   if (! allocate_filename_to_slot (dirname, filename, (unsigned int) num,\n \t\t\t\t   with_md5))\n     return NULL;\n@@ -1191,6 +1202,11 @@ dwarf2_directive_loc (int dummy ATTRIBUTE_UNUSED)\n       return;\n     }\n \n+  /* debug_type will be turned off by dwarf2_directive_filename, and\n+     if we don't have a dwarf style .file then files_in_use will be\n+     zero and the above error will trigger.  */\n+  gas_assert (debug_type == DEBUG_NONE);\n+\n   current.filenum = filenum;\n   current.line = line;\n   current.discriminator = 0;\n@@ -1333,7 +1349,7 @@ dwarf2_directive_loc (int dummy ATTRIBUTE_UNUSED)\n \t      S_SET_VALUE (sym, 0);\n \t      symbol_set_frag (sym, &zero_address_frag);\n \t    }\n-\t  current.view = sym;\n+\t  current.u.view = sym;\n \t}\n       else\n \t{\n@@ -1347,10 +1363,9 @@ dwarf2_directive_loc (int dummy ATTRIBUTE_UNUSED)\n \n   demand_empty_rest_of_line ();\n   dwarf2_any_loc_directive_seen = dwarf2_loc_directive_seen = true;\n-  debug_type = DEBUG_NONE;\n \n   /* If we were given a view id, emit the row right away.  */\n-  if (current.view)\n+  if (current.u.view)\n     dwarf2_emit_insn (0);\n }\n \n@@ -1984,7 +1999,7 @@ process_entries (segT seg, struct line_entry *e)\n       frag_ofs = S_GET_VALUE (lab);\n \n       if (last_frag == NULL\n-\t  || (e->loc.view == force_reset_view && force_reset_view\n+\t  || (e->loc.u.view == force_reset_view && force_reset_view\n \t      /* If we're going to reset the view, but we know we're\n \t\t advancing the PC, we don't have to force with\n \t\t set_address.  We know we do when we're at the same\n@@ -2850,16 +2865,19 @@ dwarf2_finish (void)\n       struct line_subseg *lss = s->head;\n       struct line_entry **ptail = lss->ptail;\n \n+      if (lss->head && SEG_NORMAL (s->seg))\n+\tdo_allocate_filenum (lss->head);\n+\n       /* Reset the initial view of the first subsection of the\n \t section.  */\n-      if (lss->head && lss->head->loc.view)\n+      if (lss->head && lss->head->loc.u.view)\n \tset_or_check_view (lss->head, NULL, NULL);\n \n       while ((lss = lss->next) != NULL)\n \t{\n \t  /* Link the first view of subsequent subsections to the\n \t     previous view.  */\n-\t  if (lss->head && lss->head->loc.view)\n+\t  if (lss->head && lss->head->loc.u.view)\n \t    set_or_check_view (lss->head,\n \t\t\t       !s->head ? NULL : (struct line_entry *)ptail,\n \t\t\t       s->head ? s->head->head : NULL);"
    },
    {
      "sha": "700d9dec5cbe0d31b27df2cf9e317f53b4750a6c",
      "filename": "gas/dwarf2dbg.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/dwarf2dbg.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/dwarf2dbg.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dwarf2dbg.h?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -36,7 +36,12 @@ struct dwarf2_line_info\n   unsigned int isa;\n   unsigned int flags;\n   unsigned int discriminator;\n-  symbolS *view;\n+  /* filenum == -1u chooses filename, otherwise view.  */\n+  union\n+  {\n+    symbolS *view;\n+    const char *filename;\n+  } u;\n };\n \n /* Implements the .file FILENO \"FILENAME\" directive.  FILENO can be 0"
    },
    {
      "sha": "e933719fbc32e227a820c89ab24d889f275394fd",
      "filename": "gas/testsuite/gas/i386/dwarf2-line-3.s",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf2-line-3.s?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -7,6 +7,7 @@\n main:\n         .cfi_startproc\n         nop\n+\t.file 1 \"dwarf2-test.c\"\n \t.loc 1 1\n         ret\n         .cfi_endproc"
    },
    {
      "sha": "a01fd0540f37fecb3cd9da58a90eef0e9d5836dc",
      "filename": "gas/testsuite/gas/i386/dwarf2-line-4.d",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf2-line-4.d?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -33,11 +33,14 @@ Raw dump of debug contents of section \\.z?debug_line:\n \n  The File Name Table \\(offset 0x.*\\):\n   Entry\tDir\tTime\tSize\tName\n-  1\t1\t0\t0\tdwarf2-line-4.s\n+  1\t0\t0\t0\tdwarf2-test.c\n+  2\t1\t0\t0\tdwarf2-line-4.s\n \n  Line Number Statements:\n+  \\[0x.*\\]  Set File Name to entry 2 in the File Name Table\n   \\[0x.*\\]  Extended opcode 2: set Address to 0x0\n   \\[0x.*\\]  Special opcode 13: advance Address by 0 to 0x0 and Line by 8 to 9\n+  \\[0x.*\\]  Set File Name to entry 1 in the File Name Table\n   \\[0x.*\\]  Advance Line by -8 to 1\n   \\[0x.*\\]  Special opcode 19: advance Address by 1 to 0x1 and Line by 0 to 1\n   \\[0x.*\\]  Advance PC by 1 to 0x2"
    },
    {
      "sha": "7348f4be62ce2b910f118a726121b837c9ddfc82",
      "filename": "gas/testsuite/gas/i386/dwarf2-line-4.s",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-4.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf2-line-4.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf2-line-4.s?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -7,6 +7,7 @@\n main:\n         .cfi_startproc\n         nop\n+\t.file 1 \"dwarf2-test.c\"\n \t.loc 1 1\n         ret\n         .cfi_endproc"
    },
    {
      "sha": "8199efbb0c2c8b7445624a06d6dc868324573a88",
      "filename": "gas/testsuite/gas/i386/dwarf4-line-1.d",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf4-line-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf4-line-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf4-line-1.d?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -36,12 +36,14 @@ Raw dump of debug contents of section \\.z?debug_line:\n   Entry\tDir\tTime\tSize\tName\n   1\t0\t0\t0\tfoo.c\n   2\t0\t0\t0\tfoo.h\n+  3\t1\t0\t0\tdwarf4-line-1.s\n \n  Line Number Statements:\n+  \\[0x.*\\]  Set File Name to entry 2 in the File Name Table\n   \\[0x.*\\]  Extended opcode 2: set Address to 0x0\n   \\[0x.*\\]  Advance Line by 81 to 82\n   \\[0x.*\\]  Copy\n-  \\[0x.*\\]  Set File Name to entry 2 in the File Name Table\n+  \\[0x.*\\]  Set File Name to entry 3 in the File Name Table\n   \\[0x.*\\]  Advance Line by -73 to 9\n   \\[0x.*\\]  Special opcode 19: advance Address by 1 to 0x1 and Line by 0 to 9\n   \\[0x.*\\]  Advance PC by 3 to 0x4"
    },
    {
      "sha": "2c2cf5696c491c5e94da86960e111e090a42fe60",
      "filename": "gas/testsuite/gas/i386/dwarf5-line-1.d",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf5-line-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf5-line-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf5-line-1.d?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -36,12 +36,14 @@ Raw dump of debug contents of section \\.z?debug_line:\n   0\t\\(indirect line string, offset: 0x.*\\): .*/gas/testsuite\n   1\t\\(indirect line string, offset: 0x.*\\): .*/gas/testsuite/gas/i386\n \n- The File Name Table \\(offset 0x.*, lines 2, columns 3\\):\n+ The File Name Table \\(offset 0x.*, lines 3, columns 3\\):\n   Entry\tDir\tMD5\t\t\t\tName\n   0\t0 0xbbd69fc03ce253b2dbaab2522dd519ae\t\\(indirect line string, offset: 0x.*\\): core.c\n   1\t0 0x0\t\\(indirect line string, offset: 0x.*\\): types.h\n+  2\t1 0x0\t\\(indirect line string, offset: 0x.*\\): dwarf5-line-1.s\n \n  Line Number Statements:\n+  \\[0x.*\\]  Set File Name to entry 2 in the File Name Table\n   \\[0x.*\\]  Extended opcode 2: set Address to 0x0\n   \\[0x.*\\]  Special opcode 8: advance Address by 0 to 0x0 and Line by 3 to 4\n   \\[0x.*\\]  Advance PC by 1 to 0x1"
    },
    {
      "sha": "85f98c8ab9c7a63db9b4370bc18ce6d3cef77546",
      "filename": "gas/testsuite/gas/i386/dwarf5-line-2.d",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf5-line-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51298b330327a568358da069d9808f51c6cb1672/gas/testsuite/gas/i386/dwarf5-line-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/dwarf5-line-2.d?ref=51298b330327a568358da069d9808f51c6cb1672",
      "patch": "@@ -36,9 +36,10 @@ Raw dump of debug contents of section \\.z?debug_line:\n   0\t\\(indirect line string, offset: 0x.*\\): .*/gas/testsuite\n   1\t\\(indirect line string, offset: 0x.*\\): .*/gas/testsuite/gas/i386\n \n- The File Name Table \\(offset 0x.*, lines 1, columns 3\\):\n+ The File Name Table \\(offset 0x.*, lines 2, columns 3\\):\n   Entry\tDir\tMD5\t\t\t\tName\n   0\t0 0xbbd69fc03ce253b2dbaab2522dd519ae\t\\(indirect line string, offset: 0x.*\\): core.c\n+  1\t1 0x0\t\\(indirect line string, offset: .*\\): dwarf5-line-2.s\n \n  Line Number Statements:\n   \\[0x.*\\]  Extended opcode 2: set Address to 0x0"
    }
  ]
}