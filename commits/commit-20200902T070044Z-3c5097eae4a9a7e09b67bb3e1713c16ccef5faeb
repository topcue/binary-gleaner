{
  "sha": "3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2M1MDk3ZWFlNGE5YTdlMDliNjdiYjNlMTcxM2MxNmNjZWY1ZmFlYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-02T01:12:53Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-02T07:00:44Z"
    },
    "message": "ubsan: crx-dis.c:571 left shift of negative value\n\n\t* crx-dis.c: Whitespace.\n\t(print_arg): Use unsigned type for longdisp and mask variables,\n\tand for left shift constant.",
    "tree": {
      "sha": "c13a14ec23e2feba5af1cc0117beda3319f53fcc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c13a14ec23e2feba5af1cc0117beda3319f53fcc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae3e98b418c6f31cc1999d67fc2422429d88de6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae3e98b418c6f31cc1999d67fc2422429d88de6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae3e98b418c6f31cc1999d67fc2422429d88de6f"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 80,
    "deletions": 74
  },
  "files": [
    {
      "sha": "d89ad9dd9a48f8a3ce2bbf6c284e13a726011a5b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* crx-dis.c: Whitespace.\n+\t(print_arg): Use unsigned type for longdisp and mask variables,\n+\tand for left shift constant.\n+\n 2020-09-02  Alan Modra  <amodra@gmail.com>\n \n \t* cgen-ibld.in (insert_normal, extract_normal): Use 1UL in left shift."
    },
    {
      "sha": "1ffecac5fb1798da16328017f176a50a7a14a909",
      "filename": "opcodes/crx-dis.c",
      "status": "modified",
      "additions": 74,
      "deletions": 74,
      "changes": 148,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb/opcodes/crx-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb/opcodes/crx-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/crx-dis.c?ref=3c5097eae4a9a7e09b67bb3e1713c16ccef5faeb",
      "patch": "@@ -387,7 +387,7 @@ make_argument (argument * a, int start_bits)\n \t\t\t     inst_bit_size - start_bits);\n \n       if ((p.nbits == 4) && cst4flag)\n-        {\n+\t{\n \t  if (IS_INSN_TYPE (CMPBR_INS) && (p.val == ESCAPE_16_BIT))\n \t    {\n \t      /* A special case, where the value is actually stored\n@@ -397,19 +397,19 @@ make_argument (argument * a, int start_bits)\n \t      size_changed = 1;\n \t    }\n \n-          if (p.val == 6)\n-            p.val = -1;\n-          else if (p.val == 13)\n-            p.val = 48;\n-          else if (p.val == 5)\n-            p.val = -4;\n-          else if (p.val == 10)\n-            p.val = 32;\n-          else if (p.val == 11)\n-            p.val = 20;\n-          else if (p.val == 9)\n-            p.val = 16;\n-        }\n+\t  if (p.val == 6)\n+\t    p.val = -1;\n+\t  else if (p.val == 13)\n+\t    p.val = 48;\n+\t  else if (p.val == 5)\n+\t    p.val = -4;\n+\t  else if (p.val == 10)\n+\t    p.val = 32;\n+\t  else if (p.val == 11)\n+\t    p.val = 20;\n+\t  else if (p.val == 9)\n+\t    p.val = 16;\n+\t}\n \n       a->constant = p.val;\n       break;\n@@ -439,30 +439,30 @@ make_argument (argument * a, int start_bits)\n \n     case arg_cr:\n       if (a->size <= 8)\n-        {\n-          p = makelongparameter (allWords, inst_bit_size - (start_bits + 4),\n+\t{\n+\t  p = makelongparameter (allWords, inst_bit_size - (start_bits + 4),\n \t\t\t\t inst_bit_size - start_bits);\n-          a->r = p.val;\n-          /* Case for opc4 r dispu rbase.  */\n-          p = makelongparameter (allWords, inst_bit_size - (start_bits + 8),\n+\t  a->r = p.val;\n+\t  /* Case for opc4 r dispu rbase.  */\n+\t  p = makelongparameter (allWords, inst_bit_size - (start_bits + 8),\n \t\t\t\t inst_bit_size - (start_bits + 4));\n-        }\n+\t}\n       else\n-        {\n+\t{\n \t  /* The 'rbase' start_bits is always relative to a 32-bit data type.  */\n-          p = makelongparameter (allWords, 32 - (start_bits + 4),\n+\t  p = makelongparameter (allWords, 32 - (start_bits + 4),\n \t\t\t\t 32 - start_bits);\n-          a->r = p.val;\n-          p = makelongparameter (allWords, 32 - start_bits,\n+\t  a->r = p.val;\n+\t  p = makelongparameter (allWords, 32 - start_bits,\n \t\t\t\t inst_bit_size);\n-        }\n+\t}\n       if ((p.nbits == 4) && cst4flag)\n-        {\n-          if (instruction->flags & DISPUW4)\n+\t{\n+\t  if (instruction->flags & DISPUW4)\n \t    p.val *= 2;\n-          else if (instruction->flags & DISPUD4)\n+\t  else if (instruction->flags & DISPUD4)\n \t    p.val *= 4;\n-        }\n+\t}\n       a->constant = p.val;\n       break;\n \n@@ -481,7 +481,7 @@ make_argument (argument * a, int start_bits)\n static void\n print_arg (argument *a, bfd_vma memaddr, struct disassemble_info *info)\n {\n-  LONGLONG longdisp, mask;\n+  ULONGLONG longdisp, mask;\n   int sign_flag = 0;\n   int relative = 0;\n   bfd_vma number;\n@@ -515,29 +515,29 @@ print_arg (argument *a, bfd_vma memaddr, struct disassemble_info *info)\n \tfunc (stream, \"%s\", getcinvstring (a->constant));\n \n       else if (INST_HAS_REG_LIST)\n-        {\n+\t{\n \t  REG_ARG_TYPE reg_arg_type = IS_INSN_TYPE (COP_REG_INS) ?\n-\t\t\t\t COP_ARG : IS_INSN_TYPE (COPS_REG_INS) ?\n-\t\t\t\t COPS_ARG : (instruction->flags & USER_REG) ?\n-\t\t\t\t USER_REG_ARG : REG_ARG;\n+\t    COP_ARG : IS_INSN_TYPE (COPS_REG_INS) ?\n+\t    COPS_ARG : (instruction->flags & USER_REG) ?\n+\t    USER_REG_ARG : REG_ARG;\n \n-          if ((reg_arg_type == COP_ARG) || (reg_arg_type == COPS_ARG))\n+\t  if ((reg_arg_type == COP_ARG) || (reg_arg_type == COPS_ARG))\n \t    {\n-\t\t/*  Check for proper argument number.  */\n-\t\tif (processing_argument_number == 2)\n-\t\t  {\n-\t\t    getregliststring (a->constant, string, reg_arg_type);\n-\t\t    func (stream, \"%s\", string);\n-\t\t  }\n-\t\telse\n-\t\t  func (stream, \"$0x%lx\", a->constant & 0xffffffff);\n+\t      /*  Check for proper argument number.  */\n+\t      if (processing_argument_number == 2)\n+\t\t{\n+\t\t  getregliststring (a->constant, string, reg_arg_type);\n+\t\t  func (stream, \"%s\", string);\n+\t\t}\n+\t      else\n+\t\tfunc (stream, \"$0x%lx\", a->constant & 0xffffffff);\n \t    }\n \t  else\n-            {\n-              getregliststring (a->constant, string, reg_arg_type);\n-              func (stream, \"%s\", string);\n-            }\n-        }\n+\t    {\n+\t      getregliststring (a->constant, string, reg_arg_type);\n+\t      func (stream, \"%s\", string);\n+\t    }\n+\t}\n       else\n \tfunc (stream, \"$0x%lx\", a->constant & 0xffffffff);\n       break;\n@@ -565,47 +565,47 @@ print_arg (argument *a, bfd_vma memaddr, struct disassemble_info *info)\n       if (IS_INSN_TYPE (BRANCH_INS) || IS_INSN_MNEMONIC (\"bal\")\n \t  || IS_INSN_TYPE (CMPBR_INS) || IS_INSN_TYPE (DCR_BRANCH_INS)\n \t  || IS_INSN_TYPE (COP_BRANCH_INS))\n-        {\n+\t{\n \t  relative = 1;\n-          longdisp = a->constant;\n-          longdisp <<= 1;\n+\t  longdisp = a->constant;\n+\t  longdisp <<= 1;\n \n-          switch (a->size)\n-            {\n-            case 8:\n+\t  switch (a->size)\n+\t    {\n+\t    case 8:\n \t    case 16:\n \t    case 24:\n \t    case 32:\n-\t      mask = ((LONGLONG)1 << a->size) - 1;\n-              if (longdisp & ((LONGLONG)1 << a->size))\n-                {\n-                  sign_flag = 1;\n-                  longdisp = ~(longdisp) + 1;\n-                }\n-              a->constant = (unsigned long int) (longdisp & mask);\n-              break;\n-            default:\n+\t      mask = ((LONGLONG) 1 << a->size) - 1;\n+\t      if (longdisp & ((ULONGLONG) 1 << a->size))\n+\t\t{\n+\t\t  sign_flag = 1;\n+\t\t  longdisp = ~(longdisp) + 1;\n+\t\t}\n+\t      a->constant = (unsigned long int) (longdisp & mask);\n+\t      break;\n+\t    default:\n \t      func (stream,\n \t\t    \"Wrong offset used in branch/bal instruction\");\n-              break;\n-            }\n+\t      break;\n+\t    }\n \n-        }\n+\t}\n       /* For branch Neq instruction it is 2*offset + 2.  */\n       else if (IS_INSN_TYPE (BRANCH_NEQ_INS))\n \ta->constant = 2 * a->constant + 2;\n       else if (IS_INSN_TYPE (LD_STOR_INS_INC)\n-\t  || IS_INSN_TYPE (LD_STOR_INS)\n-\t  || IS_INSN_TYPE (STOR_IMM_INS)\n-\t  || IS_INSN_TYPE (CSTBIT_INS))\n-        {\n-          op_index = instruction->flags & REVERSE_MATCH ? 0 : 1;\n-          if (instruction->operands[op_index].op_type == abs16)\n+\t       || IS_INSN_TYPE (LD_STOR_INS)\n+\t       || IS_INSN_TYPE (STOR_IMM_INS)\n+\t       || IS_INSN_TYPE (CSTBIT_INS))\n+\t{\n+\t  op_index = instruction->flags & REVERSE_MATCH ? 0 : 1;\n+\t  if (instruction->operands[op_index].op_type == abs16)\n \t    a->constant |= 0xFFFF0000;\n-        }\n+\t}\n       func (stream, \"%s\", \"0x\");\n       number = (relative ? memaddr : 0)\n-\t       + (sign_flag ? -a->constant : a->constant);\n+\t+ (sign_flag ? -a->constant : a->constant);\n       (*info->print_address_func) (number, info);\n       break;\n     default:"
    }
  ]
}