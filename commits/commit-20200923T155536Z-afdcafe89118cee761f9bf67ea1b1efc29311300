{
  "sha": "afdcafe89118cee761f9bf67ea1b1efc29311300",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWZkY2FmZTg5MTE4Y2VlNzYxZjliZjY3ZWExYjFlZmMyOTMxMTMwMA==",
  "commit": {
    "author": {
      "name": "Cooper Qu",
      "email": "cooper.qu@linux.alibaba.com",
      "date": "2020-09-17T06:30:28Z"
    },
    "committer": {
      "name": "Lifang Xia",
      "email": "xlf194833_xia@alibaba-inc.com",
      "date": "2020-09-23T15:55:36Z"
    },
    "message": "CSKY: Add objdump option -M abi-names.\n\nAdd option parser for disassembler, and refine the codes of\nparse register operand and disassemble register operand.\nWhile strengthen the operands legality check of some instructions.\n\nCo-Authored-By: Lifang Xia <lifang_xia@c-sky.com>\n\ngas/\n\t* config/tc-csky.c (parse_type_ctrlreg): Use function\n\tcsky_get_control_regno to operand.\n\t(csky_get_reg_val): Likewise.\n\t(is_reg_sp_with_bracket): Use function csky_get_reg_val\n\tto parse operand.\n\t(is_reg_sp): Refine.\n\t(is_oimm_within_range): Fix, report error when operand\n\tis not constant.\n\t(parse_type_cpreg): Refine.\n\t(parse_type_cpcreg): Refine.\n\t(get_operand_value): Add handle of OPRND_TYPE_IMM5b_LS.\n\t(md_assemble): Fix no error reporting somtimes when\n\toperands number are not fit.\n\t(csky_addc64): Refine.\n\t(csky_subc64): Refine.\n\t(csky_or64): Refine.\n\t(v1_work_fpu_fo): Refine.\n\t(v1_work_fpu_read): Refine.\n\t(v1_work_fpu_writed): Refine.\n\t(v1_work_fpu_readd): Refine.\n\t(v2_work_addc): New function, strengthen the operands legality\n\tcheck of addc.\n\t* gas/testsuite/gas/csky/all.d : Use register number format when\n\tdisassemble register name by default.\n\t* gas/testsuite/gas/csky/cskyv2_all.d : Likewise.\n\t* gas/testsuite/gas/csky/trust.d: Likewise.\n\t* gas/testsuite/gas/csky/cskyv2_ck860.d : Fix.\n\t* gas/testsuite/gas/csky/trust.s : Fix.\n\nopcodes/\n\t* csky-dis.c (using_abi): New.\n\t(parse_csky_dis_options): New function.\n\t(get_gr_name): New function.\n\t(get_cr_name): New function.\n\t(csky_output_operand): Use get_gr_name and get_cr_name to\n\tdisassemble and add handle of OPRND_TYPE_IMM5b_LS.\n\t(print_insn_csky): Parse disassembler options.\n\t* opcodes/csky-opc.h (OPRND_TYPE_IMM5b_LS): New enum.\n\t(GENARAL_REG_BANK): Define.\n\t(REG_SUPPORT_ALL): Define.\n\t(REG_SUPPORT_ALL): New.\n\t(ASH): Define.\n\t(REG_SUPPORT_A): Define.\n\t(REG_SUPPORT_B): Define.\n\t(REG_SUPPORT_C): Define.\n\t(REG_SUPPORT_D): Define.\n\t(REG_SUPPORT_E): Define.\n\t(csky_abiv1_general_regs): New.\n\t(csky_abiv1_control_regs): New.\n\t(csky_abiv2_general_regs): New.\n\t(csky_abiv2_control_regs): New.\n\t(get_register_name): New function.\n\t(get_register_number): New function.\n\t(csky_get_general_reg_name): New function.\n\t(csky_get_general_regno): New function.\n\t(csky_get_control_reg_name): New function.\n\t(csky_get_control_regno): New function.\n\t(csky_v2_opcodes): Prefer two oprerans format for bclri and\n\tbseti, strengthen the operands legality check of addc, zext\n\tand sext.",
    "tree": {
      "sha": "6bfaa44e694d29891509d89d7bdcb1601418c27f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6bfaa44e694d29891509d89d7bdcb1601418c27f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/afdcafe89118cee761f9bf67ea1b1efc29311300",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afdcafe89118cee761f9bf67ea1b1efc29311300",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/afdcafe89118cee761f9bf67ea1b1efc29311300",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afdcafe89118cee761f9bf67ea1b1efc29311300/comments",
  "author": {
    "login": "Cooper-Qu",
    "id": 68842787,
    "node_id": "MDQ6VXNlcjY4ODQyNzg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/68842787?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Cooper-Qu",
    "html_url": "https://github.com/Cooper-Qu",
    "followers_url": "https://api.github.com/users/Cooper-Qu/followers",
    "following_url": "https://api.github.com/users/Cooper-Qu/following{/other_user}",
    "gists_url": "https://api.github.com/users/Cooper-Qu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Cooper-Qu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Cooper-Qu/subscriptions",
    "organizations_url": "https://api.github.com/users/Cooper-Qu/orgs",
    "repos_url": "https://api.github.com/users/Cooper-Qu/repos",
    "events_url": "https://api.github.com/users/Cooper-Qu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Cooper-Qu/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "20a5fcbd5b28cca88511ac5a9ad5e54251e8fa6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20a5fcbd5b28cca88511ac5a9ad5e54251e8fa6d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/20a5fcbd5b28cca88511ac5a9ad5e54251e8fa6d"
    }
  ],
  "stats": {
    "total": 1454,
    "additions": 858,
    "deletions": 596
  },
  "files": [
    {
      "sha": "b7134931e3302adff97889ef3e32ce73543e8a5f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -1,3 +1,33 @@\n+20200-09-17 Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/tc-csky.c (parse_type_ctrlreg): Use function\n+\tcsky_get_control_regno to operand.\n+\t(csky_get_reg_val): Likewise.\n+\t(is_reg_sp_with_bracket): Use function csky_get_reg_val\n+\tto parse operand.\n+\t(is_reg_sp): Refine.\n+\t(is_oimm_within_range): Fix, report error when operand\n+\tis not constant.\n+\t(parse_type_cpreg): Refine.\n+\t(parse_type_cpcreg): Refine.\n+\t(get_operand_value): Add handle of OPRND_TYPE_IMM5b_LS.\n+\t(md_assemble): Fix no error reporting somtimes when\n+\toperands number are not fit.\n+\t(csky_addc64): Refine.\n+\t(csky_subc64): Refine.\n+\t(csky_or64): Refine.\n+\t(v1_work_fpu_fo): Refine.\n+\t(v1_work_fpu_read): Refine.\n+\t(v1_work_fpu_writed): Refine.\n+\t(v1_work_fpu_readd): Refine.\n+\t(v2_work_addc): New function, strengthen the operands legality\n+\tcheck of addc.\n+\t* gas/testsuite/gas/csky/all.d : Use register number format when\n+\tdisassemble register name by default.\n+\t* gas/testsuite/gas/csky/cskyv2_all.d : Likewise.\n+\t* gas/testsuite/gas/csky/trust.d: Likewise.\n+\t* gas/testsuite/gas/csky/cskyv2_ck860.d : Fix.\n+\t* gas/testsuite/gas/csky/trust.s : Fix.\n \n 2020-09-23  Lili Cui  <lili.cui@intel.com>\n "
    },
    {
      "sha": "60d5aa1f53be294e6c46b9590771093fbbfe3fa4",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 262,
      "deletions": 379,
      "changes": 641,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -174,6 +174,7 @@ bfd_boolean float_work_fmovi (void);\n bfd_boolean dsp_work_bloop (void);\n bfd_boolean float_work_fpuv3_fmovi (void);\n bfd_boolean float_work_fpuv3_fstore (void);\n+bfd_boolean v2_work_addc (void);\n \n /* csky-opc.h must be included after workers are declared.  */\n #include \"opcodes/csky-opc.h\"\n@@ -2508,133 +2509,101 @@ static bfd_boolean\n parse_type_ctrlreg (char** oper)\n {\n   int i = -1;\n-  int len = 0;\n+  int group = 0;\n+  int crx;\n+  int sel;\n+  char *s = *oper;\n+  expressionS e;\n \n   if (TOLOWER (*(*oper + 0)) == 'c'\n       && TOLOWER (*(*oper + 1)) == 'r'\n       && ISDIGIT (*(*oper + 2)))\n     {\n       /* The control registers are named crxx.  */\n-      i = *(*oper + 2) - 0x30;\n-      i = ISDIGIT (*(*oper + 3)) ? (*(*oper + 3) - 0x30) + 10 * i : i;\n-      len = ISDIGIT (*(*oper + 3)) ? 4 : 3;\n-      *oper += len;\n-    }\n-  else if (!(TOLOWER (*(*oper + 0)) == 'c'\n-\t     && TOLOWER (*(*oper + 1)) == 'r'))\n-    {\n-      /* The control registers are aliased.  */\n-      struct csky_reg *reg = &csky_ctrl_regs[0];\n-      while (reg->name)\n-\t{\n-\t  if (memcmp (*oper, reg->name, strlen (reg->name)) == 0\n-\t      && (!reg->flag || (isa_flag & reg->flag)))\n-\t    {\n-\t      i = reg->index;\n-\t      len = strlen (reg->name);\n-\t      *oper += len;\n-\t      break;\n-\t    }\n-\t  reg++;\n+      s = *oper+2;\n+      s = parse_exp (s, &e);\n+      if (e.X_op == O_constant)\n+        {\n+\t  i = e.X_add_number;\n+\t  *oper = s;\n \t}\n     }\n \n   if (IS_CSKY_V2 (mach_flag))\n     {\n-      char *s = *oper;\n-      int crx;\n-      int sel;\n+\n+      s = *oper;\n       if (i != -1)\n \t{\n \t  crx = i;\n-\t  sel = 0;\n+\t  sel = group;\n \t}\n-      else\n+      else if (TOLOWER (*(*oper + 0)) == 'c'\n+\t       && TOLOWER (*(*oper + 1)) == 'r')\n \t{\n-\t  if (s[0] == 'c' && s[1] == 'r')\n+\t  s += 2;\n+\t  if (*s != '<')\n \t    {\n-\t      s += 2;\n-\t      if (*s == '<')\n-\t\t{\n-\t\t  s++;\n-\t\t  if (s[0] == '3' && s[1] >= '0' && s[1] <= '1')\n-\t\t    {\n-\t\t      crx = 30 + s[1] - '0';\n-\t\t      s += 2;\n-\t\t    }\n-\t\t  else if (s[0] == '2' && s[1] >= '0' && s[1] <= '9')\n-\t\t    {\n-\t\t      crx = 20 + s[1] - '0';\n-\t\t      s += 2;\n-\t\t    }\n-\t\t  else if (s[0] == '1' && s[1] >= '0' && s[1] <= '9')\n-\t\t    {\n-\t\t      crx = 10 + s[1] - '0';\n-\t\t      s += 2;\n-\t\t    }\n-\t\t  else if (s[0] >= '0' && s[0] <= '9')\n-\t\t    {\n-\t\t      crx = s[0] - '0';\n-\t\t      s += 1;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      SET_ERROR_STRING (ERROR_REG_OVER_RANGE, \"control\");\n-\t\t      return FALSE;\n-\t\t    }\n-\t\t  if (*s == ',')\n-\t\t    s++;\n-\t\t  else\n-\t\t    {\n-\t\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, NULL);\n-\t\t      return FALSE;\n-\t\t    }\n-\t\t  char *pS = s;\n-\t\t  while (*pS != '>' && !is_end_of_line[(unsigned char) *pS])\n-\t\t    pS++;\n-\t\t  if (*pS == '>')\n-\t\t      *pS = '\\0';\n-\t\t  else\n-\t\t    {\n-\t\t      /* Error. Missing '>'.  */\n-\t\t      SET_ERROR_STRING (ERROR_MISSING_RANGLE_BRACKETS, NULL);\n-\t\t      return FALSE;\n-\t\t    }\n-\t\t  expressionS e;\n-\t\t  s = parse_exp (s, &e);\n-\t\t  if (e.X_op == O_constant\n-\t\t      && e.X_add_number >= 0\n-\t\t      && e.X_add_number <= 31)\n-\t\t    {\n-\t\t      *oper = s;\n-\t\t      sel = e.X_add_number;\n-\t\t    }\n-\t\t  else\n-\t\t    return FALSE;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  /* Error. Missing '<'.  */\n-\t\t  SET_ERROR_STRING (ERROR_MISSING_LANGLE_BRACKETS, NULL);\n-\t\t  return FALSE;\n-\t\t}\n+\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, s);\n+\t      return FALSE;\n \t    }\n-\t  else\n+\t  s++;\n+\t  crx = strtol(s, &s, 10);\n+\t  if (crx < 0 || crx > 31 || *s != ',')\n+\t    {\n+\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, s);\n+\t      return FALSE;\n+\t    }\n+\t  s++;\n+\t  sel = strtol(s, &s, 10);\n+\t  if (sel < 0 || sel > 31 || *s != '>')\n \t    {\n-\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, NULL);\n+\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, s);\n+\t      return FALSE;\n+\t    }\n+\t  s++;\n+\t}\n+      else\n+\t{\n+\t  crx = csky_get_control_regno (mach_flag & CSKY_ARCH_MASK,\n+\t\t\t  s, &s, &sel);\n+\t  if (crx < 0)\n+\t    {\n+\t      SET_ERROR_STRING (ERROR_CREG_ILLEGAL, s);\n \t      return FALSE;\n \t    }\n \t}\n \ti = (sel << 5) | crx;\n     }\n+  else if (i == -1)\n+    {\n+      i = csky_get_control_regno (mach_flag & CSKY_ARCH_MASK,\n+\t\t\t\t  s, &s, &sel);\n+      if (i < 0)\n+\t{\n+\t  SET_ERROR_STRING (ERROR_CREG_ILLEGAL, s);\n+\t  return FALSE;\n+\t}\n+    }\n+  *oper = s;\n   csky_insn.val[csky_insn.idx++] = i;\n   return TRUE;\n }\n \n+static int\n+csky_get_reg_val (char *str, int *len)\n+{\n+  int regno = 0;\n+  char *s = str;\n+  regno = csky_get_general_regno (mach_flag & CSKY_ARCH_MASK, str, &s);\n+  *len = (s - str);\n+  return regno;\n+}\n+\n static bfd_boolean\n is_reg_sp_with_bracket (char **oper)\n {\n-  const char **regs;\n+  int reg;\n   int sp_idx;\n   int len;\n \n@@ -2646,224 +2615,54 @@ is_reg_sp_with_bracket (char **oper)\n   if (**oper != '(')\n       return FALSE;\n   *oper += 1;\n-  regs = csky_general_reg;\n-  len = strlen (regs[sp_idx]);\n-  if (memcmp (*oper, regs[sp_idx], len) == 0)\n+  reg = csky_get_reg_val (*oper, &len);\n+  *oper += len;\n+  if (reg == sp_idx)\n     {\n-      *oper += len;\n       if (**oper != ')')\n-\treturn FALSE;\n+        {\n+          SET_ERROR_STRING (ERROR_UNDEFINE,\n+\t\t\t    \"Operand format is error. '(sp)' expected\");\n+          return FALSE;\n+        }\n       *oper += 1;\n       csky_insn.val[csky_insn.idx++] = sp_idx;\n       return TRUE;\n     }\n-  else\n-    {\n-      if (IS_CSKY_V1 (mach_flag))\n-\tregs = cskyv1_general_alias_reg;\n-      else\n-\tregs = cskyv2_general_alias_reg;\n-      len = strlen (regs[sp_idx]);\n-      if (memcmp (*oper, regs[sp_idx], len) == 0)\n-\t{\n-\t  *oper += len;\n-\t  if (**oper != ')')\n-\t    return FALSE;\n-\t  *oper += 1;\n-\t  return TRUE;\n-\t}\n-    }\n+\n+  SET_ERROR_STRING (ERROR_UNDEFINE,\n+\t\t    \"Operand format is error. '(sp)' expected\");\n   return FALSE;\n }\n \n static bfd_boolean\n is_reg_sp (char **oper)\n {\n-  const char **regs;\n+  char sp_name[16];\n   int sp_idx;\n   int len;\n   if (IS_CSKY_V1 (mach_flag))\n     sp_idx = 0;\n   else\n     sp_idx = 14;\n \n-  regs = csky_general_reg;\n-  len = strlen (regs[sp_idx]);\n-  if (memcmp (*oper, regs[sp_idx], len) == 0)\n+  /* ABI names: \"sp\". */\n+  if (memcmp (*oper, \"sp\", 2) == 0)\n     {\n-      *oper += len;\n+      *oper += 2;\n       csky_insn.val[csky_insn.idx++] = sp_idx;\n       return TRUE;\n     }\n-  else\n-    {\n-      if (IS_CSKY_V1 (mach_flag))\n-\tregs = cskyv1_general_alias_reg;\n-      else\n-\tregs = cskyv2_general_alias_reg;\n-      len = strlen (regs[sp_idx]);\n-      if (memcmp (*oper, regs[sp_idx], len) == 0)\n-\t{\n-\t  *oper += len;\n-\t  csky_insn.val[csky_insn.idx++] = sp_idx;\n-\t  return TRUE;\n-\t}\n-    }\n-  return FALSE;\n-}\n-\n-static int\n-csky_get_reg_val (char *str, int *len)\n-{\n-  long reg = 0;\n-  if (TOLOWER (str[0]) == 'r' && ISDIGIT (str[1]))\n-    {\n-      if (ISDIGIT (str[1]) && ISDIGIT (str[2]))\n-\t{\n-\t  reg = (str[1] - '0') * 10 + str[2] - '0';\n-\t  *len = 3;\n-\t}\n-      else if (ISDIGIT (str[1]))\n-\t{\n-\t  reg = str[1] - '0';\n-\t  *len = 2;\n-\t}\n-      else\n-\treturn -1;\n-    }\n-  else if (TOLOWER (str[0]) == 's' && TOLOWER (str[1]) == 'p'\n-\t   && !ISDIGIT (str[2]))\n-    {\n-      /* sp.  */\n-      if (IS_CSKY_V1 (mach_flag))\n-\treg = 0;\n-      else\n-\treg = 14;\n-      *len = 2;\n-    }\n-  else if (TOLOWER (str[0]) == 'g' && TOLOWER (str[1]) == 'b'\n-\t   && !ISDIGIT (str[2]))\n-    {\n-      /* gb.  */\n-      if (IS_CSKY_V1 (mach_flag))\n-\treg = 14;\n-      else\n-\treg = 28;\n-      *len = 2;\n-    }\n-  else if (TOLOWER (str[0]) == 'l' && TOLOWER (str[1]) == 'r'\n-\t   && !ISDIGIT (str[2]))\n-    {\n-      /* lr.  */\n-      reg = 15;\n-      *len = 2;\n-    }\n-  else if (TOLOWER (str[0]) == 't' && TOLOWER (str[1]) == 'l'\n-\t   && TOLOWER (str[2]) == 's' && !ISDIGIT (str[3]))\n-    {\n-      /* tls.  */\n-      if (IS_CSKY_V2 (mach_flag))\n-\treg = 31;\n-      else\n-\treturn -1;\n-      *len = 3;\n-    }\n-  else if (TOLOWER (str[0]) == 's' && TOLOWER (str[1]) == 'v'\n-\t   && TOLOWER (str[2]) == 'b' && TOLOWER (str[3]) == 'r')\n-    {\n-      if (IS_CSKY_V2 (mach_flag))\n-\treg = 30;\n-      else\n-\treturn -1;\n-      *len = 4;\n-    }\n-  else if (TOLOWER (str[0]) == 'a')\n-    {\n-      if (ISDIGIT (str[1]) && !ISDIGIT (str[2]))\n-\t{\n-\t  if (IS_CSKY_V1 (mach_flag) && (str[1] - '0') <= 5)\n-\t    /* a0 - a5.  */\n-\t    reg = 2 + str[1] - '0';\n-\t  else if (IS_CSKY_V2 (mach_flag) && (str[1] - '0') <= 3)\n-\t    /* a0 - a3.  */\n-\t    reg = str[1] - '0';\n-\t  else\n-\t    return -1;\n-\t  *len = 2;\n-\t}\n-    }\n-  else if (TOLOWER (str[0]) == 't')\n-    {\n-      if (IS_CSKY_V2 (mach_flag))\n-\t{\n-\t  reg = atoi (str + 1);\n-\t  if (reg > 9)\n-\t    return -1;\n-\n-\t  if (reg > 1)\n-\t    /* t2 - t9.  */\n-\t    reg = reg + 16;\n-\t  else\n-\t    /* t0 - t1.  */\n-\t    reg = reg + 12;\n-\t  *len = 2;\n-\t}\n-    }\n-  else if (TOLOWER (str[0]) == 'l')\n-    {\n-      if (str[1] < '0' || str[1] > '9')\n-\treturn -1;\n-      if (IS_CSKY_V2 (mach_flag))\n-\t{\n-\t  reg = atoi (str + 1);\n-\t  if (reg > 9)\n-\t    return -1;\n-\t  if (reg > 7)\n-\t    /* l8 - l9.  */\n-\t    reg = reg + 8;\n-\t  else\n-\t    /* l0 - l7.  */\n-\t    reg = reg + 4;\n-\t}\n-      else\n-\t{\n-\t  reg = atoi (str + 1);\n-\t  if (reg > 5)\n-\t    return -1;\n-\t  /* l0 - l6 -> r8 - r13.  */\n-\t  reg = reg + 8;\n-\t}\n-      *len = 2;\n-    }\n-  else\n-    return -1;\n \n-  /* Is register available?  */\n-  if (IS_CSKY_ARCH_801 (mach_flag))\n-    {\n-      /* CK801 register range is r0-r8 & r13-r15.  */\n-      if ((reg > 8 && reg < 13) || reg > 15)\n-\t{\n-\t  SET_ERROR_STRING (ERROR_REG_OVER_RANGE, reg);\n-\t  return -1;\n-\t}\n-    }\n-  else if (IS_CSKY_ARCH_802 (mach_flag))\n-    {\n-      /* CK802 register range is r0-r15 & r23-r25 & r30.  */\n-      if ((reg > 15 && reg < 23) || (reg > 25 && reg != 30))\n-\t{\n-\t  SET_ERROR_STRING (ERROR_REG_OVER_RANGE, reg);\n-\t  return -1;\n-\t}\n-    }\n-  else if (reg > 31 || reg < 0)\n+  len = sprintf (sp_name, \"r%d\", sp_idx);\n+  if (memcmp (*oper, sp_name, len) == 0)\n     {\n-      SET_ERROR_STRING (ERROR_REG_OVER_RANGE, reg);\n-      return -1;\n+      *oper += len;\n+      csky_insn.val[csky_insn.idx++] = sp_idx;\n+      return TRUE;\n     }\n \n-  return reg;\n+  return FALSE;\n }\n \n static int\n@@ -3168,7 +2967,6 @@ is_imm_within_range (char **oper, int min, int max)\n \te.X_add_number |= 0x80000000;\n       csky_insn.val[csky_insn.idx++] = e.X_add_number;\n     }\n-\n   else\n     SET_ERROR_STRING(ERROR_IMM_ILLEGAL, NULL);\n \n@@ -3217,6 +3015,8 @@ is_oimm_within_range (char **oper, int min, int max)\n \t}\n       csky_insn.val[csky_insn.idx++] = e.X_add_number - 1;\n     }\n+  else\n+    SET_ERROR_STRING (ERROR_IMM_ILLEGAL, NULL);\n \n   return ret;\n }\n@@ -3291,43 +3091,51 @@ parse_type_cpidx (char** oper)\n static bfd_boolean\n parse_type_cpreg (char** oper)\n {\n-  const char **regs = csky_cp_reg;\n-  int i;\n-  int len;\n+  expressionS e;\n \n-  for (i = 0; i < (int)(sizeof (csky_cp_reg) / sizeof (char *)); i++)\n+  if (strncasecmp (*oper, \"cpr\", 3) != 0)\n     {\n-      len = strlen (regs[i]);\n-      if (memcmp (*oper, regs[i], len) == 0 && !ISDIGIT (*(*oper + len)))\n-\t{\n-\t  *oper += len;\n-\t  csky_insn.val[csky_insn.idx++] = i;\n-\t  return TRUE;\n-\t}\n+      SET_ERROR_STRING(ERROR_CPREG_ILLEGAL, *oper);\n+      return FALSE;\n     }\n-  SET_ERROR_STRING (ERROR_CPREG_ILLEGAL, *oper);\n-  return FALSE;\n+\n+  *oper += 3;\n+\n+  *oper = parse_exp (*oper, &e);\n+  if (e.X_op != O_constant)\n+    {\n+      SET_ERROR_STRING(ERROR_CPREG_ILLEGAL, *oper);\n+      return FALSE;\n+    }\n+\n+  csky_insn.val[csky_insn.idx++] = e.X_add_number;\n+\n+  return TRUE;\n }\n \n static bfd_boolean\n parse_type_cpcreg (char** oper)\n {\n-  const char **regs;\n-  int i;\n-  int len;\n-  regs = csky_cp_creg;\n-  for (i = 0; i < (int)(sizeof (csky_cp_creg) / sizeof (char *)); i++)\n+  expressionS e;\n+\n+  if (strncasecmp (*oper, \"cpcr\", 4) != 0)\n     {\n-      len = strlen (regs[i]);\n-      if (memcmp (*oper, regs[i], len) == 0 && !ISDIGIT (*(*oper + len)))\n-\t{\n-\t  *oper += len;\n-\t  csky_insn.val[csky_insn.idx++] = i;\n-\t  return TRUE;\n-\t}\n+      SET_ERROR_STRING(ERROR_CPREG_ILLEGAL, *oper);\n+      return FALSE;\n     }\n-  SET_ERROR_STRING (ERROR_CPREG_ILLEGAL, *oper);\n-  return FALSE;\n+\n+  *oper += 4;\n+\n+  *oper = parse_exp (*oper, &e);\n+  if (e.X_op != O_constant)\n+    {\n+      SET_ERROR_STRING(ERROR_CPREG_ILLEGAL, *oper);\n+      return FALSE;\n+    }\n+\n+  csky_insn.val[csky_insn.idx++] = e.X_add_number;\n+\n+  return TRUE;\n }\n \n static bfd_boolean\n@@ -3830,6 +3638,10 @@ get_operand_value (struct csky_opcode_info *op,\n \telse\n \t  return FALSE;\n \n+    case OPRND_TYPE_IMM5b_LS:\n+      return is_imm_within_range (oper,\n+\t\t\t\t  0,\n+\t\t\t\t  csky_insn.val[csky_insn.idx - 1]);\n     case OPRND_TYPE_IMM5b_RORI:\n       {\n \tunsigned max_shift = IS_CSKY_V1 (mach_flag) ? 31 : 32;\n@@ -4769,6 +4581,7 @@ md_assemble (char *str)\n \t\t       (void *)error_state.arg1, (void *)error_state.arg1);\n       return;\n     }\n+  error_state.err_num = ERROR_NONE;\n \n   /* if this insn has work in opcode table, then do it.  */\n   if (csky_insn.opcode->work != NULL)\n@@ -6195,21 +6008,26 @@ csky_addc64 (void)\n   int reg1;\n   int reg2;\n   int reg3;\n+  char reg1_name[16] = {0};\n+  char reg3_name[16] = {0};\n \n   if (!get_macro_reg_vals (&reg1, &reg2, &reg3))\n     return;\n-  csky_macro_md_assemble (\"cmplt\",\n-\t\t\t  csky_general_reg[reg1],\n-\t\t\t  csky_general_reg[reg1],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"addc\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 1 : 0)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 1 : 0)],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"addc\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 0 : 1)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 0 : 1)],\n-\t\t\t  NULL);\n+\n+  sprintf (reg1_name, \"r%d\", reg1);\n+  csky_macro_md_assemble (\"cmplt\", reg1_name, reg1_name, NULL);\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 1 : 0));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 1 : 0));\n+  csky_macro_md_assemble (\"addc\", reg1_name, reg3_name, NULL);\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 0 : 1));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 0 : 1));\n+  csky_macro_md_assemble (\"addc\", reg1_name, reg3_name, NULL);\n   return;\n }\n \n@@ -6221,21 +6039,26 @@ csky_subc64 (void)\n   int reg1;\n   int reg2;\n   int reg3;\n+  char reg1_name[16] = {0};\n+  char reg3_name[16] = {0};\n \n   if (!get_macro_reg_vals (&reg1, &reg2, &reg3))\n     return;\n-  csky_macro_md_assemble (\"cmphs\",\n-\t\t\t  csky_general_reg[reg1],\n-\t\t\t  csky_general_reg[reg1],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"subc\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 1 : 0)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 1 : 0)],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"subc\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 0 : 1)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 0 : 1)],\n-\t\t\t  NULL);\n+\n+  sprintf (reg1_name, \"r%d\", reg1);\n+  csky_macro_md_assemble (\"cmphs\", reg1_name, reg1_name, NULL);\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 1 : 0));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 1 : 0));\n+  csky_macro_md_assemble (\"subc\", reg1_name, reg3_name, NULL);\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 0 : 1));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 0 : 1));\n+  csky_macro_md_assemble (\"subc\", reg1_name, reg3_name, NULL);\n   return;\n }\n \n@@ -6247,17 +6070,20 @@ csky_or64 (void)\n   int reg1;\n   int reg2;\n   int reg3;\n+  char reg1_name[16] = {0};\n+  char reg3_name[16] = {0};\n \n   if (!get_macro_reg_vals (&reg1, &reg2, &reg3))\n     return;\n-  csky_macro_md_assemble (\"or\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 1 : 0)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 1 : 0)],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"or\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 0 : 1)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 0 : 1)],\n-\t\t\t  NULL);\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 1 : 0));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 1 : 0));\n+  csky_macro_md_assemble (\"or\", reg1_name, reg3_name, NULL);\n+\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 0 : 1));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 0 : 1));\n+  csky_macro_md_assemble (\"or\", reg1_name, reg3_name, NULL);\n   return;\n }\n \n@@ -6269,17 +6095,21 @@ csky_xor64 (void)\n   int reg1;\n   int reg2;\n   int reg3;\n+  char reg1_name[16] = {0};\n+  char reg3_name[16] = {0};\n \n   if (!get_macro_reg_vals (&reg1, &reg2, &reg3))\n     return;\n-  csky_macro_md_assemble (\"xor\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 1 : 0)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 1 : 0)],\n-\t\t\t  NULL);\n-  csky_macro_md_assemble (\"xor\",\n-\t\t\t  csky_general_reg[reg1 + (target_big_endian ? 0 : 1)],\n-\t\t\t  csky_general_reg[reg3 + (target_big_endian ? 0 : 1)],\n-\t\t\t  NULL);\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 1 : 0));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 1 : 0));\n+  csky_macro_md_assemble (\"xor\", reg1_name, reg3_name, NULL);\n+  if (error_state.err_num != ERROR_NONE)\n+    return;\n+\n+  sprintf (reg1_name, \"r%d\", reg1 + (target_big_endian ? 0 : 1));\n+  sprintf (reg3_name, \"r%d\", reg3 + (target_big_endian ? 0 : 1));\n+  csky_macro_md_assemble (\"xor\", reg1_name, reg3_name, NULL);\n   return;\n }\n \n@@ -6463,11 +6293,10 @@ v1_work_fpu_fo (void)\n   inst = csky_insn.inst;\n \n   /* Now get greg and inst, we can write instruction to floating unit.  */\n-  sprintf (buff, \"lrw %s,0x%x\", csky_general_reg[greg], inst);\n+  sprintf (buff, \"lrw r%d,0x%x\", greg, inst);\n   md_assemble (buff);\n-  sprintf (buff, \"cpwir %s\", csky_general_reg[greg]);\n+  sprintf (buff, \"cpwir r%d\", greg);\n   md_assemble (buff);\n-\n   return FALSE;\n }\n \n@@ -6496,9 +6325,9 @@ v1_work_fpu_fo_fc (void)\n   inst = csky_insn.inst;\n \n   /* Now get greg and inst, we can write instruction to floating unit.  */\n-  sprintf (buff, \"lrw %s,0x%x\", csky_general_reg[greg], inst);\n+  sprintf (buff, \"lrw r%d,0x%x\", greg, inst);\n   md_assemble (buff);\n-  sprintf (buff, \"cpwir %s\", csky_general_reg[greg]);\n+  sprintf (buff, \"cpwir r%d\", greg);\n   md_assemble (buff);\n   sprintf (buff, \"cprc\");\n   md_assemble (buff);\n@@ -6517,7 +6346,7 @@ v1_work_fpu_write (void)\n   freg = csky_insn.val[1];\n \n   /* Now get greg and freg, we can write instruction to floating unit.  */\n-  sprintf (buff, \"cpwgr %s,%s\", csky_general_reg[greg], csky_cp_reg[freg]);\n+  sprintf (buff, \"cpwgr r%d,cpr%d\", greg, freg);\n   md_assemble (buff);\n \n   return FALSE;\n@@ -6533,7 +6362,7 @@ v1_work_fpu_read (void)\n   greg = csky_insn.val[0];\n   freg = csky_insn.val[1];\n   /* Now get greg and freg, we can write instruction to floating unit.  */\n-  sprintf (buff, \"cprgr %s,%s\", csky_general_reg[greg], csky_cp_reg[freg]);\n+  sprintf (buff, \"cprgr r%d,cpr%d\", greg, freg);\n   md_assemble (buff);\n \n   return FALSE;\n@@ -6556,20 +6385,15 @@ v1_work_fpu_writed (void)\n     }\n   /* Now get greg and freg, we can write instruction to floating unit.  */\n   if (target_big_endian)\n-    sprintf (buff, \"cpwgr %s,%s\",\n-\t     csky_general_reg[greg + 1], csky_cp_reg[freg]);\n+    sprintf (buff, \"cpwgr r%d,cpr%d\", greg + 1, freg);\n   else\n-    sprintf (buff, \"cpwgr %s,%s\",\n-\t     csky_general_reg[greg], csky_cp_reg[freg]);\n+    sprintf (buff, \"cpwgr r%d,cpr%d\", greg, freg);\n   md_assemble (buff);\n   if (target_big_endian)\n-    sprintf (buff, \"cpwgr %s,%s\",\n-\t     csky_general_reg[greg], csky_cp_reg[freg + 1]);\n+    sprintf (buff, \"cpwgr r%d,cpr%d\", greg, freg + 1);\n   else\n-    sprintf (buff, \"cpwgr %s,%s\",\n-\t     csky_general_reg[greg + 1], csky_cp_reg[freg + 1]);\n+    sprintf (buff, \"cpwgr r%d,cpr%d\", greg+1, freg + 1);\n   md_assemble (buff);\n-\n   return FALSE;\n }\n \n@@ -6590,18 +6414,14 @@ v1_work_fpu_readd (void)\n     }\n   /* Now get greg and freg, we can write instruction to floating unit.  */\n   if (target_big_endian)\n-    sprintf (buff, \"cprgr %s,%s\",\n-\t     csky_general_reg[greg + 1], csky_cp_reg[freg]);\n+    sprintf (buff, \"cprgr r%d,cpr%d\", greg+1, freg);\n   else\n-    sprintf (buff, \"cprgr %s,%s\",\n-\t     csky_general_reg[greg], csky_cp_reg[freg]);\n+    sprintf (buff, \"cprgr r%d,cpr%d\", greg, freg);\n   md_assemble (buff);\n   if (target_big_endian)\n-    sprintf (buff, \"cprgr %s,%s\",\n-\t     csky_general_reg[greg], csky_cp_reg[freg + 1]);\n+    sprintf (buff, \"cprgr r%d,cpr%d\", greg, freg + 1);\n   else\n-    sprintf (buff, \"cprgr %s,%s\",\n-\t     csky_general_reg[greg + 1], csky_cp_reg[freg + 1]);\n+    sprintf (buff, \"cprgr r%d,cpr%d\", greg+1, freg + 1);\n   md_assemble (buff);\n \n   return FALSE;\n@@ -7677,6 +7497,69 @@ float_work_fpuv3_fstore(void)\n   return TRUE;\n }\n \n+bfd_boolean\n+v2_work_addc (void)\n+{\n+  int reg1;\n+  int reg2;\n+  int reg3 = 0;\n+  int is_16_bit = 0;\n+\n+  reg1 = csky_insn.val[0];\n+  reg2 = csky_insn.val[1];\n+  if (csky_insn.number == 2)\n+    {\n+      if (reg1 > 15 || reg2 > 15)\n+\t{\n+\t  is_16_bit = 0;\n+\t  reg3 = reg1;\n+\t}\n+      else\n+\tis_16_bit = 1;\n+    }\n+  else\n+    {\n+      reg3 = csky_insn.val[2];\n+      if (reg1 > 15 || reg2 > 15 || reg3 > 15)\n+\tis_16_bit = 0;\n+      else if (reg1 == reg2 || reg1 == reg3)\n+\t{\n+\t  is_16_bit = 1;\n+\t  reg2 = (reg1 == reg2) ? reg3 : reg2;\n+\t}\n+      else\n+\tis_16_bit = 0;\n+    }\n+\n+  if (is_16_bit\n+      && csky_insn.flag_force != INSN_OPCODE32F)\n+    {\n+      csky_insn.isize = 2;\n+      csky_insn.inst = csky_insn.opcode->op16[0].opcode\n+\t| (reg1 << 6) | (reg2 << 2);\n+    }\n+  else if (csky_insn.flag_force != INSN_OPCODE16F)\n+    {\n+      csky_insn.isize = 4;\n+      csky_insn.inst = csky_insn.opcode->op32[0].opcode\n+\t| (reg1 << 0) | (reg2 << 16) | (reg3 << 21);\n+    }\n+  else\n+    {\n+      SET_ERROR_INTEGER (ERROR_REG_OVER_RANGE, reg1 > 15 ? reg1 : reg2);\n+      csky_show_error (ERROR_REG_OVER_RANGE, 0, 0, NULL);\n+    }\n+\n+  /* Generate relax or reloc if necessary.  */\n+  csky_generate_frags ();\n+  /* Write inst to frag.  */\n+  csky_write_insn (csky_insn.output,\n+\t\t   csky_insn.inst,\n+\t\t   csky_insn.isize);\n+\n+  return TRUE;\n+}\n+\n /* The following are for assembler directive handling.  */\n \n /* Helper function to adjust constant pool counts when we emit a"
    },
    {
      "sha": "af9acb50da82d3187243684979e99a0e65177a14",
      "filename": "gas/testsuite/gas/csky/all.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/all.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/all.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/csky/all.d?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -20,7 +20,7 @@ Disassembly of section \\.text:\n \\s*[0-9a-f]*:\\s*0032\\s*mvcv\\s*r2\n \\s*[0-9a-f]*:\\s*0042\\s*ldq\\s*r4-r7, \\(r2\\)\n \\s*[0-9a-f]*:\\s*0052\\s*stq\\s*r4-r7, \\(r2\\)\n-\\s*[0-9a-f]*:\\s*0061\\s*ldm\\s*r1-r15, \\(sp\\)\n+\\s*[0-9a-f]*:\\s*0061\\s*ldm\\s*r1-r15, \\(r0\\)\n \\s*[0-9a-f]*:\\s*0082\\s*dect\\s*r2, r2, 1\n \\s*[0-9a-f]*:\\s*0092\\s*decf\\s*r2, r2, 1\n \\s*[0-9a-f]*:\\s*00a2\\s*inct\\s*r2, r2, 1"
    },
    {
      "sha": "bb104a7bc09166b0c5957ca421fcfc6f3c101ef1",
      "filename": "gas/testsuite/gas/csky/cskyv2_all.d",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/cskyv2_all.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/cskyv2_all.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/csky/cskyv2_all.d?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -14,10 +14,10 @@ Disassembly of section \\.text:\n \\s*[0-9a-f]*:\\s*c6824848\\s*lsri\\s*r8,\\s*r2,\\s*20\n \\s*[0-9a-f]*:\\s*5227\\s*asri\\s*r1,\\s*r2,\\s*7\n \\s*[0-9a-f]*:\\s*6049\\s*addc\\s*r1,\\s*r2\n-\\s*[0-9a-f]*:\\s*c4310051\\s*addc\\s*r17,\\s*r17,\\s*r1\n+\\s*[0-9a-f]*:\\s*c6210051\\s*addc\\s*r17,\\s*r1,\\s*r17\n \\s*[0-9a-f]*:\\s*c4620041\\s*addc\\s*r1,\\s*r2,\\s*r3\n \\s*[0-9a-f]*:\\s*6049\\s*addc\\s*r1,\\s*r2\n-\\s*[0-9a-f]*:\\s*c6210041\\s*addc\\s*r1,\\s*r1,\\s*r17\n+\\s*[0-9a-f]*:\\s*c4310041\\s*addc\\s*r1,\\s*r17,\\s*r1\n \\s*[0-9a-f]*:\\s*c7d20052\\s*addc\\s*r18,\\s*r18,\\s*r30\n \\s*[0-9a-f]*:\\s*604b\\s*subc\\s*r1,\\s*r2\n \\s*[0-9a-f]*:\\s*c4310111\\s*subc\\s*r17,\\s*r17,\\s*r1\n@@ -67,23 +67,23 @@ Disassembly of section \\.text:\n \\s*[0-9a-f]*:\\s*c4419421\\s*mulsw\\s*r1,\\s*r1,\\s*r2\n \\s*[0-9a-f]*:\\s*8344\\s*ld.b\\s*r2,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*8b42\\s*ld.h\\s*r2,\\s*\\(r3,\\s*0x4\\)\n-\\s*[0-9a-f]*:\\s*9841\\s*ld.w\\s*r2,\\s*\\(sp,\\s*0x4\\)\n+\\s*[0-9a-f]*:\\s*9841\\s*ld.w\\s*r2,\\s*\\(r14,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*a344\\s*st.b\\s*r2,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*ab42\\s*st.h\\s*r2,\\s*\\(r3,\\s*0x4\\)\n-\\s*[0-9a-f]*:\\s*b841\\s*st.w\\s*r2,\\s*\\(sp,\\s*0x4\\)\n+\\s*[0-9a-f]*:\\s*b841\\s*st.w\\s*r2,\\s*\\(r14,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*d9030004\\s*ld.b\\s*r8,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*d8481002\\s*ld.h\\s*r2,\\s*\\(r8,\\s*0x4\\)\n-\\s*[0-9a-f]*:\\s*9841\\s*ld.w\\s*r2,\\s*\\(sp,\\s*0x4\\)\n+\\s*[0-9a-f]*:\\s*9841\\s*ld.w\\s*r2,\\s*\\(r14,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*dc480004\\s*st.b\\s*r2,\\s*\\(r8,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*dc481002\\s*st.h\\s*r2,\\s*\\(r8,\\s*0x4\\)\n-\\s*[0-9a-f]*:\\s*dd0e2001\\s*st.w\\s*r8,\\s*\\(sp,\\s*0x4\\)\n+\\s*[0-9a-f]*:\\s*dd0e2001\\s*st.w\\s*r8,\\s*\\(r14,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*d8434003\\s*ld.bs\\s*r2,\\s*\\(r3,\\s*0x3\\)\n \\s*[0-9a-f]*:\\s*d8433001\\s*ld.d\\s*r2,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*dc433001\\s*st.d\\s*r2,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*dc437001\\s*stex.w\\s*r2,\\s*\\(r3,\\s*0x4\\)\n \\s*[0-9a-f]*:\\s*d8437001\\s*ldex.w\\s*r2,\\s*\\(r3,\\s*0x4\\)\n-\\s*[0-9a-f]*:\\s*140c\\s*addi\\s*sp,\\s*sp,\\s*48\n-\\s*[0-9a-f]*:\\s*1b01\\s*addi\\s*r3,\\s*sp,\\s*4\n+\\s*[0-9a-f]*:\\s*140c\\s*addi\\s*r14,\\s*r14,\\s*48\n+\\s*[0-9a-f]*:\\s*1b01\\s*addi\\s*r3,\\s*r14,\\s*4\n \\s*[0-9a-f]*:\\s*2113\\s*addi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*2113\\s*addi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*e6b50013\\s*addi\\s*r21,\\s*r21,\\s*20\n@@ -92,16 +92,16 @@ Disassembly of section \\.text:\n \\s*[0-9a-f]*:\\s*e5040000\\s*addi\\s*r8,\\s*r4,\\s*1\n \\s*[0-9a-f]*:\\s*e4240008\\s*addi\\s*r1,\\s*r4,\\s*9\n \\s*[0-9a-f]*:\\s*cc3c0008\\s*addi\\s*r1,\\s*r28,\\s*9\n-\\s*[0-9a-f]*:\\s*e46e0000\\s*addi\\s*r3,\\s*sp,\\s*1\n-\\s*[0-9a-f]*:\\s*e46e03ff\\s*addi\\s*r3,\\s*sp,\\s*1024\n-\\s*[0-9a-f]*:\\s*e5ce0032\\s*addi\\s*sp,\\s*sp,\\s*51\n-\\s*[0-9a-f]*:\\s*e5ce01ff\\s*addi\\s*sp,\\s*sp,\\s*512\n+\\s*[0-9a-f]*:\\s*e46e0000\\s*addi\\s*r3,\\s*r14,\\s*1\n+\\s*[0-9a-f]*:\\s*e46e03ff\\s*addi\\s*r3,\\s*r14,\\s*1024\n+\\s*[0-9a-f]*:\\s*e5ce0032\\s*addi\\s*r14,\\s*r14,\\s*51\n+\\s*[0-9a-f]*:\\s*e5ce01ff\\s*addi\\s*r14,\\s*r14,\\s*512\n \\s*[0-9a-f]*:\\s*2113\\s*addi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*5c42\\s*addi\\s*r2,\\s*r4,\\s*1\n \\s*[0-9a-f]*:\\s*e4440000\\s*addi\\s*r2,\\s*r4,\\s*1\n-\\s*[0-9a-f]*:\\s*e46e03ff\\s*addi\\s*r3,\\s*sp,\\s*1024\n-\\s*[0-9a-f]*:\\s*e5ce0032\\s*addi\\s*sp,\\s*sp,\\s*51\n-\\s*[0-9a-f]*:\\s*142c\\s*subi\\s*sp,\\s*sp,\\s*48\n+\\s*[0-9a-f]*:\\s*e46e03ff\\s*addi\\s*r3,\\s*r14,\\s*1024\n+\\s*[0-9a-f]*:\\s*e5ce0032\\s*addi\\s*r14,\\s*r14,\\s*51\n+\\s*[0-9a-f]*:\\s*142c\\s*subi\\s*r14,\\s*r14,\\s*48\n \\s*[0-9a-f]*:\\s*2913\\s*subi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*2913\\s*subi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*e6b51013\\s*subi\\s*r21,\\s*r21,\\s*20\n@@ -110,12 +110,12 @@ Disassembly of section \\.text:\n \\s*[0-9a-f]*:\\s*e5041000\\s*subi\\s*r8,\\s*r4,\\s*1\n \\s*[0-9a-f]*:\\s*e4241008\\s*subi\\s*r1,\\s*r4,\\s*9\n \\s*[0-9a-f]*:\\s*e43c1008\\s*subi\\s*r1,\\s*r28,\\s*9\n-\\s*[0-9a-f]*:\\s*e5ce1032\\s*subi\\s*sp,\\s*sp,\\s*51\n-\\s*[0-9a-f]*:\\s*e5ce11ff\\s*subi\\s*sp,\\s*sp,\\s*512\n+\\s*[0-9a-f]*:\\s*e5ce1032\\s*subi\\s*r14,\\s*r14,\\s*51\n+\\s*[0-9a-f]*:\\s*e5ce11ff\\s*subi\\s*r14,\\s*r14,\\s*512\n \\s*[0-9a-f]*:\\s*2913\\s*subi\\s*r1,\\s*20\n \\s*[0-9a-f]*:\\s*5c43\\s*subi\\s*r2,\\s*r4,\\s*1\n \\s*[0-9a-f]*:\\s*e4441000\\s*subi\\s*r2,\\s*r4,\\s*1\n-\\s*[0-9a-f]*:\\s*e5ce1032\\s*subi\\s*sp,\\s*sp,\\s*51\n+\\s*[0-9a-f]*:\\s*e5ce1032\\s*subi\\s*r14,\\s*r14,\\s*51\n \\s*[0-9a-f]*:\\s*60c2\\s*subu\\s*r3,\\s*r0\n \\s*[0-9a-f]*:\\s*6202\\s*subu\\s*r8,\\s*r0\n \\s*[0-9a-f]*:\\s*c4030089\\s*subu\\s*r9,\\s*r3,\\s*r0"
    },
    {
      "sha": "6db5b202bfb8c7663450b169197ae6e99d3dd336",
      "filename": "gas/testsuite/gas/csky/cskyv2_all.s",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/cskyv2_all.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/cskyv2_all.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/csky/cskyv2_all.s?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -76,8 +76,8 @@ all:\n    st.d    r2, (r3, 4)\n    stex.w   r2, (r3, 4)\n    ldex.w   r2, (r3, 4)\n-   addi    sp,  sp, 0x30\n-   addi    r3,  sp, 0x4\n+   addi    r14,  r14, 0x30\n+   addi    r3,  r14, 0x4\n    addi    r1,  20\n    addi    r1,  r1, 20\n    addi    r21, 20\n@@ -86,16 +86,16 @@ all:\n    addi    r8,  r4, 1\n    addi    r1,  r4, 9\n    addi    r1,  r28, 9\n-   addi    r3,  sp, 0x1\n-   addi    r3,  sp, 0x400\n-   addi    sp,  sp, 0x33\n-   addi    sp,  sp, 0x200\n+   addi    r3,  r14, 0x1\n+   addi    r3,  r14, 0x400\n+   addi    r14,  r14, 0x33\n+   addi    r14,  r14, 0x200\n    addi16  r1,  20\n    addi16  r2,  r4, 1\n    addi32  r2,  r4, 1\n-   addi32  r3,  sp, 0x400\n-   addi32  sp,  sp, 0x33\n-   subi    sp,  sp, 0x30\n+   addi32  r3,  r14, 0x400\n+   addi32  r14,  r14, 0x33\n+   subi    r14,  r14, 0x30\n    subi    r1,  20\n    subi    r1,  r1, 20\n    subi    r21, 20\n@@ -104,12 +104,12 @@ all:\n    subi    r8,  r4, 1\n    subi    r1,  r4, 9\n    subi    r1,  r28, 9\n-   subi    sp,  sp, 0x33\n-   subi    sp,  sp, 0x200\n+   subi    r14,  r14, 0x33\n+   subi    r14,  r14, 0x200\n    subi16  r1,  20\n    subi16  r2,  r4, 1\n    subi32  r2,  r4, 1\n-   subi32  sp,  sp, 0x33\n+   subi32  r14,  r14, 0x33\n    sub     r3, r0\n    sub     r8, r0\n    sub     r9, r3, r0"
    },
    {
      "sha": "adaa21cd77c66de00aeefae34c80f7bf004f3eb8",
      "filename": "gas/testsuite/gas/csky/trust.d",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/trust.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/trust.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/csky/trust.d?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -7,11 +7,10 @@\n Disassembly of section \\.text:\n #...\n \\s*[0-9a-f]*:\\s*c0003c20\\s*wsc\n-\\s*[0-9a-f]*:\\s*c0006024\\s*mfcr\\s*r4,\\s*cr<0,\\s*0>\n-\\s*[0-9a-f]*:\\s*c0156024\\s*mfcr\\s*r4,\\s*cr<21,\\s*0>\n-\\s*[0-9a-f]*:\\s*c004642b\\s*mtcr\\s*r4,\\s*cr<11,\\s*0>\n-\\s*[0-9a-f]*:\\s*c0046428\\s*mtcr\\s*r4,\\s*cr<8,\\s*0>\n-\\s*[0-9a-f]*:\\s*c0096024\\s*mfcr\\s*r4,\\s*cr<9,\\s*0>\n+\\s*[0-9a-f]*:\\s*c0006024\\s*mfcr\\s*r4,\\s*cr<0,\\s+0>\n+\\s*[0-9a-f]*:\\s*c004642b\\s*mtcr\\s*r4,\\s*cr<11,\\s+0>\n+\\s*[0-9a-f]*:\\s*c0646428\\s*mtcr\\s*r4,\\s*cr<8,\\s+3>\n+\\s*[0-9a-f]*:\\s*c0696024\\s*mfcr\\s*r4,\\s*cr<9,\\s+3>\n \\s*[0-9a-f]*:\\s*c2007420\\s*psrset\\s*sie\n \\s*[0-9a-f]*:\\s*c2007020\\s*psrclr\\s*sie\n #..."
    },
    {
      "sha": "862fa5bc94a2fccee40ec6a99b5e30b4b682c711",
      "filename": "gas/testsuite/gas/csky/trust.s",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/trust.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/gas/testsuite/gas/csky/trust.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/csky/trust.s?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -1,7 +1,6 @@\n TRUST:\n      wsc\n      mfcr r4, psr\n-     mfcr r4, rid\n      mtcr r4, gcr\n      mtcr r4, sedcr\n      mfcr r4, sepcr"
    },
    {
      "sha": "2dd9d35532a222276986b72320dbaac22dc65df4",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -1,3 +1,37 @@\n+2020-09-17 Cooper Qu <<cooper.qu@linux.alibaba.com>>\n+\n+\topcodes/\n+\t* csky-dis.c (using_abi): New.\n+\t(parse_csky_dis_options): New function.\n+\t(get_gr_name): New function.\n+\t(get_cr_name): New function.\n+\t(csky_output_operand): Use get_gr_name and get_cr_name to\n+\tdisassemble and add handle of OPRND_TYPE_IMM5b_LS.\n+\t(print_insn_csky): Parse disassembler options.\n+\t* opcodes/csky-opc.h (OPRND_TYPE_IMM5b_LS): New enum.\n+\t(GENARAL_REG_BANK): Define.\n+\t(REG_SUPPORT_ALL): Define.\n+\t(REG_SUPPORT_ALL): New.\n+\t(ASH): Define.\n+\t(REG_SUPPORT_A): Define.\n+\t(REG_SUPPORT_B): Define.\n+\t(REG_SUPPORT_C): Define.\n+\t(REG_SUPPORT_D): Define.\n+\t(REG_SUPPORT_E): Define.\n+\t(csky_abiv1_general_regs): New.\n+\t(csky_abiv1_control_regs): New.\n+\t(csky_abiv2_general_regs): New.\n+\t(csky_abiv2_control_regs): New.\n+\t(get_register_name): New function.\n+\t(get_register_number): New function.\n+\t(csky_get_general_reg_name): New function.\n+\t(csky_get_general_regno): New function.\n+\t(csky_get_control_reg_name): New function.\n+\t(csky_get_control_regno): New function.\n+\t(csky_v2_opcodes): Prefer two oprerans format for bclri and\n+\tbseti, strengthen the operands legality check of addc, zext\n+\tand sext.\n+\n 2020-09-23  Lili Cui  <lili.cui@intel.com>\n \n \t* i386-dis.c (enum): Add REG_0F38D8_PREFIX_1,"
    },
    {
      "sha": "67fb4ee87ed669d639060d961decf6b512f52e20",
      "filename": "opcodes/csky-dis.c",
      "status": "modified",
      "additions": 84,
      "deletions": 64,
      "changes": 148,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/csky-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/csky-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/csky-dis.c?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -60,6 +60,7 @@ struct csky_dis_info\n enum sym_type last_type;\n int last_map_sym = 1;\n bfd_vma last_map_addr = 0;\n+int using_abi = 0;\n \n /* Only for objdump tool.  */\n #define INIT_MACH_FLAG  0xffffffff\n@@ -262,6 +263,40 @@ csky_get_disassembler (bfd *abfd)\n    return print_insn_csky;\n }\n \n+/* Parse the string of disassembler options.  */\n+static void\n+parse_csky_dis_options (const char *opts_in)\n+{\n+  char *opts = xstrdup (opts_in);\n+  char *opt = opts;\n+  char *opt_end = opts;\n+\n+  for (; opt_end != NULL; opt = opt_end + 1)\n+    {\n+      if ((opt_end = strchr (opt, ',')) != NULL)\n+\t*opt_end = 0;\n+      if (strcmp (opt, \"abi-names\") == 0)\n+\tusing_abi = 1;\n+      else\n+\tfprintf (stderr,\n+\t\t \"unrecognized disassembler option: %s\", opt);\n+    }\n+}\n+\n+/* Get general register name.  */\n+static const char *\n+get_gr_name (int regno)\n+{\n+  return csky_get_general_reg_name (mach_flag & CSKY_ABI_MASK, regno, using_abi);\n+}\n+\n+/* Get control register name.  */\n+static const char *\n+get_cr_name (unsigned int regno, int bank)\n+{\n+  return csky_get_control_reg_name (mach_flag & CSKY_ABI_MASK, bank, regno, using_abi);\n+}\n+\n static int\n csky_output_operand (char *str, struct operand const *oprnd,\n \t\t     CSKY_INST_TYPE inst, int reloc ATTRIBUTE_UNUSED)\n@@ -289,30 +324,10 @@ csky_output_operand (char *str, struct operand const *oprnd,\n   switch (oprnd->type)\n     {\n     case OPRND_TYPE_CTRLREG:\n-      if (IS_CSKY_V1 (mach_flag))\n-\t{\n-\t  /* In V1 only cr0-cr12 have alias names.  */\n-\t  if (value <= 12)\n-\t    strcat (str, csky_ctrl_regs[value].name);\n-\t  /* Others using crn(n > 12).  */\n-\t  else if (value <= 30)\n-\t    {\n-\t      sprintf (buf, \"cr%d\", (int)value);\n-\t      strcat (str, buf);\n-\t    }\n-\t  else\n-\t    return -1;\n-\t}\n-      else\n-\t{\n-\t  int sel;\n-\t  int crx;\n-\t  sel = value >> 5;\n-\t  crx = value & 0x1f;\n-\t  sprintf (buf, \"cr<%d, %d>\", crx, sel);\n-\t  strcat (str, buf);\n-\t}\n-      break;\n+\tif (IS_CSKY_V1(mach_flag) && ((value & 0x1f) == 0x1f))\n+\t  return -1;\n+\tstrcat (str, get_cr_name((value & 0x1f), (value >> 5)));\n+\tbreak;\n     case OPRND_TYPE_DUMMY_REG:\n       mask = dis_info.opinfo->oprnd.oprnds[0].mask;\n       value = inst & mask;\n@@ -323,21 +338,18 @@ csky_output_operand (char *str, struct operand const *oprnd,\n \t    bit++;\n \t  }\n       value = result;\n-      strcat (str, csky_general_reg[value]);\n+      strcat (str, get_gr_name (value));\n       break;\n     case OPRND_TYPE_GREG0_7:\n     case OPRND_TYPE_GREG0_15:\n     case OPRND_TYPE_GREG16_31:\n     case OPRND_TYPE_REGnsplr:\n     case OPRND_TYPE_AREG:\n-      if (IS_CSKY_V2 (mach_flag) && value == 14)\n-\tstrcat (str, \"sp\");\n-      else\n-\tstrcat (str, csky_general_reg[value]);\n-      dis_info.value = value;\n+      strcat (str, get_gr_name (value));\n       break;\n     case OPRND_TYPE_CPREG:\n-      strcat (str, csky_cp_reg[value]);\n+      sprintf (buf, \"cpr%d\", (int)value);\n+      strcat (str, buf);\n       break;\n     case OPRND_TYPE_FREG:\n       sprintf (buf, \"fr%d\", (int)value);\n@@ -349,10 +361,12 @@ csky_output_operand (char *str, struct operand const *oprnd,\n       strcat (str, buf);\n       break;\n     case OPRND_TYPE_CPCREG:\n-      strcat (str, csky_cp_creg[value]);\n+      sprintf (buf, \"cpcr%d\", (int)value);\n+      strcat (str, buf);\n       break;\n     case OPRND_TYPE_CPIDX:\n-      strcat (str, csky_cp_idx[value]);\n+      sprintf (buf, \"cp%d\", (int)value);\n+      strcat (str, buf);\n       break;\n     case OPRND_TYPE_IMM2b_JMPIX:\n       value = (value + 2) << 3;\n@@ -419,6 +433,7 @@ csky_output_operand (char *str, struct operand const *oprnd,\n     case OPRND_TYPE_IMM2b:\n     case OPRND_TYPE_IMM4b:\n     case OPRND_TYPE_IMM5b:\n+    case OPRND_TYPE_IMM5b_LS:\n     case OPRND_TYPE_IMM7b:\n     case OPRND_TYPE_IMM8b:\n     case OPRND_TYPE_IMM12b:\n@@ -734,14 +749,19 @@ csky_output_operand (char *str, struct operand const *oprnd,\n     case OPRND_TYPE_REGLIST_DASH:\n       if (IS_CSKY_V1 (mach_flag))\n \t{\n-\t  strcat (str, csky_general_reg[value]);\n-\t  strcat (str, \"-r15\");\n+\t  sprintf (buf, \"%s-r15\", get_gr_name (value));\n+\t  strcat (str, buf);\n \t}\n       else\n \t{\n-\t  strcat (str, csky_general_reg[value >> 5]);\n+\t  if ((value & 0x1f) + (value >> 5) > 31)\n+\t    {\n+\t      ret = -1;\n+\t      break;\n+\t    }\n+\t  strcat (str, get_gr_name ((value >> 5)));\n \t  strcat (str, \"-\");\n-\t  strcat (str, csky_general_reg[(value & 0x1f) + (value >> 5)]);\n+\t  strcat (str, get_gr_name ((value & 0x1f) + (value >> 5)));\n \t}\n       break;\n     case OPRND_TYPE_PSR_BITS_LIST:\n@@ -776,33 +796,25 @@ csky_output_operand (char *str, struct operand const *oprnd,\n       }\n     case OPRND_TYPE_REGbsp:\n       if (IS_CSKY_V1 (mach_flag))\n-\tstrcat (str, \"(sp)\");\n+\tsprintf(buf, \"(%s)\", get_gr_name (0));\n       else\n-\tstrcat (str, \"(sp)\");\n+\tsprintf(buf, \"(%s)\", get_gr_name (14));\n+      strcat (str, buf);\n       break;\n     case OPRND_TYPE_REGsp:\n       if (IS_CSKY_V1 (mach_flag))\n-\tstrcat (str, \"sp\");\n+\tstrcat (str, get_gr_name (0));\n       else\n-\tstrcat (str, \"sp\");\n+\tstrcat (str, get_gr_name (14));\n       break;\n     case OPRND_TYPE_REGnr4_r7:\n     case OPRND_TYPE_AREG_WITH_BRACKET:\n-      if (IS_CSKY_V1 (mach_flag) && (value < 4 || value > 7))\n-\t{\n-\t  strcat (str, \"(\");\n-\t  strcat (str, csky_general_reg[value]);\n-\t  strcat (str, \")\");\n-\t}\n-      else\n-\t{\n-\t  strcat (str, \"(\");\n-\t  strcat (str, csky_general_reg[value]);\n-\t  strcat (str, \")\");\n-\t}\n+      strcat (str, \"(\");\n+      strcat (str, get_gr_name (value));\n+      strcat (str, \")\");\n       break;\n     case OPRND_TYPE_AREG_WITH_LSHIFT:\n-      strcat (str, csky_general_reg[value >> 5]);\n+      strcat (str, get_gr_name (value >> 5));\n       strcat (str, \" << \");\n       if ((value & 0x1f) == 0x1)\n \tstrcat (str, \"0\");\n@@ -814,7 +826,7 @@ csky_output_operand (char *str, struct operand const *oprnd,\n \tstrcat (str, \"3\");\n       break;\n     case OPRND_TYPE_AREG_WITH_LSHIFT_FPU:\n-      strcat (str, csky_general_reg[value >> 2]);\n+      strcat (str, get_gr_name (value >> 2));\n       strcat (str, \" << \");\n       if ((value & 0x3) == 0x0)\n \tstrcat (str, \"0\");\n@@ -835,35 +847,36 @@ csky_output_operand (char *str, struct operand const *oprnd,\n       }\n     case OPRND_TYPE_REGr4_r7:\n       if (IS_CSKY_V1 (mach_flag))\n-\tstrcat (str, \"r4-r7\");\n+\tsprintf (buf, \"%s-%s\", get_gr_name (4), get_gr_name (7));\n+\tstrcat (str, buf);\n       break;\n     case OPRND_TYPE_CONST1:\n       strcat (str, \"1\");\n       break;\n     case OPRND_TYPE_REG_r1a:\n     case OPRND_TYPE_REG_r1b:\n-      strcat (str, \"r1\");\n+      strcat (str, get_gr_name (1));\n       break;\n     case OPRND_TYPE_REG_r28:\n-      strcat (str, \"r28\");\n+      strcat (str, get_gr_name (28));\n       break;\n     case OPRND_TYPE_REGLIST_DASH_COMMA:\n       /* 16-bit reglist.  */\n       if (value & 0xf)\n \t{\n-\t  strcat (str, \"r4\");\n+\t  strcat (str, get_gr_name (4));\n \t  if ((value & 0xf) > 1)\n \t    {\n \t      strcat (str, \"-\");\n-\t      strcat (str, csky_general_reg[(value & 0xf) + 3]);\n+\t      strcat (str, get_gr_name ((value & 0xf) + 3));\n \t    }\n \t  if (value & ~0xf)\n \t    strcat (str, \", \");\n \t}\n       if (value & 0x10)\n \t{\n \t  /* r15.  */\n-\t  strcat (str, \"r15\");\n+\t  strcat (str, get_gr_name (15));\n \t  if (value & ~0x1f)\n \t    strcat (str, \", \");\n \t}\n@@ -873,18 +886,18 @@ csky_output_operand (char *str, struct operand const *oprnd,\n \t  value >>= 5;\n \t  if (value & 0x3)\n \t    {\n-\t      strcat (str, \"r16\");\n+\t      strcat (str, get_gr_name (16));\n \t      if ((value & 0x7) > 1)\n \t\t{\n \t\t  strcat (str, \"-\");\n-\t\t  strcat (str, csky_general_reg[(value & 0xf) + 15]);\n+\t\t  strcat (str, get_gr_name ((value & 0x7) + 15));\n \t\t}\n \t      if (value & ~0x7)\n \t\tstrcat (str, \", \");\n \t      }\n \t  if (value & 0x8)\n \t    /* r15.  */\n-\t    strcat (str, \"r28\");\n+\t    strcat (str, get_gr_name (28));\n \t}\n       break;\n     case OPRND_TYPE_UNCOND10b:\n@@ -1027,6 +1040,13 @@ print_insn_csky (bfd_vma memaddr, struct disassemble_info *info)\n   dis_info.mem = memaddr;\n   dis_info.info = info;\n   dis_info.need_output_symbol = 0;\n+\n+  if (info->disassembler_options)\n+    {\n+      parse_csky_dis_options (info->disassembler_options);\n+      info->disassembler_options = NULL;\n+    }\n+\n   if (mach_flag != INIT_MACH_FLAG && mach_flag != BINARY_MACH_FLAG)\n     info->mach = mach_flag;\n   else if (mach_flag == INIT_MACH_FLAG)"
    },
    {
      "sha": "8cd0d1e2a2d1b1523833b7eee80719feedda9e47",
      "filename": "opcodes/csky-opc.h",
      "status": "modified",
      "additions": 413,
      "deletions": 116,
      "changes": 529,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/csky-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afdcafe89118cee761f9bf67ea1b1efc29311300/opcodes/csky-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/csky-opc.h?ref=afdcafe89118cee761f9bf67ea1b1efc29311300",
      "patch": "@@ -20,6 +20,7 @@\n    02110-1301, USA.  */\n \n #include \"opcode/csky.h\"\n+#include \"safe-ctype.h\"\n \n #define OP_TABLE_NUM    2\n #define MAX_OPRND_NUM   5\n@@ -128,6 +129,8 @@ enum operand_type\n   /* OPRND_TYPE_IMM5b_a_b means: Immediate in (a, b).  */\n   OPRND_TYPE_IMM5b_1_31,\n   OPRND_TYPE_IMM5b_7_31,\n+  /* OPRND_TYPE_IMM5b_LS means: Imm <= prev Imm.  */\n+  OPRND_TYPE_IMM5b_LS,\n   /* Operand type for rori and rotri.  */\n   OPRND_TYPE_IMM5b_RORI,\n   OPRND_TYPE_IMM5b_POWER,\n@@ -624,128 +627,421 @@ struct csky_opcode\n #define V1_REG_SP              0\n #define V1_REG_LR             15\n \n-struct csky_reg\n+struct psrbit\n {\n+  int value;\n+  int isa;\n   const char *name;\n-  int  index;\n-  int  flag;\n };\n \n-const char *csky_general_reg[] =\n+const struct psrbit cskyv1_psr_bits[] =\n {\n-  \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\",\n-  \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\n-  \"r16\", \"r17\", \"r18\", \"r19\", \"r20\", \"r21\", \"r22\", \"r23\",\n-  \"r24\", \"r25\", \"r26\", \"r27\", \"r28\", \"r29\", \"r30\", \"r31\",\n-  NULL,\n+  {1,    0, \"ie\"},\n+  {2,    0, \"fe\"},\n+  {4,    0, \"ee\"},\n+  {8,    0, \"af\"},\n+  {0, 0, NULL},\n };\n \n-/* TODO: optimize.  */\n-const char *cskyv2_general_alias_reg[] =\n+const struct psrbit cskyv2_psr_bits[] =\n {\n-  \"a0\", \"a1\", \"a2\", \"a3\", \"l0\", \"l1\", \"l2\", \"l3\",\n-  \"l4\", \"l5\", \"l6\", \"l7\", \"t0\", \"t1\", \"sp\", \"lr\",\n-  \"l8\", \"l9\", \"t2\", \"t3\", \"t4\", \"t5\", \"t6\", \"t7\",\n-  \"t8\", \"t9\", \"r26\", \"r27\", \"rdb\", \"gb\", \"r30\", \"r31\",\n-  NULL,\n+  {8, 0, \"ee\"},\n+  {4, 0, \"ie\"},\n+  {2, 0, \"fe\"},\n+  {1, 0, \"af\"},\n+  {0x10, CSKY_ISA_TRUST, \"sie\"},\n+  {0, 0, NULL},\n };\n \n-/* TODO: optimize.  */\n-const char *cskyv1_general_alias_reg[] =\n+#define GENARAL_REG_BANK      0x80000000\n+#define REG_SUPPORT_ALL 0xffffffff\n+\n+/* CSKY register description.  */\n+struct csky_reg_def\n {\n-  \"sp\", \"r1\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\",\n-  \"fp\", \"l0\", \"l1\", \"l2\", \"l3\", \"l4\", \"gb\", \"lr\",\n-  NULL,\n+  /* The group number for control registers,\n+     and set the bank of genaral registers to a special number.  */\n+  int bank;\n+  int regno;\n+  /* The name displayed by serial number.  */\n+  const char *name;\n+  /* The name displayed by ABI infomation,\n+     used when objdump add option -Mabi-names.  */\n+  const char *abi_name;\n+  /* The flags indicate which arches support the register.  */\n+  int arch_flag;\n+  /* Some registers depend on special features.  */\n+  char *features;\n };\n \n-/* TODO: optimize.  */\n-const char *csky_fpu_reg[] =\n+/* Arch flag.  */\n+#define ASH(a) (1 << CSKY_ARCH_##a)\n+\n+/* All arches exclued 801.  */\n+#define REG_SUPPORT_A   (REG_SUPPORT_ALL & ~ASH(801))\n+\n+/* All arches exclued 801 and 802.  */\n+#define REG_SUPPORT_B   (REG_SUPPORT_ALL & ~(ASH(801) | ASH(802)))\n+\n+/* All arches exclued 801, 802, 803, 805.*/\n+#define REG_SUPPORT_C   (REG_SUPPORT_ALL & ~(ASH(801)\t\t\t\\\n+\t\t       \t| ASH(802) | ASH(803) | ASH(805)))\n+\n+/* All arches exclued 801, 802, 803, 805, 807, 810.  */\n+#define REG_SUPPORT_D   (REG_SUPPORT_C & ~(ASH(807) | ASH(810)))\n+\n+/* All arches exclued 807, 810, 860.  */\n+#define REG_SUPPORT_E   (REG_SUPPORT_ALL & ~(ASH(807) | ASH(810) |\t\\\n+\t\t       \tASH(860)))\n+\n+/* C-SKY V1 general registers table.  */\n+static struct csky_reg_def csky_abiv1_general_regs[] = \n {\n-  \"fr0\",  \"fr1\",  \"fr2\",  \"fr3\",  \"fr4\",  \"fr5\",  \"fr6\",  \"fr7\",\n-  \"fr8\",  \"fr9\",  \"fr10\", \"fr11\", \"fr12\", \"fr13\", \"fr14\", \"fr15\",\n-  \"fr16\", \"fr17\", \"fr18\", \"fr19\", \"fr20\", \"fr21\", \"fr22\", \"fr23\",\n-  \"fr24\", \"fr25\", \"fr26\", \"fr27\", \"fr28\", \"fr29\", \"fr30\", \"fr31\",\n-  NULL,\n+#define DECLARE_REG(regno, abi_name, support)\t\t\\\n+  {GENARAL_REG_BANK, regno, \"r\"#regno, abi_name, support, NULL}\n+\n+  DECLARE_REG (0, \"sp\", REG_SUPPORT_ALL),\n+  DECLARE_REG (1, NULL, REG_SUPPORT_ALL),\n+  DECLARE_REG (2, \"a0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (3, \"a1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (4, \"a2\", REG_SUPPORT_ALL),\n+  DECLARE_REG (5, \"a3\", REG_SUPPORT_ALL),\n+  DECLARE_REG (6, \"a4\", REG_SUPPORT_ALL),\n+  DECLARE_REG (7, \"a5\", REG_SUPPORT_ALL),\n+  DECLARE_REG (8, \"fp\", REG_SUPPORT_ALL),\n+  DECLARE_REG (8, \"l0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (9, \"l1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (10, \"l2\", REG_SUPPORT_ALL),\n+  DECLARE_REG (11, \"l3\", REG_SUPPORT_ALL),\n+  DECLARE_REG (12, \"l4\", REG_SUPPORT_ALL),\n+  DECLARE_REG (13, \"l5\", REG_SUPPORT_ALL),\n+  DECLARE_REG (14, \"gb\", REG_SUPPORT_ALL),\n+  DECLARE_REG (15, \"lr\", REG_SUPPORT_ALL),\n+#undef DECLARE_REG\n+  {-1, -1, NULL, NULL, 0, NULL},\n };\n \n-/* Control Registers.  */\n-struct csky_reg csky_ctrl_regs[] =\n+/* C-SKY V1 control registers table.  */\n+static struct csky_reg_def csky_abiv1_control_regs[] = \n {\n-  {\"psr\", 0, 0},  {\"vbr\", 1, 0},    {\"epsr\", 2, 0},  {\"fpsr\", 3, 0},\n-  {\"epc\", 4, 0},  {\"fpc\", 5, 0},    {\"ss0\", 6, 0},   {\"ss1\", 7, 0},\n-  {\"ss2\", 8, 0},  {\"ss3\", 9, 0},    {\"ss4\", 10, 0},  {\"gcr\", 11, 0},\n-  {\"gsr\", 12, 0}, {\"cpuidr\", 13, 0}, {\"dcsr\", 14, 0}, {\"cwr\", 15, 0},\n-  {\"cfr\", 16, 0}, {\"ccr\", 17, 0},   {\"capr\", 19, 0}, {\"pacr\", 20, 0},\n-  {\"rid\", 21, 0}, {\"sedcr\", 8, CSKY_ISA_TRUST}, {\"sepcr\", 9, CSKY_ISA_TRUST},\n-  {NULL, 0, 0}\n+#define DECLARE_REG(regno, abi_name, support)\t\t\\\n+  {0, regno, \"cr\"#regno, abi_name, support, NULL}\n+\n+  DECLARE_REG (0, \"psr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (1, \"vbr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (2, \"epsr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (3, \"fpsr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (4, \"epc\", REG_SUPPORT_ALL),\n+  DECLARE_REG (5, \"fpc\", REG_SUPPORT_ALL),\n+  DECLARE_REG (6, \"ss0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (7, \"ss1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (8, \"ss2\", REG_SUPPORT_ALL),\n+  DECLARE_REG (9, \"ss3\", REG_SUPPORT_ALL),\n+  DECLARE_REG (10, \"ss4\", REG_SUPPORT_ALL),\n+  DECLARE_REG (11, \"gcr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (12, \"gsr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (13, \"cpid\", REG_SUPPORT_ALL),\n+  DECLARE_REG (14, \"dcsr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (15, \"cwr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (16, NULL, REG_SUPPORT_ALL),\n+  DECLARE_REG (17, \"cfr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (18, \"ccr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (19, \"capr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (20, \"pacr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (21, \"prsr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (22, \"mir\", REG_SUPPORT_ALL),\n+  DECLARE_REG (23, \"mrr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (24, \"mel0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (25, \"mel1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (26, \"meh\", REG_SUPPORT_ALL),\n+  DECLARE_REG (27, \"mcr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (28, \"mpr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (29, \"mwr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (30, \"mcir\", REG_SUPPORT_ALL),\n+#undef DECLARE_REG\n+  {-1, -1, NULL, NULL, 0, NULL},\n };\n \n-const char *csky_cp_idx[] =\n+/* C-SKY V2 general registers table.  */\n+static struct csky_reg_def csky_abiv2_general_regs[] = \n {\n-  \"cp0\", \"cp1\", \"cp2\", \"cp3\", \"cp4\", \"cp5\", \"cp6\", \"cp7\",\n-  \"cp8\", \"cp9\", \"cp10\", \"cp11\", \"cp12\", \"cp13\", \"cp14\", \"cp15\",\n-  \"cp16\", \"cp17\", \"cp18\", \"cp19\", \"cp20\",\n-  NULL,\n+#ifdef DECLARE_REG\n+#undef DECLARE_REG\n+#endif\n+#define DECLARE_REG(regno, abi_name, support)\t\t\\\n+  {GENARAL_REG_BANK, regno, \"r\"#regno, abi_name, support, NULL}\n+\n+  DECLARE_REG (0, \"a0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (1, \"a1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (2, \"a2\", REG_SUPPORT_ALL),\n+  DECLARE_REG (3, \"a3\", REG_SUPPORT_ALL),\n+  DECLARE_REG (4, \"l0\", REG_SUPPORT_ALL),\n+  DECLARE_REG (5, \"l1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (6, \"l2\", REG_SUPPORT_ALL),\n+  DECLARE_REG (7, \"l3\", REG_SUPPORT_ALL),\n+  DECLARE_REG (8, \"l4\", REG_SUPPORT_ALL),\n+  DECLARE_REG (9, \"l5\", REG_SUPPORT_A),\n+  DECLARE_REG (10, \"l6\", REG_SUPPORT_A),\n+  DECLARE_REG (11, \"l7\", REG_SUPPORT_A),\n+  DECLARE_REG (12, \"t0\", REG_SUPPORT_A),\n+  DECLARE_REG (13, \"t1\", REG_SUPPORT_ALL),\n+  DECLARE_REG (14, \"sp\", REG_SUPPORT_ALL),\n+  DECLARE_REG (15, \"lr\", REG_SUPPORT_ALL),\n+  DECLARE_REG (16, \"l8\", REG_SUPPORT_B),\n+  DECLARE_REG (17, \"l9\", REG_SUPPORT_B),\n+  DECLARE_REG (18, \"t2\", REG_SUPPORT_B),\n+  DECLARE_REG (19, \"t3\", REG_SUPPORT_B),\n+  DECLARE_REG (20, \"t4\", REG_SUPPORT_B),\n+  DECLARE_REG (21, \"t5\", REG_SUPPORT_B),\n+  DECLARE_REG (22, \"t6\", REG_SUPPORT_B),\n+  DECLARE_REG (23, \"t7\", REG_SUPPORT_B),\n+  DECLARE_REG (24, \"t8\", REG_SUPPORT_B),\n+  DECLARE_REG (25, \"t9\", REG_SUPPORT_B),\n+  DECLARE_REG (26, NULL, REG_SUPPORT_B),\n+  DECLARE_REG (27, NULL, REG_SUPPORT_B),\n+  DECLARE_REG (28, \"gb\", REG_SUPPORT_B),\n+  DECLARE_REG (28, \"rgb\", REG_SUPPORT_B),\n+  DECLARE_REG (28, \"rdb\", REG_SUPPORT_B),\n+  DECLARE_REG (29, \"tb\", REG_SUPPORT_B),\n+  DECLARE_REG (29, \"rtb\", REG_SUPPORT_B),\n+  DECLARE_REG (30, \"svbr\", REG_SUPPORT_A),\n+  DECLARE_REG (31, \"tls\", REG_SUPPORT_B),\n+\n+  /* The followings JAVA/BCTM's features.  */\n+  DECLARE_REG (23, \"fp\", REG_SUPPORT_ALL),\n+  DECLARE_REG (24, \"top\", REG_SUPPORT_ALL),\n+  DECLARE_REG (25, \"bsp\", REG_SUPPORT_ALL),\n+\n+  {-1, -1, NULL, NULL, 0, NULL},\n };\n \n-const char *csky_cp_reg[] =\n+/* C-SKY V2 control registers table.  */\n+static struct csky_reg_def csky_abiv2_control_regs[] = \n {\n-  \"cpr0\",  \"cpr1\",  \"cpr2\",  \"cpr3\",  \"cpr4\",  \"cpr5\",  \"cpr6\",  \"cpr7\",\n-  \"cpr8\",  \"cpr9\",  \"cpr10\", \"cpr11\", \"cpr12\", \"cpr13\", \"cpr14\", \"cpr15\",\n-  \"cpr16\", \"cpr17\", \"cpr18\", \"cpr19\", \"cpr20\", \"cpr21\", \"cpr22\", \"cpr23\",\n-  \"cpr24\", \"cpr25\", \"cpr26\", \"cpr27\", \"cpr28\", \"cpr29\", \"cpr30\", \"cpr31\",\n-  \"cpr32\", \"cpr33\", \"cpr34\", \"cpr35\", \"cpr36\", \"cpr37\", \"cpr38\", \"cpr39\",\n-  \"cpr40\", \"cpr41\", \"cpr42\", \"cpr43\", \"cpr44\", \"cpr45\", \"cpr46\", \"cpr47\",\n-  \"cpr48\", \"cpr49\", \"cpr50\", \"cpr51\", \"cpr52\", \"cpr53\", \"cpr54\", \"cpr55\",\n-  \"cpr56\", \"cpr57\", \"cpr58\", \"cpr59\", \"cpr60\", \"cpr61\", \"cpr62\", \"cpr63\",\n-  NULL,\n+\n+#ifdef DECLARE_REG\n+#undef DECLARE_REG\n+#endif\n+  /* Bank0.  */\n+#define DECLARE_REG(regno, abi_name)\t\t\\\n+  {0, regno, \"cr<\"#regno\", 0>\", abi_name, REG_SUPPORT_ALL, NULL}\n+  DECLARE_REG (0, \"psr\"),\n+  DECLARE_REG (1, \"vbr\"),\n+  DECLARE_REG (2, \"epsr\"),\n+  DECLARE_REG (3, \"fpsr\"),\n+  DECLARE_REG (4, \"epc\"),\n+  DECLARE_REG (5, \"fpc\"),\n+  DECLARE_REG (6, \"ss0\"),\n+  DECLARE_REG (7, \"ss1\"),\n+  DECLARE_REG (8, \"ss2\"),\n+  DECLARE_REG (9, \"ss3\"),\n+  DECLARE_REG (10, \"ss4\"),\n+  DECLARE_REG (11, \"gcr\"),\n+  DECLARE_REG (12, \"gsr\"),\n+  DECLARE_REG (13, \"cpid\"),\n+  DECLARE_REG (14, \"dcsr\"),\n+  DECLARE_REG (15, NULL),\n+  DECLARE_REG (16, NULL),\n+  DECLARE_REG (17, \"cfr\"),\n+  DECLARE_REG (18, \"ccr\"),\n+  DECLARE_REG (19, \"capr\"),\n+  DECLARE_REG (20, \"pacr\"),\n+  DECLARE_REG (21, \"prsr\"),\n+  DECLARE_REG (22, \"cir\"),\n+  DECLARE_REG (23, \"ccr2\"),\n+  DECLARE_REG (24, NULL),\n+  DECLARE_REG (25, \"cer2\"),\n+  DECLARE_REG (26, NULL),\n+  DECLARE_REG (27, NULL),\n+  DECLARE_REG (28, \"rvbr\"),\n+  DECLARE_REG (29, \"rmr\"),\n+  DECLARE_REG (30, \"mpid\"),\n+\n+#undef DECLARE_REG\n+#define DECLARE_REG(regno, abi_name, support)\t\t\\\n+  {0, regno, \"cr<\"#regno\", 0>\", abi_name, support, NULL}\n+  DECLARE_REG (31, \"chr\", REG_SUPPORT_E),\n+  DECLARE_REG (31, \"hint\", REG_SUPPORT_C),\n+\n+  /* Bank1.  */\n+#undef DECLARE_REG\n+#define DECLARE_REG(regno, abi_name)\t\t\\\n+  {1, regno, \"cr<\"#regno\", 1>\", abi_name, REG_SUPPORT_ALL, NULL}\n+\n+  DECLARE_REG (14, \"usp\"),\n+  DECLARE_REG (26, \"cindex\"),\n+  DECLARE_REG (27, \"cdata0\"),\n+  DECLARE_REG (28, \"cdata1\"),\n+  DECLARE_REG (29, \"cdata2\"),\n+  DECLARE_REG (30, \"cdata3\"),\n+  DECLARE_REG (31, \"cins\"),\n+\n+  /* Bank2.  */\n+#undef DECLARE_REG\n+#define DECLARE_REG(regno, abi_name)\t\t\\\n+  {2, regno, \"cr<\"#regno\", 2>\", abi_name, REG_SUPPORT_ALL, NULL}\n+\n+  DECLARE_REG (0, \"fid\"),\n+  DECLARE_REG (1, \"fcr\"),\n+  DECLARE_REG (2, \"fesr\"),\n+\n+  /* Bank3.  */\n+#undef DECLARE_REG\n+#define DECLARE_REG(regno, abi_name)\t\t\\\n+  {3, regno, \"cr<\"#regno\", 3>\", abi_name, REG_SUPPORT_ALL, NULL}\n+  DECLARE_REG (8, \"dcr\"),\n+  DECLARE_REG (8, \"sedcr\"),\n+  DECLARE_REG (9, \"pcr\"),\n+  DECLARE_REG (9, \"sepcr\"),\n+\n+  /* Bank15.  */\n+#undef DECLARE_REG\n+#define DECLARE_REG(regno, abi_name)\t\t\\\n+  {15, regno, \"cr<\"#regno\", 15>\", abi_name, REG_SUPPORT_ALL, NULL}\n+\n+  DECLARE_REG (0, \"mir\"),\n+  DECLARE_REG (2, \"mel0\"),\n+  DECLARE_REG (3, \"mel1\"),\n+  DECLARE_REG (4, \"meh\"),\n+  DECLARE_REG (6, \"mpr\"),\n+  DECLARE_REG (8, \"mcir\"),\n+  DECLARE_REG (28, \"mpgd0\"),\n+  DECLARE_REG (29, \"mpgd\"),\n+  DECLARE_REG (29, \"mpgd1\"),\n+  DECLARE_REG (30, \"msa0\"),\n+  DECLARE_REG (31, \"msa1\"),\n+#undef DECLARE_REG\n+  {-1, -1, NULL, NULL, 0, NULL},\n };\n \n-const char *csky_cp_creg[] =\n+/* Get register name according to giving parameters,\n+   IS_ABI controls whether is ABI name or not.  */\n+static inline const char *\n+get_register_name (struct csky_reg_def *reg_table,\n+\t\t   int arch, int bank, int regno, int is_abi)\n {\n-  \"cpcr0\",  \"cpcr1\",  \"cpcr2\",  \"cpcr3\",\n-  \"cpcr4\",  \"cpcr5\",  \"cpcr6\",  \"cpcr7\",\n-  \"cpcr8\",  \"cpcr9\",  \"cpcr10\", \"cpcr11\",\n-  \"cpcr12\", \"cpcr13\", \"cpcr14\", \"cpcr15\",\n-  \"cpcr16\", \"cpcr17\", \"cpcr18\", \"cpcr19\",\n-  \"cpcr20\", \"cpcr21\", \"cpcr22\", \"cpcr23\",\n-  \"cpcr24\", \"cpcr25\", \"cpcr26\", \"cpcr27\",\n-  \"cpcr28\", \"cpcr29\", \"cpcr30\", \"cpcr31\",\n-  \"cpcr32\", \"cpcr33\", \"cpcr34\", \"cpcr35\",\n-  \"cpcr36\", \"cpcr37\", \"cpcr38\", \"cpcr39\",\n-  \"cpcr40\", \"cpcr41\", \"cpcr42\", \"cpcr43\",\n-  \"cpcr44\", \"cpcr45\", \"cpcr46\", \"cpcr47\",\n-  \"cpcr48\", \"cpcr49\", \"cpcr50\", \"cpcr51\",\n-  \"cpcr52\", \"cpcr53\", \"cpcr54\", \"cpcr55\",\n-  \"cpcr56\", \"cpcr57\", \"cpcr58\", \"cpcr59\",\n-  \"cpcr60\", \"cpcr61\", \"cpcr62\", \"cpcr63\",\n-  NULL,\n-};\n+  static char regname[64] = {0};\n+  unsigned int i = 0;\n+  while (reg_table[i].name != NULL)\n+    {\n+      if (reg_table[i].bank == bank\n+\t  && reg_table[i].regno == regno\n+\t  && (reg_table[i].arch_flag & (1 << arch)))\n+\t{\n+\t  if (is_abi && reg_table[i].abi_name)\n+\t    return reg_table[i].abi_name;\n+\t  else\n+\t    return reg_table[i].name;\n+\t}\n+      i++;\n+    }\n \n-struct psrbit\n+  if (bank & 0x80000000)\n+    return \"unkown register\";\n+\n+  sprintf (regname, \"cr<%d, %d>\", regno, bank);\n+\n+  return regname;\n+}\n+\n+/* Get register number according to giving parameters.\n+   If not found, return -1.  */\n+static inline int\n+get_register_number (struct csky_reg_def *reg_table,\n+\t\t     int arch, char *s, char **end, int *bank)\n {\n-  int value;\n-  int isa;\n-  const char *name;\n-};\n-const struct psrbit cskyv1_psr_bits[] =\n+  unsigned int i = 0;\n+  int len = 0;\n+  while (reg_table[i].name != NULL)\n+    {\n+      len = strlen (reg_table[i].name);\n+      if ((strncasecmp (reg_table[i].name, s, len) == 0)\n+\t  && !(ISDIGIT (s[len]))\n+\t  && (reg_table[i].arch_flag & (1 << arch)))\n+\t{\n+\t  *end = s + len;\n+\t  *bank = reg_table[i].bank;\n+\t  return reg_table[i].regno;\n+\t}\n+\n+      if (reg_table[i].abi_name == NULL)\n+\t{\n+\t  i++;\n+\t  continue;\n+\t}\n+\n+      len = strlen (reg_table[i].abi_name);\n+      if ((strncasecmp (reg_table[i].abi_name, s, len) == 0)\n+\t  && !(ISALNUM (s[len]))\n+\t  && (reg_table[i].arch_flag & (1 << arch)))\n+\t{\n+\t  *end = s + len;\n+\t  *bank = reg_table[i].bank;\n+\t  return reg_table[i].regno;\n+\t}\n+      i++;\n+    }\n+  return -1;\n+}\n+\n+/* Return general register's name.  */\n+static inline const char *\n+csky_get_general_reg_name (int arch, int regno, int is_abi)\n {\n-  {1,    0, \"ie\"},\n-  {2,    0, \"fe\"},\n-  {4,    0, \"ee\"},\n-  {8,    0, \"af\"},\n-  {0, 0, NULL},\n-};\n-const struct psrbit cskyv2_psr_bits[] =\n+  struct csky_reg_def *reg_table;\n+\n+  if (IS_CSKY_ARCH_V1(arch))\n+    reg_table = csky_abiv1_general_regs;\n+  else\n+    reg_table = csky_abiv2_general_regs;\n+\n+  return get_register_name (reg_table, arch,\n+\t\t\t    GENARAL_REG_BANK, regno, is_abi);\n+}\n+\n+/* Return general register's number.  */\n+static inline int\n+csky_get_general_regno(int arch, char *s, char **end)\n {\n-  {8, 0, \"ee\"},\n-  {4, 0, \"ie\"},\n-  {2, 0, \"fe\"},\n-  {1, 0, \"af\"},\n-  {0x10, CSKY_ISA_TRUST, \"sie\"},\n-  {0, 0, NULL},\n-};\n+  struct csky_reg_def *reg_table;\n+  int bank = 0;\n \n+  if (IS_CSKY_ARCH_V1(arch))\n+    reg_table = csky_abiv1_general_regs;\n+  else\n+    reg_table = csky_abiv2_general_regs;\n+\n+  return get_register_number (reg_table, arch, s, end, &bank);\n+}\n+\n+/* Return control register's name.  */\n+static inline const char *\n+csky_get_control_reg_name (int arch, int bank, int regno, int is_abi)\n+{\n+  struct csky_reg_def *reg_table;\n+\n+  if (IS_CSKY_ARCH_V1(arch))\n+    reg_table = csky_abiv1_control_regs;\n+  else\n+    reg_table = csky_abiv2_control_regs;\n+\n+  return get_register_name (reg_table, arch, bank,\n+\t\t\t    regno, is_abi);\n+}\n+\n+/* Return control register's number.  */\n+static inline int\n+csky_get_control_regno(int arch, char *s, char **end, int *bank)\n+{\n+  struct csky_reg_def *reg_table;\n+\n+  if (IS_CSKY_ARCH_V1(arch))\n+    reg_table = csky_abiv1_control_regs;\n+  else\n+    reg_table = csky_abiv2_control_regs;\n+\n+  return get_register_number (reg_table, arch, s, end, bank);\n+}\n \n /* C-SKY V1 opcodes.  */\n const struct csky_opcode csky_v1_opcodes[] =\n@@ -3620,12 +3916,12 @@ const struct csky_opcode csky_v2_opcodes[] =\n #undef _TRANSFER\n #define _TRANSFER   0\n     DOP16_DOP32 (\"bclri\",\n-\t\t OPCODE_INFO3 (0x3880,\n+    \t\t OPCODE_INFO2 (0x3880,\n \t\t\t       (8_10, GREG0_7, OPRND_SHIFT_0_BIT),\n-\t\t\t       (NONE, DUMMY_REG, OPRND_SHIFT_0_BIT),\n \t\t\t       (0_4, IMM5b, OPRND_SHIFT_0_BIT)),\n-\t\t OPCODE_INFO2 (0x3880,\n+\t\t OPCODE_INFO3 (0x3880,\n \t\t\t       (8_10, GREG0_7, OPRND_SHIFT_0_BIT),\n+\t\t\t       (NONE, DUMMY_REG, OPRND_SHIFT_0_BIT),\n \t\t\t       (0_4, IMM5b, OPRND_SHIFT_0_BIT)),\n \t\t CSKYV2_ISA_E1,\n \t\t OPCODE_INFO3 (0xc4002820,\n@@ -3637,12 +3933,12 @@ const struct csky_opcode csky_v2_opcodes[] =\n \t\t\t       (21_25, IMM5b, OPRND_SHIFT_0_BIT)),\n \t\t CSKYV2_ISA_1E2),\n     DOP16_DOP32 (\"bseti\",\n-\t\t OPCODE_INFO3 (0x38a0,\n+    \t\t OPCODE_INFO2 (0x38a0,\n \t\t\t       (8_10, GREG0_7, OPRND_SHIFT_0_BIT),\n-\t\t\t       (NONE, DUMMY_REG, OPRND_SHIFT_0_BIT),\n \t\t\t       (0_4, IMM5b, OPRND_SHIFT_0_BIT)),\n-\t\t OPCODE_INFO2 (0x38a0,\n+\t\t OPCODE_INFO3 (0x38a0,\n \t\t\t       (8_10, GREG0_7, OPRND_SHIFT_0_BIT),\n+\t\t\t       (NONE, DUMMY_REG, OPRND_SHIFT_0_BIT),\n \t\t\t       (0_4, IMM5b, OPRND_SHIFT_0_BIT)),\n \t\t CSKYV2_ISA_E1,\n \t\t OPCODE_INFO3 (0xc4002840,\n@@ -3707,23 +4003,24 @@ const struct csky_opcode csky_v2_opcodes[] =\n \t\t\t     (16_20, AREG, OPRND_SHIFT_0_BIT),\n \t\t\t     (21_25, IMM5b, OPRND_SHIFT_0_BIT)),\n \t       CSKYV2_ISA_1E2),\n-    DOP16_DOP32 (\"addc\",\n-\t\t OPCODE_INFO2 (0x6001,\n-\t\t\t       (6_9, GREG0_15, OPRND_SHIFT_0_BIT),\n-\t\t\t       (2_5, GREG0_15, OPRND_SHIFT_0_BIT)),\n-\t\t OPCODE_INFO3 (0x6001,\n-\t\t\t       (6_9, GREG0_15, OPRND_SHIFT_0_BIT),\n-\t\t\t       (2_5, 2IN1_DUMMY, OPRND_SHIFT_0_BIT),\n-\t\t\t       (2_5, 2IN1_DUMMY, OPRND_SHIFT_0_BIT)),\n-\t\t CSKYV2_ISA_E1,\n-\t\t OPCODE_INFO3 (0xc4000040,\n-\t\t\t       (0_4, AREG, OPRND_SHIFT_0_BIT),\n-\t\t\t       (16_20, AREG, OPRND_SHIFT_0_BIT),\n-\t\t\t       (21_25, AREG, OPRND_SHIFT_0_BIT)),\n-\t\t OPCODE_INFO2 (0xc4000040,\n-\t\t\t       (0_4or16_20, DUP_AREG, OPRND_SHIFT_0_BIT),\n-\t\t\t       (21_25, AREG, OPRND_SHIFT_0_BIT)),\n-\t\t CSKYV2_ISA_1E2),\n+    DOP16_DOP32_WITH_WORK (\"addc\",\n+\t\t\t   OPCODE_INFO2 (0x6001,\n+\t\t\t\t\t (6_9, GREG0_15, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (2_5, GREG0_15, OPRND_SHIFT_0_BIT)),\n+\t\t\t   OPCODE_INFO3 (0x6001,\n+\t\t\t\t\t (6_9, GREG0_15, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (2_5, GREG0_15, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (2_5, GREG0_15, OPRND_SHIFT_0_BIT)),\n+\t\t\t   CSKYV2_ISA_E1,\n+\t\t\t   OPCODE_INFO3 (0xc4000040,\n+\t\t\t\t\t (0_4, AREG, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (16_20, AREG, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (21_25, AREG, OPRND_SHIFT_0_BIT)),\n+\t\t\t   OPCODE_INFO2 (0xc4000040,\n+\t\t\t\t\t (0_4or16_20, AREG, OPRND_SHIFT_0_BIT),\n+\t\t\t\t\t (21_25, AREG, OPRND_SHIFT_0_BIT)),\n+\t\t\t   CSKYV2_ISA_1E2,\n+\t\t\t   v2_work_addc),\n     DOP16_DOP32 (\"subc\",\n \t\t OPCODE_INFO2 (0x6003,\n \t\t\t       (6_9, GREG0_15, OPRND_SHIFT_0_BIT),\n@@ -4015,14 +4312,14 @@ const struct csky_opcode csky_v2_opcodes[] =\n \t\t\t(0_4, AREG, OPRND_SHIFT_0_BIT),\n \t\t\t(16_20, AREG, OPRND_SHIFT_0_BIT),\n \t\t\t(5_9, IMM5b, OPRND_SHIFT_0_BIT),\n-\t\t\t(21_25, IMM5b, OPRND_SHIFT_0_BIT)),\n+\t\t\t(21_25, IMM5b_LS, OPRND_SHIFT_0_BIT)),\n \t  CSKYV2_ISA_2E3),\n     OP32 (\"sext\",\n \t  OPCODE_INFO4 (0xc4005800,\n \t\t\t(0_4, AREG, OPRND_SHIFT_0_BIT),\n \t\t\t(16_20, AREG, OPRND_SHIFT_0_BIT),\n \t\t\t(5_9, IMM5b, OPRND_SHIFT_0_BIT),\n-\t\t\t(21_25, IMM5b, OPRND_SHIFT_0_BIT)),\n+\t\t\t(21_25, IMM5b_LS, OPRND_SHIFT_0_BIT)),\n \t  CSKYV2_ISA_2E3),\n #undef _TRANSFER\n #define _TRANSFER   2"
    }
  ]
}