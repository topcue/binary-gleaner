{
  "sha": "37c18eedffe3926a330149ca93e7407917e2be38",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzdjMThlZWRmZmUzOTI2YTMzMDE0OWNhOTNlNzQwNzkxN2UyYmUzOA==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-03-13T10:54:30Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-03-13T11:47:07Z"
    },
    "message": "[BFD, LD, AArch64, 2/3] Add --force-bti to enable BTI and to select BTI enabled PLTs\n\nThis is part of the patch series to add support for BTI and\nPAC in AArch64 linker.\n\n1) This patch adds a new ld command line option: --force-bti.\nIn the presence of this option, the linker enables BTI with the\nGNU_PROPERTY_AARCH64_FEATURE_1_BTI feature. This gives out warning\nin case of missing gnu notes for BTI in inputs.\n2) It also defines a new set of BTI enabled PLTs. These are used either\nwhen all the inputs are marked with GNU_PROPERTY_AARCH64_FEATURE_1_BTI\nor when the new --force-bti option is used. This required adding new\nfields in elf_aarch64_link_hash_table so that we could make the PLT\nrelated information more generic.\n3) It also defines a dynamic tag DT_AARCH64_BTI_PLT. The linker uses\nthis whenever it picks BTI enabled PLTs.\nAll these are made according to the new AArch64 ELF ABI\nhttps://developer.arm.com/docs/ihi0056/latest/elf-for-the-arm-64-bit-architecture-aarch64-abi-2018q4\n\n*** bfd/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\n\t* bfd-in.h (aarch64_plt_type, aarch64_enable_bti_type): New.\n\t(aarch64_bti_pac_info): New.\n\t(bfd_elf64_aarch64_set_options): Add aarch64_bti_pac_info argument.\n\t(bfd_elf32_aarch64_set_options): Likewise.\n\t* bfd-in2.h: Regenerate\n\t* elfnn-aarch64.c (PLT_BTI_ENTRY_SIZE): New.\n\t(PLT_BTI_SMALL_ENTRY_SIZE, PLT_BTI_TLSDESC_ENTRY_SIZE): New.\n\t(elfNN_aarch64_small_plt0_bti_entry): New.\n\t(elfNN_aarch64_small_plt_bti_entry): New.\n\t(elfNN_aarch64_tlsdesc_small_plt_bti_entry): New.\n\t(elf_aarch64_obj_tdata): Add no_bti_warn and plt_type fields.\n\t(elf_aarch64_link_hash_table): Add plt0_entry, plt_entry and\n\ttlsdesc_plt_entry_size fields.\n\t(elfNN_aarch64_link_hash_table_create): Initialise the new fields.\n\t(setup_plt_values): New helper function.\n\t(bfd_elfNN_aarch64_set_options): Use new bp_info to set plt sizes and\n\tbti enable type.\n\t(elfNN_aarch64_allocate_dynrelocs): Use new size members instead of\n\tfixed macros.\n\t(elfNN_aarch64_size_dynamic_sections): Likewise and add checks.\n\t(elfNN_aarch64_create_small_pltn_entry): Use new generic pointers\n\tto plt stubs instead of fixed ones and update filling them according\n\tto the need for bti.\n\t(elfNN_aarch64_init_small_plt0_entry): Likewise.\n\t(elfNN_aarch64_finish_dynamic_sections): Likewise.\n\t(get_plt_type, elfNN_aarch64_get_synthetic_symtab): New.\n\t(elfNN_aarch64_plt_sym_val): Update size accordingly.\n\t(elfNN_aarch64_link_setup_gnu_properties): Set up plts if BTI GNU NOTE\n\tis set.\n\t(bfd_elfNN_get_synthetic_symtab): Define.\n\t(elfNN_aarch64_merge_gnu_properties): Give out warning with --force-bti\n\tand mising BTI NOTE SECTION.\n\n*** binutils/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\n\t* readelf.c (get_aarch64_dynamic_type): New.\n\t(get_dynamic_type): Use above for EM_AARCH64.\n\t(dynamic_section_aarch64_val): New.\n\t(process_dynamic_section): Use above for EM_AARCH64.\n\n*** include/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\n\t* elf/aarch64.h (DT_AARCH64_BTI_PLT): New.\n\n*** ld/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n\n\t* NEWS: Document --force-bti.\n\t* emultempl/aarch64elf.em (plt_type, bti_type, OPTION_FORCE_BTI): New.\n\t(PARSE_AND_LIST_SHORTOPTS, PARSE_AND_LIST_OPTIONS): Add force-bti.\n\t(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_FORCE_BTI.\n\t* testsuite/ld-aarch64/aarch64-elf.exp: Add all the tests below.\n\t* testsuite/ld-aarch64/bti-plt-1.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-1.s: New test.\n\t* testsuite/ld-aarch64/bti-plt-2.s: New test.\n\t* testsuite/ld-aarch64/bti-plt-2.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-3.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-4.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-5.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-6.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-7.d: New test.\n\t* testsuite/ld-aarch64/bti-plt-so.s: New test.\n\t* testsuite/ld-aarch64/bti-plt.ld: New test.",
    "tree": {
      "sha": "bc49f9058988c84c84029fe8b302e102fa4387c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc49f9058988c84c84029fe8b302e102fa4387c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37c18eedffe3926a330149ca93e7407917e2be38",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37c18eedffe3926a330149ca93e7407917e2be38",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37c18eedffe3926a330149ca93e7407917e2be38",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37c18eedffe3926a330149ca93e7407917e2be38/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd702818c6cf25277253b3b5c23f17d2cf7a94df"
    }
  ],
  "stats": {
    "total": 708,
    "additions": 687,
    "deletions": 21
  },
  "files": [
    {
      "sha": "6e7748ea9507607dfe5c8ec667922e83e8453248",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1,3 +1,40 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* bfd-in.h (aarch64_plt_type, aarch64_enable_bti_type): New.\n+\t(aarch64_bti_pac_info): New.\n+\t(bfd_elf64_aarch64_set_options): Add aarch64_bti_pac_info argument.\n+\t(bfd_elf32_aarch64_set_options): Likewise.\n+\t* bfd-in2.h: Regenerate\n+\t* elfnn-aarch64.c (PLT_BTI_ENTRY_SIZE): New.\n+\t(PLT_BTI_SMALL_ENTRY_SIZE, PLT_BTI_TLSDESC_ENTRY_SIZE): New.\n+\t(elfNN_aarch64_small_plt0_bti_entry): New.\n+\t(elfNN_aarch64_small_plt_bti_entry): New.\n+\t(elfNN_aarch64_tlsdesc_small_plt_bti_entry): New.\n+\t(elf_aarch64_obj_tdata): Add no_bti_warn and plt_type fields.\n+\t(elf_aarch64_link_hash_table): Add plt0_entry, plt_entry and\n+\ttlsdesc_plt_entry_size fields.\n+\t(elfNN_aarch64_link_hash_table_create): Initialise the new fields.\n+\t(setup_plt_values): New helper function.\n+\t(bfd_elfNN_aarch64_set_options): Use new bp_info to set plt sizes and\n+\tbti enable type.\n+\t(elfNN_aarch64_allocate_dynrelocs): Use new size members instead of\n+\tfixed macros.\n+\t(elfNN_aarch64_size_dynamic_sections): Likewise and add checks.\n+\t(elfNN_aarch64_create_small_pltn_entry): Use new generic pointers\n+\tto plt stubs instead of fixed ones and update filling them according\n+\tto the need for bti.\n+\t(elfNN_aarch64_init_small_plt0_entry): Likewise.\n+\t(elfNN_aarch64_finish_dynamic_sections): Likewise.\n+\t(get_plt_type, elfNN_aarch64_get_synthetic_symtab): New.\n+\t(elfNN_aarch64_plt_sym_val): Update size accordingly.\n+\t(elfNN_aarch64_link_setup_gnu_properties): Set up plts if BTI GNU NOTE\n+\tis set.\n+\t(bfd_elfNN_get_synthetic_symtab): Define.\n+\t(elfNN_aarch64_merge_gnu_properties): Give out warning with --force-bti\n+\tand mising BTI NOTE SECTION.\n+\n+\n 2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n \n \t* elf-properties.c (_bfd_elf_link_setup_gnu_properties): Exclude"
    },
    {
      "sha": "b753a9e57c11049a519cbb2b4ab9ef16473db52c",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -995,11 +995,45 @@ extern void bfd_elf64_aarch64_init_maps\n extern void bfd_elf32_aarch64_init_maps\n   (bfd *);\n \n+/* Types of PLTs based on the level of security.  This would be a\n+   bit-mask to denote which of the combinations of security features\n+   are enabled:\n+   - No security feature PLTs\n+   - PLTs with BTI instruction\n+   - PLTs with PAC instruction\n+*/\n+typedef enum\n+{\n+  PLT_NORMAL\t= 0x0,  /* Normal plts.  */\n+  PLT_BTI\t= 0x1,  /* plts with bti.  */\n+  PLT_PAC\t= 0x2,  /* plts with pointer authentication.  */\n+  PLT_BTI_PAC\t= PLT_BTI | PLT_PAC\n+} aarch64_plt_type;\n+\n+/* To indicate if BTI is enabled with/without warning.  */\n+typedef enum\n+{\n+  BTI_NONE\t= 0,  /* BTI is not enabled.  */\n+  BTI_WARN\t= 1,  /* BTI is enabled with --force-bti.  */\n+} aarch64_enable_bti_type;\n+\n+/* A structure to encompass all information coming from BTI or PAC\n+   related command line options.  This involves the \"PLT_TYPE\" to determine\n+   which version of PLTs to pick and \"BTI_TYPE\" to determine if\n+   BTI should be turned on with any warnings.   */\n+typedef struct\n+{\n+  aarch64_plt_type plt_type;\n+  aarch64_enable_bti_type bti_type;\n+} aarch64_bti_pac_info;\n+\n extern void bfd_elf64_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, int, int);\n+  (bfd *, struct bfd_link_info *, int, int, int, int, int, int,\n+   aarch64_bti_pac_info);\n \n extern void bfd_elf32_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, int, int);\n+  (bfd *, struct bfd_link_info *, int, int, int, int, int, int,\n+   aarch64_bti_pac_info);\n \n /* ELF AArch64 mapping symbol support.  */\n #define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP\t(1 << 0)"
    },
    {
      "sha": "33a29406ae3f4786e1ccb727e29736c2179f122c",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1002,11 +1002,45 @@ extern void bfd_elf64_aarch64_init_maps\n extern void bfd_elf32_aarch64_init_maps\n   (bfd *);\n \n+/* Types of PLTs based on the level of security.  This would be a\n+   bit-mask to denote which of the combinations of security features\n+   are enabled:\n+   - No security feature PLTs\n+   - PLTs with BTI instruction\n+   - PLTs with PAC instruction\n+*/\n+typedef enum\n+{\n+  PLT_NORMAL\t= 0x0,  /* Normal plts.  */\n+  PLT_BTI\t= 0x1,  /* plts with bti.  */\n+  PLT_PAC\t= 0x2,  /* plts with pointer authentication.  */\n+  PLT_BTI_PAC\t= PLT_BTI | PLT_PAC\n+} aarch64_plt_type;\n+\n+/* To indicate if BTI is enabled with/without warning.  */\n+typedef enum\n+{\n+  BTI_NONE\t= 0,  /* BTI is not enabled.  */\n+  BTI_WARN\t= 1,  /* BTI is enabled with --force-bti.  */\n+} aarch64_enable_bti_type;\n+\n+/* A structure to encompass all information coming from BTI or PAC\n+   related command line options.  This involves the \"PLT_TYPE\" to determine\n+   which version of PLTs to pick and \"BTI_TYPE\" to determine if\n+   BTI should be turned on with any warnings.   */\n+typedef struct\n+{\n+  aarch64_plt_type plt_type;\n+  aarch64_enable_bti_type bti_type;\n+} aarch64_bti_pac_info;\n+\n extern void bfd_elf64_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, int, int);\n+  (bfd *, struct bfd_link_info *, int, int, int, int, int, int,\n+   aarch64_bti_pac_info);\n \n extern void bfd_elf32_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, int, int);\n+  (bfd *, struct bfd_link_info *, int, int, int, int, int, int,\n+   aarch64_bti_pac_info);\n \n /* ELF AArch64 mapping symbol support.  */\n #define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP\t(1 << 0)"
    },
    {
      "sha": "69b8f83f3c8102ad84bd963733ed066ca11469e1",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 241,
      "deletions": 16,
      "changes": 257,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -267,6 +267,10 @@\n #define PLT_ENTRY_SIZE\t\t\t(32)\n #define PLT_SMALL_ENTRY_SIZE\t\t(16)\n #define PLT_TLSDESC_ENTRY_SIZE\t\t(32)\n+/* PLT sizes with BTI insn.  */\n+#define PLT_BTI_ENTRY_SIZE\t\t(36)\n+#define PLT_BTI_SMALL_ENTRY_SIZE\t(20)\n+#define PLT_BTI_TLSDESC_ENTRY_SIZE\t(36)\n \n /* Encoding of the nop instruction.  */\n #define INSN_NOP 0xd503201f\n@@ -297,9 +301,27 @@ static const bfd_byte elfNN_aarch64_small_plt0_entry[PLT_ENTRY_SIZE] =\n   0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n };\n \n+static const bfd_byte elfNN_aarch64_small_plt0_bti_entry[PLT_BTI_ENTRY_SIZE] =\n+{\n+  0x5f, 0x24, 0x03, 0xd5,\t/* bti c.  */\n+  0xf0, 0x7b, 0xbf, 0xa9,\t/* stp x16, x30, [sp, #-16]!  */\n+  0x10, 0x00, 0x00, 0x90,\t/* adrp x16, (GOT+16)  */\n+#if ARCH_SIZE == 64\n+  0x11, 0x0A, 0x40, 0xf9,\t/* ldr x17, [x16, #PLT_GOT+0x10]  */\n+  0x10, 0x42, 0x00, 0x91,\t/* add x16, x16,#PLT_GOT+0x10   */\n+#else\n+  0x11, 0x0A, 0x40, 0xb9,\t/* ldr w17, [x16, #PLT_GOT+0x8]  */\n+  0x10, 0x22, 0x00, 0x11,\t/* add w16, w16,#PLT_GOT+0x8   */\n+#endif\n+  0x20, 0x02, 0x1f, 0xd6,\t/* br x17  */\n+  0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n+  0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n+  0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n+};\n+\n /* Per function entry in a procedure linkage table looks like this\n    if the distance between the PLTGOT and the PLT is < 4GB use\n-   these PLT entries.  */\n+   these PLT entries.  Use BTI versions of the PLTs when enabled.  */\n static const bfd_byte elfNN_aarch64_small_plt_entry[PLT_SMALL_ENTRY_SIZE] =\n {\n   0x10, 0x00, 0x00, 0x90,\t/* adrp x16, PLTGOT + n * 8  */\n@@ -313,6 +335,21 @@ static const bfd_byte elfNN_aarch64_small_plt_entry[PLT_SMALL_ENTRY_SIZE] =\n   0x20, 0x02, 0x1f, 0xd6,\t/* br x17.  */\n };\n \n+static const bfd_byte\n+elfNN_aarch64_small_plt_bti_entry[PLT_BTI_SMALL_ENTRY_SIZE] =\n+{\n+  0x5f, 0x24, 0x03, 0xd5,\t/* bti c.  */\n+  0x10, 0x00, 0x00, 0x90,\t/* adrp x16, PLTGOT + n * 8  */\n+#if ARCH_SIZE == 64\n+  0x11, 0x02, 0x40, 0xf9,\t/* ldr x17, [x16, PLTGOT + n * 8] */\n+  0x10, 0x02, 0x00, 0x91,\t/* add x16, x16, :lo12:PLTGOT + n * 8  */\n+#else\n+  0x11, 0x02, 0x40, 0xb9,\t/* ldr w17, [x16, PLTGOT + n * 4] */\n+  0x10, 0x02, 0x00, 0x11,\t/* add w16, w16, :lo12:PLTGOT + n * 4  */\n+#endif\n+  0x20, 0x02, 0x1f, 0xd6,\t/* br x17.  */\n+};\n+\n static const bfd_byte\n elfNN_aarch64_tlsdesc_small_plt_entry[PLT_TLSDESC_ENTRY_SIZE] =\n {\n@@ -331,6 +368,25 @@ elfNN_aarch64_tlsdesc_small_plt_entry[PLT_TLSDESC_ENTRY_SIZE] =\n   0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n };\n \n+static const bfd_byte\n+elfNN_aarch64_tlsdesc_small_plt_bti_entry[PLT_BTI_TLSDESC_ENTRY_SIZE] =\n+{\n+  0x5f, 0x24, 0x03, 0xd5,\t/* bti c.  */\n+  0xe2, 0x0f, 0xbf, 0xa9,\t/* stp x2, x3, [sp, #-16]! */\n+  0x02, 0x00, 0x00, 0x90,\t/* adrp x2, 0 */\n+  0x03, 0x00, 0x00, 0x90,\t/* adrp x3, 0 */\n+#if ARCH_SIZE == 64\n+  0x42, 0x00, 0x40, 0xf9,\t/* ldr x2, [x2, #0] */\n+  0x63, 0x00, 0x00, 0x91,\t/* add x3, x3, 0 */\n+#else\n+  0x42, 0x00, 0x40, 0xb9,\t/* ldr w2, [x2, #0] */\n+  0x63, 0x00, 0x00, 0x11,\t/* add w3, w3, 0 */\n+#endif\n+  0x40, 0x00, 0x1f, 0xd6,\t/* br x2 */\n+  0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n+  0x1f, 0x20, 0x03, 0xd5,\t/* nop */\n+};\n+\n #define elf_info_to_howto\t\telfNN_aarch64_info_to_howto\n #define elf_info_to_howto_rel\t\telfNN_aarch64_info_to_howto\n \n@@ -2438,6 +2494,13 @@ struct elf_aarch64_obj_tdata\n \n   /* All GNU_PROPERTY_AARCH64_FEATURE_1_AND properties.  */\n   uint32_t gnu_and_prop;\n+\n+  /* Zero to warn when linking objects with incompatible\n+     GNU_PROPERTY_AARCH64_FEATURE_1_BTI.  */\n+  int no_bti_warn;\n+\n+  /* PLT type based on security.  */\n+  aarch64_plt_type plt_type;\n };\n \n #define elf_aarch64_tdata(bfd)\t\t\t\t\\\n@@ -2543,9 +2606,15 @@ struct elf_aarch64_link_hash_table\n   /* The number of bytes in the initial entry in the PLT.  */\n   bfd_size_type plt_header_size;\n \n-  /* The number of bytes in the subsequent PLT etries.  */\n+  /* The bytes of the initial PLT entry.  */\n+  const bfd_byte *plt0_entry;\n+\n+  /* The number of bytes in the subsequent PLT entries.  */\n   bfd_size_type plt_entry_size;\n \n+  /* The bytes of the subsequent PLT entry.  */\n+  const bfd_byte *plt_entry;\n+\n   /* Small local sym cache.  */\n   struct sym_cache sym_cache;\n \n@@ -2588,6 +2657,9 @@ struct elf_aarch64_link_hash_table\n      yet.  */\n   bfd_vma tlsdesc_plt;\n \n+  /* The number of bytes in the PLT enty for the TLS descriptor.  */\n+  bfd_size_type tlsdesc_plt_entry_size;\n+\n   /* The GOT offset for the lazy trampoline.  Communicated to the\n      loader via DT_TLSDESC_GOT.  The magic value (bfd_vma) -1\n      indicates an offset is not allocated.  */\n@@ -2831,7 +2903,10 @@ elfNN_aarch64_link_hash_table_create (bfd *abfd)\n     }\n \n   ret->plt_header_size = PLT_ENTRY_SIZE;\n+  ret->plt0_entry = elfNN_aarch64_small_plt0_entry;\n   ret->plt_entry_size = PLT_SMALL_ENTRY_SIZE;\n+  ret->plt_entry = elfNN_aarch64_small_plt_entry;\n+  ret->tlsdesc_plt_entry_size = PLT_TLSDESC_ENTRY_SIZE;\n   ret->obfd = abfd;\n   ret->dt_tlsdesc_got = (bfd_vma) - 1;\n \n@@ -4599,6 +4674,28 @@ bfd_elfNN_aarch64_init_maps (bfd *abfd)\n     }\n }\n \n+static void\n+setup_plt_values (struct bfd_link_info *link_info,\n+\t\t  aarch64_plt_type plt_type)\n+{\n+  struct elf_aarch64_link_hash_table *globals;\n+  globals = elf_aarch64_hash_table (link_info);\n+\n+  if (plt_type == PLT_BTI)\n+    {\n+      globals->plt_header_size = PLT_BTI_ENTRY_SIZE;\n+      globals->plt0_entry = elfNN_aarch64_small_plt0_bti_entry;\n+      globals->tlsdesc_plt_entry_size = PLT_BTI_TLSDESC_ENTRY_SIZE;\n+\n+      /* Only in ET_EXEC we need PLTn with BTI.  */\n+      if (bfd_link_pde (link_info))\n+\t{\n+\t  globals->plt_entry_size = PLT_BTI_SMALL_ENTRY_SIZE;\n+\t  globals->plt_entry = elfNN_aarch64_small_plt_bti_entry;\n+\t}\n+    }\n+}\n+\n /* Set option values needed during linking.  */\n void\n bfd_elfNN_aarch64_set_options (struct bfd *output_bfd,\n@@ -4607,7 +4704,8 @@ bfd_elfNN_aarch64_set_options (struct bfd *output_bfd,\n \t\t\t       int no_wchar_warn, int pic_veneer,\n \t\t\t       int fix_erratum_835769,\n \t\t\t       int fix_erratum_843419,\n-\t\t\t       int no_apply_dynamic_relocs)\n+\t\t\t       int no_apply_dynamic_relocs,\n+\t\t\t       aarch64_bti_pac_info bp_info)\n {\n   struct elf_aarch64_link_hash_table *globals;\n \n@@ -4621,6 +4719,20 @@ bfd_elfNN_aarch64_set_options (struct bfd *output_bfd,\n   BFD_ASSERT (is_aarch64_elf (output_bfd));\n   elf_aarch64_tdata (output_bfd)->no_enum_size_warning = no_enum_warn;\n   elf_aarch64_tdata (output_bfd)->no_wchar_size_warning = no_wchar_warn;\n+\n+  switch (bp_info.bti_type)\n+    {\n+    case BTI_WARN:\n+      elf_aarch64_tdata (output_bfd)->no_bti_warn = 0;\n+      elf_aarch64_tdata (output_bfd)->gnu_and_prop\n+\t|= GNU_PROPERTY_AARCH64_FEATURE_1_BTI;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  elf_aarch64_tdata (output_bfd)->plt_type = bp_info.plt_type;\n+  setup_plt_values (link_info, bp_info.plt_type);\n }\n \n static bfd_vma\n@@ -8349,7 +8461,7 @@ elfNN_aarch64_allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \t  /* Make room for this entry. For now we only create the\n \t     small model PLT entries. We later need to find a way\n \t     of relaxing into these from the large model PLT entries.  */\n-\t  s->size += PLT_SMALL_ENTRY_SIZE;\n+\t  s->size += htab->plt_entry_size;\n \n \t  /* We also need to make an entry in the .got.plt section, which\n \t     will be placed in the .got section by the linker script.  */\n@@ -8849,10 +8961,10 @@ elfNN_aarch64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n   if (htab->tlsdesc_plt)\n     {\n       if (htab->root.splt->size == 0)\n-\thtab->root.splt->size += PLT_ENTRY_SIZE;\n+\thtab->root.splt->size += htab->plt_header_size;\n \n       htab->tlsdesc_plt = htab->root.splt->size;\n-      htab->root.splt->size += PLT_TLSDESC_ENTRY_SIZE;\n+      htab->root.splt->size += htab->tlsdesc_plt_entry_size;\n \n       /* If we're not using lazy TLS relocations, don't generate the\n \t GOT entry required.  */\n@@ -8964,6 +9076,10 @@ elfNN_aarch64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      && (!add_dynamic_entry (DT_TLSDESC_PLT, 0)\n \t\t  || !add_dynamic_entry (DT_TLSDESC_GOT, 0)))\n \t    return FALSE;\n+\n+\t  if ((elf_aarch64_tdata (output_bfd)->plt_type == PLT_BTI)\n+\t      && !add_dynamic_entry (DT_AARCH64_BTI_PLT, 0))\n+\t    return FALSE;\n \t}\n \n       if (relocs)\n@@ -9060,7 +9176,13 @@ elfNN_aarch64_create_small_pltn_entry (struct elf_link_hash_entry *h,\n     gotplt->output_offset + got_offset;\n \n   /* Copy in the boiler-plate for the PLTn entry.  */\n-  memcpy (plt_entry, elfNN_aarch64_small_plt_entry, PLT_SMALL_ENTRY_SIZE);\n+  memcpy (plt_entry, htab->plt_entry, htab->plt_entry_size);\n+\n+  /* First instruction in BTI enabled PLT stub is a BTI\n+     instruction so skip it.  */\n+  if (elf_aarch64_tdata (output_bfd)->plt_type & PLT_BTI\n+      && elf_elfheader (output_bfd)->e_type == ET_EXEC)\n+    plt_entry = plt_entry + 4;\n \n   /* Fill in the top 21 bits for this: ADRP x16, PLT_GOT + n * 8.\n      ADRP:   ((PG(S+A)-PG(P)) >> 12) & 0x1fffff */\n@@ -9365,10 +9487,10 @@ elfNN_aarch64_init_small_plt0_entry (bfd *output_bfd ATTRIBUTE_UNUSED,\n   bfd_vma plt_base;\n \n \n-  memcpy (htab->root.splt->contents, elfNN_aarch64_small_plt0_entry,\n-\t  PLT_ENTRY_SIZE);\n+  memcpy (htab->root.splt->contents, htab->plt0_entry,\n+\t  htab->plt_header_size);\n   elf_section_data (htab->root.splt->output_section)->this_hdr.sh_entsize =\n-    PLT_ENTRY_SIZE;\n+    htab->plt_header_size;\n \n   plt_got_2nd_ent = (htab->root.sgotplt->output_section->vma\n \t\t  + htab->root.sgotplt->output_offset\n@@ -9377,18 +9499,24 @@ elfNN_aarch64_init_small_plt0_entry (bfd *output_bfd ATTRIBUTE_UNUSED,\n   plt_base = htab->root.splt->output_section->vma +\n     htab->root.splt->output_offset;\n \n+  /* First instruction in BTI enabled PLT stub is a BTI\n+     instruction so skip it.  */\n+  bfd_byte *plt0_entry = htab->root.splt->contents;\n+  if (elf_aarch64_tdata (output_bfd)->plt_type & PLT_BTI)\n+    plt0_entry = plt0_entry + 4;\n+\n   /* Fill in the top 21 bits for this: ADRP x16, PLT_GOT + n * 8.\n      ADRP:   ((PG(S+A)-PG(P)) >> 12) & 0x1fffff */\n   elf_aarch64_update_plt_entry (output_bfd, BFD_RELOC_AARCH64_ADR_HI21_PCREL,\n-\t\t\t\thtab->root.splt->contents + 4,\n+\t\t\t\tplt0_entry + 4,\n \t\t\t\tPG (plt_got_2nd_ent) - PG (plt_base + 4));\n \n   elf_aarch64_update_plt_entry (output_bfd, BFD_RELOC_AARCH64_LDSTNN_LO12,\n-\t\t\t\thtab->root.splt->contents + 8,\n+\t\t\t\tplt0_entry + 8,\n \t\t\t\tPG_OFFSET (plt_got_2nd_ent));\n \n   elf_aarch64_update_plt_entry (output_bfd, BFD_RELOC_AARCH64_ADD_LO12,\n-\t\t\t\thtab->root.splt->contents + 12,\n+\t\t\t\tplt0_entry + 12,\n \t\t\t\tPG_OFFSET (plt_got_2nd_ent));\n }\n \n@@ -9472,9 +9600,18 @@ elfNN_aarch64_finish_dynamic_sections (bfd *output_bfd,\n \t  bfd_put_NN (output_bfd, (bfd_vma) 0,\n \t\t      htab->root.sgot->contents + htab->dt_tlsdesc_got);\n \n+\t  const bfd_byte *entry = elfNN_aarch64_tlsdesc_small_plt_entry;\n+\t  htab->tlsdesc_plt_entry_size = PLT_TLSDESC_ENTRY_SIZE;\n+\n+\t  aarch64_plt_type type = elf_aarch64_tdata (output_bfd)->plt_type;\n+\t  if (type == PLT_BTI)\n+\t    {\n+\t      entry = elfNN_aarch64_tlsdesc_small_plt_bti_entry;\n+\t      htab->tlsdesc_plt_entry_size = PLT_BTI_TLSDESC_ENTRY_SIZE;\n+\t    }\n+\n \t  memcpy (htab->root.splt->contents + htab->tlsdesc_plt,\n-\t\t  elfNN_aarch64_tlsdesc_small_plt_entry,\n-\t\t  sizeof (elfNN_aarch64_tlsdesc_small_plt_entry));\n+\t\t  entry, htab->tlsdesc_plt_entry_size);\n \n \t  {\n \t    bfd_vma adrp1_addr =\n@@ -9496,6 +9633,15 @@ elfNN_aarch64_finish_dynamic_sections (bfd *output_bfd,\n \t    bfd_byte *plt_entry =\n \t      htab->root.splt->contents + htab->tlsdesc_plt;\n \n+\t   /* First instruction in BTI enabled PLT stub is a BTI\n+\t      instruction so skip it.  */\n+\t    if (type & PLT_BTI)\n+\t      {\n+\t\tplt_entry = plt_entry + 4;\n+\t\tadrp1_addr = adrp1_addr + 4;\n+\t\tadrp2_addr = adrp2_addr + 4;\n+\t      }\n+\n \t    /* adrp x2, DT_TLSDESC_GOT */\n \t    elf_aarch64_update_plt_entry (output_bfd,\n \t\t\t\t\t  BFD_RELOC_AARCH64_ADR_HI21_PCREL,\n@@ -9574,14 +9720,70 @@ elfNN_aarch64_finish_dynamic_sections (bfd *output_bfd,\n   return TRUE;\n }\n \n+/* Check if BTI enabled PLTs are needed.  Returns the type needed.  */\n+static aarch64_plt_type\n+get_plt_type (bfd *abfd)\n+{\n+  aarch64_plt_type ret = PLT_NORMAL;\n+  bfd_byte *contents, *extdyn, *extdynend;\n+  asection *sec = bfd_get_section_by_name (abfd, \".dynamic\");\n+  if (!sec || !bfd_malloc_and_get_section (abfd, sec, &contents))\n+    return ret;\n+  extdyn = contents;\n+  extdynend = contents + sec->size;\n+  for (; extdyn < extdynend; extdyn += sizeof (ElfNN_External_Dyn))\n+    {\n+      Elf_Internal_Dyn dyn;\n+      bfd_elfNN_swap_dyn_in (abfd, extdyn, &dyn);\n+\n+      /* Let's check the processor specific dynamic array tags.  */\n+      bfd_vma tag = dyn.d_tag;\n+      if (tag < DT_LOPROC || tag > DT_HIPROC)\n+\tcontinue;\n+\n+      switch (tag)\n+\t{\n+\tcase DT_AARCH64_BTI_PLT:\n+\t  ret = PLT_BTI;\n+\t  break;\n+\n+\tdefault: break;\n+\t}\n+    }\n+  free (contents);\n+  return ret;\n+}\n+\n+static long\n+elfNN_aarch64_get_synthetic_symtab (bfd *abfd,\n+\t\t\t\t    long symcount,\n+\t\t\t\t    asymbol **syms,\n+\t\t\t\t    long dynsymcount,\n+\t\t\t\t    asymbol **dynsyms,\n+\t\t\t\t    asymbol **ret)\n+{\n+  elf_aarch64_tdata (abfd)->plt_type = get_plt_type (abfd);\n+  return _bfd_elf_get_synthetic_symtab (abfd, symcount, syms,\n+\t\t\t\t\tdynsymcount, dynsyms, ret);\n+}\n+\n /* Return address for Ith PLT stub in section PLT, for relocation REL\n    or (bfd_vma) -1 if it should not be included.  */\n \n static bfd_vma\n elfNN_aarch64_plt_sym_val (bfd_vma i, const asection *plt,\n \t\t\t   const arelent *rel ATTRIBUTE_UNUSED)\n {\n-  return plt->vma + PLT_ENTRY_SIZE + i * PLT_SMALL_ENTRY_SIZE;\n+  size_t plt0_size = PLT_ENTRY_SIZE;\n+  size_t pltn_size = PLT_SMALL_ENTRY_SIZE;\n+\n+  if (elf_aarch64_tdata (plt->owner)->plt_type == PLT_BTI)\n+    {\n+      plt0_size = PLT_BTI_ENTRY_SIZE;\n+      if (elf_elfheader (plt->owner)->e_type == ET_EXEC)\n+\tpltn_size = PLT_BTI_SMALL_ENTRY_SIZE;\n+    }\n+  return plt->vma + plt0_size + i * pltn_size;\n }\n \n /* Returns TRUE if NAME is an AArch64 mapping symbol.\n@@ -9627,6 +9829,9 @@ elfNN_aarch64_link_setup_gnu_properties (struct bfd_link_info *info)\n   uint32_t prop = elf_aarch64_tdata (info->output_bfd)->gnu_and_prop;\n   bfd *pbfd = _bfd_aarch64_elf_link_setup_gnu_properties (info, &prop);\n   elf_aarch64_tdata (info->output_bfd)->gnu_and_prop = prop;\n+  elf_aarch64_tdata (info->output_bfd)->plt_type\n+    |= (prop & GNU_PROPERTY_AARCH64_FEATURE_1_BTI) ? PLT_BTI : 0;\n+  setup_plt_values (info, elf_aarch64_tdata (info->output_bfd)->plt_type);\n   return pbfd;\n }\n \n@@ -9641,6 +9846,23 @@ elfNN_aarch64_merge_gnu_properties (struct bfd_link_info *info,\n {\n   uint32_t prop\n     = elf_aarch64_tdata (info->output_bfd)->gnu_and_prop;\n+\n+  /* If output has been marked with BTI using command line argument, give out\n+     warning if necessary.  */\n+  if ((prop & GNU_PROPERTY_AARCH64_FEATURE_1_BTI)\n+      && (!elf_aarch64_tdata (info->output_bfd)->no_bti_warn))\n+    {\n+      if ((aprop && !(aprop->u.number & GNU_PROPERTY_AARCH64_FEATURE_1_BTI))\n+\t  || (bprop && !(bprop->u.number & GNU_PROPERTY_AARCH64_FEATURE_1_BTI))\n+\t  /* If either property is NULL, it means its bfd did not have any\n+\t     property.  */\n+\t  || !aprop || !bprop)\n+\t{\n+\t  _bfd_error_handler (_(\"warning: BTI turned on by --force-bti when \"\n+\t\t\t\t\"all inputs do not have BTI in NOTE section.\"));\n+\t}\n+    }\n+\n   return  _bfd_aarch64_elf_merge_gnu_properties (info, abfd, aprop,\n \t\t\t\t\t\t bprop, prop);\n }\n@@ -9718,6 +9940,9 @@ const struct elf_size_info elfNN_aarch64_size_info =\n #define bfd_elfNN_find_nearest_line\t\t\\\n   elfNN_aarch64_find_nearest_line\n \n+#define bfd_elfNN_get_synthetic_symtab\t\t\\\n+  elfNN_aarch64_get_synthetic_symtab\n+\n #define bfd_elfNN_mkobject\t\t\t\\\n   elfNN_aarch64_mkobject\n "
    },
    {
      "sha": "b2adf169adf5c669e872055f5dceff1512d87671",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1,3 +1,11 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* readelf.c (get_aarch64_dynamic_type): New.\n+\t(get_dynamic_type): Use above for EM_AARCH64.\n+\t(dynamic_section_aarch64_val): New.\n+\t(process_dynamic_section): Use above for EM_AARCH64.\n+\n 2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n \n \t* readelf.c (decode_aarch64_feature_1_and): New."
    },
    {
      "sha": "f4775b439fc6a14a14699c88af3fe5f07648352e",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1797,6 +1797,17 @@ dump_relocations (Filedata *          filedata,\n   return res;\n }\n \n+static const char *\n+get_aarch64_dynamic_type (unsigned long type)\n+{\n+  switch (type)\n+    {\n+    case DT_AARCH64_BTI_PLT:  return \"AARCH64_BTI_PLT\";\n+    default:\n+      return NULL;\n+    }\n+}\n+\n static const char *\n get_mips_dynamic_type (unsigned long type)\n {\n@@ -2170,6 +2181,9 @@ get_dynamic_type (Filedata * filedata, unsigned long type)\n \n \t  switch (filedata->file_header.e_machine)\n \t    {\n+\t    case EM_AARCH64:\n+\t      result = get_aarch64_dynamic_type (type);\n+\t      break;\n \t    case EM_MIPS:\n \t    case EM_MIPS_RS3_LE:\n \t      result = get_mips_dynamic_type (type);\n@@ -9344,6 +9358,20 @@ process_unwind (Filedata * filedata)\n   return TRUE;\n }\n \n+static void\n+dynamic_section_aarch64_val (Elf_Internal_Dyn * entry)\n+{\n+  switch (entry->d_tag)\n+    {\n+    case DT_AARCH64_BTI_PLT:\n+      break;\n+    default:\n+      print_vma (entry->d_un.d_ptr, PREFIX_HEX);\n+      break;\n+    }\n+  putchar ('\\n');\n+}\n+\n static void\n dynamic_section_mips_val (Elf_Internal_Dyn * entry)\n {\n@@ -10358,6 +10386,9 @@ process_dynamic_section (Filedata * filedata)\n \t    {\n \t      switch (filedata->file_header.e_machine)\n \t\t{\n+\t\tcase EM_AARCH64:\n+\t\t  dynamic_section_aarch64_val (entry);\n+\t\t  break;\n \t\tcase EM_MIPS:\n \t\tcase EM_MIPS_RS3_LE:\n \t\t  dynamic_section_mips_val (entry);"
    },
    {
      "sha": "d67f80f5cb302a178829d2b1b234a56b5f63a70b",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* elf/aarch64.h (DT_AARCH64_BTI_PLT): New.\n+\n 2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n \n \t* elf/common.h (GNU_PROPERTY_AARCH64_FEATURE_1_AND): New."
    },
    {
      "sha": "b86a1006297891d38f55f0c29d0ac51056b0c6e3",
      "filename": "include/elf/aarch64.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/include/elf/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/include/elf/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/aarch64.h?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -35,6 +35,8 @@\n \t\t\t\t\t\tentry point.  */\n #define SHF_COMDEF\t\t0x80000000   /* Section may be multiply defined\n \t\t\t\t\t\tin the input to a link step.  */\n+/* Processor specific dynamic array tags.  */\n+#define DT_AARCH64_BTI_PLT\t(DT_LOPROC + 1)\n \n /* Relocation types.  */\n "
    },
    {
      "sha": "151877da3f33076df4cbc76962a2d1108efd338e",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -1,3 +1,22 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\t    Szabolcs Nagy  <szabolcs.nagy@arm.com>\n+\n+\t* NEWS: Document --force-bti.\n+\t* emultempl/aarch64elf.em (plt_type, bti_type, OPTION_FORCE_BTI): New.\n+\t(PARSE_AND_LIST_SHORTOPTS, PARSE_AND_LIST_OPTIONS): Add force-bti.\n+\t(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_FORCE_BTI.\n+\t* testsuite/ld-aarch64/aarch64-elf.exp: Add all the tests below.\n+\t* testsuite/ld-aarch64/bti-plt-1.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-1.s: New test.\n+\t* testsuite/ld-aarch64/bti-plt-2.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-3.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-4.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-5.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-6.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-7.d: New test.\n+\t* testsuite/ld-aarch64/bti-plt-so.s: New test.\n+\t* testsuite/ld-aarch64/bti-plt.ld: New test.\n+\n 2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n \n \t* NEWS: Document GNU_PROPERTY_AARCH64_FEATURE_1_BTI and"
    },
    {
      "sha": "ed8dfc5d6cfa25b67c954e82f4b4b315bfb185d4",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -10,6 +10,10 @@ Changes in 2.33:\n * Add support for GNU_PROPERTY_AARCH64_FEATURE_1_PAC in ELF GNU program\n   properties in the AArch64 ELF linker.\n \n+* Add --force-bti for AArch64 to enable GNU_PROPERTY_AARCH64_FEATURE_1_BTI\n+  on output while warning about missing GNU_PROPERTY_AARCH64_FEATURE_1_BTI\n+  on inputs and use PLTs protected with BTI.\n+\n Changes in 2.32:\n \n * Report property change in linker map file when merging GNU properties."
    },
    {
      "sha": "02243d9a79b4ea37c19bef527272ef601e005094",
      "filename": "ld/emultempl/aarch64elf.em",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/emultempl/aarch64elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/emultempl/aarch64elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aarch64elf.em?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -33,6 +33,8 @@ static int pic_veneer = 0;\n static int fix_erratum_835769 = 0;\n static int fix_erratum_843419 = 0;\n static int no_apply_dynamic_relocs = 0;\n+static aarch64_plt_type plt_type = PLT_NORMAL;\n+static aarch64_enable_bti_type bti_type = BTI_NONE;\n \n static void\n gld${EMULATION_NAME}_before_parse (void)\n@@ -308,12 +310,17 @@ aarch64_elf_create_output_section_statements (void)\n       return;\n     }\n \n+  aarch64_bti_pac_info bp_info;\n+  bp_info.plt_type = plt_type;\n+  bp_info.bti_type = bti_type;\n+\n   bfd_elf${ELFSIZE}_aarch64_set_options (link_info.output_bfd, &link_info,\n \t\t\t\t no_enum_size_warning,\n \t\t\t\t no_wchar_size_warning,\n \t\t\t\t pic_veneer,\n \t\t\t\t fix_erratum_835769, fix_erratum_843419,\n-\t\t\t\t no_apply_dynamic_relocs);\n+\t\t\t\t no_apply_dynamic_relocs,\n+\t\t\t\t bp_info);\n \n   stub_file = lang_add_input_file (\"linker stubs\",\n \t\t\t\t   lang_input_file_is_fake_enum,\n@@ -365,6 +372,7 @@ PARSE_AND_LIST_PROLOGUE='\n #define OPTION_FIX_ERRATUM_835769\t313\n #define OPTION_FIX_ERRATUM_843419\t314\n #define OPTION_NO_APPLY_DYNAMIC_RELOCS\t315\n+#define OPTION_FORCE_BTI\t\t316\n '\n \n PARSE_AND_LIST_SHORTOPTS=p\n@@ -378,6 +386,7 @@ PARSE_AND_LIST_LONGOPTS='\n   { \"fix-cortex-a53-835769\", no_argument, NULL, OPTION_FIX_ERRATUM_835769},\n   { \"fix-cortex-a53-843419\", no_argument, NULL, OPTION_FIX_ERRATUM_843419},\n   { \"no-apply-dynamic-relocs\", no_argument, NULL, OPTION_NO_APPLY_DYNAMIC_RELOCS},\n+  { \"force-bti\", no_argument, NULL, OPTION_FORCE_BTI},\n '\n \n PARSE_AND_LIST_OPTIONS='\n@@ -398,6 +407,7 @@ PARSE_AND_LIST_OPTIONS='\n   fprintf (file, _(\"  --fix-cortex-a53-835769      Fix erratum 835769\\n\"));\n   fprintf (file, _(\"  --fix-cortex-a53-843419      Fix erratum 843419\\n\"));\n   fprintf (file, _(\"  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations\\n\"));\n+  fprintf (file, _(\"  --force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs\\n\"));\n '\n \n PARSE_AND_LIST_ARGS_CASES='\n@@ -429,6 +439,11 @@ PARSE_AND_LIST_ARGS_CASES='\n       no_apply_dynamic_relocs = 1;\n       break;\n \n+    case OPTION_FORCE_BTI:\n+      plt_type |= PLT_BTI;\n+      bti_type = BTI_WARN;\n+      break;\n+\n     case OPTION_STUBGROUP_SIZE:\n       {\n \tconst char *end;"
    },
    {
      "sha": "906534b230c8905fb97a6739e1c1411683455fe3",
      "filename": "ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/aarch64-elf.exp?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -374,6 +374,8 @@ run_dump_test_lp64 \"pie-bind-locally\"\n run_dump_test \"property-bti-pac1\"\n run_dump_test \"property-bti-pac2\"\n run_dump_test \"property-bti-pac3\"\n+run_dump_test \"bti-plt-1\"\n+run_dump_test \"bti-plt-2\"\n \n set aarch64elflinktests {\n   {\"ld-aarch64/so with global symbol\" \"-shared\" \"\" \"\" {copy-reloc-so.s}\n@@ -389,6 +391,14 @@ set aarch64elflinktests {\n   {\"ld-aarch64/func sym hash opt for exe\"\n    \"-e0 --hash-style=gnu tmpdir/func-in-so.so\" \"\" \"\"\n     {func-sym-hash-opt.s} {{readelf --dyn-sym func-sym-hash-opt.d}} \"hash-opt\"}\n+  {\"Build bti-plt-so for PLT tests\" \"-shared\" \"\" \"\" {bti-plt-so.s}\n+    {} \"libbti-plt-so.so\"}\n }\n \n run_ld_link_tests $aarch64elflinktests\n+\n+run_dump_test \"bti-plt-3\"\n+run_dump_test \"bti-plt-4\"\n+run_dump_test \"bti-plt-5\"\n+run_dump_test \"bti-plt-6\"\n+run_dump_test \"bti-plt-7\""
    },
    {
      "sha": "b7b58a8844c7de594e0e4576d0d64cf2958fc329",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-1.d",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-1.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,32 @@\n+#name: Check --force-bti emits BTI PLT (shared)\n+#source: bti-plt-1.s\n+#as: -mabi=lp64\n+#ld: -shared --force-bti -T bti-plt.ld\n+#objdump: -dr -j .plt\n+\n+[^:]*: *file format elf64-.*aarch64\n+\n+Disassembly of section \\.plt:\n+\n+[0-9]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\ta9bf7bf0 \tstp\tx16, x30, \\[sp, #-16\\]!\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9400e11 \tldr\tx17, \\[x16, #24\\]\n+.*:\t91006210 \tadd\tx16, x16, #0x18\n+.*:\td61f0220 \tbr\tx17\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+\n+[0-9]+ <.*>:\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9401211 \tldr\tx17, \\[x16, #32\\]\n+.*:\t91008210 \tadd\tx16, x16, #0x20\n+.*:\td61f0220 \tbr\tx17\n+\n+[0-9]+ <.*>:\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9401611 \tldr\tx17, \\[x16, #40\\]\n+.*:\t9100a210 \tadd\tx16, x16, #0x28\n+.*:\td61f0220 \tbr\tx17"
    },
    {
      "sha": "78e1aaae390192242f8674ec843aea87a6ff489a",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-1.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-1.s?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,21 @@\n+\t.text\n+\t.globl _start\n+\t.type _start,@function\n+_start:\n+\tbl foo\n+\tbl bar\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\t\t/* BTI.  */\n+4:\n+\t.p2align 3\n+5:"
    },
    {
      "sha": "c26e47a34f1109e061da1e0c760830db6dd5028a",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-2.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-2.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,11 @@\n+#name: Check --force-bti emits BTI feature (shared)\n+#source: bti-plt-1.s\n+#source: bti-plt-2.s\n+#as: -mabi=lp64\n+#ld: -shared --force-bti -T bti-plt.ld\n+#readelf: -n\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI"
    },
    {
      "sha": "fff945c9f42e41d7d3b4fed36eb2e920d4a0f35f",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-2.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-2.s?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,21 @@\n+\t.text\n+\t.globl _start\n+\t.type _start,@function\n+func2:\n+\tbl foo2\n+\tbl bar2\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\t\t/* BTI.  */\n+4:\n+\t.p2align 3\n+5:"
    },
    {
      "sha": "0d4c467db84b14402af4c043d911b42bfc8bb0e2",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-3.d",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-3.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,34 @@\n+#name: Check --force-bti emits BTI PLT (exec)\n+#source: bti-plt-1.s\n+#as: -mabi=lp64\n+#ld: --force-bti -e _start -T bti-plt.ld -L./tmpdir -lbti-plt-so\n+#objdump: -dr -j .plt\n+\n+[^:]*: *file format elf64-.*aarch64\n+\n+Disassembly of section \\.plt:\n+\n+[0-9]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\ta9bf7bf0 \tstp\tx16, x30, \\[sp, #-16\\]!\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9400e11 \tldr\tx17, \\[x16, #24\\]\n+.*:\t91006210 \tadd\tx16, x16, #0x18\n+.*:\td61f0220 \tbr\tx17\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+\n+[0-9]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9401211 \tldr\tx17, \\[x16, #32\\]\n+.*:\t91008210 \tadd\tx16, x16, #0x20\n+.*:\td61f0220 \tbr\tx17\n+\n+[0-9]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\t90000090 \tadrp\tx16, 28000 <_GLOBAL_OFFSET_TABLE_>\n+.*:\tf9401611 \tldr\tx17, \\[x16, #40\\]\n+.*:\t9100a210 \tadd\tx16, x16, #0x28\n+.*:\td61f0220 \tbr\tx17"
    },
    {
      "sha": "90aeed2d7bb9629216dad794fd08910b2f5ba7e7",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-4.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-4.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,10 @@\n+#name: Check --force-bti emits BTI feature (exec)\n+#source: bti-plt-1.s\n+#as: -mabi=lp64\n+#ld: --force-bti -e _start -T bti-plt.ld -L./tmpdir -lbti-plt-so\n+#readelf: -n\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI"
    },
    {
      "sha": "01231b69d2c4066d0fe3c49e359cef9b670ba34d",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-5.d",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-5.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-5.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-5.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,28 @@\n+#name: BTI PLT with only GNU PROP\n+#source: property-bti-pac1.s\n+#as: -mabi=lp64 -defsym __property_bti__=1\n+#ld: -e _start -L./tmpdir -lbti-plt-so\n+#objdump: -dr -j .plt\n+#target: *linux*\n+\n+[^:]*: *file format elf64-.*aarch64\n+\n+Disassembly of section \\.plt:\n+\n+[0-9a-f]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\ta9bf7bf0 \tstp\tx16, x30, \\[sp, #-16\\]!\n+.*:\t90000090 \tadrp\tx16, 410000 <_start\\+0xfd28>\n+.*:\tf9421611 \tldr\tx17, \\[x16, #1064\\]\n+.*:\t9110a210 \tadd\tx16, x16, #0x428\n+.*:\td61f0220 \tbr\tx17\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+.*:\td503201f \tnop\n+\n+[0-9a-f]+ <.*>:\n+.*:\td503245f \tbti\tc\n+.*:\t90000090 \tadrp\tx16, 410000 <_start\\+0xfd28>\n+.*:\tf9421a11 \tldr\tx17, \\[x16, #1072\\]\n+.*:\t9110c210 \tadd\tx16, x16, #0x430\n+.*:\td61f0220 \tbr\tx17"
    },
    {
      "sha": "c7d5169e810e635ff787503e96e27c1fe4a12731",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-6.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-6.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-6.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-6.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,15 @@\n+#name: Warn with one missing GNU NOTE BTI input\n+#source: property-bti-pac1.s\n+#source: property-bti-pac2.s\n+#as: -mabi=lp64 -defsym __property_pac__=1\n+#ld: -shared --force-bti\n+#warning: .*: warning: BTI turned on by --force-bti.*$\n+#readelf: -n\n+\n+# Should warn about the missing input BTI NOTE but should\n+# still mark output as BTI\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI, PAC"
    },
    {
      "sha": "625f2847b0c9564ef7af7a2b95ea3e368ddf8b08",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-7.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-7.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-7.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-7.d?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,15 @@\n+#name: Warn when neither inputs has GNU NOTE BTI\n+#source: property-bti-pac1.s\n+#source: plt_mapping_symbol.s\n+#as: -mabi=lp64\n+#ld: -shared --force-bti\n+#warning: .*: warning: BTI turned on by --force-bti.*$\n+#readelf: -n\n+\n+# Should warn about the missing input BTI NOTE but should\n+# still mark output as BTI\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI"
    },
    {
      "sha": "2c11356dba80cc0a0717a515a6aedf6887a094fa",
      "filename": "ld/testsuite/ld-aarch64/bti-plt-so.s",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-so.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt-so.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt-so.s?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,41 @@\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\tsub\tsp, sp, #16\n+\tmov\tw0, 9\n+\tstr\tw0, [sp, 12]\n+\tldr\tw0, [sp, 12]\n+\tadd\tw0, w0, 4\n+\tstr\tw0, [sp, 12]\n+\tnop\n+\tadd\tsp, sp, 16\n+\tret\n+\t.size\tfoo, .-foo\n+\t.global\tbar\n+\t.type\tbar, %function\n+bar:\n+\tsub\tsp, sp, #16\n+\tmov\tw0, 9\n+\tstr\tw0, [sp, 12]\n+\tldr\tw0, [sp, 12]\n+\tadd\tw0, w0, 4\n+\tstr\tw0, [sp, 12]\n+\tnop\n+\tadd\tsp, sp, 16\n+\tret\n+\t.size\tbar, .-bar\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\t\t/* BTI.  */\n+4:\n+\t.p2align 3\n+5:"
    },
    {
      "sha": "8682623d69b97cd735a7459838c0ce547723c337",
      "filename": "ld/testsuite/ld-aarch64/bti-plt.ld",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37c18eedffe3926a330149ca93e7407917e2be38/ld/testsuite/ld-aarch64/bti-plt.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/bti-plt.ld?ref=37c18eedffe3926a330149ca93e7407917e2be38",
      "patch": "@@ -0,0 +1,14 @@\n+OUTPUT_ARCH(aarch64)\n+ENTRY(_start)\n+SECTIONS\n+{\n+  . = 0x10000;\n+  .rela.plt       : { *(.rela.plt) *(.rela.iplt) }\n+  . = 0x18000;\n+  .plt            : { *(.plt) *(.iplt) }\n+  . = 0x20000;\n+  .text           : { *(.text) }\n+  . = 0x28000;\n+  .got            : { *(.got) *(.got.plt) }\n+  .ARM.attributes 0 : { *(.ARM.atttributes) }\n+}"
    }
  ]
}