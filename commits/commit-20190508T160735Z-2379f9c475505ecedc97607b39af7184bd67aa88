{
  "sha": "2379f9c475505ecedc97607b39af7184bd67aa88",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjM3OWY5YzQ3NTUwNWVjZWRjOTc2MDdiMzlhZjcxODRiZDY3YWE4OA==",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2019-05-04T01:21:49Z"
    },
    "committer": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2019-05-08T16:07:35Z"
    },
    "message": "Sign-extend start and stop address inputs to objdump\n\nFor targets that treat addresses as signed (MIPS/SH64), user-specified\nstart/stop address limits cannot be compared directly to section VMAs.\nWe must sign-extend user-specified 32-bit address limits which have\nbit 31 set for such targets.\n\nbinutils/\n\t* objdump.c (sign_extend_address): New function.\n\t(dump_bfd): Sign-extend user-specified start/stop addresses\n\tfor targets that need it.\n\t* testsuite/binutils-all/objdump.exp: Add tests for objdump\n\twith start and stop addresses in higher address ranges.",
    "tree": {
      "sha": "1640b839f8c2c2ceedb7d53225b8b6e30c16e2ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1640b839f8c2c2ceedb7d53225b8b6e30c16e2ce"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2379f9c475505ecedc97607b39af7184bd67aa88",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2379f9c475505ecedc97607b39af7184bd67aa88",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2379f9c475505ecedc97607b39af7184bd67aa88",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2379f9c475505ecedc97607b39af7184bd67aa88/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46752c37b06c83a8cbf6be887beac4092d5e3505",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46752c37b06c83a8cbf6be887beac4092d5e3505",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46752c37b06c83a8cbf6be887beac4092d5e3505"
    }
  ],
  "stats": {
    "total": 88,
    "additions": 88,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ecbe75973ae3d6f8322f39da0347821230c9c454",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=2379f9c475505ecedc97607b39af7184bd67aa88",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-08  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n+\n+\t* objdump.c (sign_extend_address): New function.\n+\t(dump_bfd): Sign-extend user-specified start/stop addresses\n+\tfor targets that need it.\n+\t* testsuite/binutils-all/objdump.exp: Add tests for objdump\n+\twith start and stop addresses in higher address ranges.\n+\n 2019-05-01  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* testsuite/binutils-all/objdump.exp: Correct executable"
    },
    {
      "sha": "05d503e5148512db7a8f6ba6e8539db3828f6d08",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=2379f9c475505ecedc97607b39af7184bd67aa88",
      "patch": "@@ -3749,11 +3749,25 @@ adjust_addresses (bfd *abfd ATTRIBUTE_UNUSED,\n     }\n }\n \n+/* Return the sign-extended form of an ARCH_SIZE sized VMA.  */\n+\n+static bfd_vma\n+sign_extend_address (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t     bfd_vma vma,\n+\t\t     unsigned arch_size)\n+{\n+  bfd_vma mask;\n+  mask = (bfd_vma) 1 << (arch_size - 1);\n+  return (((vma & ((mask << 1) - 1)) ^ mask) - mask);\n+}\n+\n /* Dump selected contents of ABFD.  */\n \n static void\n dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n {\n+  const struct elf_backend_data * bed;\n+\n   if (bfd_big_endian (abfd))\n     byte_get = byte_get_big_endian;\n   else if (bfd_little_endian (abfd))\n@@ -3784,6 +3798,18 @@ dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n \t}\n     }\n \n+  /* Adjust user-specified start and stop limits for targets that use\n+     signed addresses.  */\n+  if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n+      && (bed = get_elf_backend_data (abfd)) != NULL\n+      && bed->sign_extend_vma)\n+    {\n+      start_address = sign_extend_address (abfd, start_address,\n+\t\t\t\t\t   bed->s->arch_size);\n+      stop_address = sign_extend_address (abfd, stop_address,\n+\t\t\t\t\t  bed->s->arch_size);\n+    }\n+\n   /* If we are adjusting section VMA's, change them all now.  Changing\n      the BFD information is a hack.  However, we must do it, or\n      bfd_find_nearest_line will not do the right thing.  */"
    },
    {
      "sha": "f25946ca0814e638e44ad65bea739691af84370a",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2379f9c475505ecedc97607b39af7184bd67aa88/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=2379f9c475505ecedc97607b39af7184bd67aa88",
      "patch": "@@ -672,6 +672,60 @@ if {[is_elf_format]} then {\n     test_follow_debuglink \"--dwarf=follow-links --headers --wide\" objdump.WK3\n }\n \n+# Test objdump output with start and stop address limits for the specified\n+# dump option\n+\n+proc test_objdump_limited { testfile dopt want start stop } {\n+    global OBJDUMP\n+    global OBJDUMPFLAGS\n+\n+    set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS $dopt --start-address 0x$start --stop-address 0x$stop $testfile\"]\n+\n+    if [regexp $want $got] then {\n+\tpass \"objdump $dopt --start-address 0x$start --stop-address 0x$stop ($testfile)\"\n+    } else {\n+\tfail \"objdump $dopt --start-address 0x$start --stop-address 0x$stop ($testfile)\"\n+    }\n+}\n+\n+# Test objdump -d --start-address M --stop-address N\n+\n+proc test_objdump_disas_limited { testfile start stop } {\n+    set want \"$testfile:\\[ \t\\]*file format.*Disassembly of section .text:\\n.*\\[ \\]*$start:.*\"\n+    test_objdump_limited $testfile -d $want $start $stop\n+}\n+\n+# Test objdump -s --start-address M --stop-address N\n+\n+proc test_objdump_content_limited { testfile start stop } {\n+    set want \"$testfile:\\[ \t\\]*file format.*Contents of section .text:\\n\\[ \\]*$start .*\"\n+    test_objdump_limited $testfile -s $want $start $stop\n+}\n+\n+# Test objdump with --start-address and --stop-address options for higher\n+# address ranges which may be sign-extended on targets that treat addresses\n+# as signed.  We only check that objdump produces some dump output at the\n+# specified start address as a proxy for correct enforcement of the\n+# start/stop limits.\n+\n+if {[is_elf_format]} then {\n+    # generate a copy of the test object with .text repositioned\n+    if { [binutils_run $OBJCOPY \"--change-section-address .text=0x80000000 tmpdir/bintest.o tmpdir/bintest_signed.o\"] != \"\" } {\n+\tfail \"Failed to reposition .text to 0x80000000 (tmpdir/bintest.o -> tmpdir/bintest_signed.o)\"\n+\treturn\n+    }\n+\n+    if [is_remote host] {\n+\tset testfile3 [remote_download host tmpdir/bintest_signed.o]\n+    } else {\n+\tset testfile3 tmpdir/bintest_signed.o\n+    }\n+\n+    test_objdump_content_limited $testfile3 \"80000004\" \"80000008\"\n+    test_objdump_disas_limited $testfile3 \"80000004\" \"80000008\"\n+    remote_file host delete $testfile3\n+}\n+\n # Options which are not tested: -a -D -R -T -x -l --stabs\n # I don't see any generic way to test any of these other than -a.\n # Tests could be written for specific targets, and that should be done"
    }
  ]
}