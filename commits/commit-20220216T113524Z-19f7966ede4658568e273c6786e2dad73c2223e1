{
  "sha": "19f7966ede4658568e273c6786e2dad73c2223e1",
  "node_id": "C_kwDOANOeidoAKDE5Zjc5NjZlZGU0NjU4NTY4ZTI3M2M2Nzg2ZTJkYWQ3M2MyMjIzZTE",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-16T02:41:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-16T11:35:24Z"
    },
    "message": "gas local label and dollar label handling\n\nMuch of the gas source and older BFD source use \"long\" for function\nparameters and variables, when other types would be more appropriate.\nThis patch fixes one of those cases.  Dollar labels and numeric local\nlabels do not need large numbers.  Small positive itegers are usually\nall that is required.  Due to allowing longs, it was possible for\nfb_label_name and dollar_label_name to overflow their buffers.\n\n\t* symbols.c: Delete unnecessary forward declarations.\n\t(dollar_labels, dollar_label_instances): Use unsigned int.\n\t(dollar_label_defined, dollar_label_instance): Likewise.\n\t(define_dollar_label): Likewise.\n\t(fb_low_counter, fb_labels, fb_label_instances): Likewise.\n\t(fb_label_instance_inc, fb_label_instance): Likewise.\n\t(fb_label_count, fb_label_max): Make them size_t.\n\t(dollar_label_name, fb_label_name): Rewrite using sprintf.\n\t* symbols.h (dollar_label_defined): Update prototype.\n\t(define_dollar_label, dollar_label_name): Likewise.\n\t(fb_label_instance_inc, fb_label_name): Likewise.\n\t* config/bfin-lex.l (yylex): Remove unnecessary casts.\n\t* expr.c (integer_constant): Likewise.\n\t* read.c (read_a_source_file): Limit numeric label range to int.",
    "tree": {
      "sha": "09632187cfc3a869120841aca97c52d7d962066b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/09632187cfc3a869120841aca97c52d7d962066b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/19f7966ede4658568e273c6786e2dad73c2223e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19f7966ede4658568e273c6786e2dad73c2223e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/19f7966ede4658568e273c6786e2dad73c2223e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19f7966ede4658568e273c6786e2dad73c2223e1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "969f6a63c0ae7779fd5eb10af25fd4ab810feef8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/969f6a63c0ae7779fd5eb10af25fd4ab810feef8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/969f6a63c0ae7779fd5eb10af25fd4ab810feef8"
    }
  ],
  "stats": {
    "total": 202,
    "additions": 71,
    "deletions": 131
  },
  "files": [
    {
      "sha": "f0a685b710b5c2e517bf82968098296cc253fc2e",
      "filename": "gas/config/bfin-lex.l",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19f7966ede4658568e273c6786e2dad73c2223e1/gas/config/bfin-lex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19f7966ede4658568e273c6786e2dad73c2223e1/gas/config/bfin-lex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/bfin-lex.l?ref=19f7966ede4658568e273c6786e2dad73c2223e1",
      "patch": "@@ -311,7 +311,7 @@ int yylex (void);\n     char *ref = strdup (yytext);\n     if (ref[1] == 'b' || ref[1] == 'B')\n       {\n-        name = fb_label_name ((int) (ref[0] - '0'), 0);\n+        name = fb_label_name (ref[0] - '0', 0);\n \tyylval.symbol = symbol_find (name);\n \n \tif ((yylval.symbol != NULL)\n@@ -329,7 +329,7 @@ int yylex (void);\n            Construct a local label name, then an undefined symbol.\n            Just return it as never seen before.  */\n \n-        name = fb_label_name ((int) (ref[0] - '0'), 1);\n+        name = fb_label_name (ref[0] - '0', 1);\n \tyylval.symbol = symbol_find_or_make (name);\n \t/* We have no need to check symbol properties.  */\n \treturn SYMBOL;"
    },
    {
      "sha": "bd5b9e70a4a931a727f11798fa74bbc8498cdb9d",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19f7966ede4658568e273c6786e2dad73c2223e1/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19f7966ede4658568e273c6786e2dad73c2223e1/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=19f7966ede4658568e273c6786e2dad73c2223e1",
      "patch": "@@ -567,7 +567,7 @@ integer_constant (int radix, expressionS *expressionP)\n \t  /* Backward ref to local label.\n \t     Because it is backward, expect it to be defined.  */\n \t  /* Construct a local label.  */\n-\t  name = fb_label_name ((int) number, 0);\n+\t  name = fb_label_name (number, 0);\n \n \t  /* Seen before, or symbol is defined: OK.  */\n \t  symbolP = symbol_find (name);\n@@ -601,7 +601,7 @@ integer_constant (int radix, expressionS *expressionP)\n \t     Construct a local label name, then an undefined symbol.\n \t     Don't create a xseg frag for it: caller may do that.\n \t     Just return it as never seen before.  */\n-\t  name = fb_label_name ((int) number, 1);\n+\t  name = fb_label_name (number, 1);\n \t  symbolP = symbol_find_or_make (name);\n \t  /* We have no need to check symbol properties.  */\n #ifndef many_segments\n@@ -620,15 +620,15 @@ integer_constant (int radix, expressionS *expressionP)\n \t     then this is a fresh instantiation of that number, so create\n \t     it.  */\n \n-\t  if (dollar_label_defined ((long) number))\n+\t  if (dollar_label_defined (number))\n \t    {\n-\t      name = dollar_label_name ((long) number, 0);\n+\t      name = dollar_label_name (number, 0);\n \t      symbolP = symbol_find (name);\n \t      know (symbolP != NULL);\n \t    }\n \t  else\n \t    {\n-\t      name = dollar_label_name ((long) number, 1);\n+\t      name = dollar_label_name (number, 1);\n \t      symbolP = symbol_find_or_make (name);\n \t    }\n "
    },
    {
      "sha": "fe0aff261757f74069ed56e154804b809225db1e",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19f7966ede4658568e273c6786e2dad73c2223e1/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19f7966ede4658568e273c6786e2dad73c2223e1/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=19f7966ede4658568e273c6786e2dad73c2223e1",
      "patch": "@@ -1266,7 +1266,7 @@ read_a_source_file (const char *name)\n \t      while (ISDIGIT (*input_line_pointer))\n \t\t{\n \t\t  const long digit = *input_line_pointer - '0';\n-\t\t  if (temp > (LONG_MAX - digit) / 10)\n+\t\t  if (temp > (INT_MAX - digit) / 10)\n \t\t    {\n \t\t      as_bad (_(\"local label too large near %s\"), backup);\n \t\t      temp = -1;"
    },
    {
      "sha": "2a0ee7783c0b4dc6e2c1de2c9647837e765f0ed0",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 58,
      "deletions": 118,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19f7966ede4658568e273c6786e2dad73c2223e1/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19f7966ede4658568e273c6786e2dad73c2223e1/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=19f7966ede4658568e273c6786e2dad73c2223e1",
      "patch": "@@ -246,13 +246,6 @@ struct obstack notes;\n const char * an_external_name;\n #endif\n \n-static const char *save_symbol_name (const char *);\n-static void fb_label_init (void);\n-static long dollar_label_instance (long);\n-static long fb_label_instance (long);\n-\n-static void print_binary (FILE *, const char *, expressionS *);\n-\n /* Return a pointer to a new symbol.  Die if we can't make a new\n    symbol.  Fill in the symbol's values.  Add symbol to end of symbol\n    chain.\n@@ -1804,16 +1797,17 @@ snapshot_symbol (symbolS **symbolPP, valueT *valueP, segT *segP, fragS **fragPP)\n    the instance number, keep a list of defined symbols separate from the real\n    symbol table, and we treat these buggers as a sparse array.  */\n \n-static long *dollar_labels;\n-static long *dollar_label_instances;\n+typedef unsigned int dollar_ent;\n+static dollar_ent *dollar_labels;\n+static dollar_ent *dollar_label_instances;\n static char *dollar_label_defines;\n static size_t dollar_label_count;\n static size_t dollar_label_max;\n \n int\n-dollar_label_defined (long label)\n+dollar_label_defined (unsigned int label)\n {\n-  long *i;\n+  dollar_ent *i;\n \n   know ((dollar_labels != NULL) || (dollar_label_count == 0));\n \n@@ -1825,10 +1819,10 @@ dollar_label_defined (long label)\n   return 0;\n }\n \n-static long\n-dollar_label_instance (long label)\n+static unsigned int\n+dollar_label_instance (unsigned int label)\n {\n-  long *i;\n+  dollar_ent *i;\n \n   know ((dollar_labels != NULL) || (dollar_label_count == 0));\n \n@@ -1851,9 +1845,9 @@ dollar_label_clear (void)\n #define DOLLAR_LABEL_BUMP_BY 10\n \n void\n-define_dollar_label (long label)\n+define_dollar_label (unsigned int label)\n {\n-  long *i;\n+  dollar_ent *i;\n \n   for (i = dollar_labels; i < dollar_labels + dollar_label_count; ++i)\n     if (*i == label)\n@@ -1867,18 +1861,20 @@ define_dollar_label (long label)\n \n   if (dollar_labels == NULL)\n     {\n-      dollar_labels = XNEWVEC (long, DOLLAR_LABEL_BUMP_BY);\n-      dollar_label_instances = XNEWVEC (long, DOLLAR_LABEL_BUMP_BY);\n+      dollar_labels = XNEWVEC (dollar_ent, DOLLAR_LABEL_BUMP_BY);\n+      dollar_label_instances = XNEWVEC (dollar_ent, DOLLAR_LABEL_BUMP_BY);\n       dollar_label_defines = XNEWVEC (char, DOLLAR_LABEL_BUMP_BY);\n       dollar_label_max = DOLLAR_LABEL_BUMP_BY;\n       dollar_label_count = 0;\n     }\n   else if (dollar_label_count == dollar_label_max)\n     {\n       dollar_label_max += DOLLAR_LABEL_BUMP_BY;\n-      dollar_labels = XRESIZEVEC (long, dollar_labels, dollar_label_max);\n-      dollar_label_instances = XRESIZEVEC (long, dollar_label_instances,\n-\t\t\t\t\t  dollar_label_max);\n+      dollar_labels = XRESIZEVEC (dollar_ent, dollar_labels,\n+\t\t\t\t  dollar_label_max);\n+      dollar_label_instances = XRESIZEVEC (dollar_ent,\n+\t\t\t\t\t   dollar_label_instances,\n+\t\t\t\t\t   dollar_label_max);\n       dollar_label_defines = XRESIZEVEC (char, dollar_label_defines,\n \t\t\t\t\t dollar_label_max);\n     }\t\t\t\t/* if we needed to grow  */\n@@ -1898,50 +1894,22 @@ define_dollar_label (long label)\n    symbol. The first \"4:\" is \"L4^A1\" - the m numbers begin at 1.\n \n    fb labels get the same treatment, except that ^B is used in place\n-   of ^A.  */\n+   of ^A.\n \n-char *\t\t\t\t/* Return local label name.  */\n-dollar_label_name (long n,\t/* we just saw \"n$:\" : n a number.  */\n-\t\t   int augend\t/* 0 for current instance, 1 for new instance.  */)\n+   AUGEND is 0 for current instance, 1 for new instance.  */\n+\n+char *\n+dollar_label_name (unsigned int n, unsigned int augend)\n {\n-  long i;\n   /* Returned to caller, then copied.  Used for created names (\"4f\").  */\n   static char symbol_name_build[24];\n-  char *p;\n-  char *q;\n-  char symbol_name_temporary[20];\t/* Build up a number, BACKWARDS.  */\n+  char *p = symbol_name_build;\n \n-  know (n >= 0);\n-  know (augend == 0 || augend == 1);\n-  p = symbol_name_build;\n #ifdef LOCAL_LABEL_PREFIX\n   *p++ = LOCAL_LABEL_PREFIX;\n #endif\n-  *p++ = 'L';\n-\n-  /* Next code just does sprintf( {}, \"%d\", n);  */\n-  /* Label number.  */\n-  q = symbol_name_temporary;\n-  for (*q++ = 0, i = n; i; ++q)\n-    {\n-      *q = i % 10 + '0';\n-      i /= 10;\n-    }\n-  while ((*p = *--q) != '\\0')\n-    ++p;\n-\n-  *p++ = DOLLAR_LABEL_CHAR;\t\t/* ^A  */\n-\n-  /* Instance number.  */\n-  q = symbol_name_temporary;\n-  for (*q++ = 0, i = dollar_label_instance (n) + augend; i; ++q)\n-    {\n-      *q = i % 10 + '0';\n-      i /= 10;\n-    }\n-  while ((*p++ = *--q) != '\\0');\n-\n-  /* The label, as a '\\0' ended string, starts at symbol_name_build.  */\n+  sprintf (p, \"L%u%c%u\",\n+\t   n, DOLLAR_LABEL_CHAR, dollar_label_instance (n) + augend);\n   return symbol_name_build;\n }\n \n@@ -1964,11 +1932,12 @@ dollar_label_name (long n,\t/* we just saw \"n$:\" : n a number.  */\n \n #define FB_LABEL_SPECIAL (10)\n \n-static long fb_low_counter[FB_LABEL_SPECIAL];\n-static long *fb_labels;\n-static long *fb_label_instances;\n-static long fb_label_count;\n-static long fb_label_max;\n+typedef unsigned int fb_ent;\n+static fb_ent fb_low_counter[FB_LABEL_SPECIAL];\n+static fb_ent *fb_labels;\n+static fb_ent *fb_label_instances;\n+static size_t fb_label_count;\n+static size_t fb_label_max;\n \n /* This must be more than FB_LABEL_SPECIAL.  */\n #define FB_LABEL_BUMP_BY (FB_LABEL_SPECIAL + 6)\n@@ -1982,11 +1951,11 @@ fb_label_init (void)\n /* Add one to the instance number of this fb label.  */\n \n void\n-fb_label_instance_inc (long label)\n+fb_label_instance_inc (unsigned int label)\n {\n-  long *i;\n+  fb_ent *i;\n \n-  if ((unsigned long) label < FB_LABEL_SPECIAL)\n+  if (label < FB_LABEL_SPECIAL)\n     {\n       ++fb_low_counter[label];\n       return;\n@@ -2009,44 +1978,41 @@ fb_label_instance_inc (long label)\n \n   if (fb_labels == NULL)\n     {\n-      fb_labels = XNEWVEC (long, FB_LABEL_BUMP_BY);\n-      fb_label_instances = XNEWVEC (long, FB_LABEL_BUMP_BY);\n+      fb_labels = XNEWVEC (fb_ent, FB_LABEL_BUMP_BY);\n+      fb_label_instances = XNEWVEC (fb_ent, FB_LABEL_BUMP_BY);\n       fb_label_max = FB_LABEL_BUMP_BY;\n       fb_label_count = FB_LABEL_SPECIAL;\n \n     }\n   else if (fb_label_count == fb_label_max)\n     {\n       fb_label_max += FB_LABEL_BUMP_BY;\n-      fb_labels = XRESIZEVEC (long, fb_labels, fb_label_max);\n-      fb_label_instances = XRESIZEVEC (long, fb_label_instances, fb_label_max);\n+      fb_labels = XRESIZEVEC (fb_ent, fb_labels, fb_label_max);\n+      fb_label_instances = XRESIZEVEC (fb_ent, fb_label_instances,\n+\t\t\t\t       fb_label_max);\n     }\t\t\t\t/* if we needed to grow  */\n \n   fb_labels[fb_label_count] = label;\n   fb_label_instances[fb_label_count] = 1;\n   ++fb_label_count;\n }\n \n-static long\n-fb_label_instance (long label)\n+static unsigned int\n+fb_label_instance (unsigned int label)\n {\n-  long *i;\n+  fb_ent *i;\n \n-  if ((unsigned long) label < FB_LABEL_SPECIAL)\n-    {\n-      return (fb_low_counter[label]);\n-    }\n+  if (label < FB_LABEL_SPECIAL)\n+    return (fb_low_counter[label]);\n \n   if (fb_labels != NULL)\n     {\n       for (i = fb_labels + FB_LABEL_SPECIAL;\n \t   i < fb_labels + fb_label_count; ++i)\n \t{\n \t  if (*i == label)\n-\t    {\n-\t      return (fb_label_instances[i - fb_labels]);\n-\t    }\t\t\t/* if we find it  */\n-\t}\t\t\t/* for each existing label  */\n+\t    return (fb_label_instances[i - fb_labels]);\n+\t}\n     }\n \n   /* We didn't find the label, so this must be a reference to the\n@@ -2063,55 +2029,29 @@ fb_label_instance (long label)\n    symbol. The first \"4:\" is \"L4^B1\" - the m numbers begin at 1.\n \n    dollar labels get the same treatment, except that ^A is used in\n-   place of ^B.  */\n+   place of ^B.\n+\n+   AUGEND is 0 for nb, 1 for n:, nf.  */\n \n-char *\t\t\t\t/* Return local label name.  */\n-fb_label_name (long n,\t/* We just saw \"n:\", \"nf\" or \"nb\" : n a number.  */\n-\t       long augend\t/* 0 for nb, 1 for n:, nf.  */)\n+char *\n+fb_label_name (unsigned int n, unsigned int augend)\n {\n-  long i;\n   /* Returned to caller, then copied.  Used for created names (\"4f\").  */\n   static char symbol_name_build[24];\n-  char *p;\n-  char *q;\n-  char symbol_name_temporary[20];\t/* Build up a number, BACKWARDS.  */\n+  char *p = symbol_name_build;\n \n-  know (n >= 0);\n #ifdef TC_MMIX\n-  know ((unsigned long) augend <= 2 /* See mmix_fb_label.  */);\n+  know (augend <= 2 /* See mmix_fb_label.  */);\n #else\n-  know ((unsigned long) augend <= 1);\n+  know (augend <= 1);\n #endif\n-  p = symbol_name_build;\n+\n #ifdef LOCAL_LABEL_PREFIX\n   *p++ = LOCAL_LABEL_PREFIX;\n #endif\n-  *p++ = 'L';\n-\n-  /* Next code just does sprintf( {}, \"%d\", n);  */\n-  /* Label number.  */\n-  q = symbol_name_temporary;\n-  for (*q++ = 0, i = n; i; ++q)\n-    {\n-      *q = i % 10 + '0';\n-      i /= 10;\n-    }\n-  while ((*p = *--q) != '\\0')\n-    ++p;\n-\n-  *p++ = LOCAL_LABEL_CHAR;\t\t/* ^B  */\n-\n-  /* Instance number.  */\n-  q = symbol_name_temporary;\n-  for (*q++ = 0, i = fb_label_instance (n) + augend; i; ++q)\n-    {\n-      *q = i % 10 + '0';\n-      i /= 10;\n-    }\n-  while ((*p++ = *--q) != '\\0');\n-\n-  /* The label, as a '\\0' ended string, starts at symbol_name_build.  */\n-  return (symbol_name_build);\n+  sprintf (p, \"L%u%c%u\",\n+\t   n, LOCAL_LABEL_CHAR, fb_label_instance (n) + augend);\n+  return symbol_name_build;\n }\n \n /* Decode name that may have been generated by foo_label_name() above."
    },
    {
      "sha": "19eb658ca68fc425421a85a1caa4a4b47aa691f7",
      "filename": "gas/symbols.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19f7966ede4658568e273c6786e2dad73c2223e1/gas/symbols.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19f7966ede4658568e273c6786e2dad73c2223e1/gas/symbols.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.h?ref=19f7966ede4658568e273c6786e2dad73c2223e1",
      "patch": "@@ -72,13 +72,13 @@ void print_expr (expressionS *);\n void print_expr_1 (FILE *, expressionS *);\n void print_symbol_value_1 (FILE *, symbolS *);\n \n-int dollar_label_defined (long l);\n+int dollar_label_defined (unsigned int);\n void dollar_label_clear (void);\n-void define_dollar_label (long l);\n-char *dollar_label_name (long l, int augend);\n+void define_dollar_label (unsigned int);\n+char *dollar_label_name (unsigned int, unsigned int);\n \n-void fb_label_instance_inc (long label);\n-char *fb_label_name (long n, long augend);\n+void fb_label_instance_inc (unsigned int);\n+char *fb_label_name (unsigned int, unsigned int);\n \n extern void copy_symbol_attributes (symbolS *, symbolS *);\n "
    }
  ]
}