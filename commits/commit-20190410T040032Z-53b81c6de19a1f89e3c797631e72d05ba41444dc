{
  "sha": "53b81c6de19a1f89e3c797631e72d05ba41444dc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNiODFjNmRlMTlhMWY4OWUzYzc5NzYzMWU3MmQwNWJhNDE0NDRkYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-10T02:28:15Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-10T04:00:32Z"
    },
    "message": "cskyelf.em branch stub handling\n\nThis fixes the csky-elf ld-elf/pr21884 and ld-unique/pr21529 failures,\nby disabling branch stubs for binary (and other non-csky) output.\nThe csky-linux target gets branch stubs off by default because\npresumably there are reasons why branch stubs were disabled, but\nrather than killing the support completely it can be enabled by\n--branch-stub.\n\n\t* emultempl/cskyelf.em (csk_elf_before_parse): New function,\n\tsetting use_branch_stub false for linux.\n\t(csky_elf_create_output_section_statements): Do emit this\n\tfunction and all others in the file for linux, plus the branch\n\toption control.  Disable branch stubs when non-ELF.",
    "tree": {
      "sha": "b6bb3e21aa731f82ab8fc369ba3b278da27e1a0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b6bb3e21aa731f82ab8fc369ba3b278da27e1a0e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53b81c6de19a1f89e3c797631e72d05ba41444dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53b81c6de19a1f89e3c797631e72d05ba41444dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53b81c6de19a1f89e3c797631e72d05ba41444dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53b81c6de19a1f89e3c797631e72d05ba41444dc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c55b17b8098abde4ae7dfe0ec1f3b22a7fb0a34d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c55b17b8098abde4ae7dfe0ec1f3b22a7fb0a34d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c55b17b8098abde4ae7dfe0ec1f3b22a7fb0a34d"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 23,
    "deletions": 16
  },
  "files": [
    {
      "sha": "0f36d6c270cbe7955654664e9917f5540a6f16cb",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b81c6de19a1f89e3c797631e72d05ba41444dc/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b81c6de19a1f89e3c797631e72d05ba41444dc/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=53b81c6de19a1f89e3c797631e72d05ba41444dc",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-10  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/cskyelf.em (csk_elf_before_parse): New function,\n+\tsetting use_branch_stub false for linux.\n+\t(csky_elf_create_output_section_statements): Do emit this\n+\tfunction and all others in the file for linux, plus the branch\n+\toption control.  Disable branch stubs when non-ELF.\n+\n 2019-04-10  Alan Modra  <amodra@gmail.com>\n \n \t* Makefile.am (eskyelf.c, eskyelf_linux.c): Depend on cskyelf.em."
    },
    {
      "sha": "3651bb244d665c51019bfd0948494d5d03b56edd",
      "filename": "ld/emultempl/cskyelf.em",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b81c6de19a1f89e3c797631e72d05ba41444dc/ld/emultempl/cskyelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b81c6de19a1f89e3c797631e72d05ba41444dc/ld/emultempl/cskyelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/cskyelf.em?ref=53b81c6de19a1f89e3c797631e72d05ba41444dc",
      "patch": "@@ -116,25 +116,32 @@ EOF\n case ${target} in\n     csky-*-linux-*)\n fragment <<EOF\n-/* This is a convenient point to tell BFD about target specific flags.\n-   After the output has been created, but before inputs are read.  */\n+\n static void\n-csky_elf_create_output_section_statements (void)\n+csky_elf_before_parse (void)\n {\n   use_branch_stub = FALSE;\n+  gld${EMULATION_NAME}_before_parse ();\n }\n EOF\n     ;;\n-    *)\n+esac\n+\n fragment <<EOF\n+\n /* This is a convenient point to tell BFD about target specific flags.\n    After the output has been created, but before inputs are read.  */\n static void\n csky_elf_create_output_section_statements (void)\n {\n+  if (!(bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n+\t&& elf_object_id (link_info.output_bfd) == CSKY_ELF_DATA))\n+    use_branch_stub = FALSE;\n+\n   /* If don't use branch stub, just do not emit stub_file.  */\n-  if (use_branch_stub == FALSE)\n+  if (!use_branch_stub)\n     return;\n+\n   stub_file = lang_add_input_file (\"linker stubs\",\n \t\t\t\t   lang_input_file_is_fake_enum, NULL);\n   stub_file->the_bfd = bfd_create (\"linker stubs\", link_info.output_bfd);\n@@ -150,11 +157,7 @@ csky_elf_create_output_section_statements (void)\n   stub_file->the_bfd->flags |= BFD_LINKER_CREATED;\n   ldlang_add_file (stub_file);\n }\n-EOF\n-    ;;\n-esac\n \n-fragment <<EOF\n /* Call-back for elf32_csky_size_stubs.  */\n \n /* Create a new stub section, and arrange for it to be linked\n@@ -304,11 +307,6 @@ EOF\n \n # This code gets inserted into the generic elf32.sc linker script\n # and allows us to define our own command line switches.\n-case ${target} in\n-    csky-*-linux-*)\n-    ;;\n-\n-    *)\n PARSE_AND_LIST_PROLOGUE='\n #define OPTION_BRANCH_STUB\t\t301\n #define OPTION_NO_BRANCH_STUB\t\t302\n@@ -347,9 +345,10 @@ PARSE_AND_LIST_ARGS_CASES='\n     }\n     break;\n '\n-    ;;\n-esac\n \n+case ${target} in\n+    csky-*-linux-*) LDEMUL_BEFORE_PARSE=csky_elf_before_parse ;;\n+esac\n LDEMUL_AFTER_ALLOCATION=gld${EMULATION_NAME}_after_allocation\n LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS=csky_elf_create_output_section_statements\n LDEMUL_FINISH=gld${EMULATION_NAME}_finish"
    }
  ]
}