{
  "sha": "0874fd075b2a519022259a3cc48e650dc1daeeab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDg3NGZkMDc1YjJhNTE5MDIyMjU5YTNjYzQ4ZTY1MGRjMWRhZWVhYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-01T11:16:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T12:53:10Z"
    },
    "message": "gdb: Represent all languages as sub-classes of language_defn\n\nThis commit converts all languages to sub-classes of a language_defn\nbase class.\n\nThe motivation for this change is to make it easier to add new methods\nonto languages without having to update all of the individual language\nstructures.  In the future it might be possible to move more things,\nlike expression parsing, into the language class(es) for better\nencapsulation, however I have no plans to tackle this in the short\nterm.\n\nThis commit sets up a strategy for transitioning from the current\nlanguage system, where each language is an instance of the\nlanguage_defn structure, to the class hierarchy system.\n\nThe plan is to rename the existing language_defn into language_data,\nand make this a base class for the new language_defn class, something\nlike this:\n\n  struct language_data\n  {\n    ... old language_defn fields here ...\n  };\n\n  struct language_defn : public language_data\n  {\n    language_defn (const language_data d)\n      : language_data (d)\n    { .... }\n  };\n\nThen each existing language, for example ada_language_defn can be\nconverted into an instance of language_data, and passed into the\nconstructor of a new language class, something like this:\n\n  language_data ada_language_data =\n  {\n    ... old ada_language_defn values here ...\n  };\n\n  struct ada_language : public language_defn\n  {\n    ada_language (ada_language_data)\n    { .... }\n  };\n\nWhat this means is that immediately after the conversion nothing much\nchanges.  Every language is now its own class, but all the old\nlanguage fields still exist and can be accessed in the same way.\n\nIn later commits I will convert function pointers from the old\nlanguage_defn structure into real class methods on language_defn, with\noverrides on sub-classes where needed.\n\nAt this point I imagine that those fields of the old language_defn\nstructure that contained only data will probably remain as data fields\nwithin the new language_data base structure, it is only the methods\nthat I plan to change initially.\n\nI tweaked how we manage the list of languages a bit, each language is\nnow registered as it is created, and this resulted in a small number\nof changes in language.c.\n\nMost of the changes in the *-lang.c files are identical.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* gdb/ada-lang.c (ada_language_defn): Convert to...\n\t(ada_language_data): ...this.\n\t(class ada_language): New class.\n\t(ada_language_defn): New static global.\n\t* gdb/c-lang.c (c_language_defn): Convert to...\n\t(c_language_data): ...this.\n\t(class c_language): New class.\n\t(c_language_defn): New static global.\n\t(cplus_language_defn): Convert to...\n\t(cplus_language_data): ...this.\n\t(class cplus_language): New class.\n\t(cplus_language_defn): New static global.\n\t(asm_language_defn): Convert to...\n\t(asm_language_data): ...this.\n\t(class asm_language): New class.\n\t(asm_language_defn): New static global.\n\t(minimal_language_defn): Convert to...\n\t(minimal_language_data): ...this.\n\t(class minimal_language): New class.\n\t(minimal_language_defn): New static global.\n\t* gdb/d-lang.c (d_language_defn): Convert to...\n\t(d_language_data): ...this.\n\t(class d_language): New class.\n\t(d_language_defn): New static global.\n\t* gdb/f-lang.c (f_language_defn): Convert to...\n\t(f_language_data): ...this.\n\t(class f_language): New class.\n\t(f_language_defn): New static global.\n\t* gdb/go-lang.c (go_language_defn): Convert to...\n\t(go_language_data): ...this.\n\t(class go_language): New class.\n\t(go_language_defn): New static global.\n\t* gdb/language.c (unknown_language_defn): Remove declaration.\n\t(current_language): Initialize to nullptr, real initialization is\n\tmoved to _initialize_language.\n\t(languages): Delete global.\n\t(language_defn::languages): Define.\n\t(set_language_command): Use language_defn::languages.\n\t(set_language): Likewise.\n\t(range_error): Likewise.\n\t(language_enum): Likewise.\n\t(language_def): Likewise.\n\t(add_set_language_command): Use language_def::languages for the\n\tlanguage list, and language_def to lookup language pointers.\n\t(skip_language_trampoline): Use language_defn::languages.\n\t(unknown_language_defn): Convert to...\n\t(unknown_language_data): ...this.\n\t(class unknown_language): New class.\n\t(unknown_language_defn): New static global.\n\t(auto_language_defn): Convert to...\n\t(auto_language_data): ...this.\n\t(class auto_language): New class.\n\t(auto_language_defn): New static global.\n\t(language_gdbarch_post_init): Use language_defn::languages.\n\t(_initialize_language): Initialize current_language.\n\t* gdb/language.h (struct language_defn): Rename to...\n\t(struct language_data): ...this.\n\t(struct language_defn): New.\n\t(auto_language_defn): Delete.\n\t(unknown_language_defn): Delete.\n\t(minimal_language_defn): Delete.\n\t(ada_language_defn): Delete.\n\t(asm_language_defn): Delete.\n\t(c_language_defn): Delete.\n\t(cplus_language_defn): Delete.\n\t(d_language_defn): Delete.\n\t(f_language_defn): Delete.\n\t(go_language_defn): Delete.\n\t(m2_language_defn): Delete.\n\t(objc_language_defn): Delete.\n\t(opencl_language_defn): Delete.\n\t(pascal_language_defn): Delete.\n\t(rust_language_defn): Delete.\n\t* gdb/m2-lang.c (m2_language_defn): Convert to...\n\t(m2_language_data): ...this.\n\t(class m2_language): New class.\n\t(m2_language_defn): New static global.\n\t* gdb/objc-lang.c (objc_language_defn): Convert to...\n\t(objc_language_data): ...this.\n\t(class objc_language): New class.\n\t(objc_language_defn): New static global.\n\t* gdb/opencl-lang.c (opencl_language_defn): Convert to...\n\t(opencl_language_data): ...this.\n\t(class opencl_language): New class.\n\t(opencl_language_defn): New static global.\n\t* gdb/p-lang.c (pascal_language_defn): Convert to...\n\t(pascal_language_data): ...this.\n\t(class pascal_language): New class.\n\t(pascal_language_defn): New static global.\n\t* gdb/rust-exp.y (rust_lex_tests): Use language_def to find\n\tlanguage pointer, update comment format.\n\t* gdb/rust-lang.c (rust_language_defn): Convert to...\n\t(rust_language_data): ...this.\n\t(class rust_language): New class.\n\t(rust_language_defn): New static global.",
    "tree": {
      "sha": "7fb83a902b19cb5dc06632bb4da59e127735412d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7fb83a902b19cb5dc06632bb4da59e127735412d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0874fd075b2a519022259a3cc48e650dc1daeeab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0874fd075b2a519022259a3cc48e650dc1daeeab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0874fd075b2a519022259a3cc48e650dc1daeeab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0874fd075b2a519022259a3cc48e650dc1daeeab/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "621eacdfb42f9deba559ea0bada70f6ca2367f5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/621eacdfb42f9deba559ea0bada70f6ca2367f5f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/621eacdfb42f9deba559ea0bada70f6ca2367f5f"
    }
  ],
  "stats": {
    "total": 483,
    "additions": 406,
    "deletions": 77
  },
  "files": [
    {
      "sha": "3c8f9fcb49d03a326536946b37fad3ecc964ef2a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -1,3 +1,101 @@\n+2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/ada-lang.c (ada_language_defn): Convert to...\n+\t(ada_language_data): ...this.\n+\t(class ada_language): New class.\n+\t(ada_language_defn): New static global.\n+\t* gdb/c-lang.c (c_language_defn): Convert to...\n+\t(c_language_data): ...this.\n+\t(class c_language): New class.\n+\t(c_language_defn): New static global.\n+\t(cplus_language_defn): Convert to...\n+\t(cplus_language_data): ...this.\n+\t(class cplus_language): New class.\n+\t(cplus_language_defn): New static global.\n+\t(asm_language_defn): Convert to...\n+\t(asm_language_data): ...this.\n+\t(class asm_language): New class.\n+\t(asm_language_defn): New static global.\n+\t(minimal_language_defn): Convert to...\n+\t(minimal_language_data): ...this.\n+\t(class minimal_language): New class.\n+\t(minimal_language_defn): New static global.\n+\t* gdb/d-lang.c (d_language_defn): Convert to...\n+\t(d_language_data): ...this.\n+\t(class d_language): New class.\n+\t(d_language_defn): New static global.\n+\t* gdb/f-lang.c (f_language_defn): Convert to...\n+\t(f_language_data): ...this.\n+\t(class f_language): New class.\n+\t(f_language_defn): New static global.\n+\t* gdb/go-lang.c (go_language_defn): Convert to...\n+\t(go_language_data): ...this.\n+\t(class go_language): New class.\n+\t(go_language_defn): New static global.\n+\t* gdb/language.c (unknown_language_defn): Remove declaration.\n+\t(current_language): Initialize to nullptr, real initialization is\n+\tmoved to _initialize_language.\n+\t(languages): Delete global.\n+\t(language_defn::languages): Define.\n+\t(set_language_command): Use language_defn::languages.\n+\t(set_language): Likewise.\n+\t(range_error): Likewise.\n+\t(language_enum): Likewise.\n+\t(language_def): Likewise.\n+\t(add_set_language_command): Use language_def::languages for the\n+\tlanguage list, and language_def to lookup language pointers.\n+\t(skip_language_trampoline): Use language_defn::languages.\n+\t(unknown_language_defn): Convert to...\n+\t(unknown_language_data): ...this.\n+\t(class unknown_language): New class.\n+\t(unknown_language_defn): New static global.\n+\t(auto_language_defn): Convert to...\n+\t(auto_language_data): ...this.\n+\t(class auto_language): New class.\n+\t(auto_language_defn): New static global.\n+\t(language_gdbarch_post_init): Use language_defn::languages.\n+\t(_initialize_language): Initialize current_language.\n+\t* gdb/language.h (struct language_defn): Rename to...\n+\t(struct language_data): ...this.\n+\t(struct language_defn): New.\n+\t(auto_language_defn): Delete.\n+\t(unknown_language_defn): Delete.\n+\t(minimal_language_defn): Delete.\n+\t(ada_language_defn): Delete.\n+\t(asm_language_defn): Delete.\n+\t(c_language_defn): Delete.\n+\t(cplus_language_defn): Delete.\n+\t(d_language_defn): Delete.\n+\t(f_language_defn): Delete.\n+\t(go_language_defn): Delete.\n+\t(m2_language_defn): Delete.\n+\t(objc_language_defn): Delete.\n+\t(opencl_language_defn): Delete.\n+\t(pascal_language_defn): Delete.\n+\t(rust_language_defn): Delete.\n+\t* gdb/m2-lang.c (m2_language_defn): Convert to...\n+\t(m2_language_data): ...this.\n+\t(class m2_language): New class.\n+\t(m2_language_defn): New static global.\n+\t* gdb/objc-lang.c (objc_language_defn): Convert to...\n+\t(objc_language_data): ...this.\n+\t(class objc_language): New class.\n+\t(objc_language_defn): New static global.\n+\t* gdb/opencl-lang.c (opencl_language_defn): Convert to...\n+\t(opencl_language_data): ...this.\n+\t(class opencl_language): New class.\n+\t(opencl_language_defn): New static global.\n+\t* gdb/p-lang.c (pascal_language_defn): Convert to...\n+\t(pascal_language_data): ...this.\n+\t(class pascal_language): New class.\n+\t(pascal_language_defn): New static global.\n+\t* gdb/rust-exp.y (rust_lex_tests): Use language_def to find\n+\tlanguage pointer, update comment format.\n+\t* gdb/rust-lang.c (rust_language_defn): Convert to...\n+\t(rust_language_data): ...this.\n+\t(class rust_language): New class.\n+\t(rust_language_defn): New static global.\n+\n 2020-06-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2/read.c (class lnp_state_machine) <m_last_address>: New"
    },
    {
      "sha": "620db0a49e7fc90be54ac708d90b2658ce937c3e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -14061,7 +14061,10 @@ static const char *ada_extensions[] =\n   \".adb\", \".ads\", \".a\", \".ada\", \".dg\", NULL\n };\n \n-extern const struct language_defn ada_language_defn = {\n+/* Constant data that describes the Ada language.  */\n+\n+extern const struct language_data ada_language_data =\n+{\n   \"ada\",                        /* Language name */\n   \"Ada\",\n   language_ada,\n@@ -14110,6 +14113,20 @@ extern const struct language_defn ada_language_defn = {\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the Ada language.  */\n+\n+class ada_language : public language_defn\n+{\n+public:\n+  ada_language ()\n+    : language_defn (language_ada, ada_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the Ada language class.  */\n+\n+static ada_language ada_language_defn;\n+\n /* Command-list for the \"set/show ada\" prefix command.  */\n static struct cmd_list_element *set_ada_list;\n static struct cmd_list_element *show_ada_list;"
    },
    {
      "sha": "4dac718cbac29d924a568817da022fabf76a5278",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 64,
      "deletions": 4,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -885,7 +885,9 @@ static const char *c_extensions[] =\n   \".c\", NULL\n };\n \n-extern const struct language_defn c_language_defn =\n+/* Constant data that describes the C language.  */\n+\n+extern const struct language_data c_language_data =\n {\n   \"c\",\t\t\t\t/* Language name */\n   \"C\",\n@@ -934,6 +936,20 @@ extern const struct language_defn c_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the C language.  */\n+\n+class c_language : public language_defn\n+{\n+public:\n+  c_language ()\n+    : language_defn (language_c, c_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the C language class.  */\n+\n+static c_language c_language_defn;\n+\n enum cplus_primitive_types {\n   cplus_primitive_type_int,\n   cplus_primitive_type_long,\n@@ -1030,7 +1046,9 @@ static const char *cplus_extensions[] =\n   \".C\", \".cc\", \".cp\", \".cpp\", \".cxx\", \".c++\", NULL\n };\n \n-extern const struct language_defn cplus_language_defn =\n+/* Constant data that describes the C++ language.  */\n+\n+extern const struct language_data cplus_language_data =\n {\n   \"c++\",\t\t\t/* Language name */\n   \"C++\",\n@@ -1079,12 +1097,28 @@ extern const struct language_defn cplus_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* A class for the C++ language.  */\n+\n+class cplus_language : public language_defn\n+{\n+public:\n+  cplus_language ()\n+    : language_defn (language_cplus, cplus_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* The single instance of the C++ language class.  */\n+\n+static cplus_language cplus_language_defn;\n+\n static const char *asm_extensions[] =\n {\n   \".s\", \".sx\", \".S\", NULL\n };\n \n-extern const struct language_defn asm_language_defn =\n+/* Constant data that describes the ASM language.  */\n+\n+extern const struct language_data asm_language_data =\n {\n   \"asm\",\t\t\t/* Language name */\n   \"assembly\",\n@@ -1133,12 +1167,25 @@ extern const struct language_defn asm_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* A class for the ASM language.  */\n+\n+class asm_language : public language_defn\n+{\n+public:\n+  asm_language ()\n+    : language_defn (language_asm, asm_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* The single instance of the ASM language class.  */\n+static asm_language asm_language_defn;\n+\n /* The following language_defn does not represent a real language.\n    It just provides a minimal support a-la-C that should allow users\n    to do some simple operations when debugging applications that use\n    a language currently not supported by GDB.  */\n \n-extern const struct language_defn minimal_language_defn =\n+extern const struct language_data minimal_language_data =\n {\n   \"minimal\",\t\t\t/* Language name */\n   \"Minimal\",\n@@ -1186,3 +1233,16 @@ extern const struct language_defn minimal_language_defn =\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n+\n+/* A class for the minimal language.  */\n+\n+class minimal_language : public language_defn\n+{\n+public:\n+  minimal_language ()\n+    : language_defn (language_minimal, minimal_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* The single instance of the minimal language class.  */\n+static minimal_language minimal_language_defn;"
    },
    {
      "sha": "c572ad7890e2c9611d14ca5440aa13a422a2f851",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -205,7 +205,9 @@ static const char *d_extensions[] =\n   \".d\", NULL\n };\n \n-extern const struct language_defn d_language_defn =\n+/* Constant data that describes the D language.  */\n+\n+extern const struct language_data d_language_data =\n {\n   \"d\",\n   \"D\",\n@@ -255,6 +257,20 @@ extern const struct language_defn d_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the D language.  */\n+\n+class d_language : public language_defn\n+{\n+public:\n+  d_language ()\n+    : language_defn (language_d, d_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the D language class.  */\n+\n+static d_language d_language_defn;\n+\n /* Build all D language types for the specified architecture.  */\n \n static void *"
    },
    {
      "sha": "46d386e0477c3cef7687c094dfb4cbdb1bf98562",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -628,7 +628,9 @@ static const struct exp_descriptor exp_descriptor_f =\n   evaluate_subexp_f\n };\n \n-extern const struct language_defn f_language_defn =\n+/* Constant data that describes the Fortran language.  */\n+\n+extern const struct language_data f_language_data =\n {\n   \"fortran\",\n   \"Fortran\",\n@@ -683,6 +685,20 @@ extern const struct language_defn f_language_defn =\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the Fortran language.  */\n+\n+class f_language : public language_defn\n+{\n+public:\n+  f_language ()\n+    : language_defn (language_fortran, f_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the Fortran language class.  */\n+\n+static f_language f_language_defn;\n+\n static void *\n build_fortran_types (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "f0b560803cd540813722ec7ad354bde46eca50c1",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -576,7 +576,9 @@ go_language_arch_info (struct gdbarch *gdbarch,\n   lai->bool_type_default = builtin->builtin_bool;\n }\n \n-extern const struct language_defn go_language_defn =\n+/* Constant data that describes the Go language.  */\n+\n+extern const struct language_data go_language_data =\n {\n   \"go\",\n   \"Go\",\n@@ -626,6 +628,20 @@ extern const struct language_defn go_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the Go language.  */\n+\n+class go_language : public language_defn\n+{\n+public:\n+  go_language ()\n+    : language_defn (language_go, go_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the Go language class.  */\n+\n+static go_language go_language_defn;\n+\n static void *\n build_go_types (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "b3cbd6aadef333b4f7ac4344ad43bb6d455da4e8",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 58,
      "deletions": 41,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -62,9 +62,6 @@ static void unk_lang_value_print (struct value *, struct ui_file *,\n \n static CORE_ADDR unk_lang_trampoline (struct frame_info *, CORE_ADDR pc);\n \n-/* Forward declaration */\n-extern const struct language_defn unknown_language_defn;\n-\n /* The current (default at startup) state of type and range checking.\n    (If the modes are set to \"auto\", though, these are changed based\n    on the default language at startup, and then again based on the\n@@ -77,34 +74,17 @@ enum case_sensitivity case_sensitivity = case_sensitive_on;\n \n /* The current language and language_mode (see language.h).  */\n \n-const struct language_defn *current_language = &unknown_language_defn;\n+const struct language_defn *current_language = nullptr;\n enum language_mode language_mode = language_mode_auto;\n \n /* The language that the user expects to be typing in (the language\n    of main(), or the last language we notified them about, or C).  */\n \n const struct language_defn *expected_language;\n \n-/* The list of supported languages.  Keep this in the same order as\n-   the 'enum language' values.  */\n-\n-static const struct language_defn *languages[] = {\n-  &unknown_language_defn,\n-  &auto_language_defn,\n-  &c_language_defn,\n-  &objc_language_defn,\n-  &cplus_language_defn,\n-  &d_language_defn,\n-  &go_language_defn,\n-  &f_language_defn,\n-  &m2_language_defn,\n-  &asm_language_defn,\n-  &pascal_language_defn,\n-  &opencl_language_defn,\n-  &rust_language_defn,\n-  &minimal_language_defn,\n-  &ada_language_defn,\n-};\n+/* Define the array containing all languages.  */\n+\n+const struct language_defn *language_defn::languages[nr_languages];\n \n /* The current values of the \"set language/range/case-sensitive\" enum\n    commands.  */\n@@ -162,7 +142,7 @@ set_language_command (const char *ignore,\n     language = \"auto\";\n \n   /* Search the list of languages for a match.  */\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     {\n       if (strcmp (lang->la_name, language) == 0)\n \t{\n@@ -377,7 +357,7 @@ set_language (enum language lang)\n   enum language prev_language;\n \n   prev_language = current_language->la_language;\n-  current_language = languages[lang];\n+  current_language = language_def (lang);\n   set_range_case ();\n   return prev_language;\n }\n@@ -474,7 +454,7 @@ range_error (const char *string,...)\n enum language\n language_enum (const char *str)\n {\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     if (strcmp (lang->la_name, str) == 0)\n       return lang->la_language;\n \n@@ -489,15 +469,17 @@ language_enum (const char *str)\n const struct language_defn *\n language_def (enum language lang)\n {\n-  return languages[lang];\n+  const struct language_defn *l = language_defn::languages[lang];\n+  gdb_assert (l != nullptr);\n+  return l;\n }\n \n /* Return the language as a string.  */\n \n const char *\n language_str (enum language lang)\n {\n-  return languages[lang]->la_name;\n+  return language_def (lang)->la_name;\n }\n \n \f\n@@ -512,16 +494,16 @@ add_set_language_command ()\n   /* Build the language names array, to be used as enumeration in the\n      \"set language\" enum command.  +1 for \"local\" and +1 for NULL\n      termination.  */\n-  language_names = new const char *[ARRAY_SIZE (languages) + 2];\n+  language_names = new const char *[ARRAY_SIZE (language_defn::languages) + 2];\n \n   /* Display \"auto\", \"local\" and \"unknown\" first, and then the rest,\n      alpha sorted.  */\n   const char **language_names_p = language_names;\n-  *language_names_p++ = auto_language_defn.la_name;\n+  *language_names_p++ = language_def (language_auto)->la_name;\n   *language_names_p++ = \"local\";\n-  *language_names_p++ = unknown_language_defn.la_name;\n+  *language_names_p++ = language_def (language_unknown)->la_name;\n   const char **sort_begin = language_names_p;\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     {\n       /* Already handled above.  */\n       if (lang->la_language == language_auto\n@@ -533,7 +515,7 @@ add_set_language_command ()\n   std::sort (sort_begin, language_names_p, compare_cstrings);\n \n   /* Add the filename extensions.  */\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     if (lang->la_filename_extensions != NULL)\n       {\n \tfor (size_t i = 0; lang->la_filename_extensions[i] != NULL; ++i)\n@@ -548,7 +530,7 @@ add_set_language_command ()\n \t\t\"The currently understood settings are:\\n\\nlocal or \"\n \t\t\"auto    Automatic setting based on source file\"));\n \n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     {\n       /* Already dealt with these above.  */\n       if (lang->la_language == language_unknown\n@@ -583,7 +565,7 @@ add_set_language_command ()\n CORE_ADDR \n skip_language_trampoline (struct frame_info *frame, CORE_ADDR pc)\n {\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     {\n       if (lang->skip_trampoline != NULL)\n \t{\n@@ -829,7 +811,9 @@ unknown_language_arch_info (struct gdbarch *gdbarch,\n \t\t\t\t\t\t       struct type *);\n }\n \n-const struct language_defn unknown_language_defn =\n+/* Constant data that describes the unknown language.  */\n+\n+extern const struct language_data unknown_language_data =\n {\n   \"unknown\",\n   \"Unknown\",\n@@ -878,9 +862,23 @@ const struct language_defn unknown_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n-/* These two structs define fake entries for the \"local\" and \"auto\"\n-   options.  */\n-const struct language_defn auto_language_defn =\n+/* Class representing the unknown language.  */\n+\n+class unknown_language : public language_defn\n+{\n+public:\n+  unknown_language ()\n+    : language_defn (language_unknown, unknown_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the unknown language class.  */\n+\n+static unknown_language unknown_language_defn;\n+\n+/* Constant data for the fake \"auto\" language.  */\n+\n+extern const struct language_data auto_language_data =\n {\n   \"auto\",\n   \"Auto\",\n@@ -929,6 +927,20 @@ const struct language_defn auto_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the fake \"auto\" language.  */\n+\n+class auto_language : public language_defn\n+{\n+public:\n+  auto_language ()\n+    : language_defn (language_auto, auto_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the fake \"auto\" language.  */\n+\n+static auto_language auto_language_defn;\n+\n \f\n /* Per-architecture language information.  */\n \n@@ -947,7 +959,7 @@ language_gdbarch_post_init (struct gdbarch *gdbarch)\n   struct language_gdbarch *l;\n \n   l = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct language_gdbarch);\n-  for (const auto &lang : languages)\n+  for (const auto &lang : language_defn::languages)\n     if (lang != NULL && lang->la_language_arch_info != NULL)\n       {\n \tlang->la_language_arch_info (gdbarch,\n@@ -1169,6 +1181,11 @@ For Fortran the default is off; for other languages the default is on.\"),\n \t\t\tshow_case_command,\n \t\t\t&setlist, &showlist);\n \n+  /* In order to call SET_LANGUAGE (below) we need to make sure that\n+     CURRENT_LANGUAGE is not NULL.  So first set the language to unknown,\n+     then we can change the language to 'auto'.  */\n+  current_language = language_def (language_unknown);\n+\n   add_set_language_command ();\n \n   language = \"auto\";"
    },
    {
      "sha": "351ad490a83bd990bfbc1aae84fe3f8919ac7485",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 30,
      "deletions": 21,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -169,9 +169,21 @@ struct language_pass_by_ref_info\n   bool destructible = true;\n };\n \n-/* Structure tying together assorted information about a language.  */\n+/* Structure tying together assorted information about a language.\n \n-struct language_defn\n+   As we move over from the old structure based languages to a class\n+   hierarchy of languages this structure will continue to contain a\n+   mixture of both data and function pointers.\n+\n+   Once the class hierarchy of languages in place the first task is to\n+   remove the function pointers from this structure and convert them into\n+   member functions on the different language classes.\n+\n+   The current plan it to keep the constant data that describes a language\n+   in this structure, and have each language pass in an instance of this\n+   structure at construction time.  */\n+\n+struct language_data\n   {\n     /* Name of the language.  */\n \n@@ -471,6 +483,22 @@ struct language_defn\n \n   };\n \n+/* Base class from which all other language classes derive.  */\n+\n+struct language_defn : language_data\n+{\n+  language_defn (enum language lang, const language_data &init_data)\n+    : language_data (init_data)\n+  {\n+    /* We should only ever create one instance of each language.  */\n+    gdb_assert (languages[lang] == nullptr);\n+    languages[lang] = this;\n+  }\n+\n+  /* List of all known languages.  */\n+  static const struct language_defn *languages[nr_languages];\n+};\n+\n /* Pointer to the language_defn for our current language.  This pointer\n    always points to *some* valid struct; it can be used without checking\n    it for validity.\n@@ -681,25 +709,6 @@ extern bool default_symbol_name_matcher\n symbol_name_matcher_ftype *get_symbol_name_matcher\n   (const language_defn *lang, const lookup_name_info &lookup_name);\n \n-/* The languages supported by GDB.  */\n-\n-extern const struct language_defn auto_language_defn;\n-extern const struct language_defn unknown_language_defn;\n-extern const struct language_defn minimal_language_defn;\n-\n-extern const struct language_defn ada_language_defn;\n-extern const struct language_defn asm_language_defn;\n-extern const struct language_defn c_language_defn;\n-extern const struct language_defn cplus_language_defn;\n-extern const struct language_defn d_language_defn;\n-extern const struct language_defn f_language_defn;\n-extern const struct language_defn go_language_defn;\n-extern const struct language_defn m2_language_defn;\n-extern const struct language_defn objc_language_defn;\n-extern const struct language_defn opencl_language_defn;\n-extern const struct language_defn pascal_language_defn;\n-extern const struct language_defn rust_language_defn;\n-\n /* Save the current language and restore it upon destruction.  */\n \n class scoped_restore_current_language"
    },
    {
      "sha": "57750b5cc4631d7d27f2145d83b9e6a3a04dc4cd",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -375,7 +375,9 @@ const struct exp_descriptor exp_descriptor_modula2 =\n   evaluate_subexp_modula2\n };\n \n-extern const struct language_defn m2_language_defn =\n+/* Constant data describing the M2 language.  */\n+\n+extern const struct language_data m2_language_data =\n {\n   \"modula-2\",\n   \"Modula-2\",\n@@ -424,6 +426,20 @@ extern const struct language_defn m2_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the M2 language.  */\n+\n+class m2_language : public language_defn\n+{\n+public:\n+  m2_language ()\n+    : language_defn (language_m2, m2_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the M2 language.  */\n+\n+static m2_language m2_language_defn;\n+\n static void *\n build_m2_types (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "a1d035962c2ecead7236552a1948a5e4fc5df8ef",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -364,7 +364,10 @@ static const char *objc_extensions[] =\n   \".m\", NULL\n };\n \n-extern const struct language_defn objc_language_defn = {\n+/* Constant data representing the Objective-C language.  */\n+\n+extern const struct language_data objc_language_data =\n+{\n   \"objective-c\",\t\t/* Language name */\n   \"Objective-C\",\n   language_objc,\n@@ -412,6 +415,20 @@ extern const struct language_defn objc_language_defn = {\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the Objective-C language.  */\n+\n+class objc_language : public language_defn\n+{\n+public:\n+  objc_language ()\n+    : language_defn (language_objc, objc_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the class representing the Objective-C language.  */\n+\n+static objc_language objc_language_defn;\n+\n /*\n  * ObjC:\n  * Following functions help construct Objective-C message calls."
    },
    {
      "sha": "1a7425f87632af8589ef7526cbaefc670babe7d1",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -1042,7 +1042,8 @@ const struct exp_descriptor exp_descriptor_opencl =\n   evaluate_subexp_opencl\n };\n \n-extern const struct language_defn opencl_language_defn =\n+/* Constant data representing the OpenCL language.  */\n+extern const struct language_data opencl_language_data =\n {\n   \"opencl\",\t\t\t/* Language name */\n   \"OpenCL C\",\n@@ -1091,6 +1092,20 @@ extern const struct language_defn opencl_language_defn =\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n+/* Class representing the OpenCL language.  */\n+\n+class opencl_language : public language_defn\n+{\n+public:\n+  opencl_language ()\n+    : language_defn (language_opencl, opencl_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the OpenCL language class.  */\n+\n+static opencl_language opencl_language_defn;\n+\n static void *\n build_opencl_types (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "2f9598fed94244dec9723794deb1b6c70acd4b78",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -429,7 +429,9 @@ static const char *p_extensions[] =\n   \".pas\", \".p\", \".pp\", NULL\n };\n \n-extern const struct language_defn pascal_language_defn =\n+/* Constant data representing the Pascal language.  */\n+\n+extern const struct language_data pascal_language_data =\n {\n   \"pascal\",\t\t\t/* Language name */\n   \"Pascal\",\n@@ -476,3 +478,17 @@ extern const struct language_defn pascal_language_defn =\n   pascal_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n+\n+/* Class representing the Pascal language.  */\n+\n+class pascal_language : public language_defn\n+{\n+public:\n+  pascal_language ()\n+    : language_defn (language_pascal, pascal_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the Pascal language class.  */\n+\n+static pascal_language pascal_language_defn;"
    },
    {
      "sha": "4e7878f67e1f93fe5cc4b02fe609d3eff008ee30",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -2725,8 +2725,8 @@ rust_lex_tests (void)\n {\n   int i;\n \n-  // Set up dummy \"parser\", so that rust_type works.\n-  struct parser_state ps (&rust_language_defn, target_gdbarch (),\n+  /* Set up dummy \"parser\", so that rust_type works.  */\n+  struct parser_state ps (language_def (language_rust), target_gdbarch (),\n \t\t\t  nullptr, 0, 0, nullptr, 0, nullptr);\n   rust_parser parser (&ps);\n "
    },
    {
      "sha": "152fe2f66c026441ff97490126d43bad13c0050b",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0874fd075b2a519022259a3cc48e650dc1daeeab/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=0874fd075b2a519022259a3cc48e650dc1daeeab",
      "patch": "@@ -2101,7 +2101,9 @@ static const char *rust_extensions[] =\n   \".rs\", NULL\n };\n \n-extern const struct language_defn rust_language_defn =\n+/* Constant data representing the Rust language.  */\n+\n+extern const struct language_data rust_language_data =\n {\n   \"rust\",\n   \"Rust\",\n@@ -2149,3 +2151,17 @@ extern const struct language_defn rust_language_defn =\n   rust_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n+\n+/* Class representing the Rust language.  */\n+\n+class rust_language : public language_defn\n+{\n+public:\n+  rust_language ()\n+    : language_defn (language_rust, rust_language_data)\n+  { /* Nothing.  */ }\n+};\n+\n+/* Single instance of the Rust language class.  */\n+\n+static rust_language rust_language_defn;"
    }
  ]
}