{
  "sha": "436c571c6afc8c5affe36327ab363b98ec9adb2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDM2YzU3MWM2YWZjOGM1YWZmZTM2MzI3YWIzNjNiOThlYzlhZGIyZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:23Z"
    },
    "message": "Remove sibling_die\n\nThe sibling_die helper function does not seem to add much value,\nconsidering that many other fields of die_info are directly accessed.\nSo, this removes it.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_import_statement, read_file_scope)\n\t(read_type_unit_scope, inherit_abstract_dies, read_func_scope)\n\t(read_lexical_block_scope, read_call_site_scope)\n\t(dwarf2_get_subprogram_pc_bounds, get_scope_pc_bounds)\n\t(handle_struct_member_die, process_structure_scope)\n\t(update_enumeration_type_from_children)\n\t(process_enumeration_scope, read_array_type, read_common_block)\n\t(read_namespace, read_module, read_subroutine_type): Update.\n\t(sibling_die): Remove.",
    "tree": {
      "sha": "605a83d657a4051f5170b515d50622476aa5aecb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/605a83d657a4051f5170b515d50622476aa5aecb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/436c571c6afc8c5affe36327ab363b98ec9adb2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/436c571c6afc8c5affe36327ab363b98ec9adb2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/436c571c6afc8c5affe36327ab363b98ec9adb2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/436c571c6afc8c5affe36327ab363b98ec9adb2d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "052c8bb83a515768cd6af2f3707b6e05854cac54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/052c8bb83a515768cd6af2f3707b6e05854cac54",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/052c8bb83a515768cd6af2f3707b6e05854cac54"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 38,
    "deletions": 36
  },
  "files": [
    {
      "sha": "4ee9c24795a921f817b6b8d1347f88e45370bf2f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/436c571c6afc8c5affe36327ab363b98ec9adb2d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/436c571c6afc8c5affe36327ab363b98ec9adb2d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=436c571c6afc8c5affe36327ab363b98ec9adb2d",
      "patch": "@@ -1,3 +1,15 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_import_statement, read_file_scope)\n+\t(read_type_unit_scope, inherit_abstract_dies, read_func_scope)\n+\t(read_lexical_block_scope, read_call_site_scope)\n+\t(dwarf2_get_subprogram_pc_bounds, get_scope_pc_bounds)\n+\t(handle_struct_member_die, process_structure_scope)\n+\t(update_enumeration_type_from_children)\n+\t(process_enumeration_scope, read_array_type, read_common_block)\n+\t(read_namespace, read_module, read_subroutine_type): Update.\n+\t(sibling_die): Remove.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (lookup_addr_base, lookup_ranges_base)"
    },
    {
      "sha": "8c51125efb1652110c73c59df689cace54546a7f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 26,
      "deletions": 36,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/436c571c6afc8c5affe36327ab363b98ec9adb2d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/436c571c6afc8c5affe36327ab363b98ec9adb2d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=436c571c6afc8c5affe36327ab363b98ec9adb2d",
      "patch": "@@ -1416,8 +1416,6 @@ static const char *dwarf_bool_name (unsigned int);\n \n static const char *dwarf_type_encoding_name (unsigned int);\n \n-static struct die_info *sibling_die (struct die_info *);\n-\n static void dump_die_shallow (struct ui_file *, int indent, struct die_info *);\n \n static void dump_die_for_error (struct die_info *);\n@@ -10461,7 +10459,7 @@ read_import_statement (struct die_info *die, struct dwarf2_cu *cu)\n \n   if (die->tag == DW_TAG_imported_module && cu->language == language_fortran)\n     for (child_die = die->child; child_die && child_die->tag;\n-\t child_die = sibling_die (child_die))\n+\t child_die = child_die->sibling)\n       {\n \t/* DWARF-4: A Fortran use statement with a \u201crename list\u201d may be\n \t   represented by an imported module entry with an import attribute\n@@ -10739,7 +10737,7 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n       while (child_die && child_die->tag)\n \t{\n \t  process_die (child_die, cu);\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n \n@@ -10907,7 +10905,7 @@ read_type_unit_scope (struct die_info *die, struct dwarf2_cu *cu)\n       while (child_die && child_die->tag)\n \t{\n \t  process_die (child_die, cu);\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n }\n@@ -12680,7 +12678,7 @@ inherit_abstract_dies (struct die_info *die, struct dwarf2_cu *cu)\n \n   for (child_die = die->child;\n        child_die && child_die->tag;\n-       child_die = sibling_die (child_die))\n+       child_die = child_die->sibling)\n     {\n       struct die_info *child_origin_die;\n       struct dwarf2_cu *child_origin_cu;\n@@ -12757,7 +12755,7 @@ inherit_abstract_dies (struct die_info *die, struct dwarf2_cu *cu)\n \t  if (!origin_child_die->in_process)\n \t    process_die (origin_child_die, origin_cu);\n \t}\n-      origin_child_die = sibling_die (origin_child_die);\n+      origin_child_die = origin_child_die->sibling;\n     }\n   origin_cu->list_in_scope = origin_previous_list_in_scope;\n \n@@ -12826,7 +12824,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n \n   /* If we have any template arguments, then we must allocate a\n      different sort of symbol.  */\n-  for (child_die = die->child; child_die; child_die = sibling_die (child_die))\n+  for (child_die = die->child; child_die; child_die = child_die->sibling)\n     {\n       if (child_die->tag == DW_TAG_template_type_param\n \t  || child_die->tag == DW_TAG_template_value_param)\n@@ -12879,7 +12877,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t    }\n \t  else\n \t    process_die (child_die, cu);\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n \n@@ -12901,7 +12899,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t    {\n \t      if (child_die->tag == DW_TAG_imported_module)\n \t\tprocess_die (child_die, spec_cu);\n-\t      child_die = sibling_die (child_die);\n+\t      child_die = child_die->sibling;\n \t    }\n \n \t  /* In some cases, GCC generates specification DIEs that\n@@ -12990,7 +12988,7 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t GCC does no longer produces such DWARF since GCC r224161.  */\n       for (child_die = die->child;\n \t   child_die != NULL && child_die->tag;\n-\t   child_die = sibling_die (child_die))\n+\t   child_die = child_die->sibling)\n \tprocess_die (child_die, cu);\n       return;\n     case PC_BOUNDS_INVALID:\n@@ -13006,7 +13004,7 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n       while (child_die && child_die->tag)\n \t{\n \t  process_die (child_die, cu);\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n   inherit_abstract_dies (die, cu);\n@@ -13087,7 +13085,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \n   nparams = 0;\n   for (child_die = die->child; child_die && child_die->tag;\n-       child_die = sibling_die (child_die))\n+       child_die = child_die->sibling)\n     {\n       if (child_die->tag != DW_TAG_call_site_parameter\n           && child_die->tag != DW_TAG_GNU_call_site_parameter)\n@@ -13232,7 +13230,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \n   for (child_die = die->child;\n        child_die && child_die->tag;\n-       child_die = sibling_die (child_die))\n+       child_die = child_die->sibling)\n     {\n       struct call_site_parameter *parameter;\n       struct attribute *loc, *origin;\n@@ -13859,7 +13857,7 @@ dwarf2_get_subprogram_pc_bounds (struct die_info *die,\n       if (child->tag == DW_TAG_subprogram\n           || child->tag == DW_TAG_lexical_block)\n         dwarf2_get_subprogram_pc_bounds (child, lowpc, highpc, cu);\n-      child = sibling_die (child);\n+      child = child->sibling;\n     }\n }\n \n@@ -13915,7 +13913,7 @@ get_scope_pc_bounds (struct die_info *die,\n \t    break;\n \t  }\n \n-\t  child = sibling_die (child);\n+\t  child = child->sibling;\n \t}\n     }\n \n@@ -15153,7 +15151,7 @@ handle_struct_member_die (struct die_info *child_die, struct type *type,\n \n       for (die_info *variant_child = child_die->child;\n \t   variant_child != NULL;\n-\t   variant_child = sibling_die (variant_child))\n+\t   variant_child = variant_child->sibling)\n \t{\n \t  if (variant_child->tag == DW_TAG_member)\n \t    {\n@@ -15243,7 +15241,7 @@ process_structure_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t  if (is_variant_part && discr_offset == child_die->sect_off)\n \t    fi.fields.back ().variant.is_discriminant = true;\n \n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n \n       /* Attach template arguments to type.  */\n@@ -15391,7 +15389,7 @@ process_structure_scope (struct die_info *die, struct dwarf2_cu *cu)\n       else\n \tprocess_die (child_die, cu);\n \n-      child_die = sibling_die (child_die);\n+      child_die = child_die->sibling;\n     }\n \n   /* Do not consider external references.  According to the DWARF standard,\n@@ -15452,7 +15450,7 @@ update_enumeration_type_from_children (struct die_info *die,\n \n   for (child_die = die->child;\n        child_die != NULL && child_die->tag;\n-       child_die = sibling_die (child_die))\n+       child_die = child_die->sibling)\n     {\n       struct attribute *attr;\n       LONGEST value;\n@@ -15628,7 +15626,7 @@ process_enumeration_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t\t}\n \t    }\n \n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n \n       if (!fields.empty ())\n@@ -15739,7 +15737,7 @@ read_array_type (struct die_info *die, struct dwarf2_cu *cu)\n \t      range_types.push_back (child_type);\n             }\n \t}\n-      child_die = sibling_die (child_die);\n+      child_die = child_die->sibling;\n     }\n \n   /* Dwarf2 dimensions are output from left to right, create the\n@@ -15976,7 +15974,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n \n       for (child_die = die->child;\n \t   child_die && child_die->tag;\n-\t   child_die = sibling_die (child_die))\n+\t   child_die = child_die->sibling)\n \t++n_entries;\n \n       size = (sizeof (struct common_block)\n@@ -15989,7 +15987,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n \n       for (child_die = die->child;\n \t   child_die && child_die->tag;\n-\t   child_die = sibling_die (child_die))\n+\t   child_die = child_die->sibling)\n \t{\n \t  /* Create the symbol in the DW_TAG_common_block block in the current\n \t     symbol scope.  */\n@@ -16111,7 +16109,7 @@ read_namespace (struct die_info *die, struct dwarf2_cu *cu)\n       while (child_die && child_die->tag)\n \t{\n \t  process_die (child_die, cu);\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n }\n@@ -16147,7 +16145,7 @@ read_module (struct die_info *die, struct dwarf2_cu *cu)\n   while (child_die && child_die->tag)\n     {\n       process_die (child_die, cu);\n-      child_die = sibling_die (child_die);\n+      child_die = child_die->sibling;\n     }\n }\n \n@@ -16646,7 +16644,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \t    nparams++;\n \t  else if (child_die->tag == DW_TAG_unspecified_parameters)\n \t    TYPE_VARARGS (ftype) = 1;\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n \n       /* Allocate storage for parameters and fill them in.  */\n@@ -16717,7 +16715,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \t      TYPE_FIELD_TYPE (ftype, iparams) = arg_type;\n \t      iparams++;\n \t    }\n-\t  child_die = sibling_die (child_die);\n+\t  child_die = child_die->sibling;\n \t}\n     }\n \n@@ -21236,14 +21234,6 @@ typename_concat (struct obstack *obs, const char *prefix, const char *suffix,\n     }\n }\n \n-/* Return sibling of die, NULL if no sibling.  */\n-\n-static struct die_info *\n-sibling_die (struct die_info *die)\n-{\n-  return die->sibling;\n-}\n-\n /* Get name of a die, return NULL if not found.  */\n \n static const char *"
    }
  ]
}