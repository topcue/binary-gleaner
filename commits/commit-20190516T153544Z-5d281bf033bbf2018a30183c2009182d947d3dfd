{
  "sha": "5d281bf033bbf2018a30183c2009182d947d3dfd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWQyODFiZjAzM2JiZjIwMThhMzAxODNjMjAwOTE4MmQ5NDdkM2RmZA==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-15T17:21:32Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:35:44Z"
    },
    "message": "[PATCH 14/57][Arm][GAS] Add support for MVE instructions: vcadd, vcmla and vcmul\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): New operands.\n\t(parse_operands): Handle new operands.\n\t(do_mve_vcmul): New encoding function.\n\t(do_vcmla): Change to support MVE variants.\n\t(do_vcadd): Change to support MVE variants.\n\t(insns): Change existing to support MVE variants and add new.\n\t* testsuite/gas/arm/mve-vcadd-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vcadd-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vcadd-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vcadd-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vcadd-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vcadd-bad-2.s: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vcmla-bad-2.s: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vcmul-bad-2.s: New test.",
    "tree": {
      "sha": "97302c9a7d1765541facbd9a8de718baf10cf27f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97302c9a7d1765541facbd9a8de718baf10cf27f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5d281bf033bbf2018a30183c2009182d947d3dfd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d281bf033bbf2018a30183c2009182d947d3dfd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5d281bf033bbf2018a30183c2009182d947d3dfd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d281bf033bbf2018a30183c2009182d947d3dfd/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f601a00c4c70f396defc66d592c4786135616545",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f601a00c4c70f396defc66d592c4786135616545",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f601a00c4c70f396defc66d592c4786135616545"
    }
  ],
  "stats": {
    "total": 365,
    "additions": 350,
    "deletions": 15
  },
  "files": [
    {
      "sha": "216d17ede7f8ac2a8956d49a4dc34a0f4dbb4950",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -1,3 +1,30 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): New operands.\n+\t(parse_operands): Handle new operands.\n+\t(do_mve_vcmul): New encoding function.\n+\t(do_vcmla): Change to support MVE variants.\n+\t(do_vcadd): Change to support MVE variants.\n+\t(insns): Change existing to support MVE variants and add new.\n+\t* testsuite/gas/arm/mve-vcadd-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vcadd-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vcadd-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vcadd-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vcadd-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vcadd-bad-2.s: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vcmla-bad-2.s: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vcmul-bad-2.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (enum operand_parse_code): New operands."
    },
    {
      "sha": "7cd88d3363e973c1c085407d1083f0bfb2686483",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 118,
      "deletions": 15,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -6951,6 +6951,7 @@ enum operand_parse_code\n   OP_RNSDQ_RNSC_MQ, /* Vector S, D or Q reg, Neon scalar or MVE vector register.\n \t\t     */\n   OP_RNDQ_RNSC, /* Neon D or Q reg, or Neon scalar.  */\n+  OP_RNDQMQ_RNSC, /* Neon D, Q or MVE vector reg, or Neon scalar.  */\n   OP_RND_RNSC,  /* Neon D reg, or Neon scalar.  */\n   OP_VMOV,      /* Neon VMOV operands.  */\n   OP_RNDQ_Ibig,\t/* Neon D or Q reg, or big immediate for logic and VMVN.  */\n@@ -7346,6 +7347,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  }\n \t  break;\n \n+\tcase OP_RNDQMQ_RNSC:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rndq_rnsc);\n+\t  break;\n+\ttry_rndq_rnsc:\n \tcase OP_RNDQ_RNSC:\n \t  {\n \t    po_scalar_or_goto (8, try_ndq, REG_TYPE_VFD);\n@@ -15574,6 +15579,38 @@ do_mve_vcmp (void)\n   return;\n }\n \n+static void\n+do_mve_vcmul (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQI, NS_NULL);\n+  struct neon_type_el et\n+    = neon_check_type (3, rs, N_EQK, N_EQK, N_F_MVE | N_KEY);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  unsigned rot = inst.relocs[0].exp.X_add_number;\n+  constraint (rot != 0 && rot != 90 && rot != 180 && rot != 270,\n+\t      _(\"immediate out of range\"));\n+\n+  if (et.size == 32 && (inst.operands[0].reg == inst.operands[1].reg\n+\t\t\t|| inst.operands[0].reg == inst.operands[2].reg))\n+    as_tsktsk (BAD_MVE_SRCDEST);\n+\n+  inst.instruction |= (et.size == 32) << 28;\n+  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+  inst.instruction |= (rot > 90) << 12;\n+  inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n+  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+  inst.instruction |= LOW4 (inst.operands[2].reg);\n+  inst.instruction |= (rot == 90 || rot == 270);\n+  inst.is_neon = 1;\n+}\n+\n static void\n do_vfp_nsyn_cmp (void)\n {\n@@ -19677,16 +19714,23 @@ neon_scalar_for_vcmla (unsigned opnd, unsigned elsize)\n static void\n do_vcmla (void)\n {\n-  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8),\n-\t      _(BAD_FPU));\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext)\n+\t      && (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8)\n+\t\t  || !mark_feature_used (&arm_ext_v8_3)), (BAD_FPU));\n   constraint (inst.relocs[0].exp.X_op != O_constant,\n \t      _(\"expression too complex\"));\n   unsigned rot = inst.relocs[0].exp.X_add_number;\n   constraint (rot != 0 && rot != 90 && rot != 180 && rot != 270,\n \t      _(\"immediate out of range\"));\n   rot /= 90;\n+\n+  if (check_simd_pred_availability (1, NEON_CHECK_ARCH8 | NEON_CHECK_CC))\n+    return;\n+\n   if (inst.operands[2].isscalar)\n     {\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext))\n+\tfirst_error (_(\"invalid instruction shape\"));\n       enum neon_shape rs = neon_select_shape (NS_DDSI, NS_QQSI, NS_NULL);\n       unsigned size = neon_check_type (3, rs, N_EQK, N_EQK,\n \t\t\t\t       N_KEY | N_F16 | N_F32).size;\n@@ -19705,9 +19749,19 @@ do_vcmla (void)\n     }\n   else\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDDI, NS_QQQI, NS_NULL);\n+      enum neon_shape rs;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext))\n+\trs = neon_select_shape (NS_QQQI, NS_NULL);\n+      else\n+\trs = neon_select_shape (NS_DDDI, NS_QQQI, NS_NULL);\n+\n       unsigned size = neon_check_type (3, rs, N_EQK, N_EQK,\n \t\t\t\t       N_KEY | N_F16 | N_F32).size;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext) && size == 32\n+\t  && (inst.operands[0].reg == inst.operands[1].reg\n+\t      || inst.operands[0].reg == inst.operands[2].reg))\n+\tas_tsktsk (BAD_MVE_SRCDEST);\n+\n       neon_three_same (neon_quad (rs), 0, -1);\n       inst.instruction &= 0x00ffffff; /* Undo neon_dp_fixup.  */\n       inst.instruction |= 0xfc200800;\n@@ -19719,20 +19773,60 @@ do_vcmla (void)\n static void\n do_vcadd (void)\n {\n-  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8),\n-\t      _(BAD_FPU));\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+\t      && (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8)\n+\t\t  || !mark_feature_used (&arm_ext_v8_3)), (BAD_FPU));\n   constraint (inst.relocs[0].exp.X_op != O_constant,\n \t      _(\"expression too complex\"));\n+\n   unsigned rot = inst.relocs[0].exp.X_add_number;\n   constraint (rot != 90 && rot != 270, _(\"immediate out of range\"));\n-  enum neon_shape rs = neon_select_shape (NS_DDDI, NS_QQQI, NS_NULL);\n-  unsigned size = neon_check_type (3, rs, N_EQK, N_EQK,\n-\t\t\t\t   N_KEY | N_F16 | N_F32).size;\n-  neon_three_same (neon_quad (rs), 0, -1);\n-  inst.instruction &= 0x00ffffff; /* Undo neon_dp_fixup.  */\n-  inst.instruction |= 0xfc800800;\n-  inst.instruction |= (rot == 270) << 24;\n-  inst.instruction |= (size == 32) << 20;\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_DDDI, NS_QQQI, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_KEY | N_F16 | N_F32);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_QQQI, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_KEY | N_F16 | N_F32 | N_I8\n+\t\t\t    | N_I16 | N_I32);\n+      if (et.size == 32 && inst.operands[0].reg == inst.operands[2].reg)\n+\tas_tsktsk (_(\"Warning: 32-bit element size and same first and third \"\n+\t\t     \"operand makes instruction UNPREDICTABLE\"));\n+    }\n+\n+  if (et.type == NT_invtype)\n+    return;\n+\n+  if (check_simd_pred_availability (et.type == NT_float, NEON_CHECK_ARCH8\n+\t\t\t\t    | NEON_CHECK_CC))\n+    return;\n+\n+  if (et.type == NT_float)\n+    {\n+      neon_three_same (neon_quad (rs), 0, -1);\n+      inst.instruction &= 0x00ffffff; /* Undo neon_dp_fixup.  */\n+      inst.instruction |= 0xfc800800;\n+      inst.instruction |= (rot == 270) << 24;\n+      inst.instruction |= (et.size == 32) << 20;\n+    }\n+  else\n+    {\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n+      inst.instruction = 0xfe000f00;\n+      inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+      inst.instruction |= neon_logbits (et.size) << 20;\n+      inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+      inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+      inst.instruction |= (rot == 270) << 12;\n+      inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n+      inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+      inst.instruction |= LOW4 (inst.operands[2].reg);\n+      inst.is_neon = 1;\n+    }\n }\n \n /* Dot Product instructions encoding support.  */\n@@ -22719,8 +22813,6 @@ static const struct asm_opcode insns[] =\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT & arm_ext_v8_3\n  NCE (vjcvt, eb90bc0, 2, (RVS, RVD), vjcvt),\n- NUF (vcmla, 0, 4, (RNDQ, RNDQ, RNDQ_RNSC, EXPi), vcmla),\n- NUF (vcadd, 0, 4, (RNDQ, RNDQ, RNDQ, EXPi), vcadd),\n \n #undef  ARM_VARIANT\n #define ARM_VARIANT   & fpu_neon_ext_dotprod\n@@ -24087,6 +24179,10 @@ static const struct asm_opcode insns[] =\n  mCEF(vaddv,\t_vaddv,\t    2, (RRe, RMQ),\t\t\t  mve_vaddv),\n  mCEF(vaddva,\t_vaddva,    2, (RRe, RMQ),\t\t\t  mve_vaddv),\n \n+#undef THUMB_VARIANT\n+#define THUMB_VARIANT & mve_fp_ext\n+ mToC(\"vcmul\", ee300e00,   4, (RMQ, RMQ, RMQ, EXPi),\t\t  mve_vcmul),\n+\n #undef  ARM_VARIANT\n #define ARM_VARIANT  & fpu_vfp_ext_v1\n #undef  THUMB_VARIANT\n@@ -24141,6 +24237,13 @@ static const struct asm_opcode insns[] =\n  mnUF(vorr,      _vorr,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n  mnUF(vorn,      _vorn,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n  mnUF(veor,      _veor,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ),      neon_logic),\n+\n+#undef\tARM_VARIANT\n+#define ARM_VARIANT & arm_ext_v8_3\n+#undef\tTHUMB_VARIANT\n+#define\tTHUMB_VARIANT & arm_ext_v6t2_v8m\n+ MNUF (vcadd, 0, 4, (RNDQMQ, RNDQMQ, RNDQMQ, EXPi), vcadd),\n+ MNUF (vcmla, 0, 4, (RNDQMQ, RNDQMQ, RNDQMQ_RNSC, EXPi), vcmla),\n };\n #undef ARM_VARIANT\n #undef THUMB_VARIANT"
    },
    {
      "sha": "dbadb30cc8d0b2173b7ebcfc20edf86baab7f600",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-1.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VCADD instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vcadd-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "dee86afb03018df799f689e087d730be2066617e",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-1.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-1.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: selected FPU does not support instruction -- `vcadd.f16 q0,q1,q2,#90'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vcadd.64 q0,q1,q2,#90'\n+[^:]*:12: Error: immediate out of range -- `vcadd.i32 q0,q1,q2,#180'\n+[^:]*:13: Error: immediate out of range -- `vcadd.i32 q0,q1,q2,#0'\n+[^:]*:14: Warning: 32-bit element size and same first and third operand makes instruction UNPREDICTABLE\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vcaddeq.i16 q0,q1,q2,#90'\n+[^:]*:18: Error: syntax error -- `vcaddeq.i16 q0,q1,q2,#90'\n+[^:]*:20: Error: syntax error -- `vcaddeq.i16 q0,q1,q2,#90'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vcaddt.i16 q0,q1,q2,#90'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vcadd.i16 q0,q1,q2,#90'"
    },
    {
      "sha": "23a686e63c1b5d506ccdd349ad8eb0e0cc69bae2",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-1.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-1.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,23 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vcadd.i16 q0, q1, q2, #90\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vcadd.f16 q0, q1, q2, #90\n+vcadd.64 q0, q1, q2, #90\n+vcadd.i32 q0, q1, q2, #180\n+vcadd.i32 q0, q1, q2, #0\n+vcadd.i32 q0, q1, q0, #90\n+cond\n+it eq\n+vcaddeq.i16 q0, q1, q2, #90\n+vcaddeq.i16 q0, q1, q2, #90\n+vpst\n+vcaddeq.i16 q0, q1, q2, #90\n+vcaddt.i16 q0, q1, q2, #90\n+vpst\n+vcadd.i16 q0, q1, q2, #90"
    },
    {
      "sha": "271160c31cee95b417c588c9c13359cf9b4f1e71",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-2.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VCADD instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vcadd-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "cdf3fd3af9b5c7cd846d7659f24a8899d9561c6f",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-2.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-2.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vcadd.f64 q0,q1,q2,#90'\n+[^:]*:11: Error: immediate out of range -- `vcadd.f32 q0,q1,q2,#180'\n+[^:]*:12: Error: immediate out of range -- `vcadd.f32 q0,q1,q2,#0'\n+[^:]*:13: Warning: 32-bit element size and same first and third operand makes instruction UNPREDICTABLE\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Error: syntax error -- `vcaddeq.f16 q0,q1,q2,#90'\n+[^:]*:17: Error: syntax error -- `vcaddeq.f16 q0,q1,q2,#90'\n+[^:]*:19: Error: syntax error -- `vcaddeq.f16 q0,q1,q2,#90'\n+[^:]*:20: Error: vector predicated instruction should be in VPT/VPST block -- `vcaddt.f16 q0,q1,q2,#90'\n+[^:]*:22: Error: instruction missing MVE vector predication code -- `vcadd.f16 q0,q1,q2,#90'\n+"
    },
    {
      "sha": "9634840dbdaca5622aa9ba5333a1ae3c46b4e349",
      "filename": "gas/testsuite/gas/arm/mve-vcadd-bad-2.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcadd-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcadd-bad-2.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,22 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vcadd.f32 q0, q1, q2, #90\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vcadd.f64 q0, q1, q2, #90\n+vcadd.f32 q0, q1, q2, #180\n+vcadd.f32 q0, q1, q2, #0\n+vcadd.f32 q0, q1, q0, #90\n+cond\n+it eq\n+vcaddeq.f16 q0, q1, q2, #90\n+vcaddeq.f16 q0, q1, q2, #90\n+vpst\n+vcaddeq.f16 q0, q1, q2, #90\n+vcaddt.f16 q0, q1, q2, #90\n+vpst\n+vcadd.f16 q0, q1, q2, #90"
    },
    {
      "sha": "477486d7b0bc364c3a13962fbd557c4bb54554f0",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-1.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VCMLA instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vcmla-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "d660f4972ea6b66445cd3806ac9a5ba7542c99a3",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-1.l",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-1.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,3 @@\n+[^:]*: Assembler messages:\n+[^:]*:3: Error: selected FPU does not support instruction -- `vcmla.f16 q0,q1,q2,#0'\n+[^:]*:4: Error: selected FPU does not support instruction -- `vcmla.f32 q0,q1,q2,#0'"
    },
    {
      "sha": "68202040a2e5112eb62f356696631843dc210be0",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-1.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-1.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,4 @@\n+.syntax unified\n+.thumb\n+vcmla.f16 q0, q1, q2, #0\n+vcmla.f32 q0, q1, q2, #0"
    },
    {
      "sha": "6a95d41b4b6a6e8205991fa4a9589a2c6a5f10dd",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-2.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VCMLA instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vcmla-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "ca1d34950de044aa3c8ae108145d58f4a9704a0c",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-2.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-2.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: immediate out of range -- `vcmla.f16 q0,q1,q2,#20'\n+[^:]*:11: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:12: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:13: Error: bad type in SIMD instruction -- `vcmla.f64 q0,q1,q2,#0'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vcmla.i16 q0,q1,q2,#0'\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vcmlaeq.f16 q0,q1,q2,#0'\n+[^:]*:18: Error: syntax error -- `vcmlaeq.f16 q0,q1,q2,#0'\n+[^:]*:20: Error: syntax error -- `vcmlaeq.f16 q0,q1,q2,#0'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vcmlat.f16 q0,q1,q2,#0'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vcmla.f16 q0,q1,q2,#0'"
    },
    {
      "sha": "d9ddb1f8735f4c01e97b2361e37db0bec122e04d",
      "filename": "gas/testsuite/gas/arm/mve-vcmla-bad-2.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmla-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmla-bad-2.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,23 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vcmla.f32 q0, q1, q2, #0\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vcmla.f16 q0, q1, q2, #20\n+vcmla.f32 q0, q0, q1, #0\n+vcmla.f32 q0, q1, q0, #0\n+vcmla.f64 q0, q1, q2, #0\n+vcmla.i16 q0, q1, q2, #0\n+cond\n+it eq\n+vcmlaeq.f16 q0, q1, q2, #0\n+vcmlaeq.f16 q0, q1, q2, #0\n+vpst\n+vcmlaeq.f16 q0, q1, q2, #0\n+vcmlat.f16 q0, q1, q2, #0\n+vpst\n+vcmla.f16 q0, q1, q2, #0"
    },
    {
      "sha": "34fb38f60885be72df5a8feb879f88985a30c8eb",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-1.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VCMUL instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vcmul-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "2b2e6c43317feaa4e0f0148c53b0f3762df538bf",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-1.l",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-1.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,4 @@\n+[^:]*: Assembler messages:\n+[^:]*:3: Error: selected processor does not support `vcmul.f16 q0,q1,q2,#0' in Thumb mode\n+[^:]*:4: Error: selected processor does not support `vcmul.f32 q0,q1,q2,#0' in Thumb mode\n+[^:]*:5: Error: selected processor does not support `vcmul.i16 q0,q1,q2,#0' in Thumb mode"
    },
    {
      "sha": "e8b405d775f3b7e4ce902683376bd9976a6fe381",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-1.s",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-1.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+.syntax unified\n+.thumb\n+vcmul.f16 q0, q1, q2, #0\n+vcmul.f32 q0, q1, q2, #0\n+vcmul.i16 q0, q1, q2, #0"
    },
    {
      "sha": "c440cbc87cbc7dde84140c2fa73da002eea9ca97",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-2.d?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VCMUL instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vcmul-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "c2e58a46cafeed9987ce6096c8264495f0cd9a61",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-2.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-2.l?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vcmul.i16 q0,q1,q2,#0'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vcmul.f64 q0,q1,q2,#0'\n+[^:]*:12: Error: immediate out of range -- `vcmul.f32 q0,q1,q2,#20'\n+[^:]*:13: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:14: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vcmuleq.f32 q0,q1,q2,#0'\n+[^:]*:18: Error: syntax error -- `vcmuleq.f32 q0,q1,q2,#0'\n+[^:]*:20: Error: syntax error -- `vcmuleq.f32 q0,q1,q2,#0'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vcmult.f32 q0,q1,q2,#0'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vcmul.f32 q0,q1,q2,#0'"
    },
    {
      "sha": "4eedefabb1883c4eef8ef2d7e70010b61ca8ce48",
      "filename": "gas/testsuite/gas/arm/mve-vcmul-bad-2.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d281bf033bbf2018a30183c2009182d947d3dfd/gas/testsuite/gas/arm/mve-vcmul-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmul-bad-2.s?ref=5d281bf033bbf2018a30183c2009182d947d3dfd",
      "patch": "@@ -0,0 +1,23 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vcmul.f32 q0, q1, q2, #0\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vcmul.i16 q0, q1, q2, #0\n+vcmul.f64 q0, q1, q2, #0\n+vcmul.f32 q0, q1, q2, #20\n+vcmul.f32 q0, q1, q0, #0\n+vcmul.f32 q0, q0, q1, #0\n+cond\n+it eq\n+vcmuleq.f32 q0, q1, q2, #0\n+vcmuleq.f32 q0, q1, q2, #0\n+vpst\n+vcmuleq.f32 q0, q1, q2, #0\n+vcmult.f32 q0, q1, q2, #0\n+vpst\n+vcmul.f32 q0, q1, q2, #0"
    }
  ]
}