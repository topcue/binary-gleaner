{
  "sha": "86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODZkZTFkOTFhYzkzZTQ4Zjc3ZWE5ZmU2MWVkZmRiYThhYzI0YWEwMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Minor cleanups in abbrev_table\n\nThis cleans up the DWARF abbrev_table API a bit, primarily by making\nvarious methods and members private.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_cutu_die_from_dwo): Update.\n\t(cutu_reader): Update.\n\t(build_type_psymtabs_1): Update.\n\t* dwarf2/abbrev.c (abbrev_table::read): Rename.\n\t(abbrev_table::alloc_abbrev): Update.\n\t* dwarf2/abbrev.h (abbrev_table_up): Move earlier.\n\t(abbrev_table::read): New static method, renamed from\n\tabbrev_table_read_table.\n\t(abbrev_table::alloc_abbrev)\n\t(abbrev_table::add_abbrev): Now private.\n\t(abbrev_table::abbrev_table): Now private.\n\t(abbrev_table::m_abbrev_obstack): Now private.  Rename.\n\nChange-Id: I320dca83b799f672909ae66f73b7aca266adbaf9",
    "tree": {
      "sha": "22574dfcc0506ec988d7577cd7ee30fc2706a916",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22574dfcc0506ec988d7577cd7ee30fc2706a916"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0335378b4cd2fc8246b2eb7cfe2b7e4cf757a377",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0335378b4cd2fc8246b2eb7cfe2b7e4cf757a377",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0335378b4cd2fc8246b2eb7cfe2b7e4cf757a377"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 52,
    "deletions": 37
  },
  "files": [
    {
      "sha": "8fae30b7936a3abaa2ede6ae42dd3d4bd7969278",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "patch": "@@ -1,3 +1,18 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_cutu_die_from_dwo): Update.\n+\t(cutu_reader): Update.\n+\t(build_type_psymtabs_1): Update.\n+\t* dwarf2/abbrev.c (abbrev_table::read): Rename.\n+\t(abbrev_table::alloc_abbrev): Update.\n+\t* dwarf2/abbrev.h (abbrev_table_up): Move earlier.\n+\t(abbrev_table::read): New static method, renamed from\n+\tabbrev_table_read_table.\n+\t(abbrev_table::alloc_abbrev)\n+\t(abbrev_table::add_abbrev): Now private.\n+\t(abbrev_table::abbrev_table): Now private.\n+\t(abbrev_table::m_abbrev_obstack): Now private.  Rename.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (set_die_type, get_die_type_at_offset): Update."
    },
    {
      "sha": "fac7309b93cf64dfc330c149977e890ccdd84040",
      "filename": "gdb/dwarf2/abbrev.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/abbrev.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/abbrev.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.c?ref=86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "patch": "@@ -44,7 +44,7 @@ abbrev_table::alloc_abbrev ()\n {\n   struct abbrev_info *abbrev;\n \n-  abbrev = XOBNEW (&abbrev_obstack, struct abbrev_info);\n+  abbrev = XOBNEW (&m_abbrev_obstack, struct abbrev_info);\n   memset (abbrev, 0, sizeof (struct abbrev_info));\n \n   return abbrev;\n@@ -87,9 +87,9 @@ abbrev_table::lookup_abbrev (unsigned int abbrev_number)\n /* Read in an abbrev table.  */\n \n abbrev_table_up\n-abbrev_table_read_table (struct objfile *objfile,\n-\t\t\t struct dwarf2_section_info *section,\n-\t\t\t sect_offset sect_off)\n+abbrev_table::read (struct objfile *objfile,\n+\t\t    struct dwarf2_section_info *section,\n+\t\t    sect_offset sect_off)\n {\n   bfd *abfd = section->get_bfd_owner ();\n   const gdb_byte *abbrev_ptr;\n@@ -152,7 +152,7 @@ abbrev_table_read_table (struct objfile *objfile,\n \t}\n \n       cur_abbrev->attrs =\n-\tXOBNEWVEC (&abbrev_table->abbrev_obstack, struct attr_abbrev,\n+\tXOBNEWVEC (&abbrev_table->m_abbrev_obstack, struct attr_abbrev,\n \t\t   cur_abbrev->num_attrs);\n       memcpy (cur_abbrev->attrs, cur_attrs.data (),\n \t      cur_abbrev->num_attrs * sizeof (struct attr_abbrev));"
    },
    {
      "sha": "52103b0a683623002aa01ff3f89a14d55afd9a99",
      "filename": "gdb/dwarf2/abbrev.h",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/abbrev.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/abbrev.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.h?ref=86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "patch": "@@ -50,15 +50,34 @@ struct attr_abbrev\n /* Size of abbrev_table.abbrev_hash_table.  */\n #define ABBREV_HASH_SIZE 121\n \n+struct abbrev_table;\n+typedef std::unique_ptr<struct abbrev_table> abbrev_table_up;\n+\n /* Top level data structure to contain an abbreviation table.  */\n \n struct abbrev_table\n {\n+  static abbrev_table_up read (struct objfile *objfile,\n+\t\t\t       struct dwarf2_section_info *section,\n+\t\t\t       sect_offset sect_off);\n+\n+  /* Look up an abbrev in the table.\n+     Returns NULL if the abbrev is not found.  */\n+\n+  struct abbrev_info *lookup_abbrev (unsigned int abbrev_number);\n+\n+\n+  /* Where the abbrev table came from.\n+     This is used as a sanity check when the table is used.  */\n+  const sect_offset sect_off;\n+\n+private:\n+\n   explicit abbrev_table (sect_offset off)\n     : sect_off (off)\n   {\n     m_abbrevs =\n-      XOBNEWVEC (&abbrev_obstack, struct abbrev_info *, ABBREV_HASH_SIZE);\n+      XOBNEWVEC (&m_abbrev_obstack, struct abbrev_info *, ABBREV_HASH_SIZE);\n     memset (m_abbrevs, 0, ABBREV_HASH_SIZE * sizeof (struct abbrev_info *));\n   }\n \n@@ -71,33 +90,14 @@ struct abbrev_table\n   /* Add an abbreviation to the table.  */\n   void add_abbrev (unsigned int abbrev_number, struct abbrev_info *abbrev);\n \n-  /* Look up an abbrev in the table.\n-     Returns NULL if the abbrev is not found.  */\n-\n-  struct abbrev_info *lookup_abbrev (unsigned int abbrev_number);\n-\n-\n-  /* Where the abbrev table came from.\n-     This is used as a sanity check when the table is used.  */\n-  const sect_offset sect_off;\n-\n-  /* Storage for the abbrev table.  */\n-  auto_obstack abbrev_obstack;\n-\n-private:\n-\n   /* Hash table of abbrevs.\n      This is an array of size ABBREV_HASH_SIZE allocated in abbrev_obstack.\n      It could be statically allocated, but the previous code didn't so we\n      don't either.  */\n   struct abbrev_info **m_abbrevs;\n-};\n \n-typedef std::unique_ptr<struct abbrev_table> abbrev_table_up;\n-\n-extern abbrev_table_up abbrev_table_read_table\n-  (struct objfile *objfile,\n-   struct dwarf2_section_info *section,\n-   sect_offset sect_off);\n+  /* Storage for the abbrev table.  */\n+  auto_obstack m_abbrev_obstack;\n+};\n \n #endif /* GDB_DWARF2_ABBREV_H */"
    },
    {
      "sha": "345535af4905db6e13fb65c38b7af8b031427bfe",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86de1d91ac93e48f77ea9fe61edfdba8ac24aa02/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=86de1d91ac93e48f77ea9fe61edfdba8ac24aa02",
      "patch": "@@ -7036,8 +7036,8 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n     }\n \n   *result_dwo_abbrev_table\n-    = abbrev_table_read_table (objfile, dwo_abbrev_section,\n-\t\t\t       cu->header.abbrev_sect_off);\n+    = abbrev_table::read (objfile, dwo_abbrev_section,\n+\t\t\t  cu->header.abbrev_sect_off);\n   init_cu_die_reader (result_reader, cu, section, dwo_unit->dwo_file,\n \t\t      result_dwo_abbrev_table->get ());\n \n@@ -7334,8 +7334,8 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n   else\n     {\n       m_abbrev_table_holder\n-\t= abbrev_table_read_table (objfile, abbrev_section,\n-\t\t\t\t   cu->header.abbrev_sect_off);\n+\t= abbrev_table::read (objfile, abbrev_section,\n+\t\t\t      cu->header.abbrev_sect_off);\n       abbrev_table = m_abbrev_table_holder.get ();\n     }\n \n@@ -7480,8 +7480,8 @@ cutu_reader::cutu_reader (struct dwarf2_per_cu_data *this_cu,\n     }\n \n   m_abbrev_table_holder\n-    = abbrev_table_read_table (objfile, abbrev_section,\n-\t\t\t       m_new_cu->header.abbrev_sect_off);\n+    = abbrev_table::read (objfile, abbrev_section,\n+\t\t\t  m_new_cu->header.abbrev_sect_off);\n \n   init_cu_die_reader (this, m_new_cu.get (), section, dwo_file,\n \t\t      m_abbrev_table_holder.get ());\n@@ -7969,9 +7969,9 @@ build_type_psymtabs_1 (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t{\n \t  abbrev_offset = tu.abbrev_offset;\n \t  abbrev_table =\n-\t    abbrev_table_read_table (dwarf2_per_objfile->objfile,\n-\t\t\t\t     &dwarf2_per_objfile->abbrev,\n-\t\t\t\t     abbrev_offset);\n+\t    abbrev_table::read (dwarf2_per_objfile->objfile,\n+\t\t\t\t&dwarf2_per_objfile->abbrev,\n+\t\t\t\tabbrev_offset);\n \t  ++tu_stats->nr_uniq_abbrev_tables;\n \t}\n "
    }
  ]
}