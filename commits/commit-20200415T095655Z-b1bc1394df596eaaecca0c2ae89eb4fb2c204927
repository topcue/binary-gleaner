{
  "sha": "b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjFiYzEzOTRkZjU5NmVhYWVjY2EwYzJhZTg5ZWI0ZmIyYzIwNDkyNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-04-15T09:56:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-04-15T09:56:55Z"
    },
    "message": "objdump --no-addresses\n\nI find this useful when needing to compare compiler output, where the\naddress of the instruction and the value of symbols results in\nunwanted differences.\n\n\t* objdump.c (no_addresses): New static var.\n\t(usage): Print help for --no-addresses.\n\t(long_options): Add --no-addresses entry.\n\t(objdump_print_addr_with_sym, objdump_print_addr): Omit symbol address.\n\t(disassemble_bytes): Don't print current line address, or reloc\n\taddress.\n\t* doc/binutils.texi: Document objdump --no-addresses.",
    "tree": {
      "sha": "34c69589beb390d0ee52ae65511c92fa3ea332ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/34c69589beb390d0ee52ae65511c92fa3ea332ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ecb51549ab1ec22aba5aaf34b70323cf0b8509a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ecb51549ab1ec22aba5aaf34b70323cf0b8509a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ecb51549ab1ec22aba5aaf34b70323cf0b8509a"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 54,
    "deletions": 18
  },
  "files": [
    {
      "sha": "82735b38ca69814316e6f36d831c4aaa44e42e4b",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* objdump.c (no_addresses): New static var.\n+\t(usage): Print help for --no-addresses.\n+\t(long_options): Add --no-addresses entry.\n+\t(objdump_print_addr_with_sym, objdump_print_addr): Omit symbol address.\n+\t(disassemble_bytes): Don't print current line address, or reloc\n+\taddress.\n+\t* doc/binutils.texi: Document objdump --no-addresses.\n+\n 2020-04-15  Alan Modra  <amodra@gmail.com>\n \n \tPR 25822"
    },
    {
      "sha": "b78154a8efed511db35036c4969aa29f76896110",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
      "patch": "@@ -2161,6 +2161,7 @@ objdump [@option{-a}|@option{--archive-headers}]\n         [@option{-w}|@option{--wide}]\n         [@option{--start-address=}@var{address}]\n         [@option{--stop-address=}@var{address}]\n+        [@option{--no-addresses}]\n         [@option{--prefix-addresses}]\n         [@option{--[no-]show-raw-insn}]\n         [@option{--adjust-vma=}@var{offset}]\n@@ -2314,6 +2315,10 @@ Note if the @option{--dwarf=follow-links} option has also been enabled\n then any symbol tables in linked debug info files will be read in and\n used when disassembling.\n \n+@item --no-addresses\n+When disassembling, don't print addresses on each line or for symbols\n+and relocation offsets.\n+\n @item --prefix-addresses\n When disassembling, print the complete address on each line.  This is\n the older disassembly format."
    },
    {
      "sha": "1d9afec992397c4683e56516ce3ef80b91d5360a",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 39,
      "deletions": 18,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1bc1394df596eaaecca0c2ae89eb4fb2c204927/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=b1bc1394df596eaaecca0c2ae89eb4fb2c204927",
      "patch": "@@ -93,6 +93,7 @@ static int dump_dynamic_reloc_info;\t/* -R */\n static int dump_ar_hdrs;\t\t/* -a */\n static int dump_private_headers;\t/* -p */\n static char *dump_private_options;\t/* -P */\n+static int no_addresses;\t\t/* --no-addresses */\n static int prefix_addresses;\t\t/* --prefix-addresses */\n static int with_line_numbers;\t\t/* -l */\n static bfd_boolean with_source_code;\t/* -S */\n@@ -270,6 +271,7 @@ usage (FILE *stream, int status)\n   -z, --disassemble-zeroes       Do not skip blocks of zeroes when disassembling\\n\\\n       --start-address=ADDR       Only process data whose address is >= ADDR\\n\\\n       --stop-address=ADDR        Only process data whose address is < ADDR\\n\\\n+      --no-addresses             Do not print address alongside disassembly\\n\\\n       --prefix-addresses         Print complete address alongside disassembly\\n\\\n       --[no-]show-raw-insn       Display hex alongside symbolic disassembly\\n\\\n       --insn-width=WIDTH         Display WIDTH bytes on a single line for -d\\n\\\n@@ -358,6 +360,7 @@ static struct option long_options[]=\n   {\"info\", no_argument, NULL, 'i'},\n   {\"line-numbers\", no_argument, NULL, 'l'},\n   {\"no-show-raw-insn\", no_argument, &show_raw_insn, -1},\n+  {\"no-addresses\", no_argument, &no_addresses, 1},\n   {\"prefix-addresses\", no_argument, &prefix_addresses, 1},\n   {\"recurse-limit\", no_argument, NULL, OPTION_RECURSE_LIMIT},\n   {\"recursion-limit\", no_argument, NULL, OPTION_RECURSE_LIMIT},\n@@ -1303,13 +1306,17 @@ objdump_print_addr_with_sym (bfd *abfd, asection *sec, asymbol *sym,\n \t\t\t     bfd_vma vma, struct disassemble_info *inf,\n \t\t\t     bfd_boolean skip_zeroes)\n {\n-  objdump_print_value (vma, inf, skip_zeroes);\n+  if (!no_addresses)\n+    {\n+      objdump_print_value (vma, inf, skip_zeroes);\n+      (*inf->fprintf_func) (inf->stream, \" \");\n+    }\n \n   if (sym == NULL)\n     {\n       bfd_vma secaddr;\n \n-      (*inf->fprintf_func) (inf->stream, \" <%s\",\n+      (*inf->fprintf_func) (inf->stream, \"<%s\",\n \t\t\t    sanitize_string (bfd_section_name (sec)));\n       secaddr = bfd_section_vma (sec);\n       if (vma < secaddr)\n@@ -1326,7 +1333,7 @@ objdump_print_addr_with_sym (bfd *abfd, asection *sec, asymbol *sym,\n     }\n   else\n     {\n-      (*inf->fprintf_func) (inf->stream, \" <\");\n+      (*inf->fprintf_func) (inf->stream, \"<\");\n \n       objdump_print_symname (abfd, inf, sym);\n \n@@ -1376,8 +1383,11 @@ objdump_print_addr (bfd_vma vma,\n \n   if (sorted_symcount < 1)\n     {\n-      (*inf->fprintf_func) (inf->stream, \"0x\");\n-      objdump_print_value (vma, inf, skip_zeroes);\n+      if (!no_addresses)\n+\t{\n+\t  (*inf->fprintf_func) (inf->stream, \"0x\");\n+\t  objdump_print_value (vma, inf, skip_zeroes);\n+\t}\n \n       if (display_file_offsets)\n \tinf->fprintf_func (inf->stream, _(\" (File Offset: 0x%lx)\"),\n@@ -2573,7 +2583,7 @@ disassemble_bytes (struct disassemble_info * inf,\n      zeroes in chunks of 4, ensuring that there is always a leading\n      zero remaining.  */\n   skip_addr_chars = 0;\n-  if (! prefix_addresses)\n+  if (!no_addresses && !prefix_addresses)\n     {\n       char buf[30];\n \n@@ -2669,7 +2679,9 @@ disassemble_bytes (struct disassemble_info * inf,\n \t  if (with_line_numbers || with_source_code)\n \t    show_line (aux->abfd, section, addr_offset);\n \n-\t  if (! prefix_addresses)\n+\t  if (no_addresses)\n+\t    printf (\"\\t\");\n+\t  else if (!prefix_addresses)\n \t    {\n \t      char *s;\n \n@@ -2875,12 +2887,17 @@ disassemble_bytes (struct disassemble_info * inf,\n \t\t  putchar ('\\n');\n \t\t  j = addr_offset * opb + pb;\n \n-\t\t  bfd_sprintf_vma (aux->abfd, buf, section->vma + j / opb);\n-\t\t  for (s = buf + skip_addr_chars; *s == '0'; s++)\n-\t\t    *s = ' ';\n-\t\t  if (*s == '\\0')\n-\t\t    *--s = '0';\n-\t\t  printf (\"%s:\\t\", buf + skip_addr_chars);\n+\t\t  if (no_addresses)\n+\t\t    printf (\"\\t\");\n+\t\t  else\n+\t\t    {\n+\t\t      bfd_sprintf_vma (aux->abfd, buf, section->vma + j / opb);\n+\t\t      for (s = buf + skip_addr_chars; *s == '0'; s++)\n+\t\t\t*s = ' ';\n+\t\t      if (*s == '\\0')\n+\t\t\t*--s = '0';\n+\t\t      printf (\"%s:\\t\", buf + skip_addr_chars);\n+\t\t    }\n \n \t\t  print_jump_visualisation (section->vma + j / opb,\n \t\t\t\t\t    max_level, line_buffer,\n@@ -2932,15 +2949,19 @@ disassemble_bytes (struct disassemble_info * inf,\n \t      else\n \t\tprintf (\"\\t\\t\\t\");\n \n-\t      objdump_print_value (section->vma - rel_offset + q->address,\n-\t\t\t\t   inf, TRUE);\n+\t      if (!no_addresses)\n+\t\t{\n+\t\t  objdump_print_value (section->vma - rel_offset + q->address,\n+\t\t\t\t       inf, TRUE);\n+\t\t  printf (\": \");\n+\t\t}\n \n \t      if (q->howto == NULL)\n-\t\tprintf (\": *unknown*\\t\");\n+\t\tprintf (\"*unknown*\\t\");\n \t      else if (q->howto->name)\n-\t\tprintf (\": %s\\t\", q->howto->name);\n+\t\tprintf (\"%s\\t\", q->howto->name);\n \t      else\n-\t\tprintf (\": %d\\t\", q->howto->type);\n+\t\tprintf (\"%d\\t\", q->howto->type);\n \n \t      if (q->sym_ptr_ptr == NULL || *q->sym_ptr_ptr == NULL)\n \t\tprintf (\"*unknown*\");"
    }
  ]
}