{
  "sha": "8dc558a0724fa5f56f837144dd44012e211d176e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRjNTU4YTA3MjRmYTVmNTZmODM3MTQ0ZGQ0NDAxMmUyMTFkMTc2ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-01-04T16:43:59Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-04T16:43:59Z"
    },
    "message": "gdb/testsuite: avoid reading files through the remote protocol in gdb.server/*.exp\n\nWhen I run some tests in gdb.server (fox example\ngdb.server/ext-attach.exp) on Ubuntu 20.04 with separate debug info for\nglibc installed, they often time out.  This is because GDB reads the\ndebug info through the remote protocol which is particularly slow:\n\n    attach 316937\n    Attaching to program: /home/smarchi/build/binutils-gdb-all-targets/gdb/testsuite/outputs/gdb.server/ext-attach/ext-attach, process 316937\n    Reading /lib/x86_64-linux-gnu/libc.so.6 from remote target...\n    warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead.\n    Reading /lib64/ld-linux-x86-64.so.2 from remote target...\n    Reading symbols from target:/lib/x86_64-linux-gnu/libc.so.6...\n    Reading /lib/x86_64-linux-gnu/libc-2.31.so from remote target...\n    Reading /lib/x86_64-linux-gnu/.debug/libc-2.31.so from remote target...\n    Reading /usr/lib/debug//lib/x86_64-linux-gnu/libc-2.31.so from remote target...\n    FAIL: gdb.server/ext-attach.exp: attach to remote program 1 (timeout)\n\nThis is avoided in gdbserver boards by adding \"set sysroot\" to GDBFLAGS\n(see boards/local-board.exp), which makes GDB read files from the local\nfilesystem.  But gdb.server tests spawn GDBserver directly, so are ran\neven when using the default unix board, where the \"set sysroot\" isn't\nused.\n\nModify these tests to append \"set sysroot\" to the GDBFLAGS, a bit like\nlib/local-board.exp does.\n\nOne special case is gdb.server/sysroot.exp, whose intent is to test\ndifferent \"set sysroot\" values.  For this one, increase the timeout when\ntesting the \"target:\" sysroot.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.server/abspath.exp: Append \"set sysroot\" to GDBFLAGS.\n\t* gdb.server/connect-without-multi-process.exp: Likewise.\n\t* gdb.server/exit-multiple-threads.exp: Likewise.\n\t* gdb.server/ext-attach.exp: Likewise.\n\t* gdb.server/ext-restart.exp: Likewise.\n\t* gdb.server/ext-run.exp: Likewise.\n\t* gdb.server/ext-wrapper.exp: Likewise.\n\t* gdb.server/multi-ui-errors.exp: Likewise.\n\t* gdb.server/no-thread-db.exp: Likewise.\n\t* gdb.server/reconnect-ctrl-c.exp: Likewise.\n\t* gdb.server/run-without-local-binary.exp: Likewise.\n\t* gdb.server/server-kill.exp: Likewise.\n\t* gdb.server/server-run.exp: Likewise.\n\t* gdb.server/solib-list.exp: Likewise.\n\t* gdb.server/stop-reply-no-thread.exp: Likewise.\n\t* gdb.server/wrapper.exp: Likewise.\n\t* gdb.server/sysroot.exp: Increase timeout when testing the\n\ttarget: sysroot.\n\nChange-Id: I7451bcc737f90e2cd0b977e9f09da3710774b0bf",
    "tree": {
      "sha": "b0b7a3625097b189cb63e1ab5ba59ebdcfc2ea33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b0b7a3625097b189cb63e1ab5ba59ebdcfc2ea33"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8dc558a0724fa5f56f837144dd44012e211d176e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc558a0724fa5f56f837144dd44012e211d176e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8dc558a0724fa5f56f837144dd44012e211d176e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc558a0724fa5f56f837144dd44012e211d176e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8387cc8b65fc3e7203f9ee48602cdf7b7009932",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8387cc8b65fc3e7203f9ee48602cdf7b7009932",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8387cc8b65fc3e7203f9ee48602cdf7b7009932"
    }
  ],
  "stats": {
    "total": 256,
    "additions": 208,
    "deletions": 48
  },
  "files": [
    {
      "sha": "44afe3629b58842051d6f752a9276fd24b7b8b5a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -1,3 +1,24 @@\n+2021-01-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.server/abspath.exp: Append \"set sysroot\" to GDBFLAGS.\n+\t* gdb.server/connect-without-multi-process.exp: Likewise.\n+\t* gdb.server/exit-multiple-threads.exp: Likewise.\n+\t* gdb.server/ext-attach.exp: Likewise.\n+\t* gdb.server/ext-restart.exp: Likewise.\n+\t* gdb.server/ext-run.exp: Likewise.\n+\t* gdb.server/ext-wrapper.exp: Likewise.\n+\t* gdb.server/multi-ui-errors.exp: Likewise.\n+\t* gdb.server/no-thread-db.exp: Likewise.\n+\t* gdb.server/reconnect-ctrl-c.exp: Likewise.\n+\t* gdb.server/run-without-local-binary.exp: Likewise.\n+\t* gdb.server/server-kill.exp: Likewise.\n+\t* gdb.server/server-run.exp: Likewise.\n+\t* gdb.server/solib-list.exp: Likewise.\n+\t* gdb.server/stop-reply-no-thread.exp: Likewise.\n+\t* gdb.server/wrapper.exp: Likewise.\n+\t* gdb.server/sysroot.exp: Increase timeout when testing the\n+\ttarget: sysroot.\n+\n 2021-01-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.server/server-run.exp: Use clean_restart."
    },
    {
      "sha": "1ccdbe7ac1cc82e7b5d2f31d07b05b9822a06501",
      "filename": "gdb/testsuite/gdb.server/abspath.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/abspath.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/abspath.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/abspath.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -33,8 +33,17 @@ if { [is_remote target] } {\n     return 0\n }\n \n-if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol (the `is_remote target` check is\n+    # already done above).\n+    if { ![is_remote host] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "9c03d1280e158b12b58e4d4445affbbc0963dda5",
      "filename": "gdb/testsuite/gdb.server/connect-without-multi-process.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/connect-without-multi-process.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/connect-without-multi-process.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/connect-without-multi-process.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -31,9 +31,17 @@ if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n # Test spawning gdbserver with a program, connect to it and run to\n # main, with both multiprocess extensions on and off.\n proc do_test {multiprocess} {\n-    global binfile\n+    global binfile GDBFLAGS\n \n-    clean_restart $binfile\n+    save_vars { GDBFLAGS } {\n+\t# If GDB and GDBserver are both running locally, set the sysroot to avoid\n+\t# reading files via the remote protocol.\n+\tif { ![is_remote host] && ![is_remote target] } {\n+\t    set GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+\t}\n+\n+\tclean_restart $binfile\n+    }\n \n     # Make sure we're disconnected, in case we're testing with an\n     # extended-remote board, therefore already connected."
    },
    {
      "sha": "a74f7d124490cfc6e721fb2dfac0de299bb914f2",
      "filename": "gdb/testsuite/gdb.server/exit-multiple-threads.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/exit-multiple-threads.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/exit-multiple-threads.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/exit-multiple-threads.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -39,7 +39,17 @@ standard_testfile\n # Places a breakpoint in function 'breakpt' and then continues to the\n # breakpoint, at which point it runs 'info threads'.\n proc prepare_for_test { executable disable_multi_process } {\n-    clean_restart ${executable}\n+    global GDBFLAGS\n+\n+    save_vars { GDBFLAGS } {\n+\t# If GDB and GDBserver are both running locally, set the sysroot to avoid\n+\t# reading files via the remote protocol.\n+\tif { ![is_remote host] && ![is_remote target] } {\n+\t    set GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+\t}\n+\n+\tclean_restart ${executable}\n+    }\n \n     # Make sure we're disconnected, in case we're testing with an\n     # extended-remote board, therefore already connected."
    },
    {
      "sha": "c9766e3531775f8147a088e9eeacbbce782e5ae4",
      "filename": "gdb/testsuite/gdb.server/ext-attach.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-attach.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-attach.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/ext-attach.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -30,8 +30,16 @@ if {![can_spawn_for_attach]} {\n     return 0\n }\n \n-if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "8b175e75a772a4f93cb15d8f12e3810aab6b2d9f",
      "filename": "gdb/testsuite/gdb.server/ext-restart.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-restart.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-restart.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/ext-restart.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -25,8 +25,16 @@ if { [skip_gdbserver_tests] } {\n     return 0\n }\n \n-if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "268f690949a2324c313f55037e33753807da81ff",
      "filename": "gdb/testsuite/gdb.server/ext-run.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-run.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-run.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/ext-run.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -32,7 +32,15 @@ if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {\n # gdb_skip_xml_test must be called while gdb is not running.\n set do_xml_test [expr ![gdb_skip_xml_test]]\n \n-clean_restart $binfile\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    clean_restart $binfile\n+}\n \n # Make sure we're disconnected, in case we're testing with an\n # extended-remote board, therefore already connected."
    },
    {
      "sha": "fc9a77f137c1ebb4a5fb728015287ff795543e95",
      "filename": "gdb/testsuite/gdb.server/ext-wrapper.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-wrapper.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/ext-wrapper.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/ext-wrapper.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -27,8 +27,16 @@ if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {\n     return -1\n }\n \n-if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "073192f19719d99a3aab88a25a455dde750312d3",
      "filename": "gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/multi-ui-errors.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -28,8 +28,16 @@ if {[skip_gdbserver_tests]} {\n     return 0\n }\n \n-if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "19ec89a822f3b0d7b101b91c0af9b2302117237c",
      "filename": "gdb/testsuite/gdb.server/no-thread-db.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/no-thread-db.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/no-thread-db.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/no-thread-db.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -33,7 +33,15 @@ if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executab\n     return -1\n }\n \n-clean_restart ${testfile}\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    clean_restart ${testfile}\n+}\n \n # Make sure we're disconnected, in case we're testing with an\n # extended-remote board, therefore already connected."
    },
    {
      "sha": "11aa5147c78af41e62b5ca722d524b8a3346a8a9",
      "filename": "gdb/testsuite/gdb.server/reconnect-ctrl-c.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/reconnect-ctrl-c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/reconnect-ctrl-c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/reconnect-ctrl-c.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -30,8 +30,17 @@ if [target_info exists gdb,nointerrupts] {\n }\n \n standard_testfile\n-if [prepare_for_testing \"failed to prepare\" $testfile $srcfile] {\n-    return -1\n+\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if [prepare_for_testing \"failed to prepare\" $testfile $srcfile] {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    },
    {
      "sha": "395eddc9106433082fa0c840a10ef4f6156175be",
      "filename": "gdb/testsuite/gdb.server/run-without-local-binary.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/run-without-local-binary.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/run-without-local-binary.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/run-without-local-binary.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -31,6 +31,13 @@ if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n # remote/21852.\n save_vars { GDBFLAGS } {\n     set GDBFLAGS \"\"\n+\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"-ex \\\"set sysroot\\\"\"\n+    }\n+\n     gdb_exit\n     gdb_start\n "
    },
    {
      "sha": "80d78f89738198ba996ad0b071080c143dd768f4",
      "filename": "gdb/testsuite/gdb.server/server-kill.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/server-kill.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/server-kill.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/server-kill.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -36,8 +36,17 @@ if { [build_executable \"failed to prepare\" ${testfile}] } {\n proc prepare {} {\n     global binfile gdb_prompt srcfile decimal\n     global server_pid\n+    global GDBFLAGS\n \n-    clean_restart $binfile\n+    save_vars { GDBFLAGS } {\n+\t# If GDB and GDBserver are both running locally, set the sysroot to avoid\n+\t# reading files via the remote protocol.\n+\tif { ![is_remote host] && ![is_remote target] } {\n+\t    set GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+\t}\n+\n+\tclean_restart $binfile\n+    }\n \n     # Make sure we're disconnected, in case we're testing with an\n     # extended-remote board, therefore already connected."
    },
    {
      "sha": "e680ef500356f4e36c23156ff767dfb574281643",
      "filename": "gdb/testsuite/gdb.server/server-run.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/server-run.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/server-run.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/server-run.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -29,7 +29,15 @@ if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {\n     return -1\n }\n \n-clean_restart $binfile\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    clean_restart $binfile\n+}\n \n # Make sure we're disconnected, in case we're testing with an\n # extended-remote board, therefore already connected."
    },
    {
      "sha": "3a8c739dd7b9f454723f710cd9540cedbbe8fc8b",
      "filename": "gdb/testsuite/gdb.server/solib-list.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/solib-list.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/solib-list.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/solib-list.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -42,7 +42,16 @@ set interp_system [section_get ${binfile} .interp]\n verbose -log \"system interpreter is: $interp_system\"\n \n foreach nonstop { 0 1 } { with_test_prefix \"non-stop $nonstop\" {\n-    clean_restart\n+    save_vars { GDBFLAGS } {\n+\t# If GDB and GDBserver are both running locally, set the sysroot to avoid\n+\t# reading files via the remote protocol.\n+\tif { ![is_remote host] && ![is_remote target] } {\n+\t    set GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+\t}\n+\n+\tclean_restart\n+    }\n+\n     gdb_load_shlib ${binlibfile}\n \n     set remote_binfile [gdb_remote_download target $binfile]"
    },
    {
      "sha": "68bf42ac1a0001175c6f7c128055adca517690d2",
      "filename": "gdb/testsuite/gdb.server/stop-reply-no-thread.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/stop-reply-no-thread.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/stop-reply-no-thread.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/stop-reply-no-thread.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -34,9 +34,17 @@ if { [build_executable \"failed to prepare\" $testfile $srcfile] == -1 } {\n \n # Run the tests with different features of GDBserver disabled.\n proc run_test { disable_feature target_nonstop } {\n-    global binfile gdb_prompt decimal\n+    global binfile gdb_prompt decimal GDBFLAGS\n \n-    clean_restart ${binfile}\n+    save_vars { GDBFLAGS } {\n+\t# If GDB and GDBserver are both running locally, set the sysroot to avoid\n+\t# reading files via the remote protocol.\n+\tif { ![is_remote host] && ![is_remote target] } {\n+\t    set GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+\t}\n+\n+\tclean_restart ${binfile}\n+    }\n \n     # Make sure we're disconnected, in case we're testing with an\n     # extended-remote board, therefore already connected."
    },
    {
      "sha": "5aea60a526b3fc0ab52fe92679e12feb62f4904f",
      "filename": "gdb/testsuite/gdb.server/sysroot.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 24,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/sysroot.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/sysroot.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/sysroot.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -40,39 +40,45 @@ foreach_with_prefix sysroot { \"local\" \"remote\" } {\n     if { $sysroot == \"local\" } {\n \tset sysroot_command \"/\"\n \tset reading_symbols \"Reading symbols from $binfile...\"\n+\tset timeout_factor 1\n     } else {\n \tset sysroot_command \"target:\"\n \tset reading_symbols \"Reading $binfile from remote target...\"\n+\tset timeout_factor 5\n     }\n \n-    # Restart GDB.\n-    clean_restart\n+    # Reading debug info from the remote target can take a bit of time, so\n+    # increase the timeout in that case.\n+    with_timeout_factor $timeout_factor {\n+\t# Restart GDB.\n+\tclean_restart\n \n-    # Make sure we're disconnected, in case we're testing with an\n-    # extended-remote board, therefore already connected.\n-    gdb_test \"disconnect\" \".*\"\n+\t# Make sure we're disconnected, in case we're testing with an\n+\t# extended-remote board, therefore already connected.\n+\tgdb_test \"disconnect\" \".*\"\n \n-    # Start GDBserver.\n-    set res [gdbserver_start \"\" $binfile]\n-    set gdbserver_protocol [lindex $res 0]\n-    set gdbserver_gdbport [lindex $res 1]\n+\t# Start GDBserver.\n+\tset res [gdbserver_start \"\" $binfile]\n+\tset gdbserver_protocol [lindex $res 0]\n+\tset gdbserver_gdbport [lindex $res 1]\n \n-    # Set the sysroot.\n-    gdb_test_no_output \"set sysroot $sysroot_command\"\n+\t# Set the sysroot.\n+\tgdb_test_no_output \"set sysroot $sysroot_command\"\n \n-    # Connect to gdbserver, making sure GDB reads in the binary correctly.\n-    set test \"connect to remote and read binary\"\n-    if {[gdb_target_cmd $gdbserver_protocol $gdbserver_gdbport $reading_symbols] == 0} {\n-\tpass $test\n-    } else {\n-\tfail $test\n-    }\n+\t# Connect to gdbserver, making sure GDB reads in the binary correctly.\n+\tset test \"connect to remote and read binary\"\n+\tif {[gdb_target_cmd $gdbserver_protocol $gdbserver_gdbport $reading_symbols] == 0} {\n+\t    pass $test\n+\t} else {\n+\t    fail $test\n+\t}\n \n-    gdb_breakpoint main\n-    gdb_test \"continue\" \"Breakpoint $decimal.* main.*\" \"continue to main\"\n+\tgdb_breakpoint main\n+\tgdb_test \"continue\" \"Breakpoint $decimal.* main.*\" \"continue to main\"\n \n-    # Test that we can stop inside a library.\n-    gdb_breakpoint printf\n-    gdb_test \"continue\" \"Breakpoint $decimal.* (__)?printf .*\" \\\n-\t\"continue to printf\"\n+\t# Test that we can stop inside a library.\n+\tgdb_breakpoint printf\n+\tgdb_test \"continue\" \"Breakpoint $decimal.* (__)?printf .*\" \\\n+\t    \"continue to printf\"\n+    }\n }"
    },
    {
      "sha": "27d37bac02e2c96aa75d07d91285b05c113e1cd7",
      "filename": "gdb/testsuite/gdb.server/wrapper.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/wrapper.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc558a0724fa5f56f837144dd44012e211d176e/gdb/testsuite/gdb.server/wrapper.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/wrapper.exp?ref=8dc558a0724fa5f56f837144dd44012e211d176e",
      "patch": "@@ -31,8 +31,16 @@ if { [istarget *-*-mingw*]\n     return -1\n }\n \n-if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n-    return -1\n+save_vars { GDBFLAGS } {\n+    # If GDB and GDBserver are both running locally, set the sysroot to avoid\n+    # reading files via the remote protocol.\n+    if { ![is_remote host] && ![is_remote target] } {\n+\tset GDBFLAGS \"$GDBFLAGS -ex \\\"set sysroot\\\"\"\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile debug] } {\n+\treturn -1\n+    }\n }\n \n # Make sure we're disconnected, in case we're testing with an"
    }
  ]
}