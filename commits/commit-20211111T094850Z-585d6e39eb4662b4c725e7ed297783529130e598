{
  "sha": "585d6e39eb4662b4c725e7ed297783529130e598",
  "node_id": "C_kwDOANOeidoAKDU4NWQ2ZTM5ZWI0NjYyYjRjNzI1ZTdlZDI5Nzc4MzUyOTEzMGU1OTg",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-11T09:48:50Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-11T09:48:50Z"
    },
    "message": "[gdb/testsuite] Add gdb.arch/ppc64-break-on-_exit.exp\n\nAdd a regression test-case for commit a50bdb99afe \"[gdb/tdep, rs6000] Don't\nskip system call in skip_prologue\":\n- set a breakpoint on a local copy of glibc's _exit, and\n- verify that it triggers.\n\nThe test-case uses an assembly file by default, but also has the possibility\nto use a C source file instead.\n\nTested on ppc64le-linux.  Verified that the test-case fails without\naforementioned commit, and passes with the commit.  Both with assembly\nand C source.",
    "tree": {
      "sha": "12bee55f3f8e6797b5e21f698df4738600ba73e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/12bee55f3f8e6797b5e21f698df4738600ba73e2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/585d6e39eb4662b4c725e7ed297783529130e598",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/585d6e39eb4662b4c725e7ed297783529130e598",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/585d6e39eb4662b4c725e7ed297783529130e598",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/585d6e39eb4662b4c725e7ed297783529130e598/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f786c359c1e3227fe8ecfcb2819bb3b80ed351ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f786c359c1e3227fe8ecfcb2819bb3b80ed351ed",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f786c359c1e3227fe8ecfcb2819bb3b80ed351ed"
    }
  ],
  "stats": {
    "total": 303,
    "additions": 303,
    "deletions": 0
  },
  "files": [
    {
      "sha": "77253140e3600da0630505cbd24a645326674dee",
      "filename": "gdb/testsuite/gdb.arch/ppc64-break-on-_exit-main.c",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/ppc64-break-on-_exit-main.c?ref=585d6e39eb4662b4c725e7ed297783529130e598",
      "patch": "@@ -0,0 +1,27 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <unistd.h>\n+\n+__thread int __libc_errno;\n+\n+int\n+main ()\n+{\n+  _exit (22);\n+  return 0;\n+}"
    },
    {
      "sha": "8638a7a6b70d61542817bb4fda613bf0c9ee3e37",
      "filename": "gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c",
      "status": "added",
      "additions": 112,
      "deletions": 0,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c?ref=585d6e39eb4662b4c725e7ed297783529130e598",
      "patch": "@@ -0,0 +1,112 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file was generated from glibc's 2.31 _exit.c, by doing a glibc build\n+   on ppc64le-linux, copying the command line, adding -g0 -save-temps and\n+   recuding the _exit.i file.  */\n+\n+void _exit (int status);\n+\n+extern __thread int __libc_errno;\n+\n+void\n+_exit (int status)\n+{\n+  while (1)\n+    {\n+      ({\n+\tlong int sc_err __attribute__ ((unused));\n+\tlong int sc_ret\n+\t  = ({\n+\t      register long int r0 __asm__ (\"r0\");\n+\t      register long int r3 __asm__ (\"r3\");\n+\t      register long int r4 __asm__ (\"r4\");\n+\t      register long int r5 __asm__ (\"r5\");\n+\t      register long int r6 __asm__ (\"r6\");\n+\t      register long int r7 __asm__ (\"r7\");\n+\t      register long int r8 __asm__ (\"r8\");\n+\t      long int arg1 = (long int) (status);\n+\n+\t      r0 = 234;\n+\n+\t      extern void __illegally_sized_syscall_arg1 (void);\n+\t      if (__builtin_classify_type (status) != 5 && sizeof (status) > 8)\n+\t\t__illegally_sized_syscall_arg1 ();\n+\n+\t      r3 = arg1;\n+\t      __asm__ __volatile__ (\"sc\\n\\t\" \"mfcr  %0\\n\\t\" \"0:\"\n+\t\t\t\t    : \"=&r\" (r0), \"=&r\" (r3), \"=&r\" (r4),\n+\t\t\t\t      \"=&r\" (r5), \"=&r\" (r6), \"=&r\" (r7),\n+\t\t\t\t      \"=&r\" (r8) : \"0\" (r0), \"1\" (r3)\n+\t\t\t\t    : \"r9\", \"r10\", \"r11\", \"r12\", \"cr0\", \"ctr\", \"memory\");\n+\t      sc_err = r0;\n+\n+\t      r3;\n+\t    });\n+\n+\tif (((void) (sc_ret), __builtin_expect ((sc_err) & (1 << 28), 0)))\n+\t  {\n+\t    (__libc_errno = ((sc_ret)));\n+\t    sc_ret = -1L;\n+\t  }\n+\n+\tsc_ret;\n+      });\n+\n+      ({\n+\tlong int sc_err __attribute__ ((unused));\n+\tlong int sc_ret\n+\t  = ({\n+\t      register long int r0 __asm__ (\"r0\");\n+\t      register long int r3 __asm__ (\"r3\");\n+\t      register long int r4 __asm__ (\"r4\");\n+\t      register long int r5 __asm__ (\"r5\");\n+\t      register long int r6 __asm__ (\"r6\");\n+\t      register long int r7 __asm__ (\"r7\");\n+\t      register long int r8 __asm__ (\"r8\");\n+\t      long int arg1 = (long int) (status);\n+\n+\t      r0 = 1;\n+\n+\t      extern void __illegally_sized_syscall_arg1 (void);\n+\t      if (__builtin_classify_type (status) != 5 && sizeof (status) > 8)\n+\t\t__illegally_sized_syscall_arg1 ();\n+\n+\t      r3 = arg1;\n+\t      __asm__ __volatile__ (\"sc\\n\\t\" \"mfcr  %0\\n\\t\" \"0:\"\n+\t\t\t\t    : \"=&r\" (r0), \"=&r\" (r3), \"=&r\" (r4),\n+\t\t\t\t      \"=&r\" (r5), \"=&r\" (r6), \"=&r\" (r7),\n+\t\t\t\t      \"=&r\" (r8) : \"0\" (r0), \"1\" (r3)\n+\t\t\t\t    : \"r9\", \"r10\", \"r11\", \"r12\", \"cr0\", \"ctr\", \"memory\");\n+\t      sc_err = r0;\n+\n+\t      r3;\n+\t    });\n+\n+\tif (((void) (sc_ret), __builtin_expect ((sc_err) & (1 << 28), 0)))\n+\t  {\n+\t    (__libc_errno = ((sc_ret)));\n+\t    sc_ret = -1L;\n+\t  }\n+\n+\tsc_ret;\n+      });\n+\n+\n+      asm (\".long 0\");\n+    }\n+}"
    },
    {
      "sha": "6b76d26b954696e9ffff3b36876f60ce477b43c1",
      "filename": "gdb/testsuite/gdb.arch/ppc64-break-on-_exit.exp",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.exp?ref=585d6e39eb4662b4c725e7ed297783529130e598",
      "patch": "@@ -0,0 +1,56 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Set a breakpoint on a local copy of glibc's _exit, and verify that it\n+# triggers.  The function does a syscall immediately after the prologue, and\n+# if the breakpoint is set past the syscall due to faulty prologue skipping,\n+# the breakpoint will not trigger.\n+#\n+# In particular, we're trying to excercise the instruction analysis\n+# functionality of prologue skipping.  If non-minimal symbols are\n+# read, then that functionality might not be used because f.i.\n+# line-info is used instead.  So, we use nodebug.\n+\n+if {![istarget \"powerpc*\"] || ![is_lp64_target]} {\n+    unsupported \"Not powerpc64\"\n+    return\n+}\n+\n+set flags { nodebug }\n+if [info exists COMPILE] {\n+    standard_testfile .c -main.c\n+    lappend flags optimize=-O2\n+    lappend flags additional_flags=-fno-stack-protector\n+    lappend flags additional_flags=-mlong-double-128\n+    lappend flags additional_flags=-fpic\n+    lappend flags additional_flags=-ftls-model=initial-exec\n+} else {\n+    standard_testfile .s -main.c\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $srcfile2] $flags] } {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+    return 0\n+}\n+\n+gdb_breakpoint \"_exit\"\n+\n+# If the skip_prologue analysis of _exit is too eager, we may not hit the\n+# breakpoint.\n+gdb_continue_to_breakpoint \"_exit\" \"_exit \\\\(\\\\).*\""
    },
    {
      "sha": "37a9ace2aff4054c2d4289e7834dd0b6fc6944a0",
      "filename": "gdb/testsuite/gdb.arch/ppc64-break-on-_exit.s",
      "status": "added",
      "additions": 108,
      "deletions": 0,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/585d6e39eb4662b4c725e7ed297783529130e598/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.s?ref=585d6e39eb4662b4c725e7ed297783529130e598",
      "patch": "@@ -0,0 +1,108 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file was generated from ppc64-break-on-_exit.c.  */\n+\n+\t.file\t\"ppc64-break-on-_exit.c\"\n+\t.abiversion 2\n+\t.section\t\".text\"\n+\t.align 2\n+\t.p2align 4,,15\n+\t.globl _exit\n+\t.type\t_exit, @function\n+_exit:\n+.LCF0:\n+0:\taddis 2,12,.TOC.-.LCF0@ha\n+\taddi 2,2,.TOC.-.LCF0@l\n+\t.localentry\t_exit,.-_exit\n+\taddis 9,2,__libc_errno@got@tprel@ha\n+\tstd 31,-8(1)\n+\tmr 31,3\n+\tstd 30,-16(1)\n+\tli 0,234\n+\tld 9,__libc_errno@got@tprel@l(9)\n+\tmr 3,31\n+\tadd 30,9,__libc_errno@tls\n+#APP\n+ # 28 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\tsc\n+\tmfcr  0\n+\t0:\n+ # 0 \"\" 2\n+#NO_APP\n+\tandis. 9,0,0x1000\n+\tmr 9,3\n+\tli 0,1\n+\tmr 3,31\n+\tbne 0,.L13\n+\t.p2align 4,,15\n+.L2:\n+#APP\n+ # 67 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\tsc\n+\tmfcr  0\n+\t0:\n+ # 0 \"\" 2\n+#NO_APP\n+\tandis. 9,0,0x1000\n+\tbne 0,.L14\n+.L3:\n+#APP\n+ # 87 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\t.long 0\n+ # 0 \"\" 2\n+#NO_APP\n+.L15:\n+\tli 0,234\n+\tmr 3,31\n+#APP\n+ # 28 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\tsc\n+\tmfcr  0\n+\t0:\n+ # 0 \"\" 2\n+#NO_APP\n+\tandis. 9,0,0x1000\n+\tmr 9,3\n+\tli 0,1\n+\tmr 3,31\n+\tbeq 0,.L2\n+.L13:\n+\tstw 9,0(30)\n+#APP\n+ # 67 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\tsc\n+\tmfcr  0\n+\t0:\n+ # 0 \"\" 2\n+#NO_APP\n+\tandis. 9,0,0x1000\n+\tbeq 0,.L3\n+\t.p2align 4,,15\n+.L14:\n+\tstw 3,0(30)\n+#APP\n+ # 87 \"src/gdb/testsuite/gdb.arch/ppc64-break-on-_exit.c\" 1\n+\t.long 0\n+ # 0 \"\" 2\n+#NO_APP\n+\tb .L15\n+\t.long 0\n+\t.byte 0,0,0,0,0,2,0,0\n+\t.size\t_exit,.-_exit\n+\t.ident\t\"GCC: (SUSE Linux) 7.5.0\"\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    }
  ]
}