{
  "sha": "a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTY5ZTM3ZGMyYjFkYmI4NGExYmE5MjQ1MzJjYmFlZGU2NDhiNjllOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-19T01:36:42Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: remove inferior::{argc,argv}\n\nThere are currently two states that the inferior args can be stored.\nThe main one is the `args` field, where they are stored as a single\nstring.  The other one is the `argc`/`argv` fields.\n\nThis last one is only used for arguments passed in GDB's\ncommand line.  And the only outcome is that when get_inferior_args is\ncalled, `argc`/`argv` are serialized into `args`.  So really,\n`argc`/`argv` is just a staging area before moving the arguments in\n`args`.\n\nSimplify this by only keeping the `args` field.  Change\nset_inferior_args_vector to immediately serialize the arguments into\n`args`, work that would be done in get_inferior_args later anyway.\n\nThe only time where this work would be \"wasted\" is when the user passes\nsome arguments on the command line, but does not end up running the\nprogram.  But that just seems unlikely.  And it's not that much work.\n\nChange-Id: Ica0b9859397c095f6530350c8fb3c36905f2044a",
    "tree": {
      "sha": "45cc2a1627d12639d6377b2185a0a26844effb53",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45cc2a1627d12639d6377b2185a0a26844effb53"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a69e37dc2b1dbb84a1ba924532cbaede648b69e8/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b8bf2e75ed61ff5bc9bb2cb9d4b8ed581ee6f19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b8bf2e75ed61ff5bc9bb2cb9d4b8ed581ee6f19",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b8bf2e75ed61ff5bc9bb2cb9d4b8ed581ee6f19"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 5,
    "deletions": 28
  },
  "files": [
    {
      "sha": "05115958a8f8d2fb569c395c75951b1210f9373d",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 5,
      "deletions": 19,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a69e37dc2b1dbb84a1ba924532cbaede648b69e8/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a69e37dc2b1dbb84a1ba924532cbaede648b69e8/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
      "patch": "@@ -127,16 +127,8 @@ show_inferior_tty_command (struct ui_file *file, int from_tty,\n const char *\n get_inferior_args (void)\n {\n-  if (current_inferior ()->argc != 0)\n-    {\n-      gdb::array_view<char * const> args (current_inferior ()->argv,\n-\t\t\t\t\t  current_inferior ()->argc);\n-      std::string n = construct_inferior_arguments (args);\n-      set_inferior_args (n.c_str ());\n-    }\n-\n-  if (current_inferior ()->args == NULL)\n-    current_inferior ()->args = make_unique_xstrdup (\"\");\n+  if (current_inferior ()->args == nullptr)\n+    return \"\";\n \n   return current_inferior ()->args.get ();\n }\n@@ -151,16 +143,14 @@ set_inferior_args (const char *newargs)\n     current_inferior ()->args = make_unique_xstrdup (newargs);\n   else\n     current_inferior ()->args.reset ();\n-\n-  current_inferior ()->argc = 0;\n-  current_inferior ()->argv = 0;\n }\n \n void\n set_inferior_args_vector (int argc, char **argv)\n {\n-  current_inferior ()->argc = argc;\n-  current_inferior ()->argv = argv;\n+  gdb::array_view<char * const> args (argv, argc);\n+  std::string n = construct_inferior_arguments (args);\n+  set_inferior_args (n.c_str ());\n }\n \n /* Notice when `set args' is run.  */\n@@ -490,15 +480,11 @@ run_command_1 (const char *args, int from_tty, enum run_how run_how)\n       if (exec_file)\n \tuiout->field_string (\"execfile\", exec_file);\n       uiout->spaces (1);\n-      /* We call get_inferior_args() because we might need to compute\n-\t the value now.  */\n       uiout->field_string (\"infargs\", get_inferior_args ());\n       uiout->text (\"\\n\");\n       uiout->flush ();\n     }\n \n-  /* We call get_inferior_args() because we might need to compute\n-     the value now.  */\n   run_target->create_inferior (exec_file,\n \t\t\t       std::string (get_inferior_args ()),\n \t\t\t       current_inferior ()->environment.envp (),"
    },
    {
      "sha": "feb3686635a5f2867170122e96f82c0e16efd512",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a69e37dc2b1dbb84a1ba924532cbaede648b69e8/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a69e37dc2b1dbb84a1ba924532cbaede648b69e8/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
      "patch": "@@ -478,15 +478,6 @@ class inferior : public refcounted_object,\n   /* The arguments string to use when running.  */\n   gdb::unique_xmalloc_ptr<char> args;\n \n-  /* The size of elements in argv.  */\n-  int argc = 0;\n-\n-  /* The vector version of arguments.  If ARGC is nonzero,\n-     then we must compute ARGS from this (via the target).\n-     This is always coming from main's argv and therefore\n-     should never be freed.  */\n-  char **argv = NULL;\n-\n   /* The current working directory that will be used when starting\n      this inferior.  */\n   gdb::unique_xmalloc_ptr<char> cwd;"
    }
  ]
}