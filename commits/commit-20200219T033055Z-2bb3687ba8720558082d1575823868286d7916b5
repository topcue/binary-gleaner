{
  "sha": "2bb3687ba8720558082d1575823868286d7916b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmJiMzY4N2JhODcyMDU1ODA4MmQxNTc1ODIzODY4Mjg2ZDc5MTZiNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:46:01Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T03:30:55Z"
    },
    "message": "_bfd_alloc_and_read\n\nThis patch provides two new inline functions that are then used in\nplaces that allocate memory, read from file, and then deallocate on a\nread failure.\n\n\t* libbfd-in.h (_bfd_alloc_and_read, _bfd_malloc_and_read): New.\n\t* aoutx.h (aout_get_external_symbols): Replace calls to\n\tbfd_[m]alloc and bfd_bread with call to _bfd_[m]alloc_and_read.\n\t(slurp_reloc_table): Likewise.\n\t* archive.c (do_slurp_bsd_armap): Likewise.\n\t(do_slurp_coff_armap): Likewise.\n\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Likewise.\n\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.\n\t* coffcode.h (coff_set_arch_mach_hook, buy_and_read): Likewise.\n\t* coffgen.c (coff_real_object_p, coff_object_p, build_debug_section),\n\t(_bfd_coff_get_external_symbols): Likewise.\n\t* ecoff.c (ecoff_slurp_symbolic_header),\n\t(_bfd_ecoff_slurp_symbolic_info, ecoff_slurp_reloc_table),\n\t(_bfd_ecoff_slurp_armap, ecoff_link_add_object_symbols, READ),\n\t(ecoff_indirect_link_order): Likewise.\n\t* elf.c (bfd_elf_get_str_section, setup_group, elf_read_notes),\n\t(_bfd_elf_slurp_version_tables): Likewise.\n\t* elf32-m32c.c (m32c_elf_relax_section): Likewise.\n\t* elf32-rl78.c (rl78_elf_relax_section): Likewise.\n\t* elf32-rx.c (elf32_rx_relax_section): Likewise.\n\t* elf64-alpha.c (READ): Likewise.\n\t* elf64-mips.c (mips_elf64_slurp_one_reloc_table): Likewise.\n\t* elf64-sparc.c (elf64_sparc_slurp_one_reloc_table): Likewise.\n\t* elfcode.h (elf_slurp_symbol_table),\n\t(elf_slurp_reloc_table_from_section): Likewise.\n\t* elflink.c (elf_link_add_object_symbols),\n\t(elf_link_check_versioned_symbol): Likewise.\n\t* elfxx-mips.c (READ): Likewise.\n\t* i386lynx.c (slurp_reloc_table): Likewise.\n\t* lynx-core.c (lynx_core_file_p): Likewise.\n\t* mach-o.c (bfd_mach_o_canonicalize_relocs),\n\t(bfd_mach_o_read_symtab_strtab, bfd_mach_o_alloc_and_read),\n\t(bfd_mach_o_read_prebound_dylib, bfd_mach_o_read_dyld_content\n\t* pdp11.c (aout_get_external_symbols, slurp_reloc_table\n\t* pef.c (bfd_pef_print_loader_section, bfd_pef_scan_start_address),\n\t(bfd_pef_parse_symbols): Likewise.\n\t* peicode.h (pe_ILF_object_p, pe_bfd_object_p\n\t* som.c (setup_sections, som_slurp_string_table),\n\t(som_slurp_reloc_table, som_bfd_count_ar_symbols),\n\t(som_bfd_fill_in_ar_symbols): Likewise.\n\t* vms-alpha.c (module_find_nearest_line, evax_bfd_print_dst),\n\t(evax_bfd_print_image): Likewise.\n\t* vms-lib.c (_bfd_vms_lib_archive_p): Likewise.\n\t* wasm-module.c (wasm_scan): Likewise.\n\t* xcofflink.c (xcoff_link_add_symbols): Likewise.\n\t* xsym.c (bfd_sym_read_name_table),\n\t(bfd_sym_print_type_information_table_entry): Likewise.\n\t* libbfd.h: Regenerate.",
    "tree": {
      "sha": "45bb12014f7fabd8963cc4b58bd537768d2dbbca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45bb12014f7fabd8963cc4b58bd537768d2dbbca"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2bb3687ba8720558082d1575823868286d7916b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bb3687ba8720558082d1575823868286d7916b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2bb3687ba8720558082d1575823868286d7916b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bb3687ba8720558082d1575823868286d7916b5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "806470a219e84665a59fc6be632d4ed6a4ad908b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/806470a219e84665a59fc6be632d4ed6a4ad908b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/806470a219e84665a59fc6be632d4ed6a4ad908b"
    }
  ],
  "stats": {
    "total": 755,
    "additions": 314,
    "deletions": 441
  },
  "files": [
    {
      "sha": "f2ddd86a3c9cb7032e1468983b850a2f8a8cbfc4",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1,3 +1,55 @@\n+2020-02-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* libbfd-in.h (_bfd_alloc_and_read, _bfd_malloc_and_read): New.\n+\t* aoutx.h (aout_get_external_symbols): Replace calls to\n+\tbfd_[m]alloc and bfd_bread with call to _bfd_[m]alloc_and_read.\n+\t(slurp_reloc_table): Likewise.\n+\t* archive.c (do_slurp_bsd_armap): Likewise.\n+\t(do_slurp_coff_armap): Likewise.\n+\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n+\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Likewise.\n+\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.\n+\t* coffcode.h (coff_set_arch_mach_hook, buy_and_read): Likewise.\n+\t* coffgen.c (coff_real_object_p, coff_object_p, build_debug_section),\n+\t(_bfd_coff_get_external_symbols): Likewise.\n+\t* ecoff.c (ecoff_slurp_symbolic_header),\n+\t(_bfd_ecoff_slurp_symbolic_info, ecoff_slurp_reloc_table),\n+\t(_bfd_ecoff_slurp_armap, ecoff_link_add_object_symbols, READ),\n+\t(ecoff_indirect_link_order): Likewise.\n+\t* elf.c (bfd_elf_get_str_section, setup_group, elf_read_notes),\n+\t(_bfd_elf_slurp_version_tables): Likewise.\n+\t* elf32-m32c.c (m32c_elf_relax_section): Likewise.\n+\t* elf32-rl78.c (rl78_elf_relax_section): Likewise.\n+\t* elf32-rx.c (elf32_rx_relax_section): Likewise.\n+\t* elf64-alpha.c (READ): Likewise.\n+\t* elf64-mips.c (mips_elf64_slurp_one_reloc_table): Likewise.\n+\t* elf64-sparc.c (elf64_sparc_slurp_one_reloc_table): Likewise.\n+\t* elfcode.h (elf_slurp_symbol_table),\n+\t(elf_slurp_reloc_table_from_section): Likewise.\n+\t* elflink.c (elf_link_add_object_symbols),\n+\t(elf_link_check_versioned_symbol): Likewise.\n+\t* elfxx-mips.c (READ): Likewise.\n+\t* i386lynx.c (slurp_reloc_table): Likewise.\n+\t* lynx-core.c (lynx_core_file_p): Likewise.\n+\t* mach-o.c (bfd_mach_o_canonicalize_relocs),\n+\t(bfd_mach_o_read_symtab_strtab, bfd_mach_o_alloc_and_read),\n+\t(bfd_mach_o_read_prebound_dylib, bfd_mach_o_read_dyld_content\n+\t* pdp11.c (aout_get_external_symbols, slurp_reloc_table\n+\t* pef.c (bfd_pef_print_loader_section, bfd_pef_scan_start_address),\n+\t(bfd_pef_parse_symbols): Likewise.\n+\t* peicode.h (pe_ILF_object_p, pe_bfd_object_p\n+\t* som.c (setup_sections, som_slurp_string_table),\n+\t(som_slurp_reloc_table, som_bfd_count_ar_symbols),\n+\t(som_bfd_fill_in_ar_symbols): Likewise.\n+\t* vms-alpha.c (module_find_nearest_line, evax_bfd_print_dst),\n+\t(evax_bfd_print_image): Likewise.\n+\t* vms-lib.c (_bfd_vms_lib_archive_p): Likewise.\n+\t* wasm-module.c (wasm_scan): Likewise.\n+\t* xcofflink.c (xcoff_link_add_symbols): Likewise.\n+\t* xsym.c (bfd_sym_read_name_table),\n+\t(bfd_sym_print_type_information_table_entry): Likewise.\n+\t* libbfd.h: Regenerate.\n+\n 2020-02-19  Alan Modra  <amodra@gmail.com>\n \n \t* aoutx.h (slurp_reloc_table): Allocate reloc_cache after"
    },
    {
      "sha": "b843357b091fe8710060d53c5c374baed859e0d4",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 4,
      "deletions": 16,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1303,16 +1303,11 @@ aout_get_external_symbols (bfd *abfd)\n       /* We allocate using malloc to make the values easy to free\n \t later on.  If we put them on the objalloc it might not be\n \t possible to free them.  */\n-      syms = (struct external_nlist *) bfd_malloc (amt);\n+      if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0)\n+\treturn FALSE;\n+      syms = (struct external_nlist *) _bfd_malloc_and_read (abfd, amt, amt);\n       if (syms == NULL)\n \treturn FALSE;\n-\n-      if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0\n-\t  || bfd_bread (syms, amt, abfd) != amt)\n-\t{\n-\t  free (syms);\n-\t  return FALSE;\n-\t}\n #endif\n \n       obj_aout_external_syms (abfd) = syms;\n@@ -2323,17 +2318,10 @@ NAME (aout, slurp_reloc_table) (bfd *abfd, sec_ptr asect, asymbol **symbols)\n \n   if (bfd_seek (abfd, asect->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n-\n-  relocs = bfd_malloc (reloc_size);\n+  relocs = _bfd_malloc_and_read (abfd, reloc_size, reloc_size);\n   if (relocs == NULL)\n     return FALSE;\n \n-  if (bfd_bread (relocs, reloc_size, abfd) != reloc_size)\n-    {\n-      free (relocs);\n-      return FALSE;\n-    }\n-\n   amt = count * sizeof (arelent);\n   reloc_cache = (arelent *) bfd_zmalloc (amt);\n   if (reloc_cache == NULL)"
    },
    {
      "sha": "d2a9a65ea9bb6fee1674cf4321dd3d91ca52ae86",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -968,16 +968,11 @@ do_slurp_bsd_armap (bfd *abfd)\n   if (parsed_size < 4)\n     return FALSE;\n \n-  raw_armap = (bfd_byte *) bfd_alloc (abfd, parsed_size);\n+  raw_armap = (bfd_byte *) _bfd_alloc_and_read (abfd, parsed_size, parsed_size);\n   if (raw_armap == NULL)\n-    return FALSE;\n-\n-  if (bfd_bread (raw_armap, parsed_size, abfd) != parsed_size)\n     {\n       if (bfd_get_error () != bfd_error_system_call)\n \tbfd_set_error (bfd_error_malformed_archive);\n-    byebye:\n-      bfd_release (abfd, raw_armap);\n       return FALSE;\n     }\n \n@@ -987,7 +982,8 @@ do_slurp_bsd_armap (bfd *abfd)\n     {\n       /* Probably we're using the wrong byte ordering.  */\n       bfd_set_error (bfd_error_wrong_format);\n-      goto byebye;\n+      bfd_release (abfd, raw_armap);\n+      return FALSE;\n     }\n \n   rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;\n@@ -997,7 +993,10 @@ do_slurp_bsd_armap (bfd *abfd)\n   amt = ardata->symdef_count * sizeof (carsym);\n   ardata->symdefs = (struct carsym *) bfd_alloc (abfd, amt);\n   if (!ardata->symdefs)\n-    return FALSE;\n+    {\n+      bfd_release (abfd, raw_armap);\n+      return FALSE;\n+    }\n \n   for (counter = 0, set = ardata->symdefs;\n        counter < ardata->symdef_count;\n@@ -1081,10 +1080,8 @@ do_slurp_coff_armap (bfd *abfd)\n   stringbase = ((char *) ardata->symdefs) + carsym_size;\n \n   /* Allocate and read in the raw offsets.  */\n-  raw_armap = (int *) bfd_alloc (abfd, ptrsize);\n-  if (raw_armap == NULL)\n-    goto release_symdefs;\n-  if (bfd_bread (raw_armap, ptrsize, abfd) != ptrsize\n+  raw_armap = (int *) _bfd_alloc_and_read (abfd, ptrsize, ptrsize);\n+  if (raw_armap == NULL\n       || (bfd_bread (stringbase, stringsize, abfd) != stringsize))\n     {\n       if (bfd_get_error () != bfd_error_system_call)"
    },
    {
      "sha": "5cad723ddbb548992765be5d3c860fcda48750a5",
      "filename": "bfd/archive64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/archive64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/archive64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive64.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -108,11 +108,8 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n   carsyms = ardata->symdefs;\n   stringbase = ((char *) ardata->symdefs) + carsym_size;\n \n-  raw_armap = (bfd_byte *) bfd_alloc (abfd, ptrsize);\n-  if (raw_armap == NULL)\n-    goto release_symdefs;\n-\n-  if (bfd_bread (raw_armap, ptrsize, abfd) != ptrsize\n+  raw_armap = (bfd_byte *) _bfd_alloc_and_read (abfd, ptrsize, ptrsize);\n+  if (raw_armap == NULL\n       || bfd_bread (stringbase, stringsize, abfd) != stringsize)\n     {\n       if (bfd_get_error () != bfd_error_system_call)"
    },
    {
      "sha": "c30b360d83fce88af338f0dc69a97fa9ce39a592",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1267,11 +1267,9 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \t}\n \n       /* Read in the entire symbol table.  */\n-      contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n+      contents = (bfd_byte *) _bfd_alloc_and_read (abfd, sz + 1, sz);\n       if (contents == NULL)\n \treturn FALSE;\n-      if (bfd_bread (contents, sz, abfd) != sz)\n-\treturn FALSE;\n \n       /* Ensure strings are NULL terminated so we don't wander off the\n \t end of the buffer.  */\n@@ -1331,11 +1329,9 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \t}\n \n       /* Read in the entire symbol table.  */\n-      contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n+      contents = (bfd_byte *) _bfd_alloc_and_read (abfd, sz + 1, sz);\n       if (contents == NULL)\n \treturn FALSE;\n-      if (bfd_bread (contents, sz, abfd) != sz)\n-\treturn FALSE;\n \n       /* Ensure strings are NULL terminated so we don't wander off the\n \t end of the buffer.  */"
    },
    {
      "sha": "bb546239fc3c32d54265ec55e971367d38f4013d",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1940,11 +1940,9 @@ xcoff64_slurp_armap (bfd *abfd)\n     }\n \n   /* Read in the entire symbol table.  */\n-  contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n+  contents = (bfd_byte *) _bfd_alloc_and_read (abfd, sz + 1, sz);\n   if (contents == NULL)\n     return FALSE;\n-  if (bfd_bread (contents, sz, abfd) != sz)\n-    return FALSE;\n \n   /* Ensure strings are NULL terminated so we don't wander off the end\n      of the buffer.  */"
    },
    {
      "sha": "cd495dbe6185f933e87ce63e0feb9677fcae98ba",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 5,
      "deletions": 14,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -2222,15 +2222,11 @@ coff_set_arch_mach_hook (bfd *abfd, void * filehdr)\n \t\tstruct internal_syment sym;\n \t\tbfd_size_type amt = bfd_coff_symesz (abfd);\n \n-\t\tbuf = bfd_malloc (amt);\n+\t\tif (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0)\n+\t\t  return FALSE;\n+\t\tbuf = _bfd_malloc_and_read (abfd, amt, amt);\n \t\tif (buf == NULL)\n \t\t  return FALSE;\n-\t\tif (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0\n-\t\t    || bfd_bread (buf, amt, abfd) != amt)\n-\t\t  {\n-\t\t    free (buf);\n-\t\t    return FALSE;\n-\t\t  }\n \t\tbfd_coff_swap_sym_in (abfd, buf, & sym);\n \t\tif (sym.n_sclass == C_FILE)\n \t\t  cputype = sym.n_type & 0xff;\n@@ -4200,21 +4196,16 @@ static void *\n buy_and_read (bfd *abfd, file_ptr where,\n \t      bfd_size_type nmemb, bfd_size_type size)\n {\n-  void *area;\n   size_t amt;\n \n   if (_bfd_mul_overflow (nmemb, size, &amt))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return NULL;\n     }\n-  area = bfd_alloc (abfd, amt);\n-  if (!area)\n-    return NULL;\n-  if (bfd_seek (abfd, where, SEEK_SET) != 0\n-      || bfd_bread (area, amt, abfd) != amt)\n+  if (bfd_seek (abfd, where, SEEK_SET) != 0)\n     return NULL;\n-  return area;\n+  return _bfd_alloc_and_read (abfd, amt, amt);\n }\n \n /*"
    },
    {
      "sha": "dda98394f11e6aa1b2b8c09cfeb47a466f01cc35",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 18,
      "deletions": 44,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -275,13 +275,10 @@ coff_real_object_p (bfd *abfd,\n \n   scnhsz = bfd_coff_scnhsz (abfd);\n   readsize = (bfd_size_type) nscns * scnhsz;\n-  external_sections = (char *) bfd_alloc (abfd, readsize);\n+  external_sections = (char *) _bfd_alloc_and_read (abfd, readsize, readsize);\n   if (!external_sections)\n     goto fail;\n \n-  if (bfd_bread ((void *) external_sections, readsize, abfd) != readsize)\n-    goto fail;\n-\n   /* Set the arch/mach *before* swapping in sections; section header swapping\n      may depend on arch/mach info.  */\n   if (! bfd_coff_set_arch_mach_hook (abfd, (void *) internal_f))\n@@ -332,14 +329,11 @@ coff_object_p (bfd *abfd)\n   filhsz = bfd_coff_filhsz (abfd);\n   aoutsz = bfd_coff_aoutsz (abfd);\n \n-  filehdr = bfd_alloc (abfd, filhsz);\n+  filehdr = _bfd_alloc_and_read (abfd, filhsz, filhsz);\n   if (filehdr == NULL)\n-    return NULL;\n-  if (bfd_bread (filehdr, filhsz, abfd) != filhsz)\n     {\n       if (bfd_get_error () != bfd_error_system_call)\n \tbfd_set_error (bfd_error_wrong_format);\n-      bfd_release (abfd, filehdr);\n       return NULL;\n     }\n   bfd_coff_swap_filehdr_in (abfd, filehdr, &internal_f);\n@@ -365,18 +359,13 @@ coff_object_p (bfd *abfd)\n     {\n       void * opthdr;\n \n-      opthdr = bfd_alloc (abfd, aoutsz);\n+      opthdr = _bfd_alloc_and_read (abfd, aoutsz, internal_f.f_opthdr);\n       if (opthdr == NULL)\n \treturn NULL;\n-      if (bfd_bread (opthdr, (bfd_size_type) internal_f.f_opthdr, abfd)\n-\t  != internal_f.f_opthdr)\n-\t{\n-\t  bfd_release (abfd, opthdr);\n-\t  return NULL;\n-\t}\n       /* PR 17512: file: 11056-1136-0.004.  */\n       if (internal_f.f_opthdr < aoutsz)\n-\tmemset (((char *) opthdr) + internal_f.f_opthdr, 0, aoutsz - internal_f.f_opthdr);\n+\tmemset (((char *) opthdr) + internal_f.f_opthdr, 0,\n+\t\taoutsz - internal_f.f_opthdr);\n \n       bfd_coff_swap_aouthdr_in (abfd, opthdr, (void *) &internal_a);\n       bfd_release (abfd, opthdr);\n@@ -1593,19 +1582,20 @@ build_debug_section (bfd *abfd, asection ** sect_return)\n       return NULL;\n     }\n \n-  sec_size = sect->size;\n-  debug_section = (char *) bfd_alloc (abfd, sec_size);\n-  if (debug_section == NULL)\n-    return NULL;\n-\n   /* Seek to the beginning of the `.debug' section and read it.\n      Save the current position first; it is needed by our caller.\n      Then read debug section and reset the file pointer.  */\n \n   position = bfd_tell (abfd);\n-  if (bfd_seek (abfd, sect->filepos, SEEK_SET) != 0\n-      || bfd_bread (debug_section, sec_size, abfd) != sec_size\n-      || bfd_seek (abfd, position, SEEK_SET) != 0)\n+  if (bfd_seek (abfd, sect->filepos, SEEK_SET) != 0)\n+    return NULL;\n+\n+  sec_size = sect->size;\n+  debug_section = (char *) _bfd_alloc_and_read (abfd, sec_size, sec_size);\n+  if (debug_section == NULL)\n+    return NULL;\n+\n+  if (bfd_seek (abfd, position, SEEK_SET) != 0)\n     return NULL;\n \n   * sect_return = sect;\n@@ -1662,27 +1652,11 @@ _bfd_coff_get_external_symbols (bfd *abfd)\n   if (size == 0)\n     return TRUE;\n \n-  syms = bfd_malloc (size);\n-  if (syms == NULL)\n-    {\n-      /* PR 21013: Provide an error message when the alloc fails.  */\n-      _bfd_error_handler (_(\"%pB: not enough memory to allocate space \"\n-\t\t\t    \"for %#\" PRIx64 \" symbols of size %#\" PRIx64),\n-\t\t\t  abfd, (uint64_t) obj_raw_syment_count (abfd),\n-\t\t\t  (uint64_t) symesz);\n-      return FALSE;\n-    }\n-\n-  if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0\n-      || bfd_bread (syms, size, abfd) != size)\n-    {\n-      if (syms != NULL)\n-\tfree (syms);\n-      return FALSE;\n-    }\n-\n+  if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0)\n+    return FALSE;\n+  syms = _bfd_malloc_and_read (abfd, size, size);\n   obj_coff_external_syms (abfd) = syms;\n-  return TRUE;\n+  return syms != NULL;\n }\n \n /* Read in the external strings.  The strings are not loaded until"
    },
    {
      "sha": "9e2efac8e3a36abeb6d0b1b53a6c9ba17b727c60",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 25,
      "deletions": 44,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -465,13 +465,12 @@ ecoff_slurp_symbolic_header (bfd *abfd)\n     }\n \n   /* Read the symbolic information header.  */\n-  raw = bfd_malloc (external_hdr_size);\n+  if (bfd_seek (abfd, ecoff_data (abfd)->sym_filepos, SEEK_SET) != 0)\n+    goto error_return;\n+  raw = _bfd_malloc_and_read (abfd, external_hdr_size, external_hdr_size);\n   if (raw == NULL)\n     goto error_return;\n \n-  if (bfd_seek (abfd, ecoff_data (abfd)->sym_filepos, SEEK_SET) != 0\n-      || bfd_bread (raw, external_hdr_size, abfd) != external_hdr_size)\n-    goto error_return;\n   internal_symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;\n   (*backend->debug_swap.swap_hdr_in) (abfd, raw, internal_symhdr);\n \n@@ -571,18 +570,13 @@ _bfd_ecoff_slurp_symbolic_info (bfd *abfd,\n       ecoff_data (abfd)->sym_filepos = 0;\n       return TRUE;\n     }\n-  raw = bfd_alloc (abfd, raw_size);\n-  if (raw == NULL)\n-    return FALSE;\n-\n   pos = ecoff_data (abfd)->sym_filepos;\n   pos += backend->debug_swap.external_hdr_size;\n-  if (bfd_seek (abfd, pos, SEEK_SET) != 0\n-      || bfd_bread (raw, raw_size, abfd) != raw_size)\n-    {\n-      bfd_release (abfd, raw);\n-      return FALSE;\n-    }\n+  if (bfd_seek (abfd, pos, SEEK_SET) != 0)\n+    return FALSE;\n+  raw = _bfd_alloc_and_read (abfd, raw_size, raw_size);\n+  if (raw == NULL)\n+    return FALSE;\n \n   ecoff_data (abfd)->raw_syments = raw;\n \n@@ -1611,7 +1605,7 @@ ecoff_slurp_reloc_table (bfd *abfd,\n   arelent *internal_relocs;\n   bfd_size_type external_reloc_size;\n   bfd_size_type amt;\n-  char *external_relocs;\n+  bfd_byte *external_relocs;\n   arelent *rptr;\n   unsigned int i;\n \n@@ -1625,12 +1619,10 @@ ecoff_slurp_reloc_table (bfd *abfd,\n \n   external_reloc_size = backend->external_reloc_size;\n   amt = external_reloc_size * section->reloc_count;\n-  external_relocs = (char *) bfd_alloc (abfd, amt);\n-  if (external_relocs == NULL)\n-    return FALSE;\n   if (bfd_seek (abfd, section->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n-  if (bfd_bread (external_relocs, amt, abfd) != amt)\n+  external_relocs = _bfd_alloc_and_read (abfd, amt, amt);\n+  if (external_relocs == NULL)\n     return FALSE;\n \n   amt = section->reloc_count;\n@@ -2945,15 +2937,11 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   parsed_size = mapdata->parsed_size;\n   free (mapdata);\n \n-  raw_armap = (char *) bfd_alloc (abfd, parsed_size);\n+  raw_armap = (char *) _bfd_alloc_and_read (abfd, parsed_size, parsed_size);\n   if (raw_armap == NULL)\n-    return FALSE;\n-\n-  if (bfd_bread ((void *) raw_armap, parsed_size, abfd) != parsed_size)\n     {\n       if (bfd_get_error () != bfd_error_system_call)\n \tbfd_set_error (bfd_error_malformed_archive);\n-      bfd_release (abfd, (void *) raw_armap);\n       return FALSE;\n     }\n \n@@ -3503,25 +3491,21 @@ ecoff_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n   symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;\n \n   /* Read in the external symbols and external strings.  */\n+  if (bfd_seek (abfd, symhdr->cbExtOffset, SEEK_SET) != 0)\n+    return FALSE;\n   external_ext_size = ecoff_backend (abfd)->debug_swap.external_ext_size;\n   esize = symhdr->iextMax * external_ext_size;\n-  external_ext = bfd_malloc (esize);\n+  external_ext = _bfd_malloc_and_read (abfd, esize, esize);\n   if (external_ext == NULL && esize != 0)\n     goto error_return;\n \n-  if (bfd_seek (abfd, (file_ptr) symhdr->cbExtOffset, SEEK_SET) != 0\n-      || bfd_bread (external_ext, esize, abfd) != esize)\n+  if (bfd_seek (abfd, symhdr->cbSsExtOffset, SEEK_SET) != 0)\n     goto error_return;\n-\n-  ssext = (char *) bfd_malloc ((bfd_size_type) symhdr->issExtMax);\n+  ssext = (char *) _bfd_malloc_and_read (abfd, symhdr->issExtMax,\n+\t\t\t\t\t symhdr->issExtMax);\n   if (ssext == NULL && symhdr->issExtMax != 0)\n     goto error_return;\n \n-  if (bfd_seek (abfd, (file_ptr) symhdr->cbSsExtOffset, SEEK_SET) != 0\n-      || (bfd_bread (ssext, (bfd_size_type) symhdr->issExtMax, abfd)\n-\t  != (bfd_size_type) symhdr->issExtMax))\n-    goto error_return;\n-\n   result = ecoff_link_add_externals (abfd, info, external_ext, ssext);\n \n   if (ssext != NULL)\n@@ -3775,14 +3759,13 @@ ecoff_final_link_debug_accumulate (bfd *output_bfd,\n \t  ret = FALSE;\t\t\t\t\t\t\t\\\n \t  goto return_something;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      debug->ptr = (type) bfd_malloc (amt);\t\t\t\t\\\n-      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n+      if (bfd_seek (input_bfd, symhdr->offset, SEEK_SET) != 0)\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  ret = FALSE;\t\t\t\t\t\t\t\\\n \t  goto return_something;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      if (bfd_seek (input_bfd, symhdr->offset, SEEK_SET) != 0\t\t\\\n-\t  || bfd_bread (debug->ptr, amt, input_bfd) != amt)\t\t\\\n+      debug->ptr = (type) _bfd_malloc_and_read (input_bfd, amt, amt);\t\\\n+      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  ret = FALSE;\t\t\t\t\t\t\t\\\n \t  goto return_something;\t\t\t\t\t\\\n@@ -3887,13 +3870,11 @@ ecoff_indirect_link_order (bfd *output_bfd,\n   external_reloc_size = ecoff_backend (input_bfd)->external_reloc_size;\n   external_relocs_size = external_reloc_size * input_section->reloc_count;\n \n-  external_relocs = bfd_malloc (external_relocs_size);\n-  if (external_relocs == NULL && external_relocs_size != 0)\n+  if (bfd_seek (input_bfd, input_section->rel_filepos, SEEK_SET) != 0)\n     goto error_return;\n-\n-  if (bfd_seek (input_bfd, input_section->rel_filepos, SEEK_SET) != 0\n-      || (bfd_bread (external_relocs, external_relocs_size, input_bfd)\n-\t  != external_relocs_size))\n+  external_relocs = _bfd_malloc_and_read (input_bfd, external_relocs_size,\n+\t\t\t\t\t  external_relocs_size);\n+  if (external_relocs == NULL && external_relocs_size != 0)\n     goto error_return;\n \n   /* Relocate the section contents.  */"
    },
    {
      "sha": "7eb717b7ffa117182cb1df948a97491e989dd3c5",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 14,
      "deletions": 31,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -298,14 +298,9 @@ bfd_elf_get_str_section (bfd *abfd, unsigned int shindex)\n       if (shstrtabsize + 1 <= 1\n \t  || shstrtabsize > bfd_get_file_size (abfd)\n \t  || bfd_seek (abfd, offset, SEEK_SET) != 0\n-\t  || (shstrtab = (bfd_byte *) bfd_alloc (abfd, shstrtabsize + 1)) == NULL)\n-\tshstrtab = NULL;\n-      else if (bfd_bread (shstrtab, shstrtabsize, abfd) != shstrtabsize)\n-\t{\n-\t  if (bfd_get_error () != bfd_error_system_call)\n-\t    bfd_set_error (bfd_error_file_truncated);\n-\t  bfd_release (abfd, shstrtab);\n-\t  shstrtab = NULL;\n+\t  || (shstrtab = _bfd_alloc_and_read (abfd, shstrtabsize + 1,\n+\t\t\t\t\t      shstrtabsize)) == NULL)\n+\t{\n \t  /* Once we've failed to read it, make sure we don't keep\n \t     trying.  Otherwise, we'll keep allocating space for\n \t     the string table over and over.  */\n@@ -675,10 +670,9 @@ setup_group (bfd *abfd, Elf_Internal_Shdr *hdr, asection *newsect)\n \t\t  shdr->contents = NULL;\n \t\t  if (_bfd_mul_overflow (shdr->sh_size,\n \t\t\t\t\t sizeof (*dest) / 4, &amt)\n-\t\t      || (shdr->contents = bfd_alloc (abfd, amt)) == NULL\n \t\t      || bfd_seek (abfd, shdr->sh_offset, SEEK_SET) != 0\n-\t\t      || (bfd_bread (shdr->contents, shdr->sh_size, abfd)\n-\t\t\t  != shdr->sh_size))\n+\t\t      || !(shdr->contents\n+\t\t\t   = _bfd_alloc_and_read (abfd, amt, shdr->sh_size)))\n \t\t    {\n \t\t      _bfd_error_handler\n \t\t\t/* xgettext:c-format */\n@@ -687,14 +681,6 @@ setup_group (bfd *abfd, Elf_Internal_Shdr *hdr, asection *newsect)\n \t\t\t abfd, (uint64_t) shdr->sh_size);\n \t\t      bfd_set_error (bfd_error_bad_value);\n \t\t      -- num_group;\n-\t\t      /* PR 17510: If the group contents are even\n-\t\t\t partially corrupt, do not allow any of the\n-\t\t\t contents to be used.  */\n-\t\t      if (shdr->contents != NULL)\n-\t\t\t{\n-\t\t\t  bfd_release (abfd, shdr->contents);\n-\t\t\t  shdr->contents = NULL;\n-\t\t\t}\n \t\t      continue;\n \t\t    }\n \n@@ -8612,12 +8598,11 @@ _bfd_elf_slurp_version_tables (bfd *abfd, bfd_boolean default_imported_symver)\n \t     abfd, (uint64_t) hdr->sh_size);\n \t  goto error_return_verref;\n \t}\n-      contents = (bfd_byte *) bfd_malloc (hdr->sh_size);\n-      if (contents == NULL)\n-\tgoto error_return_verref;\n \n-      if (bfd_seek (abfd, hdr->sh_offset, SEEK_SET) != 0\n-\t  || bfd_bread (contents, hdr->sh_size, abfd) != hdr->sh_size)\n+      if (bfd_seek (abfd, hdr->sh_offset, SEEK_SET) != 0)\n+\tgoto error_return_verref;\n+      contents = _bfd_malloc_and_read (abfd, hdr->sh_size, hdr->sh_size);\n+      if (contents == NULL)\n \tgoto error_return_verref;\n \n       if (_bfd_mul_overflow (hdr->sh_info, sizeof (Elf_Internal_Verneed), &amt))\n@@ -8747,11 +8732,10 @@ _bfd_elf_slurp_version_tables (bfd *abfd, bfd_boolean default_imported_symver)\n \t  goto error_return;\n \t}\n \n-      contents = (bfd_byte *) bfd_malloc (hdr->sh_size);\n-      if (contents == NULL)\n+      if (bfd_seek (abfd, hdr->sh_offset, SEEK_SET) != 0)\n \tgoto error_return_verdef;\n-      if (bfd_seek (abfd, hdr->sh_offset, SEEK_SET) != 0\n-\t  || bfd_bread (contents, hdr->sh_size, abfd) != hdr->sh_size)\n+      contents = _bfd_malloc_and_read (abfd, hdr->sh_size, hdr->sh_size);\n+      if (contents == NULL)\n \tgoto error_return_verdef;\n \n       BFD_ASSERT (sizeof (Elf_External_Verdef)\n@@ -11937,16 +11921,15 @@ elf_read_notes (bfd *abfd, file_ptr offset, bfd_size_type size,\n   if (bfd_seek (abfd, offset, SEEK_SET) != 0)\n     return FALSE;\n \n-  buf = (char *) bfd_malloc (size + 1);\n+  buf = (char *) _bfd_malloc_and_read (abfd, size + 1, size);\n   if (buf == NULL)\n     return FALSE;\n \n   /* PR 17512: file: ec08f814\n      0-termintate the buffer so that string searches will not overflow.  */\n   buf[size] = 0;\n \n-  if (bfd_bread (buf, size, abfd) != size\n-      || !elf_parse_notes (abfd, buf, size, offset, align))\n+  if (!elf_parse_notes (abfd, buf, size, offset, align))\n     {\n       free (buf);\n       return FALSE;"
    },
    {
      "sha": "a357f62b8c215af2dda7590d69456de3207cd416",
      "filename": "bfd/elf32-m32c.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-m32c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-m32c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32c.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1499,11 +1499,10 @@ m32c_elf_relax_section\n \t  bfd_set_error (bfd_error_file_too_big);\n \t  goto error_return;\n \t}\n-      shndx_buf = bfd_malloc (amt);\n-      if (shndx_buf == NULL)\n+      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0)\n \tgoto error_return;\n-      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n-\t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n+      shndx_buf = _bfd_malloc_and_read (abfd, amt, amt);\n+      if (shndx_buf == NULL)\n \tgoto error_return;\n       shndx_hdr->contents = shndx_buf;\n     }"
    },
    {
      "sha": "633350faec42d7a07f3972d5f971aba6cbf7ebf9",
      "filename": "bfd/elf32-rl78.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-rl78.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-rl78.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rl78.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -2129,11 +2129,10 @@ rl78_elf_relax_section\n \t  bfd_set_error (bfd_error_no_memory);\n \t  goto error_return;\n \t}\n-      shndx_buf = bfd_malloc (amt);\n-      if (shndx_buf == NULL)\n+      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0)\n \tgoto error_return;\n-      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n-\t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n+      shndx_buf = _bfd_malloc_and_read (abfd, amt, amt);\n+      if (shndx_buf == NULL)\n \tgoto error_return;\n       shndx_hdr->contents = shndx_buf;\n     }"
    },
    {
      "sha": "bd08eb47d8aa8d667b82996dc44edcccefe777a1",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -2066,11 +2066,10 @@ elf32_rx_relax_section (bfd *\t\t       abfd,\n \t  bfd_set_error (bfd_error_file_too_big);\n \t  goto error_return;\n \t}\n-      shndx_buf = bfd_malloc (amt);\n-      if (shndx_buf == NULL)\n+      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0)\n \tgoto error_return;\n-      if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n-\t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n+      shndx_buf = _bfd_malloc_and_read (abfd, amt, amt);\n+      if (shndx_buf == NULL)\n \tgoto error_return;\n       shndx_hdr->contents = shndx_buf;\n     }"
    },
    {
      "sha": "ed18202b71869baedbf7e726fbf0ee6ad5679de1",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1398,11 +1398,10 @@ elf64_alpha_read_ecoff_info (bfd *abfd, asection *section,\n \t  bfd_set_error (bfd_error_file_too_big);\t\t\t\\\n \t  goto error_return;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      debug->ptr = (type) bfd_malloc (amt);\t\t\t\t\\\n-      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n+      if (bfd_seek (abfd, symhdr->offset, SEEK_SET) != 0)\t\t\\\n \tgoto error_return;\t\t\t\t\t\t\\\n-      if (bfd_seek (abfd, (file_ptr) symhdr->offset, SEEK_SET) != 0\t\\\n-\t  || bfd_bread (debug->ptr, amt, abfd) != amt)\t\t\t\\\n+      debug->ptr = (type) _bfd_malloc_and_read (abfd, amt, amt);\t\\\n+      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n \tgoto error_return;\t\t\t\t\t\t\\\n     } while (0)\n "
    },
    {
      "sha": "413018fcf3e35b041c3a6b408935a92d61d807e9",
      "filename": "bfd/elf64-mips.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mips.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -4010,15 +4010,12 @@ mips_elf64_slurp_one_reloc_table (bfd *abfd, asection *asect,\n   int entsize;\n   bfd_boolean rela_p;\n \n-  allocated = bfd_malloc (rel_hdr->sh_size);\n+  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0)\n+    return FALSE;\n+  allocated = _bfd_malloc_and_read (abfd, rel_hdr->sh_size, rel_hdr->sh_size);\n   if (allocated == NULL)\n     return FALSE;\n \n-  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0\n-      || (bfd_bread (allocated, rel_hdr->sh_size, abfd)\n-\t  != rel_hdr->sh_size))\n-    goto error_return;\n-\n   native_relocs = allocated;\n \n   entsize = rel_hdr->sh_entsize;"
    },
    {
      "sha": "f07c06222ad6d902f15cf0c83601795decc3dba1",
      "filename": "bfd/elf64-sparc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elf64-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-sparc.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -79,13 +79,11 @@ elf64_sparc_slurp_one_reloc_table (bfd *abfd, asection *asect,\n   bfd_size_type count;\n   arelent *relents;\n \n-  allocated = bfd_malloc (rel_hdr->sh_size);\n+  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0)\n+    return FALSE;\n+  allocated = _bfd_malloc_and_read (abfd, rel_hdr->sh_size, rel_hdr->sh_size);\n   if (allocated == NULL)\n-    goto error_return;\n-\n-  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0\n-      || bfd_bread (allocated, rel_hdr->sh_size, abfd) != rel_hdr->sh_size)\n-    goto error_return;\n+    return FALSE;\n \n   native_relocs = (bfd_byte *) allocated;\n "
    },
    {
      "sha": "1b2d68ab2044aa06a9066e18d3ef2523552414ed",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1234,13 +1234,10 @@ elf_slurp_symbol_table (bfd *abfd, asymbol **symptrs, bfd_boolean dynamic)\n \t{\n \t  if (bfd_seek (abfd, verhdr->sh_offset, SEEK_SET) != 0)\n \t    goto error_return;\n-\n-\t  xverbuf = (Elf_External_Versym *) bfd_malloc (verhdr->sh_size);\n+\t  xverbuf = (Elf_External_Versym *)\n+\t    _bfd_malloc_and_read (abfd, verhdr->sh_size, verhdr->sh_size);\n \t  if (xverbuf == NULL && verhdr->sh_size != 0)\n \t    goto error_return;\n-\n-\t  if (bfd_bread (xverbuf, verhdr->sh_size, abfd) != verhdr->sh_size)\n-\t    goto error_return;\n \t}\n \n       /* Skip first symbol, which is a null dummy.  */\n@@ -1429,14 +1426,11 @@ elf_slurp_reloc_table_from_section (bfd *abfd,\n   int entsize;\n   unsigned int symcount;\n \n-  allocated = bfd_malloc (rel_hdr->sh_size);\n+  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0)\n+    return FALSE;\n+  allocated = _bfd_malloc_and_read (abfd, rel_hdr->sh_size, rel_hdr->sh_size);\n   if (allocated == NULL)\n-    goto error_return;\n-\n-  if (bfd_seek (abfd, rel_hdr->sh_offset, SEEK_SET) != 0\n-      || (bfd_bread (allocated, rel_hdr->sh_size, abfd)\n-\t  != rel_hdr->sh_size))\n-    goto error_return;\n+    return FALSE;\n \n   native_relocs = (bfd_byte *) allocated;\n "
    },
    {
      "sha": "8e7ae2a160d6705381c67a6cd9fe9e2e07f7570f",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -4332,12 +4332,12 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t  Elf_Internal_Shdr *versymhdr = &elf_tdata (abfd)->dynversym_hdr;\n \t  bfd_size_type amt = versymhdr->sh_size;\n \n-\t  extversym = (Elf_External_Versym *) bfd_malloc (amt);\n+\t  if (bfd_seek (abfd, versymhdr->sh_offset, SEEK_SET) != 0)\n+\t    goto error_free_sym;\n+\t  extversym = (Elf_External_Versym *)\n+\t    _bfd_malloc_and_read (abfd, amt, amt);\n \t  if (extversym == NULL)\n \t    goto error_free_sym;\n-\t  if (bfd_seek (abfd, versymhdr->sh_offset, SEEK_SET) != 0\n-\t      || bfd_bread (extversym, amt, abfd) != amt)\n-\t    goto error_free_vers;\n \t  extversym_end = extversym + amt / sizeof (*extversym);\n \t}\n     }\n@@ -9737,16 +9737,11 @@ elf_link_check_versioned_symbol (struct bfd_link_info *info,\n \n       /* Read in any version definitions.  */\n       versymhdr = &elf_tdata (input)->dynversym_hdr;\n-      extversym = (Elf_External_Versym *) bfd_malloc (versymhdr->sh_size);\n-      if (extversym == NULL)\n-\tgoto error_ret;\n-\n       if (bfd_seek (input, versymhdr->sh_offset, SEEK_SET) != 0\n-\t  || (bfd_bread (extversym, versymhdr->sh_size, input)\n-\t      != versymhdr->sh_size))\n+\t  || (extversym = (Elf_External_Versym *)\n+\t      _bfd_malloc_and_read (input, versymhdr->sh_size,\n+\t\t\t\t    versymhdr->sh_size)) == NULL)\n \t{\n-\t  free (extversym);\n-\terror_ret:\n \t  free (isymbuf);\n \t  return FALSE;\n \t}"
    },
    {
      "sha": "81af3ef33e5b92f90c8f2d29d239b763ce425b27",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1424,11 +1424,10 @@ _bfd_mips_elf_read_ecoff_info (bfd *abfd, asection *section,\n \t  bfd_set_error (bfd_error_file_too_big);\t\t\t\\\n \t  goto error_return;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      debug->ptr = bfd_malloc (amt);\t\t\t\t\t\\\n-      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n+      if (bfd_seek (abfd, symhdr->offset, SEEK_SET) != 0)\t\t\\\n \tgoto error_return;\t\t\t\t\t\t\\\n-      if (bfd_seek (abfd, symhdr->offset, SEEK_SET) != 0\t\t\\\n-\t  || bfd_bread (debug->ptr, amt, abfd) != amt)\t\t\t\\\n+      debug->ptr = (type) _bfd_malloc_and_read (abfd, amt, amt);\t\\\n+      if (debug->ptr == NULL)\t\t\t\t\t\t\\\n \tgoto error_return;\t\t\t\t\t\t\\\n     } while (0)\n "
    },
    {
      "sha": "a4d7cd3228b489269bd7f34efe8be97f4cf10bea",
      "filename": "bfd/i386lynx.c",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/i386lynx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/i386lynx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/i386lynx.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -411,20 +411,13 @@ NAME(lynx,slurp_reloc_table) (bfd *abfd,\n   if (!reloc_cache && count != 0)\n     return FALSE;\n \n-  relocs = bfd_alloc (abfd, reloc_size);\n+  relocs = _bfd_alloc_and_read (abfd, reloc_size, reloc_size);\n   if (!relocs && reloc_size != 0)\n     {\n       free (reloc_cache);\n       return FALSE;\n     }\n \n-  if (bfd_bread (relocs, reloc_size, abfd) != reloc_size)\n-    {\n-      bfd_release (abfd, relocs);\n-      free (reloc_cache);\n-      return FALSE;\n-    }\n-\n   if (each_size == RELOC_EXT_SIZE)\n     {\n       struct reloc_ext_external *rptr = (struct reloc_ext_external *) relocs;"
    },
    {
      "sha": "a8f9bcd47d3362d2095b7f6bbd3ac1e8eb213f6a",
      "filename": "bfd/libbfd-in.h",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/libbfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/libbfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd-in.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -903,3 +903,29 @@ extern bfd_vma _bfd_safe_read_leb128\n #define _bfd_mul_overflow(a, b, res) \\\n   ((*res) = (a), (*res) *= (b), (b) != 0 && (*res) / (b) != (a))\n #endif\n+\n+static inline bfd_byte *\n+_bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n+{\n+  bfd_byte *mem = bfd_alloc (abfd, asize);\n+  if (mem != NULL)\n+    {\n+      if (bfd_bread (mem, rsize, abfd) == rsize)\n+\treturn mem;\n+      bfd_release (abfd, mem);\n+    }\n+  return NULL;\n+}\n+\n+static inline bfd_byte *\n+_bfd_malloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n+{\n+  bfd_byte *mem = bfd_malloc (asize);\n+  if (mem != NULL)\n+    {\n+      if (bfd_bread (mem, rsize, abfd) == rsize)\n+\treturn mem;\n+      free (mem);\n+    }\n+  return NULL;\n+}"
    },
    {
      "sha": "77c66309a25ed2a1315621594a3665fa7128eace",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -908,6 +908,32 @@ extern bfd_vma _bfd_safe_read_leb128\n #define _bfd_mul_overflow(a, b, res) \\\n   ((*res) = (a), (*res) *= (b), (b) != 0 && (*res) / (b) != (a))\n #endif\n+\n+static inline bfd_byte *\n+_bfd_alloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n+{\n+  bfd_byte *mem = bfd_alloc (abfd, asize);\n+  if (mem != NULL)\n+    {\n+      if (bfd_bread (mem, rsize, abfd) == rsize)\n+\treturn mem;\n+      bfd_release (abfd, mem);\n+    }\n+  return NULL;\n+}\n+\n+static inline bfd_byte *\n+_bfd_malloc_and_read (bfd *abfd, bfd_size_type asize, bfd_size_type rsize)\n+{\n+  bfd_byte *mem = bfd_malloc (asize);\n+  if (mem != NULL)\n+    {\n+      if (bfd_bread (mem, rsize, abfd) == rsize)\n+\treturn mem;\n+      free (mem);\n+    }\n+  return NULL;\n+}\n /* Extracted from libbfd.c.  */\n bfd_boolean bfd_write_bigendian_4byte_int (bfd *, unsigned int);\n "
    },
    {
      "sha": "66b54a2fd2714b109d30ae32a42deb56a5fd9519",
      "filename": "bfd/lynx-core.c",
      "status": "modified",
      "additions": 5,
      "deletions": 16,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/lynx-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/lynx-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/lynx-core.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -126,24 +126,13 @@ lynx_core_file_p (bfd *abfd)\n \n   tcontext_size = pss.threadcnt * sizeof (core_st_t);\n \n-  /* Allocate space for the thread contexts */\n-\n-  threadp = (core_st_t *) bfd_alloc (abfd, tcontext_size);\n-  if (!threadp)\n-    goto fail;\n-\n   /* Save thread contexts */\n-\n-  if (bfd_seek (abfd, (file_ptr) pagesize, SEEK_SET) != 0)\n+  if (bfd_seek (abfd, pagesize, SEEK_SET) != 0)\n+    goto fail;\n+  threadp = (core_st_t *) _bfd_alloc_and_read (abfd, tcontext_size,\n+\t\t\t\t\t       tcontext_size);\n+  if (!threadp)\n     goto fail;\n-\n-  if (bfd_bread ((void *) threadp, tcontext_size, abfd) != tcontext_size)\n-    {\n-      /* Probably too small to be a core file */\n-      if (bfd_get_error () != bfd_error_system_call)\n-\tbfd_set_error (bfd_error_wrong_format);\n-      goto fail;\n-    }\n \n   core_signal (abfd) = threadp->currsig;\n "
    },
    {
      "sha": "887dfc76ce6a2f7a41166a0b7eb94e7851ac674d",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 15,
      "deletions": 31,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1623,15 +1623,13 @@ bfd_mach_o_canonicalize_relocs (bfd *abfd, unsigned long filepos,\n   if (native_size < count)\n     goto err;\n \n-  native_relocs =\n-    (struct mach_o_reloc_info_external *) bfd_malloc (native_size);\n+  if (bfd_seek (abfd, filepos, SEEK_SET) != 0)\n+    return -1;\n+  native_relocs = (struct mach_o_reloc_info_external *)\n+    _bfd_malloc_and_read (abfd, native_size, native_size);\n   if (native_relocs == NULL)\n     return -1;\n \n-  if (bfd_seek (abfd, filepos, SEEK_SET) != 0\n-      || bfd_bread (native_relocs, native_size, abfd) != native_size)\n-    goto err;\n-\n   for (i = 0; i < count; i++)\n     {\n       if (!(*bed->_bfd_mach_o_canonicalize_one_reloc)(abfd, &native_relocs[i],\n@@ -3902,19 +3900,13 @@ bfd_mach_o_read_symtab_strtab (bfd *abfd)\n       /* See PR 21840 for a reproducer.  */\n       if ((sym->strsize + 1) == 0)\n \treturn FALSE;\n-      sym->strtab = bfd_alloc (abfd, sym->strsize + 1);\n+      if (bfd_seek (abfd, sym->stroff, SEEK_SET) != 0)\n+\treturn FALSE;\n+      sym->strtab = (char *) _bfd_alloc_and_read (abfd, sym->strsize + 1,\n+\t\t\t\t\t\t  sym->strsize);\n       if (sym->strtab == NULL)\n \treturn FALSE;\n \n-      if (bfd_seek (abfd, sym->stroff, SEEK_SET) != 0\n-\t  || bfd_bread (sym->strtab, sym->strsize, abfd) != sym->strsize)\n-\t{\n-\t  /* PR 17512: file: 10888-1609-0.004.  */\n-\t  bfd_release (abfd, sym->strtab);\n-\t  sym->strtab = NULL;\n-\t  bfd_set_error (bfd_error_file_truncated);\n-\t  return FALSE;\n-\t}\n       /* Zero terminate the string table.  */\n       sym->strtab[sym->strsize] = 0;\n     }\n@@ -4000,15 +3992,9 @@ bfd_mach_o_ppc_flavour_string (unsigned int flavour)\n static unsigned char *\n bfd_mach_o_alloc_and_read (bfd *abfd, file_ptr filepos, size_t size)\n {\n-  unsigned char *buf;\n-\n-  buf = bfd_alloc (abfd, size);\n-  if (buf == NULL)\n+  if (bfd_seek (abfd, filepos, SEEK_SET) != 0)\n     return NULL;\n-  if (bfd_seek (abfd, filepos, SEEK_SET) != 0\n-      || bfd_bread (buf, size, abfd) != size)\n-    return NULL;\n-  return buf;\n+  return _bfd_alloc_and_read (abfd, size, size);\n }\n \n static bfd_boolean\n@@ -4100,11 +4086,9 @@ bfd_mach_o_read_prebound_dylib (bfd *abfd,\n     return FALSE;\n \n   str_len = command->len - sizeof (raw);\n-  str = bfd_alloc (abfd, str_len);\n+  str = _bfd_alloc_and_read (abfd, str_len, str_len);\n   if (str == NULL)\n     return FALSE;\n-  if (bfd_bread (str, str_len, abfd) != str_len)\n-    return FALSE;\n \n   cmd->name_offset = command->offset + nameoff;\n   cmd->nmodules = bfd_h_get_32 (abfd, raw.nmodules);\n@@ -4581,17 +4565,17 @@ bfd_mach_o_read_dyld_content (bfd *abfd, bfd_mach_o_dyld_info_command *cmd)\n   /* Read rebase content.  */\n   if (cmd->rebase_content == NULL && cmd->rebase_size != 0)\n     {\n-      cmd->rebase_content =\n-\tbfd_mach_o_alloc_and_read (abfd, cmd->rebase_off, cmd->rebase_size);\n+      cmd->rebase_content\n+\t= bfd_mach_o_alloc_and_read (abfd, cmd->rebase_off, cmd->rebase_size);\n       if (cmd->rebase_content == NULL)\n \treturn FALSE;\n     }\n \n   /* Read bind content.  */\n   if (cmd->bind_content == NULL && cmd->bind_size != 0)\n     {\n-      cmd->bind_content =\n-\tbfd_mach_o_alloc_and_read (abfd, cmd->bind_off, cmd->bind_size);\n+      cmd->bind_content\n+\t= bfd_mach_o_alloc_and_read (abfd, cmd->bind_off, cmd->bind_size);\n       if (cmd->bind_content == NULL)\n \treturn FALSE;\n     }"
    },
    {
      "sha": "35aefa34047dd9174b83f7a87c4c81a879349c03",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 7,
      "deletions": 19,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1182,17 +1182,13 @@ aout_get_external_symbols (bfd *abfd)\n       /* We allocate using malloc to make the values easy to free\n \t later on.  If we put them on the objalloc it might not be\n \t possible to free them.  */\n-      syms = bfd_malloc (count * EXTERNAL_NLIST_SIZE);\n+      if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0)\n+\treturn FALSE;\n+      syms = (struct external_nlist *)\n+\t_bfd_malloc_and_read (abfd, count * EXTERNAL_NLIST_SIZE,\n+\t\t\t      count * EXTERNAL_NLIST_SIZE);\n       if (syms == NULL && count != 0)\n \treturn FALSE;\n-\n-      if (bfd_seek (abfd, obj_sym_filepos (abfd), SEEK_SET) != 0\n-\t  || (bfd_bread (syms, exec_hdr (abfd)->a_syms, abfd)\n-\t      != exec_hdr (abfd)->a_syms))\n-\t{\n-\t  free (syms);\n-\t  return FALSE;\n-\t}\n #endif\n \n       obj_aout_external_syms (abfd) = syms;\n@@ -1829,19 +1825,11 @@ NAME (aout, slurp_reloc_table) (bfd *abfd, sec_ptr asect, asymbol **symbols)\n \n   if (bfd_seek (abfd, asect->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n-\n-  each_size = obj_reloc_entry_size (abfd);\n-\n-  relocs = bfd_malloc (reloc_size);\n+  relocs = _bfd_malloc_and_read (abfd, reloc_size, reloc_size);\n   if (relocs == NULL && reloc_size != 0)\n     return FALSE;\n \n-  if (bfd_bread (relocs, reloc_size, abfd) != reloc_size)\n-    {\n-      free (relocs);\n-      return FALSE;\n-    }\n-\n+  each_size = obj_reloc_entry_size (abfd);\n   count = reloc_size / each_size;\n \n   /* Count the number of NON-ZERO relocs, this is the count we want.  */"
    },
    {
      "sha": "b0f6c2d2a7cb81747127a222070adb4928b0b7ba",
      "filename": "bfd/pef.c",
      "status": "modified",
      "additions": 17,
      "deletions": 23,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/pef.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/pef.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pef.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -446,14 +446,15 @@ bfd_pef_print_loader_section (bfd *abfd, FILE *file)\n     return -1;\n \n   loaderlen = loadersec->size;\n-  loaderbuf = bfd_malloc (loaderlen);\n+  if (loaderlen < 56)\n+    return -1;\n+  if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) != 0)\n+    return -1;\n+  loaderbuf = _bfd_malloc_and_read (abfd, loaderlen, loaderlen);\n   if (loaderbuf == NULL)\n     return -1;\n \n-  if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) < 0\n-      || bfd_bread ((void *) loaderbuf, loaderlen, abfd) != loaderlen\n-      || loaderlen < 56\n-      || bfd_pef_parse_loader_header (abfd, loaderbuf, 56, &header) < 0)\n+  if (bfd_pef_parse_loader_header (abfd, loaderbuf, 56, &header) < 0)\n     {\n       free (loaderbuf);\n       return -1;\n@@ -479,17 +480,14 @@ bfd_pef_scan_start_address (bfd *abfd)\n     goto end;\n \n   loaderlen = loadersec->size;\n-  loaderbuf = bfd_malloc (loaderlen);\n-  if (loaderbuf == NULL)\n-    goto end;\n-\n-  if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) < 0)\n+  if (loaderlen < 56)\n     goto error;\n-  if (bfd_bread ((void *) loaderbuf, loaderlen, abfd) != loaderlen)\n+  if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) != 0)\n     goto error;\n-\n-  if (loaderlen < 56)\n+  loaderbuf = _bfd_malloc_and_read (abfd, loaderlen, loaderlen);\n+  if (loaderbuf == NULL)\n     goto error;\n+\n   ret = bfd_pef_parse_loader_header (abfd, loaderbuf, 56, &header);\n   if (ret < 0)\n     goto error;\n@@ -903,25 +901,21 @@ bfd_pef_parse_symbols (bfd *abfd, asymbol **csym)\n   if (codesec != NULL)\n     {\n       codelen = codesec->size;\n-      codebuf = bfd_malloc (codelen);\n-      if (codebuf == NULL)\n-\tgoto end;\n-      if (bfd_seek (abfd, codesec->filepos, SEEK_SET) < 0)\n+      if (bfd_seek (abfd, codesec->filepos, SEEK_SET) != 0)\n \tgoto end;\n-      if (bfd_bread ((void *) codebuf, codelen, abfd) != codelen)\n+      codebuf = _bfd_malloc_and_read (abfd, codelen, codelen);\n+      if (codebuf == NULL)\n \tgoto end;\n     }\n \n   loadersec = bfd_get_section_by_name (abfd, \"loader\");\n   if (loadersec != NULL)\n     {\n       loaderlen = loadersec->size;\n-      loaderbuf = bfd_malloc (loaderlen);\n-      if (loaderbuf == NULL)\n+      if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) != 0)\n \tgoto end;\n-      if (bfd_seek (abfd, loadersec->filepos, SEEK_SET) < 0)\n-\tgoto end;\n-      if (bfd_bread ((void *) loaderbuf, loaderlen, abfd) != loaderlen)\n+      loaderbuf = _bfd_malloc_and_read (abfd, loaderlen, loaderlen);\n+      if (loaderbuf == NULL)\n \tgoto end;\n     }\n "
    },
    {
      "sha": "f569ccf389321c969ea1a01bc9a417c39c97c8b4",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1273,16 +1273,10 @@ pe_ILF_object_p (bfd * abfd)\n   /* ptr += 2; */\n \n   /* Now read in the two strings that follow.  */\n-  ptr = (bfd_byte *) bfd_alloc (abfd, size);\n+  ptr = (bfd_byte *) _bfd_alloc_and_read (abfd, size, size);\n   if (ptr == NULL)\n     return NULL;\n \n-  if (bfd_bread (ptr, size, abfd) != size)\n-    {\n-      bfd_release (abfd, ptr);\n-      return NULL;\n-    }\n-\n   symbol_name = (char *) ptr;\n   /* See PR 20905 for an example of where the strnlen is necessary.  */\n   source_dll  = symbol_name + strnlen (symbol_name, size - 1) + 1;\n@@ -1494,12 +1488,9 @@ pe_bfd_object_p (bfd * abfd)\n       if (amt < sizeof (PEAOUTHDR))\n \tamt = sizeof (PEAOUTHDR);\n \n-      opthdr = bfd_alloc (abfd, amt);\n+      opthdr = _bfd_alloc_and_read (abfd, amt, opt_hdr_size);\n       if (opthdr == NULL)\n \treturn NULL;\n-      if (bfd_bread (opthdr, opt_hdr_size, abfd)\n-\t  != (bfd_size_type) opt_hdr_size)\n-\treturn NULL;\n       if (amt > opt_hdr_size)\n \tmemset (opthdr + opt_hdr_size, 0, amt - opt_hdr_size);\n "
    },
    {
      "sha": "9f37b10f96c4efd4c4931bdeb7ee9ce3e67c0dbd",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 24,
      "deletions": 49,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -2088,14 +2088,11 @@ setup_sections (bfd *abfd,\n       bfd_set_error (bfd_error_no_memory);\n       goto error_return;\n     }\n-  space_strings = bfd_malloc (amt + 1);\n-  if (space_strings == NULL)\n-    goto error_return;\n-\n   if (bfd_seek (abfd, current_offset + file_hdr->space_strings_location,\n \t\tSEEK_SET) != 0)\n     goto error_return;\n-  if (bfd_bread (space_strings, amt, abfd) != amt)\n+  space_strings = (char *) _bfd_malloc_and_read (abfd, amt + 1, amt);\n+  if (space_strings == NULL)\n     goto error_return;\n   /* Make sure that the string table is NUL terminated.  */\n   space_strings[amt] = 0;\n@@ -4578,15 +4575,11 @@ som_slurp_string_table (bfd *abfd)\n     }\n \n   /* Allocate and read in the string table.  */\n-  amt = obj_som_stringtab_size (abfd);\n-  stringtab = bfd_zmalloc (amt);\n-  if (stringtab == NULL)\n-    return FALSE;\n-\n   if (bfd_seek (abfd, obj_som_str_filepos (abfd), SEEK_SET) != 0)\n     return FALSE;\n-\n-  if (bfd_bread (stringtab, amt, abfd) != amt)\n+  amt = obj_som_stringtab_size (abfd);\n+  stringtab = (char *) _bfd_malloc_and_read (abfd, amt, amt);\n+  if (stringtab == NULL)\n     return FALSE;\n \n   /* Save our results and return success.  */\n@@ -4681,12 +4674,11 @@ som_slurp_symbol_table (bfd *abfd)\n       bfd_set_error (bfd_error_file_too_big);\n       goto error_return;\n     }\n-  buf = bfd_malloc (amt);\n-  if (buf == NULL)\n-    goto error_return;\n   if (bfd_seek (abfd, obj_som_sym_filepos (abfd), SEEK_SET) != 0)\n     goto error_return;\n-  if (bfd_bread (buf, amt, abfd) != amt)\n+  buf = (struct som_external_symbol_dictionary_record *)\n+    _bfd_malloc_and_read (abfd, amt, amt);\n+  if (buf == NULL)\n     goto error_return;\n \n   if (_bfd_mul_overflow (symbol_count, sizeof (som_symbol_type), &amt))\n@@ -5297,17 +5289,13 @@ som_slurp_reloc_table (bfd *abfd,\n      parsed.  We must do so now to know how many relocations exist.  */\n   if (section->reloc_count == (unsigned) -1)\n     {\n-      amt = fixup_stream_size;\n-      external_relocs = bfd_malloc (amt);\n-      if (external_relocs == NULL)\n-\treturn FALSE;\n       /* Read in the external forms.  */\n-      if (bfd_seek (abfd,\n-\t\t    obj_som_reloc_filepos (abfd) + section->rel_filepos,\n-\t\t    SEEK_SET)\n-\t  != 0)\n+      if (bfd_seek (abfd, obj_som_reloc_filepos (abfd) + section->rel_filepos,\n+\t\t    SEEK_SET) != 0)\n \treturn FALSE;\n-      if (bfd_bread (external_relocs, amt, abfd) != amt)\n+      amt = fixup_stream_size;\n+      external_relocs = _bfd_malloc_and_read (abfd, amt, amt);\n+      if (external_relocs == NULL)\n \treturn FALSE;\n \n       /* Let callers know how many relocations found.\n@@ -5921,23 +5909,20 @@ som_bfd_count_ar_symbols (bfd *abfd,\n \n   lst_filepos = bfd_tell (abfd) - sizeof (struct som_external_lst_header);\n \n+  /* Read in the hash table.  The hash table is an array of 32-bit\n+     file offsets which point to the hash chains.  */\n   if (_bfd_mul_overflow (lst_header->hash_size, 4, &amt))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return FALSE;\n     }\n-  hash_table = bfd_malloc (amt);\n+  hash_table = _bfd_malloc_and_read (abfd, amt, amt);\n   if (hash_table == NULL && lst_header->hash_size != 0)\n     goto error_return;\n \n   /* Don't forget to initialize the counter!  */\n   *count = 0;\n \n-  /* Read in the hash table.  The hash table is an array of 32-bit\n-     file offsets which point to the hash chains.  */\n-  if (bfd_bread ((void *) hash_table, amt, abfd) != amt)\n-    goto error_return;\n-\n   /* Walk each chain counting the number of symbols found on that particular\n      chain.  */\n   for (i = 0; i < lst_header->hash_size; i++)\n@@ -6016,20 +6001,18 @@ som_bfd_fill_in_ar_symbols (bfd *abfd,\n   unsigned int string_loc;\n \n   lst_filepos = bfd_tell (abfd) - sizeof (struct som_external_lst_header);\n+\n+  /* Read in the hash table.  The has table is an array of 32bit file offsets\n+     which point to the hash chains.  */\n   if (_bfd_mul_overflow (lst_header->hash_size, 4, &amt))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return FALSE;\n     }\n-  hash_table = bfd_malloc (amt);\n+  hash_table = _bfd_malloc_and_read (abfd, amt, amt);\n   if (hash_table == NULL && lst_header->hash_size != 0)\n     goto error_return;\n \n-  /* Read in the hash table.  The has table is an array of 32bit file offsets\n-     which point to the hash chains.  */\n-  if (bfd_bread ((void *) hash_table, amt, abfd) != amt)\n-    goto error_return;\n-\n   /* Seek to and read in the SOM dictionary.  We will need this to fill\n      in the carsym's filepos field.  */\n   if (bfd_seek (abfd, lst_filepos + lst_header->dir_loc, SEEK_SET) != 0)\n@@ -6041,13 +6024,11 @@ som_bfd_fill_in_ar_symbols (bfd *abfd,\n       bfd_set_error (bfd_error_file_too_big);\n       goto error_return;\n     }\n-  som_dict = bfd_malloc (amt);\n+  som_dict = (struct som_external_som_entry *)\n+    _bfd_malloc_and_read (abfd, amt, amt);\n   if (som_dict == NULL && lst_header->module_count != 0)\n     goto error_return;\n \n-  if (bfd_bread ((void *) som_dict, amt, abfd) != amt)\n-    goto error_return;\n-\n   string_loc = lst_header->string_loc;\n \n   /* Walk each chain filling in the carsyms as we go along.  */\n@@ -6094,12 +6075,9 @@ som_bfd_fill_in_ar_symbols (bfd *abfd,\n \t  bfd_set_error (bfd_error_no_memory);\n \t  goto error_return;\n \t}\n-      name = bfd_zalloc (abfd, (bfd_size_type) len + 1);\n+      name = (char *) _bfd_alloc_and_read (abfd, len + 1, len);\n       if (!name)\n \tgoto error_return;\n-      if (bfd_bread (name, (bfd_size_type) len, abfd) != len)\n-\tgoto error_return;\n-\n       name[len] = 0;\n       set->name = name;\n \n@@ -6148,12 +6126,9 @@ som_bfd_fill_in_ar_symbols (bfd *abfd,\n \t      bfd_set_error (bfd_error_no_memory);\n \t      goto error_return;\n \t    }\n-\t  name = bfd_zalloc (abfd, (bfd_size_type) len + 1);\n+\t  name = (char *) _bfd_alloc_and_read (abfd, len + 1, len);\n \t  if (!name)\n \t    goto error_return;\n-\n-\t  if (bfd_bread (name, (bfd_size_type) len, abfd) != len)\n-\t    goto error_return;\n \t  name[len] = 0;\n \t  set->name = name;\n "
    },
    {
      "sha": "5be475a53f30cc3521f1f4913cbbf02db0475d36",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -4822,10 +4822,10 @@ module_find_nearest_line (bfd *abfd, struct module *module, bfd_vma addr,\n     {\n       unsigned int size = module->size;\n       unsigned int modbeg = PRIV (dst_section)->filepos + module->modbeg;\n-      unsigned char *buffer = (unsigned char *) bfd_malloc (module->size);\n+      unsigned char *buffer;\n \n       if (bfd_seek (abfd, modbeg, SEEK_SET) != 0\n-\t  || bfd_bread (buffer, size, abfd) != size)\n+\t  || (buffer = _bfd_malloc_and_read (abfd, size, size)) == NULL)\n \t{\n \t  bfd_set_error (bfd_error_no_debug_section);\n \t  return FALSE;\n@@ -7149,8 +7149,8 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n       dst_size -= len;\n       off += len;\n       len -= sizeof (dsth);\n-      buf = bfd_malloc (len);\n-      if (bfd_bread (buf, len, abfd) != len)\n+      buf = _bfd_malloc_and_read (abfd, len, len);\n+      if (buf == NULL)\n \t{\n \t  fprintf (file, _(\"cannot read DST symbol\\n\"));\n \t  return;\n@@ -8065,14 +8065,12 @@ evax_bfd_print_image (bfd *abfd, FILE *file)\n       unsigned int codeadroff;\n       unsigned int lpfixoff;\n       unsigned int chgprtoff;\n+      file_ptr f_off = (file_ptr) (eiaf_vbn - 1) * VMS_BLOCK_SIZE;\n \n-      buf = bfd_malloc (eiaf_size);\n-\n-      if (bfd_seek (abfd, (file_ptr) (eiaf_vbn - 1) * VMS_BLOCK_SIZE, SEEK_SET)\n-\t  || bfd_bread (buf, eiaf_size, abfd) != eiaf_size)\n+      if (bfd_seek (abfd, f_off, SEEK_SET) != 0\n+\t  || (buf = _bfd_malloc_and_read (abfd, eiaf_size, eiaf_size)) == NULL)\n \t{\n \t  fprintf (file, _(\"cannot read EIHA\\n\"));\n-\t  free (buf);\n \t  return;\n \t}\n       eiaf = (struct vms_eiaf *)buf;"
    },
    {
      "sha": "6ae1a7bafbd4ff82b10ac8332a0ddbeace53352e",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -568,14 +568,9 @@ _bfd_vms_lib_archive_p (bfd *abfd, enum vms_lib_kind kind)\n \t  != sizeof (buf_reclen))\n \tgoto err;\n       reclen = bfd_getl32 (buf_reclen);\n-      buf = bfd_malloc (reclen);\n+      buf = _bfd_malloc_and_read (abfd, reclen, reclen);\n       if (buf == NULL)\n \tgoto err;\n-      if (bfd_bread (buf, reclen, abfd) != reclen)\n-\t{\n-\t  free (buf);\n-\t  goto err;\n-\t}\n       map = (struct vms_dcxmap *)buf;\n       tdata->nbr_dcxsbm = bfd_getl16 (map->nsubs);\n       sbm_off = bfd_getl16 (map->sub0);"
    },
    {
      "sha": "fa8648b9acd7d2f7fcf767484b402a82dc1bbd89",
      "filename": "bfd/wasm-module.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/wasm-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/wasm-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/wasm-module.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -452,12 +452,10 @@ wasm_scan (bfd *abfd)\n \n       if (bfdsec->size != 0)\n \t{\n-\t  bfdsec->contents = bfd_alloc (abfd, bfdsec->size);\n+\t  bfdsec->contents = _bfd_alloc_and_read (abfd, bfdsec->size,\n+\t\t\t\t\t\t  bfdsec->size);\n \t  if (!bfdsec->contents)\n \t    goto error_return;\n-\n-\t  if (bfd_bread (bfdsec->contents, bfdsec->size, abfd) != bfdsec->size)\n-\t    goto error_return;\n \t}\n \n       vma += bfdsec->size;"
    },
    {
      "sha": "2560d2ca427ae5051868fb554b3b64502dd5c575",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -1317,14 +1317,17 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \t{\n \t  bfd_byte *linenos;\n \n-\t  amt = linesz * o->lineno_count;\n-\t  linenos = bfd_malloc (amt);\n+\t  if (bfd_seek (abfd, o->line_filepos, SEEK_SET) != 0)\n+\t    goto error_return;\n+\t  if (_bfd_mul_overflow (linesz, o->lineno_count, &amt))\n+\t    {\n+\t      bfd_set_error (bfd_error_file_too_big);\n+\t      goto error_return;\n+\t    }\n+\t  linenos = _bfd_malloc_and_read (abfd, amt, amt);\n \t  if (linenos == NULL)\n \t    goto error_return;\n \t  reloc_info[o->target_index].linenos = linenos;\n-\t  if (bfd_seek (abfd, o->line_filepos, SEEK_SET) != 0\n-\t      || bfd_bread (linenos, amt, abfd) != amt)\n-\t    goto error_return;\n \t}\n     }\n "
    },
    {
      "sha": "3071a9de3f7e2e876f6450b856f683235fe027a6",
      "filename": "bfd/xsym.c",
      "status": "modified",
      "additions": 6,
      "deletions": 29,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bb3687ba8720558082d1575823868286d7916b5/bfd/xsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bb3687ba8720558082d1575823868286d7916b5/bfd/xsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xsym.c?ref=2bb3687ba8720558082d1575823868286d7916b5",
      "patch": "@@ -127,24 +127,12 @@ bfd_sym_valid (bfd *abfd)\n unsigned char *\n bfd_sym_read_name_table (bfd *abfd, bfd_sym_header_block *dshb)\n {\n-  unsigned char *rstr;\n-  long ret;\n   size_t table_size = dshb->dshb_nte.dti_page_count * dshb->dshb_page_size;\n   size_t table_offset = dshb->dshb_nte.dti_first_page * dshb->dshb_page_size;\n \n-  rstr = bfd_alloc (abfd, table_size);\n-  if (rstr == NULL)\n-    return rstr;\n-\n-  bfd_seek (abfd, table_offset, SEEK_SET);\n-  ret = bfd_bread (rstr, table_size, abfd);\n-  if (ret < 0 || (unsigned long) ret != table_size)\n-    {\n-      bfd_release (abfd, rstr);\n-      return NULL;\n-    }\n-\n-  return rstr;\n+  if (bfd_seek (abfd, table_offset, SEEK_SET) != 0)\n+    return FALSE;\n+  return _bfd_alloc_and_read (abfd, table_size, table_size);\n }\n \n void\n@@ -1808,22 +1796,11 @@ bfd_sym_print_type_information_table_entry (bfd *abfd,\n \n   fprintf (f, \"\\n            \");\n \n-  buf = malloc (entry->physical_size);\n-  if (buf == NULL)\n-    {\n-      fprintf (f, \"[ERROR]\\n\");\n-      return;\n-    }\n-  if (bfd_seek (abfd, entry->offset, SEEK_SET) < 0)\n-    {\n-      fprintf (f, \"[ERROR]\\n\");\n-      free (buf);\n-      return;\n-    }\n-  if (bfd_bread (buf, entry->physical_size, abfd) != entry->physical_size)\n+  if (bfd_seek (abfd, entry->offset, SEEK_SET) != 0\n+      || (buf = _bfd_malloc_and_read (abfd, entry->physical_size,\n+\t\t\t\t      entry->physical_size)) == NULL)\n     {\n       fprintf (f, \"[ERROR]\\n\");\n-      free (buf);\n       return;\n     }\n "
    }
  ]
}