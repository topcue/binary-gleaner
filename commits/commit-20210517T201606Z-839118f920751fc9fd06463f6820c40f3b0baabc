{
  "sha": "839118f920751fc9fd06463f6820c40f3b0baabc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODM5MTE4ZjkyMDc1MWZjOWZkMDY0NjNmNjgyMGM0MGYzYjBiYWFiYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-17T20:16:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-17T20:16:06Z"
    },
    "message": "Move some dwarf2_cu methods to new file\n\nThis moves some of the dwarf2_cu methods to a new file, dwarf2/cu.c.\n\ngdb/ChangeLog\n2021-05-17  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_cu::addr_sized_int_type)\n\t(dwarf2_cu::start_symtab, dwarf2_cu::addr_type)\n\t(dwarf2_cu::dwarf2_cu): Move to cu.c.\n\t* dwarf2/cu.c: New file.\n\t* Makefile.in (COMMON_SFILES): Add dwarf2/cu.c.",
    "tree": {
      "sha": "70ff71d85b99f6c25db349a47ba400e463cb43e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/70ff71d85b99f6c25db349a47ba400e463cb43e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/839118f920751fc9fd06463f6820c40f3b0baabc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/839118f920751fc9fd06463f6820c40f3b0baabc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/839118f920751fc9fd06463f6820c40f3b0baabc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/839118f920751fc9fd06463f6820c40f3b0baabc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ae78a440e4e2ea7ecda9b33a6b3ec63bbcd3c65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ae78a440e4e2ea7ecda9b33a6b3ec63bbcd3c65",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ae78a440e4e2ea7ecda9b33a6b3ec63bbcd3c65"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 98,
    "deletions": 67
  },
  "files": [
    {
      "sha": "9ff54451340e5cb788ad3ffffc8f63a39ee005c8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=839118f920751fc9fd06463f6820c40f3b0baabc",
      "patch": "@@ -1,3 +1,11 @@\n+2021-05-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_cu::addr_sized_int_type)\n+\t(dwarf2_cu::start_symtab, dwarf2_cu::addr_type)\n+\t(dwarf2_cu::dwarf2_cu): Move to cu.c.\n+\t* dwarf2/cu.c: New file.\n+\t* Makefile.in (COMMON_SFILES): Add dwarf2/cu.c.\n+\n 2021-05-17  Tom Tromey  <tom@tromey.com>\n \n \t* Makefile.in (HFILES_NO_SRCDIR): Add dwarf2/cu.h."
    },
    {
      "sha": "1f37fe43024b3327351355fbd4401b2af3504420",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=839118f920751fc9fd06463f6820c40f3b0baabc",
      "patch": "@@ -1026,6 +1026,7 @@ COMMON_SFILES = \\\n \tdwarf2/abbrev.c \\\n \tdwarf2/attribute.c \\\n \tdwarf2/comp-unit.c \\\n+\tdwarf2/cu.c \\\n \tdwarf2/dwz.c \\\n \tdwarf2/expr.c \\\n \tdwarf2/frame-tailcall.c \\"
    },
    {
      "sha": "4f13f4f96776aa0b3507faed86bd32d89df2b0a4",
      "filename": "gdb/dwarf2/cu.c",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/dwarf2/cu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/dwarf2/cu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/cu.c?ref=839118f920751fc9fd06463f6820c40f3b0baabc",
      "patch": "@@ -0,0 +1,89 @@\n+/* DWARF CU data structure\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"dwarf2/cu.h\"\n+#include \"dwarf2/read.h\"\n+\n+/* Initialize dwarf2_cu to read PER_CU, in the context of PER_OBJFILE.  */\n+\n+dwarf2_cu::dwarf2_cu (dwarf2_per_cu_data *per_cu,\n+\t\t      dwarf2_per_objfile *per_objfile)\n+  : per_cu (per_cu),\n+    per_objfile (per_objfile),\n+    mark (false),\n+    has_loclist (false),\n+    checked_producer (false),\n+    producer_is_gxx_lt_4_6 (false),\n+    producer_is_gcc_lt_4_3 (false),\n+    producer_is_icc (false),\n+    producer_is_icc_lt_14 (false),\n+    producer_is_codewarrior (false),\n+    processing_has_namespace_info (false)\n+{\n+}\n+\n+/* See cu.h.  */\n+\n+struct type *\n+dwarf2_cu::addr_sized_int_type (bool unsigned_p) const\n+{\n+  int addr_size = this->per_cu->addr_size ();\n+  return this->per_objfile->int_type (addr_size, unsigned_p);\n+}\n+\n+/* Start a symtab for DWARF.  NAME, COMP_DIR, LOW_PC are passed to the\n+   buildsym_compunit constructor.  */\n+\n+struct compunit_symtab *\n+dwarf2_cu::start_symtab (const char *name, const char *comp_dir,\n+\t\t\t CORE_ADDR low_pc)\n+{\n+  gdb_assert (m_builder == nullptr);\n+\n+  m_builder.reset (new struct buildsym_compunit\n+\t\t   (this->per_objfile->objfile,\n+\t\t    name, comp_dir, language, low_pc));\n+\n+  list_in_scope = get_builder ()->get_file_symbols ();\n+\n+  get_builder ()->record_debugformat (\"DWARF 2\");\n+  get_builder ()->record_producer (producer);\n+\n+  processing_has_namespace_info = false;\n+\n+  return get_builder ()->get_compunit_symtab ();\n+}\n+\n+/* See read.h.  */\n+\n+struct type *\n+dwarf2_cu::addr_type () const\n+{\n+  struct objfile *objfile = this->per_objfile->objfile;\n+  struct type *void_type = objfile_type (objfile)->builtin_void;\n+  struct type *addr_type = lookup_pointer_type (void_type);\n+  int addr_size = this->per_cu->addr_size ();\n+\n+  if (TYPE_LENGTH (addr_type) == addr_size)\n+    return addr_type;\n+\n+  addr_type = addr_sized_int_type (addr_type->is_unsigned ());\n+  return addr_type;\n+}"
    },
    {
      "sha": "0faa682f7385a16c0a4bfda4bc7c758e638ee8d0",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 67,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/839118f920751fc9fd06463f6820c40f3b0baabc/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=839118f920751fc9fd06463f6820c40f3b0baabc",
      "patch": "@@ -18341,15 +18341,6 @@ dwarf2_per_objfile::int_type (int size_in_bytes, bool unsigned_p) const\n   gdb_assert_not_reached (\"unable to find suitable integer type\");\n }\n \n-/* See read.h.  */\n-\n-struct type *\n-dwarf2_cu::addr_sized_int_type (bool unsigned_p) const\n-{\n-  int addr_size = this->per_cu->addr_size ();\n-  return this->per_objfile->int_type (addr_size, unsigned_p);\n-}\n-\n /* Read the DW_AT_type attribute for a sub-range.  If this attribute is not\n    present (which is valid) then compute the default type based on the\n    compilation units address size.  */\n@@ -21446,29 +21437,6 @@ dwarf2_start_subfile (struct dwarf2_cu *cu, const char *filename,\n   cu->get_builder ()->start_subfile (filename);\n }\n \n-/* Start a symtab for DWARF.  NAME, COMP_DIR, LOW_PC are passed to the\n-   buildsym_compunit constructor.  */\n-\n-struct compunit_symtab *\n-dwarf2_cu::start_symtab (const char *name, const char *comp_dir,\n-\t\t\t CORE_ADDR low_pc)\n-{\n-  gdb_assert (m_builder == nullptr);\n-\n-  m_builder.reset (new struct buildsym_compunit\n-\t\t   (this->per_objfile->objfile,\n-\t\t    name, comp_dir, language, low_pc));\n-\n-  list_in_scope = get_builder ()->get_file_symbols ();\n-\n-  get_builder ()->record_debugformat (\"DWARF 2\");\n-  get_builder ()->record_producer (producer);\n-\n-  processing_has_namespace_info = false;\n-\n-  return get_builder ()->get_compunit_symtab ();\n-}\n-\n static void\n var_decode_location (struct attribute *attr, struct symbol *sym,\n \t\t     struct dwarf2_cu *cu)\n@@ -24319,23 +24287,6 @@ dwarf2_per_cu_data::ref_addr_size () const\n     return header->offset_size;\n }\n \n-/* See read.h.  */\n-\n-struct type *\n-dwarf2_cu::addr_type () const\n-{\n-  struct objfile *objfile = this->per_objfile->objfile;\n-  struct type *void_type = objfile_type (objfile)->builtin_void;\n-  struct type *addr_type = lookup_pointer_type (void_type);\n-  int addr_size = this->per_cu->addr_size ();\n-\n-  if (TYPE_LENGTH (addr_type) == addr_size)\n-    return addr_type;\n-\n-  addr_type = addr_sized_int_type (addr_type->is_unsigned ());\n-  return addr_type;\n-}\n-\n /* A helper function for dwarf2_find_containing_comp_unit that returns\n    the index of the result, and that searches a vector.  It will\n    return a result even if the offset in question does not actually\n@@ -24459,24 +24410,6 @@ run_test ()\n \n #endif /* GDB_SELF_TEST */\n \n-/* Initialize dwarf2_cu to read PER_CU, in the context of PER_OBJFILE.  */\n-\n-dwarf2_cu::dwarf2_cu (dwarf2_per_cu_data *per_cu,\n-\t\t      dwarf2_per_objfile *per_objfile)\n-  : per_cu (per_cu),\n-    per_objfile (per_objfile),\n-    mark (false),\n-    has_loclist (false),\n-    checked_producer (false),\n-    producer_is_gxx_lt_4_6 (false),\n-    producer_is_gcc_lt_4_3 (false),\n-    producer_is_icc (false),\n-    producer_is_icc_lt_14 (false),\n-    producer_is_codewarrior (false),\n-    processing_has_namespace_info (false)\n-{\n-}\n-\n /* Initialize basic fields of dwarf_cu CU according to DIE COMP_UNIT_DIE.  */\n \n static void"
    }
  ]
}