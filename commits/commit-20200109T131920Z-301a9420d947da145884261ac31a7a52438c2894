{
  "sha": "301a9420d947da145884261ac31a7a52438c2894",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzAxYTk0MjBkOTQ3ZGExNDU4ODQyNjFhYzMxYTdhNTI0MzhjMjg5NA==",
  "commit": {
    "author": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2020-01-09T13:19:20Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-01-09T13:19:20Z"
    },
    "message": "Add support for debuginfod to the binutils (disable by default, enabled via a configure time option).\n\ndebuginfod is a lightweight web service that indexes ELF/DWARF\ndebugging resources by build-id and serves them over HTTP. This patch\nenables objdump and readelf to query debuginfod servers when they are\notherwise not able to find separate debug files. Binutils can be built\nwith debuginfod using the --with-debuginfod configure option. This\nrequires that libdebuginfod be installed and found at configure time.\ndebuginfod is packaged with elfutils, starting with version 0.178. For\nmore information see https://sourceware.org/elfutils/.\n\ntoplevel* config/debuginfod.m4: New file. Add macro AC_DEBUGINFOD. Adds\n        new configure option --with-debuginfod.\n        * configure: Regenerate.\n        * configure.ac: Call AC_DEBUGINFOD.\n\nbinutils* Makefile.am (readelf_LDADD, objdump_LDADD): Add libdebuginfod.\n        * Makefile.in: Regenerate.\n        * NEWS: Update.\n        * config.in: Regenerate.\n        * configure: Regenerate.\n        * configure.ac: Call AC_DEBUGINFOD.\n        * doc/Makefile.in: Regenerate.\n        * doc/binutils.texi: Add section on using binutils\n        with debuginfod.\n        * dwarf.c (debuginfod_fetch_separate_debug_info): New function.\n        Query debuginfod servers for the target debug file.\n        (load_separate_debug_info): Call\n        debuginfod_fetch_separate_debug_info if configured with\n        debuginfod.\n        (load_separate_debug_files): Add file argument to\n        load_separate_debug_info calls.\n        * dwarf.h (get_build_id): Add declaration.\n        * objdump.c (get_build_id): New function. Get build-id of file.\n        * readelf.c (get_build_id): Likewise.\n        * testsuite/binutils-all/debuginfod.exp: New tests.\n        * testsuite/binutils-all/linkdebug.s: Add .note.gnu.build-id\n        section.",
    "tree": {
      "sha": "fb30bb433561f4887f14f356b4802c400939ad7a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb30bb433561f4887f14f356b4802c400939ad7a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/301a9420d947da145884261ac31a7a52438c2894",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/301a9420d947da145884261ac31a7a52438c2894",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/301a9420d947da145884261ac31a7a52438c2894",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/301a9420d947da145884261ac31a7a52438c2894/comments",
  "author": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40c75bc8b07abc5d5774ea1c439b69c96e7fd485",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40c75bc8b07abc5d5774ea1c439b69c96e7fd485",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40c75bc8b07abc5d5774ea1c439b69c96e7fd485"
    }
  ],
  "stats": {
    "total": 708,
    "additions": 647,
    "deletions": 61
  },
  "files": [
    {
      "sha": "f1f3907b0bf9820a6603ee78c819ff2a235c4a3e",
      "filename": "binutils/Makefile.am",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.am?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -53,6 +53,8 @@ AM_CFLAGS = $(WARN_CFLAGS) $(ZLIBINC)\n AM_CFLAGS_FOR_BUILD = $(WARN_CFLAGS_FOR_BUILD) $(ZLIBINC)\n LIBICONV = @LIBICONV@\n \n+LIBDEBUGINFOD = @LIBDEBUGINFOD@\n+\n # these two are almost the same program\n AR_PROG=ar\n RANLIB_PROG=ranlib\n@@ -245,7 +247,7 @@ objcopy_SOURCES = objcopy.c not-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n strings_SOURCES = strings.c $(BULIBS)\n \n readelf_SOURCES = readelf.c version.c unwind-ia64.c dwarf.c $(ELFLIBS)\n-readelf_LDADD   = $(LIBINTL) $(LIBCTF_NOBFD) $(LIBIBERTY) $(ZLIB)\n+readelf_LDADD   = $(LIBINTL) $(LIBCTF_NOBFD) $(LIBIBERTY) $(ZLIB) $(LIBDEBUGINFOD)\n \n elfedit_SOURCES = elfedit.c version.c $(ELFLIBS)\n elfedit_LDADD = $(LIBINTL) $(LIBIBERTY)\n@@ -256,7 +258,7 @@ nm_new_SOURCES = nm.c $(BULIBS)\n \n objdump_SOURCES = objdump.c dwarf.c prdbg.c $(DEBUG_SRCS) $(BULIBS) $(ELFLIBS)\n EXTRA_objdump_SOURCES = od-xcoff.c\n-objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL) $(LIBDEBUGINFOD)\n \n objdump.@OBJEXT@:objdump.c\n if am__fastdepCC"
    },
    {
      "sha": "39f08563f960751347d17ae7b86e06eca1c17e45",
      "filename": "binutils/Makefile.in",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/Makefile.in?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -138,7 +138,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../config/zlib.m4 $(top_srcdir)/../libtool.m4 \\\n \t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n \t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/../bfd/version.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../bfd/version.m4 \\\n+\t$(top_srcdir)/../config/debuginfod.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n DIST_COMMON = $(srcdir)/Makefile.am $(top_srcdir)/configure \\\n@@ -449,6 +451,7 @@ LDFLAGS = @LDFLAGS@\n LEX = `if [ -f ../flex/flex ]; then echo ../flex/flex; else echo @LEX@; fi`\n LEXLIB = @LEXLIB@\n LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@\n+LIBDEBUGINFOD = @LIBDEBUGINFOD@\n LIBICONV = @LIBICONV@\n LIBINTL = @LIBINTL@\n LIBINTL_DEP = @LIBINTL_DEP@\n@@ -706,14 +709,14 @@ size_SOURCES = size.c $(BULIBS)\n objcopy_SOURCES = objcopy.c not-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n strings_SOURCES = strings.c $(BULIBS)\n readelf_SOURCES = readelf.c version.c unwind-ia64.c dwarf.c $(ELFLIBS)\n-readelf_LDADD = $(LIBINTL) $(LIBCTF_NOBFD) $(LIBIBERTY) $(ZLIB)\n+readelf_LDADD = $(LIBINTL) $(LIBCTF_NOBFD) $(LIBIBERTY) $(ZLIB) $(LIBDEBUGINFOD)\n elfedit_SOURCES = elfedit.c version.c $(ELFLIBS)\n elfedit_LDADD = $(LIBINTL) $(LIBIBERTY)\n strip_new_SOURCES = objcopy.c is-strip.c rename.c $(WRITE_DEBUG_SRCS) $(BULIBS)\n nm_new_SOURCES = nm.c $(BULIBS)\n objdump_SOURCES = objdump.c dwarf.c prdbg.c $(DEBUG_SRCS) $(BULIBS) $(ELFLIBS)\n EXTRA_objdump_SOURCES = od-xcoff.c\n-objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+objdump_LDADD = $(OBJDUMP_PRIVATE_OFILES) $(OPCODES) $(LIBCTF) $(BFDLIB) $(LIBIBERTY) $(LIBINTL) $(LIBDEBUGINFOD)\n cxxfilt_SOURCES = cxxfilt.c $(BULIBS)\n ar_SOURCES = arparse.y arlex.l ar.c not-ranlib.c arsup.c rename.c binemul.c \\\n \temul_$(EMULATION).c $(BULIBS)"
    },
    {
      "sha": "72a964424e2c7992b95f92e0bbe9e87a5c935644",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -1,5 +1,14 @@\n -*- text -*-\n \n+* Binutils now supports debuginfod, an HTTP server for distributing\n+  ELF/DWARF debugging information as well as source code. When built with\n+  debuginfod, readelf and objdump can automatically query debuginfod\n+  servers for separate debug files when they otherwise cannot be found.\n+  To build binutils with debuginfod, pass --with-debuginfod to configure.\n+  This requires libdebuginfod, the debuginfod client library. debuginfod\n+  is distributed with elfutils, starting with version 0.178. For more\n+  information see https://sourceware.org/elfutils.\n+\n * Add --output option to the \"ar\" program.  This option can be used to specify\n   the output directory when extracting members from an archive.\n "
    },
    {
      "sha": "703f7b15e7571df9a8ce8c779a01018e6659ee3b",
      "filename": "binutils/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/config.in?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -109,6 +109,9 @@\n /* Define if your <locale.h> file defines LC_MESSAGES. */\n #undef HAVE_LC_MESSAGES\n \n+/* Define to 1 if debuginfod is enabled. */\n+#undef HAVE_LIBDEBUGINFOD\n+\n /* Define to 1 if you have the <limits.h> header file. */\n #undef HAVE_LIMITS_H\n "
    },
    {
      "sha": "aa91e1b395e68a31278061b76b127b608b636f02",
      "filename": "binutils/configure",
      "status": "modified",
      "additions": 136,
      "deletions": 48,
      "changes": 184,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -684,6 +684,7 @@ WARN_WRITE_STRINGS\n NO_WERROR\n WARN_CFLAGS_FOR_BUILD\n WARN_CFLAGS\n+LIBDEBUGINFOD\n OTOOL64\n OTOOL\n LIPO\n@@ -813,6 +814,7 @@ enable_largefile\n enable_targets\n enable_deterministic_archives\n enable_default_strings_all\n+with_debuginfod\n enable_werror\n enable_build_warnings\n enable_nls\n@@ -1483,6 +1485,8 @@ Optional Packages:\n   --with-pic              try to use only PIC/non-PIC objects [default=use\n                           both]\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n+  --with-debuginfod       Enable debuginfo lookups with debuginfod\n+                          (auto/yes/no)\n   --with-system-zlib      use installed libz\n   --with-gnu-ld           assume the C compiler uses GNU ld default=no\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n@@ -1932,6 +1936,52 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_func\n \n+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n+# ---------------------------------------------\n+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_check_decl ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  as_decl_name=`echo $2|sed 's/ *(.*//'`\n+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n+$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+#ifndef $as_decl_name\n+#ifdef __cplusplus\n+  (void) $as_decl_use;\n+#else\n+  (void) $as_decl_name;\n+#endif\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_decl\n+\n # ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n # --------------------------------------------\n # Tries to find the compile-time value of EXPR in a program that includes\n@@ -2168,52 +2218,6 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n \n } # ac_fn_c_check_type\n-\n-# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n-# ---------------------------------------------\n-# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n-# accordingly.\n-ac_fn_c_check_decl ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  as_decl_name=`echo $2|sed 's/ *(.*//'`\n-  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n-$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n-if eval \\${$3+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-#ifndef $as_decl_name\n-#ifdef __cplusplus\n-  (void) $as_decl_use;\n-#else\n-  (void) $as_decl_name;\n-#endif\n-#endif\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  eval \"$3=yes\"\n-else\n-  eval \"$3=no\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-eval ac_res=\\$$3\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-\n-} # ac_fn_c_check_decl\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -11523,7 +11527,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11526 \"configure\"\n+#line 11530 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11629,7 +11633,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11632 \"configure\"\n+#line 11636 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12236,6 +12240,90 @@ fi\n \n \n \n+# Enable debuginfod\n+\n+# Check whether --with-debuginfod was given.\n+if test \"${with_debuginfod+set}\" = set; then :\n+  withval=$with_debuginfod;\n+else\n+  with_debuginfod=auto\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use debuginfod\" >&5\n+$as_echo_n \"checking whether to use debuginfod... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $with_debuginfod\" >&5\n+$as_echo \"$with_debuginfod\" >&6; }\n+\n+if test \"${with_debuginfod}\" = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod support disabled; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod support disabled; some features may be unavailable.\" >&2;}\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for debuginfod_begin in -ldebuginfod\" >&5\n+$as_echo_n \"checking for debuginfod_begin in -ldebuginfod... \" >&6; }\n+if ${ac_cv_lib_debuginfod_debuginfod_begin+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-ldebuginfod  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char debuginfod_begin ();\n+int\n+main ()\n+{\n+return debuginfod_begin ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_debuginfod_debuginfod_begin=yes\n+else\n+  ac_cv_lib_debuginfod_debuginfod_begin=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_debuginfod_debuginfod_begin\" >&5\n+$as_echo \"$ac_cv_lib_debuginfod_debuginfod_begin\" >&6; }\n+if test \"x$ac_cv_lib_debuginfod_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_lib=yes\n+fi\n+\n+  ac_fn_c_check_decl \"$LINENO\" \"debuginfod_begin\" \"ac_cv_have_decl_debuginfod_begin\" \"#include <elfutils/debuginfod.h>\n+\"\n+if test \"x$ac_cv_have_decl_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_h=yes\n+fi\n+\n+  if test \"x$have_debuginfod_lib\" = \"xyes\" -a \\\n+          \"x$have_debuginfod_h\" = \"xyes\"; then\n+\n+$as_echo \"#define HAVE_LIBDEBUGINFOD 1\" >>confdefs.h\n+\n+    LIBDEBUGINFOD=\"-ldebuginfod\"\n+\n+  else\n+\n+    if test \"$with_debuginfod\" = yes; then\n+      as_fn_error $? \"debuginfod is missing or unusable\" \"$LINENO\" 5\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&2;}\n+    fi\n+  fi\n+fi\n+\n+\n+\n cat >>confdefs.h <<_ACEOF\n #define DEFAULT_STRINGS_ALL $default_strings_all\n _ACEOF"
    },
    {
      "sha": "385ab01a26c8ef2bbde8518b0df43e9d289447bf",
      "filename": "binutils/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure.ac?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -18,6 +18,7 @@ dnl <http://www.gnu.org/licenses/>.\n dnl\n \n m4_include([../bfd/version.m4])\n+m4_include([../config/debuginfod.m4])\n AC_INIT([binutils], BFD_VERSION)\n AC_CONFIG_SRCDIR(ar.c)\n \n@@ -63,6 +64,8 @@ else\n   default_strings_all=1\n fi], [default_strings_all=1])\n \n+AC_DEBUGINFOD\n+\n AC_DEFINE_UNQUOTED(DEFAULT_STRINGS_ALL, $default_strings_all,\n \t\t   [Should strings use -a behavior by default?])\n "
    },
    {
      "sha": "b0e7b7b6c8969f6b5162fc101d4802e62c4bfa49",
      "filename": "binutils/doc/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/doc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/doc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/Makefile.in?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -127,7 +127,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../config/zlib.m4 $(top_srcdir)/../libtool.m4 \\\n \t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n \t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/../bfd/version.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../bfd/version.m4 \\\n+\t$(top_srcdir)/../config/debuginfod.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)\n@@ -284,6 +286,7 @@ LDFLAGS = @LDFLAGS@\n LEX = @LEX@\n LEXLIB = @LEXLIB@\n LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@\n+LIBDEBUGINFOD = @LIBDEBUGINFOD@\n LIBICONV = @LIBICONV@\n LIBINTL = @LIBINTL@\n LIBINTL_DEP = @LIBINTL_DEP@"
    },
    {
      "sha": "71af6c5fcfb1b39ee5320eb4585a6b2fdfb261b7",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -154,6 +154,7 @@ in the section entitled ``GNU Free Documentation License''.\n * elfedit::                     Update ELF header and property of ELF files\n * Common Options::              Command-line options for all utilities\n * Selecting the Target System:: How these utilities determine the target\n+* debuginfod::                  Using binutils with debuginfod\n * Reporting Bugs::              Reporting Bugs\n * GNU Free Documentation License::  GNU Free Documentation License\n * Binutils Index::              Binutils Index\n@@ -5201,6 +5202,23 @@ Ways to specify:\n deduced from the input file\n @end enumerate\n \n+@node debuginfod\n+@chapter debuginfod\n+@cindex separate debug files\n+\n+debuginfod is a web service that indexes ELF/DWARF debugging resources\n+by build-id and serves them over HTTP.\n+\n+Binutils can be built with the debuginfod client library\n+@code{libdebuginfod} using the @option{--with-debuginfod} configure option.\n+This option is enabled by default if @code{libdebuginfod} is installed\n+and found at configure time. This allows @command{objdump} and\n+@command{readelf} to automatically query debuginfod servers for\n+separate debug files when the files are otherwise not found.\n+\n+debuginfod is packaged with elfutils, starting with version 0.178.\n+You can get the latest version from `https://sourceware.org/elfutils/'.\n+\n @node Reporting Bugs\n @chapter Reporting Bugs\n @cindex bugs"
    },
    {
      "sha": "9c96f471f858bca92c83a4807fd0f73b5b38025c",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 107,
      "deletions": 3,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -32,6 +32,10 @@\n #include \"safe-ctype.h\"\n #include <assert.h>\n \n+#ifdef HAVE_LIBDEBUGINFOD\n+#include <elfutils/debuginfod.h>\n+#endif\n+\n #undef MAX\n #undef MIN\n #define MAX(a, b) ((a) > (b) ? (a) : (b))\n@@ -10128,12 +10132,83 @@ add_separate_debug_file (const char * filename, void * handle)\n   first_separate_info = i;\n }\n \n+#if HAVE_LIBDEBUGINFOD\n+/* Query debuginfod servers for the target debuglink or debugaltlink\n+   file. If successful, store the path of the file in filename and\n+   return TRUE, otherwise return FALSE.  */\n+\n+static bfd_boolean\n+debuginfod_fetch_separate_debug_info (struct dwarf_section * section,\n+                                      char ** filename,\n+                                      void * file)\n+{\n+  size_t build_id_len;\n+  unsigned char * build_id;\n+\n+  if (strcmp (section->uncompressed_name, \".gnu_debuglink\") == 0)\n+    {\n+      /* Get the build-id of file.  */\n+      build_id = get_build_id (file);\n+      build_id_len = 0;\n+    }\n+  else if (strcmp (section->uncompressed_name, \".gnu_debugaltlink\") == 0)\n+    {\n+      /* Get the build-id of the debugaltlink file.  */\n+      unsigned int filelen;\n+\n+      filelen = strnlen ((const char *)section->start, section->size);\n+      if (filelen == section->size)\n+        /* Corrupt debugaltlink.  */\n+        return FALSE;\n+\n+      build_id = section->start + filelen + 1;\n+      build_id_len = section->size - (filelen + 1);\n+\n+      if (build_id_len == 0)\n+        return FALSE;\n+    }\n+  else\n+    return FALSE;\n+\n+  if (build_id)\n+    {\n+      int fd;\n+      debuginfod_client * client;\n+\n+      client = debuginfod_begin ();\n+      if (client == NULL)\n+        return FALSE;\n+\n+      /* Query debuginfod servers for the target file. If found its path\n+         will be stored in filename.  */\n+      fd = debuginfod_find_debuginfo (client, build_id, build_id_len, filename);\n+      debuginfod_end (client);\n+\n+      /* Only free build_id if we allocated space for a hex string\n+         in get_build_id ().  */\n+      if (build_id_len == 0)\n+        free (build_id);\n+\n+      if (fd >= 0)\n+        {\n+          /* File successfully retrieved. Close fd since we want to\n+             use open_debug_file () on filename instead.  */\n+          close (fd);\n+          return TRUE;\n+        }\n+    }\n+\n+  return FALSE;\n+}\n+#endif\n+\n static void *\n load_separate_debug_info (const char *            main_filename,\n \t\t\t  struct dwarf_section *  xlink,\n \t\t\t  parse_func_type         parse_func,\n \t\t\t  check_func_type         check_func,\n-\t\t\t  void *                  func_data)\n+\t\t\t  void *                  func_data,\n+                          void *                  file ATTRIBUTE_UNUSED)\n {\n   const char *   separate_filename;\n   char *         debug_filename;\n@@ -10235,6 +10310,23 @@ load_separate_debug_info (const char *            main_filename,\n   if (check_func (debug_filename, func_data))\n     goto found;\n \n+#if HAVE_LIBDEBUGINFOD\n+  {\n+    char * tmp_filename;\n+\n+    if (debuginfod_fetch_separate_debug_info (xlink,\n+                                              & tmp_filename,\n+                                              file))\n+      {\n+        /* File successfully downloaded from server, replace\n+           debug_filename with the file's path.  */\n+        free (debug_filename);\n+        debug_filename = tmp_filename;\n+        goto found;\n+      }\n+  }\n+#endif\n+\n   /* Failed to find the file.  */\n   warn (_(\"could not find separate debug file '%s'\\n\"), separate_filename);\n   warn (_(\"tried: %s\\n\"), debug_filename);\n@@ -10264,6 +10356,16 @@ load_separate_debug_info (const char *            main_filename,\n   sprintf (debug_filename, \"%s\", separate_filename);\n   warn (_(\"tried: %s\\n\"), debug_filename);\n \n+#if HAVE_LIBDEBUGINFOD\n+  {\n+    char *urls = getenv (DEBUGINFOD_URLS_ENV_VAR);\n+    if (urls == NULL)\n+      urls = \"\";\n+\n+    warn (_(\"tried: DEBUGINFOD_URLS=%s\\n\"), urls);\n+  }\n+#endif\n+\n   free (canon_dir);\n   free (debug_filename);\n   return NULL;\n@@ -10410,7 +10512,8 @@ load_separate_debug_files (void * file, const char * filename)\n \t\t\t\t& debug_displays[gnu_debugaltlink].section,\n \t\t\t\tparse_gnu_debugaltlink,\n \t\t\t\tcheck_gnu_debugaltlink,\n-\t\t\t\t& build_id_data);\n+\t\t\t\t& build_id_data,\n+\t\t\t\tfile);\n     }\n \n   if (load_debug_section (gnu_debuglink, file))\n@@ -10421,7 +10524,8 @@ load_separate_debug_files (void * file, const char * filename)\n \t\t\t\t& debug_displays[gnu_debuglink].section,\n \t\t\t\tparse_gnu_debuglink,\n \t\t\t\tcheck_gnu_debuglink,\n-\t\t\t\t& crc32);\n+\t\t\t\t& crc32,\n+\t\t\t\tfile);\n     }\n \n   if (first_separate_info != NULL)"
    },
    {
      "sha": "69566926769b35a1565d5ccf95b3ab90831d99ac",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -256,6 +256,10 @@ extern bfd_boolean reloc_at (struct dwarf_section *, dwarf_vma);\n extern dwarf_vma read_leb128 (unsigned char *, const unsigned char *const,\n \t\t\t      bfd_boolean, unsigned int *, int *);\n \n+#if HAVE_LIBDEBUGINFOD\n+extern unsigned char * get_build_id (void *);\n+#endif\n+\n static inline void\n report_leb_status (int status)\n {"
    },
    {
      "sha": "27b0fb6039404f8a3fe4266d155bbb47b4bce7f6",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -2945,6 +2945,33 @@ open_debug_file (const char * pathname)\n   return data;\n }\n \n+#if HAVE_LIBDEBUGINFOD\n+/* Return a hex string represention of the build-id.  */\n+\n+unsigned char *\n+get_build_id (void * data)\n+{\n+  unsigned i;\n+  char * build_id_str;\n+  bfd * abfd = (bfd *) data;\n+  const struct bfd_build_id * build_id;\n+\n+  build_id = abfd->build_id;\n+  if (build_id == NULL)\n+    return NULL;\n+\n+  build_id_str = malloc (build_id->size * 2 + 1);\n+  if (build_id_str == NULL)\n+    return NULL;\n+\n+  for (i = 0; i < build_id->size; i++)\n+    sprintf (build_id_str + (i * 2), \"%02x\", build_id->data[i]);\n+  build_id_str[build_id->size * 2] = '\\0';\n+\n+  return (unsigned char *)build_id_str;\n+}\n+#endif /* HAVE_LIBDEBUGINFOD */\n+\n static void\n dump_dwarf_section (bfd *abfd, asection *section,\n \t\t    void *arg ATTRIBUTE_UNUSED)"
    },
    {
      "sha": "4326cd00cab116106b35a5b4c973b60b47abc5d6",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -14194,6 +14194,138 @@ load_specific_debug_section (enum dwarf_section_display_enum  debug,\n   return TRUE;\n }\n \n+#if HAVE_LIBDEBUGINFOD\n+/* Return a hex string representation of the build-id.  */\n+unsigned char *\n+get_build_id (void * data)\n+{\n+  Filedata * filedata = (Filedata *)data;\n+  Elf_Internal_Shdr * shdr;\n+  unsigned long i;\n+\n+  /* Iterate through notes to find note.gnu.build-id.  */\n+  for (i = 0, shdr = filedata->section_headers;\n+       i < filedata->file_header.e_shnum && shdr != NULL;\n+       i++, shdr++)\n+    {\n+      if (shdr->sh_type != SHT_NOTE)\n+        continue;\n+\n+      char * next;\n+      char * end;\n+      size_t data_remaining;\n+      size_t min_notesz;\n+      Elf_External_Note * enote;\n+      Elf_Internal_Note inote;\n+\n+      bfd_vma offset = shdr->sh_offset;\n+      bfd_vma align = shdr->sh_addralign;\n+      bfd_vma length = shdr->sh_size;\n+\n+      enote = (Elf_External_Note *) get_section_contents (shdr, filedata);\n+      if (enote == NULL)\n+        continue;\n+\n+      if (align < 4)\n+        align = 4;\n+      else if (align != 4 && align != 8)\n+        continue;\n+\n+      end = (char *) enote + length;\n+      data_remaining = end - (char *) enote;\n+\n+      if (!is_ia64_vms (filedata))\n+        {\n+          min_notesz = offsetof (Elf_External_Note, name);\n+          if (data_remaining < min_notesz)\n+            {\n+              warn (ngettext (\"debuginfod: Corrupt note: only %ld byte remains, \"\n+                              \"not enough for a full note\\n\",\n+                              \"Corrupt note: only %ld bytes remain, \"\n+                              \"not enough for a full note\\n\",\n+                              data_remaining),\n+                    (long) data_remaining);\n+              break;\n+            }\n+          data_remaining -= min_notesz;\n+\n+          inote.type     = BYTE_GET (enote->type);\n+          inote.namesz   = BYTE_GET (enote->namesz);\n+          inote.namedata = enote->name;\n+          inote.descsz   = BYTE_GET (enote->descsz);\n+          inote.descdata = ((char *) enote\n+                            + ELF_NOTE_DESC_OFFSET (inote.namesz, align));\n+          inote.descpos  = offset + (inote.descdata - (char *) enote);\n+          next = ((char *) enote\n+                  + ELF_NOTE_NEXT_OFFSET (inote.namesz, inote.descsz, align));\n+        }\n+      else\n+        {\n+          Elf64_External_VMS_Note *vms_enote;\n+\n+          /* PR binutils/15191\n+             Make sure that there is enough data to read.  */\n+          min_notesz = offsetof (Elf64_External_VMS_Note, name);\n+          if (data_remaining < min_notesz)\n+            {\n+              warn (ngettext (\"debuginfod: Corrupt note: only %ld byte remains, \"\n+                              \"not enough for a full note\\n\",\n+                              \"Corrupt note: only %ld bytes remain, \"\n+                              \"not enough for a full note\\n\",\n+                              data_remaining),\n+                    (long) data_remaining);\n+              break;\n+            }\n+          data_remaining -= min_notesz;\n+\n+          vms_enote = (Elf64_External_VMS_Note *) enote;\n+          inote.type     = BYTE_GET (vms_enote->type);\n+          inote.namesz   = BYTE_GET (vms_enote->namesz);\n+          inote.namedata = vms_enote->name;\n+          inote.descsz   = BYTE_GET (vms_enote->descsz);\n+          inote.descdata = inote.namedata + align_power (inote.namesz, 3);\n+          inote.descpos  = offset + (inote.descdata - (char *) enote);\n+          next = inote.descdata + align_power (inote.descsz, 3);\n+        }\n+\n+      /* Skip malformed notes.  */\n+      if ((size_t) (inote.descdata - inote.namedata) < inote.namesz\n+          || (size_t) (inote.descdata - inote.namedata) > data_remaining\n+          || (size_t) (next - inote.descdata) < inote.descsz\n+          || ((size_t) (next - inote.descdata)\n+              > data_remaining - (size_t) (inote.descdata - inote.namedata)))\n+        {\n+          warn (_(\"debuginfod: note with invalid namesz and/or descsz found\\n\"));\n+          warn (_(\" type: 0x%lx, namesize: 0x%08lx, descsize: 0x%08lx, alignment: %u\\n\"),\n+                inote.type, inote.namesz, inote.descsz, (int) align);\n+          continue;\n+        }\n+\n+      /* Check if this is the build-id note. If so then convert the build-id\n+         bytes to a hex string.  */\n+      if (inote.namesz > 0\n+          && const_strneq (inote.namedata, \"GNU\")\n+          && inote.type == NT_GNU_BUILD_ID)\n+        {\n+          unsigned long j;\n+          char * build_id;\n+\n+          build_id = malloc (inote.descsz * 2 + 1);\n+          if (build_id == NULL)\n+              return NULL;\n+\n+          for (j = 0; j < inote.descsz; ++j)\n+            sprintf (build_id + (j * 2), \"%02x\", inote.descdata[j] & 0xff);\n+          build_id[inote.descsz * 2] = '\\0';\n+\n+          return (unsigned char *)build_id;\n+        }\n+    }\n+\n+  return NULL;\n+}\n+#endif /* HAVE_LIBDEBUGINFOD */\n+\n /* If this is not NULL, load_debug_section will only look for sections\n    within the list of sections given here.  */\n static unsigned int * section_subset = NULL;"
    },
    {
      "sha": "518f0ce5a5e6b0d02f493c7cbe31e2ab57281a96",
      "filename": "binutils/testsuite/binutils-all/linkdebug.s",
      "status": "modified",
      "additions": 15,
      "deletions": 2,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/binutils/testsuite/binutils-all/linkdebug.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/binutils/testsuite/binutils-all/linkdebug.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/linkdebug.s?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -18,9 +18,22 @@\n \t\n /* This is the separate debug info file.  */\n \n-/* Create a .debug_abbrev section for use by the .debug_info section\n+/* Create .note.gnu.build-id note for use by the .gnu_debugaltlink\n    in the main object file.  */\n-   \n+\n+\t.section\t.note.gnu.build-id,\"a\",%note\n+\t.balign\t4\n+\t.dc.l\t0x04\t;# Name size\n+\t.dc.l\t0x18\t;# Description size\n+\t.dc.l\t0x03\t;# Type\n+\t.asciz\t\"GNU\"\t;# Name\n+\t.dc.b\t0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77\n+\t.dc.b\t0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff\n+\t.dc.b\t0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef\n+\n+ /* Create a .debug_abbrev section for use by the .debug_info section\n+   in the main object file.  */\n+\n \t.section\t.debug_abbrev,\"\",%progbits\n abbrevs:\n \t.uleb128 0x01\t;# Abbrev code."
    },
    {
      "sha": "9979abe89d05b8b8ed4258563d13da5c9371b680",
      "filename": "config/debuginfod.m4",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/config/debuginfod.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/config/debuginfod.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/debuginfod.m4?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -0,0 +1,38 @@\n+dnl Copyright (C) 1997-2019 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+\n+AC_DEFUN([AC_DEBUGINFOD],\n+[\n+# Enable debuginfod\n+AC_ARG_WITH([debuginfod],\n+        AC_HELP_STRING([--with-debuginfod],\n+                       [Enable debuginfo lookups with debuginfod (auto/yes/no)]),\n+        [], [with_debuginfod=auto])\n+AC_MSG_CHECKING([whether to use debuginfod])\n+AC_MSG_RESULT([$with_debuginfod])\n+\n+if test \"${with_debuginfod}\" = no; then\n+  AC_MSG_WARN([debuginfod support disabled; some features may be unavailable.])\n+else\n+  AC_CHECK_LIB([debuginfod], [debuginfod_begin], [have_debuginfod_lib=yes])\n+  AC_CHECK_DECL([debuginfod_begin], [have_debuginfod_h=yes], [],\n+                [#include <elfutils/debuginfod.h>])\n+  if test \"x$have_debuginfod_lib\" = \"xyes\" -a \\\n+          \"x$have_debuginfod_h\" = \"xyes\"; then\n+    AC_DEFINE([HAVE_LIBDEBUGINFOD], [1],\n+              [Define to 1 if debuginfod is enabled.])\n+    AC_SUBST([LIBDEBUGINFOD], [\"-ldebuginfod\"])\n+  else\n+    AC_SUBST([LIBDEBUGINFOD], [])\n+    if test \"$with_debuginfod\" = yes; then\n+      AC_MSG_ERROR([debuginfod is missing or unusable])\n+    else\n+      AC_MSG_WARN([debuginfod is missing or unusable; some features may be unavailable.])\n+    fi\n+  fi\n+fi\n+])"
    },
    {
      "sha": "e02123c36f488d3cda075f335563506d2dd2fb14",
      "filename": "configure",
      "status": "modified",
      "additions": 137,
      "deletions": 2,
      "changes": 139,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/configure?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -690,6 +690,7 @@ extra_mpc_gmp_configure_flags\n extra_mpfr_configure_flags\n gmpinc\n gmplibs\n+LIBDEBUGINFOD\n do_compare\n GNATMAKE\n GNATBIND\n@@ -790,6 +791,7 @@ enable_libssp\n enable_libstdcxx\n enable_liboffloadmic\n enable_bootstrap\n+with_debuginfod\n with_mpc\n with_mpc_include\n with_mpc_lib\n@@ -1553,6 +1555,8 @@ Optional Packages:\n   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n   --with-build-libsubdir=DIR  Directory where to find libraries for build system\n   --with-system-zlib      use installed libz\n+  --with-debuginfod       Enable debuginfo lookups with debuginfod\n+                          (auto/yes/no)\n   --with-mpc=PATH         specify prefix directory for installed MPC package.\n                           Equivalent to --with-mpc-include=PATH/include plus\n                           --with-mpc-lib=PATH/lib\n@@ -1921,6 +1925,52 @@ fi\n   as_fn_set_status $ac_retval\n \n } # ac_fn_c_try_link\n+\n+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n+# ---------------------------------------------\n+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_check_decl ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  as_decl_name=`echo $2|sed 's/ *(.*//'`\n+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n+$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+#ifndef $as_decl_name\n+#ifdef __cplusplus\n+  (void) $as_decl_use;\n+#else\n+  (void) $as_decl_name;\n+#endif\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_decl\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -5433,6 +5483,92 @@ gmplibs=\"-lmpc -lmpfr -lgmp\"\n gmpinc=\n have_gmp=no\n \n+# Check for debuginfod\n+\n+\n+# Enable debuginfod\n+\n+# Check whether --with-debuginfod was given.\n+if test \"${with_debuginfod+set}\" = set; then :\n+  withval=$with_debuginfod;\n+else\n+  with_debuginfod=auto\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use debuginfod\" >&5\n+$as_echo_n \"checking whether to use debuginfod... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $with_debuginfod\" >&5\n+$as_echo \"$with_debuginfod\" >&6; }\n+\n+if test \"${with_debuginfod}\" = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod support disabled; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod support disabled; some features may be unavailable.\" >&2;}\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for debuginfod_begin in -ldebuginfod\" >&5\n+$as_echo_n \"checking for debuginfod_begin in -ldebuginfod... \" >&6; }\n+if ${ac_cv_lib_debuginfod_debuginfod_begin+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-ldebuginfod  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char debuginfod_begin ();\n+int\n+main ()\n+{\n+return debuginfod_begin ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_debuginfod_debuginfod_begin=yes\n+else\n+  ac_cv_lib_debuginfod_debuginfod_begin=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_debuginfod_debuginfod_begin\" >&5\n+$as_echo \"$ac_cv_lib_debuginfod_debuginfod_begin\" >&6; }\n+if test \"x$ac_cv_lib_debuginfod_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_lib=yes\n+fi\n+\n+  ac_fn_c_check_decl \"$LINENO\" \"debuginfod_begin\" \"ac_cv_have_decl_debuginfod_begin\" \"#include <elfutils/debuginfod.h>\n+\"\n+if test \"x$ac_cv_have_decl_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_h=yes\n+fi\n+\n+  if test \"x$have_debuginfod_lib\" = \"xyes\" -a \\\n+          \"x$have_debuginfod_h\" = \"xyes\"; then\n+\n+$as_echo \"#define HAVE_LIBDEBUGINFOD 1\" >>confdefs.h\n+\n+    LIBDEBUGINFOD=\"-ldebuginfod\"\n+\n+  else\n+\n+    if test \"$with_debuginfod\" = yes; then\n+      as_fn_error $? \"debuginfod is missing or unusable\" \"$LINENO\" 5\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&2;}\n+    fi\n+  fi\n+fi\n+\n+\n # Specify a location for mpc\n # check for this first so it ends up on the link line before mpfr.\n \n@@ -5587,8 +5723,7 @@ if test -d ${srcdir}/gcc && test \"x$have_gmp\" = xno; then\n   # Check for the recommended and required versions of GMP.\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for the correct version of gmp.h\" >&5\n $as_echo_n \"checking for the correct version of gmp.h... \" >&6; }\n-\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include \"gmp.h\"\n int"
    },
    {
      "sha": "544fab3d2097cb1e6bc572cc8c060baa9ec108b6",
      "filename": "configure.ac",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/301a9420d947da145884261ac31a7a52438c2894/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/301a9420d947da145884261ac31a7a52438c2894/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/configure.ac?ref=301a9420d947da145884261ac31a7a52438c2894",
      "patch": "@@ -23,6 +23,7 @@ m4_include(config/acx.m4)\n m4_include(config/override.m4)\n m4_include(config/proginstall.m4)\n m4_include(config/elf.m4)\n+m4_include(config/debuginfod.m4)\n m4_include([libtool.m4])\n m4_include([ltoptions.m4])\n m4_include([ltsugar.m4])\n@@ -1363,6 +1364,9 @@ gmplibs=\"-lmpc -lmpfr -lgmp\"\n gmpinc=\n have_gmp=no\n \n+# Check for debuginfod\n+AC_DEBUGINFOD\n+\n # Specify a location for mpc\n # check for this first so it ends up on the link line before mpfr.\n AC_ARG_WITH(mpc,"
    }
  ]
}