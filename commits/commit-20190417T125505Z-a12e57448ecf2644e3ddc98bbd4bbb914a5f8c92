{
  "sha": "a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTEyZTU3NDQ4ZWNmMjY0NGUzZGRjOThiYmQ0YmJiOTE0YTVmOGM5Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-16T18:12:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-17T12:55:05Z"
    },
    "message": "Avoid crash in dwarf2_init_complex_target_type\n\nAfter commit 35add35 (\"gdb: Fix failure in gdb.base/complex-parts.exp\nfor x86-32\"), dwarf2_init_complex_target_type can crash if \"tt\" is\nnullptr.  This patch avoids the problem by checking for this case.\n\nNo test case because I don't know a good way to write one; it was\nfound by an internal AdaCore test case that apparently uses a 16 bit\nfloating point type.\n\ngdb/ChangeLog:\n\t* dwarf2read.c (dwarf2_init_complex_target_type): Check \"tt\"\n\tagainst nullptr before use.\n\ngdb/ChangeLog\n2019-04-17  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2read.c (dwarf2_init_complex_target_type): Check \"tt\"\n\tagainst nullptr before use.",
    "tree": {
      "sha": "9f2cfe0d210dfcafd777128ba950e1a2f5eea25b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f2cfe0d210dfcafd777128ba950e1a2f5eea25b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a7e559cc087b10b9ea337b58e52cc13964aae3fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7e559cc087b10b9ea337b58e52cc13964aae3fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a7e559cc087b10b9ea337b58e52cc13964aae3fb"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 6,
    "deletions": 1
  },
  "files": [
    {
      "sha": "ef77fdbb5ceb43a32497d204cf5c9d00da018422",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-17  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2read.c (dwarf2_init_complex_target_type): Check \"tt\"\n+\tagainst nullptr before use.\n+\n 2019-04-17  Alan Hayward  <alan.hayward@arm.com>\n \n \t* nat/linux-waitpid.c (linux_debug): Call debug_vprintf."
    },
    {
      "sha": "16bf2404a21c7b9b70b8170e73c8936846ec9294",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
      "patch": "@@ -17566,7 +17566,7 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n   /* If the type we found doesn't match the size we were looking for, then\n      pretend we didn't find a type at all, the complex target type we\n      create will then be nameless.  */\n-  if (TYPE_LENGTH (tt) * TARGET_CHAR_BIT != bits)\n+  if (tt != nullptr && TYPE_LENGTH (tt) * TARGET_CHAR_BIT != bits)\n     tt = nullptr;\n \n   const char *name = (tt == nullptr) ? nullptr : TYPE_NAME (tt);"
    }
  ]
}