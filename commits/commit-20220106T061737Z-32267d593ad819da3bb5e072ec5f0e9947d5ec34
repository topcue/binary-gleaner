{
  "sha": "32267d593ad819da3bb5e072ec5f0e9947d5ec34",
  "node_id": "C_kwDOANOeidoAKDMyMjY3ZDU5M2FkODE5ZGEzYmI1ZTA3MmVjNWYwZTk5NDdkNWVjMzQ",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-05T17:22:54Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-06T06:17:37Z"
    },
    "message": "sim: cr16: migrate to standard uintXX_t types\n\nThis old port setup its own uintXX types, but since we require C11\nnow, we can assume the standard uintXX_t types exist and use them.\n\nAlso migrate off the sim-specific unsignedXX types.",
    "tree": {
      "sha": "f06c710f61803a08e2af0ed5da9de2dd71bdfdeb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f06c710f61803a08e2af0ed5da9de2dd71bdfdeb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32267d593ad819da3bb5e072ec5f0e9947d5ec34",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32267d593ad819da3bb5e072ec5f0e9947d5ec34",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32267d593ad819da3bb5e072ec5f0e9947d5ec34",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32267d593ad819da3bb5e072ec5f0e9947d5ec34/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f9f424229637e6a55a1fad3ae4b75e3900282098",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9f424229637e6a55a1fad3ae4b75e3900282098",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f9f424229637e6a55a1fad3ae4b75e3900282098"
    }
  ],
  "stats": {
    "total": 1251,
    "additions": 621,
    "deletions": 630
  },
  "files": [
    {
      "sha": "86ee50a24ae290eb36ed5a023976682b33da8f0e",
      "filename": "sim/cr16/cr16_sim.h",
      "status": "modified",
      "additions": 10,
      "deletions": 19,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/cr16_sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/cr16_sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/cr16_sim.h?ref=32267d593ad819da3bb5e072ec5f0e9947d5ec34",
      "patch": "@@ -44,25 +44,16 @@ extern int cr16_debug;\n #include \"sim-config.h\"\n #include \"sim-types.h\"\n \n-typedef unsigned8 uint8;\n-typedef signed8 int8;\n-typedef unsigned16 uint16;\n-typedef signed16 int16;\n-typedef unsigned32 uint32;\n-typedef signed32 int32;\n-typedef unsigned64 uint64;\n-typedef signed64 int64;\n-\n /* FIXME: CR16 defines */\n-typedef uint16 reg_t;\n-typedef uint32 creg_t;\n+typedef uint16_t reg_t;\n+typedef uint32_t creg_t;\n \n struct simops \n {\n   char mnemonic[12];\n-  uint32 size;\n-  uint32 mask;\n-  uint32 opcode;\n+  uint32_t size;\n+  uint32_t mask;\n+  uint32_t opcode;\n   int format;\n   char fname[12];\n   void (*func)(SIM_DESC, SIM_CPU *);\n@@ -205,7 +196,7 @@ struct _state\n \n #define GPR32(N) \\\n      (N < 12) ? \\\n-     ((((uint16) State.regs[(N) + 1]) << 16) | (uint16) State.regs[(N)]) \\\n+     ((((uint16_t) State.regs[(N) + 1]) << 16) | (uint16_t) State.regs[(N)]) \\\n      : GPR (N) \n \n #define SET_GPR32(N,VAL) do { \\\n@@ -232,7 +223,7 @@ struct _state\n \n   /* trace data */\n   struct {\n-    uint16 psw;\n+    uint16_t psw;\n   } trace;\n \n   int\tpc_changed;\n@@ -247,8 +238,8 @@ struct _state\n extern struct _state State;\n \n \n-extern uint32 OP[4];\n-extern uint32 sign_flag;\n+extern uint32_t OP[4];\n+extern uint32_t sign_flag;\n extern struct simops Simops[];\n \n enum\n@@ -394,7 +385,7 @@ enum\n \n /* Yes, this is as whacked as it looks.  The sim currently reads little endian\n    for 16 bits, but then merge them like big endian to get 32 bits.  */\n-static inline uint32 get_longword (SIM_CPU *cpu, address_word addr)\n+static inline uint32_t get_longword (SIM_CPU *cpu, address_word addr)\n {\n   return (RW (addr) << 16) | RW (addr + 2);\n }"
    },
    {
      "sha": "47fb64781bfd891f5720d8b9f79faa975a253b1b",
      "filename": "sim/cr16/interp.c",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/interp.c?ref=32267d593ad819da3bb5e072ec5f0e9947d5ec34",
      "patch": "@@ -42,19 +42,19 @@ struct _state State;\n \n int cr16_debug;\n \n-uint32 OP[4];\n-uint32 sign_flag;\n+uint32_t OP[4];\n+uint32_t sign_flag;\n \n-static struct hash_entry *lookup_hash (SIM_DESC, SIM_CPU *, uint64 ins, int size);\n-static void get_operands (operand_desc *s, uint64 mcode, int isize, int nops);\n+static struct hash_entry *lookup_hash (SIM_DESC, SIM_CPU *, uint64_t ins, int size);\n+static void get_operands (operand_desc *s, uint64_t mcode, int isize, int nops);\n \n #define MAX_HASH  16\n \n struct hash_entry\n {\n   struct hash_entry *next;\n-  uint32 opcode;\n-  uint32 mask;\n+  uint32_t opcode;\n+  uint32_t mask;\n   int format;\n   int size;\n   struct simops *ops;\n@@ -77,9 +77,9 @@ hash(unsigned long long insn, int format)\n \n \n INLINE static struct hash_entry *\n-lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint64 ins, int size)\n+lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint64_t ins, int size)\n {\n-  uint32 mask;\n+  uint32_t mask;\n   struct hash_entry *h;\n \n   h = &hash_table[hash(ins,1)];\n@@ -108,10 +108,10 @@ lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint64 ins, int size)\n }\n \n INLINE static void\n-get_operands (operand_desc *s, uint64 ins, int isize, int nops)\n+get_operands (operand_desc *s, uint64_t ins, int isize, int nops)\n {\n-  uint32 i, opn = 0, start_bit = 0, op_type = 0; \n-  int32 op_size = 0, mask = 0;\n+  uint32_t i, opn = 0, start_bit = 0, op_type = 0; \n+  int32_t op_size = 0, mask = 0;\n \n   if (isize == 1) /* Trunkcate the extra 16 bits of INS.  */\n     ins = ins >> 16;\n@@ -328,7 +328,7 @@ get_operands (operand_desc *s, uint64 ins, int isize, int nops)\n }\n \n static int\n-do_run (SIM_DESC sd, SIM_CPU *cpu, uint64 mcode)\n+do_run (SIM_DESC sd, SIM_CPU *cpu, uint64_t mcode)\n {\n   struct hash_entry *h;\n \n@@ -579,8 +579,8 @@ sim_open (SIM_OPEN_KIND kind, struct host_callback_struct *cb,\n static void\n step_once (SIM_DESC sd, SIM_CPU *cpu)\n {\n-  uint32 curr_ins_size = 0;\n-  uint64 mcode = RLW (PC);\n+  uint32_t curr_ins_size = 0;\n+  uint64_t mcode = RLW (PC);\n \n   State.pc_changed = 0;\n \n@@ -689,10 +689,10 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n   return SIM_RC_OK;\n }\n \n-static uint32\n+static uint32_t\n cr16_extract_unsigned_integer (unsigned char *addr, int len)\n {\n-  uint32 retval;\n+  uint32_t retval;\n   unsigned char * p;\n   unsigned char * startaddr = (unsigned char *)addr;\n   unsigned char * endaddr = startaddr + len;\n@@ -706,7 +706,7 @@ cr16_extract_unsigned_integer (unsigned char *addr, int len)\n }\n \n static void\n-cr16_store_unsigned_integer (unsigned char *addr, int len, uint32 val)\n+cr16_store_unsigned_integer (unsigned char *addr, int len, uint32_t val)\n {\n   unsigned char *p;\n   unsigned char *startaddr = addr;"
    },
    {
      "sha": "d58c0c93395378d3e7e46bce0bcbb1a12fc2a760",
      "filename": "sim/cr16/simops.c",
      "status": "modified",
      "additions": 594,
      "deletions": 594,
      "changes": 1188,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/simops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32267d593ad819da3bb5e072ec5f0e9947d5ec34/sim/cr16/simops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/simops.c?ref=32267d593ad819da3bb5e072ec5f0e9947d5ec34"
    }
  ]
}