{
  "sha": "171375c68e809e97b5653ef424f80d46956a50e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTcxMzc1YzY4ZTgwOWU5N2I1NjUzZWY0MjRmODBkNDY5NTZhNTBlOA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-20T17:25:33Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-20T17:25:33Z"
    },
    "message": "Fix potential illegal memory access by readelf when parsing corrupt IA64 unwind information.\n\n\tPR 24244\n\t* unwind-ia64.c (unw_decode_uleb128): Add end parameter, use it to\n\tprevent walking off the end of the buffer.\n\t(unw_decode_x1): Add end paramter, pass it to unw_decode_uleb128.\n\t(unw_decode_x2): Likewise.\n\t(unw_decode_x3): Likewise.\n\t(unw_decode_x4): Likewise.\n\t(unw_decode_r2): Pass the end parameter to unw_decode_uleb128.\n\t(unw_decode_r3): Likewise.\n\t(unw_decode_p7_p10): Likewise.\n\t(unw_decode_b2): Likewise.\n\t(unw_decode_b3_x4): Likewise.",
    "tree": {
      "sha": "6d9cce6fe9f361e030c374c4f440c2b3e2efc160",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d9cce6fe9f361e030c374c4f440c2b3e2efc160"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/171375c68e809e97b5653ef424f80d46956a50e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/171375c68e809e97b5653ef424f80d46956a50e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/171375c68e809e97b5653ef424f80d46956a50e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/171375c68e809e97b5653ef424f80d46956a50e8/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7fc0c668f2aceb8582d74db1ad2528e2bba8a921",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7fc0c668f2aceb8582d74db1ad2528e2bba8a921",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7fc0c668f2aceb8582d74db1ad2528e2bba8a921"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 50,
    "deletions": 36
  },
  "files": [
    {
      "sha": "8c08a8eb7f750f560ffdc96469c77b3c24d00b58",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/171375c68e809e97b5653ef424f80d46956a50e8/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/171375c68e809e97b5653ef424f80d46956a50e8/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=171375c68e809e97b5653ef424f80d46956a50e8",
      "patch": "@@ -1,11 +1,25 @@\n 2019-02-20  Nick Clifton  <nickc@redhat.com>\n \n-\tPR 24242\n-\t* readelf.c (print_ia64_vms_note): Harden against corrupt notes.\n+\tPR 24244\n+\t* unwind-ia64.c (unw_decode_uleb128): Add end parameter, use it to\n+\tprevent walking off the end of the buffer.\n+\t(unw_decode_x1): Add end paramter, pass it to unw_decode_uleb128.\n+\t(unw_decode_x2): Likewise.\n+\t(unw_decode_x3): Likewise.\n+\t(unw_decode_x4): Likewise.\n+\t(unw_decode_r2): Pass the end parameter to unw_decode_uleb128.\n+\t(unw_decode_r3): Likewise.\n+\t(unw_decode_p7_p10): Likewise.\n+\t(unw_decode_b2): Likewise.\n+\t(unw_decode_b3_x4): Likewise.\n+\n \tPR 24243\n \t* readelf.c (process_mips_specific): Check for an options section\n \tthat is too small to even contain a single option.\n \n+\tPR 24242\n+\t* readelf.c (print_ia64_vms_note): Harden against corrupt notes.\n+\n 2019-02-20  Alan Modra  <amodra@gmail.com>\n \n \tPR 24132"
    },
    {
      "sha": "73550ddccaec0ce5f5c42662a33e7b53f93749e8",
      "filename": "binutils/unwind-ia64.c",
      "status": "modified",
      "additions": 34,
      "deletions": 34,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/171375c68e809e97b5653ef424f80d46956a50e8/binutils/unwind-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/171375c68e809e97b5653ef424f80d46956a50e8/binutils/unwind-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/unwind-ia64.c?ref=171375c68e809e97b5653ef424f80d46956a50e8",
      "patch": "@@ -542,13 +542,13 @@ typedef bfd_vma unw_word;\n  */\n \n static unw_word\n-unw_decode_uleb128 (const unsigned char **dpp)\n+unw_decode_uleb128 (const unsigned char **dpp, const unsigned char * end)\n {\n   unsigned shift = 0;\n   unw_word byte, result = 0;\n   const unsigned char *bp = *dpp;\n \n-  while (1)\n+  while (bp < end)\n     {\n       byte = *bp++;\n       result |= (byte & 0x7f) << shift;\n@@ -566,14 +566,14 @@ unw_decode_uleb128 (const unsigned char **dpp)\n \n static const unsigned char *\n unw_decode_x1 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n-\t       void *arg ATTRIBUTE_UNUSED)\n+\t       void *arg ATTRIBUTE_UNUSED, const unsigned char * end)\n {\n   unsigned char byte1, abreg;\n   unw_word t, off;\n \n   byte1 = *dp++;\n-  t = unw_decode_uleb128 (&dp);\n-  off = unw_decode_uleb128 (&dp);\n+  t = unw_decode_uleb128 (&dp, end);\n+  off = unw_decode_uleb128 (&dp, end);\n   abreg = (byte1 & 0x7f);\n   if (byte1 & 0x80)\n     UNW_DEC_SPILL_SPREL (\"X1\", t, abreg, off, arg);\n@@ -584,14 +584,14 @@ unw_decode_x1 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n \n static const unsigned char *\n unw_decode_x2 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n-\t       void *arg ATTRIBUTE_UNUSED)\n+\t       void *arg ATTRIBUTE_UNUSED, const unsigned char * end)\n {\n   unsigned char byte1, byte2, abreg, x, ytreg;\n   unw_word t;\n \n   byte1 = *dp++;\n   byte2 = *dp++;\n-  t = unw_decode_uleb128 (&dp);\n+  t = unw_decode_uleb128 (&dp, end);\n   abreg = (byte1 & 0x7f);\n   ytreg = byte2;\n   x = (byte1 >> 7) & 1;\n@@ -604,15 +604,15 @@ unw_decode_x2 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n \n static const unsigned char *\n unw_decode_x3 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n-\t       void *arg ATTRIBUTE_UNUSED)\n+\t       void *arg ATTRIBUTE_UNUSED, const unsigned char * end)\n {\n   unsigned char byte1, byte2, abreg, qp;\n   unw_word t, off;\n \n   byte1 = *dp++;\n   byte2 = *dp++;\n-  t = unw_decode_uleb128 (&dp);\n-  off = unw_decode_uleb128 (&dp);\n+  t = unw_decode_uleb128 (&dp, end);\n+  off = unw_decode_uleb128 (&dp, end);\n \n   qp = (byte1 & 0x3f);\n   abreg = (byte2 & 0x7f);\n@@ -626,15 +626,15 @@ unw_decode_x3 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n \n static const unsigned char *\n unw_decode_x4 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n-\t       void *arg ATTRIBUTE_UNUSED)\n+\t       void *arg ATTRIBUTE_UNUSED, const unsigned char * end)\n {\n   unsigned char byte1, byte2, byte3, qp, abreg, x, ytreg;\n   unw_word t;\n \n   byte1 = *dp++;\n   byte2 = *dp++;\n   byte3 = *dp++;\n-  t = unw_decode_uleb128 (&dp);\n+  t = unw_decode_uleb128 (&dp, end);\n \n   qp = (byte1 & 0x3f);\n   abreg = (byte2 & 0x7f);\n@@ -662,7 +662,7 @@ unw_decode_r1 (const unsigned char *dp, unsigned int code, void *arg,\n \n static const unsigned char *\n unw_decode_r2 (const unsigned char *dp, unsigned int code, void *arg,\n-\t       const unsigned char * end ATTRIBUTE_UNUSED)\n+\t       const unsigned char * end)\n {\n   unsigned char byte1, mask, grsave;\n   unw_word rlen;\n@@ -671,18 +671,18 @@ unw_decode_r2 (const unsigned char *dp, unsigned int code, void *arg,\n \n   mask = ((code & 0x7) << 1) | ((byte1 >> 7) & 1);\n   grsave = (byte1 & 0x7f);\n-  rlen = unw_decode_uleb128 (& dp);\n+  rlen = unw_decode_uleb128 (& dp, end);\n   UNW_DEC_PROLOGUE_GR (\"R2\", rlen, mask, grsave, arg);\n   return dp;\n }\n \n static const unsigned char *\n unw_decode_r3 (const unsigned char *dp, unsigned int code, void *arg,\n-\t       const unsigned char * end ATTRIBUTE_UNUSED)\n+\t       const unsigned char * end)\n {\n   unw_word rlen;\n \n-  rlen = unw_decode_uleb128 (& dp);\n+  rlen = unw_decode_uleb128 (& dp, end);\n   UNW_DEC_PROLOGUE (\"R3\", ((code & 0x3) == 1), rlen, arg);\n   return dp;\n }\n@@ -795,19 +795,19 @@ unw_decode_p6 (const unsigned char *dp, unsigned int code,\n \n static const unsigned char *\n unw_decode_p7_p10 (const unsigned char *dp, unsigned int code, void *arg,\n-\t\t   const unsigned char * end ATTRIBUTE_UNUSED)\n+\t\t   const unsigned char * end)\n {\n   unsigned char r, byte1, byte2;\n   unw_word t, size;\n \n   if ((code & 0x10) == 0)\n     {\n       r = (code & 0xf);\n-      t = unw_decode_uleb128 (&dp);\n+      t = unw_decode_uleb128 (&dp, end);\n       switch (r)\n \t{\n \tcase 0:\n-\t  size = unw_decode_uleb128 (&dp);\n+\t  size = unw_decode_uleb128 (&dp, end);\n \t  UNW_DEC_MEM_STACK_F (\"P7\", t, size, arg);\n \t  break;\n \n@@ -868,7 +868,7 @@ unw_decode_p7_p10 (const unsigned char *dp, unsigned int code, void *arg,\n \tcase 0x0:\t\t/* p8 */\n \t  {\n \t    r = *dp++;\n-\t    t = unw_decode_uleb128 (&dp);\n+\t    t = unw_decode_uleb128 (&dp, end);\n \t    switch (r)\n \t      {\n \t      case 1:\n@@ -948,16 +948,16 @@ unw_decode_p7_p10 (const unsigned char *dp, unsigned int code, void *arg,\n \t  break;\n \n \tcase 0x9:\n-\t  return unw_decode_x1 (dp, code, arg);\n+\t  return unw_decode_x1 (dp, code, arg, end);\n \n \tcase 0xa:\n-\t  return unw_decode_x2 (dp, code, arg);\n+\t  return unw_decode_x2 (dp, code, arg, end);\n \n \tcase 0xb:\n-\t  return unw_decode_x3 (dp, code, arg);\n+\t  return unw_decode_x3 (dp, code, arg, end);\n \n \tcase 0xc:\n-\t  return unw_decode_x4 (dp, code, arg);\n+\t  return unw_decode_x4 (dp, code, arg, end);\n \n \tdefault:\n \t  UNW_DEC_BAD_CODE (code);\n@@ -984,30 +984,30 @@ unw_decode_b1 (const unsigned char *dp, unsigned int code,\n static const unsigned char *\n unw_decode_b2 (const unsigned char *dp, unsigned int code,\n \t       void *arg ATTRIBUTE_UNUSED,\n-\t       const unsigned char * end ATTRIBUTE_UNUSED)\n+\t       const unsigned char * end)\n {\n   unw_word t;\n \n-  t = unw_decode_uleb128 (& dp);\n+  t = unw_decode_uleb128 (& dp, end);\n   UNW_DEC_EPILOGUE (\"B2\", t, (code & 0x1f), arg);\n   return dp;\n }\n \n static const unsigned char *\n unw_decode_b3_x4 (const unsigned char *dp, unsigned int code, void *arg,\n-\t\t  const unsigned char * end ATTRIBUTE_UNUSED)\n+\t\t  const unsigned char * end)\n {\n   unw_word t, ecount, label;\n \n   if ((code & 0x10) == 0)\n     {\n-      t = unw_decode_uleb128 (&dp);\n-      ecount = unw_decode_uleb128 (&dp);\n+      t = unw_decode_uleb128 (&dp, end);\n+      ecount = unw_decode_uleb128 (&dp, end);\n       UNW_DEC_EPILOGUE (\"B3\", t, ecount, arg);\n     }\n   else if ((code & 0x07) == 0)\n     {\n-      label = unw_decode_uleb128 (&dp);\n+      label = unw_decode_uleb128 (&dp, end);\n       if ((code & 0x08) != 0)\n \tUNW_DEC_COPY_STATE (\"B4\", label, arg);\n       else\n@@ -1017,13 +1017,13 @@ unw_decode_b3_x4 (const unsigned char *dp, unsigned int code, void *arg,\n     switch (code & 0x7)\n       {\n       case 1:\n-\treturn unw_decode_x1 (dp, code, arg);\n+\treturn unw_decode_x1 (dp, code, arg, end);\n       case 2:\n-\treturn unw_decode_x2 (dp, code, arg);\n+\treturn unw_decode_x2 (dp, code, arg, end);\n       case 3:\n-\treturn unw_decode_x3 (dp, code, arg);\n+\treturn unw_decode_x3 (dp, code, arg, end);\n       case 4:\n-\treturn unw_decode_x4 (dp, code, arg);\n+\treturn unw_decode_x4 (dp, code, arg, end);\n       default:\n \tUNW_DEC_BAD_CODE (code);\n \tbreak;"
    }
  ]
}