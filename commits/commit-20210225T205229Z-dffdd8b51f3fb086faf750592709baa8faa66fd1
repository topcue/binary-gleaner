{
  "sha": "dffdd8b51f3fb086faf750592709baa8faa66fd1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGZmZGQ4YjUxZjNmYjA4NmZhZjc1MDU5MjcwOWJhYThmYWE2NmZkMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-25T20:52:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-25T20:52:29Z"
    },
    "message": "gdb: relax assertion in target_mourn_inferior\n\nAs reported in PR 26861, when killing an inferior on macOS, we hit the\nassert:\n\n    ../../gdb-10.1/gdb/target.c:2149: internal-error: void target_mourn_inferior(ptid_t): Assertion `ptid == inferior_ptid' failed.\n\nThis is because darwin_nat_target::kill passes a pid-only ptid to\ntarget_mourn_inferior, with the pid of the current inferior:\n\n    target_mourn_inferior (ptid_t (inf->pid));\n\n... which doesn't satisfy the assert in target_mourn_inferior:\n\n    gdb_assert (ptid == inferior_ptid);\n\nThe reason for this assertion is that target_mourn_inferior is a\nprototype shared between GDB and GDBserver, so that shared code in\ngdb/nat (used in both GDB and GDBserver) can call target_mourn_inferior.\nIn GDB's implementation, it is likely that some targets still rely on\ninferior_ptid being set to \"the current thread we are working on\".  So\nuntil targets are completely decoupled from inferior_ptid (at least\ntheir mourn_inferior implementations), we need to ensure the passed in\nptid matches inferior_ptid, to ensure the calling code called\ntarget_mourn_inferior with the right global context.\n\nHowever, I think the assert is a bit too restrictive.  The\nmourn_inferior operation works on an inferior, not a specific thread.\nAnd by the time we call mourn_inferior, the threads of the inferior\ndon't exist anymore, the process is gone, so it doesn't really make\nsense to require inferior_ptid to point a specific thread.\n\nI looked at all the target_ops::mourn_inferior implementations, those\nthat read inferior_ptid only care about the pid field, which supports\nthe idea that only the inferior matters.  Other implementations look at\nthe current inferior (call `current_inferior ()`).\n\nI think it would make sense to change target_mourn_inferior to accept\nonly a pid rather than a ptid.  It would then assert that the pid is the\nsame as the current inferior's pid.  However, this would be a quite\ninvolved change, so I'll keep it for later.\n\nTo fix the macOS issue immediately, I propose to relax the assert to\nonly compare the pids, as is done in this patch.\n\nAnother solution would obviously be to make darwin_nat_target::kill pass\ninferior_ptid to target_mourn_inferior.  However, the solution I propose\nis more in line with where I think we want to go (passing a pid to\ntarget_mourn_inferior).\n\ngdb/ChangeLog:\n\n\tPR gdb/26861\n\t* target.c (target_mourn_inferior): Only compare pids in\n\ttarget_mourn_inferior.\n\nChange-Id: If2439ccc5aa67272ea16148a43c5362ef23fb2b8",
    "tree": {
      "sha": "ca3765eaf653d2c392f9d8ee8dde42c72ca0e334",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca3765eaf653d2c392f9d8ee8dde42c72ca0e334"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dffdd8b51f3fb086faf750592709baa8faa66fd1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dffdd8b51f3fb086faf750592709baa8faa66fd1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dffdd8b51f3fb086faf750592709baa8faa66fd1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dffdd8b51f3fb086faf750592709baa8faa66fd1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "64d38fdd9956aefd1f0fbeb7e1d2774e71c0a9b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64d38fdd9956aefd1f0fbeb7e1d2774e71c0a9b8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/64d38fdd9956aefd1f0fbeb7e1d2774e71c0a9b8"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 7,
    "deletions": 1
  },
  "files": [
    {
      "sha": "842dc0a1374b65835ccaa556178fe278b4616ce7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dffdd8b51f3fb086faf750592709baa8faa66fd1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dffdd8b51f3fb086faf750592709baa8faa66fd1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dffdd8b51f3fb086faf750592709baa8faa66fd1",
      "patch": "@@ -1,3 +1,9 @@\n+2021-02-25  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/26861\n+\t* target.c (target_mourn_inferior): Only compare pids in\n+\ttarget_mourn_inferior.\n+\n 2021-02-25  Jan Matyas  <jmatyas@codasip.com>\n \n \tPR gdb/26819"
    },
    {
      "sha": "0889da82ea593ad295741e75f6455c1fcd45d055",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dffdd8b51f3fb086faf750592709baa8faa66fd1/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dffdd8b51f3fb086faf750592709baa8faa66fd1/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=dffdd8b51f3fb086faf750592709baa8faa66fd1",
      "patch": "@@ -2129,7 +2129,7 @@ default_mourn_inferior (struct target_ops *self)\n void\n target_mourn_inferior (ptid_t ptid)\n {\n-  gdb_assert (ptid == inferior_ptid);\n+  gdb_assert (ptid.pid () == inferior_ptid.pid ());\n   current_top_target ()->mourn_inferior ();\n \n   /* We no longer need to keep handles on any of the object files."
    }
  ]
}