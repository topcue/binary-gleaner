{
  "sha": "e7c22a69acb04edce2838b8fbe028b7159c87f47",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTdjMjJhNjlhY2IwNGVkY2UyODM4YjhmYmUwMjhiNzE1OWM4N2Y0Nw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-07T05:34:33Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-09T22:30:04Z"
    },
    "message": "s12z-opc.c formatting fixes\n\nWrap overlong lines, whitespace fixes, and for function definitions\nstart a line with the name of the function.\n\n\t* s12z-opc.c: Formatting.",
    "tree": {
      "sha": "45f52cc4938d90b3426b943fbc56cf788748d41f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45f52cc4938d90b3426b943fbc56cf788748d41f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e7c22a69acb04edce2838b8fbe028b7159c87f47",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7c22a69acb04edce2838b8fbe028b7159c87f47",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e7c22a69acb04edce2838b8fbe028b7159c87f47",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7c22a69acb04edce2838b8fbe028b7159c87f47/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bac7c5cf92e85195de99077b4147358bb372e87a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bac7c5cf92e85195de99077b4147358bb372e87a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bac7c5cf92e85195de99077b4147358bb372e87a"
    }
  ],
  "stats": {
    "total": 153,
    "additions": 82,
    "deletions": 71
  },
  "files": [
    {
      "sha": "a82f26116770f57b54a3d7a2df548dca56b7870b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7c22a69acb04edce2838b8fbe028b7159c87f47/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7c22a69acb04edce2838b8fbe028b7159c87f47/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e7c22a69acb04edce2838b8fbe028b7159c87f47",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-10  Alan Modra  <amodra@gmail.com>\n+\n+\t* s12z-opc.c: Formatting.\n+\n 2019-12-08  Alan Modra  <amodra@gmail.com>\n \n \t* s12z-opc.c (exg_sex_discrim): Don't leak memory on invalid"
    },
    {
      "sha": "3e0c0e0582ca8c3ff9539b5cfb1f5d28c348f68e",
      "filename": "opcodes/s12z-opc.c",
      "status": "modified",
      "additions": 78,
      "deletions": 71,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7c22a69acb04edce2838b8fbe028b7159c87f47/opcodes/s12z-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7c22a69acb04edce2838b8fbe028b7159c87f47/opcodes/s12z-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-opc.c?ref=e7c22a69acb04edce2838b8fbe028b7159c87f47",
      "patch": "@@ -256,7 +256,8 @@ xysp_reg_from_postbyte (uint8_t postbyte)\n   return reg;\n }\n \n-static struct operand * create_immediate_operand (int value)\n+static struct operand *\n+create_immediate_operand (int value)\n {\n   struct immediate_operand *op = malloc (sizeof (*op));\n \n@@ -267,7 +268,8 @@ static struct operand * create_immediate_operand (int value)\n   return (struct operand *) op;\n }\n \n-static struct operand * create_bitfield_operand (int width, int offset)\n+static struct operand *\n+create_bitfield_operand (int width, int offset)\n {\n   struct bitfield_operand *op = malloc (sizeof (*op));\n \n@@ -297,7 +299,8 @@ create_register_operand (int reg)\n   return create_register_operand_with_size (reg, -1);\n }\n \n-static struct operand * create_register_all_operand (void)\n+static struct operand *\n+create_register_all_operand (void)\n {\n   struct register_operand *op = malloc (sizeof (*op));\n \n@@ -307,7 +310,8 @@ static struct operand * create_register_all_operand (void)\n   return (struct operand *) op;\n }\n \n-static struct operand * create_register_all16_operand (void)\n+static struct operand *\n+create_register_all16_operand (void)\n {\n   struct register_operand *op = malloc (sizeof (*op));\n \n@@ -371,7 +375,8 @@ create_memory_auto_operand (enum op_reg_mutation mutation, int reg)\n \f\n \n static void\n-z_ext24_decode (struct mem_read_abstraction_base *mra, int *n_operands, struct operand **operand)\n+z_ext24_decode (struct mem_read_abstraction_base *mra, int *n_operands,\n+\t\tstruct operand **operand)\n {\n   uint8_t buffer[3];\n   int status = mra->read (mra, 0, 3, buffer);\n@@ -391,7 +396,8 @@ z_ext24_decode (struct mem_read_abstraction_base *mra, int *n_operands, struct o\n \n \n static uint32_t\n-z_decode_signed_value (struct mem_read_abstraction_base *mra, int offset, short size)\n+z_decode_signed_value (struct mem_read_abstraction_base *mra, int offset,\n+\t\t       short size)\n {\n   assert (size >0);\n   assert (size <= 4);\n@@ -438,7 +444,7 @@ x_imm1 (struct mem_read_abstraction_base *mra,\n /* An eight bit immediate operand.  */\n static void\n imm1_decode (struct mem_read_abstraction_base *mra,\n-\tint *n_operands, struct operand **operand)\n+\t     int *n_operands, struct operand **operand)\n {\n   x_imm1 (mra, 0, n_operands, operand);\n }\n@@ -485,30 +491,30 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \telse\n \t  n = x;\n \n-        operand = create_immediate_operand (n);\n+\toperand = create_immediate_operand (n);\n \tbreak;\n       }\n     case OPR_REG:\n       {\n \tuint8_t x = (postbyte & 0x07);\n-        operand = create_register_operand (x);\n+\toperand = create_register_operand (x);\n \tbreak;\n       }\n     case OPR_OFXYS:\n       {\n-        operand = create_memory_operand (false, postbyte & 0x0F, 1,\n+\toperand = create_memory_operand (false, postbyte & 0x0F, 1,\n \t\t\t\t\t xysp_reg_from_postbyte (postbyte), -1);\n \tbreak;\n       }\n     case OPR_REG_DIRECT:\n       {\n-        operand = create_memory_operand (false, 0, 2, postbyte & 0x07,\n+\toperand = create_memory_operand (false, 0, 2, postbyte & 0x07,\n \t\t\t\t\t xysp_reg_from_postbyte (postbyte));\n \tbreak;\n       }\n     case OPR_REG_INDIRECT:\n       {\n-        operand = create_memory_operand (true, 0, 2, postbyte & 0x07,\n+\toperand = create_memory_operand (true, 0, 2, postbyte & 0x07,\n \t\t\t\t\t (postbyte & 0x10) ? REG_Y : REG_X);\n \tbreak;\n       }\n@@ -525,7 +531,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \t    idx -= 0x1UL << 8;\n \t  }\n \n-        operand = create_memory_operand (true, idx, 1,\n+\toperand = create_memory_operand (true, idx, 1,\n \t\t\t\t\t xysp_reg_from_postbyte (postbyte), -1);\n \tbreak;\n       }\n@@ -542,7 +548,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \t    idx -= 0x1UL << 24;\n \t  }\n \n-        operand = create_memory_operand (false, idx, 1,\n+\toperand = create_memory_operand (false, idx, 1,\n \t\t\t\t\t xysp_reg_from_postbyte (postbyte), -1);\n \tbreak;\n       }\n@@ -559,7 +565,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \t    idx -= 0x1UL << 24;\n \t  }\n \n-        operand = create_memory_operand (false, idx, 1, postbyte & 0x07, -1);\n+\toperand = create_memory_operand (false, idx, 1, postbyte & 0x07, -1);\n \tbreak;\n       }\n \n@@ -592,7 +598,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \t    idx -= 0x1UL << 8;\n \t  }\n \n-        operand = create_memory_operand (false, idx, 1,\n+\toperand = create_memory_operand (false, idx, 1,\n \t\t\t\t\t xysp_reg_from_postbyte (postbyte), -1);\n \tbreak;\n       }\n@@ -604,7 +610,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \tuint32_t idx = x[1] | x[0] << 8 ;\n \tidx |= (postbyte & 0x30) << 12;\n \n-        operand = create_memory_operand (false, idx, 1, postbyte & 0x07, -1);\n+\toperand = create_memory_operand (false, idx, 1, postbyte & 0x07, -1);\n \tbreak;\n       }\n \n@@ -709,7 +715,7 @@ x_opr_decode_with_size (struct mem_read_abstraction_base *mra, int offset,\n \t    ext24 |= buffer[i] << (8 * (size - i - 1));\n \t  }\n \n-        operand = create_memory_operand (true, ext24, 0, -1, -1);\n+\toperand = create_memory_operand (true, ext24, 0, -1, -1);\n \tbreak;\n       }\n \n@@ -1003,7 +1009,9 @@ sub_d6_y_x (struct mem_read_abstraction_base *mra ATTRIBUTE_UNUSED,\n   operand[(*n_operands)++] = create_register_operand (REG_X);\n }\n \n-static void ld_18bit_decode (struct mem_read_abstraction_base *mra, int *n_operands, struct operand **operand);\n+static void\n+ld_18bit_decode (struct mem_read_abstraction_base *mra, int *n_operands,\n+\t\t struct operand **operand);\n \n static enum optr\n mul_discrim (struct mem_read_abstraction_base *mra, enum optr hint)\n@@ -2254,7 +2262,7 @@ loop_primitive_discrim (struct mem_read_abstraction_base *mra,\n \n static void\n loop_primitive_decode (struct mem_read_abstraction_base *mra,\n-\t\t  int *n_operands, struct operand **operands)\n+\t\t       int *n_operands, struct operand **operands)\n {\n   int offs = 1;\n   uint8_t lb;\n@@ -2294,7 +2302,8 @@ loop_primitive_decode (struct mem_read_abstraction_base *mra,\n \n \n static enum optr\n-shift_discrim (struct mem_read_abstraction_base *mra,  enum optr hint ATTRIBUTE_UNUSED)\n+shift_discrim (struct mem_read_abstraction_base *mra,\n+\t       enum optr hint ATTRIBUTE_UNUSED)\n {\n   size_t i;\n   uint8_t sb;\n@@ -2323,7 +2332,8 @@ shift_discrim (struct mem_read_abstraction_base *mra,  enum optr hint ATTRIBUTE_\n \n \n static void\n-shift_decode (struct mem_read_abstraction_base *mra,  int *n_operands, struct operand **operands)\n+shift_decode (struct mem_read_abstraction_base *mra, int *n_operands,\n+\t      struct operand **operands)\n {\n   size_t i;\n \n@@ -2415,30 +2425,30 @@ shift_decode (struct mem_read_abstraction_base *mra,  int *n_operands, struct op\n \n     case SB_REG_REG_N:\n       {\n-        uint8_t xb;\n-        mra->read (mra, 1, 1, &xb);\n-\n-        /* This case is slightly unusual.\n-           If XB matches the binary pattern 0111XXXX, then instead of\n-           interpreting this as a general OPR postbyte in the IMMe4 mode,\n-           the XB byte is interpreted in s special way.  */\n-        if ((xb & 0xF0) == 0x70)\n-          {\n-            if (byte & 0x10)\n-              {\n-                int shift = ((sb & 0x08) >> 3) | ((xb & 0x0f) << 1);\n-                operands[(*n_operands)++] = create_immediate_operand (shift);\n-              }\n-            else\n-              {\n-                /* This should not happen.  */\n-                abort ();\n-              }\n-          }\n-        else\n-          {\n-            operands[(*n_operands)++] = x_opr_decode (mra, 1);\n-          }\n+\tuint8_t xb;\n+\tmra->read (mra, 1, 1, &xb);\n+\n+\t/* This case is slightly unusual.\n+\t   If XB matches the binary pattern 0111XXXX, then instead of\n+\t   interpreting this as a general OPR postbyte in the IMMe4 mode,\n+\t   the XB byte is interpreted in s special way.  */\n+\tif ((xb & 0xF0) == 0x70)\n+\t  {\n+\t    if (byte & 0x10)\n+\t      {\n+\t\tint shift = ((sb & 0x08) >> 3) | ((xb & 0x0f) << 1);\n+\t\toperands[(*n_operands)++] = create_immediate_operand (shift);\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* This should not happen.  */\n+\t\tabort ();\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    operands[(*n_operands)++] = x_opr_decode (mra, 1);\n+\t  }\n       }\n       break;\n     case SB_REG_OPR_OPR:\n@@ -2470,8 +2480,8 @@ shift_decode (struct mem_read_abstraction_base *mra,  int *n_operands, struct op\n     case SB_REG_OPR_EFF:\n     case SB_OPR_N:\n       {\n-        int imm = (sb & 0x08) ? 2 : 1;\n-        operands[(*n_operands)++] = create_immediate_operand (imm);\n+\tint imm = (sb & 0x08) ? 2 : 1;\n+\toperands[(*n_operands)++] = create_immediate_operand (imm);\n       }\n       break;\n \n@@ -2505,9 +2515,7 @@ psh_pul_decode (struct mem_read_abstraction_base *mra,\n   if (byte & 0x40)\n     {\n       if ((byte & 0x3F) == 0)\n-        {\n-\t  operand[(*n_operands)++] = create_register_all16_operand ();\n-        }\n+\toperand[(*n_operands)++] = create_register_all16_operand ();\n       else\n \tfor (bit = 5; bit >= 0; --bit)\n \t  {\n@@ -2520,9 +2528,7 @@ psh_pul_decode (struct mem_read_abstraction_base *mra,\n   else\n     {\n       if ((byte & 0x3F) == 0)\n-        {\n-\t  operand[(*n_operands)++] = create_register_all_operand ();\n-        }\n+\toperand[(*n_operands)++] = create_register_all_operand ();\n       else\n \tfor (bit = 5; bit >= 0; --bit)\n \t  {\n@@ -2535,7 +2541,8 @@ psh_pul_decode (struct mem_read_abstraction_base *mra,\n }\n \n static enum optr\n-bit_field_discrim (struct mem_read_abstraction_base *mra, enum optr hint ATTRIBUTE_UNUSED)\n+bit_field_discrim (struct mem_read_abstraction_base *mra,\n+\t\t   enum optr hint ATTRIBUTE_UNUSED)\n {\n   int status;\n   bfd_byte bb;\n@@ -2569,10 +2576,10 @@ bit_field_decode (struct mem_read_abstraction_base *mra,\n     {\n       bbs = bb_modes + i;\n       if ((bb & bbs->mask) == bbs->value)\n-        {\n-          mode = bbs->mode;\n-          break;\n-        }\n+\t{\n+\t  mode = bbs->mode;\n+\t  break;\n+\t}\n     }\n   int reg1 = byte2 & 0x07;\n   /* First operand */\n@@ -2600,15 +2607,15 @@ bit_field_decode (struct mem_read_abstraction_base *mra,\n     case BB_REG_REG_REG:\n     case BB_REG_REG_IMM:\n       {\n-        int reg_src = (bb >> 2) & 0x07;\n-        operands[(*n_operands)++] = create_register_operand (reg_src);\n+\tint reg_src = (bb >> 2) & 0x07;\n+\toperands[(*n_operands)++] = create_register_operand (reg_src);\n       }\n       break;\n     case BB_OPR_REG_REG:\n     case BB_OPR_REG_IMM:\n       {\n-        int reg_src = (byte2 & 0x07);\n-        operands[(*n_operands)++] = create_register_operand (reg_src);\n+\tint reg_src = (byte2 & 0x07);\n+\toperands[(*n_operands)++] = create_register_operand (reg_src);\n       }\n       break;\n     case BB_REG_OPR_REG:\n@@ -2628,21 +2635,21 @@ bit_field_decode (struct mem_read_abstraction_base *mra,\n     case BB_OPR_REG_REG:\n     case BB_REG_OPR_REG:\n       {\n-        int reg_parm = bb & 0x03;\n+\tint reg_parm = bb & 0x03;\n \toperands[(*n_operands)++] = create_register_operand (reg_parm);\n       }\n       break;\n     case BB_REG_REG_IMM:\n     case BB_OPR_REG_IMM:\n     case BB_REG_OPR_IMM:\n       {\n-        bfd_byte i1;\n-        mra->read (mra, 1, 1, &i1);\n-        int offset = i1 & 0x1f;\n-        int width = bb & 0x03;\n-        width <<= 3;\n-        width |= i1 >> 5;\n-        operands[(*n_operands)++] = create_bitfield_operand (width, offset);\n+\tbfd_byte i1;\n+\tmra->read (mra, 1, 1, &i1);\n+\tint offset = i1 & 0x1f;\n+\tint width = bb & 0x03;\n+\twidth <<= 3;\n+\twidth |= i1 >> 5;\n+\toperands[(*n_operands)++] = create_bitfield_operand (width, offset);\n       }\n       break;\n     }"
    }
  ]
}