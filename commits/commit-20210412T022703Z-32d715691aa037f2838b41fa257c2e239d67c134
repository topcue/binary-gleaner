{
  "sha": "32d715691aa037f2838b41fa257c2e239d67c134",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzJkNzE1NjkxYWEwMzdmMjgzOGI0MWZhMjU3YzJlMjM5ZDY3YzEzNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-11T23:32:46Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-12T02:27:03Z"
    },
    "message": "Power10 bignum operands\n\nWhen built on a 32-bit host without --enable-64-bit-bfd, powerpc-linux\nand other 32-bit powerpc targeted binutils fail to assemble some\npower10 prefixed instructions with 34-bit fields.  A typical error\nseen when running the testsuite is\n.../gas/testsuite/gas/ppc/prefix-pcrel.s:10: Error: bignum invalid\nIn practice this doesn't matter for addresses:  32-bit programs don't\nneed or use the top 2 bits of a d34 field when calculating addresses.\nHowever it may matter when loading or adding 64-bit constants with\npaddi.  A power10 processor in 32-bit mode still has 64-bit wide GPRs.\nSo this patch enables limited support for O_big PowerPC operands, and\ncorrects sign extension of 32-bit constants using X_extrabit.\n\n\t* config/tc-ppc.c (insn_validate): Use uint64_t for operand values.\n\t(md_assemble): Likewise.  Handle bignum operands.\n\t(ppc_elf_suffix): Handle O_big.  Remove unnecessary input_line_pointer\n\tcheck.\n\t* expr.c: Delete unnecessary forward declarations.\n\t(generic_bignum_to_int32): Return uint32_t.\n\t(generic_bignum_to_int64): Return uint64_t.  Compile always.\n\t(operand): Twiddle X_extrabit for unary '~'.  Set X_unsigned and\n\tclear X_extrabit for unary '!'.\n\t* expr.h (generic_bignum_to_int32): Declare.\n\t(generic_bignum_to_int64): Declare.\n\t* testsuite/gas/ppc/prefix-pcrel.s,\n\t* testsuite/gas/ppc/prefix-pcrel.d: Add more instructions.",
    "tree": {
      "sha": "15950d786cf30650203914068f191717acacae46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15950d786cf30650203914068f191717acacae46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32d715691aa037f2838b41fa257c2e239d67c134",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32d715691aa037f2838b41fa257c2e239d67c134",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32d715691aa037f2838b41fa257c2e239d67c134",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32d715691aa037f2838b41fa257c2e239d67c134/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc304b889106f6d1bd720e969b95615992bf1961",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc304b889106f6d1bd720e969b95615992bf1961",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc304b889106f6d1bd720e969b95615992bf1961"
    }
  ],
  "stats": {
    "total": 194,
    "additions": 124,
    "deletions": 70
  },
  "files": [
    {
      "sha": "1b1dafe92d4f500d26da46ff5eeb9bb8d8ae09fd",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 5,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -1,3 +1,21 @@\n+2021-04-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (insn_validate): Use uint64_t for operand values.\n+\t(md_assemble): Likewise.  Handle bignum operands.\n+\t(ppc_elf_suffix): Handle O_big.  Remove unnecessary input_line_pointer\n+\tcheck.\n+\t* expr.c: Delete unnecessary forward declarations.\n+\t(generic_bignum_to_int32): Return uint32_t.\n+\t(generic_bignum_to_int64): Return uint64_t.  Compile always.\n+\t(operand): Twiddle X_extrabit for unary '~'.  Set X_unsigned and\n+\tclear X_extrabit for unary '!'.\n+\t* expr.h (generic_bignum_to_int32): Declare.\n+\t(generic_bignum_to_int64): Declare.\n+\t* testsuite/gas/ppc/prefix-pcrel.s,\n+\t* testsuite/gas/ppc/prefix-pcrel.d: Add more instructions.\n+\n+2021-04-09  Tejas Belagod  <tejas.belagod@arm.com>\n+\n 2021-04-12  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* testsuite/gas/riscv/march-fail-order-x-std.d: Renamed from\n@@ -28,10 +46,11 @@\n \n 2021-04-09  Tejas Belagod  <tejas.belagod@arm.com>\n \n-\t* config/tc-aarch64.c (warn_unpredictable_ldst): Clean-up diagnostic messages\n-\tfor LD/ST Exclusive instructions.\n+\t* config/tc-aarch64.c (warn_unpredictable_ldst): Clean-up\n+\tdiagnostic messages for LD/ST Exclusive instructions.\n \t* testsuite/gas/aarch64/diagnostic.s: Add a diagnostic test for STLXP.\n-\t* testsuite/gas/aarch64/diagnostic.l: Fix-up test after message clean-up.\n+\t* testsuite/gas/aarch64/diagnostic.l: Fix-up test after message\n+\tclean-up.\n \n 2021-04-09  Alan Modra  <amodra@gmail.com>\n \n@@ -522,7 +541,7 @@\n \twell as Intel syntax tests.\n \t* testsuite/gas/i386/invlpgb.d, testsuite/gas/i386/snp.d: Adjust\n \texpectations.\n-\t* testsuite/gas/i386/invlpgb64.d, testsuite/gas/i386/snp64.d: \n+\t* testsuite/gas/i386/invlpgb64.d, testsuite/gas/i386/snp64.d:\n \tLikewise. Drop passing --def-sym to as.\n \n 2021-03-25  Jan Beulich  <jbeulich@suse.com>\n@@ -885,7 +904,7 @@\n 2021-02-12  Nick Clifton  <nickc@redhat.com>\n \n \t* testsuite/gas/mach-o/sections-1.d: Stop automatic debug link\n-        following.\n+\tfollowing.\n \t* testsuite/gas/xgate/insns-dwarf2.d: Likewise.\n \n 2021-02-12  Alan Modra  <amodra@gmail.com>"
    },
    {
      "sha": "c719b408b0eb59357f6d7e7022a9d041e181c318",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 48,
      "deletions": 36,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -1574,7 +1574,7 @@ insn_validate (const struct powerpc_opcode *op)\n \t  if (operand->shift == (int) PPC_OPSHIFT_INV)\n \t    {\n \t      const char *errmsg;\n-\t      int64_t val;\n+\t      uint64_t val;\n \n \t      errmsg = NULL;\n \t      val = -1;\n@@ -2197,7 +2197,7 @@ ppc_elf_suffix (char **str_p, expressionS *exp_p)\n       {\n \tint reloc = ptr->reloc;\n \n-\tif (!ppc_obj64 && exp_p->X_add_number != 0)\n+\tif (!ppc_obj64 && (exp_p->X_op == O_big || exp_p->X_add_number != 0))\n \t  {\n \t    switch (reloc)\n \t      {\n@@ -2238,14 +2238,12 @@ ppc_elf_suffix (char **str_p, expressionS *exp_p)\n \n \t    input_line_pointer = str;\n \t    expression (&new_exp);\n-\t    if (new_exp.X_op == O_constant)\n+\t    if (new_exp.X_op == O_constant && exp_p->X_op != O_big)\n \t      {\n \t\texp_p->X_add_number += new_exp.X_add_number;\n \t\tstr = input_line_pointer;\n \t      }\n-\n-\t    if (&input_line_pointer != str_p)\n-\t      input_line_pointer = orig_line;\n+\t    input_line_pointer = orig_line;\n \t  }\n \t*str_p = str;\n \n@@ -3397,8 +3395,8 @@ md_assemble (char *str)\n \t    }\n \t  if (--num_optional_provided < 0)\n \t    {\n-\t      int64_t val = ppc_optional_operand_value (operand, insn, ppc_cpu,\n-\t\t\t\t\t\t\tnum_optional_provided);\n+\t      uint64_t val = ppc_optional_operand_value (operand, insn, ppc_cpu,\n+\t\t\t\t\t\t\t num_optional_provided);\n \t      if (operand->insert)\n \t\t{\n \t\t  insn = (*operand->insert) (insn, val, ppc_cpu, &errmsg);\n@@ -3459,96 +3457,110 @@ md_assemble (char *str)\n \t  insn = ppc_insert_operand (insn, operand, ex.X_add_number,\n \t\t\t\t     ppc_cpu, (char *) NULL, 0);\n \t}\n-      else if (ex.X_op == O_constant)\n+      else if (ex.X_op == O_constant\n+\t       || (ex.X_op == O_big && ex.X_add_number > 0))\n \t{\n+\t  uint64_t val;\n+\t  if (ex.X_op == O_constant)\n+\t    {\n+\t      val = ex.X_add_number;\n+\t      if (sizeof (ex.X_add_number) < sizeof (val)\n+\t\t  && (ex.X_add_number < 0) != ex.X_extrabit)\n+\t\tval = val ^ ((addressT) -1 ^ (uint64_t) -1);\n+\t    }\n+\t  else\n+\t    val = generic_bignum_to_int64 ();\n #ifdef OBJ_ELF\n \t  /* Allow @HA, @L, @H on constants.  */\n-\t  bfd_reloc_code_real_type reloc;\n \t  char *orig_str = str;\n+\t  bfd_reloc_code_real_type reloc = ppc_elf_suffix (&str, &ex);\n \n-\t  if ((reloc = ppc_elf_suffix (&str, &ex)) != BFD_RELOC_NONE)\n+\t  if (ex.X_op == O_constant)\n+\t    {\n+\t      val = ex.X_add_number;\n+\t      if (sizeof (ex.X_add_number) < sizeof (val)\n+\t\t  && (ex.X_add_number < 0) != ex.X_extrabit)\n+\t\tval = val ^ ((addressT) -1 ^ (uint64_t) -1);\n+\t    }\n+\t  if (reloc != BFD_RELOC_NONE)\n \t    switch (reloc)\n \t      {\n \t      default:\n \t\tstr = orig_str;\n \t\tbreak;\n \n \t      case BFD_RELOC_LO16:\n-\t\tex.X_add_number &= 0xffff;\n+\t\tval &= 0xffff;\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_HI16:\n \t\tif (REPORT_OVERFLOW_HI && ppc_obj64)\n \t\t  {\n \t\t    /* PowerPC64 @h is tested for overflow.  */\n-\t\t    ex.X_add_number = (addressT) ex.X_add_number >> 16;\n+\t\t    val = val >> 16;\n \t\t    if ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n \t\t      {\n-\t\t\taddressT sign = (((addressT) -1 >> 16) + 1) >> 1;\n-\t\t\tex.X_add_number\n-\t\t\t  = ((addressT) ex.X_add_number ^ sign) - sign;\n+\t\t\tuint64_t sign = (((uint64_t) -1 >> 16) + 1) >> 1;\n+\t\t\tval = (val ^ sign) - sign;\n \t\t      }\n \t\t    break;\n \t\t  }\n \t\t/* Fallthru */\n \n \t      case BFD_RELOC_PPC64_ADDR16_HIGH:\n-\t\tex.X_add_number = PPC_HI (ex.X_add_number);\n+\t\tval = PPC_HI (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_HI16_S:\n \t\tif (REPORT_OVERFLOW_HI && ppc_obj64)\n \t\t  {\n \t\t    /* PowerPC64 @ha is tested for overflow.  */\n-\t\t    ex.X_add_number\n-\t\t      = ((addressT) ex.X_add_number + 0x8000) >> 16;\n+\t\t    val = (val + 0x8000) >> 16;\n \t\t    if ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n \t\t      {\n-\t\t\taddressT sign = (((addressT) -1 >> 16) + 1) >> 1;\n-\t\t\tex.X_add_number\n-\t\t\t  = ((addressT) ex.X_add_number ^ sign) - sign;\n+\t\t\tuint64_t sign = (((uint64_t) -1 >> 16) + 1) >> 1;\n+\t\t\tval = (val ^ sign) - sign;\n \t\t      }\n \t\t    break;\n \t\t  }\n \t\t/* Fallthru */\n \n \t      case BFD_RELOC_PPC64_ADDR16_HIGHA:\n-\t\tex.X_add_number = PPC_HA (ex.X_add_number);\n+\t\tval = PPC_HA (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_PPC64_HIGHER:\n-\t\tex.X_add_number = PPC_HIGHER (ex.X_add_number);\n+\t\tval = PPC_HIGHER (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_PPC64_HIGHER_S:\n-\t\tex.X_add_number = PPC_HIGHERA (ex.X_add_number);\n+\t\tval = PPC_HIGHERA (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_PPC64_HIGHEST:\n-\t\tex.X_add_number = PPC_HIGHEST (ex.X_add_number);\n+\t\tval = PPC_HIGHEST (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \n \t      case BFD_RELOC_PPC64_HIGHEST_S:\n-\t\tex.X_add_number = PPC_HIGHESTA (ex.X_add_number);\n+\t\tval = PPC_HIGHESTA (val);\n \t\tif ((operand->flags & PPC_OPERAND_SIGNED) != 0)\n-\t\t  ex.X_add_number = SEX16 (ex.X_add_number);\n+\t\t  val = SEX16 (val);\n \t\tbreak;\n \t      }\n #endif /* OBJ_ELF */\n-\t  insn = ppc_insert_operand (insn, operand, ex.X_add_number,\n-\t\t\t\t     ppc_cpu, (char *) NULL, 0);\n+\t  insn = ppc_insert_operand (insn, operand, val, ppc_cpu, NULL, 0);\n \t}\n       else\n \t{"
    },
    {
      "sha": "afd065c23be3a4c0f6dcc3e712acdb5abbce60b6",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 21,
      "deletions": 29,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -35,16 +35,7 @@\n \n bool literal_prefix_dollar_hex = false;\n \n-static void floating_constant (expressionS * expressionP);\n-static valueT generic_bignum_to_int32 (void);\n-#ifdef BFD64\n-static valueT generic_bignum_to_int64 (void);\n-#endif\n-static void integer_constant (int radix, expressionS * expressionP);\n-static void mri_char_constant (expressionS *);\n static void clean_up_expression (expressionS * expressionP);\n-static segT operand (expressionS *, enum expr_mode);\n-static operatorT operatorf (int *);\n \n /* We keep a mapping of expression symbols to file positions, so that\n    we can provide better error messages.  */\n@@ -218,31 +209,25 @@ floating_constant (expressionS *expressionP)\n   expressionP->X_add_number = -1;\n }\n \n-static valueT\n+uint32_t\n generic_bignum_to_int32 (void)\n {\n-  valueT number =\n-    ((((valueT) generic_bignum[1] & LITTLENUM_MASK) << LITTLENUM_NUMBER_OF_BITS)\n-     | ((valueT) generic_bignum[0] & LITTLENUM_MASK));\n-  number &= 0xffffffff;\n-  return number;\n+  return ((((uint32_t) generic_bignum[1] & LITTLENUM_MASK)\n+\t   << LITTLENUM_NUMBER_OF_BITS)\n+\t  | ((uint32_t) generic_bignum[0] & LITTLENUM_MASK));\n }\n \n-#ifdef BFD64\n-static valueT\n+uint64_t\n generic_bignum_to_int64 (void)\n {\n-  valueT number =\n-    ((((((((valueT) generic_bignum[3] & LITTLENUM_MASK)\n-\t  << LITTLENUM_NUMBER_OF_BITS)\n-\t | ((valueT) generic_bignum[2] & LITTLENUM_MASK))\n-\t<< LITTLENUM_NUMBER_OF_BITS)\n-       | ((valueT) generic_bignum[1] & LITTLENUM_MASK))\n-      << LITTLENUM_NUMBER_OF_BITS)\n-     | ((valueT) generic_bignum[0] & LITTLENUM_MASK));\n-  return number;\n+  return ((((((((uint64_t) generic_bignum[3] & LITTLENUM_MASK)\n+\t       << LITTLENUM_NUMBER_OF_BITS)\n+\t      | ((uint64_t) generic_bignum[2] & LITTLENUM_MASK))\n+\t     << LITTLENUM_NUMBER_OF_BITS)\n+\t    | ((uint64_t) generic_bignum[1] & LITTLENUM_MASK))\n+\t   << LITTLENUM_NUMBER_OF_BITS)\n+\t  | ((uint64_t) generic_bignum[0] & LITTLENUM_MASK));\n }\n-#endif\n \n static void\n integer_constant (int radix, expressionS *expressionP)\n@@ -1031,9 +1016,16 @@ operand (expressionS *expressionP, enum expr_mode mode)\n \t\t  expressionP->X_extrabit ^= 1;\n \t      }\n \t    else if (c == '~' || c == '\"')\n-\t      expressionP->X_add_number = ~ expressionP->X_add_number;\n+\t      {\n+\t\texpressionP->X_add_number = ~ expressionP->X_add_number;\n+\t\texpressionP->X_extrabit ^= 1;\n+\t      }\n \t    else if (c == '!')\n-\t      expressionP->X_add_number = ! expressionP->X_add_number;\n+\t      {\n+\t\texpressionP->X_add_number = ! expressionP->X_add_number;\n+\t\texpressionP->X_unsigned = 1;\n+\t\texpressionP->X_extrabit = 0;\n+\t      }\n \t  }\n \telse if (expressionP->X_op == O_big\n \t\t && expressionP->X_add_number <= 0"
    },
    {
      "sha": "e8707127362e65f31a856d39bcdf09c5307c16f7",
      "filename": "gas/expr.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.h?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -185,6 +185,8 @@ extern void current_location (expressionS *);\n \n extern symbolS *expr_build_uconstant (offsetT);\n extern symbolS *expr_build_dot (void);\n+extern uint32_t generic_bignum_to_int32 (void);\n+extern uint64_t generic_bignum_to_int64 (void);\n \n int resolve_expression (expressionS *);\n "
    },
    {
      "sha": "6807d3b2ba64747935fe9faf028b683c7e5f5581",
      "filename": "gas/testsuite/gas/ppc/prefix-pcrel.d",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/testsuite/gas/ppc/prefix-pcrel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/testsuite/gas/ppc/prefix-pcrel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-pcrel.d?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -232,4 +232,22 @@ Disassembly of section \\.text:\n .*:\t(df eb 00 60|60 00 eb df) \n .*:\t(04 10 00 00|00 00 10 04) \tpstxv   vs63,96\t# 3d8\n .*:\t(df e0 00 60|60 00 e0 df) \n+.*:\t(06 00 7f ff|ff 7f 00 06) \tpli     r1,2147483647\n+.*:\t(38 20 ff ff|ff ff 20 38) \n+.*:\t(06 00 80 00|00 80 00 06) \tpli     r2,2147483648\n+.*:\t(38 40 00 00|00 00 40 38) \n+.*:\t(06 00 ff ff|ff ff 00 06) \tpli     r3,4294967295\n+.*:\t(38 60 ff ff|ff ff 60 38) \n+.*:\t(06 00 00 00|00 00 00 06) \tpli     r4,0\n+.*:\t(38 80 00 00|00 00 80 38) \n+.*:\t(06 03 ff ff|ff ff 03 06) \tpli     r5,-1\n+.*:\t(38 a0 ff ff|ff ff a0 38) \n+.*:\t(06 03 80 00|00 80 03 06) \tpli     r6,-2147483647\n+.*:\t(38 c0 00 01|01 00 c0 38) \n+.*:\t(06 03 80 00|00 80 03 06) \tpli     r7,-2147483648\n+.*:\t(38 e0 00 00|00 00 e0 38) \n+.*:\t(06 03 80 00|00 80 03 06) \tpli     r8,-2147483648\n+.*:\t(39 00 00 00|00 00 00 39) \n+.*:\t(06 03 7f ff|ff 7f 03 06) \tpli     r9,-2147483649\n+.*:\t(39 20 ff ff|ff ff 20 39) \n #pass"
    },
    {
      "sha": "32f04b109c2b29163e9d439e7ebd0971d01b54fa",
      "filename": "gas/testsuite/gas/ppc/prefix-pcrel.s",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32d715691aa037f2838b41fa257c2e239d67c134/gas/testsuite/gas/ppc/prefix-pcrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32d715691aa037f2838b41fa257c2e239d67c134/gas/testsuite/gas/ppc/prefix-pcrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-pcrel.s?ref=32d715691aa037f2838b41fa257c2e239d67c134",
      "patch": "@@ -119,3 +119,14 @@ prefix:\n \tpstxv\t13,96(0),1\n \tpstxv\t63,96(11),0\n \tpstxv\t63,96(0),1\n+\n+# test d34 values of interest when bfd_vma is 32-bit\n+\tpli\t1,0x7fffffff\n+\tpli\t2,0x80000000\n+\tpli\t3,0xffffffff\n+\tpli\t4,0\n+\tpli\t5,-1\n+\tpli\t6,-0x7fffffff\n+\tpli\t7,-0x80000000\n+\tpli\t8,~0x7fffffff\n+\tpli\t9,~0x80000000"
    }
  ]
}