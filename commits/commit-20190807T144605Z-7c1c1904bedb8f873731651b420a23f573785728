{
  "sha": "7c1c1904bedb8f873731651b420a23f573785728",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MxYzE5MDRiZWRiOGY4NzM3MzE2NTFiNDIwYTIzZjU3Mzc4NTcyOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-07T14:07:49Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-07T14:46:05Z"
    },
    "message": "Integer overflows in readelf get_data\n\nI noticed the test for overflow of amt = size * nmemb in get_data\nwasn't effective.  An obvious example of nmemb = 3 and size = half max\nvalue overflows but doesn't result in amt < nmemb.  This patch fixes\nthis problem and reports a size truncation or overflow rather than out\nof memory in more cases.\n\n\t* readelf.c (get_data): Improve overflow checks.",
    "tree": {
      "sha": "dfd8977ec0d6f14abbc5986fde3bc90ba105a26a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dfd8977ec0d6f14abbc5986fde3bc90ba105a26a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c1c1904bedb8f873731651b420a23f573785728",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c1c1904bedb8f873731651b420a23f573785728",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c1c1904bedb8f873731651b420a23f573785728",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c1c1904bedb8f873731651b420a23f573785728/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f927cc8faff0d2e39561c90f5182ebe99b2f77f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f927cc8faff0d2e39561c90f5182ebe99b2f77f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f927cc8faff0d2e39561c90f5182ebe99b2f77f6"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 10,
    "deletions": 8
  },
  "files": [
    {
      "sha": "b60ae64b2729a3150095554dfdbad01b598bde06",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c1c1904bedb8f873731651b420a23f573785728/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c1c1904bedb8f873731651b420a23f573785728/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=7c1c1904bedb8f873731651b420a23f573785728",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-08  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (get_data): Improve overflow checks.\n+\n 2019-08-07  Nick Clifton  <nickc@redhat.com>\n \n \tPR 24777"
    },
    {
      "sha": "3e3e27d19c5aaaa7525d7424b7549f681625d14d",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c1c1904bedb8f873731651b420a23f573785728/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c1c1904bedb8f873731651b420a23f573785728/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=7c1c1904bedb8f873731651b420a23f573785728",
      "patch": "@@ -385,9 +385,9 @@ get_data (void *         var,\n   /* If the size_t type is smaller than the bfd_size_type, eg because\n      you are building a 32-bit tool on a 64-bit host, then make sure\n      that when the sizes are cast to (size_t) no information is lost.  */\n-  if (sizeof (size_t) < sizeof (bfd_size_type)\n-      && (   (bfd_size_type) ((size_t) size) != size\n-\t  || (bfd_size_type) ((size_t) nmemb) != nmemb))\n+  if ((size_t) size != size\n+      || (size_t) nmemb != nmemb\n+      || (size_t) amt != amt)\n     {\n       if (reason)\n \terror (_(\"Size truncation prevents reading %s\"\n@@ -397,7 +397,7 @@ get_data (void *         var,\n     }\n \n   /* Check for size overflow.  */\n-  if (amt < nmemb)\n+  if (amt / size != nmemb || (size_t) amt + 1 == 0)\n     {\n       if (reason)\n \terror (_(\"Size overflow prevents reading %s\"\n@@ -429,10 +429,8 @@ get_data (void *         var,\n   mvar = var;\n   if (mvar == NULL)\n     {\n-      /* Check for overflow.  */\n-      if (nmemb < (~(bfd_size_type) 0 - 1) / size)\n-\t/* + 1 so that we can '\\0' terminate invalid string table sections.  */\n-\tmvar = malloc ((size_t) amt + 1);\n+      /* + 1 so that we can '\\0' terminate invalid string table sections.  */\n+      mvar = malloc ((size_t) amt + 1);\n \n       if (mvar == NULL)\n \t{"
    }
  ]
}