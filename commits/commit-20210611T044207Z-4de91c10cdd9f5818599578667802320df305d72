{
  "sha": "4de91c10cdd9f5818599578667802320df305d72",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGRlOTFjMTBjZGQ5ZjU4MTg1OTk1Nzg2Njc4MDIzMjBkZjMwNWQ3Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-11T04:42:07Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-11T04:42:07Z"
    },
    "message": "readelf section reading\n\nThis is a followup to git commit 8ff66993e0b5, a patch aimed at\nsegfaults found invoking readelf multiple times with fuzzed objects.\nIn that patch I added code to clear more stashed data early in\nprocess_section_headers, along with any stashed section headers.  This\npatch instead relies on clearing out the stash at the end of\nprocess_object, making sure that process_object doesn't exit early.\n\nThe patch also introduces some new wrapper functions.\n\n\t* readelf.c (GET_ELF_SYMBOLS): Delete.  Replace with..\n\t(get_elf_symbols): ..this new function throughout.\n\t(get_32bit_section_headers): Don't free section_headers.\n\t(get_64bit_section_headers): Likewise.\n\t(get_section_headers): New function, use throughout in place of\n\t32bit and 64bit variants.\n\t(get_dynamic_section): Similarly.\n\t(process_section_headers): Don't free filedata memory here.\n\t(get_file_header): Don't get section headers here..\n\t(process_object): ..Read them here instead.  Don't exit without\n\tfreeing filedata memory.",
    "tree": {
      "sha": "a546a8305091b6d1166e2ab3e22b1a2f5f99987b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a546a8305091b6d1166e2ab3e22b1a2f5f99987b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4de91c10cdd9f5818599578667802320df305d72",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4de91c10cdd9f5818599578667802320df305d72",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4de91c10cdd9f5818599578667802320df305d72",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4de91c10cdd9f5818599578667802320df305d72/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f64b9b13ce4bb927f47a1fe0257c3794c6357c8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f64b9b13ce4bb927f47a1fe0257c3794c6357c8c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f64b9b13ce4bb927f47a1fe0257c3794c6357c8c"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 74,
    "deletions": 74
  },
  "files": [
    {
      "sha": "bd91a3911d22b2c82f47b0f9606751603a32886c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4de91c10cdd9f5818599578667802320df305d72/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4de91c10cdd9f5818599578667802320df305d72/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=4de91c10cdd9f5818599578667802320df305d72",
      "patch": "@@ -1,3 +1,17 @@\n+2021-06-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (GET_ELF_SYMBOLS): Delete.  Replace with..\n+\t(get_elf_symbols): ..this new function throughout.\n+\t(get_32bit_section_headers): Don't free section_headers.\n+\t(get_64bit_section_headers): Likewise.\n+\t(get_section_headers): New function, use throughout in place of\n+\t32bit and 64bit variants.\n+\t(get_dynamic_section): Similarly.\n+\t(process_section_headers): Don't free filedata memory here.\n+\t(get_file_header): Don't get section headers here..\n+\t(process_object): ..Read them here instead.  Don't exit without\n+\tfreeing filedata memory.\n+\n 2021-06-09  Nick Clifton  <nickc@redhat.com>\n \n \t* MAINTAINERS: Remove Daniel Jacobwitz from the maintainers list."
    },
    {
      "sha": "52d5302d07b59d19d747f5ccfd09621032b3dfb4",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 60,
      "deletions": 74,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4de91c10cdd9f5818599578667802320df305d72/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4de91c10cdd9f5818599578667802320df305d72/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=4de91c10cdd9f5818599578667802320df305d72",
      "patch": "@@ -357,10 +357,6 @@ static const char * get_symbol_version_string\n \n #define DT_VERSIONTAGIDX(tag)\t(DT_VERNEEDNUM - (tag))\t/* Reverse order!  */\n \n-#define GET_ELF_SYMBOLS(file, section, sym_count)\t\t\t\\\n-  (is_32bit_elf ? get_32bit_elf_symbols (file, section, sym_count)\t\\\n-   : get_64bit_elf_symbols (file, section, sym_count))\n-\n #define VALID_SYMBOL_NAME(strtab, strtab_size, offset) \\\n    (strtab != NULL && offset < strtab_size)\n #define VALID_DYNAMIC_NAME(filedata, offset) \\\n@@ -5756,7 +5752,6 @@ get_32bit_section_headers (Filedata * filedata, bool probe)\n   if (shdrs == NULL)\n     return false;\n \n-  free (filedata->section_headers);\n   filedata->section_headers = (Elf_Internal_Shdr *)\n     cmalloc (num, sizeof (Elf_Internal_Shdr));\n   if (filedata->section_headers == NULL)\n@@ -5823,7 +5818,6 @@ get_64bit_section_headers (Filedata * filedata, bool probe)\n   if (shdrs == NULL)\n     return false;\n \n-  free (filedata->section_headers);\n   filedata->section_headers = (Elf_Internal_Shdr *)\n     cmalloc (num, sizeof (Elf_Internal_Shdr));\n   if (filedata->section_headers == NULL)\n@@ -5858,6 +5852,21 @@ get_64bit_section_headers (Filedata * filedata, bool probe)\n   return true;\n }\n \n+static bool\n+get_section_headers (Filedata *filedata, bool probe)\n+{\n+  if (filedata->section_headers != NULL)\n+    return true;\n+\n+  if (filedata->file_header.e_shoff == 0)\n+    return true;\n+\n+  if (is_32bit_elf)\n+    return get_32bit_section_headers (filedata, probe);\n+  else\n+    return get_64bit_section_headers (filedata, probe);\n+}\n+\n static Elf_Internal_Sym *\n get_32bit_elf_symbols (Filedata *           filedata,\n \t\t       Elf_Internal_Shdr *  section,\n@@ -6094,6 +6103,17 @@ get_64bit_elf_symbols (Filedata *           filedata,\n   return isyms;\n }\n \n+static Elf_Internal_Sym *\n+get_elf_symbols (Filedata *filedata,\n+\t\t Elf_Internal_Shdr *section,\n+\t\t unsigned long *num_syms_return)\n+{\n+  if (is_32bit_elf)\n+    return get_32bit_elf_symbols (filedata, section, num_syms_return);\n+  else\n+    return get_64bit_elf_symbols (filedata, section, num_syms_return);\n+}\n+\n static const char *\n get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n {\n@@ -6451,23 +6471,6 @@ process_section_headers (Filedata * filedata)\n   Elf_Internal_Shdr * section;\n   unsigned int i;\n \n-  free (filedata->section_headers);\n-  filedata->section_headers = NULL;\n-  free (filedata->dynamic_symbols);\n-  filedata->dynamic_symbols = NULL;\n-  filedata->num_dynamic_syms = 0;\n-  free (filedata->dynamic_strings);\n-  filedata->dynamic_strings = NULL;\n-  filedata->dynamic_strings_length = 0;\n-  free (filedata->dynamic_syminfo);\n-  filedata->dynamic_syminfo = NULL;\n-  while (filedata->symtab_shndx_list != NULL)\n-    {\n-      elf_section_list *next = filedata->symtab_shndx_list->next;\n-      free (filedata->symtab_shndx_list);\n-      filedata->symtab_shndx_list = next;\n-    }\n-\n   if (filedata->file_header.e_shnum == 0)\n     {\n       /* PR binutils/12467.  */\n@@ -6497,16 +6500,8 @@ process_section_headers (Filedata * filedata)\n \t\t(unsigned long) filedata->file_header.e_shoff);\n     }\n \n-  if (is_32bit_elf)\n-    {\n-      if (! get_32bit_section_headers (filedata, false))\n-\treturn false;\n-    }\n-  else\n-    {\n-      if (! get_64bit_section_headers (filedata, false))\n-\treturn false;\n-    }\n+  if (!get_section_headers (filedata, false))\n+    return false;\n \n   /* Read in the string table, so that we have names to display.  */\n   if (filedata->file_header.e_shstrndx != SHN_UNDEF\n@@ -6615,7 +6610,7 @@ process_section_headers (Filedata * filedata)\n \n \t  CHECK_ENTSIZE (section, i, Sym);\n \t  filedata->dynamic_symbols\n-\t    = GET_ELF_SYMBOLS (filedata, section, &filedata->num_dynamic_syms);\n+\t    = get_elf_symbols (filedata, section, &filedata->num_dynamic_syms);\n \t  filedata->dynamic_symtab_section = section;\n \t  break;\n \n@@ -7170,7 +7165,7 @@ get_symtab (Filedata *filedata, Elf_Internal_Shdr *symsec,\n {\n   *strtab = NULL;\n   *strtablen = 0;\n-  *symtab = GET_ELF_SYMBOLS (filedata, symsec, nsyms);\n+  *symtab = get_elf_symbols (filedata, symsec, nsyms);\n \n   if (*symtab == NULL)\n     return false;\n@@ -7341,7 +7336,7 @@ process_section_groups (Filedata * filedata)\n \t    {\n \t      symtab_sec = sec;\n \t      free (symtab);\n-\t      symtab = GET_ELF_SYMBOLS (filedata, symtab_sec, & num_syms);\n+\t      symtab = get_elf_symbols (filedata, symtab_sec, & num_syms);\n \t    }\n \n \t  if (symtab == NULL)\n@@ -10278,6 +10273,18 @@ get_64bit_dynamic_section (Filedata * filedata)\n   return true;\n }\n \n+static bool\n+get_dynamic_section (Filedata *filedata)\n+{\n+  if (filedata->dynamic_section)\n+    return true;\n+\n+  if (is_32bit_elf)\n+    return get_32bit_dynamic_section (filedata);\n+  else\n+    return get_64bit_dynamic_section (filedata);\n+}\n+\n static void\n print_dynamic_flags (bfd_vma flags)\n {\n@@ -10621,16 +10628,8 @@ process_dynamic_section (Filedata * filedata)\n       return true;\n     }\n \n-  if (is_32bit_elf)\n-    {\n-      if (! get_32bit_dynamic_section (filedata))\n-\treturn false;\n-    }\n-  else\n-    {\n-      if (! get_64bit_dynamic_section (filedata))\n-\treturn false;\n-    }\n+  if (!get_dynamic_section (filedata))\n+    return false;\n \n   /* Find the appropriate symbol table.  */\n   if (filedata->dynamic_symbols == NULL || do_histogram)\n@@ -10714,7 +10713,7 @@ the .dynsym section doesn't match the DT_SYMTAB and DT_SYMENT tags\\n\"));\n \n \t\t  section.sh_name = filedata->string_table_length;\n \t\t  filedata->dynamic_symbols\n-\t\t    = GET_ELF_SYMBOLS (filedata, &section,\n+\t\t    = get_elf_symbols (filedata, &section,\n \t\t\t\t       &filedata->num_dynamic_syms);\n \t\t  if (filedata->dynamic_symbols == NULL\n \t\t      || filedata->num_dynamic_syms != num_of_syms)\n@@ -11744,7 +11743,7 @@ process_version_sections (Filedata * filedata)\n \n \t    found = true;\n \n-\t    symbols = GET_ELF_SYMBOLS (filedata, link_section, & num_syms);\n+\t    symbols = get_elf_symbols (filedata, link_section, & num_syms);\n \t    if (symbols == NULL)\n \t      break;\n \n@@ -12946,7 +12945,7 @@ process_symbol_table (Filedata * filedata)\n \t  else\n \t    printf (_(\"   Num:    Value          Size Type    Bind   Vis      Ndx Name\\n\"));\n \n-\t  symtab = GET_ELF_SYMBOLS (filedata, section, & num_syms);\n+\t  symtab = get_elf_symbols (filedata, section, & num_syms);\n \t  if (symtab == NULL)\n \t    continue;\n \n@@ -14312,7 +14311,7 @@ apply_relocations (Filedata *                 filedata,\n       if (filedata->file_header.e_machine == EM_SH)\n \tis_rela = false;\n \n-      symtab = GET_ELF_SYMBOLS (filedata, symsec, & num_syms);\n+      symtab = get_elf_symbols (filedata, symsec, & num_syms);\n \n       for (rp = relocs; rp < relocs + num_relocs; ++rp)\n \t{\n@@ -21185,16 +21184,6 @@ get_file_header (Filedata * filedata)\n       filedata->file_header.e_shstrndx  = BYTE_GET (ehdr64.e_shstrndx);\n     }\n \n-  if (filedata->file_header.e_shoff)\n-    {\n-      /* There may be some extensions in the first section header.  Don't\n-\t bomb if we can't read it.  */\n-      if (is_32bit_elf)\n-\tget_32bit_section_headers (filedata, true);\n-      else\n-\tget_64bit_section_headers (filedata, true);\n-    }\n-\n   return true;\n }\n \n@@ -21305,19 +21294,8 @@ open_file (const char * pathname, bool is_separate)\n   if (! get_file_header (filedata))\n     goto fail;\n \n-  if (filedata->file_header.e_shoff)\n-    {\n-      bool res;\n-\n-      /* Read the section headers again, this time for real.  */\n-      if (is_32bit_elf)\n-\tres = get_32bit_section_headers (filedata, false);\n-      else\n-\tres = get_64bit_section_headers (filedata, false);\n-\n-      if (!res)\n-\tgoto fail;\n-    }\n+  if (!get_section_headers (filedata, false))\n+    goto fail;\n \n   return filedata;\n \n@@ -21393,8 +21371,15 @@ process_object (Filedata * filedata)\n \n   initialise_dump_sects (filedata);\n \n+  /* There may be some extensions in the first section header.  Don't\n+     bomb if we can't read it.  */\n+  get_section_headers (filedata, true);\n+\n   if (! process_file_header (filedata))\n-    return false;\n+    {\n+      res = false;\n+      goto out;\n+    }\n \n   if (! process_section_headers (filedata))\n     {\n@@ -21490,6 +21475,7 @@ process_object (Filedata * filedata)\n   if (! process_arch_specific (filedata))\n     res = false;\n \n+ out:\n   free_filedata (filedata);\n \n   free_debug_memory ();"
    }
  ]
}