{
  "sha": "7559c21717237c565ff1604e7a99ce0a89ce4ebd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzU1OWMyMTcxNzIzN2M1NjVmZjE2MDRlN2E5OWNlMGE4OWNlNGViZA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-02-12T22:49:08Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-02-12T22:49:08Z"
    },
    "message": "Change booleans to bool in ARM's gdbarch_tdep\n\ngdb/ChangeLog:\n\n2020-02-12  Christian Biesinger  <cbiesinger@google.com>\n\n\t* arm-tdep.c (arm_gdbarch_init): Update.\n\t* arm-tdep.h (struct gdbarch_tdep) <have_fpa_registers,\n\thave_wmmx_registers, have_vfp_pseudos, have_neon_pseudos,\n\thave_neon, is_m>: Change to bool.",
    "tree": {
      "sha": "a4959ab44bc6eed94e3d2b494e116422ae755c46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4959ab44bc6eed94e3d2b494e116422ae755c46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7559c21717237c565ff1604e7a99ce0a89ce4ebd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7559c21717237c565ff1604e7a99ce0a89ce4ebd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7559c21717237c565ff1604e7a99ce0a89ce4ebd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7559c21717237c565ff1604e7a99ce0a89ce4ebd/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aeefc73cb2396dffb2e3cb0421ba02d5d671e4cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aeefc73cb2396dffb2e3cb0421ba02d5d671e4cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aeefc73cb2396dffb2e3cb0421ba02d5d671e4cf"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 27,
    "deletions": 18
  },
  "files": [
    {
      "sha": "d8f5ab17be39927264fd545d48bb5b1affb0bcdf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7559c21717237c565ff1604e7a99ce0a89ce4ebd",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-12  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* arm-tdep.c (arm_gdbarch_init): Update.\n+\t* arm-tdep.h (struct gdbarch_tdep) <have_fpa_registers,\n+\thave_wmmx_registers, have_vfp_pseudos, have_neon_pseudos,\n+\thave_neon, is_m>: Change to bool.\n+\n 2020-02-12  Christian Biesinger  <cbiesinger@google.com>\n \n \t* arm-tdep.c (arm_dump_tdep): Print more fields of tdep."
    },
    {
      "sha": "4efd7585a0eea42f41dc402c4b8f9765a32ed58d",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=7559c21717237c565ff1604e7a99ce0a89ce4ebd",
      "patch": "@@ -8870,11 +8870,13 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   enum arm_abi_kind arm_abi = arm_abi_global;\n   enum arm_float_model fp_model = arm_fp_model;\n   struct tdesc_arch_data *tdesc_data = NULL;\n-  int i, is_m = 0;\n-  int vfp_register_count = 0, have_vfp_pseudos = 0, have_neon_pseudos = 0;\n-  int have_wmmx_registers = 0;\n-  int have_neon = 0;\n-  int have_fpa_registers = 1;\n+  int i;\n+  bool is_m = false;\n+  int vfp_register_count = 0;\n+  bool have_vfp_pseudos = false, have_neon_pseudos = false;\n+  bool have_wmmx_registers = false;\n+  bool have_neon = false;\n+  bool have_fpa_registers = true;\n   const struct target_desc *tdesc = info.target_desc;\n \n   /* If we have an object to base this architecture on, try to determine\n@@ -8991,7 +8993,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t\t  && (attr_arch == TAG_CPU_ARCH_V6_M\n \t\t      || attr_arch == TAG_CPU_ARCH_V6S_M\n \t\t      || attr_profile == 'M'))\n-\t\tis_m = 1;\n+\t\tis_m = true;\n #endif\n \t    }\n \n@@ -9049,7 +9051,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t  if (feature == NULL)\n \t    return NULL;\n \t  else\n-\t    is_m = 1;\n+\t    is_m = true;\n \t}\n \n       tdesc_data = tdesc_data_alloc ();\n@@ -9095,7 +9097,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t    }\n \t}\n       else\n-\thave_fpa_registers = 0;\n+\thave_fpa_registers = false;\n \n       feature = tdesc_find_feature (tdesc,\n \t\t\t\t    \"org.gnu.gdb.xscale.iwmmxt\");\n@@ -9131,7 +9133,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t      return NULL;\n \t    }\n \n-\t  have_wmmx_registers = 1;\n+\t  have_wmmx_registers = true;\n \t}\n \n       /* If we have a VFP unit, check whether the single precision registers\n@@ -9172,7 +9174,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t    }\n \n \t  if (tdesc_unnumbered_register (feature, \"s0\") == 0)\n-\t    have_vfp_pseudos = 1;\n+\t    have_vfp_pseudos = true;\n \n \t  vfp_register_count = i;\n \n@@ -9194,9 +9196,9 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \t\t their type; otherwise (normally) provide them with\n \t\t the default type.  */\n \t      if (tdesc_unnumbered_register (feature, \"q0\") == 0)\n-\t\thave_neon_pseudos = 1;\n+\t\thave_neon_pseudos = true;\n \n-\t      have_neon = 1;\n+\t      have_neon = true;\n \t    }\n \t}\n     }"
    },
    {
      "sha": "629c3b8ac685f411fe7eba45eb37ded3ea9d2a82",
      "filename": "gdb/arm-tdep.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/arm-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7559c21717237c565ff1604e7a99ce0a89ce4ebd/gdb/arm-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.h?ref=7559c21717237c565ff1604e7a99ce0a89ce4ebd",
      "patch": "@@ -95,19 +95,19 @@ struct gdbarch_tdep\n \n   enum arm_float_model fp_model; /* Floating point calling conventions.  */\n \n-  int have_fpa_registers;\t/* Does the target report the FPA registers?  */\n-  int have_wmmx_registers;\t/* Does the target report the WMMX registers?  */\n+  bool have_fpa_registers;\t/* Does the target report the FPA registers?  */\n+  bool have_wmmx_registers;\t/* Does the target report the WMMX registers?  */\n   /* The number of VFP registers reported by the target.  It is zero\n      if VFP registers are not supported.  */\n   int vfp_register_count;\n-  int have_vfp_pseudos;\t\t/* Are we synthesizing the single precision\n+  bool have_vfp_pseudos;\t/* Are we synthesizing the single precision\n \t\t\t\t   VFP registers?  */\n-  int have_neon_pseudos;\t/* Are we synthesizing the quad precision\n+  bool have_neon_pseudos;\t/* Are we synthesizing the quad precision\n \t\t\t\t   NEON registers?  Requires\n \t\t\t\t   have_vfp_pseudos.  */\n-  int have_neon;\t\t/* Do we have a NEON unit?  */\n+  bool have_neon;\t\t/* Do we have a NEON unit?  */\n \n-  int is_m;\t\t\t/* Does the target follow the \"M\" profile.  */\n+  bool is_m;\t\t\t/* Does the target follow the \"M\" profile.  */\n   CORE_ADDR lowest_pc;\t\t/* Lowest address at which instructions \n \t\t\t\t   will appear.  */\n "
    }
  ]
}