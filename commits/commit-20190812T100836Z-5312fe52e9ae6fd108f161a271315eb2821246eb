{
  "sha": "5312fe52e9ae6fd108f161a271315eb2821246eb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTMxMmZlNTJlOWFlNmZkMTA4ZjE2MWEyNzEzMTVlYjI4MjEyNDZlYg==",
  "commit": {
    "author": {
      "name": "Barnaby Wilks",
      "email": "barnaby.wilks@arm.com",
      "date": "2019-08-12T10:08:36Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-12T10:08:36Z"
    },
    "message": "Add generic and ARM specific support for half-precision IEEE 754 floating point numbers to the assembler.\n\nHalf precision floating point numbers will be encoded using the IEEE 754\nhalf precision floating point format - 16 bits in total, 1 for sign, 5\nfor exponent and 10 bits of  mantissa.\n\nThis patch implements the float16 directive for both the IEEE 754 format\nand the Arm alternative format for the Arm backend.\n\nThe syntax of the directive is:\n\n  .float16 <0-n decimal numbers>\ne.g.\n  .float16 12.0\n  .float16 0.23, 433.1, 0.06\n\nThe Arm alternative format is almost identical to the IEEE 754 format,\nexcept that it doesn't encode for NaNs or Infinity (instead an exponent\nof 0x1F represents a normalized number in the range 65536 to 131008).\n\nThe alternative format is documented in the reference manual:\n\n  https://static.docs.arm.com/ddi0487/db/DDI0487D_b_armv8_arm.pdf?_ga=2.72318806.49764181.1561632697-999473562.1560847439\n\nWhich format is used is controlled by the .float16_format <format>\ndirective, where if <format> = ieee, then use the IEEE 754\nhalf-precision format else if <format> = alternative, then use the\nArm alternative format\n\nOr the format can be set on the command line via the -mfp16-format\noption that has a similar syntax.  -mfp16-format=<ieee|alternative>.\nThis also fixes the format and it cannot be changed by any directives.\n\nOnce the format has been set (either by the command line option or a directive) it cannot be changed,\nand any attempts to change it (i.e. with the float16_format directive) will result in a warning and the\nline being ignored.\n\nFor ELF targets the appropriate EABI attribute will be written out at the end of assembling\nif the format has been explicitly specified. If no format has been explicitly specified then no\nEABI attributes will be written.\n\nIf the format is not explicitly specified then any float16 directives are encoding using the IEEE 754-2008\nformat by default until the format is fixed or changed with the float16_format directive.\n\ngas\t* config/tc-arm.c (enum fp_16bit_format): Add enum to represent the 2 float16 encodings.\n\t(md_atof): Set precision for float16 type.\n\t(arm_is_largest_exponent_ok): Check for whether to encode with the IEEE or alternative\n\tformat.\n\t(set_fp16_format): Parse a float16_format directive.\n\t(arm_parse_fp16_opt): Parse the fp16-format command line option.\n\t(aeabi_set_public_attributes): For ELF encode the FP16 format EABI attribute.\n\t* config/tc-arm.h (TC_LARGEST_EXPONENT_IS_NORMAL): Macro that expands to\n\tarm_is_largest_exponent_ok.\n\t(arm_is_largest_exponent_ok): Add prototype for arm_is_largest_exponent_ok function.\n\t* doc/c-arm.texi: Add documentation for .float16, .float16_format and -mfp16-format=\n\t* testsuite/gas/arm/float16-bad.d: New test.\n\t* testsuite/gas/arm/float16-bad.l: New test.\n\t* testsuite/gas/arm/float16-bad.s: New test.\n\t* testsuite/gas/arm/float16-be.d: New test.\n\t* testsuite/gas/arm/float16-format-bad.d: New test.\n\t* testsuite/gas/arm/float16-format-bad.l: New test.\n\t* testsuite/gas/arm/float16-format-bad.s: New test.\n\t* testsuite/gas/arm/float16-format-opt-bad.d: New test.\n\t* testsuite/gas/arm/float16-format-opt-bad.l: New test.\n\t* testsuite/gas/arm/float16-le.d: New test.\n\t* testsuite/gas/arm/float16.s: New test.\n\t* testsuite/gas/arm/float16-eabi-alternative-format.d: New test.\n\t* testsuite/gas/arm/float16-eabi-ieee-format.d: New test.\n\t* testsuite/gas/arm/float16-eabi-no-format.d: New test.\n\t* testsuite/gas/arm/float16-eabi.s: New test.\n\n\t* config/atof-ieee.c (H_PRECISION): Macro for precision of float16\n\ttype.\n\t(atof_ieee): Set precision and exponent bits for encoding float16\n\ttypes.\n\t(gen_to_words): NaN and Infinity encoding for float16.\n\t(ieee_md_atof): Set precision for encoding float16 type.",
    "tree": {
      "sha": "71c72db1906cabeaa4dc817d090e1f1957508526",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71c72db1906cabeaa4dc817d090e1f1957508526"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5312fe52e9ae6fd108f161a271315eb2821246eb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5312fe52e9ae6fd108f161a271315eb2821246eb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5312fe52e9ae6fd108f161a271315eb2821246eb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5312fe52e9ae6fd108f161a271315eb2821246eb/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9bb9c115cd3d0b9de97e02cf2e861972010daa6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9bb9c115cd3d0b9de97e02cf2e861972010daa6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9bb9c115cd3d0b9de97e02cf2e861972010daa6f"
    }
  ],
  "stats": {
    "total": 332,
    "additions": 324,
    "deletions": 8
  },
  "files": [
    {
      "sha": "d7e0840ec8a153aba6ff6a4081ca0667569d933a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -1,3 +1,41 @@\n+2019-08-12  Barnaby Wilks  <barnaby.wilks@arm.com>\n+\n+\t* config/tc-arm.c (enum fp_16bit_format): Add enum to represent the 2 float16 encodings.\n+\t(md_atof): Set precision for float16 type.\n+\t(arm_is_largest_exponent_ok): Check for whether to encode with the IEEE or alternative\n+\tformat.\n+\t(set_fp16_format): Parse a float16_format directive.\n+\t(arm_parse_fp16_opt): Parse the fp16-format command line option.\n+\t(aeabi_set_public_attributes): For ELF encode the FP16 format EABI attribute.\n+\t* config/tc-arm.h (TC_LARGEST_EXPONENT_IS_NORMAL): Macro that expands to\n+\tarm_is_largest_exponent_ok.\n+\t(arm_is_largest_exponent_ok): Add prototype for arm_is_largest_exponent_ok function.\n+\t* doc/c-arm.texi: Add documentation for .float16, .float16_format and -mfp16-format=\n+\t* testsuite/gas/arm/float16-bad.d: New test.\n+\t* testsuite/gas/arm/float16-bad.l: New test.\n+\t* testsuite/gas/arm/float16-bad.s: New test.\n+\t* testsuite/gas/arm/float16-be.d: New test.\n+\t* testsuite/gas/arm/float16-format-bad.d: New test.\n+\t* testsuite/gas/arm/float16-format-bad.l: New test.\n+\t* testsuite/gas/arm/float16-format-bad.s: New test.\n+\t* testsuite/gas/arm/float16-format-opt-bad.d: New test.\n+\t* testsuite/gas/arm/float16-format-opt-bad.l: New test.\n+\t* testsuite/gas/arm/float16-le.d: New test.\n+\t* testsuite/gas/arm/float16.s: New test.\n+\t* testsuite/gas/arm/float16-eabi-alternative-format.d: New test.\n+\t* testsuite/gas/arm/float16-eabi-ieee-format.d: New test.\n+\t* testsuite/gas/arm/float16-eabi-no-format.d: New test.\n+\t* testsuite/gas/arm/float16-eabi.s: New test.\n+\n+2019-08-12  Barnaby Wilks  <barnaby.wilks@arm.com>\n+\n+\t* config/atof-ieee.c (H_PRECISION): Macro for precision of float16\n+\ttype.\n+\t(atof_ieee): Set precision and exponent bits for encoding float16\n+\ttypes.\n+\t(gen_to_words): NaN and Infinity encoding for float16.\n+\t(ieee_md_atof): Set precision for encoding float16 type.\n+\n 2019-08-12  Alan Modra  <amodra@gmail.com>\n \n \tPR 24851"
    },
    {
      "sha": "944c8a46ff486ddc4cedc7fe4679b2e1d862a5f5",
      "filename": "gas/config/atof-ieee.c",
      "status": "modified",
      "additions": 31,
      "deletions": 6,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/atof-ieee.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/atof-ieee.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/atof-ieee.c?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -26,6 +26,7 @@ extern FLONUM_TYPE generic_floating_point_number;\n /* Precision in LittleNums.  */\n /* Don't count the gap in the m68k extended precision format.  */\n #define MAX_PRECISION  5\n+#define H_PRECISION    1\n #define F_PRECISION    2\n #define D_PRECISION    4\n #define X_PRECISION    5\n@@ -190,6 +191,12 @@ atof_ieee (char *str,\t\t\t/* Text to convert to binary.  */\n \n   switch (what_kind)\n     {\n+    case 'h':\n+    case 'H':\n+      precision = H_PRECISION;\n+      exponent_bits = 5;\n+      break;\n+\n     case 'f':\n     case 'F':\n     case 's':\n@@ -283,8 +290,13 @@ gen_to_words (LITTLENUM_TYPE *words, int precision, long exponent_bits)\n   if (generic_floating_point_number.sign == 0)\n     {\n       if (TC_LARGEST_EXPONENT_IS_NORMAL (precision))\n-\tas_warn (_(\"NaNs are not supported by this target\\n\"));\n-      if (precision == F_PRECISION)\n+\tas_warn (_(\"NaNs are not supported by this target\"));\n+\n+      if (precision == H_PRECISION)\n+\t{\n+\t  words[0] = 0x7fff;\n+\t}\n+      else if (precision == F_PRECISION)\n \t{\n \t  words[0] = 0x7fff;\n \t  words[1] = 0xffff;\n@@ -322,10 +334,14 @@ gen_to_words (LITTLENUM_TYPE *words, int precision, long exponent_bits)\n   else if (generic_floating_point_number.sign == 'P')\n     {\n       if (TC_LARGEST_EXPONENT_IS_NORMAL (precision))\n-\tas_warn (_(\"Infinities are not supported by this target\\n\"));\n+\tas_warn (_(\"Infinities are not supported by this target\"));\n \n       /* +INF:  Do the right thing.  */\n-      if (precision == F_PRECISION)\n+      if (precision == H_PRECISION)\n+\t{\n+\t  words[0] = 0x7c00;\n+\t}\n+      else if (precision == F_PRECISION)\n \t{\n \t  words[0] = 0x7f80;\n \t  words[1] = 0;\n@@ -363,10 +379,14 @@ gen_to_words (LITTLENUM_TYPE *words, int precision, long exponent_bits)\n   else if (generic_floating_point_number.sign == 'N')\n     {\n       if (TC_LARGEST_EXPONENT_IS_NORMAL (precision))\n-\tas_warn (_(\"Infinities are not supported by this target\\n\"));\n+\tas_warn (_(\"Infinities are not supported by this target\"));\n \n       /* Negative INF.  */\n-      if (precision == F_PRECISION)\n+      if (precision == H_PRECISION)\n+\t{\n+\t  words[0] = 0xfc00;\n+\t}\n+      else if (precision == F_PRECISION)\n \t{\n \t  words[0] = 0xff80;\n \t  words[1] = 0x0;\n@@ -721,6 +741,11 @@ ieee_md_atof (int type,\n     {\n       switch (type)\n \t{\n+\tcase 'H':\n+\tcase 'h':\n+\t  prec = H_PRECISION;\n+\t  break;\n+\n \tcase 'f':\n \tcase 'F':\n \tcase 's':"
    },
    {
      "sha": "714121b0c2b4705904ecf3700beffc9b6d6622db",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 94,
      "deletions": 2,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -1037,7 +1037,7 @@ const char EXP_CHARS[] = \"eE\";\n /* As in 0f12.456  */\n /* or\t 0d1.2345e12  */\n \n-const char FLT_CHARS[] = \"rRsSfFdDxXeEpP\";\n+const char FLT_CHARS[] = \"rRsSfFdDxXeEpPHh\";\n \n /* Prefix characters that indicate the start of an immediate\n    value.  */\n@@ -1047,6 +1047,16 @@ const char FLT_CHARS[] = \"rRsSfFdDxXeEpP\";\n \n #define skip_whitespace(str)  do { if (*(str) == ' ') ++(str); } while (0)\n \n+enum fp_16bit_format\n+{\n+  ARM_FP16_FORMAT_IEEE\t\t= 0x1,\n+  ARM_FP16_FORMAT_ALTERNATIVE\t= 0x2,\n+  ARM_FP16_FORMAT_DEFAULT\t= 0x3\n+};\n+\n+static enum fp_16bit_format fp16_format = ARM_FP16_FORMAT_DEFAULT;\n+\n+\n static inline int\n skip_past_char (char ** str, char c)\n {\n@@ -1188,6 +1198,11 @@ md_atof (int type, char * litP, int * sizeP)\n \n   switch (type)\n     {\n+    case 'H':\n+    case 'h':\n+      prec = 1;\n+      break;\n+\n     case 'f':\n     case 'F':\n     case 's':\n@@ -4925,6 +4940,55 @@ pe_directive_secrel (int dummy ATTRIBUTE_UNUSED)\n }\n #endif /* TE_PE */\n \n+int\n+arm_is_largest_exponent_ok (int precision)\n+{\n+  /* precision == 1 ensures that this will only return\n+     true for 16 bit floats.  */\n+  return (precision == 1) && (fp16_format == ARM_FP16_FORMAT_ALTERNATIVE);\n+}\n+\n+static void\n+set_fp16_format (int dummy ATTRIBUTE_UNUSED)\n+{\n+  char saved_char;\n+  char* name;\n+  enum fp_16bit_format new_format;\n+\n+  new_format = ARM_FP16_FORMAT_DEFAULT;\n+\n+  name = input_line_pointer;\n+  while (*input_line_pointer && !ISSPACE (*input_line_pointer))\n+    input_line_pointer++;\n+\n+  saved_char = *input_line_pointer;\n+  *input_line_pointer = 0;\n+\n+  if (strcasecmp (name, \"ieee\") == 0)\n+    new_format = ARM_FP16_FORMAT_IEEE;\n+  else if (strcasecmp (name, \"alternative\") == 0)\n+    new_format = ARM_FP16_FORMAT_ALTERNATIVE;\n+  else\n+    {\n+      as_bad (_(\"unrecognised float16 format \\\"%s\\\"\"), name);\n+      goto cleanup;\n+    }\n+\n+  /* Only set fp16_format if it is still the default (aka not already\n+     been set yet).  */\n+  if (fp16_format == ARM_FP16_FORMAT_DEFAULT)\n+    fp16_format = new_format;\n+  else\n+    {\n+      if (new_format != fp16_format)\n+\tas_warn (_(\"float16 format cannot be set more than once, ignoring.\"));\n+    }\n+\n+cleanup:\n+  *input_line_pointer = saved_char;\n+  ignore_rest_of_line ();\n+}\n+\n /* This table describes all the machine specific pseudo-ops the assembler\n    has to support.  The fields are:\n      pseudo-op name without dot\n@@ -5002,9 +5066,12 @@ const pseudo_typeS md_pseudo_table[] =\n   {\"asmfunc\",      s_ccs_asmfunc,    0},\n   {\"endasmfunc\",   s_ccs_endasmfunc, 0},\n \n+  {\"float16\", float_cons, 'h' },\n+  {\"float16_format\", set_fp16_format, 0 },\n+\n   { 0, 0, 0 }\n };\n-\f\n+\n /* Parser functions used exclusively in instruction operands.  */\n \n /* Generic immediate-value read function for use in insn parsing.\n@@ -31239,6 +31306,22 @@ arm_parse_extension (const char *str, const arm_feature_set *opt_set,\n   return TRUE;\n }\n \n+static bfd_boolean\n+arm_parse_fp16_opt (const char *str)\n+{\n+  if (strcasecmp (str, \"ieee\") == 0)\n+    fp16_format = ARM_FP16_FORMAT_IEEE;\n+  else if (strcasecmp (str, \"alternative\") == 0)\n+    fp16_format = ARM_FP16_FORMAT_ALTERNATIVE;\n+  else\n+    {\n+      as_bad (_(\"unrecognised float16 format \\\"%s\\\"\"), str);\n+      return FALSE;\n+    }\n+\n+  return TRUE;\n+}\n+\n static bfd_boolean\n arm_parse_cpu (const char *str)\n {\n@@ -31430,6 +31513,12 @@ struct arm_long_option_table arm_long_opts[] =\n    arm_parse_it_mode, NULL},\n   {\"mccs\", N_(\"\\t\\t\\t  TI CodeComposer Studio syntax compatibility mode\"),\n    arm_ccs_mode, NULL},\n+  {\"mfp16-format=\",\n+   N_(\"[ieee|alternative]\\n\\\n+                          set the encoding for half precision floating point \"\n+\t\t\t  \"numbers to IEEE\\n\\\n+                          or Arm alternative format.\"),\n+   arm_parse_fp16_opt, NULL },\n   {NULL, NULL, 0, NULL}\n };\n \n@@ -32011,6 +32100,9 @@ aeabi_set_public_attributes (void)\n     virt_sec |= 2;\n   if (virt_sec != 0)\n     aeabi_set_attribute_int (Tag_Virtualization_use, virt_sec);\n+\n+  if (fp16_format != ARM_FP16_FORMAT_DEFAULT)\n+    aeabi_set_attribute_int (Tag_ABI_FP_16bit_format, fp16_format);\n }\n \n /* Post relaxation hook.  Recompute ARM attributes now that relaxation is"
    },
    {
      "sha": "8a73bebe6c5b5a027242d02f18b6d51273abcacb",
      "filename": "gas/config/tc-arm.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/tc-arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/config/tc-arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.h?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -385,3 +385,7 @@ extern char arm_line_separator_chars[];\n \n #define TC_EQUAL_IN_INSN(c, s) arm_tc_equal_in_insn ((c), (s))\n extern bfd_boolean arm_tc_equal_in_insn (int, char *);\n+\n+#define TC_LARGEST_EXPONENT_IS_NORMAL(PRECISION) \\\n+\tarm_is_largest_exponent_ok ((PRECISION))\n+int arm_is_largest_exponent_ok (int precision);"
    },
    {
      "sha": "481eddf0cfe6a4483717fab9dd21b3c185340fc0",
      "filename": "gas/doc/c-arm.texi",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/doc/c-arm.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/doc/c-arm.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-arm.texi?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -493,6 +493,22 @@ The default is dependent on the processor selected.  For Architecture 5 or\n later, the default is to assemble for VFP instructions; for earlier\n architectures the default is to assemble for FPA instructions.\n \n+@cindex @code{-mfp16-format=} command-line option\n+@item -mfp16-format=@var{format}\n+This option specifies the half-precision floating point format to use\n+when assembling floating point numbers emitted by the @code{.float16}\n+directive.\n+The following format options are recognized:\n+@code{ieee},\n+@code{alternative}.\n+If @code{ieee} is specified then the IEEE 754-2008 half-precision floating\n+point format is used, if @code{alternative} is specified then the Arm\n+alternative half-precision format is used. If this option is set on the\n+command line then the format is fixed and cannot be changed with\n+the @code{float16_format} directive. If this value is not set then\n+the IEEE 754-2008 format is used until the format is explicitly set with\n+the @code{float16_format} directive.\n+\n @cindex @code{-mthumb} command-line option, ARM\n @item -mthumb\n This option specifies that the assembler should start assembling Thumb\n@@ -934,6 +950,23 @@ or ABIs.\n \n @c FFFFFFFFFFFFFFFFFFFFFFFFFF\n \n+@cindex @code{.float16} directive, ARM\n+@item .float16 @var{value [,...,value_n]}\n+Place the half precision floating point representation of one or more\n+floating-point values into the current section. The exact format of the\n+encoding is specified by @code{.float16_format}. If the format has not\n+been explicitly set yet (either via the @code{.float16_format} directive or\n+the command line option) then the IEEE 754-2008 format is used.\n+\n+@cindex @code{.float16_format} directive, ARM\n+@item .float16_format @var{format}\n+Set the format to use when encoding float16 values emitted by\n+the @code{.float16} directive.\n+Once the format has been set it cannot be changed.\n+@code{format} should be one of the following: @code{ieee} (encode in\n+the IEEE 754-2008 half precision format) or @code{alternative} (encode in\n+the Arm alternative half precision format).\n+\n @anchor{arm_fnend}\n @cindex @code{.fnend} directive, ARM\n @item .fnend"
    },
    {
      "sha": "8eac0af5cbb8671e61f18939d723599db4f948a6",
      "filename": "gas/testsuite/gas/arm/float16-bad.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-bad.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,3 @@\n+# name: Invalid float16 literals (IEEE 754 & Alternative)\n+# source: float16-bad.s\n+# error_output: float16-bad.l"
    },
    {
      "sha": "83978b7571cac2644379d3ca1896f609ba87ce30",
      "filename": "gas/testsuite/gas/arm/float16-bad.l",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-bad.l?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,10 @@\n+[^:]*: Assembler messages:\n+[^:]*:2: Error: cannot create floating-point number\n+[^:]*:3: Error: cannot create floating-point number\n+[^:]*:4: Error: cannot create floating-point number\n+[^:]*:7: Warning: NaNs are not supported by this target\n+[^:]*:8: Warning: NaNs are not supported by this target\n+[^:]*:9: Warning: NaNs are not supported by this target\n+[^:]*:11: Warning: Infinities are not supported by this target\n+[^:]*:12: Warning: Infinities are not supported by this target\n+[^:]*:13: Warning: Infinities are not supported by this target"
    },
    {
      "sha": "6f09073b83ce90e0d342ac0364aba1813445f97b",
      "filename": "gas/testsuite/gas/arm/float16-bad.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-bad.s?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,13 @@\n+.data\n+\t.float16 9999999999999.0\n+\t.float16 -999999999999.0\n+\t.float16 131008.0\n+\n+.float16_format alternative\n+\t.float16 NaN\n+\t.float16 -NaN\n+\t.float16 +NaN\n+\n+\t.float16 Inf\n+\t.float16 -Inf\n+\t.float16 +Inf"
    },
    {
      "sha": "e31d9fbf432ca7e8f30896acb90184e4ebe949cd",
      "filename": "gas/testsuite/gas/arm/float16-be.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-be.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-be.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-be.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,11 @@\n+# name: Big endian float16 literals (IEEE 754 & Alternative)\n+# source: float16.s\n+# objdump: -s --section=.data\n+# as: -mbig-endian\n+\n+.*: +file format .*arm.*\n+\n+Contents of section \\.data:\n+ 0000 4a002fdf 1c197bff 000103ff 04003c00.*\n+ 0010 3c017fff 7c00fc00 00008000 bc00bbe7.*\n+ 0020 fbff4200 4a00603e 38567fff ffff7204.*"
    },
    {
      "sha": "0729a5ccc215dfd38955b0e7d78d17c78155c0f7",
      "filename": "gas/testsuite/gas/arm/float16-eabi-alternative-format.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-alternative-format.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-alternative-format.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-eabi-alternative-format.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,10 @@\n+# name: Tag_ABI_FP_16bit_format EABI attribute written for Arm alternative format.\n+# readelf: -A\n+# notarget: *-*pe *-*-wince\n+# source: float16-eabi.s\n+# as: -mfp16-format=alternative\n+Attribute Section: aeabi\n+File Attributes\n+  Tag_ARM_ISA_use: Yes\n+  Tag_THUMB_ISA_use: Thumb-1\n+  Tag_ABI_FP_16bit_format: Alternative Format"
    },
    {
      "sha": "d02ed73fb00a76b4e0b2adf87e409bad5de7157f",
      "filename": "gas/testsuite/gas/arm/float16-eabi-ieee-format.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-ieee-format.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-ieee-format.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-eabi-ieee-format.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,10 @@\n+# name: Tag_ABI_FP_16bit_format written for IEEE float16 format.\n+# readelf: -A\n+# notarget: *-*pe *-*wince\n+# source: float16-eabi.s\n+# as: -mfp16-format=ieee\n+Attribute Section: aeabi\n+File Attributes\n+  Tag_ARM_ISA_use: Yes\n+  Tag_THUMB_ISA_use: Thumb-1\n+  Tag_ABI_FP_16bit_format: IEEE 754"
    },
    {
      "sha": "0d54f844218dfae227ace986aa11a92cc89e7161",
      "filename": "gas/testsuite/gas/arm/float16-eabi-no-format.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-no-format.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi-no-format.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-eabi-no-format.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,8 @@\n+# name: Tag_ABI_FP_16bit_format EABI attribute not written when format not specified\n+# readelf: -A\n+# notarget: *-*pe *-*-wince\n+# source: float16-eabi.s\n+Attribute Section: aeabi\n+File Attributes\n+  Tag_ARM_ISA_use: Yes\n+  Tag_THUMB_ISA_use: Thumb-1"
    },
    {
      "sha": "91836378efca128e0add894e150304a75676565b",
      "filename": "gas/testsuite/gas/arm/float16-eabi.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-eabi.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-eabi.s?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,2 @@\n+.float16 10.1\n+.float16 0.5"
    },
    {
      "sha": "38da287a1a8064e8ad67cc192644b7f08968f0da",
      "filename": "gas/testsuite/gas/arm/float16-format-bad.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-format-bad.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,3 @@\n+# name: Invalid float16 formats\n+# source: float16-format-bad.s\n+# error_output: float16-format-bad.l"
    },
    {
      "sha": "1f2356fcf1304e0b5ac021fc93a23a84affe2b13",
      "filename": "gas/testsuite/gas/arm/float16-format-bad.l",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-format-bad.l?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,5 @@\n+[^:]*: Assembler messages:\n+[^:]*:2: Warning: float16 format cannot be set more than once, ignoring.\n+[^:]*:3: Error: unrecognised float16 format \"monkeys\"\n+[^:]*:4: Error: unrecognised float16 format \"...\"\n+[^:]*:5: Error: unrecognised float16 format \"\""
    },
    {
      "sha": "69e99e5496efd8b6483650dca83e6b5a3471c5a3",
      "filename": "gas/testsuite/gas/arm/float16-format-bad.s",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-format-bad.s?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,5 @@\n+.float16_format ieee\n+.float16_format alternative\n+.float16_format monkeys\n+.float16_format ...\n+.float16_format"
    },
    {
      "sha": "861125800da501da31681b5fd4621a76eca1585f",
      "filename": "gas/testsuite/gas/arm/float16-format-opt-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-opt-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-opt-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-format-opt-bad.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,4 @@\n+# name: Invalid combination of command line arguments and directives\n+# source: float16.s\n+# error_output: float16-format-opt-bad.l\n+# as: -mfp16-format=ieee"
    },
    {
      "sha": "6743c93ba6953f46c86cbff2e12ba867ca7b689a",
      "filename": "gas/testsuite/gas/arm/float16-format-opt-bad.l",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-opt-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-format-opt-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-format-opt-bad.l?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,4 @@\n+[^:]*: Assembler messages:\n+[^:]*:21: Warning: float16 format cannot be set more than once, ignoring.\n+[^:]*:23: Error: cannot create floating-point number\n+[^:]*:24: Error: cannot create floating-point number"
    },
    {
      "sha": "c1fe7c20dc6dfe1dd6f4e27d9fa2186676488c59",
      "filename": "gas/testsuite/gas/arm/float16-le.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-le.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16-le.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16-le.d?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,11 @@\n+# name: Little endian float16 literals (IEEE 754 & Alternative)\n+# source: float16.s\n+# objdump: -s --section=.data\n+# as: -mlittle-endian\n+\n+.*: +file format .*arm.*\n+\n+Contents of section \\.data:\n+ 0000 004adf2f 191cff7b 0100ff03 0004003c.*\n+ 0010 013cff7f 007c00fc 00000080 00bce7bb.*\n+ 0020 fffb0042 004a3e60 5638ff7f ffff0472.*"
    },
    {
      "sha": "3a295c593c59325fc85a20a9d37ac898a058588e",
      "filename": "gas/testsuite/gas/arm/float16.s",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5312fe52e9ae6fd108f161a271315eb2821246eb/gas/testsuite/gas/arm/float16.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/float16.s?ref=5312fe52e9ae6fd108f161a271315eb2821246eb",
      "patch": "@@ -0,0 +1,25 @@\n+.data\n+\t.float16 12.0\n+\t.float16 0.123\n+\t.float16 0.004\n+\t.float16 65504\n+\t.float16 5.9605e-8\n+\t.float16 6.0976e-5\n+\t.float16 6.1035e-5\n+\t.float16 1\n+\t.float16 1.001\n+\t.float16 NaN\n+\t.float16 +Inf\n+\t.float16 -Inf\n+\t.float16 +0\n+\t.float16 -0\n+\t.float16 -1\n+\t.float16 -0.98765\n+\t.float16 -65504\n+\t.float16 3.0, 12.0, 543.123\n+\n+.float16_format alternative\n+\t.float16 0.542\n+\t.float16 131008.0\n+\t.float16 -131008.0\n+\t.float16 12323.1234"
    }
  ]
}