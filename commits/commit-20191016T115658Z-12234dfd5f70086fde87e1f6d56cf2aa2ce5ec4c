{
  "sha": "12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTIyMzRkZmQ1ZjcwMDg2ZmRlODdlMWY2ZDU2Y2YyYWEyY2U1ZWM0Yw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-16T11:56:58Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-16T11:56:58Z"
    },
    "message": "Fix potential illegal memory access when disassembling corrupt RX binaries.\n\nopcodes * rx-dis.c (get_register_name): New function.  Provides safe\n\taccess to name array.\n\t(get_condition_name, get_flag_name, get_double_register_name)\n\t(get_double_register_high_name, get_double_register_low_name)\n\t(get_double_control_register_name, get_double_condition_name):\n\tLikewise.\n\t(print_insn_rx): Use the accessor functions.",
    "tree": {
      "sha": "028cf48e4d7c71d06166f1290b3e321caccc6f9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/028cf48e4d7c71d06166f1290b3e321caccc6f9d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dfde93ab8ccdea59f667204bb93056c95a83dfda",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfde93ab8ccdea59f667204bb93056c95a83dfda",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dfde93ab8ccdea59f667204bb93056c95a83dfda"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 92,
    "deletions": 15
  },
  "files": [
    {
      "sha": "fad7bfcd7c6ecbf147182609d4a2ea1191198b08",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
      "patch": "@@ -1,3 +1,13 @@\n+2019-10-16  Nick Clifton  <nickc@redhat.com>\n+\n+\t* rx-dis.c (get_register_name): New function.  Provides safe\n+\taccess to name array.\n+\t(get_condition_name, get_flag_name, get_double_register_name)\n+\t(get_double_register_high_name, get_double_register_low_name)\n+\t(get_double_control_register_name, get_double_condition_name):\n+\tLikewise.\n+\t(print_insn_rx): Use the accessor functions.\n+\n 2019-10-09  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25041"
    },
    {
      "sha": "18bc170200d3e34063a6b2c6f246cf4f59ca86dd",
      "filename": "opcodes/rx-dis.c",
      "status": "modified",
      "additions": 82,
      "deletions": 15,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c/opcodes/rx-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c/opcodes/rx-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/rx-dis.c?ref=12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
      "patch": "@@ -26,6 +26,8 @@\n #include \"bfd.h\"\n #include \"dis-asm.h\"\n #include \"opcode/rx.h\"\n+#include \"libiberty.h\"\n+#include \"opintl.h\"\n \n #include <setjmp.h>\n \n@@ -76,10 +78,10 @@ static char const * opsize_names[RX_MAX_SIZE] =\n \n static char const * register_names[] =\n {\n-  /* general registers */\n+  /* General registers.  */\n   \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\",\n   \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\n-  /* control register */\n+  /* Control registers.  */\n   \"psw\", \"pc\", \"usp\", \"fpsw\", NULL, NULL, NULL, NULL,\n   \"bpsw\", \"bpc\", \"isp\", \"fintv\", \"intb\", \"extb\", NULL, NULL,\n   \"a0\", \"a1\", NULL, NULL, NULL, NULL, NULL, NULL,\n@@ -88,7 +90,7 @@ static char const * register_names[] =\n \n static char const * condition_names[] =\n {\n-  /* condition codes */\n+  /* Condition codes.  */\n   \"eq\", \"ne\", \"c\", \"nc\", \"gtu\", \"leu\", \"pz\", \"n\",\n   \"ge\", \"lt\", \"gt\", \"le\", \"o\", \"no\", \"<invalid>\", \"<invalid>\"\n };\n@@ -129,6 +131,71 @@ static const char * double_condition_names[] =\n   \"\", \"un\", \"eq\", \"\", \"lt\", \"\", \"le\",\n };\n \n+static inline const char *\n+get_register_name (unsigned int reg)\n+{\n+  if (reg < ARRAY_SIZE (register_names))\n+    return register_names[reg];\n+  return _(\"<inavlid register number>\");\n+}\n+\n+static inline const char *\n+get_condition_name (unsigned int cond)\n+{\n+  if (cond < ARRAY_SIZE (condition_names))\n+    return condition_names[cond];\n+  return _(\"<inavlid condition code>\");\n+}\n+\n+static inline const char *\n+get_flag_name (unsigned int flag)\n+{\n+  if (flag < ARRAY_SIZE (flag_names))\n+    return flag_names[flag];\n+  return _(\"<inavlid flag>\");\n+}\n+\n+static inline const char *\n+get_double_register_name (unsigned int reg)\n+{\n+  if (reg < ARRAY_SIZE (double_register_names))\n+    return double_register_names[reg];\n+  return _(\"<inavlid register number>\");\n+}\n+\n+static inline const char *\n+get_double_register_high_name (unsigned int reg)\n+{\n+  if (reg < ARRAY_SIZE (double_register_high_names))\n+    return double_register_high_names[reg];\n+  return _(\"<inavlid register number>\");\n+}\n+\n+static inline const char *\n+get_double_register_low_name (unsigned int reg)\n+{\n+  if (reg < ARRAY_SIZE (double_register_low_names))\n+    return double_register_low_names[reg];\n+  return _(\"<inavlid register number>\");\n+}\n+\n+static inline const char *\n+get_double_control_register_name (unsigned int reg)\n+{\n+  if (reg < ARRAY_SIZE (double_control_register_names))\n+    return double_control_register_names[reg];\n+  return _(\"<inavlid register number>\");\n+}\n+\n+static inline const char *\n+get_double_condition_name (unsigned int cond)\n+{\n+  if (cond < ARRAY_SIZE (double_condition_names))\n+    return double_condition_names[cond];\n+  return _(\"<inavlid condition code>\");\n+}\n+\n+\n int\n print_insn_rx (bfd_vma addr, disassemble_info * dis)\n {\n@@ -255,40 +322,40 @@ print_insn_rx (bfd_vma addr, disassemble_info * dis)\n \t\t    break;\n \t\t  case RX_Operand_Register:\n \t\t  case RX_Operand_TwoReg:\n-\t\t    PR (PS, \"%s\", register_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Indirect:\n-\t\t    PR (PS, \"%d[%s]\", oper->addend, register_names[oper->reg]);\n+\t\t    PR (PS, \"%d[%s]\", oper->addend, get_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Zero_Indirect:\n-\t\t    PR (PS, \"[%s]\", register_names[oper->reg]);\n+\t\t    PR (PS, \"[%s]\", get_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Postinc:\n-\t\t    PR (PS, \"[%s+]\", register_names[oper->reg]);\n+\t\t    PR (PS, \"[%s+]\", get_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Predec:\n-\t\t    PR (PS, \"[-%s]\", register_names[oper->reg]);\n+\t\t    PR (PS, \"[-%s]\", get_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Condition:\n-\t\t    PR (PS, \"%s\", condition_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_condition_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_Flag:\n-\t\t    PR (PS, \"%s\", flag_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_flag_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_DoubleReg:\n-\t\t    PR (PS, \"%s\", double_register_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_double_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_DoubleRegH:\n-\t\t    PR (PS, \"%s\", double_register_high_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_double_register_high_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_DoubleRegL:\n-\t\t    PR (PS, \"%s\", double_register_low_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_double_register_low_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_DoubleCReg:\n-\t\t    PR (PS, \"%s\", double_control_register_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_double_control_register_name (oper->reg));\n \t\t    break;\n \t\t  case RX_Operand_DoubleCond:\n-\t\t    PR (PS, \"%s\", double_condition_names[oper->reg]);\n+\t\t    PR (PS, \"%s\", get_double_condition_name (oper->reg));\n \t\t    break;\n \t\t  default:\n \t\t    PR (PS, \"[???]\");"
    }
  ]
}