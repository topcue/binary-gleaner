{
  "sha": "347212b81930f9afb9e2885656f897cf3821881c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzQ3MjEyYjgxOTMwZjlhZmI5ZTI4ODU2NTZmODk3Y2YzODIxODgxYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-17T20:16:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-17T20:16:06Z"
    },
    "message": "Change dwarf2_cu marking to use methods\n\nThis changes the dwarf2_cu marking functions to be methods on\ndwarf2_cu.\n\ngdb/ChangeLog\n2021-05-17  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (maybe_queue_comp_unit)\n\t(dwarf2_per_objfile::age_comp_units): Update.\n\t(dwarf2_add_dependence, dwarf2_mark_helper, dwarf2_mark): Move to\n\tdwarf2_cu methods.\n\t* dwarf2/cu.h (struct dwarf2_cu) <mark, clear_mark, is_marked,\n\tadd_dependence>: New methods.\n\t<m_dependencies>: Add \"m_\" prefix.  Now private.\n\t<m_mark>: Add \"m_\" prefix.\n\t* dwarf2/cu.c (dwarf2_cu::dwarf2_cu): Update.\n\t(dwarf2_mark_helper): New function.\n\t(dwarf2_cu::mark, dwarf2_cu::add_dependence): New methods.",
    "tree": {
      "sha": "54c94545cd1180f0b7079a0f6a12d7d09a9fa368",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54c94545cd1180f0b7079a0f6a12d7d09a9fa368"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/347212b81930f9afb9e2885656f897cf3821881c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/347212b81930f9afb9e2885656f897cf3821881c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/347212b81930f9afb9e2885656f897cf3821881c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/347212b81930f9afb9e2885656f897cf3821881c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "839118f920751fc9fd06463f6820c40f3b0baabc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/839118f920751fc9fd06463f6820c40f3b0baabc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/839118f920751fc9fd06463f6820c40f3b0baabc"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 93,
    "deletions": 81
  },
  "files": [
    {
      "sha": "7ca4738be02bd6e50f214fea47e4044e61713001",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/347212b81930f9afb9e2885656f897cf3821881c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/347212b81930f9afb9e2885656f897cf3821881c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=347212b81930f9afb9e2885656f897cf3821881c",
      "patch": "@@ -1,3 +1,17 @@\n+2021-05-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (maybe_queue_comp_unit)\n+\t(dwarf2_per_objfile::age_comp_units): Update.\n+\t(dwarf2_add_dependence, dwarf2_mark_helper, dwarf2_mark): Move to\n+\tdwarf2_cu methods.\n+\t* dwarf2/cu.h (struct dwarf2_cu) <mark, clear_mark, is_marked,\n+\tadd_dependence>: New methods.\n+\t<m_dependencies>: Add \"m_\" prefix.  Now private.\n+\t<m_mark>: Add \"m_\" prefix.\n+\t* dwarf2/cu.c (dwarf2_cu::dwarf2_cu): Update.\n+\t(dwarf2_mark_helper): New function.\n+\t(dwarf2_cu::mark, dwarf2_cu::add_dependence): New methods.\n+\n 2021-05-17  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_cu::addr_sized_int_type)"
    },
    {
      "sha": "2451df4f5b63f1970b2e8a97bb36f6cc6ddfbcf6",
      "filename": "gdb/dwarf2/cu.c",
      "status": "modified",
      "additions": 51,
      "deletions": 1,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/cu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/cu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/cu.c?ref=347212b81930f9afb9e2885656f897cf3821881c",
      "patch": "@@ -27,7 +27,7 @@ dwarf2_cu::dwarf2_cu (dwarf2_per_cu_data *per_cu,\n \t\t      dwarf2_per_objfile *per_objfile)\n   : per_cu (per_cu),\n     per_objfile (per_objfile),\n-    mark (false),\n+    m_mark (false),\n     has_loclist (false),\n     checked_producer (false),\n     producer_is_gxx_lt_4_6 (false),\n@@ -87,3 +87,53 @@ dwarf2_cu::addr_type () const\n   addr_type = addr_sized_int_type (addr_type->is_unsigned ());\n   return addr_type;\n }\n+\n+/* A hashtab traversal function that marks the dependent CUs.  */\n+\n+static int\n+dwarf2_mark_helper (void **slot, void *data)\n+{\n+  dwarf2_per_cu_data *per_cu = (dwarf2_per_cu_data *) *slot;\n+  dwarf2_per_objfile *per_objfile = (dwarf2_per_objfile *) data;\n+  dwarf2_cu *cu = per_objfile->get_cu (per_cu);\n+\n+  /* cu->m_dependencies references may not yet have been ever read if\n+     QUIT aborts reading of the chain.  As such dependencies remain\n+     valid it is not much useful to track and undo them during QUIT\n+     cleanups.  */\n+  if (cu != nullptr)\n+    cu->mark ();\n+  return 1;\n+}\n+\n+/* See dwarf2/cu.h.  */\n+\n+void\n+dwarf2_cu::mark ()\n+{\n+  if (!m_mark)\n+    {\n+      m_mark = true;\n+      if (m_dependencies != nullptr)\n+\thtab_traverse (m_dependencies, dwarf2_mark_helper, per_objfile);\n+    }\n+}\n+\n+/* See dwarf2/cu.h.  */\n+\n+void\n+dwarf2_cu::add_dependence (struct dwarf2_per_cu_data *ref_per_cu)\n+{\n+  void **slot;\n+\n+  if (m_dependencies == nullptr)\n+    m_dependencies\n+      = htab_create_alloc_ex (5, htab_hash_pointer, htab_eq_pointer,\n+\t\t\t      NULL, &comp_unit_obstack,\n+\t\t\t      hashtab_obstack_allocate,\n+\t\t\t      dummy_obstack_deallocate);\n+\n+  slot = htab_find_slot (m_dependencies, ref_per_cu, INSERT);\n+  if (*slot == nullptr)\n+    *slot = ref_per_cu;\n+}"
    },
    {
      "sha": "83a4aac3f08fd46e17adc91518d3728df346609a",
      "filename": "gdb/dwarf2/cu.h",
      "status": "modified",
      "additions": 24,
      "deletions": 6,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/cu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/cu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/cu.h?ref=347212b81930f9afb9e2885656f897cf3821881c",
      "patch": "@@ -78,6 +78,24 @@ struct dwarf2_cu\n      the integer is unsigned or not.  */\n   struct type *addr_sized_int_type (bool unsigned_p) const;\n \n+  /* Mark this CU as used.  */\n+  void mark ();\n+\n+  /* Clear the mark on this CU.  */\n+  void clear_mark ()\n+  {\n+    m_mark = false;\n+  }\n+\n+  /* True if this CU has been marked.  */\n+  bool is_marked () const\n+  {\n+    return m_mark;\n+  }\n+\n+  /* Add a dependence relationship from this cu to REF_PER_CU.  */\n+  void add_dependence (struct dwarf2_per_cu_data *ref_per_cu);\n+\n   /* The header of the compilation unit.  */\n   struct comp_unit_head header {};\n \n@@ -95,6 +113,11 @@ struct dwarf2_cu\n      symbols are being read.  */\n   std::unique_ptr<buildsym_compunit> m_builder;\n \n+  /* A set of pointers to dwarf2_per_cu_data objects for compilation\n+     units referenced by this one.  Only set during full symbol processing;\n+     partial symbol tables do not have dependencies.  */\n+  htab_t m_dependencies = nullptr;\n+\n public:\n   /* The generic symbol table building routines have separate lists for\n      file scope symbols and all all other scopes (local scopes).  So\n@@ -131,11 +154,6 @@ struct dwarf2_cu\n   /* Full DIEs if read in.  */\n   struct die_info *dies = nullptr;\n \n-  /* A set of pointers to dwarf2_per_cu_data objects for compilation\n-     units referenced by this one.  Only set during full symbol processing;\n-     partial symbol tables do not have dependencies.  */\n-  htab_t dependencies = nullptr;\n-\n   /* Header data from the line table, during full symbol processing.  */\n   struct line_header *line_header = nullptr;\n   /* Non-NULL if LINE_HEADER is owned by this DWARF_CU.  Otherwise,\n@@ -221,7 +239,7 @@ struct dwarf2_cu\n   gdb::optional<ULONGEST> str_offsets_base;\n \n   /* Mark used when releasing cached dies.  */\n-  bool mark : 1;\n+  bool m_mark : 1;\n \n   /* This CU references .debug_loc.  See the symtab->locations_valid field.\n      This test is imperfect as there may exist optimized debug code not using"
    },
    {
      "sha": "7a321c14d4519d049c185817dda1a066f7051f16",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 74,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/347212b81930f9afb9e2885656f897cf3821881c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=347212b81930f9afb9e2885656f897cf3821881c",
      "patch": "@@ -1458,11 +1458,6 @@ static void process_full_comp_unit (dwarf2_cu *cu,\n static void process_full_type_unit (dwarf2_cu *cu,\n \t\t\t\t    enum language pretend_language);\n \n-static void dwarf2_add_dependence (struct dwarf2_cu *,\n-\t\t\t\t   struct dwarf2_per_cu_data *);\n-\n-static void dwarf2_mark (struct dwarf2_cu *);\n-\n static struct type *get_die_type_at_offset (sect_offset,\n \t\t\t\t\t    dwarf2_per_cu_data *per_cu,\n \t\t\t\t\t    dwarf2_per_objfile *per_objfile);\n@@ -8453,7 +8448,7 @@ maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n   /* Mark the dependence relation so that we don't flush PER_CU\n      too early.  */\n   if (dependent_cu != NULL)\n-    dwarf2_add_dependence (dependent_cu, per_cu);\n+    dependent_cu->add_dependence (per_cu);\n \n   /* If it's already on the queue, we have nothing to do.  */\n   if (per_cu->queued)\n@@ -24469,7 +24464,7 @@ dwarf2_per_objfile::age_comp_units ()\n \n   /* Start by clearing all marks.  */\n   for (auto pair : m_dwarf2_cus)\n-    pair.second->mark = false;\n+    pair.second->clear_mark ();\n \n   /* Traverse all CUs, mark them and their dependencies if used recently\n      enough.  */\n@@ -24479,15 +24474,15 @@ dwarf2_per_objfile::age_comp_units ()\n \n       cu->last_used++;\n       if (cu->last_used <= dwarf_max_cache_age)\n-\tdwarf2_mark (cu);\n+\tcu->mark ();\n     }\n \n   /* Delete all CUs still not marked.  */\n   for (auto it = m_dwarf2_cus.begin (); it != m_dwarf2_cus.end ();)\n     {\n       dwarf2_cu *cu = it->second;\n \n-      if (!cu->mark)\n+      if (!cu->is_marked ())\n \t{\n \t  dwarf_read_debug_printf_v (\"deleting old CU %s\",\n \t\t\t\t     sect_offset_str (cu->per_cu->sect_off));\n@@ -24688,71 +24683,6 @@ get_die_type (struct die_info *die, struct dwarf2_cu *cu)\n   return get_die_type_at_offset (die->sect_off, cu->per_cu, cu->per_objfile);\n }\n \n-/* Add a dependence relationship from CU to REF_PER_CU.  */\n-\n-static void\n-dwarf2_add_dependence (struct dwarf2_cu *cu,\n-\t\t       struct dwarf2_per_cu_data *ref_per_cu)\n-{\n-  void **slot;\n-\n-  if (cu->dependencies == NULL)\n-    cu->dependencies\n-      = htab_create_alloc_ex (5, htab_hash_pointer, htab_eq_pointer,\n-\t\t\t      NULL, &cu->comp_unit_obstack,\n-\t\t\t      hashtab_obstack_allocate,\n-\t\t\t      dummy_obstack_deallocate);\n-\n-  slot = htab_find_slot (cu->dependencies, ref_per_cu, INSERT);\n-  if (*slot == NULL)\n-    *slot = ref_per_cu;\n-}\n-\n-/* Subroutine of dwarf2_mark to pass to htab_traverse.\n-   Set the mark field in every compilation unit in the\n-   cache that we must keep because we are keeping CU.\n-\n-   DATA is the dwarf2_per_objfile object in which to look up CUs.  */\n-\n-static int\n-dwarf2_mark_helper (void **slot, void *data)\n-{\n-  dwarf2_per_cu_data *per_cu = (dwarf2_per_cu_data *) *slot;\n-  dwarf2_per_objfile *per_objfile = (dwarf2_per_objfile *) data;\n-  dwarf2_cu *cu = per_objfile->get_cu (per_cu);\n-\n-  /* cu->dependencies references may not yet have been ever read if QUIT aborts\n-     reading of the chain.  As such dependencies remain valid it is not much\n-     useful to track and undo them during QUIT cleanups.  */\n-  if (cu == nullptr)\n-    return 1;\n-\n-  if (cu->mark)\n-    return 1;\n-\n-  cu->mark = true;\n-\n-  if (cu->dependencies != nullptr)\n-    htab_traverse (cu->dependencies, dwarf2_mark_helper, per_objfile);\n-\n-  return 1;\n-}\n-\n-/* Set the mark field in CU and in every other compilation unit in the\n-   cache that we must keep because we are keeping CU.  */\n-\n-static void\n-dwarf2_mark (struct dwarf2_cu *cu)\n-{\n-  if (cu->mark)\n-    return;\n-\n-  cu->mark = true;\n-\n-  if (cu->dependencies != nullptr)\n-    htab_traverse (cu->dependencies, dwarf2_mark_helper, cu->per_objfile);\n-}\n-\n /* Trivial hash function for partial_die_info: the hash value of a DIE\n    is its offset in .debug_info for this objfile.  */\n "
    }
  ]
}