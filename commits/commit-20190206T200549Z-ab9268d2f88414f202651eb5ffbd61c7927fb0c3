{
  "sha": "ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWI5MjY4ZDJmODg0MTRmMjAyNjUxZWI1ZmZiZDYxYzc5MjdmYjBjMw==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-01-26T11:32:45Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-02-06T20:05:49Z"
    },
    "message": "Factorize macro definition code in macrotab.c\n\nWhen first fixing splay tree key leaks in macrotab.c, some duplicated code\nlogic was factorized.\nThe key leaks will be fixed in libiberty, but the code factorization\nis better kept in any case.\n\ngdb/ChangeLog\n2019-02-06  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* macrotab.c (macro_define_internal): New function that\n\tfactorizes macro_define_object_internal and macro_define_function\n\tcode.\n\t(macro_define_object_internal): Use macro_define_internal.\n\t(macro_define_function): Likewise.",
    "tree": {
      "sha": "b9818db1b3e7d449a21eb821c4000b41e966de2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b9818db1b3e7d449a21eb821c4000b41e966de2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab9268d2f88414f202651eb5ffbd61c7927fb0c3/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "bb0da2b49689f49f01be2f8c5429945f37e12404",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb0da2b49689f49f01be2f8c5429945f37e12404",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb0da2b49689f49f01be2f8c5429945f37e12404"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 38,
    "deletions": 29
  },
  "files": [
    {
      "sha": "c5c08ec03295a533934c80ee21242bd574247eec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab9268d2f88414f202651eb5ffbd61c7927fb0c3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab9268d2f88414f202651eb5ffbd61c7927fb0c3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
      "patch": "@@ -1,3 +1,11 @@\n+2019-02-06  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* macrotab.c (macro_define_internal): New function that\n+\tfactorizes macro_define_object_internal and macro_define_function\n+\tcode.\n+\t(macro_define_object_internal): Use macro_define_internal.\n+\t(macro_define_function): Likewise.\n+\n 2019-02-06  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* macrocmd.c (extract_identifier): Return"
    },
    {
      "sha": "f7ce26f850d3767c66453e691d68486fd2455b99",
      "filename": "gdb/macrotab.c",
      "status": "modified",
      "additions": 30,
      "deletions": 29,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab9268d2f88414f202651eb5ffbd61c7927fb0c3/gdb/macrotab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab9268d2f88414f202651eb5ffbd61c7927fb0c3/gdb/macrotab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrotab.c?ref=ab9268d2f88414f202651eb5ffbd61c7927fb0c3",
      "patch": "@@ -743,21 +743,26 @@ check_for_redefinition (struct macro_source_file *source, int line,\n     return 0;\n }\n \n-/* A helper function to define a new object-like macro.  */\n+/* A helper function to define a new object-like or function-like macro\n+   according to KIND.  When KIND is macro_object_like,\n+   the macro_special_kind must be provided as ARGC, and ARGV must be NULL.\n+   When KIND is macro_function_like, ARGC and ARGV are giving the function\n+   arguments.  */\n \n static void\n-macro_define_object_internal (struct macro_source_file *source, int line,\n-\t\t\t      const char *name, const char *replacement,\n-\t\t\t      enum macro_special_kind kind)\n+macro_define_internal (struct macro_source_file *source, int line,\n+                       const char *name, enum macro_kind kind,\n+\t\t       int argc, const char **argv,\n+                       const char *replacement)\n {\n   struct macro_table *t = source->table;\n   struct macro_key *k = NULL;\n   struct macro_definition *d;\n \n   if (! t->redef_ok)\n-    k = check_for_redefinition (source, line, \n-\t\t\t\tname, macro_object_like,\n-\t\t\t\t0, 0,\n+    k = check_for_redefinition (source, line,\n+\t\t\t\tname, kind,\n+\t\t\t\targc, argv,\n \t\t\t\treplacement);\n \n   /* If we're redefining a symbol, and the existing key would be\n@@ -774,10 +779,23 @@ macro_define_object_internal (struct macro_source_file *source, int line,\n     return;\n \n   k = new_macro_key (t, name, source, line);\n-  d = new_macro_definition (t, macro_object_like, kind, 0, replacement);\n+  d = new_macro_definition (t, kind, argc, argv, replacement);\n   splay_tree_insert (t->definitions, (splay_tree_key) k, (splay_tree_value) d);\n }\n \n+/* A helper function to define a new object-like macro.  */\n+\n+static void\n+macro_define_object_internal (struct macro_source_file *source, int line,\n+\t\t\t      const char *name, const char *replacement,\n+\t\t\t      enum macro_special_kind special_kind)\n+{\n+  macro_define_internal (source, line,\n+\t\t\t name, macro_object_like,\n+\t\t\t special_kind, NULL,\n+\t\t\t replacement);\n+}\n+\n void\n macro_define_object (struct macro_source_file *source, int line,\n \t\t     const char *name, const char *replacement)\n@@ -802,29 +820,12 @@ macro_define_function (struct macro_source_file *source, int line,\n                        const char *name, int argc, const char **argv,\n                        const char *replacement)\n {\n-  struct macro_table *t = source->table;\n-  struct macro_key *k = NULL;\n-  struct macro_definition *d;\n-\n-  if (! t->redef_ok)\n-    k = check_for_redefinition (source, line,\n-\t\t\t\tname, macro_function_like,\n-\t\t\t\targc, argv,\n-\t\t\t\treplacement);\n-\n-  /* See comments about duplicate keys in macro_define_object.  */\n-  if (k && ! key_compare (k, name, source, line))\n-    return;\n-\n-  /* We should also check here that all the argument names in ARGV are\n-     distinct.  */\n-\n-  k = new_macro_key (t, name, source, line);\n-  d = new_macro_definition (t, macro_function_like, argc, argv, replacement);\n-  splay_tree_insert (t->definitions, (splay_tree_key) k, (splay_tree_value) d);\n+  macro_define_internal (source, line,\n+\t\t\t name, macro_function_like,\n+\t\t\t argc, argv,\n+\t\t\t replacement);\n }\n \n-\n void\n macro_undef (struct macro_source_file *source, int line,\n              const char *name)"
    }
  ]
}