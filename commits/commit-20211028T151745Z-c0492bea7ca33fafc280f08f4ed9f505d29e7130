{
  "sha": "c0492bea7ca33fafc280f08f4ed9f505d29e7130",
  "node_id": "C_kwDOANOeidoAKGMwNDkyYmVhN2NhMzNmYWZjMjgwZjA4ZjRlZDlmNTA1ZDI5ZTcxMzA",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-23T13:56:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-10-28T15:17:45Z"
    },
    "message": "gdb: add selftest name completion\n\nAfter the previous commit, it is easy to add completion for selftest\nnames.  Again, this is not particularly high value, but I rarely touched\ncompletion, so it served as a simple example to get some practice.\n\nChange the for_each_selftest_ftype parameter to gdb::function_view, so\nthat we can pass a lambda that captures things.\n\nChange-Id: I87cac299ddca9ca7eb0ffab78342e850a98d954c",
    "tree": {
      "sha": "573f368c19b8c952d10b85deb697296d0822a263",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/573f368c19b8c952d10b85deb697296d0822a263"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c0492bea7ca33fafc280f08f4ed9f505d29e7130",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0492bea7ca33fafc280f08f4ed9f505d29e7130",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c0492bea7ca33fafc280f08f4ed9f505d29e7130",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0492bea7ca33fafc280f08f4ed9f505d29e7130/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c2999954bd3aa5853f553eb6a050dd38e6d9029"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 27,
    "deletions": 3
  },
  "files": [
    {
      "sha": "85fa18c34a07a899fe7f88e99bd524cf2d249e4d",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=c0492bea7ca33fafc280f08f4ed9f505d29e7130",
      "patch": "@@ -1176,8 +1176,15 @@ maintenance_selftest_completer (cmd_list_element *cmd,\n {\n   auto grp = make_maintenance_selftest_option_group (nullptr);\n \n-  gdb::option::complete_options\n-    (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, grp);\n+  if (gdb::option::complete_options\n+\t(tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, grp))\n+    return;\n+\n+  selftests::for_each_selftest ([&tracker, text] (const std::string &name)\n+    {\n+      if (startswith (name.c_str (), text))\n+\ttracker.add_completion (make_unique_xstrdup (name.c_str ()));\n+    });\n }\n \n static void"
    },
    {
      "sha": "0ddd20683773376b0c4d628764594b22f2f31e44",
      "filename": "gdb/testsuite/gdb.gdb/unittest.exp",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdb/testsuite/gdb.gdb/unittest.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdb/testsuite/gdb.gdb/unittest.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.gdb/unittest.exp?ref=c0492bea7ca33fafc280f08f4ed9f505d29e7130",
      "patch": "@@ -20,6 +20,8 @@ if [gdb_debug_enabled] {\n     return 0\n }\n \n+load_lib completion-support.exp\n+\n set do_xml_test [expr ![gdb_skip_xml_test]]\n \n standard_testfile\n@@ -59,6 +61,17 @@ proc run_selftests { binfile } {\n     }\n }\n \n+# Test completion of command \"maintenance selftest\".\n+\n+proc_with_prefix test_completion {} {\n+    clean_restart\n+    test_gdb_complete_tab_multiple \"maintenance selftest string_v\" \"\" \\\n+\t{string_vappendf string_view string_vprintf}\n+    test_gdb_complete_tab_unique \"maintenance selftest string_vie\" \"maintenance selftest string_view\" \" \"\n+    test_gdb_complete_tab_unique \"maintenance selftest -ver\" \"maintenance selftest -verbose\" \" \"\n+    test_gdb_complete_tab_none \"maintenance selftest name_that_does_not_exist\"\n+}\n+\n with_test_prefix \"no executable loaded\" {\n     run_selftests \"\"\n }\n@@ -67,6 +80,8 @@ with_test_prefix \"executable loaded\" {\n     run_selftests ${binfile}\n }\n \n+test_completion\n+\n if { ![is_remote host] && $do_xml_test } {\n     gdb_test \"maintenance check xml-descriptions ${srcdir}/../features\" \\\n \t\"Tested $decimal XML files, 0 failed\" \\"
    },
    {
      "sha": "7275126d2a9ff5bd72fbcb97886f15766391d30b",
      "filename": "gdbsupport/selftest.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdbsupport/selftest.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0492bea7ca33fafc280f08f4ed9f505d29e7130/gdbsupport/selftest.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.h?ref=c0492bea7ca33fafc280f08f4ed9f505d29e7130",
      "patch": "@@ -20,6 +20,7 @@\n #define COMMON_SELFTEST_H\n \n #include \"gdbsupport/array-view.h\"\n+#include \"gdbsupport/function-view.h\"\n \n /* A test is just a function that does some checks and throws an\n    exception if something has gone wrong.  */\n@@ -48,7 +49,8 @@ extern void run_tests (gdb::array_view<const char *const> filters,\n /* Reset GDB or GDBserver's internal state.  */\n extern void reset ();\n \n-typedef void for_each_selftest_ftype (const std::string &name);\n+using for_each_selftest_ftype\n+  = gdb::function_view<void(const std::string &name)>;\n \n /* Call FUNC for each registered selftest.  */\n "
    }
  ]
}