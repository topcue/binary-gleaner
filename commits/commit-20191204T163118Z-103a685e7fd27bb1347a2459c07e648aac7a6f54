{
  "sha": "103a685e7fd27bb1347a2459c07e648aac7a6f54",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTAzYTY4NWU3ZmQyN2JiMTM0N2EyNDU5YzA3ZTY0OGFhYzdhNmY1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-11-25T18:13:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-12-04T16:31:18Z"
    },
    "message": "Add scalar_storage_order support for floating point\n\nTesting the scalar_storage_order patch pointed out that it does not\nhandle floating point properly.  This patch fixes this problem.\n\ngdb/ChangeLog\n2019-12-04  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2read.c (dwarf2_init_float_type)\n\t(dwarf2_init_complex_target_type): Add byte_order parameter.\n\t(read_base_type): Compute byte order earlier.\n\t* gdbtypes.c (init_float_type): Add byte_order parameter.\n\t* gdbtypes.h (init_float_type): Add byte_order parameter.\n\ngdb/testsuite/ChangeLog\n2019-12-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.base/endianity.c (struct otherendian) <f>: New field.\n\t(main): Initialize it.\n\t* gdb.base/endianity.exp: Update.\n\nChange-Id: Ic02eb711d80ce678ef0ecf8c506a626e441b8440",
    "tree": {
      "sha": "e6bb66acd930d577df869b04fa8546ab1f8578d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6bb66acd930d577df869b04fa8546ab1f8578d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/103a685e7fd27bb1347a2459c07e648aac7a6f54",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/103a685e7fd27bb1347a2459c07e648aac7a6f54",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/103a685e7fd27bb1347a2459c07e648aac7a6f54",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/103a685e7fd27bb1347a2459c07e648aac7a6f54/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a9e9f9f1e78a085fdf60faadd83990c3ca6d18c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a9e9f9f1e78a085fdf60faadd83990c3ca6d18c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a9e9f9f1e78a085fdf60faadd83990c3ca6d18c"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 66,
    "deletions": 28
  },
  "files": [
    {
      "sha": "ffae6086301e8ddbed07d37556a508a70ea52a90",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2read.c (dwarf2_init_float_type)\n+\t(dwarf2_init_complex_target_type): Add byte_order parameter.\n+\t(read_base_type): Compute byte order earlier.\n+\t* gdbtypes.c (init_float_type): Add byte_order parameter.\n+\t* gdbtypes.h (init_float_type): Add byte_order parameter.\n+\n 2019-12-04  Tom Tromey  <tromey@adacore.com>\n \n \t* unittests/tui-selftests.c: Conditionally include tui-winsource.h."
    },
    {
      "sha": "40d93c9b0e482aa32bface30a75515bab6b9541a",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 29,
      "deletions": 20,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -17624,15 +17624,15 @@ read_typedef (struct die_info *die, struct dwarf2_cu *cu)\n \n static struct type *\n dwarf2_init_float_type (struct objfile *objfile, int bits, const char *name,\n-\t\t\tconst char *name_hint)\n+\t\t\tconst char *name_hint, enum bfd_endian byte_order)\n {\n   struct gdbarch *gdbarch = get_objfile_arch (objfile);\n   const struct floatformat **format;\n   struct type *type;\n \n   format = gdbarch_floatformat_for_type (gdbarch, name_hint, bits);\n   if (format)\n-    type = init_float_type (objfile, bits, name, format);\n+    type = init_float_type (objfile, bits, name, format, byte_order);\n   else\n     type = init_type (objfile, TYPE_CODE_ERROR, bits, name);\n \n@@ -17671,7 +17671,8 @@ dwarf2_init_integer_type (struct dwarf2_cu *cu, struct objfile *objfile,\n static struct type *\n dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n \t\t\t\t struct objfile *objfile,\n-\t\t\t\t int bits, const char *name_hint)\n+\t\t\t\t int bits, const char *name_hint,\n+\t\t\t\t enum bfd_endian byte_order)\n {\n   gdbarch *gdbarch = get_objfile_arch (objfile);\n   struct type *tt = nullptr;\n@@ -17720,7 +17721,7 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n     tt = nullptr;\n \n   const char *name = (tt == nullptr) ? nullptr : TYPE_NAME (tt);\n-  return dwarf2_init_float_type (objfile, bits, name, name_hint);\n+  return dwarf2_init_float_type (objfile, bits, name, name_hint, byte_order);\n }\n \n /* Find a representation of a given base type and install\n@@ -17733,7 +17734,6 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n   struct type *type;\n   struct attribute *attr;\n   int encoding = 0, bits = 0;\n-  int endianity = 0;\n   const char *name;\n   gdbarch *arch;\n \n@@ -17746,11 +17746,29 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n   name = dwarf2_name (die, cu);\n   if (!name)\n     complaint (_(\"DW_AT_name missing from DW_TAG_base_type\"));\n+\n+  arch = get_objfile_arch (objfile);\n+  enum bfd_endian byte_order = gdbarch_byte_order (arch);\n+\n   attr = dwarf2_attr (die, DW_AT_endianity, cu);\n   if (attr)\n-    endianity = DW_UNSND (attr);\n+    {\n+      int endianity = DW_UNSND (attr);\n+\n+      switch (endianity)\n+\t{\n+\tcase DW_END_big:\n+\t  byte_order = BFD_ENDIAN_BIG;\n+\t  break;\n+\tcase DW_END_little:\n+\t  byte_order = BFD_ENDIAN_LITTLE;\n+\t  break;\n+\tdefault:\n+\t  complaint (_(\"DW_AT_endianity has unrecognized value %d\"), endianity);\n+\t  break;\n+\t}\n+    }\n \n-  arch = get_objfile_arch (objfile);\n   switch (encoding)\n     {\n       case DW_ATE_address:\n@@ -17762,14 +17780,15 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \ttype = init_boolean_type (objfile, bits, 1, name);\n \tbreak;\n       case DW_ATE_complex_float:\n-\ttype = dwarf2_init_complex_target_type (cu, objfile, bits / 2, name);\n+\ttype = dwarf2_init_complex_target_type (cu, objfile, bits / 2, name,\n+\t\t\t\t\t\tbyte_order);\n \ttype = init_complex_type (objfile, name, type);\n \tbreak;\n       case DW_ATE_decimal_float:\n \ttype = init_decfloat_type (objfile, bits, name);\n \tbreak;\n       case DW_ATE_float:\n-\ttype = dwarf2_init_float_type (objfile, bits, name, name);\n+\ttype = dwarf2_init_float_type (objfile, bits, name, name, byte_order);\n \tbreak;\n       case DW_ATE_signed:\n \ttype = dwarf2_init_integer_type (cu, objfile, bits, 0, name);\n@@ -17827,17 +17846,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   maybe_set_alignment (cu, die, type);\n \n-  switch (endianity)\n-    {\n-      case DW_END_big:\n-        if (gdbarch_byte_order (arch) == BFD_ENDIAN_LITTLE)\n-          TYPE_ENDIANITY_NOT_DEFAULT (type) = 1;\n-        break;\n-      case DW_END_little:\n-        if (gdbarch_byte_order (arch) == BFD_ENDIAN_BIG)\n-          TYPE_ENDIANITY_NOT_DEFAULT (type) = 1;\n-        break;\n-    }\n+  TYPE_ENDIANITY_NOT_DEFAULT (type) = gdbarch_byte_order (arch) != byte_order;\n \n   return set_die_type (die, type, cu);\n }"
    },
    {
      "sha": "06096344b4afc3a6e94c17594e13c3b663e9d013",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -2976,15 +2976,22 @@ init_boolean_type (struct objfile *objfile,\n /* Allocate a TYPE_CODE_FLT type structure associated with OBJFILE.\n    BIT is the type size in bits; if BIT equals -1, the size is\n    determined by the floatformat.  NAME is the type name.  Set the\n-   TYPE_FLOATFORMAT from FLOATFORMATS.  */\n+   TYPE_FLOATFORMAT from FLOATFORMATS.  BYTE_ORDER is the byte order\n+   to use.  If it is BFD_ENDIAN_UNKNOWN (the default), then the byte\n+   order of the objfile's architecture is used.  */\n \n struct type *\n init_float_type (struct objfile *objfile,\n \t\t int bit, const char *name,\n-\t\t const struct floatformat **floatformats)\n+\t\t const struct floatformat **floatformats,\n+\t\t enum bfd_endian byte_order)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n-  const struct floatformat *fmt = floatformats[gdbarch_byte_order (gdbarch)];\n+  if (byte_order == BFD_ENDIAN_UNKNOWN)\n+    {\n+      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      byte_order = gdbarch_byte_order (gdbarch);\n+    }\n+  const struct floatformat *fmt = floatformats[byte_order];\n   struct type *t;\n \n   bit = verify_floatformat (bit, fmt);"
    },
    {
      "sha": "f6879e85a9bb09d763d518a03b7f1bd005136422",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -1821,7 +1821,8 @@ extern struct type *init_character_type (struct objfile *, int, int,\n extern struct type *init_boolean_type (struct objfile *, int, int,\n \t\t\t\t       const char *);\n extern struct type *init_float_type (struct objfile *, int, const char *,\n-\t\t\t\t     const struct floatformat **);\n+\t\t\t\t     const struct floatformat **,\n+\t\t\t\t     enum bfd_endian = BFD_ENDIAN_UNKNOWN);\n extern struct type *init_decfloat_type (struct objfile *, int, const char *);\n extern struct type *init_complex_type (struct objfile *, const char *,\n \t\t\t\t       struct type *);"
    },
    {
      "sha": "1c8aa8633e47f2895d59ef9fd0e50df70d0edfcc",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.base/endianity.c (struct otherendian) <f>: New field.\n+\t(main): Initialize it.\n+\t* gdb.base/endianity.exp: Update.\n+\n 2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.mi/mi-sym-info.exp: Add tests for -max-results parameter."
    },
    {
      "sha": "42ee9ae13af0e2b8bc72fd040812c230f2cd3b96",
      "filename": "gdb/testsuite/gdb.base/endianity.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/gdb.base/endianity.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/gdb.base/endianity.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/endianity.c?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -21,6 +21,9 @@ struct otherendian\n {\n   int v;\n   short w;\n+  float f;\n+  __complex__ float cplx;\n+  double d;\n }\n #if defined __GNUC__ && (__GNUC__ >= 6)\n #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n@@ -39,7 +42,7 @@ do_nothing (struct otherendian *c)\n int\n main (void)\n {\n-  struct otherendian o = {3,2};\n+  struct otherendian o = {3, 2, 23.5, 1.25 + 7.25i, 75};\n \n   do_nothing (&o); /* START */\n }"
    },
    {
      "sha": "4277c1f9e7d757d3d4938d07bf82f641e7b02aee",
      "filename": "gdb/testsuite/gdb.base/endianity.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/gdb.base/endianity.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/103a685e7fd27bb1347a2459c07e648aac7a6f54/gdb/testsuite/gdb.base/endianity.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/endianity.exp?ref=103a685e7fd27bb1347a2459c07e648aac7a6f54",
      "patch": "@@ -25,10 +25,13 @@ if ![runto \"endianity.c:$bp_location\" ] then {\n   return -1\n }\n \n-gdb_test \"print o\" \"= {v = 3, w = 2}\" \"print o before assignment\"\n+gdb_test \"print o\" \"= {v = 3, w = 2, f = 23.5, cplx = 1.25 \\\\+ 7.25 \\\\* I, d = 75}\" \\\n+    \"print o before assignment\"\n \n gdb_test \"print o.v = 4\" \"= 4\"\n gdb_test \"print o.w = 3\" \"= 3\"\n+gdb_test \"print o.f = 1.5\" \"= 1.5\"\n+gdb_test \"print o.d = -23.125\" \"= -23.125\"\n \n # scalar_storage_order requires gcc >= 6\n if { ([test_compiler_info {gcc-[0-5]-*}] || ![test_compiler_info gcc*]) } {\n@@ -37,4 +40,5 @@ if { ([test_compiler_info {gcc-[0-5]-*}] || ![test_compiler_info gcc*]) } {\n gdb_test \"x/x &o.v\" \"0x04000000\"\n gdb_test \"x/xh &o.w\" \"0x0300\"\n \n-gdb_test \"print o\" \"= {v = 4, w = 3}\" \"print o after assignment\"\n+gdb_test \"print o\" \"= {v = 4, w = 3, f = 1.5, cplx = 1.25 \\\\+ 7.25 \\\\* I, d = -23.125}\" \\\n+    \"print o after assignment\""
    }
  ]
}