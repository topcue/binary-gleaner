{
  "sha": "7d81bc937cd3949fc3bed8194646d3a4563f94b2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2Q4MWJjOTM3Y2QzOTQ5ZmMzYmVkODE5NDY0NmQzYTQ1NjNmOTRiMg==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-09-08T15:13:48Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-09-08T15:18:38Z"
    },
    "message": "MSP430: Support relocations for subtract expressions in .uleb128 directives\n\nLink-time relaxations of branches are common for MSP430, given that GCC\ncan generate pessimal branch instructions, and the\n-mcode-region=either/-mdata-region=either options to shuffle sections\ncan further change the type of branch instruction required.\n\nThese relaxations can result in invalid code when .uleb128\ndirectives, used in the .gcc_except_table section, are used to calculate\nthe distance between two labels. A value for the .uleb128 directive is\ncalculated at assembly-time, and can't be updated at link-time, even if\nrelaxation causes the distance between the labels to change.\n\nThis patch adds relocations for subtract expressions in .uleb128\ndirectives, to allow the linker to re-calculate the value of these\nexpressions after relaxation has been performed.\n\nbfd/ChangeLog:\n\t* bfd-in2.h (bfd_reloc_code_real): Add\n\tBFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n\t* elf32-msp430.c (msp430_elf_ignore_reloc): New.\n\t(elf_msp430_howto_table): Add R_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n\t(msp430_reloc_map): Add R_MSP430_GNU_{SET,SUB}_ULEB128.\n\t(msp430x_reloc_map): Add R_MSP430X_GNU_{SET,SUB}_ULEB128.\n\t(write_uleb128): New.\n\t(msp430_final_link_relocate): Handle R_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n\t* libbfd.c (_bfd_write_unsigned_leb128): New.\n\t* libbfd.h (_bfd_write_unsigned_leb128): New prototype.\n\tAdd BFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n\t* reloc.c: Document BFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n\nbinutils/ChangeLog:\n\t* readelf.c (target_specific_reloc_handling): Handle\n\tR_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n\ngas/ChangeLog:\n\t* config/tc-msp430.c (msp430_insert_uleb128_fixes): New.\n\t(msp430_md_end): Call msp430_insert_uleb128_fixes.\n\ninclude/ChangeLog:\n\t* elf/msp430.h (elf_msp430_reloc_type): Add\n\tR_MSP430_GNU_{SET,SUB}_ULEB128.\n\t(elf_msp430x_reloc_type): Add R_MSP430X_GNU_{SET,SUB}_ULEB128.\n\nld/ChangeLog:\n\t* testsuite/ld-msp430-elf/msp430-elf.exp: Run new tests.\n\t* testsuite/ld-msp430-elf/uleb128.s: New test.\n\t* testsuite/ld-msp430-elf/uleb128_430.d: New test.\n\t* testsuite/ld-msp430-elf/uleb128_430x.d: New test.",
    "tree": {
      "sha": "6d1300169968fa3dae4c85e0c633f27ed61cb5ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d1300169968fa3dae4c85e0c633f27ed61cb5ca"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7d81bc937cd3949fc3bed8194646d3a4563f94b2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d81bc937cd3949fc3bed8194646d3a4563f94b2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7d81bc937cd3949fc3bed8194646d3a4563f94b2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d81bc937cd3949fc3bed8194646d3a4563f94b2/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1363b0fb4eb8bbe9ef08f1e78ff6ffa71e07b8b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1363b0fb4eb8bbe9ef08f1e78ff6ffa71e07b8b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f1363b0fb4eb8bbe9ef08f1e78ff6ffa71e07b8b"
    }
  ],
  "stats": {
    "total": 372,
    "additions": 362,
    "deletions": 10
  },
  "files": [
    {
      "sha": "39dab961da651fd0252274fa8172d06cfd381554",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1,3 +1,19 @@\n+2020-09-08  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tKuan-Lin Chen  <kuanlinchentw@gmail.com>\n+\n+\t* bfd-in2.h (bfd_reloc_code_real): Add\n+\tBFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n+\t* elf32-msp430.c (msp430_elf_ignore_reloc): New.\n+\t(elf_msp430_howto_table): Add R_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n+\t(msp430_reloc_map): Add R_MSP430_GNU_{SET,SUB}_ULEB128.\n+\t(msp430x_reloc_map): Add R_MSP430X_GNU_{SET,SUB}_ULEB128.\n+\t(write_uleb128): New.\n+\t(msp430_final_link_relocate): Handle R_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n+\t* libbfd.c (_bfd_write_unsigned_leb128): New.\n+\t* libbfd.h (_bfd_write_unsigned_leb128): New prototype.\n+\tAdd BFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n+\t* reloc.c: Document BFD_RELOC_MSP430_{SET,SUB}_ULEB128.\n+\n 2020-09-08  Alex Coplan  <alex.coplan@arm.com>\n \n \t* archures.c (bfd_mach_aarch64_8R): New."
    },
    {
      "sha": "935ba535b540d94b80496beb1e9e53faf833df53",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -5114,6 +5114,8 @@ then it may be truncated to 8 bits.  */\n   BFD_RELOC_MSP430_ABS_HI16,\n   BFD_RELOC_MSP430_PREL31,\n   BFD_RELOC_MSP430_SYM_DIFF,\n+  BFD_RELOC_MSP430_SET_ULEB128,\n+  BFD_RELOC_MSP430_SUB_ULEB128,\n \n /* Relocations used by the Altera Nios II core.  */\n   BFD_RELOC_NIOS2_S16,"
    },
    {
      "sha": "fd1922b3ddaef295546e5abd0dc10de071d61f28",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 146,
      "deletions": 7,
      "changes": 153,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -56,6 +56,20 @@ rl78_sym_diff_handler (bfd * abfd,\n   return bfd_reloc_continue;\n }\n \n+/* Special handler for relocations which don't have to be relocated.\n+   This function just simply returns bfd_reloc_ok.  */\n+static bfd_reloc_status_type\n+msp430_elf_ignore_reloc (bfd *abfd ATTRIBUTE_UNUSED, arelent *reloc_entry,\n+\t\t\tasymbol *symbol ATTRIBUTE_UNUSED,\n+\t\t\tvoid *data ATTRIBUTE_UNUSED, asection *input_section,\n+\t\t\tbfd *output_bfd, char **error_message ATTRIBUTE_UNUSED)\n+{\n+  if (output_bfd != NULL)\n+    reloc_entry->address += input_section->output_offset;\n+\n+  return bfd_reloc_ok;\n+}\n+\n static reloc_howto_type elf_msp430_howto_table[] =\n {\n   HOWTO (R_MSP430_NONE,\t\t/* type */\n@@ -220,7 +234,40 @@ static reloc_howto_type elf_msp430_howto_table[] =\n \t FALSE,\t\t\t/* partial_inplace */\n \t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n-\t FALSE)\t\t\t/* pcrel_offset */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n+  /* The length of unsigned-leb128 is variable, just assume the\n+     size is one byte here.  */\n+  HOWTO (R_MSP430_GNU_SET_ULEB128,\t/* type */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 0,\t\t\t\t/* size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t FALSE,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t msp430_elf_ignore_reloc,\t/* special handler.  */\n+\t \"R_MSP430_GNU_SET_ULEB128\",\t/* name */\n+\t FALSE,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t FALSE),\t\t\t/* pcrel_offset */\n+\n+  /* The length of unsigned-leb128 is variable, just assume the\n+     size is one byte here.  */\n+  HOWTO (R_MSP430_GNU_SUB_ULEB128,\t/* type */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 0,\t\t\t\t/* size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t FALSE,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t msp430_elf_ignore_reloc,\t/* special handler.  */\n+\t \"R_MSP430_GNU_SUB_ULEB128\",\t/* name */\n+\t FALSE,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t FALSE),\t\t\t/* pcrel_offset */\n+\n };\n \n static reloc_howto_type elf_msp430x_howto_table[] =\n@@ -523,7 +570,40 @@ static reloc_howto_type elf_msp430x_howto_table[] =\n \t FALSE,\t\t\t/* partial_inplace */\n \t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n-\t FALSE)\t\t\t/* pcrel_offset */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n+  /* The length of unsigned-leb128 is variable, just assume the\n+     size is one byte here.  */\n+  HOWTO (R_MSP430X_GNU_SET_ULEB128,\t/* type */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 0,\t\t\t\t/* size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t FALSE,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t msp430_elf_ignore_reloc,\t/* special handler.  */\n+\t \"R_MSP430X_GNU_SET_ULEB128\",\t/* name */\n+\t FALSE,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t FALSE),\t\t\t/* pcrel_offset */\n+\n+  /* The length of unsigned-leb128 is variable, just assume the\n+     size is one byte here.  */\n+  HOWTO (R_MSP430X_GNU_SUB_ULEB128,\t/* type */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 0,\t\t\t\t/* size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t FALSE,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t msp430_elf_ignore_reloc,\t/* special handler.  */\n+\t \"R_MSP430X_GNU_SUB_ULEB128\",\t/* name */\n+\t FALSE,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t FALSE),\t\t\t/* pcrel_offset */\n+\n };\n \n /* Map BFD reloc types to MSP430 ELF reloc types.  */\n@@ -547,7 +627,9 @@ static const struct msp430_reloc_map msp430_reloc_map[] =\n   {BFD_RELOC_MSP430_2X_PCREL,\t   R_MSP430_2X_PCREL},\n   {BFD_RELOC_MSP430_RL_PCREL,\t   R_MSP430_RL_PCREL},\n   {BFD_RELOC_8,\t\t\t   R_MSP430_8},\n-  {BFD_RELOC_MSP430_SYM_DIFF,\t   R_MSP430_SYM_DIFF}\n+  {BFD_RELOC_MSP430_SYM_DIFF,\t   R_MSP430_SYM_DIFF},\n+  {BFD_RELOC_MSP430_SET_ULEB128,   R_MSP430_GNU_SET_ULEB128 },\n+  {BFD_RELOC_MSP430_SUB_ULEB128,   R_MSP430_GNU_SUB_ULEB128 }\n };\n \n static const struct msp430_reloc_map msp430x_reloc_map[] =\n@@ -573,7 +655,9 @@ static const struct msp430_reloc_map msp430x_reloc_map[] =\n   {BFD_RELOC_MSP430_10_PCREL,\t      R_MSP430X_10_PCREL},\n   {BFD_RELOC_MSP430_2X_PCREL,\t      R_MSP430X_2X_PCREL},\n   {BFD_RELOC_MSP430_RL_PCREL,\t      R_MSP430X_PCR16},\n-  {BFD_RELOC_MSP430_SYM_DIFF,\t      R_MSP430X_SYM_DIFF}\n+  {BFD_RELOC_MSP430_SYM_DIFF,\t      R_MSP430X_SYM_DIFF},\n+  {BFD_RELOC_MSP430_SET_ULEB128,      R_MSP430X_GNU_SET_ULEB128 },\n+  {BFD_RELOC_MSP430_SUB_ULEB128,      R_MSP430X_GNU_SUB_ULEB128 }\n };\n \n static inline bfd_boolean\n@@ -755,6 +839,9 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n      if (uses_msp430x_relocs (input_bfd))\n        switch (howto->type)\n \t {\n+\t case R_MSP430X_GNU_SET_ULEB128:\n+\t   relocation += (!is_rel_reloc ? rel->r_addend : 0);\n+\t   /* Fall through.  */\n \t case R_MSP430_ABS32:\n \t  /* If we are computing a 32-bit value for the location lists\n \t     and the result is 0 then we add one to the value.  A zero\n@@ -780,6 +867,9 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n      else\n        switch (howto->type)\n \t {\n+\t case R_MSP430_GNU_SET_ULEB128:\n+\t   relocation += (!is_rel_reloc ? rel->r_addend : 0);\n+\t   /* Fall through.  */\n \t case R_MSP430_32:\n \t case R_MSP430_16:\n \t case R_MSP430_16_BYTE:\n@@ -794,16 +884,63 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n       sym_diff_section = NULL;\n     }\n \n-  if (uses_msp430x_relocs (input_bfd))\n+  if ((uses_msp430x_relocs (input_bfd)\n+       && howto->type == R_MSP430X_GNU_SET_ULEB128)\n+      || (!uses_msp430x_relocs (input_bfd)\n+\t  && howto->type == R_MSP430_GNU_SET_ULEB128))\n+    {\n+      unsigned int len, new_len = 0;\n+      bfd_byte *endp, *p;\n+      unsigned int val = relocation;\n+\n+      _bfd_read_unsigned_leb128 (input_bfd, contents + rel->r_offset, &len);\n+\n+      /* Clean the contents value to zero.  Do not reduce the length.  */\n+      p = contents + rel->r_offset;\n+      endp = (p + len) - 1;\n+      memset (p, 0x80, len - 1);\n+      *(endp) = 0;\n+\n+      /* Get the length of the new uleb128 value.  */\n+      do\n+\t{\n+\t  new_len++;\n+\t  val >>= 7;\n+\t} while (val);\n+\n+      if (new_len > len)\n+\t{\n+\t  _bfd_error_handler\n+\t    (_(\"error: final size of uleb128 value at offset 0x%lx in %pA \"\n+\t       \"from %pB exceeds available space\"),\n+\t     (long) rel->r_offset, input_section, input_bfd);\n+\t}\n+      else\n+\t{\n+\t  /* If the number of bytes required to store the new value has\n+\t     decreased, \"right align\" the new value within the available space,\n+\t     so the MSB side is padded with uleb128 zeros (0x80).  */\n+\t  p = _bfd_write_unsigned_leb128 (p + (len - new_len), endp,\n+\t\t\t\t\t  relocation);\n+\t  /* We checked there is enough space for the new value above, so this\n+\t     should never be NULL.  */\n+\t  BFD_ASSERT (p);\n+\t}\n+\n+      return bfd_reloc_ok;\n+    }\n+  else if (uses_msp430x_relocs (input_bfd))\n     switch (howto->type)\n       {\n       case R_MSP430X_SYM_DIFF:\n+      case R_MSP430X_GNU_SUB_ULEB128:\n \t/* Cache the input section and value.\n \t   The offset is unreliable, since relaxation may\n \t   have reduced the following reloc's offset.  */\n \tBFD_ASSERT (! is_rel_reloc);\n \tsym_diff_section = input_section;\n-\tsym_diff_value = relocation;\n+\tsym_diff_value = relocation + (howto->type == R_MSP430X_GNU_SUB_ULEB128\n+\t\t\t\t       ? rel->r_addend : 0);\n \treturn bfd_reloc_ok;\n \n       case R_MSP430_ABS16:\n@@ -1254,11 +1391,13 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n       break;\n \n     case R_MSP430_SYM_DIFF:\n+    case R_MSP430_GNU_SUB_ULEB128:\n       /* Cache the input section and value.\n \t The offset is unreliable, since relaxation may\n \t have reduced the following reloc's offset.  */\n       sym_diff_section = input_section;\n-      sym_diff_value = relocation;\n+      sym_diff_value = relocation + (howto->type == R_MSP430_GNU_SUB_ULEB128\n+\t\t\t\t     ? rel->r_addend : 0);\n       return bfd_reloc_ok;\n \n       default:"
    },
    {
      "sha": "8046e4873bbcd287c7cd5e4893588176ff6c68d0",
      "filename": "bfd/libbfd.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/libbfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/libbfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.c?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1151,6 +1151,30 @@ _bfd_read_signed_leb128 (bfd *abfd ATTRIBUTE_UNUSED,\n   return result;\n }\n \n+/* Write VAL in uleb128 format to P.\n+   END indicates the last byte of allocated space for the uleb128 value to fit\n+   in.\n+   Return a pointer to the byte following the last byte that was written, or\n+   NULL if the uleb128 value does not fit in the allocated space between P and\n+   END.  */\n+bfd_byte *\n+_bfd_write_unsigned_leb128 (bfd_byte *p, bfd_byte *end, bfd_vma val)\n+{\n+  bfd_byte c;\n+  do\n+    {\n+      if (p > end)\n+\treturn NULL;\n+      c = val & 0x7f;\n+      val >>= 7;\n+      if (val)\n+\tc |= 0x80;\n+      *(p++) = c;\n+    }\n+  while (val);\n+  return p;\n+}\n+\n bfd_boolean\n _bfd_generic_init_private_section_data (bfd *ibfd ATTRIBUTE_UNUSED,\n \t\t\t\t\tasection *isec ATTRIBUTE_UNUSED,"
    },
    {
      "sha": "7587e8f3c73a445d9e6f27e447969f1f555d6eeb",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -901,6 +901,8 @@ extern bfd_signed_vma _bfd_read_signed_leb128\n extern bfd_vma _bfd_safe_read_leb128\n   (bfd *, bfd_byte *, unsigned int *, bfd_boolean, const bfd_byte * const)\n   ATTRIBUTE_HIDDEN;\n+extern bfd_byte * _bfd_write_unsigned_leb128\n+  (bfd_byte *p, bfd_byte *end, bfd_vma val) ATTRIBUTE_HIDDEN;\n \n #if GCC_VERSION >= 7000\n #define _bfd_mul_overflow(a, b, res) __builtin_mul_overflow (a, b, res)\n@@ -2802,6 +2804,8 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_MSP430_ABS_HI16\",\n   \"BFD_RELOC_MSP430_PREL31\",\n   \"BFD_RELOC_MSP430_SYM_DIFF\",\n+  \"BFD_RELOC_MSP430_SET_ULEB128\",\n+  \"BFD_RELOC_MSP430_SUB_ULEB128\",\n   \"BFD_RELOC_NIOS2_S16\",\n   \"BFD_RELOC_NIOS2_U16\",\n   \"BFD_RELOC_NIOS2_CALL26\","
    },
    {
      "sha": "dc923fe39c25ee09c0cafcc3698247b411eb167c",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -6367,6 +6367,11 @@ ENUMX\n   BFD_RELOC_MSP430_PREL31\n ENUMX\n   BFD_RELOC_MSP430_SYM_DIFF\n+ENUMX\n+  BFD_RELOC_MSP430_SET_ULEB128\n+ENUMX\n+  BFD_RELOC_MSP430_SUB_ULEB128\n+\n ENUMDOC\n   msp430 specific relocation codes\n "
    },
    {
      "sha": "0c06bcedae092d54a350a61c1162c215bbebf7cd",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-08  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tKuan-Lin Chen  <kuanlinchentw@gmail.com>\n+\n+\t* readelf.c (target_specific_reloc_handling): Handle\n+\tR_MSP430{,X}_GNU_{SET,SUB}_ULEB128.\n+\n 2020-09-02  Alan Modra  <amodra@gmail.com>\n \n \t* objdump.c (disassemble_bytes): Use an unsigned type for \"addend\"."
    },
    {
      "sha": "cb4208f7b96aa7291245ea508d162cceb5c8f381",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -12586,10 +12586,12 @@ target_specific_reloc_handling (Filedata *           filedata,\n \tswitch (reloc_type)\n \t  {\n \t  case 10: /* R_MSP430_SYM_DIFF */\n+\t  case 12: /* R_MSP430_GNU_SUB_ULEB128 */\n \t    if (uses_msp430x_relocs (filedata))\n \t      break;\n \t    /* Fall through.  */\n \t  case 21: /* R_MSP430X_SYM_DIFF */\n+\t  case 23: /* R_MSP430X_GNU_SUB_ULEB128 */\n \t    /* PR 21139.  */\n \t    if (sym_index >= num_syms)\n \t      error (_(\"MSP430 SYM_DIFF reloc contains invalid symbol index %lu\\n\"),\n@@ -12604,23 +12606,44 @@ target_specific_reloc_handling (Filedata *           filedata,\n \n \t  case 5: /* R_MSP430_16_BYTE */\n \t  case 9: /* R_MSP430_8 */\n+\t  case 11: /* R_MSP430_GNU_SET_ULEB128 */\n \t    if (uses_msp430x_relocs (filedata))\n \t      break;\n \t    goto handle_sym_diff;\n \n \t  case 2: /* R_MSP430_ABS16 */\n \t  case 15: /* R_MSP430X_ABS16 */\n+\t  case 22: /* R_MSP430X_GNU_SET_ULEB128 */\n \t    if (! uses_msp430x_relocs (filedata))\n \t      break;\n \t    goto handle_sym_diff;\n \n \t  handle_sym_diff:\n \t    if (saved_sym != NULL)\n \t      {\n-\t\tint reloc_size = reloc_type == 1 ? 4 : 2;\n \t\tbfd_vma value;\n+\t\tunsigned int reloc_size;\n+\t\tint leb_ret = 0;\n+\t\tswitch (reloc_type)\n+\t\t  {\n+\t\t  case 1: /* R_MSP430_32 or R_MSP430_ABS32 */\n+\t\t    reloc_size = 4;\n+\t\t    break;\n+\t\t  case 11: /* R_MSP430_GNU_SET_ULEB128 */\n+\t\t  case 22: /* R_MSP430X_GNU_SET_ULEB128 */\n+\t\t    read_leb128 (start + reloc->r_offset, end, FALSE,\n+\t\t\t\t &reloc_size, &leb_ret);\n+\t\t    break;\n+\t\t  default:\n+\t\t    reloc_size = 2;\n+\t\t    break;\n+\t\t  }\n \n-\t\tif (sym_index >= num_syms)\n+\t\tif (leb_ret != 0)\n+\t\t  error (_(\"MSP430 ULEB128 field at 0x%lx contains invalid \"\n+\t\t\t   \"ULEB128 value\\n\"),\n+\t\t\t (long) reloc->r_offset);\n+\t\telse if (sym_index >= num_syms)\n \t\t  error (_(\"MSP430 reloc contains invalid symbol index %lu\\n\"),\n \t\t\t sym_index);\n \t\telse"
    },
    {
      "sha": "7335e83941afaa357486fd639590c88a21a34796",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-08  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tKuan-Lin Chen  <kuanlinchentw@gmail.com>\n+\n+\t* config/tc-msp430.c (msp430_insert_uleb128_fixes): New.\n+\t(msp430_md_end): Call msp430_insert_uleb128_fixes.\n+\n 2020-09-08  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/tc-aarch64.c (aarch64_cpus): Add Cortex-R82."
    },
    {
      "sha": "6d1803202ce7cfea1b280d38873f25efea0b717c",
      "filename": "gas/config/tc-msp430.c",
      "status": "modified",
      "additions": 53,
      "deletions": 1,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/gas/config/tc-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/gas/config/tc-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-msp430.c?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -5048,8 +5048,56 @@ msp430_fix_adjustable (struct fix *fixp ATTRIBUTE_UNUSED)\n   return FALSE;\n }\n \n-/* Set the contents of the .MSP430.attributes and .GNU.attributes sections.  */\n+/* Scan uleb128 subtraction expressions and insert fixups for them.\n+   e.g., .uleb128 .L1 - .L0\n+   Because relaxation may change the value of the subtraction, we\n+   must resolve them at link-time.  */\n \n+static void\n+msp430_insert_uleb128_fixes (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t\t    asection *sec, void *xxx ATTRIBUTE_UNUSED)\n+{\n+  segment_info_type *seginfo = seg_info (sec);\n+  struct frag *fragP;\n+\n+  subseg_set (sec, 0);\n+\n+  for (fragP = seginfo->frchainP->frch_root;\n+       fragP; fragP = fragP->fr_next)\n+    {\n+      expressionS *exp, *exp_dup;\n+\n+      if (fragP->fr_type != rs_leb128  || fragP->fr_symbol == NULL)\n+\tcontinue;\n+\n+      exp = symbol_get_value_expression (fragP->fr_symbol);\n+\n+      if (exp->X_op != O_subtract)\n+\tcontinue;\n+\n+      /* FIXME: Skip for .sleb128.  */\n+      if (fragP->fr_subtype != 0)\n+\tcontinue;\n+\n+      exp_dup = xmemdup (exp, sizeof (*exp), sizeof (*exp));\n+      exp_dup->X_op = O_symbol;\n+      exp_dup->X_op_symbol = NULL;\n+\n+      /* Emit the SUB relocation first, since the SET relocation will write out\n+\t the final value.  */\n+      exp_dup->X_add_symbol = exp->X_op_symbol;\n+      fix_new_exp (fragP, fragP->fr_fix, 0,\n+\t\t   exp_dup, 0, BFD_RELOC_MSP430_SUB_ULEB128);\n+\n+      exp_dup->X_add_symbol = exp->X_add_symbol;\n+      /* Insert relocations to resolve the subtraction at link-time.  */\n+      fix_new_exp (fragP, fragP->fr_fix, 0,\n+\t\t   exp_dup, 0, BFD_RELOC_MSP430_SET_ULEB128);\n+\n+    }\n+}\n+\n+/* Called after all assembly has been done.  */\n void\n msp430_md_end (void)\n {\n@@ -5065,6 +5113,10 @@ msp430_md_end (void)\n \tas_warn (_(WARN_NOP_AT_EOF));\n     }\n \n+  /* Insert relocations for uleb128 directives, so the values can be recomputed\n+     at link time.  */\n+  bfd_map_over_sections (stdoutput, msp430_insert_uleb128_fixes, NULL);\n+\n   /* We have already emitted an error if any of the following attributes\n      disagree with the attributes in the input assembly file.  See\n      msp430_object_attribute.  */"
    },
    {
      "sha": "6017c8b794c83e4b955536e9a24dc572dccf086c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-08  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tKuan-Lin Chen  <kuanlinchentw@gmail.com>\n+\n+\t* elf/msp430.h (elf_msp430_reloc_type): Add\n+\tR_MSP430_GNU_{SET,SUB}_ULEB128.\n+\t(elf_msp430x_reloc_type): Add R_MSP430X_GNU_{SET,SUB}_ULEB128.\n+\n 2020-09-08  Alex Coplan  <alex.coplan@arm.com>\n \n \t* opcode/aarch64.h (aarch64_sys_ins_reg_supported_p): Also take"
    },
    {
      "sha": "8d047cd18bbe50db6342bfa0b1f3581ce9ae11f1",
      "filename": "include/elf/msp430.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/include/elf/msp430.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/include/elf/msp430.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/msp430.h?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -113,6 +113,8 @@ START_RELOC_NUMBERS (elf_msp430_reloc_type)\n      RELOC_NUMBER (R_MSP430_RL_PCREL,\t\t8)\n      RELOC_NUMBER (R_MSP430_8,\t\t\t9)\n      RELOC_NUMBER (R_MSP430_SYM_DIFF,\t\t10)\n+     RELOC_NUMBER (R_MSP430_GNU_SET_ULEB128, 11) /* GNU only.  */\n+     RELOC_NUMBER (R_MSP430_GNU_SUB_ULEB128, 12) /* GNU only.  */\n END_RELOC_NUMBERS (R_MSP430_max)\n \n START_RELOC_NUMBERS (elf_msp430x_reloc_type)\n@@ -137,6 +139,8 @@ START_RELOC_NUMBERS (elf_msp430x_reloc_type)\n      RELOC_NUMBER (R_MSP430X_10_PCREL, 19)\t/* Red Hat invention.  Used for Jump instructions.  */\n      RELOC_NUMBER (R_MSP430X_2X_PCREL, 20)\t/* Red Hat invention.  Used for relaxing jumps.  */\n      RELOC_NUMBER (R_MSP430X_SYM_DIFF, 21)\t/* Red Hat invention.  Used for relaxing debug info.  */\n+     RELOC_NUMBER (R_MSP430X_GNU_SET_ULEB128, 22) /* GNU only.  */\n+     RELOC_NUMBER (R_MSP430X_GNU_SUB_ULEB128, 23) /* GNU only.  */\n END_RELOC_NUMBERS (R_MSP430x_max)\n \n #endif /* _ELF_MSP430_H */"
    },
    {
      "sha": "1f804793107269da2db658aab7ec26056b401c4a",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-08  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* testsuite/ld-msp430-elf/msp430-elf.exp: Run new tests.\n+\t* testsuite/ld-msp430-elf/uleb128.s: New test.\n+\t* testsuite/ld-msp430-elf/uleb128_430.d: New test.\n+\t* testsuite/ld-msp430-elf/uleb128_430x.d: New test.\n+\n 2020-09-08  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-elf/pr26580-a.s,"
    },
    {
      "sha": "875b413c149cff3458565d8c00e697df3870e7e0",
      "filename": "ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/msp430-elf.exp?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -176,6 +176,9 @@ set msp430arraytests {\n \n run_ld_link_tests $msp430arraytests\n \n+run_dump_test uleb128_430\n+run_dump_test uleb128_430x\n+\n # Don't run further tests when msp430 ISA is selected\n if {[string match \"*-mcpu=msp430 *\" [board_info [target_info name] multilib_flags]]\n   || [string match \"*-mcpu=msp430\" [board_info [target_info name] multilib_flags]]} {"
    },
    {
      "sha": "598ee0c1b9fdbd46bfd07bcd3b1bd12b2896c70a",
      "filename": "ld/testsuite/ld-msp430-elf/uleb128.s",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/uleb128.s?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -0,0 +1,34 @@\n+.data\n+\t.global\tbar\n+\t.balign 2\n+bar:\n+\t.short\t42\n+\t.short\t43\n+\n+\t.global foo\n+foo:\n+.skip 0xff\n+\n+\t.global\tfoo2\n+\t.balign 2\n+foo2:\n+\t.short\t4\n+\n+.text\n+\n+  .balign 2\n+  .global byte\n+byte:\n+  .word foo-bar\n+  .word foo2-bar\n+\n+  .global uleb\n+  .balign 2\n+uleb:\n+\t.uleb128 foo-bar  ; this value can be stored in one byte\n+\t.uleb128 foo2-bar ; this value requires 2 bytes\n+\n+  .balign 2\n+  .global _start\n+  _start:\n+  nop"
    },
    {
      "sha": "5104552e7a9c400d6fefc18a389b75abbcab5b98",
      "filename": "ld/testsuite/ld-msp430-elf/uleb128_430.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128_430.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128_430.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/uleb128_430.d?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -0,0 +1,10 @@\n+#source: uleb128.s\n+#as: -mcpu=msp430\n+#ld:\n+#objdump: -sj.text\n+\n+.*:[ \t]+file format .*\n+\n+Contents of section .text:\n+ [0-9a-f]+ 04000401 04840200.*\n+#pass"
    },
    {
      "sha": "e808a53bedf74d8e3b13b72091c18c022e31db69",
      "filename": "ld/testsuite/ld-msp430-elf/uleb128_430x.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128_430x.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d81bc937cd3949fc3bed8194646d3a4563f94b2/ld/testsuite/ld-msp430-elf/uleb128_430x.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/uleb128_430x.d?ref=7d81bc937cd3949fc3bed8194646d3a4563f94b2",
      "patch": "@@ -0,0 +1,10 @@\n+#source: uleb128.s\n+#as: -mcpu=msp430x\n+#ld:\n+#objdump: -sj.text\n+\n+.*:[ \t]+file format .*\n+\n+Contents of section .text:\n+ [0-9a-f]+ 04000401 04840200.*\n+#pass"
    }
  ]
}