{
  "sha": "00f93c449228e69f2161405b1f49b406e88785f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDBmOTNjNDQ5MjI4ZTY5ZjIxNjE0MDViMWY0OWI0MDZlODg3ODVmMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-19T02:21:04Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-20T08:34:02Z"
    },
    "message": "bfd macro conversion to inline functions\n\nThis converts some of the macros that access struct bfd fields to\ninline functions.\n\nbfd/\n\t* archive.c (bfd_generic_archive_p): Use bfd_set_thin_archive.\n\t* bfd-in.h (bfd_get_filename, bfd_get_cacheable, bfd_get_format),\n\t(bfd_get_target, bfd_get_flavour, bfd_family_coff, bfd_big_endian),\n\t(bfd_little_endian, bfd_header_big_endian, bfd_header_little_endian),\n\t(bfd_get_file_flags, bfd_applicable_file_flags),\n\t(bfd_applicable_section_flags, bfd_has_map, bfd_is_thin_archive),\n\t(bfd_valid_reloc_types, bfd_usrdata, bfd_get_start_address),\n\t(bfd_get_symcount, bfd_get_outsymbols, bfd_count_sections),\n\t(bfd_get_dynamic_symcount, bfd_get_symbol_leading_char): Delete.\n\t* bfd/bfd.c (bfd_get_filename, bfd_get_cacheable, bfd_get_format),\n\t(bfd_get_file_flags, bfd_get_start_address, bfd_get_symcount),\n\t(bfd_get_dynamic_symcount, bfd_get_outsymbols, bfd_count_sections),\n\t(bfd_has_map, bfd_is_thin_archive, bfd_set_thin_archive),\n\t(bfd_usrdata, bfd_set_usrdata): New inline functions.\n\t* targets.c (bfd_get_target, bfd_get_flavour),\n\t(bfd_applicable_file_flags, bfd_family_coff, bfd_big_endian),\n\t(bfd_little_endian, bfd_header_big_endian),\n\t(bfd_header_little_endian, bfd_applicable_section_flags),\n\t(bfd_get_symbol_leading_char): New inline functions.\n\t* bfd-in2.h: Regenerate.\nbinutils/\n\t* ar.c (write_archive): Use bfd_set_thin_archive.\ngdb/\n\t* gdb_bfd.c (gdb_bfd_ref, gdb_bfd_unref): Use bfd_set_usrdata.\n\t* dwarf2read.c (dwarf2_read_gdb_index, dwarf2_read_debug_names),\n\t(read_indirect_string_from_dwz): Use bfd accessor.\n\t* dwarf2read.h (struct dwz_file <filename>): Likewise.\n\t* machoread.c (macho_symfile_read_all_oso): Likewise.\n\t* solib.c (solib_bfd_open): Likewise.\nld/\n\t* ldelf.c (ldelf_after_open, ldelf_place_orphan\n\t* ldlang.c (walk_wild_file, lang_process): Use bfd_usrdata.\n\t(load_symbols, ldlang_add_file): Use bfd_set_usrdata.\n\t* ldmain.c (add_archive_element): Use bfd_usrdata.\n\t* ldlang.h (bfd_input_just_syms): New inline function.\n\t* emultempl/aarch64elf.em (build_section_lists): Use it.\n\t* emultempl/mmo.em (mmo_place_orphan): Likewise.\n\t* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n\t* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n\t* emultempl/ppc64elf.em (build_section_lists): Likewise.\nsim/\n\t* ppc/emul_generic.c (emul_add_tree_options): Delete old bfd code.",
    "tree": {
      "sha": "89558e119955a9ae7847d60870efdfaa3d42dfe7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/89558e119955a9ae7847d60870efdfaa3d42dfe7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/00f93c449228e69f2161405b1f49b406e88785f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00f93c449228e69f2161405b1f49b406e88785f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/00f93c449228e69f2161405b1f49b406e88785f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00f93c449228e69f2161405b1f49b406e88785f0/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f9aad111cea2f25877d0a6b404956769c14faee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f9aad111cea2f25877d0a6b404956769c14faee",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f9aad111cea2f25877d0a6b404956769c14faee"
    }
  ],
  "stats": {
    "total": 490,
    "additions": 378,
    "deletions": 112
  },
  "files": [
    {
      "sha": "1c700dbfff7f679752ef451143dae6a6bc616fb5",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1,3 +1,26 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* archive.c (bfd_generic_archive_p): Use bfd_set_thin_archive.\n+\t* bfd-in.h (bfd_get_filename, bfd_get_cacheable, bfd_get_format),\n+\t(bfd_get_target, bfd_get_flavour, bfd_family_coff, bfd_big_endian),\n+\t(bfd_little_endian, bfd_header_big_endian, bfd_header_little_endian),\n+\t(bfd_get_file_flags, bfd_applicable_file_flags),\n+\t(bfd_applicable_section_flags, bfd_has_map, bfd_is_thin_archive),\n+\t(bfd_valid_reloc_types, bfd_usrdata, bfd_get_start_address),\n+\t(bfd_get_symcount, bfd_get_outsymbols, bfd_count_sections),\n+\t(bfd_get_dynamic_symcount, bfd_get_symbol_leading_char): Delete.\n+\t* bfd/bfd.c (bfd_get_filename, bfd_get_cacheable, bfd_get_format),\n+\t(bfd_get_file_flags, bfd_get_start_address, bfd_get_symcount),\n+\t(bfd_get_dynamic_symcount, bfd_get_outsymbols, bfd_count_sections),\n+\t(bfd_has_map, bfd_is_thin_archive, bfd_set_thin_archive),\n+\t(bfd_usrdata, bfd_set_usrdata): New inline functions.\n+\t* targets.c (bfd_get_target, bfd_get_flavour),\n+\t(bfd_applicable_file_flags, bfd_family_coff, bfd_big_endian),\n+\t(bfd_little_endian, bfd_header_big_endian),\n+\t(bfd_header_little_endian, bfd_applicable_section_flags),\n+\t(bfd_get_symbol_leading_char): New inline functions.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-09-20  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (ppc64_glibc_dynamic_reloc): New function."
    },
    {
      "sha": "ccc09ad49f232c1b856bab22c7a067f13c80be70",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -856,7 +856,7 @@ bfd_generic_archive_p (bfd *abfd)\n       return NULL;\n     }\n \n-  bfd_is_thin_archive (abfd) = (strncmp (armag, ARMAGT, SARMAG) == 0);\n+  bfd_set_thin_archive (abfd, strncmp (armag, ARMAGT, SARMAG) == 0);\n \n   if (strncmp (armag, ARMAG, SARMAG) != 0\n       && ! bfd_is_thin_archive (abfd))"
    },
    {
      "sha": "34c1c3ad0e9cfc6495729824ea9a2cb75b1cb989",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -509,38 +509,6 @@ extern int bfd_stat (bfd *, struct stat *);\n #endif\n extern void _bfd_warn_deprecated (const char *, const char *, int, const char *);\n \n-#define bfd_get_filename(abfd) ((abfd)->filename)\n-#define bfd_get_cacheable(abfd) ((abfd)->cacheable)\n-#define bfd_get_format(abfd) ((abfd)->format)\n-#define bfd_get_target(abfd) ((abfd)->xvec->name)\n-#define bfd_get_flavour(abfd) ((abfd)->xvec->flavour)\n-#define bfd_family_coff(abfd) \\\n-  (bfd_get_flavour (abfd) == bfd_target_coff_flavour || \\\n-   bfd_get_flavour (abfd) == bfd_target_xcoff_flavour)\n-#define bfd_big_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_BIG)\n-#define bfd_little_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_LITTLE)\n-#define bfd_header_big_endian(abfd) \\\n-  ((abfd)->xvec->header_byteorder == BFD_ENDIAN_BIG)\n-#define bfd_header_little_endian(abfd) \\\n-  ((abfd)->xvec->header_byteorder == BFD_ENDIAN_LITTLE)\n-#define bfd_get_file_flags(abfd) ((abfd)->flags)\n-#define bfd_applicable_file_flags(abfd) ((abfd)->xvec->object_flags)\n-#define bfd_applicable_section_flags(abfd) ((abfd)->xvec->section_flags)\n-#define bfd_has_map(abfd) ((abfd)->has_armap)\n-#define bfd_is_thin_archive(abfd) ((abfd)->is_thin_archive)\n-\n-#define bfd_valid_reloc_types(abfd) ((abfd)->xvec->valid_reloc_types)\n-#define bfd_usrdata(abfd) ((abfd)->usrdata)\n-\n-#define bfd_get_start_address(abfd) ((abfd)->start_address)\n-#define bfd_get_symcount(abfd) ((abfd)->symcount)\n-#define bfd_get_outsymbols(abfd) ((abfd)->outsymbols)\n-#define bfd_count_sections(abfd) ((abfd)->section_count)\n-\n-#define bfd_get_dynamic_symcount(abfd) ((abfd)->dynsymcount)\n-\n-#define bfd_get_symbol_leading_char(abfd) ((abfd)->xvec->symbol_leading_char)\n-\n extern bfd_boolean bfd_cache_close\n   (bfd *abfd);\n /* NB: This declaration should match the autogenerated one in libbfd.h.  */"
    },
    {
      "sha": "4f158679b2ef49a0103d7a93ccddf31cee113321",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 144,
      "deletions": 32,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -516,38 +516,6 @@ extern int bfd_stat (bfd *, struct stat *);\n #endif\n extern void _bfd_warn_deprecated (const char *, const char *, int, const char *);\n \n-#define bfd_get_filename(abfd) ((abfd)->filename)\n-#define bfd_get_cacheable(abfd) ((abfd)->cacheable)\n-#define bfd_get_format(abfd) ((abfd)->format)\n-#define bfd_get_target(abfd) ((abfd)->xvec->name)\n-#define bfd_get_flavour(abfd) ((abfd)->xvec->flavour)\n-#define bfd_family_coff(abfd) \\\n-  (bfd_get_flavour (abfd) == bfd_target_coff_flavour || \\\n-   bfd_get_flavour (abfd) == bfd_target_xcoff_flavour)\n-#define bfd_big_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_BIG)\n-#define bfd_little_endian(abfd) ((abfd)->xvec->byteorder == BFD_ENDIAN_LITTLE)\n-#define bfd_header_big_endian(abfd) \\\n-  ((abfd)->xvec->header_byteorder == BFD_ENDIAN_BIG)\n-#define bfd_header_little_endian(abfd) \\\n-  ((abfd)->xvec->header_byteorder == BFD_ENDIAN_LITTLE)\n-#define bfd_get_file_flags(abfd) ((abfd)->flags)\n-#define bfd_applicable_file_flags(abfd) ((abfd)->xvec->object_flags)\n-#define bfd_applicable_section_flags(abfd) ((abfd)->xvec->section_flags)\n-#define bfd_has_map(abfd) ((abfd)->has_armap)\n-#define bfd_is_thin_archive(abfd) ((abfd)->is_thin_archive)\n-\n-#define bfd_valid_reloc_types(abfd) ((abfd)->xvec->valid_reloc_types)\n-#define bfd_usrdata(abfd) ((abfd)->usrdata)\n-\n-#define bfd_get_start_address(abfd) ((abfd)->start_address)\n-#define bfd_get_symcount(abfd) ((abfd)->symcount)\n-#define bfd_get_outsymbols(abfd) ((abfd)->outsymbols)\n-#define bfd_count_sections(abfd) ((abfd)->section_count)\n-\n-#define bfd_get_dynamic_symcount(abfd) ((abfd)->dynsymcount)\n-\n-#define bfd_get_symbol_leading_char(abfd) ((abfd)->xvec->symbol_leading_char)\n-\n extern bfd_boolean bfd_cache_close\n   (bfd *abfd);\n /* NB: This declaration should match the autogenerated one in libbfd.h.  */\n@@ -7321,6 +7289,78 @@ struct bfd\n   const struct bfd_build_id *build_id;\n };\n \n+static inline const char *\n+bfd_get_filename (const bfd *abfd)\n+{\n+  return abfd->filename;\n+}\n+\n+static inline bfd_boolean\n+bfd_get_cacheable (const bfd *abfd)\n+{\n+  return abfd->cacheable;\n+}\n+\n+static inline enum bfd_format\n+bfd_get_format (const bfd *abfd)\n+{\n+  return abfd->format;\n+}\n+\n+static inline flagword\n+bfd_get_file_flags (const bfd *abfd)\n+{\n+  return abfd->flags;\n+}\n+\n+static inline bfd_vma\n+bfd_get_start_address (const bfd *abfd)\n+{\n+  return abfd->start_address;\n+}\n+\n+static inline unsigned int\n+bfd_get_symcount (const bfd *abfd)\n+{\n+  return abfd->symcount;\n+}\n+\n+static inline unsigned int\n+bfd_get_dynamic_symcount (const bfd *abfd)\n+{\n+  return abfd->dynsymcount;\n+}\n+\n+static inline struct bfd_symbol **\n+bfd_get_outsymbols (const bfd *abfd)\n+{\n+  return abfd->outsymbols;\n+}\n+\n+static inline unsigned int\n+bfd_count_sections (const bfd *abfd)\n+{\n+  return abfd->section_count;\n+}\n+\n+static inline bfd_boolean\n+bfd_has_map (const bfd *abfd)\n+{\n+  return abfd->has_armap;\n+}\n+\n+static inline bfd_boolean\n+bfd_is_thin_archive (const bfd *abfd)\n+{\n+  return abfd->is_thin_archive;\n+}\n+\n+static inline void *\n+bfd_usrdata (const bfd *abfd)\n+{\n+  return abfd->usrdata;\n+}\n+\n /* See note beside bfd_set_section_userdata.  */\n static inline bfd_boolean\n bfd_set_cacheable (bfd * abfd, bfd_boolean val)\n@@ -7329,6 +7369,18 @@ bfd_set_cacheable (bfd * abfd, bfd_boolean val)\n   return TRUE;\n }\n \n+static inline void\n+bfd_set_thin_archive (bfd *abfd, bfd_boolean val)\n+{\n+  abfd->is_thin_archive = val;\n+}\n+\n+static inline void\n+bfd_set_usrdata (bfd *abfd, void *val)\n+{\n+  abfd->usrdata = val;\n+}\n+\n \n typedef enum bfd_error\n {\n@@ -8023,6 +8075,66 @@ typedef struct bfd_target\n \n } bfd_target;\n \n+static inline const char *\n+bfd_get_target (const bfd *abfd)\n+{\n+  return abfd->xvec->name;\n+}\n+\n+static inline enum bfd_flavour\n+bfd_get_flavour (const bfd *abfd)\n+{\n+  return abfd->xvec->flavour;\n+}\n+\n+static inline flagword\n+bfd_applicable_file_flags (const bfd *abfd)\n+{\n+  return abfd->xvec->object_flags;\n+}\n+\n+static inline bfd_boolean\n+bfd_family_coff (const bfd *abfd)\n+{\n+  return (bfd_get_flavour (abfd) == bfd_target_coff_flavour\n+          || bfd_get_flavour (abfd) == bfd_target_xcoff_flavour);\n+}\n+\n+static inline bfd_boolean\n+bfd_big_endian (const bfd *abfd)\n+{\n+  return abfd->xvec->byteorder == BFD_ENDIAN_BIG;\n+}\n+static inline bfd_boolean\n+bfd_little_endian (const bfd *abfd)\n+{\n+  return abfd->xvec->byteorder == BFD_ENDIAN_LITTLE;\n+}\n+\n+static inline bfd_boolean\n+bfd_header_big_endian (const bfd *abfd)\n+{\n+  return abfd->xvec->header_byteorder == BFD_ENDIAN_BIG;\n+}\n+\n+static inline bfd_boolean\n+bfd_header_little_endian (const bfd *abfd)\n+{\n+  return abfd->xvec->header_byteorder == BFD_ENDIAN_LITTLE;\n+}\n+\n+static inline flagword\n+bfd_applicable_section_flags (const bfd *abfd)\n+{\n+  return abfd->xvec->section_flags;\n+}\n+\n+static inline char\n+bfd_get_symbol_leading_char (const bfd *abfd)\n+{\n+  return abfd->xvec->symbol_leading_char;\n+}\n+\n bfd_boolean bfd_set_default_target (const char *name);\n \n const bfd_target *bfd_find_target (const char *target_name, bfd *abfd);"
    },
    {
      "sha": "c11274c187f0b09dca7cdbd3d51f1d25cc82a2af",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 84,
      "deletions": 0,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -355,6 +355,78 @@ CODE_FRAGMENT\n .  const struct bfd_build_id *build_id;\n .};\n .\n+.static inline const char *\n+.bfd_get_filename (const bfd *abfd)\n+.{\n+.  return abfd->filename;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_get_cacheable (const bfd *abfd)\n+.{\n+.  return abfd->cacheable;\n+.}\n+.\n+.static inline enum bfd_format\n+.bfd_get_format (const bfd *abfd)\n+.{\n+.  return abfd->format;\n+.}\n+.\n+.static inline flagword\n+.bfd_get_file_flags (const bfd *abfd)\n+.{\n+.  return abfd->flags;\n+.}\n+.\n+.static inline bfd_vma\n+.bfd_get_start_address (const bfd *abfd)\n+.{\n+.  return abfd->start_address;\n+.}\n+.\n+.static inline unsigned int\n+.bfd_get_symcount (const bfd *abfd)\n+.{\n+.  return abfd->symcount;\n+.}\n+.\n+.static inline unsigned int\n+.bfd_get_dynamic_symcount (const bfd *abfd)\n+.{\n+.  return abfd->dynsymcount;\n+.}\n+.\n+.static inline struct bfd_symbol **\n+.bfd_get_outsymbols (const bfd *abfd)\n+.{\n+.  return abfd->outsymbols;\n+.}\n+.\n+.static inline unsigned int\n+.bfd_count_sections (const bfd *abfd)\n+.{\n+.  return abfd->section_count;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_has_map (const bfd *abfd)\n+.{\n+.  return abfd->has_armap;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_is_thin_archive (const bfd *abfd)\n+.{\n+.  return abfd->is_thin_archive;\n+.}\n+.\n+.static inline void *\n+.bfd_usrdata (const bfd *abfd)\n+.{\n+.  return abfd->usrdata;\n+.}\n+.\n .{* See note beside bfd_set_section_userdata.  *}\n .static inline bfd_boolean\n .bfd_set_cacheable (bfd * abfd, bfd_boolean val)\n@@ -363,6 +435,18 @@ CODE_FRAGMENT\n .  return TRUE;\n .}\n .\n+.static inline void\n+.bfd_set_thin_archive (bfd *abfd, bfd_boolean val)\n+.{\n+.  abfd->is_thin_archive = val;\n+.}\n+.\n+.static inline void\n+.bfd_set_usrdata (bfd *abfd, void *val)\n+.{\n+.  abfd->usrdata = val;\n+.}\n+.\n */\n \n #include \"sysdep.h\""
    },
    {
      "sha": "116a5c34de88d6791faa1c833a72492895764aa6",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -584,6 +584,66 @@ to find an alternative output format that is suitable.\n .\n .} bfd_target;\n .\n+.static inline const char *\n+.bfd_get_target (const bfd *abfd)\n+.{\n+.  return abfd->xvec->name;\n+.}\n+.\n+.static inline enum bfd_flavour\n+.bfd_get_flavour (const bfd *abfd)\n+.{\n+.  return abfd->xvec->flavour;\n+.}\n+.\n+.static inline flagword\n+.bfd_applicable_file_flags (const bfd *abfd)\n+.{\n+.  return abfd->xvec->object_flags;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_family_coff (const bfd *abfd)\n+.{\n+.  return (bfd_get_flavour (abfd) == bfd_target_coff_flavour\n+.          || bfd_get_flavour (abfd) == bfd_target_xcoff_flavour);\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_big_endian (const bfd *abfd)\n+.{\n+.  return abfd->xvec->byteorder == BFD_ENDIAN_BIG;\n+.}\n+.static inline bfd_boolean\n+.bfd_little_endian (const bfd *abfd)\n+.{\n+.  return abfd->xvec->byteorder == BFD_ENDIAN_LITTLE;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_header_big_endian (const bfd *abfd)\n+.{\n+.  return abfd->xvec->header_byteorder == BFD_ENDIAN_BIG;\n+.}\n+.\n+.static inline bfd_boolean\n+.bfd_header_little_endian (const bfd *abfd)\n+.{\n+.  return abfd->xvec->header_byteorder == BFD_ENDIAN_LITTLE;\n+.}\n+.\n+.static inline flagword\n+.bfd_applicable_section_flags (const bfd *abfd)\n+.{\n+.  return abfd->xvec->section_flags;\n+.}\n+.\n+.static inline char\n+.bfd_get_symbol_leading_char (const bfd *abfd)\n+.{\n+.  return abfd->xvec->symbol_leading_char;\n+.}\n+.\n */\n \n /* All known xvecs (even those that don't compile on all systems)."
    },
    {
      "sha": "21dc92dcae1a9b1567382845a4ff3a557821f265",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1,3 +1,7 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* ar.c (write_archive): Use bfd_set_thin_archive.\n+\n 2019-09-18  Tamar Christina  <tamar.christina@arm.com>\n \n \t* testsuite/binutils-all/objdump.exp (objump -S): Update testcases."
    },
    {
      "sha": "6bac862bc73dacba6c321aac9dbeb54ba2efbe72",
      "filename": "binutils/ar.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/binutils/ar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/binutils/ar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ar.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1200,7 +1200,7 @@ write_archive (bfd *iarch)\n     obfd->flags |= BFD_DETERMINISTIC_OUTPUT;\n \n   if (make_thin_archive || bfd_is_thin_archive (iarch))\n-    bfd_is_thin_archive (obfd) = 1;\n+    bfd_set_thin_archive (obfd, TRUE);\n \n   if (!bfd_set_archive_head (obfd, contents_head))\n     bfd_fatal (old_name);"
    },
    {
      "sha": "5314b2746bc35d4c0d499b43e2d4a71c6f4a1fa9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1,3 +1,12 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* gdb_bfd.c (gdb_bfd_ref, gdb_bfd_unref): Use bfd_set_usrdata.\n+\t* dwarf2read.c (dwarf2_read_gdb_index, dwarf2_read_debug_names),\n+\t(read_indirect_string_from_dwz): Use bfd accessor.\n+\t* dwarf2read.h (struct dwz_file <filename>): Likewise.\n+\t* machoread.c (macho_symfile_read_all_oso): Likewise.\n+\t* solib.c (solib_bfd_open): Likewise.\n+\n 2019-09-19  Christian Biesinger  <cbiesinger@google.com>\n \n \t* eval.c: Move declaration of overload_resolution to..."
    },
    {
      "sha": "1052501c351de0923ee79df201151337517841f0",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -3584,14 +3584,14 @@ dwarf2_read_gdb_index\n \treturn 0;\n \n       if (!read_gdb_index_from_buffer (objfile,\n-\t\t\t\t       bfd_get_filename (dwz->dwz_bfd), 1,\n-\t\t\t\t       dwz_index_content, &dwz_map,\n+\t\t\t\t       bfd_get_filename (dwz->dwz_bfd.get ()),\n+\t\t\t\t       1, dwz_index_content, &dwz_map,\n \t\t\t\t       &dwz_list, &dwz_list_elements,\n \t\t\t\t       &dwz_types_ignore,\n \t\t\t\t       &dwz_types_elements_ignore))\n \t{\n \t  warning (_(\"could not read '.gdb_index' section from %s; skipping\"),\n-\t\t   bfd_get_filename (dwz->dwz_bfd));\n+\t\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n \t  return 0;\n \t}\n     }\n@@ -5596,11 +5596,11 @@ dwarf2_read_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   if (dwz != NULL)\n     {\n       if (!read_debug_names_from_section (objfile,\n-\t\t\t\t\t  bfd_get_filename (dwz->dwz_bfd),\n+\t\t\t\t\t  bfd_get_filename (dwz->dwz_bfd.get ()),\n \t\t\t\t\t  &dwz->debug_names, dwz_map))\n \t{\n \t  warning (_(\"could not read '.debug_names' section from %s; skipping\"),\n-\t\t   bfd_get_filename (dwz->dwz_bfd));\n+\t\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n \t  return false;\n \t}\n     }\n@@ -19759,11 +19759,11 @@ read_indirect_string_from_dwz (struct objfile *objfile, struct dwz_file *dwz,\n   if (dwz->str.buffer == NULL)\n     error (_(\"DW_FORM_GNU_strp_alt used without .debug_str \"\n \t     \"section [in module %s]\"),\n-\t   bfd_get_filename (dwz->dwz_bfd));\n+\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n   if (str_offset >= dwz->str.size)\n     error (_(\"DW_FORM_GNU_strp_alt pointing outside of \"\n \t     \".debug_str section [in module %s]\"),\n-\t   bfd_get_filename (dwz->dwz_bfd));\n+\t   bfd_get_filename (dwz->dwz_bfd.get ()));\n   gdb_assert (HOST_CHAR_BIT == 8);\n   if (dwz->str.buffer[str_offset] == '\\0')\n     return NULL;"
    },
    {
      "sha": "d5a02990d41f2a45135e60230ab9096ddffa8e1a",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -417,7 +417,7 @@ struct dwz_file\n \n   const char *filename () const\n   {\n-    return bfd_get_filename (this->dwz_bfd);\n+    return bfd_get_filename (this->dwz_bfd.get ());\n   }\n \n   /* A dwz file can only contain a few sections.  */"
    },
    {
      "sha": "69618a27e1cc6c0e6d50ddec795956c9ed9afd97",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -546,7 +546,7 @@ gdb_bfd_ref (struct bfd *abfd)\n   abfd->flags |= BFD_DECOMPRESS;\n \n   gdata = new gdb_bfd_data (abfd);\n-  bfd_usrdata (abfd) = gdata;\n+  bfd_set_usrdata (abfd, gdata);\n   bfd_alloc_data (abfd);\n \n   /* This is the first we've seen it, so add it to the hash table.  */\n@@ -608,7 +608,7 @@ gdb_bfd_unref (struct bfd *abfd)\n \n   bfd_free_data (abfd);\n   delete gdata;\n-  bfd_usrdata (abfd) = NULL;  /* Paranoia.  */\n+  bfd_set_usrdata (abfd, NULL);  /* Paranoia.  */\n \n   htab_remove_elt (all_bfds, abfd);\n "
    },
    {
      "sha": "a015d297c38e3797c8a4d46893a473d34536a64a",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -671,7 +671,7 @@ macho_symfile_read_all_oso (std::vector<oso_el> *oso_vector_ptr,\n           /* Load all oso in this library.  */\n \t  while (member_bfd != NULL)\n \t    {\n-\t      const char *member_name = member_bfd->filename;\n+\t      const char *member_name = bfd_get_filename (member_bfd.get ());\n               int member_len = strlen (member_name);\n \n               /* If this member is referenced, add it as a symfile.  */\n@@ -685,7 +685,7 @@ macho_symfile_read_all_oso (std::vector<oso_el> *oso_vector_ptr,\n                                   member_len))\n                     {\n                       macho_add_oso_symfile (oso2, member_bfd,\n-\t\t\t\t\t     bfd_get_filename (member_bfd),\n+\t\t\t\t\t     bfd_get_filename (member_bfd.get ()),\n                                              main_objfile, symfile_flags);\n                       oso2->name = NULL;\n                       break;"
    },
    {
      "sha": "b9a61e265b1657813bc68636b76a6dd101a52e91",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -502,14 +502,14 @@ solib_bfd_open (const char *pathname)\n   /* Check bfd format.  */\n   if (!bfd_check_format (abfd.get (), bfd_object))\n     error (_(\"`%s': not in executable format: %s\"),\n-\t   bfd_get_filename (abfd), bfd_errmsg (bfd_get_error ()));\n+\t   bfd_get_filename (abfd.get ()), bfd_errmsg (bfd_get_error ()));\n \n   /* Check bfd arch.  */\n   b = gdbarch_bfd_arch_info (target_gdbarch ());\n   if (!b->compatible (b, bfd_get_arch_info (abfd.get ())))\n     warning (_(\"`%s': Shared library architecture %s is not compatible \"\n-               \"with target architecture %s.\"), bfd_get_filename (abfd),\n-             bfd_get_arch_info (abfd.get ())->printable_name,\n+\t       \"with target architecture %s.\"), bfd_get_filename (abfd.get ()),\n+\t     bfd_get_arch_info (abfd.get ())->printable_name,\n \t     b->printable_name);\n \n   return abfd;"
    },
    {
      "sha": "705a2b2de8ddee488b82e7a48efb17a46a3e1a9e",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1,3 +1,16 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldelf.c (ldelf_after_open, ldelf_place_orphan\n+\t* ldlang.c (walk_wild_file, lang_process): Use bfd_usrdata.\n+\t(load_symbols, ldlang_add_file): Use bfd_set_usrdata.\n+\t* ldmain.c (add_archive_element): Use bfd_usrdata.\n+\t* ldlang.h (bfd_input_just_syms): New inline function.\n+\t* emultempl/aarch64elf.em (build_section_lists): Use it.\n+\t* emultempl/mmo.em (mmo_place_orphan): Likewise.\n+\t* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n+\t* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n+\t* emultempl/ppc64elf.em (build_section_lists): Likewise.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* ldcref.c, * ldctor.c, * ldelf.c, * ldlang.c, * pe-dll.c,"
    },
    {
      "sha": "208d169404dfe344bff91e7d6cde1fd2e792937b",
      "filename": "ld/emultempl/aarch64elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/aarch64elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/aarch64elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aarch64elf.em?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -217,7 +217,7 @@ build_section_lists (lang_statement_union_type *statement)\n     {\n       asection *i = statement->input_section.section;\n \n-      if (!((lang_input_statement_type *) i->owner->usrdata)->flags.just_syms\n+      if (!bfd_input_just_syms (i->owner)\n \t  && (i->flags & SEC_EXCLUDE) == 0\n \t  && i->output_section != NULL\n \t  && i->output_section->owner == link_info.output_bfd)"
    },
    {
      "sha": "85c5863953396bd97692ad3d0ae23cbaf2613fc1",
      "filename": "ld/emultempl/mmo.em",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/mmo.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/mmo.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/mmo.em?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -116,9 +116,7 @@ mmo_place_orphan (asection *s,\n \t    && (nexts->flags & SEC_EXCLUDE) == 0\n \t    && ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0\n \t    && (nexts->owner->flags & DYNAMIC) == 0\n-\t    && nexts->owner->usrdata != NULL\n-\t    && !(((lang_input_statement_type *) nexts->owner->usrdata)\n-\t\t ->flags.just_syms))\n+\t    && !bfd_input_just_syms (nexts->owner))\n \t  flags = (((flags ^ SEC_READONLY) | (nexts->flags ^ SEC_READONLY))\n \t\t   ^ SEC_READONLY);\n     }"
    },
    {
      "sha": "150c98296f187b5ba171a4d6c99e78884432d238",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -2116,9 +2116,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t&& (nexts->flags & SEC_EXCLUDE) == 0\n \t\t&& ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0\n \t\t&& (nexts->owner->flags & DYNAMIC) == 0\n-\t\t&& nexts->owner->usrdata != NULL\n-\t\t&& !(((lang_input_statement_type *) nexts->owner->usrdata)\n-\t\t     ->flags.just_syms))\n+\t\t&& !bfd_input_just_syms (nexts->owner))\n \t      flags = (((flags ^ SEC_READONLY)\n \t\t\t| (nexts->flags ^ SEC_READONLY))\n \t\t       ^ SEC_READONLY);"
    },
    {
      "sha": "ab2a989bc59133d5c9976d39d820f559f1c16803",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1914,9 +1914,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t&& (nexts->flags & SEC_EXCLUDE) == 0\n \t\t&& ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0\n \t\t&& (nexts->owner->flags & DYNAMIC) == 0\n-\t\t&& nexts->owner->usrdata != NULL\n-\t\t&& !(((lang_input_statement_type *) nexts->owner->usrdata)\n-\t\t     ->flags.just_syms))\n+\t\t&& !bfd_input_just_syms (nexts->owner))\n \t      flags = (((flags ^ SEC_READONLY)\n \t\t\t| (nexts->flags ^ SEC_READONLY))\n \t\t       ^ SEC_READONLY);"
    },
    {
      "sha": "aad56cfddd17d971e0f67fc337af70d3da69e66c",
      "filename": "ld/emultempl/ppc64elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/ppc64elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/emultempl/ppc64elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ppc64elf.em?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -489,7 +489,7 @@ build_section_lists (lang_statement_union_type *statement)\n     {\n       asection *i = statement->input_section.section;\n \n-      if (!((lang_input_statement_type *) i->owner->usrdata)->flags.just_syms\n+      if (!bfd_input_just_syms (i->owner)\n \t  && (i->flags & SEC_EXCLUDE) == 0\n \t  && i->output_section != NULL\n \t  && i->output_section->owner == link_info.output_bfd)"
    },
    {
      "sha": "e43d33d4325a3548327df9371d257c4a2338b629",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1018,7 +1018,7 @@ ldelf_after_open (int use_libpath, int native, int is_linux, int is_freebsd,\n \t   abfd != (bfd *) NULL; abfd = abfd->link.next)\n \tif (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n \t    && bfd_count_sections (abfd) != 0\n-\t    && !((lang_input_statement_type *) abfd->usrdata)->flags.just_syms)\n+\t    && !bfd_input_just_syms (abfd))\n \t  break;\n \n       /* PR 10555: If there are no ELF input files do not try to\n@@ -1060,7 +1060,7 @@ ldelf_after_open (int use_libpath, int native, int is_linux, int is_freebsd,\n \t{\n \t  int type = 0;\n \n-\t  if (((lang_input_statement_type *) abfd->usrdata)->flags.just_syms)\n+\t  if (bfd_input_just_syms (abfd))\n \t    continue;\n \n \t  for (s = abfd->sections; s && type < COMPACT_EH_HDR; s = s->next)\n@@ -2065,9 +2065,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n \t    && (nexts->flags & SEC_EXCLUDE) == 0\n \t    && ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0\n \t    && (nexts->owner->flags & DYNAMIC) == 0\n-\t    && nexts->owner->usrdata != NULL\n-\t    && !(((lang_input_statement_type *) nexts->owner->usrdata)\n-\t\t ->flags.just_syms)\n+\t    && !bfd_input_just_syms (nexts->owner)\n \t    && _bfd_elf_match_sections_by_type (nexts->owner, nexts,\n \t\t\t\t\t\ts->owner, s))\n \t  flags = (((flags ^ SEC_READONLY)"
    },
    {
      "sha": "0ffcf34473ccf8426deb355eb6370fa11169d44f",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -902,12 +902,8 @@ walk_wild_file (lang_wild_statement_type *s,\n \t     archive which is included, BFD will call ldlang_add_file,\n \t     which will set the usrdata field of the member to the\n \t     lang_input_statement.  */\n-\t  if (member->usrdata != NULL)\n-\t    {\n-\t      walk_wild_section (s,\n-\t\t\t\t (lang_input_statement_type *) member->usrdata,\n-\t\t\t\t callback, data);\n-\t    }\n+\t  if (bfd_usrdata (member) != NULL)\n+\t    walk_wild_section (s, bfd_usrdata (member), callback, data);\n \n \t  member = bfd_openr_next_archived_file (f->the_bfd, member);\n \t}\n@@ -3038,7 +3034,7 @@ load_symbols (lang_input_statement_type *entry,\n     case bfd_archive:\n       check_excluded_libs (entry->the_bfd);\n \n-      entry->the_bfd->usrdata = entry;\n+      bfd_set_usrdata (entry->the_bfd, entry);\n       if (entry->flags.whole_archive)\n \t{\n \t  bfd *member = NULL;\n@@ -6898,7 +6894,7 @@ ldlang_add_file (lang_input_statement_type *entry)\n \n   *link_info.input_bfds_tail = entry->the_bfd;\n   link_info.input_bfds_tail = &entry->the_bfd->link.next;\n-  entry->the_bfd->usrdata = entry;\n+  bfd_set_usrdata (entry->the_bfd, entry);\n   bfd_set_gp_size (entry->the_bfd, g_switch_value);\n \n   /* Look through the sections and check for any which should not be\n@@ -7540,7 +7536,7 @@ lang_process (void)\n \t      *iter = temp;\n \t      if (my_arch != NULL)\n \t\t{\n-\t\t  lang_input_statement_type *parent = my_arch->usrdata;\n+\t\t  lang_input_statement_type *parent = bfd_usrdata (my_arch);\n \t\t  if (parent != NULL)\n \t\t    parent->next = (lang_input_statement_type *)\n \t\t      ((char *) iter"
    },
    {
      "sha": "9fb10f80a78b283309df2df9e07c69ceaad311e8",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -331,6 +331,12 @@ typedef struct input_section_userdata_struct\n \n #define get_userdata(x) ((x)->userdata)\n \n+static inline bfd_boolean\n+bfd_input_just_syms (const bfd *abfd)\n+{\n+  lang_input_statement_type *is = bfd_usrdata (abfd);\n+  return is != NULL && is->flags.just_syms;\n+}\n \n typedef struct lang_wild_statement_struct lang_wild_statement_type;\n "
    },
    {
      "sha": "34c19223137eed8596e4ff8950c2e634f3128a5a",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -816,7 +816,7 @@ add_archive_element (struct bfd_link_info *info,\n   input->local_sym_name = abfd->filename;\n   input->the_bfd = abfd;\n \n-  parent = abfd->my_archive->usrdata;\n+  parent = bfd_usrdata (abfd->my_archive);\n   if (parent != NULL && !parent->flags.reload)\n     parent->next = input;\n "
    },
    {
      "sha": "d4c7d166d2bbc4205cc7cd23894a6df6983ffeb7",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -1,3 +1,7 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* ppc/emul_generic.c (emul_add_tree_options): Delete old bfd code.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* common/sim-load.c, * common/sim-utils.c, * cris/sim-if.c,"
    },
    {
      "sha": "64c0219309099fe4733bdc49b7b702f6d59a2c1a",
      "filename": "sim/ppc/emul_generic.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00f93c449228e69f2161405b1f49b406e88785f0/sim/ppc/emul_generic.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00f93c449228e69f2161405b1f49b406e88785f0/sim/ppc/emul_generic.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/emul_generic.c?ref=00f93c449228e69f2161405b1f49b406e88785f0",
      "patch": "@@ -262,12 +262,7 @@ emul_add_tree_options(device *tree,\n   if (tree_find_property(tree, \"/options/little-endian?\"))\n     little_endian = tree_find_boolean_property(tree, \"/options/little-endian?\");\n   else {\n-#ifdef bfd_little_endian\t/* new bfd */\n     little_endian = (image != NULL && bfd_little_endian(image));\n-#else\n-    little_endian = (image != NULL &&\n-\t\t     !image->xvec->byteorder_big_p);\n-#endif\n     tree_parse(tree, \"/options/little-endian? %s\",\n \t       little_endian ? \"true\" : \"false\");\n   }"
    }
  ]
}