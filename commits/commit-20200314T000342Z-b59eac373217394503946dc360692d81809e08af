{
  "sha": "b59eac373217394503946dc360692d81809e08af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjU5ZWFjMzczMjE3Mzk0NTAzOTQ2ZGMzNjA2OTJkODE4MDllMDhhZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:42Z"
    },
    "message": "Introduce ada_value_print_array\n\nThis adds ada_value_print_array, a value-based analogue of\nada_val_print_array.  It also removes some unused parameters from a\ncouple of helper functions.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* ada-valprint.c (val_print_packed_array_elements): Remove\n\tbitoffset and val parameters.  Call common_val_print.\n\t(ada_val_print_string): Remove offset, address, and original_value\n\tparameters.\n\t(ada_val_print_array): Update.\n\t(ada_value_print_array): New function.\n\t(ada_value_print_1): Call it.",
    "tree": {
      "sha": "7fcd5e4a774d1e83e45116fdebb0854d22815ad3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7fcd5e4a774d1e83e45116fdebb0854d22815ad3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b59eac373217394503946dc360692d81809e08af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b59eac373217394503946dc360692d81809e08af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b59eac373217394503946dc360692d81809e08af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b59eac373217394503946dc360692d81809e08af/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "033711290333b0d4ec5c1b744af512f7ab133478",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/033711290333b0d4ec5c1b744af512f7ab133478",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/033711290333b0d4ec5c1b744af512f7ab133478"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 58,
    "deletions": 23
  },
  "files": [
    {
      "sha": "3f8d8b1ef9b13d230168426ceca14592ef59d63e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b59eac373217394503946dc360692d81809e08af/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b59eac373217394503946dc360692d81809e08af/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b59eac373217394503946dc360692d81809e08af",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-valprint.c (val_print_packed_array_elements): Remove\n+\tbitoffset and val parameters.  Call common_val_print.\n+\t(ada_val_print_string): Remove offset, address, and original_value\n+\tparameters.\n+\t(ada_val_print_array): Update.\n+\t(ada_value_print_array): New function.\n+\t(ada_value_print_1): Call it.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* ada-valprint.c (ada_value_print): Use common_val_print."
    },
    {
      "sha": "fc34ca5e6e2259065ef06d335c6d9d4c59b2aadb",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 48,
      "deletions": 23,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b59eac373217394503946dc360692d81809e08af/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b59eac373217394503946dc360692d81809e08af/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=b59eac373217394503946dc360692d81809e08af",
      "patch": "@@ -112,17 +112,15 @@ print_optional_low_bound (struct ui_file *stream, struct type *type,\n }\n \n /*  Version of val_print_array_elements for GNAT-style packed arrays.\n-    Prints elements of packed array of type TYPE at bit offset\n-    BITOFFSET from VALADDR on STREAM.  Formats according to OPTIONS and\n-    separates with commas.  RECURSE is the recursion (nesting) level.\n-    TYPE must have been decoded (as by ada_coerce_to_simple_array).  */\n+    Prints elements of packed array of type TYPE from VALADDR on\n+    STREAM.  Formats according to OPTIONS and separates with commas.\n+    RECURSE is the recursion (nesting) level.  TYPE must have been\n+    decoded (as by ada_coerce_to_simple_array).  */\n \n static void\n val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n-\t\t\t\t int offset,\n-\t\t\t\t int bitoffset, struct ui_file *stream,\n+\t\t\t\t int offset, struct ui_file *stream,\n \t\t\t\t int recurse,\n-\t\t\t\t struct value *val,\n \t\t\t\t const struct value_print_options *options)\n {\n   unsigned int i;\n@@ -230,9 +228,7 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t  struct value_print_options opts = *options;\n \n \t  opts.deref_ref = 0;\n-\t  val_print (elttype,\n-\t\t     value_embedded_offset (v0), 0, stream,\n-\t\t     recurse + 1, v0, &opts, current_language);\n+\t  common_val_print (v0, stream, recurse + 1, &opts, current_language);\n \t  annotate_elt_rep (i - i0);\n \t  fprintf_filtered (stream, _(\" %p[<repeats %u times>%p]\"),\n \t\t\t    metadata_style.style ().ptr (), i - i0, nullptr);\n@@ -262,9 +258,8 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t\t  maybe_print_array_index (index_type, j + low,\n \t\t\t\t\t   stream, options);\n \t\t}\n-\t      val_print (elttype,\n-\t\t\t value_embedded_offset (v0), 0, stream,\n-\t\t\t recurse + 1, v0, &opts, current_language);\n+\t      common_val_print (v0, stream, recurse + 1, &opts,\n+\t\t\t\tcurrent_language);\n \t      annotate_elt ();\n \t    }\n \t}\n@@ -715,9 +710,8 @@ print_field_values (struct type *type, const gdb_byte *valaddr,\n \n static void\n ada_val_print_string (struct type *type, const gdb_byte *valaddr,\n-\t\t      int offset, int offset_aligned, CORE_ADDR address,\n+\t\t      int offset_aligned,\n \t\t      struct ui_file *stream, int recurse,\n-\t\t      struct value *original_value,\n \t\t      const struct value_print_options *options)\n {\n   enum bfd_endian byte_order = type_byte_order (type);\n@@ -1129,25 +1123,58 @@ ada_val_print_array (struct type *type, const gdb_byte *valaddr,\n   if (ada_is_string_type (type)\n       && (options->format == 0 || options->format == 's'))\n     {\n-      ada_val_print_string (type, valaddr, offset, offset_aligned,\n-\t\t\t    address, stream, recurse, original_value,\n-\t\t\t    options);\n+      ada_val_print_string (type, valaddr, offset_aligned,\n+\t\t\t    stream, recurse, options);\n       return;\n     }\n \n   fprintf_filtered (stream, \"(\");\n   print_optional_low_bound (stream, type, options);\n   if (TYPE_FIELD_BITSIZE (type, 0) > 0)\n     val_print_packed_array_elements (type, valaddr, offset_aligned,\n-\t\t\t\t     0, stream, recurse,\n-\t\t\t\t     original_value, options);\n+\t\t\t\t     stream, recurse, options);\n   else\n     val_print_array_elements (type, offset_aligned, address,\n \t\t\t      stream, recurse, original_value,\n \t\t\t      options, 0);\n   fprintf_filtered (stream, \")\");\n }\n \n+/* Implement Ada value_print'ing for the case where TYPE is a\n+   TYPE_CODE_ARRAY.  */\n+\n+static void\n+ada_value_print_array (struct value *val, struct ui_file *stream, int recurse,\n+\t\t       const struct value_print_options *options)\n+{\n+  struct type *type = ada_check_typedef (value_type (val));\n+\n+  /* For an array of characters, print with string syntax.  */\n+  if (ada_is_string_type (type)\n+      && (options->format == 0 || options->format == 's'))\n+    {\n+      const gdb_byte *valaddr = value_contents_for_printing (val);\n+      int offset_aligned = ada_aligned_value_addr (type, valaddr) - valaddr;\n+\n+      ada_val_print_string (type, valaddr, offset_aligned, stream, recurse,\n+\t\t\t    options);\n+      return;\n+    }\n+\n+  fprintf_filtered (stream, \"(\");\n+  print_optional_low_bound (stream, type, options);\n+  if (TYPE_FIELD_BITSIZE (type, 0) > 0)\n+    {\n+      const gdb_byte *valaddr = value_contents_for_printing (val);\n+      int offset_aligned = ada_aligned_value_addr (type, valaddr) - valaddr;\n+      val_print_packed_array_elements (type, valaddr, offset_aligned,\n+\t\t\t\t       stream, recurse, options);\n+    }\n+  else\n+    value_print_array_elements (val, stream, recurse, options, 0);\n+  fprintf_filtered (stream, \")\");\n+}\n+\n /* Implement Ada val_print'ing for the case where TYPE is\n    a TYPE_CODE_REF.  */\n \n@@ -1390,9 +1417,7 @@ ada_value_print_1 (struct value *val, struct ui_file *stream, int recurse,\n       break;\n \n     case TYPE_CODE_ARRAY:\n-      ada_val_print_array (type, valaddr, 0, 0,\n-\t\t\t   address, stream, recurse, val,\n-\t\t\t   options);\n+      ada_value_print_array (val, stream, recurse, options);\n       return;\n \n     case TYPE_CODE_REF:"
    }
  ]
}