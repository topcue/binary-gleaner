{
  "sha": "b920bc37223df1213180ec0b13eb0828c015d34f",
  "node_id": "C_kwDOANOeidoAKGI5MjBiYzM3MjIzZGYxMjEzMTgwZWMwYjEzZWIwODI4YzAxNWQzNGY",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T23:45:59Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-25T00:03:26Z"
    },
    "message": "asan: evax_bfd_print_image buffer overflow\n\n\t* vms-alpha.c (evax_bfd_print_image): Sanity check printing of\n\t\"image activator fixup\" section.\n\t(evax_bfd_print_relocation_records): Sanity check buffer offsets.\n\t(evax_bfd_print_address_fixups): Likewise.\n\t(evax_bfd_print_reference_fixups): Likewise.",
    "tree": {
      "sha": "19e35c6f403ca8655d0a6460e05058a37f3baaa0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19e35c6f403ca8655d0a6460e05058a37f3baaa0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b920bc37223df1213180ec0b13eb0828c015d34f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b920bc37223df1213180ec0b13eb0828c015d34f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b920bc37223df1213180ec0b13eb0828c015d34f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b920bc37223df1213180ec0b13eb0828c015d34f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "30459fe4efcf3113509407e94edd452f02fe39a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30459fe4efcf3113509407e94edd452f02fe39a8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/30459fe4efcf3113509407e94edd452f02fe39a8"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 51,
    "deletions": 42
  },
  "files": [
    {
      "sha": "0baca52febde394a31bd64a49711ad43e67ab906",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 51,
      "deletions": 42,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b920bc37223df1213180ec0b13eb0828c015d34f/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b920bc37223df1213180ec0b13eb0828c015d34f/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=b920bc37223df1213180ec0b13eb0828c015d34f",
      "patch": "@@ -6754,34 +6754,35 @@ evax_bfd_print_eobj (struct bfd *abfd, FILE *file)\n }\n \n static void\n-evax_bfd_print_relocation_records (FILE *file, const unsigned char *rel,\n+evax_bfd_print_relocation_records (FILE *file, const unsigned char *buf,\n+\t\t\t\t   size_t buf_size, size_t off,\n \t\t\t\t   unsigned int stride)\n {\n-  while (1)\n+  while (off <= buf_size - 8)\n     {\n       unsigned int base;\n       unsigned int count;\n       unsigned int j;\n \n-      count = bfd_getl32 (rel + 0);\n+      count = bfd_getl32 (buf + off + 0);\n \n       if (count == 0)\n \tbreak;\n-      base = bfd_getl32 (rel + 4);\n+      base = bfd_getl32 (buf + off + 4);\n \n       /* xgettext:c-format */\n       fprintf (file, _(\"  bitcount: %u, base addr: 0x%08x\\n\"),\n \t       count, base);\n \n-      rel += 8;\n-      for (j = 0; count > 0; j += 4, count -= 32)\n+      off += 8;\n+      for (j = 0; count > 0 && off <= buf_size - 4; j += 4, count -= 32)\n \t{\n \t  unsigned int k;\n \t  unsigned int n = 0;\n \t  unsigned int val;\n \n-\t  val = bfd_getl32 (rel);\n-\t  rel += 4;\n+\t  val = bfd_getl32 (buf + off);\n+\t  off += 4;\n \n \t  /* xgettext:c-format */\n \t  fprintf (file, _(\"   bitmap: 0x%08x (count: %u):\\n\"), val, count);\n@@ -6806,60 +6807,62 @@ evax_bfd_print_relocation_records (FILE *file, const unsigned char *rel,\n }\n \n static void\n-evax_bfd_print_address_fixups (FILE *file, const unsigned char *rel)\n+evax_bfd_print_address_fixups (FILE *file, const unsigned char *buf,\n+\t\t\t       size_t buf_size, size_t off)\n {\n-  while (1)\n+  while (off <= buf_size - 8)\n     {\n       unsigned int j;\n       unsigned int count;\n \n-      count = bfd_getl32 (rel + 0);\n+      count = bfd_getl32 (buf + off + 0);\n       if (count == 0)\n \treturn;\n       /* xgettext:c-format */\n       fprintf (file, _(\"  image %u (%u entries)\\n\"),\n-\t       (unsigned)bfd_getl32 (rel + 4), count);\n-      rel += 8;\n-      for (j = 0; j < count; j++)\n+\t       (unsigned) bfd_getl32 (buf + off + 4), count);\n+      off += 8;\n+      for (j = 0; j < count && off <= buf_size - 8; j++)\n \t{\n \t  /* xgettext:c-format */\n \t  fprintf (file, _(\"   offset: 0x%08x, val: 0x%08x\\n\"),\n-\t\t   (unsigned)bfd_getl32 (rel + 0),\n-\t\t   (unsigned)bfd_getl32 (rel + 4));\n-\t  rel += 8;\n+\t\t   (unsigned) bfd_getl32 (buf + off + 0),\n+\t\t   (unsigned) bfd_getl32 (buf + off + 4));\n+\t  off += 8;\n \t}\n     }\n }\n \n static void\n-evax_bfd_print_reference_fixups (FILE *file, const unsigned char *rel)\n+evax_bfd_print_reference_fixups (FILE *file, const unsigned char *buf,\n+\t\t\t\t size_t buf_size, size_t off)\n {\n   unsigned int count;\n \n-  while (1)\n+  while (off <= buf_size - 8)\n     {\n       unsigned int j;\n       unsigned int n = 0;\n \n-      count = bfd_getl32 (rel + 0);\n+      count = bfd_getl32 (buf + off + 0);\n       if (count == 0)\n \tbreak;\n       /* xgettext:c-format */\n       fprintf (file, _(\"  image %u (%u entries), offsets:\\n\"),\n-\t       (unsigned)bfd_getl32 (rel + 4), count);\n-      rel += 8;\n-      for (j = 0; j < count; j++)\n+\t       (unsigned) bfd_getl32 (buf + off + 4), count);\n+      off += 8;\n+      for (j = 0; j < count && off <= buf_size - 4; j++)\n \t{\n \t  if (n == 0)\n \t    fputs (\"   \", file);\n-\t  fprintf (file, _(\" 0x%08x\"), (unsigned)bfd_getl32 (rel));\n+\t  fprintf (file, _(\" 0x%08x\"), (unsigned) bfd_getl32 (buf + off));\n \t  n++;\n \t  if (n == 7)\n \t    {\n \t      fputs (\"\\n\", file);\n \t      n = 0;\n \t    }\n-\t  rel += 4;\n+\t  off += 4;\n \t}\n       if (n)\n \tfputs (\"\\n\", file);\n@@ -8111,7 +8114,7 @@ evax_bfd_print_image (bfd *abfd, FILE *file)\n       fprintf (file, _(\"Global symbol table:\\n\"));\n       evax_bfd_print_eobj (abfd, file);\n     }\n-  if (eiaf_vbn != 0)\n+  if (eiaf_vbn != 0 && eiaf_size >= sizeof (struct vms_eiaf))\n     {\n       unsigned char *buf;\n       struct vms_eiaf *eiaf;\n@@ -8183,12 +8186,14 @@ evax_bfd_print_image (bfd *abfd, FILE *file)\n \n       if (shlstoff)\n \t{\n-\t  struct vms_shl *shl = (struct vms_shl *)(buf + shlstoff);\n \t  unsigned int j;\n \n \t  fprintf (file, _(\" Shareable images:\\n\"));\n-\t  for (j = 0; j < shrimgcnt; j++, shl++)\n+\t  for (j = 0;\n+\t       j < shrimgcnt && shlstoff <= eiaf_size - sizeof (struct vms_shl);\n+\t       j++, shlstoff += sizeof (struct vms_shl))\n \t    {\n+\t      struct vms_shl *shl = (struct vms_shl *) (buf + shlstoff);\n \t      fprintf (file,\n \t\t       /* xgettext:c-format */\n \t\t       _(\"  %u: size: %u, flags: 0x%02x, name: %.*s\\n\"),\n@@ -8199,50 +8204,54 @@ evax_bfd_print_image (bfd *abfd, FILE *file)\n       if (qrelfixoff != 0)\n \t{\n \t  fprintf (file, _(\" quad-word relocation fixups:\\n\"));\n-\t  evax_bfd_print_relocation_records (file, buf + qrelfixoff, 8);\n+\t  evax_bfd_print_relocation_records (file, buf, eiaf_size,\n+\t\t\t\t\t     qrelfixoff, 8);\n \t}\n       if (lrelfixoff != 0)\n \t{\n \t  fprintf (file, _(\" long-word relocation fixups:\\n\"));\n-\t  evax_bfd_print_relocation_records (file, buf + lrelfixoff, 4);\n+\t  evax_bfd_print_relocation_records (file, buf, eiaf_size,\n+\t\t\t\t\t     lrelfixoff, 4);\n \t}\n       if (qdotadroff != 0)\n \t{\n \t  fprintf (file, _(\" quad-word .address reference fixups:\\n\"));\n-\t  evax_bfd_print_address_fixups (file, buf + qdotadroff);\n+\t  evax_bfd_print_address_fixups (file, buf, eiaf_size, qdotadroff);\n \t}\n       if (ldotadroff != 0)\n \t{\n \t  fprintf (file, _(\" long-word .address reference fixups:\\n\"));\n-\t  evax_bfd_print_address_fixups (file, buf + ldotadroff);\n+\t  evax_bfd_print_address_fixups (file, buf, eiaf_size, ldotadroff);\n \t}\n       if (codeadroff != 0)\n \t{\n \t  fprintf (file, _(\" Code Address Reference Fixups:\\n\"));\n-\t  evax_bfd_print_reference_fixups (file, buf + codeadroff);\n+\t  evax_bfd_print_reference_fixups (file, buf, eiaf_size, codeadroff);\n \t}\n       if (lpfixoff != 0)\n \t{\n \t  fprintf (file, _(\" Linkage Pairs Reference Fixups:\\n\"));\n-\t  evax_bfd_print_reference_fixups (file, buf + lpfixoff);\n+\t  evax_bfd_print_reference_fixups (file, buf, eiaf_size, lpfixoff);\n \t}\n-      if (chgprtoff)\n+      if (chgprtoff && chgprtoff <= eiaf_size - 4)\n \t{\n-\t  unsigned int count = (unsigned)bfd_getl32 (buf + chgprtoff);\n-\t  struct vms_eicp *eicp = (struct vms_eicp *)(buf + chgprtoff + 4);\n+\t  unsigned int count = (unsigned) bfd_getl32 (buf + chgprtoff);\n \t  unsigned int j;\n \n \t  fprintf (file, _(\" Change Protection (%u entries):\\n\"), count);\n-\t  for (j = 0; j < count; j++, eicp++)\n+\t  for (j = 0, chgprtoff += 4;\n+\t       j < count && chgprtoff <= eiaf_size - sizeof (struct vms_eicp);\n+\t       j++, chgprtoff += sizeof (struct vms_eicp))\n \t    {\n+\t      struct vms_eicp *eicp = (struct vms_eicp *) (buf + chgprtoff);\n \t      unsigned int prot = bfd_getl32 (eicp->newprt);\n \t      fprintf (file,\n \t\t       /* xgettext:c-format */\n \t\t       _(\"  base: 0x%08x %08x, size: 0x%08x, prot: 0x%08x \"),\n-\t\t       (unsigned)bfd_getl32 (eicp->baseva + 4),\n-\t\t       (unsigned)bfd_getl32 (eicp->baseva + 0),\n-\t\t       (unsigned)bfd_getl32 (eicp->size),\n-\t\t       (unsigned)bfd_getl32 (eicp->newprt));\n+\t\t       (unsigned) bfd_getl32 (eicp->baseva + 4),\n+\t\t       (unsigned) bfd_getl32 (eicp->baseva + 0),\n+\t\t       (unsigned) bfd_getl32 (eicp->size),\n+\t\t       (unsigned) bfd_getl32 (eicp->newprt));\n \t      switch (prot)\n \t\t{\n \t\tcase PRT__C_NA:"
    }
  ]
}