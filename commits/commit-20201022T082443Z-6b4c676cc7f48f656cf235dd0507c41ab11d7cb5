{
  "sha": "6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmI0YzY3NmNjN2Y0OGY2NTZjZjIzNWRkMDUwN2M0MWFiMTFkN2NiNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-08T15:34:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-22T08:24:43Z"
    },
    "message": "gdb/fortran: add support for parsing array strides in expressions\n\nWith this commit GDB now understands the syntax of Fortran array\nstrides, a user can type an expression including an array stride, but\nthey will only get an error informing them that array strides are not\nsupported.\n\nThis alone is an improvement on what we had before in GDB, better to\ngive the user a helpful message that a particular feature is not\nsupported than to just claim a syntax error.\n\nBefore:\n\n  (gdb) p array (1:10:2, 2:10:2)\n  A syntax error in expression, near `:2, 2:10:2)'.\n\nNow:\n\n  (gdb) p array (1:10:2, 2:10:2)\n  Fortran array strides are not currently supported\n\nLater commits will allow GDB to handle array strides correctly.\n\ngdb/ChangeLog:\n\n\t* expprint.c (dump_subexp_body_standard): Print RANGE_HAS_STRIDE.\n\t* expression.h (enum range_type): Add RANGE_HAS_STRIDE.\n\t* f-exp.y (arglist): Allow for a series of subranges.\n\t(subrange): Add cases for subranges with strides.\n\t* f-lang.c (value_f90_subarray): Catch use of array strides and\n\tthrow an error.\n\t* parse.c (operator_length_standard): Handle RANGE_HAS_STRIDE.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/array-slices.exp: Add a new test.",
    "tree": {
      "sha": "2aaee877ea0ddba4b3c99541a394833252b44b6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2aaee877ea0ddba4b3c99541a394833252b44b6d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f2d8e4c59770975415585af20b3d4249ff57b36e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2d8e4c59770975415585af20b3d4249ff57b36e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f2d8e4c59770975415585af20b3d4249ff57b36e"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 84,
    "deletions": 1
  },
  "files": [
    {
      "sha": "bf93e1b8a26e2e53cb41d80995a68c30eaaef336",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -1,3 +1,13 @@\n+2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* expprint.c (dump_subexp_body_standard): Print RANGE_HAS_STRIDE.\n+\t* expression.h (enum range_type): Add RANGE_HAS_STRIDE.\n+\t* f-exp.y (arglist): Allow for a series of subranges.\n+\t(subrange): Add cases for subranges with strides.\n+\t* f-lang.c (value_f90_subarray): Catch use of array strides and\n+\tthrow an error.\n+\t* parse.c (operator_length_standard): Handle RANGE_HAS_STRIDE.\n+\n 2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* expprint.c (print_subexp_standard): Change enum range_type to"
    },
    {
      "sha": "a14eeb00f19a25b13ac79f36eaa74d55cdee768f",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -1120,12 +1120,16 @@ dump_subexp_body_standard (struct expression *exp,\n \tfputs_filtered (\"..\", stream);\n \tif (!(range_flag & RANGE_HIGH_BOUND_DEFAULT))\n \t  fputs_filtered (\"EXP\", stream);\n+\tif (range_flag & RANGE_HAS_STRIDE)\n+\t  fputs_filtered (\":EXP\", stream);\n \tfputs_filtered (\"'\", stream);\n \n \tif (!(range_flag & RANGE_LOW_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n \tif (!(range_flag & RANGE_HIGH_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n+\tif (range_flag & RANGE_HAS_STRIDE)\n+\t  elt = dump_subexp (exp, stream, elt);\n       }\n       break;\n "
    },
    {
      "sha": "8de712310ecfe72f9f08fdff3c4300f366d6e31b",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -199,6 +199,9 @@ enum range_flag : unsigned\n \n   /* The high bound of this range is exclusive.  */\n   RANGE_HIGH_BOUND_EXCLUSIVE = 1 << 2,\n+\n+  /* The range has a stride.  */\n+  RANGE_HAS_STRIDE = 1 << 3,\n };\n \n DEF_ENUM_FLAGS_TYPE (enum range_flag, range_flags);"
    },
    {
      "sha": "eaa721424313b767f12dc8503725f817068b139f",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -284,6 +284,10 @@ arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n \t\t\t{ pstate->arglist_len++; }\n \t;\n \n+arglist\t:\targlist ',' subrange   %prec ABOVE_COMMA\n+\t\t\t{ pstate->arglist_len++; }\n+\t;\n+\n /* There are four sorts of subrange types in F90.  */\n \n subrange:\texp ':' exp\t%prec ABOVE_COMMA\n@@ -314,6 +318,38 @@ subrange:\t':'\t%prec ABOVE_COMMA\n \t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n \t;\n \n+/* And each of the four subrange types can also have a stride.  */\n+subrange:\texp ':' exp ':' exp\t%prec ABOVE_COMMA\n+\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n+\t\t\t  write_exp_elt_longcst (pstate, RANGE_HAS_STRIDE);\n+\t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n+\t;\n+\n+subrange:\texp ':' ':' exp\t%prec ABOVE_COMMA\n+\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t (RANGE_HIGH_BOUND_DEFAULT\n+\t\t\t\t\t\t  | RANGE_HAS_STRIDE));\n+\t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n+\t;\n+\n+subrange:\t':' exp ':' exp\t%prec ABOVE_COMMA\n+\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t (RANGE_LOW_BOUND_DEFAULT\n+\t\t\t\t\t\t  | RANGE_HAS_STRIDE));\n+\t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n+\t;\n+\n+subrange:\t':' ':' exp\t%prec ABOVE_COMMA\n+\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t (RANGE_LOW_BOUND_DEFAULT\n+\t\t\t\t\t\t  | RANGE_HIGH_BOUND_DEFAULT\n+\t\t\t\t\t\t  | RANGE_HAS_STRIDE));\n+\t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n+\t;\n+\n complexnum:     exp ',' exp \n                 \t{ }                          \n         ;"
    },
    {
      "sha": "f7c54b462a49ae9888ee42e2b4cb0d83223116bb",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -124,7 +124,7 @@ value_f90_subarray (struct value *array,\n \t\t    struct expression *exp, int *pos, enum noside noside)\n {\n   int pc = (*pos) + 1;\n-  LONGEST low_bound, high_bound;\n+  LONGEST low_bound, high_bound, stride;\n   struct type *range = check_typedef (value_type (array)->index_type ());\n   enum range_flag range_flag\n     = (enum range_flag) longest_to_int (exp->elts[pc].longconst);\n@@ -141,6 +141,14 @@ value_f90_subarray (struct value *array,\n   else\n     high_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n \n+  if (range_flag & RANGE_HAS_STRIDE)\n+    stride = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n+  else\n+    stride = 1;\n+\n+  if (stride != 1)\n+    error (_(\"Fortran array strides are not currently supported\"));\n+\n   return value_slice (array, low_bound, high_bound - low_bound + 1);\n }\n "
    },
    {
      "sha": "359ab6211aae5ad02fd3f9a5ecb855daad0a93cf",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -924,6 +924,8 @@ operator_length_standard (const struct expression *expr, int endpos,\n       /* Assume the range has 2 arguments (low bound and high bound), then\n \t reduce the argument count if any bounds are set to default.  */\n       args = 2;\n+      if (range_flag & RANGE_HAS_STRIDE)\n+\t++args;\n       if (range_flag & RANGE_LOW_BOUND_DEFAULT)\n \t--args;\n       if (range_flag & RANGE_HIGH_BOUND_DEFAULT)"
    },
    {
      "sha": "19b423beb3c2080f50aa6d21ca95f9051013b293",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -1,3 +1,7 @@\n+2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/array-slices.exp: Add a new test.\n+\n 2020-10-21  Gary Benson <gbenson@redhat.com>\n \n \t* gdb.mi/mi-fullname-deleted.exp: Fix substituted"
    },
    {
      "sha": "aa6bc6327eb8a36efdf9366e7eb349456ed617fa",
      "filename": "gdb/testsuite/gdb.fortran/array-slices.exp",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/testsuite/gdb.fortran/array-slices.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b4c676cc7f48f656cf235dd0507c41ab11d7cb5/gdb/testsuite/gdb.fortran/array-slices.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/array-slices.exp?ref=6b4c676cc7f48f656cf235dd0507c41ab11d7cb5",
      "patch": "@@ -69,3 +69,19 @@ foreach result $array_contents msg $message_strings {\n }\n \n gdb_continue_to_breakpoint \"continue to Final Breakpoint\"\n+\n+# Next test that asking for an array with stride at the CLI gives an\n+# error.\n+clean_restart ${testfile}\n+\n+if ![fortran_runto_main] then {\n+    perror \"couldn't run to main\"\n+    continue\n+}\n+\n+gdb_breakpoint \"show\"\n+gdb_continue_to_breakpoint \"show\"\n+gdb_test \"up\" \".*\"\n+gdb_test \"p array (1:10:2, 1:10:2)\" \\\n+    \"Fortran array strides are not currently supported\" \\\n+    \"using array stride gives an error\""
    }
  ]
}