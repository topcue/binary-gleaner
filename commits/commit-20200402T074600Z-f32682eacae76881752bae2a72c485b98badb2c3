{
  "sha": "f32682eacae76881752bae2a72c485b98badb2c3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjMyNjgyZWFjYWU3Njg4MTc1MmJhZTJhNzJjNDg1Yjk4YmFkYjJjMw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T07:46:00Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T07:46:00Z"
    },
    "message": "[gdb/testsuite] Fix silent timeout in gdb.multi/multi-target.exp\n\nWhile running test-case gdb.multi/multi-target.exp, I observed a silent\ntimeout related to \"monitor exit\".\n\nBy making the timeout explicit in an expect clause in gdbserver_gdb_exit:\n...\n+  timeout {\n+    warning \"Timed out waiting for EOF in server after $monitor_exit\"\n+  }\n...\nwe get in the log:\n...\nmonitor exit^M\n\"monitor\" command not supported by this target.^M\n(gdb) WARNING: Timed out waiting for EOF in server after monitor exit\n...\n\nWhat happens is the following:\n- the inferior 5 is selected\n- a breakpoint is set in inferior 1\n- the breakpoint triggers and we switch to inferior 1\n- setup is called by test_continue, which calls clean_restart, which calls\n  gdbserver_gdb_exit (due to load_lib gdbserver-support.exp)\n- gdbserver_gdb_exit issues \"monitor exit\"\n- gdb responds with \"not supported by this target\" because inferior 1 is\n  native\n\nFix this by keeping a list of server_spawn_id, and cleaning those up before\ncalling gdbserver_gdb_exit.\n\nThis reduces testing time from 1m22s to 32s.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-02  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdbserver-support.exp (gdbserver_exit): Factor out of ...\n\t(gdbserver_gdb_exit): ... here.  Add timeout warning.\n\t* gdb.multi/multi-target.exp (server_spawn_ids): New global var.\n\t(connect_target_extended_remote): Append new server_spawn_id to\n\tserver_spawn_ids.\n\t(cleanup): New proc.\n\t(setup, <toplevel>): Call cleanup.",
    "tree": {
      "sha": "6f78ab4ed07b2f6d723f416b7e1dcb3b1b0ad95b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f78ab4ed07b2f6d723f416b7e1dcb3b1b0ad95b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f32682eacae76881752bae2a72c485b98badb2c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f32682eacae76881752bae2a72c485b98badb2c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f32682eacae76881752bae2a72c485b98badb2c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f32682eacae76881752bae2a72c485b98badb2c3/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4f5bd88505801cb9b405c83a4faa4111475dbc62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4f5bd88505801cb9b405c83a4faa4111475dbc62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4f5bd88505801cb9b405c83a4faa4111475dbc62"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 59,
    "deletions": 15
  },
  "files": [
    {
      "sha": "99813054d5db06cbed459da998c9c062aa05c672",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f32682eacae76881752bae2a72c485b98badb2c3",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-02  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdbserver-support.exp (gdbserver_exit): Factor out of ...\n+\t(gdbserver_gdb_exit): ... here.  Add timeout warning.\n+\t* gdb.multi/multi-target.exp (server_spawn_ids): New global var.\n+\t(connect_target_extended_remote): Append new server_spawn_id to\n+\tserver_spawn_ids.\n+\t(cleanup): New proc.\n+\t(setup, <toplevel>): Call cleanup.\n+\n 2020-04-02  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/main-psymtab.exp: New file."
    },
    {
      "sha": "b519eda4e8dba60941306ecefc8b38863712833b",
      "filename": "gdb/testsuite/gdb.multi/multi-target.exp",
      "status": "modified",
      "additions": 22,
      "deletions": 2,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/gdb.multi/multi-target.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/gdb.multi/multi-target.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target.exp?ref=f32682eacae76881752bae2a72c485b98badb2c3",
      "patch": "@@ -33,8 +33,13 @@ if { [prepare_for_testing \"failed to prepare\" ${binfile} \"${srcfile}\" \\\n     return\n }\n \n-proc connect_target_extended_remote {binfile} {\n+# Keep a list of (inferior ID, spawn ID).\n+set server_spawn_ids [list]\n+\n+proc connect_target_extended_remote {binfile num} {\n     set res [gdbserver_start \"--multi\" \"\"]\n+    global server_spawn_ids server_spawn_id\n+    lappend server_spawn_ids $num $server_spawn_id\n     set gdbserver_gdbport [lindex $res 1]\n     return [gdb_target_cmd \"extended-remote\" $gdbserver_gdbport]\n }\n@@ -58,7 +63,7 @@ proc add_inferior {num target binfile {gcorefile \"\"}} {\n     }\n \n     if {$target == \"extended-remote\"} {\n-\tif {[connect_target_extended_remote $binfile]} {\n+\tif {[connect_target_extended_remote $binfile $num]} {\n \t    return 0\n \t}\n     }\n@@ -99,12 +104,25 @@ proc next_live_inferior {inf} {\n     return $inf\n }\n \n+# Clean up the server_spawn_ids.\n+proc cleanup_gdbservers { } {\n+    global server_spawn_id\n+    global server_spawn_ids\n+    foreach { inferior_id spawn_id } $server_spawn_ids {\n+\tset server_spawn_id $spawn_id\n+\tgdb_test \"inferior $inferior_id\"\n+\tgdbserver_exit 0\n+    }\n+    set server_spawn_ids [list]\n+}\n+\n # Return true on success, false otherwise.\n \n proc setup {non-stop} {\n     global gcorefile gcore_created\n     global binfile\n \n+    cleanup_gdbservers\n     clean_restart ${binfile}\n \n     # multi-target depends on target running in non-stop mode.  Force\n@@ -448,3 +466,5 @@ with_test_prefix \"info-inferiors\" {\n \ttest_info_inferiors $multi_process\n     }\n }\n+\n+cleanup_gdbservers"
    },
    {
      "sha": "a2cc80f28d7cf5da93eee6adefeb696181ec6df5",
      "filename": "gdb/testsuite/lib/gdbserver-support.exp",
      "status": "modified",
      "additions": 27,
      "deletions": 13,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/lib/gdbserver-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f32682eacae76881752bae2a72c485b98badb2c3/gdb/testsuite/lib/gdbserver-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdbserver-support.exp?ref=f32682eacae76881752bae2a72c485b98badb2c3",
      "patch": "@@ -431,21 +431,11 @@ if { [info procs gdbserver_orig_gdb_exit] == \"\" } {\n     rename mi_gdb_exit gdbserver_orig_mi_gdb_exit\n }\n \n-proc gdbserver_gdb_exit { is_mi } {\n+# Cleanup gdbserver $server_spawn_id\n+\n+proc gdbserver_exit { is_mi } {\n     global gdb_spawn_id server_spawn_id\n     global gdb_prompt\n-    global gdbserver_reconnect_p\n-\n-    # Leave GDBserver running if we're exiting GDB in order to\n-    # reconnect to the same instance of GDBserver again.\n-    if {[info exists gdbserver_reconnect_p] && $gdbserver_reconnect_p} {\n-\tif { $is_mi } {\n-\t    gdbserver_orig_mi_gdb_exit\n-\t} else {\n-\t    gdbserver_orig_gdb_exit\n-\t}\n-\treturn\n-    }\n \n     if {[info exists gdb_spawn_id] && [info exists server_spawn_id]} {\n \t# GDB may be terminated in an expected way or an unexpected way,\n@@ -469,10 +459,34 @@ proc gdbserver_gdb_exit { is_mi } {\n \t\t    wait -i $expect_out(spawn_id)\n \t\t    unset server_spawn_id\n \t\t}\n+               timeout {\n+                   warning \"Timed out waiting for EOF in server after $monitor_exit\"\n+               }\n \t    }\n \t}\n     }\n     close_gdbserver\n+}\n+\n+# Local version of gdb_exit that also cleans up gdbserver $server_spawn_id.\n+\n+proc gdbserver_gdb_exit { is_mi } {\n+    global gdb_spawn_id server_spawn_id\n+    global gdb_prompt\n+    global gdbserver_reconnect_p\n+\n+    # Leave GDBserver running if we're exiting GDB in order to\n+    # reconnect to the same instance of GDBserver again.\n+    if {[info exists gdbserver_reconnect_p] && $gdbserver_reconnect_p} {\n+\tif { $is_mi } {\n+\t    gdbserver_orig_mi_gdb_exit\n+\t} else {\n+\t    gdbserver_orig_gdb_exit\n+\t}\n+\treturn\n+    }\n+\n+    gdbserver_exit $is_mi\n \n     if { $is_mi } {\n \tgdbserver_orig_mi_gdb_exit"
    }
  ]
}