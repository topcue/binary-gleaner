{
  "sha": "76aa354424729aafdabdf4929aa9751c6fdee081",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzZhYTM1NDQyNDcyOWFhZmRhYmRmNDkyOWFhOTc1MWM2ZmRlZTA4MQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-01T23:35:05Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-02T04:18:21Z"
    },
    "message": "obstack.h __PTR_ALIGN vs. ubsan\n\nCurrent ubsan complains on every use of __PTR_ALIGN (when ptrdiff_t is\nas large as a pointer), due to making calculations relative to a NULL\npointer.  This patch avoids the problem by extracting out and\nsimplifying __BPTR_ALIGN for the usual case.  I've continued to use\nptrdiff_t here, where it might be better to throw away __BPTR_ALIGN\nentirely and just assume uintptr_t exists.\n\n\t* obstack.h (__PTR_ALIGN): Expand and simplify __BPTR_ALIGN\n\trather than calculating relative to a NULL pointer.",
    "tree": {
      "sha": "6f4158b08147ef89e98315304cf5bc4d2f31c013",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f4158b08147ef89e98315304cf5bc4d2f31c013"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/76aa354424729aafdabdf4929aa9751c6fdee081",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76aa354424729aafdabdf4929aa9751c6fdee081",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/76aa354424729aafdabdf4929aa9751c6fdee081",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76aa354424729aafdabdf4929aa9751c6fdee081/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c79332d2d13936dfc029a935a9b9823ca0d575c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c79332d2d13936dfc029a935a9b9823ca0d575c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c79332d2d13936dfc029a935a9b9823ca0d575c3"
    }
  ],
  "stats": {
    "total": 6,
    "additions": 3,
    "deletions": 3
  },
  "files": [
    {
      "sha": "0d8746f835b1f14401d725fd5c3362af5c46488d",
      "filename": "include/obstack.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76aa354424729aafdabdf4929aa9751c6fdee081/include/obstack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76aa354424729aafdabdf4929aa9751c6fdee081/include/obstack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/obstack.h?ref=76aa354424729aafdabdf4929aa9751c6fdee081",
      "patch": "@@ -137,9 +137,9 @@\n    relative to B.  Otherwise, use the faster strategy of computing the\n    alignment relative to 0.  */\n \n-#define __PTR_ALIGN(B, P, A)\t\t\t\t\t\t      \\\n-  __BPTR_ALIGN (sizeof (ptrdiff_t) < sizeof (void *) ? (B) : (char *) 0,      \\\n-                P, A)\n+#define __PTR_ALIGN(B, P, A)\t\t\t\t\t\t\\\n+  (sizeof (ptrdiff_t) < sizeof (void *) ? __BPTR_ALIGN (B, P, A)\t\\\n+   : (char *) (((ptrdiff_t) (P) + (A)) & ~(A)))\n \n #ifndef __attribute_pure__\n # if defined __GNUC_MINOR__ && __GNUC__ * 1000 + __GNUC_MINOR__ >= 2096"
    }
  ]
}