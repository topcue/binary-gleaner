{
  "sha": "c2512106f8942dfa944c75add9b9107e28ef0018",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzI1MTIxMDZmODk0MmRmYTk0NGM3NWFkZDliOTEwN2UyOGVmMDAxOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-14T23:02:51Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-04T10:25:13Z"
    },
    "message": "gdb/mi: Add -max-results parameter to some -symbol-info-* commands\n\nAdds a new parameter -max-results to -symbol-info-functions,\n-symbol-info-variables, -symbol-info-types, and -symbol-info-modules.\nThis parameter limits the number of results returned.\n\nThis change still leaves -symbol-info-module-functions and\n-symbol-info-module-variables always returning all results, fixing\nthese commands is slightly harder.\n\nThere's currently no mechanism for the user of these commands to know\nif the result list has been truncated if you get back the maximum\nnumber of results, so if there are exactly 10 functions and you call\n'-symbol-info-functions --max-results 10' the reply would appear no\ndifferent than if you had 20 functions and called with a max of 10.\nRight now, if you get back the maximum then you should assume that\nthere might be more results available.\n\nOne other thing to note is that the global_symbol_searcher::search by\ndefault returns SIZE_MAX results, there's no longer a mechanism to\nreturn an unlimited number of results, though hopefully this will not\nbe a huge issue.\n\ngdb/ChangeLog:\n\n\t* mi/mi-symbol-cmds.c (mi_symbol_info): Take extra parameter, and\n\tadd it into the search spec.\n\t(parse_max_results_option): New function.\n\t(mi_info_functions_or_variables): Parse -max-results flag and pass\n\tit to mi_symbol_info.\n\t(mi_cmd_symbol_info_modules): Likewise.\n\t(mi_cmd_symbol_info_types): Likewise.\n\t* symtab.c (global_symbol_searcher::add_matching_symbols): Change\n\treturn type to bool, change result container into a set, and don't\n\tadd new results if we have enough already.\n\t(global_symbol_searcher::add_matching_msymbols): Change return\n\ttype to bool, and don't add new results if we have enough already.\n\t(sort_search_symbols_remove_dups): Delete.\n\t(global_symbol_searcher::search): Early exit from search loop when\n\twe have enough results.  Use a std::set to collect the results\n\tfrom calling add_matching_symbols.\n\t* symtab.h (global_symbol_searcher) <set_max_seach_results>: New\n\tmember function.\n\t(global_symbol_searcher) <m_max_search_results>: New member\n\tvariable.\n\t(global_symbol_searcher) <add_matching_symbols>: Update header\n\tcomment and change return type to bool.\n\t(global_symbol_searcher) <add_matching_msymbols>: Update header\n\tcomment and change return type to bool.\n\ngdb/doc/ChangeLog:\n\n\t* doc/gdb.texinfo (GDB/MI Symbol Query): Add documentation of\n\t-max-results to some -symbol-info-* commands.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.mi/mi-sym-info.exp: Add tests for -max-results parameter.\n\nChange-Id: I90a28feb55b388fb46461a096c5db08b6b0bd427",
    "tree": {
      "sha": "cba039884c22367bad8de1fe445c692cafeb2189",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cba039884c22367bad8de1fe445c692cafeb2189"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c2512106f8942dfa944c75add9b9107e28ef0018",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2512106f8942dfa944c75add9b9107e28ef0018",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c2512106f8942dfa944c75add9b9107e28ef0018",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2512106f8942dfa944c75add9b9107e28ef0018/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f97a63c5aa5203994447b3cf8e48f184078f379b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f97a63c5aa5203994447b3cf8e48f184078f379b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f97a63c5aa5203994447b3cf8e48f184078f379b"
    }
  ],
  "stats": {
    "total": 216,
    "additions": 180,
    "deletions": 36
  },
  "files": [
    {
      "sha": "aacc0c9b16c8b4e768c12475e608a17725f16055",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -1,3 +1,30 @@\n+2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* mi/mi-symbol-cmds.c (mi_symbol_info): Take extra parameter, and\n+\tadd it into the search spec.\n+\t(parse_max_results_option): New function.\n+\t(mi_info_functions_or_variables): Parse -max-results flag and pass\n+\tit to mi_symbol_info.\n+\t(mi_cmd_symbol_info_modules): Likewise.\n+\t(mi_cmd_symbol_info_types): Likewise.\n+\t* symtab.c (global_symbol_searcher::add_matching_symbols): Change\n+\treturn type to bool, change result container into a set, and don't\n+\tadd new results if we have enough already.\n+\t(global_symbol_searcher::add_matching_msymbols): Change return\n+\ttype to bool, and don't add new results if we have enough already.\n+\t(sort_search_symbols_remove_dups): Delete.\n+\t(global_symbol_searcher::search): Early exit from search loop when\n+\twe have enough results.  Use a std::set to collect the results\n+\tfrom calling add_matching_symbols.\n+\t* symtab.h (global_symbol_searcher) <set_max_seach_results>: New\n+\tmember function.\n+\t(global_symbol_searcher) <m_max_search_results>: New member\n+\tvariable.\n+\t(global_symbol_searcher) <add_matching_symbols>: Update header\n+\tcomment and change return type to bool.\n+\t(global_symbol_searcher) <add_matching_msymbols>: Update header\n+\tcomment and change return type to bool.\n+\n 2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* symtab.c (symbol_search::compare_search_syms): Update header"
    },
    {
      "sha": "9a70de350c6127fc6db997779a8b60a45582bddb",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* doc/gdb.texinfo (GDB/MI Symbol Query): Add documentation of\n+\t-max-results to some -symbol-info-* commands.\n+\n 2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* doc/gdb.texinfo (GDB/MI Symbol Query): Document new MI command"
    },
    {
      "sha": "544e632a46fcfba468e1b1ef5d8d335d8f78f5a1",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -33962,6 +33962,7 @@ N.A.\n  -symbol-info-functions [--include-nondebug]\n                         [--type @var{type_regexp}]\n                         [--name @var{name_regexp}]\n+                        [--max-results @var{limit}]\n @end smallexample\n \n @noindent\n@@ -33977,6 +33978,11 @@ The options @code{--type} and @code{--name} allow the symbols returned\n to be filtered based on either the name of the function, or the type\n signature of the function.\n \n+The option @code{--max-results} restricts the command to return no\n+more than @var{limit} results.  If exactly @var{limit} results are\n+returned then there might be additional results available if a higher\n+limit is used.\n+\n @subsubheading @value{GDBN} Command\n \n The corresponding @value{GDBN} command is @samp{info functions}.\n@@ -34208,6 +34214,8 @@ The corresponding @value{GDBN} command is @samp{info module variables}.\n \n @smallexample\n  -symbol-info-modules [--name @var{name_regexp}]\n+                      [--max-results @var{limit}]\n+\n @end smallexample\n \n @noindent\n@@ -34218,6 +34226,11 @@ which each modules is defined.\n The option @code{--name} allows the modules returned to be filtered\n based the name of the module.\n \n+The option @code{--max-results} restricts the command to return no\n+more than @var{limit} results.  If exactly @var{limit} results are\n+returned then there might be additional results available if a higher\n+limit is used.\n+\n @subsubheading @value{GDBN} Command\n \n The corresponding @value{GDBN} command is @samp{info modules}.\n@@ -34262,6 +34275,8 @@ The corresponding @value{GDBN} command is @samp{info modules}.\n \n @smallexample\n  -symbol-info-types [--name @var{name_regexp}]\n+                    [--max-results @var{limit}]\n+\n @end smallexample\n \n @noindent\n@@ -34275,6 +34290,11 @@ line number.\n The option @code{--name} allows the list of types returned to be\n filtered by name.\n \n+The option @code{--max-results} restricts the command to return no\n+more than @var{limit} results.  If exactly @var{limit} results are\n+returned then there might be additional results available if a higher\n+limit is used.\n+\n @subsubheading @value{GDBN} Command\n \n The corresponding @value{GDBN} command is @samp{info types}.\n@@ -34322,6 +34342,8 @@ The corresponding @value{GDBN} command is @samp{info types}.\n  -symbol-info-variables [--include-nondebug]\n                         [--type @var{type_regexp}]\n                         [--name @var{name_regexp}]\n+                        [--max-results @var{limit}]\n+\n @end smallexample\n \n @noindent\n@@ -34337,6 +34359,11 @@ The options @code{--type} and @code{--name} allow the symbols returned\n to be filtered based on either the name of the variable, or the type\n of the variable.\n \n+The option @code{--max-results} restricts the command to return no\n+more than @var{limit} results.  If exactly @var{limit} results are\n+returned then there might be additional results available if a higher\n+limit is used.\n+\n @subsubheading @value{GDBN} Command\n \n The corresponding @value{GDBN} command is @samp{info variables}."
    },
    {
      "sha": "edbafe39447fd99ebcd5607a313bb4827f295053",
      "filename": "gdb/mi/mi-symbol-cmds.c",
      "status": "modified",
      "additions": 39,
      "deletions": 7,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/mi/mi-symbol-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/mi/mi-symbol-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-symbol-cmds.c?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -111,11 +111,13 @@ output_nondebug_symbol (ui_out *uiout,\n \n static void\n mi_symbol_info (enum search_domain kind, const char *name_regexp,\n-\t\tconst char *type_regexp, bool exclude_minsyms)\n+\t\tconst char *type_regexp, bool exclude_minsyms,\n+\t\tsize_t max_results)\n {\n   global_symbol_searcher sym_search (kind, name_regexp);\n   sym_search.set_symbol_type_regexp (type_regexp);\n   sym_search.set_exclude_minsyms (exclude_minsyms);\n+  sym_search.set_max_search_results (max_results);\n   std::vector<symbol_search> symbols = sym_search.search ();\n   ui_out *uiout = current_uiout;\n   int i = 0;\n@@ -166,25 +168,42 @@ mi_symbol_info (enum search_domain kind, const char *name_regexp,\n     }\n }\n \n+/* Helper to parse the option text from an -max-results argument and return\n+   the parsed value.  If the text can't be parsed then an error is thrown.  */\n+\n+static size_t\n+parse_max_results_option (char *arg)\n+{\n+  char *ptr = arg;\n+  long long val = strtoll (arg, &ptr, 10);\n+  if (arg == ptr || *ptr != '\\0' || val > SIZE_MAX || val < 0)\n+    error (_(\"invalid value for --max-results argument\"));\n+  size_t max_results = (size_t) val;\n+\n+  return max_results;\n+}\n+\n /* Helper for mi_cmd_symbol_info_{functions,variables} - depending on KIND.\n    Processes command line options from ARGV and ARGC.  */\n \n static void\n mi_info_functions_or_variables (enum search_domain kind, char **argv, int argc)\n {\n+  size_t max_results = SIZE_MAX;\n   const char *regexp = nullptr;\n   const char *t_regexp = nullptr;\n   bool exclude_minsyms = true;\n \n   enum opt\n     {\n-     INCLUDE_NONDEBUG_OPT, TYPE_REGEXP_OPT, NAME_REGEXP_OPT\n+     INCLUDE_NONDEBUG_OPT, TYPE_REGEXP_OPT, NAME_REGEXP_OPT, MAX_RESULTS_OPT\n     };\n   static const struct mi_opt opts[] =\n   {\n     {\"-include-nondebug\" , INCLUDE_NONDEBUG_OPT, 0},\n     {\"-type\", TYPE_REGEXP_OPT, 1},\n     {\"-name\", NAME_REGEXP_OPT, 1},\n+    {\"-max-results\", MAX_RESULTS_OPT, 1},\n     { 0, 0, 0 }\n   };\n \n@@ -210,10 +229,13 @@ mi_info_functions_or_variables (enum search_domain kind, char **argv, int argc)\n \tcase NAME_REGEXP_OPT:\n \t  regexp = oarg;\n \t  break;\n+\tcase MAX_RESULTS_OPT:\n+\t  max_results = parse_max_results_option (oarg);\n+\t  break;\n \t}\n     }\n \n-  mi_symbol_info (kind, regexp, t_regexp, exclude_minsyms);\n+  mi_symbol_info (kind, regexp, t_regexp, exclude_minsyms, max_results);\n }\n \n /* Type for an iterator over a vector of module_symbol_search results.  */\n@@ -384,15 +406,17 @@ mi_cmd_symbol_info_module_variables (const char *command, char **argv,\n void\n mi_cmd_symbol_info_modules (const char *command, char **argv, int argc)\n {\n+  size_t max_results = SIZE_MAX;\n   const char *regexp = nullptr;\n \n   enum opt\n     {\n-     NAME_REGEXP_OPT\n+     NAME_REGEXP_OPT, MAX_RESULTS_OPT\n     };\n   static const struct mi_opt opts[] =\n   {\n     {\"-name\", NAME_REGEXP_OPT, 1},\n+    {\"-max-results\", MAX_RESULTS_OPT, 1},\n     { 0, 0, 0 }\n   };\n \n@@ -410,26 +434,31 @@ mi_cmd_symbol_info_modules (const char *command, char **argv, int argc)\n \tcase NAME_REGEXP_OPT:\n \t  regexp = oarg;\n \t  break;\n+\tcase MAX_RESULTS_OPT:\n+\t  max_results = parse_max_results_option (oarg);\n+\t  break;\n \t}\n     }\n \n-  mi_symbol_info (MODULES_DOMAIN, regexp, nullptr, true);\n+  mi_symbol_info (MODULES_DOMAIN, regexp, nullptr, true, max_results);\n }\n \n /* Implement -symbol-info-types command.  */\n \n void\n mi_cmd_symbol_info_types (const char *command, char **argv, int argc)\n {\n+  size_t max_results = SIZE_MAX;\n   const char *regexp = nullptr;\n \n   enum opt\n     {\n-     NAME_REGEXP_OPT\n+     NAME_REGEXP_OPT, MAX_RESULTS_OPT\n     };\n   static const struct mi_opt opts[] =\n   {\n     {\"-name\", NAME_REGEXP_OPT, 1},\n+    {\"-max-results\", MAX_RESULTS_OPT, 1},\n     { 0, 0, 0 }\n   };\n \n@@ -447,10 +476,13 @@ mi_cmd_symbol_info_types (const char *command, char **argv, int argc)\n \tcase NAME_REGEXP_OPT:\n \t  regexp = oarg;\n \t  break;\n+\tcase MAX_RESULTS_OPT:\n+\t  max_results = parse_max_results_option (oarg);\n+\t  break;\n \t}\n     }\n \n-  mi_symbol_info (TYPES_DOMAIN, regexp, nullptr, true);\n+  mi_symbol_info (TYPES_DOMAIN, regexp, nullptr, true, max_results);\n }\n \n /* Implement -symbol-info-variables command.  */"
    },
    {
      "sha": "6fd1c8c4bc0a30b780158367bb1fb13af9141aab",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 31,
      "deletions": 22,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -4547,12 +4547,12 @@ global_symbol_searcher::expand_symtabs\n \n /* See symtab.h.  */\n \n-void\n+bool\n global_symbol_searcher::add_matching_symbols\n \t(objfile *objfile,\n \t const gdb::optional<compiled_regex> &preg,\n \t const gdb::optional<compiled_regex> &treg,\n-\t std::vector<symbol_search> *results) const\n+\t std::set<symbol_search> *result_set) const\n {\n   enum search_domain kind = m_kind;\n \n@@ -4610,17 +4610,26 @@ global_symbol_searcher::add_matching_symbols\n \t\t\t      && SYMBOL_DOMAIN (sym) == MODULE_DOMAIN\n \t\t\t      && SYMBOL_LINE (sym) != 0))))\n \t\t{\n-\t\t  /* Matching msymbol, add it to the results list.  */\n-\t\t  results->emplace_back (block, sym);\n+\t\t  if (result_set->size () < m_max_search_results)\n+\t\t    {\n+\t\t      /* Match, insert if not already in the results.  */\n+\t\t      symbol_search ss (block, sym);\n+\t\t      if (result_set->find (ss) == result_set->end ())\n+\t\t\tresult_set->insert (ss);\n+\t\t    }\n+\t\t  else\n+\t\t    return false;\n \t\t}\n \t    }\n \t}\n     }\n+\n+  return true;\n }\n \n /* See symtab.h.  */\n \n-void\n+bool\n global_symbol_searcher::add_matching_msymbols\n \t(objfile *objfile, const gdb::optional<compiled_regex> &preg,\n \t std::vector<symbol_search> *results) const\n@@ -4652,22 +4661,17 @@ global_symbol_searcher::add_matching_msymbols\n \t\t       VAR_DOMAIN).symbol == NULL)\n \t\t    {\n \t\t      /* Matching msymbol, add it to the results list.  */\n-\t\t      results->emplace_back (GLOBAL_BLOCK, msymbol, objfile);\n+\t\t      if (results->size () < m_max_search_results)\n+\t\t\tresults->emplace_back (GLOBAL_BLOCK, msymbol, objfile);\n+\t\t      else\n+\t\t\treturn false;\n \t\t    }\n \t\t}\n \t    }\n \t}\n     }\n-}\n \n-/* Sort the symbols in RESULT and remove duplicates.  */\n-\n-static void\n-sort_search_symbols_remove_dups (std::vector<symbol_search> *result)\n-{\n-  std::sort (result->begin (), result->end ());\n-  result->erase (std::unique (result->begin (), result->end ()),\n-\t\t result->end ());\n+  return true;\n }\n \n /* See symtab.h.  */\n@@ -4733,20 +4737,24 @@ global_symbol_searcher::search () const\n     }\n \n   bool found_msymbol = false;\n-  std::vector<symbol_search> result;\n+  std::set<symbol_search> result_set;\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       /* Expand symtabs within objfile that possibly contain matching\n \t symbols.  */\n       found_msymbol |= expand_symtabs (objfile, preg);\n \n-      /* Find matching symbols within OBJFILE and add them in to the RESULT\n-\t vector.  */\n-      add_matching_symbols (objfile, preg, treg, &result);\n+      /* Find matching symbols within OBJFILE and add them in to the\n+\t RESULT_SET set.  Use a set here so that we can easily detect\n+\t duplicates as we go, and can therefore track how many unique\n+\t matches we have found so far.  */\n+      if (!add_matching_symbols (objfile, preg, treg, &result_set))\n+\tbreak;\n     }\n \n-  if (!result.empty ())\n-    sort_search_symbols_remove_dups (&result);\n+  /* Convert the result set into a sorted result list, as std::set is\n+     defined to be sorted then no explicit call to std::sort is needed.  */\n+  std::vector<symbol_search> result (result_set.begin (), result_set.end ());\n \n   /* If there are no debug symbols, then add matching minsyms.  But if the\n      user wants to see symbols matching a type regexp, then never give a\n@@ -4758,7 +4766,8 @@ global_symbol_searcher::search () const\n     {\n       gdb_assert (m_kind == VARIABLES_DOMAIN || m_kind == FUNCTIONS_DOMAIN);\n       for (objfile *objfile : current_program_space->objfiles ())\n-\tadd_matching_msymbols (objfile, preg, &result);\n+\tif (!add_matching_msymbols (objfile, preg, &result))\n+\t  break;\n     }\n \n   return result;"
    },
    {
      "sha": "e8321d4bb8cbe5392626fe4504fff5d103fe8c5a",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 26,
      "deletions": 7,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -23,6 +23,7 @@\n #include <array>\n #include <vector>\n #include <string>\n+#include <set>\n #include \"gdbsupport/gdb_vecs.h\"\n #include \"gdbtypes.h\"\n #include \"gdb_obstack.h\"\n@@ -2092,6 +2093,12 @@ class global_symbol_searcher\n     m_exclude_minsyms = exclude_minsyms;\n   }\n \n+  /* Set the maximum number of search results to be returned.  */\n+  void set_max_search_results (size_t max_search_results)\n+  {\n+    m_max_search_results = max_search_results;\n+  }\n+\n   /* Search the symbols from all objfiles in the current program space\n      looking for matches as defined by the current state of this object.\n \n@@ -2125,22 +2132,34 @@ class global_symbol_searcher\n      be included in the results, otherwise they are excluded.  */\n   bool m_exclude_minsyms = false;\n \n+  /* Maximum number of search results.  We currently impose a hard limit\n+     of SIZE_MAX, there is no \"unlimited\".  */\n+  size_t m_max_search_results = SIZE_MAX;\n+\n   /* Expand symtabs in OBJFILE that match PREG, are of type M_KIND.  Return\n      true if any msymbols were seen that we should later consider adding to\n      the results list.  */\n   bool expand_symtabs (objfile *objfile,\n \t\t       const gdb::optional<compiled_regex> &preg) const;\n \n   /* Add symbols from symtabs in OBJFILE that match PREG, and TREG, and are\n-     of type M_KIND, to the results vector RESULTS.  */\n-  void add_matching_symbols (objfile *objfile,\n+     of type M_KIND, to the results set RESULTS_SET.  Return false if we\n+     stop adding results early due to having already found too many results\n+     (based on M_MAX_SEARCH_RESULTS limit), otherwise return true.\n+     Returning true does not indicate that any results were added, just\n+     that we didn't _not_ add a result due to reaching MAX_SEARCH_RESULTS.  */\n+  bool add_matching_symbols (objfile *objfile,\n \t\t\t     const gdb::optional<compiled_regex> &preg,\n \t\t\t     const gdb::optional<compiled_regex> &treg,\n-\t\t\t     std::vector<symbol_search> *results) const;\n-\n-  /* Add msymbols from OBJFILE that match PREG and M_KIND, to the\n-     results vector RESULTS.  */\n-  void add_matching_msymbols (objfile *objfile,\n+\t\t\t     std::set<symbol_search> *result_set) const;\n+\n+  /* Add msymbols from OBJFILE that match PREG and M_KIND, to the results\n+     vector RESULTS.  Return false if we stop adding results early due to\n+     having already found too many results (based on max search results\n+     limit M_MAX_SEARCH_RESULTS), otherwise return true.  Returning true\n+     does not indicate that any results were added, just that we didn't\n+     _not_ add a result due to reaching MAX_SEARCH_RESULTS.  */\n+  bool add_matching_msymbols (objfile *objfile,\n \t\t\t      const gdb::optional<compiled_regex> &preg,\n \t\t\t      std::vector<symbol_search> *results) const;\n "
    },
    {
      "sha": "112049f2ed208eabb42fc1856fe15db05e899015",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.mi/mi-sym-info.exp: Add tests for -max-results parameter.\n+\n 2019-12-04  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.mi/mi-fortran-modules.exp: Add additional tests for"
    },
    {
      "sha": "4a65bd6ee5dc833eee575133655a910a5a70bb09",
      "filename": "gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2512106f8942dfa944c75add9b9107e28ef0018/gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-sym-info.exp?ref=c2512106f8942dfa944c75add9b9107e28ef0018",
      "patch": "@@ -127,3 +127,24 @@ set lineno2 [gdb_get_line_number \"typedef int another_int_t;\" ${srcfile2}]\n mi_gdb_test \"120-symbol-info-types --name _int_\" \\\n     \"120\\\\^done,symbols=\\{debug=\\\\\\[\\{filename=\\\"\\[^\\\"\\]+$srcfile\\\",fullname=\\\"\\[^\\\"\\]+$srcfile\\\",symbols=\\\\\\[\\{line=\\\"27\\\",name=\\\"my_int_t\\\"\\}\\\\\\]\\},\\{filename=\\\"\\[^\\\"\\]+$srcfile2\\\",fullname=\\\"\\[^\\\"\\]+$srcfile2\\\",symbols=\\\\\\[\\{line=\\\"23\\\",name=\\\"another_int_t\\\"\\}\\\\\\]\\}\\\\\\]\\}\" \\\n     \"List all types matching _int_\"\n+\n+# Test the --max-results parameter.\n+mi_gdb_test \"121-symbol-info-functions --max-results 0\" \\\n+    \"121\\\\^done,symbols=\\{\\}\" \\\n+    \"-symbol-info-functions --max-results 0\"\n+\n+mi_gdb_test \"122-symbol-info-functions --max-results 1\" \\\n+    \"122\\\\^done,symbols=\\{debug=\\\\\\[\\{filename=\\\"\\[^\\\"\\]+$srcfile2\\\",fullname=\\\"\\[^\\\"\\]+$srcfile2\\\",symbols=\\\\\\[\\{line=\\\"39\\\",name=\\\"f3\\\",type=\\\"int \\\\(another_int_t\\\\)\\\",description=\\\"int f3\\\\(another_int_t\\\\);\\\"\\}\\\\\\]\\}\\\\\\]\\}\" \\\n+    \"-symbol-info-functions --max-results 1\"\n+\n+mi_gdb_test \"123-symbol-info-functions --max-results 2\" \\\n+    \"123\\\\^done,symbols=\\{debug=\\\\\\[\\{filename=\\\"\\[^\\\"\\]+$srcfile2\\\",fullname=\\\"\\[^\\\"\\]+$srcfile2\\\",symbols=\\\\\\[\\{line=\\\"33\\\",name=\\\"f2\\\",type=\\\"float \\\\(another_float_t\\\\)\\\",description=\\\"float f2\\\\(another_float_t\\\\);\\\"\\},\\{line=\\\"39\\\",name=\\\"f3\\\",type=\\\"int \\\\(another_int_t\\\\)\\\",description=\\\"int f3\\\\(another_int_t\\\\);\\\"\\}\\\\\\]\\}\\\\\\]\\}\" \\\n+    \"-symbol-info-functions --max-results 2\"\n+\n+mi_gdb_test \"124-symbol-info-variables --max-results 3\" \\\n+    \"124\\\\^done,symbols=\\{debug=\\\\\\[\\{filename=\\\"\\[^\\\"\\]+$srcfile2\\\",fullname=\\\"\\[^\\\"\\]+$srcfile2\\\",symbols=\\\\\\[\\{line=\\\"21\\\",name=\\\"global_f2\\\",type=\\\"int\\\",description=\\\"int global_f2;\\\"\\},\\{line=\\\"20\\\",name=\\\"global_i2\\\",type=\\\"int\\\",description=\\\"int global_i2;\\\"\\},\\{line=\\\"19\\\",name=\\\"global_f1\\\",type=\\\"float\\\",description=\\\"static float global_f1;\\\"\\}\\\\\\]\\}\\\\\\]\\}\" \\\n+    \"-symbol-info-variables --max-results 3\"\n+\n+mi_gdb_test \"125-symbol-info-types --max-results 4\" \\\n+    \"125\\\\^done,symbols=\\{debug=\\\\\\[\\{filename=\\\"\\[^\\\"\\]+$srcfile2\\\",fullname=\\\"\\[^\\\"\\]+$srcfile2\\\",symbols=\\\\\\[\\{line=\\\"24\\\",name=\\\"another_float_t\\\"\\},\\{line=\\\"23\\\",name=\\\"another_int_t\\\"\\},\\{name=\\\"float\\\"\\},\\{name=\\\"int\\\"\\}\\\\\\]\\}\\\\\\]\\}\" \\\n+    \"-symbol-info-types --max-results 4\""
    }
  ]
}