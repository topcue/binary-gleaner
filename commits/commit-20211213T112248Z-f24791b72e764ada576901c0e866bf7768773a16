{
  "sha": "f24791b72e764ada576901c0e866bf7768773a16",
  "node_id": "C_kwDOANOeidoAKGYyNDc5MWI3MmU3NjRhZGE1NzY5MDFjMGU4NjZiZjc3Njg3NzNhMTY",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-12-13T11:22:48Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-12-13T11:22:48Z"
    },
    "message": "gdbserver: introduce scoped_restore_current_thread and switch_to_thread\n\nIntroduce a class for restoring the current thread and a function to\nswitch to the given thread.  This is a preparation for a refactoring\nthat aims to remove direct assignments to 'current_thread'.",
    "tree": {
      "sha": "d3e09e57eb5a5787b80d78f239fefa4ee27a6e74",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d3e09e57eb5a5787b80d78f239fefa4ee27a6e74"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f24791b72e764ada576901c0e866bf7768773a16",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f24791b72e764ada576901c0e866bf7768773a16",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f24791b72e764ada576901c0e866bf7768773a16",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f24791b72e764ada576901c0e866bf7768773a16/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/200fd2874d2c147539f756b29e15ebbafa81dfcf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/200fd2874d2c147539f756b29e15ebbafa81dfcf"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 43,
    "deletions": 0
  },
  "files": [
    {
      "sha": "315a4da516761ec48b798f711a410d7c21212967",
      "filename": "gdbserver/gdbthread.h",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f24791b72e764ada576901c0e866bf7768773a16/gdbserver/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f24791b72e764ada576901c0e866bf7768773a16/gdbserver/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/gdbthread.h?ref=f24791b72e764ada576901c0e866bf7768773a16",
      "patch": "@@ -233,4 +233,26 @@ lwpid_of (const thread_info *thread)\n   return thread->id.lwp ();\n }\n \n+/* Switch the current thread.  */\n+\n+void switch_to_thread (thread_info *thread);\n+\n+/* Save/restore current thread.  */\n+\n+class scoped_restore_current_thread\n+{\n+public:\n+  scoped_restore_current_thread ();\n+  ~scoped_restore_current_thread ();\n+\n+  DISABLE_COPY_AND_ASSIGN (scoped_restore_current_thread);\n+\n+  /* Cancel restoring on scope exit.  */\n+  void dont_restore () { m_dont_restore = true; }\n+\n+private:\n+  bool m_dont_restore = false;\n+  thread_info *m_thread;\n+};\n+\n #endif /* GDBSERVER_GDBTHREAD_H */"
    },
    {
      "sha": "d44e40a10db5bd50935baf95fee659a0618144c7",
      "filename": "gdbserver/inferiors.cc",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f24791b72e764ada576901c0e866bf7768773a16/gdbserver/inferiors.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f24791b72e764ada576901c0e866bf7768773a16/gdbserver/inferiors.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/inferiors.cc?ref=f24791b72e764ada576901c0e866bf7768773a16",
      "patch": "@@ -218,6 +218,14 @@ switch_to_thread (process_stratum_target *ops, ptid_t ptid)\n   current_thread = find_thread_ptid (ptid);\n }\n \n+/* See gdbthread.h.  */\n+\n+void\n+switch_to_thread (thread_info *thread)\n+{\n+  current_thread = thread;\n+}\n+\n /* See inferiors.h.  */\n \n void\n@@ -243,3 +251,16 @@ set_inferior_cwd (std::string cwd)\n {\n   current_inferior_cwd = std::move (cwd);\n }\n+\n+scoped_restore_current_thread::scoped_restore_current_thread ()\n+{\n+  m_thread = current_thread;\n+}\n+\n+scoped_restore_current_thread::~scoped_restore_current_thread ()\n+{\n+  if (m_dont_restore)\n+    return;\n+\n+  switch_to_thread (m_thread);\n+}"
    }
  ]
}