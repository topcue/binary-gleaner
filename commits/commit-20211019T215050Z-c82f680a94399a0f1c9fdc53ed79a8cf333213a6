{
  "sha": "c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
  "node_id": "C_kwDOANOeidoAKGM4MmY2ODBhOTQzOTlhMGYxYzlmZGM1M2VkNzlhOGNmMzMzMjEzYTY",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-19T21:50:50Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-19T21:50:50Z"
    },
    "message": "[gdb/testsuite] Reimplement gdb.gdb/python-interrupts.exp as unittest\n\nThe test-case gdb.gdb/python-interrupts.exp:\n- runs to captured_command_loop\n- sets a breakpoint at set_active_ext_lang\n- calls a python command\n- verifies the command triggers the breakpoint\n- sends a signal and verifies the result\n\nThe test-case is fragile, because (f.i. with -flto) it cannot be guaranteed\nthat captured_command_loop and set_active_ext_lang are available for setting\nbreakpoints.\n\nReimplement the test-case as unittest, using:\n- execute_command_to_string to capture the output\n- try/catch to catch the \"Error while executing Python code\" exception\n- a new hook selftests::hook_set_active_ext_lang to raise the signal\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "2f8984a012c205b65b357f93be8f5b02a9977dd5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2f8984a012c205b65b357f93be8f5b02a9977dd5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5a8edb756a56cdfb563006cbc39561994acf6d2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a8edb756a56cdfb563006cbc39561994acf6d2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5a8edb756a56cdfb563006cbc39561994acf6d2d"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 57,
    "deletions": 50
  },
  "files": [
    {
      "sha": "89ab29f3d1c97b16735b5d4e8200daffe25bf273",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
      "patch": "@@ -682,6 +682,12 @@ install_gdb_sigint_handler (struct signal_handler *previous)\n     previous->handler_saved = 0;\n }\n \n+#if GDB_SELF_TEST\n+namespace selftests {\n+void (*hook_set_active_ext_lang) () = nullptr;\n+}\n+#endif\n+\n /* Set the currently active extension language to NOW_ACTIVE.\n    The result is a pointer to a malloc'd block of memory to pass to\n    restore_active_ext_lang.\n@@ -708,6 +714,11 @@ install_gdb_sigint_handler (struct signal_handler *previous)\n struct active_ext_lang_state *\n set_active_ext_lang (const struct extension_language_defn *now_active)\n {\n+#if GDB_SELF_TEST\n+  if (selftests::hook_set_active_ext_lang)\n+    selftests::hook_set_active_ext_lang ();\n+#endif\n+\n   struct active_ext_lang_state *previous\n     = XCNEW (struct active_ext_lang_state);\n "
    },
    {
      "sha": "2f2ca3e77433aa9c726426be28f4cfd536f98c83",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
      "patch": "@@ -319,4 +319,10 @@ extern void get_matching_xmethod_workers\n extern gdb::optional<std::string> ext_lang_colorize\n   (const std::string &filename, const std::string &contents);\n \n+#if GDB_SELF_TEST\n+namespace selftests {\n+extern void (*hook_set_active_ext_lang) ();\n+}\n+#endif\n+\n #endif /* EXTENSION_H */"
    },
    {
      "sha": "44ec4b7094cdada6c10a9af20a6c4ffdcf72736d",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 40,
      "deletions": 15,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c82f680a94399a0f1c9fdc53ed79a8cf333213a6/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=c82f680a94399a0f1c9fdc53ed79a8cf333213a6",
      "patch": "@@ -1933,21 +1933,46 @@ test_python ()\n   output.clear ();\n \n   bool saw_exception = false;\n-  scoped_restore reset_gdb_python_initialized\n-    = make_scoped_restore (&gdb_python_initialized, 0);\n-  try\n-    {\n-      CMD (output);\n-    }\n-  catch (const gdb_exception &e)\n-    {\n-      saw_exception = true;\n-      SELF_CHECK (e.reason == RETURN_ERROR);\n-      SELF_CHECK (e.error == GENERIC_ERROR);\n-      SELF_CHECK (*e.message == \"Python not initialized\");\n-    }\n-  SELF_CHECK (saw_exception);\n-  SELF_CHECK (output.empty ());\n+  {\n+    scoped_restore reset_gdb_python_initialized\n+      = make_scoped_restore (&gdb_python_initialized, 0);\n+    try\n+      {\n+\tCMD (output);\n+      }\n+    catch (const gdb_exception &e)\n+      {\n+\tsaw_exception = true;\n+\tSELF_CHECK (e.reason == RETURN_ERROR);\n+\tSELF_CHECK (e.error == GENERIC_ERROR);\n+\tSELF_CHECK (*e.message == \"Python not initialized\");\n+      }\n+    SELF_CHECK (saw_exception);\n+    SELF_CHECK (output.empty ());\n+  }\n+\n+  saw_exception = false;\n+  {\n+    scoped_restore save_hook\n+      = make_scoped_restore (&hook_set_active_ext_lang,\n+\t\t\t     []() { raise (SIGINT); });\n+    try\n+      {\n+\tCMD (output);\n+      }\n+    catch (const gdb_exception &e)\n+      {\n+\tsaw_exception = true;\n+\tSELF_CHECK (e.reason == RETURN_ERROR);\n+\tSELF_CHECK (e.error == GENERIC_ERROR);\n+\tSELF_CHECK (*e.message == \"Error while executing Python code.\");\n+      }\n+    SELF_CHECK (saw_exception);\n+    std::string ref_output(\"Traceback (most recent call last):\\n\"\n+\t\t\t   \"  File \\\"<string>\\\", line 1, in <module>\\n\"\n+\t\t\t   \"KeyboardInterrupt\\n\");\n+    SELF_CHECK (output == ref_output);\n+  }\n \n #undef CMD\n }"
    },
    {
      "sha": "33cf1ef90c87f41ff72804a73bf2553464de6cbb",
      "filename": "gdb/testsuite/gdb.gdb/python-interrupts.exp",
      "status": "removed",
      "additions": 0,
      "deletions": 35,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a8edb756a56cdfb563006cbc39561994acf6d2d/gdb/testsuite/gdb.gdb/python-interrupts.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a8edb756a56cdfb563006cbc39561994acf6d2d/gdb/testsuite/gdb.gdb/python-interrupts.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.gdb/python-interrupts.exp?ref=5a8edb756a56cdfb563006cbc39561994acf6d2d",
      "patch": "@@ -1,35 +0,0 @@\n-# Copyright 2014-2021 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-# Test Python SIGINT handling.\n-# This is easiest if we can send SIGINT when gdb is at particular points.\n-\n-load_lib selftest-support.exp\n-load_lib gdb-python.exp\n-\n-proc test_python_interrupts {} {\n-    if {[skip_python_tests]} {\n-\treturn -1\n-    }\n-\n-    gdb_breakpoint set_active_ext_lang temporary\n-    gdb_test \"call catch_command_errors(execute_command, \\\"python print(5)\\\", 0, true)\" \\\n-\t\"Temporary breakpoint.*silently stop.\"\n-    gdb_test \"signal SIGINT\" \\\n-\t\"KeyboardInterrupt.*Error while executing Python code.\"\n-    return 0\n-}\n-\n-do_self_tests captured_command_loop test_python_interrupts"
    }
  ]
}