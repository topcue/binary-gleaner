{
  "sha": "4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGIwY2YzZDZkMGZmNGE3MzdmOGFlZTJlZDM4OGZiYzcyYmE5NDFiZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-10T14:47:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-05T16:24:51Z"
    },
    "message": "gdb/testsuite: gdb.base/attach.exp: expose bug when testing with native-extended-gdbserver\n\nIn gdb.base/attach.exp, proc do_attach_failure_tests, we attach to a\nprocess.  When then try to attach to the same process in another\ninferior, expecting it to fail.  We then come back to the first inferior\nand try to kill it, to clean up the test.  When using the\nnative-extended-gdbserver board, this \"kill\" test passes, even though it\ndidn't actually work:\n\n    add-inferior\n    [New inferior 2]\n    Added inferior 2 on connection 1 (extended-remote localhost:2347)\n    (gdb) PASS: gdb.base/attach.exp: do_attach_failure_tests: add empty inferior 2\n    inferior 2\n    [Switching to inferior 2 [<null>] (<noexec>)]\n    (gdb) PASS: gdb.base/attach.exp: do_attach_failure_tests: switch to inferior 2\n    attach 817032\n    Attaching to process 817032\n    Attaching to process 817032 failed\n    (gdb) PASS: gdb.base/attach.exp: do_attach_failure_tests: fail to attach again\n    inferior 1\n    [Switching to inferior 1 [process 817032] (/home/simark/build/binutils-gdb/gdb/testsuite/outputs/gdb.base/attach/attach)]\n    [Switching to thread 1.1 (Thread 817032.817032)]\n    #0  main () at /home/simark/src/binutils-gdb/gdb/testsuite/gdb.base/attach.c:19\n    19\t  while (! should_exit)\n    (gdb) PASS: gdb.base/attach.exp: do_attach_failure_tests: switch to inferior 1\n    kill\n    Kill the program being debugged? (y or n) y\n    Remote connection closed  <==== That's unexpected\n    (gdb) PASS: gdb.base/attach.exp: do_attach_failure_tests: exit after attach failures\n\nWhen the second attach fails, gdbserver seems to break the connection\n(it hangs up on the existing remote target) and start listening again\nfor incoming connections.  This is documented in PR 19558 [1].\n\nMake the expected output regexp for the kill command tighter (it\ncurrently accepts anything).  Use \"set confirm off\" so we don't have to\ndeal with the confirmation.  And to be really sure the extended-remote\ntarget still works, try to run the inferior again after killing.  The\nnow tests are kfail'ed when the target is gdbserver.\n\n[1] https://sourceware.org/bugzilla/show_bug.cgi?id=19558\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/attach.exp (do_attach_failure_tests): Make kill\n\tregexp tighter, run inferior after killing it.  Kfail when\n\ttarget is gdbserver.\n\nChange-Id: I99c5cd3968ce2ec962ace35b016f842a243b7a0d",
    "tree": {
      "sha": "21565aced854d4d74436db36cbed7ac8d2df0517",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21565aced854d4d74436db36cbed7ac8d2df0517"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52e0e32b34e503630e124cd60365a6d3ec5b1181",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52e0e32b34e503630e124cd60365a6d3ec5b1181",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52e0e32b34e503630e124cd60365a6d3ec5b1181"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 21,
    "deletions": 6
  },
  "files": [
    {
      "sha": "d6c59227559050a62e3cfa63eb1d8138d9d6b37d",
      "filename": "gdb/testsuite/gdb.base/attach.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 6,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be/gdb/testsuite/gdb.base/attach.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be/gdb/testsuite/gdb.base/attach.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach.exp?ref=4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
      "patch": "@@ -179,6 +179,10 @@ proc_with_prefix do_attach_failure_tests {} {\n     gdb_test \"add-inferior\" \"Added inferior 2.*\" \"add empty inferior 2\"\n     gdb_test \"inferior 2\" \"Switching to inferior 2.*\" \"switch to inferior 2\"\n \n+    # Probe this before the failing attach: the failed attach against GDBserver\n+    # currently leaves the extended-remote target in a bad state.\n+    set do_kfail [target_is_gdbserver]\n+\n     set test \"fail to attach again\"\n     gdb_test_multiple \"attach $testpid\" \"$test\" {\n \t-re \"Attaching to process $testpid.*warning: process .* is already traced by process .*$gdb_prompt $\" {\n@@ -190,13 +194,24 @@ proc_with_prefix do_attach_failure_tests {} {\n \t}\n     }\n \n+    # To ensure the target is still alive and working after this, try to run\n+    # inferior 1.\n+    gdb_test_no_output \"set confirm off\"\n     gdb_test \"inferior 1\" \"Switching to inferior 1.*\" \"switch to inferior 1\"\n-    set test \"exit after attach failures\"\n-    gdb_test \"kill\" \\\n-\t\"\" \\\n-\t\"$test\" \\\n-\t\"Kill the program being debugged.*y or n. $\" \\\n-\t\"y\"\n+\n+    if { $do_kfail } { setup_kfail \"gdb/19558\" \"*-*-*\" }\n+    gdb_test \"kill\" \"killed.*\" \"exit after attach failures\"\n+\n+    # This can probably be replaced with a call to runto or runto_main once\n+    # the kfail is removed.\n+    gdb_breakpoint \"main\"\n+    gdb_run_cmd\n+    if { $do_kfail } { setup_kfail \"gdb/19558\" \"*-*-*\" }\n+    gdb_test_multiple \"\" \"stop at main\" {\n+\t-wrap -re \"Breakpoint $::decimal, main .*\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n \n     # Another \"don't leave a process around\"\n     kill_wait_spawned_process $test_spawn_id"
    }
  ]
}