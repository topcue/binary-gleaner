{
  "sha": "413403fc34156cf695b09553fca91e0990520787",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDEzNDAzZmMzNDE1NmNmNjk1YjA5NTUzZmNhOTFlMDk5MDUyMDc4Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:37Z"
    },
    "message": "Add an expr::operation_up to struct expression\n\nThis adds an expr::operation_up to struct expression, and then\nmodifies various parts of GDB to use this member when it is non-null.\nThe list of such spots was a bit surprising to me, and found only\nafter writing most of the code and then noticing what no longer\ncompiled.\n\nIn a few spots, new accessor methods are added to operation\nsubclasses, so that code that dissects an expression will work with\nthe new scheme.\n\nAfter this change, code that constructs an expression can be switched\nto the new form without breaking.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-exp.h (class ada_var_value_operation) <get_symbol>: Remove;\n\tnow in superclass.\n\t* value.h (fetch_subexp_value): Add \"op\" parameter.\n\t* value.c (init_if_undefined_command): Update.\n\t* tracepoint.c (validate_actionline, encode_actions_1): Update.\n\t* stap-probe.c (stap_probe::compile_to_ax): Update.\n\t* printcmd.c (set_command): Update.\n\t* ppc-linux-nat.c (ppc_linux_nat_target::check_condition):\n\tUpdate.\n\t* parser-defs.h (struct expr_builder) <set_operation>: New\n\tmethod.\n\t* parse.c (parse_exp_in_context, exp_uses_objfile): Update.\n\t* expression.h (struct expression) <first_opcode>: Update.\n\t<op>: New member.\n\t* expprint.c (dump_raw_expression, dump_prefix_expression):\n\tUpdate.\n\t* expop.h (class var_value_operation) <get_symbol>: New method.\n\t(class register_operation) <get_name>: New method.\n\t(class equal_operation): No longer a typedef, now a subclass.\n\t(class unop_memval_operation) <get_type>: New method.\n\t(class assign_operation) <get_lhs>: New method.\n\t(class unop_cast_operation) <get_type>: New method.\n\t* eval.c (evaluate_expression, evaluate_type)\n\t(evaluate_subexpression_type): Update.\n\t(fetch_subexp_value): Add \"op\" parameter.\n\t(parse_and_eval_type): Update.\n\t* dtrace-probe.c (dtrace_probe::compile_to_ax): Update.\n\t* breakpoint.c (update_watchpoint, watchpoint_check)\n\t(watchpoint_exp_is_const, watch_command_1): Update.\n\t* ax-gdb.c (gen_trace_for_expr, gen_eval_for_expr, gen_printf):\n\tUpdate.",
    "tree": {
      "sha": "bf463e2ea8f074b198caca43014951dca5253d5c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf463e2ea8f074b198caca43014951dca5253d5c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/413403fc34156cf695b09553fca91e0990520787",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/413403fc34156cf695b09553fca91e0990520787",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/413403fc34156cf695b09553fca91e0990520787",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/413403fc34156cf695b09553fca91e0990520787/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b0f9164cc6d738db3a71c1ea83aa6567f0387bca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0f9164cc6d738db3a71c1ea83aa6567f0387bca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b0f9164cc6d738db3a71c1ea83aa6567f0387bca"
    }
  ],
  "stats": {
    "total": 355,
    "additions": 298,
    "deletions": 57
  },
  "files": [
    {
      "sha": "5fd0967d3d5579f024e975fb22f1d2b19d954be5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -1,3 +1,37 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-exp.h (class ada_var_value_operation) <get_symbol>: Remove;\n+\tnow in superclass.\n+\t* value.h (fetch_subexp_value): Add \"op\" parameter.\n+\t* value.c (init_if_undefined_command): Update.\n+\t* tracepoint.c (validate_actionline, encode_actions_1): Update.\n+\t* stap-probe.c (stap_probe::compile_to_ax): Update.\n+\t* printcmd.c (set_command): Update.\n+\t* ppc-linux-nat.c (ppc_linux_nat_target::check_condition):\n+\tUpdate.\n+\t* parser-defs.h (struct expr_builder) <set_operation>: New\n+\tmethod.\n+\t* parse.c (parse_exp_in_context, exp_uses_objfile): Update.\n+\t* expression.h (struct expression) <first_opcode>: Update.\n+\t<op>: New member.\n+\t* expprint.c (dump_raw_expression, dump_prefix_expression):\n+\tUpdate.\n+\t* expop.h (class var_value_operation) <get_symbol>: New method.\n+\t(class register_operation) <get_name>: New method.\n+\t(class equal_operation): No longer a typedef, now a subclass.\n+\t(class unop_memval_operation) <get_type>: New method.\n+\t(class assign_operation) <get_lhs>: New method.\n+\t(class unop_cast_operation) <get_type>: New method.\n+\t* eval.c (evaluate_expression, evaluate_type)\n+\t(evaluate_subexpression_type): Update.\n+\t(fetch_subexp_value): Add \"op\" parameter.\n+\t(parse_and_eval_type): Update.\n+\t* dtrace-probe.c (dtrace_probe::compile_to_ax): Update.\n+\t* breakpoint.c (update_watchpoint, watchpoint_check)\n+\t(watchpoint_exp_is_const, watch_command_1): Update.\n+\t* ax-gdb.c (gen_trace_for_expr, gen_eval_for_expr, gen_printf):\n+\tUpdate.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_value_binop): Do not use op_string."
    },
    {
      "sha": "1ae0cbc354663767608ffda4bc3ff3ccb6d8ad80",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -351,9 +351,6 @@ class ada_var_value_operation\n \t\t\t    struct expression *exp,\n \t\t\t    enum noside noside) override;\n \n-  symbol *get_symbol () const\n-  { return std::get<0> (m_storage); }\n-\n   const block *get_block () const\n   { return std::get<1> (m_storage); }\n "
    },
    {
      "sha": "d2f50bbec7bdb05ca34bbb7cf3af3fe2adb4bd54",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -3064,7 +3064,10 @@ gen_trace_for_expr (CORE_ADDR scope, struct expression *expr,\n   ax->tracing = 1;\n   ax->trace_string = trace_string;\n   value.optimized_out = 0;\n-  gen_expr (expr, &pc, ax.get (), &value);\n+  if (expr->op != nullptr)\n+    expr->op->generate_ax (expr, ax.get (), &value);\n+  else\n+    gen_expr (expr, &pc, ax.get (), &value);\n \n   /* Make sure we record the final object, and get rid of it.  */\n   gen_traced_pop (ax.get (), &value);\n@@ -3092,7 +3095,10 @@ gen_eval_for_expr (CORE_ADDR scope, struct expression *expr)\n   pc = expr->elts;\n   ax->tracing = 0;\n   value.optimized_out = 0;\n-  gen_expr (expr, &pc, ax.get (), &value);\n+  if (expr->op != nullptr)\n+    expr->op->generate_ax (expr, ax.get (), &value);\n+  else\n+    gen_expr (expr, &pc, ax.get (), &value);\n \n   require_rvalue (ax.get (), &value);\n \n@@ -3145,9 +3151,14 @@ gen_printf (CORE_ADDR scope, struct gdbarch *gdbarch,\n      for simplicity of collecting them on the target side.  */\n   for (tem = nargs - 1; tem >= 0; --tem)\n     {\n-      pc = exprs[tem]->elts;\n       value.optimized_out = 0;\n-      gen_expr (exprs[tem], &pc, ax.get (), &value);\n+      if (exprs[tem]->op != nullptr)\n+\texprs[tem]->op->generate_ax (exprs[tem], ax.get (), &value);\n+      else\n+\t{\n+\t  pc = exprs[tem]->elts;\n+\t  gen_expr (exprs[tem], &pc, ax.get (), &value);\n+\t}\n       require_rvalue (ax.get (), &value);\n     }\n "
    },
    {
      "sha": "aa2abcef017254df1c94d6d22cfb4e7c09ae17ba",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -1903,7 +1903,8 @@ update_watchpoint (struct watchpoint *b, int reparse)\n       struct value *v, *result;\n       struct program_space *frame_pspace;\n \n-      fetch_subexp_value (b->exp.get (), &pc, &v, &result, &val_chain, false);\n+      fetch_subexp_value (b->exp.get (), &pc, b->exp->op.get (), &v, &result,\n+\t\t\t  &val_chain, false);\n \n       /* Avoid setting b->val if it's already set.  The meaning of\n \t b->val is 'the last value' user saw, and we should update\n@@ -5022,7 +5023,8 @@ watchpoint_check (bpstat bs)\n \treturn WP_VALUE_CHANGED;\n \n       mark = value_mark ();\n-      fetch_subexp_value (b->exp.get (), &pc, &new_val, NULL, NULL, false);\n+      fetch_subexp_value (b->exp.get (), &pc, b->exp->op.get (), &new_val,\n+\t\t\t  NULL, NULL, false);\n \n       if (b->val_bitsize != 0)\n \tnew_val = extract_bitfield_from_watchpoint_value (b, new_val);\n@@ -10122,6 +10124,9 @@ break_range_command (const char *arg, int from_tty)\n static bool\n watchpoint_exp_is_const (const struct expression *exp)\n {\n+  if (exp->op != nullptr)\n+    return exp->op->constant_p ();\n+\n   int i = exp->nelts;\n \n   while (i > 0)\n@@ -10842,8 +10847,8 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n   exp_valid_block = tracker.block ();\n   struct value *mark = value_mark ();\n   struct value *val_as_value = nullptr;\n-  fetch_subexp_value (exp.get (), &pc, &val_as_value, &result, NULL,\n-\t\t      just_location);\n+  fetch_subexp_value (exp.get (), &pc, exp->op.get (), &val_as_value, &result,\n+\t\t      NULL, just_location);\n \n   if (val_as_value != NULL && just_location)\n     {"
    },
    {
      "sha": "f4b6becbf61186f33be640097fecf4e8f1430e74",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -730,8 +730,13 @@ dtrace_probe::compile_to_ax (struct agent_expr *expr, struct axs_value *value,\n \n   arg = this->get_arg_by_number (n, expr->gdbarch);\n \n-  pc = arg->expr->elts;\n-  gen_expr (arg->expr.get (), &pc, expr, value);\n+  if (arg->expr->op != nullptr)\n+    arg->expr->op->generate_ax (arg->expr.get (), expr, value);\n+  else\n+    {\n+      pc = arg->expr->elts;\n+      gen_expr (arg->expr.get (), &pc, expr, value);\n+    }\n \n   require_rvalue (expr, value);\n   value->type = arg->type;"
    },
    {
      "sha": "142d4aea59cece2dee761475173f0a5fd27ce619",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -120,8 +120,14 @@ expression::evaluate (struct type *expect_type, enum noside noside)\n       && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n     stack_temporaries.emplace (inferior_thread ());\n \n-  int pos = 0;\n-  struct value *retval = evaluate_subexp (expect_type, this, &pos, noside);\n+  struct value *retval;\n+  if (op != nullptr)\n+    retval = op->evaluate (expect_type, this, noside);\n+  else\n+    {\n+      int pos = 0;\n+      retval = evaluate_subexp (expect_type, this, &pos, noside);\n+    }\n \n   if (stack_temporaries.has_value ()\n       && value_in_thread_stack_temporaries (retval, inferior_thread ()))\n@@ -153,6 +159,8 @@ evaluate_type (struct expression *exp)\n struct value *\n evaluate_subexpression_type (struct expression *exp, int subexp)\n {\n+  if (exp->op != nullptr)\n+    return exp->op->evaluate (nullptr, exp, EVAL_AVOID_SIDE_EFFECTS);\n   return evaluate_subexp (nullptr, exp, &subexp, EVAL_AVOID_SIDE_EFFECTS);\n }\n \n@@ -179,8 +187,9 @@ evaluate_subexpression_type (struct expression *exp, int subexp)\n    values will be left on the value chain.  */\n \n void\n-fetch_subexp_value (struct expression *exp, int *pc, struct value **valp,\n-\t\t    struct value **resultp,\n+fetch_subexp_value (struct expression *exp, int *pc,\n+\t\t    expr::operation *op,\n+\t\t    struct value **valp, struct value **resultp,\n \t\t    std::vector<value_ref_ptr> *val_chain,\n \t\t    bool preserve_errors)\n {\n@@ -198,7 +207,10 @@ fetch_subexp_value (struct expression *exp, int *pc, struct value **valp,\n \n   try\n     {\n-      result = evaluate_subexp (nullptr, exp, pc, EVAL_NORMAL);\n+      if (op == nullptr)\n+\tresult = evaluate_subexp (nullptr, exp, pc, EVAL_NORMAL);\n+      else\n+\tresult = op->evaluate (nullptr, exp, EVAL_NORMAL);\n     }\n   catch (const gdb_exception &ex)\n     {\n@@ -4491,5 +4503,13 @@ parse_and_eval_type (const char *p, int length)\n   expression_up expr = parse_expression (tmp);\n   if (expr->first_opcode () != UNOP_CAST)\n     error (_(\"Internal error in eval_type.\"));\n+\n+  if (expr->op != nullptr)\n+    {\n+      expr::unop_cast_operation *op\n+\t= dynamic_cast<expr::unop_cast_operation *> (expr->op.get ());\n+      return op->get_type ();\n+    }\n+\n   return expr->elts[1].type;\n }"
    },
    {
      "sha": "a719b0d1edb28e3eea0bc6ec31162387e7c5be86",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 48,
      "deletions": 1,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -654,6 +654,12 @@ class var_value_operation\n   enum exp_opcode opcode () const override\n   { return OP_VAR_VALUE; }\n \n+  /* Return the symbol referenced by this object.  */\n+  symbol *get_symbol () const\n+  {\n+    return std::get<0> (m_storage);\n+  }\n+\n protected:\n \n   void do_generate_ax (struct expression *exp,\n@@ -823,6 +829,12 @@ class register_operation\n   enum exp_opcode opcode () const override\n   { return OP_REGISTER; }\n \n+  /* Return the name of the register.  */\n+  const char *get_name () const\n+  {\n+    return std::get<0> (m_storage).c_str ();\n+  }\n+\n protected:\n \n   void do_generate_ax (struct expression *exp,\n@@ -1329,7 +1341,24 @@ class comparison_operation\n   }\n };\n \n-using equal_operation = comparison_operation<BINOP_EQUAL, eval_op_equal>;\n+class equal_operation\n+  : public comparison_operation<BINOP_EQUAL, eval_op_equal>\n+{\n+public:\n+\n+  using comparison_operation::comparison_operation;\n+\n+  operation *get_lhs () const\n+  {\n+    return std::get<0> (m_storage).get ();\n+  }\n+\n+  operation *get_rhs () const\n+  {\n+    return std::get<1> (m_storage).get ();\n+  }\n+};\n+\n using notequal_operation\n      = comparison_operation<BINOP_NOTEQUAL, eval_op_notequal>;\n using less_operation = comparison_operation<BINOP_LESS, eval_op_less>;\n@@ -1759,6 +1788,12 @@ class unop_memval_operation\n   enum exp_opcode opcode () const override\n   { return UNOP_MEMVAL; }\n \n+  /* Return the type referenced by this object.  */\n+  struct type *get_type () const\n+  {\n+    return std::get<1> (m_storage);\n+  }\n+\n protected:\n \n   void do_generate_ax (struct expression *exp,\n@@ -1884,6 +1919,12 @@ class assign_operation\n   enum exp_opcode opcode () const override\n   { return BINOP_ASSIGN; }\n \n+  /* Return the left-hand-side of the assignment.  */\n+  operation *get_lhs () const\n+  {\n+    return std::get<0> (m_storage).get ();\n+  }\n+\n protected:\n \n   void do_generate_ax (struct expression *exp,\n@@ -1942,6 +1983,12 @@ class unop_cast_operation\n   enum exp_opcode opcode () const override\n   { return UNOP_CAST; }\n \n+  /* Return the type referenced by this object.  */\n+  struct type *get_type () const\n+  {\n+    return std::get<1> (m_storage);\n+  }\n+\n protected:\n \n   void do_generate_ax (struct expression *exp,"
    },
    {
      "sha": "6c65ec0207a200bc4131172ea216f58bb1a36d0a",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -725,6 +725,9 @@ dump_raw_expression (struct expression *exp, struct ui_file *stream,\n   char *eltscan;\n   int eltsize;\n \n+  if (exp->op != nullptr)\n+    return;\n+\n   fprintf_filtered (stream, \"Dump of expression @ \");\n   gdb_print_host_address (exp, stream);\n   if (note)\n@@ -1150,9 +1153,22 @@ dump_prefix_expression (struct expression *exp, struct ui_file *stream)\n {\n   int elt;\n \n+  if (exp->op != nullptr)\n+    {\n+      exp->op->dump (stream, 0);\n+      return;\n+    }\n+\n   fprintf_filtered (stream, \"Dump of expression @ \");\n   gdb_print_host_address (exp, stream);\n   fputs_filtered (\", after conversion to prefix form:\\nExpression: `\", stream);\n+\n+  if (exp->op != nullptr)\n+    {\n+      exp->op->dump (stream, 0);\n+      return;\n+    }\n+\n   print_expression (exp, stream);\n   fprintf_filtered (stream, \"'\\n\\tLanguage %s, %d elements, %ld bytes each.\\n\",\n \t\t    exp->language_defn->name (), exp->nelts,"
    },
    {
      "sha": "3abaf6e6dc7db535c20ae2a30c6c38b7e9f08c88",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -240,7 +240,9 @@ struct expression\n      expression.  */\n   enum exp_opcode first_opcode () const\n   {\n-      return elts[0].opcode;\n+    if (op != nullptr)\n+      return op->opcode ();\n+    return elts[0].opcode;\n   }\n \n   /* Evaluate the expression.  EXPECT_TYPE is the context type of the\n@@ -252,6 +254,7 @@ struct expression\n   const struct language_defn *language_defn;\n   /* Architecture it was parsed in.  */\n   struct gdbarch *gdbarch;\n+  expr::operation_up op;\n   int nelts = 0;\n   union exp_element *elts;\n };"
    },
    {
      "sha": "68386f17bc5e026a3cc578593e4cc2113b0d8842",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -50,6 +50,7 @@\n #include \"user-regs.h\"\n #include <algorithm>\n #include \"gdbsupport/gdb_optional.h\"\n+#include \"c-exp.h\"\n \n /* Standard set of definitions for printing, dumping, prefixifying,\n  * and evaluating expressions.  */\n@@ -1073,7 +1074,6 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n \t\t      expr_completion_state *cstate)\n {\n   const struct language_defn *lang = NULL;\n-  int subexp;\n \n   if (*stringptr == 0 || **stringptr == 0)\n     error_no_arg (_(\"expression to compute\"));\n@@ -1153,7 +1153,8 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n       /* If parsing for completion, allow this to succeed; but if no\n \t expression elements have been written, then there's nothing\n \t to do, so fail.  */\n-      if (! ps.parse_completion || ps.expout_ptr == 0)\n+      if (! ps.parse_completion\n+\t  || (ps.expout->op == nullptr && ps.expout_ptr == 0))\n \tthrow;\n     }\n \n@@ -1168,12 +1169,17 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n     dump_raw_expression (result.get (), gdb_stdlog,\n \t\t\t \"before conversion to prefix form\");\n \n-  subexp = prefixify_expression (result.get (),\n-\t\t\t\t ps.m_completion_state.expout_last_struct);\n-  if (out_subexp)\n-    *out_subexp = subexp;\n+  if (result->op == nullptr)\n+    {\n+      int subexp = prefixify_expression (result.get (),\n+\t\t\t\t\t ps.m_completion_state.expout_last_struct);\n+      if (out_subexp)\n+\t*out_subexp = subexp;\n \n-  lang->post_parser (&result, &ps);\n+      lang->post_parser (&result, &ps);\n+    }\n+  else\n+    result->op->set_outermost ();\n \n   if (expressiondebug)\n     dump_prefix_expression (result.get (), gdb_stdlog);\n@@ -1441,6 +1447,9 @@ exp_uses_objfile (struct expression *exp, struct objfile *objfile)\n {\n   gdb_assert (objfile->separate_debug_objfile_backlink == NULL);\n \n+  if (exp->op != nullptr)\n+    return exp->op->uses_objfile (objfile);\n+\n   return exp_iterate (exp, exp_uses_objfile_iter, objfile);\n }\n "
    },
    {
      "sha": "a9ae198fab22e4500e37f36dd16e8ff87277d534",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -63,6 +63,13 @@ struct expr_builder\n     return expout->language_defn;\n   }\n \n+  /* Set the root operation of the expression that is currently being\n+     built.  */\n+  void set_operation (expr::operation_up &&op)\n+  {\n+    expout->op = std::move (op);\n+  }\n+\n   /* The size of the expression above.  */\n \n   size_t expout_size;"
    },
    {
      "sha": "72f0283e4af231f12f15bf921eea5ca0bbcaf038",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -54,6 +54,7 @@\n #include \"arch/ppc-linux-tdesc.h\"\n #include \"nat/ppc-linux.h\"\n #include \"linux-tdep.h\"\n+#include \"expop.h\"\n \n /* Similarly for the hardware watchpoint support.  These requests are used\n    when the PowerPC HWDEBUG ptrace interface is not available.  */\n@@ -2491,16 +2492,29 @@ ppc_linux_nat_target::check_condition (CORE_ADDR watch_addr,\n   struct value *left_val, *right_val;\n   std::vector<value_ref_ptr> left_chain, right_chain;\n \n-  if (cond->elts[0].opcode != BINOP_EQUAL)\n+  if (cond->first_opcode () != BINOP_EQUAL)\n     return 0;\n \n-  fetch_subexp_value (cond, &pc, &left_val, NULL, &left_chain, false);\n+  expr::operation *lhs = nullptr;\n+  expr::operation *rhs = nullptr;\n+  if (cond->op != nullptr)\n+    {\n+      expr::equal_operation *eqop\n+\t= dynamic_cast<expr::equal_operation *> (cond->op.get ());\n+      if (eqop != nullptr)\n+\t{\n+\t  lhs = eqop->get_lhs ();\n+\t  rhs = eqop->get_rhs ();\n+\t}\n+    }\n+\n+  fetch_subexp_value (cond, &pc, lhs, &left_val, NULL, &left_chain, false);\n   num_accesses_left = num_memory_accesses (left_chain);\n \n   if (left_val == NULL || num_accesses_left < 0)\n     return 0;\n \n-  fetch_subexp_value (cond, &pc, &right_val, NULL, &right_chain, false);\n+  fetch_subexp_value (cond, &pc, rhs, &right_val, NULL, &right_chain, false);\n   num_accesses_right = num_memory_accesses (right_chain);\n \n   if (right_val == NULL || num_accesses_right < 0)"
    },
    {
      "sha": "235f2de68fe203d3b5c166d6e0e733dabd0b98c4",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -1375,8 +1375,14 @@ set_command (const char *exp, int from_tty)\n {\n   expression_up expr = parse_expression (exp);\n \n-  if (expr->nelts >= 1)\n-    switch (expr->elts[0].opcode)\n+  enum exp_opcode opcode = OP_NULL;\n+  if (expr->op != nullptr)\n+    opcode = expr->op->opcode ();\n+  else if (expr->nelts >= 1)\n+    opcode = expr->elts[0].opcode;\n+\n+  if (opcode != OP_NULL)\n+    switch (opcode)\n       {\n       case UNOP_PREINCREMENT:\n       case UNOP_POSTINCREMENT:"
    },
    {
      "sha": "476cbecf9945b5de45cb3dd0212b85ec259bba6a",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -1429,7 +1429,10 @@ stap_probe::compile_to_ax (struct agent_expr *expr, struct axs_value *value,\n   arg = this->get_arg_by_number (n, expr->gdbarch);\n \n   pc = arg->aexpr->elts;\n-  gen_expr (arg->aexpr.get (), &pc, expr, value);\n+  if (arg->aexpr->op != nullptr)\n+    arg->aexpr->op->generate_ax (arg->aexpr.get (), expr, value);\n+  else\n+    gen_expr (arg->aexpr.get (), &pc, expr, value);\n \n   require_rvalue (expr, value);\n   value->type = arg->atype;"
    },
    {
      "sha": "101c526e8b22db1a5caba756a4ff583a9a9afaee",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 62,
      "deletions": 20,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -57,6 +57,7 @@\n #include \"location.h\"\n #include <algorithm>\n #include \"cli/cli-style.h\"\n+#include \"expop.h\"\n \n #include <unistd.h>\n \n@@ -689,19 +690,29 @@ validate_actionline (const char *line, struct breakpoint *b)\n \n \t      if (exp->first_opcode () == OP_VAR_VALUE)\n \t\t{\n-\t\t  if (SYMBOL_CLASS (exp->elts[2].symbol) == LOC_CONST)\n+\t\t  symbol *sym;\n+\t\t  if (exp->op != nullptr)\n+\t\t    {\n+\t\t      expr::var_value_operation *vvop\n+\t\t\t= (dynamic_cast<expr::var_value_operation *>\n+\t\t\t   (exp->op.get ()));\n+\t\t      sym = vvop->get_symbol ();\n+\t\t    }\n+\t\t  else\n+\t\t    sym = exp->elts[2].symbol;\n+\n+\t\t  if (SYMBOL_CLASS (sym) == LOC_CONST)\n \t\t    {\n \t\t      error (_(\"constant `%s' (value %s) \"\n \t\t\t       \"will not be collected.\"),\n-\t\t\t     exp->elts[2].symbol->print_name (),\n-\t\t\t     plongest (SYMBOL_VALUE (exp->elts[2].symbol)));\n+\t\t\t     sym->print_name (),\n+\t\t\t     plongest (SYMBOL_VALUE (sym)));\n \t\t    }\n-\t\t  else if (SYMBOL_CLASS (exp->elts[2].symbol)\n-\t\t\t   == LOC_OPTIMIZED_OUT)\n+\t\t  else if (SYMBOL_CLASS (sym) == LOC_OPTIMIZED_OUT)\n \t\t    {\n \t\t      error (_(\"`%s' is optimized away \"\n \t\t\t       \"and cannot be collected.\"),\n-\t\t\t     exp->elts[2].symbol->print_name ());\n+\t\t\t     sym->print_name ());\n \t\t    }\n \t\t}\n \n@@ -1384,7 +1395,16 @@ encode_actions_1 (struct command_line *action,\n \t\t    {\n \t\t    case OP_REGISTER:\n \t\t      {\n-\t\t\tconst char *name = &exp->elts[2].string;\n+\t\t\tconst char *name;\n+\t\t\tif (exp->op != nullptr)\n+\t\t\t  {\n+\t\t\t    expr::register_operation *regop\n+\t\t\t      = (dynamic_cast<expr::register_operation *>\n+\t\t\t\t (exp->op.get ()));\n+\t\t\t    name = regop->get_name ();\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  name = &exp->elts[2].string;\n \n \t\t\ti = user_reg_map_name_to_regnum (target_gdbarch (),\n \t\t\t\t\t\t\t name, strlen (name));\n@@ -1400,25 +1420,47 @@ encode_actions_1 (struct command_line *action,\n \t\t      }\n \n \t\t    case UNOP_MEMVAL:\n-\t\t      /* Safe because we know it's a simple expression.  */\n-\t\t      tempval = evaluate_expression (exp.get ());\n-\t\t      addr = value_address (tempval);\n-\t\t      /* Initialize the TYPE_LENGTH if it is a typedef.  */\n-\t\t      check_typedef (exp->elts[1].type);\n-\t\t      collect->add_memrange (target_gdbarch (),\n-\t\t\t\t\t     memrange_absolute, addr,\n-\t\t\t\t\t     TYPE_LENGTH (exp->elts[1].type),\n-\t\t\t\t\t     tloc->address);\n-\t\t      collect->append_exp (std::string (exp_start,\n-\t\t\t\t\t\t\taction_exp));\n+\t\t      {\n+\t\t\t/* Safe because we know it's a simple expression.  */\n+\t\t\ttempval = evaluate_expression (exp.get ());\n+\t\t\taddr = value_address (tempval);\n+\t\t\tstruct type *type;\n+\t\t\tif (exp->op != nullptr)\n+\t\t\t  {\n+\t\t\t    expr::unop_memval_operation *memop\n+\t\t\t      = (dynamic_cast<expr::unop_memval_operation *>\n+\t\t\t\t (exp->op.get ()));\n+\t\t\t    type = memop->get_type ();\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  type = exp->elts[1].type;\n+\t\t\t/* Initialize the TYPE_LENGTH if it is a typedef.  */\n+\t\t\tcheck_typedef (type);\n+\t\t\tcollect->add_memrange (target_gdbarch (),\n+\t\t\t\t\t       memrange_absolute, addr,\n+\t\t\t\t\t       TYPE_LENGTH (type),\n+\t\t\t\t\t       tloc->address);\n+\t\t\tcollect->append_exp (std::string (exp_start,\n+\t\t\t\t\t\t\t  action_exp));\n+\t\t      }\n \t\t      break;\n \n \t\t    case OP_VAR_VALUE:\n \t\t      {\n-\t\t\tstruct symbol *sym = exp->elts[2].symbol;\n+\t\t\tstruct symbol *sym;\n+\n+\t\t\tif (exp->op != nullptr)\n+\t\t\t  {\n+\t\t\t    expr::var_value_operation *vvo\n+\t\t\t      = (dynamic_cast<expr::var_value_operation *>\n+\t\t\t\t (exp->op.get ()));\n+\t\t\t    sym = vvo->get_symbol ();\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  sym = exp->elts[2].symbol;\n \t\t\tconst char *name = sym->natural_name ();\n \n-\t\t\tcollect->collect_symbol (exp->elts[2].symbol,\n+\t\t\tcollect->collect_symbol (sym,\n \t\t\t\t\t\t target_gdbarch (),\n \t\t\t\t\t\t frame_reg,\n \t\t\t\t\t\t frame_offset,"
    },
    {
      "sha": "89b612e9e876f71f3bb116a774ddd23e070354ac",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 24,
      "deletions": 4,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -44,6 +44,7 @@\n #include \"gdbsupport/selftest.h\"\n #include \"gdbsupport/array-view.h\"\n #include \"cli/cli-style.h\"\n+#include \"expop.h\"\n \n /* Definition of a user function.  */\n struct internal_function\n@@ -2006,23 +2007,42 @@ static struct internalvar *internalvars;\n static void\n init_if_undefined_command (const char* args, int from_tty)\n {\n-  struct internalvar* intvar;\n+  struct internalvar *intvar = nullptr;\n \n   /* Parse the expression - this is taken from set_command().  */\n   expression_up expr = parse_expression (args);\n \n   /* Validate the expression.\n      Was the expression an assignment?\n      Or even an expression at all?  */\n-  if (expr->nelts == 0 || expr->first_opcode () != BINOP_ASSIGN)\n+  if ((expr->nelts == 0 && expr->op == nullptr)\n+      || expr->first_opcode () != BINOP_ASSIGN)\n     error (_(\"Init-if-undefined requires an assignment expression.\"));\n \n   /* Extract the variable from the parsed expression.\n      In the case of an assign the lvalue will be in elts[1] and elts[2].  */\n-  if (expr->elts[1].opcode != OP_INTERNALVAR)\n+  if (expr->op == nullptr)\n+    {\n+      if (expr->elts[1].opcode == OP_INTERNALVAR)\n+\tintvar = expr->elts[2].internalvar;\n+    }\n+  else\n+    {\n+      expr::assign_operation *assign\n+\t= dynamic_cast<expr::assign_operation *> (expr->op.get ());\n+      if (assign != nullptr)\n+\t{\n+\t  expr::operation *lhs = assign->get_lhs ();\n+\t  expr::internalvar_operation *ivarop\n+\t    = dynamic_cast<expr::internalvar_operation *> (lhs);\n+\t  if (ivarop != nullptr)\n+\t    intvar = ivarop->get_internalvar ();\n+\t}\n+    }\n+\n+  if (intvar == nullptr)\n     error (_(\"The first parameter to init-if-undefined \"\n \t     \"should be a GDB variable.\"));\n-  intvar = expr->elts[2].internalvar;\n \n   /* Only evaluate the expression if the lvalue is void.\n      This may still fail if the expression is invalid.  */"
    },
    {
      "sha": "7f72938f5b6378adee5c5f53c8d423e2b62eb54a",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/413403fc34156cf695b09553fca91e0990520787/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/413403fc34156cf695b09553fca91e0990520787/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=413403fc34156cf695b09553fca91e0990520787",
      "patch": "@@ -930,7 +930,9 @@ extern value *evaluate_var_msym_value (enum noside noside,\n \n extern value *eval_skip_value (expression *exp);\n \n+namespace expr { class operation; };\n extern void fetch_subexp_value (struct expression *exp, int *pc,\n+\t\t\t\texpr::operation *op,\n \t\t\t\tstruct value **valp, struct value **resultp,\n \t\t\t\tstd::vector<value_ref_ptr> *val_chain,\n \t\t\t\tbool preserve_errors);"
    }
  ]
}