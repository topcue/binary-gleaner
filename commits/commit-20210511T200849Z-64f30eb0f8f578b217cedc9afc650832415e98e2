{
  "sha": "64f30eb0f8f578b217cedc9afc650832415e98e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRmMzBlYjBmOGY1NzhiMjE3Y2VkYzlhZmM2NTA4MzI0MTVlOThlMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-11T20:08:16Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-11T20:08:49Z"
    },
    "message": "gdb: fix indentation of cmd_list_element\n\nThis structure declaration is over-indented, fix that.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.h (struct cmd_list_element): Fix indentation.\n\nChange-Id: I17c9cd739a233239b3add72f4fce7947c20907cd",
    "tree": {
      "sha": "ac3c938f6854013c919dd93518ce908660c08d8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac3c938f6854013c919dd93518ce908660c08d8a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64f30eb0f8f578b217cedc9afc650832415e98e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64f30eb0f8f578b217cedc9afc650832415e98e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64f30eb0f8f578b217cedc9afc650832415e98e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64f30eb0f8f578b217cedc9afc650832415e98e2/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8147d7053fa848f7f1ce6692c6788224d14869d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8147d7053fa848f7f1ce6692c6788224d14869d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8147d7053fa848f7f1ce6692c6788224d14869d"
    }
  ],
  "stats": {
    "total": 390,
    "additions": 197,
    "deletions": 193
  },
  "files": [
    {
      "sha": "b15b5057b2875c86924d9ef62c38af6353da1cba",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64f30eb0f8f578b217cedc9afc650832415e98e2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64f30eb0f8f578b217cedc9afc650832415e98e2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=64f30eb0f8f578b217cedc9afc650832415e98e2",
      "patch": "@@ -1,3 +1,7 @@\n+2021-05-11  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* cli/cli-decode.h (struct cmd_list_element): Fix indentation.\n+\n 2021-05-10  Lancelot Six  <lsix@lancelotsix.com>\n \n \tPR gdb/27614"
    },
    {
      "sha": "d6f52a21da78847062544ab351edd7dae87df197",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 193,
      "deletions": 193,
      "changes": 386,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64f30eb0f8f578b217cedc9afc650832415e98e2/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64f30eb0f8f578b217cedc9afc650832415e98e2/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=64f30eb0f8f578b217cedc9afc650832415e98e2",
      "patch": "@@ -41,212 +41,212 @@ enum cmd_types\n \n \n struct cmd_list_element\n+{\n+  cmd_list_element (const char *name_, enum command_class theclass_,\n+\t\t    const char *doc_)\n+    : name (name_),\n+      theclass (theclass_),\n+      cmd_deprecated (0),\n+      deprecated_warn_user (0),\n+      malloced_replacement (0),\n+      doc_allocated (0),\n+      name_allocated (0),\n+      hook_in (0),\n+      allow_unknown (0),\n+      abbrev_flag (0),\n+      type (not_set_cmd),\n+      var_type (var_boolean),\n+      doc (doc_)\n   {\n-    cmd_list_element (const char *name_, enum command_class theclass_,\n-\t\t      const char *doc_)\n-      : name (name_),\n-\ttheclass (theclass_),\n-\tcmd_deprecated (0),\n-\tdeprecated_warn_user (0),\n-\tmalloced_replacement (0),\n-\tdoc_allocated (0),\n-\tname_allocated (0),\n-\thook_in (0),\n-\tallow_unknown (0),\n-\tabbrev_flag (0),\n-\ttype (not_set_cmd),\n-\tvar_type (var_boolean),\n-\tdoc (doc_)\n-    {\n-      memset (&function, 0, sizeof (function));\n-    }\n+    memset (&function, 0, sizeof (function));\n+  }\n \n-    ~cmd_list_element ()\n-    {\n-      if (doc && doc_allocated)\n-\txfree ((char *) doc);\n-      if (name_allocated)\n-\txfree ((char *) name);\n-    }\n+  ~cmd_list_element ()\n+  {\n+    if (doc && doc_allocated)\n+      xfree ((char *) doc);\n+    if (name_allocated)\n+      xfree ((char *) name);\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (cmd_list_element);\n+\n+\n+  /* Points to next command in this list.  */\n+  struct cmd_list_element *next = nullptr;\n+\n+  /* Name of this command.  */\n+  const char *name;\n \n-    DISABLE_COPY_AND_ASSIGN (cmd_list_element);\n+  /* Command class; class values are chosen by application program.  */\n+  enum command_class theclass;\n \n+  /* When 1 indicated that this command is deprecated.  It may be\n+     removed from gdb's command set in the future.  */\n \n-    /* Points to next command in this list.  */\n-    struct cmd_list_element *next = nullptr;\n+  unsigned int cmd_deprecated : 1;\n \n-    /* Name of this command.  */\n-    const char *name;\n+  /* The user needs to be warned that this is a deprecated command.\n+     The user should only be warned the first time a command is\n+     used.  */\n \n-    /* Command class; class values are chosen by application program.  */\n-    enum command_class theclass;\n+  unsigned int deprecated_warn_user : 1;\n \n-    /* When 1 indicated that this command is deprecated.  It may be\n-       removed from gdb's command set in the future.  */\n+  /* When functions are deprecated at compile time (this is the way\n+     it should, in general, be done) the memory containing the\n+     replacement string is statically allocated.  In some cases it\n+     makes sense to deprecate commands at runtime (the testsuite is\n+     one example).  In this case the memory for replacement is\n+     malloc'ed.  When a command is undeprecated or re-deprecated at\n+     runtime we don't want to risk calling free on statically\n+     allocated memory, so we check this flag.  */\n \n-    unsigned int cmd_deprecated : 1;\n+  unsigned int malloced_replacement : 1;\n \n-    /* The user needs to be warned that this is a deprecated command.\n-       The user should only be warned the first time a command is\n-       used.  */\n-\t\n-    unsigned int deprecated_warn_user : 1;\n-\n-    /* When functions are deprecated at compile time (this is the way\n-       it should, in general, be done) the memory containing the\n-       replacement string is statically allocated.  In some cases it\n-       makes sense to deprecate commands at runtime (the testsuite is\n-       one example).  In this case the memory for replacement is\n-       malloc'ed.  When a command is undeprecated or re-deprecated at\n-       runtime we don't want to risk calling free on statically\n-       allocated memory, so we check this flag.  */\n+  /* Set if the doc field should be xfree'd.  */\n \n-    unsigned int malloced_replacement : 1;\n+  unsigned int doc_allocated : 1;\n \n-    /* Set if the doc field should be xfree'd.  */\n-\n-    unsigned int doc_allocated : 1;\n+  /* Set if the name field should be xfree'd.  */\n \n-    /* Set if the name field should be xfree'd.  */\n-\n-    unsigned int name_allocated : 1;\n-\n-    /* Flag that specifies if this command is already running its hook.  */\n-    /* Prevents the possibility of hook recursion.  */\n-    unsigned int hook_in : 1;\n-\n-    /* For prefix commands only:\n-       nonzero means do not get an error if subcommand is not\n-       recognized; call the prefix's own function in that case.  */\n-    unsigned int allow_unknown : 1;\n-\n-    /* Nonzero says this is an abbreviation, and should not\n-       be mentioned in lists of commands.\n-       This allows \"br<tab>\" to complete to \"break\", which it\n-       otherwise wouldn't.  */\n-    unsigned int abbrev_flag : 1;\n-\n-    /* Type of \"set\" or \"show\" command (or SET_NOT_SET if not \"set\"\n-       or \"show\").  */\n-    ENUM_BITFIELD (cmd_types) type : 2;\n-\n-    /* What kind of variable is *VAR?  */\n-    ENUM_BITFIELD (var_types) var_type : 4;\n-\n-    /* Function definition of this command.  NULL for command class\n-       names and for help topics that are not really commands.  NOTE:\n-       cagney/2002-02-02: This function signature is evolving.  For\n-       the moment suggest sticking with either set_cmd_cfunc() or\n-       set_cmd_sfunc().  */\n-    void (*func) (struct cmd_list_element *c, const char *args, int from_tty)\n-      = nullptr;\n-    /* The command's real callback.  At present func() bounces through\n-       to one of the below.  */\n-    union\n-      {\n-\t/* If type is not_set_cmd, call it like this: */\n-\tcmd_const_cfunc_ftype *const_cfunc;\n-\t/* If type is set_cmd or show_cmd, first set the variables,\n-\t   and then call this: */\n-\tcmd_const_sfunc_ftype *sfunc;\n-      }\n-    function;\n-\n-    /* Local state (context) for this command.  This can be anything.  */\n-    void *context = nullptr;\n-\n-    /* Documentation of this command (or help topic).\n-       First line is brief documentation; remaining lines form, with it,\n-       the full documentation.  First line should end with a period.\n-       Entire string should also end with a period, not a newline.  */\n-    const char *doc;\n-\n-    /* For set/show commands.  A method for printing the output to the\n-       specified stream.  */\n-    show_value_ftype *show_value_func = nullptr;\n-\n-    /* If this command is deprecated, this is the replacement name.  */\n-    const char *replacement = nullptr;\n-\n-    /* If this command represents a show command, then this function\n-       is called before the variable's value is examined.  */\n-    void (*pre_show_hook) (struct cmd_list_element *c) = nullptr;\n-\n-    /* Hook for another command to be executed before this command.  */\n-    struct cmd_list_element *hook_pre = nullptr;\n-\n-    /* Hook for another command to be executed after this command.  */\n-    struct cmd_list_element *hook_post = nullptr;\n-\n-    /* Default arguments to automatically prepend to the user\n-       provided arguments when running this command or alias.  */\n-    std::string default_args;\n-\n-    /* Nonzero identifies a prefix command.  For them, the address\n-       of the variable containing the list of subcommands.  */\n-    struct cmd_list_element **prefixlist = nullptr;\n-\n-    /* For prefix commands only:\n-       String containing prefix commands to get here: this one\n-       plus any others needed to get to it.  Should end in a space.\n-       It is used before the word \"command\" in describing the\n-       commands reached through this prefix.  */\n-    const char *prefixname = nullptr;\n-\n-    /* The prefix command of this command.  */\n-    struct cmd_list_element *prefix = nullptr;\n-\n-    /* Completion routine for this command.  */\n-    completer_ftype *completer = symbol_completer;\n-\n-    /* Handle the word break characters for this completer.  Usually\n-       this function need not be defined, but for some types of\n-       completers (e.g., Python completers declared as methods inside\n-       a class) the word break chars may need to be redefined\n-       depending on the completer type (e.g., for filename\n-       completers).  */\n-    completer_handle_brkchars_ftype *completer_handle_brkchars = nullptr;\n-\n-    /* Destruction routine for this command.  If non-NULL, this is\n-       called when this command instance is destroyed.  This may be\n-       used to finalize the CONTEXT field, if needed.  */\n-    void (*destroyer) (struct cmd_list_element *self, void *context) = nullptr;\n-\n-    /* Pointer to variable affected by \"set\" and \"show\".  Doesn't\n-       matter if type is not_set.  */\n-    void *var = nullptr;\n-\n-    /* Pointer to NULL terminated list of enumerated values (like\n-       argv).  */\n-    const char *const *enums = nullptr;\n-\n-    /* Pointer to command strings of user-defined commands */\n-    counted_command_line user_commands;\n-\n-    /* Pointer to command that is hooked by this one, (by hook_pre)\n-       so the hook can be removed when this one is deleted.  */\n-    struct cmd_list_element *hookee_pre = nullptr;\n-\n-    /* Pointer to command that is hooked by this one, (by hook_post)\n-       so the hook can be removed when this one is deleted.  */\n-    struct cmd_list_element *hookee_post = nullptr;\n-\n-    /* Pointer to command that is aliased by this one, so the\n-       aliased command can be located in case it has been hooked.  */\n-    struct cmd_list_element *cmd_pointer = nullptr;\n-\n-    /* Start of a linked list of all aliases of this command.  */\n-    struct cmd_list_element *aliases = nullptr;\n-\n-    /* Link pointer for aliases on an alias list.  */\n-    struct cmd_list_element *alias_chain = nullptr;\n-\n-    /* If non-null, the pointer to a field in 'struct\n-       cli_suppress_notification', which will be set to true in cmd_func\n-       when this command is being executed.  It will be set back to false\n-       when the command has been executed.  */\n-    int *suppress_notification = nullptr;\n-  };\n+  unsigned int name_allocated : 1;\n+\n+  /* Flag that specifies if this command is already running its hook.  */\n+  /* Prevents the possibility of hook recursion.  */\n+  unsigned int hook_in : 1;\n+\n+  /* For prefix commands only:\n+     nonzero means do not get an error if subcommand is not\n+     recognized; call the prefix's own function in that case.  */\n+  unsigned int allow_unknown : 1;\n+\n+  /* Nonzero says this is an abbreviation, and should not\n+     be mentioned in lists of commands.\n+     This allows \"br<tab>\" to complete to \"break\", which it\n+     otherwise wouldn't.  */\n+  unsigned int abbrev_flag : 1;\n+\n+  /* Type of \"set\" or \"show\" command (or SET_NOT_SET if not \"set\"\n+     or \"show\").  */\n+  ENUM_BITFIELD (cmd_types) type : 2;\n+\n+  /* What kind of variable is *VAR?  */\n+  ENUM_BITFIELD (var_types) var_type : 4;\n+\n+  /* Function definition of this command.  NULL for command class\n+     names and for help topics that are not really commands.  NOTE:\n+     cagney/2002-02-02: This function signature is evolving.  For\n+     the moment suggest sticking with either set_cmd_cfunc() or\n+     set_cmd_sfunc().  */\n+  void (*func) (struct cmd_list_element *c, const char *args, int from_tty)\n+    = nullptr;\n+  /* The command's real callback.  At present func() bounces through\n+     to one of the below.  */\n+  union\n+    {\n+      /* If type is not_set_cmd, call it like this: */\n+      cmd_const_cfunc_ftype *const_cfunc;\n+      /* If type is set_cmd or show_cmd, first set the variables,\n+\t and then call this: */\n+      cmd_const_sfunc_ftype *sfunc;\n+    }\n+  function;\n+\n+  /* Local state (context) for this command.  This can be anything.  */\n+  void *context = nullptr;\n+\n+  /* Documentation of this command (or help topic).\n+     First line is brief documentation; remaining lines form, with it,\n+     the full documentation.  First line should end with a period.\n+     Entire string should also end with a period, not a newline.  */\n+  const char *doc;\n+\n+  /* For set/show commands.  A method for printing the output to the\n+     specified stream.  */\n+  show_value_ftype *show_value_func = nullptr;\n+\n+  /* If this command is deprecated, this is the replacement name.  */\n+  const char *replacement = nullptr;\n+\n+  /* If this command represents a show command, then this function\n+     is called before the variable's value is examined.  */\n+  void (*pre_show_hook) (struct cmd_list_element *c) = nullptr;\n+\n+  /* Hook for another command to be executed before this command.  */\n+  struct cmd_list_element *hook_pre = nullptr;\n+\n+  /* Hook for another command to be executed after this command.  */\n+  struct cmd_list_element *hook_post = nullptr;\n+\n+  /* Default arguments to automatically prepend to the user\n+     provided arguments when running this command or alias.  */\n+  std::string default_args;\n+\n+  /* Nonzero identifies a prefix command.  For them, the address\n+     of the variable containing the list of subcommands.  */\n+  struct cmd_list_element **prefixlist = nullptr;\n+\n+  /* For prefix commands only:\n+     String containing prefix commands to get here: this one\n+     plus any others needed to get to it.  Should end in a space.\n+     It is used before the word \"command\" in describing the\n+     commands reached through this prefix.  */\n+  const char *prefixname = nullptr;\n+\n+  /* The prefix command of this command.  */\n+  struct cmd_list_element *prefix = nullptr;\n+\n+  /* Completion routine for this command.  */\n+  completer_ftype *completer = symbol_completer;\n+\n+  /* Handle the word break characters for this completer.  Usually\n+     this function need not be defined, but for some types of\n+     completers (e.g., Python completers declared as methods inside\n+     a class) the word break chars may need to be redefined\n+     depending on the completer type (e.g., for filename\n+     completers).  */\n+  completer_handle_brkchars_ftype *completer_handle_brkchars = nullptr;\n+\n+  /* Destruction routine for this command.  If non-NULL, this is\n+     called when this command instance is destroyed.  This may be\n+     used to finalize the CONTEXT field, if needed.  */\n+  void (*destroyer) (struct cmd_list_element *self, void *context) = nullptr;\n+\n+  /* Pointer to variable affected by \"set\" and \"show\".  Doesn't\n+     matter if type is not_set.  */\n+  void *var = nullptr;\n+\n+  /* Pointer to NULL terminated list of enumerated values (like\n+     argv).  */\n+  const char *const *enums = nullptr;\n+\n+  /* Pointer to command strings of user-defined commands */\n+  counted_command_line user_commands;\n+\n+  /* Pointer to command that is hooked by this one, (by hook_pre)\n+     so the hook can be removed when this one is deleted.  */\n+  struct cmd_list_element *hookee_pre = nullptr;\n+\n+  /* Pointer to command that is hooked by this one, (by hook_post)\n+     so the hook can be removed when this one is deleted.  */\n+  struct cmd_list_element *hookee_post = nullptr;\n+\n+  /* Pointer to command that is aliased by this one, so the\n+     aliased command can be located in case it has been hooked.  */\n+  struct cmd_list_element *cmd_pointer = nullptr;\n+\n+  /* Start of a linked list of all aliases of this command.  */\n+  struct cmd_list_element *aliases = nullptr;\n+\n+  /* Link pointer for aliases on an alias list.  */\n+  struct cmd_list_element *alias_chain = nullptr;\n+\n+  /* If non-null, the pointer to a field in 'struct\n+     cli_suppress_notification', which will be set to true in cmd_func\n+     when this command is being executed.  It will be set back to false\n+     when the command has been executed.  */\n+  int *suppress_notification = nullptr;\n+};\n \n /* Functions that implement commands about CLI commands.  */\n "
    }
  ]
}