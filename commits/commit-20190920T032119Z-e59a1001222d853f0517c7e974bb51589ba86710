{
  "sha": "e59a1001222d853f0517c7e974bb51589ba86710",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU5YTEwMDEyMjJkODUzZjA1MTdjN2U5NzRiYjUxNTg5YmE4NjcxMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-20T02:51:50Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-20T03:21:19Z"
    },
    "message": "PowerPC64, error on unsupported dynamic relocation\n\nThis patch corrects the set of dynamic relocations recognised by gold\nas supported by glibc, and teaches ld.bfd to report an error similar\nto the gold error.  Note that ld --noinhibit-exec can be used to\nproduce an output, supporting older ld with newer glibc if the set of\nsupported glibc dynamic relocations changes.\n\nbfd/\n\t* elf64-ppc.c (ppc64_glibc_dynamic_reloc): New function.\n\t(ppc64_elf_relocate_section): Error if emitting unsupported\n\tdynamic relocations.\ngold/\n\t* powerpc.cc (Target_powerpc::Scan::check_non_pic): Move REL24\n\tto 32-bit supported.",
    "tree": {
      "sha": "d31bde00fd91d48b7367a4ed9eb83984cdcd97bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d31bde00fd91d48b7367a4ed9eb83984cdcd97bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e59a1001222d853f0517c7e974bb51589ba86710",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e59a1001222d853f0517c7e974bb51589ba86710",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e59a1001222d853f0517c7e974bb51589ba86710",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e59a1001222d853f0517c7e974bb51589ba86710/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e4153ae630fcc779ba414fdcea960394cb479e04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4153ae630fcc779ba414fdcea960394cb479e04",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e4153ae630fcc779ba414fdcea960394cb479e04"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 86,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6fa38eef4561b59e9e3b96d4fcc834f64564a403",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e59a1001222d853f0517c7e974bb51589ba86710/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e59a1001222d853f0517c7e974bb51589ba86710/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e59a1001222d853f0517c7e974bb51589ba86710",
      "patch": "@@ -1,3 +1,9 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (ppc64_glibc_dynamic_reloc): New function.\n+\t(ppc64_elf_relocate_section): Warn if emitting unsupported dynamic\n+\trelocations.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* bfd-in.h (bfd_get_section_name, bfd_get_section_vma),"
    },
    {
      "sha": "ed8077586bb383beabd32cd85d49671d08925902",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e59a1001222d853f0517c7e974bb51589ba86710/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e59a1001222d853f0517c7e974bb51589ba86710/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=e59a1001222d853f0517c7e974bb51589ba86710",
      "patch": "@@ -14148,6 +14148,66 @@ ppc64_elf_action_discarded (asection *sec)\n   return _bfd_elf_default_action_discarded (sec);\n }\n \n+/* These are the dynamic relocations supported by glibc.  */\n+\n+static bfd_boolean\n+ppc64_glibc_dynamic_reloc (enum elf_ppc64_reloc_type r_type)\n+{\n+  switch (r_type)\n+    {\n+    case R_PPC64_RELATIVE:\n+    case R_PPC64_NONE:\n+    case R_PPC64_ADDR64:\n+    case R_PPC64_GLOB_DAT:\n+    case R_PPC64_IRELATIVE:\n+    case R_PPC64_JMP_IREL:\n+    case R_PPC64_JMP_SLOT:\n+    case R_PPC64_DTPMOD64:\n+    case R_PPC64_DTPREL64:\n+    case R_PPC64_TPREL64:\n+    case R_PPC64_TPREL16_LO_DS:\n+    case R_PPC64_TPREL16_DS:\n+    case R_PPC64_TPREL16:\n+    case R_PPC64_TPREL16_LO:\n+    case R_PPC64_TPREL16_HI:\n+    case R_PPC64_TPREL16_HIGH:\n+    case R_PPC64_TPREL16_HA:\n+    case R_PPC64_TPREL16_HIGHA:\n+    case R_PPC64_TPREL16_HIGHER:\n+    case R_PPC64_TPREL16_HIGHEST:\n+    case R_PPC64_TPREL16_HIGHERA:\n+    case R_PPC64_TPREL16_HIGHESTA:\n+    case R_PPC64_ADDR16_LO_DS:\n+    case R_PPC64_ADDR16_LO:\n+    case R_PPC64_ADDR16_HI:\n+    case R_PPC64_ADDR16_HIGH:\n+    case R_PPC64_ADDR16_HA:\n+    case R_PPC64_ADDR16_HIGHA:\n+    case R_PPC64_REL30:\n+    case R_PPC64_COPY:\n+    case R_PPC64_UADDR64:\n+    case R_PPC64_UADDR32:\n+    case R_PPC64_ADDR32:\n+    case R_PPC64_ADDR24:\n+    case R_PPC64_ADDR16:\n+    case R_PPC64_UADDR16:\n+    case R_PPC64_ADDR16_DS:\n+    case R_PPC64_ADDR16_HIGHER:\n+    case R_PPC64_ADDR16_HIGHEST:\n+    case R_PPC64_ADDR16_HIGHERA:\n+    case R_PPC64_ADDR16_HIGHESTA:\n+    case R_PPC64_ADDR14:\n+    case R_PPC64_ADDR14_BRTAKEN:\n+    case R_PPC64_ADDR14_BRNTAKEN:\n+    case R_PPC64_REL32:\n+    case R_PPC64_REL64:\n+      return TRUE;\n+\n+    default:\n+      return FALSE;\n+    }\n+}\n+\n /* The RELOCATE_SECTION function is called by the ELF backend linker\n    to handle the relocations for a section.\n \n@@ -14201,6 +14261,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n   bfd_boolean is_opd;\n   /* Assume 'at' branch hints.  */\n   bfd_boolean is_isa_v2 = TRUE;\n+  bfd_boolean warned_dynamic = FALSE;\n   bfd_vma d_offset = (bfd_big_endian (input_bfd) ? 2 : 0);\n \n   /* Initialize howto table if needed.  */\n@@ -16166,6 +16227,19 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      loc += sreloc->reloc_count++ * sizeof (Elf64_External_Rela);\n \t      bfd_elf64_swap_reloca_out (output_bfd, &outrel, loc);\n \n+\t      if (!warned_dynamic\n+\t\t  && !ppc64_glibc_dynamic_reloc (ELF64_R_TYPE (outrel.r_info)))\n+\t\t{\n+\t\t  info->callbacks->einfo\n+\t\t    /* xgettext:c-format */\n+\t\t    (_(\"%X%P: %pB: %s against %pT \"\n+\t\t       \"is not supported by glibc as a dynamic relocation\\n\"),\n+\t\t     input_bfd,\n+\t\t     ppc64_elf_howto_table[ELF64_R_TYPE (outrel.r_info)]->name,\n+\t\t     sym_name);\n+\t\t  warned_dynamic = TRUE;\n+\t\t}\n+\n \t      /* If this reloc is against an external symbol, it will\n \t\t be computed at runtime, so there's no need to do\n \t\t anything now.  However, for the sake of prelink ensure"
    },
    {
      "sha": "8ec7014b2a984975f5c18d6030abc57a23549c97",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e59a1001222d853f0517c7e974bb51589ba86710/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e59a1001222d853f0517c7e974bb51589ba86710/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=e59a1001222d853f0517c7e974bb51589ba86710",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (Target_powerpc::Scan::check_non_pic): Move REL24\n+\tto 32-bit supported.\n+\n 2019-09-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* testsuite/Makefile.in: Re-generate."
    },
    {
      "sha": "ad35095ccd585412619ff62b72d05c318c1c639c",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e59a1001222d853f0517c7e974bb51589ba86710/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e59a1001222d853f0517c7e974bb51589ba86710/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=e59a1001222d853f0517c7e974bb51589ba86710",
      "patch": "@@ -7355,7 +7355,6 @@ Target_powerpc<size, big_endian>::Scan::check_non_pic(Relobj* object,\n     case elfcpp::R_POWERPC_ADDR14_BRTAKEN:\n     case elfcpp::R_POWERPC_ADDR14_BRNTAKEN:\n     case elfcpp::R_POWERPC_REL32:\n-    case elfcpp::R_POWERPC_REL24:\n     case elfcpp::R_POWERPC_TPREL16:\n     case elfcpp::R_POWERPC_TPREL16_LO:\n     case elfcpp::R_POWERPC_TPREL16_HI:\n@@ -7404,6 +7403,7 @@ Target_powerpc<size, big_endian>::Scan::check_non_pic(Relobj* object,\n \t{\n \t  // These are the relocation types supported only on 32-bit.\n \t  // ??? glibc ld.so doesn't need to support these.\n+\tcase elfcpp::R_POWERPC_REL24:\n \tcase elfcpp::R_POWERPC_DTPREL16:\n \tcase elfcpp::R_POWERPC_DTPREL16_LO:\n \tcase elfcpp::R_POWERPC_DTPREL16_HI:"
    }
  ]
}