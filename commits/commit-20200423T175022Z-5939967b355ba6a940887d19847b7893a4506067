{
  "sha": "5939967b355ba6a940887d19847b7893a4506067",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTkzOTk2N2IzNTViYTZhOTQwODg3ZDE5ODQ3Yjc4OTNhNDUwNjA2Nw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-04-14T20:26:22Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-04-23T17:50:22Z"
    },
    "message": "Fix inline frame unwinding breakage\n\nThere has been some breakage for aarch64-linux, arm-linux and s390-linux in\nterms of inline frame unwinding. There may be other targets, but these are\nthe ones i'm aware of.\n\nThe following testcases started to show numerous failures and trigger internal\nerrors in GDB after commit 1009d92fc621bc4d017029b90a5bfab16e17fde5,\n\"Find tailcall frames before inline frames\".\n\ngdb.opt/inline-break.exp\ngdb.opt/inline-cmds.exp\ngdb.python/py-frame-inline.exp\ngdb.reverse/insn-reverse.exp\n\nThe internal errors were of this kind:\n\nbinutils-gdb/gdb/frame.c:579: internal-error: frame_id get_frame_id(frame_info*): Assertion `fi->level == 0' failed.\n\nAfter a lengthy investigation to try and find the cause of these assertions,\nit seems we're dealing with some fragile/poorly documented code to handle inline\nframes and we are attempting to unwind from this fragile section of code.\n\nBefore commit 1009d92fc621bc4d017029b90a5bfab16e17fde5, the tailcall sniffer\nwas invoked from dwarf2_frame_prev_register. By the time we invoke the\ndwarf2_frame_prev_register function, we've probably already calculated the\nframe id (via compute_frame_id).\n\nAfter said commit, the call to dwarf2_tailcall_sniffer_first was moved to\ndwarf2_frame_cache. This is very early in a frame creation process, and\nwe're still calculating the frame ID (so compute_frame_id is in the call\nstack).\n\nThis would be fine for regular frames, but the above testcases all deal\nwith some inline frames.\n\nThe particularity of inline frames is that their frame ID's depend on\nthe previous frame's ID, and the previous frame's ID relies in the inline\nframe's registers. So it is a bit of a messy situation.\n\nWe have comments in various parts of the code warning about some of these\nparticularities.\n\nIn the case of dwarf2_tailcall_sniffer_first, we attempt to unwind the PC,\nwhich goes through various functions until we eventually invoke\nframe_unwind_got_register. This function will eventually attempt to create\na lazy value for a particular register, and this lazy value will require\na valid frame ID.  Since the inline frame doesn't have a valid frame ID\nyet (remember we're still calculating the previous frame's ID so we can tell\nwhat the inline frame ID is) we will call compute_frame_id for the inline\nframe (level 0).\n\nWe'll eventually hit the assertion above, inside get_frame_id:\n\n--\n      /* If we haven't computed the frame id yet, then it must be that\n         this is the current frame.  Compute it now, and stash the\n         result.  The IDs of other frames are computed as soon as\n         they're created, in order to detect cycles.  See\n         get_prev_frame_if_no_cycle.  */\n      gdb_assert (fi->level == 0);\n--\n\nIt seems to me we shouldn't have reached this assertion without having the\ninline frame ID already calculated. In fact, it seems we even start recursing\na bit when we invoke get_prev_frame_always within inline_frame_this_id. But\na check makes us quit the recursion and proceed to compute the id.\n\nHere's the call stack for context:\n\n #0  get_prev_frame_always_1 (this_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:2109\n RECURSION - #1  0x0000aaaaaae1d098 in get_prev_frame_always (this_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:2124\n #2  0x0000aaaaaae95768 in inline_frame_this_id (this_frame=0xaaaaab85a670, this_cache=0xaaaaab85a688, this_id=0xaaaaab85a6d0)\n     at ../../../repos/binutils-gdb/gdb/inline-frame.c:165\n #3  0x0000aaaaaae1916c in compute_frame_id (fi=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:550\n #4  0x0000aaaaaae19318 in get_frame_id (fi=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:582\n #5  0x0000aaaaaae13480 in value_of_register_lazy (frame=0xaaaaab85a730, regnum=30) at ../../../repos/binutils-gdb/gdb/findvar.c:296\n #6  0x0000aaaaaae16c00 in frame_unwind_got_register (frame=0xaaaaab85a730, regnum=30, new_regnum=30) at ../../../repos/binutils-gdb/gdb/frame-unwind.c:268\n #7  0x0000aaaaaad52604 in dwarf2_frame_prev_register (this_frame=0xaaaaab85a730, this_cache=0xaaaaab85a748, regnum=30)\n     at ../../../repos/binutils-gdb/gdb/dwarf2/frame.c:1296\n #8  0x0000aaaaaae1ae68 in frame_unwind_register_value (next_frame=0xaaaaab85a730, regnum=30) at ../../../repos/binutils-gdb/gdb/frame.c:1229\n #9  0x0000aaaaaae1b304 in frame_unwind_register_unsigned (next_frame=0xaaaaab85a730, regnum=30) at ../../../repos/binutils-gdb/gdb/frame.c:1320\n #10 0x0000aaaaaab76574 in aarch64_dwarf2_prev_register (this_frame=0xaaaaab85a730, this_cache=0xaaaaab85a748, regnum=32)\n     at ../../../repos/binutils-gdb/gdb/aarch64-tdep.c:1114\n #11 0x0000aaaaaad52724 in dwarf2_frame_prev_register (this_frame=0xaaaaab85a730, this_cache=0xaaaaab85a748, regnum=32)\n     at ../../../repos/binutils-gdb/gdb/dwarf2/frame.c:1316\n #12 0x0000aaaaaae1ae68 in frame_unwind_register_value (next_frame=0xaaaaab85a730, regnum=32) at ../../../repos/binutils-gdb/gdb/frame.c:1229\n #13 0x0000aaaaaae1b304 in frame_unwind_register_unsigned (next_frame=0xaaaaab85a730, regnum=32) at ../../../repos/binutils-gdb/gdb/frame.c:1320\n #14 0x0000aaaaaae16a84 in default_unwind_pc (gdbarch=0xaaaaab81edc0, next_frame=0xaaaaab85a730) at ../../../repos/binutils-gdb/gdb/frame-unwind.c:223\n #15 0x0000aaaaaae32124 in gdbarch_unwind_pc (gdbarch=0xaaaaab81edc0, next_frame=0xaaaaab85a730) at ../../../repos/binutils-gdb/gdb/gdbarch.c:3074\n #16 0x0000aaaaaad4f15c in dwarf2_tailcall_sniffer_first (this_frame=0xaaaaab85a730, tailcall_cachep=0xaaaaab85a830, entry_cfa_sp_offsetp=0x0)\n     at ../../../repos/binutils-gdb/gdb/dwarf2/frame-tailcall.c:388\n #17 0x0000aaaaaad520c0 in dwarf2_frame_cache (this_frame=0xaaaaab85a730, this_cache=0xaaaaab85a748) at ../../../repos/binutils-gdb/gdb/dwarf2/frame.c:1190\n #18 0x0000aaaaaad52204 in dwarf2_frame_this_id (this_frame=0xaaaaab85a730, this_cache=0xaaaaab85a748, this_id=0xaaaaab85a790)\n     at ../../../repos/binutils-gdb/gdb/dwarf2/frame.c:1218\n #19 0x0000aaaaaae1916c in compute_frame_id (fi=0xaaaaab85a730) at ../../../repos/binutils-gdb/gdb/frame.c:550\n #20 0x0000aaaaaae1c958 in get_prev_frame_if_no_cycle (this_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:1927\n #21 0x0000aaaaaae1cc44 in get_prev_frame_always_1 (this_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:2006\n FIRST CALL - #22 0x0000aaaaaae1d098 in get_prev_frame_always (this_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:2124\n #23 0x0000aaaaaae18f68 in skip_artificial_frames (frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:495\n #24 0x0000aaaaaae193e8 in get_stack_frame_id (next_frame=0xaaaaab85a670) at ../../../repos/binutils-gdb/gdb/frame.c:596\n #25 0x0000aaaaaae87a54 in process_event_stop_test (ecs=0xffffffffefc8) at ../../../repos/binutils-gdb/gdb/infrun.c:6857\n #26 0x0000aaaaaae86bdc in handle_signal_stop (ecs=0xffffffffefc8) at ../../../repos/binutils-gdb/gdb/infrun.c:6381\n #27 0x0000aaaaaae84fd0 in handle_inferior_event (ecs=0xffffffffefc8) at ../../../repos/binutils-gdb/gdb/infrun.c:5578\n #28 0x0000aaaaaae81588 in fetch_inferior_event (client_data=0x0) at ../../../repos/binutils-gdb/gdb/infrun.c:4020\n #29 0x0000aaaaaae5f7fc in inferior_event_handler (event_type=INF_REG_EVENT, client_data=0x0) at ../../../repos/binutils-gdb/gdb/inf-loop.c:43\n #30 0x0000aaaaaae8d768 in infrun_async_inferior_event_handler (data=0x0) at ../../../repos/binutils-gdb/gdb/infrun.c:9377\n #31 0x0000aaaaaabff970 in check_async_event_handlers () at ../../../repos/binutils-gdb/gdb/async-event.c:291\n #32 0x0000aaaaab27cbec in gdb_do_one_event () at ../../../repos/binutils-gdb/gdbsupport/event-loop.cc:194\n #33 0x0000aaaaaaef1894 in start_event_loop () at ../../../repos/binutils-gdb/gdb/main.c:356\n #34 0x0000aaaaaaef1a04 in captured_command_loop () at ../../../repos/binutils-gdb/gdb/main.c:416\n #35 0x0000aaaaaaef3338 in captured_main (data=0xfffffffff1f0) at ../../../repos/binutils-gdb/gdb/main.c:1254\n #36 0x0000aaaaaaef33a0 in gdb_main (args=0xfffffffff1f0) at ../../../repos/binutils-gdb/gdb/main.c:1269\n #37 0x0000aaaaaab6e0dc in main (argc=6, argv=0xfffffffff348) at ../../../repos/binutils-gdb/gdb/gdb.c:32\n\nThe following patch addresses this by using a function that unwinds the PC\nfrom the next (inline) frame directly as opposed to creating a lazy value\nthat is bound to the next frame's ID (still not computed).\n\ngdb/ChangeLog:\n\n2020-04-23  Luis Machado  <luis.machado@linaro.org>\n\n\t* dwarf2/frame-tailcall.c (dwarf2_tailcall_sniffer_first): Use\n\tget_frame_register instead of gdbarch_unwind_pc.",
    "tree": {
      "sha": "30849b46753ede9d7959259c6f539b4eb6b3717e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30849b46753ede9d7959259c6f539b4eb6b3717e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5939967b355ba6a940887d19847b7893a4506067",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5939967b355ba6a940887d19847b7893a4506067",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5939967b355ba6a940887d19847b7893a4506067",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5939967b355ba6a940887d19847b7893a4506067/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "70bc38f51381698804566504e25d197e8e731d2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70bc38f51381698804566504e25d197e8e731d2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/70bc38f51381698804566504e25d197e8e731d2d"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 8,
    "deletions": 1
  },
  "files": [
    {
      "sha": "145328dda1c553e4b36ef2f244b5599876910e57",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5939967b355ba6a940887d19847b7893a4506067/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5939967b355ba6a940887d19847b7893a4506067/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5939967b355ba6a940887d19847b7893a4506067",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-23  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* dwarf2/frame-tailcall.c (dwarf2_tailcall_sniffer_first): Use\n+\tget_frame_register instead of gdbarch_unwind_pc.\n+\n 2020-04-23  Tom de Vries  <tdevries@suse.de>\n \n \t* symtab.c (lookup_global_symbol): Prefer def over decl."
    },
    {
      "sha": "01bb134a5c028fac1ccdd187e7f9129a72c7f10e",
      "filename": "gdb/dwarf2/frame-tailcall.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5939967b355ba6a940887d19847b7893a4506067/gdb/dwarf2/frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5939967b355ba6a940887d19847b7893a4506067/gdb/dwarf2/frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame-tailcall.c?ref=5939967b355ba6a940887d19847b7893a4506067",
      "patch": "@@ -385,7 +385,9 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n       prev_gdbarch = frame_unwind_arch (this_frame);\n \n       /* Simulate frame_unwind_pc without setting this_frame->prev_pc.p.  */\n-      prev_pc = gdbarch_unwind_pc (prev_gdbarch, this_frame);\n+      get_frame_register (this_frame, gdbarch_pc_regnum (prev_gdbarch),\n+\t\t\t  (gdb_byte *) &prev_pc);\n+      prev_pc = gdbarch_addr_bits_remove (prev_gdbarch, prev_pc);\n \n       /* call_site_find_chain can throw an exception.  */\n       chain = call_site_find_chain (prev_gdbarch, prev_pc, this_pc);"
    }
  ]
}