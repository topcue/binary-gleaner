{
  "sha": "8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGEzZGY1YWNhZTdhZDA4ZjY5MWI0NDljN2U2ZjhlMzhmYjFiOGNiMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-06-25T14:01:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-06-25T14:07:21Z"
    },
    "message": "Add non-wrapping mode to ada_decode\n\nWhen ada_decode encounters a name that it cannot decode, it simply\nwraps it in <...>, which is used elsewhere in the Ada code to indicate\nthat a verbatim match should be done.\n\nA subequent patch needed the ability to suppress this wrapping, so\nthis patch adds a new mode to ada_decode.\n\n2021-06-25  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (ada_decode): Add wrap parameter.\n\t* ada-lang.h (ada_decode): Add wrap parameter.",
    "tree": {
      "sha": "c249b9197a9b8c7dfd719e3328bf91a5390c813f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c249b9197a9b8c7dfd719e3328bf91a5390c813f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "134df964367c19afa2eef81a0841fe1c181a9edc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/134df964367c19afa2eef81a0841fe1c181a9edc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/134df964367c19afa2eef81a0841fe1c181a9edc"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 16,
    "deletions": 6
  },
  "files": [
    {
      "sha": "9d56f1c7bc32febaaa6751df492b743f5dfa5c69",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (ada_decode): Add wrap parameter.\n+\t* ada-lang.h (ada_decode): Add wrap parameter.\n+\n 2021-06-25  Luis Machado  <luis.machado@linaro.org>\n \n \t* corelow.c (core_target::core_target) Update to read target"
    },
    {
      "sha": "49a7d5b36b6ca18a69aae2333b8b651b1854c4aa",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
      "patch": "@@ -976,12 +976,10 @@ ada_remove_po_subprogram_suffix (const char *encoded, int *len)\n     *len = *len - 1;\n }\n \n-/* If ENCODED follows the GNAT entity encoding conventions, then return\n-   the decoded form of ENCODED.  Otherwise, return \"<%s>\" where \"%s\" is\n-   replaced by ENCODED.  */\n+/* See ada-lang.h.  */\n \n std::string\n-ada_decode (const char *encoded)\n+ada_decode (const char *encoded, bool wrap)\n {\n   int i, j;\n   int len0;\n@@ -1216,12 +1214,14 @@ ada_decode (const char *encoded)\n   return decoded;\n \n Suppress:\n+  if (!wrap)\n+    return {};\n+\n   if (encoded[0] == '<')\n     decoded = encoded;\n   else\n     decoded = '<' + std::string(encoded) + '>';\n   return decoded;\n-\n }\n \n /* Table for keeping permanent unique copies of decoded names.  Once"
    },
    {
      "sha": "a89ed29119a24b9c18df066f1f4e3b1bf7b5abb1",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
      "patch": "@@ -216,7 +216,12 @@ extern struct type *ada_get_decoded_type (struct type *type);\n \n extern const char *ada_decode_symbol (const struct general_symbol_info *);\n \n-extern std::string ada_decode (const char*);\n+/* Decode the GNAT-encoded name NAME, returning the decoded name.  If\n+   the name does not appear to be GNAT-encoded, then the result\n+   depends on WRAP.  If WRAP is true (the default), then the result is\n+   simply wrapped in <...>.  If WRAP is false, then the empty string\n+   will be returned.  */\n+extern std::string ada_decode (const char *name, bool wrap = true);\n \n extern std::vector<struct block_symbol> ada_lookup_symbol_list\n      (const char *, const struct block *, domain_enum);"
    }
  ]
}