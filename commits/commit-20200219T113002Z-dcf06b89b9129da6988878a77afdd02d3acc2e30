{
  "sha": "dcf06b89b9129da6988878a77afdd02d3acc2e30",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGNmMDZiODliOTEyOWRhNjk4ODg3OGE3N2FmZGQwMmQzYWNjMmUzMA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-19T11:29:51Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-19T11:30:02Z"
    },
    "message": "plugin: Call dlclose before return in try_load_plugin\n\nSince plugin can be used only once in try_load_plugin, call dlclose\nbefore return.\n\n\tPR binutils/25355\n\t* plugin.c (plugin_list_entry): Remove handle.\n\t(try_load_plugin): Call dlclose before return.",
    "tree": {
      "sha": "5b118ce15ffc85f051d3497b3fc0f939ce168124",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5b118ce15ffc85f051d3497b3fc0f939ce168124"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dcf06b89b9129da6988878a77afdd02d3acc2e30",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcf06b89b9129da6988878a77afdd02d3acc2e30",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dcf06b89b9129da6988878a77afdd02d3acc2e30",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcf06b89b9129da6988878a77afdd02d3acc2e30/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "86cbc5dc163fb8f0927b82d5f0e3809a3820389b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86cbc5dc163fb8f0927b82d5f0e3809a3820389b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/86cbc5dc163fb8f0927b82d5f0e3809a3820389b"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 24,
    "deletions": 21
  },
  "files": [
    {
      "sha": "1ac662d6c28131c8adf05f4390de6a08dbebe052",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dcf06b89b9129da6988878a77afdd02d3acc2e30/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dcf06b89b9129da6988878a77afdd02d3acc2e30/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=dcf06b89b9129da6988878a77afdd02d3acc2e30",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25355\n+\t* plugin.c (plugin_list_entry): Remove handle.\n+\t(try_load_plugin): Call dlclose before return.\n+\n 2020-02-19  Alan Modra  <amodra@gmail.com>\n \n \t* libbfd-in.h (_bfd_constant_p): Define."
    },
    {
      "sha": "93d562b9fed31c692533ae9247ae18211327b065",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 18,
      "deletions": 21,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dcf06b89b9129da6988878a77afdd02d3acc2e30/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dcf06b89b9129da6988878a77afdd02d3acc2e30/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=dcf06b89b9129da6988878a77afdd02d3acc2e30",
      "patch": "@@ -126,7 +126,6 @@ message (int level ATTRIBUTE_UNUSED,\n struct plugin_list_entry\n {\n   /* These must be initialized for each IR object with LTO wrapper.  */\n-  void *handle;\n   ld_plugin_claim_file_handler claim_file;\n   ld_plugin_all_symbols_read_handler all_symbols_read;\n   ld_plugin_all_symbols_read_handler cleanup_handler;\n@@ -596,22 +595,18 @@ try_load_plugin (const char *pname,\n \t\t struct plugin_list_entry *plugin_list_iter,\n \t\t bfd *abfd, bfd_boolean build_list_p)\n {\n-  void *plugin_handle = NULL;\n+  void *plugin_handle;\n   struct ld_plugin_tv tv[12];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n+  int result = 0;\n \n   /* NB: Each object is independent.  Reuse the previous plugin from\n      the last run will lead to wrong result.  */\n   if (current_plugin)\n-    {\n-      if (current_plugin->handle)\n-\tdlclose (current_plugin->handle);\n-      memset (current_plugin, 0,\n-\t      offsetof (struct plugin_list_entry, next));\n-      current_plugin = NULL;\n-    }\n+    memset (current_plugin, 0,\n+\t    offsetof (struct plugin_list_entry, next));\n \n   if (plugin_list_iter)\n     pname = plugin_list_iter->plugin_name;\n@@ -628,12 +623,12 @@ try_load_plugin (const char *pname,\n       size_t length_plugin_name = strlen (pname) + 1;\n       char *plugin_name = bfd_malloc (length_plugin_name);\n       if (plugin_name == NULL)\n-\treturn 0;\n+\tgoto short_circuit;\n       plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);\n       if (plugin_list_iter == NULL)\n \t{\n \t  free (plugin_name);\n-\t  return 0;\n+\t  goto short_circuit;\n \t}\n       /* Make a copy of PNAME since PNAME from load_plugin () will be\n \t freed.  */\n@@ -644,13 +639,13 @@ try_load_plugin (const char *pname,\n       plugin_list = plugin_list_iter;\n     }\n \n-  plugin_list_iter->handle = plugin_handle;\n+  current_plugin = plugin_list_iter;\n   if (build_list_p)\n-    return 0;\n+    goto short_circuit;\n \n   onload = dlsym (plugin_handle, \"onload\");\n   if (!onload)\n-    return 0;\n+    goto short_circuit;\n \n   i = 0;\n   tv[i].tv_tag = LDPT_MESSAGE;\n@@ -703,28 +698,30 @@ try_load_plugin (const char *pname,\n   tv[i].tv_tag = LDPT_NULL;\n   tv[i].tv_u.tv_val = 0;\n \n-  current_plugin = plugin_list_iter;\n-\n   /* LTO plugin will call handler hooks to set up plugin handlers.  */\n   status = (*onload)(tv);\n \n   if (status != LDPS_OK)\n-    return 0;\n+    goto short_circuit;\n \n   if (current_plugin->lto_wrapper\n       && setup_lto_wrapper_env (current_plugin))\n-    return 0;\n+    goto short_circuit;\n \n   abfd->plugin_format = bfd_plugin_no;\n \n   if (!current_plugin->claim_file)\n-    return 0;\n+    goto short_circuit;\n \n   if (!try_claim (abfd))\n-    return 0;\n+    goto short_circuit;\n \n   abfd->plugin_format = bfd_plugin_yes;\n-  return 1;\n+  result = 1;\n+\n+short_circuit:\n+  dlclose (plugin_handle);\n+  return result;\n }\n \n /* There may be plugin libraries in lib/bfd-plugins.  */"
    }
  ]
}