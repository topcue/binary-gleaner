{
  "sha": "a2cd4f14750ae27ea5c250c98965eef842ee57db",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTJjZDRmMTQ3NTBhZTI3ZWE1YzI1MGM5ODk2NWVlZjg0MmVlNTdkYg==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-17T13:32:45Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-17T13:32:45Z"
    },
    "message": "(Ada) fix GDB crash printing packed array\n\nTrying to print a packed array sometimes leads to a crash (see\nattached testcase for an example of when this happens):\n\n  | (gdb) p bad\n  | [1]    65571 segmentation fault  gdb -q foo\n\nVariable \"bad\" is declared in the debug information as an array where\nthe array's type name has an XPnnn suffix:\n\n  | .uleb128 0xc    # (DIE (0x566) DW_TAG_typedef)\n  | .long   .LASF200        # DW_AT_name: \"pck__t___XP1\"\n  | [loc info attributes snipped]\n  | .long   0x550   # DW_AT_type\n  | .byte   0x1     # DW_AT_alignment\n\nThe signals to GDB that the debugging information follows a GNAT encoding\nused for packed arrays, and an in order to decode it, we need to find\nthe type whose name is the same minus the \"___XPnnn\" suffix: \"pck__t\".\n\nFor that, we make a call to ada-lang.c::standard_lookup, which is\na simple function which essentially does:\n\n  | /* Return the result of a standard (literal, C-like) lookup of NAME in\n  |    given DOMAIN, visible from lexical block BLOCK.  */\n  |\n  |   [...]\n  |   sym = lookup_symbol_in_language (name, block, domain, language_c, 0);\n\nUnfortunately for us, while the intent of this call was to perform\nan exact-match lookup, in our case, it returns ... type pck__t___XP1\ninstead! In other words, it finds itself back. The reason why it finds\nthis type is a confluence of two factors:\n\n  (1) Forcing the lookup into language_c currently does not affect\n      how symbol matching is done anymore, because we look at the symbol's\n      language to determine which kind of matching should be done;\n\n  (2) The lookup searches the local context (via block) first, beforei\n      doing a more general lookup. And looking at the debug info for\n      the main subprogram, we see that type \"pck__t\" is not declared\n      there, only in the debug info for pck.ads. In other words,\n      there is no way that we accidently find \"pck__t\" by random chance.\n\nI believe Pedro added a new function called ada_lookup_encoded_symbol\nfor that specific purpose, so I started by replacing the lookup\nby language above by this. Unfortunately, still no joy.\n\nThis was because, even though ada_lookup_encoded_symbol puts angle-\nbrackets around the search name to signal that we want a verbatim\nsearch, we end up losing that information in the function called\nto compare a symbol with the search name:\n\n  | static bool\n  | do_full_match (const char *symbol_search_name,\n  |                const lookup_name_info &lookup_name,\n  |                completion_match_result *comp_match_res)\n  | {\n  |   return full_match (symbol_search_name, ada_lookup_name (lookup_name));\n                                             ^^^^^^^^^^^^^^^\n                                                    |\n                                    <=> lookup_name.m_ada.m_encoded_name\n                                           (no angle brackets)\n\nThe way I fixed this was by introducing a new function called\ndo_exact_match, and then adjust ada_get_symbol_name_matcher to\nreturn that function when seeing that we have a verbatim non-wild-match\nsearch.\n\nAs it happens, this fixes an incorrect test in gdb.ada/homony.exp,\nwhere we were inserting a breakpoint on a symbol using the angle-brackets\nnotation, and got 2 locations for that breakpoint...\n\n    (gdb) b <homonym__get_value>\n    Breakpoint 1 at 0x4029fc: <homonym__get_value>. (2 locations)\n\n...  each location being in a different function:\n\n    (gdb) info break\n    Num     Type           Disp Enb Address            What\n    1       breakpoint     keep y   <MULTIPLE>\n    1.1                         y   0x00000000004029fc in homonym.get_value\n                                    at /[...]/homonym.adb:32\n    1.2                         y   0x0000000000402a3a in homonym.get_value\n                                    at /[...]/homonym.adb:50\n    (gdb) x /i 0x00000000004029fc\n       0x4029fc <homonym__get_value+8>:     movl   $0x1d,-0x4(%rbp)\n    (gdb) x /i 0x0000000000402a3a\n       0x402a3a <homonym__get_value__2+8>:  movl   $0x11,-0x4(%rbp)\n\nSince we used angle-brackets, we shouldn't be matching the second one,\nsomething this patch fixes.\n\ngdb/ChangeLog:\n\n        * ada-lang.c (standard_lookup): Use ada_lookup_encoded_symbol\n        instead of lookup_symbol_in_language\n        (do_exact_match): New function.\n        (ada_get_symbol_name_matcher): Return do_exact_match when\n        doing a verbatim match.\n\ngdb/testsuite/ChangeLog:\n\n        * gdb.ada/big_packed_array: New testcase.\n        * gdb.ada/homonym.exp: Fix incorrect expected output for\n        \"break <homonym__get_value>\" test.\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "fb3010d255aef8b34142af2379ca7a30b731d532",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb3010d255aef8b34142af2379ca7a30b731d532"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a2cd4f14750ae27ea5c250c98965eef842ee57db",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2cd4f14750ae27ea5c250c98965eef842ee57db",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a2cd4f14750ae27ea5c250c98965eef842ee57db",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2cd4f14750ae27ea5c250c98965eef842ee57db/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aa9e1dc0c6b965e0db07bf7e9fa93cbf0922a743",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa9e1dc0c6b965e0db07bf7e9fa93cbf0922a743",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aa9e1dc0c6b965e0db07bf7e9fa93cbf0922a743"
    }
  ],
  "stats": {
    "total": 163,
    "additions": 161,
    "deletions": 2
  },
  "files": [
    {
      "sha": "a5945bdc68ce3910358648de5dcb63d2a22386b3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -1,3 +1,11 @@\n+2019-02-17  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* ada-lang.c (standard_lookup): Use ada_lookup_encoded_symbol\n+\tinstead of lookup_symbol_in_language\n+\t(do_exact_match): New function.\n+\t(ada_get_symbol_name_matcher): Return do_exact_match when\n+\tdoing a verbatim match.\n+\n 2019-02-15  Tom Tromey  <tromey@adacore.com>\n \n \t* ravenscar-thread.c (ravenscar_thread_target::resume)"
    },
    {
      "sha": "66df1d11319c957723adbe82767a289dbaa74ca9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -4760,7 +4760,7 @@ standard_lookup (const char *name, const struct block *block,\n \n   if (lookup_cached_symbol (name, domain, &sym.symbol, NULL))\n     return sym.symbol;\n-  sym = lookup_symbol_in_language (name, block, domain, language_c, 0);\n+  ada_lookup_encoded_symbol (name, block, domain, &sym);\n   cache_symbol (name, domain, sym.symbol, sym.block);\n   return sym.symbol;\n }\n@@ -14175,6 +14175,16 @@ do_full_match (const char *symbol_search_name,\n   return full_match (symbol_search_name, ada_lookup_name (lookup_name));\n }\n \n+/* symbol_name_matcher_ftype for exact (verbatim) matches.  */\n+\n+static bool\n+do_exact_match (const char *symbol_search_name,\n+\t\tconst lookup_name_info &lookup_name,\n+\t\tcompletion_match_result *comp_match_res)\n+{\n+  return strcmp (symbol_search_name, ada_lookup_name (lookup_name)) == 0;\n+}\n+\n /* Build the Ada lookup name for LOOKUP_NAME.  */\n \n ada_lookup_name_info::ada_lookup_name_info (const lookup_name_info &lookup_name)\n@@ -14285,6 +14295,8 @@ ada_get_symbol_name_matcher (const lookup_name_info &lookup_name)\n     {\n       if (lookup_name.ada ().wild_match_p ())\n \treturn do_wild_match;\n+      else if (lookup_name.ada ().verbatim_p ())\n+\treturn do_exact_match;\n       else\n \treturn do_full_match;\n     }"
    },
    {
      "sha": "ee8c4d300733f02a77933a61d059c21d03cf9bf4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-17  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdb.ada/big_packed_array: New testcase.\n+\t* gdb.ada/homonym.exp: Fix incorrect expected output for\n+\t\"break <homonym__get_value>\" test.\n+\n 2019-02-13  Weimin Pan  <weimin.pan@oracle.com>\n \n \tPR breakpoints/21870"
    },
    {
      "sha": "a2e03bb1fb19b64da99130a3ba0217eb5fb6f4df",
      "filename": "gdb/testsuite/gdb.ada/big_packed_array.exp",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/big_packed_array.exp?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -0,0 +1,35 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile foo_ra24_010\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n+    return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo_ra24_010.adb]\n+runto \"foo_ra24_010.adb:$bp_location\"\n+\n+gdb_test \"print good\" \\\n+         \"= \\\\(false <repeats 196 times>\\\\)\" \\\n+\n+gdb_test \"print bad\" \\\n+         \"= \\\\(false <repeats 196 times>\\\\)\" \\"
    },
    {
      "sha": "7e6a26c8b8134278c9f8b35263844741bc4bc976",
      "filename": "gdb/testsuite/gdb.ada/big_packed_array/foo_ra24_010.adb",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/foo_ra24_010.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/foo_ra24_010.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/big_packed_array/foo_ra24_010.adb?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -0,0 +1,24 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+\n+procedure Foo_RA24_010 is\n+   Good : PA := (others => False);\n+   Bad : Bad_Packed_Table := (others => False);\n+begin\n+   Do_Nothing (Good'Address);  -- STOP\n+   Do_Nothing (Bad'Address);\n+end Foo_RA24_010;"
    },
    {
      "sha": "6535991a193f9b91bc6faf6d79b4f530d9bf87a0",
      "filename": "gdb/testsuite/gdb.ada/big_packed_array/pck.adb",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/big_packed_array/pck.adb?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -0,0 +1,21 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Pck is\n+   procedure Do_Nothing (A : System.Address) is\n+   begin\n+      null;\n+   end Do_Nothing;\n+end Pck;"
    },
    {
      "sha": "18b58fbac433a095266831857d7cba0250c0347b",
      "filename": "gdb/testsuite/gdb.ada/big_packed_array/pck.ads",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/big_packed_array/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/big_packed_array/pck.ads?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -0,0 +1,53 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+\n+package Pck is\n+   type Enum_Idx is\n+      (e_000, e_001, e_002, e_003, e_004, e_005, e_006, e_007, e_008,\n+       e_009, e_010, e_011, e_012, e_013, e_014, e_015, e_016, e_017,\n+       e_018, e_019, e_020, e_021, e_022, e_023, e_024, e_025, e_026,\n+       e_027, e_028, e_029, e_030, e_031, e_032, e_033, e_034, e_035,\n+       e_036, e_037, e_038, e_039, e_040, e_041, e_042, e_043, e_044,\n+       e_045, e_046, e_047, e_048, e_049, e_050, e_051, e_052, e_053,\n+       e_054, e_055, e_056, e_057, e_058, e_059, e_060, e_061, e_062,\n+       e_063, e_064, e_065, e_066, e_067, e_068, e_069, e_070, e_071,\n+       e_072, e_073, e_074, e_075, e_076, e_077, e_078, e_079, e_080,\n+       e_081, e_082, e_083, e_084, e_085, e_086, e_087, e_088, e_089,\n+       e_090, e_091, e_092, e_093, e_094, e_095, e_096, e_097, e_098,\n+       e_099, e_100, e_101, e_102, e_103, e_104, e_105, e_106, e_107,\n+       e_108, e_109, e_110, e_111, e_112, e_113, e_114, e_115, e_116,\n+       e_117, e_118, e_119, e_120, e_121, e_122, e_123, e_124, e_125,\n+       e_126, e_127, e_128, e_129, e_130, e_131, e_132, e_133, e_134,\n+       e_135, e_136, e_137, e_138, e_139, e_140, e_141, e_142, e_143,\n+       e_144, e_145, e_146, e_147, e_148, e_149, e_150, e_151, e_152,\n+       e_153, e_154, e_155, e_156, e_157, e_158, e_159, e_160, e_161,\n+       e_162, e_163, e_164, e_165, e_166, e_167, e_168, e_169, e_170,\n+       e_171, e_172, e_173, e_174, e_175, e_176, e_177, e_178, e_179,\n+       e_180, e_181, e_182, e_183, e_184, e_185, e_186, e_187, e_188,\n+       e_189, e_190, e_191, e_192, e_193, e_194, e_195);\n+\n+   type PA is array (Enum_Idx) of Boolean;\n+   pragma Pack (PA);\n+\n+   type T is array (Enum_Idx) of Boolean;\n+   pragma Pack (T);\n+   T_Empty : constant T := (others => False);\n+\n+   type Bad_Packed_Table is new T;\n+\n+   Procedure Do_Nothing (A : System.Address);\n+end Pck;"
    },
    {
      "sha": "3888090fe82a8c7035dfdc5f89e95649afc1e7db",
      "filename": "gdb/testsuite/gdb.ada/homonym.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/homonym.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2cd4f14750ae27ea5c250c98965eef842ee57db/gdb/testsuite/gdb.ada/homonym.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/homonym.exp?ref=a2cd4f14750ae27ea5c250c98965eef842ee57db",
      "patch": "@@ -36,7 +36,7 @@ gdb_test \"break homonym.adb:Get_Value\" \\\n     \"set breakpoint at homonym.adb:Get_Value\"\n \n gdb_test \"break <homonym__get_value>\" \\\n-    \"Breakpoint \\[0-9\\]+ at $hex: <homonym__get_value>. .2 locations.\" \\\n+    \"Breakpoint \\[0-9\\]+ at $hex: file .*homonym\\\\.adb, line $decimal\\\\.\" \\\n     \"set breakpoint at <homonym__get_value>\"\n \n delete_breakpoints"
    }
  ]
}