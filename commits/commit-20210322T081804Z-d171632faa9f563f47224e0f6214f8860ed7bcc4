{
  "sha": "d171632faa9f563f47224e0f6214f8860ed7bcc4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDE3MTYzMmZhYTlmNTYzZjQ3MjI0ZTBmNjIxNGY4ODYwZWQ3YmNjNA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-03-16T18:36:39Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-03-22T08:18:04Z"
    },
    "message": "gdbserver: convert the global dll list into a process_info field\n\nThe 'all_dlls' list is global.  This would cause the complete dll list\nto be reported for individual processes.  Move the list into the\nprocess_info struct.\n\nCurrently the dll list is used only by the win32-low target, which\ndoes not support the multi-process feature.  Therefore, it practically\ndoes not matter whether the list is global or per-process.  However,\nthere may be targets that are outside the binutils-gdb repo (e.g. we,\nat Intel, have such a target) that have multi-process and use the dll\nlist.  So, it makes sense to do the right thing.\n\ngdbserver/ChangeLog:\n2021-03-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* inferiors.h (struct process_info) <all_dlls, dlls_changed>: New\n\tfields.\n\t* dll.h (loaded_dll)\n\t(unloaded_dll): Declare an overloaded version that takes a proc\n\tparameter.\n\t* dll.cc (loaded_dll)\n\t(unloaded_dll): Implement the overloaded versions.\n\t(clear_dlls): Clear all process' dll lists.\n\t(all_dlls, dlls_changed): Remove the global variables.\n\t* remote-utils.cc (prepare_resume_reply): Update to consider a dll\n\tlist per proc.\n\t* server.cc (handle_qxfer_libraries): Ditto.\n\t(handle_v_attach): Ditto.\n\t(captured_main): Ditto.",
    "tree": {
      "sha": "1a817528568a6d8840199f132491314996f1ae16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a817528568a6d8840199f132491314996f1ae16"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d171632faa9f563f47224e0f6214f8860ed7bcc4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d171632faa9f563f47224e0f6214f8860ed7bcc4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d171632faa9f563f47224e0f6214f8860ed7bcc4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d171632faa9f563f47224e0f6214f8860ed7bcc4/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2aaf2ce843e4078b158cdfb61435217621ba1803",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2aaf2ce843e4078b158cdfb61435217621ba1803",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2aaf2ce843e4078b158cdfb61435217621ba1803"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 70,
    "deletions": 20
  },
  "files": [
    {
      "sha": "d870154ac6705fe93194e2863f6ed3c5061e5e51",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -1,3 +1,20 @@\n+2021-03-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* inferiors.h (struct process_info) <all_dlls, dlls_changed>: New\n+\tfields.\n+\t* dll.h (loaded_dll)\n+\t(unloaded_dll): Declare an overloaded version that takes a proc\n+\tparameter.\n+\t* dll.cc (loaded_dll)\n+\t(unloaded_dll): Implement the overloaded versions.\n+\t(clear_dlls): Clear all process' dll lists.\n+\t(all_dlls, dlls_changed): Remove the global variables.\n+\t* remote-utils.cc (prepare_resume_reply): Update to consider a dll\n+\tlist per proc.\n+\t* server.cc (handle_qxfer_libraries): Ditto.\n+\t(handle_v_attach): Ditto.\n+\t(captured_main): Ditto.\n+\n 2021-02-23  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* linux-low.cc (linux_process_target::filter_event): Return"
    },
    {
      "sha": "e86b0a25a286a1fb1c21cc7a5c0e8ed44e22a636",
      "filename": "gdbserver/dll.cc",
      "status": "modified",
      "additions": 33,
      "deletions": 12,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/dll.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/dll.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/dll.cc?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -23,23 +23,40 @@\n /* An \"unspecified\" CORE_ADDR, for match_dll.  */\n #define UNSPECIFIED_CORE_ADDR (~(CORE_ADDR) 0)\n \n-std::list<dll_info> all_dlls;\n-int dlls_changed;\n-\n-/* Record a newly loaded DLL at BASE_ADDR.  */\n+/* Record a newly loaded DLL at BASE_ADDR for the current process.  */\n \n void\n loaded_dll (const char *name, CORE_ADDR base_addr)\n {\n-  all_dlls.emplace_back (name != NULL ? name : \"\", base_addr);\n-  dlls_changed = 1;\n+  loaded_dll (current_process (), name, base_addr);\n+}\n+\n+/* Record a newly loaded DLL at BASE_ADDR for PROC.  */\n+\n+void\n+loaded_dll (process_info *proc, const char *name, CORE_ADDR base_addr)\n+{\n+  gdb_assert (proc != nullptr);\n+  proc->all_dlls.emplace_back (name != nullptr ? name : \"\", base_addr);\n+  proc->dlls_changed = true;\n }\n \n-/* Record that the DLL with NAME and BASE_ADDR has been unloaded.  */\n+/* Record that the DLL with NAME and BASE_ADDR has been unloaded\n+   from the current process.  */\n \n void\n unloaded_dll (const char *name, CORE_ADDR base_addr)\n {\n+  unloaded_dll (current_process (), name, base_addr);\n+}\n+\n+/* Record that the DLL with NAME and BASE_ADDR has been unloaded\n+   from PROC.  */\n+\n+void\n+unloaded_dll (process_info *proc, const char *name, CORE_ADDR base_addr)\n+{\n+  gdb_assert (proc != nullptr);\n   auto pred = [&] (const dll_info &dll)\n     {\n       if (base_addr != UNSPECIFIED_CORE_ADDR\n@@ -52,9 +69,10 @@ unloaded_dll (const char *name, CORE_ADDR base_addr)\n       return false;\n     };\n \n-  auto iter = std::find_if (all_dlls.begin (), all_dlls.end (), pred);\n+  auto iter = std::find_if (proc->all_dlls.begin (), proc->all_dlls.end (),\n+\t\t\t    pred);\n \n-  if (iter == all_dlls.end ())\n+  if (iter == proc->all_dlls.end ())\n     /* For some inferiors we might get unloaded_dll events without having\n        a corresponding loaded_dll.  In that case, the dll cannot be found\n        in ALL_DLL, and there is nothing further for us to do.\n@@ -68,13 +86,16 @@ unloaded_dll (const char *name, CORE_ADDR base_addr)\n     {\n       /* DLL has been found so remove the entry and free associated\n \t resources.  */\n-      all_dlls.erase (iter);\n-      dlls_changed = 1;\n+      proc->all_dlls.erase (iter);\n+      proc->dlls_changed = true;\n     }\n }\n \n void\n clear_dlls (void)\n {\n-  all_dlls.clear ();\n+  for_each_process ([] (process_info *proc)\n+    {\n+      proc->all_dlls.clear ();\n+    });\n }"
    },
    {
      "sha": "2a29990d623915f22ba659679a9baa75006a5aaa",
      "filename": "gdbserver/dll.h",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/dll.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/dll.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/dll.h?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -20,6 +20,8 @@\n \n #include <list>\n \n+struct process_info;\n+\n struct dll_info\n {\n   dll_info (const std::string &name_, CORE_ADDR base_addr_)\n@@ -30,11 +32,12 @@ struct dll_info\n   CORE_ADDR base_addr;\n };\n \n-extern std::list<dll_info> all_dlls;\n-extern int dlls_changed;\n-\n extern void clear_dlls (void);\n extern void loaded_dll (const char *name, CORE_ADDR base_addr);\n+extern void loaded_dll (process_info *proc, const char *name,\n+\t\t\tCORE_ADDR base_addr);\n extern void unloaded_dll (const char *name, CORE_ADDR base_addr);\n+extern void unloaded_dll (process_info *proc, const char *name,\n+\t\t\t  CORE_ADDR base_addr);\n \n #endif /* GDBSERVER_DLL_H */"
    },
    {
      "sha": "7754f745cd7d99e4387fc294b602d77b215f0d9b",
      "filename": "gdbserver/inferiors.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/inferiors.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/inferiors.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/inferiors.h?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -20,6 +20,7 @@\n #define GDBSERVER_INFERIORS_H\n \n #include \"gdbsupport/gdb_vecs.h\"\n+#include \"dll.h\"\n #include <list>\n \n struct thread_info;\n@@ -68,6 +69,12 @@ struct process_info\n \n   /* Private target data.  */\n   struct process_info_private *priv = NULL;\n+\n+  /* DLLs thats are loaded for this proc.  */\n+  std::list<dll_info> all_dlls;\n+\n+  /* Flag to mark that the DLL list has changed.  */\n+  bool dlls_changed = false;\n };\n \n /* Get the pid of PROC.  */"
    },
    {
      "sha": "509b813af27abf2b80ea134af107911d5488dbca",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -1270,11 +1270,11 @@ prepare_resume_reply (char *buf, ptid_t ptid,\n \t      }\n \t  }\n \n-\tif (dlls_changed)\n+\tif (current_process ()->dlls_changed)\n \t  {\n \t    strcpy (buf, \"library:;\");\n \t    buf += strlen (buf);\n-\t    dlls_changed = 0;\n+\t    current_process ()->dlls_changed = false;\n \t  }\n \n \tcurrent_thread = saved_thread;"
    },
    {
      "sha": "ea731d546898990a94ca62b35688a7004bdb8d33",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d171632faa9f563f47224e0f6214f8860ed7bcc4/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=d171632faa9f563f47224e0f6214f8860ed7bcc4",
      "patch": "@@ -1470,7 +1470,8 @@ handle_qxfer_libraries (const char *annex,\n \n   std::string document = \"<library-list version=\\\"1.0\\\">\\n\";\n \n-  for (const dll_info &dll : all_dlls)\n+  process_info *proc = current_process ();\n+  for (const dll_info &dll : proc->all_dlls)\n     document += string_printf\n       (\"  <library name=\\\"%s\\\"><segment address=\\\"0x%s\\\"/></library>\\n\",\n        dll.name.c_str (), paddress (dll.base_addr));\n@@ -2848,7 +2849,7 @@ handle_v_attach (char *own_buf)\n \t some libraries are preloaded.  GDB will always poll the\n \t library list.  Avoids the \"stopped by shared library event\"\n \t notice on the GDB side.  */\n-      dlls_changed = 0;\n+      current_process ()->dlls_changed = false;\n \n       if (non_stop)\n \t{\n@@ -3796,7 +3797,8 @@ captured_main (int argc, char *argv[])\n   /* Don't report shared library events on the initial connection,\n      even if some libraries are preloaded.  Avoids the \"stopped by\n      shared library event\" notice on gdb side.  */\n-  dlls_changed = 0;\n+  if (current_thread != nullptr)\n+    current_process ()->dlls_changed = false;\n \n   if (cs.last_status.kind == TARGET_WAITKIND_EXITED\n       || cs.last_status.kind == TARGET_WAITKIND_SIGNALLED)"
    }
  ]
}