{
  "sha": "b35c1d1cf457db034186f321517eee69ef8457a5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjM1YzFkMWNmNDU3ZGIwMzQxODZmMzIxNTE3ZWVlNjllZjg0NTdhNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:52Z"
    },
    "message": "Use gdb_bfd_sections in ELF osabi tag sniffing\n\nThis changes some ELF osabi tag-sniffing functions to avoid\nbfd_map_over_sections, in favor of iteration.  I could only readily\ntest the generic one.\n\ngdb/ChangeLog\n2020-09-19  Tom Tromey  <tom@tromey.com>\n\n\t* osabi.h (generic_elf_osabi_sniff_abi_tag_sections): Update.\n\t* osabi.c (generic_elf_osabi_sniff_abi_tag_sections): Change\n\tparameters.\n\t(generic_elf_osabi_sniffer): Use foreach.\n\t* mips-sde-tdep.c (mips_sde_elf_osabi_sniffer): Use foreach.\n\t* arm-tdep.c (arm_elf_osabi_sniffer): Use foreach.",
    "tree": {
      "sha": "05dcbbd0e7f32f986369aad09b59bb770189f124",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05dcbbd0e7f32f986369aad09b59bb770189f124"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b35c1d1cf457db034186f321517eee69ef8457a5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b35c1d1cf457db034186f321517eee69ef8457a5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b35c1d1cf457db034186f321517eee69ef8457a5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b35c1d1cf457db034186f321517eee69ef8457a5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 23,
    "deletions": 14
  },
  "files": [
    {
      "sha": "1fb3c8834a1a992ae595ed6db7a07e663f6e9466",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b35c1d1cf457db034186f321517eee69ef8457a5",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* osabi.h (generic_elf_osabi_sniff_abi_tag_sections): Update.\n+\t* osabi.c (generic_elf_osabi_sniff_abi_tag_sections): Change\n+\tparameters.\n+\t(generic_elf_osabi_sniffer): Use foreach.\n+\t* mips-sde-tdep.c (mips_sde_elf_osabi_sniffer): Use foreach.\n+\t* arm-tdep.c (arm_elf_osabi_sniffer): Use foreach.\n+\n 2020-09-19  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (locate_dwz_sections): Change parameters."
    },
    {
      "sha": "91ab4410842dd04ae0ae1b654e1ac6fdb997ec9e",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=b35c1d1cf457db034186f321517eee69ef8457a5",
      "patch": "@@ -8863,9 +8863,10 @@ arm_elf_osabi_sniffer (bfd *abfd)\n   if (elfosabi == ELFOSABI_ARM)\n     /* GNU tools use this value.  Check note sections in this case,\n        as well.  */\n-    bfd_map_over_sections (abfd,\n-\t\t\t   generic_elf_osabi_sniff_abi_tag_sections, \n-\t\t\t   &osabi);\n+    {\n+      for (asection *sect : gdb_bfd_sections (abfd))\n+\tgeneric_elf_osabi_sniff_abi_tag_sections (abfd, sect, &osabi);\n+    }\n \n   /* Anything else will be handled by the generic ELF sniffer.  */\n   return osabi;"
    },
    {
      "sha": "1d282c219e56a5d9b82bd01cc3e9ff07f2ba55e9",
      "filename": "gdb/mips-sde-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/mips-sde-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/mips-sde-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-sde-tdep.c?ref=b35c1d1cf457db034186f321517eee69ef8457a5",
      "patch": "@@ -226,9 +226,8 @@ mips_sde_elf_osabi_sniffer (bfd *abfd)\n \n   /* If the generic sniffer gets a hit, return and let other sniffers\n      get a crack at it.  */\n-  bfd_map_over_sections (abfd,\n-\t\t\t generic_elf_osabi_sniff_abi_tag_sections,\n-\t\t\t &osabi);\n+  for (asection *sect : gdb_bfd_sections (abfd))\n+    generic_elf_osabi_sniff_abi_tag_sections (abfd, sect, &osabi);\n   if (osabi != GDB_OSABI_UNKNOWN)\n     return GDB_OSABI_UNKNOWN;\n "
    },
    {
      "sha": "e8a813b62f268417edf5f0ad164c9c942bd43b1e",
      "filename": "gdb/osabi.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/osabi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/osabi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/osabi.c?ref=b35c1d1cf457db034186f321517eee69ef8457a5",
      "patch": "@@ -23,6 +23,7 @@\n #include \"arch-utils.h\"\n #include \"gdbcmd.h\"\n #include \"command.h\"\n+#include \"gdb_bfd.h\"\n \n #include \"elf-bfd.h\"\n \n@@ -439,9 +440,9 @@ check_note (bfd *abfd, asection *sect, char *note, unsigned int *sectsize,\n /* Generic sniffer for ELF flavoured files.  */\n \n void\n-generic_elf_osabi_sniff_abi_tag_sections (bfd *abfd, asection *sect, void *obj)\n+generic_elf_osabi_sniff_abi_tag_sections (bfd *abfd, asection *sect,\n+\t\t\t\t\t  enum gdb_osabi *osabi)\n {\n-  enum gdb_osabi *osabi = (enum gdb_osabi *) obj;\n   const char *name;\n   unsigned int sectsize;\n   char *note;\n@@ -561,9 +562,8 @@ generic_elf_osabi_sniffer (bfd *abfd)\n       /* And likewise ELFOSABI_HPUX.  For some reason the default\n \t value for the EI_OSABI field is ELFOSABI_HPUX for all PA-RISC\n \t targets (with the exception of GNU/Linux).  */\n-      bfd_map_over_sections (abfd,\n-\t\t\t     generic_elf_osabi_sniff_abi_tag_sections,\n-\t\t\t     &osabi);\n+      for (asection *sect : gdb_bfd_sections (abfd))\n+\tgeneric_elf_osabi_sniff_abi_tag_sections (abfd, sect, &osabi);\n       break;\n \n     case ELFOSABI_FREEBSD:"
    },
    {
      "sha": "9b7ab1818c0a19411bd80b18c9286751b1cc3725",
      "filename": "gdb/osabi.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/osabi.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b35c1d1cf457db034186f321517eee69ef8457a5/gdb/osabi.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/osabi.h?ref=b35c1d1cf457db034186f321517eee69ef8457a5",
      "patch": "@@ -86,8 +86,8 @@ const char *gdbarch_osabi_name (enum gdb_osabi);\n const char *osabi_triplet_regexp (enum gdb_osabi osabi);\n \n /* Helper routine for ELF file sniffers.  This looks at ABI tag note\n-   sections to determine the OS ABI from the note.  It should be called\n-   via bfd_map_over_sections.  */\n-void generic_elf_osabi_sniff_abi_tag_sections (bfd *, asection *, void *);\n+   sections to determine the OS ABI from the note.  */\n+void generic_elf_osabi_sniff_abi_tag_sections (bfd *, asection *,\n+\t\t\t\t\t       enum gdb_osabi *);\n \n #endif /* OSABI_H */"
    }
  ]
}