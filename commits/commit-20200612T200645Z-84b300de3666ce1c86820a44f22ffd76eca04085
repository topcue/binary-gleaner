{
  "sha": "84b300de3666ce1c86820a44f22ffd76eca04085",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODRiMzAwZGUzNjY2Y2UxYzg2ODIwYTQ0ZjIyZmZkNzZlY2EwNDA4NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:45Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:45Z"
    },
    "message": "gdbserver: remove support for ARM/WinCE\n\nThis port has been unmaintained for years, remove it.\n\ngdbserver/ChangeLog:\n\n\t* Makefile.in (SFILES): Remove win32-arm-low.cc, wincecompat.cc.\n\t* configure.srv: Remove mingw32ce cases.\n\t* server.h, win32-low.cc: Remove __MINGW32CE__-guarded code.\n\t* win32-low.h (to_back_slashes): Remove.\n\t* win32-arm-low.cc, wincecompat.cc, wincecompat.h: Remove.\n\nChange-Id: Ib75c0b55b0ab7caca38bbeff5f2fa9397a8e7e8d",
    "tree": {
      "sha": "fbec53a5647667558fd627c53a9e01e1eda727bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fbec53a5647667558fd627c53a9e01e1eda727bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84b300de3666ce1c86820a44f22ffd76eca04085",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84b300de3666ce1c86820a44f22ffd76eca04085",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84b300de3666ce1c86820a44f22ffd76eca04085",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84b300de3666ce1c86820a44f22ffd76eca04085/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96c16e2b7f47c301912ac92f53b756e26ef44ffb"
    }
  ],
  "stats": {
    "total": 375,
    "additions": 37,
    "deletions": 338
  },
  "files": [
    {
      "sha": "3eef54470410f85570423a0a658918f5a543524c",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* Makefile.in (SFILES): Remove win32-arm-low.cc, wincecompat.cc.\n+\t* configure.srv: Remove mingw32ce cases.\n+\t* server.h, win32-low.cc: Remove __MINGW32CE__-guarded code.\n+\t* win32-low.h (to_back_slashes): Remove.\n+\t* win32-arm-low.cc, wincecompat.cc, wincecompat.h: Remove.\n+\n 2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* Makefile.in (SFILES): linux-tile-low.cc."
    },
    {
      "sha": "7321ba12c2eb1eda781e5b87a5a2987ac161e022",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -202,10 +202,8 @@ SFILES = \\\n \t$(srcdir)/target.cc \\\n \t$(srcdir)/thread-db.cc \\\n \t$(srcdir)/utils.cc \\\n-\t$(srcdir)/win32-arm-low.cc \\\n \t$(srcdir)/win32-i386-low.cc \\\n \t$(srcdir)/win32-low.cc \\\n-\t$(srcdir)/wincecompat.cc \\\n \t$(srcdir)/x86-low.cc \\\n \t$(srcdir)/../gdb/alloc.c \\\n \t$(srcdir)/../gdb/arch/arm.c \\"
    },
    {
      "sha": "5e33bd9c54d6d37390ddc1c77c017588baf57494",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -73,14 +73,6 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_linux_regsets=yes\n \t\t\tsrv_linux_thread_db=yes\n \t\t\t;;\n-  arm*-*-mingw32ce*)\tsrv_regobj=reg-arm.o\n-\t\t\tsrv_tgtobj=\"win32-low.o windows-nat.o win32-arm-low.o\"\n-\t\t\tsrv_tgtobj=\"${srv_tgtobj} wincecompat.o\"\n-\t\t\t# hostio_last_error implementation is in win32-low.c\n-\t\t\tsrv_hostio_err_objs=\"\"\n-\t\t\tsrv_mingw=yes\n-\t\t\tsrv_mingwce=yes\n-\t\t\t;;\n   i[34567]86-*-cygwin*)\tsrv_regobj=\"\"\n \t\t\tsrv_tgtobj=\"x86-low.o nat/x86-dregs.o win32-low.o\"\n \t\t\tsrv_tgtobj=\"${srv_tgtobj} win32-i386-low.o\"\n@@ -102,18 +94,6 @@ case \"${gdbserver_host}\" in\n \t\t\tipa_obj=\"linux-i386-ipa.o linux-x86-tdesc-ipa.o\"\n \t\t\tipa_obj=\"${ipa_obj} arch/i386-ipa.o\"\n \t\t\t;;\n-  i[34567]86-*-mingw32ce*)\n-\t\t\tsrv_regobj=\"\"\n-\t\t\tsrv_tgtobj=\"x86-low.o nat/x86-dregs.o win32-low.o\"\n-\t\t\tsrv_tgtobj=\"${srv_tgtobj} win32-i386-low.o\"\n-\t\t\tsrv_tgtobj=\"${srv_tgtobj} nat/windows-nat.o\"\n-\t\t\tsrv_tgtobj=\"${srv_tgtobj} arch/i386.o\"\n-\t\t\tsrv_tgtobj=\"${srv_tgtobj} wincecompat.o\"\n-\t\t\t# hostio_last_error implementation is in win32-low.c\n-\t\t\tsrv_hostio_err_objs=\"\"\n-\t\t\tsrv_mingw=yes\n-\t\t\tsrv_mingwce=yes\n-\t\t\t;;\n   i[34567]86-*-mingw*)\tsrv_regobj=\"\"\n \t\t\tsrv_tgtobj=\"x86-low.o nat/x86-dregs.o win32-low.o\"\n \t\t\tsrv_tgtobj=\"${srv_tgtobj} win32-i386-low.o\""
    },
    {
      "sha": "22228050a806d8a00856f6109ac65b5b6013d43e",
      "filename": "gdbserver/server.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/server.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/server.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.h?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -31,10 +31,6 @@\n \n gdb_static_assert (sizeof (CORE_ADDR) >= sizeof (void *));\n \n-#ifdef __MINGW32CE__\n-#include \"wincecompat.h\"\n-#endif\n-\n #include \"gdbsupport/version.h\"\n \n #if !HAVE_DECL_PERROR"
    },
    {
      "sha": "aacf2cdf8cd37203af010df5432f43b393f511d0",
      "filename": "gdbserver/win32-arm-low.cc",
      "status": "removed",
      "additions": 0,
      "deletions": 168,
      "changes": 168,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/win32-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/win32-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-arm-low.cc?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -1,168 +0,0 @@\n-/* Copyright (C) 2007-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#include \"server.h\"\n-#include \"win32-low.h\"\n-\n-using namespace windows_nat;\n-\n-#ifndef CONTEXT_FLOATING_POINT\n-#define CONTEXT_FLOATING_POINT 0\n-#endif\n-\n-/* Defined in auto-generated file reg-arm.c.  */\n-void init_registers_arm (void);\n-extern const struct target_desc *tdesc_arm;\n-\n-static void\n-arm_get_thread_context (windows_thread_info *th)\n-{\n-  th->context.ContextFlags = \\\n-    CONTEXT_FULL | \\\n-    CONTEXT_FLOATING_POINT;\n-\n-  GetThreadContext (th->h, &th->context);\n-}\n-\n-#define context_offset(x) ((int)&(((CONTEXT *)NULL)->x))\n-static const int mappings[] = {\n-  context_offset (R0),\n-  context_offset (R1),\n-  context_offset (R2),\n-  context_offset (R3),\n-  context_offset (R4),\n-  context_offset (R5),\n-  context_offset (R6),\n-  context_offset (R7),\n-  context_offset (R8),\n-  context_offset (R9),\n-  context_offset (R10),\n-  context_offset (R11),\n-  context_offset (R12),\n-  context_offset (Sp),\n-  context_offset (Lr),\n-  context_offset (Pc),\n-  -1, /* f0 */\n-  -1, /* f1 */\n-  -1, /* f2 */\n-  -1, /* f3 */\n-  -1, /* f4 */\n-  -1, /* f5 */\n-  -1, /* f6 */\n-  -1, /* f7 */\n-  -1, /* fps */\n-  context_offset (Psr),\n-};\n-#undef context_offset\n-\n-/* Return a pointer into a CONTEXT field indexed by gdb register number.\n-   Return a pointer to an dummy register holding zero if there is no\n-   corresponding CONTEXT field for the given register number.  */\n-static char *\n-regptr (CONTEXT* c, int r)\n-{\n-  if (mappings[r] < 0)\n-  {\n-    static ULONG zero;\n-    /* Always force value to zero, in case the user tried to write\n-       to this register before.  */\n-    zero = 0;\n-    return (char *) &zero;\n-  }\n-  else\n-    return (char *) c + mappings[r];\n-}\n-\n-/* Fetch register from gdbserver regcache data.  */\n-static void\n-arm_fetch_inferior_register (struct regcache *regcache,\n-\t\t\t     windows_thread_info *th, int r)\n-{\n-  char *context_offset = regptr (&th->context, r);\n-  supply_register (regcache, r, context_offset);\n-}\n-\n-/* Store a new register value into the thread context of TH.  */\n-static void\n-arm_store_inferior_register (struct regcache *regcache,\n-\t\t\t     windows_thread_info *th, int r)\n-{\n-  collect_register (regcache, r, regptr (&th->context, r));\n-}\n-\n-static void\n-arm_arch_setup (void)\n-{\n-  init_registers_arm ();\n-  win32_tdesc = tdesc_arm;\n-}\n-\n-/* Implement win32_target_ops \"num_regs\" method.  */\n-\n-static int\n-arm_num_regs (void)\n-{\n-  return sizeof (mappings) / sizeof (mappings[0]),\n-}\n-\n-/* Correct in either endianness.  We do not support Thumb yet.  */\n-static const unsigned long arm_wince_breakpoint = 0xe6000010;\n-#define arm_wince_breakpoint_len 4\n-\n-/* Implement win32_target_ops \"get_pc\" method.  */\n-\n-static CORE_ADDR\n-arm_win32_get_pc (struct regcache *regcache)\n-{\n-  uint32_t pc;\n-\n-  collect_register_by_name (regcache, \"pc\", &pc);\n-  return (CORE_ADDR) pc;\n-}\n-\n-/* Implement win32_target_ops \"set_pc\" method.  */\n-\n-static void\n-arm_win32_set_pc (struct regcache *regcache, CORE_ADDR pc)\n-{\n-  uint32_t newpc = pc;\n-\n-  supply_register_by_name (regcache, \"pc\", &newpc);\n-}\n-\n-struct win32_target_ops the_low_target = {\n-  arm_arch_setup,\n-  arm_num_regs,\n-  NULL, /* initial_stuff */\n-  arm_get_thread_context,\n-  NULL, /* prepare_to_resume */\n-  NULL, /* thread_added */\n-  arm_fetch_inferior_register,\n-  arm_store_inferior_register,\n-  NULL, /* single_step */\n-  (const unsigned char *) &arm_wince_breakpoint,\n-  arm_wince_breakpoint_len,\n-  0,\n-  arm_win32_get_pc,\n-  arm_win32_set_pc,\n-  /* Watchpoint related functions.  See target.h for comments.  */\n-  NULL, /* supports_z_point_type */\n-  NULL, /* insert_point */\n-  NULL, /* remove_point */\n-  NULL, /* stopped_by_watchpoint */\n-  NULL  /* stopped_data_address */\n-};"
    },
    {
      "sha": "a11cc740925a13edb7c2e689998cd215fc32abfa",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 29,
      "deletions": 72,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -1421,69 +1421,39 @@ get_child_debug_event (DWORD *continue_status,\n       goto gotevent;\n     }\n \n-#ifndef _WIN32_WCE\n   attaching = 0;\n-#else\n-  if (attaching)\n-    {\n-      /* WinCE doesn't set an initial breakpoint automatically.  To\n-\t stop the inferior, we flush all currently pending debug\n-\t events -- the thread list and the dll list are always\n-\t reported immediatelly without delay, then, we suspend all\n-\t threads and pretend we saw a trap at the current PC of the\n-\t main thread.\n-\n-\t Contrary to desktop Windows, Windows CE *does* report the dll\n-\t names on LOAD_DLL_DEBUG_EVENTs resulting from a\n-\t DebugActiveProcess call.  This limits the way we can detect\n-\t if all the dlls have already been reported.  If we get a real\n-\t debug event before leaving attaching, the worst that will\n-\t happen is the user will see a spurious breakpoint.  */\n-\n-      current_event.dwDebugEventCode = 0;\n-      if (!wait_for_debug_event (&current_event, 0))\n-\t{\n-\t  OUTMSG2((\"no attach events left\\n\"));\n-\t  fake_breakpoint_event ();\n-\t  attaching = 0;\n-\t}\n-      else\n-\tOUTMSG2((\"got attach event\\n\"));\n-    }\n-  else\n-#endif\n-    {\n-      gdb::optional<pending_stop> stop = fetch_pending_stop (debug_threads);\n-      if (stop.has_value ())\n-\t{\n-\t  *ourstatus = stop->status;\n-\t  current_event = stop->event;\n-\t  ptid = debug_event_ptid (&current_event);\n-\t  current_thread = find_thread_ptid (ptid);\n-\t  return 1;\n-\t}\n+  {\n+    gdb::optional<pending_stop> stop = fetch_pending_stop (debug_threads);\n+    if (stop.has_value ())\n+      {\n+\t*ourstatus = stop->status;\n+\tcurrent_event = stop->event;\n+\tptid = debug_event_ptid (&current_event);\n+\tcurrent_thread = find_thread_ptid (ptid);\n+\treturn 1;\n+      }\n \n-      /* Keep the wait time low enough for comfortable remote\n-\t interruption, but high enough so gdbserver doesn't become a\n-\t bottleneck.  */\n-      if (!wait_for_debug_event (&current_event, 250))\n-        {\n-\t  DWORD e  = GetLastError();\n+    /* Keep the wait time low enough for comfortable remote\n+       interruption, but high enough so gdbserver doesn't become a\n+       bottleneck.  */\n+    if (!wait_for_debug_event (&current_event, 250))\n+      {\n+\tDWORD e  = GetLastError();\n \n-\t  if (e == ERROR_PIPE_NOT_CONNECTED)\n-\t    {\n-\t      /* This will happen if the loader fails to succesfully\n-\t\t load the application, e.g., if the main executable\n-\t\t tries to pull in a non-existing export from a\n-\t\t DLL.  */\n-\t      ourstatus->kind = TARGET_WAITKIND_EXITED;\n-\t      ourstatus->value.integer = 1;\n-\t      return 1;\n-\t    }\n+\tif (e == ERROR_PIPE_NOT_CONNECTED)\n+\t  {\n+\t    /* This will happen if the loader fails to succesfully\n+\t       load the application, e.g., if the main executable\n+\t       tries to pull in a non-existing export from a\n+\t       DLL.  */\n+\t    ourstatus->kind = TARGET_WAITKIND_EXITED;\n+\t    ourstatus->value.integer = 1;\n+\t    return 1;\n+\t  }\n \n-\t  return 0;\n-        }\n-    }\n+\treturn 0;\n+      }\n+  }\n \n  gotevent:\n \n@@ -1534,19 +1504,6 @@ get_child_debug_event (DWORD *continue_status,\n \t\t\tmain_thread_id,\n \t\t\tcurrent_event.u.CreateProcessInfo.hThread,\n \t\t\tcurrent_event.u.CreateProcessInfo.lpThreadLocalBase);\n-\n-#ifdef _WIN32_WCE\n-      if (!attaching)\n-\t{\n-\t  /* Windows CE doesn't set the initial breakpoint\n-\t     automatically like the desktop versions of Windows do.\n-\t     We add it explicitly here.\t It will be removed as soon as\n-\t     it is hit.\t */\n-\t  set_breakpoint_at ((CORE_ADDR) (long) current_event.u\n-\t\t\t     .CreateProcessInfo.lpStartAddress,\n-\t\t\t     auto_delete_breakpoint);\n-\t}\n-#endif\n       break;\n \n     case EXIT_PROCESS_DEBUG_EVENT:"
    },
    {
      "sha": "f3b44776ae1c56db62352f70307286dcefe67b2e",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84b300de3666ce1c86820a44f22ffd76eca04085/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=84b300de3666ce1c86820a44f22ffd76eca04085",
      "patch": "@@ -183,8 +183,4 @@ extern void win32_require_context (windows_nat::windows_thread_info *th);\n    of GetLastError.  */\n extern char * strwinerror (DWORD error);\n \n-/* in wincecompat.c */\n-\n-extern void to_back_slashes (char *);\n-\n #endif /* GDBSERVER_WIN32_LOW_H */"
    },
    {
      "sha": "46eece17e5579fd34abef44daeb2f9134732ce16",
      "filename": "gdbserver/wincecompat.cc",
      "status": "removed",
      "additions": 0,
      "deletions": 38,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/wincecompat.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/wincecompat.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/wincecompat.cc?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -1,38 +0,0 @@\n-/* Compatibility routines for Windows CE.\n-   Copyright (C) 2007-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#include \"server.h\"\n-\n-#include <windows.h>\n-\n-void\n-perror (const char *s)\n-{\n-  if (s && *s)\n-    fprintf (stderr, \"%s: %s\\n\", s, strwinerror (GetLastError ()));\n-  else\n-    fprintf (stderr, \"%s\\n\", strwinerror (GetLastError ()));\n-}\n-\n-void\n-to_back_slashes (char *path)\n-{\n-  for (; *path; ++path)\n-    if ('/' == *path)\n-      *path = '\\\\';\n-}"
    },
    {
      "sha": "34705c3d66c5a7e27286e40c0b4417d4a7d63851",
      "filename": "gdbserver/wincecompat.h",
      "status": "removed",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/wincecompat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/wincecompat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/wincecompat.h?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -1,30 +0,0 @@\n-/* Compatibility routines for Windows CE.\n-   Copyright (C) 2007-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GDBSERVER_WINCECOMPAT_H\n-#define GDBSERVER_WINCECOMPAT_H\n-\n-#include <windows.h>\n-\n-#define errno (GetLastError ())\n-\n-/* in win32-low.c */\n-extern char * strwinerror (DWORD error);\n-#define strerror strwinerror\n-\n-#endif /* GDBSERVER_WINCECOMPAT_H */"
    }
  ]
}