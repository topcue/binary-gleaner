{
  "sha": "7a02bab704afdc2c46e056da166eaaa025ff4b03",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2EwMmJhYjcwNGFmZGMyYzQ2ZTA1NmRhMTY2ZWFhYTAyNWZmNGIwMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:13Z"
    },
    "message": "Remove tui_expand_tabs\n\ntui_expand_tabs only has a single caller.  This patch removes this\nfunction, in favor of a tab-expanding variant of string_file.  This\nsimplifies the code somewhat.\n\ngdb/ChangeLog\n2020-07-01  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-regs.h (struct tui_data_item_window) <content>: Now a\n\tstd::string.\n\t* tui/tui-regs.c (class tab_expansion_file): New.\n\t(tab_expansion_file::write): New method.\n\t(tui_register_format): Change return type.  Use\n\ttab_expansion_file.\n\t(tui_get_register, tui_data_window::display_registers_from)\n\t(tui_data_item_window::rerender): Update.\n\t* tui/tui-io.h (tui_expand_tabs): Don't declare.\n\t* tui/tui-io.c (tui_expand_tabs): Remove.",
    "tree": {
      "sha": "77c614e16fb84496aabf50aef85343dfb328d135",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/77c614e16fb84496aabf50aef85343dfb328d135"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7a02bab704afdc2c46e056da166eaaa025ff4b03",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a02bab704afdc2c46e056da166eaaa025ff4b03",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7a02bab704afdc2c46e056da166eaaa025ff4b03",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a02bab704afdc2c46e056da166eaaa025ff4b03/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea68593bd2c649a73754e150340ba3400c007682",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea68593bd2c649a73754e150340ba3400c007682",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ea68593bd2c649a73754e150340ba3400c007682"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 61,
    "deletions": 73
  },
  "files": [
    {
      "sha": "9efd8b6eaa5e13d4723b0ef8c2834c07a18616bc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7a02bab704afdc2c46e056da166eaaa025ff4b03",
      "patch": "@@ -1,3 +1,16 @@\n+2020-07-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-regs.h (struct tui_data_item_window) <content>: Now a\n+\tstd::string.\n+\t* tui/tui-regs.c (class tab_expansion_file): New.\n+\t(tab_expansion_file::write): New method.\n+\t(tui_register_format): Change return type.  Use\n+\ttab_expansion_file.\n+\t(tui_get_register, tui_data_window::display_registers_from)\n+\t(tui_data_item_window::rerender): Update.\n+\t* tui/tui-io.h (tui_expand_tabs): Don't declare.\n+\t* tui/tui-io.c (tui_expand_tabs): Remove.\n+\n 2020-07-01  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-regs.c (tui_reggroup_completer): Use complete_on_enum."
    },
    {
      "sha": "7698d7903f19cfd1f70fb60d728a0c8268320f6c",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 0,
      "deletions": 52,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=7a02bab704afdc2c46e056da166eaaa025ff4b03",
      "patch": "@@ -1050,55 +1050,3 @@ tui_getc (FILE *fp)\n       return 0;\n     }\n }\n-\n-/* See tui-io.h.  */\n-\n-gdb::unique_xmalloc_ptr<char>\n-tui_expand_tabs (const char *string)\n-{\n-  int n_adjust, ncol;\n-  const char *s;\n-  char *ret, *q;\n-\n-  /* 1. How many additional characters do we need?  */\n-  for (ncol = 0, n_adjust = 0, s = string; s; )\n-    {\n-      s = strpbrk (s, \"\\t\");\n-      if (s)\n-\t{\n-\t  ncol += (s - string) + n_adjust;\n-\t  /* Adjustment for the next tab stop, minus one for the TAB\n-\t     we replace with spaces.  */\n-\t  n_adjust += 8 - (ncol % 8) - 1;\n-\t  s++;\n-\t}\n-    }\n-\n-  /* Allocate the copy.  */\n-  ret = q = (char *) xmalloc (strlen (string) + n_adjust + 1);\n-\n-  /* 2. Copy the original string while replacing TABs with spaces.  */\n-  for (ncol = 0, s = string; s; )\n-    {\n-      const char *s1 = strpbrk (s, \"\\t\");\n-      if (s1)\n-\t{\n-\t  if (s1 > s)\n-\t    {\n-\t      strncpy (q, s, s1 - s);\n-\t      q += s1 - s;\n-\t      ncol += s1 - s;\n-\t    }\n-\t  do {\n-\t    *q++ = ' ';\n-\t    ncol++;\n-\t  } while ((ncol % 8) != 0);\n-\t  s1++;\n-\t}\n-      else\n-\tstrcpy (q, s);\n-      s = s1;\n-    }\n-\n-  return gdb::unique_xmalloc_ptr<char> (ret);\n-}"
    },
    {
      "sha": "2cc47ba4beb7f44e81229921584d5b5c414eb97c",
      "filename": "gdb/tui/tui-io.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-io.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-io.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.h?ref=7a02bab704afdc2c46e056da166eaaa025ff4b03",
      "patch": "@@ -45,9 +45,6 @@ extern void tui_initialize_io (void);\n    changed the edited text.  */\n extern void tui_redisplay_readline (void);\n \n-/* Expand TABs into spaces.  */\n-extern gdb::unique_xmalloc_ptr<char> tui_expand_tabs (const char *);\n-\n /* Enter/leave reverse video mode.  */\n extern void tui_set_reverse_mode (WINDOW *w, bool reverse);\n "
    },
    {
      "sha": "15ce7a0222614b8ba46bf0e5636a5c7ac6171820",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 47,
      "deletions": 17,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=7a02bab704afdc2c46e056da166eaaa025ff4b03",
      "patch": "@@ -42,15 +42,55 @@\n \n #include \"gdb_curses.h\"\n \n+/* A subclass of string_file that expands tab characters.  */\n+class tab_expansion_file : public string_file\n+{\n+public:\n+\n+  tab_expansion_file () = default;\n+\n+  void write (const char *buf, long length_buf) override;\n+\n+private:\n+\n+  int m_column = 0;\n+};\n+\n+void\n+tab_expansion_file::write (const char *buf, long length_buf)\n+{\n+  for (long i = 0; i < length_buf; ++i)\n+    {\n+      if (buf[i] == '\\t')\n+\t{\n+\t  do\n+\t    {\n+\t      string_file::write (\" \", 1);\n+\t      ++m_column;\n+\t    }\n+\t  while ((m_column % 8) != 0);\n+\t}\n+      else\n+\t{\n+\t  string_file::write (&buf[i], 1);\n+\t  if (buf[i] == '\\n')\n+\t    m_column = 0;\n+\t  else\n+\t    ++m_column;\n+\t}\n+    }\n+}\n+\n /* Get the register from the frame and return a printable\n    representation of it.  */\n \n-static gdb::unique_xmalloc_ptr<char>\n+static std::string\n tui_register_format (struct frame_info *frame, int regnum)\n {\n   struct gdbarch *gdbarch = get_frame_arch (frame);\n \n-  string_file stream;\n+  /* Expand tabs into spaces, since ncurses on MS-Windows doesn't.  */\n+  tab_expansion_file stream;\n \n   scoped_restore save_pagination\n     = make_scoped_restore (&pagination_enabled, 0);\n@@ -64,8 +104,7 @@ tui_register_format (struct frame_info *frame, int regnum)\n   if (!str.empty () && str.back () == '\\n')\n     str.resize (str.size () - 1);\n \n-  /* Expand tabs into spaces, since ncurses on MS-Windows doesn't.  */\n-  return tui_expand_tabs (str.c_str ());\n+  return str;\n }\n \n /* Get the register value from the given frame and format it for the\n@@ -80,11 +119,9 @@ tui_get_register (struct frame_info *frame,\n     *changedp = false;\n   if (target_has_registers)\n     {\n-      gdb::unique_xmalloc_ptr<char> new_content\n-\t= tui_register_format (frame, regnum);\n+      std::string new_content = tui_register_format (frame, regnum);\n \n-      if (changedp != NULL\n-\t  && strcmp (data->content.get (), new_content.get ()) != 0)\n+      if (changedp != NULL && data->content != new_content)\n \t*changedp = true;\n \n       data->content = std::move (new_content);\n@@ -244,13 +281,7 @@ tui_data_window::display_registers_from (int start_element_no)\n   int max_len = 0;\n   for (auto &&data_item_win : m_regs_content)\n     {\n-      const char *p;\n-      int len;\n-\n-      len = 0;\n-      p = data_item_win.content.get ();\n-      if (p != 0)\n-\tlen = strlen (p);\n+      int len = data_item_win.content.size ();\n \n       if (len > max_len)\n \tmax_len = len;\n@@ -488,8 +519,7 @@ tui_data_item_window::rerender ()\n   for (i = 1; i < width; i++)\n     waddch (handle.get (), ' ');\n   wmove (handle.get (), 0, 0);\n-  if (content)\n-    waddstr (handle.get (), content.get ());\n+  waddstr (handle.get (), content.c_str ());\n \n   if (highlight)\n     /* We ignore the return value, casting it to void in order to avoid"
    },
    {
      "sha": "250f4e7466770a39c8eb86cb1d8497872507bcc3",
      "filename": "gdb/tui/tui-regs.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-regs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a02bab704afdc2c46e056da166eaaa025ff4b03/gdb/tui/tui-regs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.h?ref=7a02bab704afdc2c46e056da166eaaa025ff4b03",
      "patch": "@@ -52,7 +52,7 @@ struct tui_data_item_window : public tui_gen_win_info\n   /* The register number, or data display number.  */\n   int item_no = -1;\n   bool highlight = false;\n-  gdb::unique_xmalloc_ptr<char> content;\n+  std::string content;\n };\n \n /* The TUI registers window.  */"
    }
  ]
}