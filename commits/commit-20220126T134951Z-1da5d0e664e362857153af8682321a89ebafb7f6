{
  "sha": "1da5d0e664e362857153af8682321a89ebafb7f6",
  "node_id": "C_kwDOANOeidoAKDFkYTVkMGU2NjRlMzYyODU3MTUzYWY4NjgyMzIxYTg5ZWJhZmI3ZjY",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-01-04T15:02:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-01-26T13:49:51Z"
    },
    "message": "Change how Python architecture and language are handled\n\nCurrently, gdb's Python layer captures the current architecture and\nlanguage when \"entering\" Python code.  This has some undesirable\neffects, and so this series changes how this is handled.\n\nFirst, there is code like this:\n\n  gdbpy_enter enter_py (python_gdbarch, python_language);\n\nThis is incorrect, because both of these are NULL when not otherwise\nassigned.  This can cause crashes in some cases -- I've added one to\nthe test suite.  (Note that this crasher is just an example, other\nones along the same lines are possible.)\n\nSecond, when the language is captured in this way, it means that\nPython code cannot affect the current language for its own purposes.\nIt's reasonable to want to write code like this:\n\n    gdb.execute('set language mumble')\n    ... stuff using the current language\n    gdb.execute('set language previous-value')\n\nHowever, this won't actually work, because the language is captured on\nentry.  I've added a test to show this as well.\n\nThis patch changes gdb to try to avoid capturing the current values.\nThe Python concept of the current gdbarch is only set in those few\ncases where a non-default value is computed or needed; and the\nlanguage is not captured at all -- instead, in the cases where it's\nrequired, the current language is temporarily changed.",
    "tree": {
      "sha": "b57ed08360a0351d66e4114c1d9b0d2b4cf95683",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b57ed08360a0351d66e4114c1d9b0d2b4cf95683"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1da5d0e664e362857153af8682321a89ebafb7f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1da5d0e664e362857153af8682321a89ebafb7f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1da5d0e664e362857153af8682321a89ebafb7f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1da5d0e664e362857153af8682321a89ebafb7f6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8a782bbf707e19d2da2159781789c4e4491dcdd1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a782bbf707e19d2da2159781789c4e4491dcdd1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8a782bbf707e19d2da2159781789c4e4491dcdd1"
    }
  ],
  "stats": {
    "total": 251,
    "additions": 146,
    "deletions": 105
  },
  "files": [
    {
      "sha": "2fc20376af86203bac0f942f810e107b0099a74a",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 13,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -858,7 +858,7 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t    const struct breakpoint_ops *ops =\n \t      breakpoint_ops_for_event_location (location.get (), false);\n \n-\t    create_breakpoint (python_gdbarch,\n+\t    create_breakpoint (gdbpy_enter::get_gdbarch (),\n \t\t\t       location.get (), NULL, -1, NULL, false,\n \t\t\t       0,\n \t\t\t       temporary_bp, type,\n@@ -954,15 +954,13 @@ gdbpy_breakpoint_cond_says_stop (const struct extension_language_defn *extlang,\n   int stop;\n   struct gdbpy_breakpoint_object *bp_obj = b->py_bp_object;\n   PyObject *py_bp = (PyObject *) bp_obj;\n-  struct gdbarch *garch;\n \n   if (bp_obj == NULL)\n     return EXT_LANG_BP_STOP_UNSET;\n \n   stop = -1;\n-  garch = b->gdbarch ? b->gdbarch : get_current_arch ();\n \n-  gdbpy_enter enter_py (garch, current_language);\n+  gdbpy_enter enter_py (b->gdbarch);\n \n   if (bp_obj->is_finish_bp)\n     bpfinishpy_pre_stop_hook (bp_obj);\n@@ -1005,15 +1003,13 @@ gdbpy_breakpoint_has_cond (const struct extension_language_defn *extlang,\n \t\t\t   struct breakpoint *b)\n {\n   PyObject *py_bp;\n-  struct gdbarch *garch;\n \n   if (b->py_bp_object == NULL)\n     return 0;\n \n   py_bp = (PyObject *) b->py_bp_object;\n-  garch = b->gdbarch ? b->gdbarch : get_current_arch ();\n \n-  gdbpy_enter enter_py (garch, current_language);\n+  gdbpy_enter enter_py (b->gdbarch);\n   return PyObject_HasAttrString (py_bp, stop_func);\n }\n \n@@ -1048,8 +1044,7 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n       return;\n     }\n \n-  struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n-  gdbpy_enter enter_py (garch, current_language);\n+  gdbpy_enter enter_py (bp->gdbarch);\n \n   if (bppy_pending_object)\n     {\n@@ -1099,8 +1094,7 @@ gdbpy_breakpoint_deleted (struct breakpoint *b)\n   bp = get_breakpoint (num);\n   if (bp)\n     {\n-      struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n-      gdbpy_enter enter_py (garch, current_language);\n+      gdbpy_enter enter_py (b->gdbarch);\n \n       gdbpy_ref<gdbpy_breakpoint_object> bp_obj (bp->py_bp_object);\n       if (bp_obj != NULL)\n@@ -1131,8 +1125,7 @@ gdbpy_breakpoint_modified (struct breakpoint *b)\n   bp = get_breakpoint (num);\n   if (bp)\n     {\n-      struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n-      gdbpy_enter enter_py (garch, current_language);\n+      gdbpy_enter enter_py (b->gdbarch);\n \n       PyObject *bp_obj = (PyObject *) bp->py_bp_object;\n       if (bp_obj)"
    },
    {
      "sha": "b51b05c95ad24d9862a36302df1bc9ece10c0ff8",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -90,7 +90,7 @@ cmdpy_dont_repeat (PyObject *self, PyObject *args)\n static void\n cmdpy_destroyer (struct cmd_list_element *self, void *context)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   /* Release our hold on the command object.  */\n   gdbpy_ref<cmdpy_object> cmd ((cmdpy_object *) context);\n@@ -104,7 +104,7 @@ cmdpy_function (const char *args, int from_tty, cmd_list_element *command)\n {\n   cmdpy_object *obj = (cmdpy_object *) command->context ();\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (! obj)\n     error (_(\"Invalid invocation of Python command object.\"));\n@@ -223,7 +223,7 @@ cmdpy_completer_handle_brkchars (struct cmd_list_element *command,\n \t\t\t\t completion_tracker &tracker,\n \t\t\t\t const char *text, const char *word)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   /* Calling our helper to obtain a reference to the PyObject of the Python\n      function.  */\n@@ -266,7 +266,7 @@ cmdpy_completer (struct cmd_list_element *command,\n \t\t completion_tracker &tracker,\n \t\t const char *text, const char *word)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   /* Calling our helper to obtain a reference to the PyObject of the Python\n      function.  */"
    },
    {
      "sha": "4cdd6abbf3d4304b0df68c503947553b2fe6697a",
      "filename": "gdb/python/py-connection.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-connection.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -161,7 +161,7 @@ connpy_connection_removed (process_stratum_target *target)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (!evregpy_no_listeners_p (gdb_py_events.connection_removed))\n     if (emit_connection_event (target, gdb_py_events.connection_removed) < 0)"
    },
    {
      "sha": "03bd49345060fa48dec07298af3e4b4d50d775fa",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -293,7 +293,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n       /* Set a breakpoint on the return address.  */\n       event_location_up location\n \t= new_address_location (get_frame_pc (prev_frame), NULL, 0);\n-      create_breakpoint (python_gdbarch,\n+      create_breakpoint (gdbpy_enter::get_gdbarch (),\n \t\t\t location.get (), NULL, thread, NULL, false,\n \t\t\t 0,\n \t\t\t 1 /*temp_flag*/,\n@@ -380,7 +380,7 @@ bpfinishpy_detect_out_scope_cb (struct breakpoint *b,\n static void\n bpfinishpy_handle_stop (struct bpstat *bs, int print_frame)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   for (breakpoint *bp : all_breakpoints_safe ())\n     bpfinishpy_detect_out_scope_cb (bp, bs == NULL ? NULL : bs->breakpoint_at);\n@@ -392,7 +392,7 @@ bpfinishpy_handle_stop (struct bpstat *bs, int print_frame)\n static void\n bpfinishpy_handle_exit (struct inferior *inf)\n {\n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   for (breakpoint *bp : all_breakpoints_safe ())\n     bpfinishpy_detect_out_scope_cb (bp, nullptr);"
    },
    {
      "sha": "7870374b3ec06079d1546dd277897cdc4b21a755",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -74,11 +74,11 @@ extract_sym (PyObject *obj, gdb::unique_xmalloc_ptr<char> *name,\n       if (*name == NULL)\n \treturn EXT_LANG_BT_ERROR;\n       /* If the API returns a string (and not a symbol), then there is\n-\tno symbol derived language available and the frame filter has\n-\teither overridden the symbol with a string, or supplied a\n-\tentirely synthetic symbol/value pairing.  In that case, use\n-\tpython_language.  */\n-      *language = python_language;\n+\t no symbol derived language available and the frame filter has\n+\t either overridden the symbol with a string, or supplied a\n+\t entirely synthetic symbol/value pairing.  In that case, use\n+\t the current language.  */\n+      *language = current_language;\n       *sym = NULL;\n       *sym_block = NULL;\n     }\n@@ -1157,7 +1157,7 @@ gdbpy_apply_frame_filter (const struct extension_language_defn *extlang,\n       return EXT_LANG_BT_NO_FILTERS;\n     }\n \n-  gdbpy_enter enter_py (gdbarch, current_language);\n+  gdbpy_enter enter_py (gdbarch);\n \n   /* When we're limiting the number of frames, be careful to request\n      one extra frame, so that we can print a message if there are more"
    },
    {
      "sha": "46f0c9ffd04dcd554f94a0bb39dfd93d3227d230",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -86,7 +86,7 @@ python_on_normal_stop (struct bpstat *bs, int print_frame)\n \n   stop_signal = inferior_thread ()->stop_signal ();\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (emit_stop_event (bs, stop_signal) < 0)\n     gdbpy_print_stack ();\n@@ -98,7 +98,7 @@ python_on_resume (ptid_t ptid)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (emit_continue_event (ptid) < 0)\n     gdbpy_print_stack ();\n@@ -110,7 +110,7 @@ python_on_resume (ptid_t ptid)\n static void\n python_on_inferior_call_pre (ptid_t thread, CORE_ADDR address)\n {\n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (emit_inferior_call_event (INFERIOR_CALL_PRE, thread, address) < 0)\n     gdbpy_print_stack ();\n@@ -122,7 +122,7 @@ python_on_inferior_call_pre (ptid_t thread, CORE_ADDR address)\n static void\n python_on_inferior_call_post (ptid_t thread, CORE_ADDR address)\n {\n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (emit_inferior_call_event (INFERIOR_CALL_POST, thread, address) < 0)\n     gdbpy_print_stack ();\n@@ -135,7 +135,7 @@ python_on_inferior_call_post (ptid_t thread, CORE_ADDR address)\n static void\n python_on_memory_change (struct inferior *inferior, CORE_ADDR addr, ssize_t len, const bfd_byte *data)\n {\n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (emit_memory_changed_event (addr, len) < 0)\n     gdbpy_print_stack ();\n@@ -148,7 +148,7 @@ python_on_memory_change (struct inferior *inferior, CORE_ADDR addr, ssize_t len,\n static void\n python_on_register_change (struct frame_info *frame, int regnum)\n {\n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (emit_register_changed_event (frame, regnum) < 0)\n     gdbpy_print_stack ();\n@@ -162,7 +162,7 @@ python_inferior_exit (struct inferior *inf)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (target_gdbarch (), current_language);\n+  gdbpy_enter enter_py (target_gdbarch ());\n \n   if (inf->has_exit_code)\n     exit_code = &inf->exit_code;\n@@ -183,8 +183,7 @@ python_new_objfile (struct objfile *objfile)\n \n   gdbpy_enter enter_py (objfile != NULL\n \t\t\t? objfile->arch ()\n-\t\t\t: target_gdbarch (),\n-\t\t\tcurrent_language);\n+\t\t\t: target_gdbarch ());\n \n   if (objfile == NULL)\n     {\n@@ -237,7 +236,7 @@ python_new_inferior (struct inferior *inf)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n \n   if (evregpy_no_listeners_p (gdb_py_events.new_inferior))\n     return;\n@@ -265,7 +264,7 @@ python_inferior_deleted (struct inferior *inf)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n \n   if (evregpy_no_listeners_p (gdb_py_events.inferior_deleted))\n     return;\n@@ -312,7 +311,7 @@ add_thread_object (struct thread_info *tp)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<thread_object> thread_obj = create_thread_object (tp);\n   if (thread_obj == NULL)\n@@ -348,7 +347,7 @@ delete_thread_object (struct thread_info *tp, int ignore)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<inferior_object> inf_obj = inferior_to_inferior_object (tp->inf);\n   if (inf_obj == NULL)\n@@ -792,7 +791,7 @@ py_free_inferior (struct inferior *inf, void *datum)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n   gdbpy_ref<inferior_object> inf_obj ((inferior_object *) datum);\n \n   inf_obj->inferior = NULL;"
    },
    {
      "sha": "74cc0fb46bdccfa5b00b628a93db450d93118b8b",
      "filename": "gdb/python/py-membuf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-membuf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-membuf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-membuf.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -83,7 +83,8 @@ mbpy_str (PyObject *self)\n \n   return PyString_FromFormat (_(\"Memory buffer for address %s, \\\n which is %s bytes long.\"),\n-\t\t\t      paddress (python_gdbarch, membuf_obj->addr),\n+\t\t\t      paddress (gdbpy_enter::get_gdbarch (),\n+\t\t\t\t\tmembuf_obj->addr),\n \t\t\t      pulongest (membuf_obj->length));\n }\n "
    },
    {
      "sha": "6055a42260b8054b3dd24a16167f4b3d3990af73",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -661,7 +661,7 @@ gdbpy_lookup_objfile (PyObject *self, PyObject *args, PyObject *kw)\n static void\n py_free_objfile (struct objfile *objfile, void *datum)\n {\n-  gdbpy_enter enter_py (objfile->arch (), current_language);\n+  gdbpy_enter enter_py (objfile->arch ());\n   gdbpy_ref<objfile_object> object ((objfile_object *) datum);\n   object->objfile = NULL;\n }"
    },
    {
      "sha": "24678bc8a5e7027b88bbfedb823093c3691b1cd3",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -396,7 +396,7 @@ get_set_value (const char *args, int from_tty,\n   PyObject *obj = (PyObject *) c->context ();\n   gdb::unique_xmalloc_ptr<char> set_doc_string;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   gdbpy_ref<> set_doc_func (PyString_FromString (\"get_set_string\"));\n \n   if (set_doc_func == NULL)\n@@ -431,7 +431,7 @@ get_show_value (struct ui_file *file, int from_tty,\n   PyObject *obj = (PyObject *) c->context ();\n   gdb::unique_xmalloc_ptr<char> show_doc_string;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   gdbpy_ref<> show_doc_func (PyString_FromString (\"get_show_string\"));\n \n   if (show_doc_func == NULL)"
    },
    {
      "sha": "b27ebf4a6665d53190cfbab635d4f84da9988f33",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -472,7 +472,7 @@ py_free_pspace (struct program_space *pspace, void *datum)\n      being deleted.  */\n   struct gdbarch *arch = target_gdbarch ();\n \n-  gdbpy_enter enter_py (arch, current_language);\n+  gdbpy_enter enter_py (arch);\n   gdbpy_ref<pspace_object> object ((pspace_object *) datum);\n   object->pspace = NULL;\n }"
    },
    {
      "sha": "6a92251a7056853edc61fd25a5cfdcd5e83afa27",
      "filename": "gdb/python/py-tui.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-tui.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -155,7 +155,7 @@ gdbpy_tui_window::is_valid () const\n \n tui_py_window::~tui_py_window ()\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   /* This can be null if the user-provided Python construction\n      function failed.  */\n@@ -181,7 +181,7 @@ tui_py_window::rerender ()\n {\n   tui_win_info::rerender ();\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   int h = viewport_height ();\n   int w = viewport_width ();\n@@ -206,7 +206,7 @@ tui_py_window::rerender ()\n void\n tui_py_window::do_scroll_horizontal (int num_to_scroll)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (PyObject_HasAttrString (m_window.get (), \"hscroll\"))\n     {\n@@ -220,7 +220,7 @@ tui_py_window::do_scroll_horizontal (int num_to_scroll)\n void\n tui_py_window::do_scroll_vertical (int num_to_scroll)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (PyObject_HasAttrString (m_window.get (), \"vscroll\"))\n     {\n@@ -234,7 +234,7 @@ tui_py_window::do_scroll_vertical (int num_to_scroll)\n void\n tui_py_window::click (int mouse_x, int mouse_y, int mouse_button)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (PyObject_HasAttrString (m_window.get (), \"click\"))\n     {\n@@ -285,7 +285,7 @@ class gdbpy_tui_window_maker\n \n   gdbpy_tui_window_maker (const gdbpy_tui_window_maker &other)\n   {\n-    gdbpy_enter enter_py (get_current_arch (), current_language);\n+    gdbpy_enter enter_py;\n     m_constr = other.m_constr;\n   }\n \n@@ -297,7 +297,7 @@ class gdbpy_tui_window_maker\n \n   gdbpy_tui_window_maker &operator= (const gdbpy_tui_window_maker &other)\n   {\n-    gdbpy_enter enter_py (get_current_arch (), current_language);\n+    gdbpy_enter enter_py;\n     m_constr = other.m_constr;\n     return *this;\n   }\n@@ -312,14 +312,14 @@ class gdbpy_tui_window_maker\n \n gdbpy_tui_window_maker::~gdbpy_tui_window_maker ()\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   m_constr.reset (nullptr);\n }\n \n tui_win_info *\n gdbpy_tui_window_maker::operator() (const char *win_name)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<gdbpy_tui_window> wrapper\n     (PyObject_New (gdbpy_tui_window, &gdbpy_tui_window_object_type));"
    },
    {
      "sha": "e71e635ecdfdfdefa37db9e608d7d8212d719f7b",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -799,7 +799,7 @@ typy_lookup_typename (const char *type_name, const struct block *block)\n       else if (startswith (type_name, \"enum \"))\n \ttype = lookup_enum (type_name + 5, NULL);\n       else\n-\ttype = lookup_typename (python_language,\n+\ttype = lookup_typename (current_language,\n \t\t\t\ttype_name, block, 0);\n     }\n   catch (const gdb_exception &except)\n@@ -1089,7 +1089,7 @@ save_objfile_types (struct objfile *objfile, void *datum)\n \n   /* This prevents another thread from freeing the objects we're\n      operating on.  */\n-  gdbpy_enter enter_py (objfile->arch (), current_language);\n+  gdbpy_enter enter_py (objfile->arch ());\n \n   htab_up copied_types = create_copied_types_hash (objfile);\n "
    },
    {
      "sha": "36f42cbcac39d5e5fb9cc7c4889f778ceb670e24",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -524,7 +524,7 @@ pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n   struct gdbarch *gdbarch = (struct gdbarch *) (self->unwind_data);\n   cached_frame_info *cached_frame;\n \n-  gdbpy_enter enter_py (gdbarch, current_language);\n+  gdbpy_enter enter_py (gdbarch);\n \n   pyuw_debug_printf (\"frame=%d, sp=%s, pc=%s\",\n \t\t     frame_relative_level (this_frame),"
    },
    {
      "sha": "73c860bcc96cad21af6bc83764358dfd596983a4",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -93,8 +93,9 @@ unicode_to_encoded_python_string (PyObject *unicode_str, const char *charset)\n gdb::unique_xmalloc_ptr<char>\n unicode_to_target_string (PyObject *unicode_str)\n {\n-  return unicode_to_encoded_string (unicode_str,\n-\t\t\t\t    target_charset (python_gdbarch));\n+  return (unicode_to_encoded_string\n+\t  (unicode_str,\n+\t   target_charset (gdbpy_enter::get_gdbarch ())));\n }\n \n /* Returns a PyObject with the contents of the given unicode string\n@@ -104,8 +105,9 @@ unicode_to_target_string (PyObject *unicode_str)\n static gdbpy_ref<>\n unicode_to_target_python_string (PyObject *unicode_str)\n {\n-  return unicode_to_encoded_python_string (unicode_str,\n-\t\t\t\t\t   target_charset (python_gdbarch));\n+  return (unicode_to_encoded_python_string\n+\t  (unicode_str,\n+\t   target_charset (gdbpy_enter::get_gdbarch ())));\n }\n \n /* Converts a python string (8-bit or unicode) to a target string in"
    },
    {
      "sha": "d6ceb54fed8b3adc3e0f3616ec8881b547ea8ef9",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -35,23 +35,26 @@\n    GDB (which uses target arithmetic).  */\n \n /* Python's integer type corresponds to C's long type.  */\n-#define builtin_type_pyint builtin_type (python_gdbarch)->builtin_long\n+#define builtin_type_pyint \\\n+  builtin_type (gdbpy_enter::get_gdbarch ())->builtin_long\n \n /* Python's float type corresponds to C's double type.  */\n-#define builtin_type_pyfloat builtin_type (python_gdbarch)->builtin_double\n+#define builtin_type_pyfloat \\\n+  builtin_type (gdbpy_enter::get_gdbarch ())->builtin_double\n \n /* Python's long type corresponds to C's long long type.  */\n-#define builtin_type_pylong builtin_type (python_gdbarch)->builtin_long_long\n+#define builtin_type_pylong \\\n+  builtin_type (gdbpy_enter::get_gdbarch ())->builtin_long_long\n \n /* Python's long type corresponds to C's long long type.  Unsigned version.  */\n #define builtin_type_upylong builtin_type \\\n-  (python_gdbarch)->builtin_unsigned_long_long\n+  (gdbpy_enter::get_gdbarch ())->builtin_unsigned_long_long\n \n #define builtin_type_pybool \\\n-  language_bool_type (python_language, python_gdbarch)\n+  language_bool_type (current_language, gdbpy_enter::get_gdbarch ())\n \n #define builtin_type_pychar \\\n-  language_string_char_type (python_language, python_gdbarch)\n+  language_string_char_type (current_language, gdbpy_enter::get_gdbarch ())\n \n struct value_object {\n   PyObject_HEAD\n@@ -754,7 +757,7 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n   try\n     {\n       common_val_print (((value_object *) self)->value, &stb, 0,\n-\t\t\t&opts, python_language);\n+\t\t\t&opts, current_language);\n     }\n   catch (const gdb_exception &except)\n     {\n@@ -1160,7 +1163,7 @@ valpy_str (PyObject *self)\n   try\n     {\n       common_val_print (((value_object *) self)->value, &stb, 0,\n-\t\t\t&opts, python_language);\n+\t\t\t&opts, current_language);\n     }\n   catch (const gdb_exception &except)\n     {\n@@ -2025,7 +2028,7 @@ gdbpy_convenience_variable (PyObject *self, PyObject *args)\n \n       if (var != NULL)\n \t{\n-\t  res_val = value_of_internalvar (python_gdbarch, var);\n+\t  res_val = value_of_internalvar (gdbpy_enter::get_gdbarch (), var);\n \t  if (value_type (res_val)->code () == TYPE_CODE_VOID)\n \t    res_val = NULL;\n \t}"
    },
    {
      "sha": "9d5824962b1b403c0b175b5e47cbdaa9d922cabc",
      "filename": "gdb/python/py-xmethods.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-xmethods.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/py-xmethods.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-xmethods.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -69,7 +69,7 @@ struct python_xmethod_worker : xmethod_worker\n python_xmethod_worker::~python_xmethod_worker ()\n {\n   /* We don't do much here, but we still need the GIL.  */\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   Py_DECREF (m_py_worker);\n   Py_DECREF (m_this_type);\n@@ -122,7 +122,7 @@ gdbpy_get_matching_xmethod_workers\n {\n   gdb_assert (obj_type != NULL && method_name != NULL);\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<> py_type (type_to_type_object (obj_type));\n   if (py_type == NULL)\n@@ -294,7 +294,7 @@ python_xmethod_worker::do_get_arg_types (std::vector<type *> *arg_types)\n {\n   /* The gdbpy_enter object needs to be placed first, so that it's the last to\n      be destroyed.  */\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   struct type *obj_type;\n   int i = 1, arg_count;\n   gdbpy_ref<> list_iter;\n@@ -410,7 +410,7 @@ python_xmethod_worker::do_get_result_type (value *obj,\n   struct type *obj_type, *this_type;\n   int i;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   /* First see if there is a get_result_type method.\n      If not this could be an old xmethod (pre 7.9.1).  */\n@@ -502,7 +502,7 @@ struct value *\n python_xmethod_worker::invoke (struct value *obj,\n \t\t\t       gdb::array_view<value *> args)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   int i;\n   struct type *obj_type, *this_type;\n@@ -580,7 +580,7 @@ python_xmethod_worker::invoke (struct value *obj,\n     }\n   else\n     {\n-      res = allocate_value (lookup_typename (python_language,\n+      res = allocate_value (lookup_typename (current_language,\n \t\t\t\t\t     \"void\", NULL, 0));\n     }\n "
    },
    {
      "sha": "ccea5c4a9cd94d97d67a92291b3fbf9dfb78742f",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -625,14 +625,36 @@ class gdbpy_enter\n {\n  public:\n \n-  gdbpy_enter (struct gdbarch *gdbarch, const struct language_defn *language);\n+  /* Set the ambient Python architecture to GDBARCH and the language\n+     to LANGUAGE.  If GDBARCH is nullptr, then the architecture will\n+     be computed, when needed, using get_current_arch; see the\n+     get_gdbarch method.  If LANGUAGE is not nullptr, then the current\n+     language at time of construction will be saved (to be restored on\n+     destruction), and the current language will be set to\n+     LANGUAGE.  */\n+  explicit gdbpy_enter (struct gdbarch *gdbarch = nullptr,\n+\t\t\tconst struct language_defn *language = nullptr);\n \n   ~gdbpy_enter ();\n \n   DISABLE_COPY_AND_ASSIGN (gdbpy_enter);\n \n+  /* Return the current gdbarch, as known to the Python layer.  This\n+     is either python_gdbarch (which comes from the most recent call\n+     to the gdbpy_enter constructor), or, if that is nullptr, the\n+     result of get_current_arch.  */\n+  static struct gdbarch *get_gdbarch ();\n+\n+  /* Called only during gdb shutdown.  This sets python_gdbarch to an\n+     acceptable value.  */\n+  static void finalize ();\n+\n  private:\n \n+  /* The current gdbarch, according to Python.  This can be\n+     nullptr.  */\n+  static struct gdbarch *python_gdbarch;\n+\n   struct active_ext_lang_state *m_previous_active;\n   PyGILState_STATE m_state;\n   struct gdbarch *m_gdbarch;\n@@ -680,9 +702,6 @@ class gdbpy_allow_threads\n   PyThreadState *m_save;\n };\n \n-extern struct gdbarch *python_gdbarch;\n-extern const struct language_defn *python_language;\n-\n /* Use this after a TRY_EXCEPT to throw the appropriate Python\n    exception.  */\n #define GDB_PY_HANDLE_EXCEPTION(Exception)\t\\"
    },
    {
      "sha": "7ddc170904cce2baf72fff4c41b78a79b096e128",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 38,
      "deletions": 24,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -192,13 +192,12 @@ const struct extension_language_defn extension_language_python =\n \n /* Architecture and language to be used in callbacks from\n    the Python interpreter.  */\n-struct gdbarch *python_gdbarch;\n-const struct language_defn *python_language;\n+struct gdbarch *gdbpy_enter::python_gdbarch;\n \n gdbpy_enter::gdbpy_enter  (struct gdbarch *gdbarch,\n \t\t\t   const struct language_defn *language)\n : m_gdbarch (python_gdbarch),\n-  m_language (python_language)\n+  m_language (language == nullptr ? nullptr : current_language)\n {\n   /* We should not ever enter Python unless initialized.  */\n   if (!gdb_python_initialized)\n@@ -209,7 +208,8 @@ gdbpy_enter::gdbpy_enter  (struct gdbarch *gdbarch,\n   m_state = PyGILState_Ensure ();\n \n   python_gdbarch = gdbarch;\n-  python_language = language;\n+  if (language != nullptr)\n+    set_language (language->la_language);\n \n   /* Save it and ensure ! PyErr_Occurred () afterwards.  */\n   m_error.emplace ();\n@@ -228,12 +228,27 @@ gdbpy_enter::~gdbpy_enter ()\n   m_error->restore ();\n \n   python_gdbarch = m_gdbarch;\n-  python_language = m_language;\n+  if (m_language != nullptr)\n+    set_language (m_language->la_language);\n \n   restore_active_ext_lang (m_previous_active);\n   PyGILState_Release (m_state);\n }\n \n+struct gdbarch *\n+gdbpy_enter::get_gdbarch ()\n+{\n+  if (python_gdbarch != nullptr)\n+    return python_gdbarch;\n+  return get_current_arch ();\n+}\n+\n+void\n+gdbpy_enter::finalize ()\n+{\n+  python_gdbarch = target_gdbarch ();\n+}\n+\n /* A helper class to save and restore the GIL, but without touching\n    the other globals that are handled by gdbpy_enter.  */\n \n@@ -318,7 +333,7 @@ python_interactive_command (const char *arg, int from_tty)\n \n   arg = skip_spaces (arg);\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (arg && *arg)\n     {\n@@ -412,7 +427,7 @@ gdbpy_eval_from_control_command (const struct extension_language_defn *extlang,\n   if (cmd->body_list_1 != nullptr)\n     error (_(\"Invalid \\\"python\\\" block structure.\"));\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   std::string script = compute_python_string (cmd->body_list_0.get ());\n   ret = PyRun_SimpleString (script.c_str ());\n@@ -425,7 +440,7 @@ gdbpy_eval_from_control_command (const struct extension_language_defn *extlang,\n static void\n python_command (const char *arg, int from_tty)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n \n@@ -556,7 +571,7 @@ gdbpy_parameter (PyObject *self, PyObject *args)\n static PyObject *\n gdbpy_target_charset (PyObject *self, PyObject *args)\n {\n-  const char *cset = target_charset (python_gdbarch);\n+  const char *cset = target_charset (gdbpy_enter::get_gdbarch ());\n \n   return PyUnicode_Decode (cset, strlen (cset), host_charset (), NULL);\n }\n@@ -566,7 +581,7 @@ gdbpy_target_charset (PyObject *self, PyObject *args)\n static PyObject *\n gdbpy_target_wide_charset (PyObject *self, PyObject *args)\n {\n-  const char *cset = target_wide_charset (python_gdbarch);\n+  const char *cset = target_wide_charset (gdbpy_enter::get_gdbarch ());\n \n   return PyUnicode_Decode (cset, strlen (cset), host_charset (), NULL);\n }\n@@ -867,7 +882,7 @@ gdbpy_decode_line (PyObject *self, PyObject *args)\n     }\n \n   if (arg != NULL)\n-    location = string_to_event_location_basic (&arg, python_language,\n+    location = string_to_event_location_basic (&arg, current_language,\n \t\t\t\t\t       symbol_name_match_type::WILD);\n \n   std::vector<symtab_and_line> decoded_sals;\n@@ -972,7 +987,7 @@ static void\n gdbpy_source_script (const struct extension_language_defn *extlang,\n \t\t     FILE *file, const char *filename)\n {\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   python_run_simple_file (file, filename);\n }\n \n@@ -1011,7 +1026,7 @@ struct gdbpy_event\n \n   void operator() ()\n   {\n-    gdbpy_enter enter_py (get_current_arch (), current_language);\n+    gdbpy_enter enter_py;\n \n     gdbpy_ref<> call_result (PyObject_CallObject (m_func, NULL));\n     if (call_result == NULL)\n@@ -1060,7 +1075,7 @@ gdbpy_before_prompt_hook (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return EXT_LANG_RC_NOP;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (!evregpy_no_listeners_p (gdb_py_events.before_prompt)\n       && evpy_emit_event (NULL, gdb_py_events.before_prompt) < 0)\n@@ -1135,7 +1150,7 @@ gdbpy_colorize (const std::string &filename, const std::string &contents)\n   if (!gdb_python_initialized)\n     return {};\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (gdb_python_module == nullptr\n       || !PyObject_HasAttrString (gdb_python_module, \"colorize\"))\n@@ -1400,7 +1415,7 @@ gdbpy_source_objfile_script (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (objfile->arch (), current_language);\n+  gdbpy_enter enter_py (objfile->arch ());\n   scoped_restore restire_current_objfile\n     = make_scoped_restore (&gdbpy_current_objfile, objfile);\n \n@@ -1421,7 +1436,7 @@ gdbpy_execute_objfile_script (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (objfile->arch (), current_language);\n+  gdbpy_enter enter_py (objfile->arch ());\n   scoped_restore restire_current_objfile\n     = make_scoped_restore (&gdbpy_current_objfile, objfile);\n \n@@ -1453,7 +1468,7 @@ gdbpy_start_type_printers (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<> type_module (PyImport_ImportModule (\"gdb.types\"));\n   if (type_module == NULL)\n@@ -1498,7 +1513,7 @@ gdbpy_apply_type_printers (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return EXT_LANG_RC_NOP;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   gdbpy_ref<> type_obj (type_to_type_object (type));\n   if (type_obj == NULL)\n@@ -1561,7 +1576,7 @@ gdbpy_free_type_printers (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n   Py_DECREF (printers);\n }\n \n@@ -1696,8 +1711,7 @@ finalize_python (void *ignore)\n   previous_active = set_active_ext_lang (&extension_language_python);\n \n   (void) PyGILState_Ensure ();\n-  python_gdbarch = target_gdbarch ();\n-  python_language = current_language;\n+  gdbpy_enter::finalize ();\n \n   Py_Finalize ();\n \n@@ -1756,7 +1770,7 @@ gdbpy_gdb_exiting (int exit_code)\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_enter enter_py;\n \n   if (emit_exiting_event (exit_code) < 0)\n     gdbpy_print_stack ();\n@@ -2174,7 +2188,7 @@ gdbpy_initialize (const struct extension_language_defn *extlang)\n   if (!do_start_initialization () && PyErr_Occurred ())\n     gdbpy_print_stack ();\n \n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  gdbpy_enter enter_py;\n \n   if (!do_initialize (extlang))\n     {"
    },
    {
      "sha": "aa78a1540cf8f2d99cbce781d4b3b71b1bb92b34",
      "filename": "gdb/testsuite/gdb.python/py-inferior.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/testsuite/gdb.python/py-inferior.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/testsuite/gdb.python/py-inferior.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-inferior.exp?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -220,13 +220,15 @@ with_test_prefix \"is_valid\" {\n     gdb_test \"python print (inf_list\\[0\\].is_valid())\" \"True\" \\\n \t\"check inferior validity 1\"\n \n+    # The \"dummy\" line below used to cause a gdb crash.\n     gdb_test_multiline \"install new inferior event handler\" \\\n \t\"python\" \"\" \\\n \t\"my_inferior_count = 1\" \"\" \\\n \t\"def new_inf_handler(evt):\" \"\" \\\n \t\"  global my_inferior_count\" \"\" \\\n \t\"  if evt.inferior is not None:\" \"\" \\\n \t\"    my_inferior_count = my_inferior_count + 1\" \"\" \\\n+\t\"    dummy = gdb.Value(True)\" \"\" \\\n \t\"gdb.events.new_inferior.connect(new_inf_handler)\" \"\" \\\n \t\"end\" \"\"\n     gdb_test_multiline \"install inferior deleted event handler\" \\"
    },
    {
      "sha": "534a5fd418e7250b8ad24df3b07d5771c1fa33f3",
      "filename": "gdb/testsuite/gdb.python/py-lookup-type.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/testsuite/gdb.python/py-lookup-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1da5d0e664e362857153af8682321a89ebafb7f6/gdb/testsuite/gdb.python/py-lookup-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-lookup-type.exp?ref=1da5d0e664e362857153af8682321a89ebafb7f6",
      "patch": "@@ -54,3 +54,11 @@ test_lookup_type \"opencl\" \"ushort\"\n test_lookup_type \"objective-c\" \"char\"\n \n test_lookup_type \"pascal\" \"char\"\n+\n+# Ensure that the language can be changed from within Python and still\n+# affect the results.\n+gdb_test_multiline \"look up ada type from another language\" \\\n+    \"python\" \"\" \\\n+    \"gdb.execute('set language ada')\" \"\" \\\n+    \"print(gdb.lookup_type('character'))\" \"\" \\\n+    \"end\" \"character\""
    }
  ]
}