{
  "sha": "a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTdhM2FlNWMwMmQ2ZDg3MTFjMmMzMzZiOWI4MDlkMDUyMTFmYzQ5Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:45:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:51:58Z"
    },
    "message": "Store the comp_unit instead of the FDE table\n\nThis changes the DWARF frame code to store the comp_unit on the\nobjfile, rather than storing the FDE table.  It also changes the\ncomp_unit to be heap-allocated using \"new\".\n\nThis change makes it simpler for a later patch to add a field to the\ncomp_unit, and to have deallaction work properly.  This in turn is\nimportant for making the frame data be independent of the objfile.\n\ngdb/ChangeLog\n2020-02-12  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/frame.c (struct comp_unit): Add initializers and\n\tconstructor.\n\t(dwarf2_frame_objfile_data): Store a comp_unit.\n\t(dwarf2_frame_find_fde): Update.\n\t(dwarf2_build_frame_info): Use \"new\".",
    "tree": {
      "sha": "aa25855ca446dd5214fc5672617cd4dd17f951e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa25855ca446dd5214fc5672617cd4dd17f951e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7a3ae5c02d6d8711c2c336b9b809d05211fc497/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9d654186220b958b63185603675e69dd9316067",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9d654186220b958b63185603675e69dd9316067",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a9d654186220b958b63185603675e69dd9316067"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 34,
    "deletions": 25
  },
  "files": [
    {
      "sha": "1ac98840b0ccd4add6d0bbea3b8c954ad61e5f72",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7a3ae5c02d6d8711c2c336b9b809d05211fc497/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7a3ae5c02d6d8711c2c336b9b809d05211fc497/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/frame.c (struct comp_unit): Add initializers and\n+\tconstructor.\n+\t(dwarf2_frame_objfile_data): Store a comp_unit.\n+\t(dwarf2_frame_find_fde): Update.\n+\t(dwarf2_build_frame_info): Use \"new\".\n+\n 2020-02-12  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/frame.c (struct dwarf2_fde_table): Remove."
    },
    {
      "sha": "b08e792a8a146eaf154ed77a09a147a6f2e36fd5",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 26,
      "deletions": 25,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7a3ae5c02d6d8711c2c336b9b809d05211fc497/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7a3ae5c02d6d8711c2c336b9b809d05211fc497/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=a7a3ae5c02d6d8711c2c336b9b809d05211fc497",
      "patch": "@@ -136,25 +136,34 @@ typedef std::vector<dwarf2_fde *> dwarf2_fde_table;\n \n struct comp_unit\n {\n+  comp_unit (struct objfile *objf)\n+    : abfd (objf->obfd),\n+      objfile (objf)\n+  {\n+  }\n+\n   /* Keep the bfd convenient.  */\n   bfd *abfd;\n \n   struct objfile *objfile;\n \n   /* Pointer to the .debug_frame section loaded into memory.  */\n-  const gdb_byte *dwarf_frame_buffer;\n+  const gdb_byte *dwarf_frame_buffer = nullptr;\n \n   /* Length of the loaded .debug_frame section.  */\n-  bfd_size_type dwarf_frame_size;\n+  bfd_size_type dwarf_frame_size = 0;\n \n   /* Pointer to the .debug_frame section.  */\n-  asection *dwarf_frame_section;\n+  asection *dwarf_frame_section = nullptr;\n \n   /* Base for DW_EH_PE_datarel encodings.  */\n-  bfd_vma dbase;\n+  bfd_vma dbase = 0;\n \n   /* Base for DW_EH_PE_textrel encodings.  */\n-  bfd_vma tbase;\n+  bfd_vma tbase = 0;\n+\n+  /* The FDE table.  */\n+  dwarf2_fde_table fde_table;\n };\n \n static struct dwarf2_fde *dwarf2_frame_find_fde (CORE_ADDR *pc,\n@@ -1467,7 +1476,7 @@ dwarf2_frame_cfa (struct frame_info *this_frame)\n   return get_frame_base (this_frame);\n }\n \f\n-static const struct objfile_key<dwarf2_fde_table> dwarf2_frame_objfile_data;\n+static const struct objfile_key<comp_unit> dwarf2_frame_objfile_data;\n \n \f\n \n@@ -1630,18 +1639,18 @@ dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n {\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      dwarf2_fde_table *fde_table;\n       CORE_ADDR offset;\n       CORE_ADDR seek_pc;\n \n-      fde_table = dwarf2_frame_objfile_data.get (objfile);\n-      if (fde_table == NULL)\n+      comp_unit *unit = dwarf2_frame_objfile_data.get (objfile);\n+      if (unit == NULL)\n \t{\n \t  dwarf2_build_frame_info (objfile);\n-\t  fde_table = dwarf2_frame_objfile_data.get (objfile);\n+\t  unit = dwarf2_frame_objfile_data.get (objfile);\n \t}\n-      gdb_assert (fde_table != NULL);\n+      gdb_assert (unit != NULL);\n \n+      dwarf2_fde_table *fde_table = &unit->fde_table;\n       if (fde_table->empty ())\n \tcontinue;\n \n@@ -2116,18 +2125,12 @@ fde_is_less_than (const dwarf2_fde *aa, const dwarf2_fde *bb)\n void\n dwarf2_build_frame_info (struct objfile *objfile)\n {\n-  struct comp_unit *unit;\n   const gdb_byte *frame_ptr;\n   dwarf2_cie_table cie_table;\n   dwarf2_fde_table fde_table;\n-  dwarf2_fde_table *fde_table2;\n \n   /* Build a minimal decoding of the DWARF2 compilation unit.  */\n-  unit = XOBNEW (&objfile->objfile_obstack, comp_unit);\n-  unit->abfd = objfile->obfd;\n-  unit->objfile = objfile;\n-  unit->dbase = 0;\n-  unit->tbase = 0;\n+  std::unique_ptr<comp_unit> unit (new comp_unit (objfile));\n \n   if (objfile->separate_debug_objfile_backlink == NULL)\n     {\n@@ -2159,7 +2162,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t    {\n \t      frame_ptr = unit->dwarf_frame_buffer;\n \t      while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n-\t\tframe_ptr = decode_frame_entry (unit, frame_ptr, 1,\n+\t\tframe_ptr = decode_frame_entry (unit.get (), frame_ptr, 1,\n \t\t\t\t\t\tcie_table, &fde_table,\n \t\t\t\t\t\tEH_CIE_OR_FDE_TYPE_ID);\n \t    }\n@@ -2189,7 +2192,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t{\n \t  frame_ptr = unit->dwarf_frame_buffer;\n \t  while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n-\t    frame_ptr = decode_frame_entry (unit, frame_ptr, 0,\n+\t    frame_ptr = decode_frame_entry (unit.get (), frame_ptr, 0,\n \t\t\t\t\t    cie_table, &fde_table,\n \t\t\t\t\t    EH_CIE_OR_FDE_TYPE_ID);\n \t}\n@@ -2202,8 +2205,6 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t}\n     }\n \n-  fde_table2 = new dwarf2_fde_table;\n-\n   struct dwarf2_fde *fde_prev = NULL;\n   struct dwarf2_fde *first_non_zero_fde = NULL;\n \n@@ -2246,12 +2247,12 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t  && fde_prev->initial_location == fde->initial_location)\n \tcontinue;\n \n-      fde_table2->push_back (fde);\n+      unit->fde_table.push_back (fde);\n       fde_prev = fde;\n     }\n-  fde_table2->shrink_to_fit ();\n+  unit->fde_table.shrink_to_fit ();\n \n-  dwarf2_frame_objfile_data.set (objfile, fde_table2);\n+  dwarf2_frame_objfile_data.set (objfile, unit.release ());\n }\n \n /* Handle 'maintenance show dwarf unwinders'.  */"
    }
  ]
}