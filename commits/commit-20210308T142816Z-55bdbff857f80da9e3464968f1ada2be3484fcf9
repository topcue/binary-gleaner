{
  "sha": "55bdbff857f80da9e3464968f1ada2be3484fcf9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTViZGJmZjg1N2Y4MGRhOWUzNDY0OTY4ZjFhZGEyYmUzNDg0ZmNmOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:16Z"
    },
    "message": "Introduce register_operation\n\nThis adds class register_operation, which implements OP_REGISTER.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class register_operation): New.\n\t* eval.c (eval_op_register): No longer static.\n\t* ax-gdb.c (register_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "64222256f769da20623e489abd09751792736747",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/64222256f769da20623e489abd09751792736747"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55bdbff857f80da9e3464968f1ada2be3484fcf9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55bdbff857f80da9e3464968f1ada2be3484fcf9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55bdbff857f80da9e3464968f1ada2be3484fcf9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55bdbff857f80da9e3464968f1ada2be3484fcf9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "247d935b83da28edeb0894f5425190d92a2e786a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/247d935b83da28edeb0894f5425190d92a2e786a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/247d935b83da28edeb0894f5425190d92a2e786a"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 61,
    "deletions": 1
  },
  "files": [
    {
      "sha": "0633260cb5a67708b0cd588f6182fd4816540af2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=55bdbff857f80da9e3464968f1ada2be3484fcf9",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class register_operation): New.\n+\t* eval.c (eval_op_register): No longer static.\n+\t* ax-gdb.c (register_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class last_operation): New."
    },
    {
      "sha": "5ffe5a00da15edb912bc227820399f4c7f154cf0",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=55bdbff857f80da9e3464968f1ada2be3484fcf9",
      "patch": "@@ -2341,6 +2341,30 @@ var_msym_value_operation::do_generate_ax (struct expression *exp,\n     }\n }\n \n+void\n+register_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t    struct agent_expr *ax,\n+\t\t\t\t    struct axs_value *value,\n+\t\t\t\t    struct type *cast_type)\n+{\n+  const char *name = std::get<0> (m_storage).c_str ();\n+  int len = std::get<0> (m_storage).size ();\n+  int reg;\n+\n+  reg = user_reg_map_name_to_regnum (ax->gdbarch, name, len);\n+  if (reg == -1)\n+    internal_error (__FILE__, __LINE__,\n+\t\t    _(\"Register $%s not available\"), name);\n+  /* No support for tracing user registers yet.  */\n+  if (reg >= gdbarch_num_cooked_regs (ax->gdbarch))\n+    error (_(\"'%s' is a user-register; \"\n+\t     \"GDB cannot yet trace user-register contents.\"),\n+\t   name);\n+  value->kind = axs_lvalue_register;\n+  value->u.reg = reg;\n+  value->type = register_type (ax->gdbarch, reg);\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "4601c92ed5f4c1751c3ad2b9c0e66515acdc10bc",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=55bdbff857f80da9e3464968f1ada2be3484fcf9",
      "patch": "@@ -1254,7 +1254,7 @@ eval_op_func_static_var (struct type *expect_type, struct expression *exp,\n \n /* Helper function that implements the body of OP_REGISTER.  */\n \n-static struct value *\n+struct value *\n eval_op_register (struct type *expect_type, struct expression *exp,\n \t\t  enum noside noside, const char *name)\n {"
    },
    {
      "sha": "a0e00302532fc120f8ac9221ca107ee71929e9e7",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55bdbff857f80da9e3464968f1ada2be3484fcf9/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=55bdbff857f80da9e3464968f1ada2be3484fcf9",
      "patch": "@@ -58,6 +58,9 @@ extern struct value *eval_op_func_static_var (struct type *expect_type,\n \t\t\t\t\t      struct expression *exp,\n \t\t\t\t\t      enum noside noside,\n \t\t\t\t\t      value *func, const char *var);\n+extern struct value *eval_op_register (struct type *expect_type,\n+\t\t\t\t       struct expression *exp,\n+\t\t\t\t       enum noside noside, const char *name);\n \n namespace expr\n {\n@@ -597,6 +600,33 @@ class last_operation\n   { return OP_LAST; }\n };\n \n+class register_operation\n+  : public tuple_holding_operation<std::string>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return eval_op_register (expect_type, exp, noside,\n+\t\t\t     std::get<0> (m_storage).c_str ());\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_REGISTER; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}