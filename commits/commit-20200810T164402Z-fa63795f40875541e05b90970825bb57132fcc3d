{
  "sha": "fa63795f40875541e05b90970825bb57132fcc3d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmE2Mzc5NWY0MDg3NTU0MWUwNWI5MDk3MDgyNWJiNTcxMzJmY2MzZA==",
  "commit": {
    "author": {
      "name": "Alex Coplan",
      "email": "alex.coplan@arm.com",
      "date": "2020-08-10T16:44:02Z"
    },
    "committer": {
      "name": "Alex Coplan",
      "email": "alex.coplan@arm.com",
      "date": "2020-08-10T16:44:02Z"
    },
    "message": "aarch64: Don't assert on long sysreg names\n\nThis patch fixes an assertion failure on long system register operands\nin the AArch64 backend. See the new testcase for an input which\nreproduces the issue.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sys_reg): Don't assert when parsing\n\ta long system register.\n\t(parse_sys_ins_reg): Likewise.\n\t(sysreg_hash_insert): New.\n\t(md_begin): Use sysreg_hash_insert() to ensure all system\n\tregisters are no longer than the maximum length at startup.\n\t* testsuite/gas/aarch64/invalid-sysreg-assert.d: New test.\n\t* testsuite/gas/aarch64/invalid-sysreg-assert.l: Error output.\n\t* testsuite/gas/aarch64/invalid-sysreg-assert.s: Input.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (AARCH64_MAX_SYSREG_NAME_LEN): New.",
    "tree": {
      "sha": "cf53183de7a8e90f4c54dc7317d0781a7bab667a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf53183de7a8e90f4c54dc7317d0781a7bab667a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fa63795f40875541e05b90970825bb57132fcc3d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa63795f40875541e05b90970825bb57132fcc3d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fa63795f40875541e05b90970825bb57132fcc3d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa63795f40875541e05b90970825bb57132fcc3d/comments",
  "author": {
    "login": "acoplan-arm",
    "id": 86676934,
    "node_id": "MDQ6VXNlcjg2Njc2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acoplan-arm",
    "html_url": "https://github.com/acoplan-arm",
    "followers_url": "https://api.github.com/users/acoplan-arm/followers",
    "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/acoplan-arm/orgs",
    "repos_url": "https://api.github.com/users/acoplan-arm/repos",
    "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acoplan-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "acoplan-arm",
    "id": 86676934,
    "node_id": "MDQ6VXNlcjg2Njc2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acoplan-arm",
    "html_url": "https://github.com/acoplan-arm",
    "followers_url": "https://api.github.com/users/acoplan-arm/followers",
    "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/acoplan-arm/orgs",
    "repos_url": "https://api.github.com/users/acoplan-arm/repos",
    "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acoplan-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9546e03d55a4d8aeca5e69ff2943884420c2584f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9546e03d55a4d8aeca5e69ff2943884420c2584f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9546e03d55a4d8aeca5e69ff2943884420c2584f"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 55,
    "deletions": 13
  },
  "files": [
    {
      "sha": "07def54083e438fa7cca8246be6af2c4fb2f9b99",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -1,3 +1,15 @@\n+2020-08-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_sys_reg): Don't assert when parsing\n+\ta long system register.\n+\t(parse_sys_ins_reg): Likewise.\n+\t(sysreg_hash_insert): New.\n+\t(md_begin): Use sysreg_hash_insert() to ensure all system\n+\tregisters are no longer than the maximum length at startup.\n+\t* testsuite/gas/aarch64/invalid-sysreg-assert.d: New test.\n+\t* testsuite/gas/aarch64/invalid-sysreg-assert.l: Error output.\n+\t* testsuite/gas/aarch64/invalid-sysreg-assert.s: Input.\n+\n 2020-08-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* config/tc-aarch64.c (parse_sys_reg): Call to"
    },
    {
      "sha": "fdac91ee9d3eb90f2f320936ab149f257d60eaed",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 30,
      "deletions": 13,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -4100,17 +4100,21 @@ parse_sys_reg (char **str, struct hash_control *sys_regs,\n \t       uint32_t* flags)\n {\n   char *p, *q;\n-  char buf[32];\n+  char buf[AARCH64_MAX_SYSREG_NAME_LEN];\n   const aarch64_sys_reg *o;\n   int value;\n \n   p = buf;\n   for (q = *str; ISALNUM (*q) || *q == '_'; q++)\n-    if (p < buf + 31)\n+    if (p < buf + (sizeof (buf) - 1))\n       *p++ = TOLOWER (*q);\n   *p = '\\0';\n-  /* Assert that BUF be large enough.  */\n-  gas_assert (p - buf == q - *str);\n+\n+  /* If the name is longer than AARCH64_MAX_SYSREG_NAME_LEN then it cannot be a\n+     valid system register.  This is enforced by construction of the hash\n+     table.  */\n+  if (p - buf != q - *str)\n+    return PARSE_FAIL;\n \n   o = hash_find (sys_regs, buf);\n   if (!o)\n@@ -4161,15 +4165,21 @@ static const aarch64_sys_ins_reg *\n parse_sys_ins_reg (char **str, struct hash_control *sys_ins_regs)\n {\n   char *p, *q;\n-  char buf[32];\n+  char buf[AARCH64_MAX_SYSREG_NAME_LEN];\n   const aarch64_sys_ins_reg *o;\n \n   p = buf;\n   for (q = *str; ISALNUM (*q) || *q == '_'; q++)\n-    if (p < buf + 31)\n+    if (p < buf + (sizeof (buf) - 1))\n       *p++ = TOLOWER (*q);\n   *p = '\\0';\n \n+  /* If the name is longer than AARCH64_MAX_SYSREG_NAME_LEN then it cannot be a\n+     valid system register.  This is enforced by construction of the hash\n+     table.  */\n+  if (p - buf != q - *str)\n+    return NULL;\n+\n   o = hash_find (sys_ins_regs, buf);\n   if (!o)\n     return NULL;\n@@ -8620,6 +8630,13 @@ checked_hash_insert (struct hash_control *table, const char *key, void *value)\n     printf (\"Internal Error:  Can't hash %s\\n\", key);\n }\n \n+static void\n+sysreg_hash_insert (struct hash_control *table, const char *key, void *value)\n+{\n+  gas_assert (strlen (key) < AARCH64_MAX_SYSREG_NAME_LEN);\n+  checked_hash_insert (table, key, value);\n+}\n+\n static void\n fill_instruction_hash_table (void)\n {\n@@ -8694,36 +8711,36 @@ md_begin (void)\n   fill_instruction_hash_table ();\n \n   for (i = 0; aarch64_sys_regs[i].name != NULL; ++i)\n-    checked_hash_insert (aarch64_sys_regs_hsh, aarch64_sys_regs[i].name,\n+    sysreg_hash_insert (aarch64_sys_regs_hsh, aarch64_sys_regs[i].name,\n \t\t\t (void *) (aarch64_sys_regs + i));\n \n   for (i = 0; aarch64_pstatefields[i].name != NULL; ++i)\n-    checked_hash_insert (aarch64_pstatefield_hsh,\n+    sysreg_hash_insert (aarch64_pstatefield_hsh,\n \t\t\t aarch64_pstatefields[i].name,\n \t\t\t (void *) (aarch64_pstatefields + i));\n \n   for (i = 0; aarch64_sys_regs_ic[i].name != NULL; i++)\n-    checked_hash_insert (aarch64_sys_regs_ic_hsh,\n+    sysreg_hash_insert (aarch64_sys_regs_ic_hsh,\n \t\t\t aarch64_sys_regs_ic[i].name,\n \t\t\t (void *) (aarch64_sys_regs_ic + i));\n \n   for (i = 0; aarch64_sys_regs_dc[i].name != NULL; i++)\n-    checked_hash_insert (aarch64_sys_regs_dc_hsh,\n+    sysreg_hash_insert (aarch64_sys_regs_dc_hsh,\n \t\t\t aarch64_sys_regs_dc[i].name,\n \t\t\t (void *) (aarch64_sys_regs_dc + i));\n \n   for (i = 0; aarch64_sys_regs_at[i].name != NULL; i++)\n-    checked_hash_insert (aarch64_sys_regs_at_hsh,\n+    sysreg_hash_insert (aarch64_sys_regs_at_hsh,\n \t\t\t aarch64_sys_regs_at[i].name,\n \t\t\t (void *) (aarch64_sys_regs_at + i));\n \n   for (i = 0; aarch64_sys_regs_tlbi[i].name != NULL; i++)\n-    checked_hash_insert (aarch64_sys_regs_tlbi_hsh,\n+    sysreg_hash_insert (aarch64_sys_regs_tlbi_hsh,\n \t\t\t aarch64_sys_regs_tlbi[i].name,\n \t\t\t (void *) (aarch64_sys_regs_tlbi + i));\n \n   for (i = 0; aarch64_sys_regs_sr[i].name != NULL; i++)\n-    checked_hash_insert (aarch64_sys_regs_sr_hsh,\n+    sysreg_hash_insert (aarch64_sys_regs_sr_hsh,\n \t\t\t aarch64_sys_regs_sr[i].name,\n \t\t\t (void *) (aarch64_sys_regs_sr + i));\n "
    },
    {
      "sha": "a6279bbe7c2dfa791a29af3c31f3495a282fd914",
      "filename": "gas/testsuite/gas/aarch64/invalid-sysreg-assert.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/invalid-sysreg-assert.d?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -0,0 +1,3 @@\n+#name: don't assert on long system register\n+#source: invalid-sysreg-assert.s\n+#error_output: invalid-sysreg-assert.l"
    },
    {
      "sha": "b6049108b07c066c4ccf41fe965ace1c4f454c75",
      "filename": "gas/testsuite/gas/aarch64/invalid-sysreg-assert.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/invalid-sysreg-assert.l?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -0,0 +1,2 @@\n+[^:]*: Assembler messages:\n+.*: Error: unknown or missing system register name at operand 1 -- `msr 00000000000000000000000000000000'"
    },
    {
      "sha": "8b3706fd9cd75faf30cab24208399267619d6c13",
      "filename": "gas/testsuite/gas/aarch64/invalid-sysreg-assert.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/gas/testsuite/gas/aarch64/invalid-sysreg-assert.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/invalid-sysreg-assert.s?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -0,0 +1,2 @@\n+// This input caused an assertion failure in parse_sys_reg.\n+msr 00000000000000000000000000000000"
    },
    {
      "sha": "d0475de1ce9f0c0228cb33ada338b29cc6eea3c6",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-10  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* opcode/aarch64.h (AARCH64_MAX_SYSREG_NAME_LEN): New.\n+\n 2020-08-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* opcode/aarch64.h (aarch64_sys_reg_deprecated_p): Functions"
    },
    {
      "sha": "5122ea85658f9f747ca6d6e0dd31fc2005b2d6eb",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa63795f40875541e05b90970825bb57132fcc3d/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa63795f40875541e05b90970825bb57132fcc3d/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=fa63795f40875541e05b90970825bb57132fcc3d",
      "patch": "@@ -943,6 +943,8 @@ extern const struct aarch64_name_value_pair aarch64_barrier_options [16];\n extern const struct aarch64_name_value_pair aarch64_prfops [32];\n extern const struct aarch64_name_value_pair aarch64_hint_options [];\n \n+#define AARCH64_MAX_SYSREG_NAME_LEN 32\n+\n typedef struct\n {\n   const char *  name;"
    }
  ]
}