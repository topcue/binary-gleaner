{
  "sha": "a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTEyYTE1ZTdjNWZmOWYzNTQ5ZGQxODVmYTFhY2Q1YTlkZGRkMDAxYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-12T12:44:06Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-07T15:45:10Z"
    },
    "message": "gdb: handle case where type alignment is unknown\n\nIt was spotted that if type_align returned 0 then it was possible to\ntrigger a divide by zero exception within GDB.  It turns out this will\nonly happen in an edge case where GDB is unable to figure out the\nalignment of a field within a structure.\n\nThe attached test generates some non-standard, probably broken, DWARF,\nthat triggers this condition, and then fixes this issue by throwing an\nexception when this case occurs.\n\ngdb/ChangeLog:\n\n\tPR gdb/27847\n\t* amd64-tdep.c (amd64_has_unaligned_fields): Move call to\n\ttype_align, and spot case where the alignment is unknown.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/27847\n\t* gdb.dwarf2/dw2-weird-type-len.c: New file.\n\t* gdb.dwarf2/dw2-weird-type-len.exp: New file.",
    "tree": {
      "sha": "71278848c6d52c54c8d85799717efcb248721df9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71278848c6d52c54c8d85799717efcb248721df9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7"
    }
  ],
  "stats": {
    "total": 169,
    "additions": 168,
    "deletions": 1
  },
  "files": [
    {
      "sha": "aa8bcb9615ab24f0da5076ce9dfb0417a8c207c7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR gdb/27847\n+\t* amd64-tdep.c (amd64_has_unaligned_fields): Move call to\n+\ttype_align, and spot case where the alignment is unknown.\n+\n 2021-06-07  Carl Love  <cel@us.ibm.com>\n \n \t* ppc-tdep.h (ppc_insn_prefix_dform): Declare."
    },
    {
      "sha": "3afac3c7e601f7dc49b44cfa5dab45210440d785",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
      "patch": "@@ -554,7 +554,6 @@ amd64_has_unaligned_fields (struct type *type)\n \t{\n \t  struct type *subtype = check_typedef (type->field (i).type ());\n \t  int bitpos = TYPE_FIELD_BITPOS (type, i);\n-\t  int align = type_align(subtype);\n \n \t  /* Ignore static fields, empty fields (for example nested\n \t     empty structures), and bitfields (these are handled by\n@@ -568,6 +567,10 @@ amd64_has_unaligned_fields (struct type *type)\n \t  if (bitpos % 8 != 0)\n \t    return true;\n \n+\t  int align = type_align (subtype);\n+\t  if (align == 0)\n+\t    error (_(\"could not determine alignment of type\"));\n+\n \t  int bytepos = bitpos / 8;\n \t  if (bytepos % align != 0)\n \t    return true;"
    },
    {
      "sha": "fd78401774b0ad25cda2a7263fa2439d5c6dbae9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR gdb/27847\n+\t* gdb.dwarf2/dw2-weird-type-len.c: New file.\n+\t* gdb.dwarf2/dw2-weird-type-len.exp: New file.\n+\n 2021-06-07  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.base/attach.exp (test_command_line_attach_run): Use"
    },
    {
      "sha": "192fc565b113697fb7be32032d765ff4376043f7",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.c",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.c?ref=a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
      "patch": "@@ -0,0 +1,45 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct foo_t\n+{\n+  int field : 24;\n+};\n+\n+struct bar_t\n+{\n+  struct foo_t f;\n+};\n+\n+struct bar_t\n+get_bar ()\n+{\n+  asm (\"get_bar_label: .globl get_bar_label\");\n+  struct bar_t b;\n+\n+  b.f.field = 0;\n+\n+  return b;\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"main_label: .globl main_label\");\n+  struct bar_t b = get_bar ();\n+  return b.f.field;\n+}"
    },
    {
      "sha": "d57bb86c988da902ab7adcf5b00afd6a28a4ffe1",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.exp",
      "status": "added",
      "additions": 107,
      "deletions": 0,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-weird-type-len.exp?ref=a12a15e7c5ff9f3549dd185fa1acd5a9dddd001b",
      "patch": "@@ -0,0 +1,107 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on x86-64 targets.  It checks for a bug\n+# that existed in amd64-tdep.c, and depends on an error being produced\n+# from within that file.\n+if {![istarget x86_64-*] || ![is_lp64_target]} {\n+    return 0\n+}\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c -dw.S\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcfile\n+\n+    get_func_info main\n+    get_func_info get_bar\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_language @DW_LANG_C}\n+\t    {DW_AT_name     $srcfile}\n+\t    {DW_AT_comp_dir /tmp}\n+\t} {\n+\t    declare_labels integer_label foo_t_label bar_t_label\n+\n+\t    foo_t_label: DW_TAG_structure_type {\n+\t\t{name foo_t}\n+\t\t{byte_size 3 DW_FORM_sdata}\n+\t    } {\n+\t\tmember {\n+\t\t    {name field}\n+\t\t    {type :$integer_label}\n+\t\t    {data_member_location 0 DW_FORM_sdata}\n+\t\t}\n+\t    }\n+\n+\t    integer_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 3 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\n+\t    bar_t_label: DW_TAG_structure_type {\n+\t\t{name bar_t}\n+\t\t{byte_size 3 DW_FORM_sdata}\n+\t    } {\n+\t\tmember {\n+\t\t    {name f}\n+\t\t    {type :$foo_t_label}\n+\t\t    {data_member_location 0 DW_FORM_sdata}\n+\t\t}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc $main_len data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name get_bar}\n+\t\t{low_pc $get_bar_start addr}\n+\t\t{high_pc $get_bar_len data8}\n+\t\t{DW_AT_type :$bar_t_label}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# At one point this would trigger a divide by zero inside GDB.  Now we\n+# just get an error message.\n+gdb_test \"print get_bar ()\" \"could not determine alignment of type\"\n+\n+# Check GDB is still running.\n+gdb_test \"p 1 + 2\" \" = 3\""
    }
  ]
}