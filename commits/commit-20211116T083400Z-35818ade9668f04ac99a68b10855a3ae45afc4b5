{
  "sha": "35818ade9668f04ac99a68b10855a3ae45afc4b5",
  "node_id": "C_kwDOANOeidoAKDM1ODE4YWRlOTY2OGYwNGFjOTlhNjhiMTA4NTVhM2FlNDVhZmM0YjU",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T07:54:44Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T08:34:00Z"
    },
    "message": "sim: nrun: add --env-{set,unset,clear} command line options\n\nProvide explicit control over the program's environment with the\nbasic set/unset/clear options.  These are a bit clunky to use,\nbut they're functional.\n\nThe env set operation is split out into a separate function as it'll\nbe used in the next commit.\n\nWith these in place, we can adjust the custom cris testsuite to use\nthe now standard options and not its one-off hack.",
    "tree": {
      "sha": "6932c93ea4266743c3ba0b62e1e4b33f433e40f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6932c93ea4266743c3ba0b62e1e4b33f433e40f9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/35818ade9668f04ac99a68b10855a3ae45afc4b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35818ade9668f04ac99a68b10855a3ae45afc4b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/35818ade9668f04ac99a68b10855a3ae45afc4b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35818ade9668f04ac99a68b10855a3ae45afc4b5/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85588c9ab947a4edfeedc7c14bd202d15ccfbbff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85588c9ab947a4edfeedc7c14bd202d15ccfbbff"
    }
  ],
  "stats": {
    "total": 117,
    "additions": 107,
    "deletions": 10
  },
  "files": [
    {
      "sha": "320380e91d59f9612a36ba019ef2b39e0c4f261b",
      "filename": "sim/common/nrun.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/common/nrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/common/nrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/nrun.c?ref=35818ade9668f04ac99a68b10855a3ae45afc4b5",
      "patch": "@@ -62,6 +62,7 @@ main (int argc, char **argv)\n {\n   const char *name;\n   char **prog_argv = NULL;\n+  char **prog_envp = NULL;\n   struct bfd *prog_bfd;\n   enum sim_stop reason;\n   int sigrc = 0;\n@@ -99,6 +100,7 @@ main (int argc, char **argv)\n \n   /* Was there a program to run?  */\n   prog_argv = STATE_PROG_ARGV (sd);\n+  prog_envp = STATE_PROG_ENVP (sd) ? : environ;\n   prog_bfd = STATE_PROG_BFD (sd);\n   if (prog_argv == NULL || *prog_argv == NULL)\n     usage ();\n@@ -131,7 +133,7 @@ main (int argc, char **argv)\n     exit (1);\n \n   /* Prepare the program for execution.  */\n-  sim_create_inferior (sd, prog_bfd, prog_argv, environ);\n+  sim_create_inferior (sd, prog_bfd, prog_argv, prog_envp);\n \n   /* To accommodate relative file paths, chdir to sysroot now.  We\n      mustn't do this until BFD has opened the program, else we wouldn't"
    },
    {
      "sha": "f94b814a6cb3985cbabc3a5a26e3481e1e98e722",
      "filename": "sim/common/sim-options.c",
      "status": "modified",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/common/sim-options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/common/sim-options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-options.c?ref=35818ade9668f04ac99a68b10855a3ae45afc4b5",
      "patch": "@@ -25,10 +25,12 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include <stdlib.h>\n #include <ctype.h>\n #include <stdio.h>\n+#include <unistd.h>\n #include \"libiberty.h\"\n #include \"sim-options.h\"\n #include \"sim-io.h\"\n #include \"sim-assert.h\"\n+#include \"environ.h\"\n #include \"version.h\"\n #include \"hashtab.h\"\n \n@@ -106,6 +108,9 @@ typedef enum {\n   OPTION_LOAD_VMA,\n   OPTION_SYSROOT,\n   OPTION_ARGV0,\n+  OPTION_ENV_SET,\n+  OPTION_ENV_UNSET,\n+  OPTION_ENV_CLEAR,\n } STANDARD_OPTIONS;\n \n static const OPTION standard_options[] =\n@@ -184,9 +189,63 @@ static const OPTION standard_options[] =\n       '\\0', \"ARGV0\", \"Set argv[0] to the specified string\",\n       standard_option_handler, NULL },\n \n+  { {\"env-set\", required_argument, NULL, OPTION_ENV_SET},\n+      '\\0', \"VAR=VAL\", \"Set the variable in the program's environment\",\n+      standard_option_handler, NULL },\n+  { {\"env-unset\", required_argument, NULL, OPTION_ENV_UNSET},\n+      '\\0', \"VAR\", \"Unset the variable in the program's environment\",\n+      standard_option_handler, NULL },\n+  { {\"env-clear\", no_argument, NULL, OPTION_ENV_CLEAR},\n+      '\\0', NULL, \"Clear the program's environment\",\n+      standard_option_handler, NULL },\n+\n   { {NULL, no_argument, NULL, 0}, '\\0', NULL, NULL, NULL, NULL }\n };\n \n+static SIM_RC\n+env_set (SIM_DESC sd, const char *arg)\n+{\n+  int i, varlen;\n+  char *eq;\n+  char **envp;\n+\n+  if (STATE_PROG_ENVP (sd) == NULL)\n+    STATE_PROG_ENVP (sd) = dupargv (environ);\n+\n+  eq = strchr (arg, '=');\n+  if (eq == NULL)\n+    {\n+      sim_io_eprintf (sd, \"invalid syntax when setting env var `%s'\"\n+\t\t      \": missing value\", arg);\n+      return SIM_RC_FAIL;\n+    }\n+  /* Include the = in the comparison below.  */\n+  varlen = eq - arg + 1;\n+\n+  /* If we can find an existing variable, replace it.  */\n+  envp = STATE_PROG_ENVP (sd);\n+  for (i = 0; envp[i]; ++i)\n+    {\n+      if (strncmp (envp[i], arg, varlen) == 0)\n+\t{\n+\t  free (envp[i]);\n+\t  envp[i] = xstrdup (arg);\n+\t  break;\n+\t}\n+    }\n+\n+  /* If we didn't find the var, add it.  */\n+  if (envp[i] == NULL)\n+    {\n+      envp = xrealloc (envp, (i + 2) * sizeof (char *));\n+      envp[i] = xstrdup (arg);\n+      envp[i + 1] = NULL;\n+      STATE_PROG_ENVP (sd) = envp;\n+  }\n+\n+  return SIM_RC_OK;\n+}\n+\n static SIM_RC\n standard_option_handler (SIM_DESC sd, sim_cpu *cpu, int opt,\n \t\t\t char *arg, int is_command)\n@@ -430,6 +489,46 @@ standard_option_handler (SIM_DESC sd, sim_cpu *cpu, int opt,\n       free (STATE_PROG_ARGV0 (sd));\n       STATE_PROG_ARGV0 (sd) = xstrdup (arg);\n       break;\n+\n+    case OPTION_ENV_SET:\n+      return env_set (sd, arg);\n+\n+    case OPTION_ENV_UNSET:\n+      {\n+\tint i, varlen;\n+\tchar **envp;\n+\n+\tif (STATE_PROG_ENVP (sd) == NULL)\n+\t  STATE_PROG_ENVP (sd) = dupargv (environ);\n+\n+\tvarlen = strlen (arg);\n+\n+\t/* If we can find an existing variable, replace it.  */\n+\tenvp = STATE_PROG_ENVP (sd);\n+\tfor (i = 0; envp[i]; ++i)\n+\t  {\n+\t    char *env = envp[i];\n+\n+\t    if (strncmp (env, arg, varlen) == 0\n+\t\t&& (env[varlen] == '\\0' || env[varlen] == '='))\n+\t      {\n+\t\tfree (envp[i]);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\n+\t/* If we clear the var, shift the array down.  */\n+\tfor (; envp[i]; ++i)\n+\t  envp[i] = envp[i + 1];\n+\n+\tbreak;\n+      }\n+\n+    case OPTION_ENV_CLEAR:\n+      freeargv (STATE_PROG_ENVP (sd));\n+      STATE_PROG_ENVP (sd) = xmalloc (sizeof (char *));\n+      STATE_PROG_ENVP (sd)[0] = NULL;\n+      break;\n     }\n \n   return SIM_RC_OK;"
    },
    {
      "sha": "506f68ab08654821d794be1d46a5a67cf156c8e6",
      "filename": "sim/testsuite/cris/c/c.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/c.exp?ref=35818ade9668f04ac99a68b10855a3ae45afc4b5",
      "patch": "@@ -101,7 +101,6 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     set opts(timeout) \"\"\n     set opts(mach) \"\"\n     set opts(xerror) \"no\"\n-    set opts(simenv) \"\"\n     set opts(kfail) \"\"\n     set opts(xfail) \"\"\n     set opts(target) \"\"\n@@ -211,7 +210,7 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     }\n \n     set result [sim_run \"$testname.x\" \"$opts(sim,$mach)\" \"$opts(progoptions)\" \\\n-\t\"\" \"$opts(simenv)\"]\n+\t\"\" \"\"]\n     set return_code [lindex $result 0]\n     set output [lindex $result 1]\n "
    },
    {
      "sha": "52c0733ca8a44de5dcbee506ba257273bb7ae1bf",
      "filename": "sim/testsuite/cris/c/readlink7.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/readlink7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/readlink7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/readlink7.c?ref=35818ade9668f04ac99a68b10855a3ae45afc4b5",
      "patch": "@@ -1,6 +1,5 @@\n /* Check that rare readlink calls don't cause the simulator to abort.\n #notarget: cris*-*-elf\n-#simenv: env(-u\\ PWD\\ foo)=bar\n-   FIXME: Need to unset PWD, but right now I won't bother tweaking the\n-   generic parts of the testsuite machinery and instead abuse a flaw.  */\n+#sim: --env-unset PWD\n+ */\n #include \"readlink2.c\""
    },
    {
      "sha": "98319fb4e3447bd20b5acfec53409ab6131b70da",
      "filename": "sim/testsuite/cris/c/readlink8.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/readlink8.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35818ade9668f04ac99a68b10855a3ae45afc4b5/sim/testsuite/cris/c/readlink8.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/c/readlink8.c?ref=35818ade9668f04ac99a68b10855a3ae45afc4b5",
      "patch": "@@ -1,8 +1,6 @@\n /* Check that rare readlink calls don't cause the simulator to abort.\n #notarget: cris*-*-elf\n-#sim: --sysroot=@exedir@\n-#simenv: env(-u\\ PWD\\ foo)=bar\n-   FIXME: Need to unset PWD, but right now I won't bother tweaking the\n-   generic parts of the testsuite machinery and instead abuse a flaw.  */\n+#sim: --sysroot=@exedir@ --env-unset PWD\n+ */\n #define SYSROOTED 1\n #include \"readlink2.c\""
    }
  ]
}