{
  "sha": "af39c5c8749757724a0f62dcb51be59cf3ecc678",
  "node_id": "C_kwDOANOeidoAKGFmMzljNWM4NzQ5NzU3NzI0YTBmNjJkY2I1MWJlNTljZjNlY2M2Nzg",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-20T03:25:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-02-06T20:48:18Z"
    },
    "message": "gdb: remove COMPUNIT_BLOCKVECTOR macro, add getter/setter\n\nAdd a getter and a setter for a compunit_symtab's blockvector.  Remove\nthe corresponding macro and adjust all callers.\n\nChange-Id: I99484c6619dcbbea7c5d89c72aa660316ca62f64",
    "tree": {
      "sha": "a960f6bfd23ad6080061d29dbec58125cc33f106",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a960f6bfd23ad6080061d29dbec58125cc33f106"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/af39c5c8749757724a0f62dcb51be59cf3ecc678",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af39c5c8749757724a0f62dcb51be59cf3ecc678",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/af39c5c8749757724a0f62dcb51be59cf3ecc678",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af39c5c8749757724a0f62dcb51be59cf3ecc678/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0d9acb4531cfe336b2b335fbaa1f2ef878a6e4d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d9acb4531cfe336b2b335fbaa1f2ef878a6e4d9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0d9acb4531cfe336b2b335fbaa1f2ef878a6e4d9"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 48,
    "deletions": 39
  },
  "files": [
    {
      "sha": "2bb64ae03bde1395701c6deefac6669aef3e3eea",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -5237,7 +5237,7 @@ map_matching_symbols (struct objfile *objfile,\n   for (compunit_symtab *symtab : objfile->compunits ())\n     {\n       const struct block *block\n-\t= BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (symtab), block_kind);\n+\t= BLOCKVECTOR_BLOCK (symtab->blockvector (), block_kind);\n       if (!iterate_over_symbols_terminated (block, lookup_name,\n \t\t\t\t\t    domain, data))\n \tbreak;\n@@ -5266,7 +5266,7 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n       for (compunit_symtab *cu : objfile->compunits ())\n \t{\n \t  const struct block *global_block\n-\t    = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cu), GLOBAL_BLOCK);\n+\t    = BLOCKVECTOR_BLOCK (cu->blockvector (), GLOBAL_BLOCK);\n \n \t  if (ada_add_block_renamings (result, global_block, lookup_name,\n \t\t\t\t       domain))\n@@ -12617,7 +12617,7 @@ ada_add_global_exceptions (compiled_regex *preg,\n     {\n       for (compunit_symtab *s : objfile->compunits ())\n \t{\n-\t  const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (s);\n+\t  const struct blockvector *bv = s->blockvector ();\n \t  int i;\n \n \t  for (i = GLOBAL_BLOCK; i <= STATIC_BLOCK; i++)\n@@ -13204,7 +13204,7 @@ class ada_language : public language_defn\n \tfor (compunit_symtab *s : objfile->compunits ())\n \t  {\n \t    QUIT;\n-\t    b = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (s), GLOBAL_BLOCK);\n+\t    b = BLOCKVECTOR_BLOCK (s->blockvector (), GLOBAL_BLOCK);\n \t    ALL_BLOCK_SYMBOLS (b, iter, sym)\n \t      {\n \t\tif (completion_skip_symbol (mode, sym))\n@@ -13223,7 +13223,7 @@ class ada_language : public language_defn\n \tfor (compunit_symtab *s : objfile->compunits ())\n \t  {\n \t    QUIT;\n-\t    b = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (s), STATIC_BLOCK);\n+\t    b = BLOCKVECTOR_BLOCK (s->blockvector (), STATIC_BLOCK);\n \t    /* Don't do this block twice.  */\n \t    if (b == surrounding_static_block)\n \t      continue;"
    },
    {
      "sha": "c0e3e465a115e31bb5090978a6954b4b1b1b9ab5",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -197,7 +197,7 @@ blockvector_for_pc_sect (CORE_ADDR pc, struct obj_section *section,\n \treturn 0;\n     }\n \n-  bl = COMPUNIT_BLOCKVECTOR (cust);\n+  bl = cust->blockvector ();\n \n   /* Then search that symtab for the smallest block that wins.  */\n   b = find_block_in_blockvector (bl, pc);\n@@ -543,7 +543,7 @@ block_iterator_step (struct block_iterator *iterator, int first)\n \t  if (cust == NULL)\n \t    return  NULL;\n \n-\t  block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust),\n+\t  block = BLOCKVECTOR_BLOCK (cust->blockvector (),\n \t\t\t\t     iterator->which);\n \t  sym = mdict_iterator_first (BLOCK_MULTIDICT (block),\n \t\t\t\t      &iterator->mdict_iter);\n@@ -612,7 +612,7 @@ block_iter_match_step (struct block_iterator *iterator,\n \t  if (cust == NULL)\n \t    return  NULL;\n \n-\t  block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust),\n+\t  block = BLOCKVECTOR_BLOCK (cust->blockvector (),\n \t\t\t\t     iterator->which);\n \t  sym = mdict_iter_match_first (BLOCK_MULTIDICT (block), name,\n \t\t\t\t\t&iterator->mdict_iter);"
    },
    {
      "sha": "847414968af4e54c319acbb1a49aea3e38ba73bd",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -1015,7 +1015,7 @@ buildsym_compunit::end_symtab_with_blockvector (struct block *static_block,\n   /* Similarly for the producer.  */\n   cu->set_producer (m_producer);\n \n-  COMPUNIT_BLOCKVECTOR (cu) = blockvector;\n+  cu->set_blockvector (blockvector);\n   {\n     struct block *b = BLOCKVECTOR_BLOCK (blockvector, GLOBAL_BLOCK);\n \n@@ -1163,7 +1163,7 @@ void\n buildsym_compunit::augment_type_symtab ()\n {\n   struct compunit_symtab *cust = m_compunit_symtab;\n-  const struct blockvector *blockvector = COMPUNIT_BLOCKVECTOR (cust);\n+  const struct blockvector *blockvector = cust->blockvector ();\n \n   if (!m_context_stack.empty ())\n     complaint (_(\"Context stack not empty in augment_type_symtab\"));"
    },
    {
      "sha": "028ff0f475460c900a0b9a99127dafea18993619",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -1464,7 +1464,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n       for (compunit_symtab *cust : objfile->compunits ())\n \t{\n \t  QUIT;\n-\t  b = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), GLOBAL_BLOCK);\n+\t  b = BLOCKVECTOR_BLOCK (cust->blockvector (), GLOBAL_BLOCK);\n \t  add_symbol_overload_list_block (func_name, b, overload_list);\n \t}\n     }\n@@ -1474,7 +1474,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n       for (compunit_symtab *cust : objfile->compunits ())\n \t{\n \t  QUIT;\n-\t  b = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), STATIC_BLOCK);\n+\t  b = BLOCKVECTOR_BLOCK (cust->blockvector (), STATIC_BLOCK);\n \t  /* Don't do this block twice.  */\n \t  if (b == surrounding_static_block)\n \t    continue;"
    },
    {
      "sha": "0d78c242768ad4b4ab0ece97b8f334794a1de872",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -4451,8 +4451,8 @@ recursively_find_pc_sect_compunit_symtab (struct compunit_symtab *cust,\n {\n   int i;\n \n-  if (COMPUNIT_BLOCKVECTOR (cust) != NULL\n-      && blockvector_contains_pc (COMPUNIT_BLOCKVECTOR (cust), pc))\n+  if (cust->blockvector () != nullptr\n+      && blockvector_contains_pc (cust->blockvector (), pc))\n     return cust;\n \n   if (cust->includes == NULL)"
    },
    {
      "sha": "c86124c9e1be661f2c64c42733f1fb53f94348b4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -531,7 +531,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n \t\t      + (actual_nblocks - 1) * sizeof (struct block *));\n   bv = (struct blockvector *) obstack_alloc (&objfile->objfile_obstack,\n \t\t\t\t\t     blockvector_size);\n-  COMPUNIT_BLOCKVECTOR (cust) = bv;\n+  cust->set_blockvector (bv);\n \n   /* At the end of this function, (begin, end) will contain the PC range this\n      entire blockvector spans.  */"
    },
    {
      "sha": "11dc2e466d6bee7a64f00feb6f66052cb487f040",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -946,7 +946,7 @@ count_symtabs_and_blocks (int *nr_symtabs_ptr, int *nr_compunit_symtabs_ptr,\n \t  for (compunit_symtab *cu : o->compunits ())\n \t    {\n \t      ++nr_compunit_symtabs;\n-\t      nr_blocks += BLOCKVECTOR_NBLOCKS (COMPUNIT_BLOCKVECTOR (cu));\n+\t      nr_blocks += BLOCKVECTOR_NBLOCKS (cu->blockvector ());\n \t      nr_symtabs += std::distance (cu->filetabs ().begin (),\n \t\t\t\t\t   cu->filetabs ().end ());\n \t    }"
    },
    {
      "sha": "59b70389531ab0a9b3b88f40e163ebe0e108a9c5",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -1965,7 +1965,7 @@ parse_procedure (PDR *pr, struct compunit_symtab *search_symtab,\n #else\n       s = mylookup_symbol\n \t(sh_name,\n-\t BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (search_symtab),\n+\t BLOCKVECTOR_BLOCK (search_symtab->blockvector (),\n \t\t\t    STATIC_BLOCK),\n \t VAR_DOMAIN,\n \t LOC_BLOCK);\n@@ -4096,7 +4096,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n       push_parse_stack ();\n       top_stack->cur_st = cust->primary_filetab ();\n       top_stack->cur_block\n-\t= BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), STATIC_BLOCK);\n+\t= BLOCKVECTOR_BLOCK (cust->blockvector (), STATIC_BLOCK);\n       BLOCK_START (top_stack->cur_block) = pst->text_low (objfile);\n       BLOCK_END (top_stack->cur_block) = 0;\n       top_stack->blocktype = stFile;\n@@ -4502,7 +4502,7 @@ add_block (struct block *b, struct symtab *s)\n \t\t\t\t\t + BLOCKVECTOR_NBLOCKS (bv)\n \t\t\t\t\t * sizeof (bv->block)));\n   if (bv != SYMTAB_BLOCKVECTOR (s))\n-    SYMTAB_BLOCKVECTOR (s) = bv;\n+    SYMTAB_COMPUNIT (s)->set_blockvector (bv);\n \n   BLOCKVECTOR_BLOCK (bv, BLOCKVECTOR_NBLOCKS (bv)++) = b;\n }\n@@ -4632,7 +4632,7 @@ new_symtab (const char *name, int maxlines, struct objfile *objfile)\n   BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK) = new_block (NON_FUNCTION_BLOCK, lang);\n   BLOCK_SUPERBLOCK (BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK)) =\n     BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n-  COMPUNIT_BLOCKVECTOR (cust) = bv;\n+  cust->set_blockvector (bv);\n \n   cust->set_debugformat (\"ECOFF\");\n   return cust;"
    },
    {
      "sha": "f363cb453f3a274893db39b8e0a4222d11bc4ffd",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -667,7 +667,7 @@ objfile_relocate1 (struct objfile *objfile,\n \n     for (compunit_symtab *cust : objfile->compunits ())\n       {\n-\tconst struct blockvector *bv = COMPUNIT_BLOCKVECTOR (cust);\n+\tconst struct blockvector *bv = cust->blockvector ();\n \tint block_line_section = COMPUNIT_BLOCK_LINE_SECTION (cust);\n \n \tif (BLOCKVECTOR_MAP (bv))"
    },
    {
      "sha": "ac5009aec37f73bc172e5b3dd3c3f2bffd85dc5c",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -1801,7 +1801,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t      /* Now do checks requiring the associated symtab.  */\n \t      if (cust == NULL)\n \t\tcontinue;\n-\t      bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t      bv = cust->blockvector ();\n \t      b = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n \t      for (partial_symbol *psym : ps->static_psymbols)\n \t\t{"
    },
    {
      "sha": "f636f5119a13d29f82d2c41bbba1bcb3cbd3e817",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -571,7 +571,7 @@ gdbpy_lookup_static_symbols (PyObject *self, PyObject *args, PyObject *kw)\n \t      const struct blockvector *bv;\n \t      const struct block *block;\n \n-\t      bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t      bv = cust->blockvector ();\n \t      block = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n \n \t      if (block != nullptr)"
    },
    {
      "sha": "59dbaf16e62b53e89d042f53ea0d194085ebf780",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -245,7 +245,7 @@ objfile::lookup_symbol (block_enum kind, const char *name, domain_enum domain)\n   auto search_one_symtab = [&] (compunit_symtab *stab)\n   {\n     struct symbol *sym, *with_opaque = NULL;\n-    const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n+    const struct blockvector *bv = stab->blockvector ();\n     const struct block *block = BLOCKVECTOR_BLOCK (bv, kind);\n \n     sym = block_find_symbol (block, name, domain,"
    },
    {
      "sha": "6e1a4c2e8341152605467c835051fe442073b35d",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -787,7 +787,7 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n \t\t\tprintf_filtered (\"    blockvector\"\n \t\t\t\t\t \" ((struct blockvector *) %s)\\n\",\n \t\t\t\t\t host_address_to_string\n-\t\t\t\t\t (COMPUNIT_BLOCKVECTOR (cust)));\n+\t\t\t\t\t   (cust->blockvector ()));\n \t\t\tprintf_filtered (\"    user\"\n \t\t\t\t\t \" ((struct compunit_symtab *) %s)\\n\",\n \t\t\t\t\t cust->user != nullptr\n@@ -863,7 +863,7 @@ maintenance_check_symtabs (const char *ignore, int from_tty)\n \n \t    QUIT;\n \n-\t    if (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n+\t    if (cust->blockvector () == NULL)\n \t      found_something = 1;\n \t    /* Add more checks here.  */\n \n@@ -879,7 +879,7 @@ maintenance_check_symtabs (const char *ignore, int from_tty)\n \t\t  }\n \t\tprintf_filtered (\"  { symtab %s\\n\",\n \t\t\t\t symtab_to_filename_for_display (symtab));\n-\t\tif (COMPUNIT_BLOCKVECTOR (cust) == NULL)\n+\t\tif (cust->blockvector () == NULL)\n \t\t  printf_filtered (\"    NULL blockvector\\n\");\n \t\tprintf_filtered (\"  }\\n\");\n \t      }"
    },
    {
      "sha": "a0bc1dfea52e73f8b65a343230420c628ae332b9",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -2309,7 +2309,7 @@ lookup_symbol_in_objfile_symtabs (struct objfile *objfile,\n       const struct block *block;\n       struct block_symbol result;\n \n-      bv = COMPUNIT_BLOCKVECTOR (cust);\n+      bv = cust->blockvector ();\n       block = BLOCKVECTOR_BLOCK (bv, block_index);\n       result.symbol = block_lookup_symbol_primary (block, name, domain);\n       result.block = block;\n@@ -2442,7 +2442,7 @@ lookup_symbol_via_quick_fns (struct objfile *objfile,\n       return {};\n     }\n \n-  bv = COMPUNIT_BLOCKVECTOR (cust);\n+  bv = cust->blockvector ();\n   block = BLOCKVECTOR_BLOCK (bv, block_index);\n   result.symbol = block_lookup_symbol (block, name,\n \t\t\t\t       symbol_name_match_type::FULL, domain);\n@@ -2792,7 +2792,7 @@ basic_lookup_transparent_type_quick (struct objfile *objfile,\n   if (cust == NULL)\n     return NULL;\n \n-  bv = COMPUNIT_BLOCKVECTOR (cust);\n+  bv = cust->blockvector ();\n   block = BLOCKVECTOR_BLOCK (bv, block_index);\n   sym = block_find_symbol (block, name, STRUCT_DOMAIN,\n \t\t\t   block_find_non_opaque_type, NULL);\n@@ -2817,7 +2817,7 @@ basic_lookup_transparent_type_1 (struct objfile *objfile,\n \n   for (compunit_symtab *cust : objfile->compunits ())\n     {\n-      bv = COMPUNIT_BLOCKVECTOR (cust);\n+      bv = cust->blockvector ();\n       block = BLOCKVECTOR_BLOCK (bv, block_index);\n       sym = block_find_symbol (block, name, STRUCT_DOMAIN,\n \t\t\t       block_find_non_opaque_type, NULL);\n@@ -2962,7 +2962,7 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n     {\n       for (compunit_symtab *cust : obj_file->compunits ())\n \t{\n-\t  const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t  const struct blockvector *bv = cust->blockvector ();\n \t  const struct block *global_block\n \t    = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n \t  CORE_ADDR start = BLOCK_START (global_block);\n@@ -3068,7 +3068,7 @@ find_symbol_at_address (CORE_ADDR address)\n      ADDR.  */\n   auto search_symtab = [] (compunit_symtab *symtab, CORE_ADDR addr) -> symbol *\n     {\n-      const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (symtab);\n+      const struct blockvector *bv = symtab->blockvector ();\n \n       for (int i = GLOBAL_BLOCK; i <= STATIC_BLOCK; ++i)\n \t{\n@@ -3276,7 +3276,7 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n       return val;\n     }\n \n-  bv = COMPUNIT_BLOCKVECTOR (cust);\n+  bv = cust->blockvector ();\n \n   /* Look at all the symtabs that share this blockvector.\n      They all have the same apriori range, that we found was right;\n@@ -4793,7 +4793,7 @@ global_symbol_searcher::add_matching_symbols\n   /* Add matching symbols (if not already present).  */\n   for (compunit_symtab *cust : objfile->compunits ())\n     {\n-      const struct blockvector *bv  = COMPUNIT_BLOCKVECTOR (cust);\n+      const struct blockvector *bv  = cust->blockvector ();\n \n       for (block_enum block : { GLOBAL_BLOCK, STATIC_BLOCK })\n \t{\n@@ -5773,7 +5773,7 @@ add_symtab_completions (struct compunit_symtab *cust,\n   for (i = GLOBAL_BLOCK; i <= STATIC_BLOCK; i++)\n     {\n       QUIT;\n-      b = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), i);\n+      b = BLOCKVECTOR_BLOCK (cust->blockvector (), i);\n       ALL_BLOCK_SYMBOLS (b, iter, sym)\n \t{\n \t  if (completion_skip_symbol (mode, sym))"
    },
    {
      "sha": "f9318ffdcb46312b3b3ae8813d4d300307ea0698",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af39c5c8749757724a0f62dcb51be59cf3ecc678/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=af39c5c8749757724a0f62dcb51be59cf3ecc678",
      "patch": "@@ -1409,7 +1409,7 @@ using symtab_range = next_range<symtab>;\n #define SYMTAB_LINETABLE(symtab) ((symtab)->linetable)\n #define SYMTAB_LANGUAGE(symtab) ((symtab)->language)\n #define SYMTAB_BLOCKVECTOR(symtab) \\\n-  COMPUNIT_BLOCKVECTOR (SYMTAB_COMPUNIT (symtab))\n+  (SYMTAB_COMPUNIT (symtab)->blockvector ())\n #define SYMTAB_OBJFILE(symtab) \\\n   (SYMTAB_COMPUNIT (symtab)->objfile ())\n #define SYMTAB_PSPACE(symtab) (SYMTAB_OBJFILE (symtab)->pspace)\n@@ -1511,6 +1511,16 @@ struct compunit_symtab\n     m_dirname = dirname;\n   }\n \n+  const struct blockvector *blockvector () const\n+  {\n+    return m_blockvector;\n+  }\n+\n+  void set_blockvector (const struct blockvector *blockvector)\n+  {\n+    m_blockvector = blockvector;\n+  }\n+\n   /* Make PRIMARY_FILETAB the primary filetab of this compunit symtab.\n \n      PRIMARY_FILETAB must already be a filetab of this compunit symtab.  */\n@@ -1564,7 +1574,7 @@ struct compunit_symtab\n \n   /* List of all symbol scope blocks for this symtab.  It is shared among\n      all symtabs in a given compilation unit.  */\n-  const struct blockvector *blockvector;\n+  const struct blockvector *m_blockvector;\n \n   /* Section in objfile->section_offsets for the blockvector and\n      the linetable.  Probably always SECT_OFF_TEXT.  */\n@@ -1606,7 +1616,6 @@ struct compunit_symtab\n \n using compunit_symtab_range = next_range<compunit_symtab>;\n \n-#define COMPUNIT_BLOCKVECTOR(cust) ((cust)->blockvector)\n #define COMPUNIT_BLOCK_LINE_SECTION(cust) ((cust)->block_line_section)\n #define COMPUNIT_LOCATIONS_VALID(cust) ((cust)->locations_valid)\n #define COMPUNIT_EPILOGUE_UNWIND_VALID(cust) ((cust)->epilogue_unwind_valid)"
    }
  ]
}