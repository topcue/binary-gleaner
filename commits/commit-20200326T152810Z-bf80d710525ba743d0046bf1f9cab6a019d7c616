{
  "sha": "bf80d710525ba743d0046bf1f9cab6a019d7c616",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY4MGQ3MTA1MjViYTc0M2QwMDQ2YmYxZjljYWI2YTAxOWQ3YzYxNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:10Z"
    },
    "message": "Change dwarf_decode_macro_bytes calling convention\n\nThis changes dwarf_decode_macro_bytes to accept a buildsym_compunit\nrather than a dwarf2_cu.  This enables some subsequent changes; and\nalso makes the function accept a \"more specific\" parameter.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (macro_start_file): Change \"cu\" parameter to\n\t\"builder\".\n\t(dwarf_decode_macro_bytes): Likewise.  Add dwarf2_per_objfile\n\tparameter.\n\t(dwarf_decode_macros): Update.",
    "tree": {
      "sha": "073246585a1b076002bb031d95148c9d1724035b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/073246585a1b076002bb031d95148c9d1724035b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf80d710525ba743d0046bf1f9cab6a019d7c616",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf80d710525ba743d0046bf1f9cab6a019d7c616",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf80d710525ba743d0046bf1f9cab6a019d7c616",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf80d710525ba743d0046bf1f9cab6a019d7c616/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0314b3901c9cdc21ef9f0c1b0b88528d6f8d3073"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 21,
    "deletions": 10
  },
  "files": [
    {
      "sha": "afe7823d5a82c3700de8a549b043da8886902eef",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf80d710525ba743d0046bf1f9cab6a019d7c616/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf80d710525ba743d0046bf1f9cab6a019d7c616/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf80d710525ba743d0046bf1f9cab6a019d7c616",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (macro_start_file): Change \"cu\" parameter to\n+\t\"builder\".\n+\t(dwarf_decode_macro_bytes): Likewise.  Add dwarf2_per_objfile\n+\tparameter.\n+\t(dwarf_decode_macros): Update.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_attribute_value): Update."
    },
    {
      "sha": "1410dd48a2ffbb60b09f7201cc9cddbfccda3719",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 13,
      "deletions": 10,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf80d710525ba743d0046bf1f9cab6a019d7c616/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf80d710525ba743d0046bf1f9cab6a019d7c616/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=bf80d710525ba743d0046bf1f9cab6a019d7c616",
      "patch": "@@ -23090,7 +23090,7 @@ dwarf_alloc_die (struct dwarf2_cu *cu, int num_attrs)\n /* Macro support.  */\n \n static struct macro_source_file *\n-macro_start_file (struct dwarf2_cu *cu,\n+macro_start_file (buildsym_compunit *builder,\n \t\t  int file, int line,\n                   struct macro_source_file *current_file,\n                   struct line_header *lh)\n@@ -23102,7 +23102,7 @@ macro_start_file (struct dwarf2_cu *cu,\n     {\n       /* Note: We don't create a macro table for this compilation unit\n \t at all until we actually get a filename.  */\n-      struct macro_table *macro_table = cu->get_builder ()->get_macro_table ();\n+      struct macro_table *macro_table = builder->get_macro_table ();\n \n       /* If we have no current file, then this must be the start_file\n \t directive for the compilation unit's main source file.  */\n@@ -23463,7 +23463,8 @@ dwarf_parse_macro_header (const gdb_byte **opcode_definitions,\n    including DW_MACRO_import.  */\n \n static void\n-dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n+dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t  buildsym_compunit *builder,\n \t\t\t  bfd *abfd,\n \t\t\t  const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n \t\t\t  struct macro_source_file *current_file,\n@@ -23473,8 +23474,6 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t\t\t  unsigned int offset_size,\n \t\t\t  htab_t include_hash)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   enum dwarf_macro_record_type macinfo_type;\n   int at_commandline;\n@@ -23631,8 +23630,8 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t\tat_commandline = 0;\n \t      }\n \t    else\n-\t      current_file = macro_start_file (cu, file, line, current_file,\n-\t\t\t\t\t       lh);\n+\t      current_file = macro_start_file (builder, file, line,\n+\t\t\t\t\t       current_file, lh);\n           }\n           break;\n \n@@ -23713,7 +23712,8 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t      {\n \t\t*slot = (void *) new_mac_ptr;\n \n-\t\tdwarf_decode_macro_bytes (cu, include_bfd, new_mac_ptr,\n+\t\tdwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n+\t\t\t\t\t  include_bfd, new_mac_ptr,\n \t\t\t\t\t  include_mac_end, current_file, lh,\n \t\t\t\t\t  section, section_is_gnu, is_dwz,\n \t\t\t\t\t  offset_size, include_hash);\n@@ -23827,6 +23827,7 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n       return;\n     }\n \n+  buildsym_compunit *builder = cu->get_builder ();\n   do\n     {\n       /* Do we at least have room for a macinfo type byte?  */\n@@ -23875,7 +23876,8 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n \t    file = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n \t    mac_ptr += bytes_read;\n \n-\t    current_file = macro_start_file (cu, file, line, current_file, lh);\n+\t    current_file = macro_start_file (builder, file, line,\n+\t\t\t\t\t     current_file, lh);\n \t  }\n \t  break;\n \n@@ -23940,7 +23942,8 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n   mac_ptr = section->buffer + offset;\n   slot = htab_find_slot (include_hash.get (), mac_ptr, INSERT);\n   *slot = (void *) mac_ptr;\n-  dwarf_decode_macro_bytes (cu, abfd, mac_ptr, mac_end,\n+  dwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n+\t\t\t    abfd, mac_ptr, mac_end,\n \t\t\t    current_file, lh, section,\n \t\t\t    section_is_gnu, 0, offset_size,\n \t\t\t    include_hash.get ());"
    }
  ]
}