{
  "sha": "79aabb7308cd572fff21da5c93952a1bb0dc5b26",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzlhYWJiNzMwOGNkNTcyZmZmMjFkYTVjOTM5NTJhMWJiMGRjNWIyNg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-05-06T08:13:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-05-06T08:46:40Z"
    },
    "message": "gdb/mi: add a '--force' flag to the '-break-condition' command\n\nAdd a '--force' flag to the '-break-condition' command to be\nable to force conditions.\n\ngdb/ChangeLog:\n2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* mi/mi-cmd-break.c (mi_cmd_break_condition): New function.\n\t* mi/mi-cmds.c: Change the binding of \"-break-condition\" to\n\tmi_cmd_break_condition.\n\t* mi/mi-cmds.h (mi_cmd_break_condition): Declare.\n\t* breakpoint.h (set_breakpoint_condition): Declare a new\n\toverload.\n\t* breakpoint.c (set_breakpoint_condition): New overloaded function\n\textracted out from ...\n\t(condition_command): ... this.\n\t* NEWS: Mention the change.\n\ngdb/testsuite/ChangeLog:\n2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdb.mi/mi-break.exp (test_forced_conditions): Add a test\n\tfor the -break-condition command's \"--force\" flag.\n\ngdb/doc/ChangeLog:\n2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdb.texinfo (GDB/MI Breakpoint Commands): Mention the\n\t'--force' flag of the '-break-condition' command.",
    "tree": {
      "sha": "9d210659cd58e30967e664791578974a06c64625",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d210659cd58e30967e664791578974a06c64625"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/79aabb7308cd572fff21da5c93952a1bb0dc5b26",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79aabb7308cd572fff21da5c93952a1bb0dc5b26",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/79aabb7308cd572fff21da5c93952a1bb0dc5b26",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79aabb7308cd572fff21da5c93952a1bb0dc5b26/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "10e578d7e00d74033ded0443422ffc509390a912",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10e578d7e00d74033ded0443422ffc509390a912",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/10e578d7e00d74033ded0443422ffc509390a912"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 147,
    "deletions": 29
  },
  "files": [
    {
      "sha": "14b1a3d0c8f99bf9fda202051d6cf75797a50eb4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -1,3 +1,16 @@\n+2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* mi/mi-cmd-break.c (mi_cmd_break_condition): New function.\n+\t* mi/mi-cmds.c: Change the binding of \"-break-condition\" to\n+\tmi_cmd_break_condition.\n+\t* mi/mi-cmds.h (mi_cmd_break_condition): Declare.\n+\t* breakpoint.h (set_breakpoint_condition): Declare a new\n+\toverload.\n+\t* breakpoint.c (set_breakpoint_condition): New overloaded function\n+\textracted out from ...\n+\t(condition_command): ... this.\n+\t* NEWS: Mention the change.\n+\n 2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* mi/mi-cmd-break.c (mi_cmd_break_insert_1): Recognize the"
    },
    {
      "sha": "784c1038920f580307935a7eaad1b87b74b8206a",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -39,6 +39,13 @@\n     is equivalent to the '-force-condition' flag of the CLI's \"break\"\n     command.\n \n+ ** '-break-condition --force'\n+\n+    The MI -break-condition command now supports a '--force' flag to\n+    forcibly define a condition even when the condition is invalid at\n+    all locations of the selected breakpoint.  This is equivalent to\n+    the '-force' flag of the CLI's \"cond\" command.\n+\n * GDB now supports core file debugging for x86_64 Cygwin programs.\n \n * GDB will now look for the .gdbinit file in a config directory before"
    },
    {
      "sha": "35a891bb4b9568bbcbc0f6c2a88870ff7b9ebfef",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 34,
      "deletions": 25,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -973,6 +973,39 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n   gdb::observers::breakpoint_modified.notify (b);\n }\n \n+/* See breakpoint.h.  */\n+\n+void\n+set_breakpoint_condition (int bpnum, const char *exp, int from_tty,\n+\t\t\t  bool force)\n+{\n+  struct breakpoint *b;\n+  ALL_BREAKPOINTS (b)\n+    if (b->number == bpnum)\n+      {\n+\t/* Check if this breakpoint has a \"stop\" method implemented in an\n+\t   extension language.  This method and conditions entered into GDB\n+\t   from the CLI are mutually exclusive.  */\n+\tconst struct extension_language_defn *extlang\n+\t  = get_breakpoint_cond_ext_lang (b, EXT_LANG_NONE);\n+\n+\tif (extlang != NULL)\n+\t  {\n+\t    error (_(\"Only one stop condition allowed.  There is currently\"\n+\t\t     \" a %s stop condition defined for this breakpoint.\"),\n+\t\t   ext_lang_capitalized_name (extlang));\n+\t  }\n+\tset_breakpoint_condition (b, exp, from_tty, force);\n+\n+\tif (is_breakpoint (b))\n+\t  update_global_location_list (UGLL_MAY_INSERT);\n+\n+\treturn;\n+      }\n+\n+  error (_(\"No breakpoint number %d.\"), bpnum);\n+}\n+\n /* The options for the \"condition\" command.  */\n \n struct condition_command_opts\n@@ -1066,7 +1099,6 @@ condition_completer (struct cmd_list_element *cmd,\n static void\n condition_command (const char *arg, int from_tty)\n {\n-  struct breakpoint *b;\n   const char *p;\n   int bnum;\n \n@@ -1085,30 +1117,7 @@ condition_command (const char *arg, int from_tty)\n   if (bnum == 0)\n     error (_(\"Bad breakpoint argument: '%s'\"), arg);\n \n-  ALL_BREAKPOINTS (b)\n-    if (b->number == bnum)\n-      {\n-\t/* Check if this breakpoint has a \"stop\" method implemented in an\n-\t   extension language.  This method and conditions entered into GDB\n-\t   from the CLI are mutually exclusive.  */\n-\tconst struct extension_language_defn *extlang\n-\t  = get_breakpoint_cond_ext_lang (b, EXT_LANG_NONE);\n-\n-\tif (extlang != NULL)\n-\t  {\n-\t    error (_(\"Only one stop condition allowed.  There is currently\"\n-\t\t     \" a %s stop condition defined for this breakpoint.\"),\n-\t\t   ext_lang_capitalized_name (extlang));\n-\t  }\n-\tset_breakpoint_condition (b, p, from_tty, cc_opts.force_condition);\n-\n-\tif (is_breakpoint (b))\n-\t  update_global_location_list (UGLL_MAY_INSERT);\n-\n-\treturn;\n-      }\n-\n-  error (_(\"No breakpoint number %d.\"), bnum);\n+  set_breakpoint_condition (bnum, p, from_tty, cc_opts.force_condition);\n }\n \n /* Check that COMMAND do not contain commands that are suitable"
    },
    {
      "sha": "54c5e423e10aebf25ba32a758d0392a5bc53ee0d",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -1656,6 +1656,14 @@ extern void breakpoint_retire_moribund (void);\n extern void set_breakpoint_condition (struct breakpoint *b, const char *exp,\n \t\t\t\t      int from_tty, bool force);\n \n+/* Set break condition for the breakpoint with number BPNUM to EXP.\n+   Raise an error if no breakpoint with the given number is found.\n+   Also raise an error if the breakpoint already has stop conditions.\n+   If FORCE, define the condition even if it is invalid in\n+   all of the breakpoint locations.  */\n+extern void set_breakpoint_condition (int bpnum, const char *exp,\n+\t\t\t\t      int from_tty, bool force);\n+\n /* Checks if we are catching syscalls or not.\n    Returns 0 if not, greater than 0 if we are.  */\n extern int catch_syscall_enabled (void);"
    },
    {
      "sha": "d64504f1ffcf1c9e72c6043da6d07a0f79b8525d",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdb.texinfo (GDB/MI Breakpoint Commands): Mention the\n+\t'--force' flag of the '-break-condition' command.\n+\n 2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.texinfo (GDB/MI Breakpoint Commands): Mention the"
    },
    {
      "sha": "56f37eb22886a4a309bbdb128b325e7449ca7147",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -30532,13 +30532,15 @@ times=\"0\"@}\n @subsubheading Synopsis\n \n @smallexample\n- -break-condition @var{number} @var{expr}\n+ -break-condition [ --force ] @var{number} @var{expr}\n @end smallexample\n \n Breakpoint @var{number} will stop the program only if the condition in\n @var{expr} is true.  The condition becomes part of the\n @samp{-break-list} output (see the description of the @samp{-break-list}\n-command below).\n+command below).  If the @samp{--force} flag is passed, the condition\n+is forcibly defined even when it is invalid for all locations of\n+breakpoint @var{number}.\n \n @subsubheading @value{GDBN} Command\n "
    },
    {
      "sha": "5439937f66bc8530f16b8b4160652a81339eda3c",
      "filename": "gdb/mi/mi-cmd-break.c",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmd-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmd-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-break.c?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -386,6 +386,63 @@ mi_cmd_dprintf_insert (const char *command, char **argv, int argc)\n   mi_cmd_break_insert_1 (1, command, argv, argc);\n }\n \n+/* Implements the -break-condition command.\n+   See the MI manual for the list of options.  */\n+\n+void\n+mi_cmd_break_condition (const char *command, char **argv, int argc)\n+{\n+  enum option\n+    {\n+      FORCE_CONDITION_OPT,\n+    };\n+\n+  static const struct mi_opt opts[] =\n+  {\n+    {\"-force\", FORCE_CONDITION_OPT, 0},\n+    { 0, 0, 0 }\n+  };\n+\n+  /* Parse arguments.  */\n+  int oind = 0;\n+  char *oarg;\n+  bool force_condition = false;\n+\n+  while (true)\n+    {\n+      int opt = mi_getopt (\"-break-condition\", argc, argv,\n+\t\t\t   opts, &oind, &oarg);\n+      if (opt < 0)\n+\tbreak;\n+\n+      switch (opt)\n+\t{\n+\tcase FORCE_CONDITION_OPT:\n+\t  force_condition = true;\n+\t  break;\n+\t}\n+    }\n+\n+  /* There must be at least two more args: a bpnum and a condition\n+     expression.  */\n+  if (oind + 1 >= argc)\n+    error (_(\"-break-condition: Missing the <number> and/or <expr> \"\n+\t     \"argument\"));\n+\n+  int bpnum = atoi (argv[oind]);\n+\n+  /* The rest form the condition expr.  */\n+  std::string expr (argv[oind + 1]);\n+  for (int i = oind + 2; i < argc; ++i)\n+    {\n+      expr += \" \";\n+      expr += argv[i];\n+    }\n+\n+  set_breakpoint_condition (bpnum, expr.c_str (), 0 /* from_tty */,\n+\t\t\t    force_condition);\n+}\n+\n enum wp_type\n {\n   REG_WP,"
    },
    {
      "sha": "1ed8b6f91262676113820f9dbb94d6d7df8a1049",
      "filename": "gdb/mi/mi-cmds.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmds.c?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -45,8 +45,8 @@ static struct mi_cmd mi_cmds[] =\n   DEF_MI_CMD_MI (\"add-inferior\", mi_cmd_add_inferior),\n   DEF_MI_CMD_CLI_1 (\"break-after\", \"ignore\", 1,\n \t\t    &mi_suppress_notification.breakpoint),\n-  DEF_MI_CMD_CLI_1 (\"break-condition\",\"cond\", 1,\n-\t\t  &mi_suppress_notification.breakpoint),\n+  DEF_MI_CMD_MI_1 (\"break-condition\", mi_cmd_break_condition,\n+\t\t   &mi_suppress_notification.breakpoint),\n   DEF_MI_CMD_MI_1 (\"break-commands\", mi_cmd_break_commands,\n \t\t   &mi_suppress_notification.breakpoint),\n   DEF_MI_CMD_CLI_1 (\"break-delete\", \"delete breakpoint\", 1,"
    },
    {
      "sha": "8da2e3939197d8c4e74d531e7acea25fafb4fdea",
      "filename": "gdb/mi/mi-cmds.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmds.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/mi/mi-cmds.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmds.h?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -36,6 +36,7 @@ extern mi_cmd_argv_ftype mi_cmd_ada_task_info;\n extern mi_cmd_argv_ftype mi_cmd_add_inferior;\n extern mi_cmd_argv_ftype mi_cmd_break_insert;\n extern mi_cmd_argv_ftype mi_cmd_dprintf_insert;\n+extern mi_cmd_argv_ftype mi_cmd_break_condition;\n extern mi_cmd_argv_ftype mi_cmd_break_commands;\n extern mi_cmd_argv_ftype mi_cmd_break_passcount;\n extern mi_cmd_argv_ftype mi_cmd_break_watch;"
    },
    {
      "sha": "50526da45ef904ac6765fa76dcd2a2414e0ed53c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdb.mi/mi-break.exp (test_forced_conditions): Add a test\n+\tfor the -break-condition command's \"--force\" flag.\n+\n 2021-05-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.mi/mi-break.exp (test_forced_conditions): New proc that"
    },
    {
      "sha": "b6ef34830047b62f698cf21358e5358d4dbec078",
      "filename": "gdb/testsuite/gdb.mi/mi-break.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/testsuite/gdb.mi/mi-break.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79aabb7308cd572fff21da5c93952a1bb0dc5b26/gdb/testsuite/gdb.mi/mi-break.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-break.exp?ref=79aabb7308cd572fff21da5c93952a1bb0dc5b26",
      "patch": "@@ -424,6 +424,17 @@ proc_with_prefix test_forced_conditions {} {\n     mi_gdb_test \"-dprintf-insert -c bad --force-condition callme \\\"Hello\\\"\" \\\n         \"${warning}\\\\^done,$bp\" \\\n         \"dprintf with forced condition\"\n+\n+    # Define a plain breakpoint first, and a condition later.\n+    mi_create_breakpoint \"callme\" \"define a bp\" \"\"\n+    mi_gdb_test \"-break-condition --force 16 bad == 42\" \\\n+        \"${warning}\\\\^done\" \\\n+        \"invalid condition is forced\"\n+    set args [list -cond \"bad == 42\" -locations \"\\\\\\[$loc\\\\\\]\"]\n+    set bp [eval mi_make_breakpoint_multi $args]\n+    mi_gdb_test \"-break-info 16\" \\\n+\t\"\\\\^done,[mi_make_breakpoint_table [list $bp]]\" \\\n+        \"invalid condition is defined\"\n }\n \n proc test_break {mi_mode} {"
    }
  ]
}