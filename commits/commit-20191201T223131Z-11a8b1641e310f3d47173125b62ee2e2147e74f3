{
  "sha": "11a8b1641e310f3d47173125b62ee2e2147e74f3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTFhOGIxNjQxZTMxMGYzZDQ3MTczMTI1YjYyZWUyZTIxNDdlNzRmMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-29T00:13:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-01T22:31:31Z"
    },
    "message": "gdb/dwarf: Introduce dwarf2_per_cu_int_type function\n\nThis is a minor refactor in preparation for the next commit.  Splits\nthe core of dwarf2_per_cu_addr_sized_int_type out into a separate\nfunction.  There should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.c (dwarf2_per_cu_int_type): New function, takes most\n\tof its implementation from...\n\t(dwarf2_per_cu_addr_sized_int_type): ...here, which now just calls\n\tthe new function.\n\nChange-Id: I8b849dd338012ec033b3f0a57d65cec0d7a3bd97",
    "tree": {
      "sha": "55ebaa50252419175df63f1db83f4174a31e1e90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55ebaa50252419175df63f1db83f4174a31e1e90"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/11a8b1641e310f3d47173125b62ee2e2147e74f3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11a8b1641e310f3d47173125b62ee2e2147e74f3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/11a8b1641e310f3d47173125b62ee2e2147e74f3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11a8b1641e310f3d47173125b62ee2e2147e74f3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5bbd8269fa8d138e8ea1dd3c8cdf42412c1dfa41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bbd8269fa8d138e8ea1dd3c8cdf42412c1dfa41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5bbd8269fa8d138e8ea1dd3c8cdf42412c1dfa41"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 31,
    "deletions": 11
  },
  "files": [
    {
      "sha": "98a3c6598dc5e00a3f6e088150f9dd56a8348482",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/11a8b1641e310f3d47173125b62ee2e2147e74f3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/11a8b1641e310f3d47173125b62ee2e2147e74f3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=11a8b1641e310f3d47173125b62ee2e2147e74f3",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2read.c (dwarf2_per_cu_int_type): New function, takes most\n+\tof its implementation from...\n+\t(dwarf2_per_cu_addr_sized_int_type): ...here, which now just calls\n+\tthe new function.\n+\n 2019-12-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2read.c (read_subrange_type): Read bit and byte stride and"
    },
    {
      "sha": "cd114d0bf660bdac955114d07f85ff6be86d46fd",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 11,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/11a8b1641e310f3d47173125b62ee2e2147e74f3/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/11a8b1641e310f3d47173125b62ee2e2147e74f3/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=11a8b1641e310f3d47173125b62ee2e2147e74f3",
      "patch": "@@ -1910,6 +1910,9 @@ static void process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile);\n static struct type *dwarf2_per_cu_addr_type (struct dwarf2_per_cu_data *per_cu);\n static struct type *dwarf2_per_cu_addr_sized_int_type\n \t(struct dwarf2_per_cu_data *per_cu, bool unsigned_p);\n+static struct type *dwarf2_per_cu_int_type\n+\t(struct dwarf2_per_cu_data *per_cu, int size_in_bytes,\n+\t bool unsigned_p);\n \n /* Class, the destructor of which frees all allocated queue entries.  This\n    will only have work to do if an error was thrown while processing the\n@@ -17887,24 +17890,22 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n   return 1;\n }\n \n-/* Find an integer type the same size as the address size given in the\n-   compilation unit header for PER_CU.  UNSIGNED_P controls if the integer\n-   is unsigned or not.  */\n+/* Find an integer type SIZE_IN_BYTES bytes in size and return it.\n+   UNSIGNED_P controls if the integer is unsigned or not.  */\n \n static struct type *\n-dwarf2_per_cu_addr_sized_int_type (struct dwarf2_per_cu_data *per_cu,\n-\t\t\t\t   bool unsigned_p)\n+dwarf2_per_cu_int_type (struct dwarf2_per_cu_data *per_cu,\n+\t\t\tint size_in_bytes, bool unsigned_p)\n {\n   struct objfile *objfile = per_cu->dwarf2_per_objfile->objfile;\n-  int addr_size = dwarf2_per_cu_addr_size (per_cu);\n   struct type *int_type;\n \n   /* Helper macro to examine the various builtin types.  */\n-#define TRY_TYPE(F)\t\t\t\t\t\t\\\n-  int_type = (unsigned_p\t\t\t\t\t\\\n-\t      ? objfile_type (objfile)->builtin_unsigned_ ## F\t\\\n-\t      : objfile_type (objfile)->builtin_ ## F);\t\t\\\n-  if (int_type != NULL && TYPE_LENGTH (int_type) == addr_size)\t\\\n+#define TRY_TYPE(F)\t\t\t\t\t\t\t\\\n+  int_type = (unsigned_p\t\t\t\t\t\t\\\n+\t      ? objfile_type (objfile)->builtin_unsigned_ ## F\t\t\\\n+\t      : objfile_type (objfile)->builtin_ ## F);\t\t\t\\\n+  if (int_type != NULL && TYPE_LENGTH (int_type) == size_in_bytes)\t\\\n     return int_type\n \n   TRY_TYPE (char);\n@@ -17918,6 +17919,18 @@ dwarf2_per_cu_addr_sized_int_type (struct dwarf2_per_cu_data *per_cu,\n   gdb_assert_not_reached (\"unable to find suitable integer type\");\n }\n \n+/* Find an integer type the same size as the address size given in the\n+   compilation unit header for PER_CU.  UNSIGNED_P controls if the integer\n+   is unsigned or not.  */\n+\n+static struct type *\n+dwarf2_per_cu_addr_sized_int_type (struct dwarf2_per_cu_data *per_cu,\n+\t\t\t\t   bool unsigned_p)\n+{\n+  int addr_size = dwarf2_per_cu_addr_size (per_cu);\n+  return dwarf2_per_cu_int_type (per_cu, addr_size, unsigned_p);\n+}\n+\n /* Read the DW_AT_type attribute for a sub-range.  If this attribute is not\n    present (which is valid) then compute the default type based on the\n    compilation units address size.  */"
    }
  ]
}