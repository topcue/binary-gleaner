{
  "sha": "e6123d0c615577915495a356b007cdfe97ee5945",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTYxMjNkMGM2MTU1Nzc5MTU0OTVhMzU2YjAwN2NkZmU5N2VlNTk0NQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-08T09:03:07Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-08T09:03:07Z"
    },
    "message": "x86: re-work operand swapping for XOP shift/rotate insns\n\nThere's no need for custom operand handling here, except for the VEX.W\ncontrolled operand swapping.",
    "tree": {
      "sha": "a111e29f1befd8bcf8d095768b3e3a588e645426",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a111e29f1befd8bcf8d095768b3e3a588e645426"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6123d0c615577915495a356b007cdfe97ee5945",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6123d0c615577915495a356b007cdfe97ee5945",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6123d0c615577915495a356b007cdfe97ee5945",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6123d0c615577915495a356b007cdfe97ee5945/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "93abb1468ea24f721b2ed025118f4b4412900b37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93abb1468ea24f721b2ed025118f4b4412900b37",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/93abb1468ea24f721b2ed025118f4b4412900b37"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 32,
    "deletions": 74
  },
  "files": [
    {
      "sha": "b6080b33c6e4c4492ce14455a0f636626cf0b753",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6123d0c615577915495a356b007cdfe97ee5945/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6123d0c615577915495a356b007cdfe97ee5945/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e6123d0c615577915495a356b007cdfe97ee5945",
      "patch": "@@ -1,3 +1,11 @@\n+2020-07-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (OP_Vex_2src_1, OP_Vex_2src_2, Vex_2src_1,\n+\tVex_2src_2): Delete.\n+\t(OP_VexW, VexW): New.\n+\t(xop_table): Use EXx for rotates by immediate. Use EXx and VexW\n+\tfor shifts and rotates by register.\n+\n 2020-07-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (OP_EX_VexImmW, OP_XMM_VexW, EXVexImmW, XMVexW,"
    },
    {
      "sha": "19b47a654664756e07fbf169fbab35c9657b6bfb",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 24,
      "deletions": 74,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6123d0c615577915495a356b007cdfe97ee5945/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6123d0c615577915495a356b007cdfe97ee5945/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=e6123d0c615577915495a356b007cdfe97ee5945",
      "patch": "@@ -88,6 +88,7 @@ static void OP_MS (int, int);\n static void OP_XS (int, int);\n static void OP_M (int, int);\n static void OP_VEX (int, int);\n+static void OP_VexW (int, int);\n static void OP_EX_Vex (int, int);\n static void OP_XMM_Vex (int, int);\n static void OP_Rounding (int, int);\n@@ -119,8 +120,6 @@ static void FXSAVE_Fixup (int, int);\n static void PCMPESTR_Fixup (int, int);\n static void OP_LWPCB_E (int, int);\n static void OP_LWP_E (int, int);\n-static void OP_Vex_2src_1 (int, int);\n-static void OP_Vex_2src_2 (int, int);\n \n static void MOVBE_Fixup (int, int);\n static void MOVSXD_Fixup (int, int);\n@@ -410,10 +409,9 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define CMP { CMP_Fixup, 0 }\n #define XMM0 { XMM_Fixup, 0 }\n #define FXSAVE { FXSAVE_Fixup, 0 }\n-#define Vex_2src_1 { OP_Vex_2src_1, 0 }\n-#define Vex_2src_2 { OP_Vex_2src_2, 0 }\n \n #define Vex { OP_VEX, vex_mode }\n+#define VexW { OP_VexW, vex_mode }\n #define VexScalar { OP_VEX, vex_scalar_mode }\n #define VexGatherQ { OP_VEX, vex_vsib_q_w_dq_mode }\n #define Vex128 { OP_VEX, vex128_mode }\n@@ -7629,10 +7627,10 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* c0 */\n-    { \"vprotb\", \t{ XM, Vex_2src_1, Ib }, 0 },\n-    { \"vprotw\", \t{ XM, Vex_2src_1, Ib }, 0 },\n-    { \"vprotd\", \t{ XM, Vex_2src_1, Ib }, 0 },\n-    { \"vprotq\", \t{ XM, Vex_2src_1, Ib }, 0 },\n+    { \"vprotb\", \t{ XM, EXx, Ib }, 0 },\n+    { \"vprotw\", \t{ XM, EXx, Ib }, 0 },\n+    { \"vprotd\", \t{ XM, EXx, Ib }, 0 },\n+    { \"vprotq\", \t{ XM, EXx, Ib }, 0 },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -7866,19 +7864,19 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 90 */\n-    { \"vprotb\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vprotw\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vprotd\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vprotq\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshlb\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshlw\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshld\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshlq\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n+    { \"vprotb\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vprotw\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vprotd\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vprotq\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshlb\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshlw\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshld\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshlq\",\t\t{ XM, EXx, VexW }, 0 },\n     /* 98 */\n-    { \"vpshab\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshaw\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshad\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n-    { \"vpshaq\",\t\t{ XM, Vex_2src_1, Vex_2src_2 }, 0 },\n+    { \"vpshab\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshaw\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshad\",\t\t{ XM, EXx, VexW }, 0 },\n+    { \"vpshaq\",\t\t{ XM, EXx, VexW }, 0 },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -15850,64 +15848,16 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n }\n \n static void\n-OP_Vex_2src (int bytemode, int sizeflag)\n+OP_VexW (int bytemode, int sizeflag)\n {\n-  if (modrm.mod == 3)\n-    {\n-      int reg = modrm.rm;\n-      USED_REX (REX_B);\n-      if (rex & REX_B)\n-\treg += 8;\n-      oappend (names_xmm[reg]);\n-    }\n-  else\n-    {\n-      if (intel_syntax\n-\t  && (bytemode == v_mode || bytemode == v_swap_mode))\n-\t{\n-\t  bytemode = (prefixes & PREFIX_DATA) ? x_mode : q_mode;\n-\t  used_prefixes |= (prefixes & PREFIX_DATA);\n-\t}\n-      OP_E (bytemode, sizeflag);\n-    }\n-}\n+  OP_VEX (bytemode, sizeflag);\n \n-static void\n-OP_Vex_2src_1 (int bytemode, int sizeflag)\n-{\n-  if (modrm.mod == 3)\n-    {\n-      /* Skip mod/rm byte.   */\n-      MODRM_CHECK;\n-      codep++;\n-    }\n-\n-  if (vex.w)\n-    {\n-      unsigned int reg = vex.register_specifier;\n-      vex.register_specifier = 0;\n-\n-      if (address_mode != mode_64bit)\n-\treg &= 7;\n-      oappend (names_xmm[reg]);\n-    }\n-  else\n-    OP_Vex_2src (bytemode, sizeflag);\n-}\n-\n-static void\n-OP_Vex_2src_2 (int bytemode, int sizeflag)\n-{\n   if (vex.w)\n-    OP_Vex_2src (bytemode, sizeflag);\n-  else\n     {\n-      unsigned int reg = vex.register_specifier;\n-      vex.register_specifier = 0;\n-\n-      if (address_mode != mode_64bit)\n-\treg &= 7;\n-      oappend (names_xmm[reg]);\n+      /* Swap 2nd and 3rd operands.  */\n+      strcpy (scratchbuf, op_out[2]);\n+      strcpy (op_out[2], op_out[1]);\n+      strcpy (op_out[1], scratchbuf);\n     }\n }\n "
    }
  ]
}