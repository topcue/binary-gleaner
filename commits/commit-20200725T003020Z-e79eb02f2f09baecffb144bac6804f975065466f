{
  "sha": "e79eb02f2f09baecffb144bac6804f975065466f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTc5ZWIwMmYyZjA5YmFlY2ZmYjE0NGJhYzY4MDRmOTc1MDY1NDY2Zg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-09T15:26:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-25T00:30:20Z"
    },
    "message": "gdb/fortran: resolve dynamic types when readjusting after an indirection\n\nAfter dereferencing a pointer (in value_ind) or following a\nreference (in coerce_ref) we call readjust_indirect_value_type to\n\"fixup\" the type of the resulting value object.\n\nThis fixup handles cases relating to the type of the resulting object\nbeing different (a sub-class) of the original pointers target type.\n\nIf we encounter a pointer to a dynamic type then after dereferencing a\npointer (in value_ind) the type of the object created will have had\nits dynamic type resolved.  However, in readjust_indirect_value_type,\nwe use the target type of the original pointer to \"fixup\" the type of\nthe resulting value.  In this case, the target type will be a dynamic\ntype, so the resulting value object, once again has a dynamic type.\n\nThis then triggers an assertion later within GDB.\n\nThe solution I propose here is that we call resolve_dynamic_type on\nthe pointer's target type (within readjust_indirect_value_type) so\nthat the resulting value is not converted back to a dynamic type.\n\nThe test case is based on the original test in the bug report.\n\ngdb/ChangeLog:\n\n\tPR fortran/23051\n\tPR fortran/26139\n\t* valops.c (value_ind): Pass address to\n\treadjust_indirect_value_type.\n\t* value.c (readjust_indirect_value_type): Make parameter\n\tnon-const, and add extra address parameter.  Resolve original type\n\tbefore using it.\n\t* value.h (readjust_indirect_value_type): Update function\n\tsignature and comment.\n\ngdb/testsuite/ChangeLog:\n\n\tPR fortran/23051\n\tPR fortran/26139\n\t* gdb.fortran/class-allocatable-array.exp: New file.\n\t* gdb.fortran/class-allocatable-array.f90: New file.\n\t* gdb.fortran/pointer-to-pointer.exp: New file.\n\t* gdb.fortran/pointer-to-pointer.f90: New file.",
    "tree": {
      "sha": "e1a92e0b6eb55bb577cb18a2caafab54685ab8d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1a92e0b6eb55bb577cb18a2caafab54685ab8d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e79eb02f2f09baecffb144bac6804f975065466f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e79eb02f2f09baecffb144bac6804f975065466f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e79eb02f2f09baecffb144bac6804f975065466f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e79eb02f2f09baecffb144bac6804f975065466f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "719251fee155d5d4ede91f555e8898460e6b1731",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/719251fee155d5d4ede91f555e8898460e6b1731",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/719251fee155d5d4ede91f555e8898460e6b1731"
    }
  ],
  "stats": {
    "total": 252,
    "additions": 233,
    "deletions": 19
  },
  "files": [
    {
      "sha": "0c2c6552d95270224c0c6523b6b3ba66d1a7650e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -1,3 +1,15 @@\n+2020-07-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR fortran/23051\n+\tPR fortran/26139\n+\t* valops.c (value_ind): Pass address to\n+\treadjust_indirect_value_type.\n+\t* value.c (readjust_indirect_value_type): Make parameter\n+\tnon-const, and add extra address parameter.  Resolve original type\n+\tbefore using it.\n+\t* value.h (readjust_indirect_value_type): Update function\n+\tsignature and comment.\n+\n 2020-07-25  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/26243"
    },
    {
      "sha": "98a35cf3b90267d79dd87d859335497d98fd00de",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR fortran/23051\n+\tPR fortran/26139\n+\t* gdb.fortran/class-allocatable-array.exp: New file.\n+\t* gdb.fortran/class-allocatable-array.f90: New file.\n+\t* gdb.fortran/pointer-to-pointer.exp: New file.\n+\t* gdb.fortran/pointer-to-pointer.f90: New file.\n+\n 2020-07-25  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/26243"
    },
    {
      "sha": "9475ba3b393a1cda0e4fc57a50bf4b1e52f3f1a0",
      "filename": "gdb/testsuite/gdb.fortran/class-allocatable-array.exp",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/class-allocatable-array.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/class-allocatable-array.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/class-allocatable-array.exp?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -0,0 +1,43 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Test that GDB can print an allocatable array that is a data field\n+# within a class like type.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break Here\"]\n+gdb_continue_to_breakpoint \"Break Here\"\n+\n+# If this first test fails then the Fortran compiler being used uses\n+# different names, or maybe a completely different approach, for\n+# representing class like structures.  The following tests are\n+# cetainly going to fail.\n+gdb_test \"print this\" \" = \\\\( _data = \\[^\\r\\n\\]+, _vptr = \\[^\\r\\n\\]+\\\\)\"\n+gdb_test \"print this%_data\" \" = \\\\(PTR TO -> \\\\( Type test_type \\\\)\\\\) \\[^\\r\\n\\]+\"\n+gdb_test \"print this%_data%b\" \" = \\\\(\\\\( 1, 2, 3\\\\) \\\\( 4, 5, 6\\\\) \\\\)\""
    },
    {
      "sha": "26d5fab035564b04f9ed49b52e1cab5661c39953",
      "filename": "gdb/testsuite/gdb.fortran/class-allocatable-array.f90",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/class-allocatable-array.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/class-allocatable-array.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/class-allocatable-array.f90?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -0,0 +1,54 @@\n+! Copyright 2020 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+module test_module\n+  type test_type\n+     integer a\n+     real, allocatable :: b (:, :)\n+   contains\n+     procedure :: test_proc\n+  end type test_type\n+\n+contains\n+\n+  subroutine test_proc (this)\n+    class(test_type), intent (inout) :: this\n+    allocate (this%b (3, 2))\n+    call fill_array_2d (this%b)\n+    print *, \"\"\t\t! Break Here\n+  contains\n+    ! Helper subroutine to fill 2-dimensional array with unique\n+    ! values.\n+    subroutine fill_array_2d (array)\n+      real, dimension (:,:) :: array\n+      real :: counter\n+\n+      counter = 1.0\n+      do i=LBOUND (array, 2), UBOUND (array, 2), 1\n+         do j=LBOUND (array, 1), UBOUND (array, 1), 1\n+            array (j,i) = counter\n+            counter = counter + 1\n+         end do\n+      end do\n+    end subroutine fill_array_2d\n+  end subroutine test_proc\n+end module\n+\n+program test\n+  use test_module\n+  implicit none\n+  type(test_type) :: t\n+  call t%test_proc ()\n+end program test"
    },
    {
      "sha": "7129e431ed1e67006621759c68c39eed279b9d8c",
      "filename": "gdb/testsuite/gdb.fortran/pointer-to-pointer.exp",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/pointer-to-pointer.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/pointer-to-pointer.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/pointer-to-pointer.exp?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -0,0 +1,46 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Test for GDB printing a pointer to a type containing a buffer.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break Here\"]\n+gdb_continue_to_breakpoint \"Break Here\"\n+\n+gdb_test \"print *buffer\" \\\n+    \" = \\\\( alpha = \\\\(1\\\\.5, 2\\\\.5, 3\\\\.5, 4\\\\.5, 5\\\\.5\\\\) \\\\)\"\n+\n+set l_buffer_type [multi_line \\\n+\t\t       \"Type l_buffer\" \\\n+\t\t       \"    real\\\\(kind=4\\\\) :: alpha\\\\(:\\\\)\" \\\n+\t\t       \"End Type l_buffer\" ]\n+\n+gdb_test \"ptype buffer\" \"type = PTR TO -> \\\\( ${l_buffer_type} \\\\)\"\n+gdb_test \"ptype *buffer\" \"type = ${l_buffer_type}\"\n+gdb_test \"ptype buffer%alpha\" \"type = real\\\\(kind=4\\\\) \\\\(5\\\\)\""
    },
    {
      "sha": "353217963a8a8cee0f0bef9352239b0ffd736222",
      "filename": "gdb/testsuite/gdb.fortran/pointer-to-pointer.f90",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/pointer-to-pointer.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/testsuite/gdb.fortran/pointer-to-pointer.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/pointer-to-pointer.f90?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -0,0 +1,34 @@\n+! Copyright 2020 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+program allocate_array\n+\n+  type l_buffer\n+     real, dimension(:), pointer :: alpha\n+  end type l_buffer\n+  type(l_buffer), pointer :: buffer\n+\n+  allocate (buffer)\n+  allocate (buffer%alpha (5))\n+\n+  buffer%alpha (1) = 1.5\n+  buffer%alpha (2) = 2.5\n+  buffer%alpha (3) = 3.5\n+  buffer%alpha (4) = 4.5\n+  buffer%alpha (5) = 5.5\n+\n+  print *, buffer%alpha\t! Break Here.\n+\n+end program allocate_array"
    },
    {
      "sha": "0eb2b0962114665e322c6e6a79d6cf99d6d152d2",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -1559,20 +1559,24 @@ value_ind (struct value *arg1)\n       enc_type = check_typedef (value_enclosing_type (arg1));\n       enc_type = TYPE_TARGET_TYPE (enc_type);\n \n+      CORE_ADDR base_addr;\n       if (check_typedef (enc_type)->code () == TYPE_CODE_FUNC\n \t  || check_typedef (enc_type)->code () == TYPE_CODE_METHOD)\n-\t/* For functions, go through find_function_addr, which knows\n-\t   how to handle function descriptors.  */\n-\targ2 = value_at_lazy (enc_type, \n-\t\t\t      find_function_addr (arg1, NULL));\n+\t{\n+\t  /* For functions, go through find_function_addr, which knows\n+\t     how to handle function descriptors.  */\n+\t  base_addr = find_function_addr (arg1, NULL);\n+\t}\n       else\n-\t/* Retrieve the enclosing object pointed to.  */\n-\targ2 = value_at_lazy (enc_type, \n-\t\t\t      (value_as_address (arg1)\n-\t\t\t       - value_pointed_to_offset (arg1)));\n-\n+\t{\n+\t  /* Retrieve the enclosing object pointed to.  */\n+\t  base_addr = (value_as_address (arg1)\n+\t\t       - value_pointed_to_offset (arg1));\n+\t}\n+      arg2 = value_at_lazy (enc_type, base_addr);\n       enc_type = value_type (arg2);\n-      return readjust_indirect_value_type (arg2, enc_type, base_type, arg1);\n+      return readjust_indirect_value_type (arg2, enc_type, base_type,\n+\t\t\t\t\t   arg1, base_addr);\n     }\n \n   error (_(\"Attempt to take contents of a non-pointer value.\"));"
    },
    {
      "sha": "aac9baaaf5652969ce6e6c4ff999217aec04a052",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -3629,10 +3629,20 @@ coerce_ref_if_computed (const struct value *arg)\n struct value *\n readjust_indirect_value_type (struct value *value, struct type *enc_type,\n \t\t\t      const struct type *original_type,\n-\t\t\t      const struct value *original_value)\n+\t\t\t      struct value *original_value,\n+\t\t\t      CORE_ADDR original_value_address)\n {\n+  gdb_assert (original_type->code () == TYPE_CODE_PTR\n+\t      || TYPE_IS_REFERENCE (original_type));\n+\n+  struct type *original_target_type = TYPE_TARGET_TYPE (original_type);\n+  gdb::array_view<const gdb_byte> view;\n+  struct type *resolved_original_target_type\n+    = resolve_dynamic_type (original_target_type, view,\n+\t\t\t    original_value_address);\n+\n   /* Re-adjust type.  */\n-  deprecated_set_value_type (value, TYPE_TARGET_TYPE (original_type));\n+  deprecated_set_value_type (value, resolved_original_target_type);\n \n   /* Add embedding info.  */\n   set_value_enclosing_type (value, enc_type);\n@@ -3659,12 +3669,11 @@ coerce_ref (struct value *arg)\n   enc_type = check_typedef (value_enclosing_type (arg));\n   enc_type = TYPE_TARGET_TYPE (enc_type);\n \n-  retval = value_at_lazy (enc_type,\n-                          unpack_pointer (value_type (arg),\n-                                          value_contents (arg)));\n+  CORE_ADDR addr = unpack_pointer (value_type (arg), value_contents (arg));\n+  retval = value_at_lazy (enc_type, addr);\n   enc_type = value_type (retval);\n-  return readjust_indirect_value_type (retval, enc_type,\n-                                       value_type_arg_tmp, arg);\n+  return readjust_indirect_value_type (retval, enc_type, value_type_arg_tmp,\n+\t\t\t\t       arg, addr);\n }\n \n struct value *"
    },
    {
      "sha": "12e4a13e3e40fd672d3c48589244c4416e289802",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e79eb02f2f09baecffb144bac6804f975065466f/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e79eb02f2f09baecffb144bac6804f975065466f/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=e79eb02f2f09baecffb144bac6804f975065466f",
      "patch": "@@ -488,7 +488,9 @@ extern struct value *coerce_ref_if_computed (const struct value *arg);\n \n /* Setup a new value type and enclosing value type for dereferenced value VALUE.\n    ENC_TYPE is the new enclosing type that should be set.  ORIGINAL_TYPE and\n-   ORIGINAL_VAL are the type and value of the original reference or pointer.\n+   ORIGINAL_VAL are the type and value of the original reference or\n+   pointer.  ORIGINAL_VALUE_ADDRESS is the address within VALUE, that is\n+   the address that was dereferenced.\n \n    Note, that VALUE is modified by this function.\n \n@@ -497,7 +499,8 @@ extern struct value *coerce_ref_if_computed (const struct value *arg);\n extern struct value * readjust_indirect_value_type (struct value *value,\n \t\t\t\t\t\t    struct type *enc_type,\n \t\t\t\t\t\t    const struct type *original_type,\n-\t\t\t\t\t\t    const struct value *original_val);\n+\t\t\t\t\t\t    struct value *original_val,\n+\t\t\t\t\t\t    CORE_ADDR original_value_address);\n \n /* Convert a REF to the object referenced.  */\n "
    }
  ]
}