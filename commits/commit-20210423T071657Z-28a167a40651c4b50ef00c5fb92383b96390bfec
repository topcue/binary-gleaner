{
  "sha": "28a167a40651c4b50ef00c5fb92383b96390bfec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjhhMTY3YTQwNjUxYzRiNTBlZjAwYzVmYjkyMzgzYjk2MzkwYmZlYw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:16:57Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:16:57Z"
    },
    "message": "x86: re-order optimize_disp()\n\nWhile I can't point out any specific case where things break, it looks\nwrong to have the consumer of a flag before its producer. Set .disp32\nfirst, then do the possible conversion to signed 32-bit, and finally\ncheck whether the value fits in a signed long.",
    "tree": {
      "sha": "b72d2a62aa73449568a0179ab9f61f180ac865dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b72d2a62aa73449568a0179ab9f61f180ac865dd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/28a167a40651c4b50ef00c5fb92383b96390bfec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a167a40651c4b50ef00c5fb92383b96390bfec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/28a167a40651c4b50ef00c5fb92383b96390bfec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a167a40651c4b50ef00c5fb92383b96390bfec/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b025ee8c81312ea0c1a7fd44b7813f59df871ef"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 23,
    "deletions": 16
  },
  "files": [
    {
      "sha": "669fb6b37429b1880c1b207a69f986e86f77de5e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28a167a40651c4b50ef00c5fb92383b96390bfec/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28a167a40651c4b50ef00c5fb92383b96390bfec/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=28a167a40651c4b50ef00c5fb92383b96390bfec",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_disp): Move down BFD64 section.\n+\tMove up setting of disp32.\n+\n 2021-04-23  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (pe): Don't truncate expression value."
    },
    {
      "sha": "5180320bcac4a7e72db74f51823350e16e29251b",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28a167a40651c4b50ef00c5fb92383b96390bfec/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28a167a40651c4b50ef00c5fb92383b96390bfec/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=28a167a40651c4b50ef00c5fb92383b96390bfec",
      "patch": "@@ -5707,19 +5707,6 @@ optimize_disp (void)\n \t\top_disp = (((op_disp & 0xffff) ^ 0x8000) - 0x8000);\n \t\ti.types[op].bitfield.disp64 = 0;\n \t      }\n-#ifdef BFD64\n-\t    /* Optimize 64-bit displacement to 32-bit for 64-bit BFD.  */\n-\t    if (i.types[op].bitfield.disp32\n-\t\t&& (op_disp & ~(((offsetT) 2 << 31) - 1)) == 0)\n-\t      {\n-\t\t/* If this operand is at most 32 bits, convert\n-\t\t   to a signed 32 bit number and don't use 64bit\n-\t\t   displacement.  */\n-\t\top_disp &= (((offsetT) 2 << 31) - 1);\n-\t\top_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);\n-\t\ti.types[op].bitfield.disp64 = 0;\n-\t      }\n-#endif\n \t    if (!op_disp && i.types[op].bitfield.baseindex)\n \t      {\n \t\ti.types[op].bitfield.disp8 = 0;\n@@ -5730,17 +5717,32 @@ optimize_disp (void)\n \t\ti.op[op].disps = 0;\n \t\ti.disp_operands--;\n \t      }\n+#ifdef BFD64\n \t    else if (flag_code == CODE_64BIT)\n \t      {\n+\t\tif (i.prefix[ADDR_PREFIX]\n+\t\t    && fits_in_unsigned_long (op_disp))\n+\t\t  i.types[op].bitfield.disp32 = 1;\n+\n+\t\t/* Optimize 64-bit displacement to 32-bit for 64-bit BFD.  */\n+\t\tif (i.types[op].bitfield.disp32\n+\t\t    && (op_disp & ~(((offsetT) 2 << 31) - 1)) == 0)\n+\t\t  {\n+\t\t    /* If this operand is at most 32 bits, convert\n+\t\t       to a signed 32 bit number and don't use 64bit\n+\t\t       displacement.  */\n+\t\t    op_disp &= (((offsetT) 2 << 31) - 1);\n+\t\t    op_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);\n+\t\t    i.types[op].bitfield.disp64 = 0;\n+\t\t  }\n+\n \t\tif (fits_in_signed_long (op_disp))\n \t\t  {\n \t\t    i.types[op].bitfield.disp64 = 0;\n \t\t    i.types[op].bitfield.disp32s = 1;\n \t\t  }\n-\t\tif (i.prefix[ADDR_PREFIX]\n-\t\t    && fits_in_unsigned_long (op_disp))\n-\t\t  i.types[op].bitfield.disp32 = 1;\n \t      }\n+#endif\n \t    if ((i.types[op].bitfield.disp32\n \t\t || i.types[op].bitfield.disp32s\n \t\t || i.types[op].bitfield.disp16)"
    }
  ]
}