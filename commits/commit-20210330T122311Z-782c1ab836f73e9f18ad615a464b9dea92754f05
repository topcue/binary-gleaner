{
  "sha": "782c1ab836f73e9f18ad615a464b9dea92754f05",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgyYzFhYjgzNmY3M2U5ZjE4YWQ2MTVhNDY0YjlkZWE5Mjc1NGYwNQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-29T16:48:43Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-30T12:23:11Z"
    },
    "message": "Fix inverted logic bug\n\nDuring reviews, I changed the success/failure variables from int to bool, but\nmissed updating the code in a couple spots.  Given the logic inversion, the\ngdbserver code fails instead of succeeding.\n\nFixed with the following patch. Seems fairly obvious, so I'll push it soon.\n\ngdbserver/ChangeLog:\n\n2021-03-30  Luis Machado  <luis.machado@linaro.org>\n\n\t* server.cc (handle_general_set, handle_query): Update variable\n\tto bool and fix verification logic.",
    "tree": {
      "sha": "98cdf635a3952b0ce3ea1b6c9bf59473836150c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98cdf635a3952b0ce3ea1b6c9bf59473836150c7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/782c1ab836f73e9f18ad615a464b9dea92754f05",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/782c1ab836f73e9f18ad615a464b9dea92754f05",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/782c1ab836f73e9f18ad615a464b9dea92754f05",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/782c1ab836f73e9f18ad615a464b9dea92754f05/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e0423804a6e421e0e8a22631eab42c984502f25",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e0423804a6e421e0e8a22631eab42c984502f25",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e0423804a6e421e0e8a22631eab42c984502f25"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 10,
    "deletions": 5
  },
  "files": [
    {
      "sha": "58ed0f0e69bfdb402a0cbdcf67523387a950e7e5",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/782c1ab836f73e9f18ad615a464b9dea92754f05/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/782c1ab836f73e9f18ad615a464b9dea92754f05/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=782c1ab836f73e9f18ad615a464b9dea92754f05",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-30  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* server.cc (handle_general_set, handle_query): Update variable\n+\tto bool and fix verification logic.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* Makefile.in (SFILES): Add /../gdb/nat/aarch64-mte-linux-ptrace.c."
    },
    {
      "sha": "2a443305691063d745e560e9063dab5a44f99644",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/782c1ab836f73e9f18ad615a464b9dea92754f05/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/782c1ab836f73e9f18ad615a464b9dea92754f05/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=782c1ab836f73e9f18ad615a464b9dea92754f05",
      "patch": "@@ -982,13 +982,13 @@ handle_general_set (char *own_buf)\n \n       require_running_or_return (own_buf);\n \n-      int ret = parse_store_memtags_request (own_buf, &addr, &len, tags,\n+      bool ret = parse_store_memtags_request (own_buf, &addr, &len, tags,\n \t\t\t\t\t     &type);\n \n-      if (ret == 0)\n+      if (ret)\n \tret = the_target->store_memtags (addr, len, tags, type);\n \n-      if (ret)\n+      if (!ret)\n \twrite_enn (own_buf);\n       else\n \twrite_ok (own_buf);\n@@ -2730,12 +2730,12 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \n       parse_fetch_memtags_request (own_buf, &addr, &len, &type);\n \n-      int ret = the_target->fetch_memtags (addr, len, tags, type);\n+      bool ret = the_target->fetch_memtags (addr, len, tags, type);\n \n       if (ret)\n \tret = create_fetch_memtags_reply (own_buf, tags);\n \n-      if (ret)\n+      if (!ret)\n \twrite_enn (own_buf);\n \n       *new_packet_len_p = strlen (own_buf);"
    }
  ]
}