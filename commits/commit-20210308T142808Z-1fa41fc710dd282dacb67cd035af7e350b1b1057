{
  "sha": "1fa41fc710dd282dacb67cd035af7e350b1b1057",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZhNDFmYzcxMGRkMjgyZGFjYjY3Y2QwMzVhZjdlMzUwYjFiMTA1Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:08Z"
    },
    "message": "Split out eval_op_rust_structop\n\nThis splits STRUCTOP_STRUCT into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (eval_op_rust_structop): New function.\n\t(rust_evaluate_subexp): Use it.",
    "tree": {
      "sha": "9ea88c71d085dabbd5b2ce9f3b55c6da1be307d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ea88c71d085dabbd5b2ce9f3b55c6da1be307d5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fa41fc710dd282dacb67cd035af7e350b1b1057",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fa41fc710dd282dacb67cd035af7e350b1b1057",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fa41fc710dd282dacb67cd035af7e350b1b1057",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fa41fc710dd282dacb67cd035af7e350b1b1057/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "575cae2335c72a41aa54dd9dd8014c3a36db8093",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/575cae2335c72a41aa54dd9dd8014c3a36db8093",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/575cae2335c72a41aa54dd9dd8014c3a36db8093"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 56,
    "deletions": 39
  },
  "files": [
    {
      "sha": "75409c62e7519b5327f9bfa0ba881ebb8ca370e9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa41fc710dd282dacb67cd035af7e350b1b1057/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa41fc710dd282dacb67cd035af7e350b1b1057/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1fa41fc710dd282dacb67cd035af7e350b1b1057",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (eval_op_rust_structop): New function.\n+\t(rust_evaluate_subexp): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* rust-lang.c (eval_op_rust_struct_anon): New function."
    },
    {
      "sha": "3b8638291c13642587dd14713112ec2809326a92",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 51,
      "deletions": 39,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa41fc710dd282dacb67cd035af7e350b1b1057/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa41fc710dd282dacb67cd035af7e350b1b1057/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=1fa41fc710dd282dacb67cd035af7e350b1b1057",
      "patch": "@@ -1449,6 +1449,55 @@ eval_op_rust_struct_anon (struct type *expect_type, struct expression *exp,\n tuple structs, and tuple-like enum variants\"));\n }\n \n+/* A helper function for STRUCTOP_STRUCT.  */\n+\n+static struct value *\n+eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n+\t\t       enum noside noside,\n+\t\t       struct value *lhs, const char *field_name)\n+{\n+  struct value *result;\n+  struct type *type = value_type (lhs);\n+  if (type->code () == TYPE_CODE_STRUCT && rust_enum_p (type))\n+    {\n+      gdb::array_view<const gdb_byte> view (value_contents (lhs),\n+\t\t\t\t\t    TYPE_LENGTH (type));\n+      type = resolve_dynamic_type (type, view, value_address (lhs));\n+\n+      if (rust_empty_enum_p (type))\n+\terror (_(\"Cannot access field %s of empty enum %s\"),\n+\t       field_name, type->name ());\n+\n+      int fieldno = rust_enum_variant (type);\n+      lhs = value_primitive_field (lhs, 0, fieldno, type);\n+\n+      struct type *outer_type = type;\n+      type = value_type (lhs);\n+      if (rust_tuple_type_p (type) || rust_tuple_struct_type_p (type))\n+\terror (_(\"Attempting to access named field %s of tuple \"\n+\t\t \"variant %s::%s, which has only anonymous fields\"),\n+\t       field_name, outer_type->name (),\n+\t       rust_last_path_segment (type->name ()));\n+\n+      try\n+\t{\n+\t  result = value_struct_elt (&lhs, NULL, field_name,\n+\t\t\t\t     NULL, \"structure\");\n+\t}\n+      catch (const gdb_exception_error &except)\n+\t{\n+\t  error (_(\"Could not find field %s of struct variant %s::%s\"),\n+\t\t field_name, outer_type->name (),\n+\t\t rust_last_path_segment (type->name ()));\n+\t}\n+    }\n+  else\n+    result = value_struct_elt (&lhs, NULL, field_name, NULL, \"structure\");\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    result = value_zero (value_type (result), VALUE_LVAL (result));\n+  return result;\n+}\n+\n /* evaluate_exp implementation for Rust.  */\n \n static struct value *\n@@ -1595,7 +1644,6 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n     case STRUCTOP_STRUCT:\n       {\n \tstruct value *lhs;\n-\tstruct type *type;\n \tint tem, pc;\n \n \tpc = (*pos)++;\n@@ -1604,44 +1652,8 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \tlhs = evaluate_subexp (nullptr, exp, pos, noside);\n \n \tconst char *field_name = &exp->elts[pc + 2].string;\n-\ttype = value_type (lhs);\n-\tif (type->code () == TYPE_CODE_STRUCT && rust_enum_p (type))\n-\t  {\n-\t    gdb::array_view<const gdb_byte> view (value_contents (lhs),\n-\t\t\t\t\t\t  TYPE_LENGTH (type));\n-\t    type = resolve_dynamic_type (type, view, value_address (lhs));\n-\n-\t    if (rust_empty_enum_p (type))\n-\t      error (_(\"Cannot access field %s of empty enum %s\"),\n-\t\t     field_name, type->name ());\n-\n-\t    int fieldno = rust_enum_variant (type);\n-\t    lhs = value_primitive_field (lhs, 0, fieldno, type);\n-\n-\t    struct type *outer_type = type;\n-\t    type = value_type (lhs);\n-\t    if (rust_tuple_type_p (type) || rust_tuple_struct_type_p (type))\n-\t\terror (_(\"Attempting to access named field %s of tuple \"\n-\t\t\t \"variant %s::%s, which has only anonymous fields\"),\n-\t\t       field_name, outer_type->name (),\n-\t\t       rust_last_path_segment (type->name ()));\n-\n-\t    try\n-\t      {\n-\t\tresult = value_struct_elt (&lhs, NULL, field_name,\n-\t\t\t\t\t   NULL, \"structure\");\n-\t      }\n-\t    catch (const gdb_exception_error &except)\n-\t      {\n-\t\terror (_(\"Could not find field %s of struct variant %s::%s\"),\n-\t\t       field_name, outer_type->name (),\n-\t\t       rust_last_path_segment (type->name ()));\n-\t      }\n-\t  }\n-\telse\n-\t  result = value_struct_elt (&lhs, NULL, field_name, NULL, \"structure\");\n-\tif (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t  result = value_zero (value_type (result), VALUE_LVAL (result));\n+\treturn eval_op_rust_structop (expect_type, exp, noside, lhs,\n+\t\t\t\t      field_name);\n       }\n       break;\n "
    }
  ]
}