{
  "sha": "b69c9d41e89498442cb5af5287f378b3583dd445",
  "node_id": "C_kwDOANOeidoAKGI2OWM5ZDQxZTg5NDk4NDQyY2I1YWY1Mjg3ZjM3OGIzNTgzZGQ0NDU",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2021-11-23T09:36:39Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2021-11-23T09:36:39Z"
    },
    "message": "AArch64: Add support for AArch64 EFI (efi-*-aarch64).\n\nThis adds support for efi-*-aarch64 by virtue of adding a new PEI target\npei-aarch64-little.  This is not a full target and only exists to support EFI\nat this time.\n\nThis means that this target does not support relocation processing and is mostly\na container format.  This format has been added to elf based aarch64 targets\nsuch that efi images can be made natively on Linux.\n\nHowever this target is not valid for use with gas but only with objcopy.\n\nWith these changes the resulting file is recognized as an efi image by\nthird party tools:\n\n>  pecli info hello.efi\n\nMetadata\n================================================================================\nMD5:            598c32a778b0f0deebe977fef8578c4e\nSHA1:           4580121edd5cb4dc40f51b28f171fd15250df84c\nSHA256:         3154bd7cf42433d1c957f6bf55a17ad8c57ed41b29df2d485703349fd6ff1d5c\nImphash:\nSize:           47561 bytes\nType:           PE32+ executable (EFI application) (stripped to external PDB), for MS Windows\nCompile Time:   1970-01-01 00:00:00 (UTC - 0x0       )\nEntry point:    0x2000 (section .text)\n\nSections\n================================================================================\nName      RWX  VirtSize   VirtAddr   RawAddr   RawSize   Entropy  md5\n.text     R-X  0x5bb0     0x2000     0x400     0x5c00      6.39 551fbc264256a3f387de8a891500ae0d\n.reloc    R--  0xc        0x8000     0x6000    0x200       0.02 0c45f6d812d079821c1d54c09ab89e1d\n.data     RW-  0x1d88     0x9000     0x6200    0x1e00      4.18 5d1137c09f01289dc62bf754f7290db3\n.dynamic  RW-  0xf0       0xb000     0x8000    0x200       0.34 5c94ed3206f05a277e6f04fbf131f131\n.rela     R--  0xe58      0xc000     0x8200    0x1000      1.87 8b5c6bc30f3acb7ca7bf2e6789d68519\n.dynsym   R--  0x138      0xd000     0x9200    0x200       0.96 bdcf5101da51aadc663ca8859f88138c\n\nImports\n================================================================================\n\nAny magic number is based on the Microsoft PE specification [1].\n\n[1] https://docs.microsoft.com/en-us/windows/win32/debug/pe-format\n\nbfd/ChangeLog:\n\n2021-10-21  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR binutils/26206\n\t* .gitignore (pe-aarch64igen.c): New.\n\t* Makefile.am (pei-aarch64.lo, pe-aarch64igen.lo, pei-aarch64.c,\n\tpe-aarch64igen.c): Add support.\n\t* Makefile.in: Likewise.\n\t* bfd.c (bfd_get_sign_extend_vma): Add pei-aarch64-little.\n\t* coff-aarch64.c: New file.\n\t* coffcode.h (coff_set_arch_mach_hook, coff_set_flags,\n\tcoff_write_object_contents) Add aarch64 (aarch64_pei_vec) support.\n\t* config.bfd: Likewise.\n\t* configure: Likewise.\n\t* configure.ac: Likewise.\n\t* libpei.h (GET_OPTHDR_IMAGE_BASE, PUT_OPTHDR_IMAGE_BASE,\n\tGET_OPTHDR_SIZE_OF_STACK_RESERVE, PUT_OPTHDR_SIZE_OF_STACK_RESERVE,\n\tGET_OPTHDR_SIZE_OF_STACK_COMMIT, PUT_OPTHDR_SIZE_OF_STACK_COMMIT,\n\tGET_OPTHDR_SIZE_OF_HEAP_RESERVE, PUT_OPTHDR_SIZE_OF_HEAP_RESERVE,\n\tGET_OPTHDR_SIZE_OF_HEAP_COMMIT, PUT_OPTHDR_SIZE_OF_HEAP_COMMIT,\n\tGET_PDATA_ENTRY, _bfd_peAArch64_bfd_copy_private_bfd_data_common,\n\t_bfd_peAArch64_bfd_copy_private_section_data,\n\t_bfd_peAArch64_get_symbol_info, _bfd_peAArch64_only_swap_filehdr_out,\n\t_bfd_peAArch64_print_private_bfd_data_common,\n\t_bfd_peAArch64i_final_link_postscript,\n\t_bfd_peAArch64i_only_swap_filehdr_out, _bfd_peAArch64i_swap_aouthdr_in,\n\t_bfd_peAArch64i_swap_aouthdr_out, _bfd_peAArch64i_swap_aux_in,\n\t_bfd_peAArch64i_swap_aux_out, _bfd_peAArch64i_swap_lineno_in,\n\t_bfd_peAArch64i_swap_lineno_out, _bfd_peAArch64i_swap_scnhdr_out,\n\t_bfd_peAArch64i_swap_sym_in, _bfd_peAArch64i_swap_sym_out,\n\t_bfd_peAArch64i_swap_debugdir_in, _bfd_peAArch64i_swap_debugdir_out,\n\t_bfd_peAArch64i_write_codeview_record,\n\t_bfd_peAArch64i_slurp_codeview_record,\n\t_bfd_peAArch64_print_ce_compressed_pdata): New.\n\t* peXXigen.c (_bfd_XXi_swap_aouthdr_in, _bfd_XXi_swap_aouthdr_out,\n\tpe_print_pdata, _bfd_XX_print_private_bfd_data_common,\n\t_bfd_XX_bfd_copy_private_section_data, _bfd_XXi_final_link_postscript):\n\tSupport COFF_WITH_peAArch64,\n\t* pei-aarch64.c: New file.\n\t* peicode.h (coff_swap_scnhdr_in, pe_ILF_build_a_bfd, pe_ILF_object_p):\n\tSupport COFF_WITH_peAArch64.\n\t(jtab): Add dummy entry that traps.\n\t* targets.c (aarch64_pei_vec): New.\n\nbinutils/ChangeLog:\n\n2021-10-21  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR binutils/26206\n\t* NEWS: Add new support.\n\t* objcopy.c (convert_efi_target): Add efi-*-aarch64 support.\n\t* testsuite/binutils-all/aarch64/pei-aarch64-little.d: New test.\n\t* testsuite/binutils-all/aarch64/pei-aarch64-little.s: New test.\n\ninclude/ChangeLog:\n\n2021-10-21  Tamar Christina  <tamar.christina@arm.com>\n\n\tPR binutils/26206\n\t* coff/aarch64.h: New file.\n\t* coff/pe.h (IMAGE_FILE_MACHINE_ARM64): New.",
    "tree": {
      "sha": "2e7a9d40deb5b1b17bd16b6556f73bd33db3f0a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e7a9d40deb5b1b17bd16b6556f73bd33db3f0a9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b69c9d41e89498442cb5af5287f378b3583dd445",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b69c9d41e89498442cb5af5287f378b3583dd445",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b69c9d41e89498442cb5af5287f378b3583dd445",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b69c9d41e89498442cb5af5287f378b3583dd445/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0c3e266dc283a45a23185be3bb49e4d33987a892",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c3e266dc283a45a23185be3bb49e4d33987a892",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0c3e266dc283a45a23185be3bb49e4d33987a892"
    }
  ],
  "stats": {
    "total": 522,
    "additions": 495,
    "deletions": 27
  },
  "files": [
    {
      "sha": "d4f7423111e5be6009abc685539af0c2e58e9045",
      "filename": "bfd/.gitignore",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/.gitignore",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/.gitignore",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/.gitignore?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -10,6 +10,7 @@\n /peigen.c\n /pepigen.c\n /pex64igen.c\n+/pe-aarch64igen.c\n /stmp-bfd-h\n /targmatch.h\n "
    },
    {
      "sha": "d0798c340abe2f37514490fe475236c5e4578f51",
      "filename": "bfd/Makefile.am",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.am?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -572,7 +572,9 @@ BFD64_BACKENDS = \\\n \tmach-o-aarch64.lo \\\n \tmach-o-x86-64.lo \\\n \tmmo.lo \\\n+\tpe-aarch64igen.lo \\\n \tpe-x86_64.lo \\\n+\tpei-aarch64lo \\\n \tpei-ia64.lo \\\n \tpei-x86_64.lo \\\n \tpepigen.lo \\\n@@ -613,6 +615,7 @@ BFD64_BACKENDS_CFILES = \\\n \tmach-o-x86-64.c \\\n \tmmo.c \\\n \tpe-x86_64.c \\\n+\tpei-aarch64.c \\\n \tpei-ia64.c \\\n \tpei-x86_64.c \\\n \tvms-alpha.c\n@@ -673,7 +676,7 @@ BUILD_CFILES = \\\n \telf32-ia64.c elf64-ia64.c \\\n \telf32-loongarch.c elf64-loongarch.c \\\n \telf32-riscv.c elf64-riscv.c \\\n-\tpeigen.c pepigen.c pex64igen.c\n+\tpeigen.c pepigen.c pex64igen.c pe-aarch64igen.c\n \n CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)\n \n@@ -877,6 +880,10 @@ pex64igen.c: peXXigen.c\n \techo \"#line 1 \\\"peXXigen.c\\\"\" > $@\n \t$(SED) -e s/XX/pex64/g < $< >> $@\n \n+pe-aarch64igen.c: peXXigen.c\n+\techo \"#line 1 \\\"peXXigen.c\\\"\" > $@\n+\t$(SED) -e s/XX/peAArch64/g < $< >> $@\n+\n BFD_H_DEPS= $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h $(INCDIR)/diagnostics.h\n LOCAL_H_DEPS= libbfd.h sysdep.h config.h\n $(BFD32_LIBS) \\"
    },
    {
      "sha": "b9466430be4054f9bccf7866c4e88f5795381eec",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -999,7 +999,9 @@ BFD64_BACKENDS = \\\n \tmach-o-aarch64.lo \\\n \tmach-o-x86-64.lo \\\n \tmmo.lo \\\n+\tpe-aarch64igen.lo \\\n \tpe-x86_64.lo \\\n+\tpei-aarch64.lo \\\n \tpei-ia64.lo \\\n \tpei-x86_64.lo \\\n \tpepigen.lo \\\n@@ -1040,6 +1042,7 @@ BFD64_BACKENDS_CFILES = \\\n \tmach-o-x86-64.c \\\n \tmmo.c \\\n \tpe-x86_64.c \\\n+\tpei-aarch64.c \\\n \tpei-ia64.c \\\n \tpei-x86_64.c \\\n \tvms-alpha.c\n@@ -1099,7 +1102,7 @@ BUILD_CFILES = \\\n \telf32-ia64.c elf64-ia64.c \\\n \telf32-loongarch.c elf64-loongarch.c \\\n \telf32-riscv.c elf64-riscv.c \\\n-\tpeigen.c pepigen.c pex64igen.c\n+\tpeigen.c pepigen.c pex64igen.c pe-aarch64igen.c\n \n CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)\n SOURCE_HFILES = \\\n@@ -1562,9 +1565,11 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pei-mcore.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pei-sh.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pei-x86_64.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pei-aarch64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/peigen.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pepigen.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pex64igen.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pe-aarch64igen.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/plugin.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ppcboot.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reloc.Plo@am__quote@\n@@ -2010,6 +2015,11 @@ pepigen.c : peXXigen.c\n pex64igen.c: peXXigen.c\n \techo \"#line 1 \\\"peXXigen.c\\\"\" > $@\n \t$(SED) -e s/XX/pex64/g < $< >> $@\n+\n+pe-aarch64igen.c: peXXigen.c\n+\techo \"#line 1 \\\"peXXigen.c\\\"\" > $@\n+\t$(SED) -e s/XX/peAArch64/g < $< >> $@\n+\n $(BFD32_LIBS) \\\n  $(BFD64_LIBS) \\\n  $(ALL_MACHINES) \\"
    },
    {
      "sha": "5c3797de3052b5715c6cb222599dbf5b2bd2e8f9",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -1738,6 +1738,7 @@ bfd_get_sign_extend_vma (bfd *abfd)\n       || strcmp (name, \"pei-i386\") == 0\n       || strcmp (name, \"pe-x86-64\") == 0\n       || strcmp (name, \"pei-x86-64\") == 0\n+      || strcmp (name, \"pei-aarch64-little\") == 0\n       || strcmp (name, \"pe-arm-wince-little\") == 0\n       || strcmp (name, \"pei-arm-wince-little\") == 0\n       || strcmp (name, \"aixcoff-rs6000\") == 0"
    },
    {
      "sha": "a9bc417fae8b7c353f1127cf8ec17978079d4ff2",
      "filename": "bfd/coff-aarch64.c",
      "status": "added",
      "additions": 166,
      "deletions": 0,
      "changes": 166,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/coff-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/coff-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-aarch64.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -0,0 +1,166 @@\n+/* BFD back-end for AArch64 COFF files.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+\n+#ifndef COFF_WITH_peAArch64\n+#define COFF_WITH_peAArch64\n+#endif\n+\n+/* Note we have to make sure not to include headers twice.\n+   Not all headers are wrapped in #ifdef guards, so we define\n+   PEI_HEADERS to prevent double including here.  */\n+#ifndef PEI_HEADERS\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+#include \"coff/aarch64.h\"\n+#include \"coff/internal.h\"\n+#include \"coff/pe.h\"\n+#include \"libcoff.h\"\n+#include \"libiberty.h\"\n+#endif\n+\n+#include \"libcoff.h\"\n+\n+/* The page size is a guess based on ELF.  */\n+\n+#define COFF_PAGE_SIZE 0x1000\n+\n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n+#ifndef PCRELOFFSET\n+#define PCRELOFFSET true\n+#endif\n+\n+/* Currently we don't handle any relocations.  */\n+static reloc_howto_type pe_aarch64_std_reloc_howto[] =\n+  {\n+\n+  };\n+\n+#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER  2\n+#define COFF_PAGE_SIZE\t\t\t      0x1000\n+\n+#ifndef NUM_ELEM\n+#define NUM_ELEM(a) ((sizeof (a)) / sizeof ((a)[0]))\n+#endif\n+\n+#define NUM_RELOCS NUM_ELEM (pe_aarch64_std_reloc_howto)\n+\n+#define RTYPE2HOWTO(cache_ptr, dst)             \\\n+  (cache_ptr)->howto = NULL\n+\n+#ifndef bfd_pe_print_pdata\n+#define bfd_pe_print_pdata      NULL\n+#endif\n+\n+/* Return TRUE if this relocation should\n+   appear in the output .reloc section.  */\n+\n+static bool\n+in_reloc_p (bfd * abfd ATTRIBUTE_UNUSED,\n+            reloc_howto_type * howto)\n+{\n+  return !howto->pc_relative;\n+}\n+\n+#include \"coffcode.h\"\n+\n+/* Target vectors.  */\n+const bfd_target\n+#ifdef TARGET_SYM\n+  TARGET_SYM =\n+#else\n+  aarch64_pei_vec =\n+#endif\n+{\n+#ifdef TARGET_NAME\n+  TARGET_NAME,\n+#else\n+ \"pei-aarch64-little\",\t\t\t/* Name.  */\n+#endif\n+  bfd_target_coff_flavour,\n+  BFD_ENDIAN_LITTLE,\t\t/* Data byte order is little.  */\n+  BFD_ENDIAN_LITTLE,\t\t/* Header byte order is little.  */\n+\n+  (HAS_RELOC | EXEC_P\t\t/* Object flags.  */\n+   | HAS_LINENO | HAS_DEBUG\n+   | HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED | BFD_COMPRESS | BFD_DECOMPRESS),\n+\n+  (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC /* Section flags.  */\n+#if defined(COFF_WITH_PE)\n+   | SEC_LINK_ONCE | SEC_LINK_DUPLICATES | SEC_READONLY | SEC_DEBUGGING\n+#endif\n+   | SEC_CODE | SEC_DATA | SEC_EXCLUDE ),\n+\n+#ifdef TARGET_UNDERSCORE\n+  TARGET_UNDERSCORE,\t\t/* Leading underscore.  */\n+#else\n+  0,\t\t\t\t/* Leading underscore.  */\n+#endif\n+  '/',\t\t\t\t/* Ar_pad_char.  */\n+  15,\t\t\t\t/* Ar_max_namelen.  */\n+  0,\t\t\t\t/* match priority.  */\n+  TARGET_KEEP_UNUSED_SECTION_SYMBOLS, /* keep unused section symbols.  */\n+\n+     /* Data conversion functions.  */\n+     bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n+     bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n+     bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* Data.  */\n+     /* Header conversion functions.  */\n+     bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n+     bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n+     bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* Hdrs.  */\n+\n+  /* Note that we allow an object file to be treated as a core file as well.  */\n+  {\t\t\t\t/* bfd_check_format.  */\n+    _bfd_dummy_target,\n+    coff_object_p,\n+    bfd_generic_archive_p,\n+    coff_object_p\n+  },\n+  {\t\t\t\t/* bfd_set_format.  */\n+    _bfd_bool_bfd_false_error,\n+    coff_mkobject,\n+    _bfd_generic_mkarchive,\n+    _bfd_bool_bfd_false_error\n+  },\n+  {\t\t\t\t/* bfd_write_contents.  */\n+    _bfd_bool_bfd_false_error,\n+    coff_write_object_contents,\n+    _bfd_write_archive_contents,\n+    _bfd_bool_bfd_false_error\n+  },\n+\n+  BFD_JUMP_TABLE_GENERIC (coff),\n+  BFD_JUMP_TABLE_COPY (coff),\n+  BFD_JUMP_TABLE_CORE (_bfd_nocore),\n+  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),\n+  BFD_JUMP_TABLE_SYMBOLS (coff),\n+  BFD_JUMP_TABLE_RELOCS (coff),\n+  BFD_JUMP_TABLE_WRITE (coff),\n+  BFD_JUMP_TABLE_LINK (coff),\n+  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),\n+\n+  NULL,\n+\n+  COFF_SWAP_TABLE\n+};"
    },
    {
      "sha": "e2b256648ad78bb1db0dceb28721a2092c120da9",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -2225,6 +2225,12 @@ coff_set_arch_mach_hook (bfd *abfd, void * filehdr)\n \t}\n       break;\n #endif\n+#ifdef AARCH64MAGIC\n+    case AARCH64MAGIC:\n+      arch = bfd_arch_aarch64;\n+      machine = internal_f->f_flags & F_AARCH64_ARCHITECTURE_MASK;\n+      break;\n+#endif\n #ifdef Z80MAGIC\n     case Z80MAGIC:\n       arch = bfd_arch_z80;\n@@ -2781,6 +2787,12 @@ coff_set_flags (bfd * abfd,\n       return true;\n #endif\n \n+#ifdef AARCH64MAGIC\n+    case bfd_arch_aarch64:\n+      * magicp = AARCH64MAGIC;\n+      return true;\n+#endif\n+\n #ifdef ARMMAGIC\n     case bfd_arch_arm:\n #ifdef ARM_WINCE\n@@ -3876,7 +3888,7 @@ coff_write_object_contents (bfd * abfd)\n     internal_f.f_flags |= IMAGE_FILE_LARGE_ADDRESS_AWARE;\n #endif\n \n-#ifndef COFF_WITH_pex64\n+#if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n #ifdef COFF_WITH_PE\n   internal_f.f_flags |= IMAGE_FILE_32BIT_MACHINE;\n #else\n@@ -3925,6 +3937,11 @@ coff_write_object_contents (bfd * abfd)\n     internal_a.magic = ZMAGIC;\n #endif\n \n+#if defined(AARCH64)\n+#define __A_MAGIC_SET__\n+    internal_a.magic = ZMAGIC;\n+#endif\n+\n #if defined MCORE_PE\n #define __A_MAGIC_SET__\n     internal_a.magic = IMAGE_NT_OPTIONAL_HDR_MAGIC;"
    },
    {
      "sha": "776918253ef11140df94042b379789e6f7b1e598",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -248,7 +248,7 @@ case \"${targ}\" in\n     ;;\n   aarch64-*-elf | aarch64-*-rtems* | aarch64-*-genode*)\n     targ_defvec=aarch64_elf64_le_vec\n-    targ_selvecs=\"aarch64_elf64_be_vec aarch64_elf32_le_vec aarch64_elf32_be_vec arm_elf32_le_vec arm_elf32_be_vec\"\n+    targ_selvecs=\"aarch64_elf64_be_vec aarch64_elf32_le_vec aarch64_elf32_be_vec arm_elf32_le_vec arm_elf32_be_vec aarch64_pei_vec\"\n     want64=true\n     ;;\n   aarch64_be-*-elf)\n@@ -278,7 +278,7 @@ case \"${targ}\" in\n     ;;\n   aarch64-*-linux* | aarch64-*-netbsd*)\n     targ_defvec=aarch64_elf64_le_vec\n-    targ_selvecs=\"aarch64_elf64_be_vec aarch64_elf32_le_vec aarch64_elf32_be_vec arm_elf32_le_vec arm_elf32_be_vec\"\n+    targ_selvecs=\"aarch64_elf64_be_vec aarch64_elf32_le_vec aarch64_elf32_be_vec arm_elf32_le_vec arm_elf32_be_vec aarch64_pei_vec\"\n     want64=true\n     ;;\n   aarch64_be-*-linux* | aarch64_be-*-netbsd*)"
    },
    {
      "sha": "eb782e75e7646126936a5aec19926d02dbb44e37",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -13257,6 +13257,7 @@ do\n     aarch64_elf64_le_vec)\t   tb=\"$tb elf64-aarch64.lo elfxx-aarch64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     aarch64_elf64_le_cloudabi_vec) tb=\"$tb elf64-aarch64.lo elfxx-aarch64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     aarch64_mach_o_vec)\t\t tb=\"$tb mach-o-aarch64.lo\"; target_size=64 ;;\n+    aarch64_pei_vec)\t\t tb=\"$tb pei-aarch64.lo pe-aarch64igen.lo $coff\"; target_size=64 ;;\n     alpha_ecoff_le_vec)\t\t tb=\"$tb coff-alpha.lo ecoff.lo $ecoff\"; target_size=64 ;;\n     alpha_elf64_vec)\t\t tb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;\n     alpha_elf64_fbsd_vec)\t tb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;"
    },
    {
      "sha": "aa16d92816f67d3888a183437a81770dd2cf5d50",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -436,6 +436,7 @@ do\n     aarch64_elf64_le_vec)\t   tb=\"$tb elf64-aarch64.lo elfxx-aarch64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     aarch64_elf64_le_cloudabi_vec) tb=\"$tb elf64-aarch64.lo elfxx-aarch64.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     aarch64_mach_o_vec)\t\t tb=\"$tb mach-o-aarch64.lo\"; target_size=64 ;;\n+    aarch64_pei_vec)\t\t tb=\"$tb pei-aarch64.lo pe-aarch64igen.lo $coff\"; target_size=64 ;;\n     alpha_ecoff_le_vec)\t\t tb=\"$tb coff-alpha.lo ecoff.lo $ecoff\"; target_size=64 ;;\n     alpha_elf64_vec)\t\t tb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;\n     alpha_elf64_fbsd_vec)\t tb=\"$tb elf64-alpha.lo elf64.lo $elf\"; target_size=64 ;;"
    },
    {
      "sha": "26589e8e520f8ee9ab752822e76964a8f0e2979c",
      "filename": "bfd/libpei.h",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/libpei.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/libpei.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libpei.h?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -275,6 +275,41 @@\n #define _bfd_XXi_write_codeview_record\t\t\t_bfd_pepi_write_codeview_record\n #define _bfd_XXi_slurp_codeview_record\t\t\t_bfd_pepi_slurp_codeview_record\n \n+#elif defined COFF_WITH_peAArch64\n+\n+#define GET_OPTHDR_IMAGE_BASE\t\t H_GET_64\n+#define PUT_OPTHDR_IMAGE_BASE\t\t H_PUT_64\n+#define GET_OPTHDR_SIZE_OF_STACK_RESERVE H_GET_64\n+#define PUT_OPTHDR_SIZE_OF_STACK_RESERVE H_PUT_64\n+#define GET_OPTHDR_SIZE_OF_STACK_COMMIT\t H_GET_64\n+#define PUT_OPTHDR_SIZE_OF_STACK_COMMIT\t H_PUT_64\n+#define GET_OPTHDR_SIZE_OF_HEAP_RESERVE\t H_GET_64\n+#define PUT_OPTHDR_SIZE_OF_HEAP_RESERVE\t H_PUT_64\n+#define GET_OPTHDR_SIZE_OF_HEAP_COMMIT\t H_GET_64\n+#define PUT_OPTHDR_SIZE_OF_HEAP_COMMIT\t H_PUT_64\n+#define GET_PDATA_ENTRY\t\t\t bfd_get_32\n+\n+#define _bfd_XX_bfd_copy_private_bfd_data_common\t_bfd_peAArch64_bfd_copy_private_bfd_data_common\n+#define _bfd_XX_bfd_copy_private_section_data\t\t_bfd_peAArch64_bfd_copy_private_section_data\n+#define _bfd_XX_get_symbol_info\t\t\t\t_bfd_peAArch64_get_symbol_info\n+#define _bfd_XX_only_swap_filehdr_out\t\t\t_bfd_peAArch64_only_swap_filehdr_out\n+#define _bfd_XX_print_private_bfd_data_common\t\t_bfd_peAArch64_print_private_bfd_data_common\n+#define _bfd_XXi_final_link_postscript\t\t\t_bfd_peAArch64i_final_link_postscript\n+#define _bfd_XXi_only_swap_filehdr_out\t\t\t_bfd_peAArch64i_only_swap_filehdr_out\n+#define _bfd_XXi_swap_aouthdr_in\t\t\t_bfd_peAArch64i_swap_aouthdr_in\n+#define _bfd_XXi_swap_aouthdr_out\t\t\t_bfd_peAArch64i_swap_aouthdr_out\n+#define _bfd_XXi_swap_aux_in\t\t\t\t_bfd_peAArch64i_swap_aux_in\n+#define _bfd_XXi_swap_aux_out\t\t\t\t_bfd_peAArch64i_swap_aux_out\n+#define _bfd_XXi_swap_lineno_in\t\t\t\t_bfd_peAArch64i_swap_lineno_in\n+#define _bfd_XXi_swap_lineno_out\t\t\t_bfd_peAArch64i_swap_lineno_out\n+#define _bfd_XXi_swap_scnhdr_out\t\t\t_bfd_peAArch64i_swap_scnhdr_out\n+#define _bfd_XXi_swap_sym_in\t\t\t\t_bfd_peAArch64i_swap_sym_in\n+#define _bfd_XXi_swap_sym_out\t\t\t\t_bfd_peAArch64i_swap_sym_out\n+#define _bfd_XXi_swap_debugdir_in\t\t\t_bfd_peAArch64i_swap_debugdir_in\n+#define _bfd_XXi_swap_debugdir_out\t\t\t_bfd_peAArch64i_swap_debugdir_out\n+#define _bfd_XXi_write_codeview_record\t\t\t_bfd_peAArch64i_write_codeview_record\n+#define _bfd_XXi_slurp_codeview_record\t\t\t_bfd_peAArch64i_slurp_codeview_record\n+\n #else /* !COFF_WITH_pep */\n \n #define GET_OPTHDR_IMAGE_BASE H_GET_32\n@@ -369,5 +404,6 @@ bool _bfd_XX_bfd_copy_private_section_data\n bool _bfd_pe_print_ce_compressed_pdata (bfd *, void *);\n bool _bfd_pe64_print_ce_compressed_pdata (bfd *, void *);\n bool _bfd_pex64_print_ce_compressed_pdata (bfd *, void *);\n+bool _bfd_peAArch64_print_ce_compressed_pdata (bfd *, void *);\n bool _bfd_pep_print_ce_compressed_pdata (bfd *, void *);\n "
    },
    {
      "sha": "5f977ea32dce48843604e8d789ac1de72e380679",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 23,
      "deletions": 20,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -60,8 +60,9 @@\n    on this code has a chance of getting something accomplished without\n    wasting too much time.  */\n \n-/* This expands into COFF_WITH_pe, COFF_WITH_pep, or COFF_WITH_pex64\n-   depending on whether we're compiling for straight PE or PE+.  */\n+/* This expands into COFF_WITH_pe, COFF_WITH_pep, COFF_WITH_pex64 or\n+   COFF_WITH_peAArch64 depending on whether we're compiling for straight\n+   PE or PE+.  */\n #define COFF_WITH_XX\n \n #include \"sysdep.h\"\n@@ -83,6 +84,8 @@\n # include \"coff/x86_64.h\"\n #elif defined COFF_WITH_pep\n # include \"coff/ia64.h\"\n+#elif defined COFF_WITH_peAArch64\n+# include \"coff/aarch64.h\"\n #else\n # include \"coff/i386.h\"\n #endif\n@@ -92,7 +95,7 @@\n #include \"libpei.h\"\n #include \"safe-ctype.h\"\n \n-#if defined COFF_WITH_pep || defined COFF_WITH_pex64\n+#if defined COFF_WITH_pep || defined COFF_WITH_pex64 || defined COFF_WITH_peAArch64\n # undef AOUTSZ\n # define AOUTSZ\t\tPEPAOUTSZ\n # define PEAOUTHDR\tPEPAOUTHDR\n@@ -469,7 +472,7 @@ _bfd_XXi_swap_aouthdr_in (bfd * abfd,\n   aouthdr_int->text_start =\n     GET_AOUTHDR_TEXT_START (abfd, aouthdr_ext->text_start);\n \n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n   /* PE32+ does not have data_start member!  */\n   aouthdr_int->data_start =\n     GET_AOUTHDR_DATA_START (abfd, aouthdr_ext->data_start);\n@@ -555,20 +558,20 @@ _bfd_XXi_swap_aouthdr_in (bfd * abfd,\n   if (aouthdr_int->entry)\n     {\n       aouthdr_int->entry += a->ImageBase;\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       aouthdr_int->entry &= 0xffffffff;\n #endif\n     }\n \n   if (aouthdr_int->tsize)\n     {\n       aouthdr_int->text_start += a->ImageBase;\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       aouthdr_int->text_start &= 0xffffffff;\n #endif\n     }\n \n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n   /* PE32+ does not have data_start member!  */\n   if (aouthdr_int->dsize)\n     {\n@@ -628,23 +631,23 @@ _bfd_XXi_swap_aouthdr_out (bfd * abfd, void * in, void * out)\n   if (aouthdr_in->tsize)\n     {\n       aouthdr_in->text_start -= ib;\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       aouthdr_in->text_start &= 0xffffffff;\n #endif\n     }\n \n   if (aouthdr_in->dsize)\n     {\n       aouthdr_in->data_start -= ib;\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       aouthdr_in->data_start &= 0xffffffff;\n #endif\n     }\n \n   if (aouthdr_in->entry)\n     {\n       aouthdr_in->entry -= ib;\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       aouthdr_in->entry &= 0xffffffff;\n #endif\n     }\n@@ -748,7 +751,7 @@ _bfd_XXi_swap_aouthdr_out (bfd * abfd, void * in, void * out)\n   PUT_AOUTHDR_TEXT_START (abfd, aouthdr_in->text_start,\n \t\t\t  aouthdr_out->standard.text_start);\n \n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n   /* PE32+ does not have data_start member!  */\n   PUT_AOUTHDR_DATA_START (abfd, aouthdr_in->data_start,\n \t\t\t  aouthdr_out->standard.data_start);\n@@ -1800,7 +1803,7 @@ pe_print_edata (bfd * abfd, void * vfile)\n static bool\n pe_print_pdata (bfd * abfd, void * vfile)\n {\n-#if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n # define PDATA_ROW_SIZE\t(3 * 8)\n #else\n # define PDATA_ROW_SIZE\t(5 * 4)\n@@ -1827,7 +1830,7 @@ pe_print_pdata (bfd * abfd, void * vfile)\n \n   fprintf (file,\n \t   _(\"\\nThe Function Table (interpreted .pdata section contents)\\n\"));\n-#if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n   fprintf (file,\n \t   _(\" vma:\\t\\t\\tBegin Address    End Address      Unwind Info\\n\"));\n #else\n@@ -1864,7 +1867,7 @@ pe_print_pdata (bfd * abfd, void * vfile)\n       bfd_vma eh_handler;\n       bfd_vma eh_data;\n       bfd_vma prolog_end_addr;\n-#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64)\n       int em_data;\n #endif\n \n@@ -1882,7 +1885,7 @@ pe_print_pdata (bfd * abfd, void * vfile)\n \t/* We are probably into the padding of the section now.  */\n \tbreak;\n \n-#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64)\n       em_data = ((eh_handler & 0x1) << 2) | (prolog_end_addr & 0x3);\n #endif\n       eh_handler &= ~(bfd_vma) 0x3;\n@@ -1893,7 +1896,7 @@ pe_print_pdata (bfd * abfd, void * vfile)\n       bfd_fprintf_vma (abfd, file, begin_addr); fputc (' ', file);\n       bfd_fprintf_vma (abfd, file, end_addr); fputc (' ', file);\n       bfd_fprintf_vma (abfd, file, eh_handler);\n-#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64)\n       fputc (' ', file);\n       bfd_fprintf_vma (abfd, file, eh_data); fputc (' ', file);\n       bfd_fprintf_vma (abfd, file, prolog_end_addr);\n@@ -2784,7 +2787,7 @@ _bfd_XX_print_private_bfd_data_common (bfd * abfd, void * vfile)\n   bfd_fprintf_vma (abfd, file, i->AddressOfEntryPoint);\n   fprintf (file, \"\\nBaseOfCode\\t\\t\");\n   bfd_fprintf_vma (abfd, file, i->BaseOfCode);\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n   /* PE32+ does not have BaseOfData member!  */\n   fprintf (file, \"\\nBaseOfData\\t\\t\");\n   bfd_fprintf_vma (abfd, file, i->BaseOfData);\n@@ -3085,7 +3088,7 @@ _bfd_XX_get_symbol_info (bfd * abfd, asymbol *symbol, symbol_info *ret)\n   coff_get_symbol_info (abfd, symbol, ret);\n }\n \n-#if !defined(COFF_WITH_pep) && defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && defined(COFF_WITH_pex64) && defined(COFF_WITH_peAArch64)\n static int\n sort_x64_pdata (const void *l, const void *r)\n {\n@@ -4504,7 +4507,7 @@ _bfd_XXi_final_link_postscript (bfd * abfd, struct coff_final_link_info *pfinfo)\n \tthe TLS data directory consists of 4 pointers, followed\n \tby two 4-byte integer. This implies that the total size\n \tis different for 32-bit and 64-bit executables.  */\n-#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x18;\n #else\n       pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x28;\n@@ -4513,7 +4516,7 @@ _bfd_XXi_final_link_postscript (bfd * abfd, struct coff_final_link_info *pfinfo)\n \n /* If there is a .pdata section and we have linked pdata finally, we\n      need to sort the entries ascending.  */\n-#if !defined(COFF_WITH_pep) && defined(COFF_WITH_pex64)\n+#if !defined(COFF_WITH_pep) && defined(COFF_WITH_pex64) && defined(COFF_WITH_peAArch64)\n   {\n     asection *sec = bfd_get_section_by_name (abfd, \".pdata\");\n "
    },
    {
      "sha": "99326d1612655408f1b5ceea7a013e1768083498",
      "filename": "bfd/pei-aarch64.c",
      "status": "added",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/pei-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/pei-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pei-aarch64.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -0,0 +1,75 @@\n+/* BFD back-end for AArch64 PE IMAGE COFF files.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+\n+#define TARGET_SYM\t\taarch64_pei_vec\n+#define TARGET_NAME\t\t\"pei-aarch64-little\"\n+#define TARGET_ARCHITECTURE\tbfd_arch_aarch64\n+#define TARGET_PAGESIZE\t\t4096\n+#define TARGET_BIG_ENDIAN\t0\n+#define TARGET_ARCHIVE\t\t0\n+#define TARGET_PRIORITY\t\t0\n+\n+#define COFF_IMAGE_WITH_PE\n+/* Rename the above into.. */\n+#define COFF_WITH_peAArch64\n+#define COFF_WITH_PE\n+#define PCRELOFFSET\t   true\n+\n+/* Long section names not allowed in executable images, only object files.  */\n+#define COFF_LONG_SECTION_NAMES 0\n+\n+#define COFF_SECTION_ALIGNMENT_ENTRIES \\\n+{ COFF_SECTION_NAME_EXACT_MATCH (\".bss\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_EXACT_MATCH (\".data\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_EXACT_MATCH (\".rdata\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_EXACT_MATCH (\".text\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_PARTIAL_MATCH (\".idata\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_EXACT_MATCH (\".pdata\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\\n+{ COFF_SECTION_NAME_PARTIAL_MATCH (\".debug\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \\\n+{ COFF_SECTION_NAME_PARTIAL_MATCH (\".gnu.linkonce.wi.\"), \\\n+  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }\n+\n+#define PEI_HEADERS\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+#include \"coff/aarch64.h\"\n+#include \"coff/internal.h\"\n+#include \"coff/pe.h\"\n+#include \"libcoff.h\"\n+#include \"libpei.h\"\n+#include \"libiberty.h\"\n+\n+/* Make sure we're setting a 64-bit format.  */\n+#undef AOUTSZ\n+#define AOUTSZ          PEPAOUTSZ\n+#define PEAOUTHDR       PEPAOUTHDR\n+\n+#include \"coff-aarch64.c\""
    },
    {
      "sha": "1e8ed803edc6e269eb84c08007eb0ce568d75a16",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -231,7 +231,7 @@ coff_swap_scnhdr_in (bfd * abfd, void * ext, void * in)\n     {\n       scnhdr_int->s_vaddr += pe_data (abfd)->pe_opthdr.ImageBase;\n       /* Do not cut upper 32-bits for 64-bit vma.  */\n-#ifndef COFF_WITH_pex64\n+#if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64)\n       scnhdr_int->s_vaddr &= 0xffffffff;\n #endif\n     }\n@@ -738,6 +738,16 @@ static const jump_table jtab[] =\n   },\n #endif\n \n+#ifdef AARCH64MAGIC\n+/* We don't currently support jumping to DLLs, so if\n+   someone does try emit a runtime trap.  Through UDF #0.  */\n+  { AARCH64MAGIC,\n+    { 0x00, 0x00, 0x00, 0x00 },\n+    4, 0\n+  },\n+\n+#endif\n+\n #ifdef  ARMPEMAGIC\n   { ARMPEMAGIC,\n     { 0x00, 0xc0, 0x9f, 0xe5, 0x00, 0xf0,\n@@ -910,7 +920,7 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n \t/* See PR 20907 for a reproducer.  */\n \tgoto error_return;\n \n-#ifdef COFF_WITH_pex64\n+#if defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64)\n       ((unsigned int *) id4->contents)[0] = ordinal;\n       ((unsigned int *) id4->contents)[1] = 0x80000000;\n       ((unsigned int *) id5->contents)[0] = ordinal;\n@@ -1206,6 +1216,12 @@ pe_ILF_object_p (bfd * abfd)\n #endif\n       break;\n \n+    case IMAGE_FILE_MACHINE_ARM64:\n+#ifdef AARCH64MAGIC\n+      magic = AARCH64MAGIC;\n+#endif\n+      break;\n+\n     case IMAGE_FILE_MACHINE_THUMB:\n #ifdef THUMBPEMAGIC\n       {"
    },
    {
      "sha": "672dc2bb1a4d5643f84577d81d4c9cebc14429d9",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -679,6 +679,7 @@ extern const bfd_target aarch64_elf64_be_cloudabi_vec;\n extern const bfd_target aarch64_elf64_le_vec;\n extern const bfd_target aarch64_elf64_le_cloudabi_vec;\n extern const bfd_target aarch64_mach_o_vec;\n+extern const bfd_target aarch64_pei_vec;\n extern const bfd_target alpha_ecoff_le_vec;\n extern const bfd_target alpha_elf64_vec;\n extern const bfd_target alpha_elf64_fbsd_vec;\n@@ -993,6 +994,7 @@ static const bfd_target * const _bfd_target_vector[] =\n \t&aarch64_elf64_le_vec,\n \t&aarch64_elf64_le_cloudabi_vec,\n \t&aarch64_mach_o_vec,\n+\t&aarch64_pei_vec,\n #endif\n \n #ifdef BFD64"
    },
    {
      "sha": "6b827903e54fac30e9ba61bf7f3fd3106c2e74e1",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -15,6 +15,9 @@\n \n * readelf -r dumps RELR relative relocations now.\n \n+* Support for efi-app-aarch64, efi-rtdrv-aarch64 and efi-bsdrv-aarch64 has been\n+  added to objcopy in order to enable UEFI development using binutils.\n+\n Changes in 2.37:\n \n * The readelf tool has a new command line option which can be used to specify"
    },
    {
      "sha": "6faf8f33379e1bc65cfacee408eb0d04fe549803",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -4993,6 +4993,13 @@ convert_efi_target (char *efi)\n       /* Change x86_64 to x86-64.  */\n       efi[7] = '-';\n     }\n+  else if (strcmp (efi + 4, \"aarch64\") == 0)\n+    {\n+      /* Change aarch64 to aarch64-little.  */\n+      efi = (char *) xrealloc (efi, strlen (efi) + 7);\n+      char *t = \"aarch64-little\";\n+      strcpy (efi + 4, t);\n+    }\n }\n \n /* Allocate and return a pointer to a struct section_add, initializing the"
    },
    {
      "sha": "27cb6e17db3944ee3d74a526f092e081ff2e85fd",
      "filename": "binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.d?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -0,0 +1,16 @@\n+#skip: aarch64_be-*-*\n+#ld: -e0\n+#PROG: objcopy\n+#objcopy: -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel -j .rela -j .rel.* -j .rela.* -j .rel* -j .rela* -j .reloc --target=efi-app-aarch64\n+#objdump: -h -f\n+#name: Check if efi app format is recognized\n+\n+.*:     file format pei-aarch64-little\n+architecture: aarch64, flags 0x00000132:\n+EXEC_P, HAS_SYMS, HAS_LOCALS, D_PAGED\n+start address 0x0000000000000000\n+\n+Sections:\n+Idx Name          Size      VMA               LMA               File off  Algn\n+  0 \\.text         00000030  0[^ ]+  0[^ ]+  0[^ ]+  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE"
    },
    {
      "sha": "dafc5fa47f9713b541a8d252748f9621affce5fc",
      "filename": "binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.s",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/pei-aarch64-little.s?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -0,0 +1,42 @@\n+\t.arch armv8-a\n+\t.text\n+\t.align\t2\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+.LFB0:\n+\t.cfi_startproc\n+\tsub\tsp, sp, #16\n+\t.cfi_def_cfa_offset 16\n+\tstr\tw0, [sp, 12]\n+\tldr\tw0, [sp, 12]\n+\tmul\tw0, w0, w0\n+\tadd\tsp, sp, 16\n+\t.cfi_def_cfa_offset 0\n+\tret\n+\t.cfi_endproc\n+.LFE0:\n+\t.size\tfoo, .-foo\n+\t.align\t2\n+\t.global\tmain\n+\t.type\tmain, %function\n+main:\n+.LFB1:\n+\t.cfi_startproc\n+\tstp\tx29, x30, [sp, -16]!\n+\t.cfi_def_cfa_offset 16\n+\t.cfi_offset 29, -16\n+\t.cfi_offset 30, -8\n+\tmov\tx29, sp\n+\tmov\tw0, 5\n+\tbl\tfoo\n+\tldp\tx29, x30, [sp], 16\n+\t.cfi_restore 30\n+\t.cfi_restore 29\n+\t.cfi_def_cfa_offset 0\n+\tret\n+\t.cfi_endproc\n+.LFE1:\n+\t.size\tmain, .-main\n+\t.ident\t\"GCC: (fsf-trunk.2870) 12.0.0 20210930 (experimental)\"\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "2c21f0d6cfdac4cb0debbee60030226fa70106d2",
      "filename": "include/coff/aarch64.h",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/include/coff/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/include/coff/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/aarch64.h?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -0,0 +1,63 @@\n+/* AArch64 COFF support for BFD.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software Foundation,\n+   Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+#define COFFAARCH64 1\n+\n+#define L_LNNO_SIZE 2\n+#define INCLUDE_COMDAT_FIELDS_IN_AUXENT\n+#include \"coff/external.h\"\n+\n+#define F_AARCH64_ARCHITECTURE_MASK\t(0x4000)\n+\n+#define\tAARCH64MAGIC\t0xaa64  /* From Microsoft specification. */\n+\n+#undef  BADMAG\n+#define BADMAG(x) ((x).f_magic != AARCH64MAGIC)\n+#define AARCH64         1                 /* Customize coffcode.h.  */\n+\n+#define IMAGE_NT_OPTIONAL_HDR64_MAGIC      0x20b\n+\n+#define OMAGIC          0404    /* Object files, eg as output.  */\n+#define ZMAGIC          IMAGE_NT_OPTIONAL_HDR64_MAGIC    /* Demand load format, eg normal ld output 0x10b.  */\n+#define STMAGIC\t\t0401\t/* Target shlib.  */\n+#define SHMAGIC\t\t0443\t/* Host   shlib.  */\n+\n+/* define some NT default values */\n+/*  #define NT_IMAGE_BASE        0x400000 moved to internal.h */\n+#define NT_SECTION_ALIGNMENT 0x1000\n+#define NT_FILE_ALIGNMENT    0x200\n+#define NT_DEF_RESERVE       0x100000\n+#define NT_DEF_COMMIT        0x1000\n+\n+/* We use the .rdata section to hold read only data.  */\n+#define _LIT\t\".rdata\"\n+\n+/********************** RELOCATION DIRECTIVES **********************/\n+struct external_reloc\n+{\n+  char r_vaddr[4];\n+  char r_symndx[4];\n+  char r_type[2];\n+  char r_offset[4];\n+};\n+\n+#define RELOC struct external_reloc\n+#define RELSZ 14\n+\n+#define ARM_NOTE_SECTION \".note\""
    },
    {
      "sha": "558cf0e1b86f008f613d107bc72368b3811143ee",
      "filename": "include/coff/pe.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b69c9d41e89498442cb5af5287f378b3583dd445/include/coff/pe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b69c9d41e89498442cb5af5287f378b3583dd445/include/coff/pe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/pe.h?ref=b69c9d41e89498442cb5af5287f378b3583dd445",
      "patch": "@@ -137,6 +137,7 @@\n #define IMAGE_FILE_MACHINE_AM33              0x01d3\n #define IMAGE_FILE_MACHINE_AMD64             0x8664\n #define IMAGE_FILE_MACHINE_ARM               0x01c0\n+#define IMAGE_FILE_MACHINE_ARM64             0xaa64\n #define IMAGE_FILE_MACHINE_AXP64             IMAGE_FILE_MACHINE_ALPHA64\n #define IMAGE_FILE_MACHINE_CEE               0xc0ee\n #define IMAGE_FILE_MACHINE_CEF               0x0cef"
    }
  ]
}