{
  "sha": "75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzVkMDQ1MTI0MDFjYmM5Y2QyZDk4MzVlNzdiOTBhYzNhZDFkZTdkOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-25T15:15:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-25T15:40:36Z"
    },
    "message": "gdb/testsuite: support passing inferior arguments with native-gdbserver board\n\nThis patch makes it possible to run tests requiring passing arguments to\nthe inferior with the native-gdbserver board.  The end goal is to write\na test that verifies passing arguments to the inferior works, and to\nhave that test exercise inferior arguments passed on the gdbserver\ncommand line, when using the native-gdbserver target board (in addition\nto the other boards).  This is done in the next patch.\n\nWith the native-gdbserver target board, gdbserver is started in\ngdb_reload (implemented in config/gdbserver.exp), called in gdb_run_cmd.\ngdb_run_cmd already supposedly accepts inferior arguments (although that\nfeature does not seem to be used anywhere), which it passes to the `run`\ncommand, for non-stub target boards.  I've changed gdb_run_cmd so that\nit forwards these arguments to gdb_reload as well.  gdb_reload passes\nthem to gdbserver_run, and they eventually make their way to the\ngdbserver command line.\n\ngdb_run_cmd currently accepts `args` (the varargs of tcl), which means\nit receives inferior arguments as a list.  This won't work with\narguments with spaces, because they will end up being formatted with\ncurly braces like this:\n\n    % set args [list hello \"with spaces\" world]\n    hello {with spaces} world\n    % puts \"run $args\"\n    run hello {with spaces} world\n\nI've changed it to accept a single string that is passed to `run` and\ngdb_reload.  I've done the same change in gdb_start_cmd and\ngdb_starti_cmd, although these two are not used with native-gdbserver.\n\nI've changed all gdb_reload implementations in the tree to accept a new\ninferior_args argument, although most of them don't do anything with it\n(and don't need to).  People maintaining target boards out of tree will\nneed to do the same.\n\nI found two tests to adjust to avoid adding new failures or errors.\nThese tests needed new [use_gdb_stub] checks, because they rely on\nhaving GDB run new processes.  These are guarded by a [target_info\nexists noargs], which made them get skipped on native-gdbserver.  But\nnow that the native-gdbserver board supports args, this is no longer\nenough.\n\nNote that with this change, noargs and use_gdb_stub are orthogonal.  It\ntook me a moment to grasp this, so I thought I would spell out the\ndifferent possible situations:\n\n- !noargs and !use_gdb_stub: inferior process started by gdb, can pass\n  args\n- noargs and !use_gdb_stub: inferior process started by gdb (perhaps\n  through extended-remote protocol, the simulator, some other target),\n  but that target doesn't support inferior arguments\n- noargs and use_gdb_stub: inferior process started by some other\n  program to which GDB connects using the remote protocol, that program\n  does not support passing args to the inferior process\n- !noargs and use_gdb_stub: inferior process started by some other\n  program to which GDB connects u sing the remote protocol, that program\n  supports passing args to the inferior process\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/gdb.exp (gdb_run_cmd): Change argument from args to\n\tinferior_args.  Pass it to gdb_reload.\n\t(gdb_start_cmd, gdb_starti_cmd): Change argument from args to\n\tinferior_args.\n\t(gdb_reload): Add inferior_args argument.\n\t* config/gdbserver.exp (gdb_reload): Add inferior_args argument,\n\tpass it to gdbserver_run.\n\t* boards/native-gdbserver.exp: Do not set noargs.\n\t* boards/native-extended-gdbserver.exp (gdb_reload): Add\n\tinferior_args argument.\n\t* boards/stdio-gdbserver-base.exp (gdb_reload): Likewise.\n\t* gdb.base/a2-run.exp: Check for use_gdb_stub.\n\t* gdb.base/args.exp: Likewise.\n\nChange-Id: Ibda027c71867157852f34700342ab31edf39e4d8",
    "tree": {
      "sha": "9493b5cbb1546abc0b671f00bbf9539c4eba9b8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9493b5cbb1546abc0b671f00bbf9539c4eba9b8c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7dbfcd6f79d9f66e317e61bac5855868f8d20043",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7dbfcd6f79d9f66e317e61bac5855868f8d20043",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7dbfcd6f79d9f66e317e61bac5855868f8d20043"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 62,
    "deletions": 24
  },
  "files": [
    {
      "sha": "5da102b28697a962bd7741fb346f562d2192152e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -1,3 +1,19 @@\n+2020-05-25  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* lib/gdb.exp (gdb_run_cmd): Change argument from args to\n+\tinferior_args.  Pass it to gdb_reload.\n+\t(gdb_start_cmd, gdb_starti_cmd): Change argument from args to\n+\tinferior_args.\n+\t(gdb_reload): Add inferior_args argument.\n+\t* config/gdbserver.exp (gdb_reload): Add inferior_args argument,\n+\tpass it to gdbserver_run.\n+\t* boards/native-gdbserver.exp: Do not set noargs.\n+\t* boards/native-extended-gdbserver.exp (gdb_reload): Add\n+\tinferior_args argument.\n+\t* boards/stdio-gdbserver-base.exp (gdb_reload): Likewise.\n+\t* gdb.base/a2-run.exp: Check for use_gdb_stub.\n+\t* gdb.base/args.exp: Likewise.\n+\n 2020-05-25  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (exec_is_pie): Add comment."
    },
    {
      "sha": "3d5e78211462b6b2ac322dcdd52711bc313bb67b",
      "filename": "gdb/testsuite/boards/native-extended-gdbserver.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/native-extended-gdbserver.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/native-extended-gdbserver.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/boards/native-extended-gdbserver.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -102,7 +102,7 @@ proc gdb_file_cmd { arg } {\n     return [extended_gdbserver_load_last_file]\n }\n \n-proc gdb_reload { } {\n+proc gdb_reload { {inferior_args {}} } {\n     return [extended_gdbserver_load_last_file]\n }\n "
    },
    {
      "sha": "823f5cfa3ad1fd23f4ec03e5b60df7c4dda45007",
      "filename": "gdb/testsuite/boards/native-gdbserver.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/native-gdbserver.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/native-gdbserver.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/boards/native-gdbserver.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -27,9 +27,6 @@ load_board_description \"local-board\"\n # This gdbserver can only run a process once per session.\n set_board_info gdb,do_reload_on_run 1\n \n-# There's no support for argument-passing (yet).\n-set_board_info noargs 1\n-\n set_board_info use_gdb_stub 1\n set_board_info exit_is_reliable 1\n "
    },
    {
      "sha": "720e2e823fa8e14c2270fd52c493e99242112e56",
      "filename": "gdb/testsuite/boards/stdio-gdbserver-base.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/stdio-gdbserver-base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/boards/stdio-gdbserver-base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/boards/stdio-gdbserver-base.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -45,7 +45,7 @@ proc make_gdbserver_stdio_port {} {\n     return \"| [get_target_remote_pipe_cmd]\"\n }\n \n-proc gdb_reload { } {\n+proc gdb_reload { {inferior_args {}} } {\n     return [gdb_target_cmd \"remote\" [make_gdbserver_stdio_port]]\n }\n "
    },
    {
      "sha": "a4e935f214d276a5e943543f9436274a72c759ed",
      "filename": "gdb/testsuite/config/gdbserver.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/config/gdbserver.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/config/gdbserver.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/config/gdbserver.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -36,12 +36,8 @@\n #\tUnles you have a gdbserver that can handle multiple sessions.\n #\n #   set_board_info noargs 1\n-#\tAt present there is no provision in the remote protocol\n-#\tfor passing arguments.  This test framework does not\n-#\taddress the issue, so it's best to set this variable\n-#\tin your baseboard configuration file.  \n-#\tFIXME: there's no reason why the test harness couldn't\n-#\tpass commandline args when it spawns gdbserver.\n+#\tSet this if the board does not support passing arguments to the\n+#\tinferior process.\n #\n #   set_board_info gdb,noinferiorio 1\n #\tNeither the traditional gdbserver nor the one in libremote\n@@ -77,8 +73,8 @@ proc gdbserver_gdb_load { } {\n     return [gdbserver_spawn \"\"]\n }\n \n-proc gdb_reload { } {\n-    return [gdbserver_run \"\"]\n+proc gdb_reload { {inferior_args {}} } {\n+    return [gdbserver_run $inferior_args]\n }\n \n proc gdb_reconnect { } {"
    },
    {
      "sha": "ea8f7ec95f49415b15e0da36ddf7251201f0d822",
      "filename": "gdb/testsuite/gdb.base/a2-run.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/gdb.base/a2-run.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/gdb.base/a2-run.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/a2-run.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -135,7 +135,7 @@ gdb_run_cmd 5\n gdb_test_stdio \"\" \"120\" \"\" \"run \\\"$testfile\\\" with arg\"\n \n # Run again with same arguments.\n-gdb_run_cmd\n+gdb_run_cmd 5\n \n setup_xfail \"arm-*-coff\"\n gdb_test_stdio \"\" \"120\" \"\" \"run \\\"$testfile\\\" again with same args\"\n@@ -147,6 +147,15 @@ gdb_run_cmd\n \n gdb_test_stdio \"\" \"usage:  factorial <number>\" \"\" \"run after setting args to nil\"\n \n+# The remaining tests pass inferior arguments through GDB, so doesn't\n+# work with stub targets, where GDB connects to debug an already started\n+# process.\n+\n+if [use_gdb_stub] {\n+    verbose \"Skipping rest of a2-run.exp because target is a stub.\"\n+    return\n+}\n+\n # Use \"set args\" command to specify an argument and run again.\n gdb_test_no_output \"set args 6\"\n "
    },
    {
      "sha": "ee75445c0b7e3147b21b3fcc96e252f3b26f3e7c",
      "filename": "gdb/testsuite/gdb.base/args.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/gdb.base/args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/gdb.base/args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/args.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -23,6 +23,12 @@ if [target_info exists noargs] {\n     return\n }\n \n+# This test requires starting new inferior processes, skip it if the target\n+# board is a stub.\n+if [use_gdb_stub] {\n+    return\n+}\n+\n standard_testfile\n \n if {[build_executable $testfile.exp $testfile \\"
    },
    {
      "sha": "b2b717fcc0e7ff666fd6c468a92856ebbeface33",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 10,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75d04512401cbc9cd2d9835e77b90ac3ad1de7d8/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=75d04512401cbc9cd2d9835e77b90ac3ad1de7d8",
      "patch": "@@ -246,10 +246,13 @@ proc target_can_use_run_cmd {} {\n # Using ``.*$'' could swallow up output that we attempt to match\n # elsewhere.\n #\n+# INFERIOR_ARGS is passed as arguments to the start command, so may contain\n+# inferior arguments.\n+#\n # N.B. This function does not wait for gdb to return to the prompt,\n # that is the caller's responsibility.\n \n-proc gdb_run_cmd {args} {\n+proc gdb_run_cmd { {inferior_args {}} } {\n     global gdb_prompt use_gdb_stub\n \n     foreach command [gdb_init_commands] {\n@@ -265,7 +268,7 @@ proc gdb_run_cmd {args} {\n \n     if $use_gdb_stub {\n \tif [target_info exists gdb,do_reload_on_run] {\n-\t    if { [gdb_reload] != 0 } {\n+\t    if { [gdb_reload $inferior_args] != 0 } {\n \t\treturn\n \t    }\n \t    send_gdb \"continue\\n\"\n@@ -310,7 +313,7 @@ proc gdb_run_cmd {args} {\n \t\t    send_gdb \"y\\n\" answer\n \t\t}\n \t\t-re \"The program is not being run.*$gdb_prompt $\" {\n-\t\t    if { [gdb_reload] != 0 } {\n+\t\t    if { [gdb_reload $inferior_args] != 0 } {\n \t\t\treturn\n \t\t    }\n \t\t    send_gdb \"jump *$start\\n\"\n@@ -325,11 +328,11 @@ proc gdb_run_cmd {args} {\n     }\n \n     if [target_info exists gdb,do_reload_on_run] {\n-\tif { [gdb_reload] != 0 } {\n+\tif { [gdb_reload $inferior_args] != 0 } {\n \t    return\n \t}\n     }\n-    send_gdb \"run $args\\n\"\n+    send_gdb \"run $inferior_args\\n\"\n # This doesn't work quite right yet.\n # Use -notransfer here so that test cases (like chng-sym.exp)\n # may test for additional start-up messages.\n@@ -348,10 +351,13 @@ proc gdb_run_cmd {args} {\n # Generic start command.  Return 0 if we could start the program, -1\n # if we could not.\n #\n+# INFERIOR_ARGS is passed as arguments to the start command, so may contain\n+# inferior arguments.\n+#\n # N.B. This function does not wait for gdb to return to the prompt,\n # that is the caller's responsibility.\n \n-proc gdb_start_cmd {args} {\n+proc gdb_start_cmd { {inferior_args {}} } {\n     global gdb_prompt use_gdb_stub\n \n     foreach command [gdb_init_commands] {\n@@ -369,7 +375,7 @@ proc gdb_start_cmd {args} {\n \treturn -1\n     }\n \n-    send_gdb \"start $args\\n\"\n+    send_gdb \"start $inferior_args\\n\"\n     # Use -notransfer here so that test cases (like chng-sym.exp)\n     # may test for additional start-up messages.\n     gdb_expect 60 {\n@@ -387,10 +393,13 @@ proc gdb_start_cmd {args} {\n # Generic starti command.  Return 0 if we could start the program, -1\n # if we could not.\n #\n+# INFERIOR_ARGS is passed as arguments to the starti command, so may contain\n+# inferior arguments.\n+#\n # N.B. This function does not wait for gdb to return to the prompt,\n # that is the caller's responsibility.\n \n-proc gdb_starti_cmd {args} {\n+proc gdb_starti_cmd { {inferior_args {}} } {\n     global gdb_prompt use_gdb_stub\n \n     foreach command [gdb_init_commands] {\n@@ -408,7 +417,7 @@ proc gdb_starti_cmd {args} {\n \treturn -1\n     }\n \n-    send_gdb \"starti $args\\n\"\n+    send_gdb \"starti $inferior_args\\n\"\n     gdb_expect 60 {\n \t-re \"The program .* has been started already.*y or n. $\" {\n \t    send_gdb \"y\\n\" answer\n@@ -4818,8 +4827,13 @@ proc gdb_load { arg } {\n # either the first time or after already starting the program once,\n # for remote targets.  Most files that override gdb_load should now\n # override this instead.\n+#\n+# INFERIOR_ARGS contains the arguments to pass to the inferiors, as a\n+# single string to get interpreted by a shell.  If the target board\n+# overriding gdb_reload is a \"stub\", then it should arrange things such\n+# these arguments make their way to the inferior process.\n \n-proc gdb_reload { } {\n+proc gdb_reload { {inferior_args {}} } {\n     # For the benefit of existing configurations, default to gdb_load.\n     # Specifying no file defaults to the executable currently being\n     # debugged."
    }
  ]
}