{
  "sha": "1820262bc909121a408e030195789a70513b9139",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTgyMDI2MmJjOTA5MTIxYTQwOGUwMzAxOTU3ODlhNzA1MTNiOTEzOQ==",
  "commit": {
    "author": {
      "name": "Delia Burduv",
      "email": "Delia.Burduv@arm.com",
      "date": "2019-10-30T13:23:35Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-30T13:23:35Z"
    },
    "message": "Modify the ARNM assembler to accept the omission of the immediate argument for the writeback form of the LDRAA and LDRAB mnemonics\n\nThis is a shorthand for the immediate argument being 0, as described here:\n  https://developer.arm.com/docs/ddi0596/latest/base-instructions-alphabetic-order/ldraa-ldrab-load-register-with-pointer-authentication\n\nThis is because the instructions still have a use with an immediate\nargument of 0, unlike loads without the PAC functionality. Currently,\nthe mnemonics are\n\n  LDRAA Xt, [Xn, #<simm10>]!\n  LDRAB Xt, [Xn, #<simm10>]!\n\nAfter this patch they become\n\n  LDRAA Xt, [Xn {, #<simm10>}]!\n  LDRAB Xt, [Xn {, #<simm10>}]!\n\ngas\t* config/tc-aarch64.c (parse_address_main): Accept the omission of\n\tthe immediate argument for ldraa and ldrab as a shorthand for the\n\timmediate being 0.\n\t* testsuite/gas/aarch64/ldraa-ldrab-no-offset.d: New test.\n\t* testsuite/gas/aarch64/ldraa-ldrab-no-offset.s: New test.\n\t* testsuite/gas/aarch64/illegal-ldraa.s: Modified to accept the\n\twriteback form with no offset.\n\t* testsuite/gas/aarch64/illegal-ldraa.s: Removed missing offset\n\terror.\n\nopcodes\t* aarch64-opc.c (print_immediate_offset_address): Don't print the\n\timmediate for the writeback form of ldraa/ldrab if it is 0.\n\t* aarch64-tbl.h: Updated the documentation for ADDR_SIMM10.\n\t* aarch64-opc-2.c: Regenerated.",
    "tree": {
      "sha": "8e02ca27c07cf6fb65fc65c240bdef1d555449c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8e02ca27c07cf6fb65fc65c240bdef1d555449c4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1820262bc909121a408e030195789a70513b9139",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1820262bc909121a408e030195789a70513b9139",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1820262bc909121a408e030195789a70513b9139",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1820262bc909121a408e030195789a70513b9139/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 101,
    "deletions": 47
  },
  "files": [
    {
      "sha": "84a3a9a3a1fc2eeaa7eae72addf93a11d8edb09f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-30  Delia Burduv  <Delia.Burduv@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_address_main): Accept the omission of\n+\tthe immediate argument for ldraa and ldrab as a shorthand for the\n+\timmediate being 0.\n+\t* testsuite/gas/aarch64/ldraa-ldrab-no-offset.d: New test.\n+\t* testsuite/gas/aarch64/ldraa-ldrab-no-offset.s: New test.\n+\t* testsuite/gas/aarch64/illegal-ldraa.s: Modified to accept the\n+\twriteback form with no offset.\n+\t* testsuite/gas/aarch64/illegal-ldraa.s: Removed missing offset\n+\terror.\n+\n 2019-10-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/noreg16.d, testsuite/gas/i386/noreg16.s,"
    },
    {
      "sha": "b4ee0625ce5abea7e908d092c21c2c091cb4a4d7",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 29,
      "deletions": 15,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -3402,6 +3402,7 @@ parse_shifter_operand_reloc (char **str, aarch64_opnd_info *operand,\n      [base,Xm,SXTX {#imm}]\n      [base,Wm,(S|U)XTW {#imm}]\n    Pre-indexed\n+     [base]!                    // in ldraa/ldrab exclusive\n      [base,#imm]!\n    Post-indexed\n      [base],#imm\n@@ -3716,29 +3717,42 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n     }\n \n   /* If at this point neither .preind nor .postind is set, we have a\n-     bare [Rn]{!}; reject [Rn]! accept [Rn] as a shorthand for [Rn,#0].\n+     bare [Rn]{!}; only accept [Rn]! as a shorthand for [Rn,#0]! for ldraa and\n+     ldrab, accept [Rn] as a shorthand for [Rn,#0].\n      For SVE2 vector plus scalar offsets, allow [Zn.<T>] as shorthand for\n      [Zn.<T>, xzr].  */\n   if (operand->addr.preind == 0 && operand->addr.postind == 0)\n     {\n       if (operand->addr.writeback)\n \t{\n-\t  /* Reject [Rn]!   */\n-\t  set_syntax_error (_(\"missing offset in the pre-indexed address\"));\n-\t  return FALSE;\n+\t  if (operand->type == AARCH64_OPND_ADDR_SIMM10)\n+            {\n+              /* Accept [Rn]! as a shorthand for [Rn,#0]!   */\n+              operand->addr.offset.is_reg = 0;\n+              operand->addr.offset.imm = 0;\n+              operand->addr.preind = 1;\n+            }\n+          else\n+           {\n+\t     /* Reject [Rn]!   */\n+\t     set_syntax_error (_(\"missing offset in the pre-indexed address\"));\n+\t     return FALSE;\n+\t   }\n \t}\n-\n-      operand->addr.preind = 1;\n-      if (operand->type == AARCH64_OPND_SVE_ADDR_ZX)\n-\t{\n-\t  operand->addr.offset.is_reg = 1;\n-\t  operand->addr.offset.regno = REG_ZR;\n-\t  *offset_qualifier = AARCH64_OPND_QLF_X;\n-\t}\n-      else\n+       else\n \t{\n-\t  inst.reloc.exp.X_op = O_constant;\n-\t  inst.reloc.exp.X_add_number = 0;\n+          operand->addr.preind = 1;\n+          if (operand->type == AARCH64_OPND_SVE_ADDR_ZX)\n+\t   {\n+\t     operand->addr.offset.is_reg = 1;\n+\t     operand->addr.offset.regno = REG_ZR;\n+\t     *offset_qualifier = AARCH64_OPND_QLF_X;\n+ \t   }\n+          else\n+\t   {\n+\t     inst.reloc.exp.X_op = O_constant;\n+\t     inst.reloc.exp.X_add_number = 0;\n+\t   }\n \t}\n     }\n "
    },
    {
      "sha": "33fae2f4f29e458e8239cc4d6f2d6fc8f08c0322",
      "filename": "gas/testsuite/gas/aarch64/illegal-ldraa.l",
      "status": "modified",
      "additions": 25,
      "deletions": 27,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/illegal-ldraa.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/illegal-ldraa.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-ldraa.l?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -6,30 +6,28 @@\n [^:]+:13: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#5555\\]'\n [^:]+:14: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#-4104\\]'\n [^:]+:15: Error: 64-bit integer or SP register expected at operand 2 -- `ldraa x0,\\[xz\\]'\n-[^:]+:16: Error: missing offset in the pre-indexed address at operand 2 -- `ldraa x0,\\[x1\\]!'\n-[^:]+:17: Error: invalid expression in the address at operand 2 -- `ldraa x0,\\[sp\\],'\n-[^:]+:18: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#1\\]!'\n-[^:]+:19: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#4\\]!'\n-[^:]+:20: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#-10\\]!'\n-[^:]+:21: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#4096\\]!'\n-[^:]+:22: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#5555\\]!'\n-[^:]+:23: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#-4104\\]!'\n-[^:]+:24: Error: 64-bit integer or SP register expected at operand 2 -- `ldraa x0,\\[xz\\]'\n-[^:]+:25: Error: invalid addressing mode at operand 2 -- `ldraa x0,\\[x1\\],#8'\n-[^:]+:28: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#1\\]'\n-[^:]+:29: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#4\\]'\n-[^:]+:30: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#-10\\]'\n-[^:]+:31: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#4096\\]'\n-[^:]+:32: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#5555\\]'\n-[^:]+:33: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#-4104\\]'\n-[^:]+:34: Error: 64-bit integer or SP register expected at operand 2 -- `ldrab x0,\\[xz\\]'\n-[^:]+:35: Error: missing offset in the pre-indexed address at operand 2 -- `ldrab x0,\\[x1\\]!'\n-[^:]+:36: Error: invalid expression in the address at operand 2 -- `ldrab x0,\\[sp\\],'\n-[^:]+:37: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#1\\]!'\n-[^:]+:38: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#4\\]!'\n-[^:]+:39: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#-10\\]!'\n-[^:]+:40: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#4096\\]!'\n-[^:]+:41: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#5555\\]!'\n-[^:]+:42: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#-4104\\]!'\n-[^:]+:43: Error: 64-bit integer or SP register expected at operand 2 -- `ldrab x0,\\[xz\\]'\n-[^:]+:44: Error: invalid addressing mode at operand 2 -- `ldrab x0,\\[x1\\],#8'\n+[^:]+:16: Error: invalid expression in the address at operand 2 -- `ldraa x0,\\[sp\\],'\n+[^:]+:17: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#1\\]!'\n+[^:]+:18: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#4\\]!'\n+[^:]+:19: Error: immediate value must be a multiple of 8 at operand 2 -- `ldraa x0,\\[x1,#-10\\]!'\n+[^:]+:20: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#4096\\]!'\n+[^:]+:21: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#5555\\]!'\n+[^:]+:22: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldraa x0,\\[x1,#-4104\\]!'\n+[^:]+:23: Error: 64-bit integer or SP register expected at operand 2 -- `ldraa x0,\\[xz\\]'\n+[^:]+:24: Error: invalid addressing mode at operand 2 -- `ldraa x0,\\[x1\\],#8'\n+[^:]+:27: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#1\\]'\n+[^:]+:28: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#4\\]'\n+[^:]+:29: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#-10\\]'\n+[^:]+:30: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#4096\\]'\n+[^:]+:31: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#5555\\]'\n+[^:]+:32: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#-4104\\]'\n+[^:]+:33: Error: 64-bit integer or SP register expected at operand 2 -- `ldrab x0,\\[xz\\]'\n+[^:]+:34: Error: invalid expression in the address at operand 2 -- `ldrab x0,\\[sp\\],'\n+[^:]+:35: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#1\\]!'\n+[^:]+:36: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#4\\]!'\n+[^:]+:37: Error: immediate value must be a multiple of 8 at operand 2 -- `ldrab x0,\\[x1,#-10\\]!'\n+[^:]+:38: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#4096\\]!'\n+[^:]+:39: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#5555\\]!'\n+[^:]+:40: Error: immediate offset out of range -4096 to 4088 at operand 2 -- `ldrab x0,\\[x1,#-4104\\]!'\n+[^:]+:41: Error: 64-bit integer or SP register expected at operand 2 -- `ldrab x0,\\[xz\\]'\n+[^:]+:42: Error: invalid addressing mode at operand 2 -- `ldrab x0,\\[x1\\],#8'"
    },
    {
      "sha": "3e6ebf5c2489b87b1a2e6d025fec9912855039e3",
      "filename": "gas/testsuite/gas/aarch64/illegal-ldraa.s",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/illegal-ldraa.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/illegal-ldraa.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-ldraa.s?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -13,7 +13,6 @@\n \tldraa x0, [x1,#5555]\n \tldraa x0, [x1,#-4104]\n \tldraa x0, [xz]\n-\tldraa x0, [x1]!\n \tldraa x0, [sp],\n \tldraa x0, [x1,#1]!\n \tldraa x0, [x1,#4]!\n@@ -32,7 +31,6 @@\n \tldrab x0, [x1,#5555]\n \tldrab x0, [x1,#-4104]\n \tldrab x0, [xz]\n-\tldrab x0, [x1]!\n \tldrab x0, [sp],\n \tldrab x0, [x1,#1]!\n \tldrab x0, [x1,#4]!"
    },
    {
      "sha": "4146f7660c599ca9ac009275c6af7b90bb4f6214",
      "filename": "gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.d?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -0,0 +1,13 @@\n+#as: -march=armv8.3-a\n+#objdump: -dr\n+\n+.*: .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+.*:\tf8200c01 \tldraa\tx1, \\[x0]!\n+.*:\tf8a00c02 \tldrab\tx2, \\[x0]!\n+.*:\tf8200c01 \tldraa\tx1, \\[x0]!\n+.*:\tf8a00c02 \tldrab\tx2, \\[x0]!"
    },
    {
      "sha": "d0694c9003e633da20fb44f744af6ec6cf57abc0",
      "filename": "gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.s",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/ldraa-ldrab-no-offset.s?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -0,0 +1,7 @@\n+.text\n+\n+\tldraa   x1, [x0]!\n+\tldrab   x2, [x0]!\n+\n+\tldraa   x1, [x0, #0]!\n+\tldrab   x2, [x0, #0]!"
    },
    {
      "sha": "d88aee324c2100681e469efce9e4668dc90217aa",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-30  Delia Burduv   <delia.burduv@arm.com>\n+\n+\t* aarch64-opc.c (print_immediate_offset_address): Don't print the\n+\timmediate for the writeback form of ldraa/ldrab if it is 0.\n+\t* aarch64-tbl.h: Updated the documentation for ADDR_SIMM10.\n+\t* aarch64-opc-2.c: Regenerated.\n+\n 2019-10-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (operand_type_shorthands): Delete."
    },
    {
      "sha": "53d59461ad8a231d4aeb46db2eb820f3e936381a",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -112,7 +112,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM7\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm7,FLD_index2}, \"an address with 7-bit signed immediate offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM9\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm9,FLD_index}, \"an address with 9-bit signed immediate offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM9_2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm9,FLD_index}, \"an address with 9-bit negative or unaligned immediate offset\"},\n-  {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM10\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_S_imm10,FLD_imm9,FLD_index}, \"an address with 10-bit scaled, signed immediate offset\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM10\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_S_imm10,FLD_imm9,FLD_index}, \"an address with an optional 10-bit scaled, signed immediate offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM11\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm7,FLD_index2}, \"an address with 11-bit signed immediate (multiple of 16) offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_UIMM12\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_imm12}, \"an address with scaled, unsigned immediate offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM13\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm9,FLD_index}, \"an address with 13-bit signed immediate (multiple of 16) offset\"},"
    },
    {
      "sha": "992a2af1b3a0a1c5dbe7924edefff12ebfae7c1d",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -3063,7 +3063,12 @@ print_immediate_offset_address (char *buf, size_t size,\n   if (opnd->addr.writeback)\n     {\n       if (opnd->addr.preind)\n-\tsnprintf (buf, size, \"[%s, #%d]!\", base, opnd->addr.offset.imm);\n+        {\n+\t  if (opnd->type == AARCH64_OPND_ADDR_SIMM10 && !opnd->addr.offset.imm)\n+            snprintf (buf, size, \"[%s]!\", base);\n+          else\n+\t    snprintf (buf, size, \"[%s, #%d]!\", base, opnd->addr.offset.imm);\n+        }\n       else\n \tsnprintf (buf, size, \"[%s], #%d\", base, opnd->addr.offset.imm);\n     }"
    },
    {
      "sha": "00168dd12e9fe6336e32062b67ff0a1df946fc67",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1820262bc909121a408e030195789a70513b9139/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=1820262bc909121a408e030195789a70513b9139",
      "patch": "@@ -5141,7 +5141,7 @@ struct aarch64_opcode aarch64_opcode_table[] =\n     Y(ADDRESS, addr_simm, \"ADDR_SIMM9_2\", 0, F(FLD_imm9,FLD_index),\t\\\n       \"an address with 9-bit negative or unaligned immediate offset\")\t\\\n     Y(ADDRESS, addr_simm10, \"ADDR_SIMM10\", 0, F(FLD_Rn,FLD_S_imm10,FLD_imm9,FLD_index),\\\n-      \"an address with 10-bit scaled, signed immediate offset\")\t\t\\\n+      \"an address with an optional 10-bit scaled, signed immediate offset\")\t\t\\\n     Y(ADDRESS, addr_simm, \"ADDR_SIMM11\", 0, F(FLD_imm7,FLD_index2),\\\n       \"an address with 11-bit signed immediate (multiple of 16) offset\")\\\n     Y(ADDRESS, addr_uimm12, \"ADDR_UIMM12\", 0, F(FLD_Rn,FLD_imm12),\t\\"
    }
  ]
}