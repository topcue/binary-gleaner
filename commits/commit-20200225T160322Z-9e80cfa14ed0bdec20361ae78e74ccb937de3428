{
  "sha": "9e80cfa14ed0bdec20361ae78e74ccb937de3428",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWU4MGNmYTE0ZWQwYmRlYzIwMzYxYWU3OGU3NGNjYjkzN2RlMzQyOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-18T22:38:29Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-02-25T16:03:22Z"
    },
    "message": "gdb/fortran: Support negative array stride in one limited case\n\nThis commit adds support for negative Fortran array strides in one\nlimited case, that is the case of a single element array with a\nnegative array stride.\n\nThe changes in this commit will be required in order for more general\nnegative array stride support to work correctly, however, right now\nother problems in GDB prevent negative array strides from working in\nthe general case.\n\nThe reason negative array strides don't currently work in the general\ncase is that when dealing with such arrays, the base address for the\nobjects data is actually the highest addressed element, subsequent\nelements are then accessed with a negative offset from that address,\nand GDB is not currently happy with this configuration.\n\nThe changes here can be summarised as, stop treating signed values as\nunsigned, specifically, the array stride, and offsets calculated using\nthe array stride.\n\nThis issue was identified on the mailing list by Sergio:\n\n  https://sourceware.org/ml/gdb-patches/2020-01/msg00360.html\n\nThe test for this issue is a new one written by me as the copyright\nstatus of the original test is currently unknown.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (create_array_type_with_stride): Handle negative\n\tarray strides.\n\t* valarith.c (value_subscripted_rvalue): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/derived-type-striding.exp: Add a new test.\n\t* gdb.fortran/derived-type-striding.f90: Add pointer variable for\n\tnew test.",
    "tree": {
      "sha": "aa831e6bb05b27a4bf20cb60824cb65ae3c9635f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa831e6bb05b27a4bf20cb60824cb65ae3c9635f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e80cfa14ed0bdec20361ae78e74ccb937de3428",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e80cfa14ed0bdec20361ae78e74ccb937de3428",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e80cfa14ed0bdec20361ae78e74ccb937de3428",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e80cfa14ed0bdec20361ae78e74ccb937de3428/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "09624f1fece637e17c0c31f6b7589466402ea407",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09624f1fece637e17c0c31f6b7589466402ea407",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/09624f1fece637e17c0c31f6b7589466402ea407"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 31,
    "deletions": 6
  },
  "files": [
    {
      "sha": "cb3e1854ac2d1afc7de6ad2fc01f048b7e56b184",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdbtypes.c (create_array_type_with_stride): Handle negative\n+\tarray strides.\n+\t* valarith.c (value_subscripted_rvalue): Likewise.\n+\n 2020-02-25  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-tdep.c (aarch64_vnv_type): Fix comment typo."
    },
    {
      "sha": "ef110b30445f82cc464240a2ed55e3ce08500729",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -1223,7 +1223,7 @@ create_array_type_with_stride (struct type *result_type,\n \t  && !type_not_allocated (result_type)))\n     {\n       LONGEST low_bound, high_bound;\n-      unsigned int stride;\n+      int stride;\n \n       /* If the array itself doesn't provide a stride value then take\n \t whatever stride the range provides.  Don't update BIT_STRIDE as\n@@ -1241,9 +1241,18 @@ create_array_type_with_stride (struct type *result_type,\n \t In such cases, the array length should be zero.  */\n       if (high_bound < low_bound)\n \tTYPE_LENGTH (result_type) = 0;\n-      else if (stride > 0)\n-\tTYPE_LENGTH (result_type) =\n-\t  (stride * (high_bound - low_bound + 1) + 7) / 8;\n+      else if (stride != 0)\n+\t{\n+\t  /* Ensure that the type length is always positive, even in the\n+\t     case where (for example in Fortran) we have a negative\n+\t     stride.  It is possible to have a single element array with a\n+\t     negative stride in Fortran (this doesn't mean anything\n+\t     special, it's still just a single element array) so do\n+\t     consider that case when touching this code.  */\n+\t  LONGEST element_count = abs (high_bound - low_bound + 1);\n+\t  TYPE_LENGTH (result_type)\n+\t    = ((abs (stride) * element_count) + 7) / 8;\n+\t}\n       else\n \tTYPE_LENGTH (result_type) =\n \t  TYPE_LENGTH (element_type) * (high_bound - low_bound + 1);"
    },
    {
      "sha": "720febb65cc35b1e67106d6136adbb3406a87f36",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/derived-type-striding.exp: Add a new test.\n+\t* gdb.fortran/derived-type-striding.f90: Add pointer variable for\n+\tnew test.\n+\n 2020-02-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/cached-source-file.exp: Avoid source file paths in test"
    },
    {
      "sha": "639dc4c95289ec6ba239f547c21568c17efa30fa",
      "filename": "gdb/testsuite/gdb.fortran/derived-type-striding.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/gdb.fortran/derived-type-striding.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/gdb.fortran/derived-type-striding.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/derived-type-striding.exp?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -41,3 +41,5 @@ gdb_test \"p point_dimension\" \"= \\\\\\(2, 2, 2, 2, 2, 2, 2, 2, 2\\\\\\)\"\n # Test mixed type derived type.\n if { $gcc_with_broken_stride } { setup_kfail *-*-* gcc/92775 }\n gdb_test \"p point_mixed_dimension\" \"= \\\\\\(3, 3, 3, 3\\\\\\)\"\n+\n+gdb_test \"p cloud_slice\" \" = \\\\\\(\\\\\\( x = 1, y = 2, z = 3 \\\\\\)\\\\\\)\""
    },
    {
      "sha": "fb537579faadb62cd61eb5921cfd162428abac60",
      "filename": "gdb/testsuite/gdb.fortran/derived-type-striding.f90",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/gdb.fortran/derived-type-striding.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/testsuite/gdb.fortran/derived-type-striding.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/derived-type-striding.f90?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -28,9 +28,11 @@ program derived_type_member_stride\n     type(mixed_cartesian), dimension(10), target :: mixed_cloud\n     integer(kind=8), dimension(:), pointer :: point_dimension => null()\n     integer(kind=8), dimension(:), pointer :: point_mixed_dimension => null()\n+    type(cartesian), dimension(:), pointer :: cloud_slice => null()\n     cloud(:)%x = 1\n     cloud(:)%y = 2\n     cloud(:)%z = 3\n+    cloud_slice => cloud(3:2:-2)\n     point_dimension => cloud(1:9)%y\n     mixed_cloud(:)%x = 1\n     mixed_cloud(:)%y = 2"
    },
    {
      "sha": "be0e0731bee13e0a9910d769ac0ebec67a9c00d1",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e80cfa14ed0bdec20361ae78e74ccb937de3428/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=9e80cfa14ed0bdec20361ae78e74ccb937de3428",
      "patch": "@@ -187,7 +187,7 @@ value_subscripted_rvalue (struct value *array, LONGEST index, LONGEST lowerbound\n {\n   struct type *array_type = check_typedef (value_type (array));\n   struct type *elt_type = check_typedef (TYPE_TARGET_TYPE (array_type));\n-  ULONGEST elt_size = type_length_units (elt_type);\n+  LONGEST elt_size = type_length_units (elt_type);\n \n   /* Fetch the bit stride and convert it to a byte stride, assuming 8 bits\n      in a byte.  */\n@@ -199,7 +199,7 @@ value_subscripted_rvalue (struct value *array, LONGEST index, LONGEST lowerbound\n       elt_size = stride / (unit_size * 8);\n     }\n \n-  ULONGEST elt_offs = elt_size * (index - lowerbound);\n+  LONGEST elt_offs = elt_size * (index - lowerbound);\n \n   if (index < lowerbound\n       || (!TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (array_type)"
    }
  ]
}