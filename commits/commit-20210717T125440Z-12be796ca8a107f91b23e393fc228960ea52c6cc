{
  "sha": "12be796ca8a107f91b23e393fc228960ea52c6cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTJiZTc5NmNhOGExMDdmOTFiMjNlMzkzZmMyMjg5NjBlYTUyYzZjYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-14T16:31:36Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-17T12:54:40Z"
    },
    "message": "gdb: make all_inferiors_safe actually work\n\nThe test gdb.threads/fork-plus-threads.exp fails since 08bdefb58b78\n(\"gdb: make inferior_list use intrusive_list\"):\n\n    FAIL: gdb.threads/fork-plus-threads.exp: detach-on-fork=off: only inferior 1 left\n\nLooking at the log, we see that we are left with a bunch of inferiors in\nthe detach-on-fork=off case:\n\n    info inferiors^M\n      Num  Description       Connection           Executable        ^M\n    * 1    <null>                                 <snip>/fork-plus-threads ^M\n      2    <null>                                 <snip>/fork-plus-threads ^M\n      3    <null>                                 <snip>/fork-plus-threads ^M\n      4    <null>                                 <snip>/fork-plus-threads ^M\n      5    <null>                                 <snip>/fork-plus-threads ^M\n      6    <null>                                 <snip>/fork-plus-threads ^M\n      7    <null>                                 <snip>/fork-plus-threads ^M\n      8    <null>                                 <snip>/fork-plus-threads ^M\n      9    <null>                                 <snip>/fork-plus-threads ^M\n      10   <null>                                 <snip>/fork-plus-threads ^M\n      11   <null>                                 <snip>/fork-plus-threads ^M\n    (gdb) FAIL: gdb.threads/fork-plus-threads.exp: detach-on-fork=off: only inferior 1 left\n\nwhen we expect to have just one.  The problem is prune_inferiors not\npruning inferiors.  And this is caused by all_inferiors_safe not\nactually iterating on inferiors.  The current implementation:\n\n  inline all_inferiors_safe_range\n  all_inferiors_safe ()\n  {\n    return {};\n  }\n\ndefault-constructs an all_inferiors_safe_range, which default-constructs\nan all_inferiors_safe_iterator as its m_begin field, which\ndefault-constructs a all_inferiors_iterator.  A default-constructed\nall_inferiors_iterator is an end iterator, which means we have\nconstructed an (end,end) all_inferiors_safe_range.\n\nWe actually need to pass down the list on which we want to iterator\n(that is the inferior_list global), so that all_inferiors_iterator's\nfirst constructor is chosen.  We also pass nullptr as the proc_target\nfilter.  In this case, we don't do any filtering, but if in the future\nall_inferiors_safe needed to allow filtering on process target (like\nall_inferiors does), we could pass down a process target pointer.\n\nbasic_safe_iterator's constructor needs to be changed to allow\nconstructing the wrapped iterator with multiple arguments, not just one.\n\nWith this, gdb.threads/fork-plus-threads.exp is passing once again for\nme.\n\nChange-Id: I650552ede596e3590c4b7606ce403690a0278a01",
    "tree": {
      "sha": "27f8eed9418c3e438a94850f203b0f7589206c2a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/27f8eed9418c3e438a94850f203b0f7589206c2a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/12be796ca8a107f91b23e393fc228960ea52c6cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12be796ca8a107f91b23e393fc228960ea52c6cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/12be796ca8a107f91b23e393fc228960ea52c6cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12be796ca8a107f91b23e393fc228960ea52c6cc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c7682f9f23f47ec47235a6dd97b0f6e8716ebd3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c7682f9f23f47ec47235a6dd97b0f6e8716ebd3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c7682f9f23f47ec47235a6dd97b0f6e8716ebd3"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 6,
    "deletions": 6
  },
  "files": [
    {
      "sha": "94fbac0fc5711365f72c47fe882753cd06552cdf",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12be796ca8a107f91b23e393fc228960ea52c6cc/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12be796ca8a107f91b23e393fc228960ea52c6cc/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=12be796ca8a107f91b23e393fc228960ea52c6cc",
      "patch": "@@ -676,7 +676,7 @@ extern intrusive_list<inferior> inferior_list;\n inline all_inferiors_safe_range\n all_inferiors_safe ()\n {\n-  return {};\n+  return all_inferiors_safe_range (nullptr, inferior_list);\n }\n \n /* Returns a range representing all inferiors, suitable to use with"
    },
    {
      "sha": "53868d3b3eecfc1987cdaf871c3508289610b29a",
      "filename": "gdbsupport/safe-iterator.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12be796ca8a107f91b23e393fc228960ea52c6cc/gdbsupport/safe-iterator.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12be796ca8a107f91b23e393fc228960ea52c6cc/gdbsupport/safe-iterator.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/safe-iterator.h?ref=12be796ca8a107f91b23e393fc228960ea52c6cc",
      "patch": "@@ -48,11 +48,11 @@ class basic_safe_iterator\n   typedef typename Iterator::iterator_category iterator_category;\n   typedef typename Iterator::difference_type difference_type;\n \n-  /* Construct using the given argument; the end iterator is default\n-     constructed.  */\n-  template<typename Arg>\n-  explicit basic_safe_iterator (Arg &&arg)\n-    : m_it (std::forward<Arg> (arg)),\n+  /* Construct the begin iterator using the given arguments; the end iterator is\n+     default constructed.  */\n+  template<typename... Args>\n+  explicit basic_safe_iterator (Args &&...args)\n+    : m_it (std::forward<Args> (args)...),\n       m_next (m_it)\n   {\n     if (m_it != m_end)"
    }
  ]
}