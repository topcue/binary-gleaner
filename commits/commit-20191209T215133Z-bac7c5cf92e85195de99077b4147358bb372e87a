{
  "sha": "bac7c5cf92e85195de99077b4147358bb372e87a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFjN2M1Y2Y5MmU4NTE5NWRlOTkwNzdiNDE0NzM1OGJiMzcyZTg3YQ==",
  "commit": {
    "author": {
      "name": "George Barrett",
      "email": "bob@bob131.so",
      "date": "2019-12-09T21:28:39Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-09T21:51:33Z"
    },
    "message": "Fix scripted probe breakpoints\n\nThe documentation for make-breakpoint from the Guile API and the `spec'\nvariant of the gdb.Breakpoint constructor from the Python API state that\nthe format acceptable for location strings is the same as that accepted\nby the break command. However, using the -probe qualifier at the\nbeginning of the location string causes a GDB internal error as it\nattempts to decode a probe location in the wrong code path. Without this\nfunctionality, there doesn't appear to be another way to set breakpoints\non probe points from Python or Guile scripts.\n\nThis patch introduces a new helper function that returns a\nbreakpoint_ops instance appropriate for a parsed location and updates\nthe Guile and Python bindings to use said function, rather than the\ncurrent hard-coded use of bkpt_breakpoint_ops. Since this logic is\nduplicated in the handling of the `break' and `trace' commands, those\nare also updated to call into the new helper function.\n\ngdb/ChangeLog:\n2019-12-10  George Barrett  <bob@bob131.so>\n\n\tFix scripted probe breakpoints.\n\t* breakpoint.c (tracepoint_probe_breakpoint_ops): Move\n\tdeclaration forward.\n\t(breakpoint_ops_for_event_location_type)\n\t(breakpoint_ops_for_event_location): Add function definitions.\n\t(break_command_1, trace_command): Use\n\tbreakpoint_ops_for_event_location.\n\t* breakpoint.h (breakpoint_ops_for_event_location): Add function\n\tdeclarations.\n\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Use\n\tbreakpoint_ops_for_event_location.\n\t* python/py-breakpoint.c (bppy_init): Use\n\tbreakpoint_ops_for_event_location.\n\ngdb/testsuite/ChangeLog:\n2019-12-10  George Barrett  <bob@bob131.so>\n\n\tTest scripted probe breakpoints.\n\t* gdb.guile/scm-breakpoint.c (main): Add probe point.\n\t* gdb.python/py-breakpoint.c (main): Likewise.\n\t* gdb.guile/scm-breakpoint.exp (test_bkpt_probe): Add probe\n\tspecifier test.\n\t* gdb.python/py-breakpoint.exp (test_bkpt_probe): Likewise.",
    "tree": {
      "sha": "7d1b2ecbcf4d6acc9111d682c3e20bce1f4ccd2c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7d1b2ecbcf4d6acc9111d682c3e20bce1f4ccd2c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bac7c5cf92e85195de99077b4147358bb372e87a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bac7c5cf92e85195de99077b4147358bb372e87a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bac7c5cf92e85195de99077b4147358bb372e87a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bac7c5cf92e85195de99077b4147358bb372e87a/comments",
  "author": {
    "login": "Bob131",
    "id": 4337852,
    "node_id": "MDQ6VXNlcjQzMzc4NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4337852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bob131",
    "html_url": "https://github.com/Bob131",
    "followers_url": "https://api.github.com/users/Bob131/followers",
    "following_url": "https://api.github.com/users/Bob131/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bob131/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bob131/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bob131/subscriptions",
    "organizations_url": "https://api.github.com/users/Bob131/orgs",
    "repos_url": "https://api.github.com/users/Bob131/repos",
    "events_url": "https://api.github.com/users/Bob131/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bob131/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/330f1d3825daa0d9e8d6c54f4fcf6fa5800e5664"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 141,
    "deletions": 21
  },
  "files": [
    {
      "sha": "98a6285dd840301bdcd7e8074a3ca0e16e41c10e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -1,3 +1,19 @@\n+2019-12-10  George Barrett  <bob@bob131.so>\n+\n+\tFix scripted probe breakpoints.\n+\t* breakpoint.c (tracepoint_probe_breakpoint_ops): Move\n+\tdeclaration forward.\n+\t(breakpoint_ops_for_event_location_type)\n+\t(breakpoint_ops_for_event_location): Add function definitions.\n+\t(break_command_1, trace_command): Use\n+\tbreakpoint_ops_for_event_location.\n+\t* breakpoint.h (breakpoint_ops_for_event_location): Add function\n+\tdeclarations.\n+\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Use\n+\tbreakpoint_ops_for_event_location.\n+\t* python/py-breakpoint.c (bppy_init): Use\n+\tbreakpoint_ops_for_event_location.\n+\n 2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdbtypes.c (rank_one_type): Return INCOMPATIBLE_TYPE_BADNESS"
    },
    {
      "sha": "904abda8db18292496beaa68034fc89e9e90649a",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 43,
      "deletions": 19,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -246,6 +246,9 @@ struct breakpoint_ops bkpt_breakpoint_ops;\n /* Breakpoints set on probes.  */\n static struct breakpoint_ops bkpt_probe_breakpoint_ops;\n \n+/* Tracepoints set on probes.  */\n+static struct breakpoint_ops tracepoint_probe_breakpoint_ops;\n+\n /* Dynamic printf class type.  */\n struct breakpoint_ops dprintf_breakpoint_ops;\n \n@@ -9163,6 +9166,41 @@ decode_static_tracepoint_spec (const char **arg_p)\n   return sals;\n }\n \n+/* Returns the breakpoint ops appropriate for use with with LOCATION_TYPE and\n+   according to IS_TRACEPOINT.  */\n+\n+static const struct breakpoint_ops *\n+breakpoint_ops_for_event_location_type (enum event_location_type location_type,\n+\t\t\t\t\tbool is_tracepoint)\n+{\n+  if (is_tracepoint)\n+    {\n+      if (location_type == PROBE_LOCATION)\n+\treturn &tracepoint_probe_breakpoint_ops;\n+      else\n+\treturn &tracepoint_breakpoint_ops;\n+    }\n+  else\n+    {\n+      if (location_type == PROBE_LOCATION)\n+\treturn &bkpt_probe_breakpoint_ops;\n+      else\n+\treturn &bkpt_breakpoint_ops;\n+    }\n+}\n+\n+/* See breakpoint.h.  */\n+\n+const struct breakpoint_ops *\n+breakpoint_ops_for_event_location (const struct event_location *location,\n+\t\t\t\t   bool is_tracepoint)\n+{\n+  if (location != nullptr)\n+    return breakpoint_ops_for_event_location_type\n+      (event_location_type (location), is_tracepoint);\n+  return is_tracepoint ? &tracepoint_breakpoint_ops : &bkpt_breakpoint_ops;\n+}\n+\n /* See breakpoint.h.  */\n \n int\n@@ -9344,16 +9382,10 @@ break_command_1 (const char *arg, int flag, int from_tty)\n   enum bptype type_wanted = (flag & BP_HARDWAREFLAG\n \t\t\t     ? bp_hardware_breakpoint\n \t\t\t     : bp_breakpoint);\n-  struct breakpoint_ops *ops;\n \n   event_location_up location = string_to_event_location (&arg, current_language);\n-\n-  /* Matching breakpoints on probes.  */\n-  if (location != NULL\n-      && event_location_type (location.get ()) == PROBE_LOCATION)\n-    ops = &bkpt_probe_breakpoint_ops;\n-  else\n-    ops = &bkpt_breakpoint_ops;\n+  const struct breakpoint_ops *ops = breakpoint_ops_for_event_location\n+    (location.get (), false /* is_tracepoint */);\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n@@ -12802,8 +12834,7 @@ tracepoint_decode_location (struct breakpoint *b,\n \n struct breakpoint_ops tracepoint_breakpoint_ops;\n \n-/* The breakpoint_ops structure to be use on tracepoints placed in a\n-   static probe.  */\n+/* Virtual table for tracepoints on static probes.  */\n \n static void\n tracepoint_probe_create_sals_from_location\n@@ -12824,8 +12855,6 @@ tracepoint_probe_decode_location (struct breakpoint *b,\n   return bkpt_probe_decode_location (b, location, search_pspace);\n }\n \n-static struct breakpoint_ops tracepoint_probe_breakpoint_ops;\n-\n /* Dprintf breakpoint_ops methods.  */\n \n static void\n@@ -14467,15 +14496,10 @@ set_tracepoint_count (int num)\n static void\n trace_command (const char *arg, int from_tty)\n {\n-  struct breakpoint_ops *ops;\n-\n   event_location_up location = string_to_event_location (&arg,\n \t\t\t\t\t\t\t current_language);\n-  if (location != NULL\n-      && event_location_type (location.get ()) == PROBE_LOCATION)\n-    ops = &tracepoint_probe_breakpoint_ops;\n-  else\n-    ops = &tracepoint_breakpoint_ops;\n+  const struct breakpoint_ops *ops = breakpoint_ops_for_event_location\n+    (location.get (), true /* is_tracepoint */);\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),"
    },
    {
      "sha": "3197854d3cd9359e87f049f3d12977cff169ba59",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -1352,6 +1352,15 @@ extern void init_catchpoint (struct breakpoint *b,\n extern void install_breakpoint (int internal, std::unique_ptr<breakpoint> &&b,\n \t\t\t\tint update_gll);\n \n+/* Returns the breakpoint ops appropriate for use with with LOCATION and\n+   according to IS_TRACEPOINT.  Use this to ensure, for example, that you pass\n+   the correct ops to create_breakpoint for probe locations.  If LOCATION is\n+   NULL, returns bkpt_breakpoint_ops (or tracepoint_breakpoint_ops, if\n+   IS_TRACEPOINT is true).  */\n+\n+extern const struct breakpoint_ops *breakpoint_ops_for_event_location\n+  (const struct event_location *location, bool is_tracepoint);\n+\n /* Flags that can be passed down to create_breakpoint, etc., to affect\n    breakpoint creation in several ways.  */\n "
    },
    {
      "sha": "a6404d544b3adb8c672085ff242f6f31a931d87f",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -437,13 +437,15 @@ gdbscm_register_breakpoint_x (SCM self)\n \t{\n \tcase bp_breakpoint:\n \t  {\n+\t    const breakpoint_ops *ops =\n+\t      breakpoint_ops_for_event_location (eloc.get (), false);\n \t    create_breakpoint (get_current_arch (),\n \t\t\t       eloc.get (), NULL, -1, NULL,\n \t\t\t       0,\n \t\t\t       0, bp_breakpoint,\n \t\t\t       0,\n \t\t\t       AUTO_BOOLEAN_TRUE,\n-\t\t\t       &bkpt_breakpoint_ops,\n+\t\t\t       ops,\n \t\t\t       0, 1, internal, 0);\n \t    break;\n \t  }"
    },
    {
      "sha": "32494aec72bbafd6022a40d0fc9575af86757d58",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -828,13 +828,16 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t\tlocation = new_explicit_location (&explicit_loc);\n \t      }\n \n+\t    const struct breakpoint_ops *ops =\n+\t      breakpoint_ops_for_event_location (location.get (), false);\n+\n \t    create_breakpoint (python_gdbarch,\n \t\t\t       location.get (), NULL, -1, NULL,\n \t\t\t       0,\n \t\t\t       temporary_bp, bp_breakpoint,\n \t\t\t       0,\n \t\t\t       AUTO_BOOLEAN_TRUE,\n-\t\t\t       &bkpt_breakpoint_ops,\n+\t\t\t       ops,\n \t\t\t       0, 1, internal_bp, 0);\n \t    break;\n \t  }"
    },
    {
      "sha": "c14c341ade86d5fc2a5ccadd1f913dea9fb2b0d8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -1,3 +1,12 @@\n+2019-12-10  George Barrett  <bob@bob131.so>\n+\n+\tTest scripted probe breakpoints.\n+\t* gdb.guile/scm-breakpoint.c (main): Add probe point.\n+\t* gdb.python/py-breakpoint.c (main): Likewise.\n+\t* gdb.guile/scm-breakpoint.exp (test_bkpt_probe): Add probe\n+\tspecifier test.\n+\t* gdb.python/py-breakpoint.exp (test_bkpt_probe): Likewise.\n+\n 2019-12-09  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.cp/rvalue-ref-overload.cc (g): New function that takes"
    },
    {
      "sha": "ed7dbdba917ff5e1be7a86d5a2c9887a5766424a",
      "filename": "gdb/testsuite/gdb.guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-breakpoint.c?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -15,6 +15,10 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n \n+#ifdef USE_PROBES\n+#include <sys/sdt.h>\n+#endif\n+\n int result = 0;\n \n int multiply (int i)\n@@ -38,6 +42,9 @@ int main (int argc, char *argv[])\n     {\n       result += multiply (foo);  /* Break at multiply. */\n       result += add (bar); /* Break at add. */\n+#ifdef USE_PROBES\n+      DTRACE_PROBE1 (test, result_updated, result);\n+#endif\n     }\n \n   return 0; /* Break at end. */"
    },
    {
      "sha": "183ad1671f5997706421c91eb3a6191d28f77189",
      "filename": "gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-breakpoint.exp?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -499,6 +499,28 @@ proc test_bkpt_address {} {\n \t\".*Breakpoint ($decimal)+ at .*$srcfile, line ($decimal)+\\.\"\n }\n \n+proc test_bkpt_probe {} {\n+    global decimal hex testfile srcfile\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile}-probes \\\n+\t    ${srcfile} {additional_flags=-DUSE_PROBES}] } {\n+\treturn -1\n+    }\n+\n+    if ![gdb_guile_runto_main] then {\n+\treturn\n+    }\n+\n+    gdb_scm_test_silent_cmd \\\n+\t\"guile (define bp1 (make-breakpoint \\\"-probe test:result_updated\\\"))\" \\\n+\t\"create probe breakpoint\"\n+\n+    gdb_test \\\n+\t\"guile (register-breakpoint! bp1)\" \\\n+\t\"Breakpoint $decimal at $hex\" \\\n+\t\"register probe breakpoint\"\n+}\n+\n test_bkpt_basic\n test_bkpt_deletion\n test_bkpt_cond_and_cmds\n@@ -508,3 +530,4 @@ test_bkpt_internal\n test_bkpt_eval_funcs\n test_bkpt_registration\n test_bkpt_address\n+test_bkpt_probe"
    },
    {
      "sha": "12adc99a1b5e04fb443cb7764a280b576601837f",
      "filename": "gdb/testsuite/gdb.python/py-breakpoint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-breakpoint.c?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -15,6 +15,10 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n \n+#ifdef USE_PROBES\n+#include <sys/sdt.h>\n+#endif\n+\n int result = 0;\n \n namespace foo_ns\n@@ -46,6 +50,9 @@ int main (int argc, char *argv[])\n     {\n       result += multiply (foo);  /* Break at multiply. */\n       result += add (bar); /* Break at add. */\n+#ifdef USE_PROBES\n+      DTRACE_PROBE1 (test, result_updated, result);\n+#endif\n     }\n \n   return 0; /* Break at end. */"
    },
    {
      "sha": "95f2b2905d3cadef1821ea93f0148a4cc90359b0",
      "filename": "gdb/testsuite/gdb.python/py-breakpoint.exp",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac7c5cf92e85195de99077b4147358bb372e87a/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-breakpoint.exp?ref=bac7c5cf92e85195de99077b4147358bb372e87a",
      "patch": "@@ -695,6 +695,25 @@ proc_with_prefix test_bkpt_qualified {} {\n \t\"-q in spec string and qualified false\"\n }\n \n+proc_with_prefix test_bkpt_probe {} {\n+    global decimal hex testfile srcfile\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile}-probes \\\n+\t    ${srcfile} {debug c++ additional_flags=-DUSE_PROBES}] } {\n+\treturn -1\n+    }\n+\n+    if ![runto_main] then {\n+\tfail \"cannot run to main.\"\n+\treturn 0\n+    }\n+\n+    gdb_test \\\n+\t\"python gdb.Breakpoint(\\\"-probe test:result_updated\\\")\" \\\n+\t\"Breakpoint $decimal at $hex\" \\\n+\t\"-probe in spec string\"\n+}\n+\n test_bkpt_basic\n test_bkpt_deletion\n test_bkpt_cond_and_cmds\n@@ -708,3 +727,4 @@ test_bkpt_pending\n test_bkpt_events\n test_bkpt_explicit_loc\n test_bkpt_qualified\n+test_bkpt_probe"
    }
  ]
}