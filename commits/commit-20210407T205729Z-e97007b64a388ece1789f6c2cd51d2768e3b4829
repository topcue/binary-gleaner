{
  "sha": "e97007b64a388ece1789f6c2cd51d2768e3b4829",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTk3MDA3YjY0YTM4OGVjZTE3ODlmNmMyY2Q1MWQyNzY4ZTNiNDgyOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-07T20:57:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-07T20:57:29Z"
    },
    "message": "gdb: make target_ops::follow_fork return void\n\nI noticed that all implementations return false, so\ntarget_ops::follow_fork doesn't really need to return a value.  Change\nit to return void.\n\ngdb/ChangeLog:\n\n\t* target.h (struct target_ops) <follow_fork>: Return void.\n\t(target_follow_fork): Likewise.\n\t* target.c (default_follow_fork): Likewise.\n\t(target_follow_fork): Likewise.\n\t* infrun.c (follow_fork_inferior): Adjust.\n\t* fbsd-nat.h (class fbsd_nat_target) <follow_fork>: Return void.\n\t* fbsd-nat.c (fbsd_nat_target:::follow_fork): Likewise.\n\t* linux-nat.h (class linux_nat_target) <follow_fork>: Likewise.\n\t* linux-nat.c (linux_nat_target::follow_fork): Return void.\n\t* obsd-nat.h (class obsd_nat_target) <follow_fork>: Return void.\n\t* obsd-nat.c (obsd_nat_target::follow_fork): Likewise.\n\t* remote.c (class remote_target) <follow_fork>: Likewise.\n\t(remote_target::follow_fork): Likewise.\n\t* target-delegates.c: Re-generate.\n\nChange-Id: If908c2f68b29fa275be2b0b9deb41e4c6a1b7879",
    "tree": {
      "sha": "0982f6d8b5a975aa868761c2a3807ef341c9ad87",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0982f6d8b5a975aa868761c2a3807ef341c9ad87"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e97007b64a388ece1789f6c2cd51d2768e3b4829",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e97007b64a388ece1789f6c2cd51d2768e3b4829",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e97007b64a388ece1789f6c2cd51d2768e3b4829",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e97007b64a388ece1789f6c2cd51d2768e3b4829/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dc2b480f3df3bc7673c892e0cb8459a4ea72d447",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dc2b480f3df3bc7673c892e0cb8459a4ea72d447",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dc2b480f3df3bc7673c892e0cb8459a4ea72d447"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 44,
    "deletions": 40
  },
  "files": [
    {
      "sha": "332688cd586ad099ebe0f04ea2b5f70c0c11174a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -1,3 +1,20 @@\n+2021-04-07  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* target.h (struct target_ops) <follow_fork>: Return void.\n+\t(target_follow_fork): Likewise.\n+\t* target.c (default_follow_fork): Likewise.\n+\t(target_follow_fork): Likewise.\n+\t* infrun.c (follow_fork_inferior): Adjust.\n+\t* fbsd-nat.h (class fbsd_nat_target) <follow_fork>: Return void.\n+\t* fbsd-nat.c (fbsd_nat_target:::follow_fork): Likewise.\n+\t* linux-nat.h (class linux_nat_target) <follow_fork>: Likewise.\n+\t* linux-nat.c (linux_nat_target::follow_fork): Return void.\n+\t* obsd-nat.h (class obsd_nat_target) <follow_fork>: Return void.\n+\t* obsd-nat.c (obsd_nat_target::follow_fork): Likewise.\n+\t* remote.c (class remote_target) <follow_fork>: Likewise.\n+\t(remote_target::follow_fork): Likewise.\n+\t* target-delegates.c: Re-generate.\n+\n 2021-04-07  Weimin Pan  <weimin.pan@oracle.com>\n \n \t* ctfread.c (fetch_tid_type): New function, use throughout file."
    },
    {
      "sha": "0f0822f0d5550653ad161aaacf4903472be7f62e",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -1417,7 +1417,7 @@ fbsd_nat_target::supports_stopped_by_sw_breakpoint ()\n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n    the ptid of the followed inferior.  */\n \n-bool\n+void\n fbsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child && detach_fork)\n@@ -1460,8 +1460,6 @@ fbsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n \t}\n #endif\n     }\n-\n-  return false;\n }\n \n int"
    },
    {
      "sha": "772655d320e6a5cd4e14cfc4d73acf62b3c63423",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -80,7 +80,7 @@ class fbsd_nat_target : public inf_ptrace_target\n #endif\n \n #ifdef TDP_RFPPWAIT\n-  bool follow_fork (bool, bool) override;\n+  void follow_fork (bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;"
    },
    {
      "sha": "2c31cf452b10752508561051fcd6490c554a0721",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -426,7 +426,7 @@ follow_fork_inferior (bool follow_child, bool detach_fork)\n Can not resume the parent process over vfork in the foreground while\\n\\\n holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n \\\"set schedule-multiple\\\".\\n\"));\n-      return 1;\n+      return true;\n     }\n \n   if (!follow_child)\n@@ -662,7 +662,9 @@ holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n       switch_to_thread (child_thr);\n     }\n \n-  return target_follow_fork (follow_child, detach_fork);\n+  target_follow_fork (follow_child, detach_fork);\n+\n+  return false;\n }\n \n /* Tell the target to follow the fork we're stopped at.  Returns true"
    },
    {
      "sha": "c45e335a762191e589d649b142bfe8555f4dc576",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -446,7 +446,7 @@ typedef std::unique_ptr<struct lwp_info, lwp_deleter> lwp_info_up;\n    ptid of the followed inferior.  At return, inferior_ptid will be\n    unchanged.  */\n \n-bool\n+void\n linux_nat_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n@@ -611,8 +611,6 @@ linux_nat_target::follow_fork (bool follow_child, bool detach_fork)\n       /* Let the thread_db layer learn about this new process.  */\n       check_for_thread_db ();\n     }\n-\n-  return false;\n }\n \n \f"
    },
    {
      "sha": "5426a5c690012a15f2d8b46ccf23c7c636df5e0a",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -133,7 +133,7 @@ class linux_nat_target : public inf_ptrace_target\n \n   void post_attach (int) override;\n \n-  bool follow_fork (bool, bool) override;\n+  void follow_fork (bool, bool) override;\n \n   std::vector<static_tracepoint_marker>\n     static_tracepoint_markers_by_strid (const char *id) override;"
    },
    {
      "sha": "a8164ddbad157310df479f7be15fcd3649a517b2",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -193,7 +193,7 @@ obsd_nat_target::post_startup_inferior (ptid_t pid)\n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n    the ptid of the followed inferior.  */\n \n-bool\n+void\n obsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n@@ -207,8 +207,6 @@ obsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n       if (ptrace (PT_DETACH, child_pid, (PTRACE_TYPE_ARG3)1, 0) == -1)\n \tperror_with_name ((\"ptrace\"));\n     }\n-\n-  return false;\n }\n \n int"
    },
    {
      "sha": "60b078fd0d30d618f3acf7ea34a8f44f3b3cd412",
      "filename": "gdb/obsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/obsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/obsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.h?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -30,7 +30,7 @@ class obsd_nat_target : public inf_ptrace_target\n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n #ifdef PT_GET_PROCESS_STATE\n-  bool follow_fork (bool, bool) override;\n+  void follow_fork (bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n "
    },
    {
      "sha": "7429e1a86b389dde87184550faff263be6c83121",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -682,7 +682,7 @@ class remote_target : public process_stratum_target\n \n   const struct btrace_config *btrace_conf (const struct btrace_target_info *) override;\n   bool augmented_libraries_svr4_read () override;\n-  bool follow_fork (bool, bool) override;\n+  void follow_fork (bool, bool) override;\n   void follow_exec (struct inferior *, const char *) override;\n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;\n@@ -5895,7 +5895,7 @@ extended_remote_target::detach (inferior *inf, int from_tty)\n    it is named remote_follow_fork in anticipation of using it for the\n    remote target as well.  */\n \n-bool\n+void\n remote_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   struct remote_state *rs = get_remote_state ();\n@@ -5922,8 +5922,6 @@ remote_target::follow_fork (bool follow_child, bool detach_fork)\n \t  remote_detach_pid (child_pid);\n \t}\n     }\n-\n-  return false;\n }\n \n /* Target follow-exec function for remote targets.  Save EXECD_PATHNAME"
    },
    {
      "sha": "ef8c94cec8c6a996e0f9433d438d358ab15a1cf0",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -56,7 +56,7 @@ struct dummy_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  bool follow_fork (bool arg0, bool arg1) override;\n+  void follow_fork (bool arg0, bool arg1) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (struct inferior *arg0, const char *arg1) override;\n@@ -231,7 +231,7 @@ struct debug_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  bool follow_fork (bool arg0, bool arg1) override;\n+  void follow_fork (bool arg0, bool arg1) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (struct inferior *arg0, const char *arg1) override;\n@@ -1518,32 +1518,28 @@ debug_target::remove_vfork_catchpoint (int arg0)\n   return result;\n }\n \n-bool\n+void\n target_ops::follow_fork (bool arg0, bool arg1)\n {\n-  return this->beneath ()->follow_fork (arg0, arg1);\n+  this->beneath ()->follow_fork (arg0, arg1);\n }\n \n-bool\n+void\n dummy_target::follow_fork (bool arg0, bool arg1)\n {\n-  return default_follow_fork (this, arg0, arg1);\n+  default_follow_fork (this, arg0, arg1);\n }\n \n-bool\n+void\n debug_target::follow_fork (bool arg0, bool arg1)\n {\n-  bool result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->follow_fork (...)\\n\", this->beneath ()->shortname ());\n-  result = this->beneath ()->follow_fork (arg0, arg1);\n+  this->beneath ()->follow_fork (arg0, arg1);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->follow_fork (\", this->beneath ()->shortname ());\n   target_debug_print_bool (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n   target_debug_print_bool (arg1);\n-  fputs_unfiltered (\") = \", gdb_stdlog);\n-  target_debug_print_bool (result);\n-  fputs_unfiltered (\"\\n\", gdb_stdlog);\n-  return result;\n+  fputs_unfiltered (\")\\n\", gdb_stdlog);\n }\n \n int"
    },
    {
      "sha": "1f0741471d829294ddbbca17c55ac564908b305e",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -2699,7 +2699,7 @@ target_program_signals (gdb::array_view<const unsigned char> program_signals)\n   current_inferior ()->top_target ()->program_signals (program_signals);\n }\n \n-static bool\n+static void\n default_follow_fork (struct target_ops *self, bool follow_child,\n \t\t     bool detach_fork)\n {\n@@ -2708,10 +2708,9 @@ default_follow_fork (struct target_ops *self, bool follow_child,\n \t\t  _(\"could not find a target to follow fork\"));\n }\n \n-/* Look through the list of possible targets for a target that can\n-   follow forks.  */\n+/* See target.h.  */\n \n-bool\n+void\n target_follow_fork (bool follow_child, bool detach_fork)\n {\n   target_ops *target = current_inferior ()->top_target ();"
    },
    {
      "sha": "48bf734279afe25df53bf9561b5dfb612c8c06c2",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97007b64a388ece1789f6c2cd51d2768e3b4829/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=e97007b64a388ece1789f6c2cd51d2768e3b4829",
      "patch": "@@ -636,7 +636,7 @@ struct target_ops\n       TARGET_DEFAULT_RETURN (1);\n     virtual int remove_vfork_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n-    virtual bool follow_fork (bool, bool)\n+    virtual void follow_fork (bool, bool)\n       TARGET_DEFAULT_FUNC (default_follow_fork);\n     virtual int insert_exec_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n@@ -1710,11 +1710,9 @@ extern int target_remove_vfork_catchpoint (int pid);\n    the next resume in order to perform any bookkeeping and fiddling\n    necessary to continue debugging either the parent or child, as\n    requested, and releasing the other.  Information about the fork\n-   or vfork event is available via get_last_target_status ().\n-   This function returns true if the inferior should not be resumed\n-   (i.e. there is another event pending).  */\n+   or vfork event is available via get_last_target_status ().  */\n \n-bool target_follow_fork (bool follow_child, bool detach_fork);\n+void target_follow_fork (bool follow_child, bool detach_fork);\n \n /* Handle the target-specific bookkeeping required when the inferior\n    makes an exec call.  INF is the exec'd inferior.  */"
    }
  ]
}