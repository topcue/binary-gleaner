{
  "sha": "bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmIyOTQyMDg1YzgzMjg5YzU2Y2MzZWY4YjlhYjBlY2Y2MjY3ZWZhMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-24T23:37:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-25T04:02:19Z"
    },
    "message": "Pass section when available to bfd_octets_per_byte\n\nand other tidies.  I think it's better to default to passing the\nsection to bfd_octets_per_byte, even in cases where we know it won't\nmake a difference.\n\nA number of the coff reloc functions used bfd_octets_per_byte wrongly,\nnot factoring it into the offset into the data buffer.  As it happens,\nthe targets using those files always had bfd_octets_per_byte equal to\none, so there wasn't any detectable wrong behaviour.  However, it is\nwrong in the source and might cause trouble for anyone creating a new\ntarget.  Besides fixing that, the patch also defines OCTETS_PER_BYTE\nas one in target files where that is appropriate.\n\nbfd/\n\t* archures.c (bfd_octets_per_byte): Tail call\n\tbfd_arch_mach_octets_per_byte.\n\t* coff-arm.c (OCTETS_PER_BYTE): Define.\n\t(coff_arm_reloc): Introduce new \"octets\" temp.  Use OCTETS_PER_BYTE\n\twith section.  Correct \"addr\".  Remove ATTRIBUTE_UNUSED.\n\t* coff-i386.c (coff_i386_reloc): Similarly.\n\t* coff-mips.c (mips_reflo_reloc): Similarly.\n\t* coff-x86_64.c (coff_amd64_reloc): Similarly.\n\t* elf32-msp430.c (OCTETS_PER_BYTE): Define.\n\t(rl78_sym_diff_handler): Use OCTETS_PER_BYTE, with section.\n\t* elf32-nds32.c (nds32_elf_get_relocated_section_contents): Similarly.\n\t* elf32-ppc.c (ppc_elf_addr16_ha_reloc): Similarly.\n\t* elf32-pru.c (pru_elf32_do_ldi32_relocate): Similarly.\n\t* elf32-s12z.c (opru18_reloc): Similarly.\n\t* elf32-sh.c (sh_elf_reloc): Similarly.\n\t* elf32-spu.c (spu_elf_rel9): Similarly.\n\t* elf32-xtensa.c (bfd_elf_xtensa_reloc): Similarly.\n\t* elf64-ppc.c (ppc64_elf_ha_reloc, ppc64_elf_brtaken_reloc),\n\t(ppc64_elf_toc64_reloc): Similarly.\n\t* bfd.c (bfd_get_section_limit): Pass section to bfd_octets_per_byte.\n\t* cofflink.c (_bfd_coff_link_input_bfd),\n\t(_bfd_coff_reloc_link_order): Likewise.\n\t* elf.c (_bfd_elf_section_offset): Likewise.\n\t* elflink.c (resolve_section, bfd_elf_perform_complex_relocation),\n\t(elf_link_input_bfd, elf_reloc_link_order, elf_fixup_link_order),\n\t(bfd_elf_final_link): Likewise.\n\t* elf.c (_bfd_elf_make_section_from_shdr): Don't strncmp twice\n\tto set SEC_ELF_OCTETS.\n\t* reloc.c (bfd_perform_relocation): Tidy SEC_ELF_OCTETS special case.\n\t(bfd_install_relocation): Likewise.\n\t(_bfd_final_link_relocate): Don't recalculate octets.\n\t* syms.c (_bfd_stab_section_find_nearest_line): Introduc new\n\t\"octets\" temp.\n\t* bfd-in2.h: Regenerate.\nld/\n\t* ldexp.c (fold_name): Pass section to bfd_octets_per_byte.\n\t* ldlang.c (init_opb): Don't call bfd_arch_mach_octets_per_byte\n\tunnecessarily.",
    "tree": {
      "sha": "f5865525e08a0c12b146f56c4432ed876aa26d37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f5865525e08a0c12b146f56c4432ed876aa26d37"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "618265039f697eab9e72bb58b95fc2d32925df58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/618265039f697eab9e72bb58b95fc2d32925df58",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/618265039f697eab9e72bb58b95fc2d32925df58"
    }
  ],
  "stats": {
    "total": 308,
    "additions": 184,
    "deletions": 124
  },
  "files": [
    {
      "sha": "9789016199fe77bca6526f97f201996be5d6c930",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -1,3 +1,40 @@\n+2019-11-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* archures.c (bfd_octets_per_byte): Tail call\n+\tbfd_arch_mach_octets_per_byte.\n+\t* coff-arm.c (OCTETS_PER_BYTE): Define.\n+\t(coff_arm_reloc): Introduce new \"octets\" temp.  Use OCTETS_PER_BYTE\n+\twith section.  Correct \"addr\".  Remove ATTRIBUTE_UNUSED.\n+\t* coff-i386.c (coff_i386_reloc): Similarly.\n+\t* coff-mips.c (mips_reflo_reloc): Similarly.\n+\t* coff-x86_64.c (coff_amd64_reloc): Similarly.\n+\t* elf32-msp430.c (OCTETS_PER_BYTE): Define.\n+\t(rl78_sym_diff_handler): Use OCTETS_PER_BYTE, with section.\n+\t* elf32-nds32.c (nds32_elf_get_relocated_section_contents): Similarly.\n+\t* elf32-ppc.c (ppc_elf_addr16_ha_reloc): Similarly.\n+\t* elf32-pru.c (pru_elf32_do_ldi32_relocate): Similarly.\n+\t* elf32-s12z.c (opru18_reloc): Similarly.\n+\t* elf32-sh.c (sh_elf_reloc): Similarly.\n+\t* elf32-spu.c (spu_elf_rel9): Similarly.\n+\t* elf32-xtensa.c (bfd_elf_xtensa_reloc): Similarly.\n+\t* elf64-ppc.c (ppc64_elf_ha_reloc, ppc64_elf_brtaken_reloc),\n+\t(ppc64_elf_toc64_reloc): Similarly.\n+\t* bfd.c (bfd_get_section_limit): Pass section to bfd_octets_per_byte.\n+\t* cofflink.c (_bfd_coff_link_input_bfd),\n+\t(_bfd_coff_reloc_link_order): Likewise.\n+\t* elf.c (_bfd_elf_section_offset): Likewise.\n+\t* elflink.c (resolve_section, bfd_elf_perform_complex_relocation),\n+\t(elf_link_input_bfd, elf_reloc_link_order, elf_fixup_link_order),\n+\t(bfd_elf_final_link): Likewise.\n+\t* elf.c (_bfd_elf_make_section_from_shdr): Don't strncmp twice\n+\tto set SEC_ELF_OCTETS.\n+\t* reloc.c (bfd_perform_relocation): Tidy SEC_ELF_OCTETS special case.\n+\t(bfd_install_relocation): Likewise.\n+\t(_bfd_final_link_relocate): Don't recalculate octets.\n+\t* syms.c (_bfd_stab_section_find_nearest_line): Introduc new\n+\t\"octets\" temp.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-11-25  Christian Eggers  <ceggers@gmx.de>\n \n \t* section.c (struct bfd_section): New flag SEC_ELF_OCTETS."
    },
    {
      "sha": "7866c6095b5d06a68da3edc309ecd7f7b72a5f07",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -1391,15 +1391,13 @@ DESCRIPTION\n unsigned int\n bfd_octets_per_byte (const bfd *abfd, const asection *sec)\n {\n-  unsigned int opb = bfd_arch_mach_octets_per_byte (bfd_get_arch (abfd),\n-\t\t\t\t\t\t    bfd_get_mach (abfd));\n-\n   if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n       && sec != NULL\n       && (sec->flags & SEC_ELF_OCTETS) != 0)\n-    opb = 1;\n+    return 1;\n \n-  return opb;\n+  return bfd_arch_mach_octets_per_byte (bfd_get_arch (abfd),\n+\t\t\t\t\tbfd_get_mach (abfd));\n }\n \n /*"
    },
    {
      "sha": "44902fc8d05ca82e845ece5cb41846467a79b620",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -6861,7 +6861,7 @@ static inline bfd_size_type\n bfd_get_section_limit (const bfd *abfd, const asection *sec)\n {\n   return (bfd_get_section_limit_octets (abfd, sec)\n-          / bfd_octets_per_byte (abfd, NULL));\n+          / bfd_octets_per_byte (abfd, sec));\n }\n \n /* Functions to handle insertion and deletion of a bfd's sections.  These"
    },
    {
      "sha": "a3c522cbf8eee615477cde2902a1eebbdadc80f3",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -493,7 +493,7 @@ CODE_FRAGMENT\n .bfd_get_section_limit (const bfd *abfd, const asection *sec)\n .{\n .  return (bfd_get_section_limit_octets (abfd, sec)\n-.\t   / bfd_octets_per_byte (abfd, NULL));\n+.\t   / bfd_octets_per_byte (abfd, sec));\n .}\n .\n .{* Functions to handle insertion and deletion of a bfd's sections.  These"
    },
    {
      "sha": "242c90bf873c10eac1d8e5b9f382e65b4f26fcd3",
      "filename": "bfd/coff-arm.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -33,6 +33,9 @@\n \n #include \"libcoff.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n /* Macros for manipulation the bits in the flags field of the coff data\n    structure.  */\n #define APCS_26_FLAG(abfd) \\\n@@ -96,7 +99,7 @@ coff_arm_reloc (bfd *abfd,\n \t\tarelent *reloc_entry,\n \t\tasymbol *symbol ATTRIBUTE_UNUSED,\n \t\tvoid * data,\n-\t\tasection *input_section ATTRIBUTE_UNUSED,\n+\t\tasection *input_section,\n \t\tbfd *output_bfd,\n \t\tchar **error_message ATTRIBUTE_UNUSED)\n {\n@@ -114,11 +117,11 @@ coff_arm_reloc (bfd *abfd,\n   if (diff != 0)\n     {\n       reloc_howto_type *howto = reloc_entry->howto;\n-      unsigned char *addr = (unsigned char *) data + reloc_entry->address;\n+      bfd_size_type octets = (reloc_entry->address\n+\t\t\t      * OCTETS_PER_BYTE (abfd, input_section));\n+      unsigned char *addr = (unsigned char *) data + octets;\n \n-      if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n-\t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n+      if (!bfd_reloc_offset_in_range (howto, abfd, input_section, octets))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "99f60798636cf7b172dcd7fed5fe1d18502d1ea7",
      "filename": "bfd/coff-i386.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-i386.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -41,6 +41,9 @@\n \n #include \"libcoff.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n static reloc_howto_type *coff_i386_rtype_to_howto\n   (bfd *, asection *, struct internal_reloc *,\n    struct coff_link_hash_entry *, struct internal_syment *,\n@@ -67,7 +70,7 @@ coff_i386_reloc (bfd *abfd,\n \t\t arelent *reloc_entry,\n \t\t asymbol *symbol,\n \t\t void * data,\n-\t\t asection *input_section ATTRIBUTE_UNUSED,\n+\t\t asection *input_section,\n \t\t bfd *output_bfd,\n \t\t char **error_message ATTRIBUTE_UNUSED)\n {\n@@ -142,11 +145,11 @@ coff_i386_reloc (bfd *abfd,\n   if (diff != 0)\n     {\n       reloc_howto_type *howto = reloc_entry->howto;\n-      unsigned char *addr = (unsigned char *) data + reloc_entry->address;\n+      bfd_size_type octets = (reloc_entry->address\n+\t\t\t      * OCTETS_PER_BYTE (abfd, input_section));\n+      unsigned char *addr = (unsigned char *) data + octets;\n \n-      if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n-\t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n+      if (!bfd_reloc_offset_in_range (howto, abfd, input_section, octets))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "76de32009af6e38b301acc7cafdb88264059ab33",
      "filename": "bfd/coff-mips.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-mips.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -31,6 +31,9 @@\n #include \"coff/mips.h\"\n #include \"libcoff.h\"\n #include \"libecoff.h\"\n+\n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n \f\n /* Prototypes for static functions.  */\n static bfd_reloc_status_type\n@@ -484,13 +487,13 @@ mips_refhi_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n    relocation described above.  */\n \n static bfd_reloc_status_type\n-mips_reflo_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n+mips_reflo_reloc (bfd *abfd,\n \t\t  arelent *reloc_entry,\n \t\t  asymbol *symbol,\n \t\t  void * data,\n \t\t  asection *input_section,\n \t\t  bfd *output_bfd,\n-\t\t  char **error_message ATTRIBUTE_UNUSED)\n+\t\t  char **error_message)\n {\n   if (mips_refhi_list != NULL)\n     {\n@@ -503,20 +506,20 @@ mips_reflo_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n \t  unsigned long val;\n \t  unsigned long vallo;\n \t  struct mips_hi *next;\n+\t  bfd_size_type octets = (reloc_entry->address\n+\t\t\t\t  * OCTETS_PER_BYTE (abfd, input_section));\n+\t  bfd_byte *loc = (bfd_byte *) data + octets;\n \n-\t  if (! bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n-\t\t\t\t\t   input_section,\n-\t\t\t\t\t   reloc_entry->address\n-\t\t\t\t\t   * bfd_octets_per_byte (abfd, NULL)))\n+\t  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t\t  input_section, octets))\n \t    return bfd_reloc_outofrange;\n \n \t  /* Do the REFHI relocation.  Note that we actually don't\n \t     need to know anything about the REFLO itself, except\n \t     where to find the low 16 bits of the addend needed by the\n \t     REFHI.  */\n \t  insn = bfd_get_32 (abfd, l->addr);\n-\t  vallo = (bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address)\n-\t\t   & 0xffff);\n+\t  vallo = bfd_get_32 (abfd, loc) & 0xffff;\n \t  val = ((insn & 0xffff) << 16) + vallo;\n \t  val += l->addend;\n \n@@ -544,7 +547,7 @@ mips_reflo_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n \n   /* Now do the REFLO reloc in the usual way.  */\n   return mips_generic_reloc (abfd, reloc_entry, symbol, data,\n-\t\t\t      input_section, output_bfd, error_message);\n+\t\t\t     input_section, output_bfd, error_message);\n }\n \n /* Do a GPREL relocation.  This is a 16 bit value which must become"
    },
    {
      "sha": "4edbd236091d67129434a45bf725139c009e5651",
      "filename": "bfd/coff-x86_64.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/coff-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-x86_64.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -52,6 +52,9 @@\n \n #define COFF_PAGE_SIZE 0x1000\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n /* For some reason when using AMD COFF the value stored in the .text\n    section for a reference to a common symbol is the value itself plus\n    any desired offset.  Ian Taylor, Cygnus Support.  */\n@@ -141,11 +144,11 @@ coff_amd64_reloc (bfd *abfd,\n   if (diff != 0)\n     {\n       reloc_howto_type *howto = reloc_entry->howto;\n-      unsigned char *addr = (unsigned char *) data + reloc_entry->address;\n+      bfd_size_type octets = (reloc_entry->address\n+\t\t\t      * OCTETS_PER_BYTE (abfd, input_section));\n+      unsigned char *addr = (unsigned char *) data + octets;\n \n-      if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n-\t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n+      if (!bfd_reloc_offset_in_range (howto, abfd, input_section, octets))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "0ca8649dff894a33857bb0159c7499d10522fc01",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -2542,7 +2542,7 @@ _bfd_coff_link_input_bfd (struct coff_final_link_info *flaginfo, bfd *input_bfd)\n       if (secdata == NULL || secdata->stab_info == NULL)\n \t{\n \t  file_ptr loc = (o->output_offset\n-\t\t\t  * bfd_octets_per_byte (output_bfd, NULL));\n+\t\t\t  * bfd_octets_per_byte (output_bfd, o));\n \t  if (! bfd_set_section_contents (output_bfd, o->output_section,\n \t\t\t\t\t  contents, loc, o->size))\n \t    return FALSE;\n@@ -2834,7 +2834,7 @@ _bfd_coff_reloc_link_order (bfd *output_bfd,\n \treturn FALSE;\n \n       rstat = _bfd_relocate_contents (howto, output_bfd,\n-\t\t\t\t      (bfd_vma) link_order->u.reloc.p->addend,\\\n+\t\t\t\t      (bfd_vma) link_order->u.reloc.p->addend,\n \t\t\t\t      buf);\n       switch (rstat)\n \t{\n@@ -2853,7 +2853,8 @@ _bfd_coff_reloc_link_order (bfd *output_bfd,\n \t     (bfd *) NULL, (asection *) NULL, (bfd_vma) 0);\n \t  break;\n \t}\n-      loc = link_order->offset * bfd_octets_per_byte (output_bfd, NULL);\n+      loc = link_order->offset * bfd_octets_per_byte (output_bfd,\n+\t\t\t\t\t\t      output_section);\n       ok = bfd_set_section_contents (output_bfd, output_section, buf,\n \t\t\t\t     loc, size);\n       free (buf);"
    },
    {
      "sha": "a4f26dac71d7ccad2180e11ebb34a6bad4df3cc6",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 11,
      "deletions": 27,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -1102,33 +1102,17 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n \t not any sort of flag.  Their SEC_ALLOC bits are cleared.  */\n       if (name [0] == '.')\n \t{\n-\t  const char *p;\n-\t  int n;\n-\t  if (name[1] == 'd')\n-\t    p = \".debug\", n = 6;\n-\t  else if (name[1] == 'g' && name[2] == 'n')\n-\t    p = \".gnu.linkonce.wi.\", n = 17;\n-\t  else if (name[1] == 'g' && name[2] == 'd')\n-\t    p = \".gdb_index\", n = 11; /* yes we really do mean 11.  */\n-\t  else if (name[1] == 'l')\n-\t    p = \".line\", n = 5;\n-\t  else if (name[1] == 's')\n-\t    p = \".stab\", n = 5;\n-\t  else if (name[1] == 'z')\n-\t    p = \".zdebug\", n = 7;\n-\t  else\n-\t    p = NULL, n = 0;\n-\t  if (p != NULL && strncmp (name, p, n) == 0)\n+\t  if (strncmp (name, \".debug\", 6) == 0\n+\t      || strncmp (name, \".gnu.linkonce.wi.\", 17) == 0\n+\t      || strncmp (name, \".zdebug\", 7) == 0)\n+\t    flags |= SEC_DEBUGGING | SEC_ELF_OCTETS;\n+\t  else if (strncmp (name, GNU_BUILD_ATTRS_SECTION_NAME, 21) == 0\n+\t\t   || strncmp (name, \".note.gnu\", 9) == 0)\n+\t    flags |= SEC_ELF_OCTETS;\n+\t  else if (strncmp (name, \".line\", 5) == 0\n+\t\t   || strncmp (name, \".stab\", 5) == 0\n+\t\t   || strcmp (name, \".gdb_index\") == 0)\n \t    flags |= SEC_DEBUGGING;\n-\n-\t  /* DWARF debug sections and ELF notes are organized in octets. */\n-\t  if (strncmp (name, \".debug\", 6) == 0 ||\n-\t      strncmp (name, \".zdebug\", 7) == 0 ||\n-\t      strncmp (name, GNU_BUILD_ATTRS_SECTION_NAME, 21) == 0 ||\n-\t      strncmp (name, \".note.gnu\", 9) == 0)\n-\t    {\n-\t      flags |= SEC_ELF_OCTETS;\n-\t    }\n \t}\n     }\n \n@@ -12064,7 +12048,7 @@ _bfd_elf_section_offset (bfd *abfd,\n \t  /* address_size and sec->size are in octets.  Convert\n \t     to bytes before subtracting the original offset.  */\n \t  offset = ((sec->size - address_size)\n-\t\t    / bfd_octets_per_byte (abfd, NULL) - offset);\n+\t\t    / bfd_octets_per_byte (abfd, sec) - offset);\n \t}\n       return offset;\n     }"
    },
    {
      "sha": "eeed0c6fc040f0627e21870e58cd81488f65d814",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -26,6 +26,9 @@\n #include \"elf-bfd.h\"\n #include \"elf/msp430.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n static bfd_reloc_status_type\n rl78_sym_diff_handler (bfd * abfd,\n \t\t       arelent * reloc,\n@@ -36,7 +39,7 @@ rl78_sym_diff_handler (bfd * abfd,\n \t\t       char ** error_message ATTRIBUTE_UNUSED)\n {\n   bfd_size_type octets;\n-  octets = reloc->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc->address * OCTETS_PER_BYTE (abfd, input_sec);\n \n   /* Catch the case where bfd_install_relocation would return\n      bfd_reloc_outofrange because the SYM_DIFF reloc is being used in a very"
    },
    {
      "sha": "cb8f7755dcb172de34beca5ccb2aea8cf6a80fe7",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -32,6 +32,9 @@\n #include \"opcode/cgen.h\"\n #include \"../opcodes/nds32-opc.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n /* Relocation HOWTO functions.  */\n static bfd_reloc_status_type nds32_elf_ignore_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n@@ -13220,7 +13223,8 @@ nds32_elf_get_relocated_section_contents (bfd *abfd,\n \t\t= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,\n \t\t\t \"unused\", FALSE, 0, 0, FALSE);\n \n-\t      off = (*parent)->address * bfd_octets_per_byte (input_bfd, NULL);\n+\t      off = (*parent)->address * OCTETS_PER_BYTE (input_bfd,\n+\t\t\t\t\t\t\t  input_section);\n \t      _bfd_clear_contents ((*parent)->howto, input_bfd,\n \t\t\t\t   input_section, data, off);\n \t      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;"
    },
    {
      "sha": "162367afd5819e4bc909d5b680c4dca6fcd8ca15",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -37,6 +37,9 @@\n #include \"dwarf2.h\"\n #include \"opcode/ppc.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n typedef enum split16_format_type\n {\n   split16a_type = 0,\n@@ -956,7 +959,7 @@ ppc_elf_addr16_ha_reloc (bfd *abfd,\n \t    + input_section->output_section->vma);\n   value >>= 16;\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);"
    },
    {
      "sha": "dcf4adfa867ea467ddad9e4927994ecc55371de1",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -32,6 +32,9 @@\n #include \"opcode/pru.h\"\n #include \"libiberty.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n #define SWAP_VALS(A,B)\t\t      \\\n   do {\t\t\t\t      \\\n       (A) ^= (B);\t\t      \\\n@@ -537,7 +540,7 @@ pru_elf32_do_ldi32_relocate (bfd *abfd, reloc_howto_type *howto,\n \t\t\t     bfd_vma symbol_value, bfd_vma addend)\n {\n   bfd_signed_vma relocation;\n-  bfd_size_type octets = offset * bfd_octets_per_byte (abfd, NULL);\n+  bfd_size_type octets = offset * OCTETS_PER_BYTE (abfd, input_section);\n   bfd_byte *location;\n   unsigned long in1, in2;\n \n@@ -557,7 +560,7 @@ pru_elf32_do_ldi32_relocate (bfd *abfd, reloc_howto_type *howto,\n   BFD_ASSERT (!howto->pc_relative);\n \n   /* A hacked-up version of _bfd_relocate_contents() follows.  */\n-  location = data + offset * bfd_octets_per_byte (abfd, NULL);\n+  location = data + octets;\n \n   BFD_ASSERT (!howto->pc_relative);\n "
    },
    {
      "sha": "f8f46ba34b71696f01add4ff39d1b50453fa9255",
      "filename": "bfd/elf32-s12z.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s12z.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -27,6 +27,9 @@\n \n #include \"elf/s12z.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n /* Relocation functions.  */\n static reloc_howto_type *bfd_elf32_bfd_reloc_type_lookup\n   (bfd *, bfd_reloc_code_real_type);\n@@ -44,7 +47,7 @@ opru18_reloc (bfd *abfd, arelent *reloc_entry, struct bfd_symbol *symbol,\n      Appendix A.4 of the S12Z reference manual.  */\n \n   bfd_size_type octets = (reloc_entry->address\n-\t\t\t  * bfd_octets_per_byte (abfd, NULL));\n+\t\t\t  * OCTETS_PER_BYTE (abfd, input_section));\n   bfd_vma result = bfd_get_24 (abfd, (unsigned char *) data + octets);\n   bfd_vma val = bfd_asymbol_value (symbol);\n "
    },
    {
      "sha": "8aa49b099c336cbc38ed745a246652e96ec01f12",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -30,6 +30,9 @@\n #include \"libiberty.h\"\n #include \"../opcodes/sh-opc.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n static bfd_reloc_status_type sh_elf_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n static bfd_reloc_status_type sh_elf_ignore_reloc\n@@ -233,7 +236,8 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n   bfd_vma sym_value;\n   enum elf_sh_reloc_type r_type;\n   bfd_vma addr = reloc_entry->address;\n-  bfd_byte *hit_data = addr + (bfd_byte *) data;\n+  bfd_size_type octets = addr * OCTETS_PER_BYTE (abfd, input_section);\n+  bfd_byte *hit_data = (bfd_byte *) data + octets;\n \n   r_type = (enum elf_sh_reloc_type) reloc_entry->howto->type;\n \n@@ -254,8 +258,7 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n     return bfd_reloc_undefined;\n \n   /* PR 17512: file: 9891ca98.  */\n-  if ((addr * bfd_octets_per_byte (abfd, NULL)\n-       + bfd_get_reloc_size (reloc_entry->howto))\n+  if (octets + bfd_get_reloc_size (reloc_entry->howto)\n       > bfd_get_section_limit_octets (abfd, input_section))\n     return bfd_reloc_outofrange;\n "
    },
    {
      "sha": "823628898f7f858eb57f61d6d1a082cfb3b0d863",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -27,6 +27,9 @@\n #include \"elf/spu.h\"\n #include \"elf32-spu.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n /* We use RELA style relocs.  Don't define USE_REL.  */\n \n static bfd_reloc_status_type spu_elf_rel9 (bfd *, arelent *, asymbol *,\n@@ -212,7 +215,7 @@ spu_elf_rel9 (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \n   if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n     return bfd_reloc_outofrange;\n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n \n   /* Get symbol value.  */\n   val = 0;"
    },
    {
      "sha": "c42e95ab572360a0e10c9929bdf3757bcd7bb840",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -32,6 +32,9 @@\n #include \"xtensa-isa.h\"\n #include \"xtensa-config.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n #define XTENSA_NO_NOP_REMOVAL 0\n \n /* Local helper functions.  */\n@@ -2104,7 +2107,7 @@ bfd_elf_xtensa_reloc (bfd *abfd,\n   bfd_vma relocation;\n   bfd_reloc_status_type flag;\n   bfd_size_type octets = (reloc_entry->address\n-\t\t\t  * bfd_octets_per_byte (abfd, NULL));\n+\t\t\t  * OCTETS_PER_BYTE (abfd, input_section));\n   bfd_vma output_base = 0;\n   reloc_howto_type *howto = reloc_entry->howto;\n   asection *reloc_target_output_section;"
    },
    {
      "sha": "9a9374fab1a002bf323ff7c5db286224a007160d",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -35,6 +35,9 @@\n #include \"elf64-ppc.h\"\n #include \"dwarf2.h\"\n \n+/* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n+#define OCTETS_PER_BYTE(ABFD, SEC) 1\n+\n static bfd_reloc_status_type ppc64_elf_ha_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n static bfd_reloc_status_type ppc64_elf_branch_reloc\n@@ -1405,7 +1408,7 @@ ppc64_elf_ha_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t    + input_section->output_section->vma);\n   value = (bfd_signed_vma) value >> 16;\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);\n@@ -1480,7 +1483,7 @@ ppc64_elf_brtaken_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~(0x01 << 21);\n   r_type = reloc_entry->howto->type;\n@@ -1630,7 +1633,7 @@ ppc64_elf_toc64_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n   if (TOCstart == 0)\n     TOCstart = ppc64_elf_set_toc (NULL, input_section->output_section->owner);\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n   bfd_put_64 (abfd, TOCstart + TOC_BASE_OFF, (bfd_byte *) data + octets);\n   return bfd_reloc_ok;\n }"
    },
    {
      "sha": "554936124c66c06d03fbedda22387d5a8da271c5",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 16,
      "deletions": 18,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -8457,7 +8457,7 @@ resolve_section (const char *name,\n \t  if (strncmp (\".end\", name + len, 4) == 0)\n \t    {\n \t      *result = (curr->vma\n-\t\t\t + curr->size / bfd_octets_per_byte (abfd, NULL));\n+\t\t\t + curr->size / bfd_octets_per_byte (abfd, curr));\n \t      return TRUE;\n \t    }\n \n@@ -8752,14 +8752,15 @@ decode_complex_addend (unsigned long *start,   /* in bits */\n \n bfd_reloc_status_type\n bfd_elf_perform_complex_relocation (bfd *input_bfd,\n-\t\t\t\t    asection *input_section ATTRIBUTE_UNUSED,\n+\t\t\t\t    asection *input_section,\n \t\t\t\t    bfd_byte *contents,\n \t\t\t\t    Elf_Internal_Rela *rel,\n \t\t\t\t    bfd_vma relocation)\n {\n   bfd_vma shift, x, mask;\n   unsigned long start, oplen, len, wordsz, chunksz, lsb0_p, signed_p, trunc_p;\n   bfd_reloc_status_type r;\n+  bfd_size_type octets;\n \n   /*  Perform this reloc, since it is complex.\n       (this is not to say that it necessarily refers to a complex\n@@ -8778,9 +8779,8 @@ bfd_elf_perform_complex_relocation (bfd *input_bfd,\n   else\n     shift = (8 * wordsz) - (start + len);\n \n-  x = get_value (wordsz, chunksz, input_bfd,\n-\t\t contents\n-\t\t + rel->r_offset * bfd_octets_per_byte (input_bfd, NULL));\n+  octets = rel->r_offset * bfd_octets_per_byte (input_bfd, input_section);\n+  x = get_value (wordsz, chunksz, input_bfd, contents + octets);\n \n #ifdef DEBUG\n   printf (\"Doing complex reloc: \"\n@@ -8812,8 +8812,7 @@ bfd_elf_perform_complex_relocation (bfd *input_bfd,\n \t  (unsigned long) relocation, (unsigned long) (mask << shift),\n \t  (unsigned long) ((relocation & mask) << shift), (unsigned long) x);\n #endif\n-  put_value (wordsz, chunksz, input_bfd, x,\n-\t     contents + rel->r_offset * bfd_octets_per_byte (input_bfd, NULL));\n+  put_value (wordsz, chunksz, input_bfd, x, contents + octets);\n   return r;\n }\n \n@@ -11305,7 +11304,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \t\tfile_ptr offset = (file_ptr) o->output_offset;\n \t\tbfd_size_type todo = o->size;\n \n-\t\toffset *= bfd_octets_per_byte (output_bfd, NULL);\n+\t\toffset *= bfd_octets_per_byte (output_bfd, o);\n \n \t\tif ((o->flags & SEC_ELF_REVERSE_COPY))\n \t\t  {\n@@ -11439,6 +11438,7 @@ elf_reloc_link_order (bfd *output_bfd,\n       bfd_byte *buf;\n       bfd_boolean ok;\n       const char *sym_name;\n+      bfd_size_type octets;\n \n       size = (bfd_size_type) bfd_get_reloc_size (howto);\n       buf = (bfd_byte *) bfd_zmalloc (size);\n@@ -11465,10 +11465,10 @@ elf_reloc_link_order (bfd *output_bfd,\n \t  break;\n \t}\n \n+      octets = link_order->offset * bfd_octets_per_byte (output_bfd,\n+\t\t\t\t\t\t\t output_section);\n       ok = bfd_set_section_contents (output_bfd, output_section, buf,\n-\t\t\t\t     link_order->offset\n-\t\t\t\t     * bfd_octets_per_byte (output_bfd, NULL),\n-\t\t\t\t     size);\n+\t\t\t\t     octets, size);\n       free (buf);\n       if (! ok)\n \treturn FALSE;\n@@ -11635,7 +11635,7 @@ elf_fixup_link_order (bfd *abfd, asection *o)\n       s = sections[n]->u.indirect.section;\n       mask = ~(bfd_vma) 0 << s->alignment_power;\n       offset = (offset + ~mask) & mask;\n-      s->output_offset = offset / bfd_octets_per_byte (abfd, NULL);\n+      s->output_offset = offset / bfd_octets_per_byte (abfd, s);\n       sections[n]->offset = offset;\n       offset += sections[n]->size;\n     }\n@@ -12856,12 +12856,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t    continue;\n \t  if (strcmp (o->name, \".dynstr\") != 0)\n \t    {\n-\t      if (! bfd_set_section_contents (abfd, o->output_section,\n-\t\t\t\t\t      o->contents,\n-\t\t\t\t\t      (file_ptr) o->output_offset\n-\t\t\t\t\t      * bfd_octets_per_byte (abfd,\n-\t\t\t\t\t\t\t\t     NULL),\n-\t\t\t\t\t      o->size))\n+\t      bfd_size_type octets = ((file_ptr) o->output_offset\n+\t\t\t\t      * bfd_octets_per_byte (abfd, o));\n+\t      if (!bfd_set_section_contents (abfd, o->output_section,\n+\t\t\t\t\t     o->contents, octets, o->size))\n \t\tgoto error_return;\n \t    }\n \t  else"
    },
    {
      "sha": "b00b79f3190a02d57047b0f2b8ae948b763c54b7",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -744,14 +744,14 @@ bfd_perform_relocation (bfd *abfd,\n   else\n     output_base = reloc_target_output_section->vma;\n \n-  /* For sections where relocations are in octets, output_base and\n-     output_offset must also be converted to octets.  */\n+  output_base += symbol->section->output_offset;\n+\n+  /* If symbol addresses are in octets, convert to bytes.  */\n   if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n       && (symbol->section->flags & SEC_ELF_OCTETS))\n-    relocation += ((output_base + symbol->section->output_offset)\n-\t\t   * bfd_octets_per_byte (abfd, NULL));\n-  else\n-    relocation += output_base + symbol->section->output_offset;\n+    output_base *= bfd_octets_per_byte (abfd, input_section);\n+\n+  relocation += output_base;\n \n   /* Add in supplied addend.  */\n   relocation += reloc_entry->addend;\n@@ -1080,14 +1080,14 @@ bfd_install_relocation (bfd *abfd,\n   else\n     output_base = reloc_target_output_section->vma;\n \n-  /* For sections where relocations are in octets, output_base and\n-     output_offset must also be converted to octets.  */\n+  output_base += symbol->section->output_offset;\n+\n+  /* If symbol addresses are in octets, convert to bytes.  */\n   if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n       && (symbol->section->flags & SEC_ELF_OCTETS))\n-    relocation += ((output_base + symbol->section->output_offset)\n-\t\t   * bfd_octets_per_byte (abfd, NULL));\n-  else\n-    relocation += output_base + symbol->section->output_offset;\n+    output_base *= bfd_octets_per_byte (abfd, input_section);\n+\n+  relocation += output_base;\n \n   /* Add in supplied addend.  */\n   relocation += reloc_entry->addend;\n@@ -1383,10 +1383,7 @@ _bfd_final_link_relocate (reloc_howto_type *howto,\n     }\n \n   return _bfd_relocate_contents (howto, input_bfd, relocation,\n-\t\t\t\t contents\n-\t\t\t\t + address\n-\t\t\t\t * bfd_octets_per_byte (input_bfd,\n-\t\t\t\t\t\t\tinput_section));\n+\t\t\t\t contents + octets);\n }\n \n /* Relocate a given location using a given value and howto.  */"
    },
    {
      "sha": "f02cae9fc784e223a3bd497deec89ffce4925c6a",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -1078,20 +1078,21 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t      arelent *r;\n \t      unsigned long val;\n \t      asymbol *sym;\n+\t      bfd_size_type octets;\n \n \t      r = *pr;\n \t      /* Ignore R_*_NONE relocs.  */\n \t      if (r->howto->dst_mask == 0)\n \t\tcontinue;\n \n+\t      octets = r->address * bfd_octets_per_byte (abfd, NULL);\n \t      if (r->howto->rightshift != 0\n \t\t  || r->howto->size != 2\n \t\t  || r->howto->bitsize != 32\n \t\t  || r->howto->pc_relative\n \t\t  || r->howto->bitpos != 0\n \t\t  || r->howto->dst_mask != 0xffffffff\n-\t\t  || (r->address * bfd_octets_per_byte (abfd, NULL) + 4\n-\t\t      > stabsize))\n+\t\t  || octets + 4 > stabsize)\n \t\t{\n \t\t  _bfd_error_handler\n \t\t    (_(\"unsupported .stab relocation\"));\n@@ -1101,14 +1102,11 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t\t  return FALSE;\n \t\t}\n \n-\t      val = bfd_get_32 (abfd, info->stabs\n-\t\t\t\t+ (r->address\n-\t\t\t\t   * bfd_octets_per_byte (abfd, NULL)));\n+\t      val = bfd_get_32 (abfd, info->stabs + octets);\n \t      val &= r->howto->src_mask;\n \t      sym = *r->sym_ptr_ptr;\n \t      val += sym->value + sym->section->vma + r->addend;\n-\t      bfd_put_32 (abfd, (bfd_vma) val, info->stabs\n-\t\t\t  + r->address * bfd_octets_per_byte (abfd, NULL));\n+\t      bfd_put_32 (abfd, (bfd_vma) val, info->stabs + octets);\n \t    }\n \t}\n "
    },
    {
      "sha": "029de5f0b951dae63d78a97e520eaae65ad464fb",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldexp.c (fold_name): Pass section to bfd_octets_per_byte.\n+\t* ldlang.c (init_opb): Don't call bfd_arch_mach_octets_per_byte\n+\tunnecessarily.\n+\n 2019-11-25  Christian Eggers  <ceggers@gmx.de>\n \n \t* ldexp.c (fold_name): Provide section parameter to"
    },
    {
      "sha": "b287022f5a1290d28f6046606086a022bb927379",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -852,7 +852,8 @@ fold_name (etree_type *tree)\n \n \t      if (tree->type.node_code == SIZEOF)\n \t\tval = (os->bfd_section->size\n-\t\t       / bfd_octets_per_byte (link_info.output_bfd, NULL));\n+\t\t       / bfd_octets_per_byte (link_info.output_bfd,\n+\t\t\t\t\t      os->bfd_section));\n \t      else\n \t\tval = (bfd_vma)1 << os->bfd_section->alignment_power;\n "
    },
    {
      "sha": "191d8f1c61dfa016970ddeb0dd7b14b25e59701c",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb2942085c83289c56cc3ef8b9ab0ecf6267efa3/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=bb2942085c83289c56cc3ef8b9ab0ecf6267efa3",
      "patch": "@@ -3442,16 +3442,16 @@ ldlang_open_output (lang_statement_union_type *statement)\n static void\n init_opb (asection *s)\n {\n-  unsigned x = bfd_arch_mach_octets_per_byte (ldfile_output_architecture,\n-\t\t\t\t\t      ldfile_output_machine);\n-  if (s != NULL)\n-    {\n-      if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n-\t  && (s->flags & SEC_ELF_OCTETS))\n-\tx = 1;\n-    }\n+  unsigned int x;\n \n   opb_shift = 0;\n+  if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n+      && s != NULL\n+      && (s->flags & SEC_ELF_OCTETS) != 0)\n+    return;\n+\n+  x = bfd_arch_mach_octets_per_byte (ldfile_output_architecture,\n+\t\t\t\t     ldfile_output_machine);\n   if (x > 1)\n     while ((x & 1) == 0)\n       {"
    }
  ]
}