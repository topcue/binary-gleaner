{
  "sha": "05374cfd90b59c62f9230baa19e71a3d9ed27269",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDUzNzRjZmQ5MGI1OWM2MmY5MjMwYmFhMTllNzFhM2Q5ZWQyNzI2OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:38:25Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:52:21Z"
    },
    "message": "Turn target_can_execute_reverse into function\n\nThis changes target_can_execute_reverse from an object-like macro to\nan inline function.\n\ngdb/ChangeLog\n2020-09-28  Tom Tromey  <tom@tromey.com>\n\n\t* mi/mi-main.c (exec_reverse_continue)\n\t(mi_cmd_list_target_features): Update.\n\t* infrun.c (set_exec_direction_func): Update.\n\t* target.c (default_execution_direction): Update.\n\t* reverse.c (exec_reverse_once): Update.\n\t* target.h (target_can_execute_reverse): Now a function.",
    "tree": {
      "sha": "059e038abb0a1568752db28073eb6ed64ce78177",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/059e038abb0a1568752db28073eb6ed64ce78177"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/05374cfd90b59c62f9230baa19e71a3d9ed27269",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05374cfd90b59c62f9230baa19e71a3d9ed27269",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/05374cfd90b59c62f9230baa19e71a3d9ed27269",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05374cfd90b59c62f9230baa19e71a3d9ed27269/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9dccd06e8a4e55adb58d8ebe7f2ed7d9d7dc17de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dccd06e8a4e55adb58d8ebe7f2ed7d9d7dc17de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9dccd06e8a4e55adb58d8ebe7f2ed7d9d7dc17de"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 19,
    "deletions": 7
  },
  "files": [
    {
      "sha": "dcce8212ca09e7ed95658680ed28ef78583a8086",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-28  Tom Tromey  <tom@tromey.com>\n+\n+\t* mi/mi-main.c (exec_reverse_continue)\n+\t(mi_cmd_list_target_features): Update.\n+\t* infrun.c (set_exec_direction_func): Update.\n+\t* target.c (default_execution_direction): Update.\n+\t* reverse.c (exec_reverse_once): Update.\n+\t* target.h (target_can_execute_reverse): Now a function.\n+\n 2020-09-28  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-regs.c (tui_get_register)"
    },
    {
      "sha": "e4bd692760c93b1c636e922bd4825da54305ce05",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -9145,7 +9145,7 @@ static void\n set_exec_direction_func (const char *args, int from_tty,\n \t\t\t struct cmd_list_element *cmd)\n {\n-  if (target_can_execute_reverse)\n+  if (target_can_execute_reverse ())\n     {\n       if (!strcmp (exec_direction, exec_forward))\n \texecution_direction = EXEC_FORWARD;"
    },
    {
      "sha": "c5c7be7246a820d7051b88762e7430825fac79ba",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -321,7 +321,7 @@ exec_reverse_continue (char **argv, int argc)\n   if (dir == EXEC_REVERSE)\n     error (_(\"Already in reverse mode.\"));\n \n-  if (!target_can_execute_reverse)\n+  if (!target_can_execute_reverse ())\n     error (_(\"Target %s does not support this command.\"), target_shortname);\n \n   scoped_restore save_exec_dir = make_scoped_restore (&execution_direction,\n@@ -1684,7 +1684,7 @@ mi_cmd_list_target_features (const char *command, char **argv, int argc)\n       ui_out_emit_list list_emitter (uiout, \"features\");\n       if (mi_async_p ())\n \tuiout->field_string (NULL, \"async\");\n-      if (target_can_execute_reverse)\n+      if (target_can_execute_reverse ())\n \tuiout->field_string (NULL, \"reverse\");\n       return;\n     }"
    },
    {
      "sha": "4aa22251b27e4359f484a0acc520a104cabdf0cd",
      "filename": "gdb/reverse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/reverse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/reverse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/reverse.c?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -44,7 +44,7 @@ exec_reverse_once (const char *cmd, const char *args, int from_tty)\n     error (_(\"Already in reverse mode.  Use '%s' or 'set exec-dir forward'.\"),\n \t   cmd);\n \n-  if (!target_can_execute_reverse)\n+  if (!target_can_execute_reverse ())\n     error (_(\"Target %s does not support this command.\"), target_shortname);\n \n   std::string reverse_command = string_printf (\"%s %s\", cmd, args ? args : \"\");"
    },
    {
      "sha": "4f58daa6d22681fc45c2a7e9e025681604bdf10f",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -525,7 +525,7 @@ default_get_ada_task_ptid (struct target_ops *self, long lwp, long tid)\n static enum exec_direction_kind\n default_execution_direction (struct target_ops *self)\n {\n-  if (!target_can_execute_reverse)\n+  if (!target_can_execute_reverse ())\n     return EXEC_FORWARD;\n   else if (!target_can_async_p ())\n     return EXEC_FORWARD;"
    },
    {
      "sha": "ea777f2fb3679bd7995e55e07f055551a2006f3e",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05374cfd90b59c62f9230baa19e71a3d9ed27269/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "patch": "@@ -2117,8 +2117,11 @@ extern int target_ranged_break_num_registers (void);\n extern int target_masked_watch_num_registers (CORE_ADDR addr, CORE_ADDR mask);\n \n /* Target can execute in reverse?  */\n-#define target_can_execute_reverse \\\n-      current_top_target ()->can_execute_reverse ()\n+static inline bool\n+target_can_execute_reverse ()\n+{\n+  return current_top_target ()->can_execute_reverse ();\n+}\n \n extern const struct target_desc *target_read_description (struct target_ops *);\n "
    }
  ]
}