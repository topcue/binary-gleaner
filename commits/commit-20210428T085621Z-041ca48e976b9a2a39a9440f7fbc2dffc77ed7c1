{
  "sha": "041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQxY2E0OGU5NzZiOWEyYTM5YTk0NDBmN2ZiYzJkZmZjNzdlZDdjMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-22T17:26:15Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-28T08:56:21Z"
    },
    "message": "gdb: extension languages finish_initialization to initialize\n\nNow that both Python and Guile are fully initialized from their\nrespective finish_initialization methods, the \"finish\" in the method\nname doesn't really make sense; initialization starts _and_ finishes\nwith that method.\n\nAs such, this commit renames finish_initialization to just initialize.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* extension-priv.h (struct extension_language_ops): Rename\n\t'finish_initialization' to 'initialize'.\n\t* extension.c (finish_ext_lang_initialization): Renamed to...\n\t(ext_lang_initialization): ...this, update comment, and updated\n\tthe calls to reflect the change in struct extension_language_ops.\n\t* extension.h (finish_ext_lang_initialization): Renamed to...\n\t(ext_lang_initialization): ...this.\n\t* guile/guile.c (gdbscm_finish_initialization): Renamed to...\n\t(gdbscm_initialize): ...this, update comment at definition.\n\t(guile_extension_ops): Update.\n\t* main.c (captured_main_1): Update call to\n\tfinish_ext_lang_initialization.\n\t* python/python.c (gdbpy_finish_initialization): Rename to...\n\t(gdbpy_initialize): ...this, update comment at definition, and\n\tupdate call to do_finish_initialization.\n\t(python_extension_ops): Update.\n\t(do_finish_initialization): Rename to...\n\t(do_initialize): ...this, and update comment.",
    "tree": {
      "sha": "c05d29cf7abac2446363998721455a22ade34ee2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c05d29cf7abac2446363998721455a22ade34ee2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1178f01adf9c3b3a5b0fa564aa4d570e26a26819",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1178f01adf9c3b3a5b0fa564aa4d570e26a26819",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1178f01adf9c3b3a5b0fa564aa4d570e26a26819"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 50,
    "deletions": 33
  },
  "files": [
    {
      "sha": "4a4fa6300dd8f821d9b8a6696e29a9bc3d857391",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -1,3 +1,24 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* extension-priv.h (struct extension_language_ops): Rename\n+\t'finish_initialization' to 'initialize'.\n+\t* extension.c (finish_ext_lang_initialization): Renamed to...\n+\t(ext_lang_initialization): ...this, update comment, and updated\n+\tthe calls to reflect the change in struct extension_language_ops.\n+\t* extension.h (finish_ext_lang_initialization): Renamed to...\n+\t(ext_lang_initialization): ...this.\n+\t* guile/guile.c (gdbscm_finish_initialization): Renamed to...\n+\t(gdbscm_initialize): ...this, update comment at definition.\n+\t(guile_extension_ops): Update.\n+\t* main.c (captured_main_1): Update call to\n+\tfinish_ext_lang_initialization.\n+\t* python/python.c (gdbpy_finish_initialization): Rename to...\n+\t(gdbpy_initialize): ...this, update comment at definition, and\n+\tupdate call to do_finish_initialization.\n+\t(python_extension_ops): Update.\n+\t(do_finish_initialization): Rename to...\n+\t(do_initialize): ...this, and update comment.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* main.c (captured_main_1): Add a call to"
    },
    {
      "sha": "77f23e0f911df4edccf8724bf46a3a0114fbe91a",
      "filename": "gdb/extension-priv.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension-priv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension-priv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension-priv.h?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -109,10 +109,11 @@ struct extension_language_script_ops\n \n struct extension_language_ops\n {\n-  /* Called at the end of gdb initialization to give the extension language\n-     an opportunity to finish up.  This is useful for things like adding\n-     new commands where one has to wait until gdb itself is initialized.  */\n-  void (*finish_initialization) (const struct extension_language_defn *);\n+  /* Called after GDB has processed the early initialization settings\n+     files.  This is when the extension language should be initialized.  By\n+     the time this is called all of the earlier initialization functions\n+     have already been called.  */\n+  void (*initialize) (const struct extension_language_defn *);\n \n   /* Return non-zero if the extension language successfully initialized.\n      This method is required.  */"
    },
    {
      "sha": "27dce9befa0f7de3d6d6f4da827e1a0d875670e7",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -323,19 +323,19 @@ using scoped_default_sigint = scoped_default_signal<SIGINT>;\n    These only iterate over external extension languages, not including\n    GDB's own extension/scripting language, unless otherwise indicated.  */\n \n-/* Wrapper to call the extension_language_ops.finish_initialization \"method\"\n-   for each compiled-in extension language.  */\n+/* Wrapper to call the extension_language_ops.initialize \"method\" for each\n+   compiled-in extension language.  */\n \n void\n-finish_ext_lang_initialization (void)\n+ext_lang_initialization (void)\n {\n   for (const struct extension_language_defn *extlang : extension_languages)\n     {\n       if (extlang->ops != nullptr\n-\t  && extlang->ops->finish_initialization != NULL)\n+\t  && extlang->ops->initialize != NULL)\n \t{\n \t  scoped_default_sigint set_sigint_to_default_handler;\n-\t  extlang->ops->finish_initialization (extlang);\n+\t  extlang->ops->initialize (extlang);\n \t}\n     }\n }"
    },
    {
      "sha": "56f57560de306a2073c7bb024da7508eb891e006",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -276,7 +276,7 @@ extern bool ext_lang_auto_load_enabled (const struct extension_language_defn *);\n /* Wrappers for each extension language API function that iterate over all\n    extension languages.  */\n \n-extern void finish_ext_lang_initialization (void);\n+extern void ext_lang_initialization (void);\n \n extern void eval_ext_lang_from_control_command (struct command_line *cmd);\n "
    },
    {
      "sha": "bdf15cd498b33564e7080246d9c74d984c6562b0",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -75,8 +75,7 @@ const char *gdbscm_print_excp = gdbscm_print_excp_message;\n \f\n #ifdef HAVE_GUILE\n \n-static void gdbscm_finish_initialization\n-  (const struct extension_language_defn *);\n+static void gdbscm_initialize (const struct extension_language_defn *);\n static int gdbscm_initialized (const struct extension_language_defn *);\n static void gdbscm_eval_from_control_command\n   (const struct extension_language_defn *, struct command_line *);\n@@ -113,7 +112,7 @@ static const struct extension_language_script_ops guile_extension_script_ops =\n \n static const struct extension_language_ops guile_extension_ops =\n {\n-  gdbscm_finish_initialization,\n+  gdbscm_initialize,\n   gdbscm_initialized,\n \n   gdbscm_eval_from_control_command,\n@@ -638,12 +637,11 @@ call_initialize_gdb_module (void *data)\n   return NULL;\n }\n \n-/* A callback to finish Guile initialization after gdb has finished all its\n-   initialization.\n-   This is the extension_language_ops.finish_initialization \"method\".  */\n+/* A callback to initialize Guile after gdb has finished all its\n+   initialization.  This is the extension_language_ops.initialize \"method\".  */\n \n static void\n-gdbscm_finish_initialization (const struct extension_language_defn *extlang)\n+gdbscm_initialize (const struct extension_language_defn *extlang)\n {\n #if HAVE_GUILE\n   /* The Python support puts the C side in module \"_gdb\", leaving the"
    },
    {
      "sha": "d92aa02d83185512bd25d1150bae62c0387e4f20",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -1053,8 +1053,8 @@ captured_main_1 (struct captured_main_args *context)\n   execute_cmdargs (&cmdarg_vec, CMDARG_EARLYINIT_FILE,\n \t\t   CMDARG_EARLYINIT_COMMAND, &ret);\n \n-  /* Finish initializing the extension languges.  */\n-  finish_ext_lang_initialization ();\n+  /* Initialize the extension languages.  */\n+  ext_lang_initialization ();\n \n   /* Recheck if we're starting up quietly after processing the startup\n      scripts and commands.  */"
    },
    {
      "sha": "1d0d86d5c49d7395cdbbdf0b331379be54bfa465",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "patch": "@@ -129,8 +129,7 @@ PyObject *gdbpy_gdb_memory_error;\n static script_sourcer_func gdbpy_source_script;\n static objfile_script_sourcer_func gdbpy_source_objfile_script;\n static objfile_script_executor_func gdbpy_execute_objfile_script;\n-static void gdbpy_finish_initialization\n-  (const struct extension_language_defn *);\n+static void gdbpy_initialize (const struct extension_language_defn *);\n static int gdbpy_initialized (const struct extension_language_defn *);\n static void gdbpy_eval_from_control_command\n   (const struct extension_language_defn *, struct command_line *cmd);\n@@ -162,7 +161,7 @@ const struct extension_language_script_ops python_extension_script_ops =\n \n const struct extension_language_ops python_extension_ops =\n {\n-  gdbpy_finish_initialization,\n+  gdbpy_initialize,\n   gdbpy_initialized,\n \n   gdbpy_eval_from_control_command,\n@@ -1885,12 +1884,12 @@ message == an error message without a stack will be printed.\"),\n \n #ifdef HAVE_PYTHON\n \n-/* Helper function for gdbpy_finish_initialization.  This does the\n-   work and then returns false if an error has occurred and must be\n-   displayed, or true on success.  */\n+/* Helper function for gdbpy_initialize.  This does the work and then\n+   returns false if an error has occurred and must be displayed, or true on\n+   success.  */\n \n static bool\n-do_finish_initialization (const struct extension_language_defn *extlang)\n+do_initialize (const struct extension_language_defn *extlang)\n {\n   PyObject *m;\n   PyObject *sys_path;\n@@ -1948,21 +1947,19 @@ do_finish_initialization (const struct extension_language_defn *extlang)\n   return gdb_pymodule_addobject (m, \"gdb\", gdb_python_module) >= 0;\n }\n \n-/* Perform the remaining python initializations.\n-   These must be done after GDB is at least mostly initialized.\n-   E.g., The \"info pretty-printer\" command needs the \"info\" prefix\n-   command installed.\n-   This is the extension_language_ops.finish_initialization \"method\".  */\n+/* Perform Python initialization.  This will be called after GDB has\n+   performed all of its own initialization.  This is the\n+   extension_language_ops.initialize \"method\".  */\n \n static void\n-gdbpy_finish_initialization (const struct extension_language_defn *extlang)\n+gdbpy_initialize (const struct extension_language_defn *extlang)\n {\n   if (!do_start_initialization () && PyErr_Occurred ())\n     gdbpy_print_stack ();\n \n   gdbpy_enter enter_py (get_current_arch (), current_language);\n \n-  if (!do_finish_initialization (extlang))\n+  if (!do_initialize (extlang))\n     {\n       gdbpy_print_stack ();\n       warning (_(\"internal error: Unhandled Python exception\"));"
    }
  ]
}