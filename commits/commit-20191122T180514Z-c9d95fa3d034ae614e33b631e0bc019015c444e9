{
  "sha": "c9d95fa3d034ae614e33b631e0bc019015c444e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzlkOTVmYTNkMDM0YWU2MTRlMzNiNjMxZTBiYzAxOTAxNWM0NDRlOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-22T18:05:14Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-22T18:05:14Z"
    },
    "message": "Replace the MSYMBOL_*_NAME macros with member functions\n\nImproves readability. In the future, it will also allow making the name\nprivate, once the name setter functions become member functions.\n\ngdb/ChangeLog:\n\n2019-11-22  Christian Biesinger  <cbiesinger@google.com>\n\n\t* ada-lang.c (ada_lookup_simple_minsym): Update.\n\t(ada_collect_symbol_completion_matches): Update.\n\t* ada-tasks.c (read_atcb): Update.\n\t* amd64-windows-tdep.c (amd64_skip_main_prologue): Update.\n\t(amd64_windows_skip_trampoline_code): Update.\n\t* arm-tdep.c (skip_prologue_function): Update.\n\t(arm_skip_stack_protector): Update.\n\t* arm-wince-tdep.c (arm_pe_skip_trampoline_code): Update.\n\t(arm_wince_skip_main_prologue): Update.\n\t* ax-gdb.c (gen_expr): Update.\n\t* block.c (call_site_for_pc): Update.\n\t* blockframe.c (find_pc_partial_function): Update.\n\t* breakpoint.c (set_breakpoint_location_function): Update.\n\t* btrace.c (ftrace_print_function_name): Update.\n\t(ftrace_function_switched): Update.\n\t* c-valprint.c (print_unpacked_pointer): Update.\n\t* coffread.c (coff_symfile_read): Update.\n\t* compile/compile-c-symbols.c (convert_symbol_bmsym): Update.\n\t* compile/compile-cplus-symbols.c (convert_symbol_bmsym): Update.\n\t* dwarf-index-write.c (write_psymbols): Update.\n\t* dwarf2loc.c (call_site_to_target_addr): Update.\n\t(func_verify_no_selftailcall): Update.\n\t(tailcall_dump): Update.\n\t(call_site_find_chain_1): Update.\n\t(dwarf_expr_reg_to_entry_parameter): Update.\n\t* elfread.c (elf_gnu_ifunc_record_cache): Update.\n\t* eval.c (evaluate_funcall): Update.\n\t(evaluate_subexp_standard): Update.\n\t(evaluate_subexp_for_sizeof): Update.\n\t* expprint.c (print_subexp_standard): Update.\n\t(dump_subexp_body_standard): Update.\n\t* frame.c (get_prev_frame_always_1): Update.\n\t* frv-tdep.c (frv_skip_main_prologue): Update.\n\t* gnu-v2-abi.c (gnuv2_value_rtti_type): Update.\n\t* gnu-v3-abi.c (gnuv3_rtti_type): Update.\n\t(gnuv3_get_typename_from_type_info): Update.\n\t(gnuv3_skip_trampoline): Update.\n\t* hppa-tdep.c (hppa_lookup_stub_minimal_symbol): Update.\n\t* i386-tdep.c (i386_skip_main_prologue): Update.\n\t(i386_pe_skip_trampoline_code): Update.\n\t* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Update.\n\t* infcall.c (get_function_name): Update.\n\t* linespec.c (minsym_found): Update.\n\t* linux-fork.c (info_checkpoints_command): Update.\n\t* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.\n\t(m32c_m16c_pointer_to_address): Update.\n\t* maint.c (maintenance_translate_address): Update.\n\t* minsyms.c (add_minsym_to_hash_table): Update.\n\t(add_minsym_to_demangled_hash_table): Update.\n\t(lookup_minimal_symbol_mangled): Update.\n\t(lookup_minimal_symbol_demangled): Update.\n\t(lookup_minimal_symbol_linkage): Update.\n\t(lookup_minimal_symbol_text): Update.\n\t(lookup_minimal_symbol_by_pc_name): Update.\n\t(minimal_symbol_is_less_than): Update.\n\t(compact_minimal_symbols): Update.\n\t(build_minimal_symbol_hash_tables): Update.\n\t(find_solib_trampoline_target): Update.\n\t* mips-tdep.c (mips_stub_frame_sniffer): Update.\n\t(mips_skip_pic_trampoline_code): Update.\n\t* msp430-tdep.c (msp430_skip_trampoline_code): Update.\n\t* objc-lang.c (info_selectors_command): Update.\n\t(info_classes_command): Update.\n\t(find_methods): Update.\n\t(find_imps): Update.\n\t* p-valprint.c (pascal_val_print): Update.\n\t* ppc-linux-tdep.c (powerpc_linux_in_dynsym_resolve_code): Update.\n\t* ppc-sysv-tdep.c (convert_code_addr_to_desc_addr): Update.\n\t* printcmd.c (build_address_symbolic): Update.\n\t(info_symbol_command): Update.\n\t* psymtab.c (psymbol_name_matches): Update.\n\t(match_partial_symbol): Update.\n\t(lookup_partial_symbol): Update.\n\t(print_partial_symbols): Update.\n\t(sort_pst_symbols): Update.\n\t(maintenance_check_psymtabs): Update.\n\t* python/py-framefilter.c (py_print_frame): Update.\n\t* python/python.c (gdbpy_rbreak): Update.\n\t* record-btrace.c (btrace_get_bfun_name): Update.\n\t(btrace_call_history): Update.\n\t* rs6000-tdep.c (rs6000_skip_main_prologue): Update.\n\t(rs6000_skip_trampoline_code): Update.\n\t* sol-thread.c (info_cb): Update.\n\t* stabsread.c (scan_file_globals): Update.\n\t* stack.c (find_frame_funname): Update.\n\t(info_frame_command_core): Update.\n\t* symmisc.c (dump_msymbols): Update.\n\t* symtab.c (symbol_natural_name): Rename to..,\n\t(general_symbol_info::natural_name): ...this.\n\t(symbol_demangled_name): Rename to...\n\t(general_symbol_info::demangled_name): ...this.\n\t(symbol_search_name): Rename to...\n\t(general_symbol_info::search_name): ...this.\n\t(symbol_matches_search_name): Update.\n\t(find_pc_sect_line): Update.\n\t(skip_prologue_sal): Update.\n\t(search_symbols): Update.\n\t(print_msymbol_info): Update.\n\t(rbreak_command): Update.\n\t(completion_list_add_msymbol): Update.\n\t(completion_list_objc_symbol): Update.\n\t(get_msymbol_address): Update.\n\t* symtab.h (struct general_symbol_info): Add member functions\n\tnatural_name (), linkage_name (), print_name (), demangled_name (),\n\tand search_name ().\n\t(SYMBOL_NATURAL_NAME): Update.\n\t(symbol_natural_name): Move to a member function on general_symbol_info.\n\t(SYMBOL_DEMANGLED_NAME): Update.\n\t(symbol_demangled_name): Move to a member function on\n\tgeneral_symbol_info.\n\t(SYMBOL_SEARCH_NAME): Update.\n\t(symbol_search_name): Move to a member function on general_symbol_info.\n\t(MSYMBOL_NATURAL_NAME): Remove.\n\t(MSYMBOL_LINKAGE_NAME): Remove.\n\t(MSYMBOL_PRINT_NAME): Remove.\n\t(MSYMBOL_DEMANGLED_NAME): Remove.\n\t(MSYMBOL_SEARCH_NAME): Remove.\n\t* x86-tdep.c (x86_in_indirect_branch_thunk): Update.\n\nChange-Id: I65aa529843a9903e174ce799037e41f954a9fcee",
    "tree": {
      "sha": "3837298ae4aa0eb537234305f019cbf14348307e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3837298ae4aa0eb537234305f019cbf14348307e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9d95fa3d034ae614e33b631e0bc019015c444e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9d95fa3d034ae614e33b631e0bc019015c444e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9d95fa3d034ae614e33b631e0bc019015c444e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9d95fa3d034ae614e33b631e0bc019015c444e9/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6"
    }
  ],
  "stats": {
    "total": 521,
    "additions": 320,
    "deletions": 201
  },
  "files": [
    {
      "sha": "f4878447ac39f6487ecf07d4270739a79047664a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1,3 +1,124 @@\n+2019-11-22  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* ada-lang.c (ada_lookup_simple_minsym): Update.\n+\t(ada_collect_symbol_completion_matches): Update.\n+\t* ada-tasks.c (read_atcb): Update.\n+\t* amd64-windows-tdep.c (amd64_skip_main_prologue): Update.\n+\t(amd64_windows_skip_trampoline_code): Update.\n+\t* arm-tdep.c (skip_prologue_function): Update.\n+\t(arm_skip_stack_protector): Update.\n+\t* arm-wince-tdep.c (arm_pe_skip_trampoline_code): Update.\n+\t(arm_wince_skip_main_prologue): Update.\n+\t* ax-gdb.c (gen_expr): Update.\n+\t* block.c (call_site_for_pc): Update.\n+\t* blockframe.c (find_pc_partial_function): Update.\n+\t* breakpoint.c (set_breakpoint_location_function): Update.\n+\t* btrace.c (ftrace_print_function_name): Update.\n+\t(ftrace_function_switched): Update.\n+\t* c-valprint.c (print_unpacked_pointer): Update.\n+\t* coffread.c (coff_symfile_read): Update.\n+\t* compile/compile-c-symbols.c (convert_symbol_bmsym): Update.\n+\t* compile/compile-cplus-symbols.c (convert_symbol_bmsym): Update.\n+\t* dwarf-index-write.c (write_psymbols): Update.\n+\t* dwarf2loc.c (call_site_to_target_addr): Update.\n+\t(func_verify_no_selftailcall): Update.\n+\t(tailcall_dump): Update.\n+\t(call_site_find_chain_1): Update.\n+\t(dwarf_expr_reg_to_entry_parameter): Update.\n+\t* elfread.c (elf_gnu_ifunc_record_cache): Update.\n+\t* eval.c (evaluate_funcall): Update.\n+\t(evaluate_subexp_standard): Update.\n+\t(evaluate_subexp_for_sizeof): Update.\n+\t* expprint.c (print_subexp_standard): Update.\n+\t(dump_subexp_body_standard): Update.\n+\t* frame.c (get_prev_frame_always_1): Update.\n+\t* frv-tdep.c (frv_skip_main_prologue): Update.\n+\t* gnu-v2-abi.c (gnuv2_value_rtti_type): Update.\n+\t* gnu-v3-abi.c (gnuv3_rtti_type): Update.\n+\t(gnuv3_get_typename_from_type_info): Update.\n+\t(gnuv3_skip_trampoline): Update.\n+\t* hppa-tdep.c (hppa_lookup_stub_minimal_symbol): Update.\n+\t* i386-tdep.c (i386_skip_main_prologue): Update.\n+\t(i386_pe_skip_trampoline_code): Update.\n+\t* ia64-tdep.c (ia64_convert_from_func_ptr_addr): Update.\n+\t* infcall.c (get_function_name): Update.\n+\t* linespec.c (minsym_found): Update.\n+\t* linux-fork.c (info_checkpoints_command): Update.\n+\t* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.\n+\t(m32c_m16c_pointer_to_address): Update.\n+\t* maint.c (maintenance_translate_address): Update.\n+\t* minsyms.c (add_minsym_to_hash_table): Update.\n+\t(add_minsym_to_demangled_hash_table): Update.\n+\t(lookup_minimal_symbol_mangled): Update.\n+\t(lookup_minimal_symbol_demangled): Update.\n+\t(lookup_minimal_symbol_linkage): Update.\n+\t(lookup_minimal_symbol_text): Update.\n+\t(lookup_minimal_symbol_by_pc_name): Update.\n+\t(minimal_symbol_is_less_than): Update.\n+\t(compact_minimal_symbols): Update.\n+\t(build_minimal_symbol_hash_tables): Update.\n+\t(find_solib_trampoline_target): Update.\n+\t* mips-tdep.c (mips_stub_frame_sniffer): Update.\n+\t(mips_skip_pic_trampoline_code): Update.\n+\t* msp430-tdep.c (msp430_skip_trampoline_code): Update.\n+\t* objc-lang.c (info_selectors_command): Update.\n+\t(info_classes_command): Update.\n+\t(find_methods): Update.\n+\t(find_imps): Update.\n+\t* p-valprint.c (pascal_val_print): Update.\n+\t* ppc-linux-tdep.c (powerpc_linux_in_dynsym_resolve_code): Update.\n+\t* ppc-sysv-tdep.c (convert_code_addr_to_desc_addr): Update.\n+\t* printcmd.c (build_address_symbolic): Update.\n+\t(info_symbol_command): Update.\n+\t* psymtab.c (psymbol_name_matches): Update.\n+\t(match_partial_symbol): Update.\n+\t(lookup_partial_symbol): Update.\n+\t(print_partial_symbols): Update.\n+\t(sort_pst_symbols): Update.\n+\t(maintenance_check_psymtabs): Update.\n+\t* python/py-framefilter.c (py_print_frame): Update.\n+\t* python/python.c (gdbpy_rbreak): Update.\n+\t* record-btrace.c (btrace_get_bfun_name): Update.\n+\t(btrace_call_history): Update.\n+\t* rs6000-tdep.c (rs6000_skip_main_prologue): Update.\n+\t(rs6000_skip_trampoline_code): Update.\n+\t* sol-thread.c (info_cb): Update.\n+\t* stabsread.c (scan_file_globals): Update.\n+\t* stack.c (find_frame_funname): Update.\n+\t(info_frame_command_core): Update.\n+\t* symmisc.c (dump_msymbols): Update.\n+\t* symtab.c (symbol_natural_name): Rename to..,\n+\t(general_symbol_info::natural_name): ...this.\n+\t(symbol_demangled_name): Rename to...\n+\t(general_symbol_info::demangled_name): ...this.\n+\t(symbol_search_name): Rename to...\n+\t(general_symbol_info::search_name): ...this.\n+\t(symbol_matches_search_name): Update.\n+\t(find_pc_sect_line): Update.\n+\t(skip_prologue_sal): Update.\n+\t(search_symbols): Update.\n+\t(print_msymbol_info): Update.\n+\t(rbreak_command): Update.\n+\t(completion_list_add_msymbol): Update.\n+\t(completion_list_objc_symbol): Update.\n+\t(get_msymbol_address): Update.\n+\t* symtab.h (struct general_symbol_info): Add member functions\n+\tnatural_name (), linkage_name (), print_name (), demangled_name (),\n+\tand search_name ().\n+\t(SYMBOL_NATURAL_NAME): Update.\n+\t(symbol_natural_name): Move to a member function on general_symbol_info.\n+\t(SYMBOL_DEMANGLED_NAME): Update.\n+\t(symbol_demangled_name): Move to a member function on\n+\tgeneral_symbol_info.\n+\t(SYMBOL_SEARCH_NAME): Update.\n+\t(symbol_search_name): Move to a member function on general_symbol_info.\n+\t(MSYMBOL_NATURAL_NAME): Remove.\n+\t(MSYMBOL_LINKAGE_NAME): Remove.\n+\t(MSYMBOL_PRINT_NAME): Remove.\n+\t(MSYMBOL_DEMANGLED_NAME): Remove.\n+\t(MSYMBOL_SEARCH_NAME): Remove.\n+\t* x86-tdep.c (x86_in_indirect_branch_thunk): Update.\n+\n 2019-11-22  Christian Biesinger  <cbiesinger@google.com>\n \n \t* symtab.c (create_demangled_names_hash): Use per_bfd->"
    },
    {
      "sha": "723ac36659cf9f75691f4d95481634a9ae6c3124",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -4946,7 +4946,7 @@ ada_lookup_simple_minsym (const char *name)\n     {\n       for (minimal_symbol *msymbol : objfile->msymbols ())\n \t{\n-\t  if (match_name (MSYMBOL_LINKAGE_NAME (msymbol), lookup_name, NULL)\n+\t  if (match_name (msymbol->linkage_name (), lookup_name, NULL)\n \t      && MSYMBOL_TYPE (msymbol) != mst_solib_trampoline)\n \t    {\n \t      result.minsym = msymbol;\n@@ -6449,7 +6449,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \n \t  completion_list_add_name (tracker,\n \t\t\t\t    symbol_language,\n-\t\t\t\t    MSYMBOL_LINKAGE_NAME (msymbol),\n+\t\t\t\t    msymbol->linkage_name (),\n \t\t\t\t    lookup_name, text, word);\n \t}\n     }"
    },
    {
      "sha": "110a710a5ffd023a15071fce596143b138204a3f",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -669,7 +669,7 @@ read_atcb (CORE_ADDR task_id, struct ada_task_info *task_info)\n \t  msym = lookup_minimal_symbol_by_pc (task_id);\n \t  if (msym.minsym)\n \t    {\n-\t      const char *full_name = MSYMBOL_LINKAGE_NAME (msym.minsym);\n+\t      const char *full_name = msym.minsym->linkage_name ();\n \t      const char *task_name = full_name;\n \t      const char *p;\n "
    },
    {
      "sha": "71a5e5701871693831674993219d0257366485c9",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -358,8 +358,8 @@ amd64_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t  call_dest = pc + 5 + extract_signed_integer (buf, 4, byte_order);\n  \t  s = lookup_minimal_symbol_by_pc (call_dest);\n  \t  if (s.minsym != NULL\n- \t      && MSYMBOL_LINKAGE_NAME (s.minsym) != NULL\n- \t      && strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"__main\") == 0)\n+ \t      && s.minsym->linkage_name () != NULL\n+ \t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n  \t    pc += 5;\n  \t}\n     }\n@@ -1187,7 +1187,7 @@ amd64_windows_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n \t= (indirect_addr\n \t   ? lookup_minimal_symbol_by_pc (indirect_addr).minsym\n \t   : NULL);\n-      const char *symname = indsym ? MSYMBOL_LINKAGE_NAME (indsym) : NULL;\n+      const char *symname = indsym ? indsym->linkage_name () : NULL;\n \n       if (symname)\n \t{"
    },
    {
      "sha": "69c87c5a43252ba91e5c2b7b0f946fc08ddf6655",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -550,9 +550,9 @@ skip_prologue_function (struct gdbarch *gdbarch, CORE_ADDR pc, int is_thumb)\n   msym = lookup_minimal_symbol_by_pc (pc);\n   if (msym.minsym != NULL\n       && BMSYMBOL_VALUE_ADDRESS (msym) == pc\n-      && MSYMBOL_LINKAGE_NAME (msym.minsym) != NULL)\n+      && msym.minsym->linkage_name () != NULL)\n     {\n-      const char *name = MSYMBOL_LINKAGE_NAME (msym.minsym);\n+      const char *name = msym.minsym->linkage_name ();\n \n       /* The GNU linker's Thumb call stub to foo is named\n \t __foo_from_thumb.  */\n@@ -1254,7 +1254,7 @@ arm_skip_stack_protector(CORE_ADDR pc, struct gdbarch *gdbarch)\n   /* ADDR must correspond to a symbol whose name is __stack_chk_guard.\n      Otherwise, this sequence cannot be for stack protector.  */\n   if (stack_chk_guard.minsym == NULL\n-      || !startswith (MSYMBOL_LINKAGE_NAME (stack_chk_guard.minsym), \"__stack_chk_guard\"))\n+      || !startswith (stack_chk_guard.minsym->linkage_name (), \"__stack_chk_guard\"))\n    return pc;\n \n   if (is_thumb)"
    },
    {
      "sha": "916c56dab20463698d7abe55b6335be84b90f09b",
      "filename": "gdb/arm-wince-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/arm-wince-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/arm-wince-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-wince-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -66,7 +66,7 @@ arm_pe_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n   if (indsym.minsym == NULL)\n     return 0;\n \n-  symname = MSYMBOL_LINKAGE_NAME (indsym.minsym);\n+  symname = indsym.minsym->linkage_name ();\n   if (symname == NULL || !startswith (symname, \"__imp_\"))\n     return 0;\n \n@@ -104,8 +104,8 @@ arm_wince_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n       struct bound_minimal_symbol s = lookup_minimal_symbol_by_pc (call_dest);\n \n       if (s.minsym != NULL\n-\t  && MSYMBOL_LINKAGE_NAME (s.minsym) != NULL\n-\t  && strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"__gccmain\") == 0)\n+\t  && s.minsym->linkage_name () != NULL\n+\t  && strcmp (s.minsym->linkage_name (), \"__gccmain\") == 0)\n \tpc += 4;\n     }\n "
    },
    {
      "sha": "23a4120e16583b6004649e13518eeefd18832e06",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -2020,7 +2020,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n       gen_msym_var_ref (ax, value, (*pc)[2].msymbol, (*pc)[1].objfile);\n \n       if (TYPE_CODE (value->type) == TYPE_CODE_ERROR)\n-\terror_unknown_type (MSYMBOL_PRINT_NAME ((*pc)[2].msymbol));\n+\terror_unknown_type ((*pc)[2].msymbol->linkage_name ());\n \n       (*pc) += 4;\n       break;"
    },
    {
      "sha": "a4592e36e658c65f565efed4850cb1c6c9ba550d",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -242,7 +242,7 @@ call_site_for_pc (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t\t     \"DW_TAG_call_site %s in %s\"),\n \t\t   paddress (gdbarch, pc),\n \t\t   (msym.minsym == NULL ? \"???\"\n-\t\t    : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t    : msym.minsym->print_name ()));\n     }\n \n   return (struct call_site *) *slot;"
    },
    {
      "sha": "fd835174df25f078bc6d46248b1d1caf9d7b2c99",
      "filename": "gdb/blockframe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/blockframe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/blockframe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/blockframe.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -337,7 +337,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n     }\n \n   cache_pc_function_low = BMSYMBOL_VALUE_ADDRESS (msymbol);\n-  cache_pc_function_name = MSYMBOL_LINKAGE_NAME (msymbol.minsym);\n+  cache_pc_function_name = msymbol.minsym->linkage_name ();\n   cache_pc_function_section = section;\n   cache_pc_function_high = minimal_symbol_upper_bound (msymbol);\n   cache_pc_function_block = nullptr;"
    },
    {
      "sha": "e90a1c0fbe8c5e65c84e5c67d3881ad6aa459d2d",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -7085,7 +7085,7 @@ set_breakpoint_location_function (struct bp_location *loc)\n \t{\n \t  struct breakpoint *b = loc->owner;\n \n-\t  function_name = MSYMBOL_LINKAGE_NAME (loc->msymbol);\n+\t  function_name = loc->msymbol->linkage_name ();\n \n \t  if (b->type == bp_breakpoint && b->loc == loc\n \t      && loc->next == NULL && b->related_breakpoint == b)"
    },
    {
      "sha": "9422c2b71584b7bd5b1412c04c7573856663b112",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -85,7 +85,7 @@ ftrace_print_function_name (const struct btrace_function *bfun)\n     return SYMBOL_PRINT_NAME (sym);\n \n   if (msym != NULL)\n-    return MSYMBOL_PRINT_NAME (msym);\n+    return msym->print_name ();\n \n   return \"<unknown>\";\n }\n@@ -197,7 +197,7 @@ ftrace_function_switched (const struct btrace_function *bfun,\n \n   /* If the minimal symbol changed, we certainly switched functions.  */\n   if (mfun != NULL && msym != NULL\n-      && strcmp (MSYMBOL_LINKAGE_NAME (mfun), MSYMBOL_LINKAGE_NAME (msym)) != 0)\n+      && strcmp (mfun->linkage_name (), msym->linkage_name ()) != 0)\n     return 1;\n \n   /* If the symbol changed, we certainly switched functions.  */"
    },
    {
      "sha": "607fb80c58f36214026c165eff11c03497cd914d",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -187,7 +187,7 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \t  if (want_space)\n \t    fputs_filtered (\" \", stream);\n \t  fputs_filtered (\" <\", stream);\n-\t  fputs_filtered (MSYMBOL_PRINT_NAME (msymbol.minsym), stream);\n+\t  fputs_filtered (msymbol.minsym->print_name (), stream);\n \t  fputs_filtered (\">\", stream);\n \t  want_space = 1;\n \t}\n@@ -203,8 +203,7 @@ print_unpacked_pointer (struct type *type, struct type *elttype,\n \n \t  if (msymbol.minsym != NULL)\n \t    {\n-\t      const char *search_name\n-\t\t= MSYMBOL_SEARCH_NAME (msymbol.minsym);\n+\t      const char *search_name = msymbol.minsym->search_name ();\n \t      wsym = lookup_symbol_search_name (search_name, NULL,\n \t\t\t\t\t\tVAR_DOMAIN).symbol;\n \t    }"
    },
    {
      "sha": "8564be1faa28aa39f812b394f76a567d57cd0530",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -640,7 +640,7 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n     {\n       for (minimal_symbol *msym : objfile->msymbols ())\n \t{\n-\t  const char *name = MSYMBOL_LINKAGE_NAME (msym);\n+\t  const char *name = msym->linkage_name ();\n \n \t  /* If the minimal symbols whose name are prefixed by \"__imp_\"\n \t     or \"_imp_\", get rid of the prefix, and search the minimal"
    },
    {
      "sha": "abd0aeabab7971c066615d799839987ffcc2e88e",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -308,7 +308,7 @@ convert_symbol_bmsym (compile_c_instance *context,\n     }\n \n   sym_type = context->convert_type (type);\n-  decl = context->plugin ().build_decl (MSYMBOL_NATURAL_NAME (msym),\n+  decl = context->plugin ().build_decl (msym->natural_name (),\n \t\t\t\t\tkind, sym_type, NULL, addr,\n \t\t\t\t\tNULL, 0);\n   context->plugin ().bind (decl, 1 /* is_global */);"
    },
    {
      "sha": "1acd07d316a552257da15a5923414775d25a668c",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -323,7 +323,7 @@ convert_symbol_bmsym (compile_cplus_instance *instance,\n   sym_type = instance->convert_type (type);\n   instance->plugin ().push_namespace (\"\");\n   instance->plugin ().build_decl\n-    (\"minsym\", MSYMBOL_NATURAL_NAME (msym), kind, sym_type, nullptr, addr,\n+    (\"minsym\", msym->natural_name (), kind, sym_type, nullptr, addr,\n      nullptr, 0);\n   instance->plugin ().pop_binding_level (\"\");\n }"
    },
    {
      "sha": "7e89de433090318db84c68fdf4c7af5bddff51bb",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -550,7 +550,7 @@ write_psymbols (struct mapped_symtab *symtab,\n \t{\n \t  gdb_index_symbol_kind kind = symbol_kind (psym);\n \n-\t  add_index_entry (symtab, symbol_search_name (&psym->ginfo),\n+\t  add_index_entry (symtab, psym->ginfo.search_name (),\n \t\t\t   is_static, kind, cu_index);\n \t}\n     }\n@@ -686,7 +686,7 @@ class debug_names\n     const int dwarf_tag = psymbol_tag (psym);\n     if (dwarf_tag == 0)\n       return;\n-    const char *name = symbol_search_name (&psym->ginfo);\n+    const char *name = psym->ginfo.search_name ();\n \n     if (psym->ginfo.language == language_ada)\n       {"
    },
    {
      "sha": "1ac56b273ad82fb1dabeceb93fdd8ed652648cd4",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -800,7 +800,7 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \t\t\t _(\"DW_AT_call_target is not specified at %s in %s\"),\n \t\t\t paddress (call_site_gdbarch, call_site->pc),\n \t\t\t (msym.minsym == NULL ? \"???\"\n-\t\t\t  : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n \t  }\n \tif (caller_frame == NULL)\n@@ -814,7 +814,7 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \t\t\t   \"available at %s in %s\"),\n \t\t\t paddress (call_site_gdbarch, call_site->pc),\n \t\t\t (msym.minsym == NULL ? \"???\"\n-\t\t\t  : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n \t  }\n \tcaller_arch = get_frame_arch (caller_frame);\n@@ -846,7 +846,7 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \t\t\t   \"at %s in %s\"),\n \t\t\t physname, paddress (call_site_gdbarch, call_site->pc),\n \t\t\t (msym.minsym == NULL ? \"???\"\n-\t\t\t  : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t\t  : msym.minsym->print_name ()));\n \t\t\t\n \t  }\n \treturn BMSYMBOL_VALUE_ADDRESS (msym);\n@@ -934,7 +934,7 @@ func_verify_no_selftailcall (struct gdbarch *gdbarch, CORE_ADDR verify_addr)\n \t\t\t     \"function \\\"%s\\\" at %s can call itself via tail \"\n \t\t\t     \"calls\"),\n \t\t\t   (msym.minsym == NULL ? \"???\"\n-\t\t\t    : MSYMBOL_PRINT_NAME (msym.minsym)),\n+\t\t\t    : msym.minsym->print_name ()),\n \t\t\t   paddress (gdbarch, verify_addr));\n \t    }\n \n@@ -955,7 +955,7 @@ tailcall_dump (struct gdbarch *gdbarch, const struct call_site *call_site)\n \n   fprintf_unfiltered (gdb_stdlog, \" %s(%s)\", paddress (gdbarch, addr),\n \t\t      (msym.minsym == NULL ? \"???\"\n-\t\t       : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t       : msym.minsym->print_name ()));\n \n }\n \n@@ -1173,10 +1173,10 @@ call_site_find_chain_1 (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \t\t     \"callers or callees between caller function \\\"%s\\\" at %s \"\n \t\t     \"and callee function \\\"%s\\\" at %s\"),\n \t\t   (msym_caller.minsym == NULL\n-\t\t    ? \"???\" : MSYMBOL_PRINT_NAME (msym_caller.minsym)),\n+\t\t    ? \"???\" : msym_caller.minsym->print_name ()),\n \t\t   paddress (gdbarch, caller_pc),\n \t\t   (msym_callee.minsym == NULL\n-\t\t    ? \"???\" : MSYMBOL_PRINT_NAME (msym_callee.minsym)),\n+\t\t    ? \"???\" : msym_callee.minsym->print_name ()),\n \t\t   paddress (gdbarch, callee_pc));\n     }\n \n@@ -1276,7 +1276,7 @@ dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n \t\t   gdbarch_bfd_arch_info (gdbarch)->printable_name,\n \t\t   paddress (gdbarch, func_addr),\n \t\t   (msym.minsym == NULL ? \"???\"\n-\t\t    : MSYMBOL_PRINT_NAME (msym.minsym)),\n+\t\t    : msym.minsym->print_name ()),\n \t\t   gdbarch_bfd_arch_info (caller_gdbarch)->printable_name);\n     }\n \n@@ -1289,7 +1289,7 @@ dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n \t\t\t\t\t   \"requires caller of %s (%s)\"),\n \t\t   paddress (gdbarch, func_addr),\n \t\t   (msym.minsym == NULL ? \"???\"\n-\t\t    : MSYMBOL_PRINT_NAME (msym.minsym)));\n+\t\t    : msym.minsym->print_name ()));\n     }\n   caller_pc = get_frame_pc (caller_frame);\n   call_site = call_site_for_pc (gdbarch, caller_pc);\n@@ -1305,9 +1305,9 @@ dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n \t\t   _(\"DW_OP_entry_value resolving expects callee %s at %s \"\n \t\t     \"but the called frame is for %s at %s\"),\n \t\t   (target_msym == NULL ? \"???\"\n-\t\t\t\t\t: MSYMBOL_PRINT_NAME (target_msym)),\n+\t\t\t\t\t: target_msym->print_name ()),\n \t\t   paddress (gdbarch, target_addr),\n-\t\t   func_msym == NULL ? \"???\" : MSYMBOL_PRINT_NAME (func_msym),\n+\t\t   func_msym == NULL ? \"???\" : func_msym->print_name (),\n \t\t   paddress (gdbarch, func_addr));\n     }\n \n@@ -1331,7 +1331,7 @@ dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n       throw_error (NO_ENTRY_VALUE_ERROR, _(\"Cannot find matching parameter \"\n \t\t\t\t\t   \"at DW_TAG_call_site %s at %s\"),\n \t\t   paddress (gdbarch, caller_pc),\n-\t\t   msym == NULL ? \"???\" : MSYMBOL_PRINT_NAME (msym)); \n+\t\t   msym == NULL ? \"???\" : msym->print_name ()); \n     }\n \n   *per_cu_return = call_site->per_cu;"
    },
    {
      "sha": "44b793d8f14b4d42901acb764c8b8e0f16d526e8",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -714,7 +714,7 @@ elf_gnu_ifunc_record_cache (const char *name, CORE_ADDR addr)\n \n   /* If .plt jumps back to .plt the symbol is still deferred for later\n      resolution and it has no use for GDB.  */\n-  const char *target_name = MSYMBOL_LINKAGE_NAME (msym.minsym);\n+  const char *target_name = msym.minsym->linkage_name ();\n   size_t len = strlen (target_name);\n \n   /* Note we check the symbol's name instead of checking whether the"
    },
    {
      "sha": "6dca8be93cc9a05a6c0840298a5f7bdaa5047e2d",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1044,7 +1044,7 @@ evaluate_funcall (type *expect_type, expression *exp, int *pos,\n \t  if (op == OP_VAR_MSYM_VALUE)\n \t    {\n \t      minimal_symbol *msym = exp->elts[*pos + 2].msymbol;\n-\t      var_func_name = MSYMBOL_PRINT_NAME (msym);\n+\t      var_func_name = msym->print_name ();\n \t    }\n \t  else if (op == OP_VAR_VALUE)\n \t    {\n@@ -1323,7 +1323,7 @@ evaluate_subexp_standard (struct type *expect_type,\n \ttype = value_type (val);\n \tif (TYPE_CODE (type) == TYPE_CODE_ERROR\n \t    && (noside != EVAL_AVOID_SIDE_EFFECTS || pc != 0))\n-\t  error_unknown_type (MSYMBOL_PRINT_NAME (msymbol));\n+\t  error_unknown_type (msymbol->print_name ());\n \treturn val;\n       }\n \n@@ -3218,7 +3218,7 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n \n \ttype = value_type (mval);\n \tif (TYPE_CODE (type) == TYPE_CODE_ERROR)\n-\t  error_unknown_type (MSYMBOL_PRINT_NAME (msymbol));\n+\t  error_unknown_type (msymbol->print_name ());\n \n \treturn value_from_longest (size_type, TYPE_LENGTH (type));\n       }"
    },
    {
      "sha": "70b9eb5bf66ab0ecd238d7fe70c8b7bdc33edb7f",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -138,7 +138,7 @@ print_subexp_standard (struct expression *exp, int *pos,\n     case OP_VAR_MSYM_VALUE:\n       {\n \t(*pos) += 3;\n-\tfputs_filtered (MSYMBOL_PRINT_NAME (exp->elts[pc + 2].msymbol), stream);\n+\tfputs_filtered (exp->elts[pc + 2].msymbol->print_name (), stream);\n       }\n       return;\n \n@@ -908,7 +908,7 @@ dump_subexp_body_standard (struct expression *exp,\n       fprintf_filtered (stream, \", msymbol @\");\n       gdb_print_host_address (exp->elts[elt + 1].msymbol, stream);\n       fprintf_filtered (stream, \" (%s)\",\n-\t\t\tMSYMBOL_PRINT_NAME (exp->elts[elt + 1].msymbol));\n+\t\t\texp->elts[elt + 1].msymbol->print_name ());\n       elt += 3;\n       break;\n     case OP_VAR_ENTRY_VALUE:"
    },
    {
      "sha": "660f8cfa00e392c999576cc406fe7ee790765719",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -2043,7 +2043,7 @@ get_prev_frame_always_1 (struct frame_info *this_frame)\n       this_pc_in_block = get_frame_address_in_block (this_frame);\n       morestack_msym = lookup_minimal_symbol_by_pc (this_pc_in_block).minsym;\n       if (morestack_msym)\n-\tmorestack_name = MSYMBOL_LINKAGE_NAME (morestack_msym);\n+\tmorestack_name = morestack_msym->linkage_name ();\n       if (!morestack_name || strcmp (morestack_name, \"__morestack\") != 0)\n \t{\n \t  if (frame_debug)"
    },
    {
      "sha": "a80c0437cb64a42107a93621f082a84dd832e01c",
      "filename": "gdb/frv-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/frv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/frv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1074,8 +1074,8 @@ frv_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n       s = lookup_minimal_symbol_by_pc (call_dest);\n \n       if (s.minsym != NULL\n-          && MSYMBOL_LINKAGE_NAME (s.minsym) != NULL\n-\t  && strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"__main\") == 0)\n+          && s.minsym->linkage_name () != NULL\n+\t  && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n \t{\n \t  pc += 4;\n \t  return pc;"
    },
    {
      "sha": "000f82579bd0aa23f64b900ca5e44bcbc5b655e0",
      "filename": "gdb/gnu-v2-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/gnu-v2-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/gnu-v2-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v2-abi.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -243,7 +243,7 @@ gnuv2_value_rtti_type (struct value *v, int *full, LONGEST *top, int *using_enc)\n   /* Try to find a symbol that is the vtable.  */\n   minsym=lookup_minimal_symbol_by_pc(vtbl);\n   if (minsym.minsym==NULL\n-      || (linkage_name=MSYMBOL_LINKAGE_NAME (minsym.minsym))==NULL\n+      || (linkage_name=minsym.minsym->linkage_name ())==NULL\n       || !is_vtable_name (linkage_name))\n     return NULL;\n "
    },
    {
      "sha": "d630ec07b11175e8a4610bf79e88a5d5c569ad5b",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -328,7 +328,7 @@ gnuv3_rtti_type (struct value *value,\n      If we didn't like this approach, we could instead look in the\n      type_info object itself to get the class name.  But this way\n      should work just as well, and doesn't read target memory.  */\n-  vtable_symbol_name = MSYMBOL_DEMANGLED_NAME (vtable_symbol);\n+  vtable_symbol_name = vtable_symbol->demangled_name ();\n   if (vtable_symbol_name == NULL\n       || !startswith (vtable_symbol_name, \"vtable for \"))\n     {\n@@ -1148,11 +1148,11 @@ gnuv3_get_typename_from_type_info (struct value *type_info_ptr)\n \n #define TYPEINFO_PREFIX \"typeinfo for \"\n #define TYPEINFO_PREFIX_LEN (sizeof (TYPEINFO_PREFIX) - 1)\n-  symname = MSYMBOL_DEMANGLED_NAME (typeinfo_sym.minsym);\n+  symname = typeinfo_sym.minsym->demangled_name ();\n   if (symname == NULL || strncmp (symname, TYPEINFO_PREFIX,\n \t\t\t\t  TYPEINFO_PREFIX_LEN))\n     error (_(\"typeinfo symbol '%s' has unexpected name\"),\n-\t   MSYMBOL_LINKAGE_NAME (typeinfo_sym.minsym));\n+\t   typeinfo_sym.minsym->linkage_name ());\n   class_name = symname + TYPEINFO_PREFIX_LEN;\n \n   /* Strip off @plt and version suffixes.  */\n@@ -1202,7 +1202,7 @@ gnuv3_skip_trampoline (struct frame_info *frame, CORE_ADDR stop_pc)\n   /* The symbol's demangled name should be something like \"virtual\n      thunk to FUNCTION\", where FUNCTION is the name of the function\n      being thunked to.  */\n-  thunk_name = MSYMBOL_DEMANGLED_NAME (thunk_sym.minsym);\n+  thunk_name = thunk_sym.minsym->demangled_name ();\n   if (thunk_name == NULL || strstr (thunk_name, \" thunk to \") == NULL)\n     return 0;\n "
    },
    {
      "sha": "8e4168dbdd958c67e2d9f729dee34b5b3a8ba22b",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -2537,7 +2537,7 @@ hppa_lookup_stub_minimal_symbol (const char *name,\n     {\n       for (minimal_symbol *msym : objfile->msymbols ())\n \t{\n-\t  if (strcmp (MSYMBOL_LINKAGE_NAME (msym), name) == 0)\n+\t  if (strcmp (msym->linkage_name (), name) == 0)\n \t    {\n \t      struct unwind_table_entry *u;\n "
    },
    {
      "sha": "5445dd11b96f1391c4b14789a7d4e86f65e2df53",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1948,8 +1948,8 @@ i386_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t  call_dest = call_dest & 0xffffffffU;\n  \t  s = lookup_minimal_symbol_by_pc (call_dest);\n  \t  if (s.minsym != NULL\n- \t      && MSYMBOL_LINKAGE_NAME (s.minsym) != NULL\n- \t      && strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"__main\") == 0)\n+ \t      && s.minsym->linkage_name () != NULL\n+ \t      && strcmp (s.minsym->linkage_name (), \"__main\") == 0)\n  \t    pc += 5;\n  \t}\n     }\n@@ -3933,7 +3933,7 @@ i386_pe_skip_trampoline_code (struct frame_info *frame,\n \tread_memory_unsigned_integer (pc + 2, 4, byte_order);\n       struct minimal_symbol *indsym =\n \tindirect ? lookup_minimal_symbol_by_pc (indirect).minsym : 0;\n-      const char *symname = indsym ? MSYMBOL_LINKAGE_NAME (indsym) : 0;\n+      const char *symname = indsym ? indsym->linkage_name () : 0;\n \n       if (symname)\n \t{"
    },
    {
      "sha": "f8b75bf6c8ebe6fa061a4d35b33a654ebbc63821",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -3615,7 +3615,7 @@ ia64_convert_from_func_ptr_addr (struct gdbarch *gdbarch, CORE_ADDR addr,\n       minsym = lookup_minimal_symbol_by_pc (addr);\n \n       if (minsym.minsym\n-\t  && is_vtable_name (MSYMBOL_LINKAGE_NAME (minsym.minsym)))\n+\t  && is_vtable_name (minsym.minsym->linkage_name ()))\n \treturn read_memory_unsigned_integer (addr, 8, byte_order);\n     }\n "
    },
    {
      "sha": "7ea2e2ee5423f921e2969e7c95fba7a634326fa1",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -395,7 +395,7 @@ get_function_name (CORE_ADDR funaddr, char *buf, int buf_size)\n     struct bound_minimal_symbol msymbol = lookup_minimal_symbol_by_pc (funaddr);\n \n     if (msymbol.minsym)\n-      return MSYMBOL_PRINT_NAME (msymbol.minsym);\n+      return msymbol.minsym->print_name ();\n   }\n \n   {"
    },
    {
      "sha": "817d1a42ef831e36abb9190b20fdec3a8f730ed9",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -4221,7 +4221,7 @@ minsym_found (struct linespec_state *self, struct objfile *objfile,\n \n   if (is_function)\n     {\n-      const char *msym_name = MSYMBOL_LINKAGE_NAME (msymbol);\n+      const char *msym_name = msymbol->linkage_name ();\n \n       if (MSYMBOL_TYPE (msymbol) == mst_text_gnu_ifunc\n \t  || MSYMBOL_TYPE (msymbol) == mst_data_gnu_ifunc)\n@@ -4250,7 +4250,7 @@ minsym_found (struct linespec_state *self, struct objfile *objfile,\n   sal.section = MSYMBOL_OBJ_SECTION (objfile, msymbol);\n \n   if (maybe_add_address (self->addr_set, objfile->pspace, sal.pc))\n-    add_sal_to_sals (self, result, &sal, MSYMBOL_NATURAL_NAME (msymbol), 0);\n+    add_sal_to_sals (self, result, &sal, msymbol->natural_name (), 0);\n }\n \n /* A helper function to classify a minimal_symbol_type according to"
    },
    {
      "sha": "8373093b13ba283acd5a879fb64491b0d12d2efb",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -597,7 +597,7 @@ info_checkpoints_command (const char *arg, int from_tty)\n \n \t  msym = lookup_minimal_symbol_by_pc (pc);\n \t  if (msym.minsym)\n-\t    printf_filtered (\", <%s>\", MSYMBOL_LINKAGE_NAME (msym.minsym));\n+\t    printf_filtered (\", <%s>\", msym.minsym->linkage_name ());\n \t}\n \n       putchar_filtered ('\\n');"
    },
    {
      "sha": "4e4e7c35be335bce1e5c7daba9e53810bc098aaf",
      "filename": "gdb/m32c-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/m32c-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/m32c-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32c-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -2418,7 +2418,7 @@ m32c_m16c_address_to_pointer (struct gdbarch *gdbarch,\n                \"couldn't find a symbol at that address, to find trampoline.\"),\n                paddress (gdbarch, addr));\n \n-      func_name = MSYMBOL_LINKAGE_NAME (func_msym.minsym);\n+      func_name = func_msym.minsym->linkage_name ();\n       tramp_name = (char *) xmalloc (strlen (func_name) + 5);\n       strcpy (tramp_name, func_name);\n       strcat (tramp_name, \".plt\");\n@@ -2492,7 +2492,7 @@ m32c_m16c_pointer_to_address (struct gdbarch *gdbarch,\n \n       if (ptr_msym.minsym)\n         {\n-          const char *ptr_msym_name = MSYMBOL_LINKAGE_NAME (ptr_msym.minsym);\n+          const char *ptr_msym_name = ptr_msym.minsym->linkage_name ();\n           int len = strlen (ptr_msym_name);\n \n           if (len > 4"
    },
    {
      "sha": "ce59ef6cca4926168a2f16ae18bb26bf1766e358",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -569,7 +569,7 @@ maintenance_translate_address (const char *arg, int from_tty)\n \n   if (sym.minsym)\n     {\n-      const char *symbol_name = MSYMBOL_PRINT_NAME (sym.minsym);\n+      const char *symbol_name = sym.minsym->print_name ();\n       const char *symbol_offset\n \t= pulongest (address - BMSYMBOL_VALUE_ADDRESS (sym));\n "
    },
    {
      "sha": "a9ba66bef0ae48e9beba5b8609e8ed3ad267ca10",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -141,7 +141,7 @@ add_minsym_to_hash_table (struct minimal_symbol *sym,\n   if (sym->hash_next == NULL)\n     {\n       unsigned int hash\n-\t= msymbol_hash (MSYMBOL_LINKAGE_NAME (sym)) % MINIMAL_SYMBOL_HASH_SIZE;\n+\t= msymbol_hash (sym->linkage_name ()) % MINIMAL_SYMBOL_HASH_SIZE;\n \n       sym->hash_next = table[hash];\n       table[hash] = sym;\n@@ -157,7 +157,7 @@ add_minsym_to_demangled_hash_table (struct minimal_symbol *sym,\n   if (sym->demangled_hash_next == NULL)\n     {\n       unsigned int hash = search_name_hash (MSYMBOL_LANGUAGE (sym),\n-\t\t\t\t\t    MSYMBOL_SEARCH_NAME (sym));\n+\t\t\t\t\t    sym->search_name ());\n \n       objfile->per_bfd->demangled_hash_languages.set (MSYMBOL_LANGUAGE (sym));\n \n@@ -252,7 +252,7 @@ lookup_minimal_symbol_mangled (const char *lookup_name,\n        msymbol != NULL;\n        msymbol = msymbol->hash_next)\n     {\n-      const char *symbol_name = MSYMBOL_LINKAGE_NAME (msymbol);\n+      const char *symbol_name = msymbol->linkage_name ();\n \n       if (namecmp (symbol_name, lookup_name) == 0\n \t  && found.maybe_collect (sfile, objfile, msymbol))\n@@ -276,7 +276,7 @@ lookup_minimal_symbol_demangled (const lookup_name_info &lookup_name,\n        msymbol != NULL;\n        msymbol = msymbol->demangled_hash_next)\n     {\n-      const char *symbol_name = MSYMBOL_SEARCH_NAME (msymbol);\n+      const char *symbol_name = msymbol->search_name ();\n \n       if (matcher (symbol_name, lookup_name, NULL)\n \t  && found.maybe_collect (sfile, objfile, msymbol))\n@@ -487,7 +487,7 @@ iterate_over_minimal_symbols\n \t   iter != NULL;\n \t   iter = iter->hash_next)\n \t{\n-\t  if (mangled_cmp (MSYMBOL_LINKAGE_NAME (iter), name) == 0)\n+\t  if (mangled_cmp (iter->linkage_name (), name) == 0)\n \t    if (callback (iter))\n \t      return;\n \t}\n@@ -511,7 +511,7 @@ iterate_over_minimal_symbols\n       for (minimal_symbol *iter = objf->per_bfd->msymbol_demangled_hash[hash];\n \t   iter != NULL;\n \t   iter = iter->demangled_hash_next)\n-\tif (name_match (MSYMBOL_SEARCH_NAME (iter), lookup_name, NULL))\n+\tif (name_match (iter->search_name (), lookup_name, NULL))\n \t  if (callback (iter))\n \t    return;\n     }\n@@ -530,7 +530,7 @@ lookup_minimal_symbol_linkage (const char *name, struct objfile *objf)\n \t   msymbol != NULL;\n \t   msymbol = msymbol->hash_next)\n \t{\n-\t  if (strcmp (MSYMBOL_LINKAGE_NAME (msymbol), name) == 0\n+\t  if (strcmp (msymbol->linkage_name (), name) == 0\n \t      && (MSYMBOL_TYPE (msymbol) == mst_data\n \t\t  || MSYMBOL_TYPE (msymbol) == mst_bss))\n \t    return {msymbol, objfile};\n@@ -563,7 +563,7 @@ lookup_minimal_symbol_text (const char *name, struct objfile *objf)\n \t       msymbol != NULL && found_symbol.minsym == NULL;\n \t       msymbol = msymbol->hash_next)\n \t    {\n-\t      if (strcmp (MSYMBOL_LINKAGE_NAME (msymbol), name) == 0 &&\n+\t      if (strcmp (msymbol->linkage_name (), name) == 0 &&\n \t\t  (MSYMBOL_TYPE (msymbol) == mst_text\n \t\t   || MSYMBOL_TYPE (msymbol) == mst_text_gnu_ifunc\n \t\t   || MSYMBOL_TYPE (msymbol) == mst_file_text))\n@@ -611,7 +611,7 @@ lookup_minimal_symbol_by_pc_name (CORE_ADDR pc, const char *name,\n \t       msymbol = msymbol->hash_next)\n \t    {\n \t      if (MSYMBOL_VALUE_ADDRESS (objfile, msymbol) == pc\n-\t\t  && strcmp (MSYMBOL_LINKAGE_NAME (msymbol), name) == 0)\n+\t\t  && strcmp (msymbol->linkage_name (), name) == 0)\n \t\treturn msymbol;\n \t    }\n \t}\n@@ -1164,8 +1164,8 @@ minimal_symbol_is_less_than (const minimal_symbol &fn1,\n   else\n     /* addrs are equal: sort by name */\n     {\n-      const char *name1 = MSYMBOL_LINKAGE_NAME (&fn1);\n-      const char *name2 = MSYMBOL_LINKAGE_NAME (&fn2);\n+      const char *name1 = fn1.linkage_name ();\n+      const char *name2 = fn2.linkage_name ();\n \n       if (name1 && name2)\t/* both have names */\n \treturn strcmp (name1, name2) < 0;\n@@ -1220,8 +1220,8 @@ compact_minimal_symbols (struct minimal_symbol *msymbol, int mcount,\n \t  if (MSYMBOL_VALUE_RAW_ADDRESS (copyfrom)\n \t      == MSYMBOL_VALUE_RAW_ADDRESS ((copyfrom + 1))\n \t      && MSYMBOL_SECTION (copyfrom) == MSYMBOL_SECTION (copyfrom + 1)\n-\t      && strcmp (MSYMBOL_LINKAGE_NAME (copyfrom),\n-\t\t\t MSYMBOL_LINKAGE_NAME ((copyfrom + 1))) == 0)\n+\t      && strcmp (copyfrom->linkage_name (),\n+\t\t\t (copyfrom + 1)->linkage_name ()) == 0)\n \t    {\n \t      if (MSYMBOL_TYPE ((copyfrom + 1)) == mst_unknown)\n \t\t{\n@@ -1268,7 +1268,7 @@ build_minimal_symbol_hash_tables (struct objfile *objfile)\n       add_minsym_to_hash_table (msym, objfile->per_bfd->msymbol_hash);\n \n       msym->demangled_hash_next = 0;\n-      if (MSYMBOL_SEARCH_NAME (msym) != MSYMBOL_LINKAGE_NAME (msym))\n+      if (msym->search_name () != msym->linkage_name ())\n \tadd_minsym_to_demangled_hash_table (msym, objfile);\n     }\n }\n@@ -1402,8 +1402,8 @@ find_solib_trampoline_target (struct frame_info *frame, CORE_ADDR pc)\n \t\t   || MSYMBOL_TYPE (msymbol) == mst_text_gnu_ifunc\n \t\t   || MSYMBOL_TYPE (msymbol) == mst_data\n \t\t   || MSYMBOL_TYPE (msymbol) == mst_data_gnu_ifunc)\n-\t\t  && strcmp (MSYMBOL_LINKAGE_NAME (msymbol),\n-\t\t\t     MSYMBOL_LINKAGE_NAME (tsymbol)) == 0)\n+\t\t  && strcmp (msymbol->linkage_name (),\n+\t\t\t     tsymbol->linkage_name ()) == 0)\n \t\t{\n \t\t  CORE_ADDR func;\n "
    },
    {
      "sha": "0852851595f0eac5008283d992379415cda61831",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -3821,8 +3821,8 @@ mips_stub_frame_sniffer (const struct frame_unwind *self,\n      stub.  The stub for foo is named \".pic.foo\".  */\n   msym = lookup_minimal_symbol_by_pc (pc);\n   if (msym.minsym != NULL\n-      && MSYMBOL_LINKAGE_NAME (msym.minsym) != NULL\n-      && startswith (MSYMBOL_LINKAGE_NAME (msym.minsym), \".pic.\"))\n+      && msym.minsym->linkage_name () != NULL\n+      && startswith (msym.minsym->linkage_name (), \".pic.\"))\n     return 1;\n \n   return 0;\n@@ -7818,8 +7818,8 @@ mips_skip_pic_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n   msym = lookup_minimal_symbol_by_pc (pc);\n   if (msym.minsym == NULL\n       || BMSYMBOL_VALUE_ADDRESS (msym) != pc\n-      || MSYMBOL_LINKAGE_NAME (msym.minsym) == NULL\n-      || !startswith (MSYMBOL_LINKAGE_NAME (msym.minsym), \".pic.\"))\n+      || msym.minsym->linkage_name () == NULL\n+      || !startswith (msym.minsym->linkage_name (), \".pic.\"))\n     return 0;\n \n   /* A two-instruction header.  */"
    },
    {
      "sha": "947a669f28fbac3735bb600d71b4e83082cbede1",
      "filename": "gdb/msp430-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/msp430-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/msp430-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/msp430-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -808,7 +808,7 @@ msp430_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n   if (!bms.minsym)\n     return pc;\n \n-  stub_name = MSYMBOL_LINKAGE_NAME (bms.minsym);\n+  stub_name = bms.minsym->linkage_name ();\n \n   if (gdbarch_tdep (gdbarch)->code_model == MSP_SMALL_CODE_MODEL\n       && msp430_in_return_stub (gdbarch, pc, stub_name))"
    },
    {
      "sha": "bd0626411d0eaaa57201c3aa2d9a1f14ab72bc7c",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -610,7 +610,7 @@ info_selectors_command (const char *regexp, int from_tty)\n       for (minimal_symbol *msymbol : objfile->msymbols ())\n \t{\n \t  QUIT;\n-\t  name = MSYMBOL_NATURAL_NAME (msymbol);\n+\t  name = msymbol->natural_name ();\n \t  if (name\n \t      && (name[0] == '-' || name[0] == '+')\n \t      && name[1] == '[')\t\t/* Got a method name.  */\n@@ -623,7 +623,7 @@ info_selectors_command (const char *regexp, int from_tty)\n \t      if (name == NULL)\n \t\t{\n \t\t  complaint (_(\"Bad method name '%s'\"),\n-\t\t\t     MSYMBOL_NATURAL_NAME (msymbol));\n+\t\t\t     msymbol->natural_name ());\n \t\t  continue;\n \t\t}\n \t      if (regexp == NULL || re_exec(++name) != 0)\n@@ -650,7 +650,7 @@ info_selectors_command (const char *regexp, int from_tty)\n \t  for (minimal_symbol *msymbol : objfile->msymbols ())\n \t    {\n \t      QUIT;\n-\t      name = MSYMBOL_NATURAL_NAME (msymbol);\n+\t      name = msymbol->natural_name ();\n \t      if (name &&\n \t\t  (name[0] == '-' || name[0] == '+') &&\n \t\t  name[1] == '[')\t\t/* Got a method name.  */\n@@ -764,7 +764,7 @@ info_classes_command (const char *regexp, int from_tty)\n       for (minimal_symbol *msymbol : objfile->msymbols ())\n \t{\n \t  QUIT;\n-\t  name = MSYMBOL_NATURAL_NAME (msymbol);\n+\t  name = msymbol->natural_name ();\n \t  if (name &&\n \t      (name[0] == '-' || name[0] == '+') &&\n \t      name[1] == '[')\t\t\t/* Got a method name.  */\n@@ -791,7 +791,7 @@ info_classes_command (const char *regexp, int from_tty)\n \t  for (minimal_symbol *msymbol : objfile->msymbols ())\n \t    {\n \t      QUIT;\n-\t      name = MSYMBOL_NATURAL_NAME (msymbol);\n+\t      name = msymbol->natural_name ();\n \t      if (name &&\n \t\t  (name[0] == '-' || name[0] == '+') &&\n \t\t  name[1] == '[') /* Got a method name.  */\n@@ -1014,7 +1014,7 @@ find_methods (char type, const char *theclass, const char *category,\n \n \t  /* Check the symbol name first as this can be done entirely without\n \t     sending any query to the target.  */\n-\t  symname = MSYMBOL_NATURAL_NAME (msymbol);\n+\t  symname = msymbol->natural_name ();\n \t  if (symname == NULL)\n \t    continue;\n \n@@ -1152,7 +1152,7 @@ find_imps (const char *method, std::vector<const char *> *symbol_names)\n \t    = lookup_minimal_symbol (selector, 0, 0);\n \n \t  if (msym.minsym != NULL) \n-\t    symbol_names->push_back (MSYMBOL_NATURAL_NAME (msym.minsym));\n+\t    symbol_names->push_back (msym.minsym->natural_name ());\n \t}\n     }\n "
    },
    {
      "sha": "e1e1a00cae1f0d36a5b3a25c8899756d3585c3ca",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -240,7 +240,7 @@ pascal_val_print (struct type *type,\n \t      if (want_space)\n \t\tfputs_filtered (\" \", stream);\n \t      fputs_filtered (\"<\", stream);\n-\t      fputs_filtered (MSYMBOL_PRINT_NAME (msymbol.minsym), stream);\n+\t      fputs_filtered (msymbol.minsym->print_name (), stream);\n \t      fputs_filtered (\">\", stream);\n \t      want_space = 1;\n \t    }\n@@ -255,8 +255,7 @@ pascal_val_print (struct type *type,\n \n \t      if (msymbol.minsym != NULL)\n \t\t{\n-\t\t  const char *search_name\n-\t\t    = MSYMBOL_SEARCH_NAME (msymbol.minsym);\n+\t\t  const char *search_name = msymbol.minsym->search_name ();\n \t\t  wsym = lookup_symbol_search_name (search_name, NULL,\n \t\t\t\t\t\t    VAR_DOMAIN).symbol;\n \t\t}"
    },
    {
      "sha": "ecfaee391f69f929fd18223b1630154616cf77bd",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -312,9 +312,8 @@ powerpc_linux_in_dynsym_resolve_code (CORE_ADDR pc)\n   /* Check if we are in the resolver.  */\n   sym = lookup_minimal_symbol_by_pc (pc);\n   if (sym.minsym != NULL\n-      && (strcmp (MSYMBOL_LINKAGE_NAME (sym.minsym), \"__glink\") == 0\n-\t  || strcmp (MSYMBOL_LINKAGE_NAME (sym.minsym),\n-\t\t     \"__glink_PLTresolve\") == 0))\n+      && (strcmp (sym.minsym->linkage_name (), \"__glink\") == 0\n+\t  || strcmp (sym.minsym->linkage_name (), \"__glink_PLTresolve\") == 0))\n     return 1;\n \n   return 0;"
    },
    {
      "sha": "fb8c9e2fe01f52379587ae567f7d0ac060046f8d",
      "filename": "gdb/ppc-sysv-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ppc-sysv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/ppc-sysv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-sysv-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1043,7 +1043,7 @@ convert_code_addr_to_desc_addr (CORE_ADDR code_addr, CORE_ADDR *desc_addr)\n   /* Find the minimal symbol that corresponds to CODE_ADDR (should\n      have a name of the form \".FN\").  */\n   dot_fn = lookup_minimal_symbol_by_pc (code_addr);\n-  if (dot_fn.minsym == NULL || MSYMBOL_LINKAGE_NAME (dot_fn.minsym)[0] != '.')\n+  if (dot_fn.minsym == NULL || dot_fn.minsym->linkage_name ()[0] != '.')\n     return 0;\n   /* Get the section that contains CODE_ADDR.  Need this for the\n      \"objfile\" that it contains.  */\n@@ -1054,7 +1054,7 @@ convert_code_addr_to_desc_addr (CORE_ADDR code_addr, CORE_ADDR *desc_addr)\n      address.  Only look for the minimal symbol in \".FN\"'s object file\n      - avoids problems when two object files (i.e., shared libraries)\n      contain a minimal symbol with the same name.  */\n-  fn = lookup_minimal_symbol (MSYMBOL_LINKAGE_NAME (dot_fn.minsym) + 1, NULL,\n+  fn = lookup_minimal_symbol (dot_fn.minsym->linkage_name () + 1, NULL,\n \t\t\t      dot_fn_section->objfile);\n   if (fn.minsym == NULL)\n     return 0;"
    },
    {
      "sha": "bf61d590381a3508bfe5941aa031ed45c149910f",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -671,9 +671,9 @@ build_address_symbolic (struct gdbarch *gdbarch,\n \t  symbol = 0;\n \t  name_location = BMSYMBOL_VALUE_ADDRESS (msymbol);\n \t  if (do_demangle || asm_demangle)\n-\t    name_temp = MSYMBOL_PRINT_NAME (msymbol.minsym);\n+\t    name_temp = msymbol.minsym->print_name ();\n \t  else\n-\t    name_temp = MSYMBOL_LINKAGE_NAME (msymbol.minsym);\n+\t    name_temp = msymbol.minsym->linkage_name ();\n \t}\n     }\n   if (symbol == NULL && msymbol.minsym == NULL)\n@@ -1349,7 +1349,7 @@ info_symbol_command (const char *arg, int from_tty)\n \t    offset = sect_addr - MSYMBOL_VALUE_ADDRESS (objfile, msymbol);\n \t    mapped = section_is_mapped (osect) ? _(\"mapped\") : _(\"unmapped\");\n \t    sec_name = osect->the_bfd_section->name;\n-\t    msym_name = MSYMBOL_PRINT_NAME (msymbol);\n+\t    msym_name = msymbol->print_name ();\n \n \t    /* Don't print the offset if it is zero.\n \t       We assume there's no need to handle i18n of \"sym + offset\".  */"
    },
    {
      "sha": "c3155007bbd184093e869deca1c94bb43525a46f",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -534,7 +534,7 @@ psymbol_name_matches (partial_symbol *psym,\n   const language_defn *lang = language_def (psym->ginfo.language);\n   symbol_name_matcher_ftype *name_match\n     = get_symbol_name_matcher (lang, lookup_name);\n-  return name_match (symbol_search_name (&psym->ginfo), lookup_name, NULL);\n+  return name_match (psym->ginfo.search_name (), lookup_name, NULL);\n }\n \n /* Look in PST for a symbol in DOMAIN whose name matches NAME.  Search\n@@ -585,7 +585,7 @@ match_partial_symbol (struct objfile *objfile,\n \t  const char *lang_ln\n \t    = name.language_lookup_name (lang).c_str ();\n \n-\t  if (ordered_compare (symbol_search_name (&(*center)->ginfo),\n+\t  if (ordered_compare ((*center)->ginfo.search_name (),\n \t\t\t       lang_ln) >= 0)\n \t    top = center;\n \t  else\n@@ -693,7 +693,7 @@ lookup_partial_symbol (struct objfile *objfile,\n \t  if (!(center < top))\n \t    internal_error (__FILE__, __LINE__,\n \t\t\t    _(\"failed internal consistency check\"));\n-\t  if (strcmp_iw_ordered (symbol_search_name (&(*center)->ginfo),\n+\t  if (strcmp_iw_ordered ((*center)->ginfo.search_name (),\n \t\t\t\t search_name.get ()) >= 0)\n \t    {\n \t      top = center;\n@@ -836,10 +836,10 @@ print_partial_symbols (struct gdbarch *gdbarch, struct objfile *objfile,\n     {\n       QUIT;\n       fprintf_filtered (outfile, \"    `%s'\", (*p)->ginfo.name);\n-      if (symbol_demangled_name (&(*p)->ginfo) != NULL)\n+      if ((*p)->ginfo.demangled_name () != NULL)\n \t{\n \t  fprintf_filtered (outfile, \"  `%s'\",\n-\t\t\t    symbol_demangled_name (&(*p)->ginfo));\n+\t\t\t    (*p)->ginfo.demangled_name ());\n \t}\n       fputs_filtered (\", \", outfile);\n       switch ((*p)->domain)\n@@ -1283,7 +1283,7 @@ recursively_search_psymtabs\n \t\t   && (*psym)->aclass == LOC_TYPEDEF))\n \t      && psymbol_name_matches (*psym, lookup_name)\n \t      && (sym_matcher == NULL\n-\t\t  || sym_matcher (symbol_search_name (&(*psym)->ginfo))))\n+\t\t  || sym_matcher ((*psym)->ginfo.search_name ())))\n \t    {\n \t      /* Found a match, so notify our caller.  */\n \t      result = PST_SEARCHED_AND_FOUND;\n@@ -1478,8 +1478,8 @@ sort_pst_symbols (struct objfile *objfile, struct partial_symtab *pst)\n \n   std::sort (begin, end, [] (partial_symbol *s1, partial_symbol *s2)\n     {\n-      return strcmp_iw_ordered (symbol_search_name (&s1->ginfo),\n-\t\t\t\tsymbol_search_name (&s2->ginfo)) < 0;\n+      return strcmp_iw_ordered (s1->ginfo.search_name (),\n+\t\t\t\ts2->ginfo.search_name ()) < 0;\n     });\n }\n \n@@ -2106,7 +2106,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \tlength = ps->n_static_syms;\n \twhile (length--)\n \t  {\n-\t    sym = block_lookup_symbol (b, symbol_search_name (&(*psym)->ginfo),\n+\t    sym = block_lookup_symbol (b, (*psym)->ginfo.search_name (),\n \t\t\t\t       symbol_name_match_type::SEARCH_NAME,\n \t\t\t\t       (*psym)->domain);\n \t    if (!sym)\n@@ -2124,7 +2124,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \tlength = ps->n_global_syms;\n \twhile (length--)\n \t  {\n-\t    sym = block_lookup_symbol (b, symbol_search_name (&(*psym)->ginfo),\n+\t    sym = block_lookup_symbol (b, (*psym)->ginfo.search_name (),\n \t\t\t\t       symbol_name_match_type::SEARCH_NAME,\n \t\t\t\t       (*psym)->domain);\n \t    if (!sym)"
    },
    {
      "sha": "3ef5b6a488df9f41406fde70652ee76267c328f8",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -934,7 +934,7 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \n \t      msymbol = lookup_minimal_symbol_by_pc (addr);\n \t      if (msymbol.minsym != NULL)\n-\t\tfunction = MSYMBOL_PRINT_NAME (msymbol.minsym);\n+\t\tfunction = msymbol.minsym->print_name ();\n \t    }\n \t  else if (py_func != Py_None)\n \t    {"
    },
    {
      "sha": "609e1fbf0a77d664c13c00875759f73f9beab750",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -794,7 +794,7 @@ gdbpy_rbreak (PyObject *self, PyObject *args, PyObject *kw)\n \t  symbol_name  += SYMBOL_LINKAGE_NAME (p.symbol);\n \t}\n       else\n-\tsymbol_name = MSYMBOL_LINKAGE_NAME (p.msymbol.minsym);\n+\tsymbol_name = p.msymbol.minsym->linkage_name ();\n \n       gdbpy_ref<> argList (Py_BuildValue(\"(s)\", symbol_name.c_str ()));\n       gdbpy_ref<> obj (PyObject_CallObject ((PyObject *)"
    },
    {
      "sha": "04bd09ae9cee0f81277af7164e107afadc4cbf4e",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1117,7 +1117,7 @@ btrace_get_bfun_name (const struct btrace_function *bfun)\n   if (sym != NULL)\n     return SYMBOL_PRINT_NAME (sym);\n   else if (msym != NULL)\n-    return MSYMBOL_PRINT_NAME (msym);\n+    return msym->print_name ();\n   else\n     return \"??\";\n }\n@@ -1178,7 +1178,7 @@ btrace_call_history (struct ui_out *uiout,\n \tuiout->field_string (\"function\", SYMBOL_PRINT_NAME (sym),\n \t\t\t     function_name_style.style ());\n       else if (msym != NULL)\n-\tuiout->field_string (\"function\", MSYMBOL_PRINT_NAME (msym),\n+\tuiout->field_string (\"function\", msym->print_name (),\n \t\t\t     function_name_style.style ());\n       else if (!uiout->is_mi_like_p ())\n \tuiout->field_string (\"function\", \"??\","
    },
    {
      "sha": "07a186011cb648a64c96e6622b0d68d900201a62",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -2119,9 +2119,9 @@ rs6000_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n          to __eabi in case the GCC option \"-fleading-underscore\" was\n \t used to compile the program.  */\n       if (s.minsym != NULL\n-          && MSYMBOL_LINKAGE_NAME (s.minsym) != NULL\n-\t  && (strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"__eabi\") == 0\n-\t      || strcmp (MSYMBOL_LINKAGE_NAME (s.minsym), \"___eabi\") == 0))\n+          && s.minsym->linkage_name () != NULL\n+\t  && (strcmp (s.minsym->linkage_name (), \"__eabi\") == 0\n+\t      || strcmp (s.minsym->linkage_name (), \"___eabi\") == 0))\n \tpc += 4;\n     }\n   return pc;\n@@ -2205,7 +2205,7 @@ rs6000_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n   msymbol = lookup_minimal_symbol_by_pc (pc);\n   if (msymbol.minsym\n       && rs6000_in_solib_return_trampoline (gdbarch, pc,\n-\t\t\t\t\t    MSYMBOL_LINKAGE_NAME (msymbol.minsym)))\n+\t\t\t\t\t    msymbol.minsym->linkage_name ()))\n     {\n       /* Double-check that the third instruction from PC is relative \"b\".  */\n       op = read_memory_integer (pc + 8, 4, byte_order);"
    },
    {
      "sha": "e9ca1c577aed9bc8c382bf4271f2380e0b65e972",
      "filename": "gdb/sol-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/sol-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/sol-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol-thread.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1109,7 +1109,7 @@ info_cb (const td_thrhandle_t *th, void *s)\n \n \t  printf_filtered (\"   startfunc=%s\",\n \t\t\t   msym.minsym\n-\t\t\t   ? MSYMBOL_PRINT_NAME (msym.minsym)\n+\t\t\t   ? msym.minsym->print_name ()\n \t\t\t   : paddress (target_gdbarch (), ti.ti_startfunc));\n \t}\n \n@@ -1121,7 +1121,7 @@ info_cb (const td_thrhandle_t *th, void *s)\n \n \t  printf_filtered (\"   sleepfunc=%s\",\n \t\t\t   msym.minsym\n-\t\t\t   ? MSYMBOL_PRINT_NAME (msym.minsym)\n+\t\t\t   ? msym.minsym->print_name ()\n \t\t\t   : paddress (target_gdbarch (), ti.ti_pc));\n \t}\n "
    },
    {
      "sha": "0fde12080fe344b4b000dae84f5cc5dd53d105e4",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -4610,11 +4610,11 @@ scan_file_globals (struct objfile *objfile)\n \t  /* Get the hash index and check all the symbols\n \t     under that hash index.  */\n \n-\t  hash = hashname (MSYMBOL_LINKAGE_NAME (msymbol));\n+\t  hash = hashname (msymbol->linkage_name ());\n \n \t  for (sym = global_sym_chain[hash]; sym;)\n \t    {\n-\t      if (strcmp (MSYMBOL_LINKAGE_NAME (msymbol),\n+\t      if (strcmp (msymbol->linkage_name (),\n \t\t\t  SYMBOL_LINKAGE_NAME (sym)) == 0)\n \t\t{\n \t\t  /* Splice this symbol out of the hash chain and"
    },
    {
      "sha": "0568e704f4865dc94405c721e290fd1f95b9cbc7",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -1290,7 +1290,7 @@ find_frame_funname (struct frame_info *frame, enum language *funlang,\n       msymbol = lookup_minimal_symbol_by_pc (pc);\n       if (msymbol.minsym != NULL)\n \t{\n-\t  funname.reset (xstrdup (MSYMBOL_PRINT_NAME (msymbol.minsym)));\n+\t  funname.reset (xstrdup (msymbol.minsym->print_name ()));\n \t  *funlang = MSYMBOL_LANGUAGE (msymbol.minsym);\n \t}\n     }\n@@ -1516,7 +1516,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n       msymbol = lookup_minimal_symbol_by_pc (frame_pc);\n       if (msymbol.minsym != NULL)\n \t{\n-\t  funname = MSYMBOL_PRINT_NAME (msymbol.minsym);\n+\t  funname = msymbol.minsym->print_name ();\n \t  funlang = MSYMBOL_LANGUAGE (msymbol.minsym);\n \t}\n     }"
    },
    {
      "sha": "bf48435bff2599ab658071d61818d40b199354cb",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -243,7 +243,7 @@ dump_msymbols (struct objfile *objfile, struct ui_file *outfile)\n \t\t\t+ ANOFFSET (objfile->section_offsets,\n \t\t\t\t    msymbol->section));\n       fputs_filtered (paddress (gdbarch, addr), outfile);\n-      fprintf_filtered (outfile, \" %s\", MSYMBOL_LINKAGE_NAME (msymbol));\n+      fprintf_filtered (outfile, \" %s\", msymbol->linkage_name ());\n       if (section)\n \t{\n \t  if (section->the_bfd_section != NULL)\n@@ -253,9 +253,9 @@ dump_msymbols (struct objfile *objfile, struct ui_file *outfile)\n \t    fprintf_filtered (outfile, \" spurious section %ld\",\n \t\t\t      (long) (section - objfile->sections));\n \t}\n-      if (MSYMBOL_DEMANGLED_NAME (msymbol) != NULL)\n+      if (msymbol->demangled_name () != NULL)\n \t{\n-\t  fprintf_filtered (outfile, \"  %s\", MSYMBOL_DEMANGLED_NAME (msymbol));\n+\t  fprintf_filtered (outfile, \"  %s\", msymbol->demangled_name ());\n \t}\n       if (msymbol->filename)\n \tfprintf_filtered (outfile, \"  %s\", msymbol->filename);"
    },
    {
      "sha": "92e8dcdf50c1baa0b4b69f8fe37a193f9a827e85",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 30,
      "deletions": 38,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -944,68 +944,63 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n     symbol_set_demangled_name (gsymbol, NULL, &per_bfd->storage_obstack);\n }\n \n-/* Return the source code name of a symbol.  In languages where\n-   demangling is necessary, this is the demangled name.  */\n+/* See symtab.h.  */\n \n const char *\n-symbol_natural_name (const struct general_symbol_info *gsymbol)\n+general_symbol_info::natural_name () const\n {\n-  switch (gsymbol->language)\n+  switch (language)\n     {\n     case language_cplus:\n     case language_d:\n     case language_go:\n     case language_objc:\n     case language_fortran:\n-      if (symbol_get_demangled_name (gsymbol) != NULL)\n-\treturn symbol_get_demangled_name (gsymbol);\n+      if (symbol_get_demangled_name (this) != NULL)\n+\treturn symbol_get_demangled_name (this);\n       break;\n     case language_ada:\n-      return ada_decode_symbol (gsymbol);\n+      return ada_decode_symbol (this);\n     default:\n       break;\n     }\n-  return gsymbol->name;\n+  return name;\n }\n \n-/* Return the demangled name for a symbol based on the language for\n-   that symbol.  If no demangled name exists, return NULL.  */\n+/* See symtab.h.  */\n \n const char *\n-symbol_demangled_name (const struct general_symbol_info *gsymbol)\n+general_symbol_info::demangled_name () const\n {\n   const char *dem_name = NULL;\n \n-  switch (gsymbol->language)\n+  switch (language)\n     {\n     case language_cplus:\n     case language_d:\n     case language_go:\n     case language_objc:\n     case language_fortran:\n-      dem_name = symbol_get_demangled_name (gsymbol);\n+      dem_name = symbol_get_demangled_name (this);\n       break;\n     case language_ada:\n-      dem_name = ada_decode_symbol (gsymbol);\n+      dem_name = ada_decode_symbol (this);\n       break;\n     default:\n       break;\n     }\n   return dem_name;\n }\n \n-/* Return the search name of a symbol---generally the demangled or\n-   linkage name of the symbol, depending on how it will be searched for.\n-   If there is no distinct demangled name, then returns the same value\n-   (same pointer) as SYMBOL_LINKAGE_NAME.  */\n+/* See symtab.h.  */\n \n const char *\n-symbol_search_name (const struct general_symbol_info *gsymbol)\n+general_symbol_info::search_name () const\n {\n-  if (gsymbol->language == language_ada)\n-    return gsymbol->name;\n+  if (language == language_ada)\n+    return name;\n   else\n-    return symbol_natural_name (gsymbol);\n+    return natural_name ();\n }\n \n /* See symtab.h.  */\n@@ -1016,7 +1011,7 @@ symbol_matches_search_name (const struct general_symbol_info *gsymbol,\n {\n   symbol_name_matcher_ftype *name_match\n     = get_symbol_name_matcher (language_def (gsymbol->language), name);\n-  return name_match (symbol_search_name (gsymbol), name, NULL);\n+  return name_match (gsymbol->search_name (), name, NULL);\n }\n \n \f\n@@ -3127,7 +3122,7 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n     if (MSYMBOL_TYPE (msymbol.minsym) == mst_solib_trampoline)\n       {\n \tstruct bound_minimal_symbol mfunsym\n-\t  = lookup_minimal_symbol_text (MSYMBOL_LINKAGE_NAME (msymbol.minsym),\n+\t  = lookup_minimal_symbol_text (msymbol.minsym->linkage_name (),\n \t\t\t\t\tNULL);\n \n \tif (mfunsym.minsym == NULL)\n@@ -3733,7 +3728,7 @@ skip_prologue_sal (struct symtab_and_line *sal)\n       objfile = msymbol.objfile;\n       pc = BMSYMBOL_VALUE_ADDRESS (msymbol);\n       section = MSYMBOL_OBJ_SECTION (objfile, msymbol.minsym);\n-      name = MSYMBOL_LINKAGE_NAME (msymbol.minsym);\n+      name = msymbol.minsym->linkage_name ();\n     }\n \n   gdbarch = get_objfile_arch (objfile);\n@@ -4599,7 +4594,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t\t  || MSYMBOL_TYPE (msymbol) == ourtype4)\n \t\t{\n \t\t  if (!preg.has_value ()\n-\t\t      || preg->exec (MSYMBOL_NATURAL_NAME (msymbol), 0,\n+\t\t      || preg->exec (msymbol->natural_name (), 0,\n \t\t\t\t     NULL, 0) == 0)\n \t\t    {\n \t\t      /* Note: An important side-effect of these\n@@ -4611,8 +4606,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t\t\t     (MSYMBOL_VALUE_ADDRESS (objfile, msymbol))\n \t\t\t     == NULL)\n \t\t\t  : (lookup_symbol_in_objfile_from_linkage_name\n-\t\t\t     (objfile, MSYMBOL_LINKAGE_NAME (msymbol),\n-\t\t\t      VAR_DOMAIN)\n+\t\t\t     (objfile, msymbol->linkage_name (), VAR_DOMAIN)\n \t\t\t     .symbol == NULL))\n \t\t\tfound_misc = 1;\n \t\t    }\n@@ -4707,7 +4701,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t\t  || MSYMBOL_TYPE (msymbol) == ourtype4)\n \t\t{\n \t\t  if (!preg.has_value ()\n-\t\t      || preg->exec (MSYMBOL_NATURAL_NAME (msymbol), 0,\n+\t\t      || preg->exec (msymbol->natural_name (), 0,\n \t\t\t\t     NULL, 0) == 0)\n \t\t    {\n \t\t      /* For functions we can do a quick check of whether the\n@@ -4718,8 +4712,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t\t\t      == NULL))\n \t\t\t{\n \t\t\t  if (lookup_symbol_in_objfile_from_linkage_name\n-\t\t\t      (objfile, MSYMBOL_LINKAGE_NAME (msymbol),\n-\t\t\t       VAR_DOMAIN)\n+\t\t\t      (objfile, msymbol->linkage_name (), VAR_DOMAIN)\n \t\t\t      .symbol == NULL)\n \t\t\t    {\n \t\t\t      /* match */\n@@ -4829,8 +4822,7 @@ print_msymbol_info (struct bound_minimal_symbol msymbol)\n \n   printf_filtered (_(\"%ps  %ps\\n\"),\n \t\t   styled_string (address_style.style (), tmp),\n-\t\t   styled_string (sym_style,\n-\t\t\t\t  MSYMBOL_PRINT_NAME (msymbol.minsym)));\n+\t\t   styled_string (sym_style, msymbol.minsym->print_name ()));\n }\n \n /* This is the guts of the commands \"info functions\", \"info types\", and\n@@ -5143,11 +5135,11 @@ rbreak_command (const char *regexp, int from_tty)\n       else\n \t{\n \t  string = string_printf (\"'%s'\",\n-\t\t\t\t  MSYMBOL_LINKAGE_NAME (p.msymbol.minsym));\n+\t\t\t\t  p.msymbol.minsym->linkage_name ());\n \n \t  break_command (&string[0], from_tty);\n \t  printf_filtered (\"<function, no debug info> %s;\\n\",\n-\t\t\t   MSYMBOL_PRINT_NAME (p.msymbol.minsym));\n+\t\t\t   p.msymbol.minsym->print_name ());\n \t}\n     }\n }\n@@ -5230,7 +5222,7 @@ completion_list_add_msymbol (completion_tracker &tracker,\n \t\t\t     const char *text, const char *word)\n {\n   completion_list_add_name (tracker, MSYMBOL_LANGUAGE (sym),\n-\t\t\t    MSYMBOL_NATURAL_NAME (sym),\n+\t\t\t    sym->natural_name (),\n \t\t\t    lookup_name, text, word);\n }\n \n@@ -5250,7 +5242,7 @@ completion_list_objc_symbol (completion_tracker &tracker,\n   const char *method, *category, *selector;\n   char *tmp2 = NULL;\n \n-  method = MSYMBOL_NATURAL_NAME (msymbol);\n+  method = msymbol->natural_name ();\n \n   /* Is it a method?  */\n   if ((method[0] != '-') && (method[0] != '+'))\n@@ -6319,7 +6311,7 @@ get_msymbol_address (struct objfile *objf, const struct minimal_symbol *minsym)\n   gdb_assert (minsym->maybe_copied);\n   gdb_assert ((objf->flags & OBJF_MAINLINE) == 0);\n \n-  const char *linkage_name = MSYMBOL_LINKAGE_NAME (minsym);\n+  const char *linkage_name = minsym->linkage_name ();\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {"
    },
    {
      "sha": "3eb9c0e1d270e267ebe0979abb629f4552afefdb",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 41,
      "deletions": 32,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -67,7 +67,7 @@ enum class symbol_name_match_type\n \n   /* Search name matching.  This is like FULL, but the search name did\n      not come from the user; instead it is already a search name\n-     retrieved from a SYMBOL_SEARCH_NAME/MSYMBOL_SEARCH_NAME call.\n+     retrieved from a SYMBOL_SEARCH_NAME/search_name () call.\n      For Ada, this avoids re-encoding an already-encoded search name\n      (which would potentially incorrectly lowercase letters in the\n      linkage/search name that should remain uppercase).  For C++, it\n@@ -380,6 +380,42 @@ typedef bool (symbol_name_matcher_ftype)\n \n struct general_symbol_info\n {\n+  /* Short version as to when to use which name accessor:\n+     Use natural_name () to refer to the name of the symbol in the original\n+     source code.  Use linkage_name () if you want to know what the linker\n+     thinks the symbol's name is.  Use print_name () for output.  Use\n+     demangled_name () if you specifically need to know whether natural_name ()\n+     and linkage_name () are different.  */\n+\n+  const char *linkage_name () const\n+  { return name; }\n+\n+  /* Return SYMBOL's \"natural\" name, i.e. the name that it was called in\n+     the original source code.  In languages like C++ where symbols may\n+     be mangled for ease of manipulation by the linker, this is the\n+     demangled name.  */\n+  const char *natural_name () const;\n+\n+  /* Returns a version of the name of a symbol that is\n+     suitable for output.  In C++ this is the \"demangled\" form of the\n+     name if demangle is on and the \"mangled\" form of the name if\n+     demangle is off.  In other languages this is just the symbol name.\n+     The result should never be NULL.  Don't use this for internal\n+     purposes (e.g. storing in a hashtable): it's only suitable for output.  */\n+  const char *print_name () const\n+  { return demangle ? natural_name () : linkage_name (); }\n+\n+  /* Return the demangled name for a symbol based on the language for\n+     that symbol.  If no demangled name exists, return NULL.  */\n+  const char *demangled_name () const;\n+\n+  /* Returns the name to be used when sorting and searching symbols.\n+     In C++, we search for the demangled form of a name,\n+     and so sort symbols accordingly.  In Ada, however, we search by mangled\n+     name.  If there is no distinct demangled name, then this\n+     returns the same value (same pointer) as linkage_name ().  */\n+  const char *search_name () const;\n+\n   /* Name of the symbol.  This is a required field.  Storage for the\n      name is allocated on the objfile_obstack for the associated\n      objfile.  For languages like C++ that make a distinction between\n@@ -518,15 +554,8 @@ extern void symbol_set_names (struct general_symbol_info *symbol,\n    specifically need to know whether SYMBOL_NATURAL_NAME and\n    SYMBOL_LINKAGE_NAME are different.  */\n \n-/* Return SYMBOL's \"natural\" name, i.e. the name that it was called in\n-   the original source code.  In languages like C++ where symbols may\n-   be mangled for ease of manipulation by the linker, this is the\n-   demangled name.  */\n-\n #define SYMBOL_NATURAL_NAME(symbol) \\\n-  (symbol_natural_name ((symbol)))\n-extern const char *symbol_natural_name\n-  (const struct general_symbol_info *symbol);\n+  ((symbol)->natural_name ())\n \n /* Return SYMBOL's name from the point of view of the linker.  In\n    languages like C++ where symbols may be mangled for ease of\n@@ -535,12 +564,8 @@ extern const char *symbol_natural_name\n \n #define SYMBOL_LINKAGE_NAME(symbol)\t(symbol)->name\n \n-/* Return the demangled name for a symbol based on the language for\n-   that symbol.  If no demangled name exists, return NULL.  */\n #define SYMBOL_DEMANGLED_NAME(symbol) \\\n-  (symbol_demangled_name ((symbol)))\n-extern const char *symbol_demangled_name\n-  (const struct general_symbol_info *symbol);\n+  ((symbol)->demangled_name ())\n \n /* Macro that returns a version of the name of a symbol that is\n    suitable for output.  In C++ this is the \"demangled\" form of the\n@@ -555,14 +580,8 @@ extern const char *symbol_demangled_name\n #define SYMBOL_PRINT_NAME(symbol)\t\t\t\t\t\\\n   (demangle ? SYMBOL_NATURAL_NAME (symbol) : SYMBOL_LINKAGE_NAME (symbol))\n \n-/* Macro that returns the name to be used when sorting and searching symbols.\n-   In C++, we search for the demangled form of a name,\n-   and so sort symbols accordingly.  In Ada, however, we search by mangled\n-   name.  If there is no distinct demangled name, then SYMBOL_SEARCH_NAME\n-   returns the same value (same pointer) as SYMBOL_LINKAGE_NAME.  */\n #define SYMBOL_SEARCH_NAME(symbol)\t\t\t\t\t \\\n-   (symbol_search_name (symbol))\n-extern const char *symbol_search_name (const struct general_symbol_info *ginfo);\n+   ((symbol)->search_name ())\n \n /* Return true if NAME matches the \"search\" name of SYMBOL, according\n    to the symbol's language.  */\n@@ -750,16 +769,6 @@ extern CORE_ADDR get_msymbol_address (struct objfile *objf,\n    ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n    : NULL)\n \n-#define MSYMBOL_NATURAL_NAME(symbol) \\\n-  (symbol_natural_name (symbol))\n-#define MSYMBOL_LINKAGE_NAME(symbol)\t(symbol)->name\n-#define MSYMBOL_PRINT_NAME(symbol)\t\t\t\t\t\\\n-  (demangle ? MSYMBOL_NATURAL_NAME (symbol) : MSYMBOL_LINKAGE_NAME (symbol))\n-#define MSYMBOL_DEMANGLED_NAME(symbol) \\\n-  (symbol_demangled_name (symbol))\n-#define MSYMBOL_SEARCH_NAME(symbol)\t\t\t\t\t \\\n-   (symbol_search_name (symbol))\n-\n #include \"minsyms.h\"\n \n \f\n@@ -1632,7 +1641,7 @@ extern struct block_symbol lookup_symbol (const char *,\n    global/static blocks if BLOCK is NULL.  The passed-in search name\n    should not come from the user; instead it should already be a\n    search name as retrieved from a\n-   SYMBOL_SEARCH_NAME/MSYMBOL_SEARCH_NAME call.  See definition of\n+   SYMBOL_SEARCH_NAME/search_name () call.  See definition of\n    symbol_name_match_type::SEARCH_NAME.  Returns the struct symbol\n    pointer, or NULL if no symbol is found.  The symbol's section is\n    fixed up if necessary.  */"
    },
    {
      "sha": "fdd9d199145da871f203cdc9cd0ba81a85c1efa2",
      "filename": "gdb/x86-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/x86-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9d95fa3d034ae614e33b631e0bc019015c444e9/gdb/x86-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-tdep.c?ref=c9d95fa3d034ae614e33b631e0bc019015c444e9",
      "patch": "@@ -47,7 +47,7 @@ x86_in_indirect_branch_thunk (CORE_ADDR pc, const char **register_names,\n   if (bmfun.minsym == nullptr)\n     return false;\n \n-  const char *name = MSYMBOL_LINKAGE_NAME (bmfun.minsym);\n+  const char *name = bmfun.minsym->linkage_name ();\n   if (name == nullptr)\n     return false;\n "
    }
  ]
}