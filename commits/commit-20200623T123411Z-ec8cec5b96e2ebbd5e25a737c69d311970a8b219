{
  "sha": "ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWM4Y2VjNWI5NmUyZWJiZDVlMjVhNzM3YzY5ZDMxMTk3MGE4YjIxOQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T20:54:49Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-23T12:34:11Z"
    },
    "message": "gdb: Convert language la_emitchar field to a method\n\nThis commit changes the language_data::la_emitchar function pointer\nmember variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (emit_char): Renamed to ada_language::emitchar.\n\t(ada_language_data): Delete la_emitchar initializer.\n\t(ada_language::emitchar): New member function, implementation from\n\temit_char.\n\t* c-lang.c (c_language_data): Delete la_emitchar initializer.\n\t(cplus_language_data): Likewise.\n\t(asm_language_data): Likewise.\n\t(minimal_language_data): Likewise.\n\t* d-lang.c (d_language_data): Likewise.\n\t* f-lang.c (f_emit_char): Rename to f_language::emitchar.\n\t(f_language_data): Delete la_emitchar initializer.\n\t(f_language::emitchar): New member function, implementation from\n\tf_emit_char.\n\t* go-lang.c (go_language_data): Delete la_emitchar initializer.\n\t* language.c (unk_lang_emit_char): Delete.\n\t(language_defn::emitchar): New member function definition.\n\t(unknown_language_data): Delete la_emitchar initializer.\n\t(unknown_language::emitchar): New member function.\n\t(auto_language_data): Delete la_emitchar initializer.\n\t(auto_language::emitchar): New member function.\n\t* language.h (language_data): Delete la_emitchar field.\n\t(language_defn::emitchar): New member field declaration.\n\t(LA_EMIT_CHAR): Update call to emitchar.\n\t* m2-lang.c (m2_emit_char): Rename to m2_language::emitchar.\n\t(m2_language_data): Delete la_emitchar initializer.\n\t(m2_language::emitchar): New member function, implementation from\n\tm2_emit_char.\n\t* objc-lang.c (objc_language_data): Delete la_emitchar\n\tinitializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_emit_char): Rename to pascal_language::emitchar.\n\t(pascal_language_data): Delete la_emitchar initializer.\n\t(pascal_language::emitchar): New member function, implementation\n\tfrom pascal_emit_char.\n\t* rust-lang.c (rust_emitchar): Rename to rust_language::emitchar.\n\t(rust_language_data): Delete la_emitchar initializer.\n\t(rust_language::emitchar): New member function, implementation\n\tfrom rust_emitchar.",
    "tree": {
      "sha": "6ec122e770ec9883edf23d867e98c4ee2b920f12",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ec122e770ec9883edf23d867e98c4ee2b920f12"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1bf9c36374d9c758bc49dc18dca7acf0719e290d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bf9c36374d9c758bc49dc18dca7acf0719e290d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1bf9c36374d9c758bc49dc18dca7acf0719e290d"
    }
  ],
  "stats": {
    "total": 325,
    "additions": 173,
    "deletions": 152
  },
  "files": [
    {
      "sha": "d402fb590b6fa693334a53a6ac3b746092f275c5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -1,3 +1,44 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (emit_char): Renamed to ada_language::emitchar.\n+\t(ada_language_data): Delete la_emitchar initializer.\n+\t(ada_language::emitchar): New member function, implementation from\n+\temit_char.\n+\t* c-lang.c (c_language_data): Delete la_emitchar initializer.\n+\t(cplus_language_data): Likewise.\n+\t(asm_language_data): Likewise.\n+\t(minimal_language_data): Likewise.\n+\t* d-lang.c (d_language_data): Likewise.\n+\t* f-lang.c (f_emit_char): Rename to f_language::emitchar.\n+\t(f_language_data): Delete la_emitchar initializer.\n+\t(f_language::emitchar): New member function, implementation from\n+\tf_emit_char.\n+\t* go-lang.c (go_language_data): Delete la_emitchar initializer.\n+\t* language.c (unk_lang_emit_char): Delete.\n+\t(language_defn::emitchar): New member function definition.\n+\t(unknown_language_data): Delete la_emitchar initializer.\n+\t(unknown_language::emitchar): New member function.\n+\t(auto_language_data): Delete la_emitchar initializer.\n+\t(auto_language::emitchar): New member function.\n+\t* language.h (language_data): Delete la_emitchar field.\n+\t(language_defn::emitchar): New member field declaration.\n+\t(LA_EMIT_CHAR): Update call to emitchar.\n+\t* m2-lang.c (m2_emit_char): Rename to m2_language::emitchar.\n+\t(m2_language_data): Delete la_emitchar initializer.\n+\t(m2_language::emitchar): New member function, implementation from\n+\tm2_emit_char.\n+\t* objc-lang.c (objc_language_data): Delete la_emitchar\n+\tinitializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_emit_char): Rename to pascal_language::emitchar.\n+\t(pascal_language_data): Delete la_emitchar initializer.\n+\t(pascal_language::emitchar): New member function, implementation\n+\tfrom pascal_emit_char.\n+\t* rust-lang.c (rust_emitchar): Rename to rust_language::emitchar.\n+\t(rust_language_data): Delete la_emitchar initializer.\n+\t(rust_language::emitchar): New member function, implementation\n+\tfrom rust_emitchar.\n+\n 2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (resolve): Rename to ada_language::post_parser."
    },
    {
      "sha": "7858679f5bcd6ea4a3f5c91874b50ce95620666d",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -13504,14 +13504,6 @@ enum ada_primitive_types {\n \f\n \t\t\t\t/* Language vector */\n \n-/* Not really used, but needed in the ada_language_defn.  */\n-\n-static void\n-emit_char (int c, struct type *type, struct ui_file *stream, int quoter)\n-{\n-  ada_emit_char (c, type, stream, quoter, 1);\n-}\n-\n static const struct exp_descriptor ada_exp_descriptor = {\n   ada_print_subexp,\n   ada_operator_length,\n@@ -13691,7 +13683,6 @@ extern const struct language_data ada_language_data =\n   &ada_exp_descriptor,\n   ada_printchar,                /* Print a character constant */\n   ada_printstr,                 /* Function to print string constant */\n-  emit_char,                    /* Function to print single char (not used) */\n   ada_print_typedef,            /* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n@@ -14116,6 +14107,14 @@ class ada_language : public language_defn\n     resolve_subexp (expp, &pc, 1, context_type, completing, tracker);\n   }\n \n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    ada_emit_char (ch, chtype, stream, quoter, 1);\n+  }\n+\n protected:\n   /* See language.h.  */\n "
    },
    {
      "sha": "fbd564d0415ddfde4eed66ac1627a1922ca5a32c",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -891,7 +891,6 @@ extern const struct language_data c_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n-  c_emit_char,\t\t\t/* Print a single char */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -997,7 +996,6 @@ extern const struct language_data cplus_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n-  c_emit_char,\t\t\t/* Print a single char */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",                       /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -1200,7 +1198,6 @@ extern const struct language_data asm_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n-  c_emit_char,\t\t\t/* Print a single char */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -1261,7 +1258,6 @@ extern const struct language_data minimal_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n-  c_emit_char,\t\t\t/* Print a single char */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "fa6df337389daf343881f5db2784f936c94ee09c",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -144,7 +144,6 @@ extern const struct language_data d_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant.  */\n   c_printstr,\t\t\t/* Function to print string constant.  */\n-  c_emit_char,\t\t\t/* Print a single char.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   \"this\","
    },
    {
      "sha": "90b2e861286c47310b89bbbfb548734c618493b1",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 17,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -42,8 +42,6 @@\n /* Local functions */\n \n static void f_printchar (int c, struct type *type, struct ui_file * stream);\n-static void f_emit_char (int c, struct type *type,\n-\t\t\t struct ui_file * stream, int quoter);\n \n /* Return the encoding that should be used for the character type\n    TYPE.  */\n@@ -72,20 +70,6 @@ f_get_encoding (struct type *type)\n   return encoding;\n }\n \n-/* Print the character C on STREAM as part of the contents of a literal\n-   string whose delimiter is QUOTER.  Note that that format for printing\n-   characters and strings is language specific.\n-   FIXME:  This is a copy of the same function from c-exp.y.  It should\n-   be replaced with a true F77 version.  */\n-\n-static void\n-f_emit_char (int c, struct type *type, struct ui_file *stream, int quoter)\n-{\n-  const char *encoding = f_get_encoding (type);\n-\n-  generic_emit_char (c, type, stream, quoter, encoding);\n-}\n-\n /* Implementation of la_printchar.  */\n \n static void\n@@ -566,7 +550,6 @@ extern const struct language_data f_language_data =\n   &exp_descriptor_f,\n   f_printchar,\t\t\t/* Print character constant */\n   f_printstr,\t\t\t/* function to print string constant */\n-  f_emit_char,\t\t\t/* Function to print a single character */\n   f_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                    \t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -718,6 +701,15 @@ class f_language : public language_defn\n     return f_parse (ps);\n   }\n \n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    const char *encoding = f_get_encoding (chtype);\n+    generic_emit_char (ch, chtype, stream, quoter, encoding);\n+  }\n+\n protected:\n \n   /* See language.h.  */"
    },
    {
      "sha": "f167543278acc70c9fdeda19bf6c498d2efe11e4",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -529,7 +529,6 @@ extern const struct language_data go_language_data =\n   &exp_descriptor_c,\n   c_printchar,\t\t\t/* Print a character constant.  */\n   c_printstr,\t\t\t/* Function to print string constant.  */\n-  c_emit_char,\t\t\t/* Print a single char.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   NULL,\t\t\t\t/* name_of_this */"
    },
    {
      "sha": "6778646becd3804a40a75105191e4c7b70d6c5fc",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 25,
      "deletions": 15,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -49,9 +49,6 @@\n \n static void set_range_case (void);\n \n-static void unk_lang_emit_char (int c, struct type *type,\n-\t\t\t\tstruct ui_file *stream, int quoter);\n-\n static void unk_lang_printchar (int c, struct type *type,\n \t\t\t\tstruct ui_file *stream);\n \n@@ -657,6 +654,15 @@ language_defn::value_print_inner\n   return c_value_print_inner (val, stream, recurse, options);\n }\n \n+/* See language.h.  */\n+\n+void\n+language_defn::emitchar (int ch, struct type *chtype,\n+\t\t\t struct ui_file * stream, int quoter) const\n+{\n+  c_emit_char (ch, chtype, stream, quoter);\n+}\n+\n /* The default implementation of the get_symbol_name_matcher_inner method\n    from the language_defn class.  Matches with strncmp_iw.  */\n \n@@ -722,16 +728,6 @@ default_is_string_type_p (struct type *type)\n   return (type->code ()  == TYPE_CODE_STRING);\n }\n \n-/* Define the language that is no language.  */\n-\n-static void\n-unk_lang_emit_char (int c, struct type *type, struct ui_file *stream,\n-\t\t    int quoter)\n-{\n-  error (_(\"internal error - unimplemented \"\n-\t   \"function unk_lang_emit_char called.\"));\n-}\n-\n static void\n unk_lang_printchar (int c, struct type *type, struct ui_file *stream)\n {\n@@ -779,7 +775,6 @@ extern const struct language_data unknown_language_data =\n   &exp_descriptor_standard,\n   unk_lang_printchar,\t\t/* Print character constant */\n   unk_lang_printstr,\n-  unk_lang_emit_char,\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",        \t    \t/* name_of_this */\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n@@ -848,6 +843,14 @@ class unknown_language : public language_defn\n     /* No parsing is done, just claim success.  */\n     return 1;\n   }\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    error (_(\"unimplemented unknown_language::emitchar called\"));\n+  }\n };\n \n /* Single instance of the unknown language class.  */\n@@ -869,7 +872,6 @@ extern const struct language_data auto_language_data =\n   &exp_descriptor_standard,\n   unk_lang_printchar,\t\t/* Print character constant */\n   unk_lang_printstr,\n-  unk_lang_emit_char,\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n@@ -938,6 +940,14 @@ class auto_language : public language_defn\n     /* No parsing is done, just claim success.  */\n     return 1;\n   }\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    error (_(\"unimplemented auto_language::emitchar called\"));\n+  }\n };\n \n /* Single instance of the fake \"auto\" language.  */"
    },
    {
      "sha": "612afb3c5f131fd1e9d19d857fd47a1f5c431508",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -233,9 +233,6 @@ struct language_data\n \t\t\t const char *encoding, int force_ellipses,\n \t\t\t const struct value_print_options *);\n \n-    void (*la_emitchar) (int ch, struct type *chtype,\n-\t\t\t struct ui_file * stream, int quoter);\n-\n     /* Print a typedef using syntax appropriate for this language.\n        TYPE is the underlying type.  NEW_SYMBOL is the symbol naming\n        the type.  STREAM is the output stream on which to print.  */\n@@ -544,6 +541,12 @@ struct language_defn : language_data\n     /* By default the post-parser does nothing.  */\n   }\n \n+  /* Print the character CH (of type CHTYPE) on STREAM as part of the\n+     contents of a literal string whose delimiter is QUOTER.  */\n+\n+  virtual void emitchar (int ch, struct type *chtype,\n+\t\t\t struct ui_file *stream, int quoter) const;\n+\n protected:\n \n   /* This is the overridable part of the GET_SYMBOL_NAME_MATCHER method.\n@@ -651,7 +654,7 @@ extern enum language set_language (enum language);\n   (current_language->la_printstr(stream, elttype, string, length, \\\n \t\t\t\t encoding, force_ellipses,options))\n #define LA_EMIT_CHAR(ch, type, stream, quoter) \\\n-  (current_language->la_emitchar(ch, type, stream, quoter))\n+  (current_language->emitchar (ch, type, stream, quoter))\n \n #define LA_PRINT_ARRAY_INDEX(index_type, index_value, stream, options)\t\\\n   (current_language->print_array_index(index_type, index_value, stream, \\"
    },
    {
      "sha": "d8f7f00528085dcef4b1f6e1cc64c34abb041ca0",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 45,
      "deletions": 54,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -30,59 +30,6 @@\n #include \"gdbarch.h\"\n \n static void m2_printchar (int, struct type *, struct ui_file *);\n-static void m2_emit_char (int, struct type *, struct ui_file *, int);\n-\n-/* Print the character C on STREAM as part of the contents of a literal\n-   string whose delimiter is QUOTER.  Note that that format for printing\n-   characters and strings is language specific.\n-   FIXME:  This is a copy of the same function from c-exp.y.  It should\n-   be replaced with a true Modula version.  */\n-\n-static void\n-m2_emit_char (int c, struct type *type, struct ui_file *stream, int quoter)\n-{\n-\n-  c &= 0xFF;\t\t\t/* Avoid sign bit follies.  */\n-\n-  if (PRINT_LITERAL_FORM (c))\n-    {\n-      if (c == '\\\\' || c == quoter)\n-\t{\n-\t  fputs_filtered (\"\\\\\", stream);\n-\t}\n-      fprintf_filtered (stream, \"%c\", c);\n-    }\n-  else\n-    {\n-      switch (c)\n-\t{\n-\tcase '\\n':\n-\t  fputs_filtered (\"\\\\n\", stream);\n-\t  break;\n-\tcase '\\b':\n-\t  fputs_filtered (\"\\\\b\", stream);\n-\t  break;\n-\tcase '\\t':\n-\t  fputs_filtered (\"\\\\t\", stream);\n-\t  break;\n-\tcase '\\f':\n-\t  fputs_filtered (\"\\\\f\", stream);\n-\t  break;\n-\tcase '\\r':\n-\t  fputs_filtered (\"\\\\r\", stream);\n-\t  break;\n-\tcase '\\033':\n-\t  fputs_filtered (\"\\\\e\", stream);\n-\t  break;\n-\tcase '\\007':\n-\t  fputs_filtered (\"\\\\a\", stream);\n-\t  break;\n-\tdefault:\n-\t  fprintf_filtered (stream, \"\\\\%.3o\", (unsigned int) c);\n-\t  break;\n-\t}\n-    }\n-}\n \n /* FIXME:  This is a copy of the same function from c-exp.y.  It should\n    be replaced with a true Modula version.  */\n@@ -364,7 +311,6 @@ extern const struct language_data m2_language_data =\n   &exp_descriptor_modula2,\n   m2_printchar,\t\t\t/* Print character constant */\n   m2_printstr,\t\t\t/* function to print string constant */\n-  m2_emit_char,\t\t\t/* Function to print a single character */\n   m2_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t                /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -435,6 +381,51 @@ class m2_language : public language_defn\n   {\n     return m2_parse (ps);\n   }\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    ch &= 0xFF;\t\t\t/* Avoid sign bit follies.  */\n+\n+    if (PRINT_LITERAL_FORM (ch))\n+      {\n+\tif (ch == '\\\\' || ch == quoter)\n+\t  fputs_filtered (\"\\\\\", stream);\n+\tfprintf_filtered (stream, \"%c\", ch);\n+      }\n+    else\n+      {\n+\tswitch (ch)\n+\t  {\n+\t  case '\\n':\n+\t    fputs_filtered (\"\\\\n\", stream);\n+\t    break;\n+\t  case '\\b':\n+\t    fputs_filtered (\"\\\\b\", stream);\n+\t    break;\n+\t  case '\\t':\n+\t    fputs_filtered (\"\\\\t\", stream);\n+\t    break;\n+\t  case '\\f':\n+\t    fputs_filtered (\"\\\\f\", stream);\n+\t    break;\n+\t  case '\\r':\n+\t    fputs_filtered (\"\\\\r\", stream);\n+\t    break;\n+\t  case '\\033':\n+\t    fputs_filtered (\"\\\\e\", stream);\n+\t    break;\n+\t  case '\\007':\n+\t    fputs_filtered (\"\\\\a\", stream);\n+\t    break;\n+\t  default:\n+\t    fprintf_filtered (stream, \"\\\\%.3o\", (unsigned int) ch);\n+\t    break;\n+\t  }\n+      }\n+  }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "ffde14a97aa01ad8086e08bd936e9bedd4832a1a",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -339,7 +339,6 @@ extern const struct language_data objc_language_data =\n   &exp_descriptor_standard,\n   c_printchar,\t\t       /* Print a character constant */\n   c_printstr,\t\t       /* Function to print string constant */\n-  c_emit_char,\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"self\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "3789c211ca0a79a1c4b1b41509068a89d01a9385",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -1018,7 +1018,6 @@ extern const struct language_data opencl_language_data =\n   &exp_descriptor_opencl,\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n-  c_emit_char,\t\t\t/* Print a single char */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "b0465f4a35563121e1b760f8834833e3bf5f03be",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 12,
      "deletions": 18,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -192,23 +192,6 @@ pascal_one_char (int c, struct ui_file *stream, int *in_quotes)\n     }\n }\n \n-static void pascal_emit_char (int c, struct type *type,\n-\t\t\t      struct ui_file *stream, int quoter);\n-\n-/* Print the character C on STREAM as part of the contents of a literal\n-   string whose delimiter is QUOTER.  Note that that format for printing\n-   characters and strings is language specific.  */\n-\n-static void\n-pascal_emit_char (int c, struct type *type, struct ui_file *stream, int quoter)\n-{\n-  int in_quotes = 0;\n-\n-  pascal_one_char (c, stream, &in_quotes);\n-  if (in_quotes)\n-    fputs_filtered (\"'\", stream);\n-}\n-\n void\n pascal_printchar (int c, struct type *type, struct ui_file *stream)\n {\n@@ -395,7 +378,6 @@ extern const struct language_data pascal_language_data =\n   &exp_descriptor_standard,\n   pascal_printchar,\t\t/* Print a character constant */\n   pascal_printstr,\t\t/* Function to print string constant */\n-  pascal_emit_char,\t\t/* Print a single char */\n   pascal_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -497,6 +479,18 @@ class pascal_language : public language_defn\n   {\n     return pascal_parse (ps);\n   }\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    int in_quotes = 0;\n+\n+    pascal_one_char (ch, stream, &in_quotes);\n+    if (in_quotes)\n+      fputs_filtered (\"'\", stream);\n+  }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "2d6cb8bf0b1b268fa0f18352d5888939e2022808",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 27,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec8cec5b96e2ebbd5e25a737c69d311970a8b219/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=ec8cec5b96e2ebbd5e25a737c69d311970a8b219",
      "patch": "@@ -281,32 +281,6 @@ rust_get_trait_object_pointer (struct value *value)\n \n \f\n \n-/* la_emitchar implementation for Rust.  */\n-\n-static void\n-rust_emitchar (int c, struct type *type, struct ui_file *stream, int quoter)\n-{\n-  if (!rust_chartype_p (type))\n-    generic_emit_char (c, type, stream, quoter,\n-\t\t       target_charset (get_type_arch (type)));\n-  else if (c == '\\\\' || c == quoter)\n-    fprintf_filtered (stream, \"\\\\%c\", c);\n-  else if (c == '\\n')\n-    fputs_filtered (\"\\\\n\", stream);\n-  else if (c == '\\r')\n-    fputs_filtered (\"\\\\r\", stream);\n-  else if (c == '\\t')\n-    fputs_filtered (\"\\\\t\", stream);\n-  else if (c == '\\0')\n-    fputs_filtered (\"\\\\0\", stream);\n-  else if (c >= 32 && c <= 127 && isprint (c))\n-    fputc_filtered (c, stream);\n-  else if (c <= 255)\n-    fprintf_filtered (stream, \"\\\\x%02x\", c);\n-  else\n-    fprintf_filtered (stream, \"\\\\u{%06x}\", c);\n-}\n-\n /* la_printchar implementation for Rust.  */\n \n static void\n@@ -1991,7 +1965,6 @@ extern const struct language_data rust_language_data =\n   &exp_descriptor_rust,\n   rust_printchar,\t\t/* Print a character constant */\n   rust_printstr,\t\t/* Function to print string constant */\n-  rust_emitchar,\t\t/* Print a single char */\n   rust_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -2147,6 +2120,32 @@ class rust_language : public language_defn\n   {\n     return rust_parse (ps);\n   }\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    if (!rust_chartype_p (chtype))\n+      generic_emit_char (ch, chtype, stream, quoter,\n+\t\t\t target_charset (get_type_arch (chtype)));\n+    else if (ch == '\\\\' || ch == quoter)\n+      fprintf_filtered (stream, \"\\\\%c\", ch);\n+    else if (ch == '\\n')\n+      fputs_filtered (\"\\\\n\", stream);\n+    else if (ch == '\\r')\n+      fputs_filtered (\"\\\\r\", stream);\n+    else if (ch == '\\t')\n+      fputs_filtered (\"\\\\t\", stream);\n+    else if (ch == '\\0')\n+      fputs_filtered (\"\\\\0\", stream);\n+    else if (ch >= 32 && ch <= 127 && isprint (ch))\n+      fputc_filtered (ch, stream);\n+    else if (ch <= 255)\n+      fprintf_filtered (stream, \"\\\\x%02x\", ch);\n+    else\n+      fprintf_filtered (stream, \"\\\\u{%06x}\", ch);\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}