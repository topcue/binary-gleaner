{
  "sha": "e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTI0MmZkMTI0OWFlODVhOTdmMDhmOTVkNWM2MWY0Y2JlM2I5MDZlMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-04-09T16:32:26Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-04-09T16:32:26Z"
    },
    "message": "Use -qualified flag when setting temporary breakpoint in start command\n\nWhen using the \"start\" command, GDB puts a temporary breakpoint on the\n\"main\" symbol (we literally invoke the tbreak command).  However, since\nit does wild matching by default, it also puts a breakpoint on any C++\nmethod or \"main\" function in a namespace.  For example, when debugging\nGDB, it creates a total of 24 locations:\n\n  (gdb) start\n  Temporary breakpoint 1 at 0x198c1e9: main. (24 locations)\n\nas there are a bunch of methods called main in the selftests, such as\n\n  selftests::string_view::capacity_1::main()\n\nIf such method was called in the constructor of a global object, or a\nfunction marked with the attribute \"constructor\", then we would stop at\nthe wrong place.  Also, this causes a few extra symtabs (those that\ncontain the \"wrong\" mains) to be expanded for nothing.\n\nThe dummiest, most straightforward solution is to add -qualified when\ninvoking tbreak.  With this patch, \"start\" creates a single-location\nbreakpoint, as expected.\n\nI copied the start.exp test to start-cpp.exp and made it use a C++ test\nfile, which contains two main functions.  The new test verifies that the\noutput of \"start\" is the output we get when we set a single-location\nbreakpoint.\n\ngdb/ChangeLog:\n\n\t* infcmd.c (run_command_1): Pass -qualified to tbreak when usind\n\tthe \"start\" command.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/start-cpp.exp: New file.\n\t* gdb.base/start-cpp.cc: New file.",
    "tree": {
      "sha": "79a3a53a561e442ee6dec6277b524292ddbe57bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/79a3a53a561e442ee6dec6277b524292ddbe57bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7e96e219a4fc703282ea5b0cc8845a96c01ca030",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e96e219a4fc703282ea5b0cc8845a96c01ca030",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7e96e219a4fc703282ea5b0cc8845a96c01ca030"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 84,
    "deletions": 1
  },
  "files": [
    {
      "sha": "7af9b9047018d8df8923353eb6301a445ec39ca4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-09  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* infcmd.c (run_command_1): Pass -qualified to tbreak when usind\n+\tthe \"start\" command.\n+\n 2019-04-08  Kevin Buettner  <kevinb@redhat.com>\n \n \t* python/py-inferior.c (infpy_thread_from_thread_handle):"
    },
    {
      "sha": "178f89e95207f9da1ec229f7f1974305e329face",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
      "patch": "@@ -604,7 +604,10 @@ run_command_1 (const char *args, int from_tty, enum run_how run_how)\n \n   /* Insert temporary breakpoint in main function if requested.  */\n   if (run_how == RUN_STOP_AT_MAIN)\n-    tbreak_command (main_name (), 0);\n+    {\n+      std::string arg = string_printf (\"-qualified %s\", main_name ());\n+      tbreak_command (arg.c_str (), 0);\n+    }\n \n   exec_file = get_exec_file (0);\n "
    },
    {
      "sha": "5c7cadf10a19aeb62a93e087a89f14a67540d558",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-09  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/start-cpp.exp: New file.\n+\t* gdb.base/start-cpp.cc: New file.\n+\n 2019-04-08  Kevin Buettner  <kevinb@redhat.com>\n \n \t* gdb.python/py-thrhandle.exp: Adjust tests to call"
    },
    {
      "sha": "1d0fd7d323c95ec3e03e9626adb26c7bdb6d5ccd",
      "filename": "gdb/testsuite/gdb.base/start-cpp.cc",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/gdb.base/start-cpp.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/gdb.base/start-cpp.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/start-cpp.cc?ref=e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
      "patch": "@@ -0,0 +1,33 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+namespace foo\n+{\n+\n+int\n+main ()\n+{\n+  return 1;\n+}\n+\n+} /* namespace foo */\n+\n+int\n+main ()\n+{\n+  return foo::main ();\n+}"
    },
    {
      "sha": "5f98b92ffa41669693512f21dfdef5498c4e2704",
      "filename": "gdb/testsuite/gdb.base/start-cpp.exp",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/gdb.base/start-cpp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e242fd1249ae85a97f08f95d5c61f4cbe3b906e0/gdb/testsuite/gdb.base/start-cpp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/start-cpp.exp?ref=e242fd1249ae85a97f08f95d5c61f4cbe3b906e0",
      "patch": "@@ -0,0 +1,37 @@\n+# Copyright 2005-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile .cc\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+# This is a testcase specifically for the `start' GDB command.  For regular\n+# stop-in-main goal in the testcases consider using `runto_main' instead.\n+\n+# In this C++ version of the test (as opposed to start.exp), we specifically\n+# test that the temporary breakpoint created by the start command has a single\n+# location, even if we have a function named \"main\" in a non-root namespace.\n+\n+# For C++ programs, \"start\" should stop in main().\n+if { [gdb_start_cmd] < 0 } {\n+    untested start\n+    return -1\n+}\n+\n+gdb_test \"\" \\\n+         \"Temporary breakpoint $decimal at $hex: file.*main \\\\(\\\\) at .*start-cpp.cc:.*\" \\\n+         \"start\""
    }
  ]
}