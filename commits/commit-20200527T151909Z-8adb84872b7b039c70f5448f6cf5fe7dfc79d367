{
  "sha": "8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGFkYjg0ODcyYjdiMDM5YzcwZjU0NDhmNmNmNWZlN2RmYzc5ZDM2Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:19:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:09Z"
    },
    "message": "Split type_unit_group\n\ntype_unit_group has links to the compunit_symtab and other symtabs.\nHowever, once this object is shared across objfiles, this will no\nlonger be ok.\n\nThis patch introduces a new type_unit_group_unshareable and arranges to\nstore a map from type unit groups to type_unit_group_unshareable objects\nin dwarf2_per_objfile.\n\ngdb/ChangeLog:\n\nYYYY-MM-DD  Tom Tromey  <tom@tromey.com>\nYYYY-MM-DD  Simon Marchi  <simon.marchi@efficios.com>\n\n\t* dwarf2/read.h (struct type_unit_group_unshareable): New.\n\t(struct dwarf2_per_objfile) <type_units>: New member.\n\t<get_type_unit_group_unshareable>: New method.\n\t* dwarf2/read.c (struct type_unit_group) <compunit_symtab,\n\tnum_symtabs, symtabs>: Remove; move to\n\ttype_unit_group_unshareable.\n\t(dwarf2_per_objfile::get_type_unit_group_unshareable): New.\n\t(process_full_type_unit, dwarf2_cu::setup_type_unit_groups)\n\t(dwarf2_cu::setup_type_unit_groups): Use type_unit_group_unshareable.\n\nChange-Id: I1fec2fab59e0ec40fee3614fc821172a469c0e41",
    "tree": {
      "sha": "22530bcf3ab77062a35551b3d5dfbd697e8c8f95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22530bcf3ab77062a35551b3d5dfbd697e8c8f95"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "127bbf4b50c31b75b9d4c0ecc6b014dbd7ec38f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/127bbf4b50c31b75b9d4c0ecc6b014dbd7ec38f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/127bbf4b50c31b75b9d4c0ecc6b014dbd7ec38f9"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 83,
    "deletions": 26
  },
  "files": [
    {
      "sha": "f821370624324651f044aefc5583c2227e22b1f7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
      "patch": "@@ -1,3 +1,16 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\t    Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (struct type_unit_group_unshareable): New.\n+\t(struct dwarf2_per_objfile) <type_units>: New member.\n+\t<get_type_unit_group_unshareable>: New method.\n+\t* dwarf2/read.c (struct type_unit_group) <compunit_symtab,\n+\tnum_symtabs, symtabs>: Remove; move to\n+\ttype_unit_group_unshareable.\n+\t(dwarf2_per_objfile::get_type_unit_group_unshareable): New.\n+\t(process_full_type_unit, dwarf2_cu::setup_type_unit_groups)\n+\t(dwarf2_cu::setup_type_unit_groups): Use type_unit_group_unshareable.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_cu_data):"
    },
    {
      "sha": "53def0c87eb7d3a0a979a4bb6988d12b7ea5816b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 32,
      "deletions": 26,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
      "patch": "@@ -614,7 +614,9 @@ struct stmt_list_hash\n };\n \n /* Each element of dwarf2_per_bfd->type_unit_groups is a pointer to\n-   an object of this type.  */\n+   an object of this type.  This contains elements of type unit groups\n+   that can be shared across objfiles.  The non-shareable parts are in\n+   type_unit_group_unshareable.  */\n \n struct type_unit_group\n {\n@@ -629,23 +631,8 @@ struct type_unit_group\n      and is deleted afterwards and not used again.  */\n   std::vector<signatured_type *> *tus;\n \n-  /* The compunit symtab.\n-     Type units in a group needn't all be defined in the same source file,\n-     so we create an essentially anonymous symtab as the compunit symtab.  */\n-  struct compunit_symtab *compunit_symtab;\n-\n   /* The data used to construct the hash key.  */\n   struct stmt_list_hash hash;\n-\n-  /* The symbol tables for this TU (obtained from the files listed in\n-     DW_AT_stmt_list).\n-     WARNING: The order of entries here must match the order of entries\n-     in the line header.  After the first TU using this type_unit_group, the\n-     line header for the subsequent TUs is recreated from this.  This is done\n-     because we need to use the same symtabs for each TU using the same\n-     DW_AT_stmt_list value.  Also note that symtabs may be repeated here,\n-     there's no guarantee the line header doesn't have duplicate entries.  */\n-  struct symtab **symtabs;\n };\n \n /* These sections are what may appear in a (real or virtual) DWO file.  */\n@@ -9628,6 +9615,21 @@ rust_union_quirks (struct dwarf2_cu *cu)\n   cu->rust_unions.clear ();\n }\n \n+/* See read.h.  */\n+\n+type_unit_group_unshareable *\n+dwarf2_per_objfile::get_type_unit_group_unshareable (type_unit_group *tu_group)\n+{\n+  auto iter = this->m_type_units.find (tu_group);\n+  if (iter != this->m_type_units.end ())\n+    return iter->second.get ();\n+\n+  type_unit_group_unshareable_up uniq (new type_unit_group_unshareable);\n+  type_unit_group_unshareable *result = uniq.get ();\n+  this->m_type_units[tu_group] = std::move (uniq);\n+  return result;\n+}\n+\n /* A helper function for computing the list of all symbol tables\n    included by PER_CU.  */\n \n@@ -9883,11 +9885,13 @@ process_full_type_unit (dwarf2_per_cu_data *per_cu,\n      If this is the first TU to use this symtab, complete the construction\n      of it with end_expandable_symtab.  Otherwise, complete the addition of\n      this TU's symbols to the existing symtab.  */\n-  if (sig_type->type_unit_group->compunit_symtab == NULL)\n+  type_unit_group_unshareable *tug_unshare =\n+    dwarf2_per_objfile->get_type_unit_group_unshareable (sig_type->type_unit_group);\n+  if (tug_unshare->compunit_symtab == NULL)\n     {\n       buildsym_compunit *builder = cu->get_builder ();\n       cust = builder->end_expandable_symtab (0, SECT_OFF_TEXT (objfile));\n-      sig_type->type_unit_group->compunit_symtab = cust;\n+      tug_unshare->compunit_symtab = cust;\n \n       if (cust != NULL)\n \t{\n@@ -9903,7 +9907,7 @@ process_full_type_unit (dwarf2_per_cu_data *per_cu,\n   else\n     {\n       cu->get_builder ()->augment_type_symtab ();\n-      cust = sig_type->type_unit_group->compunit_symtab;\n+      cust = tug_unshare->compunit_symtab;\n     }\n \n   dwarf2_per_objfile->set_symtab (per_cu, cust);\n@@ -11042,7 +11046,9 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n      do it again, we could fake it and just recreate the part we need\n      (file name,index -> symtab mapping).  If data shows this optimization\n      is useful we can do it then.  */\n-  first_time = tu_group->compunit_symtab == NULL;\n+  type_unit_group_unshareable *tug_unshare\n+    = per_objfile->get_type_unit_group_unshareable (tu_group);\n+  first_time = tug_unshare->compunit_symtab == NULL;\n \n   /* We have to handle the case of both a missing DW_AT_stmt_list or bad\n      debug info.  */\n@@ -11058,9 +11064,9 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n \tstart_symtab (\"\", NULL, 0);\n       else\n \t{\n-\t  gdb_assert (tu_group->symtabs == NULL);\n+\t  gdb_assert (tug_unshare->symtabs == NULL);\n \t  gdb_assert (m_builder == nullptr);\n-\t  struct compunit_symtab *cust = tu_group->compunit_symtab;\n+\t  struct compunit_symtab *cust = tug_unshare->compunit_symtab;\n \t  m_builder.reset (new struct buildsym_compunit\n \t\t\t   (COMPUNIT_OBJFILE (cust), \"\",\n \t\t\t    COMPUNIT_DIRNAME (cust),\n@@ -11083,7 +11089,7 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n \t process_full_type_unit still needs to know if this is the first\n \t time.  */\n \n-      tu_group->symtabs\n+      tug_unshare->symtabs\n \t= XOBNEWVEC (&COMPUNIT_OBJFILE (cust)->objfile_obstack,\n \t\t     struct symtab *, line_header->file_names_size ());\n \n@@ -11106,13 +11112,13 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n \t    }\n \n \t  fe.symtab = b->get_current_subfile ()->symtab;\n-\t  tu_group->symtabs[i] = fe.symtab;\n+\t  tug_unshare->symtabs[i] = fe.symtab;\n \t}\n     }\n   else\n     {\n       gdb_assert (m_builder == nullptr);\n-      struct compunit_symtab *cust = tu_group->compunit_symtab;\n+      struct compunit_symtab *cust = tug_unshare->compunit_symtab;\n       m_builder.reset (new struct buildsym_compunit\n \t\t       (COMPUNIT_OBJFILE (cust), \"\",\n \t\t\tCOMPUNIT_DIRNAME (cust),\n@@ -11124,7 +11130,7 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n       for (i = 0; i < file_names.size (); ++i)\n \t{\n \t  file_entry &fe = file_names[i];\n-\t  fe.symtab = tu_group->symtabs[i];\n+\t  fe.symtab = tug_unshare->symtabs[i];\n \t}\n     }\n "
    },
    {
      "sha": "13d31a97d3d7b2a9c852e5eb2ee82d0936dbe489",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8adb84872b7b039c70f5448f6cf5fe7dfc79d367/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
      "patch": "@@ -47,6 +47,7 @@ struct dwarf2_per_cu_data;\n struct mapped_index;\n struct mapped_debug_names;\n struct signatured_type;\n+struct type_unit_group;\n \n /* One item on the queue of compilation units to read in full symbols\n    for.  */\n@@ -265,6 +266,30 @@ struct dwarf2_per_bfd\n   size_t m_num_psymtabs = 0;\n };\n \n+/* This is the per-objfile data associated with a type_unit_group.  */\n+\n+struct type_unit_group_unshareable\n+{\n+  /* The compunit symtab.\n+     Type units in a group needn't all be defined in the same source file,\n+     so we create an essentially anonymous symtab as the compunit symtab.  */\n+  struct compunit_symtab *compunit_symtab = nullptr;\n+\n+  /* The number of symtabs from the line header.\n+     The value here must match line_header.num_file_names.  */\n+  unsigned int num_symtabs = 0;\n+\n+  /* The symbol tables for this TU (obtained from the files listed in\n+     DW_AT_stmt_list).\n+     WARNING: The order of entries here must match the order of entries\n+     in the line header.  After the first TU using this type_unit_group, the\n+     line header for the subsequent TUs is recreated from this.  This is done\n+     because we need to use the same symtabs for each TU using the same\n+     DW_AT_stmt_list value.  Also note that symtabs may be repeated here,\n+     there's no guarantee the line header doesn't have duplicate entries.  */\n+  struct symtab **symtabs = nullptr;\n+};\n+\n /* Collection of data recorded per objfile.\n    This hangs off of dwarf2_objfile_data_key.\n \n@@ -304,6 +329,11 @@ struct dwarf2_per_objfile\n   /* Set the compunit_symtab associated to PER_CU.  */\n   void set_symtab (const dwarf2_per_cu_data *per_cu, compunit_symtab *symtab);\n \n+/* Get the type_unit_group_unshareable corresponding to TU_GROUP.  If one\n+   does not exist, create it.  */\n+  type_unit_group_unshareable *get_type_unit_group_unshareable\n+    (type_unit_group *tu_group);\n+\n   /* Find an integer type SIZE_IN_BYTES bytes in size and return it.\n      UNSIGNED_P controls if the integer is unsigned or not.  */\n   struct type *int_type (int size_in_bytes, bool unsigned_p) const;\n@@ -325,6 +355,14 @@ struct dwarf2_per_objfile\n      is indexed by dwarf2_per_cu_data::index.  A NULL value means\n      that the CU/TU has not been expanded yet.  */\n   std::vector<compunit_symtab *> m_symtabs;\n+\n+  /* Map from a type unit group to the corresponding unshared\n+     structure.  */\n+  typedef std::unique_ptr<type_unit_group_unshareable>\n+    type_unit_group_unshareable_up;\n+\n+  std::unordered_map<type_unit_group *, type_unit_group_unshareable_up>\n+    m_type_units;\n };\n \n /* Get the dwarf2_per_objfile associated to OBJFILE.  */"
    }
  ]
}