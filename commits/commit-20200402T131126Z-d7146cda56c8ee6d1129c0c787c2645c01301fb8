{
  "sha": "d7146cda56c8ee6d1129c0c787c2645c01301fb8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDcxNDZjZGE1NmM4ZWU2ZDExMjljMGM3ODdjMjY0NWMwMTMwMWZiOA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:26Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:26Z"
    },
    "message": "gdbserver/linux-low: turn 'breakpoint_at' into a method\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'breakpoint_at' linux target op into a method of\n\tlinux_process_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the op.\n\t(class linux_process_target) <low_breakpoint_at>: Declare.\n\n\tUpdate the callers below:\n\n\t* linux-low.cc (linux_process_target::save_stop_reason)\n\t(linux_process_target::thread_still_has_status_pending)\n\t(linux_process_target::wait_1)\n\n\t* linux-x86-low.cc (class x86_target)\n\t<low_breakpoint_at>: Declare.\n\t(x86_breakpoint_at): Turn into...\n\t(x86_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<low_breakpoint_at>: Declare.\n\t(aarch64_breakpoint_at): Turn into...\n\t(aarch64_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-arm-low.cc (class arm_target)\n\t<low_breakpoint_at>: Declare.\n\t(arm_target::low_breakpoint_at): Define.\n\t(the_low_target): Remove the op field.\n\t* linux-bfin-low.cc (class bfin_target)\n\t<low_breakpoint_at>: Declare.\n\t(bfin_breakpoint_at): Turn into...\n\t(bfin_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-cris-low.cc (class cris_target)\n\t<low_breakpoint_at>: Declare.\n\t(cris_breakpoint_at): Turn into...\n\t(cris_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-crisv32-low.cc (class crisv32_target)\n\t<low_breakpoint_at>: Declare.\n\t(crisv32_breakpoint_at): Turn into...\n\t(crisv32_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ia64-low.cc (class ia64_target)\n\t<low_breakpoint_at>: Declare.\n\t(ia64_target::low_breakpoint_at): Define.\n\t* linux-m32r-low.cc (class m32r_target)\n\t<low_breakpoint_at>: Declare.\n\t(m32r_breakpoint_at): Turn into...\n\t(m32r_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-m68k-low.cc (class m68k_target)\n\t<low_breakpoint_at>: Declare.\n\t(m68k_breakpoint_at): Turn into...\n\t(m68k_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-mips-low.cc (class mips_target)\n\t<low_breakpoint_at>: Declare.\n\t(mips_breakpoint_at): Turn into...\n\t(mips_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-nios2-low.cc (class nios2_target)\n\t<low_breakpoint_at>: Declare.\n\t(nios2_breakpoint_at): Turn into...\n\t(nios2_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (class ppc_target)\n\t<low_breakpoint_at>: Declare.\n\t(ppc_breakpoint_at): Turn into...\n\t(ppc_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-riscv-low.cc (class riscv_target)\n\t<low_breakpoint_at>: Declare.\n\t(riscv_breakpoint_at): Turn into...\n\t(riscv_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-s390-low.cc (class s390_target)\n\t<low_breakpoint_at>: Declare.\n\t(s390_breakpoint_at): Turn into...\n\t(s390_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-sh-low.cc (class sh_target)\n\t<low_breakpoint_at>: Declare.\n\t(sh_breakpoint_at): Turn into...\n\t(sh_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-sparc-low.cc (class sparc_target)\n\t<low_breakpoint_at>: Declare.\n\t(sparc_breakpoint_at): Turn into...\n\t(sparc_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tic6x-low.cc (class tic6x_target)\n\t<low_breakpoint_at>: Declare.\n\t(tic6x_breakpoint_at): Turn into...\n\t(tic6x_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tile-low.cc (class tile_target)\n\t<low_breakpoint_at>: Declare.\n\t(tile_breakpoint_at): Turn into...\n\t(tile_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-xtensa-low.cc (class xtensa_target)\n\t<low_breakpoint_at>: Declare.\n\t(xtensa_breakpoint_at): Turn into...\n\t(xtensa_target::low_breakpoint_at): ...this.\n\t(the_low_target): Remove the op field.",
    "tree": {
      "sha": "3378e05edc6a8728070e018c80ab8b2f3359f38e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3378e05edc6a8728070e018c80ab8b2f3359f38e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d7146cda56c8ee6d1129c0c787c2645c01301fb8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7146cda56c8ee6d1129c0c787c2645c01301fb8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d7146cda56c8ee6d1129c0c787c2645c01301fb8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7146cda56c8ee6d1129c0c787c2645c01301fb8/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4807ea231eea599a474a9ad75a0552ef7217e1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4807ea231eea599a474a9ad75a0552ef7217e1f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4807ea231eea599a474a9ad75a0552ef7217e1f"
    }
  ],
  "stats": {
    "total": 358,
    "additions": 247,
    "deletions": 111
  },
  "files": [
    {
      "sha": "1750dbf511041730e7dce35c7e64960731b71178",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 107,
      "deletions": 0,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -1,3 +1,110 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'breakpoint_at' linux target op into a method of\n+\tlinux_process_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the op.\n+\t(class linux_process_target) <low_breakpoint_at>: Declare.\n+\n+\tUpdate the callers below:\n+\n+\t* linux-low.cc (linux_process_target::save_stop_reason)\n+\t(linux_process_target::thread_still_has_status_pending)\n+\t(linux_process_target::wait_1)\n+\n+\t* linux-x86-low.cc (class x86_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(x86_breakpoint_at): Turn into...\n+\t(x86_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(aarch64_breakpoint_at): Turn into...\n+\t(aarch64_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-arm-low.cc (class arm_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(arm_target::low_breakpoint_at): Define.\n+\t(the_low_target): Remove the op field.\n+\t* linux-bfin-low.cc (class bfin_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(bfin_breakpoint_at): Turn into...\n+\t(bfin_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-cris-low.cc (class cris_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(cris_breakpoint_at): Turn into...\n+\t(cris_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-crisv32-low.cc (class crisv32_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(crisv32_breakpoint_at): Turn into...\n+\t(crisv32_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ia64-low.cc (class ia64_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(ia64_target::low_breakpoint_at): Define.\n+\t* linux-m32r-low.cc (class m32r_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(m32r_breakpoint_at): Turn into...\n+\t(m32r_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m68k-low.cc (class m68k_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(m68k_breakpoint_at): Turn into...\n+\t(m68k_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-mips-low.cc (class mips_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(mips_breakpoint_at): Turn into...\n+\t(mips_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-nios2-low.cc (class nios2_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(nios2_breakpoint_at): Turn into...\n+\t(nios2_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (class ppc_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(ppc_breakpoint_at): Turn into...\n+\t(ppc_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-riscv-low.cc (class riscv_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(riscv_breakpoint_at): Turn into...\n+\t(riscv_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (class s390_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(s390_breakpoint_at): Turn into...\n+\t(s390_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sh-low.cc (class sh_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(sh_breakpoint_at): Turn into...\n+\t(sh_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sparc-low.cc (class sparc_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(sparc_breakpoint_at): Turn into...\n+\t(sparc_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tic6x-low.cc (class tic6x_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(tic6x_breakpoint_at): Turn into...\n+\t(tic6x_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tile-low.cc (class tile_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(tile_breakpoint_at): Turn into...\n+\t(tile_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-xtensa-low.cc (class xtensa_target)\n+\t<low_breakpoint_at>: Declare.\n+\t(xtensa_breakpoint_at): Turn into...\n+\t(xtensa_target::low_breakpoint_at): ...this.\n+\t(the_low_target): Remove the op field.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'decr_pc_after_break' linux_target_ops field into"
    },
    {
      "sha": "2fc38748e1becaa7e429c6cbbd825a66b96fca34",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -76,6 +76,8 @@ class aarch64_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -236,21 +238,20 @@ aarch64_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n    (aarch64_default_breakpoint).  */\n static const gdb_byte aarch64_breakpoint[] = {0x00, 0x00, 0x20, 0xd4};\n \n-/* Implementation of linux_target_ops method \"breakpoint_at\".  */\n+/* Implementation of linux target ops method \"low_breakpoint_at\".  */\n \n-static int\n-aarch64_breakpoint_at (CORE_ADDR where)\n+bool\n+aarch64_target::low_breakpoint_at (CORE_ADDR where)\n {\n   if (is_64bit_tdesc ())\n     {\n       gdb_byte insn[aarch64_breakpoint_len];\n \n-      the_target->read_memory (where, (unsigned char *) &insn,\n-\t\t\t       aarch64_breakpoint_len);\n+      read_memory (where, (unsigned char *) &insn, aarch64_breakpoint_len);\n       if (memcmp (insn, aarch64_breakpoint, aarch64_breakpoint_len) == 0)\n-\treturn 1;\n+\treturn true;\n \n-      return 0;\n+      return false;\n     }\n   else\n     return arm_breakpoint_at (where);\n@@ -3103,7 +3104,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_breakpoint_at,\n   aarch64_supports_z_point_type,\n   aarch64_insert_point,\n   aarch64_remove_point,"
    },
    {
      "sha": "afbe0beca62380e45fdfd21b554ec66f8562bf06",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -85,6 +85,8 @@ class arm_target : public linux_process_target\n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n \n   std::vector<CORE_ADDR> low_get_next_pcs (regcache *regcache) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -127,6 +129,12 @@ arm_target::sw_breakpoint_from_kind (int kind, int *size)\n   return arm_sw_breakpoint_from_kind (kind, size);\n }\n \n+bool\n+arm_target::low_breakpoint_at (CORE_ADDR pc)\n+{\n+  return arm_breakpoint_at (pc);\n+}\n+\n /* Information describing the hardware breakpoint capabilities.  */\n static struct\n {\n@@ -1085,7 +1093,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_breakpoint_at,\n   arm_supports_z_point_type,\n   arm_insert_point,\n   arm_remove_point,"
    },
    {
      "sha": "351c7ae5c973fe1fef6322bef75475649953cd18",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -48,6 +48,8 @@ class bfin_target : public linux_process_target\n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n \n   int low_decr_pc_after_break () override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -121,19 +123,19 @@ bfin_target::sw_breakpoint_from_kind (int kind, int *size)\n   return bfin_breakpoint;\n }\n \n-static int\n-bfin_breakpoint_at (CORE_ADDR where)\n+bool\n+bfin_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned char insn[bfin_breakpoint_len];\n \n   read_inferior_memory(where, insn, bfin_breakpoint_len);\n   if (insn[0] == bfin_breakpoint[0]\n       && insn[1] == bfin_breakpoint[1])\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n void\n@@ -169,7 +171,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  bfin_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "9f3ad2355e5a0c945e94f946c2c989280ff2fbef",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -43,6 +43,8 @@ class cris_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -118,19 +120,18 @@ cris_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &cris_breakpoint;\n }\n \n-static int\n-cris_breakpoint_at (CORE_ADDR where)\n+bool\n+cris_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn,\n-\t\t\t   cris_breakpoint_len);\n+  read_memory (where, (unsigned char *) &insn, cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n void\n@@ -158,7 +159,6 @@ cris_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_breakpoint_at,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "8d84a8d8a1f3568ca4defec940e3e6f02ddd0be7",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -43,6 +43,8 @@ class crisv32_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -128,19 +130,18 @@ crisv32_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &cris_breakpoint;\n }\n \n-static int\n-cris_breakpoint_at (CORE_ADDR where)\n+bool\n+crisv32_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn,\n-\t\t\t   cris_breakpoint_len);\n+  read_memory (where, (unsigned char *) &insn, cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n static void\n@@ -455,7 +456,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_breakpoint_at,\n   cris_supports_z_point_type,\n   cris_insert_point,\n   cris_remove_point,"
    },
    {
      "sha": "64b39be4b0007580e4e2cdf54d5ee6c403823100",
      "filename": "gdbserver/linux-ia64-low.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-ia64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-ia64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ia64-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -42,6 +42,8 @@ class ia64_target : public linux_process_target\n   bool low_cannot_store_register (int regno) override;\n \n   bool low_fetch_register (regcache *regcache, int regno) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -55,6 +57,13 @@ ia64_target::sw_breakpoint_from_kind (int kind, int *size)\n \t\t\t \"implemented by this target\");\n }\n \n+bool\n+ia64_target::low_breakpoint_at (CORE_ADDR pc)\n+{\n+  gdb_assert_no_reached (\"linux target op low_breakpoint_at is not \"\n+\t\t\t \"implemented by this target\");\n+}\n+\n /* Defined in auto-generated file reg-ia64.c.  */\n void init_registers_ia64 (void);\n extern const struct target_desc *tdesc_ia64;"
    },
    {
      "sha": "b3f87947ff682ccef100cb62b315e372d31dec61",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -856,7 +856,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n      then the user inserts a breakpoint inside the range.  In that\n      case we need to report the breakpoint PC.  */\n   if ((!lwp->stepping || lwp->stop_pc == sw_breakpoint_pc)\n-      && (*the_low_target.breakpoint_at) (sw_breakpoint_pc))\n+      && low_breakpoint_at (sw_breakpoint_pc))\n     lwp->stop_reason = TARGET_STOPPED_BY_SW_BREAKPOINT;\n \n   if (hardware_breakpoint_inserted_here (pc))\n@@ -1710,7 +1710,7 @@ linux_process_target::thread_still_has_status_pending (thread_info *thread)\n \n #if !USE_SIGTRAP_SIGINFO\n       else if (lp->stop_reason == TARGET_STOPPED_BY_SW_BREAKPOINT\n-\t       && !(*the_low_target.breakpoint_at) (pc))\n+\t       && !low_breakpoint_at (pc))\n \t{\n \t  if (debug_threads)\n \t    debug_printf (\"previous SW breakpoint of %ld gone\\n\",\n@@ -3185,7 +3185,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t  event_child->stop_pc += increment_pc;\n \t  low_set_pc (regcache, event_child->stop_pc);\n \n-\t  if (!(*the_low_target.breakpoint_at) (event_child->stop_pc))\n+\t  if (!low_breakpoint_at (event_child->stop_pc))\n \t    event_child->stop_reason = TARGET_STOPPED_BY_NO_REASON;\n \t}\n     }\n@@ -3200,7 +3200,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n        && (WSTOPSIG (w) == SIGTRAP\n \t   || ((WSTOPSIG (w) == SIGILL\n \t\t|| WSTOPSIG (w) == SIGSEGV)\n-\t       && (*the_low_target.breakpoint_at) (event_child->stop_pc))));\n+\t       && low_breakpoint_at (event_child->stop_pc))));\n \n   if (maybe_internal_trap)\n     {"
    },
    {
      "sha": "5dcddc41aaacd7475c966acb4bf084ec60a645ca",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -131,8 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  int (*breakpoint_at) (CORE_ADDR pc);\n-\n   /* Breakpoint and watchpoint related functions.  See target.h for\n      comments.  */\n   int (*supports_z_point_type) (char z_type);\n@@ -666,6 +664,9 @@ class linux_process_target : public process_stratum_target\n      'supports_software_single_step' to return true.  */\n   virtual std::vector<CORE_ADDR> low_get_next_pcs (regcache *regcache);\n \n+  /* Return true if there is a breakpoint at PC.  */\n+  virtual bool low_breakpoint_at (CORE_ADDR pc) = 0;\n+\n   /* How many bytes the PC should be decremented after a break.  */\n   virtual int low_decr_pc_after_break ();\n };"
    },
    {
      "sha": "f24f0425b98c083b70e30f62166882507b7759bd",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -46,6 +46,8 @@ class m32r_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -112,19 +114,18 @@ m32r_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &m32r_breakpoint;\n }\n \n-static int\n-m32r_breakpoint_at (CORE_ADDR where)\n+bool\n+m32r_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn,\n-\t\t\t   m32r_breakpoint_len);\n+  read_memory (where, (unsigned char *) &insn, m32r_breakpoint_len);\n   if (insn == m32r_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n void\n@@ -160,7 +161,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  m32r_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "702da9589be05ed35d1e968b978c472aa340baa8",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -44,6 +44,8 @@ class m68k_target : public linux_process_target\n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n \n   int low_decr_pc_after_break () override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -189,16 +191,16 @@ m68k_target::sw_breakpoint_from_kind (int kind, int *size)\n   return m68k_breakpoint;\n }\n \n-static int\n-m68k_breakpoint_at (CORE_ADDR pc)\n+bool\n+m68k_target::low_breakpoint_at (CORE_ADDR pc)\n {\n   unsigned char c[2];\n \n   read_inferior_memory (pc, c, 2);\n   if (c[0] == 0x4E && c[1] == 0x4F)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n #include <asm/ptrace.h>\n@@ -263,7 +265,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  m68k_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "b938473735e8b8279acaa4ce84bafe8df6fc5624",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -50,6 +50,8 @@ class mips_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -326,18 +328,18 @@ mips_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &mips_breakpoint;\n }\n \n-static int\n-mips_breakpoint_at (CORE_ADDR where)\n+bool\n+mips_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 4);\n+  read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == mips_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n /* Mark the watch registers of lwp, represented by ENTRY, as changed.  */\n@@ -966,7 +968,6 @@ mips_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_breakpoint_at,\n   mips_supports_z_point_type,\n   mips_insert_point,\n   mips_remove_point,"
    },
    {
      "sha": "d4f83d144b7e71902eaab8850e993410c5f30882",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -54,6 +54,8 @@ class nios2_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -163,24 +165,24 @@ nios2_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &nios2_breakpoint;\n }\n \n-/* Implement the breakpoint_at linux_target_ops method.  */\n+/* Implement the low_breakpoint_at linux target ops method.  */\n \n-static int\n-nios2_breakpoint_at (CORE_ADDR where)\n+bool\n+nios2_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n   /* For R2, first check for the 2-byte CDX trap.n breakpoint encoding.  */\n #if defined(__nios2_arch__) && __nios2_arch__ == 2\n-  the_target->read_memory (where, (unsigned char *) &insn, 2);\n+  read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == CDX_BREAKPOINT)\n-    return 1;\n+    return true;\n #endif\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 4);\n+  read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == nios2_breakpoint)\n-    return 1;\n-  return 0;\n+    return true;\n+  return false;\n }\n \n /* Fetch the thread-local storage pointer for libthread_db.  */\n@@ -277,7 +279,6 @@ nios2_target::get_regs_info ()\n \n struct linux_target_ops the_low_target =\n {\n-  nios2_breakpoint_at,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "a8f51eb78e0d18c7ae1f4fb0e664d1a642c4606b",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -67,6 +67,8 @@ class ppc_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -307,18 +309,18 @@ ppc_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &ppc_breakpoint;\n }\n \n-static int\n-ppc_breakpoint_at (CORE_ADDR where)\n+bool\n+ppc_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 4);\n+  read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == ppc_breakpoint)\n-    return 1;\n+    return true;\n   /* If necessary, recognize more trap instructions here.  GDB only uses\n      the one.  */\n \n-  return 0;\n+  return false;\n }\n \n /* Implement supports_z_point_type target-ops.\n@@ -3406,7 +3408,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_breakpoint_at,\n   ppc_supports_z_point_type,\n   ppc_insert_point,\n   ppc_remove_point,"
    },
    {
      "sha": "1831f1a3254b897bb41a28efffc4fb03bb563d4a",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -57,6 +57,8 @@ class riscv_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -283,10 +285,10 @@ riscv_target::sw_breakpoint_from_kind (int kind, int *size)\n     }\n }\n \n-/* Implementation of linux_target_ops method \"breakpoint_at\".  */\n+/* Implementation of linux target ops method \"low_breakpoint_at\".  */\n \n-static int\n-riscv_breakpoint_at (CORE_ADDR pc)\n+bool\n+riscv_target::low_breakpoint_at (CORE_ADDR pc)\n {\n   union\n     {\n@@ -301,15 +303,14 @@ riscv_breakpoint_at (CORE_ADDR pc)\n \t      && target_read_memory (pc + sizeof (buf.insn), buf.bytes,\n \t\t\t\t     sizeof (buf.insn)) == 0\n \t      && buf.insn == riscv_ibreakpoint[1])))\n-    return 1;\n+    return true;\n   else\n-    return 0;\n+    return false;\n }\n \n /* RISC-V/Linux target operations.  */\n struct linux_target_ops the_low_target =\n {\n-  riscv_breakpoint_at,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "c6e0542b934ba59455b8f7bc8d528fa946d08de3",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -76,6 +76,8 @@ class s390_target : public linux_process_target\n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n \n   int low_decr_pc_after_break () override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -670,8 +672,8 @@ s390_target::low_arch_setup ()\n }\n \n \n-static int\n-s390_breakpoint_at (CORE_ADDR pc)\n+bool\n+s390_target::low_breakpoint_at (CORE_ADDR pc)\n {\n   unsigned char c[s390_breakpoint_len];\n   read_inferior_memory (pc, c, s390_breakpoint_len);\n@@ -2834,7 +2836,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_breakpoint_at,\n   s390_supports_z_point_type,\n   NULL,\n   NULL,"
    },
    {
      "sha": "b88dd4695391a05a9d01ec2d8ef3b7b2a4623a40",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -42,6 +42,8 @@ class sh_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -118,18 +120,18 @@ sh_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &sh_breakpoint;\n }\n \n-static int\n-sh_breakpoint_at (CORE_ADDR where)\n+bool\n+sh_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 2);\n+  read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == sh_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n /* Support for hardware single step.  */\n@@ -190,7 +192,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sh_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "c5475d270bf05caf9e5650736b2ea37bfa27114c",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -65,6 +65,8 @@ class sparc_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   /* No low_set_pc is needed.  */\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -278,20 +280,20 @@ sparc_target::sw_breakpoint_from_kind (int kind, int *size)\n   return sparc_breakpoint;\n }\n \n-static int\n-sparc_breakpoint_at (CORE_ADDR where)\n+bool\n+sparc_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned char insn[INSN_SIZE];\n \n-  the_target->read_memory (where, (unsigned char *) insn, sizeof (insn));\n+  read_memory (where, (unsigned char *) insn, sizeof (insn));\n \n   if (memcmp (sparc_breakpoint, insn, sizeof (insn)) == 0)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only\n      uses TRAP Always.  */\n \n-  return 0;\n+  return false;\n }\n \n void\n@@ -339,7 +341,6 @@ sparc_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sparc_breakpoint_at,\n   NULL,  /* supports_z_point_type */\n   NULL, NULL, NULL, NULL,\n   NULL, NULL"
    },
    {
      "sha": "dad8a33510be97b3d8f22230c440fe4a9ed5ccf8",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -61,6 +61,8 @@ class tic6x_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -271,18 +273,18 @@ tic6x_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n   supply_register_by_name (regcache, \"PC\", newpc.buf);\n }\n \n-static int\n-tic6x_breakpoint_at (CORE_ADDR where)\n+bool\n+tic6x_target::low_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 4);\n+  read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == tic6x_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n /* Fetch the thread-local storage pointer for libthread_db.  */\n@@ -421,7 +423,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  tic6x_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "49c18b157eb1aa1c082951cc3411a6378829bd25",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -46,6 +46,8 @@ class tile_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -127,18 +129,18 @@ tile_target::sw_breakpoint_from_kind (int kind, int *size)\n   return (const gdb_byte *) &tile_breakpoint;\n }\n \n-static int\n-tile_breakpoint_at (CORE_ADDR where)\n+bool\n+tile_target::low_breakpoint_at (CORE_ADDR where)\n {\n   uint64_t insn;\n \n-  the_target->read_memory (where, (unsigned char *) &insn, 8);\n+  read_memory (where, (unsigned char *) &insn, 8);\n   if (insn == tile_breakpoint)\n-    return 1;\n+    return true;\n \n   /* If necessary, recognize more trap instructions here.  GDB only uses the\n      one.  */\n-  return 0;\n+  return false;\n }\n \n static void\n@@ -222,7 +224,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  tile_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    },
    {
      "sha": "e7e6d5427d3ff52c99ba739b12f674578c456f4d",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -123,6 +123,8 @@ class x86_target : public linux_process_target\n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n \n   int low_decr_pc_after_break () override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -560,16 +562,16 @@ x86_target::low_decr_pc_after_break ()\n static const gdb_byte x86_breakpoint[] = { 0xCC };\n #define x86_breakpoint_len 1\n \n-static int\n-x86_breakpoint_at (CORE_ADDR pc)\n+bool\n+x86_target::low_breakpoint_at (CORE_ADDR pc)\n {\n   unsigned char c;\n \n-  the_target->read_memory (pc, &c, 1);\n+  read_memory (pc, &c, 1);\n   if (c == 0xCC)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \f\n /* Low-level function vector.  */\n@@ -2908,7 +2910,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_breakpoint_at,\n   x86_supports_z_point_type,\n   x86_insert_point,\n   x86_remove_point,"
    },
    {
      "sha": "19152262a126b06e02281ed09b68a68192332227",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7146cda56c8ee6d1129c0c787c2645c01301fb8/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=d7146cda56c8ee6d1129c0c787c2645c01301fb8",
      "patch": "@@ -43,6 +43,8 @@ class xtensa_target : public linux_process_target\n   CORE_ADDR low_get_pc (regcache *regcache) override;\n \n   void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -263,13 +265,12 @@ xtensa_target::sw_breakpoint_from_kind (int kind, int *size)\n   return xtensa_breakpoint;\n }\n \n-static int\n-xtensa_breakpoint_at (CORE_ADDR where)\n+bool\n+xtensa_target::low_breakpoint_at (CORE_ADDR where)\n {\n     unsigned long insn;\n \n-    the_target->read_memory (where, (unsigned char *) &insn,\n-\t\t\t     xtensa_breakpoint_len);\n+    read_memory (where, (unsigned char *) &insn, xtensa_breakpoint_len);\n     return memcmp((char *) &insn,\n \t\t  xtensa_breakpoint, xtensa_breakpoint_len) == 0;\n }\n@@ -328,7 +329,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  xtensa_breakpoint_at,\n   NULL, /* supports_z_point_type */\n   NULL, /* insert_point */\n   NULL, /* remove_point */"
    }
  ]
}