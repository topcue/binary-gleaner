{
  "sha": "f8e89861cfb6acbfa097814f5864afd5563a3011",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjhlODk4NjFjZmI2YWNiZmEwOTc4MTRmNTg2NGFmZDU1NjNhMzAxMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:32Z"
    },
    "message": "Add support for dynamic type lengths\n\nIn Ada, a type with variant parts can have a variable length.  This\npatch adds support for this to gdb, by integrating the length\ncomputation into the dynamic type resolution code.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (read_structure_type): Handle dynamic length.\n\t* gdbtypes.c (is_dynamic_type_internal): Check\n\tTYPE_HAS_DYNAMIC_LENGTH.\n\t(resolve_dynamic_type_internal): Use TYPE_DYNAMIC_LENGTH.\n\t* gdbtypes.h (TYPE_HAS_DYNAMIC_LENGTH, TYPE_DYNAMIC_LENGTH):\n\tNew macros.\n\t(enum dynamic_prop_node_kind) <DYN_PROP_BYTE_SIZE>: New\n\tconstant.\n\ngdb/testsuite/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/variant.exp: New file\n\t* gdb.ada/variant/pkg.adb: New file\n\t* gdb.ada/variant/pck.adb: New file",
    "tree": {
      "sha": "06d2310f45105e61d5541755b596e29ca5241dba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/06d2310f45105e61d5541755b596e29ca5241dba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f8e89861cfb6acbfa097814f5864afd5563a3011",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8e89861cfb6acbfa097814f5864afd5563a3011",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f8e89861cfb6acbfa097814f5864afd5563a3011",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8e89861cfb6acbfa097814f5864afd5563a3011/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9c6a1327ad9a92b8584f0501dd25bf8ba9e84ac6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c6a1327ad9a92b8584f0501dd25bf8ba9e84ac6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9c6a1327ad9a92b8584f0501dd25bf8ba9e84ac6"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 156,
    "deletions": 9
  },
  "files": [
    {
      "sha": "29e9a4778dc2dd13d6859ca72dbc06b8db463cfb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -1,3 +1,14 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (read_structure_type): Handle dynamic length.\n+\t* gdbtypes.c (is_dynamic_type_internal): Check\n+\tTYPE_HAS_DYNAMIC_LENGTH.\n+\t(resolve_dynamic_type_internal): Use TYPE_DYNAMIC_LENGTH.\n+\t* gdbtypes.h (TYPE_HAS_DYNAMIC_LENGTH, TYPE_DYNAMIC_LENGTH):\n+\tNew macros.\n+\t(enum dynamic_prop_node_kind) <DYN_PROP_BYTE_SIZE>: New\n+\tconstant.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2/read.c (struct variant_field): Rewrite."
    },
    {
      "sha": "f6d062451b3f46872c26b79e189a520328055bec",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -15300,14 +15300,10 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n         TYPE_LENGTH (type) = DW_UNSND (attr);\n       else\n \t{\n-\t  /* For the moment, dynamic type sizes are not supported\n-\t     by GDB's struct type.  The actual size is determined\n-\t     on-demand when resolving the type of a given object,\n-\t     so set the type's length to zero for now.  Otherwise,\n-\t     we record an expression as the length, and that expression\n-\t     could lead to a very large value, which could eventually\n-\t     lead to us trying to allocate that much memory when creating\n-\t     a value of that type.  */\n+\t  struct dynamic_prop prop;\n+\t  if (attr_to_dynamic_prop (attr, die, cu, &prop,\n+\t\t\t\t    cu->per_cu->addr_type ()))\n+\t    add_dyn_prop (DYN_PROP_BYTE_SIZE, prop, type);\n           TYPE_LENGTH (type) = 0;\n \t}\n     }"
    },
    {
      "sha": "6d755e98b66f5241fb5a09f0ef55bee5432d4341",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -1975,6 +1975,9 @@ is_dynamic_type_internal (struct type *type, int top_level)\n   if (prop != nullptr && prop->kind != PROP_TYPE)\n     return 1;\n \n+  if (TYPE_HAS_DYNAMIC_LENGTH (type))\n+    return 1;\n+\n   switch (TYPE_CODE (type))\n     {\n     case TYPE_CODE_RANGE:\n@@ -2491,13 +2494,19 @@ resolve_dynamic_type_internal (struct type *type,\n \t\t\t       int top_level)\n {\n   struct type *real_type = check_typedef (type);\n-  struct type *resolved_type = type;\n+  struct type *resolved_type = nullptr;\n   struct dynamic_prop *prop;\n   CORE_ADDR value;\n \n   if (!is_dynamic_type_internal (real_type, top_level))\n     return type;\n \n+  gdb::optional<CORE_ADDR> type_length;\n+  prop = TYPE_DYNAMIC_LENGTH (type);\n+  if (prop != NULL\n+      && dwarf2_evaluate_property (prop, NULL, addr_stack, &value))\n+    type_length = value;\n+\n   if (TYPE_CODE (type) == TYPE_CODE_TYPEDEF)\n     {\n       resolved_type = copy_type (type);\n@@ -2553,6 +2562,15 @@ resolve_dynamic_type_internal (struct type *type,\n \t}\n     }\n \n+  if (resolved_type == nullptr)\n+    return type;\n+\n+  if (type_length.has_value ())\n+    {\n+      TYPE_LENGTH (resolved_type) = *type_length;\n+      remove_dyn_prop (DYN_PROP_BYTE_SIZE, resolved_type);\n+    }\n+\n   /* Resolve data_location attribute.  */\n   prop = TYPE_DATA_LOCATION (resolved_type);\n   if (prop != NULL"
    },
    {
      "sha": "87b1bca3a22998e1d97e956b4431e9b4bb47f6e7",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -355,6 +355,10 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n #define TYPE_HAS_VARIANT_PARTS(t) \\\n   (get_dyn_prop (DYN_PROP_VARIANT_PARTS, t) != nullptr)\n \n+/* * True if this type has a dynamic length.  */\n+#define TYPE_HAS_DYNAMIC_LENGTH(t) \\\n+  (get_dyn_prop (DYN_PROP_BYTE_SIZE, t) != nullptr)\n+\n /* * Instruction-space delimited type.  This is for Harvard architectures\n    which have separate instruction and data address spaces (and perhaps\n    others).\n@@ -552,6 +556,9 @@ enum dynamic_prop_node_kind\n \n   /* A property holding variant parts.  */\n   DYN_PROP_VARIANT_PARTS,\n+\n+  /* A property holding the size of the type.  */\n+  DYN_PROP_BYTE_SIZE,\n };\n \n /* * List for dynamic type attributes.  */\n@@ -1445,6 +1452,8 @@ extern bool set_type_align (struct type *, ULONGEST);\n   TYPE_DATA_LOCATION (thistype)->data.const_val\n #define TYPE_DATA_LOCATION_KIND(thistype) \\\n   TYPE_DATA_LOCATION (thistype)->kind\n+#define TYPE_DYNAMIC_LENGTH(thistype) \\\n+  get_dyn_prop (DYN_PROP_BYTE_SIZE, thistype)\n \n /* Property accessors for the type allocated/associated.  */\n #define TYPE_ALLOCATED_PROP(thistype) \\"
    },
    {
      "sha": "6664700247539399af1af236d4ebe21fc101c0e9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/variant.exp: New file\n+\t* gdb.ada/variant/pkg.adb: New file\n+\t* gdb.ada/variant/pck.adb: New file\n+\n 2020-04-24  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (clean_restart): Reset errcnt and warncnt."
    },
    {
      "sha": "b68bf60b1924f7ee131ed03fb74535a531187fb0",
      "filename": "gdb/testsuite/gdb.ada/variant.exp",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/variant.exp?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+standard_ada_testfile pkg\n+\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n+\n+    clean_restart ${testfile}\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/pkg.adb]\n+    runto \"pkg.adb:$bp_location\"\n+\n+    gdb_test \"print r\" \"= \\\\(c => 100 'd'\\\\)\"\n+    gdb_test \"print q\" \" = \\\\(c => 0 '\\\\\\[\\\"00\\\"\\\\\\]', x_first => 27\\\\)\"\n+\n+    gdb_test \"print st1\" \" = \\\\(i => -4, one => 1, x => 2\\\\)\"\n+    gdb_test \"print st2\" \" = \\\\(i => 99, one => 1, y => 77\\\\)\"\n+}"
    },
    {
      "sha": "41b6efd4da86ef299d20116cf010802c4a396cc1",
      "filename": "gdb/testsuite/gdb.ada/variant/pck.ads",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/variant/pck.ads?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -0,0 +1,37 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package Pck is\n+\n+   type Rec_Type (C : Character := 'd') is record\n+      case C is\n+         when Character'First     => X_First : Integer;\n+         when Character'Val (127) => X_127   : Integer;\n+         when Character'Val (128) => X_128   : Integer;\n+         when Character'Last      => X_Last  : Integer;\n+         when others              => null;\n+      end case;\n+   end record;\n+\n+   type Second_Type (I : Integer) is record\n+      One: Integer;\n+      case I is\n+         when -5 .. 5 =>\n+\t   X : Integer;\n+         when others =>\n+\t   Y : Integer;\n+      end case;\n+   end record;\n+end Pck;"
    },
    {
      "sha": "0cc38f5b253bc92643f0bd9e44fec17e4948ba53",
      "filename": "gdb/testsuite/gdb.ada/variant/pkg.adb",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant/pkg.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8e89861cfb6acbfa097814f5864afd5563a3011/gdb/testsuite/gdb.ada/variant/pkg.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/variant/pkg.adb?ref=f8e89861cfb6acbfa097814f5864afd5563a3011",
      "patch": "@@ -0,0 +1,30 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+\n+procedure Pkg is\n+\n+   R, Q : Rec_Type;\n+\n+   ST1 : constant Second_Type := (I => -4, One => 1, X => 2);\n+   ST2 : constant Second_Type := (I => 99, One => 1, Y => 77);\n+\n+begin\n+   R := (C => 'd');\n+   Q := (C => Character'First, X_First => 27);\n+\n+   null; -- STOP\n+end Pkg;"
    }
  ]
}