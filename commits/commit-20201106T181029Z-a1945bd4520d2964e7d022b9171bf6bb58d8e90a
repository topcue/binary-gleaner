{
  "sha": "a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTE5NDViZDQ1MjBkMjk2NGU3ZDAyMmI5MTcxYmY2YmI1OGQ4ZTkwYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-11-06T18:09:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-11-06T18:10:29Z"
    },
    "message": "gdb/testsuite: make DWARF assembler's ranges' \"base\" and \"range\" procs\n\nWhen creating a .debug_ranges section using the testsuite's DWARF\nassembler, it currently looks like this:\n\n  ranges {\n    sequence {\n      {base ...}\n      {range ...}\n      {range ...}\n    }\n  }\n\nThe sub-tree of sequence is manually traversed as a list of lists.  I\nthink it would be nicer if `base` and `range` where procedure, just like\nthe other levels:\n\n  ranges {\n    sequence {\n      base ...\n      range ...\n      range ...\n    }\n  }\n\nThat makes the implementation more robust, and the usage a bit nicer\n(less special characters).  It also allows having comments in between\nthe range list entries:\n\n  ranges {\n    sequence {\n      base ...\n      range ...\n\n      # Hello world.\n      range ...\n    }\n  }\n\n... which doesn't work with the current approach.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/dwarf.exp (ranges): Handle \"base\" and \"range\" as\n\tproceduresu.\n\t* gdb.dwarf/dw2-bad-elf.exp: Adjust.\n\t* gdb.dwarf2/dw2-inline-many-frames.exp: Adjust.\n\t* gdb.dwarf2/dw2-inline-stepping.exp: Adjust.\n\t* gdb.dwarf2/dw2-ranges-base.exp: Adjust.\n\t* gdb.dwarf2/dw2-ranges-func.exp: Adjust.\n\t* gdb.dwarf2/dw2-ranges-overlap.exp: Adjust.\n\t* gdb.dwarf2/dw2-ranges-psym.exp: Adjust.\n\t* gdb.dwarf2/enqueued-cu-base-addr.exp: Adjust.\n\nChange-Id: I0b2af480faff54d0fd4214e0cc8d042d9583a865",
    "tree": {
      "sha": "5cc7026a47954535cc5ae514631fdb64cc29c1be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5cc7026a47954535cc5ae514631fdb64cc29c1be"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3fed4c0b7adeae7b2bfd9aa59818bb8f3f381031",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3fed4c0b7adeae7b2bfd9aa59818bb8f3f381031",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3fed4c0b7adeae7b2bfd9aa59818bb8f3f381031"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 74,
    "deletions": 66
  },
  "files": [
    {
      "sha": "42c317a053c047ae2cc83c334962aaa22cb8ce23",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -1,3 +1,16 @@\n+2020-11-06  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* lib/dwarf.exp (ranges): Handle \"base\" and \"range\" as\n+\tproceduresu.\n+\t* gdb.dwarf/dw2-bad-elf.exp: Adjust.\n+\t* gdb.dwarf2/dw2-inline-many-frames.exp: Adjust.\n+\t* gdb.dwarf2/dw2-inline-stepping.exp: Adjust.\n+\t* gdb.dwarf2/dw2-ranges-base.exp: Adjust.\n+\t* gdb.dwarf2/dw2-ranges-func.exp: Adjust.\n+\t* gdb.dwarf2/dw2-ranges-overlap.exp: Adjust.\n+\t* gdb.dwarf2/dw2-ranges-psym.exp: Adjust.\n+\t* gdb.dwarf2/enqueued-cu-base-addr.exp: Adjust.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/funcall_ref.exp: Update."
    },
    {
      "sha": "20ecd68e7f12b243eb4257d076c3e2330a1313dd",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -107,12 +107,12 @@ Dwarf::assemble $asm_file {\n \n     ranges {is_64 [is_64_target]} {\n \tranges_label_1: sequence {\n-\t    {base [lindex $main_result 0]}\n-\t    {range 0 [lindex $main_result 1]}\n+\t    base [lindex $main_result 0]\n+\t    range 0 [lindex $main_result 1]\n \t}\n \tranges_label_2: sequence {\n-\t    {base some_func}\n-\t    {range 0 64}\n+\t    base some_func\n+\t    range 0 64\n \t}\n     }\n "
    },
    {
      "sha": "591a92765775871d0b3bc5e7eaf2ac463c0d1d70",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-many-frames.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -281,12 +281,12 @@ Dwarf::assemble $asm_file {\n \n     ranges {is_64 [is_64_target]} {\n \tranges_label: sequence {\n-\t    {range {${main_start}} ${main_end}}\n-\t    {range {${ddd_start}} ${ddd_end}}\n-\t    {range {${eee_start}} ${eee_end}}\n-\t    {range {${fff_start}} ${fff_end}}\n-\t    {range {${jjj_start}} ${jjj_end}}\n-\t    {range {${kkk_start}} ${kkk_end}}\n+\t    range ${main_start} ${main_end}\n+\t    range ${ddd_start} ${ddd_end}\n+\t    range ${eee_start} ${eee_end}\n+\t    range ${fff_start} ${fff_end}\n+\t    range ${jjj_start} ${jjj_end}\n+\t    range ${kkk_start} ${kkk_end}\n \t}\n     }\n }"
    },
    {
      "sha": "a5853242dc516677d9bfe3783b0a14fd4c53bb12",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -122,8 +122,8 @@ Dwarf::assemble $asm_file {\n \n     ranges {is_64 [is_64_target]} {\n \tranges_label: sequence {\n-\t    {range {${main_start}} ${main_end}}\n-\t    {range {${bar_start}} ${bar_end}}\n+\t    range ${main_start} ${main_end}\n+\t    range ${bar_start} ${bar_end}\n \t}\n     }\n }"
    },
    {
      "sha": "3164a908e70eff02c4cb0fa5b24e71de2d254d8e",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -115,12 +115,12 @@ Dwarf::assemble $asm_file {\n     # base for each function.\n     ranges {is_64 [is_64_target]} {\n \tranges_label: sequence {\n-\t    {base [lindex $main_func 0]}\n-\t    {range 0 [lindex $main_func 1]}\n-\t    {base [lindex $frame2_func 0]}\n-\t    {range 0 [lindex $frame2_func 1]}\n-\t    {base [lindex $frame3_func 0]}\n-\t    {range 0 [lindex $frame3_func 1]}\n+\t    base [lindex $main_func 0]\n+\t    range 0 [lindex $main_func 1]\n+\t    base [lindex $frame2_func 0]\n+\t    range 0 [lindex $frame2_func 1]\n+\t    base [lindex $frame3_func 0]\n+\t    range 0 [lindex $frame3_func 1]\n \t}\n     }\n }"
    },
    {
      "sha": "504b4049c2f2c0590a98c78bf3286fb3ca8be74c",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-func.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -199,15 +199,15 @@ proc do_test {suffix} {\n \t# Generate ranges data.\n \tranges {is_64 [is_64_target]} {\n \t    func_ranges_label: sequence {\n-\t\t{range {$foo_start } $foo_end}\n-\t\t{range {$foo_cold_start} $foo_cold_end}\n+\t\trange $foo_start $foo_end\n+\t\trange $foo_cold_start $foo_cold_end\n \t    }\n \t    cu_ranges_label: sequence {\n-\t\t{range {$foo_start } $foo_end}\n-\t\t{range {$foo_cold_start} $foo_cold_end}\n-\t\t{range {$main_start} $main_end}\n-\t\t{range {$bar_start} $bar_end}\n-\t\t{range {$baz_start} $baz_end}\n+\t\trange $foo_start $foo_end\n+\t\trange $foo_cold_start $foo_cold_end\n+\t\trange $main_start $main_end\n+\t\trange $bar_start $bar_end\n+\t\trange $baz_start $baz_end\n \t    }\n \t}\n     }"
    },
    {
      "sha": "485f5c04f1f8c4544a739869e64a88f5c1106b58",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-overlap.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-overlap.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-overlap.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-overlap.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -66,10 +66,10 @@ Dwarf::assemble $asm_file {\n \n     ranges {is_64 [is_64_target]} {\n \tranges_label: sequence {\n-\t    {base [lindex $main_func 0]}\n-\t    {range 0 [lindex $main_func 1]}\n-\t    {base [lindex $bar_func 0]}\n-\t    {range 0 [lindex $bar_func 1]}\n+\t    base [lindex $main_func 0]\n+\t    range 0 [lindex $main_func 1]\n+\t    base [lindex $bar_func 0]\n+\t    range 0 [lindex $bar_func 1]\n \t}\n     }\n }"
    },
    {
      "sha": "1be27c2622bc5d77c848eace42bd139d26d0314f",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-psym.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -108,14 +108,14 @@ Dwarf::assemble $asm_file {\n     # Generate ranges data.\n     ranges {is_64 [is_64_target]} {\n \tfunc_ranges_label: sequence {\n-\t    {range {$foo_start } $foo_end}\n-\t    {range {$foo_low_start} $foo_low_end}\n+\t    range $foo_start $foo_end\n+\t    range $foo_low_start $foo_low_end\n \t}\n \tcu_ranges_label: sequence {\n-\t    {range {$foo_start } $foo_end}\n-\t    {range {$foo_low_start} $foo_low_end}\n-\t    {range {$bar_start} $bar_end}\n-\t    {range {$baz_start} $baz_end}\n+\t    range $foo_start $foo_end\n+\t    range $foo_low_start $foo_low_end\n+\t    range $bar_start $bar_end\n+\t    range $baz_start $baz_end\n \t}\n     }\n }"
    },
    {
      "sha": "e4ac1c9851ec44b6e742ec71519a7c43757c3473",
      "filename": "gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/enqueued-cu-base-addr.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -73,7 +73,7 @@ Dwarf::assemble $asm_file {\n \n     ranges {is_64 [is_64_target]} {\n \tranges_label: sequence {\n-\t    {range 0 [lindex $main_func 1]}\n+\t    range 0 [lindex $main_func 1]\n \t}\n     }\n }"
    },
    {
      "sha": "c1596df58be030fe155667cf7f2dbba60edd22a3",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 25,
      "deletions": 30,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1945bd4520d2964e7d022b9171bf6bb58d8e90a/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "patch": "@@ -1247,42 +1247,37 @@ namespace eval Dwarf {\n \tset section \".debug_ranges\"\n \t_section $section\n \n-\tproc sequence {{ranges {}}} {\n+\tproc sequence { body } {\n \t    variable _debug_ranges_64_bit\n \n \t    # Emit the sequence of addresses.\n-\t    set base \"\"\n-\t    foreach range $ranges {\n-\t\tset range [uplevel 1 \"subst \\\"$range\\\"\"]\n-\t\tset type [lindex $range 0]\n-\t\tswitch -exact -- $type {\n-\t\t    base {\n-\t\t\tset base [lrange $range 1 end]\n-\n-\t\t\tif { $_debug_ranges_64_bit } then {\n-\t\t\t    _op .8byte 0xffffffffffffffff \"Base Marker\"\n-\t\t\t    _op .8byte $base \"Base Address\"\n-\t\t\t} else {\n-\t\t\t    _op .4byte 0xffffffff \"Base Marker\"\n-\t\t\t    _op .4byte $base \"Base Address\"\n-\t\t\t}\n-\t\t    }\n-\t\t    range {\n-\t\t\tset start [lindex $range 1]\n-\t\t\tset end [lrange $range 2 end]\n-\n-\t\t\tif { $_debug_ranges_64_bit } then {\n-\t\t\t    _op .8byte $start \"Start Address\"\n-\t\t\t    _op .8byte $end \"End Address\"\n-\t\t\t} else {\n-\t\t\t    _op .4byte $start \"Start Address\"\n-\t\t\t    _op .4byte $end \"End Address\"\n-\t\t\t}\n-\t\t    }\n-\t\t    default { error \"unknown range type: $type \" }\n+\n+\t    proc base { addr } {\n+\t\tvariable _debug_ranges_64_bit\n+\n+\t\tif { $_debug_ranges_64_bit } then {\n+\t\t    _op .8byte 0xffffffffffffffff \"Base Marker\"\n+\t\t    _op .8byte $addr \"Base Address\"\n+\t\t} else {\n+\t\t    _op .4byte 0xffffffff \"Base Marker\"\n+\t\t    _op .4byte $addr \"Base Address\"\n \t\t}\n \t    }\n \n+\t    proc range { start end } {\n+\t\tvariable _debug_ranges_64_bit\n+\n+\t\tif { $_debug_ranges_64_bit } then {\n+\t\t    _op .8byte $start \"Start Address\"\n+\t\t    _op .8byte $end \"End Address\"\n+\t\t} else {\n+\t\t    _op .4byte $start \"Start Address\"\n+\t\t    _op .4byte $end \"End Address\"\n+\t\t}\n+\t    }\n+\n+\t    uplevel $body\n+\n \t    # End of the sequence.\n \t    if { $_debug_ranges_64_bit } then {\n \t\t_op .8byte 0x0 \"End of Sequence Marker (Part 1)\""
    }
  ]
}