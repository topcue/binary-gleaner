{
  "sha": "41f5efc6855a2a9211775308c99ebb3f28a5e729",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDFmNWVmYzY4NTVhMmE5MjExNzc1MzA4Yzk5ZWJiM2YyOGE1ZTcyOQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:32:19Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:32:19Z"
    },
    "message": "x86: drop need_vex_reg\n\nIt was quite odd for the prior operand handling to have to clear this\nflag for the actual operand handling to print nothing. Have the actual\noperand handling determine whether the operand is actually present.\nWith this {d,q}_scalar_swap_mode become unused and hence also get dropped.",
    "tree": {
      "sha": "c30d295742aeeef1dd3e9ccc168e39424854109f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c30d295742aeeef1dd3e9ccc168e39424854109f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41f5efc6855a2a9211775308c99ebb3f28a5e729",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41f5efc6855a2a9211775308c99ebb3f28a5e729",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41f5efc6855a2a9211775308c99ebb3f28a5e729",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41f5efc6855a2a9211775308c99ebb3f28a5e729/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 41,
    "deletions": 53
  },
  "files": [
    {
      "sha": "52f7b89139519baf6c0eec45d6438c104baa00a1",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=41f5efc6855a2a9211775308c99ebb3f28a5e729",
      "patch": "@@ -1,3 +1,24 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (OP_VexR, VexScalarR): New.\n+\t(OP_EX_Vex, OP_XMM_Vex, EXdVexScalarS, EXqVexScalarS,\n+\tXMVexScalar, d_scalar_swap_mode, q_scalar_swap_mode,\n+\tneed_vex_reg): Delete.\n+\t(prefix_table): Replace VexScalar by VexScalarR and\n+\tXMVexScalar by XMScalar for vmovss and vmovsd. Replace\n+\tEXdVexScalarS by EXdS and EXqVexScalarS by EXqS.\n+\t(vex_len_table): Replace EXqVexScalarS by EXqS.\n+\t(get_valid_dis386): Don't set need_vex_reg.\n+\t(print_insn): Don't initialize need_vex_reg.\n+\t(intel_operand_size, OP_E_memory): Drop d_scalar_swap_mode and\n+\tq_scalar_swap_mode cases.\n+\t(OP_EX): Don't check for d_scalar_swap_mode and\n+\tq_scalar_swap_mode.\n+\t(OP_VEX): Done check need_vex_reg.\n+\t* i386-dis-evex-w.h: Replace VexScalar by VexScalarR and\n+\tXMVexScalar by XMScalar for vmovss and vmovsd. Replace\n+\tEXdVexScalarS by EXdS and EXqVexScalarS by EXqS.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (Vex128, Vex256, vex128_mode, vex256_mode): Delete."
    },
    {
      "sha": "10c0b836bffc165017310a647ee2084c9a289bad",
      "filename": "opcodes/i386-dis-evex-w.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/i386-dis-evex-w.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/i386-dis-evex-w.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-w.h?ref=41f5efc6855a2a9211775308c99ebb3f28a5e729",
      "patch": "@@ -1,20 +1,20 @@\n   /* EVEX_W_0F10_P_1 */\n   {\n-    { \"vmovss\",\t{ XMVexScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vmovss\",\t{ XMScalar, VexScalarR, EXxmm_md }, 0 },\n   },\n   /* EVEX_W_0F10_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmovsd\",\t{ XMVexScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vmovsd\",\t{ XMScalar, VexScalarR, EXxmm_mq }, 0 },\n   },\n   /* EVEX_W_0F11_P_1 */\n   {\n-    { \"vmovss\",\t{ EXdVexScalarS, VexScalar, XMScalar }, 0 },\n+    { \"vmovss\",\t{ EXdS, VexScalarR, XMScalar }, 0 },\n   },\n   /* EVEX_W_0F11_P_3 */\n   {\n     { Bad_Opcode },\n-    { \"vmovsd\",\t{ EXqVexScalarS, VexScalar, XMScalar }, 0 },\n+    { \"vmovsd\",\t{ EXqS, VexScalarR, XMScalar }, 0 },\n   },\n   /* EVEX_W_0F12_P_0_M_1 */\n   {\n@@ -294,7 +294,7 @@\n   /* EVEX_W_0FD6_P_2 */\n   {\n     { Bad_Opcode },\n-    { \"vmovq\",\t{ EXqVexScalarS, XMScalar }, 0 },\n+    { \"vmovq\",\t{ EXqS, XMScalar }, 0 },\n   },\n   /* EVEX_W_0FE6_P_1 */\n   {"
    },
    {
      "sha": "3b8eb3009745faa75189875d9d2e1625be8052c5",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 15,
      "deletions": 48,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41f5efc6855a2a9211775308c99ebb3f28a5e729/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=41f5efc6855a2a9211775308c99ebb3f28a5e729",
      "patch": "@@ -88,9 +88,8 @@ static void OP_MS (int, int);\n static void OP_XS (int, int);\n static void OP_M (int, int);\n static void OP_VEX (int, int);\n+static void OP_VexR (int, int);\n static void OP_VexW (int, int);\n-static void OP_EX_Vex (int, int);\n-static void OP_XMM_Vex (int, int);\n static void OP_Rounding (int, int);\n static void OP_REG_VexI4 (int, int);\n static void OP_VexI4 (int, int);\n@@ -394,12 +393,10 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define Vex { OP_VEX, vex_mode }\n #define VexW { OP_VexW, vex_mode }\n #define VexScalar { OP_VEX, vex_scalar_mode }\n+#define VexScalarR { OP_VexR, vex_scalar_mode }\n #define VexGatherQ { OP_VEX, vex_vsib_q_w_dq_mode }\n #define VexGdq { OP_VEX, dq_mode }\n #define VexTmm { OP_VEX, tmm_mode }\n-#define EXdVexScalarS { OP_EX_Vex, d_scalar_swap_mode }\n-#define EXqVexScalarS { OP_EX_Vex, q_scalar_swap_mode }\n-#define XMVexScalar { OP_XMM_Vex, scalar_mode }\n #define XMVexI4 { OP_REG_VexI4, x_mode }\n #define XMVexScalarI4 { OP_REG_VexI4, scalar_mode }\n #define VexI4 { OP_VexI4, 0 }\n@@ -574,10 +571,6 @@ enum\n \n   /* scalar, ignore vector length.  */\n   scalar_mode,\n-  /* like d_swap_mode, ignore vector length.  */\n-  d_scalar_swap_mode,\n-  /* like q_swap_mode, ignore vector length.  */\n-  q_scalar_swap_mode,\n   /* like vex_mode, ignore vector length.  */\n   vex_scalar_mode,\n   /* Operand size depends on the VEX.W bit, ignore vector length.  */\n@@ -2975,7 +2968,6 @@ static struct\n   }\n vex;\n static unsigned char need_vex;\n-static unsigned char need_vex_reg;\n \n struct op\n   {\n@@ -4633,17 +4625,17 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F10 */\n   {\n     { \"vmovups\",\t{ XM, EXx }, 0 },\n-    { \"vmovss\",\t\t{ XMVexScalar, VexScalar, EXxmm_md }, 0 },\n+    { \"vmovss\",\t\t{ XMScalar, VexScalarR, EXxmm_md }, 0 },\n     { \"vmovupd\",\t{ XM, EXx }, 0 },\n-    { \"vmovsd\",\t\t{ XMVexScalar, VexScalar, EXxmm_mq }, 0 },\n+    { \"vmovsd\",\t\t{ XMScalar, VexScalarR, EXxmm_mq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F11 */\n   {\n     { \"vmovups\",\t{ EXxS, XM }, 0 },\n-    { \"vmovss\",\t\t{ EXdVexScalarS, VexScalar, XMScalar }, 0 },\n+    { \"vmovss\",\t\t{ EXdS, VexScalarR, XMScalar }, 0 },\n     { \"vmovupd\",\t{ EXxS, XM }, 0 },\n-    { \"vmovsd\",\t\t{ EXqVexScalarS, VexScalar, XMScalar }, 0 },\n+    { \"vmovsd\",\t\t{ EXqS, VexScalarR, XMScalar }, 0 },\n   },\n \n   /* PREFIX_VEX_0F12 */\n@@ -9558,7 +9550,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0FD6_P_2 */\n   {\n-    { \"vmovq\",\t\t{ EXqVexScalarS, XMScalar }, 0 },\n+    { \"vmovq\",\t\t{ EXqS, XMScalar }, 0 },\n   },\n \n   /* VEX_LEN_0FF7_P_2 */\n@@ -12146,7 +12138,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n \t  break;\n \t}\n       need_vex = 1;\n-      need_vex_reg = 1;\n       codep++;\n       vindex = *codep++;\n       dp = &xop_table[vex_table_index][vindex];\n@@ -12213,7 +12204,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n \t  break;\n \t}\n       need_vex = 1;\n-      need_vex_reg = 1;\n       codep++;\n       vindex = *codep++;\n       dp = &vex_table[vex_table_index][vindex];\n@@ -12252,7 +12242,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n \t  break;\n \t}\n       need_vex = 1;\n-      need_vex_reg = 1;\n       codep++;\n       vindex = *codep++;\n       dp = &vex_table[dp->op[1].bytemode][vindex];\n@@ -12344,7 +12333,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n \t}\n \n       need_vex = 1;\n-      need_vex_reg = 1;\n       codep++;\n       vindex = *codep++;\n       dp = &evex_table[vex_table_index][vindex];\n@@ -12669,7 +12657,6 @@ print_insn (bfd_vma pc, disassemble_info *info)\n     }\n \n   need_vex = 0;\n-  need_vex_reg = 0;\n   memset (&vex, 0, sizeof (vex));\n \n   if (dp->name == NULL && dp->op[0].bytemode == FLOATCODE)\n@@ -14068,13 +14055,11 @@ intel_operand_size (int bytemode, int sizeflag)\n       used_prefixes |= (prefixes & PREFIX_DATA);\n       break;\n     case d_mode:\n-    case d_scalar_swap_mode:\n     case d_swap_mode:\n     case dqd_mode:\n       oappend (\"DWORD PTR \");\n       break;\n     case q_mode:\n-    case q_scalar_swap_mode:\n     case q_swap_mode:\n       oappend (\"QWORD PTR \");\n       break;\n@@ -14526,7 +14511,6 @@ OP_E_memory (int bytemode, int sizeflag)\n \tcase xmm_md_mode:\n \tcase d_mode:\n \tcase d_swap_mode:\n-\tcase d_scalar_swap_mode:\n \t      shift = 2;\n \t      break;\n \t    }\n@@ -14586,7 +14570,6 @@ OP_E_memory (int bytemode, int sizeflag)\n \tcase xmm_mq_mode:\n \tcase q_mode:\n \tcase q_swap_mode:\n-\tcase q_scalar_swap_mode:\n \t  shift = 3;\n \t  break;\n \tcase bw_unit_mode:\n@@ -15860,9 +15843,7 @@ OP_EX (int bytemode, int sizeflag)\n   if ((sizeflag & SUFFIX_ALWAYS)\n       && (bytemode == x_swap_mode\n \t  || bytemode == d_swap_mode\n-\t  || bytemode == d_scalar_swap_mode\n-\t  || bytemode == q_swap_mode\n-\t  || bytemode == q_scalar_swap_mode))\n+\t  || bytemode == q_swap_mode))\n     swap_operand ();\n \n   if (need_vex\n@@ -15877,8 +15858,6 @@ OP_EX (int bytemode, int sizeflag)\n       && bytemode != evex_half_bcst_xmmq_mode\n       && bytemode != ymm_mode\n       && bytemode != tmm_mode\n-      && bytemode != d_scalar_swap_mode\n-      && bytemode != q_scalar_swap_mode\n       && bytemode != vex_scalar_w_dq_mode)\n     {\n       switch (vex.length)\n@@ -16409,9 +16388,6 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n   if (!need_vex)\n     abort ();\n \n-  if (!need_vex_reg)\n-    return;\n-\n   reg = vex.register_specifier;\n   vex.register_specifier = 0;\n   if (address_mode != mode_64bit)\n@@ -16518,6 +16494,13 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n   oappend (names[reg]);\n }\n \n+static void\n+OP_VexR (int bytemode, int sizeflag)\n+{\n+  if (modrm.mod == 3)\n+    OP_VEX (bytemode, sizeflag);\n+}\n+\n static void\n OP_VexW (int bytemode, int sizeflag)\n {\n@@ -16571,22 +16554,6 @@ OP_VexI4 (int bytemode ATTRIBUTE_UNUSED,\n   oappend_maybe_intel (scratchbuf);\n }\n \n-static void\n-OP_EX_Vex (int bytemode, int sizeflag)\n-{\n-  if (modrm.mod != 3)\n-    need_vex_reg = 0;\n-  OP_EX (bytemode, sizeflag);\n-}\n-\n-static void\n-OP_XMM_Vex (int bytemode, int sizeflag)\n-{\n-  if (modrm.mod != 3)\n-    need_vex_reg = 0;\n-  OP_XMM (bytemode, sizeflag);\n-}\n-\n static void\n VPCMP_Fixup (int bytemode ATTRIBUTE_UNUSED,\n \t     int sizeflag ATTRIBUTE_UNUSED)"
    }
  ]
}