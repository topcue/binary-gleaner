{
  "sha": "7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2E2YmYzYmVjYmUzZTBjZTQ3ZDI2ODFlZGNmZTdhZGNiNjdmZTRlMg==",
  "commit": {
    "author": {
      "name": "Sergey Belyashov",
      "email": "sergey.belyashov@gmail.com",
      "date": "2020-01-14T13:13:57Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-01-14T13:13:57Z"
    },
    "message": "Fix various assembler testsuite failures for the Z80 target.\n\n\tPR 25377\ngas\t* config/tc-z80.c: Add support for half precision, single\n\tprecision and double precision floating point values.\n\t* config/tc-z80.h b/gas/config/tc-z80.h: Disable string escapes.\n\t* doc/as.texi: Add new z80 command line options.\n\t* doc/c-z80.texi: Document new z80 command line options.\n\t* testsuite/gas/z80/ez80_pref_dis.s: New test.\n\t* testsuite/gas/z80/ez80_pref_dis.d: New test driver.\n\t* testsuite/gas/z80/z80.exp: Run the new test.\n\t* testsuite/gas/z80/fp_math48.d: Use correct command line option.\n\t* testsuite/gas/z80/fp_zeda32.d: Likewise.\n\t* testsuite/gas/z80/strings.d: Update expected output.\n\nopcodes\t* z80-dis.c (suffix): Use .db instruction to generate double\n\tprefix.",
    "tree": {
      "sha": "a164f68d854f21e3f5b27109be9e88f69fbf7fdb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a164f68d854f21e3f5b27109be9e88f69fbf7fdb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/comments",
  "author": {
    "login": "b-s-a",
    "id": 2833802,
    "node_id": "MDQ6VXNlcjI4MzM4MDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2833802?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/b-s-a",
    "html_url": "https://github.com/b-s-a",
    "followers_url": "https://api.github.com/users/b-s-a/followers",
    "following_url": "https://api.github.com/users/b-s-a/following{/other_user}",
    "gists_url": "https://api.github.com/users/b-s-a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/b-s-a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/b-s-a/subscriptions",
    "organizations_url": "https://api.github.com/users/b-s-a/orgs",
    "repos_url": "https://api.github.com/users/b-s-a/repos",
    "events_url": "https://api.github.com/users/b-s-a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/b-s-a/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef4e5ba50c76511d4306edf1526c15269f1d7747",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef4e5ba50c76511d4306edf1526c15269f1d7747",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef4e5ba50c76511d4306edf1526c15269f1d7747"
    }
  ],
  "stats": {
    "total": 378,
    "additions": 251,
    "deletions": 127
  },
  "files": [
    {
      "sha": "07cb331d084f6e272c260286fec33a893b9e1bd3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -1,3 +1,18 @@\n+2020-01-14  Sergey Belyashov  <sergey.belyashov@gmail.com>\n+\n+\tPR 25377\n+\t* config/tc-z80.c: Add support for half precision, single\n+\tprecision and double precision floating point values.\n+\t* config/tc-z80.h b/gas/config/tc-z80.h: Disable string escapes.\n+\t* doc/as.texi: Add new z80 command line options.\n+\t* doc/c-z80.texi: Document new z80 command line options.\n+\t* testsuite/gas/z80/ez80_pref_dis.s: New test.\n+\t* testsuite/gas/z80/ez80_pref_dis.d: New test driver.\n+\t* testsuite/gas/z80/z80.exp: Run the new test.\n+\t* testsuite/gas/z80/fp_math48.d: Use correct command line option.\n+\t* testsuite/gas/z80/fp_zeda32.d: Likewise.\n+\t* testsuite/gas/z80/strings.d: Update expected output.\n+\n 2020-01-13  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/tc-aarch64.c (f64mm, f32mm): Add sve as a feature"
    },
    {
      "sha": "d823549ff0940de5720d8aa1d09349d41337492a",
      "filename": "gas/config/tc-z80.c",
      "status": "modified",
      "additions": 55,
      "deletions": 13,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/config/tc-z80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/config/tc-z80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z80.c?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -23,13 +23,14 @@\n #include \"safe-ctype.h\"\n #include \"subsegs.h\"\n #include \"elf/z80.h\"\n+#include \"dwarf2dbg.h\"\n \n /* Exported constants.  */\n const char comment_chars[] = \";\\0\";\n const char line_comment_chars[] = \"#;\\0\";\n const char line_separator_chars[] = \"\\0\";\n const char EXP_CHARS[] = \"eE\\0\";\n-const char FLT_CHARS[] = \"RrFf\\0\";\n+const char FLT_CHARS[] = \"RrDdFfSsHh\\0\";\n \n /* For machine specific options.  */\n const char * md_shortopts = \"\"; /* None yet.  */\n@@ -50,8 +51,8 @@ enum options\n   OPTION_MACH_IUP,\n   OPTION_MACH_WUP,\n   OPTION_MACH_FUP,\n-  OPTION_FLOAT_FORMAT,\n-  OPTION_DOUBLE_FORMAT,\n+  OPTION_FP_SINGLE_FORMAT,\n+  OPTION_FP_DOUBLE_FORMAT,\n   OPTION_COMPAT_LL_PREFIX,\n   OPTION_COMPAT_COLONLESS,\n   OPTION_COMPAT_SDCC\n@@ -84,8 +85,8 @@ struct option md_longopts[] =\n   { \"z180\",      no_argument, NULL, OPTION_MACH_Z180},\n   { \"ez80\",      no_argument, NULL, OPTION_MACH_EZ80_Z80},\n   { \"ez80-adl\",  no_argument, NULL, OPTION_MACH_EZ80_ADL},\n-  { \"float\",     required_argument, NULL, OPTION_FLOAT_FORMAT},\n-  { \"double\",    required_argument, NULL, OPTION_DOUBLE_FORMAT},\n+  { \"fp-s\",      required_argument, NULL, OPTION_FP_SINGLE_FORMAT},\n+  { \"fp-d\",      required_argument, NULL, OPTION_FP_DOUBLE_FORMAT},\n   { \"strict\",    no_argument, NULL, OPTION_MACH_FUD},\n   { \"full\",      no_argument, NULL, OPTION_MACH_IUP},\n   { \"with-inst\", required_argument, NULL, OPTION_MACH_INST},\n@@ -164,6 +165,12 @@ static const char *\n str_to_zeda32 (char *litP, int *sizeP);\n static const char *\n str_to_float48 (char *litP, int *sizeP);\n+static const char *\n+str_to_ieee754_h (char *litP, int *sizeP);\n+static const char *\n+str_to_ieee754_s (char *litP, int *sizeP);\n+static const char *\n+str_to_ieee754_d (char *litP, int *sizeP);\n \n static str_to_float_t\n get_str_to_float (const char *arg)\n@@ -174,7 +181,16 @@ get_str_to_float (const char *arg)\n   if (strcasecmp (arg, \"math48\") == 0)\n     return str_to_float48;\n \n-  if (strcasecmp (arg, \"ieee754\") != 0)\n+  if (strcasecmp (arg, \"half\") != 0)\n+    return str_to_ieee754_h;\n+\n+  if (strcasecmp (arg, \"single\") != 0)\n+    return str_to_ieee754_s;\n+\n+  if (strcasecmp (arg, \"double\") != 0)\n+    return str_to_ieee754_d;\n+\n+  if (strcasecmp (arg, \"ieee754\") == 0)\n     as_fatal (_(\"invalid floating point numbers type `%s'\"), arg);\n   return NULL;\n }\n@@ -248,10 +264,10 @@ md_parse_option (int c, const char* arg)\n       ins_ok = INS_GBZ80;\n       ins_err = INS_UNDOC | INS_UNPORT;\n       break;\n-    case OPTION_FLOAT_FORMAT:\n+    case OPTION_FP_SINGLE_FORMAT:\n       str_to_float = get_str_to_float (arg);\n       break;\n-    case OPTION_DOUBLE_FORMAT:\n+    case OPTION_FP_DOUBLE_FORMAT:\n       str_to_double = get_str_to_float (arg);\n       break;\n     case OPTION_MACH_INST:\n@@ -319,11 +335,14 @@ Compatibility options:\\n\\\n   -local-prefix=TEXT\\t  treat labels prefixed by TEXT as local\\n\\\n   -colonless\\t\\t  permit colonless labels\\n\\\n   -sdcc\\t\\t\\t  accept SDCC specific instruction syntax\\n\\\n-  -float=FORMAT\\t\\t  set floating point numbers format\\n\\\n-  -double=FORMAT\\t\\t  set floating point numbers format\\n\\\n+  -fp-s=FORMAT\\t\\t  set single precission FP numbers format\\n\\\n+  -fp-d=FORMAT\\t\\t  set double precission FP numbers format\\n\\\n Where FORMAT one of:\\n\\\n   ieee754\\t\\t  IEEE754 compatible\\n\\\n-  zeda32\\t\\t\\t  Zeda z80float library 32 bit format\\n\\\n+  half\\t\\t\\t  IEEE754 half precision (16 bit)\\n\\\n+  single\\t\\t  IEEE754 single precision (32 bit)\\n\\\n+  double\\t\\t  IEEE754 double precision (64 bit)\\n\\\n+  zeda32\\t\\t  Zeda z80float library 32 bit format\\n\\\n   math48\\t\\t  48 bit format from Math48 library\\n\\\n \\n\\\n Support for known undocumented instructions:\\n\\\n@@ -649,13 +668,17 @@ md_atof (int type, char *litP, int *sizeP)\n     {\n     case 'f':\n     case 'F':\n+    case 's':\n+    case 'S':\n       if (str_to_float)\n-        return str_to_float (litP, sizeP);\n+\treturn str_to_float (litP, sizeP);\n       break;\n     case 'd':\n     case 'D':\n+    case 'r':\n+    case 'R':\n       if (str_to_double)\n-        return str_to_double (litP, sizeP);\n+\treturn str_to_double (litP, sizeP);\n       break;\n     }\n   return ieee_md_atof (type, litP, sizeP, FALSE);\n@@ -3255,6 +3278,7 @@ md_assemble (char *str)\n     }\n   else\n     {\n+      dwarf2_emit_insn (0);\n       if ((*p) && (!ISSPACE (*p)))\n         {\n           if (*p != '.' || !(ins_ok & INS_EZ80) || !assemble_suffix (&p))\n@@ -3670,3 +3694,21 @@ str_to_float48(char *litP, int *sizeP)\n     *litP++ = (char)(mantissa >> i);\n   return NULL;\n }\n+\n+static const char *\n+str_to_ieee754_h(char *litP, int *sizeP)\n+{\n+  return ieee_md_atof ('h', litP, sizeP, FALSE);\n+}\n+\n+static const char *\n+str_to_ieee754_s(char *litP, int *sizeP)\n+{\n+  return ieee_md_atof ('s', litP, sizeP, FALSE);\n+}\n+\n+static const char *\n+str_to_ieee754_d(char *litP, int *sizeP)\n+{\n+  return ieee_md_atof ('d', litP, sizeP, FALSE);\n+}"
    },
    {
      "sha": "57490270913bb178b0cde066a1fad66ec18380b8",
      "filename": "gas/config/tc-z80.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/config/tc-z80.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/config/tc-z80.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z80.h?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -96,7 +96,6 @@ extern void z80_cons_fix_new (fragS *, int, int, expressionS *);\n /* We allow single quotes to delimit character constants as\n    well, but it is cleaner to handle that in tc-z80.c.  */\n #define SINGLE_QUOTE_STRINGS\n-#define TC_STRING_ESCAPES 0\n \n /* An `.lcomm' directive with no explicit alignment parameter will\n    use this macro to set P2VAR to the alignment that a request for"
    },
    {
      "sha": "fa1550961599ac6801b11de1c0cb092ea61b054d",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 18,
      "deletions": 67,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -631,6 +631,11 @@ gcc(1), ld(1), and the Info entries for @file{binutils} and @file{ld}.\n \n @emph{Target Z80 options:}\n   [@b{-z80}]|[@b{-z180}]|[@b{-r800}]|[@b{-ez80}]|[@b{-ez80-adl}]\n+  [@b{-local-prefix=}@var{PREFIX}]\n+  [@b{-colonless}]\n+  [@b{-sdcc}]\n+  [@b{-fp-s=}@var{FORMAT}]\n+  [@b{-fp-d=}@var{FORMAT}]\n   [@b{-strict}]|[@b{-full}]\n   [@b{-with-inst=@var{INST}[,...]}] [@b{-Wnins @var{INST}[,...]}]\n   [@b{-without-inst=@var{INST}[,...]}] [@b{-Fins @var{INST}[,...]}]\n@@ -1940,78 +1945,24 @@ Xtensa processor.\n \n @end ifset\n \n-@c man begin OPTIONS\n-\n @ifset Z80\n-The following options are available when @value{AS} is configured for\n-a Z80 family processor.\n-@table @gcctabopt\n \n-@item -z80\n-Assemble for Z80 processor.\n-@item -r800\n-Assemble for R800 processor.\n-@item -z180\n-Assemble for Z180 processor.\n-@item -ez80\n-Assemble for eZ80 processor in Z80 memory mode by default.\n-@item -ez80-adl\n-Assemble for eZ80 processor in ADL memory mode by default.\n-\n-@item  @code{-colonless}\n-Accept colonless labels. All names at line begin are treated as labels.\n-@item  @code{-sdcc}\n-Accept assembler code produces by SDCC.\n-\n-@item  @code{-strict}\n-Accept documented instructions only.\n-@item  @code{-full}\n-Accept all known Z80 instructions.\n-@item  @code{-with-inst=INST[,...]}\n-@itemx @code{-Wnins INST[,...]}\n-Enable specified undocumented instruction(s).\n-@item  @code{-without-inst=INST[,...]}\n-@itemx @code{-Fins INST[,...]}\n-Disable specified undocumented instruction(s).\n-\n-@item  -ignore-undocumented-instructions\n-@itemx -Wnud\n-Assemble undocumented Z80 instructions that also work on R800 without warning.\n-@item  -ignore-unportable-instructions\n-@itemx -Wnup\n-Assemble all undocumented Z80 instructions without warning.\n-@item  -warn-undocumented-instructions\n-@itemx -Wud\n-Issue a warning for undocumented Z80 instructions that also work on R800.\n-@item  -warn-unportable-instructions\n-@itemx -Wup\n-Issue a warning for undocumented Z80 instructions that do not work on R800.\n-@item  -forbid-undocumented-instructions\n-@itemx -Fud\n-Treat all undocumented instructions as errors.\n-@item  -forbid-unportable-instructions\n-@itemx -Fup\n-Treat undocumented Z80 instructions that do not work on R800 as errors.\n-@end table\n+@ifclear man\n+@xref{Z80 Options}, for the options available when @value{AS} is configured\n+for an Z80 processor.\n+@end ifclear\n \n-Folowing undocumented instructions may be enabled/disabled by\n-@code{-with-inst}/@code{-without-inst}:\n-@table @gcctabopt\n-@item  @code{idx-reg-halves}\n-All operations with halves of index registers (IXL, IXH, IYL, IYH).\n-@item  @code{sli}\n-SLI or SLL instruction.\n-@item  @code{op-ii-ld}\n-Istructions like @code{<op> (<ii>+<d>),<r>}, where @code{<op>}\n-is shift or bit manipulation instruction (RLC, SLA, SET, RES...).\n-@item @code{in-f-c}\n-Instruction @code{IN F,(C)}.\n-@item @code{out-c-0}\n-Instruction @code{OUT (C),0}\n-@end table\n+@ifset man\n+@c man begin OPTIONS\n+The following options are available when @value{AS} is configured for an\n+Z80 processor.\n+@c man end\n+@c man begin INCLUDE\n+@include c-z80.texi\n+@c ended inside the included file\n @end ifset\n \n-@c man end\n+@end ifset\n \n @menu\n * Manual::                      Structure of this Manual"
    },
    {
      "sha": "dd6332d670eb78ffb2088e2518c40e664c1b190d",
      "filename": "gas/doc/c-z80.texi",
      "status": "modified",
      "additions": 103,
      "deletions": 36,
      "changes": 139,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/doc/c-z80.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/doc/c-z80.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-z80.texi?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -24,87 +24,125 @@\n @end menu\n \n @node Z80 Options\n-@section Options\n+@section Command-line Options\n @cindex Z80 options\n @cindex options for Z80\n-@table @option\n+@c man begin OPTIONS\n+@table @gcctabopt\n @cindex @code{-z80} command-line option, Z80\n @item -z80\n Produce code for the Z80 processor. By default accepted undocumented\n-operations with halves of index registers (IXL, IXH, IYL, IYH) and\n-instuction IN F,(C). Other useful undocumented instructions produces\n+operations with halves of index registers (@code{IXL}, @code{IXH}, @code{IYL}, @code{IYH}) and\n+instuction @code{IN F,(C)}. Other useful undocumented instructions produces\n warnings. Undocumented instructions may not work on some CPUs, use\n them on your own risk.\n \n-@cindex @code{-r800} command-line option, R800\n+@cindex @code{-r800} command-line option, Z80\n @item -r800\n Produce code for the R800 processor.\n \n-@cindex @code{-z180} command-line option, Z180\n+@cindex @code{-z180} command-line option, Z80\n @item -z180\n Produce code for the Z180 processor.\n \n-@cindex @code{-ez80} command-line option, eZ80\n+@cindex @code{-ez80} command-line option, Z80\n @item -ez80\n Produce code for the eZ80 processor in Z80 memory mode by default.\n \n-@cindex @code{-ez80-adl} command-line option, eZ80\n+@cindex @code{-ez80-adl} command-line option, Z80\n @item -ez80-adl\n Produce code for the eZ80 processor in ADL memory mode by default.\n \n-@cindex Compatibility options\n-@item  @code{-colonless}\n+@cindex @code{-local-prefix} command-line option, Z80\n+@item  -local-prefix=@var{prefix}\n+Mark all labels with specified prefix as local. But such label can be\n+marked global explicitly in the code. This option do not change default\n+local label prefix @code{.L}, it is just adds new one.\n+\n+@cindex @code{-colonless} command-line option, Z80\n+@item  -colonless\n Accept colonless labels. All names at line begin are treated as labels.\n \n-@item  @code{-sdcc}\n-Accept assembler code produces by SDCC.\n+@cindex @code{-sdcc} command-line option, Z80\n+@item  -sdcc\n+Accept assembler code produced by SDCC.\n+\n+@cindex @code{-fp-s} command-line option, Z80\n+@item -fp-s=@var{FORMAT}\n+Single precision floating point numbers format. Default: ieee754 (32 bit).\n \n-@cindex Undocumented instruction control\n-@item  @code{-strict}\n+@cindex @code{-fp-d} command-line option, Z80\n+@item -fp-d=@var{FORMAT}\n+Double precision floating point numbers format. Default: ieee754 (64 bit).\n+\n+@cindex @code{-strict} command-line option, Z80\n+@item  -strict\n Accept documented instructions only.\n \n-@item  @code{-full}\n+@cindex @code{-full} command-line option, Z80\n+@item  -full\n Accept all known Z80 instructions.\n \n-@item  @code{-with-inst=INST[,...]}\n-@itemx @code{-Wnins INST[,...]}\n+@item  -with-inst=@var{INST}[,...]\n+@itemx -Wnins @var{INST}[,...]\n Enable specified undocumented instruction(s).\n \n-@item  @code{-without-inst=INST[,...]}\n-@itemx @code{-Fins INST[,...]}\n+@item  -without-inst=@var{INST}[,...]\n+@itemx -Fins @var{INST}[,...]\n Disable specified undocumented instruction(s).\n \n-@cindex Obsolete options\n-@item  @code{-ignore-undocumented-instructions}\n-@itemx @code{-Wnud}\n+@item  -ignore-undocumented-instructions\n+@itemx -Wnud\n Silently assemble undocumented Z80-instructions that have been adopted\n as documented R800-instructions .\n-@item  @code{-ignore-unportable-instructions}\n-@itemx @code{-Wnup}\n+@item  -ignore-unportable-instructions\n+@itemx -Wnup\n Silently assemble all undocumented Z80-instructions.\n-@item  @code{-warn-undocumented-instructions}\n-@itemx @code{-Wud}\n+@item  -warn-undocumented-instructions\n+@itemx -Wud\n Issue warnings for undocumented Z80-instructions that work on R800, do\n not assemble other undocumented instructions without warning.\n-@item  @code{-warn-unportable-instructions}\n-@itemx @code{-Wup}\n+@item  -warn-unportable-instructions\n+@itemx -Wup\n Issue warnings for other undocumented Z80-instructions, do not treat any\n undocumented instructions as errors.\n-@item  @code{-forbid-undocumented-instructions}\n-@itemx @code{-Fud}\n+@item  -forbid-undocumented-instructions\n+@itemx -Fud\n Treat all undocumented z80-instructions as errors.\n @item  -forbid-unportable-instructions\n-@itemx @code{-Fup}\n+@itemx -Fup\n Treat undocumented z80-instructions that do not work on R800 as errors.\n @end table\n+@c man end\n+\n+Floating point numbers formats.\n+@table @option\n+@item @code{ieee754}\n+Single or double precision IEEE754 compatible format.\n+\n+@item @code{half}\n+Half precision IEEE754 compatible format (16 bits).\n+\n+@item @code{single}\n+Single precision IEEE754 compatible format (32 bits).\n+\n+@item @code{double}\n+Double precision IEEE754 compatible format (64 bits).\n+\n+@item @code{zeda32}\n+32 bit floating point format from z80float library by Zeda.\n+\n+@item @code{math48}\n+48 bit floating point format from Math48 package by Anders Hejlsberg.\n+@end table\n \n Known undocumented instructions.\n @table @option\n @cindex Known undocumented instructions\n @item  @code{idx-reg-halves}\n-All operations with halves of index registers (IXL, IXH, IYL, IYH).\n+All operations with halves of index registers (@code{IXL}, @code{IXH}, @code{IYL}, @code{IYH}).\n @item  @code{sli}\n-SLI or SLL instruction. Same as @code{SLA r; INC r}.\n+@code{SLI} or @code{SLL} instruction. Same as @code{SLA r; INC r}.\n @item  @code{op-ii-ld}\n Istructions like @code{<op> (<ii>+<d>),<r>}. For example: @code{RL (IX+5),C}\n @item @code{in-f-c}\n@@ -132,6 +170,7 @@ The suffix @samp{b} denotes a backreference to local label.\n * Z80-Chars::                Special Characters\n * Z80-Regs::                 Register Names\n * Z80-Case::                 Case Sensitivity\n+* Z80-Labels::               Labels\n @end menu\n \n @node Z80-Chars\n@@ -191,11 +230,35 @@ The case of letters is significant in labels and symbol names. The case\n is also important to distinguish the suffix @samp{b} for a backward reference\n to a local label from the suffix @samp{B} for a number in binary notation.\n \n+@node Z80-Labels\n+@subsection Labels\n+\n+@cindex labels, Z80\n+@cindex Z80 labels\n+Labels started by @code{.L} acts as local labels. You may specify custom local\n+label prefix by @code{-local-prefix} command-line option.\n+Dollar, forward and backward local labels are supported. By default, all labels\n+are followed by colon.\n+Legacy code with colonless labels can be built with @code{-colonless}\n+command-line option specified. In this case all tokens at line begin are treated\n+as labels.\n+\n @node Z80 Floating Point\n @section Floating Point\n @cindex floating point, Z80\n @cindex Z80 floating point\n-Floating-point numbers are not supported.\n+Floating-point numbers of following types are supported:\n+\n+@table @option\n+@item @code{ieee754}\n+Supported half, single and double precision IEEE754 compatible numbers.\n+\n+@item @code{zeda32}\n+32 bit floating point numbers from z80float library by Zeda.\n+\n+@item @code{math48}\n+48 bit floating point numbers from Math48 package by Anders Hejlsberg.\n+@end table\n \n @node Z80 Directives\n @section Z80 Assembler Directives\n@@ -208,15 +271,19 @@ These are the additional directives in @code{@value{AS}} for the Z80:\n \n @table @code\n @item assume @var{ADL}@samp{=}@var{expression}\n-Set ADL status for eZ80. Non-null value enable compilation ADL mode else\n+Set ADL status for eZ80. Non-zero value enable compilation in ADL mode else\n used Z80 mode. ADL and Z80 mode produces incompatible object code. Mixing\n both of them within one binary may lead problems with disassembler.\n \n @item db @var{expression}|@var{string}[,@var{expression}|@var{string}...]\n @itemx defb @var{expression}|@var{string}[,@var{expression}|@var{string}...]\n+@itemx defm @var{string}...]\n For each @var{string} the characters are copied to the object file, for\n each other @var{expression} the value is stored in one byte.\n A warning is issued in case of an overflow.\n+Backslash symbol in the strings is generic symbol, it cannot be used as\n+escape character (for this purpose use @code{.ascii} or @code{.asciiz}\n+directives).\n \n @item dw @var{expression}[,@var{expression}...]\n @itemx defw @var{expression}[,@var{expression}...]\n@@ -289,7 +356,7 @@ The assembler also supports the following undocumented Z80-instructions,\n that have not been adopted in any other instruction set:\n @table @code\n @item out (c),0\n-Sends zero to the port pointed to by register c.\n+Sends zero to the port pointed to by register @code{C}.\n \n @item sli @var{m}\n Equivalent to @code{@var{m} = (@var{m}<<1)+1}, the operand @var{m} can"
    },
    {
      "sha": "d76e43f6aabb7eb61738359c7c72c5d87d1b372e",
      "filename": "gas/testsuite/gas/z80/ez80_pref_dis.d",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/ez80_pref_dis.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/ez80_pref_dis.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/ez80_pref_dis.d?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -0,0 +1,34 @@\n+#name: multiple eZ80 opcode prefixes\n+#as: -ez80\n+#objdump: -d\n+\n+.*:[     ]+file format (coff)|(elf32)\\-z80\n+\n+\n+Disassembly of section \\.text:\n+\n+00000000 <\\.text>:\n+[   ]+0:[\t]+40[                \t]+\\.db 0x40\\s.*\n+[   ]+1:[\t]+40[                \t]+\\.db 0x40\\s.*\n+[   ]+2:[\t]+40[                \t]+\\.db 0x40\\s.*\n+[   ]+3:[\t]+40[                \t]+\\.db 0x40\\s.*\n+[   ]+4:[\t]+40[                \t]+\\.db 0x40\\s.*\n+[   ]+5:[\t]+40 00[             \t]+nop.sis\n+[   ]+7:[\t]+49[                \t]+\\.db 0x49\\s.*\n+[   ]+8:[\t]+49[                \t]+\\.db 0x49\\s.*\n+[   ]+9:[\t]+49[                \t]+\\.db 0x49\\s.*\n+[   ]+a:[\t]+49[                \t]+\\.db 0x49\\s.*\n+[   ]+b:[\t]+49[                \t]+\\.db 0x49\\s.*\n+[   ]+c:[\t]+49 00[             \t]+nop.lis\n+[   ]+e:[\t]+52[                \t]+\\.db 0x52\\s.*\n+[   ]+f:[\t]+52[                \t]+\\.db 0x52\\s.*\n+[  ]+10:[\t]+52[                \t]+\\.db 0x52\\s.*\n+[  ]+11:[\t]+52[                \t]+\\.db 0x52\\s.*\n+[  ]+12:[\t]+52[                \t]+\\.db 0x52\\s.*\n+[  ]+13:[\t]+52 00[             \t]+nop.sil\n+[  ]+15:[\t]+5b[                \t]+\\.db 0x5b\\s.*\n+[  ]+16:[\t]+5b[                \t]+\\.db 0x5b\\s.*\n+[  ]+17:[\t]+5b[                \t]+\\.db 0x5b\\s.*\n+[  ]+18:[\t]+5b[                \t]+\\.db 0x5b\\s.*\n+[  ]+19:[\t]+5b[                \t]+\\.db 0x5b\\s.*\n+[  ]+1a:[\t]+5b 00[             \t]+nop.lil"
    },
    {
      "sha": "77e97801a01f89d0fe4134abfef93b03a30b6179",
      "filename": "gas/testsuite/gas/z80/ez80_pref_dis.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/ez80_pref_dis.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/ez80_pref_dis.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/ez80_pref_dis.s?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -0,0 +1,8 @@\n+; eZ80 memory mode prefix disassembler test\n+\t.text\n+\t.org\t0\n+\t.db\t0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0\n+\t.db\t0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0\n+\t.db\t0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0\n+\t.db\t0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0\n+"
    },
    {
      "sha": "d295e8643733ea8ba6b6b86350b632bf2c2fd37b",
      "filename": "gas/testsuite/gas/z80/fp_math48.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/fp_math48.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/fp_math48.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/fp_math48.d?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -1,6 +1,6 @@\n #name: Math48 floating point numbers\n #objdump: -s -j .data\n-#as: -float=math48\n+#as: -fp-s=math48\n \n .*:[     ]+file format (coff)|(elf32)\\-z80\n "
    },
    {
      "sha": "2875ede126fe2748bc2342407d3ab2740e40abbc",
      "filename": "gas/testsuite/gas/z80/fp_zeda32.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/fp_zeda32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/fp_zeda32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/fp_zeda32.d?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -1,5 +1,5 @@\n #name: Zeda32 floating point numbers\n-#as: -float=zeda32\n+#as: -fp-s=zeda32\n #objdump: -s -j .data\n \n .*:[     ]+file format (coff)|(elf32)\\-z80"
    },
    {
      "sha": "6a0e9f61db5bd6aa294d5bb05b88567bc397f8b8",
      "filename": "gas/testsuite/gas/z80/strings.d",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/strings.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/strings.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/strings.d?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -4,11 +4,11 @@\n .*:[     ]+file format (coff)|(elf32)\\-z80\n \n Contents of section \\.data:\n- 0000 2e646220 74657874 5c6e3833 37343830.*\n- 0010 44454642 20746578 745c6e64 38373833.*\n- 0020 4445464d 20746578 745c6e33 37383537.*\n- 0030 44422074 6578745c 6e333837 39383337.*\n- 0040 2e617363 69692074 6578745c 37325c32.*\n- 0050 37375c66 5c6e5c30 2e617363 697a2074.*\n- 0060 6578745c 6e393939 002e7374 72696e67.*\n+ 0000 2e646220 74657874 5c6e3833 37343830 .*\n+ 0010 44454642 20746578 745c6e64 38373833 .*\n+ 0020 4445464d 20746578 745c6e33 37383537 .*\n+ 0030 44422074 6578745c 6e333837 39383337 .*\n+ 0040 2e617363 69692074 6578743a bf0c0a00 .*\n+ 0050 2e617363 697a2074 6578740a 39393900 .*\n+ 0060 2e737472 696e6720 74657874 0a090000 .*\n #pass"
    },
    {
      "sha": "6ba13fc0aca0172c47f255c7a5a11dd44d1d11c4",
      "filename": "gas/testsuite/gas/z80/z80.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/z80.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/gas/testsuite/gas/z80/z80.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/z80/z80.exp?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -90,6 +90,8 @@ if [istarget z80-*-*] then {\n     run_dump_test \"ez80_adl_all\"\n #test for eZ80 instructions with sufficies in ADL mode\n     run_dump_test \"ez80_adl_suf\"\n+#test for eZ80 opcode prefixes as multiple bytes before instruction\n+    run_dump_test \"ez80_pref_dis\"\n # test for SDCC compatibility mode\n     run_dump_test \"sdcc\"\n # test for colonless labels"
    },
    {
      "sha": "accd25a0d86bf32be71da17f6c71017b3d258e2b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-14  Sergey Belyashov  <sergey.belyashov@gmail.com>\n+\n+\tPR 25377\n+\t* z80-dis.c (suffix): Use .db instruction to generate double\n+\tprefix.\n+\n 2020-01-14  Alan Modra  <amodra@gmail.com>\n \n \t* z8k-dis.c (unpack_instr): Formatting.  Cast unsigned short"
    },
    {
      "sha": "7dfb5f2bd9e5612ced209b7084891bfdddc5d526",
      "filename": "opcodes/z80-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/opcodes/z80-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2/opcodes/z80-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/z80-dis.c?ref=7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "patch": "@@ -738,7 +738,7 @@ suffix (struct buffer *buf, disassemble_info *info, const char *txt)\n       || buf->data[1] == 0x5b)\n     {\n       /* Double prefix, or end of data.  */\n-      info->fprintf_func (info->stream, \"nop ;%s\", txt);\n+      info->fprintf_func (info->stream, \".db 0x%02x ; %s\", (unsigned)buf->data[0], txt);\n       buf->n_used = 1;\n       return buf->n_used;\n     }"
    }
  ]
}