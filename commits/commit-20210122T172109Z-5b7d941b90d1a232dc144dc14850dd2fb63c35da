{
  "sha": "5b7d941b90d1a232dc144dc14850dd2fb63c35da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI3ZDk0MWI5MGQxYTIzMmRjMTQ0ZGMxNDg1MGRkMmZiNjNjMzVkYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-01-22T17:21:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-22T17:21:09Z"
    },
    "message": "gdb: add owner-related methods to struct type\n\nAdd the following methods to struct type:\n\n * is_objfile_owned\n * set_owner (objfile and gdbarch overloads)\n * objfile and arch getters\n\nRename the fields in main_type to ensure no other code accesses them\ndirectly.  As usual, we can't make them actually private, but giving\nthem the `m_` prefix will help making sure they are not accessed when\nnot supposed to, by convention.\n\nRemove the TYPE_OWNER macro to ensure no code uses the type_owner struct\ndirectly.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_OBJFILE_OWNED): Adjust.\n\t(TYPE_OWNER): Remove.\n\t(TYPE_OBJFILE): Adjust.\n\t(struct main_type) <flag_objfile_owned>: Rename to...\n\t<m_flag_objfile_owned>: ... this.\n\t<owner>: Rename to...\n\t<m_owner>: ... this.\n\t(struct type) <is_objfile_owned, set_owner, objfile, arch>: New\n\tmethods.\n\t(TYPE_ALLOC): Adjust.\n\t* gdbtypes.c (alloc_type): Adjust.\n\t(alloc_type_arch): Adjust.\n\t(alloc_type_copy): Adjust.\n\t(get_type_arch): Adjust.\n\t(smash_type): Adjust.\n\t(lookup_array_range_type): Adjust.\n\t(recursive_dump_type): Adjust.\n\t(copy_type_recursive): Adjust.\n\t* compile/compile-c-types.c (convert_func): Adjust.\n\t(convert_type_basic): Adjust.\n\t* compile/compile-cplus-types.c (compile_cplus_convert_func):\n\tAdjust.\n\t* language.c\n\t(language_arch_info::type_and_symbol::alloc_type_symbol):\n\tAdjust.\n\nChange-Id: I7f92e869d9f92e2402a3d3007dd0832e05aa6ac8",
    "tree": {
      "sha": "df27382d780f8e646017f31cb26ea48922bade64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df27382d780f8e646017f31cb26ea48922bade64"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b7d941b90d1a232dc144dc14850dd2fb63c35da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b7d941b90d1a232dc144dc14850dd2fb63c35da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b7d941b90d1a232dc144dc14850dd2fb63c35da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b7d941b90d1a232dc144dc14850dd2fb63c35da/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe461d2f70ed618c39b887579d07f49f603c1de5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe461d2f70ed618c39b887579d07f49f603c1de5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe461d2f70ed618c39b887579d07f49f603c1de5"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 104,
    "deletions": 32
  },
  "files": [
    {
      "sha": "dc7ecf13f73b059a43b1265daba695a88fb78f69",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -1,3 +1,31 @@\n+2021-01-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_OBJFILE_OWNED): Adjust.\n+\t(TYPE_OWNER): Remove.\n+\t(TYPE_OBJFILE): Adjust.\n+\t(struct main_type) <flag_objfile_owned>: Rename to...\n+\t<m_flag_objfile_owned>: ... this.\n+\t<owner>: Rename to...\n+\t<m_owner>: ... this.\n+\t(struct type) <is_objfile_owned, set_owner, objfile, arch>: New\n+\tmethods.\n+\t(TYPE_ALLOC): Adjust.\n+\t* gdbtypes.c (alloc_type): Adjust.\n+\t(alloc_type_arch): Adjust.\n+\t(alloc_type_copy): Adjust.\n+\t(get_type_arch): Adjust.\n+\t(smash_type): Adjust.\n+\t(lookup_array_range_type): Adjust.\n+\t(recursive_dump_type): Adjust.\n+\t(copy_type_recursive): Adjust.\n+\t* compile/compile-c-types.c (convert_func): Adjust.\n+\t(convert_type_basic): Adjust.\n+\t* compile/compile-cplus-types.c (compile_cplus_convert_func):\n+\tAdjust.\n+\t* language.c\n+\t(language_arch_info::type_and_symbol::alloc_type_symbol):\n+\tAdjust.\n+\n 2021-01-21  Luis Machado  <luis.machado@linaro.org>\n \n \t* coffread.c (enter_linenos): Passing string to complaint."
    },
    {
      "sha": "90de2084c85c5423c6b67bfcbd1ed249f11e4e27",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -165,9 +165,9 @@ convert_func (compile_c_instance *context, struct type *type)\n   if (target_type == NULL)\n     {\n       if (TYPE_OBJFILE_OWNED (type))\n-\ttarget_type = objfile_type (TYPE_OWNER (type).objfile)->builtin_int;\n+\ttarget_type = objfile_type (type->objfile ())->builtin_int;\n       else\n-\ttarget_type = builtin_type (TYPE_OWNER (type).gdbarch)->builtin_int;\n+\ttarget_type = builtin_type (type->arch ())->builtin_int;\n       warning (_(\"function has unknown return type; assuming int\"));\n     }\n \n@@ -324,9 +324,9 @@ convert_type_basic (compile_c_instance *context, struct type *type)\n \t   built-in parser used to do, but at least warn.  */\n \tstruct type *fallback;\n \tif (TYPE_OBJFILE_OWNED (type))\n-\t  fallback = objfile_type (TYPE_OWNER (type).objfile)->builtin_int;\n+\t  fallback = objfile_type (type->objfile ())->builtin_int;\n \telse\n-\t  fallback = builtin_type (TYPE_OWNER (type).gdbarch)->builtin_int;\n+\t  fallback = builtin_type (type->arch ())->builtin_int;\n \twarning (_(\"variable has unknown type; assuming int\"));\n \treturn convert_int (context, fallback);\n       }"
    },
    {
      "sha": "ddb0d8a03682157ea2d323ae4cb232cf198162bc",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -971,9 +971,9 @@ compile_cplus_convert_func (compile_cplus_instance *instance,\n   if (target_type == nullptr)\n     {\n       if (TYPE_OBJFILE_OWNED (type))\n-\ttarget_type = objfile_type (TYPE_OWNER (type).objfile)->builtin_int;\n+\ttarget_type = objfile_type (type->objfile ())->builtin_int;\n       else\n-\ttarget_type = builtin_type (TYPE_OWNER (type).gdbarch)->builtin_int;\n+\ttarget_type = builtin_type (type->arch ())->builtin_int;\n       warning (_(\"function has unknown return type; assuming int\"));\n     }\n "
    },
    {
      "sha": "e2f8837dcb4dfc58452e3e45beab21ec936b4e4e",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -183,8 +183,7 @@ alloc_type (struct objfile *objfile)\n \t\t\t\t\t  struct main_type);\n   OBJSTAT (objfile, n_types++);\n \n-  TYPE_OBJFILE_OWNED (type) = 1;\n-  TYPE_OWNER (type).objfile = objfile;\n+  type->set_owner (objfile);\n \n   /* Initialize the fields that might not be zero.  */\n \n@@ -210,8 +209,7 @@ alloc_type_arch (struct gdbarch *gdbarch)\n   type = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct type);\n   TYPE_MAIN_TYPE (type) = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct main_type);\n \n-  TYPE_OBJFILE_OWNED (type) = 0;\n-  TYPE_OWNER (type).gdbarch = gdbarch;\n+  type->set_owner (gdbarch);\n \n   /* Initialize the fields that might not be zero.  */\n \n@@ -229,9 +227,9 @@ struct type *\n alloc_type_copy (const struct type *type)\n {\n   if (TYPE_OBJFILE_OWNED (type))\n-    return alloc_type (TYPE_OWNER (type).objfile);\n+    return alloc_type (type->objfile ());\n   else\n-    return alloc_type_arch (TYPE_OWNER (type).gdbarch);\n+    return alloc_type_arch (type->arch ());\n }\n \n /* If TYPE is gdbarch-associated, return that architecture.\n@@ -243,9 +241,9 @@ get_type_arch (const struct type *type)\n   struct gdbarch *arch;\n \n   if (TYPE_OBJFILE_OWNED (type))\n-    arch = TYPE_OWNER (type).objfile->arch ();\n+    arch = type->objfile ()->arch ();\n   else\n-    arch = TYPE_OWNER (type).gdbarch;\n+    arch = type->arch ();\n \n   /* The ARCH can be NULL if TYPE is associated with neither an objfile nor\n      a gdbarch, however, this is very rare, and even then, in most cases\n@@ -311,14 +309,17 @@ alloc_type_instance (struct type *oldtype)\n static void\n smash_type (struct type *type)\n {\n-  int objfile_owned = TYPE_OBJFILE_OWNED (type);\n-  union type_owner owner = TYPE_OWNER (type);\n+  bool objfile_owned = type->is_objfile_owned ();\n+  objfile *objfile = type->objfile ();\n+  gdbarch *arch = type->arch ();\n \n   memset (TYPE_MAIN_TYPE (type), 0, sizeof (struct main_type));\n \n   /* Restore owner information.  */\n-  TYPE_OBJFILE_OWNED (type) = objfile_owned;\n-  TYPE_OWNER (type) = owner;\n+  if (objfile_owned)\n+    type->set_owner (objfile);\n+  else\n+    type->set_owner (arch);\n \n   /* For now, delete the rings.  */\n   TYPE_CHAIN (type) = type;\n@@ -1429,9 +1430,10 @@ lookup_array_range_type (struct type *element_type,\n   struct type *range_type;\n \n   if (TYPE_OBJFILE_OWNED (element_type))\n-    index_type = objfile_type (TYPE_OWNER (element_type).objfile)->builtin_int;\n+    index_type = objfile_type (element_type->objfile ())->builtin_int;\n   else\n-    index_type = builtin_type (get_type_arch (element_type))->builtin_int;\n+    index_type = builtin_type (element_type->arch ())->builtin_int;\n+\n   range_type = create_static_range_type (NULL, index_type,\n \t\t\t\t\t low_bound, high_bound);\n \n@@ -5190,12 +5192,12 @@ recursive_dump_type (struct type *type, int spaces)\n   if (TYPE_OBJFILE_OWNED (type))\n     {\n       printf_filtered (\"%*sobjfile \", spaces, \"\");\n-      gdb_print_host_address (TYPE_OWNER (type).objfile, gdb_stdout);\n+      gdb_print_host_address (type->objfile (), gdb_stdout);\n     }\n   else\n     {\n       printf_filtered (\"%*sgdbarch \", spaces, \"\");\n-      gdb_print_host_address (TYPE_OWNER (type).gdbarch, gdb_stdout);\n+      gdb_print_host_address (type->arch (), gdb_stdout);\n     }\n   printf_filtered (\"\\n\");\n   printf_filtered (\"%*starget_type \", spaces, \"\");\n@@ -5515,8 +5517,8 @@ copy_type_recursive (struct objfile *objfile,\n   /* Copy the common fields of types.  For the main type, we simply\n      copy the entire thing and then update specific fields as needed.  */\n   *TYPE_MAIN_TYPE (new_type) = *TYPE_MAIN_TYPE (type);\n-  TYPE_OBJFILE_OWNED (new_type) = 0;\n-  TYPE_OWNER (new_type).gdbarch = get_type_arch (type);\n+\n+  new_type->set_owner (type->arch ());\n \n   if (type->name ())\n     new_type->set_name (xstrdup (type->name ()));"
    },
    {
      "sha": "bc28e8518804f8e2f45edfed2547a3f6e4f94432",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 49,
      "deletions": 7,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -224,9 +224,8 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n    owned by an architecture; TYPE_OBJFILE is NULL in this case.  */\n \n-#define TYPE_OBJFILE_OWNED(t) (TYPE_MAIN_TYPE (t)->flag_objfile_owned)\n-#define TYPE_OWNER(t) TYPE_MAIN_TYPE(t)->owner\n-#define TYPE_OBJFILE(t) (TYPE_OBJFILE_OWNED(t)? TYPE_OWNER(t).objfile : NULL)\n+#define TYPE_OBJFILE_OWNED(t) ((t)->is_objfile_owned ())\n+#define TYPE_OBJFILE(t) ((t)->objfile ())\n \n /* * True if this type was declared using the \"class\" keyword.  This is\n    only valid for C++ structure and enum types.  If false, a structure\n@@ -817,7 +816,7 @@ struct main_type\n   unsigned int m_flag_stub_supported : 1;\n   unsigned int m_flag_gnu_ifunc : 1;\n   unsigned int m_flag_fixed_instance : 1;\n-  unsigned int flag_objfile_owned : 1;\n+  unsigned int m_flag_objfile_owned : 1;\n   unsigned int m_flag_endianity_not_default : 1;\n \n   /* * True if this type was declared with \"class\" rather than\n@@ -860,7 +859,7 @@ struct main_type\n      this is somewhat ugly, but without major overhaul of the internal\n      type system, it can't be avoided for now.  */\n \n-  union type_owner owner;\n+  union type_owner m_owner;\n \n   /* * For a pointer type, describes the type of object pointed to.\n      - For an array type, describes the type of the elements.\n@@ -1243,6 +1242,49 @@ struct type\n   /* * Remove dynamic property of kind KIND from this type, if it exists.  */\n   void remove_dyn_prop (dynamic_prop_node_kind kind);\n \n+  /* Return true if this type is owned by an objfile.  Return false if it is\n+     owned by an architecture.  */\n+  bool is_objfile_owned () const\n+  {\n+    return this->main_type->m_flag_objfile_owned;\n+  }\n+\n+  /* Set the owner of the type to be OBJFILE.  */\n+  void set_owner (objfile *objfile)\n+  {\n+    this->main_type->m_owner.objfile = objfile;\n+    this->main_type->m_flag_objfile_owned = true;\n+  }\n+\n+  /* Set the owner of the type to be ARCH.  */\n+  void set_owner (gdbarch *arch)\n+  {\n+    this->main_type->m_owner.gdbarch = arch;\n+    this->main_type->m_flag_objfile_owned = false;\n+  }\n+\n+  /* Return the objfile owner of this type.\n+\n+     Return nullptr if this type is not objfile-owned.  */\n+  struct objfile *objfile () const\n+  {\n+    if (!this->is_objfile_owned ())\n+      return nullptr;\n+\n+    return this->main_type->m_owner.objfile;\n+  }\n+\n+  /* Return the gdbarch owner of this type.\n+\n+     Return nullptr if this type is not gdbarch-owned.  */\n+  gdbarch *arch () const\n+  {\n+    if (this->is_objfile_owned ())\n+      return nullptr;\n+\n+    return this->main_type->m_owner.gdbarch;\n+  }\n+\n   /* * Return true if this is an integer type whose logical (bit) size\n      differs from its storage size; false otherwise.  Always return\n      false for non-integer (i.e., non-TYPE_SPECIFIC_INT) types.  */\n@@ -2201,8 +2243,8 @@ extern const struct floatformat *floatformats_bfloat16[BFD_ENDIAN_UNKNOWN];\n \n #define TYPE_ALLOC(t,size)                                              \\\n   (obstack_alloc ((TYPE_OBJFILE_OWNED (t)                               \\\n-\t\t   ? &TYPE_OBJFILE (t)->objfile_obstack                 \\\n-\t\t   : gdbarch_obstack (TYPE_OWNER (t).gdbarch)),         \\\n+\t\t   ? &((t)->objfile ()->objfile_obstack)                \\\n+\t\t   : gdbarch_obstack ((t)->arch ())),                   \\\n \t\t  size))\n \n "
    },
    {
      "sha": "d4b84911f8b50e2f9414c5c0e1ed922fd9d152bc",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b7d941b90d1a232dc144dc14850dd2fb63c35da/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "patch": "@@ -1037,7 +1037,7 @@ language_arch_info::type_and_symbol::alloc_type_symbol\n   struct symbol *symbol;\n   struct gdbarch *gdbarch;\n   gdb_assert (!TYPE_OBJFILE_OWNED (type));\n-  gdbarch = TYPE_OWNER (type).gdbarch;\n+  gdbarch = type->arch ();\n   symbol = new (gdbarch_obstack (gdbarch)) struct symbol ();\n   symbol->m_name = type->name ();\n   symbol->set_language (lang, nullptr);"
    }
  ]
}