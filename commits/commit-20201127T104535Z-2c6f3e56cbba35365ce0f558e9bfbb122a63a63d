{
  "sha": "2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM2ZjNlNTZjYmJhMzUzNjVjZTBmNTU4ZTliZmJiMTIyYTYzYTYzZA==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-11-27T10:45:35Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-11-27T10:45:35Z"
    },
    "message": "ELF: Support .noinit and .persistent sections\n\nThe \".persistent\" section is for data that should be initialized during\nload, but not during application reset.\n\nThe \".noinit\" section is for data that should not be initialized during\nload or application reset.\n\nTargets utilizing the elf.sc linker script template can define\nHAVE_{NOINIT,PERSISTENT}=yes to include the .noinit or .persistent\noutput sections in the generated linker script.\n\nTargets with existing support for .noinit did not handle unique\n.noinit.* and .gnu.linkonce.n.* sections the .noinit output section,\nthis patch also fixes that.\n\nbfd/ChangeLog:\n\n\t* elf.c (special_sections_g): Add .gnu.linkonce.n and .gnu.linkonce.p.\n\t(special_sections_n): Add .noinit.\n\t(special_sections_p): Add .persistent.\n\nbinutils/ChangeLog:\n\n\t* testsuite/lib/binutils-common.exp (supports_noinit_section): New.\n\t(supports_persistent_section): New.\n\ngas/ChangeLog:\n\n\t* testsuite/gas/elf/elf.exp: Run new tests.\n\t* testsuite/gas/elf/section25.d: New test.\n\t* testsuite/gas/elf/section25.s: New test.\n\t* testsuite/gas/elf/section26.d: New test.\n\t* testsuite/gas/elf/section26.s: New test.\n\nld/ChangeLog:\n\n\t* emulparams/armelf.sh (OTHER_SECTIONS): Remove .noinit section\n\tdefinition.\n\tDefine HAVE_{NOINIT,PERSISTENT}=yes.\n\t* scripttempl/avr.sc (.noinit): Add .noinit.* and .gnu.linkonce.n.*\n\tinput section wildcard patterns.\n\t* scripttempl/elf.sc: Define .noinit and .persistent sections when\n\tHAVE_NOINIT or HAVE_PERSISTENT are defined to \"yes\".\n\t* scripttempl/elf32msp430.sc (.noinit): Add .noinit.* and\n\t.gnu.linkonce.n.*. input section wildcard patterns.\n\t(.persistent): Add .persistent.* and\n\t.gnu.linkonce.p.*. input section wildcard patterns.\n\t* scripttempl/elfarcv2.sc (.noinit): Add .noinit.* and\n\t.gnu.linkonce.n.*. input section wildcard patterns.\n\t* scripttempl/pru.sc: Likewise.\n\t* testsuite/ld-elf/noinit-sections-1.d: New test.\n\t* testsuite/ld-elf/noinit-sections-2.d: New test.\n\t* testsuite/ld-elf/noinit-sections-2.l: New test.\n\t* testsuite/ld-elf/noinit-sections.s: New test.\n\t* testsuite/ld-elf/persistent-sections-1.d: New test.\n\t* testsuite/ld-elf/persistent-sections-2.d: New test.\n\t* testsuite/ld-elf/persistent-sections-2.l: New test.\n\t* testsuite/ld-elf/persistent-sections.s: New test.",
    "tree": {
      "sha": "4a8dac1296da1bfb56c19087d2a339dfeb3b0956",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a8dac1296da1bfb56c19087d2a339dfeb3b0956"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bab6ead85f444cbd81c3f8ee100e12629418648a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bab6ead85f444cbd81c3f8ee100e12629418648a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bab6ead85f444cbd81c3f8ee100e12629418648a"
    }
  ],
  "stats": {
    "total": 267,
    "additions": 249,
    "deletions": 18
  },
  "files": [
    {
      "sha": "1e5e92374de0a1ca0330af17ee4e8d58048ec570",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* elf.c (special_sections_g): Add .gnu.linkonce.n and .gnu.linkonce.p.\n+\t(special_sections_n): Add .noinit.\n+\t(special_sections_p): Add .persistent.\n+\n 2020-11-26  Nick Clifton  <nickc@redhat.com>\n \n \tPR 26946"
    },
    {
      "sha": "28621da9158ce02e1e9ee8409c014408060a4ebb",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -2705,6 +2705,8 @@ static const struct bfd_elf_special_section special_sections_f[] =\n static const struct bfd_elf_special_section special_sections_g[] =\n {\n   { STRING_COMMA_LEN (\".gnu.linkonce.b\"), -2, SHT_NOBITS,      SHF_ALLOC + SHF_WRITE },\n+  { STRING_COMMA_LEN (\".gnu.linkonce.n\"), -2, SHT_NOBITS,      SHF_ALLOC + SHF_WRITE },\n+  { STRING_COMMA_LEN (\".gnu.linkonce.p\"), -2, SHT_PROGBITS,    SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".gnu.lto_\"),\t  -1, SHT_PROGBITS,    SHF_EXCLUDE },\n   { STRING_COMMA_LEN (\".got\"),\t\t   0, SHT_PROGBITS,    SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".gnu.version\"),\t   0, SHT_GNU_versym,  0 },\n@@ -2738,13 +2740,15 @@ static const struct bfd_elf_special_section special_sections_l[] =\n \n static const struct bfd_elf_special_section special_sections_n[] =\n {\n+  { STRING_COMMA_LEN (\".noinit\"),\t -2, SHT_NOBITS,   SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".note.GNU-stack\"), 0, SHT_PROGBITS, 0 },\n   { STRING_COMMA_LEN (\".note\"),\t\t -1, SHT_NOTE,\t   0 },\n   { NULL,\t\t     0,\t\t  0, 0,\t\t   0 }\n };\n \n static const struct bfd_elf_special_section special_sections_p[] =\n {\n+  { STRING_COMMA_LEN (\".persistent\"),\t -2, SHT_PROGBITS,\tSHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".preinit_array\"), -2, SHT_PREINIT_ARRAY, SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".plt\"),\t\t  0, SHT_PROGBITS,\tSHF_ALLOC + SHF_EXECINSTR },\n   { NULL,\t\t    0,\t\t  0, 0,\t\t\t0 }"
    },
    {
      "sha": "212fd6437621f2ee939a2aa9e2def2bc24dc3320",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* testsuite/lib/binutils-common.exp (supports_noinit_section): New.\n+\t(supports_persistent_section): New.\n+\n 2020-11-23  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* readelf.c (dump_section_as_ctf): Call ctf_arc_symsect_endianness."
    },
    {
      "sha": "e83d1212ee0ad739e113163175a2b6cd4de0706b",
      "filename": "binutils/testsuite/lib/binutils-common.exp",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/binutils/testsuite/lib/binutils-common.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/binutils/testsuite/lib/binutils-common.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/lib/binutils-common.exp?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -345,6 +345,45 @@ proc check_relro_support { } {\n     return $relro_available_saved\n }\n \n+# Check for support of the .noinit section, used for data that is not\n+# initialized at load, or during the application's initialization sequence.\n+proc supports_noinit_section {} {\n+    # .noinit is only supported by ELF targets.\n+    if { ![is_elf_format] } {\n+\treturn 0;\n+    }\n+\n+    # Targets that set HAVE_NOINIT=yes in their emulparams script utilizing\n+    # elf.sc, or explicitly define a .noinit section in their linker script.\n+    #\n+    # arc-*-* is not included here, since it only supports .noinit with the\n+    # non-default arcv2elf emulation.\n+    if {[istarget \"arm-*-*\"]\n+\t  || [istarget \"avr-*-*\"]\n+\t  || [istarget \"msp430-*-*\"]\n+\t  || [istarget \"pru-*-*\"] } {\n+\treturn 1;\n+    }\n+    return 0;\n+}\n+\n+# Check for support of the .persistent section, used for data that is\n+# initialized at load, but not during the application's initialization sequence.\n+proc supports_persistent_section {} {\n+    # .persistent is only supported by ELF targets.\n+    if { ![is_elf_format] } {\n+\treturn 0;\n+    }\n+\n+    # Targets that set HAVE_PERSISTENT=yes in their emulparams script utilizing\n+    # elf.sc, or explicitly define a .persistent section in their linker script.\n+    if { [istarget \"arm-*-*\"]\n+\t  || [istarget \"msp430-*-*\"] } {\n+\treturn 1;\n+    }\n+    return 0;\n+}\n+\n # Compare two files line-by-line.  FILE_1 is the actual output and FILE_2\n # is the expected output.  Ignore blank lines in either file.\n #"
    },
    {
      "sha": "97754267be9b8fce3654bb4add3b560dd711cd58",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* testsuite/gas/elf/elf.exp: Run new tests.\n+\t* testsuite/gas/elf/section25.d: New test.\n+\t* testsuite/gas/elf/section25.s: New test.\n+\t* testsuite/gas/elf/section26.d: New test.\n+\t* testsuite/gas/elf/section26.s: New test.\n+\n 2020-11-25  Alan Modra  <amodra@gmail.com>\n \n \t* output-file.c (output_file_close): Remove \"can't close\" from"
    },
    {
      "sha": "25c40a28105ba36350bf552fc25485f55ef881a3",
      "filename": "gas/testsuite/gas/elf/elf.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/elf.exp?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -266,6 +266,8 @@ if { [is_elf_format] } then {\n     run_dump_test \"section23b\"\n     run_dump_test \"section24a\"\n     run_dump_test \"section24b\"\n+    run_dump_test \"section25\"\n+    run_dump_test \"section26\"\n     run_dump_test \"sh-link-zero\"\n     run_dump_test \"dwarf2-1\" $dump_opts\n     run_dump_test \"dwarf2-2\" $dump_opts"
    },
    {
      "sha": "09353849e5bdaec9afe214159f82102a73c25612",
      "filename": "gas/testsuite/gas/elf/section25.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section25.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section25.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section25.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,12 @@\n+#name: sections 25 (.noinit)\n+#target: [supports_noinit_section]\n+#source: section25.s\n+#readelf: -S --wide\n+\n+#...\n+  \\[..\\] .noinit[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#...\n+  \\[..\\] .noinit.foo[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#...\n+  \\[..\\] .gnu.linkonce.n.bar[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#pass"
    },
    {
      "sha": "538e5c7ce4b959c774b8caf8e9447dff2f5c5a48",
      "filename": "gas/testsuite/gas/elf/section25.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section25.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section25.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section25.s?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,8 @@\n+.section .noinit\n+.word 0\n+\n+.section .noinit.foo\n+.word 0\n+\n+.section .gnu.linkonce.n.bar\n+.word 0"
    },
    {
      "sha": "15d85bdca9d08f0189274ca5c922f5110db21d4a",
      "filename": "gas/testsuite/gas/elf/section26.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section26.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section26.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section26.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,12 @@\n+#name: sections 26 (.persistent)\n+#target: [supports_persistent_section]\n+#source: section26.s\n+#readelf: -S --wide\n+\n+#...\n+  \\[..\\] .persistent[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#...\n+  \\[..\\] .persistent.foo[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#...\n+  \\[..\\] .gnu.linkonce.p.bar[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA .*\n+#pass"
    },
    {
      "sha": "7f986454229e8a078d042b27893f0187eb81d50b",
      "filename": "gas/testsuite/gas/elf/section26.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section26.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/gas/testsuite/gas/elf/section26.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section26.s?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,8 @@\n+.section .persistent\n+.word 0\n+\n+.section .persistent.foo\n+.word 0\n+\n+.section .gnu.linkonce.p.bar\n+.word 0"
    },
    {
      "sha": "fbc2d8a63183bce94a0db4c7d6d4e0d45b30164a",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -1,3 +1,28 @@\n+2020-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* emulparams/armelf.sh (OTHER_SECTIONS): Remove .noinit section\n+\tdefinition.\n+\tDefine HAVE_{NOINIT,PERSISTENT}=yes.\n+\t* scripttempl/avr.sc (.noinit): Add .noinit.* and .gnu.linkonce.n.*\n+\tinput section wildcard patterns.\n+\t* scripttempl/elf.sc: Define .noinit and .persistent sections when\n+\tHAVE_NOINIT or HAVE_PERSISTENT are defined to \"yes\".\n+\t* scripttempl/elf32msp430.sc (.noinit): Add .noinit.* and\n+\t.gnu.linkonce.n.*. input section wildcard patterns.\n+\t(.persistent): Add .persistent.* and\n+\t.gnu.linkonce.p.*. input section wildcard patterns.\n+\t* scripttempl/elfarcv2.sc (.noinit): Add .noinit.* and\n+\t.gnu.linkonce.n.*. input section wildcard patterns.\n+\t* scripttempl/pru.sc: Likewise.\n+\t* testsuite/ld-elf/noinit-sections-1.d: New test.\n+\t* testsuite/ld-elf/noinit-sections-2.d: New test.\n+\t* testsuite/ld-elf/noinit-sections-2.l: New test.\n+\t* testsuite/ld-elf/noinit-sections.s: New test.\n+\t* testsuite/ld-elf/persistent-sections-1.d: New test.\n+\t* testsuite/ld-elf/persistent-sections-2.d: New test.\n+\t* testsuite/ld-elf/persistent-sections-2.l: New test.\n+\t* testsuite/ld-elf/persistent-sections.s: New test.\n+\n 2020-11-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 26936"
    },
    {
      "sha": "1995c449975c4fb4a7de366c8c49c6e9f4c55659",
      "filename": "ld/emulparams/armelf.sh",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/emulparams/armelf.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/emulparams/armelf.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/armelf.sh?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -10,19 +10,7 @@ OTHER_TEXT_SECTIONS='*(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)'\n OTHER_BSS_SYMBOLS=\"${CREATE_SHLIB+PROVIDE (}__bss_start__ = .${CREATE_SHLIB+)};\"\n OTHER_BSS_END_SYMBOLS=\"${CREATE_SHLIB+PROVIDE (}_bss_end__ = .${CREATE_SHLIB+)}; ${CREATE_SHLIB+PROVIDE (}__bss_end__ = .${CREATE_SHLIB+)};\"\n OTHER_END_SYMBOLS=\"${CREATE_SHLIB+PROVIDE (}__end__ = .${CREATE_SHLIB+)};\"\n-OTHER_SECTIONS='\n-.note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }\n-/* This section contains data that is not initialised during load\n-   *or* application reset.  */\n- .noinit (NOLOAD) :\n- {\n-   . = ALIGN(2);\n-   PROVIDE (__noinit_start = .);\n-   *(.noinit)\n-   . = ALIGN(2);\n-   PROVIDE (__noinit_end = .);\n- }\n-'\n+OTHER_SECTIONS='.note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }'\n ATTRS_SECTIONS='.ARM.attributes 0 : { KEEP (*(.ARM.attributes)) KEEP (*(.gnu.attributes)) }'\n OTHER_READONLY_SECTIONS=\"\n   .ARM.extab ${RELOCATING-0} : { *(.ARM.extab${RELOCATING+* .gnu.linkonce.armextab.*}) }\n@@ -49,3 +37,7 @@ STACK_ADDR=0x80000\n \n # ARM does not support .s* sections.\n NO_SMALL_DATA=yes\n+\n+# ARM supports the .noinit and .persistent sections.\n+HAVE_NOINIT=yes\n+HAVE_PERSISTENT=yes"
    },
    {
      "sha": "77238d6fd6228e3b6583c395949379c7142f4567",
      "filename": "ld/scripttempl/avr.sc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/avr.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/avr.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/avr.sc?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -271,7 +271,7 @@ cat <<EOF\n   .noinit ${RELOCATING+ ADDR(.bss) + SIZEOF (.bss)} ${RELOCATING-0}: ${RELOCATING+ AT (ADDR (.noinit))}\n   {\n     ${RELOCATING+ PROVIDE (__noinit_start = .) ; }\n-    *(.noinit*)\n+    *(.noinit${RELOCATING+ .noinit.* .gnu.linkonce.n.*})\n     ${RELOCATING+ PROVIDE (__noinit_end = .) ; }\n     ${RELOCATING+ _end = . ;  }\n     ${RELOCATING+ PROVIDE (__heap_start = .) ; }"
    },
    {
      "sha": "d9e63e7b4cd8f005f8b2b77fbe2146b24bd819da",
      "filename": "ld/scripttempl/elf.sc",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elf.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elf.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elf.sc?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -8,6 +8,8 @@\n #\tNOP - four byte opcode for no-op (defaults to none)\n #\tNO_SMALL_DATA - no .sbss/.sbss2/.sdata/.sdata2 sections if not\n #\t\tempty.\n+#\tHAVE_NOINIT - Include a .noinit output section in the script.\n+#\tHAVE_PERSISTENT - Include a .persistent output section in the script.\n #\tSMALL_DATA_CTOR - .ctors contains small data.\n #\tSMALL_DATA_DTOR - .dtors contains small data.\n #\tDATA_ADDR - if end-of-text-plus-one-page isn't right for data start\n@@ -103,6 +105,8 @@\n #  .lrodata\t.gnu.linkonce.lr.foo\n #  .ldata\t.gnu.linkonce.l.foo\n #  .lbss\t.gnu.linkonce.lb.foo\n+#  .noinit\t.gnu.linkonce.n.foo\n+#  .persistent\t.gnu.linkonce.p.foo\n #\n #  Each of these can also have corresponding .rel.* and .rela.* sections.\n \n@@ -322,6 +326,28 @@ STACK=\".stack        ${RELOCATING-0}${RELOCATING+${STACK_ADDR}} :\n     *(.stack)\n     ${RELOCATING+${STACK_SENTINEL}}\n   }\"\n+test \"${HAVE_NOINIT}\" = \"yes\" && NOINIT=\"\n+  /* This section contains data that is not initialized during load,\n+     or during the application's initialization sequence.  */\n+  .noinit (NOLOAD) :\n+  {\n+    ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+    ${RELOCATING+PROVIDE (__noinit_start = .);}\n+    *(.noinit${RELOCATING+ .noinit.* .gnu.linkonce.n.*})\n+    ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+    ${RELOCATING+PROVIDE (__noinit_end = .);}\n+  }\"\n+test \"${HAVE_PERSISTENT}\" = \"yes\" && PERSISTENT=\"\n+  /* This section contains data that is initialized during load,\n+     but not during the application's initialization sequence.  */\n+  .persistent :\n+  {\n+    ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+    ${RELOCATING+PROVIDE (__persistent_start = .);}\n+    *(.persistent${RELOCATING+ .persistent.* .gnu.linkonce.p.*})\n+    ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+    ${RELOCATING+PROVIDE (__persistent_end = .);}\n+  }\"\n \n TEXT_START_ADDR=\"SEGMENT_START(\\\"text-segment\\\", ${TEXT_START_ADDR})\"\n SHLIB_TEXT_START_ADDR=\"SEGMENT_START(\\\"text-segment\\\", ${SHLIB_TEXT_START_ADDR:-0})\"\n@@ -645,6 +671,7 @@ cat <<EOF\n   ${DATA_SDATA-${SDATA}}\n   ${DATA_SDATA-${OTHER_SDATA_SECTIONS}}\n   ${RELOCATING+${DATA_END_SYMBOLS-${CREATE_SHLIB+PROVIDE (}${USER_LABEL_PREFIX}_edata = .${CREATE_SHLIB+)}; PROVIDE (${USER_LABEL_PREFIX}edata = .);}}\n+  ${PERSISTENT}\n   ${RELOCATING+. = .;}\n   ${RELOCATING+${CREATE_SHLIB+PROVIDE (}${USER_LABEL_PREFIX}__bss_start = .${CREATE_SHLIB+)};}\n   ${RELOCATING+${OTHER_BSS_SYMBOLS}}\n@@ -665,6 +692,7 @@ cat <<EOF\n   ${OTHER_BSS_SECTIONS}\n   ${LARGE_BSS_AFTER_BSS+${LARGE_BSS}}\n   ${RELOCATING+${OTHER_BSS_END_SYMBOLS}}\n+  ${NOINIT}\n   ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n EOF\n "
    },
    {
      "sha": "fafd7757188eb6d2ad8d7a0a957fa0645d8bdf9d",
      "filename": "ld/scripttempl/elf32msp430.sc",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elf32msp430.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elf32msp430.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elf32msp430.sc?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -302,17 +302,25 @@ SECTIONS\n   } ${RELOCATING+ > data}\n   ${RELOCATING+ PROVIDE (__bsssize = SIZEOF(.bss)); }\n \n+  /* This section contains data that is not initialized during load,\n+     or during the application's initialization sequence.  */\n   .noinit ${RELOCATING-0}${RELOCATING+SIZEOF(.bss) + ADDR(.bss)} :\n   {\n+    ${RELOCATING+. = ALIGN(2);}\n     ${RELOCATING+ PROVIDE (__noinit_start = .) ; }\n-    *(.noinit)\n+    *(.noinit${RELOCATING+ .noinit.* .gnu.linkonce.n.*})\n+    ${RELOCATING+. = ALIGN(2);}\n     ${RELOCATING+ PROVIDE (__noinit_end = .) ; }\n   } ${RELOCATING+ > data}\n \n+  /* This section contains data that is initialized during load,\n+     but not during the application's initialization sequence.  */\n   .persistent ${RELOCATING-0}${RELOCATING+SIZEOF(.noinit) + ADDR(.noinit)} :\n   {\n+    ${RELOCATING+. = ALIGN(2);}\n     ${RELOCATING+ PROVIDE (__persistent_start = .) ; }\n-    *(.persistent)\n+    *(.persistent${RELOCATING+ .persistent.* .gnu.linkonce.p.*})\n+    ${RELOCATING+. = ALIGN(2);}\n     ${RELOCATING+ PROVIDE (__persistent_end = .) ; }\n   } ${RELOCATING+ > data}\n "
    },
    {
      "sha": "a0c4f7ef7619f374f316a12a01467d0999bfa875",
      "filename": "ld/scripttempl/elfarcv2.sc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elfarcv2.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/elfarcv2.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elfarcv2.sc?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -283,7 +283,7 @@ SECTIONS\n   /* Global data not cleared after reset.  */\n   .noinit ${RELOCATING-0}:\n   {\n-    *(.noinit*)\n+    *(.noinit${RELOCATING+ .noinit.* .gnu.linkonce.n.*})\n     ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n     ${RELOCATING+ PROVIDE (__start_heap = .) ; }\n   } ${RELOCATING+ > ${DATA_MEMORY}}"
    },
    {
      "sha": "08aceaa3b2cf2269ee4fbe9fbda41e50a3790da3",
      "filename": "ld/scripttempl/pru.sc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/pru.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/scripttempl/pru.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/pru.sc?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -167,7 +167,7 @@ SECTIONS\n   .noinit ${RELOCATING-0} :\n   {\n     ${RELOCATING+ PROVIDE (_noinit_start = .) ; }\n-    *(.noinit)\n+    *(.noinit${RELOCATING+ .noinit.* .gnu.linkonce.n.*})\n     ${RELOCATING+ PROVIDE (_noinit_end = .) ; }\n     ${RELOCATING+ PROVIDE (_heap_start = .) ; }\n     ${RELOCATING+ . += __HEAP_SIZE ; }"
    },
    {
      "sha": "133205cce83d6da4e4b554bef022af766951ef44",
      "filename": "ld/testsuite/ld-elf/noinit-sections-1.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/noinit-sections-1.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,9 @@\n+#name: .noinit sections\n+#ld: --orphan-handling=warn -e _start\n+#source: noinit-sections.s\n+#target: [supports_noinit_section]\n+#readelf: -SW\n+\n+#...\n+ +\\[ *[0-9]+\\] \\.noinit +NOBITS +[0-9a-f]+ +[0-9a-f]+ [0-9a-f]+ +00 +WA .*\n+#pass"
    },
    {
      "sha": "f3eb4e50fb673aed75bd929e586fabc231576beb",
      "filename": "ld/testsuite/ld-elf/noinit-sections-2.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/noinit-sections-2.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,10 @@\n+#name: .noinit sections (ld -r)\n+#ld: --orphan-handling=warn -e _start -r\n+#source: noinit-sections.s\n+#target: [supports_noinit_section]\n+#readelf: -SW\n+#warning_output: noinit-sections-2.l\n+\n+#...\n+ +\\[ *[0-9]+\\] \\.noinit +NOBITS +[0-9a-f]+ +[0-9a-f]+ [0-9a-f]+ +00 +WA .*\n+#pass"
    },
    {
      "sha": "0784c9e3e122c6c44c9b63c91b269dbf85ee0656",
      "filename": "ld/testsuite/ld-elf/noinit-sections-2.l",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/noinit-sections-2.l?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,5 @@\n+#...\n+[^:]*: warning: orphan section `.noinit.var_noinit' from \\S+ being placed in section `.noinit.var_noinit'\n+#...\n+[^:]*: warning: orphan section `.gnu.linkonce.n.var_noinit2' from \\S+ being placed in section `.gnu.linkonce.n.var_noinit2'\n+#pass"
    },
    {
      "sha": "f840bb0fb30d44ea9ddaacc98be259428da89e46",
      "filename": "ld/testsuite/ld-elf/noinit-sections.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/noinit-sections.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/noinit-sections.s?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,13 @@\n+.section\t.noinit,\"aw\",%nobits\n+.word 0\n+\n+.section\t.noinit.var_noinit,\"aw\",%nobits\n+.word 0\n+\n+.section\t.gnu.linkonce.n.var_noinit2,\"aw\",%nobits\n+.word 0\n+\n+.text\n+.global _start\n+_start:\n+.word 0"
    },
    {
      "sha": "5815cfa11bc09f2121c208f0b05f0b9828b54cd5",
      "filename": "ld/testsuite/ld-elf/persistent-sections-1.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/persistent-sections-1.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,9 @@\n+#name: .persistent sections\n+#ld: --orphan-handling=warn -e _start\n+#source: persistent-sections.s\n+#target: [supports_persistent_section]\n+#readelf: -SW\n+\n+#...\n+ +\\[ *[0-9]+\\] \\.persistent +PROGBITS +[0-9a-f]+ +[0-9a-f]+ [0-9a-f]+ +00 +WA .*\n+#pass"
    },
    {
      "sha": "3778514a8d096dc4e3240543e1350585927b08ad",
      "filename": "ld/testsuite/ld-elf/persistent-sections-2.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/persistent-sections-2.d?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,10 @@\n+#name: .persistent sections (ld -r)\n+#ld: --orphan-handling=warn -e _start -r\n+#source: persistent-sections.s\n+#target: [supports_persistent_section]\n+#readelf: -SW\n+#warning_output: persistent-sections-2.l\n+\n+#...\n+ +\\[ *[0-9]+\\] \\.persistent +PROGBITS +[0-9a-f]+ +[0-9a-f]+ [0-9a-f]+ +00 +WA .*\n+#pass"
    },
    {
      "sha": "a5bbe4b04f2795e99c7462c8fe64bfa34a7b0fd1",
      "filename": "ld/testsuite/ld-elf/persistent-sections-2.l",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/persistent-sections-2.l?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,5 @@\n+#...\n+[^:]*: warning: orphan section `.persistent.var_persistent' from \\S+ being placed in section `.persistent.var_persistent'\n+#...\n+[^:]*: warning: orphan section `.gnu.linkonce.p.var_persistent2' from \\S+ being placed in section `.gnu.linkonce.p.var_persistent2'\n+#pass"
    },
    {
      "sha": "04f6155d984a73c4dd729fcbe5ffce3a4a903125",
      "filename": "ld/testsuite/ld-elf/persistent-sections.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c6f3e56cbba35365ce0f558e9bfbb122a63a63d/ld/testsuite/ld-elf/persistent-sections.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/persistent-sections.s?ref=2c6f3e56cbba35365ce0f558e9bfbb122a63a63d",
      "patch": "@@ -0,0 +1,13 @@\n+.section\t.persistent,\"aw\"\n+.word 1\n+\n+.section\t.persistent.var_persistent,\"aw\"\n+.word 2\n+\n+.section\t.gnu.linkonce.p.var_persistent2,\"aw\"\n+.word 3\n+\n+.text\n+.global _start\n+_start:\n+.word 0"
    }
  ]
}