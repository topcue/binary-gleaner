{
  "sha": "99845b3b77ed1248b6fb94707f88868bde358ccc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTk4NDViM2I3N2VkMTI0OGI2ZmI5NDcwN2Y4ODg2OGJkZTM1OGNjYw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-13T11:17:51Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-13T11:18:13Z"
    },
    "message": "plugin: Search bfd-plugins directories only once\n\ntry_load_plugin is updated to take either plugin name or plugin entry.\nload_plugin is updated to search bfd-plugins directories first to build\na list of plugins and call try_load_plugin with each plugin on the list.\nWhen --plugin is used, the plugin list only has one entry.\n\n\t* plugin.c (try_load_plugin): Make plugin_list_iter an argument\n\tand use it if it isn't NULL.  Remove has_plugin_p argument.  Add\n\ta build_list_p argument.  Don't search plugin_list.  Short circuit\n\twhen building the plugin list.\n\t(has_plugin): Renamed to has_plugin_list.\n\t(bfd_plugin_set_plugin): Don't set has_plugin.\n\t(bfd_plugin_specified_p): Check plugin_list instead.\n\t(build_plugin_list): New function.\n\t(load_plugin): Call build_plugin_list and use plugin_list.",
    "tree": {
      "sha": "d3b956458d2ff9bef4a8d1ff27ed2131b872899c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d3b956458d2ff9bef4a8d1ff27ed2131b872899c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/99845b3b77ed1248b6fb94707f88868bde358ccc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99845b3b77ed1248b6fb94707f88868bde358ccc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/99845b3b77ed1248b6fb94707f88868bde358ccc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99845b3b77ed1248b6fb94707f88868bde358ccc/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f98a845896fc0811b8ffd1934829e40ad0e744e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f98a845896fc0811b8ffd1934829e40ad0e744e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f98a845896fc0811b8ffd1934829e40ad0e744e3"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 50,
    "deletions": 39
  },
  "files": [
    {
      "sha": "e2f236ff415cbb5cfe9520614fa4261f88799c0f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99845b3b77ed1248b6fb94707f88868bde358ccc/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99845b3b77ed1248b6fb94707f88868bde358ccc/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=99845b3b77ed1248b6fb94707f88868bde358ccc",
      "patch": "@@ -1,3 +1,15 @@\n+2020-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* plugin.c (try_load_plugin): Make plugin_list_iter an argument\n+\tand use it if it isn't NULL.  Remove has_plugin_p argument.  Add\n+\ta build_list_p argument.  Don't search plugin_list.  Short circuit\n+\twhen building the plugin list.\n+\t(has_plugin): Renamed to has_plugin_list.\n+\t(bfd_plugin_set_plugin): Don't set has_plugin.\n+\t(bfd_plugin_specified_p): Check plugin_list instead.\n+\t(build_plugin_list): New function.\n+\t(load_plugin): Call build_plugin_list and use plugin_list.\n+\n 2020-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/25355"
    },
    {
      "sha": "47c3439042c740e79b966cd8e3ce548c7d502ba3",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 38,
      "deletions": 39,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99845b3b77ed1248b6fb94707f88868bde358ccc/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99845b3b77ed1248b6fb94707f88868bde358ccc/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=99845b3b77ed1248b6fb94707f88868bde358ccc",
      "patch": "@@ -592,16 +592,15 @@ try_claim (bfd *abfd)\n }\n \n static int\n-try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n+try_load_plugin (const char *pname,\n+\t\t struct plugin_list_entry *plugin_list_iter,\n+\t\t bfd *abfd, bfd_boolean build_list_p)\n {\n   void *plugin_handle = NULL;\n   struct ld_plugin_tv tv[12];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n-  struct plugin_list_entry *plugin_list_iter;\n-\n-  *has_plugin_p = 0;\n \n   /* NB: Each object is independent.  Reuse the previous plugin from\n      the last run will lead to wrong result.  */\n@@ -614,19 +613,16 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n       current_plugin = NULL;\n     }\n \n+  if (plugin_list_iter)\n+    pname = plugin_list_iter->plugin_name;\n+\n   plugin_handle = dlopen (pname, RTLD_NOW);\n   if (!plugin_handle)\n     {\n       _bfd_error_handler (\"%s\\n\", dlerror ());\n       return 0;\n     }\n \n-  for (plugin_list_iter = plugin_list;\n-       plugin_list_iter;\n-       plugin_list_iter = plugin_list_iter->next)\n-    if (strcmp (plugin_list_iter->plugin_name, pname) == 0)\n-      break;\n-\n   if (plugin_list_iter == NULL)\n     {\n       size_t length_plugin_name = strlen (pname) + 1;\n@@ -649,6 +645,8 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n     }\n \n   plugin_list_iter->handle = plugin_handle;\n+  if (build_list_p)\n+    return 0;\n \n   onload = dlsym (plugin_handle, \"onload\");\n   if (!onload)\n@@ -717,8 +715,6 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n       && setup_lto_wrapper_env (current_plugin))\n     return 0;\n \n-  *has_plugin_p = 1;\n-\n   abfd->plugin_format = bfd_plugin_no;\n \n   if (!current_plugin->claim_file)\n@@ -732,8 +728,7 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n }\n \n /* There may be plugin libraries in lib/bfd-plugins.  */\n-\n-static int has_plugin = -1;\n+static int has_plugin_list = -1;\n \n static const bfd_target *(*ld_plugin_object_p) (bfd *);\n \n@@ -743,15 +738,14 @@ void\n bfd_plugin_set_plugin (const char *p)\n {\n   plugin_name = p;\n-  has_plugin = p != NULL;\n }\n \n /* Return TRUE if a plugin library is used.  */\n \n bfd_boolean\n bfd_plugin_specified_p (void)\n {\n-  return has_plugin > 0;\n+  return plugin_list != NULL;\n }\n \n /* Return TRUE if ABFD can be claimed by linker LTO plugin.  */\n@@ -782,8 +776,8 @@ register_ld_plugin_object_p (const bfd_target *(*object_p) (bfd *))\n   ld_plugin_object_p = object_p;\n }\n \n-static int\n-load_plugin (bfd *abfd)\n+static void\n+build_plugin_list (bfd *abfd)\n {\n   /* The intent was to search ${libdir}/bfd-plugins for plugins, but\n      unfortunately the original implementation wasn't precisely that\n@@ -792,17 +786,10 @@ load_plugin (bfd *abfd)\n   static const char *path[]\n     = { LIBDIR \"/bfd-plugins\", BINDIR \"/../lib/bfd-plugins\" };\n   struct stat last_st;\n-  int found = 0;\n   unsigned int i;\n \n-  if (!has_plugin)\n-    return found;\n-\n-  if (plugin_name)\n-    return try_load_plugin (plugin_name, abfd, &has_plugin);\n-\n-  if (plugin_program_name == NULL)\n-    return found;\n+  if (has_plugin_list >= 0)\n+    return;\n \n   /* Try not to search the same dir twice, by looking at st_dev and\n      st_ino for the dir.  If we are on a file system that always sets\n@@ -837,26 +824,38 @@ load_plugin (bfd *abfd)\n \n \t\t  full_name = concat (plugin_dir, \"/\", ent->d_name, NULL);\n \t\t  if (stat (full_name, &st) == 0 && S_ISREG (st.st_mode))\n-\t\t    {\n-\t\t      int valid_plugin;\n-\n-\t\t      found = try_load_plugin (full_name, abfd, &valid_plugin);\n-\t\t      if (has_plugin <= 0)\n-\t\t\thas_plugin = valid_plugin;\n-\t\t    }\n+\t\t    try_load_plugin (full_name, NULL, abfd, TRUE);\n \t\t  free (full_name);\n-\t\t  if (found)\n-\t\t    break;\n \t\t}\n \t      closedir (d);\n \t    }\n \t  free (plugin_dir);\n \t}\n-      if (found)\n-\tbreak;\n     }\n \n-  return found;\n+  has_plugin_list = plugin_list != NULL;\n+}\n+\n+static int\n+load_plugin (bfd *abfd)\n+{\n+  struct plugin_list_entry *plugin_list_iter;\n+\n+  if (plugin_name)\n+    return try_load_plugin (plugin_name, plugin_list, abfd, FALSE);\n+\n+  if (plugin_program_name == NULL)\n+    return 0;\n+\n+  build_plugin_list (abfd);\n+\n+  for (plugin_list_iter = plugin_list;\n+       plugin_list_iter;\n+       plugin_list_iter = plugin_list_iter->next)\n+    if (try_load_plugin (NULL, plugin_list_iter, abfd, FALSE))\n+      return 1;\n+\n+  return 0;\n }\n \n "
    }
  ]
}