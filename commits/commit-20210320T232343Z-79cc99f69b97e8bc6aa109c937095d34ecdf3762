{
  "sha": "79cc99f69b97e8bc6aa109c937095d34ecdf3762",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzljYzk5ZjY5Yjk3ZThiYzZhYTEwOWM5MzcwOTVkMzRlY2RmMzc2Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:43Z"
    },
    "message": "Change how DWARF index writer finds address map\n\nThis changes the DWARF index writer to find the psymtab address map in\nthe per_bfd object, rather than go via the objfile.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/index-write.c (struct addrmap_index_data) <objfile>:\n\tRemove.\n\t(add_address_entry): Remove objfile parameter.\n\t(add_address_entry_worker): Update.\n\t(write_address_map): Replace objfile parameter with per_bfd.\n\t(write_gdbindex, write_psymtabs_to_index): Update.",
    "tree": {
      "sha": "bb3f5ecb5dfe3161d880a27aad959b1543b9d679",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bb3f5ecb5dfe3161d880a27aad959b1543b9d679"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/79cc99f69b97e8bc6aa109c937095d34ecdf3762",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79cc99f69b97e8bc6aa109c937095d34ecdf3762",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/79cc99f69b97e8bc6aa109c937095d34ecdf3762",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79cc99f69b97e8bc6aa109c937095d34ecdf3762/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4829711b6ba57568d5fec3c2e8c747a2edb2aa8f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4829711b6ba57568d5fec3c2e8c747a2edb2aa8f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4829711b6ba57568d5fec3c2e8c747a2edb2aa8f"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 19,
    "deletions": 11
  },
  "files": [
    {
      "sha": "171623ba04bc640b2e962e186f32c811bd51c4eb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79cc99f69b97e8bc6aa109c937095d34ecdf3762/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79cc99f69b97e8bc6aa109c937095d34ecdf3762/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=79cc99f69b97e8bc6aa109c937095d34ecdf3762",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/index-write.c (struct addrmap_index_data) <objfile>:\n+\tRemove.\n+\t(add_address_entry): Remove objfile parameter.\n+\t(add_address_entry_worker): Update.\n+\t(write_address_map): Replace objfile parameter with per_bfd.\n+\t(write_gdbindex, write_psymtabs_to_index): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_base_index_functions::print_stats): Add"
    },
    {
      "sha": "f42a25331f8649f5224fcf879060286d4e22883d",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79cc99f69b97e8bc6aa109c937095d34ecdf3762/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79cc99f69b97e8bc6aa109c937095d34ecdf3762/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=79cc99f69b97e8bc6aa109c937095d34ecdf3762",
      "patch": "@@ -413,7 +413,6 @@ struct addrmap_index_data\n     : addr_vec (addr_vec_), cu_index_htab (cu_index_htab_)\n   {}\n \n-  struct objfile *objfile;\n   data_buf &addr_vec;\n   psym_index_map &cu_index_htab;\n \n@@ -430,7 +429,7 @@ struct addrmap_index_data\n /* Write an address entry to ADDR_VEC.  */\n \n static void\n-add_address_entry (struct objfile *objfile, data_buf &addr_vec,\n+add_address_entry (data_buf &addr_vec,\n \t\t   CORE_ADDR start, CORE_ADDR end, unsigned int cu_index)\n {\n   addr_vec.append_uint (8, BFD_ENDIAN_LITTLE, start);\n@@ -447,7 +446,7 @@ add_address_entry_worker (void *datap, CORE_ADDR start_addr, void *obj)\n   partial_symtab *pst = (partial_symtab *) obj;\n \n   if (data->previous_valid)\n-    add_address_entry (data->objfile, data->addr_vec,\n+    add_address_entry (data->addr_vec,\n \t\t       data->previous_cu_start, start_addr,\n \t\t       data->previous_cu_index);\n \n@@ -465,12 +464,12 @@ add_address_entry_worker (void *datap, CORE_ADDR start_addr, void *obj)\n   return 0;\n }\n \n-/* Write OBJFILE's address map to ADDR_VEC.\n+/* Write PER_BFD's address map to ADDR_VEC.\n    CU_INDEX_HTAB is used to map addrmap entries to their CU indices\n    in the index file.  */\n \n static void\n-write_address_map (struct objfile *objfile, data_buf &addr_vec,\n+write_address_map (dwarf2_per_bfd *per_bfd, data_buf &addr_vec,\n \t\t   psym_index_map &cu_index_htab)\n {\n   struct addrmap_index_data addrmap_index_data (addr_vec, cu_index_htab);\n@@ -479,10 +478,9 @@ write_address_map (struct objfile *objfile, data_buf &addr_vec,\n      the addrmap iterator only provides the start of a region; we have to\n      wait until the next invocation to get the start of the next region.  */\n \n-  addrmap_index_data.objfile = objfile;\n   addrmap_index_data.previous_valid = 0;\n \n-  addrmap_foreach (objfile->partial_symtabs->psymtabs_addrmap,\n+  addrmap_foreach (per_bfd->partial_symtabs->psymtabs_addrmap,\n \t\t   add_address_entry_worker, &addrmap_index_data);\n \n   /* It's highly unlikely the last entry (end address = 0xff...ff)\n@@ -491,7 +489,7 @@ write_address_map (struct objfile *objfile, data_buf &addr_vec,\n      doesn't work here.  To cope we pass 0xff...ff, this is a rare situation\n      anyway.  */\n   if (addrmap_index_data.previous_valid)\n-    add_address_entry (objfile, addr_vec,\n+    add_address_entry (addr_vec,\n \t\t       addrmap_index_data.previous_cu_start, (CORE_ADDR) -1,\n \t\t       addrmap_index_data.previous_cu_index);\n }\n@@ -1463,7 +1461,7 @@ write_gdbindex (dwarf2_per_objfile *per_objfile, FILE *out_file,\n \n   /* Dump the address map.  */\n   data_buf addr_vec;\n-  write_address_map (objfile, addr_vec, cu_index_htab);\n+  write_address_map (per_objfile->per_bfd, addr_vec, cu_index_htab);\n \n   /* Write out the .debug_type entries, if any.  */\n   data_buf types_cu_list;\n@@ -1686,6 +1684,7 @@ write_psymtabs_to_index (dwarf2_per_objfile *per_objfile, const char *dir,\n \t\t\t const char *basename, const char *dwz_basename,\n \t\t\t dw_index_kind index_kind)\n {\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n   struct objfile *objfile = per_objfile->objfile;\n \n   if (per_objfile->per_bfd->using_index)\n@@ -1694,8 +1693,8 @@ write_psymtabs_to_index (dwarf2_per_objfile *per_objfile, const char *dir,\n   if (per_objfile->per_bfd->types.size () > 1)\n     error (_(\"Cannot make an index when the file has multiple .debug_types sections\"));\n \n-  if (!objfile->partial_symtabs->psymtabs\n-      || !objfile->partial_symtabs->psymtabs_addrmap)\n+  if (!per_bfd->partial_symtabs->psymtabs\n+      || !per_bfd->partial_symtabs->psymtabs_addrmap)\n     return;\n \n   struct stat st;"
    }
  ]
}