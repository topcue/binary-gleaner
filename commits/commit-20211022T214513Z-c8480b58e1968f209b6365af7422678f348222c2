{
  "sha": "c8480b58e1968f209b6365af7422678f348222c2",
  "node_id": "C_kwDOANOeidoAKGM4NDgwYjU4ZTE5NjhmMjA5YjYzNjVhZjc0MjI2NzhmMzQ4MjIyYzI",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-10-21T13:15:31Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-10-22T21:45:13Z"
    },
    "message": "x86: Add -muse-unaligned-vector-move to assembler\n\nUnaligned load/store instructions on aligned memory or register are as\nfast as aligned load/store instructions on modern Intel processors.  Add\na command-line option, -muse-unaligned-vector-move, to x86 assembler to\nencode encode aligned vector load/store instructions as unaligned\nvector load/store instructions.\n\n\t* NEWS: Mention -muse-unaligned-vector-move.\n\t* config/tc-i386.c (use_unaligned_vector_move): New.\n\t(encode_with_unaligned_vector_move): Likewise.\n\t(md_assemble): Call encode_with_unaligned_vector_move for\n\t-muse-unaligned-vector-move.\n\t(OPTION_MUSE_UNALIGNED_VECTOR_MOVE): New.\n\t(md_longopts): Add -muse-unaligned-vector-move.\n\t(md_parse_option): Handle -muse-unaligned-vector-move.\n\t(md_show_usage): Add -muse-unaligned-vector-move.\n\t* doc/c-i386.texi: Document -muse-unaligned-vector-move.\n\t* testsuite/gas/i386/i386.exp: Run unaligned-vector-move and\n\tx86-64-unaligned-vector-move.\n\t* testsuite/gas/i386/unaligned-vector-move.d: New file.\n\t* testsuite/gas/i386/unaligned-vector-move.s: Likewise.\n\t* testsuite/gas/i386/x86-64-unaligned-vector-move.d: Likewise.",
    "tree": {
      "sha": "ff36a1eb3ca713e3216661ce17cdf183e54fef18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ff36a1eb3ca713e3216661ce17cdf183e54fef18"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8480b58e1968f209b6365af7422678f348222c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8480b58e1968f209b6365af7422678f348222c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8480b58e1968f209b6365af7422678f348222c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8480b58e1968f209b6365af7422678f348222c2/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aab00c2dff7511883e46735ef5e4582acd4d9911",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aab00c2dff7511883e46735ef5e4582acd4d9911",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aab00c2dff7511883e46735ef5e4582acd4d9911"
    }
  ],
  "stats": {
    "total": 110,
    "additions": 110,
    "deletions": 0
  },
  "files": [
    {
      "sha": "de4c61b320df79fda3670ea5e8385a17ef2ba4da",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Add a command-line option, -muse-unaligned-vector-move, for x86 target\n+  to encode aligned vector move as unaligned vector move.\n+\n * Add support for Cortex-R52+ for Arm.\n \n * Add support for Cortex-A510, Cortex-A710, Cortex-X2 for AArch64."
    },
    {
      "sha": "ef30a6bc0e94c517ace225f576af4c0de925e4f2",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -800,6 +800,9 @@ static unsigned int no_cond_jump_promotion = 0;\n /* Encode SSE instructions with VEX prefix.  */\n static unsigned int sse2avx;\n \n+/* Encode aligned vector move as unaligned vector move.  */\n+static unsigned int use_unaligned_vector_move;\n+\n /* Encode scalar AVX instructions with specific vector length.  */\n static enum\n   {\n@@ -4073,6 +4076,30 @@ check_hle (void)\n     }\n }\n \n+/* Encode aligned vector move as unaligned vector move.  */\n+\n+static void\n+encode_with_unaligned_vector_move (void)\n+{\n+  switch (i.tm.base_opcode)\n+    {\n+    case 0x28:\n+      /* movaps/movapd/vmovaps/vmovapd.  */\n+      if (i.tm.opcode_modifier.opcodespace == SPACE_0F\n+\t  && i.tm.opcode_modifier.opcodeprefix <= PREFIX_0X66)\n+\ti.tm.base_opcode = 0x10;\n+      break;\n+    case 0x6f:\n+      /* movdqa/vmovdqa/vmovdqa64/vmovdqa32. */\n+      if (i.tm.opcode_modifier.opcodespace == SPACE_0F\n+\t  && i.tm.opcode_modifier.opcodeprefix == PREFIX_0X66)\n+\ti.tm.opcode_modifier.opcodeprefix = PREFIX_0XF3;\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n /* Try the shortest encoding by shortening operand size.  */\n \n static void\n@@ -5056,6 +5083,9 @@ md_assemble (char *line)\n   if (optimize && !i.no_optimize && i.tm.opcode_modifier.optimize)\n     optimize_encoding ();\n \n+  if (use_unaligned_vector_move)\n+    encode_with_unaligned_vector_move ();\n+\n   if (!process_suffix ())\n     return;\n \n@@ -13060,6 +13090,7 @@ const char *md_shortopts = \"qnO::\";\n #define OPTION_MLFENCE_AFTER_LOAD (OPTION_MD_BASE + 31)\n #define OPTION_MLFENCE_BEFORE_INDIRECT_BRANCH (OPTION_MD_BASE + 32)\n #define OPTION_MLFENCE_BEFORE_RET (OPTION_MD_BASE + 33)\n+#define OPTION_MUSE_UNALIGNED_VECTOR_MOVE (OPTION_MD_BASE + 34)\n \n struct option md_longopts[] =\n {\n@@ -13081,6 +13112,7 @@ struct option md_longopts[] =\n   {\"mindex-reg\", no_argument, NULL, OPTION_MINDEX_REG},\n   {\"mnaked-reg\", no_argument, NULL, OPTION_MNAKED_REG},\n   {\"msse2avx\", no_argument, NULL, OPTION_MSSE2AVX},\n+  {\"muse-unaligned-vector-move\", no_argument, NULL, OPTION_MUSE_UNALIGNED_VECTOR_MOVE},\n   {\"msse-check\", required_argument, NULL, OPTION_MSSE_CHECK},\n   {\"moperand-check\", required_argument, NULL, OPTION_MOPERAND_CHECK},\n   {\"mavxscalar\", required_argument, NULL, OPTION_MAVXSCALAR},\n@@ -13381,6 +13413,10 @@ md_parse_option (int c, const char *arg)\n       sse2avx = 1;\n       break;\n \n+    case OPTION_MUSE_UNALIGNED_VECTOR_MOVE:\n+      use_unaligned_vector_move = 1;\n+      break;\n+\n     case OPTION_MSSE_CHECK:\n       if (strcasecmp (arg, \"error\") == 0)\n \tsse_check = check_error;\n@@ -13796,6 +13832,9 @@ md_show_usage (FILE *stream)\n   fprintf (stream, _(\"\\\n   -msse2avx               encode SSE instructions with VEX prefix\\n\"));\n   fprintf (stream, _(\"\\\n+  -muse-unaligned-vector-move\\n\\\n+                          encode aligned vector move as unaligned vector move\\n\"));\n+  fprintf (stream, _(\"\\\n   -msse-check=[none|error|warning] (default: warning)\\n\\\n                           check SSE instructions\\n\"));\n   fprintf (stream, _(\"\\"
    },
    {
      "sha": "6245d9be82a8ee7a971a36a289a340964f30b181",
      "filename": "gas/doc/c-i386.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/doc/c-i386.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/doc/c-i386.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-i386.texi?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -316,6 +316,12 @@ Valid @var{CPU} values are identical to the processor list of\n This option specifies that the assembler should encode SSE instructions\n with VEX prefix.\n \n+@cindex @samp{-muse-unaligned-vector-move} option, i386\n+@cindex @samp{-muse-unaligned-vector-move} option, x86-64\n+@item -muse-unaligned-vector-move\n+This option specifies that the assembler should encode aligned vector\n+move as unaligned vector move.\n+\n @cindex @samp{-msse-check=} option, i386\n @cindex @samp{-msse-check=} option, x86-64\n @item -msse-check=@var{none}"
    },
    {
      "sha": "378e32b39cb71ab67221e120a2aee17edaa7af46",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -272,6 +272,7 @@ if [gas_32_check] then {\n     run_dump_test \"evex-wig1-intel\"\n     run_dump_test \"evex-no-scale-32\"\n     run_dump_test \"sse2avx\"\n+    run_dump_test \"unaligned-vector-move\"\n     run_list_test \"inval-avx\" \"-al\"\n     run_list_test \"inval-avx512f\" \"-al\"\n     run_list_test \"inval-avx512vl\" \"-al\"\n@@ -948,6 +949,7 @@ if [gas_64_check] then {\n     run_dump_test \"x86-64-evex-wig2\"\n     run_dump_test \"evex-no-scale-64\"\n     run_dump_test \"x86-64-sse2avx\"\n+    run_dump_test \"x86-64-unaligned-vector-move\"\n     run_list_test \"x86-64-inval-avx\" \"-al\"\n     run_list_test \"x86-64-inval-avx512f\" \"-al\"\n     run_list_test \"x86-64-inval-avx512vl\" \"-al\""
    },
    {
      "sha": "d5df2aed58eb3a6481e9d6839c9eaa44483d23d5",
      "filename": "gas/testsuite/gas/i386/unaligned-vector-move.d",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/unaligned-vector-move.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/unaligned-vector-move.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/unaligned-vector-move.d?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -0,0 +1,22 @@\n+#as: -muse-unaligned-vector-move\n+#objdump: -dw\n+#name: i386 (Encode aligned vector move as unaligned vector move)\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t0f 10 d1             \tmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\t66 0f 10 d1          \tmovupd %xmm1,%xmm2\n+ +[a-f0-9]+:\tf3 0f 6f d1          \tmovdqu %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f8 10 d1          \tvmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f9 10 d1          \tvmovupd %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 fa 6f d1          \tvmovdqu %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f8 10 d1          \tvmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\t62 f1 fd 09 10 d1    \tvmovupd %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 7c 09 10 d1    \tvmovups %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 7e 09 6f d1    \tvmovdqu32 %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 fe 09 6f d1    \tvmovdqu64 %xmm1,%xmm2\\{%k1\\}\n+#pass"
    },
    {
      "sha": "b88ae232a3800bf6d8f59c7474b7aa7fd3e0ba97",
      "filename": "gas/testsuite/gas/i386/unaligned-vector-move.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/unaligned-vector-move.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/unaligned-vector-move.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/unaligned-vector-move.s?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -0,0 +1,15 @@\n+# Encode aligned vector move as unaligned vector move.\n+\n+\t.text\n+_start:\n+\tmovaps %xmm1, %xmm2\n+\tmovapd %xmm1, %xmm2\n+\tmovdqa %xmm1, %xmm2\n+\tvmovaps %xmm1, %xmm2\n+\tvmovapd %xmm1, %xmm2\n+\tvmovdqa %xmm1, %xmm2\n+\tvmovaps %xmm1, %xmm2\n+\tvmovapd %xmm1, %xmm2{%k1}\n+\tvmovaps %xmm1, %xmm2{%k1}\n+\tvmovdqa32 %xmm1, %xmm2{%k1}\n+\tvmovdqa64 %xmm1, %xmm2{%k1}"
    },
    {
      "sha": "cbcd7719bf02e97276fba3cb8d2a81aedd0fa429",
      "filename": "gas/testsuite/gas/i386/x86-64-unaligned-vector-move.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/x86-64-unaligned-vector-move.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8480b58e1968f209b6365af7422678f348222c2/gas/testsuite/gas/i386/x86-64-unaligned-vector-move.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-unaligned-vector-move.d?ref=c8480b58e1968f209b6365af7422678f348222c2",
      "patch": "@@ -0,0 +1,23 @@\n+#source: unaligned-vector-move.s\n+#as: -muse-unaligned-vector-move\n+#objdump: -dw\n+#name: x86-64 (Encode aligned vector move as unaligned vector move)\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+ <_start>:\n+ +[a-f0-9]+:\t0f 10 d1             \tmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\t66 0f 10 d1          \tmovupd %xmm1,%xmm2\n+ +[a-f0-9]+:\tf3 0f 6f d1          \tmovdqu %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f8 10 d1          \tvmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f9 10 d1          \tvmovupd %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 fa 6f d1          \tvmovdqu %xmm1,%xmm2\n+ +[a-f0-9]+:\tc5 f8 10 d1          \tvmovups %xmm1,%xmm2\n+ +[a-f0-9]+:\t62 f1 fd 09 10 d1    \tvmovupd %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 7c 09 10 d1    \tvmovups %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 7e 09 6f d1    \tvmovdqu32 %xmm1,%xmm2\\{%k1\\}\n+ +[a-f0-9]+:\t62 f1 fe 09 6f d1    \tvmovdqu64 %xmm1,%xmm2\\{%k1\\}\n+#pass"
    }
  ]
}