{
  "sha": "05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU3NzlkNTdmOWY0ZTdjYmI2ZDRjNzlkODg1MWQzNWE0MjJiZGQwZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-27T13:56:05Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-27T13:56:05Z"
    },
    "message": "Make {get,set}_inferior_io_terminal inferior methods\n\nThis converts the get_inferior_io_terminal and\nset_inferior_io_terminal free functions to inferior methods.\n\nSince the related commands are called \"tty\", \"{set,show}\ninferior-tty\", and MI's \"-inferior-tty-{set,show}\", to make the\nconnection between the commands and the code more obvious, the methods\nare named set_tty/tty instead of set_io_terminal/io_terminal.\n\ngdb/ChangeLog:\n\n\t* fork-child.c (prefork_hook): Adjust.\n\t* infcmd.c (set_inferior_io_terminal, get_inferior_io_terminal):\n\tDelete.\n\t(set_inferior_tty_command, show_inferior_tty_command): Adjust.\n\t* inferior.c (inferior::set_tty, inferior::tty): New methods.\n\t* inferior.h (set_inferior_io_terminal, get_inferior_io_terminal):\n\tRemove declarations.\n\t(struct inferior) <set_tty, tty>: New methods.\n\t(struct inferior) <terminal>: Rename to ...\n\t(struct inferior) <m_terminal>: ... this and make private.\n\t* main.c (captured_main_1): Adjust.\n\t* mi/mi-cmd-env.c (mi_cmd_inferior_tty_set): Adjust.\n\t(mi_cmd_inferior_tty_show): Adjust.\n\t* nto-procfs.c (nto_procfs_target::create_inferior): Adjust.\n\t* windows-nat.c (windows_nat_target::create_inferior): Adjust.",
    "tree": {
      "sha": "08fc108bb88e458292ed728fd5ea5cb3e97dcf84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/08fc108bb88e458292ed728fd5ea5cb3e97dcf84"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cfc16775b7678e1ad8f9fce048652defd78e3787",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfc16775b7678e1ad8f9fce048652defd78e3787",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cfc16775b7678e1ad8f9fce048652defd78e3787"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 68,
    "deletions": 54
  },
  "files": [
    {
      "sha": "0ab251ddc4a1fd0ed3bb933f7b4c1a032a8f5c34",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -1,3 +1,21 @@\n+2020-06-27  Pedro Alves  <palves@redhat.com>\n+\n+\t* fork-child.c (prefork_hook): Adjust.\n+\t* infcmd.c (set_inferior_io_terminal, get_inferior_io_terminal):\n+\tDelete.\n+\t(set_inferior_tty_command, show_inferior_tty_command): Adjust.\n+\t* inferior.c (inferior::set_tty, inferior::tty): New methods.\n+\t* inferior.h (set_inferior_io_terminal, get_inferior_io_terminal):\n+\tRemove declarations.\n+\t(struct inferior) <set_tty, tty>: New methods.\n+\t(struct inferior) <terminal>: Rename to ...\n+\t(struct inferior) <m_terminal>: ... this and make private.\n+\t* main.c (captured_main_1): Adjust.\n+\t* mi/mi-cmd-env.c (mi_cmd_inferior_tty_set): Adjust.\n+\t(mi_cmd_inferior_tty_show): Adjust.\n+\t* nto-procfs.c (nto_procfs_target::create_inferior): Adjust.\n+\t* windows-nat.c (windows_nat_target::create_inferior): Adjust.\n+\n 2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac: Add --enable-libctf: handle --disable-static"
    },
    {
      "sha": "bcf077d0ebaa1e66ec0faa572625f2d2fb7fbc01",
      "filename": "gdb/fork-child.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/fork-child.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/fork-child.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fork-child.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -61,16 +61,14 @@ static struct ui *saved_ui = NULL;\n void\n prefork_hook (const char *args)\n {\n-  const char *inferior_io_terminal = get_inferior_io_terminal ();\n-\n   gdb_assert (saved_ui == NULL);\n   /* Retain a copy of our UI, since the child will replace this value\n      and if we're vforked, we have to restore it.  */\n   saved_ui = current_ui;\n \n   /* Tell the terminal handling subsystem what tty we plan to run on;\n      it will just record the information for later.  */\n-  new_tty_prefork (inferior_io_terminal);\n+  new_tty_prefork (current_inferior ()->tty ());\n }\n \n /* See nat/fork-inferior.h.  */"
    },
    {
      "sha": "64eea883cb6a64470f91afa6f542567722a1ef16",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 5,
      "deletions": 24,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -100,33 +100,14 @@ enum stop_stack_kind stop_stack_dummy;\n int stopped_by_random_signal;\n \n \f\n-/* Accessor routines.  */\n-\n-/* Set the io terminal for the current inferior.  Ownership of\n-   TERMINAL_NAME is not transferred.  */\n-\n-void \n-set_inferior_io_terminal (const char *terminal_name)\n-{\n-  if (terminal_name != NULL && *terminal_name != '\\0')\n-    current_inferior ()->terminal = make_unique_xstrdup (terminal_name);\n-  else\n-    current_inferior ()->terminal = NULL;\n-}\n-\n-const char *\n-get_inferior_io_terminal (void)\n-{\n-  return current_inferior ()->terminal.get ();\n-}\n \n static void\n set_inferior_tty_command (const char *args, int from_tty,\n \t\t\t  struct cmd_list_element *c)\n {\n   /* CLI has assigned the user-provided value to inferior_io_terminal_scratch.\n      Now route it to current inferior.  */\n-  set_inferior_io_terminal (inferior_io_terminal_scratch);\n+  current_inferior ()->set_tty (inferior_io_terminal_scratch);\n }\n \n static void\n@@ -135,13 +116,13 @@ show_inferior_tty_command (struct ui_file *file, int from_tty,\n {\n   /* Note that we ignore the passed-in value in favor of computing it\n      directly.  */\n-  const char *inferior_io_terminal = get_inferior_io_terminal ();\n+  const char *inferior_tty = current_inferior ()->tty ();\n \n-  if (inferior_io_terminal == NULL)\n-    inferior_io_terminal = \"\";\n+  if (inferior_tty == nullptr)\n+    inferior_tty = \"\";\n   fprintf_filtered (gdb_stdout,\n \t\t    _(\"Terminal for future runs of program being debugged \"\n-\t\t      \"is \\\"%s\\\".\\n\"), inferior_io_terminal);\n+\t\t      \"is \\\"%s\\\".\\n\"), inferior_tty);\n }\n \n const char *"
    },
    {
      "sha": "f775938721db5f5136b5693f095d20c6e05c3a56",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -93,6 +93,21 @@ inferior::inferior (int pid_)\n   m_target_stack.push (get_dummy_target ());\n }\n \n+void\n+inferior::set_tty (const char *terminal_name)\n+{\n+  if (terminal_name != nullptr && *terminal_name != '\\0')\n+    m_terminal = make_unique_xstrdup (terminal_name);\n+  else\n+    m_terminal = NULL;\n+}\n+\n+const char *\n+inferior::tty ()\n+{\n+  return m_terminal.get ();\n+}\n+\n struct inferior *\n add_inferior_silent (int pid)\n {"
    },
    {
      "sha": "572c5f3ae72dcf5e571a7a1433f668846b29e961",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -118,11 +118,6 @@ extern void set_sigint_trap (void);\n \n extern void clear_sigint_trap (void);\n \n-/* Set/get file name for default use for standard in/out in the inferior.  */\n-\n-extern void set_inferior_io_terminal (const char *terminal_name);\n-extern const char *get_inferior_io_terminal (void);\n-\n /* Collected pid, tid, etc. of the debugged inferior.  When there's\n    no inferior, inferior_ptid.pid () will be 0.  */\n \n@@ -411,6 +406,14 @@ class inferior : public refcounted_object\n   inline safe_inf_threads_range threads_safe ()\n   { return safe_inf_threads_range (this->thread_list); }\n \n+  /* Set/get file name for default use for standard in/out in the\n+     inferior.  On Unix systems, we try to make TERMINAL_NAME the\n+     inferior's controlling terminal.  If TERMINAL_NAME is nullptr or\n+     the empty string, then the inferior inherits GDB's terminal (or\n+     GDBserver's if spawning a remote process).  */\n+  void set_tty (const char *terminal_name);\n+  const char *tty ();\n+\n   /* Convenient handle (GDB inferior id).  Unique across all\n      inferiors.  */\n   int num = 0;\n@@ -456,9 +459,6 @@ class inferior : public refcounted_object\n      this inferior.  */\n   gdb::unique_xmalloc_ptr<char> cwd;\n \n-  /* The name of terminal device to use for I/O.  */\n-  gdb::unique_xmalloc_ptr<char> terminal;\n-\n   /* The terminal state as set by the last target_terminal::terminal_*\n      call.  */\n   target_terminal_state terminal_state = target_terminal_state::is_ours;\n@@ -541,6 +541,9 @@ class inferior : public refcounted_object\n private:\n   /* The inferior's target stack.  */\n   target_stack m_target_stack;\n+\n+  /* The name of terminal device to use for I/O.  */\n+  gdb::unique_xmalloc_ptr<char> m_terminal;\n };\n \n /* Keep a registry of per-inferior data-pointers required by other GDB"
    },
    {
      "sha": "19bbb92388951d87fad7384aefe52df8221ce386",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -1171,7 +1171,7 @@ captured_main_1 (struct captured_main_args *context)\n     }\n \n   if (ttyarg != NULL)\n-    set_inferior_io_terminal (ttyarg);\n+    current_inferior ()->set_tty (ttyarg);\n \n   /* Error messages should no longer be distinguished with extra output.  */\n   warning_pre_print = _(\"warning: \");"
    },
    {
      "sha": "52ba0065bba53b67649655fa1215a3bd3cb0d38b",
      "filename": "gdb/mi/mi-cmd-env.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/mi/mi-cmd-env.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/mi/mi-cmd-env.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-env.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -244,21 +244,20 @@ mi_cmd_env_dir (const char *command, char **argv, int argc)\n void\n mi_cmd_inferior_tty_set (const char *command, char **argv, int argc)\n {\n-  set_inferior_io_terminal (argv[0]);\n+  current_inferior ()->set_tty (argv[0]);\n }\n \n /* Print the inferior terminal device name.  */\n \n void\n mi_cmd_inferior_tty_show (const char *command, char **argv, int argc)\n {\n-  const char *inferior_io_terminal = get_inferior_io_terminal ();\n-  \n   if ( !mi_valid_noargs (\"-inferior-tty-show\", argc, argv))\n     error (_(\"-inferior-tty-show: Usage: No args\"));\n \n-  if (inferior_io_terminal)\n-    current_uiout->field_string (\"inferior_tty_terminal\", inferior_io_terminal);\n+  const char *inferior_tty = current_inferior ()->tty ();\n+  if (inferior_tty != NULL)\n+    current_uiout->field_string (\"inferior_tty_terminal\", inferior_tty);\n }\n \n void _initialize_mi_cmd_env ();"
    },
    {
      "sha": "91d2cc5914dd3c2d2928790736ad794a19dea3e6",
      "filename": "gdb/nto-procfs.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/nto-procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/nto-procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nto-procfs.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -1208,7 +1208,6 @@ nto_procfs_target::create_inferior (const char *exec_file,\n   const char *in = \"\", *out = \"\", *err = \"\";\n   int fd, fds[3];\n   sigset_t set;\n-  const char *inferior_io_terminal = get_inferior_io_terminal ();\n   struct inferior *inf;\n \n   argv = xmalloc ((allargs.size () / (unsigned) 2 + 2) *\n@@ -1233,14 +1232,15 @@ nto_procfs_target::create_inferior (const char *exec_file,\n \n   /* If the user specified I/O via gdb's --tty= arg, use it, but only\n      if the i/o is not also being specified via redirection.  */\n-  if (inferior_io_terminal)\n+  const char *inferior_tty = current_inferior ()->tty ();\n+  if (inferior_tty != nullptr)\n     {\n       if (!in[0])\n-\tin = inferior_io_terminal;\n+\tin = inferior_tty;\n       if (!out[0])\n-\tout = inferior_io_terminal;\n+\tout = inferior_tty;\n       if (!err[0])\n-\terr = inferior_io_terminal;\n+\terr = inferior_tty;\n     }\n \n   if (in[0])"
    },
    {
      "sha": "188a920cbb061f0d8639340ffec40b7d9afd4b3b",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=05779d57f9f4e7cbb6d4c79d8851d35a422bdd0d",
      "patch": "@@ -2730,7 +2730,7 @@ windows_nat_target::create_inferior (const char *exec_file,\n   PROCESS_INFORMATION pi;\n   BOOL ret;\n   DWORD flags = 0;\n-  const char *inferior_io_terminal = get_inferior_io_terminal ();\n+  const char *inferior_tty = current_inferior ()->tty ();\n \n   if (!exec_file)\n     error (_(\"No executable specified, use `target exec'.\"));\n@@ -2829,14 +2829,14 @@ windows_nat_target::create_inferior (const char *exec_file,\n       w32_env = NULL;\n     }\n \n-  if (!inferior_io_terminal)\n+  if (inferior_tty == nullptr)\n     tty = ostdin = ostdout = ostderr = -1;\n   else\n     {\n-      tty = open (inferior_io_terminal, O_RDWR | O_NOCTTY);\n+      tty = open (inferior_tty, O_RDWR | O_NOCTTY);\n       if (tty < 0)\n \t{\n-\t  print_sys_errmsg (inferior_io_terminal, errno);\n+\t  print_sys_errmsg (inferior_tty, errno);\n \t  ostdin = ostdout = ostderr = -1;\n \t}\n       else\n@@ -2901,19 +2901,19 @@ windows_nat_target::create_inferior (const char *exec_file,\n       allargs_len = strlen (allargs_copy);\n     }\n   /* If not all the standard streams are redirected by the command\n-     line, use inferior_io_terminal for those which aren't.  */\n-  if (inferior_io_terminal\n+     line, use INFERIOR_TTY for those which aren't.  */\n+  if (inferior_tty != nullptr\n       && !(fd_inp >= 0 && fd_out >= 0 && fd_err >= 0))\n     {\n       SECURITY_ATTRIBUTES sa;\n       sa.nLength = sizeof(sa);\n       sa.lpSecurityDescriptor = 0;\n       sa.bInheritHandle = TRUE;\n-      tty = CreateFileA (inferior_io_terminal, GENERIC_READ | GENERIC_WRITE,\n+      tty = CreateFileA (inferior_tty, GENERIC_READ | GENERIC_WRITE,\n \t\t\t 0, &sa, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);\n       if (tty == INVALID_HANDLE_VALUE)\n \twarning (_(\"Warning: Failed to open TTY %s, error %#x.\"),\n-\t\t inferior_io_terminal, (unsigned) GetLastError ());\n+\t\t inferior_tty, (unsigned) GetLastError ());\n     }\n   if (redirected || tty != INVALID_HANDLE_VALUE)\n     {"
    }
  ]
}