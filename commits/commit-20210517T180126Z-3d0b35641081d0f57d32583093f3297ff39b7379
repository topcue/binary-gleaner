{
  "sha": "3d0b35641081d0f57d32583093f3297ff39b7379",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2QwYjM1NjQxMDgxZDBmNTdkMzI1ODMwOTNmMzI5N2ZmMzliNzM3OQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-14T19:38:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:01:26Z"
    },
    "message": "gdb: add cmd_list_element::is_prefix\n\nSame idea as the previous patch, but for prefix instead of alias.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.h (cmd_list_element) <is_prefix>: New, use it.\n\nChange-Id: I76a9d2e82fc8d7429904424674d99ce6f9880e2b",
    "tree": {
      "sha": "fc6be36e7ce048ed74ce4597e0d365b1be4623d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc6be36e7ce048ed74ce4597e0d365b1be4623d3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d0b35641081d0f57d32583093f3297ff39b7379",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d0b35641081d0f57d32583093f3297ff39b7379",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d0b35641081d0f57d32583093f3297ff39b7379",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d0b35641081d0f57d32583093f3297ff39b7379/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 37,
    "deletions": 31
  },
  "files": [
    {
      "sha": "9cd70f174c3c3c19f381c35a45000428d6a9cbd8",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -1465,7 +1465,7 @@ info_auto_load_cmd (const char *args, int from_tty)\n     {\n       ui_out_emit_tuple option_emitter (uiout, \"option\");\n \n-      gdb_assert (!list->subcommands);\n+      gdb_assert (!list->is_prefix ());\n       gdb_assert (list->type == not_set_cmd);\n \n       uiout->field_string (\"name\", list->name);"
    },
    {
      "sha": "0bf418e510eaa5bd3720e5adfe8cf19227b05c30",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -1625,7 +1625,7 @@ show_user (const char *args, int from_tty)\n     {\n       for (c = cmdlist; c; c = c->next)\n \t{\n-\t  if (cli_user_command_p (c) || c->subcommands != NULL)\n+\t  if (cli_user_command_p (c) || c->is_prefix ())\n \t    show_user_1 (c, \"\", c->name, gdb_stdout);\n \t}\n     }\n@@ -1900,7 +1900,7 @@ alias_command (const char *args, int from_tty)\n       /* We've already tried to look up COMMAND.  */\n       gdb_assert (c_command != NULL\n \t\t  && c_command != (struct cmd_list_element *) -1);\n-      gdb_assert (c_command->subcommands != NULL);\n+      gdb_assert (c_command->is_prefix ());\n       c_alias = lookup_cmd_1 (& alias_prefix, cmdlist, NULL, NULL, 1);\n       if (c_alias != c_command)\n \terror (_(\"ALIAS and COMMAND prefixes do not match.\"));"
    },
    {
      "sha": "785e726a81f6903522605546e13f9663c12e0a07",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 14,
      "deletions": 12,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -69,8 +69,9 @@ lookup_cmd_with_subcommands (cmd_list_element **subcommands,\n     {\n       struct cmd_list_element *q;\n \n-      if (p->subcommands == NULL)\n+      if (!p->is_prefix ())\n \tcontinue;\n+\n       else if (p->subcommands == subcommands)\n \t{\n \t  /* If we found an alias, we must return the aliased\n@@ -163,7 +164,7 @@ set_cmd_completer_handle_brkchars (struct cmd_list_element *cmd,\n std::string\n cmd_list_element::prefixname () const\n {\n-  if (this->subcommands == nullptr)\n+  if (!this->is_prefix ())\n     /* Not a prefix command.  */\n     return \"\";\n \n@@ -369,7 +370,7 @@ update_prefix_field_of_prefixed_commands (struct cmd_list_element *c)\n \t 'auto-load' command was not yet reachable by\n \t    lookup_cmd_for_subcommands (list, cmdlist)\n \t    that searches from the top level 'cmdlist'.  */\n-      if (p->subcommands != nullptr)\n+      if (p->is_prefix ())\n \tupdate_prefix_field_of_prefixed_commands (p);\n     }\n }\n@@ -1184,7 +1185,7 @@ apropos_cmd (struct ui_file *stream,\n \t    print_doc_of_command (c, prefix, verbose, regex, stream);\n \t}\n       /* Check if this command has subcommands.  */\n-      if (c->subcommands != NULL)\n+      if (c->is_prefix ())\n \t{\n \t  /* Recursively call ourselves on the subcommand list,\n \t     passing the right prefix in.  */\n@@ -1249,12 +1250,13 @@ help_cmd (const char *command, struct ui_file *stream)\n   fputs_filtered (c->doc, stream);\n   fputs_filtered (\"\\n\", stream);\n \n-  if (c->subcommands == 0 && c->func != NULL)\n+  if (!c->is_prefix () && c->func != NULL)\n     return;\n+\n   fprintf_filtered (stream, \"\\n\");\n \n   /* If this is a prefix command, print it's subcommands.  */\n-  if (c->subcommands)\n+  if (c->is_prefix ())\n     help_list (*c->subcommands, c->prefixname ().c_str (),\n \t       all_commands, stream);\n \n@@ -1446,7 +1448,7 @@ print_help_for_command (struct cmd_list_element *c,\n   fput_aliases_definition_styled (c, stream);\n \n   if (recurse\n-      && c->subcommands != 0\n+      && c->is_prefix ()\n       && c->abbrev_flag == 0)\n     /* Subcommands of a prefix command typically have 'all_commands'\n        as class.  If we pass CLASS to recursive invocation,\n@@ -1516,7 +1518,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \n       if (recurse\n \t  && (theclass == class_user || theclass == class_alias)\n-\t  && c->subcommands != NULL)\n+\t  && c->is_prefix ())\n \t{\n \t  /* User-defined commands or aliases may be subcommands.  */\n \t  help_cmd_list (*c->subcommands, theclass, recurse, stream);\n@@ -1694,7 +1696,7 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n     }\n   /* If we found a prefix command, keep looking.  */\n \n-  if (found->subcommands)\n+  if (found->is_prefix ())\n     {\n       c = lookup_cmd_1 (text, *found->subcommands, result_list, default_args,\n \t\t\tignore_help_classes, lookup_for_completion_p);\n@@ -1865,7 +1867,7 @@ lookup_cmd (const char **line, struct cmd_list_element *list,\n       while (**line == ' ' || **line == '\\t')\n \t(*line)++;\n \n-      if (c->subcommands && **line && !c->allow_unknown)\n+      if (c->is_prefix () && **line && !c->allow_unknown)\n \tundef_cmd_error (c->prefixname ().c_str (), *line);\n \n       /* Seems to be what he wants.  Return it.  */\n@@ -2056,7 +2058,7 @@ lookup_cmd_composition_1 (const char *text,\n       text += len;\n       text = skip_spaces (text);\n \n-      if ((*cmd)->subcommands != nullptr && *text != '\\0')\n+      if ((*cmd)->is_prefix () && *text != '\\0')\n \t{\n \t  cur_list = *(*cmd)->subcommands;\n \t  *prefix_cmd = *cmd;\n@@ -2123,7 +2125,7 @@ complete_on_cmdlist (struct cmd_list_element *list,\n \tif (!strncmp (ptr->name, text, textlen)\n \t    && !ptr->abbrev_flag\n \t    && (!ignore_help_classes || ptr->func\n-\t\t|| ptr->subcommands))\n+\t\t|| ptr->is_prefix ()))\n \t  {\n \t    if (pass == 0)\n \t      {"
    },
    {
      "sha": "6204ed745e00a6c02ee034dd5a3bb7d91938330a",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -83,6 +83,10 @@ struct cmd_list_element\n   bool is_alias () const\n   { return this->alias_target != nullptr; }\n \n+  /* Return true if this command is a prefix command.  */\n+  bool is_prefix () const\n+  { return this->subcommands != nullptr; }\n+\n   /* Points to next command in this list.  */\n   struct cmd_list_element *next = nullptr;\n "
    },
    {
      "sha": "ff93523f4daae1bb463d503155ec7f34adcdb412",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -1350,7 +1350,7 @@ validate_comname (const char **comname)\n       const char *tem = prefix.c_str ();\n \n       c = lookup_cmd (&tem, cmdlist, \"\", NULL, 0, 1);\n-      if (c->subcommands == NULL)\n+      if (!c->is_prefix ())\n \terror (_(\"\\\"%s\\\" is not a prefix command.\"), prefix.c_str ());\n \n       list = c->subcommands;\n@@ -1414,7 +1414,7 @@ do_define_command (const char *comname, int from_tty,\n \t  /* if C is a prefix command that was previously defined,\n \t     tell the user its subcommands will be kept, and ask\n \t     if ok to redefine the command.  */\n-\t  if (c->subcommands != nullptr)\n+\t  if (c->is_prefix ())\n \t    q = (c->user_commands.get () == nullptr\n \t\t || query (_(\"Keeping subcommands of prefix command \\\"%s\\\".\\n\"\n \t\t\t     \"Redefine command \\\"%s\\\"? \"), c->name, c->name));\n@@ -1595,7 +1595,7 @@ define_prefix_command (const char *comname, int from_tty)\n   if (c != nullptr && c->theclass != class_user)\n     error (_(\"Command \\\"%s\\\" is built-in.\"), comfull);\n \n-  if (c != nullptr && c->subcommands != nullptr)\n+  if (c != nullptr && c->is_prefix ())\n     {\n       /* c is already a user defined prefix command.  */\n       return;\n@@ -1665,7 +1665,7 @@ show_user_1 (struct cmd_list_element *c, const char *prefix, const char *name,\n       struct command_line *cmdlines = c->user_commands.get ();\n \n       fprintf_filtered (stream, \"User %scommand \\\"\",\n-\t\t\tc->subcommands == NULL ? \"\" : \"prefix \");\n+\t\t\tc->is_prefix () ? \"prefix\" : \"\");\n       fprintf_styled (stream, title_style.style (), \"%s%s\",\n \t\t      prefix, name);\n       fprintf_filtered (stream, \"\\\":\\n\");\n@@ -1676,12 +1676,12 @@ show_user_1 (struct cmd_list_element *c, const char *prefix, const char *name,\n \t}\n     }\n \n-  if (c->subcommands != NULL)\n+  if (c->is_prefix ())\n     {\n       const std::string prefixname = c->prefixname ();\n \n       for (c = *c->subcommands; c != NULL; c = c->next)\n-\tif (c->theclass == class_user || c->subcommands != NULL)\n+\tif (c->theclass == class_user || c->is_prefix ())\n \t  show_user_1 (c, prefixname.c_str (), c->name, gdb_stdout);\n     }\n "
    },
    {
      "sha": "82008ca8eed6923bae3abb34cb4d469c38045bdf",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -740,7 +740,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \n       /* If we find a prefix, run its list, prefixing our output by its\n \t prefix (with \"show \" skipped).  */\n-      if (list->subcommands && !list->is_alias ())\n+      if (list->is_prefix () && !list->is_alias ())\n \t{\n \t  ui_out_emit_tuple optionlist_emitter (uiout, \"optionlist\");\n \t  std::string prefixname = list->prefixname ();\n@@ -758,7 +758,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \t    {\n \t      /* If we find a prefix, output it (with \"show \" skipped).  */\n \t      std::string prefixname = list->prefix->prefixname ();\n-\t      prefixname = (list->prefix->subcommands == nullptr ? \"\"\n+\t      prefixname = (!list->prefix->is_prefix () ? \"\"\n \t\t\t    : strstr (prefixname.c_str (), \"show \") + 5);\n \t      uiout->text (prefixname.c_str ());\n \t    }"
    },
    {
      "sha": "6ad788b4344cb3b5085a820ed52720dbc1d6cef6",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -1456,7 +1456,7 @@ complete_line_internal_1 (completion_tracker &tracker,\n \t    {\n \t      /* The command is followed by whitespace; we need to\n \t\t complete on whatever comes after command.  */\n-\t      if (c->subcommands)\n+\t      if (c->is_prefix ())\n \t\t{\n \t\t  /* It is a prefix command; what comes after it is\n \t\t     a subcommand (e.g. \"info \").  */\n@@ -1524,7 +1524,7 @@ complete_line_internal_1 (completion_tracker &tracker,\n \t{\n \t  /* There is non-whitespace beyond the command.  */\n \n-\t  if (c->subcommands && !c->allow_unknown)\n+\t  if (c->is_prefix () && !c->allow_unknown)\n \t    {\n \t      /* It is an unrecognized subcommand of a prefix command,\n \t\t e.g. \"info adsfkdj\".  */"
    },
    {
      "sha": "39c915e0ab226e525e6f0df812ecce8323a5f0ed",
      "filename": "gdb/guile/scm-cmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/guile/scm-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/guile/scm-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-cmd.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -524,7 +524,7 @@ gdbscm_parse_command_name (const char *name,\n \t\t\t\t gdbscm_scm_from_c_string (name), msg);\n     }\n \n-  if (elt->subcommands)\n+  if (elt->is_prefix ())\n     {\n       xfree (prefix_text);\n       *base_list = elt->subcommands;"
    },
    {
      "sha": "4f01fc0b5f35d71cf2b22665da8ea5a914d45c42",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -111,7 +111,7 @@ cmdpy_function (struct cmd_list_element *command,\n     error (_(\"Invalid invocation of Python command object.\"));\n   if (! PyObject_HasAttr ((PyObject *) obj, invoke_cst))\n     {\n-      if (obj->command->subcommands != nullptr)\n+      if (obj->command->is_prefix ())\n \t{\n \t  /* A prefix command does not need an invoke method.  */\n \t  return;\n@@ -393,7 +393,7 @@ gdbpy_parse_command_name (const char *name,\n       return NULL;\n     }\n \n-  if (elt->subcommands)\n+  if (elt->is_prefix ())\n     {\n       *base_list = elt->subcommands;\n       return result;"
    },
    {
      "sha": "a1a932ae93e96c2a566553cd6b52a56cbbf81c95",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -647,7 +647,7 @@ execute_command (const char *p, int from_tty)\n       if (c->theclass == class_user && c->user_commands)\n \texecute_user_command (c, arg);\n       else if (c->theclass == class_user\n-\t       && c->subcommands && !c->allow_unknown)\n+\t       && c->is_prefix () && !c->allow_unknown)\n \t/* If this is a user defined prefix that does not allow unknown\n \t   (in other words, C is a prefix command and not a command\n \t   that can be followed by its args), report the list of"
    },
    {
      "sha": "e99eb9bbb75dfd418b176c671f08fbceb447e395",
      "filename": "gdb/unittests/command-def-selftests.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/unittests/command-def-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d0b35641081d0f57d32583093f3297ff39b7379/gdb/unittests/command-def-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/command-def-selftests.c?ref=3d0b35641081d0f57d32583093f3297ff39b7379",
      "patch": "@@ -83,7 +83,7 @@ check_doc (struct cmd_list_element *commandlist, const char *prefix)\n       /* Check if this command has subcommands and is not an\n \t abbreviation.  We skip checking subcommands of abbreviations\n \t in order to avoid duplicates in the output.  */\n-      if (c->subcommands != NULL && !c->abbrev_flag)\n+      if (c->is_prefix () && !c->abbrev_flag)\n \t{\n \t  /* Recursively call ourselves on the subcommand list,\n \t     passing the right prefix in.  */\n@@ -155,7 +155,7 @@ traverse_command_structure (struct cmd_list_element **list,\n     {\n       /* If this command has subcommands and is not an alias,\n \t traverse the subcommands.  */\n-      if (c->subcommands != NULL && !c->is_alias ())\n+      if (c->is_prefix () && !c->is_alias ())\n \t{\n \t  /* Recursively call ourselves on the subcommand list,\n \t     passing the right prefix in.  */"
    }
  ]
}