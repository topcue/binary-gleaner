{
  "sha": "e4dff7651becba48d805e39655138f7f6ca30485",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTRkZmY3NjUxYmVjYmE0OGQ4MDVlMzk2NTUxMzhmN2Y2Y2EzMDQ4NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-03T02:18:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-13T00:27:50Z"
    },
    "message": "[GOLD] PowerPC relocations for prefix insns\n\nAlso use pc-relative instructions for notoc stubs.\n\nelfcpp/\n\t* powerpc.h (R_PPC64_PCREL_OPT, R_PPC64_D34, R_PPC64_D34_LO),\n\t(R_PPC64_D34_HI30, R_PPC64_D34_HA30, R_PPC64_PCREL34),\n\t(R_PPC64_GOT_PCREL34, R_PPC64_PLT_PCREL34, R_PPC64_PLT_PCREL34_NOTOC),\n\t(R_PPC64_ADDR16_HIGHER34, R_PPC64_ADDR16_HIGHERA34),\n\t(R_PPC64_ADDR16_HIGHEST34, R_PPC64_ADDR16_HIGHESTA34),\n\t(R_PPC64_REL16_HIGHER34, R_PPC64_REL16_HIGHERA34),\n\t(R_PPC64_REL16_HIGHEST34, R_PPC64_REL16_HIGHESTA34),\n\t(R_PPC64_D28, R_PPC64_PCREL28): Define.\ngold/\n\t* powerpc.cc (Target_powerpc): Add powerxx_stubs_ and accessor\n\tfunctions.\n\t(Target_powerpc::maybe_skip_tls_get_addr_call): Handle PLT_PCREL34\n\tand PLT_PCREL34_NOTOC relocs.\n\t(Powerpc_relocate_functions): Add addr34, addr34_hi, addr34_ha,\n\taddr28, addr16_higher34, addr16_highera34, addr16_highest34,\n\taddr16_highest34a functions.\n\t(li_11_0, ori_11_11_0, sldi_11_11_34): Define.\n\t(paddi_12_pc, pld_12_pc, pnop): Define.\n\t(d34, ha34): New inline functions.\n\t(Stub_table::add_plt_call_entry): Handle powerxx_stubs.\n\t(Stub_table::add_eh_frame): Likewise.\n\t(build_powerxx_offset): New function.\n\t(Stub_table::plt_call_size): Handle powerxx_stubs.\n\t(Stub_table::branch_stub_size): Likewise.\n\t(Stub_table::do_write): Likewise.\n\t(Target_powerpc::Scan::get_reference_flags): Handle new relocs.\n\t(Target_powerpc::Scan::reloc_needs_plt_for_ifunc: Likewise.\n\t(Target_powerpc::Scan::local, global, relocate): Likewise.",
    "tree": {
      "sha": "24f049111d289a14a6001c7b325c4f421445b7a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/24f049111d289a14a6001c7b325c4f421445b7a7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4dff7651becba48d805e39655138f7f6ca30485",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4dff7651becba48d805e39655138f7f6ca30485",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4dff7651becba48d805e39655138f7f6ca30485",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4dff7651becba48d805e39655138f7f6ca30485/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/220f99066d6ce2a6caf17692fcc57d714d8f6910"
    }
  ],
  "stats": {
    "total": 497,
    "additions": 485,
    "deletions": 12
  },
  "files": [
    {
      "sha": "724c95a504402dc9c2ac400f97ba7a651008f4f3",
      "filename": "elfcpp/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4dff7651becba48d805e39655138f7f6ca30485/elfcpp/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4dff7651becba48d805e39655138f7f6ca30485/elfcpp/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/ChangeLog?ref=e4dff7651becba48d805e39655138f7f6ca30485",
      "patch": "@@ -1,3 +1,14 @@\n+2019-07-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.h (R_PPC64_PCREL_OPT, R_PPC64_D34, R_PPC64_D34_LO),\n+\t(R_PPC64_D34_HI30, R_PPC64_D34_HA30, R_PPC64_PCREL34),\n+\t(R_PPC64_GOT_PCREL34, R_PPC64_PLT_PCREL34, R_PPC64_PLT_PCREL34_NOTOC),\n+\t(R_PPC64_ADDR16_HIGHER34, R_PPC64_ADDR16_HIGHERA34),\n+\t(R_PPC64_ADDR16_HIGHEST34, R_PPC64_ADDR16_HIGHESTA34),\n+\t(R_PPC64_REL16_HIGHER34, R_PPC64_REL16_HIGHERA34),\n+\t(R_PPC64_REL16_HIGHEST34, R_PPC64_REL16_HIGHESTA34),\n+\t(R_PPC64_D28, R_PPC64_PCREL28): Define.\n+\n 2019-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.h (R_PPC64_PLTSEQ_NOTOC, R_PPC64_PLTCALL_NOTOC): Define."
    },
    {
      "sha": "d06eba44b7c4376aa374cd101c46c99281f2f362",
      "filename": "elfcpp/powerpc.h",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4dff7651becba48d805e39655138f7f6ca30485/elfcpp/powerpc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4dff7651becba48d805e39655138f7f6ca30485/elfcpp/powerpc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/powerpc.h?ref=e4dff7651becba48d805e39655138f7f6ca30485",
      "patch": "@@ -183,6 +183,26 @@ enum\n   R_POWERPC_PLTCALL = 120,\n   R_PPC64_PLTSEQ_NOTOC = 121,\n   R_PPC64_PLTCALL_NOTOC = 122,\n+  R_PPC64_PCREL_OPT = 123,\n+\n+  R_PPC64_D34 = 128,\n+  R_PPC64_D34_LO = 129,\n+  R_PPC64_D34_HI30 = 130,\n+  R_PPC64_D34_HA30 = 131,\n+  R_PPC64_PCREL34 = 132,\n+  R_PPC64_GOT_PCREL34 = 133,\n+  R_PPC64_PLT_PCREL34 = 134,\n+  R_PPC64_PLT_PCREL34_NOTOC = 135,\n+  R_PPC64_ADDR16_HIGHER34 = 136,\n+  R_PPC64_ADDR16_HIGHERA34 = 137,\n+  R_PPC64_ADDR16_HIGHEST34 = 138,\n+  R_PPC64_ADDR16_HIGHESTA34 = 139,\n+  R_PPC64_REL16_HIGHER34 = 140,\n+  R_PPC64_REL16_HIGHERA34 = 141,\n+  R_PPC64_REL16_HIGHEST34 = 142,\n+  R_PPC64_REL16_HIGHESTA34 = 143,\n+  R_PPC64_D28 = 144,\n+  R_PPC64_PCREL28 = 145,\n \n   R_PPC_VLE_REL8 = 216,\n   R_PPC_VLE_REL15 = 217,"
    },
    {
      "sha": "d6e2c0c5f7f1f00143c5bc6e8a94fcc30b7e0e17",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4dff7651becba48d805e39655138f7f6ca30485/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4dff7651becba48d805e39655138f7f6ca30485/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=e4dff7651becba48d805e39655138f7f6ca30485",
      "patch": "@@ -1,3 +1,25 @@\n+2019-07-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (Target_powerpc): Add powerxx_stubs_ and accessor\n+\tfunctions.\n+\t(Target_powerpc::maybe_skip_tls_get_addr_call): Handle PLT_PCREL34\n+\tand PLT_PCREL34_NOTOC relocs.\n+\t(Powerpc_relocate_functions): Add addr34, addr34_hi, addr34_ha,\n+\taddr28, addr16_higher34, addr16_highera34, addr16_highest34,\n+\taddr16_highest34a functions.\n+\t(li_11_0, ori_11_11_0, sldi_11_11_34): Define.\n+\t(paddi_12_pc, pld_12_pc, pnop): Define.\n+\t(d34, ha34): New inline functions.\n+\t(Stub_table::add_plt_call_entry): Handle powerxx_stubs.\n+\t(Stub_table::add_eh_frame): Likewise.\n+\t(build_powerxx_offset): New function.\n+\t(Stub_table::plt_call_size): Handle powerxx_stubs.\n+\t(Stub_table::branch_stub_size): Likewise.\n+\t(Stub_table::do_write): Likewise.\n+\t(Target_powerpc::Scan::get_reference_flags): Handle new relocs.\n+\t(Target_powerpc::Scan::reloc_needs_plt_for_ifunc: Likewise.\n+\t(Target_powerpc::Scan::local, global, relocate): Likewise.\n+\n 2019-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* ehframe.cc (Fde::operator==): Delete."
    },
    {
      "sha": "c8d4414df7184a13f5ed8f339786f4a8eeb1e06f",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 432,
      "deletions": 12,
      "changes": 444,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4dff7651becba48d805e39655138f7f6ca30485/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4dff7651becba48d805e39655138f7f6ca30485/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=e4dff7651becba48d805e39655138f7f6ca30485",
      "patch": "@@ -641,7 +641,7 @@ class Target_powerpc : public Sized_target<size, big_endian>\n       glink_(NULL), rela_dyn_(NULL), copy_relocs_(),\n       tlsld_got_offset_(-1U),\n       stub_tables_(), branch_lookup_table_(), branch_info_(), tocsave_loc_(),\n-      plt_thread_safe_(false), plt_localentry0_(false),\n+      powerxx_stubs_(false), plt_thread_safe_(false), plt_localentry0_(false),\n       plt_localentry0_init_(false), has_localentry0_(false),\n       has_tls_get_addr_opt_(false),\n       relax_failed_(false), relax_fail_count_(0),\n@@ -1072,6 +1072,16 @@ class Target_powerpc : public Sized_target<size, big_endian>\n     sym->set_dynsym_index(-1U);\n   }\n \n+  bool\n+  powerxx_stubs() const\n+  { return this->powerxx_stubs_; }\n+\n+  void\n+  set_powerxx_stubs()\n+  {\n+    this->powerxx_stubs_ = true;\n+  }\n+\n   bool\n   plt_thread_safe() const\n   { return this->plt_thread_safe_; }\n@@ -1251,6 +1261,8 @@ class Target_powerpc : public Sized_target<size, big_endian>\n \t    || (size == 64 && r_type == elfcpp::R_PPC64_REL24_NOTOC)\n \t    || r_type == elfcpp::R_PPC_PLTREL24\n \t    || is_plt16_reloc<size>(r_type)\n+\t    || r_type == elfcpp::R_PPC64_PLT_PCREL34\n+\t    || r_type == elfcpp::R_PPC64_PLT_PCREL34_NOTOC\n \t    || r_type == elfcpp::R_POWERPC_PLTSEQ\n \t    || r_type == elfcpp::R_POWERPC_PLTCALL\n \t    || r_type == elfcpp::R_PPC64_PLTSEQ_NOTOC\n@@ -1669,6 +1681,7 @@ class Target_powerpc : public Sized_target<size, big_endian>\n   Branches branch_info_;\n   Tocsave_loc tocsave_loc_;\n \n+  bool powerxx_stubs_;\n   bool plt_thread_safe_;\n   bool plt_localentry0_;\n   bool plt_localentry0_init_;\n@@ -2126,6 +2139,56 @@ class Powerpc_relocate_functions\n     elfcpp::Swap<32, big_endian>::writeval(wv, val);\n     return overflowed<16>(value, overflow);\n   }\n+\n+  // R_PPC64_D34\n+  static inline Status\n+  addr34(unsigned char *view, uint64_t value, Overflow_check overflow)\n+  {\n+    Status stat = This::template rela<32,18>(view, 16, 0x3ffff,\n+\t\t\t\t\t     value, overflow);\n+    This::rela<32,16>(view + 4, 0, 0xffff, value, CHECK_NONE);\n+    return stat;\n+  }\n+\n+  // R_PPC64_D34_HI30\n+  static inline void\n+  addr34_hi(unsigned char *view, uint64_t value)\n+  { This::addr34(view, value >> 34, CHECK_NONE);}\n+\n+  // R_PPC64_D34_HA30\n+  static inline void\n+  addr34_ha(unsigned char *view, uint64_t value)\n+  { This::addr34_hi(view, value + (1ULL << 33));}\n+\n+  // R_PPC64_D28\n+  static inline Status\n+  addr28(unsigned char *view, uint64_t value, Overflow_check overflow)\n+  {\n+    Status stat = This::template rela<32,12>(view, 16, 0xfff,\n+\t\t\t\t\t     value, overflow);\n+    This::rela<32,16>(view + 4, 0, 0xffff, value, CHECK_NONE);\n+    return stat;\n+  }\n+\n+  // R_PPC64_ADDR16_HIGHER34\n+  static inline void\n+  addr16_higher34(unsigned char* view, uint64_t value)\n+  { This::addr16(view, value >> 34, CHECK_NONE); }\n+\n+  // R_PPC64_ADDR16_HIGHERA34\n+  static inline void\n+  addr16_highera34(unsigned char* view, uint64_t value)\n+  { This::addr16_higher34(view, value + (1ULL << 33)); }\n+\n+  // R_PPC64_ADDR16_HIGHEST34\n+  static inline void\n+  addr16_highest34(unsigned char* view, uint64_t value)\n+  { This::addr16(view, value >> 50, CHECK_NONE); }\n+\n+  // R_PPC64_ADDR16_HIGHESTA34\n+  static inline void\n+  addr16_highesta34(unsigned char* view, uint64_t value)\n+  { This::addr16_highest34(view, value + (1ULL << 33)); }\n };\n \n // Set ABI version for input and output.\n@@ -4091,6 +4154,7 @@ static const uint32_t ld_12_12\t\t= 0xe98c0000;\n static const uint32_t ldx_12_11_12\t= 0x7d8b602a;\n static const uint32_t lfd_0_1\t\t= 0xc8010000;\n static const uint32_t li_0_0\t\t= 0x38000000;\n+static const uint32_t li_11_0\t\t= 0x39600000;\n static const uint32_t li_12_0\t\t= 0x39800000;\n static const uint32_t lis_0\t\t= 0x3c000000;\n static const uint32_t lis_2\t\t= 0x3c400000;\n@@ -4117,8 +4181,10 @@ static const uint32_t mtlr_11\t\t= 0x7d6803a6;\n static const uint32_t mtlr_12\t\t= 0x7d8803a6;\n static const uint32_t nop\t\t= 0x60000000;\n static const uint32_t ori_0_0_0\t\t= 0x60000000;\n+static const uint32_t ori_11_11_0\t= 0x616b0000;\n static const uint32_t ori_12_12_0\t= 0x618c0000;\n static const uint32_t oris_12_12_0\t= 0x658c0000;\n+static const uint32_t sldi_11_11_34\t= 0x796b1746;\n static const uint32_t sldi_12_12_32\t= 0x799c07c6;\n static const uint32_t srdi_0_0_2\t= 0x7800f082;\n static const uint32_t std_0_1\t\t= 0xf8010000;\n@@ -4132,6 +4198,10 @@ static const uint32_t sub_12_12_11\t= 0x7d8b6050;\n static const uint32_t xor_2_12_12\t= 0x7d826278;\n static const uint32_t xor_11_12_12\t= 0x7d8b6278;\n \n+static const uint64_t paddi_12_pc\t= 0x0610000039800000ULL;\n+static const uint64_t pld_12_pc\t\t= 0x04100000e5800000ULL;\n+static const uint64_t pnop\t\t= 0x0700000000000000ULL;\n+\n // Write out the PLT.\n \n template<int size, bool big_endian>\n@@ -4412,6 +4482,18 @@ ha(uint32_t a)\n   return hi(a + 0x8000);\n }\n \n+static inline uint64_t\n+d34(uint64_t v)\n+{\n+  return ((v & 0x3ffff0000ULL) << 16) | (v & 0xffff);\n+}\n+\n+static inline uint64_t\n+ha34(uint64_t v)\n+{\n+  return (v + (1ULL << 33)) >> 34;\n+}\n+\n template<int size>\n struct Eh_cie\n {\n@@ -4957,7 +5039,8 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t}\n       if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n \t{\n-\t  if (!p.second && !p.first->second.notoc_)\n+\t  if (!p.second && !p.first->second.notoc_\n+\t      && !this->targ_->powerxx_stubs())\n \t    this->need_resize_ = true;\n \t  p.first->second.notoc_ = 1;\n \t}\n@@ -5007,7 +5090,8 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t}\n       if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n \t{\n-\t  if (!p.second && !p.first->second.notoc_)\n+\t  if (!p.second && !p.first->second.notoc_\n+\t      && !this->targ_->powerxx_stubs())\n \t    this->need_resize_ = true;\n \t  p.first->second.notoc_ = 1;\n \t}\n@@ -5212,15 +5296,17 @@ Stub_table<size, big_endian>::add_eh_frame(Layout* layout)\n       if ((this->targ_->is_tls_get_addr_opt(cs->first.sym_)\n \t   && cs->second.r2save_\n \t   && !cs->second.localentry0_)\n-\t  || cs->second.notoc_)\n+\t  || (cs->second.notoc_\n+\t      && !this->targ_->powerxx_stubs()))\n \tcalls.push_back(cs);\n   if (calls.size() > 1)\n     std::stable_sort(calls.begin(), calls.end(),\n \t\t     stub_sort<plt_iter>);\n \n   typedef typename Branch_stub_entries::const_iterator branch_iter;\n   std::vector<branch_iter> branches;\n-  if (!this->long_branch_stubs_.empty())\n+  if (!this->long_branch_stubs_.empty()\n+      && !this->targ_->powerxx_stubs())\n     for (branch_iter bs = this->long_branch_stubs_.begin();\n \t bs != this->long_branch_stubs_.end();\n \t ++bs)\n@@ -5653,6 +5739,86 @@ Stub_table<size, big_endian>::build_tls_opt_tail(\n   return false;\n }\n \n+// Emit pc-relative plt call stub code.\n+\n+template<bool big_endian>\n+static unsigned char*\n+build_powerxx_offset(unsigned char* p, uint64_t off, uint64_t odd, bool load)\n+{\n+  uint64_t insn;\n+  if (off - odd + (1ULL << 33) < 1ULL << 34)\n+    {\n+      off -= odd;\n+      if (odd)\n+\t{\n+\t  write_insn<big_endian>(p, nop);\n+\t  p += 4;\n+\t}\n+      if (load)\n+\tinsn = pld_12_pc;\n+      else\n+\tinsn = paddi_12_pc;\n+      insn |= d34(off);\n+      write_insn<big_endian>(p, insn >> 32);\n+      p += 4;\n+      write_insn<big_endian>(p, insn & 0xffffffff);\n+    }\n+  else if (off - (8 - odd) + (0x20002ULL << 32) < 0x40004ULL << 32)\n+    {\n+      off -= 8 - odd;\n+      write_insn<big_endian>(p, li_11_0 | (ha34(off) & 0xffff));\n+      p += 4;\n+      if (!odd)\n+\t{\n+\t  write_insn<big_endian>(p, sldi_11_11_34);\n+\t  p += 4;\n+\t}\n+      insn = paddi_12_pc | d34(off);\n+      write_insn<big_endian>(p, insn >> 32);\n+      p += 4;\n+      write_insn<big_endian>(p, insn & 0xffffffff);\n+      p += 4;\n+      if (odd)\n+\t{\n+\t  write_insn<big_endian>(p, sldi_11_11_34);\n+\t  p += 4;\n+\t}\n+      if (load)\n+\twrite_insn<big_endian>(p, ldx_12_11_12);\n+      else\n+\twrite_insn<big_endian>(p, add_12_11_12);\n+    }\n+  else\n+    {\n+      off -= odd + 8;\n+      write_insn<big_endian>(p, lis_11 | ((ha34(off) >> 16) & 0x3fff));\n+      p += 4;\n+      write_insn<big_endian>(p, ori_11_11_0 | (ha34(off) & 0xffff));\n+      p += 4;\n+      if (odd)\n+\t{\n+\t  write_insn<big_endian>(p, sldi_11_11_34);\n+\t  p += 4;\n+\t}\n+      insn = paddi_12_pc | d34(off);\n+      write_insn<big_endian>(p, insn >> 32);\n+      p += 4;\n+      write_insn<big_endian>(p, insn & 0xffffffff);\n+      p += 4;\n+      if (!odd)\n+\t{\n+\t  write_insn<big_endian>(p, sldi_11_11_34);\n+\t  p += 4;\n+\t}\n+      if (load)\n+\twrite_insn<big_endian>(p, ldx_12_11_12);\n+      else\n+\twrite_insn<big_endian>(p, add_12_11_12);\n+    }\n+  p += 4;\n+  return p;\n+}\n+\n // Gets the address of a label (1:) in r11 and builds an offset in r12,\n // then adds it to r11 (LOAD false) or loads r12 from r11+r12 (LOAD true).\n //\tmflr\t%r12\n@@ -5765,6 +5931,22 @@ Stub_table<size, big_endian>::plt_call_size(\n   if (p->second.r2save_)\n     bytes += 4;\n \n+  if (this->targ_->powerxx_stubs())\n+    {\n+      uint64_t from = this->stub_address() + p->second.off_ + bytes;\n+      if (bytes > 8 * 4)\n+\tfrom -= 4 * 4;\n+      uint64_t odd = from & 4;\n+      uint64_t off = plt_addr - from;\n+      if (off - odd + (1ULL << 33) < 1ULL << 34)\n+\tbytes += odd + 4 * 4;\n+      else if (off - (8 - odd) + (0x20002ULL << 32) < 0x40004ULL << 32)\n+\tbytes += 7 * 4;\n+      else\n+\tbytes += 8 * 4;\n+      return bytes;\n+    }\n+\n   if (p->second.notoc_)\n     {\n       uint64_t from = this->stub_address() + p->second.off_ + bytes + 2 * 4;\n@@ -5830,6 +6012,17 @@ Stub_table<size, big_endian>::branch_stub_size(\n   uint64_t off = p->first.dest_ - loc;\n   if (p->second.notoc_)\n     {\n+      if (this->targ_->powerxx_stubs())\n+\t{\n+\t  Address odd = loc & 4;\n+\t  if (off + (1 << 25) < 2 << 25)\n+\t    return odd + 12;\n+\t  if (off - odd + (1ULL << 33) < 1ULL << 34)\n+\t    return odd + 16;\n+\t  if (off - (8 - odd) + (0x20002ULL << 32) < 0x40004ULL << 32)\n+\t    return 28;\n+\t  return 32;\n+\t}\n       off -= 8;\n       if (off + 0x8000 < 0x10000)\n \treturn 24;\n@@ -5854,7 +6047,8 @@ Stub_table<size, big_endian>::branch_stub_size(\n \n   if (off + (1 << 25) < 2 << 25)\n     return 4;\n-  *need_lt = true;\n+  if (!this->targ_->powerxx_stubs())\n+    *need_lt = true;\n   return 16;\n }\n \n@@ -5888,7 +6082,66 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n   unsigned char* const oview = of->get_output_view(off, oview_size);\n   unsigned char* p;\n \n-  if (size == 64)\n+  if (size == 64\n+      && this->targ_->powerxx_stubs())\n+    {\n+      if (!this->plt_call_stubs_.empty())\n+\t{\n+\t  // Write out plt call stubs.\n+\t  typename Plt_stub_entries::const_iterator cs;\n+\t  for (cs = this->plt_call_stubs_.begin();\n+\t       cs != this->plt_call_stubs_.end();\n+\t       ++cs)\n+\t    {\n+\t      p = oview + cs->second.off_;\n+\t      this->build_tls_opt_head(&p, cs);\n+\t      if (cs->second.r2save_)\n+\t\t{\n+\t\t  write_insn<big_endian>(p, std_2_1 + this->targ_->stk_toc());\n+\t\t  p += 4;\n+\t\t}\n+\t      const Output_data_plt_powerpc<size, big_endian>* plt;\n+\t      Address pltoff = this->plt_off(cs, &plt);\n+\t      Address plt_addr = pltoff + plt->address();\n+\t      Address from = this->stub_address() + (p - oview);\n+\t      Address delta = plt_addr - from;\n+\t      p = build_powerxx_offset<big_endian>(p, delta, from & 4, true);\n+\t      write_insn<big_endian>(p, mtctr_12);\n+\t      p += 4;\n+\t      if (!this->build_tls_opt_tail(p, cs))\n+\t\twrite_insn<big_endian>(p, bctr);\n+\t    }\n+\t}\n+\n+      // Write out long branch stubs.\n+      typename Branch_stub_entries::const_iterator bs;\n+      for (bs = this->long_branch_stubs_.begin();\n+\t   bs != this->long_branch_stubs_.end();\n+\t   ++bs)\n+\t{\n+\t  if (bs->second.save_res_)\n+\t    continue;\n+\t  Address off = this->plt_size_ + bs->second.off_;\n+\t  p = oview + off;\n+\t  Address loc = this->stub_address() + off;\n+\t  Address delta = bs->first.dest_ - loc;\n+\t  if (bs->second.notoc_ || delta + (1 << 25) >= 2 << 25)\n+\t    {\n+\t      unsigned char* startp = p;\n+\t      p = build_powerxx_offset<big_endian>(p, delta, loc & 4, false);\n+\t      delta -= p - startp;\n+\t    }\n+\t  if (delta + (1 << 25) < 2 << 25)\n+\t    write_insn<big_endian>(p, b | (delta & 0x3fffffc));\n+\t  else\n+\t    {\n+\t      write_insn<big_endian>(p, mtctr_12);\n+\t      p += 4;\n+\t      write_insn<big_endian>(p, bctr);\n+\t    }\n+\t}\n+    }\n+  else if (size == 64)\n     {\n       const Output_data_got_powerpc<size, big_endian>* got\n \t= this->targ_->got_section();\n@@ -6942,6 +7195,12 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n     case elfcpp::R_PPC64_REL16_HIGHERA:\n     case elfcpp::R_PPC64_REL16_HIGHEST:\n     case elfcpp::R_PPC64_REL16_HIGHESTA:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_REL16_HIGHER34:\n+    case elfcpp::R_PPC64_REL16_HIGHERA34:\n+    case elfcpp::R_PPC64_REL16_HIGHEST34:\n+    case elfcpp::R_PPC64_REL16_HIGHESTA34:\n+    case elfcpp::R_PPC64_PCREL28:\n       ref = Symbol::RELATIVE_REF;\n       break;\n \n@@ -6963,6 +7222,7 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n     case elfcpp::R_POWERPC_GOT16_HA:\n     case elfcpp::R_PPC64_GOT16_DS:\n     case elfcpp::R_PPC64_GOT16_LO_DS:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n     case elfcpp::R_PPC64_TOC16:\n     case elfcpp::R_PPC64_TOC16_LO:\n     case elfcpp::R_PPC64_TOC16_HI:\n@@ -6973,6 +7233,8 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n     case elfcpp::R_POWERPC_PLT16_HI:\n     case elfcpp::R_POWERPC_PLT16_HA:\n     case elfcpp::R_PPC64_PLT16_LO_DS:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n       ref = Symbol::RELATIVE_REF;\n       break;\n \n@@ -7154,6 +7416,7 @@ Target_powerpc<size, big_endian>::Scan::reloc_needs_plt_for_ifunc(\n     case elfcpp::R_POWERPC_GOT16_HA:\n     case elfcpp::R_PPC64_GOT16_DS:\n     case elfcpp::R_PPC64_GOT16_LO_DS:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n       return false;\n \n     // PLT relocs are OK and need a PLT entry.\n@@ -7165,6 +7428,8 @@ Target_powerpc<size, big_endian>::Scan::reloc_needs_plt_for_ifunc(\n     case elfcpp::R_POWERPC_PLTCALL:\n     case elfcpp::R_PPC64_PLTSEQ_NOTOC:\n     case elfcpp::R_PPC64_PLTCALL_NOTOC:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n       return true;\n       break;\n \n@@ -7310,6 +7575,25 @@ Target_powerpc<size, big_endian>::Scan::local(\n     case elfcpp::R_POWERPC_PLTCALL:\n     case elfcpp::R_PPC64_PLTSEQ_NOTOC:\n     case elfcpp::R_PPC64_PLTCALL_NOTOC:\n+    case elfcpp::R_PPC64_PCREL_OPT:\n+    case elfcpp::R_PPC64_ADDR16_HIGHER34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHERA34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHEST34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHESTA34:\n+    case elfcpp::R_PPC64_REL16_HIGHER34:\n+    case elfcpp::R_PPC64_REL16_HIGHERA34:\n+    case elfcpp::R_PPC64_REL16_HIGHEST34:\n+    case elfcpp::R_PPC64_REL16_HIGHESTA34:\n+      break;\n+\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_D34_HI30:\n+    case elfcpp::R_PPC64_D34_HA30:\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_PCREL28:\n+      target->set_powerxx_stubs();\n       break;\n \n     case elfcpp::R_PPC64_TOC:\n@@ -7401,6 +7685,10 @@ Target_powerpc<size, big_endian>::Scan::local(\n \t}\n       break;\n \n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+      target->set_powerxx_stubs();\n+      // Fall through.\n     case elfcpp::R_POWERPC_PLT16_LO:\n     case elfcpp::R_POWERPC_PLT16_HI:\n     case elfcpp::R_POWERPC_PLT16_HA:\n@@ -7499,6 +7787,9 @@ Target_powerpc<size, big_endian>::Scan::local(\n     case elfcpp::R_PPC64_ADDR64_LOCAL:\n       break;\n \n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+      target->set_powerxx_stubs();\n+      // Fall through.\n     case elfcpp::R_POWERPC_GOT16:\n     case elfcpp::R_POWERPC_GOT16_LO:\n     case elfcpp::R_POWERPC_GOT16_HI:\n@@ -7884,6 +8175,25 @@ Target_powerpc<size, big_endian>::Scan::global(\n     case elfcpp::R_POWERPC_PLTCALL:\n     case elfcpp::R_PPC64_PLTSEQ_NOTOC:\n     case elfcpp::R_PPC64_PLTCALL_NOTOC:\n+    case elfcpp::R_PPC64_PCREL_OPT:\n+    case elfcpp::R_PPC64_ADDR16_HIGHER34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHERA34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHEST34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHESTA34:\n+    case elfcpp::R_PPC64_REL16_HIGHER34:\n+    case elfcpp::R_PPC64_REL16_HIGHERA34:\n+    case elfcpp::R_PPC64_REL16_HIGHEST34:\n+    case elfcpp::R_PPC64_REL16_HIGHESTA34:\n+      break;\n+\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_D34_HI30:\n+    case elfcpp::R_PPC64_D34_HA30:\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_PCREL28:\n+      target->set_powerxx_stubs();\n       break;\n \n     case elfcpp::R_PPC64_TOC:\n@@ -8019,6 +8329,10 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+      target->set_powerxx_stubs();\n+      // Fall through.\n     case elfcpp::R_POWERPC_PLT16_LO:\n     case elfcpp::R_POWERPC_PLT16_HI:\n     case elfcpp::R_POWERPC_PLT16_HA:\n@@ -8151,6 +8465,9 @@ Target_powerpc<size, big_endian>::Scan::global(\n     case elfcpp::R_PPC64_ADDR64_LOCAL:\n       break;\n \n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+      target->set_powerxx_stubs();\n+      // Fall through.\n     case elfcpp::R_POWERPC_GOT16:\n     case elfcpp::R_POWERPC_GOT16_LO:\n     case elfcpp::R_POWERPC_GOT16_HI:\n@@ -9394,6 +9711,13 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t  Insn* iview = reinterpret_cast<Insn*>(view);\n \t  elfcpp::Swap<32, big_endian>::writeval(iview + 1, nop);\n \t}\n+      else if (size == 64 && (r_type == elfcpp::R_PPC64_PLT_PCREL34\n+\t\t\t      || r_type == elfcpp::R_PPC64_PLT_PCREL34_NOTOC))\n+\t{\n+\t  Insn* iview = reinterpret_cast<Insn*>(view);\n+\t  elfcpp::Swap<32, big_endian>::writeval(iview, pnop >> 32);\n+\t  elfcpp::Swap<32, big_endian>::writeval(iview + 1, pnop & 0xffffffff);\n+\t}\n       return true;\n     case Track_tls::NORMAL:\n       break;\n@@ -9414,6 +9738,8 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n        : object->local_has_plt_offset(r_sym));\n   if (has_plt_offset\n       && !is_plt16_reloc<size>(r_type)\n+      && r_type != elfcpp::R_PPC64_PLT_PCREL34\n+      && r_type != elfcpp::R_PPC64_PLT_PCREL34_NOTOC\n       && r_type != elfcpp::R_POWERPC_PLTSEQ\n       && r_type != elfcpp::R_POWERPC_PLTCALL\n       && r_type != elfcpp::R_PPC64_PLTSEQ_NOTOC\n@@ -9493,7 +9819,9 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       gold_assert(has_stub_value || !(os->flags() & elfcpp::SHF_ALLOC));\n     }\n \n-  if (has_plt_offset && is_plt16_reloc<size>(r_type))\n+  if (has_plt_offset && (is_plt16_reloc<size>(r_type)\n+\t\t\t || r_type == elfcpp::R_PPC64_PLT_PCREL34\n+\t\t\t || r_type == elfcpp::R_PPC64_PLT_PCREL34_NOTOC))\n     {\n       const Output_data_plt_powerpc<size, big_endian>* plt;\n       if (gsym)\n@@ -9503,8 +9831,12 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       value += plt->address();\n \n       if (size == 64)\n-\tvalue -= (target->got_section()->output_section()->address()\n-\t\t  + object->toc_base_offset());\n+\t{\n+\t  if (r_type != elfcpp::R_PPC64_PLT_PCREL34\n+\t      && r_type != elfcpp::R_PPC64_PLT_PCREL34_NOTOC)\n+\t    value -= (target->got_section()->output_section()->address()\n+\t\t      + object->toc_base_offset());\n+\t}\n       else if (parameters->options().output_is_position_independent())\n \t{\n \t  if (rela.get_r_addend() >= 32768)\n@@ -9528,12 +9860,22 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       elfcpp::Swap<32, big_endian>::writeval(iview, nop);\n       r_type = elfcpp::R_POWERPC_NONE;\n     }\n+  else if (!has_plt_offset\n+\t   && (r_type == elfcpp::R_PPC64_PLT_PCREL34\n+\t       || r_type == elfcpp::R_PPC64_PLT_PCREL34_NOTOC))\n+    {\n+      Insn* iview = reinterpret_cast<Insn*>(view);\n+      elfcpp::Swap<32, big_endian>::writeval(iview, pnop >> 32);\n+      elfcpp::Swap<32, big_endian>::writeval(iview + 1, pnop & 0xffffffff);\n+      r_type = elfcpp::R_POWERPC_NONE;\n+    }\n   else if (r_type == elfcpp::R_POWERPC_GOT16\n \t   || r_type == elfcpp::R_POWERPC_GOT16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT16_HI\n \t   || r_type == elfcpp::R_POWERPC_GOT16_HA\n \t   || r_type == elfcpp::R_PPC64_GOT16_DS\n-\t   || r_type == elfcpp::R_PPC64_GOT16_LO_DS)\n+\t   || r_type == elfcpp::R_PPC64_GOT16_LO_DS\n+\t   || r_type == elfcpp::R_PPC64_GOT_PCREL34)\n     {\n       if (gsym != NULL)\n \t{\n@@ -9545,7 +9887,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t  gold_assert(object->local_has_got_offset(r_sym, GOT_TYPE_STANDARD));\n \t  value = object->local_got_offset(r_sym, GOT_TYPE_STANDARD);\n \t}\n-      value -= target->got_section()->got_base_offset(object);\n+      if (r_type == elfcpp::R_PPC64_GOT_PCREL34)\n+\tvalue += target->got_section()->address();\n+      else\n+\tvalue -= target->got_section()->got_base_offset(object);\n     }\n   else if (r_type == elfcpp::R_PPC64_TOC)\n     {\n@@ -9957,6 +10302,15 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_POWERPC_REL14:\n     case elfcpp::R_POWERPC_REL14_BRTAKEN:\n     case elfcpp::R_POWERPC_REL14_BRNTAKEN:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+    case elfcpp::R_PPC64_PCREL28:\n+    case elfcpp::R_PPC64_REL16_HIGHER34:\n+    case elfcpp::R_PPC64_REL16_HIGHERA34:\n+    case elfcpp::R_PPC64_REL16_HIGHEST34:\n+    case elfcpp::R_PPC64_REL16_HIGHESTA34:\n       value -= address;\n       break;\n \n@@ -10397,6 +10751,13 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_POWERPC_REL14:\n     case elfcpp::R_POWERPC_REL14_BRTAKEN:\n     case elfcpp::R_POWERPC_REL14_BRNTAKEN:\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL28:\n       overflow = Reloc::CHECK_SIGNED;\n       break;\n     }\n@@ -10436,6 +10797,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_POWERPC_PLTCALL:\n     case elfcpp::R_PPC64_PLTSEQ_NOTOC:\n     case elfcpp::R_PPC64_PLTCALL_NOTOC:\n+    case elfcpp::R_PPC64_PCREL_OPT:\n       break;\n \n     case elfcpp::R_PPC64_ADDR64:\n@@ -10686,6 +11048,64 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       // R_PPC64_TLSGD, R_PPC64_TLSLD\n       break;\n \n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+      if (size == 32)\n+\tgoto unsupp;\n+      status = Reloc::addr34(view, value, overflow);\n+      break;\n+\n+    case elfcpp::R_PPC64_D34_HI30:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr34_hi(view, value);\n+      break;\n+\n+    case elfcpp::R_PPC64_D34_HA30:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr34_ha(view, value);\n+      break;\n+\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL28:\n+      if (size == 32)\n+\tgoto unsupp;\n+      status = Reloc::addr28(view, value, overflow);\n+      break;\n+\n+    case elfcpp::R_PPC64_ADDR16_HIGHER34:\n+    case elfcpp::R_PPC64_REL16_HIGHER34:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr16_higher34(view, value);\n+      break;\n+\n+    case elfcpp::R_PPC64_ADDR16_HIGHERA34:\n+    case elfcpp::R_PPC64_REL16_HIGHERA34:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr16_highera34(view, value);\n+      break;\n+\n+    case elfcpp::R_PPC64_ADDR16_HIGHEST34:\n+    case elfcpp::R_PPC64_REL16_HIGHEST34:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr16_highest34(view, value);\n+      break;\n+\n+    case elfcpp::R_PPC64_ADDR16_HIGHESTA34:\n+    case elfcpp::R_PPC64_REL16_HIGHESTA34:\n+      if (size == 32)\n+\tgoto unsupp;\n+      Reloc::addr16_highesta34(view, value);\n+      break;\n+\n     case elfcpp::R_POWERPC_PLT32:\n     case elfcpp::R_POWERPC_PLTREL32:\n     case elfcpp::R_PPC_SDAREL16:"
    }
  ]
}