{
  "sha": "203a9824347042e0f7580994cbe7a1eb8dc1e893",
  "node_id": "C_kwDOANOeidoAKDIwM2E5ODI0MzQ3MDQyZTBmNzU4MDk5NGNiZTdhMWViOGRjMWU4OTM",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-27T08:16:57Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-27T08:16:57Z"
    },
    "message": "[gdb/testsuite] Test sw watchpoint in gdb.threads/process-dies-while-detaching.exp\n\nThe test-case gdb.threads/process-dies-while-detaching.exp takes about 20s\nwhen using hw watchpoints, but when forcing sw watchpoints (using the patch\nmentioned in PR28375#c0), the test-case takes instead 3m14s.\n\nAlso, it show a FAIL:\n...\n(gdb) continue^M\nContinuing.^M\nCannot find user-level thread for LWP 10324: generic error^M\n(gdb) FAIL: gdb.threads/process-dies-while-detaching.exp: single-process:\ncontinue: watchpoint: continue\n...\nfor which PR28375 was filed.\n\nModify the test-case to:\n- add the hw/sw axis to the watchpoint testing, to ensure that we\n  observe the sw watchpoint behaviour also on can-use-hw-watchpoints\n  architectures.\n- skip the hw breakpoint testing if not supported\n- set the sw watchpoint later to avoid making the test\n  too slow.  This still triggers the same PR, but now takes just 24s.\n\nThis patch adds a KFAIL for PR28375.\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "9fed62c560c22c95865c6befcb7be2d8380c28cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9fed62c560c22c95865c6befcb7be2d8380c28cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/203a9824347042e0f7580994cbe7a1eb8dc1e893",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/203a9824347042e0f7580994cbe7a1eb8dc1e893",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/203a9824347042e0f7580994cbe7a1eb8dc1e893",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/203a9824347042e0f7580994cbe7a1eb8dc1e893/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c11f01dbbdfb8e9f437b13e31ba89c50a6fb8db6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c11f01dbbdfb8e9f437b13e31ba89c50a6fb8db6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c11f01dbbdfb8e9f437b13e31ba89c50a6fb8db6"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 30,
    "deletions": 11
  },
  "files": [
    {
      "sha": "ab5a82bef71edf4e0c5c98b4b773d31a9c7b7c7e",
      "filename": "gdb/testsuite/gdb.threads/process-dies-while-detaching.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 11,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/203a9824347042e0f7580994cbe7a1eb8dc1e893/gdb/testsuite/gdb.threads/process-dies-while-detaching.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/203a9824347042e0f7580994cbe7a1eb8dc1e893/gdb/testsuite/gdb.threads/process-dies-while-detaching.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/process-dies-while-detaching.exp?ref=203a9824347042e0f7580994cbe7a1eb8dc1e893",
      "patch": "@@ -235,8 +235,12 @@ proc test_detach {multi_process cmd} {\n \n # Same as test_detach, except set a watchpoint before detaching.\n \n-proc test_detach_watch {multi_process cmd} {\n-    with_test_prefix \"watchpoint\" {\n+proc test_detach_watch {wp multi_process cmd} {\n+    if { $wp == \"hw\" && [skip_hw_watchpoint_tests] } {\n+\tunsupported \"hw watchpoint\"\n+\treturn\n+    }\n+    with_test_prefix \"watchpoint:$wp\" {\n \tglobal binfile decimal\n \n \tclean_restart ${binfile}\n@@ -254,15 +258,28 @@ proc test_detach_watch {multi_process cmd} {\n \t    gdb_continue_to_breakpoint \"child_function\" \".*\"\n \t}\n \n-\t# Set a watchpoint in the child.\n-\tgdb_test \"watch globalvar\" \".* watchpoint $decimal: globalvar\"\n+\tif { $wp == \"hw\" } {\n+\t    # Set a watchpoint in the child.\n+\t    gdb_test \"watch globalvar\" \".* watchpoint $decimal: globalvar\"\n \n-\t# Continue to the _exit breakpoint.  This arms the watchpoint\n-\t# registers in all threads.  Detaching will thus need to clear\n-\t# them out, and handle the case of the thread disappearing\n-\t# while doing that (on targets that need to detach from each\n-\t# thread individually).\n-\tcontinue_to_exit_bp\n+\t    # Continue to the _exit breakpoint.  This arms the watchpoint\n+\t    # registers in all threads.  Detaching will thus need to clear\n+\t    # them out, and handle the case of the thread disappearing\n+\t    # while doing that (on targets that need to detach from each\n+\t    # thread individually).\n+\t    continue_to_exit_bp\n+\t} else {\n+\t    # Force software watchpoints.\n+\t    gdb_test_no_output \"set can-use-hw-watchpoints 0\"\n+\n+\t    # As above, but flip order, other wise things take too long.\n+\t    continue_to_exit_bp\n+\t    gdb_test \"watch globalvar\" \"Watchpoint $decimal: globalvar\"\n+\n+\t    if { $multi_process == 0 && $cmd == \"continue\" } {\n+\t\tsetup_kfail \"gdb/28375\" \"*-*-*\"\n+\t    }\n+\t}\n \n \tdo_detach $multi_process $cmd \"normal\"\n     }\n@@ -332,7 +349,9 @@ proc do_test {multi_process cmd} {\n     }\n \n     test_detach $multi_process $cmd\n-    test_detach_watch $multi_process $cmd\n+    foreach wp {\"sw\" \"hw\"} {\n+\ttest_detach_watch $wp $multi_process $cmd\n+    }\n     test_detach_killed_outside $multi_process $cmd\n }\n "
    }
  ]
}