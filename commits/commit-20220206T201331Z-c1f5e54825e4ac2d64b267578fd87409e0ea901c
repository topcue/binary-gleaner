{
  "sha": "c1f5e54825e4ac2d64b267578fd87409e0ea901c",
  "node_id": "C_kwDOANOeidoAKGMxZjVlNTQ4MjVlNGFjMmQ2NGIyNjc1NzhmZDg3NDA5ZTBlYTkwMWM",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-25T01:02:38Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-02-06T20:13:31Z"
    },
    "message": "Fix Rust parser bug with function fields\n\nIn Rust, 'obj.f()' is a method call -- but '(obj.f)()' is a call of a\nfunction-valued field 'f' in 'obj'.  The Rust parser in gdb currently\ngets this wrong.  This is PR rust/24082.\n\nThe expression and Rust parser rewrites made this simple to fix --\nsimply wrapping a parenthesized expression in a new operation handles\nit.  This patch has a slight hack because I didn't want to introduce a\nnew exp_opcode enumeration constant just for this.  IMO this doesn't\nmatter, since we should work toward removing dependencies on these\nopcodes anyway; but let me know what you think of this.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=24082",
    "tree": {
      "sha": "01213bc6d20465dfc76a90363288a6fc8e86f278",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/01213bc6d20465dfc76a90363288a6fc8e86f278"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c1f5e54825e4ac2d64b267578fd87409e0ea901c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1f5e54825e4ac2d64b267578fd87409e0ea901c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c1f5e54825e4ac2d64b267578fd87409e0ea901c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1f5e54825e4ac2d64b267578fd87409e0ea901c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a92613915ec2f38e1ab62ab254dde2a1ad4ad408",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a92613915ec2f38e1ab62ab254dde2a1ad4ad408",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a92613915ec2f38e1ab62ab254dde2a1ad4ad408"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 105,
    "deletions": 1
  },
  "files": [
    {
      "sha": "778d87f4078e99bebc8487586342677ad1abc63d",
      "filename": "gdb/rust-exp.h",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/rust-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/rust-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.h?ref=c1f5e54825e4ac2d64b267578fd87409e0ea901c",
      "patch": "@@ -197,6 +197,33 @@ class rust_aggregate_operation\n   { return OP_AGGREGATE; }\n };\n \n+/* Rust parenthesized operation.  This is needed to distinguish\n+   between 'obj.f()', which is a method call, and '(obj.f)()', which\n+   is a call of a function-valued field 'f'.  */\n+class rust_parenthesized_operation\n+  : public tuple_holding_operation<operation_up>\n+{\n+public:\n+\n+  explicit rust_parenthesized_operation (operation_up op)\n+    : tuple_holding_operation (std::move (op))\n+  {\n+  }\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return std::get<0> (m_storage)->evaluate (expect_type, exp, noside);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  {\n+    /* A lie but this isn't worth introducing a new opcode for.  */\n+    return UNOP_PLUS;\n+  }\n+};\n+\n } /* namespace expr */\n \n #endif /* RUST_EXP_H */"
    },
    {
      "sha": "894f2e79d497dddd8e36897a4e9d1bbeba19bace",
      "filename": "gdb/rust-parse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/rust-parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/rust-parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-parse.c?ref=c1f5e54825e4ac2d64b267578fd87409e0ea901c",
      "patch": "@@ -1105,7 +1105,7 @@ rust_parser::parse_tuple ()\n     {\n       /* Parenthesized expression.  */\n       lex ();\n-      return expr;\n+      return make_operation<rust_parenthesized_operation> (std::move (expr));\n     }\n \n   std::vector<operation_up> ops;"
    },
    {
      "sha": "457557106265439da935d61fbeab79655a34e634",
      "filename": "gdb/testsuite/gdb.rust/fnfield.exp",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/testsuite/gdb.rust/fnfield.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/testsuite/gdb.rust/fnfield.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/fnfield.exp?ref=c1f5e54825e4ac2d64b267578fd87409e0ea901c",
      "patch": "@@ -0,0 +1,38 @@\n+# Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test trait object printing.\n+\n+load_lib rust-support.exp\n+if {[skip_rust_tests]} {\n+    continue\n+}\n+\n+standard_testfile .rs\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug rust}]} {\n+    return -1\n+}\n+\n+set line [gdb_get_line_number \"set breakpoint here\"]\n+if {![runto ${srcfile}:$line]} {\n+    untested \"could not run to breakpoint\"\n+    return -1\n+}\n+\n+gdb_test \"print foo.f()\" \" = 6\" \"call impl function\"\n+gdb_test \"print (foo.f)()\" \" = 5\" \"call function field\"\n+gdb_test \"print foo.g()\" \" = 7\" \"call impl function g\"\n+gdb_test \"print (foo.g)()\" \"There is no member named g.\" \\\n+    \"cannot call g with parens\""
    },
    {
      "sha": "b80136c057f0531f96b4eed9832f6d3aa5d7eeb0",
      "filename": "gdb/testsuite/gdb.rust/fnfield.rs",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/testsuite/gdb.rust/fnfield.rs",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1f5e54825e4ac2d64b267578fd87409e0ea901c/gdb/testsuite/gdb.rust/fnfield.rs",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/fnfield.rs?ref=c1f5e54825e4ac2d64b267578fd87409e0ea901c",
      "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+// This program is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+#![allow(warnings)]\n+\n+fn five() -> i32 { 5 }\n+\n+fn main() {\n+    let foo = Foo {x: 5, f: five};\n+    foo.print();  // set breakpoint here\n+    println!(\"Hello, world! {}, {}, {}\", foo.f(), (foo.f)(),\n+             foo.g ());\n+}\n+\n+struct Foo {\n+    x :i32,\n+    f: fn () -> i32,\n+}\n+\n+impl Foo {\n+    fn print(&self) {\n+        println!(\"hello {}\", self.x)\n+    }\n+\n+    fn f(&self) -> i32 { 6 }\n+    fn g(&self) -> i32 { 7 }\n+}"
    }
  ]
}