{
  "sha": "78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzhlOGNiOTFjZDEzNzRhYzU5Y2M4YmY2NTA5ZmE3MGJkZTc0ZmYxYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-23T22:01:03Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-09-20T19:49:12Z"
    },
    "message": "Change TUI window commands to be case-sensitive\n\nThe TUI window-related commands like \"focus\" are case insensitive.\nThis is not the norm in gdb, and I don't see a good reason to have it\nhere.  This patch changes the TUI to be case sensitive, like the rest\nof gdb.\n\ngdb/ChangeLog\n2019-09-20  Tom Tromey  <tom@tromey.com>\n\n\t* NEWS: Mention case-sensitivity of TUI commands.\n\t* tui/tui-win.c (tui_set_focus_command): Now case-sensitive.\n\t(tui_set_win_height_command, parse_scrolling_args): Likewise.\n\t* tui/tui-layout.c (tui_layout_command): Now case-sensitive.",
    "tree": {
      "sha": "13c3d147aa6006c7084b131da3b6ffb1c66c9949",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/13c3d147aa6006c7084b131da3b6ffb1c66c9949"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f074b67ec812612637342a1647da9158a1e77de0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f074b67ec812612637342a1647da9158a1e77de0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f074b67ec812612637342a1647da9158a1e77de0"
    }
  ],
  "stats": {
    "total": 172,
    "additions": 77,
    "deletions": 95
  },
  "files": [
    {
      "sha": "adaa12382277703e3bc8d4034549a9cda324d901",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
      "patch": "@@ -1,3 +1,10 @@\n+2019-09-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* NEWS: Mention case-sensitivity of TUI commands.\n+\t* tui/tui-win.c (tui_set_focus_command): Now case-sensitive.\n+\t(tui_set_win_height_command, parse_scrolling_args): Likewise.\n+\t* tui/tui-layout.c (tui_layout_command): Now case-sensitive.\n+\n 2019-09-20  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-source.c (tui_source_window::set_contents): Use"
    },
    {
      "sha": "201701bac310cc7dfeebf41625dd3a11d5988302",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
      "patch": "@@ -186,6 +186,9 @@ maint show test-options-completion-result\n   Commands used by the testsuite to validate the command options\n   framework.\n \n+focus, winheight, +, -, >, <\n+  These commands are now case-sensitive.\n+\n * New command options, command completion\n \n   GDB now has a standard infrastructure to support dash-style command"
    },
    {
      "sha": "7aa670ec69d73b210f6139d57eaf8725f592bbe5",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 8,
      "deletions": 14,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
      "patch": "@@ -337,39 +337,33 @@ Layout names are:\\n\\\n static void\n tui_layout_command (const char *layout_name, int from_tty)\n {\n-  int i;\n   enum tui_layout_type new_layout = UNDEFINED_LAYOUT;\n   enum tui_layout_type cur_layout = tui_current_layout ();\n \n-  if (layout_name == NULL)\n+  if (layout_name == NULL || *layout_name == '\\0')\n     error (_(\"Usage: layout prev | next | LAYOUT-NAME\"));\n \n-  std::string copy = layout_name;\n-  for (i = 0; i < copy.size (); i++)\n-    copy[i] = toupper (copy[i]);\n-  const char *buf_ptr = copy.c_str ();\n-\n   /* First check for ambiguous input.  */\n-  if (strlen (buf_ptr) <= 1 && *buf_ptr == 'S')\n+  if (strcmp (layout_name, \"s\") == 0)\n     error (_(\"Ambiguous command input.\"));\n \n-  if (subset_compare (buf_ptr, \"SRC\"))\n+  if (subset_compare (layout_name, \"src\"))\n     new_layout = SRC_COMMAND;\n-  else if (subset_compare (buf_ptr, \"ASM\"))\n+  else if (subset_compare (layout_name, \"asm\"))\n     new_layout = DISASSEM_COMMAND;\n-  else if (subset_compare (buf_ptr, \"SPLIT\"))\n+  else if (subset_compare (layout_name, \"split\"))\n     new_layout = SRC_DISASSEM_COMMAND;\n-  else if (subset_compare (buf_ptr, \"REGS\"))\n+  else if (subset_compare (layout_name, \"regs\"))\n     {\n       if (cur_layout == SRC_COMMAND\n \t  || cur_layout == SRC_DATA_COMMAND)\n \tnew_layout = SRC_DATA_COMMAND;\n       else\n \tnew_layout = DISASSEM_DATA_COMMAND;\n     }\n-  else if (subset_compare (buf_ptr, \"NEXT\"))\n+  else if (subset_compare (layout_name, \"next\"))\n     new_layout = next_layout ();\n-  else if (subset_compare (buf_ptr, \"PREV\"))\n+  else if (subset_compare (layout_name, \"prev\"))\n     new_layout = prev_layout ();\n   else\n     error (_(\"Unrecognized layout: %s\"), layout_name);"
    },
    {
      "sha": "37e22c550f9b4a1be91dc2bbf19e1d90491ff9b5",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 59,
      "deletions": 81,
      "changes": 140,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=78e8cb91cd1374ac59cc8bf6509fa70bde74ff1a",
      "patch": "@@ -776,35 +776,27 @@ tui_set_focus_command (const char *arg, int from_tty)\n \n   if (arg != NULL)\n     {\n-      char *buf_ptr = xstrdup (arg);\n-      int i;\n       struct tui_win_info *win_info = NULL;\n \n-      for (i = 0; (i < strlen (buf_ptr)); i++)\n-\tbuf_ptr[i] = tolower (arg[i]);\n-\n-      if (subset_compare (buf_ptr, \"next\"))\n+      if (subset_compare (arg, \"next\"))\n \twin_info = tui_next_win (tui_win_with_focus ());\n-      else if (subset_compare (buf_ptr, \"prev\"))\n+      else if (subset_compare (arg, \"prev\"))\n \twin_info = tui_prev_win (tui_win_with_focus ());\n       else\n-\twin_info = tui_partial_win_by_name (buf_ptr);\n+\twin_info = tui_partial_win_by_name (arg);\n \n-      if (win_info == NULL || !win_info->is_visible ())\n-\twarning (_(\"Invalid window specified. \\n\\\n-The window name specified must be valid and visible.\\n\"));\n-      else\n-\t{\n-\t  tui_set_win_focus_to (win_info);\n-\t  keypad (TUI_CMD_WIN->handle, (win_info != TUI_CMD_WIN));\n-\t}\n+      if (win_info == NULL)\n+\terror (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n+      if (!win_info->is_visible ())\n+\terror (_(\"Window \\\"%s\\\" is not visible\"), arg);\n \n-      xfree (buf_ptr);\n+      tui_set_win_focus_to (win_info);\n+      keypad (TUI_CMD_WIN->handle, (win_info != TUI_CMD_WIN));\n       printf_filtered (_(\"Focus set to %s window.\\n\"),\n \t\t       tui_win_with_focus ()->name ());\n     }\n   else\n-    warning (_(\"Incorrect Number of Arguments.\\n%s\"), FOCUS_USAGE);\n+    error (_(\"Incorrect Number of Arguments.\\n%s\"), FOCUS_USAGE);\n }\n \n static void\n@@ -927,65 +919,61 @@ tui_set_win_height_command (const char *arg, int from_tty)\n       char *buf = &copy[0];\n       char *buf_ptr = buf;\n       char *wname = NULL;\n-      int new_height, i;\n+      int new_height;\n       struct tui_win_info *win_info;\n \n       wname = buf_ptr;\n       buf_ptr = strchr (buf_ptr, ' ');\n       if (buf_ptr != NULL)\n \t{\n-\t  *buf_ptr = (char) 0;\n+\t  *buf_ptr = '\\0';\n \n \t  /* Validate the window name.  */\n-\t  for (i = 0; i < strlen (wname); i++)\n-\t    wname[i] = tolower (wname[i]);\n \t  win_info = tui_partial_win_by_name (wname);\n \n-\t  if (win_info == NULL || !win_info->is_visible ())\n-\t    warning (_(\"Invalid window specified. \\n\\\n-The window name specified must be valid and visible.\\n\"));\n-\t  else\n+\t  if (win_info == NULL)\n+\t    error (_(\"Unrecognized window name \\\"%s\\\"\"), arg);\n+\t  if (!win_info->is_visible ())\n+\t    error (_(\"Window \\\"%s\\\" is not visible\"), arg);\n+\n+\t  /* Process the size.  */\n+\t  buf_ptr = skip_spaces (buf_ptr);\n+\n+\t  if (*buf_ptr != '\\0')\n \t    {\n-\t      /* Process the size.  */\n-\t      while (*(++buf_ptr) == ' ')\n-\t\t;\n+\t      bool negate = false;\n+\t      bool fixed_size = true;\n+\t      int input_no;;\n \n-\t      if (*buf_ptr != (char) 0)\n+\t      if (*buf_ptr == '+' || *buf_ptr == '-')\n \t\t{\n-\t\t  int negate = FALSE;\n-\t\t  int fixed_size = TRUE;\n-\t\t  int input_no;;\n-\n-\t\t  if (*buf_ptr == '+' || *buf_ptr == '-')\n-\t\t    {\n-\t\t      if (*buf_ptr == '-')\n-\t\t\tnegate = TRUE;\n-\t\t      fixed_size = FALSE;\n-\t\t      buf_ptr++;\n-\t\t    }\n-\t\t  input_no = atoi (buf_ptr);\n-\t\t  if (input_no > 0)\n-\t\t    {\n-\t\t      if (negate)\n-\t\t\tinput_no *= (-1);\n-\t\t      if (fixed_size)\n-\t\t\tnew_height = input_no;\n-\t\t      else\n-\t\t\tnew_height = win_info->height + input_no;\n-\n-\t\t      /* Now change the window's height, and adjust\n-\t\t         all other windows around it.  */\n-\t\t      if (tui_adjust_win_heights (win_info,\n-\t\t\t\t\t\tnew_height) == TUI_FAILURE)\n-\t\t\twarning (_(\"Invalid window height specified.\\n%s\"),\n-\t\t\t\t WIN_HEIGHT_USAGE);\n-\t\t      else\n-                        tui_update_gdb_sizes ();\n-\t\t    }\n+\t\t  if (*buf_ptr == '-')\n+\t\t    negate = true;\n+\t\t  fixed_size = false;\n+\t\t  buf_ptr++;\n+\t\t}\n+\t      input_no = atoi (buf_ptr);\n+\t      if (input_no > 0)\n+\t\t{\n+\t\t  if (negate)\n+\t\t    input_no *= (-1);\n+\t\t  if (fixed_size)\n+\t\t    new_height = input_no;\n \t\t  else\n+\t\t    new_height = win_info->height + input_no;\n+\n+\t\t  /* Now change the window's height, and adjust\n+\t\t     all other windows around it.  */\n+\t\t  if (tui_adjust_win_heights (win_info,\n+\t\t\t\t\t      new_height) == TUI_FAILURE)\n \t\t    warning (_(\"Invalid window height specified.\\n%s\"),\n \t\t\t     WIN_HEIGHT_USAGE);\n+\t\t  else\n+\t\t    tui_update_gdb_sizes ();\n \t\t}\n+\t      else\n+\t\twarning (_(\"Invalid window height specified.\\n%s\"),\n+\t\t\t WIN_HEIGHT_USAGE);\n \t    }\n \t}\n       else\n@@ -1299,7 +1287,7 @@ parse_scrolling_args (const char *arg,\n \t  buf_ptr = strchr (buf_ptr, ' ');\n \t  if (buf_ptr != NULL)\n \t    {\n-\t      *buf_ptr = (char) 0;\n+\t      *buf_ptr = '\\0';\n \t      if (num_to_scroll)\n \t\t*num_to_scroll = atoi (num_str);\n \t      buf_ptr++;\n@@ -1313,29 +1301,19 @@ parse_scrolling_args (const char *arg,\n \t{\n \t  const char *wname;\n \n-\t  if (*buf_ptr == ' ')\n-\t    while (*(++buf_ptr) == ' ')\n-\t      ;\n+\t  wname = skip_spaces (buf_ptr);\n \n-\t  if (*buf_ptr != (char) 0)\n+\t  if (*wname != '\\0')\n \t    {\n-\t      /* Validate the window name.  */\n-\t      for (char *p = buf_ptr; *p != '\\0'; p++)\n-\t\t*p = tolower (*p);\n-\n-\t      wname = buf_ptr;\n+\t      *win_to_scroll = tui_partial_win_by_name (wname);\n+\n+\t      if (*win_to_scroll == NULL)\n+\t\terror (_(\"Unrecognized window `%s'\"), wname);\n+\t      if (!(*win_to_scroll)->is_visible ())\n+\t\terror (_(\"Window is not visible\"));\n+\t      else if (*win_to_scroll == TUI_CMD_WIN)\n+\t\t*win_to_scroll = *(tui_source_windows ().begin ());\n \t    }\n-\t  else\n-\t    wname = \"?\";\n-\t  \n-\t  *win_to_scroll = tui_partial_win_by_name (wname);\n-\n-\t  if (*win_to_scroll == NULL)\n-\t    error (_(\"Unrecognized window `%s'\"), wname);\n-\t  if (!(*win_to_scroll)->is_visible ())\n-\t    error (_(\"Window is not visible\"));\n-\t  else if (*win_to_scroll == TUI_CMD_WIN)\n-\t    *win_to_scroll = *(tui_source_windows ().begin ());\n \t}\n     }\n }"
    }
  ]
}