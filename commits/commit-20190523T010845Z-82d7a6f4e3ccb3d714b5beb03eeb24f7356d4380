{
  "sha": "82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODJkN2E2ZjRlM2NjYjNkNzE0YjViZWIwM2VlYjI0ZjczNTZkNDM4MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-23T00:52:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-23T01:08:45Z"
    },
    "message": "Re: Have the linker report an error if the same script is used twice\n\ngit commit 6ec6968b1b2 results in\n... error: linker script file '/usr/local/lib64/libgcc_s.so' appears multiple times\ncollect2: error: ld returned 1 exit status\nFAIL: bootstrap\n\nThis patch changes things so that an error is given only when a -T\nscript or the default script is invoked more than once.  I'm still a\nlittle nervous that we match script file names, not the entire path.\n\n\tPR 24576\n\t* ldfile.c (enum script_open_style): New.\n\t(struct script_name_list): New.\n\t(ldfile_open_command_file_1): Take a script_open_style param\n\trather than booleans.  Adjust callers.  Only fail when -T or\n\tdefault -T script is invoked twice.\n\t(ldfile_try_open_bfd): Revert last change.",
    "tree": {
      "sha": "001d46dd795e917b33750563ea5e95bc3eb5e1e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/001d46dd795e917b33750563ea5e95bc3eb5e1e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "016181423bff8c04b2808f2dca9a95f0c9d92fe5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/016181423bff8c04b2808f2dca9a95f0c9d92fe5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/016181423bff8c04b2808f2dca9a95f0c9d92fe5"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 52,
    "deletions": 30
  },
  "files": [
    {
      "sha": "d46fd958180d7cf02e65bea7499935deb36c7377",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-23  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24576\n+\t* ldfile.c (enum script_open_style): New.\n+\t(struct script_name_list): New.\n+\t(ldfile_open_command_file_1): Take a script_open_style param\n+\trather than booleans.  Adjust callers.  Only fail when -T or\n+\tdefault -T script is invoked twice.\n+\t(ldfile_try_open_bfd): Revert last change.\n+\n 2019-05-22  Julius Werner  <jwerner@chromium.org>\n \t    Nick Clifton  <nickc@redhat.com>\n "
    },
    {
      "sha": "7f60319390ed1c26f385437f5a516addec748f59",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 42,
      "deletions": 30,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=82d7a6f4e3ccb3d714b5beb03eeb24f7356d4380",
      "patch": "@@ -186,7 +186,7 @@ ldfile_try_open_bfd (const char *attempt,\n \t\t  extern FILE *yyin;\n \n \t\t  /* Try to interpret the file as a linker script.  */\n-\t\t  ldfile_open_script_file (attempt);\n+\t\t  ldfile_open_command_file (attempt);\n \n \t\t  ldfile_assumed_script = TRUE;\n \t\t  parser_input = input_selected;\n@@ -585,44 +585,56 @@ ldfile_find_command_file (const char *name,\n   return result;\n }\n \n+enum script_open_style {\n+  script_nonT,\n+  script_T,\n+  script_defaultT\n+};\n+\n+struct script_name_list\n+{\n+  struct script_name_list *next;\n+  enum script_open_style open_how;\n+  char name[1];\n+};\n+\n /* Open command file NAME.  */\n \n static void\n-ldfile_open_command_file_1 (const char *name,\n-\t\t\t    bfd_boolean default_only,\n-\t\t\t    bfd_boolean is_script)\n+ldfile_open_command_file_1 (const char *name, enum script_open_style open_how)\n {\n   FILE *ldlex_input_stack;\n   bfd_boolean sysrooted;\n+  static struct script_name_list *processed_scripts = NULL;\n+  struct script_name_list *script;\n+  size_t len;\n \n-  if (is_script)\n+  /* PR 24576: Catch the case where the user has accidentally included\n+     the same linker script twice.  */\n+  for (script = processed_scripts; script != NULL; script = script->next)\n     {\n-      static struct name_list *processed_scripts = NULL;\n-      struct name_list *script;\n-\n-      /* PR 24576: Catch the case where the user has accidentally included\n-\t the same linker script twice.  */\n-      for (script = processed_scripts; script != NULL; script = script->next)\n+      if ((open_how != script_nonT || script->open_how != script_nonT)\n+\t  && strcmp (name, script->name) == 0)\n \t{\n-\t  if (strcmp (name, script->name) == 0)\n-\t    {\n-\t      einfo (_(\"%F%P: error: linker script file '%s' appears multiple times\\n\"),\n-\t\t     name);\n-\t      return;\n-\t    }\n+\t  einfo (_(\"%F%P: error: linker script file '%s'\"\n+\t\t   \" appears multiple times\\n\"), name);\n+\t  return;\n \t}\n-\n-      /* FIXME: This memory is never freed, but that should not really matter.\n-\t It will be released when the linker exits, and it is unlikely to ever\n-\t be more than a few tens of bytes.  */\n-      script = xmalloc (sizeof (name_list));\n-      script->name = strdup (name);\n-      script->next = processed_scripts;\n-      processed_scripts = script;\n     }\n \n-  ldlex_input_stack = ldfile_find_command_file (name, default_only, &sysrooted);\n-\n+  /* FIXME: This memory is never freed, but that should not really matter.\n+     It will be released when the linker exits, and it is unlikely to ever\n+     be more than a few tens of bytes.  */\n+  len = strlen (name);\n+  script = xmalloc (sizeof (*script) + len);\n+  script->next = processed_scripts;\n+  script->open_how = open_how;\n+  memcpy (script->name, name, len + 1);\n+  processed_scripts = script;\n+\n+  ldlex_input_stack = ldfile_find_command_file (name,\n+\t\t\t\t\t\topen_how == script_defaultT,\n+\t\t\t\t\t\t&sysrooted);\n   if (ldlex_input_stack == NULL)\n     {\n       bfd_set_error (bfd_error_system_call);\n@@ -643,21 +655,21 @@ ldfile_open_command_file_1 (const char *name,\n void\n ldfile_open_command_file (const char *name)\n {\n-  ldfile_open_command_file_1 (name, FALSE, FALSE);\n+  ldfile_open_command_file_1 (name, script_nonT);\n }\n \n void\n ldfile_open_script_file (const char *name)\n {\n-  ldfile_open_command_file_1 (name, FALSE, TRUE);\n+  ldfile_open_command_file_1 (name, script_T);\n }\n \n /* Open command file NAME at the default script location.  */\n \n void\n ldfile_open_default_command_file (const char *name)\n {\n-  ldfile_open_command_file_1 (name, TRUE, TRUE);\n+  ldfile_open_command_file_1 (name, script_defaultT);\n }\n \n void"
    }
  ]
}