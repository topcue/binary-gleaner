{
  "sha": "b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRmMGUwOWNkMThlMGRiZWVlY2QzMDNlZDU0ZjZmMTEzMTQ2ZTg1Nw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-13T19:49:19Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:55Z"
    },
    "message": "libctf: dump: support non-root type dumping\n\nUse the recently-added ctf_type_iter_all function to iterate over\nnon-root types, too, indicating them via {....} surrounding the type\ndescription in the dump.\n\nlibctf/\n\t* ctf-dump.c (ctf_dump): Use ctf_type_iter_all to dump types, not\n\tctf_type_iter.\n\t(ctf_dump_type): Pass down the flag from ctf_type_iter_all.\n\t(ctf_dump_format_type): Add non-root-type { } notation.\n\tAdd root flag to prototype.\n\t(ctf_dump_label): Adjust accordingly.\n\t(ctf_dump_objts): Likewise.\n\t(ctf_dump_var): Likewise.",
    "tree": {
      "sha": "408a9ceca5879acb3933dc4d0acd5aab076f72bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/408a9ceca5879acb3933dc4d0acd5aab076f72bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4f0e09cd18e0dbeeecd303ed54f6f113146e857/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3dde2c915e2c68fdda36febac618595561ed87f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dde2c915e2c68fdda36febac618595561ed87f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3dde2c915e2c68fdda36febac618595561ed87f8"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 36,
    "deletions": 12
  },
  "files": [
    {
      "sha": "09353da012e4a8da7a83dd62618299d9555f8e0c",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4f0e09cd18e0dbeeecd303ed54f6f113146e857/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4f0e09cd18e0dbeeecd303ed54f6f113146e857/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
      "patch": "@@ -1,3 +1,14 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-dump.c (ctf_dump): Use ctf_type_iter_all to dump types, not\n+\tctf_type_iter.\n+\t(ctf_dump_type): Pass down the flag from ctf_type_iter_all.\n+\t(ctf_dump_format_type): Add non-root-type { } notation.\n+\tAdd root flag to prototype.\n+\t(ctf_dump_label): Adjust accordingly.\n+\t(ctf_dump_objts): Likewise.\n+\t(ctf_dump_var): Likewise.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-create.c (ctf_compress_write): Fix double-free."
    },
    {
      "sha": "0c0c2246b51970786177eaf6a9c7f68595594487",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 25,
      "deletions": 12,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4f0e09cd18e0dbeeecd303ed54f6f113146e857/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4f0e09cd18e0dbeeecd303ed54f6f113146e857/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=b4f0e09cd18e0dbeeecd303ed54f6f113146e857",
      "patch": "@@ -95,7 +95,7 @@ ctf_is_slice (ctf_file_t *fp, ctf_id_t id, ctf_encoding_t *enc)\n    type's references.  */\n \n static char *\n-ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id)\n+ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id, int flag)\n {\n   ctf_id_t new_id;\n   char *str = NULL, *bit = NULL, *buf = NULL;\n@@ -104,8 +104,16 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id)\n   do\n     {\n       ctf_encoding_t enc;\n+      const char *nonroot_leader = \"\";\n+      const char *nonroot_trailer = \"\";\n \n       id = new_id;\n+      if (flag == CTF_ADD_NONROOT)\n+\t{\n+\t  nonroot_leader = \"{\";\n+\t  nonroot_trailer = \"}\";\n+\t}\n+\n       buf = ctf_type_aname (fp, id);\n       if (!buf)\n \tgoto oom;\n@@ -115,15 +123,17 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id)\n       if (ctf_is_slice (fp, id, &enc))\n \t{\n \t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \" %lx: [slice 0x%x:0x%x]\",\n-\t\t\tid, enc.cte_offset, enc.cte_bits) < 0)\n+\t  if (asprintf (&bit, \" %s%lx: [slice 0x%x:0x%x]%s\",\n+\t\t\tnonroot_leader, id, enc.cte_offset, enc.cte_bits,\n+\t\t\tnonroot_trailer) < 0)\n \t    goto oom;\n \t}\n       else\n \t{\n-\t  if (asprintf (&bit, \" %lx: %s (size 0x%lx)\", id, buf[0] == '\\0' ?\n-\t\t\t\"(nameless)\" : buf,\n-\t\t\t(unsigned long) ctf_type_size (fp, id)) < 0)\n+\t  if (asprintf (&bit, \" %s%lx: %s (size 0x%lx)%s\", nonroot_leader,\n+\t\t\tid, buf[0] == '\\0' ? \"(nameless)\" : buf,\n+\t\t\t(unsigned long) ctf_type_size (fp, id),\n+\t\t\tnonroot_trailer) < 0)\n \t    goto oom;\n \t}\n       free (buf);\n@@ -292,7 +302,8 @@ ctf_dump_label (const char *name, const ctf_lblinfo_t *info,\n   if (asprintf (&str, \"%s -> \", name) < 0)\n     return (ctf_set_errno (state->cds_fp, ENOMEM));\n \n-  if ((typestr = ctf_dump_format_type (state->cds_fp, info->ctb_type)) == NULL)\n+  if ((typestr = ctf_dump_format_type (state->cds_fp, info->ctb_type,\n+\t\t\t\t       CTF_ADD_ROOT)) == NULL)\n     {\n       free (str);\n       return -1;\t\t\t/* errno is set for us.  */\n@@ -348,7 +359,8 @@ ctf_dump_objts (ctf_file_t *fp, ctf_dump_state_t *state)\n \t}\n \n       /* Variable type.  */\n-      if ((typestr = ctf_dump_format_type (state->cds_fp, type)) == NULL)\n+      if ((typestr = ctf_dump_format_type (state->cds_fp, type,\n+\t\t\t\t\t   CTF_ADD_ROOT)) == NULL)\n \t{\n \t  free (str);\n \t  return -1;\t\t\t/* errno is set for us.  */\n@@ -464,7 +476,8 @@ ctf_dump_var (const char *name, ctf_id_t type, void *arg)\n   if (asprintf (&str, \"%s -> \", name) < 0)\n     return (ctf_set_errno (state->cds_fp, ENOMEM));\n \n-  if ((typestr = ctf_dump_format_type (state->cds_fp, type)) == NULL)\n+  if ((typestr = ctf_dump_format_type (state->cds_fp, type,\n+\t\t\t\t       CTF_ADD_ROOT)) == NULL)\n     {\n       free (str);\n       return -1;\t\t\t/* errno is set for us.  */\n@@ -529,14 +542,14 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n /* Dump a single type into the cds_items.  */\n \n static int\n-ctf_dump_type (ctf_id_t id, void *arg)\n+ctf_dump_type (ctf_id_t id, int flag, void *arg)\n {\n   char *str;\n   ctf_dump_state_t *state = arg;\n   ctf_dump_membstate_t membstate = { &str, state->cds_fp };\n   size_t len;\n \n-  if ((str = ctf_dump_format_type (state->cds_fp, id)) == NULL)\n+  if ((str = ctf_dump_format_type (state->cds_fp, id, flag)) == NULL)\n     goto err;\n \n   str = ctf_str_append (str, \"\\n\");\n@@ -641,7 +654,7 @@ ctf_dump (ctf_file_t *fp, ctf_dump_state_t **statep, ctf_sect_names_t sect,\n \t    goto end;\t\t\t/* errno is set for us.  */\n \t  break;\n \tcase CTF_SECT_TYPE:\n-\t  if (ctf_type_iter (fp, ctf_dump_type, state) < 0)\n+\t  if (ctf_type_iter_all (fp, ctf_dump_type, state) < 0)\n \t    goto end;\t\t\t/* errno is set for us.  */\n \t  break;\n \tcase CTF_SECT_STR:"
    }
  ]
}