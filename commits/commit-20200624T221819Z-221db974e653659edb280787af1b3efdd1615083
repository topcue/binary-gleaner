{
  "sha": "221db974e653659edb280787af1b3efdd1615083",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjIxZGI5NzRlNjUzNjU5ZWRiMjgwNzg3YWYxYjNlZmRkMTYxNTA4Mw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-24T22:18:19Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-24T22:18:19Z"
    },
    "message": "W/ Clang, compile/link C++ test programs with \"-x c++\"\n\nSome testcases want to compile .c files with a C++ compiler.  So they\npass the \"c++\" option to gdb_compile.  That works fine with GCC, but\nwith Clang, it results in:\n\n  gdb compile failed, clang-5.0: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]\n\nand the testcase is skipped with UNTESTED.\n\nA previous patch fixed a case like that in\ngdb.compile/compile-cplus.exp, by adding -Wno-deprecated to the build\noptions.  However, there are other testcases that use the same\npattern, and all fail for the same reason.  For example:\n\n gdb.base/info-types-c++.exp\n gdb.base/max-depth-c++.exp\n gdb.base/msym-lang.exp\n gdb.base/whatis-ptype-typedefs.exp\n gdb.btrace/rn-dl-bind.exp\n\nFix this in a central place, within gdb_compile, by passing \"-x c++\"\nto the compiler driver when we're compiling/linking C++.\n\nThis revealed that gdb.compile/compile-cplus.exp and\ngdb.arch/amd64-entry-value-paramref.exp tests are compiling an\nassembly file with the \"c++\" option, which would now fail to compile,\nwith the C++ compiler not grokking the assembly, of course.  We just\nneed to not pass \"c++\" and all the other related C++ options when\ncompiling an assembly file.\n\ngdb/testsuite/ChangeLog:\n2020-06-24  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.arch/amd64-entry-value-paramref.exp: Use\n\tprepare_for_testing_full and don't pass \"c++\" for the .S file\n\tbuild spec.\n\t* gdb.compile/compile-cplus.exp: Don't compile $srcfile3 with\n\t$options, since it's an assembly file.  Remove -Wno-deprecated.\n\t* lib/gdb.exp (gdb_compile): Pass \"-x c++\" explicitly when\n\tcompiling C++ programs.",
    "tree": {
      "sha": "5fbc91e13f99de13bcb5a78e087f65b33eccc998",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5fbc91e13f99de13bcb5a78e087f65b33eccc998"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/221db974e653659edb280787af1b3efdd1615083",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/221db974e653659edb280787af1b3efdd1615083",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/221db974e653659edb280787af1b3efdd1615083",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/221db974e653659edb280787af1b3efdd1615083/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "331733cd4e2f2fe76c0b7b6fdd81e54724572354",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/331733cd4e2f2fe76c0b7b6fdd81e54724572354",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/331733cd4e2f2fe76c0b7b6fdd81e54724572354"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 21,
    "deletions": 12
  },
  "files": [
    {
      "sha": "1b77459bce3aa0208b30b8d4a9d73cc15f3fd28a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=221db974e653659edb280787af1b3efdd1615083",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-24  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.arch/amd64-entry-value-paramref.exp: Use\n+\tprepare_for_testing_full and don't pass \"c++\" for the .S file\n+\tbuild spec.\n+\t* gdb.compile/compile-cplus.exp: Don't compile $srcfile3 with\n+\t$options, since it's an assembly file.  Remove -Wno-deprecated.\n+\t* lib/gdb.exp (gdb_compile): Pass \"-x c++\" explicitly when\n+\tcompiling C++ programs.\n+\n 2020-06-24  Pedro Alves  <palves@redhat.com>\n \n \t* lib/gdb.exp (gdb_compile): Update intro comment.  If C/C++ with"
    },
    {
      "sha": "cbb69f46b816f7f3dc4080e4f9d3745ce92ad7c3",
      "filename": "gdb/testsuite/gdb.arch/amd64-entry-value-paramref.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/gdb.arch/amd64-entry-value-paramref.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/gdb.arch/amd64-entry-value-paramref.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-entry-value-paramref.exp?ref=221db974e653659edb280787af1b3efdd1615083",
      "patch": "@@ -20,7 +20,8 @@ if { ![istarget x86_64-*-* ] || ![is_lp64_target] } {\n     return\n }\n \n-if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} \"c++\"] } {\n+if { [prepare_for_testing_full \"failed to prepare\" \\\n+\t  [list $testfile \"c++\" $srcfile {}]] } {\n     return -1\n }\n "
    },
    {
      "sha": "f794e5a143919050d3d12316ba1f9c82cd5e0c46",
      "filename": "gdb/testsuite/gdb.compile/compile-cplus.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/gdb.compile/compile-cplus.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/gdb.compile/compile-cplus.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.compile/compile-cplus.exp?ref=221db974e653659edb280787af1b3efdd1615083",
      "patch": "@@ -24,11 +24,6 @@ if { [test_compiler_info gcc*] || [test_compiler_info clang*] } {\n     lappend options additional_flags=-std=gnu++11\n     lappend options c++\n }\n-if [test_compiler_info clang*] {\n-    # Treating C input as C++ is deprecated in Clang, so\n-    # the build will fail without disabling -Wdeprecated.\n-    lappend options additional_flags=-Wno-deprecated\n-}\n \n if { ![istarget x86_64-*-* ] || ![is_lp64_target] } {\n     verbose \"Skipping x86_64 LOC_CONST test.\"\n@@ -37,14 +32,9 @@ if { ![istarget x86_64-*-* ] || ![is_lp64_target] } {\n \n set srcfilesoptions [list ${srcfile} ${options}]\n if { $srcfile3 != \"\" } {\n-    lappend srcfilesoptions $srcfile3 ${options}\n+    lappend srcfilesoptions $srcfile3 {}\n }\n set srcfile4options \"nodebug c++\"\n-if [test_compiler_info clang*] {\n-    # Treating C input as C++ is deprecated in Clang, so\n-    # the build will fail without disabling -Wdeprecated.\n-    set srcfile4options \"$srcfile4options additional_flags=-Wno-deprecated\"\n-}\n lappend srcfilesoptions $srcfile4 $srcfile4options\n if { [eval build_executable_from_specs ${testfile}.exp $testfile {$options} ${srcfilesoptions}] } {\n     return -1"
    },
    {
      "sha": "8dbfa7e7a9489c224b9ad1b36140ac4537c45d36",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/221db974e653659edb280787af1b3efdd1615083/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=221db974e653659edb280787af1b3efdd1615083",
      "patch": "@@ -3868,6 +3868,14 @@ proc gdb_compile {source dest type options} {\n \tlappend new_options \"additional_flags=-Wno-unknown-warning-option\"\n     }\n \n+    # Treating .c input files as C++ is deprecated in Clang, so\n+    # explicitly force C++ language.\n+    if { [lsearch -exact $options getting_compiler_info] == -1\n+\t && [lsearch -exact $options c++] != -1\n+\t && [test_compiler_info \"clang-*\"]} {\n+\tlappend new_options additional_flags=-x\\ c++\n+    }\n+\n     # Place (and look for) Fortran `.mod` files in the output\n     # directory for this specific test.\n     if {[lsearch -exact $options f77] != -1 \\"
    }
  ]
}