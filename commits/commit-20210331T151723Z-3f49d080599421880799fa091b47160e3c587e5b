{
  "sha": "3f49d080599421880799fa091b47160e3c587e5b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Y0OWQwODA1OTk0MjE4ODA3OTlmYTA5MWI0NzE2MGUzYzU4N2U1Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-31T15:17:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-31T15:17:23Z"
    },
    "message": "Add some error checking to DWARF assembler\n\nI had written a DWARF location expression like\n\n    DW_OP_const1u\n    DW_OP_stack_value\n\n... and was surprised to see that the DW_OP_stack_value didn't appear\nin the \"readelf\" output.\n\nThe problem here is that DW_OP_const1u requires an operand, but\nneither the DWARF assembler nor gas diagnosed this problem.\n\nThis patch adds some checking to Dwarf::_location to try to avoid this\nin the future.  The checking is done via a helper proc that also\ndissects the argument list and sets an array in the caller's frame.\n\ngdb/testsuite/ChangeLog\n2021-03-31  Tom Tromey  <tromey@adacore.com>\n\n\t* lib/dwarf.exp (Dwarf::_get_args): New proc.\n\t(Dwarf::_location): Use it.",
    "tree": {
      "sha": "f8bde6cf168011f020d83ac9ec8d9ee57b57eaea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8bde6cf168011f020d83ac9ec8d9ee57b57eaea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f49d080599421880799fa091b47160e3c587e5b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f49d080599421880799fa091b47160e3c587e5b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f49d080599421880799fa091b47160e3c587e5b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f49d080599421880799fa091b47160e3c587e5b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cfcbd506fb0262070f58d089bf58502d8f677dd5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfcbd506fb0262070f58d089bf58502d8f677dd5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cfcbd506fb0262070f58d089bf58502d8f677dd5"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 57,
    "deletions": 33
  },
  "files": [
    {
      "sha": "eb655a0ab8a8c8a23014e8a33f7cc2bc1853b1ed",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f49d080599421880799fa091b47160e3c587e5b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f49d080599421880799fa091b47160e3c587e5b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3f49d080599421880799fa091b47160e3c587e5b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-31  Tom Tromey  <tromey@adacore.com>\n+\n+\t* lib/dwarf.exp (Dwarf::_get_args): New proc.\n+\t(Dwarf::_location): Use it.\n+\n 2021-03-31  Tom de Vries  <tdevries@suse.de>\n \n \tPR testsuite/27667"
    },
    {
      "sha": "b9a493863a879277b2b33fb0e147ac9165a89d1c",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 52,
      "deletions": 33,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f49d080599421880799fa091b47160e3c587e5b/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f49d080599421880799fa091b47160e3c587e5b/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=3f49d080599421880799fa091b47160e3c587e5b",
      "patch": "@@ -890,6 +890,20 @@ namespace eval Dwarf {\n \t}\n     }\n \n+    # Assign elements from LINE to the elements of an array named\n+    # \"argvec\" in the caller scope.  The keys used are named in ARGS.\n+    # If the wrong number of elements appear in LINE, error.\n+    proc _get_args {line op args} {\n+\tif {[llength $line] != [llength $args] + 1} {\n+\t    error \"usage: $op [string toupper $args]\"\n+\t}\n+\n+\tupvar argvec argvec\n+\tforeach var $args value [lreplace $line 0 0] {\n+\t    set argvec($var) $value\n+\t}\n+    }\n+\n     # This is a miniature assembler for location expressions.  It is\n     # suitable for use in the attributes to a DIE.  Its output is\n     # prefixed with \"=\" to make it automatically use DW_FORM_block.\n@@ -924,59 +938,72 @@ namespace eval Dwarf {\n \t    set opcode [_map_name [lindex $line 0] _OP]\n \t    _op .byte $_constants($opcode) $opcode\n \n+\t    array unset argvec *\n \t    switch -exact -- $opcode {\n \t\tDW_OP_addr {\n-\t\t    _op .${addr_size}byte [lindex $line 1]\n+\t\t    _get_args $line $opcode size\n+\t\t    _op .${addr_size}byte $argvec(size)\n \t\t}\n \n \t\tDW_OP_regx {\n-\t\t    _op .uleb128 [lindex $line 1]\n+\t\t    _get_args $line $opcode register\n+\t\t    _op .uleb128 $argvec(register)\n \t\t}\n \n \t\tDW_OP_pick -\n \t\tDW_OP_const1u -\n \t\tDW_OP_const1s {\n-\t\t    _op .byte [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .byte $argvec(const)\n \t\t}\n \n \t\tDW_OP_const2u -\n \t\tDW_OP_const2s {\n-\t\t    _op .2byte [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .2byte $argvec(const)\n \t\t}\n \n \t\tDW_OP_const4u -\n \t\tDW_OP_const4s {\n-\t\t    _op .4byte [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .4byte $argvec(const)\n \t\t}\n \n \t\tDW_OP_const8u -\n \t\tDW_OP_const8s {\n-\t\t    _op .8byte [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .8byte $argvec(const)\n \t\t}\n \n \t\tDW_OP_constu {\n-\t\t    _op .uleb128 [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .uleb128 $argvec(const)\n \t\t}\n \t\tDW_OP_consts {\n-\t\t    _op .sleb128 [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .sleb128 $argvec(const)\n \t\t}\n \n \t\tDW_OP_plus_uconst {\n-\t\t    _op .uleb128 [lindex $line 1]\n+\t\t    _get_args $line $opcode const\n+\t\t    _op .uleb128 $argvec(const)\n \t\t}\n \n \t\tDW_OP_piece {\n-\t\t    _op .uleb128 [lindex $line 1]\n+\t\t    _get_args $line $opcode size\n+\t\t    _op .uleb128 $argvec(size)\n \t\t}\n \n \t\tDW_OP_bit_piece {\n-\t\t    _op .uleb128 [lindex $line 1]\n-\t\t    _op .uleb128 [lindex $line 2]\n+\t\t    _get_args $line $opcode size offset\n+\t\t    _op .uleb128 $argvec(size)\n+\t\t    _op .uleb128 $argvec(offset)\n \t\t}\n \n \t\tDW_OP_skip -\n \t\tDW_OP_bra {\n-\t\t    _op .2byte [lindex $line 1]\n+\t\t    _get_args $line $opcode label\n+\t\t    _op .2byte $argvec(label)\n \t\t}\n \n \t\tDW_OP_implicit_value {\n@@ -1000,45 +1027,37 @@ namespace eval Dwarf {\n \n \t\tDW_OP_implicit_pointer -\n \t\tDW_OP_GNU_implicit_pointer {\n-\t\t    if {[llength $line] != 3} {\n-\t\t\terror \"usage: $opcode LABEL OFFSET\"\n-\t\t    }\n+\t\t    _get_args $line $opcode label offset\n \n \t\t    # Here label is a section offset.\n-\t\t    set label [lindex $line 1]\n \t\t    if { $dwarf_version == 2 } {\n-\t\t\t_op .${addr_size}byte $label\n+\t\t\t_op .${addr_size}byte $argvec(label)\n \t\t    } else {\n-\t\t\t_op .${offset_size}byte $label\n+\t\t\t_op .${offset_size}byte $argvec(label)\n \t\t    }\n-\t\t    _op .sleb128 [lindex $line 2]\n+\t\t    _op .sleb128 $argvec(offset)\n \t\t}\n \n \t\tDW_OP_GNU_variable_value {\n-\t\t    if {[llength $line] != 2} {\n-\t\t\terror \"usage: $opcode LABEL\"\n-\t\t    }\n+\t\t    _get_args $line $opcode label\n \n \t\t    # Here label is a section offset.\n-\t\t    set label [lindex $line 1]\n \t\t    if { $dwarf_version == 2 } {\n-\t\t\t_op .${addr_size}byte $label\n+\t\t\t_op .${addr_size}byte $argvec(label)\n \t\t    } else {\n-\t\t\t_op .${offset_size}byte $label\n+\t\t\t_op .${offset_size}byte $argvec(label)\n \t\t    }\n \t\t}\n \n \t\tDW_OP_deref_size {\n-\t\t    if {[llength $line] != 2} {\n-\t\t\terror \"usage: DW_OP_deref_size SIZE\"\n-\t\t    }\n-\n-\t\t    _op .byte [lindex $line 1]\n+\t\t    _get_args $line $opcode size\n+\t\t    _op .byte $argvec(size)\n \t\t}\n \n \t\tDW_OP_bregx {\n-\t\t    _op .uleb128 [lindex $line 1]\n-\t\t    _op .sleb128 [lindex $line 2]\n+\t\t    _get_args $line $opcode register offset\n+\t\t    _op .uleb128 $argvec(register)\n+\t\t    _op .sleb128 $argvec(offset)\n \t\t}\n \n \t\tdefault {"
    }
  ]
}