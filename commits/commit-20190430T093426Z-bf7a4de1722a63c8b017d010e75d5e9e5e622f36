{
  "sha": "bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY3YTRkZTE3MjJhNjNjOGIwMTdkMDEwZTc1ZDVlOWU1ZTYyMmYzNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-16T17:26:44Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-30T09:34:26Z"
    },
    "message": "gdb/fortran: print function arguments when printing function type\n\nBefore this commit using ptype on a Fortran function will include\ninformation about the functions return type, but not the expected\narguments as it would for C or C++.  After this commit argument types\nare included in the ptype output.\n\nFor example, before GDB prints:\n\n    (gdb) ptype fun1\n    type = integer(kind=4) ()\n    (gdb) ptype is_bigger\n    type = logical(kind=4) ()\n\nand after GDB prints:\n\n    (gdb) ptype fun1\n    type = integer(kind=4) (integer(kind=4))\n    (gdb) ptype is_bigger\n    type = logical(kind=4) (integer(kind=4), integer(kind=4))\n\ngdb/ChangeLog:\n\n\t* f-typeprint.c (f_type_print_varspec_suffix): Handle printing\n\tfunction arguments.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/ptype-on-functions.exp: New file.\n\t* gdb.fortran/ptype-on-functions.f90: New file.",
    "tree": {
      "sha": "82ae4065b73b0aa1ba90f21e2369234f48468a67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/82ae4065b73b0aa1ba90f21e2369234f48468a67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bbe75b9d00cc6f0694ff26569505c349d55e35f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bbe75b9d00cc6f0694ff26569505c349d55e35f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bbe75b9d00cc6f0694ff26569505c349d55e35f1"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 168,
    "deletions": 6
  },
  "files": [
    {
      "sha": "45ecbee762c24d44897b810c0537a2b0323417da",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\n+\t* f-typeprint.c (f_type_print_varspec_suffix): Handle printing\n+\tfunction arguments.\n+\n 2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-lang.c (build_fortran_types): Change name of void type to"
    },
    {
      "sha": "0329e50fd0b60675f3e90eee263b66878d4a1639",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 22,
      "deletions": 5,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -226,12 +226,29 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n       break;\n \n     case TYPE_CODE_FUNC:\n-      f_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n-\t\t\t\t   passed_a_ptr, 0, arrayprint_recurse_level);\n-      if (passed_a_ptr)\n-\tfprintf_filtered (stream, \")\");\n+      {\n+\tint i, nfields = TYPE_NFIELDS (type);\n \n-      fprintf_filtered (stream, \"()\");\n+\tf_type_print_varspec_suffix (TYPE_TARGET_TYPE (type), stream, 0,\n+\t\t\t\t     passed_a_ptr, 0, arrayprint_recurse_level);\n+\tif (passed_a_ptr)\n+\t  fprintf_filtered (stream, \")\");\n+\tfprintf_filtered (stream, \"(\");\n+\tif (nfields == 0 && TYPE_PROTOTYPED (type))\n+\t  f_print_type (builtin_f_type (get_type_arch (type))->builtin_void,\n+\t\t\t\"\", stream, -1, 0, 0);\n+\telse\n+\t  for (i = 0; i < nfields; i++)\n+\t    {\n+\t      if (i > 0)\n+\t\t{\n+\t\t  fputs_filtered (\", \", stream);\n+\t\t  wrap_here (\"    \");\n+\t\t}\n+\t      f_print_type (TYPE_FIELD_TYPE (type, i), \"\", stream, -1, 0, 0);\n+\t    }\n+\tfprintf_filtered (stream, \")\");\n+      }\n       break;\n \n     case TYPE_CODE_UNDEF:"
    },
    {
      "sha": "1cfa4d39c5ad6fa7dc33924d4f919be49d3dba87",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/ptype-on-functions.exp: New file.\n+\t* gdb.fortran/ptype-on-functions.f90: New file.\n+\n 2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/exprs.exp (test_convenience_variables): Expect lower"
    },
    {
      "sha": "ce24854a35b13b81202324e6cb0a177bdb7c395d",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-case-insensitive.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.dwarf2/dw2-case-insensitive.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.dwarf2/dw2-case-insensitive.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-case-insensitive.exp?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -45,7 +45,7 @@ gdb_test \"set case-sensitive off\" {warning: the current case sensitivity setting\n # Note that info functions gives the FUNC_lang result using the fortran syntax\n # as specified in dw-case-insensitive-debug.S DW_AT_language.\n gdb_test \"info functions fUnC_lang\" \\\n-\t \"All functions matching regular expression \\\"fUnC_lang\\\":\\[\\r\\n\\]+File file1.txt:\\r\\n\\tfoo FUNC_lang\\\\(\\\\);(\\r\\n\\r\\nNon-debugging symbols:\\r\\n0x\\[0-9a-f\\]+ +\\\\.FUNC_lang)?\" \\\n+\t \"All functions matching regular expression \\\"fUnC_lang\\\":\\[\\r\\n\\]+File file1.txt:\\r\\n\\tfoo FUNC_lang\\\\(void\\\\);(\\r\\n\\r\\nNon-debugging symbols:\\r\\n0x\\[0-9a-f\\]+ +\\\\.FUNC_lang)?\" \\\n \t \"regexp case-sensitive off\"\n \n gdb_test \"p fuNC_lang\" { = {foo \\(void\\)} 0x[0-9a-f]+ <FUNC_lang>}"
    },
    {
      "sha": "4ce78623b47a7ed5316c08deb87cc3d4dae80ad3",
      "filename": "gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/ptype-on-functions.exp?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -0,0 +1,45 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file contains a test for printing the types of functions.\n+\n+if { [skip_fortran_tests] } { return -1 }\n+\n+standard_testfile .f90\n+load_lib \"fortran.exp\"\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug f90}]} {\n+    return -1\n+}\n+\n+if ![runto MAIN__] then {\n+    perror \"couldn't run to breakpoint MAIN__\"\n+    continue\n+}\n+\n+gdb_test \"ptype some_module::get_number\" \\\n+    \"type = integer\\\\(kind=4\\\\) \\\\(Type __class_some_module_Number_t\\\\)\"\n+\n+gdb_test \"ptype some_module::set_number\" \\\n+    \"type = void \\\\(Type __class_some_module_Number_t, integer\\\\(kind=4\\\\)\\\\)\"\n+\n+gdb_test \"ptype is_bigger\" \\\n+    \"type = logical\\\\(kind=4\\\\) \\\\(integer\\\\(kind=4\\\\), integer\\\\(kind=4\\\\)\\\\)\"\n+\n+gdb_test \"ptype say_numbers\" \\\n+    \"type = void \\\\(integer\\\\(kind=4\\\\), integer\\\\(kind=4\\\\), integer\\\\(kind=4\\\\)\\\\)\"\n+\n+gdb_test \"ptype fun_ptr\" \\\n+    \"type = PTR TO -> \\\\( integer\\\\(kind=4\\\\) \\\\(\\\\)\\\\(REF TO -> \\\\( integer\\\\(kind=4\\\\) \\\\)\\\\)\\\\)\""
    },
    {
      "sha": "c4b87371694b2117add9a44de41d2a8ce2549343",
      "filename": "gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf7a4de1722a63c8b017d010e75d5e9e5e622f36/gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/ptype-on-functions.f90?ref=bf7a4de1722a63c8b017d010e75d5e9e5e622f36",
      "patch": "@@ -0,0 +1,89 @@\n+! Copyright 2019 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+module some_module\n+  implicit none\n+\n+  type, public :: Number\n+     integer :: a\n+   contains\n+     procedure :: get => get_number\n+     procedure :: set => set_number\n+  end type Number\n+\n+contains\n+\n+  function get_number (this) result (val)\n+    class (Number), intent (in) :: this\n+    integer :: val\n+    val = this%a\n+  end function get_number\n+\n+  subroutine set_number (this, val)\n+    class (Number), intent (inout) :: this\n+    integer :: val\n+    this%a = val\n+  end subroutine set_number\n+\n+end module some_module\n+\n+logical function is_bigger (a,b)\n+  integer, intent(in) :: a\n+  integer, intent(in) :: b\n+  is_bigger = a > b\n+end function is_bigger\n+\n+subroutine say_numbers (v1,v2,v3)\n+  integer,intent(in) :: v1\n+  integer,intent(in) :: v2\n+  integer,intent(in) :: v3\n+  print *, v1,v2,v3\n+end subroutine say_numbers\n+\n+program test\n+  use some_module\n+\n+  interface\n+     integer function fun1 (x)\n+       integer :: x\n+     end function fun1\n+\n+     integer function fun2 (x)\n+       integer :: x\n+     end function fun2\n+  end interface\n+\n+  type (Number) :: n1\n+  type (Number) :: n2\n+\n+  procedure(fun1), pointer:: fun_ptr => NULL()\n+\n+  call say_numbers (1,2,3)\t! stop here\n+  print *, fun_ptr (3)\n+\n+end program test\n+\n+integer function fun1 (x)\n+  implicit none\n+  integer :: x\n+  fun1 = x + 1\n+end function fun1\n+\n+integer function fun2 (x)\n+  implicit none\n+  integer :: x\n+  fun2 = x + 2\n+end function fun2\n+"
    }
  ]
}