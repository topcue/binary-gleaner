{
  "sha": "6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmI4YzUzZjJmMWMwY2Y1YmVlNDYxMjBkODkyZDRjNzI1NzEzNzVlYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-02-08T21:26:31Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-19T11:11:51Z"
    },
    "message": "gdb/testsuite/fortran: Add mixed language stack test\n\nThis commit adds a test that builds a mixed language stack, the stack\ncontains frames of Fortran, C, and C++.  The test prints the backtrace\nand explores the stack printing arguments of different types in frames\nof different languages.\n\nThe core of the test is repeated with GDB's language set to auto,\nfortran, c, and c++ in turn to ensure that GDB is happy to print\nframes and frame arguments when the language is set to a value that\ndoesn't match the frame language.\n\nThis test currently passes, and there are no known bugs in this area.\nThe aim of this commit is simply to increase test coverage, as I don't\nbelieve this functionality is currently tested.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/mixed-lang-stack.c: New file.\n\t* gdb.fortran/mixed-lang-stack.cpp: New file.\n\t* gdb.fortran/mixed-lang-stack.exp: New file.\n\t* gdb.fortran/mixed-lang-stack.f90: New file.",
    "tree": {
      "sha": "8f9b1a3c92ae0d665c3220496178401c34038870",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8f9b1a3c92ae0d665c3220496178401c34038870"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19a2740f7f2ea0f65745a3c00cf8a64647378aa3"
    }
  ],
  "stats": {
    "total": 408,
    "additions": 408,
    "deletions": 0
  },
  "files": [
    {
      "sha": "a9fa54eeb9451cd433b7d0f66052eb5321261ea7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/mixed-lang-stack.c: New file.\n+\t* gdb.fortran/mixed-lang-stack.cpp: New file.\n+\t* gdb.fortran/mixed-lang-stack.exp: New file.\n+\t* gdb.fortran/mixed-lang-stack.f90: New file.\n+\n 2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.linespec/cp-completion-aliases.cc: New file."
    },
    {
      "sha": "0d254cde2c692ec2192976798a1525923d2bc7d4",
      "filename": "gdb/testsuite/gdb.fortran/mixed-lang-stack.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/mixed-lang-stack.c?ref=6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
      "patch": "@@ -0,0 +1,37 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <complex.h>\n+#include <string.h>\n+\n+struct some_struct\n+{\n+  float a, b;\n+};\n+\n+extern void mixed_func_1d_ (int *, float *, double *, complex float *,\n+\t\t\t    char *, size_t);\n+\n+void\n+mixed_func_1c (int a, float b, double c, complex float d, char *f,\n+\t       struct some_struct *g)\n+{\n+  printf (\"a = %d, b = %f, c = %e, d = (%f + %fi)\\n\", a, b, c,\n+\t  creal(d), cimag(d));\n+\n+  char *string = \"this is a string from C\";\n+  mixed_func_1d_ (&a, &b, &c, &d, string, strlen (string));\n+}"
    },
    {
      "sha": "0e49e8e3951383ab06fbfb6c678c53876fe73136",
      "filename": "gdb/testsuite/gdb.fortran/mixed-lang-stack.cpp",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.cpp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.cpp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/mixed-lang-stack.cpp?ref=6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
      "patch": "@@ -0,0 +1,85 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <cstring>\n+#include <cstdlib>\n+\n+class base_one\n+{\n+  int num1 = 1;\n+  int num2 = 2;\n+  int num3 = 3;\n+};\n+\n+class base_two\n+{\n+public:\n+  base_two ()\n+  {\n+    string = strdup (\"Something in C++\");\n+  }\n+\n+  ~base_two ()\n+  {\n+    free (string);\n+  }\n+\n+  char *string = nullptr;\n+  float val = 3.5;\n+};\n+\n+class derived_type : public base_one, base_two\n+{\n+public:\n+  derived_type ()\n+    : base_one (),\n+      base_two ()\n+  {\n+    /* Nothing.  */\n+  }\n+\n+private:\n+  int xxx = 9;\n+  float yyy = 10.5;\n+};\n+\n+static void mixed_func_1f ();\n+static void mixed_func_1g ();\n+\n+extern \"C\"\n+{\n+  /* Entry point to be called from Fortran. */\n+  void\n+  mixed_func_1e ()\n+  {\n+    mixed_func_1f ();\n+  }\n+\n+  /* The entry point back into Fortran.  */\n+  extern void mixed_func_1h_ ();\n+}\n+\n+static void\n+mixed_func_1g (derived_type obj)\n+{\n+  mixed_func_1h_ ();\n+}\n+\n+static void\n+mixed_func_1f () {\n+  derived_type obj;\n+\n+  mixed_func_1g (obj);\n+}"
    },
    {
      "sha": "df0807e268f28e6482a05aa8bb0e2a0b937d1277",
      "filename": "gdb/testsuite/gdb.fortran/mixed-lang-stack.exp",
      "status": "added",
      "additions": 163,
      "deletions": 0,
      "changes": 163,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/mixed-lang-stack.exp?ref=6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
      "patch": "@@ -0,0 +1,163 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# This test covers some basic functionality for debugging mixed\n+# Fortran, C, and C++ applications.  Features tested include examining\n+# the backtrace, and printing frame arguments in frames of different\n+# languages.\n+#\n+# One important aspect of this test is that we set the language in\n+# turn to auto, fortran, c, and c++, and carry out the full test in\n+# each case to ensure that trying to print objects or types from one\n+# language, while GDB's language is set to another, doesn't crash GDB.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile mixed-lang-stack.c mixed-lang-stack.cpp mixed-lang-stack.f90\n+\n+if {[prepare_for_testing_full \"failed to prepare\" \\\n+\t [list ${binfile} {debug f90 additional_flags=-lstdc++} \\\n+\t      $srcfile {debug} \\\n+\t      $srcfile2 {debug c++} \\\n+\t      $srcfile3 {debug f90}]]} {\n+    return -1\n+}\n+\n+# Runs the test program and examins the stack.  LANG is a string, the\n+# value to pass to GDB's 'set language ...' command.\n+proc run_tests { lang } {\n+    with_test_prefix \"lang=${lang}\" {\n+\tglobal binfile hex\n+\n+\tclean_restart ${binfile}\n+\n+\tif ![runto_main] {\n+\t    untested \"could not run to main\"\n+\t    return -1\n+\t}\n+\n+\tgdb_breakpoint \"breakpt\"\n+\tgdb_continue_to_breakpoint \"breakpt\"\n+\n+\tif { $lang == \"c\" || $lang == \"c++\" } {\n+\t    gdb_test \"set language c\" \\\n+\t\t\"Warning: the current language does not match this frame.\"\n+\t} else {\n+\t    gdb_test_no_output \"set language $lang\"\n+\t}\n+\n+\t# Check the backtrace.\n+\tset bt_stack [multi_line \\\n+\t\t\t  \"#0\\\\s+breakpt \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#1\\\\s+$hex in mixed_func_1h \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#2\\\\s+$hex in mixed_func_1g \\\\(obj=\\\\.\\\\.\\\\.\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#3\\\\s+$hex in mixed_func_1f \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#4\\\\s+$hex in mixed_func_1e \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#5\\\\s+$hex in mixed_func_1d \\\\(\\[^\\r\\n\\]+\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#6\\\\s+$hex in mixed_func_1c \\\\(\\[^\\r\\n\\]+\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#7\\\\s+$hex in mixed_func_1b \\\\(\\[^\\r\\n\\]+\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#8\\\\s+$hex in mixed_func_1a \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#9\\\\s+$hex in mixed_stack_main \\\\(\\\\) at \\[^\\r\\n\\]+\" \\\n+\t\t\t  \"#10\\\\s+$hex in main \\\\(\\[^\\r\\n\\]+\\\\) at .*\" ]\n+\tgdb_test \"bt\" $bt_stack\n+\n+\t# Check the language for frame #0.\n+\tgdb_test \"info frame\" \"source language fortran\\..*\" \\\n+\t    \"info frame in frame #0\"\n+\n+\t# Move up to the C++ frames and check the frame state, print a\n+\t# C++ object.\n+\tgdb_test \"frame 2\" \"#2\\\\s+$hex in mixed_func_1g .*\" \\\n+\t    \"select frame #2\"\n+\tgdb_test \"info frame\" \"source language c\\\\+\\\\+\\..*\" \\\n+\t    \"info frame in frame #2\"\n+\tif { $lang == \"fortran\" } {\n+\t    set obj_pattern \" = \\\\( base_one = \\\\( num1 = 1, num2 = 2, num3 = 3 \\\\), base_two = \\\\( string = 0x6184e0 'Something in C\\\\+\\\\+\\\\\\\\000', val = 3.5 \\\\), xxx = 9, yyy = 10.5 \\\\)\"\n+\t} else {\n+\t    set obj_pattern \" = \\\\{<base_one> = \\\\{num1 = 1, num2 = 2, num3 = 3\\\\}, <base_two> = \\\\{string = 0x6184e0 \\\"Something in C\\\\+\\\\+\\\", val = 3.5\\\\}, xxx = 9, yyy = 10.5\\\\}\"\n+\t}\n+\tgdb_test \"print obj\" \"${obj_pattern}\"\n+\n+\t# Move up the stack a way, and check frame and the frame\n+\t# arguments.\n+\tgdb_test \"frame 5\" \"#5\\\\s+$hex in mixed_func_1d .*\" \\\n+\t    \"select frame #5\"\n+\tgdb_test \"info frame\" \"source language fortran\\..*\" \\\n+\t    \"info frame in frame #5\"\n+\n+\tgdb_test \"up\" \"#6\\\\s+$hex in mixed_func_1c .*\" \\\n+\t    \"up to frame #6\"\n+\tgdb_test \"info frame\" \"source language c\\..*\" \\\n+\t    \"info frame in frame #6\"\n+\n+\tif { $lang == \"fortran\" } {\n+\t    set d_pattern \"\\\\(4,5\\\\)\"\n+\t    set f_pattern \"$hex 'abcdef\\\\\\\\000'\"\n+\t} else {\n+\t    set d_pattern \"4 \\\\+ 5 \\\\* I\"\n+\t    set f_pattern \"$hex \\\"abcdef\\\"\"\n+\t}\n+\n+\tset args_pattern [multi_line \\\n+\t\t\t      \"a = 1\" \\\n+\t\t\t      \"b = 2\" \\\n+\t\t\t      \"c = 3\" \\\n+\t\t\t      \"d = ${d_pattern}\" \\\n+\t\t\t      \"f = ${f_pattern}\" \\\n+\t\t\t      \"g = $hex\" ]\n+\n+\tgdb_test \"info args\" $args_pattern \\\n+\t    \"info args in frame #6\"\n+\tif { $lang == \"fortran\" } {\n+\t    set g_pattern \" = \\\\( a = 1\\\\.5, b = 2\\\\.5 \\\\)\"\n+\t} else {\n+\t    set g_pattern \" = \\\\{a = 1\\\\.5, b = 2\\\\.5\\\\}\"\n+\t}\n+\tgdb_test \"print *g\" \"${g_pattern}\" \\\n+\t    \"print object pointed to by g\"\n+\n+\tgdb_test \"up\" \"#7\\\\s+$hex in mixed_func_1b .*\" \\\n+\t    \"up to frame #7\"\n+\tgdb_test \"info frame\" \"source language fortran\\..*\" \\\n+\t    \"info frame in frame #7\"\n+\n+\tif { $lang == \"c\" || $lang == \"c++\" } {\n+\t    set d_pattern \"4 \\\\+ 5 \\\\* I\"\n+\t    set e_pattern \"\\\"abcdef\\\"\"\n+\t    set g_pattern \"\\{a = 1.5, b = 2.5\\}\"\n+\t} else {\n+\t    set d_pattern \"\\\\(4,5\\\\)\"\n+\t    set e_pattern \"'abcdef'\"\n+\t    set g_pattern \"\\\\( a = 1.5, b = 2.5 \\\\)\"\n+\t}\n+\n+\tset args_pattern [multi_line \\\n+\t\t\t      \"a = 1\" \\\n+\t\t\t      \"b = 2\" \\\n+\t\t\t      \"c = 3\" \\\n+\t\t\t      \"d = ${d_pattern}\" \\\n+\t\t\t      \"e = ${e_pattern}\" \\\n+\t\t\t      \"g = ${g_pattern}\" \\\n+\t\t\t      \"_e = 6\" ]\n+\n+\tgdb_test \"info args\" $args_pattern \\\n+\t    \"info args in frame #7\"\n+    }\n+}\n+\n+run_tests \"auto\"\n+run_tests \"fortran\"\n+run_tests \"c\"\n+run_tests \"c++\""
    },
    {
      "sha": "a067fc8588e10c8012e721e987013a805aec70f2",
      "filename": "gdb/testsuite/gdb.fortran/mixed-lang-stack.f90",
      "status": "added",
      "additions": 116,
      "deletions": 0,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b8c53f2f1c0cf5bee46120d892d4c72571375eb/gdb/testsuite/gdb.fortran/mixed-lang-stack.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/mixed-lang-stack.f90?ref=6b8c53f2f1c0cf5bee46120d892d4c72571375eb",
      "patch": "@@ -0,0 +1,116 @@\n+! Copyright 2020 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 2 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+module type_module\n+  use, intrinsic :: iso_c_binding, only: c_int, c_float, c_double\n+  type, bind(C) :: MyType\n+     real(c_float) :: a\n+     real(c_float) :: b\n+  end type MyType\n+end module type_module\n+\n+program mixed_stack_main\n+  implicit none\n+\n+  ! Set up some locals.\n+\n+  ! Call a Fortran function.\n+  call mixed_func_1a\n+\n+  write(*,*) \"All done\"\n+end program mixed_stack_main\n+\n+subroutine breakpt ()\n+  implicit none\n+  write(*,*) \"Hello World\"         ! Break here.\n+end subroutine breakpt\n+\n+subroutine mixed_func_1a()\n+  use type_module\n+  implicit none\n+\n+  TYPE(MyType) :: obj\n+  complex(kind=4) :: d\n+\n+  obj%a = 1.5\n+  obj%b = 2.5\n+  d = cmplx (4.0, 5.0)\n+\n+  ! Call a C function.\n+  call mixed_func_1b (1, 2.0, 3D0, d, \"abcdef\", obj)\n+end subroutine mixed_func_1a\n+\n+! This subroutine is called from the Fortran code.\n+subroutine mixed_func_1b(a, b, c, d, e, g)\n+  use type_module\n+  implicit none\n+\n+  integer :: a\n+  real(kind=4) :: b\n+  real(kind=8) :: c\n+  complex(kind=4) :: d\n+  character(len=*) :: e\n+  character(len=:), allocatable :: f\n+  TYPE(MyType) :: g\n+\n+  interface\n+     subroutine mixed_func_1c (a, b, c, d, f, g) bind(C)\n+       use, intrinsic :: iso_c_binding, only: c_int, c_float, c_double\n+       use, intrinsic :: iso_c_binding, only: c_float_complex, c_char\n+       use type_module\n+       implicit none\n+       integer(c_int), value, intent(in) :: a\n+       real(c_float), value, intent(in) :: b\n+       real(c_double), value, intent(in) :: c\n+       complex(c_float_complex), value, intent(in) :: d\n+       character(c_char), intent(in) :: f(*)\n+       TYPE(MyType) :: g\n+     end subroutine mixed_func_1c\n+  end interface\n+\n+  ! Create a copy of the string with a NULL terminator on the end.\n+  f = e//char(0)\n+\n+  ! Call a C function.\n+  call mixed_func_1c (a, b, c, d, f, g)\n+end subroutine mixed_func_1b\n+\n+! This subroutine is called from the C code.\n+subroutine mixed_func_1d(a, b, c, d, str)\n+  use, intrinsic :: iso_c_binding, only: c_int, c_float, c_double\n+  use, intrinsic :: iso_c_binding, only: c_float_complex\n+  implicit none\n+  integer(c_int) :: a\n+  real(c_float) :: b\n+  real(c_double) :: c\n+  complex(c_float_complex) :: d\n+  character(len=*) :: str\n+\n+  interface\n+     subroutine mixed_func_1e () bind(C)\n+       implicit none\n+     end subroutine mixed_func_1e\n+  end interface\n+\n+  write(*,*) a, b, c, d, str\n+\n+  ! Call a C++ function (via an extern \"C\" wrapper).\n+  call mixed_func_1e\n+end subroutine mixed_func_1d\n+\n+! This is called from C++ code.\n+subroutine mixed_func_1h ()\n+  call breakpt\n+end subroutine mixed_func_1h"
    }
  ]
}