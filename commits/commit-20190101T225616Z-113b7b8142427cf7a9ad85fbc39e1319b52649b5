{
  "sha": "113b7b8142427cf7a9ad85fbc39e1319b52649b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTEzYjdiODE0MjQyN2NmN2E5YWQ4NWZiYzM5ZTEzMTliNTI2NDliNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-12-13T17:59:12Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-01T22:56:16Z"
    },
    "message": "gdb/riscv: Split ISA and ABI features\n\nThe goal of this commit is to allow RV64 binaries compiled for the 'F'\nextension to run on a target that supports both the 'F' and 'D'\nextensions.\n\nThe 'D' extension depends on the 'F' extension and chapter 9 of the\nRISC-V ISA manual implies that running a program compiled for 'F' on\na 'D' target should be fine.\n\nTo support this the gdbarch now holds two feature sets, one represents\nthe features that are present on the target, and one represents the\nfeatures requested in the ELF flags.\n\nThe existing error checks are relaxed slightly to allow binaries\ncompiled for 32-bit 'F' extension to run on targets with the 64-bit\n'D' extension.\n\nA new set of functions called riscv_abi_{xlen,flen} are added to\ncompliment the existing riscv_isa_{xlen,flen}, and some callers to the\nisa functions now call the abi functions when that is appropriate.\n\nIn riscv_call_arg_struct two asserts are removed, these asserts no\nlonger make sense.  The asserts were both like this:\n\n    gdb_assert (TYPE_LENGTH (ainfo->type)\n                <= (cinfo->flen + cinfo->xlen));\n\nAnd were made in two cases, when passing structures like these:\n\n   struct {\n     integer field1;\n     float   field2;\n   };\n\nor,\n\n   struct {\n     float   field1;\n     integer field2;\n   };\n\nWhen running on an RV64 target which only has 32-bit float then the\ninteger field could be 64-bits, while if the float field is 32-bits\nthe overall size of the structure can be 128-bits (with 32-bits of\npadding).  In this case the assertion would fail, however, the code\nisn't incorrect, so its safe to just remove the assertion.\n\nThis was tested by running on an RV64IMFDC target using a compiler\nconfigured for RV64IMFC, and comparing the results with those obtained\nwhen using a compiler configured for RV64IMFDC.  The only regressions\nI see (now) are in gdb.base/store.exp and are related too different\ncode generation choices GCC makes between the two targets.\n\nFinally, this commit does not make any attempt to support running\nbinaries compiled for RV32 on an RV64 target, though nothing in here\nshould prevent that being supported in the future.\n\ngdb/ChangeLog:\n\n\t* arch/riscv.h (struct riscv_gdbarch_features) <hw_float_abi>:\n\tDelete.\n\t<operator==>: Update with for removed field.\n\t<hash>: Likewise.\n\t* riscv-tdep.h (struct gdbarch_tdep) <features>: Renamed to...\n\t<isa_features>: ...this.\n\t<abi_features>: New field.\n\t(riscv_isa_flen): Update comment.\n\t(riscv_abi_xlen): New declaration.\n\t(riscv_abi_flen): New declaration.\n\t* riscv-tdep.c (riscv_isa_xlen): Update to get answer from\n\tisa_features.\n\t(riscv_abi_xlen): New function.\n\t(riscv_isa_flen): Update to get answer from isa_features.\n\t(riscv_abi_flen): New function.\n\t(riscv_has_fp_abi): Update to get answer from abi_features.\n\t(riscv_call_info::riscv_call_info): Use abi xlen and flen, not isa\n\txlen and flen.\n\t(riscv_call_info) <xlen, flen>: Update comment.\n\t(riscv_call_arg_struct): Remove invalid assertions\n\t(riscv_features_from_gdbarch_info): Update now hw_float_abi field\n\tis removed.\n\t(riscv_gdbarch_init): Gather isa features and abi features\n\tseparately, ensure both match on the gdbarch when reusing an old\n\tgdbarch.  Relax an error check to allow 32-bit abi float to run on\n\ta target with 64-bit float hardware.",
    "tree": {
      "sha": "d6c0030aa439b0767dded620ec3bdea6f1a10d0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d6c0030aa439b0767dded620ec3bdea6f1a10d0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/113b7b8142427cf7a9ad85fbc39e1319b52649b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/113b7b8142427cf7a9ad85fbc39e1319b52649b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/113b7b8142427cf7a9ad85fbc39e1319b52649b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/113b7b8142427cf7a9ad85fbc39e1319b52649b5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b18ca5148b837c878b64306be2b78b15fa730259",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b18ca5148b837c878b64306be2b78b15fa730259",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b18ca5148b837c878b64306be2b78b15fa730259"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 105,
    "deletions": 57
  },
  "files": [
    {
      "sha": "6bb9ce7fbbe360b57c135253fa6804f6f8b13dbb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=113b7b8142427cf7a9ad85fbc39e1319b52649b5",
      "patch": "@@ -1,3 +1,32 @@\n+2019-01-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* arch/riscv.h (struct riscv_gdbarch_features) <hw_float_abi>:\n+\tDelete.\n+\t<operator==>: Update with for removed field.\n+\t<hash>: Likewise.\n+\t* riscv-tdep.h (struct gdbarch_tdep) <features>: Renamed to...\n+\t<isa_features>: ...this.\n+\t<abi_features>: New field.\n+\t(riscv_isa_flen): Update comment.\n+\t(riscv_abi_xlen): New declaration.\n+\t(riscv_abi_flen): New declaration.\n+\t* riscv-tdep.c (riscv_isa_xlen): Update to get answer from\n+\tisa_features.\n+\t(riscv_abi_xlen): New function.\n+\t(riscv_isa_flen): Update to get answer from isa_features.\n+\t(riscv_abi_flen): New function.\n+\t(riscv_has_fp_abi): Update to get answer from abi_features.\n+\t(riscv_call_info::riscv_call_info): Use abi xlen and flen, not isa\n+\txlen and flen.\n+\t(riscv_call_info) <xlen, flen>: Update comment.\n+\t(riscv_call_arg_struct): Remove invalid assertions\n+\t(riscv_features_from_gdbarch_info): Update now hw_float_abi field\n+\tis removed.\n+\t(riscv_gdbarch_init): Gather isa features and abi features\n+\tseparately, ensure both match on the gdbarch when reusing an old\n+\tgdbarch.  Relax an error check to allow 32-bit abi float to run on\n+\ta target with 64-bit float hardware.\n+\n 2019-01-01  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* source.c (search_command_helper): Stop reverse search"
    },
    {
      "sha": "05c19054dce00da97f44bb6cce00a3ee800707cd",
      "filename": "gdb/arch/riscv.h",
      "status": "modified",
      "additions": 2,
      "deletions": 13,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/arch/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/arch/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/riscv.h?ref=113b7b8142427cf7a9ad85fbc39e1319b52649b5",
      "patch": "@@ -46,19 +46,10 @@ struct riscv_gdbarch_features\n      that there are no f-registers.  No other value is valid.  */\n   int flen = 0;\n \n-  /* This indicates if hardware floating point abi is in use.  If the FLEN\n-     field is 0 then this value _must_ be false.  If the FLEN field is\n-     non-zero and this field is false then this indicates the target has\n-     floating point registers, but is still using the soft-float abi.  If\n-     this field is true then the hardware floating point abi is in use, and\n-     values are passed in f-registers matching the size of FLEN.  */\n-  bool hw_float_abi = false;\n-\n   /* Equality operator.  */\n   bool operator== (const struct riscv_gdbarch_features &rhs) const\n   {\n-    return (xlen == rhs.xlen && flen == rhs.flen\n-\t    && hw_float_abi == rhs.hw_float_abi);\n+    return (xlen == rhs.xlen && flen == rhs.flen);\n   }\n \n   /* Inequality operator.  */\n@@ -70,9 +61,7 @@ struct riscv_gdbarch_features\n   /* Used by std::unordered_map to hash feature sets.  */\n   std::size_t hash () const noexcept\n   {\n-    std::size_t val = ((xlen & 0x1f) << 6\n-                       | (flen & 0x1f) << 1\n-                       | (hw_float_abi ? 1 : 0));\n+    std::size_t val = ((xlen & 0x1f) << 5 | (flen & 0x1f) << 0);\n     return val;\n   }\n };"
    },
    {
      "sha": "33c1c4408ec8b762041c9820c65a73dd274a824f",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 44,
      "deletions": 37,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=113b7b8142427cf7a9ad85fbc39e1319b52649b5",
      "patch": "@@ -361,15 +361,31 @@ static unsigned int riscv_debug_gdbarch = 0;\n int\n riscv_isa_xlen (struct gdbarch *gdbarch)\n {\n-  return gdbarch_tdep (gdbarch)->features.xlen;\n+  return gdbarch_tdep (gdbarch)->isa_features.xlen;\n+}\n+\n+/* See riscv-tdep.h.  */\n+\n+int\n+riscv_abi_xlen (struct gdbarch *gdbarch)\n+{\n+  return gdbarch_tdep (gdbarch)->abi_features.xlen;\n }\n \n /* See riscv-tdep.h.  */\n \n int\n riscv_isa_flen (struct gdbarch *gdbarch)\n {\n-  return gdbarch_tdep (gdbarch)->features.flen;\n+  return gdbarch_tdep (gdbarch)->isa_features.flen;\n+}\n+\n+/* See riscv-tdep.h.  */\n+\n+int\n+riscv_abi_flen (struct gdbarch *gdbarch)\n+{\n+  return gdbarch_tdep (gdbarch)->abi_features.flen;\n }\n \n /* Return true if the target for GDBARCH has floating point hardware.  */\n@@ -385,7 +401,7 @@ riscv_has_fp_regs (struct gdbarch *gdbarch)\n static bool\n riscv_has_fp_abi (struct gdbarch *gdbarch)\n {\n-  return gdbarch_tdep (gdbarch)->features.hw_float_abi;\n+  return gdbarch_tdep (gdbarch)->abi_features.flen > 0;\n }\n \n /* Return true if REGNO is a floating pointer register.  */\n@@ -1786,8 +1802,8 @@ struct riscv_call_info\n     : int_regs (RISCV_A0_REGNUM, RISCV_A0_REGNUM + 7),\n       float_regs (RISCV_FA0_REGNUM, RISCV_FA0_REGNUM + 7)\n   {\n-    xlen = riscv_isa_xlen (gdbarch);\n-    flen = riscv_isa_flen (gdbarch);\n+    xlen = riscv_abi_xlen (gdbarch);\n+    flen = riscv_abi_flen (gdbarch);\n \n     /* Disable use of floating point registers if needed.  */\n     if (!riscv_has_fp_abi (gdbarch))\n@@ -1807,7 +1823,7 @@ struct riscv_call_info\n   struct riscv_arg_reg float_regs;\n \n   /* The XLEN and FLEN are copied in to this structure for convenience, and\n-     are just the results of calling RISCV_ISA_XLEN and RISCV_ISA_FLEN.  */\n+     are just the results of calling RISCV_ABI_XLEN and RISCV_ABI_FLEN.  */\n   int xlen;\n   int flen;\n };\n@@ -2148,9 +2164,6 @@ riscv_call_arg_struct (struct riscv_arg_info *ainfo,\n \t{\n \t  int len0, len1, offset;\n \n-\t  gdb_assert (TYPE_LENGTH (ainfo->type)\n-\t\t      <= (cinfo->flen + cinfo->xlen));\n-\n \t  len0 = TYPE_LENGTH (sinfo.field_type (0));\n \t  if (!riscv_assign_reg_location (&ainfo->argloc[0],\n \t\t\t\t\t  &cinfo->float_regs, len0, 0))\n@@ -2174,9 +2187,6 @@ riscv_call_arg_struct (struct riscv_arg_info *ainfo,\n \t{\n \t  int len0, len1, offset;\n \n-\t  gdb_assert (TYPE_LENGTH (ainfo->type)\n-\t\t      <= (cinfo->flen + cinfo->xlen));\n-\n \t  len0 = TYPE_LENGTH (sinfo.field_type (0));\n \t  len1 = TYPE_LENGTH (sinfo.field_type (1));\n \t  offset = align_up (len0, riscv_type_alignment (sinfo.field_type (1)));\n@@ -2889,15 +2899,9 @@ riscv_features_from_gdbarch_info (const struct gdbarch_info info)\n \t\t\t_(\"unknown ELF header class %d\"), eclass);\n \n       if (e_flags & EF_RISCV_FLOAT_ABI_DOUBLE)\n-\t{\n-\t  features.flen = 8;\n-\t  features.hw_float_abi = true;\n-\t}\n+\tfeatures.flen = 8;\n       else if (e_flags & EF_RISCV_FLOAT_ABI_SINGLE)\n-\t{\n-\t  features.flen = 4;\n-\t  features.hw_float_abi = true;\n-\t}\n+\tfeatures.flen = 4;\n     }\n   else\n     {\n@@ -3115,25 +3119,26 @@ riscv_gdbarch_init (struct gdbarch_info info,\n   /* Have a look at what the supplied (if any) bfd object requires of the\n      target, then check that this matches with what the target is\n      providing.  */\n-  struct riscv_gdbarch_features info_features\n+  struct riscv_gdbarch_features abi_features\n     = riscv_features_from_gdbarch_info (info);\n-  if (info_features.xlen != 0 && info_features.xlen != features.xlen)\n+  /* In theory a binary compiled for RV32 could run on an RV64 target,\n+     however, this has not been tested in GDB yet, so for now we require\n+     that the requested xlen match the targets xlen.  */\n+  if (abi_features.xlen != 0 && abi_features.xlen != features.xlen)\n     error (_(\"bfd requires xlen %d, but target has xlen %d\"),\n-           info_features.xlen, features.xlen);\n-  if (info_features.flen != 0 && info_features.flen != features.flen)\n+            abi_features.xlen, features.xlen);\n+  /* We do support running binaries compiled for 32-bit float on targets\n+     with 64-bit float, so we only complain if the binary requires more\n+     than the target has available.  */\n+  if (abi_features.flen > features.flen)\n     error (_(\"bfd requires flen %d, but target has flen %d\"),\n-           info_features.flen, features.flen);\n-\n-  /* If the xlen from INFO_FEATURES is 0 then this indicates either there\n-     is no bfd object, or nothing useful could be extracted from it, in\n-     this case we enable hardware float abi if the target has floating\n-     point registers.\n+            abi_features.flen, features.flen);\n \n-     If the xlen from INFO_FEATURES is not 0, and the flen in\n-     INFO_FEATURES is also not 0, then this indicates that the supplied\n-     bfd does require hardware floating point abi.  */\n-  if (info_features.xlen == 0 || info_features.flen != 0)\n-    features.hw_float_abi = (features.flen > 0);\n+  /* If the ABI_FEATURES xlen is 0 then this indicates we got no useful abi\n+     features from the INFO object.  In this case we assume that the xlen\n+     abi matches the hardware.  */\n+  if (abi_features.xlen == 0)\n+    abi_features.xlen = features.xlen;\n \n   /* Find a candidate among the list of pre-declared architectures.  */\n   for (arches = gdbarch_list_lookup_by_info (arches, &info);\n@@ -3145,7 +3150,8 @@ riscv_gdbarch_init (struct gdbarch_info info,\n          gdbarch.  */\n       struct gdbarch_tdep *other_tdep = gdbarch_tdep (arches->gdbarch);\n \n-      if (other_tdep->features != features)\n+      if (other_tdep->isa_features != features\n+\t  || other_tdep->abi_features != abi_features)\n         continue;\n \n       break;\n@@ -3160,7 +3166,8 @@ riscv_gdbarch_init (struct gdbarch_info info,\n   /* None found, so create a new architecture from the information provided.  */\n   tdep = new (struct gdbarch_tdep);\n   gdbarch = gdbarch_alloc (&info, tdep);\n-  tdep->features = features;\n+  tdep->isa_features = features;\n+  tdep->abi_features = abi_features;\n \n   /* Target data types.  */\n   set_gdbarch_short_bit (gdbarch, 16);"
    },
    {
      "sha": "4268839b47dee1b086d40e03c5e5de8bbf803583",
      "filename": "gdb/riscv-tdep.h",
      "status": "modified",
      "additions": 30,
      "deletions": 7,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/riscv-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/113b7b8142427cf7a9ad85fbc39e1319b52649b5/gdb/riscv-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.h?ref=113b7b8142427cf7a9ad85fbc39e1319b52649b5",
      "patch": "@@ -68,9 +68,14 @@ enum\n /* RISC-V specific per-architecture information.  */\n struct gdbarch_tdep\n {\n-  /* Features about the target that impact how the gdbarch is configured.\n-     Two gdbarch instances are compatible only if this field matches.  */\n-  struct riscv_gdbarch_features features;\n+  /* Features about the target hardware that impact how the gdbarch is\n+     configured.  Two gdbarch instances are compatible only if this field\n+     matches.  */\n+  struct riscv_gdbarch_features isa_features;\n+\n+  /* Features about the abi that impact how the gdbarch is configured.  Two\n+     gdbarch instances are compatible only if this field matches.  */\n+  struct riscv_gdbarch_features abi_features;\n \n   /* ISA-specific data types.  */\n   struct type *riscv_fpreg_d_type = nullptr;\n@@ -82,12 +87,30 @@ struct gdbarch_tdep\n    RV128.  */\n extern int riscv_isa_xlen (struct gdbarch *gdbarch);\n \n-/* Return the width in bytes of the floating point registers for GDBARCH.\n-   If this architecture has no floating point registers, then return 0.\n-   Possible values are 4, 8, or 16 for depending on which of single, double\n-   or quad floating point support is available.  */\n+/* Return the width in bytes of the hardware floating point registers for\n+   GDBARCH.  If this architecture has no floating point registers, then\n+   return 0.  Possible values are 4, 8, or 16 for depending on which of\n+   single, double or quad floating point support is available.  */\n extern int riscv_isa_flen (struct gdbarch *gdbarch);\n \n+/* Return the width in bytes of the general purpose register abi for\n+   GDBARCH.  This can be equal to, or less than RISCV_ISA_XLEN and reflects\n+   how the binary was compiled rather than the hardware that is available.\n+   It is possible that a binary compiled for RV32 is being run on an RV64\n+   target, in which case the isa xlen is 8-bytes, and the abi xlen is\n+   4-bytes.  This will impact how inferior functions are called.  */\n+extern int riscv_abi_xlen (struct gdbarch *gdbarch);\n+\n+/* Return the width in bytes of the floating point register abi for\n+   GDBARCH.  This reflects how the binary was compiled rather than the\n+   hardware that is available.  It is possible that a binary is compiled\n+   for single precision floating point, and then run on a target with\n+   double precision floating point.  A return value of 0 indicates that no\n+   floating point abi is in use (floating point arguments will be passed\n+   in integer registers) other possible return value are 4, 8, or 16 as\n+   with RISCV_ISA_FLEN.  */\n+extern int riscv_abi_flen (struct gdbarch *gdbarch);\n+\n /* Single step based on where the current instruction will take us.  */\n extern std::vector<CORE_ADDR> riscv_software_single_step\n   (struct regcache *regcache);"
    }
  ]
}