{
  "sha": "754487e200deb9fad3399556e838bb68eedbab18",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzU0NDg3ZTIwMGRlYjlmYWQzMzk5NTU2ZTgzOGJiNjhlZWRiYWIxOA==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:22:13Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:48:51Z"
    },
    "message": "Unit testing for GDB-side remote memory tagging handling\n\nInclude some unit testing for the functions handling the new qMemTags and\nQMemTags packets.\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* remote: Include gdbsupport/selftest.h.\n\t(test_memory_tagging_functions): New function.\n\t(_initialize_remote): Register test_memory_tagging_functions.",
    "tree": {
      "sha": "624179c18785e75b1132c409c71b4ba88ff8c60b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/624179c18785e75b1132c409c71b4ba88ff8c60b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/754487e200deb9fad3399556e838bb68eedbab18",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/754487e200deb9fad3399556e838bb68eedbab18",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/754487e200deb9fad3399556e838bb68eedbab18",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/754487e200deb9fad3399556e838bb68eedbab18/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c2e7f87a81cb3834a31a81c48e37ea9bd469490",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c2e7f87a81cb3834a31a81c48e37ea9bd469490",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c2e7f87a81cb3834a31a81c48e37ea9bd469490"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 98,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0ea440dd8d57ce4e36b76d2f0661129620084088",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/754487e200deb9fad3399556e838bb68eedbab18/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/754487e200deb9fad3399556e838bb68eedbab18/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=754487e200deb9fad3399556e838bb68eedbab18",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* remote: Include gdbsupport/selftest.h.\n+\t(test_memory_tagging_functions): New function.\n+\t(_initialize_remote): Register test_memory_tagging_functions.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* remote.c (PACKET_memory_tagging_feature): New enum."
    },
    {
      "sha": "6ccfa3365b0d624b78998d010143f83c01b3c0ac",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 92,
      "deletions": 0,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/754487e200deb9fad3399556e838bb68eedbab18/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/754487e200deb9fad3399556e838bb68eedbab18/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=754487e200deb9fad3399556e838bb68eedbab18",
      "patch": "@@ -79,6 +79,7 @@\n #include <algorithm>\n #include <unordered_map>\n #include \"async-event.h\"\n+#include \"gdbsupport/selftest.h\"\n \n /* The remote target.  */\n \n@@ -14620,6 +14621,92 @@ remote_target::store_memtags (CORE_ADDR address, size_t len,\n   return packet_check_result (rs->buf.data ()) == PACKET_OK;\n }\n \n+#if GDB_SELF_TEST\n+\n+namespace selftests {\n+\n+static void\n+test_memory_tagging_functions ()\n+{\n+  remote_target remote;\n+\n+  struct packet_config *config\n+    = &remote_protocol_packets[PACKET_memory_tagging_feature];\n+\n+  scoped_restore restore_memtag_support_\n+    = make_scoped_restore (&config->support);\n+\n+  /* Test memory tagging packet support.  */\n+  config->support = PACKET_SUPPORT_UNKNOWN;\n+  SELF_CHECK (remote.supports_memory_tagging () == false);\n+  config->support = PACKET_DISABLE;\n+  SELF_CHECK (remote.supports_memory_tagging () == false);\n+  config->support = PACKET_ENABLE;\n+  SELF_CHECK (remote.supports_memory_tagging () == true);\n+\n+  /* Setup testing.  */\n+  gdb::char_vector packet;\n+  gdb::byte_vector tags, bv;\n+  std::string expected, reply;\n+  packet.resize (32000);\n+\n+  /* Test creating a qMemTags request.  */\n+\n+  expected = \"qMemTags:0,0:0\";\n+  create_fetch_memtags_request (packet, 0x0, 0x0, 0);\n+  SELF_CHECK (strcmp (packet.data (), expected.c_str ()) == 0);\n+\n+  expected = \"qMemTags:deadbeef,10:1\";\n+  create_fetch_memtags_request (packet, 0xdeadbeef, 16, 1);\n+  SELF_CHECK (strcmp (packet.data (), expected.c_str ()) == 0);\n+\n+  /* Test parsing a qMemTags reply.  */\n+\n+  /* Error reply, tags vector unmodified.  */\n+  reply = \"E00\";\n+  strcpy (packet.data (), reply.c_str ());\n+  tags.resize (0);\n+  SELF_CHECK (parse_fetch_memtags_reply (packet, tags) == false);\n+  SELF_CHECK (tags.size () == 0);\n+\n+  /* Valid reply, tags vector updated.  */\n+  tags.resize (0);\n+  bv.resize (0);\n+\n+  for (int i = 0; i < 5; i++)\n+    bv.push_back (i);\n+\n+  reply = \"m\" + bin2hex (bv.data (), bv.size ());\n+  strcpy (packet.data (), reply.c_str ());\n+\n+  SELF_CHECK (parse_fetch_memtags_reply (packet, tags) == true);\n+  SELF_CHECK (tags.size () == 5);\n+\n+  for (int i = 0; i < 5; i++)\n+    SELF_CHECK (tags[i] == i);\n+\n+  /* Test creating a QMemTags request.  */\n+\n+  /* Empty tag data.  */\n+  tags.resize (0);\n+  expected = \"QMemTags:0,0:0:\";\n+  create_store_memtags_request (packet, 0x0, 0x0, 0, tags);\n+  SELF_CHECK (memcmp (packet.data (), expected.c_str (),\n+\t\t      expected.length ()) == 0);\n+\n+  /* Non-empty tag data.  */\n+  tags.resize (0);\n+  for (int i = 0; i < 5; i++)\n+    tags.push_back (i);\n+  expected = \"QMemTags:deadbeef,ff:1:0001020304\";\n+  create_store_memtags_request (packet, 0xdeadbeef, 255, 1, tags);\n+  SELF_CHECK (memcmp (packet.data (), expected.c_str (),\n+\t\t      expected.length ()) == 0);\n+}\n+\n+} // namespace selftests\n+#endif /* GDB_SELF_TEST */\n+\n void _initialize_remote ();\n void\n _initialize_remote ()\n@@ -15153,4 +15240,9 @@ from the target.\"),\n \n   /* Eventually initialize fileio.  See fileio.c */\n   initialize_remote_fileio (&remote_set_cmdlist, &remote_show_cmdlist);\n+\n+#if GDB_SELF_TEST\n+  selftests::register_test (\"remote_memory_tagging\",\n+\t\t\t    selftests::test_memory_tagging_functions);\n+#endif\n }"
    }
  ]
}