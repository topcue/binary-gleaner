{
  "sha": "0490dd41ae89e66efd8b3cee122c189a481269de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQ5MGRkNDFhZTg5ZTY2ZWZkOGIzY2VlMTIyYzE4OWE0ODEyNjlkZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-21T14:04:58Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-21T14:09:36Z"
    },
    "message": "Re: PR25993, read of freed memory\n\ngit commit 7b958a48e132 put the bfd filename in the bfd objalloc\nmemory.  That means the filename is freed by _bfd_free_cached_info.\nWhich is called by _bfd_compute_and_write_armap to tidy up symbol\ntables after they are done with.\n\nUnfortunately, _bfd_write_archive_contents wants to seek and read from\narchive elements after that point, and if the number of elements\nexceeds max_open_files in cache.c then some of those elements will\nhave their files closed.  To reopen, you need the filename.\n\n\tPR 25993\n\t* opncls.c (_bfd_free_cached_info): Keep a copy of the bfd\n\tfilename.\n\t(_bfd_delete_bfd): Free the copy.\n\t(_bfd_new_bfd): Free nbfd->memory on error.",
    "tree": {
      "sha": "ea591291023428f54453f894bfb51aa4daa961f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea591291023428f54453f894bfb51aa4daa961f2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0490dd41ae89e66efd8b3cee122c189a481269de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0490dd41ae89e66efd8b3cee122c189a481269de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0490dd41ae89e66efd8b3cee122c189a481269de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0490dd41ae89e66efd8b3cee122c189a481269de/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d96bf37ba8360320db4d531008634b3f61af06f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d96bf37ba8360320db4d531008634b3f61af06f5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d96bf37ba8360320db4d531008634b3f61af06f5"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 34,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3dc0356928ad6a3a06cbc5c9f3fa4d134e725b18",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0490dd41ae89e66efd8b3cee122c189a481269de/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0490dd41ae89e66efd8b3cee122c189a481269de/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=0490dd41ae89e66efd8b3cee122c189a481269de",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-21  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25993\n+\t* opncls.c (_bfd_free_cached_info): Keep a copy of the bfd\n+\tfilename.\n+\t(_bfd_delete_bfd): Free the copy.\n+\t(_bfd_new_bfd): Free nbfd->memory on error.\n+\n 2020-05-21  Alan Modra  <amodra@gmail.com>\n \n \t* aoutx.h: Replace \"if (x) free (x)\" with \"free (x)\" throughout."
    },
    {
      "sha": "c2a1d2fa4df13d649ac6a0c7545766105d800085",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0490dd41ae89e66efd8b3cee122c189a481269de/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0490dd41ae89e66efd8b3cee122c189a481269de/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=0490dd41ae89e66efd8b3cee122c189a481269de",
      "patch": "@@ -84,6 +84,7 @@ _bfd_new_bfd (void)\n   if (!bfd_hash_table_init_n (& nbfd->section_htab, bfd_section_hash_newfunc,\n \t\t\t      sizeof (struct section_hash_entry), 13))\n     {\n+      objalloc_free ((struct objalloc *) nbfd->memory);\n       free (nbfd);\n       return NULL;\n     }\n@@ -125,6 +126,8 @@ _bfd_delete_bfd (bfd *abfd)\n       bfd_hash_table_free (&abfd->section_htab);\n       objalloc_free ((struct objalloc *) abfd->memory);\n     }\n+  else\n+    free ((char *) bfd_get_filename (abfd));\n \n   free (abfd->arelt_data);\n   free (abfd);\n@@ -137,6 +140,29 @@ _bfd_free_cached_info (bfd *abfd)\n {\n   if (abfd->memory)\n     {\n+      const char *filename = bfd_get_filename (abfd);\n+      if (filename)\n+\t{\n+\t  /* We can't afford to lose the bfd filename when freeing\n+\t     abfd->memory, because that would kill the cache.c scheme\n+\t     of closing and reopening files in order to limit the\n+\t     number of open files.  To reopen, you need the filename.\n+\t     And indeed _bfd_compute_and_write_armap calls\n+\t     _bfd_free_cached_info to free up space used by symbols\n+\t     and by check_format_matches.  Which we want to continue\n+\t     doing to handle very large archives.  Later the archive\n+\t     elements are copied, which might require reopening files.\n+\t     We also want to keep using objalloc memory for the\n+\t     filename since that allows the name to be updated\n+\t     without either leaking memory or implementing some sort\n+\t     of reference counted string for copies of the filename.  */\n+\t  size_t len = strlen (filename) + 1;\n+\t  char *copy = bfd_malloc (len);\n+\t  if (copy == NULL)\n+\t    return FALSE;\n+\t  memcpy (copy, filename, len);\n+\t  abfd->filename = copy;\n+\t}\n       bfd_hash_table_free (&abfd->section_htab);\n       objalloc_free ((struct objalloc *) abfd->memory);\n "
    }
  ]
}