{
  "sha": "6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmFlNjE0ZjY2YTBhODZjOWU4M2I5ZjQwZWUxZjRlMTA1YjY4MWY3Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-21T15:25:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:46Z"
    },
    "message": "Convert break-catch-syscall.c to type-safe registry API\n\nThis changes break-catch-syscall.c to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* break-catch-syscall.c (catch_syscall_inferior_data): Move.\n\tChange type.\n\t(get_catch_syscall_inferior_data): Update.\n\t(catch_syscall_inferior_data_cleanup): Remove.\n\t(_initialize_break_catch_syscall): Update.",
    "tree": {
      "sha": "fbf4c0e194ae46b0b6a82812d543faf31a5d7b73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fbf4c0e194ae46b0b6a82812d543faf31a5d7b73"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6509b8ebfb19769d726c16eb3a8967ac6784f621",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6509b8ebfb19769d726c16eb3a8967ac6784f621",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6509b8ebfb19769d726c16eb3a8967ac6784f621"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 13,
    "deletions": 20
  },
  "files": [
    {
      "sha": "0c5fe7c804db912162f46f88e57ec062ecdb4044",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* break-catch-syscall.c (catch_syscall_inferior_data): Move.\n+\tChange type.\n+\t(get_catch_syscall_inferior_data): Update.\n+\t(catch_syscall_inferior_data_cleanup): Remove.\n+\t(_initialize_break_catch_syscall): Update.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* inflow.c (struct terminal_info): Add destructor and"
    },
    {
      "sha": "cd4870f7f5125e26f537a8dec64ddbbe61144c78",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 5,
      "deletions": 20,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=6ae614f66a0a86c9e83b9f40ee1f4e105b681f7b",
      "patch": "@@ -42,8 +42,6 @@ struct syscall_catchpoint : public breakpoint\n   std::vector<int> syscalls_to_be_caught;\n };\n \n-static const struct inferior_data *catch_syscall_inferior_data = NULL;\n-\n struct catch_syscall_inferior_data\n {\n   /* We keep a count of the number of times the user has requested a\n@@ -61,31 +59,21 @@ struct catch_syscall_inferior_data\n   int total_syscalls_count;\n };\n \n+static const struct inferior_key<struct catch_syscall_inferior_data>\n+  catch_syscall_inferior_data;\n+\n static struct catch_syscall_inferior_data *\n get_catch_syscall_inferior_data (struct inferior *inf)\n {\n   struct catch_syscall_inferior_data *inf_data;\n \n-  inf_data = ((struct catch_syscall_inferior_data *)\n-\t      inferior_data (inf, catch_syscall_inferior_data));\n+  inf_data = catch_syscall_inferior_data.get (inf);\n   if (inf_data == NULL)\n-    {\n-      inf_data = new struct catch_syscall_inferior_data ();\n-      set_inferior_data (inf, catch_syscall_inferior_data, inf_data);\n-    }\n+    inf_data = catch_syscall_inferior_data.emplace (inf);\n \n   return inf_data;\n }\n \n-static void\n-catch_syscall_inferior_data_cleanup (struct inferior *inf, void *arg)\n-{\n-  struct catch_syscall_inferior_data *inf_data\n-    = (struct catch_syscall_inferior_data *) arg;\n-  delete inf_data;\n-}\n-\n-\n /* Implement the \"insert\" breakpoint_ops method for syscall\n    catchpoints.  */\n \n@@ -617,9 +605,6 @@ _initialize_break_catch_syscall (void)\n   initialize_syscall_catchpoint_ops ();\n \n   gdb::observers::inferior_exit.attach (clear_syscall_counts);\n-  catch_syscall_inferior_data\n-    = register_inferior_data_with_cleanup (NULL,\n-\t\t\t\t\t   catch_syscall_inferior_data_cleanup);\n \n   add_catch_command (\"syscall\", _(\"\\\n Catch system calls by their names, groups and/or numbers.\\n\\"
    }
  ]
}