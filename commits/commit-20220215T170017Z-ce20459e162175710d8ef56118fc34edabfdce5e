{
  "sha": "ce20459e162175710d8ef56118fc34edabfdce5e",
  "node_id": "C_kwDOANOeidoAKGNlMjA0NTllMTYyMTc1NzEwZDhlZjU2MTE4ZmMzNGVkYWJmZGNlNWU",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-02-15T17:00:17Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-02-15T17:00:17Z"
    },
    "message": "x86: Add has_sib to struct instr_info\n\nAdd has_sib to struct instr_info and use SIB info only if ins->has_sib\nis true.\n\n\tPR binutils/28892\n\t* i386-dis.c (instr_info): Add has_sib.\n\t(get_sib): Set has_sib.\n\t(OP_E_memory): Replace havesib with ins->has_sib.\n\t(OP_VEX): Use ins->sib.index only if ins->has_sib is true.",
    "tree": {
      "sha": "a4c34abf6a2d46aa15ead0f1f19cd2e012e9c453",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4c34abf6a2d46aa15ead0f1f19cd2e012e9c453"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ce20459e162175710d8ef56118fc34edabfdce5e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce20459e162175710d8ef56118fc34edabfdce5e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ce20459e162175710d8ef56118fc34edabfdce5e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce20459e162175710d8ef56118fc34edabfdce5e/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0b35f123c200522998a81335dc218551ca7b3d92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b35f123c200522998a81335dc218551ca7b3d92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0b35f123c200522998a81335dc218551ca7b3d92"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 9,
    "deletions": 8
  },
  "files": [
    {
      "sha": "a30bda0633bb3f089edd8530f8a5f7e1c1bf6164",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ce20459e162175710d8ef56118fc34edabfdce5e/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ce20459e162175710d8ef56118fc34edabfdce5e/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=ce20459e162175710d8ef56118fc34edabfdce5e",
      "patch": "@@ -153,6 +153,7 @@ struct instr_info\n \n   bool need_modrm;\n   bool need_vex;\n+  bool has_sib;\n \n   /* Flags for ins->prefixes which we somehow handled when printing the\n      current instruction.  */\n@@ -9291,7 +9292,10 @@ get_sib (instr_info *ins, int sizeflag)\n       ins->sib.index = (ins->codep[1] >> 3) & 7;\n       ins->sib.scale = (ins->codep[1] >> 6) & 3;\n       ins->sib.base = ins->codep[1] & 7;\n+      ins->has_sib = true;\n     }\n+  else\n+    ins->has_sib = false;\n }\n \n /* Like oappend (below), but S is a string starting with '%'.\n@@ -11396,7 +11400,6 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n     {\n       /* 32/64 bit address mode */\n       int havedisp;\n-      int havesib;\n       int havebase;\n       int needindex;\n       int needaddr32;\n@@ -11411,13 +11414,11 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n       bool check_gather = false;\n       const char *const *indexes = NULL;\n \n-      havesib = 0;\n       havebase = 1;\n       base = ins->modrm.rm;\n \n       if (base == 4)\n \t{\n-\t  havesib = 1;\n \t  vindex = ins->sib.index;\n \t  USED_REX (REX_X);\n \t  if (ins->rex & REX_X)\n@@ -11487,7 +11488,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t  if (base == 5)\n \t    {\n \t      havebase = 0;\n-\t      if (ins->address_mode == mode_64bit && !havesib)\n+\t      if (ins->address_mode == mode_64bit && !ins->has_sib)\n \t\triprel = 1;\n \t      disp = get32s (ins);\n \t      if (riprel && bytemode == v_bndmk_mode)\n@@ -11512,7 +11513,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \n       needindex = 0;\n       needaddr32 = 0;\n-      if (havesib\n+      if (ins->has_sib\n \t  && !havebase\n \t  && !indexes\n \t  && ins->address_mode != mode_16bit)\n@@ -11538,7 +11539,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \n       havedisp = (havebase\n \t\t  || needindex\n-\t\t  || (havesib && (indexes || scale != 0)));\n+\t\t  || (ins->has_sib && (indexes || scale != 0)));\n \n       if (!ins->intel_syntax)\n \tif (ins->modrm.mod != 0 || base == 5)\n@@ -11576,7 +11577,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t    oappend_maybe_intel (ins,\n \t\t\t\t (ins->address_mode == mode_64bit && !addr32flag\n \t\t\t\t  ? att_names64 : att_names32)[rbase]);\n-\t  if (havesib)\n+\t  if (ins->has_sib)\n \t    {\n \t      /* ESP/RSP won't allow index.  If base isn't ESP/RSP,\n \t\t print index to tell base + index from base.  */\n@@ -13190,7 +13191,7 @@ OP_VEX (instr_info *ins, int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n       if (ins->rex & REX_R)\n \tmodrm_reg += 8;\n \n-      if (ins->modrm.rm == 4)\n+      if (ins->has_sib && ins->modrm.rm == 4)\n \t{\n \t  sib_index = ins->sib.index;\n \t  if (ins->rex & REX_X)"
    }
  ]
}