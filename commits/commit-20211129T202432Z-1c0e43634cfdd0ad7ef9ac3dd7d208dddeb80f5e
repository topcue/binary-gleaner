{
  "sha": "1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
  "node_id": "C_kwDOANOeidoAKDFjMGU0MzYzNGNmZGQwYWQ3ZWY5YWMzZGQ3ZDIwOGRkZGViODBmNWU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-10-31T16:34:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-11-29T20:24:32Z"
    },
    "message": "Allow DW_ATE_UTF for Rust characters\n\nThe Rust compiler plans to change the encoding of a Rust 'char' type\nto use DW_ATE_UTF.  You can see the discussion here:\n\n    https://github.com/rust-lang/rust/pull/89887\n\nHowever, this fails in gdb.  I looked into this, and it turns out that\nthe handling of DW_ATE_UTF is currently fairly specific to C++.  In\nparticular, the code here assumes the C++ type names, and it creates\nan integer type.\n\nThis comes from commit 53e710acd (\"GDB thinks char16_t and char32_t\nare signed in C++\").  The message says:\n\n    Both places need fixing.  But since I couldn't tell why dwarf2read.c\n    needs to create a new type, I've made it use the per-arch built-in\n    types instead, so that the types are only created once per arch\n    instead of once per objfile.  That seems to work fine.\n\n... which is fine, but it seems to me that it's also correct to make a\nnew character type; and this approach is better because it preserves\nthe type name as well.  This does use more memory, but first we\nshouldn't be too concerned about the memory use of types coming from\ndebuginfo; and second, if we are, we should implement type interning\nanyway.\n\nChanging this code to use a character type revealed a couple of\noddities in the C/C++ handling of TYPE_CODE_CHAR.  This patch fixes\nthese as well.\n\nI filed PR rust/28637 for this issue, so that this patch can be\nbackported to the gdb 11 branch.",
    "tree": {
      "sha": "752e7aeb98cd6cef4158c9a8a7ca786ac4f6cae7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/752e7aeb98cd6cef4158c9a8a7ca786ac4f6cae7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b9db26b4c44245c0b0148ef9e711677d4e664f9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9db26b4c44245c0b0148ef9e711677d4e664f9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b9db26b4c44245c0b0148ef9e711677d4e664f9f"
    }
  ],
  "stats": {
    "total": 88,
    "additions": 75,
    "deletions": 13
  },
  "files": [
    {
      "sha": "6c6d1603d463887cfc0a59c691b211bf2723e529",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
      "patch": "@@ -88,7 +88,7 @@ classify_type (struct type *elttype, struct gdbarch *gdbarch,\n     {\n       const char *name = elttype->name ();\n \n-      if (elttype->code () == TYPE_CODE_CHAR || !name)\n+      if (name == nullptr)\n \t{\n \t  result = C_CHAR;\n \t  goto done;"
    },
    {
      "sha": "feca0a7b227cb5fe5beb0d3ca2ba971a931317d7",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
      "patch": "@@ -438,6 +438,7 @@ c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n       c_value_print_struct (val, stream, recurse, options);\n       break;\n \n+    case TYPE_CODE_CHAR:\n     case TYPE_CODE_INT:\n       c_value_print_int (val, stream, options);\n       break;\n@@ -458,7 +459,6 @@ c_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n     case TYPE_CODE_ERROR:\n     case TYPE_CODE_UNDEF:\n     case TYPE_CODE_COMPLEX:\n-    case TYPE_CODE_CHAR:\n     default:\n       generic_value_print (val, stream, recurse, options, &c_decorations);\n       break;"
    },
    {
      "sha": "57538fc0adf9d67c7c476bbdbdf18169936dd384",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
      "patch": "@@ -18261,16 +18261,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \tbreak;\n       case DW_ATE_UTF:\n \t{\n-\t  if (bits == 16)\n-\t    type = builtin_type (arch)->builtin_char16;\n-\t  else if (bits == 32)\n-\t    type = builtin_type (arch)->builtin_char32;\n-\t  else\n-\t    {\n-\t      complaint (_(\"unsupported DW_ATE_UTF bit size: '%d'\"),\n-\t\t\t bits);\n-\t      type = dwarf2_init_integer_type (cu, objfile, bits, 1, name);\n-\t    }\n+\t  type = init_character_type (objfile, bits, 1, name);\n \t  return set_die_type (die, type, cu);\n \t}\n \tbreak;\n@@ -18290,7 +18281,9 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \tbreak;\n     }\n \n-  if (name && strcmp (name, \"char\") == 0)\n+  if (type->code () == TYPE_CODE_INT\n+      && name != nullptr\n+      && strcmp (name, \"char\") == 0)\n     type->set_has_no_signedness (true);\n \n   maybe_set_alignment (cu, die, type);"
    },
    {
      "sha": "3a2d944dd6e69bc79cafb1551e674b6da1fbc5a3",
      "filename": "gdb/testsuite/gdb.dwarf2/utf-rust.exp",
      "status": "added",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/testsuite/gdb.dwarf2/utf-rust.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e/gdb/testsuite/gdb.dwarf2/utf-rust.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/utf-rust.exp?ref=1c0e43634cfdd0ad7ef9ac3dd7d208dddeb80f5e",
      "patch": "@@ -0,0 +1,69 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test DW_ATE_UTF for Rust.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use\n+# gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile main.c .S\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    upvar cu_lang cu_lang\n+\n+    declare_labels char_label\n+\n+    # Creating a CU with 4-byte addresses lets this test link on\n+    # both 32- and 64-bit machines.\n+    cu { addr_size 4 } {\n+\tcompile_unit {\n+\t    {name file1.txt}\n+\t    {language @DW_LANG_Rust}\n+\t} {\n+            char_label: DW_TAG_base_type {\n+                {DW_AT_byte_size 4 DW_FORM_sdata}\n+                {DW_AT_encoding @DW_ATE_UTF}\n+                {DW_AT_name char}\n+            }\n+\n+\t    DW_TAG_variable {\n+\t\t{name cvalue}\n+\t\t{type :$char_label}\n+\t\t{const_value 97 DW_FORM_udata}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t [list $srcfile $asm_file] debug]} {\n+    return -1\n+}\n+\n+if {![runto main]} {\n+    return -1\n+}\n+\n+gdb_test \"set language rust\" \\\n+    \"Warning: the current language does not match this frame.\"\n+# Get the values into history so we can use it from Rust.\n+gdb_test \"print cvalue\" \"\\\\\\$1 = 97 'a'\""
    }
  ]
}