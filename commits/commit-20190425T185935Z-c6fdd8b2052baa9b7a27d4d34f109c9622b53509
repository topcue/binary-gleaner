{
  "sha": "c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzZmZGQ4YjIwNTJiYWE5YjdhMjdkNGQzNGYxMDljOTYyMmI1MzUwOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-23T13:29:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-25T18:59:35Z"
    },
    "message": "Make SJLJ exceptions more efficient\n\nThis changes the SJLJ exception handling code to be a bit more\nefficient, by using rvalue references and move assignment when\npossible.\n\nTested by the buildbot.\n\ngdb/ChangeLog\n2019-04-25  Tom Tromey  <tromey@adacore.com>\n\n\t* event-top.c (gdb_rl_callback_read_char_wrapper_noexcept)\n\t(gdb_rl_callback_handler): Use std::move.\n\t* common/common-exceptions.h (struct gdb_exception): Add move\n\tassignment operator.\n\t(throw_exception_sjlj): Change \"exception\" to const reference.\n\t* common/common-exceptions.c (exceptions_state_mc_catch): Update.\n\t(throw_exception_sjlj): Change \"exception\" to const reference.",
    "tree": {
      "sha": "98fecba5793b6509802d1f653f4f5c8f46ee3463",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98fecba5793b6509802d1f653f4f5c8f46ee3463"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cc06b668978e542ecbc2aff1beca40e5baff86b0"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 19,
    "deletions": 6
  },
  "files": [
    {
      "sha": "809df468443cdf6dc0ad05b648e8dfcacc6b5761",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* event-top.c (gdb_rl_callback_read_char_wrapper_noexcept)\n+\t(gdb_rl_callback_handler): Use std::move.\n+\t* common/common-exceptions.h (struct gdb_exception): Add move\n+\tassignment operator.\n+\t(throw_exception_sjlj): Change \"exception\" to const reference.\n+\t* common/common-exceptions.c (exceptions_state_mc_catch): Update.\n+\t(throw_exception_sjlj): Change \"exception\" to const reference.\n+\n 2019-04-25  Tom Tromey  <tromey@adacore.com>\n \n \t* xml-support.c (gdb_xml_parser::gdb_xml_parser): Update."
    },
    {
      "sha": "0b96cc679da5a3609e8e082dc7ec22275168fb09",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
      "patch": "@@ -166,14 +166,15 @@ exceptions_state_mc_action_iter_1 (void)\n /* Return EXCEPTION to the nearest containing CATCH_SJLJ block.  */\n \n void\n-throw_exception_sjlj (struct gdb_exception exception)\n+throw_exception_sjlj (const struct gdb_exception &exception)\n {\n   /* Jump to the nearest CATCH_SJLJ block, communicating REASON to\n      that call via setjmp's return value.  Note that REASON can't be\n      zero, by definition in common-exceptions.h.  */\n   exceptions_state_mc (CATCH_THROWING);\n+  enum return_reason reason = exception.reason;\n   catchers.front ().exception = exception;\n-  longjmp (catchers.front ().buf, exception.reason);\n+  longjmp (catchers.front ().buf, reason);\n }\n \n /* Implementation of throw_exception that uses C++ try/catch.  */"
    },
    {
      "sha": "d7b25502262e671e1c965699f4072d2a330b6062",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
      "patch": "@@ -152,6 +152,8 @@ struct gdb_exception\n     return *this;\n   }\n \n+  gdb_exception &operator= (gdb_exception &&other) noexcept = default;\n+\n   /* Return the contents of the exception message, as a C string.  The\n      string remains owned by the exception object.  */\n   const char *what () const noexcept\n@@ -281,7 +283,7 @@ extern void throw_exception (const gdb_exception &exception)\n    containing exception handler established using TRY_SJLJ.  Necessary\n    in some cases where we need to throw GDB exceptions across\n    third-party library code (e.g., readline).  */\n-extern void throw_exception_sjlj (struct gdb_exception exception)\n+extern void throw_exception_sjlj (const struct gdb_exception &exception)\n      ATTRIBUTE_NORETURN;\n \n /* Convenience wrappers around throw_exception that throw GDB"
    },
    {
      "sha": "bb8ba5cfe5779747f59d95db40280c4faba3a4b1",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6fdd8b2052baa9b7a27d4d34f109c9622b53509/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=c6fdd8b2052baa9b7a27d4d34f109c9622b53509",
      "patch": "@@ -178,7 +178,7 @@ gdb_rl_callback_read_char_wrapper_noexcept () noexcept\n     }\n   CATCH_SJLJ (ex, RETURN_MASK_ALL)\n     {\n-      gdb_expt = ex;\n+      gdb_expt = std::move (ex);\n     }\n   END_CATCH_SJLJ\n \n@@ -212,9 +212,9 @@ gdb_rl_callback_handler (char *rl) noexcept\n     {\n       ui->input_handler (gdb::unique_xmalloc_ptr<char> (rl));\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      gdb_rl_expt = ex;\n+      gdb_rl_expt = std::move (ex);\n     }\n \n   /* If we caught a GDB exception, longjmp out of the readline"
    }
  ]
}