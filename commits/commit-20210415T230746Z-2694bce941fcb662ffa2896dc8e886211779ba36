{
  "sha": "2694bce941fcb662ffa2896dc8e886211779ba36",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjY5NGJjZTk0MWZjYjY2MmZmYTI4OTZkYzhlODg2MjExNzc5YmEzNg==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-04-15T23:03:15Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-04-15T23:07:46Z"
    },
    "message": "sim erc32: Add include path for readline.\n\nAdd a READLINE_CFLAGS variable which adds the include path to the\nin-tree readline when using the in-tree readline library.\n\nsim/erc32/ChangeLog:\n\n\t* Makefile.in (READLINE_SRC, READLINE_CFLAGS): Add.\n\t(SIM_EXTRA_CFLAGS): Add READLINE_CFLAGS.\n\t* configure: Rebuild.\n\t* configure.ac (READLINE_CFLAGS): Add.",
    "tree": {
      "sha": "11164a14a8206c70806391fe5392882adb48d00e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/11164a14a8206c70806391fe5392882adb48d00e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2694bce941fcb662ffa2896dc8e886211779ba36",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2694bce941fcb662ffa2896dc8e886211779ba36",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2694bce941fcb662ffa2896dc8e886211779ba36",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2694bce941fcb662ffa2896dc8e886211779ba36/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32b14776a020a336a574328cabf5a21387dbc180",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32b14776a020a336a574328cabf5a21387dbc180",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32b14776a020a336a574328cabf5a21387dbc180"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 21,
    "deletions": 3
  },
  "files": [
    {
      "sha": "389884bacb8c282a91e3b31569acdebd25c7ddbf",
      "filename": "sim/erc32/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/ChangeLog?ref=2694bce941fcb662ffa2896dc8e886211779ba36",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-15  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* Makefile.in (READLINE_SRC, READLINE_CFLAGS): Add.\n+\t(SIM_EXTRA_CFLAGS): Add READLINE_CFLAGS.\n+\t* configure: Rebuild.\n+\t* configure.ac (READLINE_CFLAGS): Add.\n+\n 2021-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* func.c: Include sys/time.h."
    },
    {
      "sha": "f52daf740dd5c242a5c24fd2cb7fffa0cfaab998",
      "filename": "sim/erc32/Makefile.in",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/Makefile.in?ref=2694bce941fcb662ffa2896dc8e886211779ba36",
      "patch": "@@ -19,18 +19,22 @@\n ## COMMON_PRE_CONFIG_FRAG\n \n TERMCAP_LIB = @TERMCAP@\n+\n+READLINE_SRC = $(srcroot)/readline/readline\n READLINE_LIB = @READLINE@\n+READLINE_CFLAGS = @READLINE_CFLAGS@\n \n SIM_OBJS = exec.o erc32.o func.o help.o float.o interf.o\n SIM_RUN_OBJS = sis.o\n+SIM_EXTRA_CFLAGS = $(READLINE_CFLAGS)\n SIM_EXTRA_LIBS = $(READLINE_LIB) $(TERMCAP_LIB) -lm\n SIM_EXTRA_INSTALL = install-sis\n SIM_EXTRA_CLEAN = clean-sis\n \n # UARTS run at about 115200 baud (simulator time). Add -DFAST_UART to\n # CFLAGS if faster (infinite) UART speed is desired. Might affect the\n # behaviour of UART interrupt routines ...\n-SIM_EXTRA_CFLAGS = -DFAST_UART -I$(srcroot)\n+SIM_EXTRA_CFLAGS += -DFAST_UART -I$(srcroot)\n \n ## COMMON_POST_CONFIG_FRAG\n "
    },
    {
      "sha": "548b11cf4edab64bc3648de61d039f85a84fcb58",
      "filename": "sim/erc32/configure",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/configure?ref=2694bce941fcb662ffa2896dc8e886211779ba36",
      "patch": "@@ -642,6 +642,7 @@ sim_endian\n sim_bitsize\n sim_alignment\n cgen_breaks\n+READLINE_CFLAGS\n READLINE\n TERMCAP\n REPORT_BUGS_TEXI\n@@ -11227,7 +11228,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11230 \"configure\"\n+#line 11231 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11333,7 +11334,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11336 \"configure\"\n+#line 11337 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12071,6 +12072,7 @@ fi\n # src/readline (if it's there) is configured before src/sim.\n if test -r ../../readline/Makefile; then\n   READLINE=../../readline/readline/libreadline.a\n+  READLINE_CFLAGS='-I$(READLINE_SRC)/..'\n else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for readline in -lreadline\" >&5\n $as_echo_n \"checking for readline in -lreadline... \" >&6; }\n@@ -12114,9 +12116,11 @@ else\n   as_fn_error $? \"the required \\\"readline\\\" library is missing\" \"$LINENO\" 5\n fi\n \n+  READLINE_CFLAGS=\n fi\n \n \n+\n cgen_breaks=\"\"\n if grep CGEN_MAINT $srcdir/Makefile.in >/dev/null; then\n cgen_breaks=\"break cgen_rtx_error\";"
    },
    {
      "sha": "cf7ec5fdb8033e7f80be0af6c585961d4293c722",
      "filename": "sim/erc32/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2694bce941fcb662ffa2896dc8e886211779ba36/sim/erc32/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/configure.ac?ref=2694bce941fcb662ffa2896dc8e886211779ba36",
      "patch": "@@ -39,9 +39,12 @@ AC_SUBST(TERMCAP)\n # src/readline (if it's there) is configured before src/sim.\n if test -r ../../readline/Makefile; then\n   READLINE=../../readline/readline/libreadline.a\n+  READLINE_CFLAGS='-I$(READLINE_SRC)/..'\n else\n   AC_CHECK_LIB(readline, readline, READLINE=-lreadline,\n \t       AC_ERROR([the required \"readline\" library is missing]), $TERMCAP)\n+  READLINE_CFLAGS=\n fi\n AC_SUBST(READLINE)\n+AC_SUBST(READLINE_CFLAGS)\n SIM_AC_OUTPUT"
    }
  ]
}