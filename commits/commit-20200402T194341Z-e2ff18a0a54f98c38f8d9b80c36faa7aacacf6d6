{
  "sha": "e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTJmZjE4YTBhNTRmOThjMzhmOGQ5YjgwYzM2ZmFhN2FhY2FjZjZkNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-04-02T19:43:41Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-04-02T19:43:41Z"
    },
    "message": "gdb: replace some calls to internal_error with gdb_assert\n\nThere are a few spots using the pattern:\n\n  if (condition)\n    internal_error (__FILE__, __LINE__,\n\t\t    _(\"failed internal consistency check\"));\n\nThe message brings no value, since it's pretty the description of a\nfailed assertion.  Replace a few of these that are obvious with\ngdb_assert.\n\ngdb/ChangeLog:\n\n\t* exec.c (build_section_table): Replace internal_error with\n\tgdb_assert.\n\t(section_table_xfer_memory_partial): Likewise.\n\t* mdebugread.c (parse_partial_symbols): Likewise.\n\t* psymtab.c (lookup_partial_symbol): Likewise.\n\t* utils.c (wrap_here): Likewise.",
    "tree": {
      "sha": "5959139d65e073812e1623aad0c4547323758cb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5959139d65e073812e1623aad0c4547323758cb8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0830d301901d225403eaf6629c20a6c09f3ec8f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0830d301901d225403eaf6629c20a6c09f3ec8f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0830d301901d225403eaf6629c20a6c09f3ec8f6"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 21,
    "deletions": 18
  },
  "files": [
    {
      "sha": "b3ec9c78b07edd40b1cad13ced9f76fa53d33987",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "patch": "@@ -1,3 +1,12 @@\n+2020-04-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* exec.c (build_section_table): Replace internal_error with\n+\tgdb_assert.\n+\t(section_table_xfer_memory_partial): Likewise.\n+\t* mdebugread.c (parse_partial_symbols): Likewise.\n+\t* psymtab.c (lookup_partial_symbol): Likewise.\n+\t* utils.c (wrap_here): Likewise.\n+\n 2020-04-02  Tom Tromey  <tromey@adacore.com>\n \n \t* f-lang.c (build_fortran_types): Use arch_type to initialize"
    },
    {
      "sha": "c885709c94e450ab78cca1a279ea500f29be3335",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "patch": "@@ -619,9 +619,9 @@ build_section_table (struct bfd *some_bfd, struct target_section **start,\n   *start = XNEWVEC (struct target_section, count);\n   *end = *start;\n   bfd_map_over_sections (some_bfd, add_to_section_table, (char *) end);\n-  if (*end > *start + count)\n-    internal_error (__FILE__, __LINE__,\n-\t\t    _(\"failed internal consistency check\"));\n+\n+  gdb_assert (*end <= *start + count);\n+\n   /* We could realloc the table, but it probably loses for most files.  */\n   return 0;\n }\n@@ -916,9 +916,7 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n   ULONGEST memaddr = offset;\n   ULONGEST memend = memaddr + len;\n \n-  if (len == 0)\n-    internal_error (__FILE__, __LINE__,\n-\t\t    _(\"failed internal consistency check\"));\n+  gdb_assert (len != 0);\n \n   for (p = sections; p < sections_end; p++)\n     {"
    },
    {
      "sha": "5dfd80de1923b53e37000074f24b9b337f45da3a",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "patch": "@@ -3576,9 +3576,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t      CORE_ADDR svalue;\n \t      short section;\n \n-\t      if (ext_ptr->ifd != f_idx)\n-\t\tinternal_error (__FILE__, __LINE__,\n-\t\t\t\t_(\"failed internal consistency check\"));\n+\t      gdb_assert (ext_ptr->ifd == f_idx);\n+\n \t      psh = &ext_ptr->asym;\n \n \t      /* Do not add undefined symbols to the partial symbol table.  */"
    },
    {
      "sha": "129eecb067119291bd98aea86355831d8ab13867",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "patch": "@@ -683,9 +683,9 @@ lookup_partial_symbol (struct objfile *objfile,\n       while (top > bottom)\n \t{\n \t  center = bottom + (top - bottom) / 2;\n-\t  if (!(center < top))\n-\t    internal_error (__FILE__, __LINE__,\n-\t\t\t    _(\"failed internal consistency check\"));\n+\n+\t  gdb_assert (center < top);\n+\n \t  if (strcmp_iw_ordered ((*center)->ginfo.search_name (),\n \t\t\t\t lookup_name.c_str ()) >= 0)\n \t    {\n@@ -696,9 +696,8 @@ lookup_partial_symbol (struct objfile *objfile,\n \t      bottom = center + 1;\n \t    }\n \t}\n-      if (!(top == bottom))\n-\tinternal_error (__FILE__, __LINE__,\n-\t\t\t_(\"failed internal consistency check\"));\n+\n+      gdb_assert (top == bottom);\n \n       /* For `case_sensitivity == case_sensitive_off' strcmp_iw_ordered will\n \t search more exactly than what matches SYMBOL_MATCHES_SEARCH_NAME.  */"
    },
    {
      "sha": "bda6bbf5b0e777e859c94dc23c68bb5bdb9024e1",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "patch": "@@ -1578,9 +1578,7 @@ void\n wrap_here (const char *indent)\n {\n   /* This should have been allocated, but be paranoid anyway.  */\n-  if (!filter_initialized)\n-    internal_error (__FILE__, __LINE__,\n-\t\t    _(\"failed internal consistency check\"));\n+  gdb_assert (filter_initialized);\n \n   flush_wrap_buffer (gdb_stdout);\n   if (chars_per_line == UINT_MAX)\t/* No line overflow checking.  */"
    }
  ]
}