{
  "sha": "0826779b99b49f7f8df5d186f3c481b6007010d4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDgyNjc3OWI5OWI0OWY3ZjhkZjVkMTg2ZjNjNDgxYjYwMDcwMTBkNA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-07-09T17:36:17Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-07-09T17:36:17Z"
    },
    "message": "Fix printcmds.exp failure for wide strings tests.\n\nwchar_t type must be known to create wide strings.\nAs this type is predefined when current GDB language is C++,\nswitch to c++ for the wide strings tests.\n\nProblem analysis and fix by Sergio.",
    "tree": {
      "sha": "0ba4c793f445d5917f6a894ef167fd4f596ce142",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0ba4c793f445d5917f6a894ef167fd4f596ce142"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0826779b99b49f7f8df5d186f3c481b6007010d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0826779b99b49f7f8df5d186f3c481b6007010d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0826779b99b49f7f8df5d186f3c481b6007010d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0826779b99b49f7f8df5d186f3c481b6007010d4/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "268a13a5a3f7c6b9b6ffc5ac2d1b24eb41f3fbdc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/268a13a5a3f7c6b9b6ffc5ac2d1b24eb41f3fbdc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/268a13a5a3f7c6b9b6ffc5ac2d1b24eb41f3fbdc"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 20,
    "deletions": 15
  },
  "files": [
    {
      "sha": "3df5e587eb0c50a51041acbdecf1a11f85d8f40c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0826779b99b49f7f8df5d186f3c481b6007010d4/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0826779b99b49f7f8df5d186f3c481b6007010d4/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0826779b99b49f7f8df5d186f3c481b6007010d4",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Sergio Durigan Junior  <sergiodj@redhat.com>\n+\n+\t* gdb.base/printcmds.exp (test_printf_convenience_var): Set\n+\tlanguage to \"c++\" before dealing with wchar_t.  Remove DO_WSTRING\n+\targument and update callers.\n+\n 2019-07-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.arch/amd64-break-on-asm-line.S: New file."
    },
    {
      "sha": "edd5b31fd4c5b5f4c489d28596d9f5cecb3b5250",
      "filename": "gdb/testsuite/gdb.base/printcmds.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 15,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0826779b99b49f7f8df5d186f3c481b6007010d4/gdb/testsuite/gdb.base/printcmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0826779b99b49f7f8df5d186f3c481b6007010d4/gdb/testsuite/gdb.base/printcmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.exp?ref=0826779b99b49f7f8df5d186f3c481b6007010d4",
      "patch": "@@ -935,11 +935,8 @@ proc test_repeat_bytes {} {\n # Test printf of convenience variables.\n # These tests can be done with or without a running inferior.\n # PREFIX ensures uniqueness of test names.\n-# DO_WSTRING 1 tells to test printf of wide strings.  Wide strings tests\n-# must be skipped (DO_WSTRING 0) if the wchar_t type is not yet known by\n-# GDB, as this type is needed to create wide strings.\n \n-proc test_printf_convenience_var {prefix do_wstring} {\n+proc test_printf_convenience_var {prefix} {\n \n     with_test_prefix \"conv var: $prefix\" {\n \tgdb_test_no_output \"set var \\$cstr = \\\"abcde\\\"\" \"set \\$cstr\"\n@@ -958,12 +955,16 @@ proc test_printf_convenience_var {prefix do_wstring} {\n \tgdb_test_no_output \"set language auto\" \"set language auto\"\n \tgdb_test \"printf \\\"astr val = %s\\\\n\\\", \\$astr\" \"astr val = fghij\" \\\n \t    \"printf \\$astr, auto language\"\n-\tif {$do_wstring} {\n-\t    gdb_test_no_output \"set var \\$wstr = L\\\"facile\\\"\" \\\n-\t\t\"set \\$wstr\"\n-\t    gdb_test \"printf \\\"wstr val = %ls\\\\n\\\", \\$wstr\" \\\n-\t\t\"wstr val = facile\" \"printf \\$wstr\"\n-\t}\n+\t# Wide strings can only be created when wchar_t type is known.\n+\t# Switch to c++ for the wide strings tests, as wchar_t is predefined\n+\t# when current language is c++.\n+\t# See above \"set language ada\" about why we use gdb_test.\n+\tgdb_test \"set language c++\" \".*\" \"set language c++\"\n+\tgdb_test_no_output \"set var \\$wstr = L\\\"facile\\\"\" \\\n+\t    \"set \\$wstr\"\n+\tgdb_test \"printf \\\"wstr val = %ls\\\\n\\\", \\$wstr\" \\\n+\t    \"wstr val = facile\" \"printf \\$wstr\"\n+\tgdb_test_no_output \"set language auto\" \"set language auto, wstring\"\n     }\n }\n \n@@ -985,9 +986,7 @@ gdb_test \"print \\$cvar = \\\"abc\\\"\" \" = \\\"abc\\\"\"\n gdb_test \"print sizeof (\\$cvar)\" \" = 4\"\n \n # Similarly, printf of a string convenience var should work without a target.\n-# At this point, we cannot create a wide string convenience var, as the\n-# wchar_t type is not yet known, so skip the wide string tests.\n-test_printf_convenience_var \"no target\" 0\n+test_printf_convenience_var \"no target\"\n \n # GDB used to complete the explicit location options even when\n # printing expressions.\n@@ -1019,11 +1018,11 @@ if ![runto_main] then {\n }\n \n # With a running target, printf convenience vars should of course work.\n-test_printf_convenience_var \"with target\" 1\n+test_printf_convenience_var \"with target\"\n \n # It should also work when inferior function calls are forbidden.\n gdb_test_no_output \"set may-call-functions off\"\n-test_printf_convenience_var \"with target, may-call-functions off\" 1\n+test_printf_convenience_var \"with target, may-call-functions off\"\n gdb_test_no_output \"set may-call-functions on\"\n \n test_integer_literals_accepted"
    }
  ]
}