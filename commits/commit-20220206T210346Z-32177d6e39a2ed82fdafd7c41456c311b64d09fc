{
  "sha": "32177d6e39a2ed82fdafd7c41456c311b64d09fc",
  "node_id": "C_kwDOANOeidoAKDMyMTc3ZDZlMzlhMmVkODJmZGFmZDdjNDE0NTZjMzExYjY0ZDA5ZmM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-01-28T03:08:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remove SYMBOL_INLINED macro\n\nAdd a getter and a setter for whether a symbol is inlined.  Remove the\ncorresponding macro and adjust all callers.\n\nChange-Id: I934468da3b5a32dd6b161a6f252a6b1b94737279",
    "tree": {
      "sha": "898327974f91be4366d3dd7806f6692364a7f85a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/898327974f91be4366d3dd7806f6692364a7f85a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32177d6e39a2ed82fdafd7c41456c311b64d09fc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32177d6e39a2ed82fdafd7c41456c311b64d09fc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32177d6e39a2ed82fdafd7c41456c311b64d09fc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32177d6e39a2ed82fdafd7c41456c311b64d09fc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9743061f92738a6c3f311d640e614a5a2f01b1e"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 15,
    "deletions": 6
  },
  "files": [
    {
      "sha": "3d11ea607682f8c103d2946920844376ad3c8196",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "patch": "@@ -124,7 +124,7 @@ block_containing_function (const struct block *bl)\n int\n block_inlined_p (const struct block *bl)\n {\n-  return BLOCK_FUNCTION (bl) != NULL && SYMBOL_INLINED (BLOCK_FUNCTION (bl));\n+  return BLOCK_FUNCTION (bl) != NULL && BLOCK_FUNCTION (bl)->is_inlined ();\n }\n \n /* A helper function that checks whether PC is in the blockvector BL."
    },
    {
      "sha": "95d4d6fc5532e6889253b4334224c5ffa407dd1a",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "patch": "@@ -21794,7 +21794,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t  /* SYMBOL_BLOCK_VALUE (sym) will be filled in later by\n \t     finish_block.  */\n \t  sym->set_aclass_index (LOC_BLOCK);\n-\t  SYMBOL_INLINED (sym) = 1;\n+\t  sym->set_is_inlined (1);\n \t  list_to_add = cu->list_in_scope;\n \t  break;\n \tcase DW_TAG_template_value_param:"
    },
    {
      "sha": "7c403679455b8ad5f25966bacf132e85cb48cc92",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "patch": "@@ -1200,7 +1200,7 @@ iterate_over_all_matching_symtabs\n \t\t\t {\n \t\t\t   /* Restrict calls to CALLBACK to symbols\n \t\t\t      representing inline symbols only.  */\n-\t\t\t   if (SYMBOL_INLINED (bsym->symbol))\n+\t\t\t   if (bsym->symbol->is_inlined ())\n \t\t\t     return callback (bsym);\n \t\t\t   return true;\n \t\t\t });"
    },
    {
      "sha": "9b7d7e35c97243fa0a666c36908971b11e392fad",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32177d6e39a2ed82fdafd7c41456c311b64d09fc/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "patch": "@@ -1117,7 +1117,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n       m_aclass_index (0),\n       m_is_objfile_owned (1),\n       m_is_argument (0),\n-      is_inlined (0),\n+      m_is_inlined (0),\n       maybe_copied (0),\n       subclass (SYMBOL_NONE),\n       artificial (false)\n@@ -1188,6 +1188,16 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     m_is_argument = is_argument;\n   }\n \n+  bool is_inlined () const\n+  {\n+    return m_is_inlined;\n+  }\n+\n+  void set_is_inlined (bool is_inlined)\n+  {\n+    m_is_inlined = is_inlined;\n+  }\n+\n   /* Data type of value */\n \n   struct type *type = nullptr;\n@@ -1226,7 +1236,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n   unsigned m_is_argument : 1;\n \n   /* Whether this is an inlined function (class LOC_BLOCK only).  */\n-  unsigned is_inlined : 1;\n+  unsigned m_is_inlined : 1;\n \n   /* For LOC_STATIC only, if this is set, then the symbol might be\n      subject to copy relocation.  In this case, a minimal symbol\n@@ -1290,7 +1300,6 @@ struct block_symbol\n /* Note: There is no accessor macro for symbol.owner because it is\n    \"private\".  */\n \n-#define SYMBOL_INLINED(symbol)\t\t(symbol)->is_inlined\n #define SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION(symbol) \\\n   (((symbol)->subclass) == SYMBOL_TEMPLATE)\n #define SYMBOL_TYPE(symbol)\t\t(symbol)->type"
    }
  ]
}