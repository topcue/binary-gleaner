{
  "sha": "89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODllNjVkMTdlM2M1YTY1NmQ5N2E2ZjIyYWM0YzdiYTRmODhhMDhkOA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:31:49Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:31:49Z"
    },
    "message": "x86: drop Vex128 and Vex256\n\nThese are only used when VEX.L or EVEX.L'L have already been decoded,\nand hence the \"normal\" length dependent name determination is quite\nfine. Adjust a few enumerators to make clear that vex_len_table[] has\nbeen consulted; be consistent and do so for all *f128 and *i128 insns\nin one go.",
    "tree": {
      "sha": "f716f430d970ca426ea576ad321ceb0566415f15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f716f430d970ca426ea576ad321ceb0566415f15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "492a76aab5c3546a5a6bc8904e87c548460929d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/492a76aab5c3546a5a6bc8904e87c548460929d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/492a76aab5c3546a5a6bc8904e87c548460929d2"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 65,
    "deletions": 56
  },
  "files": [
    {
      "sha": "03c0d65e81e1f1c80054cd40a57ae9421cdec55e",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
      "patch": "@@ -1,3 +1,20 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (Vex128, Vex256, vex128_mode, vex256_mode): Delete.\n+\t(VEX_W_0F381A_P_2_M_0, VEX_W_0F385A_P_2_M_0, VEX_W_0F3A06_P_2,\n+\tVEX_W_0F3A18_P_2, VEX_W_0F3A19_P_2, VEX_W_0F3A38_P_2,\n+\tVEX_W_0F3A39_P_2, VEX_W_0F3A46_P_2): Rename to ...\n+\t(VEX_W_0F381A_P_2_M_0_L_0, VEX_W_0F385A_P_2_M_0_L_0,\n+\tVEX_W_0F3A06_P_2_L_0, VEX_W_0F3A18_P_2_L_0,\n+\tVEX_W_0F3A19_P_2_L_0, VEX_W_0F3A38_P_2_L_0,\n+\tVEX_W_0F3A39_P_2_L_0, VEX_W_0F3A46_P_2_L_0): ... respectively.\n+\t(vex_table): Replace Vex128 by Vex.\n+\t(vex_len_table): Likewise. Adjust referenced enum names.\n+\t(vex_w_table): Replace Vex128 and Vex256 by Vex. Adjust\n+\treferenced enum names.\n+\t(OP_VEX): Drop vex128_mode and vex256_mode cases.\n+\t* i386-dis-evex-len.h (evex_len_table): Replace Vex128 by Vex.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (dis386): \"LW\" description now applies to \"DQ\"."
    },
    {
      "sha": "51f19dcc1e9cf87db48a7945058d3819296e9339",
      "filename": "opcodes/i386-dis-evex-len.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/i386-dis-evex-len.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/i386-dis-evex-len.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-len.h?ref=89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
      "patch": "@@ -16,7 +16,7 @@ static const struct dis386 evex_len_table[][3] = {\n \n   /* EVEX_LEN_0FC4_P_2 */\n   {\n-    { \"vpinsrw\",\t{ XM, Vex128, Edqw, Ib }, 0 },\n+    { \"vpinsrw\",\t{ XM, Vex, Edqw, Ib }, 0 },\n   },\n \n   /* EVEX_LEN_0FC5_P_2 */\n@@ -289,7 +289,7 @@ static const struct dis386 evex_len_table[][3] = {\n \n   /* EVEX_LEN_0F3A20_P_2 */\n   {\n-    { \"vpinsrb\",\t{ XM, Vex128, Edqb, Ib }, 0 },\n+    { \"vpinsrb\",\t{ XM, Vex, Edqb, Ib }, 0 },\n   },\n \n   /* EVEX_LEN_0F3A21_P_2_W_0 */\n@@ -299,7 +299,7 @@ static const struct dis386 evex_len_table[][3] = {\n \n   /* EVEX_LEN_0F3A22_P_2 */\n   {\n-    { \"vpinsrK\",\t{ XM, Vex128, Edq, Ib }, 0 },\n+    { \"vpinsrK\",\t{ XM, Vex, Edq, Ib }, 0 },\n   },\n \n   /* EVEX_LEN_0F3A23_P_2_W_0 */"
    },
    {
      "sha": "e28a6a97422dfef0026be45f7237b92410e57082",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 45,
      "deletions": 53,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=89e65d17e3c5a656d97a6f22ac4c7ba4f88a08d8",
      "patch": "@@ -395,8 +395,6 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define VexW { OP_VexW, vex_mode }\n #define VexScalar { OP_VEX, vex_scalar_mode }\n #define VexGatherQ { OP_VEX, vex_vsib_q_w_dq_mode }\n-#define Vex128 { OP_VEX, vex128_mode }\n-#define Vex256 { OP_VEX, vex256_mode }\n #define VexGdq { OP_VEX, dq_mode }\n #define VexTmm { OP_VEX, tmm_mode }\n #define EXdVexScalarS { OP_EX_Vex, d_scalar_swap_mode }\n@@ -562,10 +560,6 @@ enum\n   dqd_mode,\n   /* normal vex mode */\n   vex_mode,\n-  /* 128bit vex mode */\n-  vex128_mode,\n-  /* 256bit vex mode */\n-  vex256_mode,\n \n   /* Operand size depends on the VEX.W bit, with VSIB dword indices.  */\n   vex_vsib_d_w_dq_mode,\n@@ -1973,7 +1967,7 @@ enum\n   VEX_W_0F3816_P_2,\n   VEX_W_0F3818_P_2,\n   VEX_W_0F3819_P_2,\n-  VEX_W_0F381A_P_2_M_0,\n+  VEX_W_0F381A_P_2_M_0_L_0,\n   VEX_W_0F382C_P_2_M_0,\n   VEX_W_0F382D_P_2_M_0,\n   VEX_W_0F382E_P_2_M_0,\n@@ -1988,7 +1982,7 @@ enum\n   VEX_W_0F384B_X86_64_P_3,\n   VEX_W_0F3858_P_2,\n   VEX_W_0F3859_P_2,\n-  VEX_W_0F385A_P_2_M_0,\n+  VEX_W_0F385A_P_2_M_0_L_0,\n   VEX_W_0F385C_X86_64_P_1,\n   VEX_W_0F385E_X86_64_P_0,\n   VEX_W_0F385E_X86_64_P_1,\n@@ -2002,17 +1996,17 @@ enum\n   VEX_W_0F3A02_P_2,\n   VEX_W_0F3A04_P_2,\n   VEX_W_0F3A05_P_2,\n-  VEX_W_0F3A06_P_2,\n-  VEX_W_0F3A18_P_2,\n-  VEX_W_0F3A19_P_2,\n+  VEX_W_0F3A06_P_2_L_0,\n+  VEX_W_0F3A18_P_2_L_0,\n+  VEX_W_0F3A19_P_2_L_0,\n   VEX_W_0F3A1D_P_2,\n   VEX_W_0F3A30_P_2_LEN_0,\n   VEX_W_0F3A31_P_2_LEN_0,\n   VEX_W_0F3A32_P_2_LEN_0,\n   VEX_W_0F3A33_P_2_LEN_0,\n-  VEX_W_0F3A38_P_2,\n-  VEX_W_0F3A39_P_2,\n-  VEX_W_0F3A46_P_2,\n+  VEX_W_0F3A38_P_2_L_0,\n+  VEX_W_0F3A39_P_2_L_0,\n+  VEX_W_0F3A46_P_2_L_0,\n   VEX_W_0F3A4A_P_2,\n   VEX_W_0F3A4B_P_2,\n   VEX_W_0F3A4C_P_2,\n@@ -9344,12 +9338,12 @@ static const struct dis386 vex_table[][256] = {\n static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F12_P_0_M_0 / VEX_LEN_0F12_P_2_M_0 */\n   {\n-    { \"vmovlpX\",\t{ XM, Vex128, EXq }, 0 },\n+    { \"vmovlpX\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F12_P_0_M_1 */\n   {\n-    { \"vmovhlps\",\t{ XM, Vex128, EXq }, 0 },\n+    { \"vmovhlps\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F13_M_0 */\n@@ -9359,12 +9353,12 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F16_P_0_M_0 / VEX_LEN_0F16_P_2_M_0 */\n   {\n-    { \"vmovhpX\",\t{ XM, Vex128, EXq }, 0 },\n+    { \"vmovhpX\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F16_P_0_M_1 */\n   {\n-    { \"vmovlhps\",\t{ XM, Vex128, EXq }, 0 },\n+    { \"vmovlhps\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F17_M_0 */\n@@ -9554,7 +9548,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0FC4_P_2 */\n   {\n-    { \"vpinsrw\",\t{ XM, Vex128, Edqw, Ib }, 0 },\n+    { \"vpinsrw\",\t{ XM, Vex, Edqw, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0FC5_P_2 */\n@@ -9587,7 +9581,7 @@ static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F381A_P_2_M_0 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F381A_P_2_M_0) },\n+    { VEX_W_TABLE (VEX_W_0F381A_P_2_M_0_L_0) },\n   },\n \n   /* VEX_LEN_0F3836_P_2 */\n@@ -9638,7 +9632,7 @@ static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F385A_P_2_M_0 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F385A_P_2_M_0) },\n+    { VEX_W_TABLE (VEX_W_0F385A_P_2_M_0_L_0) },\n   },\n \n   /* VEX_LEN_0F385C_X86_64_P_1_W_0_M_0 */\n@@ -9746,7 +9740,7 @@ static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F3A06_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A06_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A06_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A14_P_2 */\n@@ -9772,28 +9766,28 @@ static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F3A18_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A18_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A18_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A19_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A19_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A19_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A20_P_2 */\n   {\n-    { \"vpinsrb\",\t{ XM, Vex128, Edqb, Ib }, 0 },\n+    { \"vpinsrb\",\t{ XM, Vex, Edqb, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A21_P_2 */\n   {\n-    { \"vinsertps\",\t{ XM, Vex128, EXd, Ib }, 0 },\n+    { \"vinsertps\",\t{ XM, Vex, EXd, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A22_P_2 */\n   {\n-    { \"vpinsrK\",\t{ XM, Vex128, Edq, Ib }, 0 },\n+    { \"vpinsrK\",\t{ XM, Vex, Edq, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A30_P_2 */\n@@ -9819,24 +9813,24 @@ static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F3A38_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A38_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A38_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A39_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A39_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A39_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A41_P_2 */\n   {\n-    { \"vdppd\",\t\t{ XM, Vex128, EXx, Ib }, 0 },\n+    { \"vdppd\",\t\t{ XM, Vex, EXx, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A46_P_2 */\n   {\n     { Bad_Opcode },\n-    { VEX_W_TABLE (VEX_W_0F3A46_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3A46_P_2_L_0) },\n   },\n \n   /* VEX_LEN_0F3A60_P_2 */\n@@ -10331,7 +10325,7 @@ static const struct dis386 vex_w_table[][2] = {\n     { \"vbroadcastsd\",\t{ XM, EXxmm_mq }, 0 },\n   },\n   {\n-    /* VEX_W_0F381A_P_2_M_0 */\n+    /* VEX_W_0F381A_P_2_M_0_L_0 */\n     { \"vbroadcastf128\",\t{ XM, Mxmm }, 0 },\n   },\n   {\n@@ -10391,7 +10385,7 @@ static const struct dis386 vex_w_table[][2] = {\n     { \"vpbroadcastq\",\t{ XM, EXxmm_mq }, 0 },\n   },\n   {\n-    /* VEX_W_0F385A_P_2_M_0 */\n+    /* VEX_W_0F385A_P_2_M_0_L_0 */\n     { \"vbroadcasti128\", { XM, Mxmm }, 0 },\n   },\n   {\n@@ -10449,15 +10443,15 @@ static const struct dis386 vex_w_table[][2] = {\n     { \"vpermilpd\",\t{ XM, EXx, Ib }, 0 },\n   },\n   {\n-    /* VEX_W_0F3A06_P_2 */\n-    { \"vperm2f128\",\t{ XM, Vex256, EXx, Ib }, 0 },\n+    /* VEX_W_0F3A06_P_2_L_0 */\n+    { \"vperm2f128\",\t{ XM, Vex, EXx, Ib }, 0 },\n   },\n   {\n-    /* VEX_W_0F3A18_P_2 */\n-    { \"vinsertf128\",\t{ XM, Vex256, EXxmm, Ib }, 0 },\n+    /* VEX_W_0F3A18_P_2_L_0 */\n+    { \"vinsertf128\",\t{ XM, Vex, EXxmm, Ib }, 0 },\n   },\n   {\n-    /* VEX_W_0F3A19_P_2 */\n+    /* VEX_W_0F3A19_P_2_L_0 */\n     { \"vextractf128\",\t{ EXxmm, XM, Ib }, 0 },\n   },\n   {\n@@ -10485,16 +10479,16 @@ static const struct dis386 vex_w_table[][2] = {\n     { MOD_TABLE (MOD_VEX_W_1_0F3A33_P_2_LEN_0) },\n   },\n   {\n-    /* VEX_W_0F3A38_P_2 */\n-    { \"vinserti128\",\t{ XM, Vex256, EXxmm, Ib }, 0 },\n+    /* VEX_W_0F3A38_P_2_L_0 */\n+    { \"vinserti128\",\t{ XM, Vex, EXxmm, Ib }, 0 },\n   },\n   {\n-    /* VEX_W_0F3A39_P_2 */\n+    /* VEX_W_0F3A39_P_2_L_0 */\n     { \"vextracti128\",\t{ EXxmm, XM, Ib }, 0 },\n   },\n   {\n-    /* VEX_W_0F3A46_P_2 */\n-    { \"vperm2i128\",\t{ XM, Vex256, EXx, Ib }, 0 },\n+    /* VEX_W_0F3A46_P_2_L_0 */\n+    { \"vperm2i128\",\t{ XM, Vex, EXx, Ib }, 0 },\n   },\n   {\n     /* VEX_W_0F3A4A_P_2 */\n@@ -10584,35 +10578,35 @@ static const struct dis386 vex_w_table[][2] = {\n   },\n   /* VEX_W_0FXOP_08_CC_L_0 */\n   {\n-     { \"vpcomb\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomb\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_CD_L_0 */\n   {\n-     { \"vpcomw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomw\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_CE_L_0 */\n   {\n-     { \"vpcomd\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomd\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_CF_L_0 */\n   {\n-     { \"vpcomq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomq\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_EC_L_0 */\n   {\n-     { \"vpcomub\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomub\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_ED_L_0 */\n   {\n-     { \"vpcomuw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomuw\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_EE_L_0 */\n   {\n-     { \"vpcomud\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomud\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_08_EF_L_0 */\n   {\n-     { \"vpcomuq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+     { \"vpcomuq\",\t{ XM, Vex, EXx, VPCOM }, 0 },\n   },\n   /* VEX_W_0FXOP_09_80 */\n   {\n@@ -16465,7 +16459,6 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n       switch (bytemode)\n \t{\n \tcase vex_mode:\n-\tcase vex128_mode:\n \tcase vex_vsib_q_w_dq_mode:\n \tcase vex_vsib_q_w_d_mode:\n \t  names = names_xmm;\n@@ -16494,7 +16487,6 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n       switch (bytemode)\n \t{\n \tcase vex_mode:\n-\tcase vex256_mode:\n \t  names = names_ymm;\n \t  break;\n \tcase vex_vsib_q_w_dq_mode:"
    }
  ]
}