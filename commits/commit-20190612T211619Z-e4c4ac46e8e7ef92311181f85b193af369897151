{
  "sha": "e4c4ac46e8e7ef92311181f85b193af369897151",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTRjNGFjNDZlOGU3ZWY5MjMxMTE4MWY4NWIxOTNhZjM2OTg5NzE1MQ==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-12T21:16:19Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-12T21:16:19Z"
    },
    "message": "opcodes/or1k: Regenerate opcodes\n\nThis picks up changes for:\n  - new orfpx64a32 spec additions\n  - new unordered instructions\n  - symbol and documentation updates\n\nopcodes/ChangeLog:\n\n\t* or1k-asm.c: Regenerated.\n\t* or1k-desc.c: Regenerated.\n\t* or1k-desc.h: Regenerated.\n\t* or1k-dis.c: Regenerated.\n\t* or1k-ibld.c: Regenerated.\n\t* or1k-opc.c: Regenerated.\n\t* or1k-opc.h: Regenerated.\n\t* or1k-opinst.c: Regenerated.",
    "tree": {
      "sha": "9f942d2ed2f996caa17a32cedb033aafaea2bf52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f942d2ed2f996caa17a32cedb033aafaea2bf52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4c4ac46e8e7ef92311181f85b193af369897151",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4c4ac46e8e7ef92311181f85b193af369897151",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4c4ac46e8e7ef92311181f85b193af369897151",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4c4ac46e8e7ef92311181f85b193af369897151/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a2e4218f237dd1555249555f8be4165aa8e56b6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2e4218f237dd1555249555f8be4165aa8e56b6a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a2e4218f237dd1555249555f8be4165aa8e56b6a"
    }
  ],
  "stats": {
    "total": 1468,
    "additions": 1195,
    "deletions": 273
  },
  "files": [
    {
      "sha": "5d05dd0242ac689e9917f38906004d8205d6e87c",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -1,3 +1,14 @@\n+2019-06-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* or1k-asm.c: Regenerated.\n+\t* or1k-desc.c: Regenerated.\n+\t* or1k-desc.h: Regenerated.\n+\t* or1k-dis.c: Regenerated.\n+\t* or1k-ibld.c: Regenerated.\n+\t* or1k-opc.c: Regenerated.\n+\t* or1k-opc.h: Regenerated.\n+\t* or1k-opinst.c: Regenerated.\n+\n 2019-06-12  Peter Bergner  <bergner@linux.ibm.com>\n \n \t* ppc-opc.c (powerpc_opcodes) <ldmx>: Delete mnemonic."
    },
    {
      "sha": "55668afee5e6dc72f8d8fc7b6178050268d1e077",
      "filename": "opcodes/or1k-asm.c",
      "status": "modified",
      "additions": 70,
      "deletions": 2,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-asm.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -419,6 +419,56 @@ parse_uimm16_split (CGEN_CPU_DESC cd, const char **strp, int opindex,\n   return errmsg;\n }\n \n+/* Parse register pairs with syntax rA,rB to a flag + rA value.  */\n+\n+static const char *\n+parse_regpair (CGEN_CPU_DESC cd, const char **strp,\n+\t       int opindex ATTRIBUTE_UNUSED, unsigned long *valuep)\n+{\n+  long reg1_index;\n+  long reg2_index;\n+  const char *errmsg;\n+\n+  /* The first part should just be a register.  */\n+  errmsg = cgen_parse_keyword (cd, strp, &or1k_cgen_opval_h_gpr,\n+\t\t\t       &reg1_index);\n+\n+  /* If that worked skip the comma separator.  */\n+  if (errmsg == NULL)\n+    {\n+      if (**strp == ',')\n+\t++*strp;\n+      else\n+\terrmsg = \"Unexpected character, expected ','\";\n+    }\n+\n+  /* If that worked the next part is just another register.  */\n+  if (errmsg == NULL)\n+    errmsg = cgen_parse_keyword (cd, strp, &or1k_cgen_opval_h_gpr,\n+\t\t\t\t &reg2_index);\n+\n+  /* Validate the register pair is valid and create the output value.  */\n+  if (errmsg == NULL)\n+    {\n+      int regoffset = reg2_index - reg1_index;\n+\n+      if (regoffset == 1 || regoffset == 2)\n+\t{\n+\t  unsigned short offsetmask;\n+\t  unsigned short value;\n+\n+\t  offsetmask = ((regoffset == 2 ? 1 : 0) << 5);\n+\t  value = offsetmask | reg1_index;\n+\n+\t  *valuep = value;\n+\t}\n+      else\n+\terrmsg = \"Invalid register pair, offset not 1 or 2.\";\n+    }\n+\n+  return errmsg;\n+}\n+\n /* -- */\n \n const char * or1k_cgen_parse_operand\n@@ -466,27 +516,45 @@ or1k_cgen_parse_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RA :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_gpr, & fields->f_r2);\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RAD32F, (unsigned long *) (& fields->f_rad32));\n+      break;\n     case OR1K_OPERAND_RADF :\n-      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r1);\n+      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r2);\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RADI, (unsigned long *) (& fields->f_rad32));\n       break;\n     case OR1K_OPERAND_RASF :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fsr, & fields->f_r2);\n       break;\n     case OR1K_OPERAND_RB :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_gpr, & fields->f_r3);\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RBD32F, (unsigned long *) (& fields->f_rbd32));\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r1);\n+      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r3);\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RBDI, (unsigned long *) (& fields->f_rbd32));\n       break;\n     case OR1K_OPERAND_RBSF :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fsr, & fields->f_r3);\n       break;\n     case OR1K_OPERAND_RD :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_gpr, & fields->f_r1);\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RDD32F, (unsigned long *) (& fields->f_rdd32));\n+      break;\n     case OR1K_OPERAND_RDDF :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r1);\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RDDI, (unsigned long *) (& fields->f_rdd32));\n+      break;\n     case OR1K_OPERAND_RDSF :\n       errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fsr, & fields->f_r1);\n       break;"
    },
    {
      "sha": "3357849a272dda1095ac1823286728782435ea11",
      "filename": "opcodes/or1k-desc.c",
      "status": "modified",
      "additions": 272,
      "deletions": 37,
      "changes": 309,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-desc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-desc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-desc.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -134,7 +134,7 @@ static const CGEN_MACH or1k_cgen_mach_table[] = {\n   { 0, 0, 0, 0 }\n };\n \n-static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fsr_entries[] =\n+static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_gpr_entries[] =\n {\n   { \"r0\", 0, {0, {{{0, 0}}}}, 0, 0 },\n   { \"r1\", 1, {0, {{{0, 0}}}}, 0, 0 },\n@@ -173,14 +173,14 @@ static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fsr_entries[] =\n   { \"fp\", 2, {0, {{{0, 0}}}}, 0, 0 }\n };\n \n-CGEN_KEYWORD or1k_cgen_opval_h_fsr =\n+CGEN_KEYWORD or1k_cgen_opval_h_gpr =\n {\n-  & or1k_cgen_opval_h_fsr_entries[0],\n+  & or1k_cgen_opval_h_gpr_entries[0],\n   35,\n   0, 0, 0, 0, \"\"\n };\n \n-static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fdr_entries[] =\n+static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fsr_entries[] =\n {\n   { \"r0\", 0, {0, {{{0, 0}}}}, 0, 0 },\n   { \"r1\", 1, {0, {{{0, 0}}}}, 0, 0 },\n@@ -219,14 +219,14 @@ static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fdr_entries[] =\n   { \"fp\", 2, {0, {{{0, 0}}}}, 0, 0 }\n };\n \n-CGEN_KEYWORD or1k_cgen_opval_h_fdr =\n+CGEN_KEYWORD or1k_cgen_opval_h_fsr =\n {\n-  & or1k_cgen_opval_h_fdr_entries[0],\n+  & or1k_cgen_opval_h_fsr_entries[0],\n   35,\n   0, 0, 0, 0, \"\"\n };\n \n-static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_gpr_entries[] =\n+static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_fdr_entries[] =\n {\n   { \"r0\", 0, {0, {{{0, 0}}}}, 0, 0 },\n   { \"r1\", 1, {0, {{{0, 0}}}}, 0, 0 },\n@@ -265,9 +265,9 @@ static CGEN_KEYWORD_ENTRY or1k_cgen_opval_h_gpr_entries[] =\n   { \"fp\", 2, {0, {{{0, 0}}}}, 0, 0 }\n };\n \n-CGEN_KEYWORD or1k_cgen_opval_h_gpr =\n+CGEN_KEYWORD or1k_cgen_opval_h_fdr =\n {\n-  & or1k_cgen_opval_h_gpr_entries[0],\n+  & or1k_cgen_opval_h_fdr_entries[0],\n   35,\n   0, 0, 0, 0, \"\"\n };\n@@ -285,10 +285,12 @@ const CGEN_HW_ENTRY or1k_cgen_hw_table[] =\n   { \"h-addr\", HW_H_ADDR, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n   { \"h-iaddr\", HW_H_IADDR, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n   { \"h-pc\", HW_H_PC, CGEN_ASM_NONE, 0, { 0|A(PC), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n-  { \"h-fsr\", HW_H_FSR, CGEN_ASM_KEYWORD, (PTR) & or1k_cgen_opval_h_fsr, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n-  { \"h-fdr\", HW_H_FDR, CGEN_ASM_KEYWORD, (PTR) & or1k_cgen_opval_h_fdr, { 0|A(VIRTUAL), { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n   { \"h-spr\", HW_H_SPR, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n   { \"h-gpr\", HW_H_GPR, CGEN_ASM_KEYWORD, (PTR) & or1k_cgen_opval_h_gpr, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n+  { \"h-fsr\", HW_H_FSR, CGEN_ASM_KEYWORD, (PTR) & or1k_cgen_opval_h_fsr, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n+  { \"h-fdr\", HW_H_FDR, CGEN_ASM_KEYWORD, (PTR) & or1k_cgen_opval_h_fdr, { 0|A(VIRTUAL), { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n+  { \"h-fd32r\", HW_H_FD32R, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } } },\n+  { \"h-i64r\", HW_H_I64R, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } } },\n   { \"h-sys-vr\", HW_H_SYS_VR, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n   { \"h-sys-upr\", HW_H_SYS_UPR, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n   { \"h-sys-cpucfgr\", HW_H_SYS_CPUCFGR, CGEN_ASM_NONE, 0, { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } } },\n@@ -922,6 +924,7 @@ const CGEN_HW_ENTRY or1k_cgen_hw_table[] =\n   { \"h-uimm6\", HW_H_UIMM6, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n   { \"h-atomic-reserve\", HW_H_ATOMIC_RESERVE, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n   { \"h-atomic-address\", HW_H_ATOMIC_ADDRESS, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n+  { \"h-roff1\", HW_H_ROFF1, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } },\n   { 0, 0, CGEN_ASM_NONE, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } }\n };\n \n@@ -962,6 +965,7 @@ const CGEN_IFLD or1k_cgen_ifld_table[] =\n   { OR1K_F_RESV_10_7, \"f-resv-10-7\", 0, 32, 10, 7, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_RESV_10_3, \"f-resv-10-3\", 0, 32, 10, 3, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_RESV_10_1, \"f-resv-10-1\", 0, 32, 10, 1, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n+  { OR1K_F_RESV_8_1, \"f-resv-8-1\", 0, 32, 8, 1, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_RESV_7_4, \"f-resv-7-4\", 0, 32, 7, 4, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_RESV_5_2, \"f-resv-5-2\", 0, 32, 5, 2, { 0|A(RESERVED), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_IMM16_25_5, \"f-imm16-25-5\", 0, 32, 25, 5, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n@@ -973,6 +977,12 @@ const CGEN_IFLD or1k_cgen_ifld_table[] =\n   { OR1K_F_UIMM6, \"f-uimm6\", 0, 32, 5, 6, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_UIMM16_SPLIT, \"f-uimm16-split\", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n   { OR1K_F_SIMM16_SPLIT, \"f-simm16-split\", 0, 0, 0, 0,{ 0|A(SIGN_OPT)|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n+  { OR1K_F_RDOFF_10_1, \"f-rdoff-10-1\", 0, 32, 10, 1, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+  { OR1K_F_RAOFF_9_1, \"f-raoff-9-1\", 0, 32, 9, 1, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+  { OR1K_F_RBOFF_8_1, \"f-rboff-8-1\", 0, 32, 8, 1, { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+  { OR1K_F_RDD32, \"f-rdd32\", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+  { OR1K_F_RAD32, \"f-rad32\", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+  { OR1K_F_RBD32, \"f-rbd32\", 0, 0, 0, 0,{ 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n   { 0, 0, 0, 0, 0, 0, { 0, { { { (1<<MACH_BASE), 0 } } } } }\n };\n \n@@ -984,6 +994,9 @@ const CGEN_IFLD or1k_cgen_ifld_table[] =\n \n const CGEN_MAYBE_MULTI_IFLD OR1K_F_UIMM16_SPLIT_MULTI_IFIELD [];\n const CGEN_MAYBE_MULTI_IFLD OR1K_F_SIMM16_SPLIT_MULTI_IFIELD [];\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RDD32_MULTI_IFIELD [];\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RAD32_MULTI_IFIELD [];\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RBD32_MULTI_IFIELD [];\n \n \n /* multi ifield definitions */\n@@ -1000,6 +1013,24 @@ const CGEN_MAYBE_MULTI_IFLD OR1K_F_SIMM16_SPLIT_MULTI_IFIELD [] =\n     { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_IMM16_10_11] } },\n     { 0, { (const PTR) 0 } }\n };\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RDD32_MULTI_IFIELD [] =\n+{\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R1] } },\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_RDOFF_10_1] } },\n+    { 0, { (const PTR) 0 } }\n+};\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RAD32_MULTI_IFIELD [] =\n+{\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R2] } },\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_RAOFF_9_1] } },\n+    { 0, { (const PTR) 0 } }\n+};\n+const CGEN_MAYBE_MULTI_IFLD OR1K_F_RBD32_MULTI_IFIELD [] =\n+{\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R3] } },\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_RBOFF_8_1] } },\n+    { 0, { (const PTR) 0 } }\n+};\n \n /* The operand table.  */\n \n@@ -1124,18 +1155,42 @@ const CGEN_OPERAND or1k_cgen_operand_table[] =\n   { \"rBSF\", OR1K_OPERAND_RBSF, HW_H_FSR, 15, 5,\n     { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R3] } },\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n-/* rDDF: destination register (double floating point mode) */\n+/* rDDF: or64 destination register (double floating point mode) */\n   { \"rDDF\", OR1K_OPERAND_RDDF, HW_H_FDR, 25, 5,\n     { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R1] } },\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n-/* rADF: source register A (double floating point mode) */\n-  { \"rADF\", OR1K_OPERAND_RADF, HW_H_FDR, 25, 5,\n-    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R1] } },\n+/* rADF: or64 source register A (double floating point mode) */\n+  { \"rADF\", OR1K_OPERAND_RADF, HW_H_FDR, 20, 5,\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R2] } },\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n-/* rBDF: source register B (double floating point mode) */\n-  { \"rBDF\", OR1K_OPERAND_RBDF, HW_H_FDR, 25, 5,\n-    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R1] } },\n+/* rBDF: or64 source register B (double floating point mode) */\n+  { \"rBDF\", OR1K_OPERAND_RBDF, HW_H_FDR, 15, 5,\n+    { 0, { (const PTR) &or1k_cgen_ifld_table[OR1K_F_R3] } },\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }  },\n+/* rDD32F: destination register (double floating point pair) */\n+  { \"rDD32F\", OR1K_OPERAND_RDD32F, HW_H_FD32R, 10, 6,\n+    { 2, { (const PTR) &OR1K_F_RDD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+/* rDDI: destination register (double integer pair) */\n+  { \"rDDI\", OR1K_OPERAND_RDDI, HW_H_I64R, 10, 6,\n+    { 2, { (const PTR) &OR1K_F_RDD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+/* rAD32F: source register A (double floating point pair) */\n+  { \"rAD32F\", OR1K_OPERAND_RAD32F, HW_H_FD32R, 9, 6,\n+    { 2, { (const PTR) &OR1K_F_RAD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+/* rADI: source register A (double integer pair) */\n+  { \"rADI\", OR1K_OPERAND_RADI, HW_H_I64R, 9, 6,\n+    { 2, { (const PTR) &OR1K_F_RAD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+/* rBD32F: source register B (double floating point pair) */\n+  { \"rBD32F\", OR1K_OPERAND_RBD32F, HW_H_FD32R, 8, 6,\n+    { 2, { (const PTR) &OR1K_F_RBD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n+/* rBDI: source register B (double integer pair) */\n+  { \"rBDI\", OR1K_OPERAND_RBDI, HW_H_I64R, 8, 6,\n+    { 2, { (const PTR) &OR1K_F_RBD32_MULTI_IFIELD[0] } },\n+    { 0|A(VIRTUAL), { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }  },\n /* sentinel */\n   { 0, 0, 0, 0, 0,\n     { 0, { (const PTR) 0 } },\n@@ -1656,6 +1711,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_ADD_D, \"lf-add-d\", \"lf.add.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.add.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_ADD_D32, \"lf-add-d32\", \"lf.add.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sub.s $rDSF,$rASF,$rBSF */\n   {\n     OR1K_INSN_LF_SUB_S, \"lf-sub-s\", \"lf.sub.s\", 32,\n@@ -1666,6 +1726,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_SUB_D, \"lf-sub-d\", \"lf.sub.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sub.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SUB_D32, \"lf-sub-d32\", \"lf.sub.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.mul.s $rDSF,$rASF,$rBSF */\n   {\n     OR1K_INSN_LF_MUL_S, \"lf-mul-s\", \"lf.mul.s\", 32,\n@@ -1676,6 +1741,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_MUL_D, \"lf-mul-d\", \"lf.mul.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.mul.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_MUL_D32, \"lf-mul-d32\", \"lf.mul.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.div.s $rDSF,$rASF,$rBSF */\n   {\n     OR1K_INSN_LF_DIV_S, \"lf-div-s\", \"lf.div.s\", 32,\n@@ -1686,6 +1756,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_DIV_D, \"lf-div-d\", \"lf.div.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.div.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_DIV_D32, \"lf-div-d32\", \"lf.div.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.rem.s $rDSF,$rASF,$rBSF */\n   {\n     OR1K_INSN_LF_REM_S, \"lf-rem-s\", \"lf.rem.s\", 32,\n@@ -1696,16 +1771,26 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_REM_D, \"lf-rem-d\", \"lf.rem.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.rem.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_REM_D32, \"lf-rem-d32\", \"lf.rem.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.itof.s $rDSF,$rA */\n   {\n     OR1K_INSN_LF_ITOF_S, \"lf-itof-s\", \"lf.itof.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.itof.d $rDSF,$rA */\n+/* lf.itof.d $rDDF,$rA */\n   {\n     OR1K_INSN_LF_ITOF_D, \"lf-itof-d\", \"lf.itof.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.itof.d $rDD32F,$rADI */\n+  {\n+    OR1K_INSN_LF_ITOF_D32, \"lf-itof-d32\", \"lf.itof.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.ftoi.s $rD,$rASF */\n   {\n     OR1K_INSN_LF_FTOI_S, \"lf-ftoi-s\", \"lf.ftoi.s\", 32,\n@@ -1716,66 +1801,206 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_FTOI_D, \"lf-ftoi-d\", \"lf.ftoi.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.ftoi.d $rDDI,$rAD32F */\n+  {\n+    OR1K_INSN_LF_FTOI_D32, \"lf-ftoi-d32\", \"lf.ftoi.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sfeq.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_EQ_S, \"lf-eq-s\", \"lf.sfeq.s\", 32,\n+    OR1K_INSN_LF_SFEQ_S, \"lf-sfeq-s\", \"lf.sfeq.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sfeq.d $rASF,$rBSF */\n+/* lf.sfeq.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_EQ_D, \"lf-eq-d\", \"lf.sfeq.d\", 32,\n+    OR1K_INSN_LF_SFEQ_D, \"lf-sfeq-d\", \"lf.sfeq.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sfeq.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFEQ_D32, \"lf-sfeq-d32\", \"lf.sfeq.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sfne.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_NE_S, \"lf-ne-s\", \"lf.sfne.s\", 32,\n+    OR1K_INSN_LF_SFNE_S, \"lf-sfne-s\", \"lf.sfne.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sfne.d $rASF,$rBSF */\n+/* lf.sfne.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_NE_D, \"lf-ne-d\", \"lf.sfne.d\", 32,\n+    OR1K_INSN_LF_SFNE_D, \"lf-sfne-d\", \"lf.sfne.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sfne.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFNE_D32, \"lf-sfne-d32\", \"lf.sfne.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sfge.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_GE_S, \"lf-ge-s\", \"lf.sfge.s\", 32,\n+    OR1K_INSN_LF_SFGE_S, \"lf-sfge-s\", \"lf.sfge.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sfge.d $rASF,$rBSF */\n+/* lf.sfge.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_GE_D, \"lf-ge-d\", \"lf.sfge.d\", 32,\n+    OR1K_INSN_LF_SFGE_D, \"lf-sfge-d\", \"lf.sfge.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sfge.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFGE_D32, \"lf-sfge-d32\", \"lf.sfge.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sfgt.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_GT_S, \"lf-gt-s\", \"lf.sfgt.s\", 32,\n+    OR1K_INSN_LF_SFGT_S, \"lf-sfgt-s\", \"lf.sfgt.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sfgt.d $rASF,$rBSF */\n+/* lf.sfgt.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_GT_D, \"lf-gt-d\", \"lf.sfgt.d\", 32,\n+    OR1K_INSN_LF_SFGT_D, \"lf-sfgt-d\", \"lf.sfgt.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sfgt.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFGT_D32, \"lf-sfgt-d32\", \"lf.sfgt.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sflt.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_LT_S, \"lf-lt-s\", \"lf.sflt.s\", 32,\n+    OR1K_INSN_LF_SFLT_S, \"lf-sflt-s\", \"lf.sflt.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sflt.d $rASF,$rBSF */\n+/* lf.sflt.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_LT_D, \"lf-lt-d\", \"lf.sflt.d\", 32,\n+    OR1K_INSN_LF_SFLT_D, \"lf-sflt-d\", \"lf.sflt.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sflt.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFLT_D32, \"lf-sflt-d32\", \"lf.sflt.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.sfle.s $rASF,$rBSF */\n   {\n-    OR1K_INSN_LF_LE_S, \"lf-le-s\", \"lf.sfle.s\", 32,\n+    OR1K_INSN_LF_SFLE_S, \"lf-sfle-s\", \"lf.sfle.s\", 32,\n     { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n-/* lf.sfle.d $rASF,$rBSF */\n+/* lf.sfle.d $rADF,$rBDF */\n   {\n-    OR1K_INSN_LF_LE_D, \"lf-le-d\", \"lf.sfle.d\", 32,\n+    OR1K_INSN_LF_SFLE_D, \"lf-sfle-d\", \"lf.sfle.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.sfle.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFLE_D32, \"lf-sfle-d32\", \"lf.sfle.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfueq.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFUEQ_S, \"lf-sfueq-s\", \"lf.sfueq.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfueq.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFUEQ_D, \"lf-sfueq-d\", \"lf.sfueq.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfueq.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFUEQ_D32, \"lf-sfueq-d32\", \"lf.sfueq.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfune.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFUNE_S, \"lf-sfune-s\", \"lf.sfune.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfune.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFUNE_D, \"lf-sfune-d\", \"lf.sfune.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfune.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFUNE_D32, \"lf-sfune-d32\", \"lf.sfune.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfugt.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFUGT_S, \"lf-sfugt-s\", \"lf.sfugt.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfugt.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFUGT_D, \"lf-sfugt-d\", \"lf.sfugt.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfugt.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFUGT_D32, \"lf-sfugt-d32\", \"lf.sfugt.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfuge.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFUGE_S, \"lf-sfuge-s\", \"lf.sfuge.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfuge.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFUGE_D, \"lf-sfuge-d\", \"lf.sfuge.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfuge.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFUGE_D32, \"lf-sfuge-d32\", \"lf.sfuge.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfult.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFULT_S, \"lf-sfult-s\", \"lf.sfult.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfult.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFULT_D, \"lf-sfult-d\", \"lf.sfult.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfult.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFULT_D32, \"lf-sfult-d32\", \"lf.sfult.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfule.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFULE_S, \"lf-sfule-s\", \"lf.sfule.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfule.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFULE_D, \"lf-sfule-d\", \"lf.sfule.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfule.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFULE_D32, \"lf-sfule-d32\", \"lf.sfule.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n+/* lf.sfun.s $rASF,$rBSF */\n+  {\n+    OR1K_INSN_LF_SFUN_S, \"lf-sfun-s\", \"lf.sfun.s\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND)|(1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfun.d $rADF,$rBDF */\n+  {\n+    OR1K_INSN_LF_SFUN_D, \"lf-sfun-d\", \"lf.sfun.d\", 32,\n+    { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n+  },\n+/* lf.sfun.d $rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_SFUN_D32, \"lf-sfun-d32\", \"lf.sfun.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.madd.s $rDSF,$rASF,$rBSF */\n   {\n     OR1K_INSN_LF_MADD_S, \"lf-madd-s\", \"lf.madd.s\", 32,\n@@ -1786,6 +2011,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_MADD_D, \"lf-madd-d\", \"lf.madd.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.madd.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    OR1K_INSN_LF_MADD_D32, \"lf-madd-d32\", \"lf.madd.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n /* lf.cust1.s $rASF,$rBSF */\n   {\n     OR1K_INSN_LF_CUST1_S, \"lf-cust1-s\", \"lf.cust1.s\", 32,\n@@ -1796,6 +2026,11 @@ static const CGEN_IBASE or1k_cgen_insn_table[MAX_INSNS] =\n     OR1K_INSN_LF_CUST1_D, \"lf-cust1-d\", \"lf.cust1.d\", 32,\n     { 0, { { { (1<<MACH_OR64)|(1<<MACH_OR64ND), 0 } } } }\n   },\n+/* lf.cust1.d */\n+  {\n+    OR1K_INSN_LF_CUST1_D32, \"lf-cust1-d32\", \"lf.cust1.d\", 32,\n+    { 0, { { { (1<<MACH_OR32)|(1<<MACH_OR32ND), 0 } } } }\n+  },\n };\n \n #undef OP"
    },
    {
      "sha": "1121c99e49d739c47fded63b017e4e994200ff64",
      "filename": "opcodes/or1k-desc.h",
      "status": "modified",
      "additions": 174,
      "deletions": 167,
      "changes": 341,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-desc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-desc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-desc.h?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -349,7 +349,10 @@ typedef enum insn_opcode_float_regreg {\n  , OPC_FLOAT_REGREG_MUL_D = 18, OPC_FLOAT_REGREG_DIV_D = 19, OPC_FLOAT_REGREG_ITOF_D = 20, OPC_FLOAT_REGREG_FTOI_D = 21\n  , OPC_FLOAT_REGREG_REM_D = 22, OPC_FLOAT_REGREG_MADD_D = 23, OPC_FLOAT_REGREG_SFEQ_D = 24, OPC_FLOAT_REGREG_SFNE_D = 25\n  , OPC_FLOAT_REGREG_SFGT_D = 26, OPC_FLOAT_REGREG_SFGE_D = 27, OPC_FLOAT_REGREG_SFLT_D = 28, OPC_FLOAT_REGREG_SFLE_D = 29\n- , OPC_FLOAT_REGREG_CUST1_S = 208, OPC_FLOAT_REGREG_CUST1_D = 224\n+ , OPC_FLOAT_REGREG_SFUEQ_S = 40, OPC_FLOAT_REGREG_SFUNE_S = 41, OPC_FLOAT_REGREG_SFUGT_S = 42, OPC_FLOAT_REGREG_SFUGE_S = 43\n+ , OPC_FLOAT_REGREG_SFULT_S = 44, OPC_FLOAT_REGREG_SFULE_S = 45, OPC_FLOAT_REGREG_SFUN_S = 46, OPC_FLOAT_REGREG_SFUEQ_D = 56\n+ , OPC_FLOAT_REGREG_SFUNE_D = 57, OPC_FLOAT_REGREG_SFUGT_D = 58, OPC_FLOAT_REGREG_SFUGE_D = 59, OPC_FLOAT_REGREG_SFULT_D = 60\n+ , OPC_FLOAT_REGREG_SFULE_D = 61, OPC_FLOAT_REGREG_SFUN_D = 62, OPC_FLOAT_REGREG_CUST1_S = 208, OPC_FLOAT_REGREG_CUST1_D = 224\n } INSN_OPCODE_FLOAT_REGREG;\n \n /* Attributes.  */\n@@ -401,9 +404,11 @@ typedef enum ifield_type {\n  , OR1K_F_RESV_25_10, OR1K_F_RESV_25_5, OR1K_F_RESV_23_8, OR1K_F_RESV_20_21\n  , OR1K_F_RESV_20_5, OR1K_F_RESV_20_4, OR1K_F_RESV_15_8, OR1K_F_RESV_15_6\n  , OR1K_F_RESV_10_11, OR1K_F_RESV_10_7, OR1K_F_RESV_10_3, OR1K_F_RESV_10_1\n- , OR1K_F_RESV_7_4, OR1K_F_RESV_5_2, OR1K_F_IMM16_25_5, OR1K_F_IMM16_10_11\n- , OR1K_F_DISP26, OR1K_F_DISP21, OR1K_F_UIMM16, OR1K_F_SIMM16\n- , OR1K_F_UIMM6, OR1K_F_UIMM16_SPLIT, OR1K_F_SIMM16_SPLIT, OR1K_F_MAX\n+ , OR1K_F_RESV_8_1, OR1K_F_RESV_7_4, OR1K_F_RESV_5_2, OR1K_F_IMM16_25_5\n+ , OR1K_F_IMM16_10_11, OR1K_F_DISP26, OR1K_F_DISP21, OR1K_F_UIMM16\n+ , OR1K_F_SIMM16, OR1K_F_UIMM6, OR1K_F_UIMM16_SPLIT, OR1K_F_SIMM16_SPLIT\n+ , OR1K_F_RDOFF_10_1, OR1K_F_RAOFF_9_1, OR1K_F_RBOFF_8_1, OR1K_F_RDD32\n+ , OR1K_F_RAD32, OR1K_F_RBD32, OR1K_F_MAX\n } IFIELD_TYPE;\n \n #define MAX_IFLD ((int) OR1K_F_MAX)\n@@ -429,166 +434,167 @@ typedef enum cgen_hw_attr {\n /* Enum declaration for or1k hardware types.  */\n typedef enum cgen_hw_type {\n   HW_H_MEMORY, HW_H_SINT, HW_H_UINT, HW_H_ADDR\n- , HW_H_IADDR, HW_H_PC, HW_H_FSR, HW_H_FDR\n- , HW_H_SPR, HW_H_GPR, HW_H_SYS_VR, HW_H_SYS_UPR\n- , HW_H_SYS_CPUCFGR, HW_H_SYS_DMMUCFGR, HW_H_SYS_IMMUCFGR, HW_H_SYS_DCCFGR\n- , HW_H_SYS_ICCFGR, HW_H_SYS_DCFGR, HW_H_SYS_PCCFGR, HW_H_SYS_NPC\n- , HW_H_SYS_SR, HW_H_SYS_PPC, HW_H_SYS_FPCSR, HW_H_SYS_EPCR0\n- , HW_H_SYS_EPCR1, HW_H_SYS_EPCR2, HW_H_SYS_EPCR3, HW_H_SYS_EPCR4\n- , HW_H_SYS_EPCR5, HW_H_SYS_EPCR6, HW_H_SYS_EPCR7, HW_H_SYS_EPCR8\n- , HW_H_SYS_EPCR9, HW_H_SYS_EPCR10, HW_H_SYS_EPCR11, HW_H_SYS_EPCR12\n- , HW_H_SYS_EPCR13, HW_H_SYS_EPCR14, HW_H_SYS_EPCR15, HW_H_SYS_EEAR0\n- , HW_H_SYS_EEAR1, HW_H_SYS_EEAR2, HW_H_SYS_EEAR3, HW_H_SYS_EEAR4\n- , HW_H_SYS_EEAR5, HW_H_SYS_EEAR6, HW_H_SYS_EEAR7, HW_H_SYS_EEAR8\n- , HW_H_SYS_EEAR9, HW_H_SYS_EEAR10, HW_H_SYS_EEAR11, HW_H_SYS_EEAR12\n- , HW_H_SYS_EEAR13, HW_H_SYS_EEAR14, HW_H_SYS_EEAR15, HW_H_SYS_ESR0\n- , HW_H_SYS_ESR1, HW_H_SYS_ESR2, HW_H_SYS_ESR3, HW_H_SYS_ESR4\n- , HW_H_SYS_ESR5, HW_H_SYS_ESR6, HW_H_SYS_ESR7, HW_H_SYS_ESR8\n- , HW_H_SYS_ESR9, HW_H_SYS_ESR10, HW_H_SYS_ESR11, HW_H_SYS_ESR12\n- , HW_H_SYS_ESR13, HW_H_SYS_ESR14, HW_H_SYS_ESR15, HW_H_SYS_GPR0\n- , HW_H_SYS_GPR1, HW_H_SYS_GPR2, HW_H_SYS_GPR3, HW_H_SYS_GPR4\n- , HW_H_SYS_GPR5, HW_H_SYS_GPR6, HW_H_SYS_GPR7, HW_H_SYS_GPR8\n- , HW_H_SYS_GPR9, HW_H_SYS_GPR10, HW_H_SYS_GPR11, HW_H_SYS_GPR12\n- , HW_H_SYS_GPR13, HW_H_SYS_GPR14, HW_H_SYS_GPR15, HW_H_SYS_GPR16\n- , HW_H_SYS_GPR17, HW_H_SYS_GPR18, HW_H_SYS_GPR19, HW_H_SYS_GPR20\n- , HW_H_SYS_GPR21, HW_H_SYS_GPR22, HW_H_SYS_GPR23, HW_H_SYS_GPR24\n- , HW_H_SYS_GPR25, HW_H_SYS_GPR26, HW_H_SYS_GPR27, HW_H_SYS_GPR28\n- , HW_H_SYS_GPR29, HW_H_SYS_GPR30, HW_H_SYS_GPR31, HW_H_SYS_GPR32\n- , HW_H_SYS_GPR33, HW_H_SYS_GPR34, HW_H_SYS_GPR35, HW_H_SYS_GPR36\n- , HW_H_SYS_GPR37, HW_H_SYS_GPR38, HW_H_SYS_GPR39, HW_H_SYS_GPR40\n- , HW_H_SYS_GPR41, HW_H_SYS_GPR42, HW_H_SYS_GPR43, HW_H_SYS_GPR44\n- , HW_H_SYS_GPR45, HW_H_SYS_GPR46, HW_H_SYS_GPR47, HW_H_SYS_GPR48\n- , HW_H_SYS_GPR49, HW_H_SYS_GPR50, HW_H_SYS_GPR51, HW_H_SYS_GPR52\n- , HW_H_SYS_GPR53, HW_H_SYS_GPR54, HW_H_SYS_GPR55, HW_H_SYS_GPR56\n- , HW_H_SYS_GPR57, HW_H_SYS_GPR58, HW_H_SYS_GPR59, HW_H_SYS_GPR60\n- , HW_H_SYS_GPR61, HW_H_SYS_GPR62, HW_H_SYS_GPR63, HW_H_SYS_GPR64\n- , HW_H_SYS_GPR65, HW_H_SYS_GPR66, HW_H_SYS_GPR67, HW_H_SYS_GPR68\n- , HW_H_SYS_GPR69, HW_H_SYS_GPR70, HW_H_SYS_GPR71, HW_H_SYS_GPR72\n- , HW_H_SYS_GPR73, HW_H_SYS_GPR74, HW_H_SYS_GPR75, HW_H_SYS_GPR76\n- , HW_H_SYS_GPR77, HW_H_SYS_GPR78, HW_H_SYS_GPR79, HW_H_SYS_GPR80\n- , HW_H_SYS_GPR81, HW_H_SYS_GPR82, HW_H_SYS_GPR83, HW_H_SYS_GPR84\n- , HW_H_SYS_GPR85, HW_H_SYS_GPR86, HW_H_SYS_GPR87, HW_H_SYS_GPR88\n- , HW_H_SYS_GPR89, HW_H_SYS_GPR90, HW_H_SYS_GPR91, HW_H_SYS_GPR92\n- , HW_H_SYS_GPR93, HW_H_SYS_GPR94, HW_H_SYS_GPR95, HW_H_SYS_GPR96\n- , HW_H_SYS_GPR97, HW_H_SYS_GPR98, HW_H_SYS_GPR99, HW_H_SYS_GPR100\n- , HW_H_SYS_GPR101, HW_H_SYS_GPR102, HW_H_SYS_GPR103, HW_H_SYS_GPR104\n- , HW_H_SYS_GPR105, HW_H_SYS_GPR106, HW_H_SYS_GPR107, HW_H_SYS_GPR108\n- , HW_H_SYS_GPR109, HW_H_SYS_GPR110, HW_H_SYS_GPR111, HW_H_SYS_GPR112\n- , HW_H_SYS_GPR113, HW_H_SYS_GPR114, HW_H_SYS_GPR115, HW_H_SYS_GPR116\n- , HW_H_SYS_GPR117, HW_H_SYS_GPR118, HW_H_SYS_GPR119, HW_H_SYS_GPR120\n- , HW_H_SYS_GPR121, HW_H_SYS_GPR122, HW_H_SYS_GPR123, HW_H_SYS_GPR124\n- , HW_H_SYS_GPR125, HW_H_SYS_GPR126, HW_H_SYS_GPR127, HW_H_SYS_GPR128\n- , HW_H_SYS_GPR129, HW_H_SYS_GPR130, HW_H_SYS_GPR131, HW_H_SYS_GPR132\n- , HW_H_SYS_GPR133, HW_H_SYS_GPR134, HW_H_SYS_GPR135, HW_H_SYS_GPR136\n- , HW_H_SYS_GPR137, HW_H_SYS_GPR138, HW_H_SYS_GPR139, HW_H_SYS_GPR140\n- , HW_H_SYS_GPR141, HW_H_SYS_GPR142, HW_H_SYS_GPR143, HW_H_SYS_GPR144\n- , HW_H_SYS_GPR145, HW_H_SYS_GPR146, HW_H_SYS_GPR147, HW_H_SYS_GPR148\n- , HW_H_SYS_GPR149, HW_H_SYS_GPR150, HW_H_SYS_GPR151, HW_H_SYS_GPR152\n- , HW_H_SYS_GPR153, HW_H_SYS_GPR154, HW_H_SYS_GPR155, HW_H_SYS_GPR156\n- , HW_H_SYS_GPR157, HW_H_SYS_GPR158, HW_H_SYS_GPR159, HW_H_SYS_GPR160\n- , HW_H_SYS_GPR161, HW_H_SYS_GPR162, HW_H_SYS_GPR163, HW_H_SYS_GPR164\n- , HW_H_SYS_GPR165, HW_H_SYS_GPR166, HW_H_SYS_GPR167, HW_H_SYS_GPR168\n- , HW_H_SYS_GPR169, HW_H_SYS_GPR170, HW_H_SYS_GPR171, HW_H_SYS_GPR172\n- , HW_H_SYS_GPR173, HW_H_SYS_GPR174, HW_H_SYS_GPR175, HW_H_SYS_GPR176\n- , HW_H_SYS_GPR177, HW_H_SYS_GPR178, HW_H_SYS_GPR179, HW_H_SYS_GPR180\n- , HW_H_SYS_GPR181, HW_H_SYS_GPR182, HW_H_SYS_GPR183, HW_H_SYS_GPR184\n- , HW_H_SYS_GPR185, HW_H_SYS_GPR186, HW_H_SYS_GPR187, HW_H_SYS_GPR188\n- , HW_H_SYS_GPR189, HW_H_SYS_GPR190, HW_H_SYS_GPR191, HW_H_SYS_GPR192\n- , HW_H_SYS_GPR193, HW_H_SYS_GPR194, HW_H_SYS_GPR195, HW_H_SYS_GPR196\n- , HW_H_SYS_GPR197, HW_H_SYS_GPR198, HW_H_SYS_GPR199, HW_H_SYS_GPR200\n- , HW_H_SYS_GPR201, HW_H_SYS_GPR202, HW_H_SYS_GPR203, HW_H_SYS_GPR204\n- , HW_H_SYS_GPR205, HW_H_SYS_GPR206, HW_H_SYS_GPR207, HW_H_SYS_GPR208\n- , HW_H_SYS_GPR209, HW_H_SYS_GPR210, HW_H_SYS_GPR211, HW_H_SYS_GPR212\n- , HW_H_SYS_GPR213, HW_H_SYS_GPR214, HW_H_SYS_GPR215, HW_H_SYS_GPR216\n- , HW_H_SYS_GPR217, HW_H_SYS_GPR218, HW_H_SYS_GPR219, HW_H_SYS_GPR220\n- , HW_H_SYS_GPR221, HW_H_SYS_GPR222, HW_H_SYS_GPR223, HW_H_SYS_GPR224\n- , HW_H_SYS_GPR225, HW_H_SYS_GPR226, HW_H_SYS_GPR227, HW_H_SYS_GPR228\n- , HW_H_SYS_GPR229, HW_H_SYS_GPR230, HW_H_SYS_GPR231, HW_H_SYS_GPR232\n- , HW_H_SYS_GPR233, HW_H_SYS_GPR234, HW_H_SYS_GPR235, HW_H_SYS_GPR236\n- , HW_H_SYS_GPR237, HW_H_SYS_GPR238, HW_H_SYS_GPR239, HW_H_SYS_GPR240\n- , HW_H_SYS_GPR241, HW_H_SYS_GPR242, HW_H_SYS_GPR243, HW_H_SYS_GPR244\n- , HW_H_SYS_GPR245, HW_H_SYS_GPR246, HW_H_SYS_GPR247, HW_H_SYS_GPR248\n- , HW_H_SYS_GPR249, HW_H_SYS_GPR250, HW_H_SYS_GPR251, HW_H_SYS_GPR252\n- , HW_H_SYS_GPR253, HW_H_SYS_GPR254, HW_H_SYS_GPR255, HW_H_SYS_GPR256\n- , HW_H_SYS_GPR257, HW_H_SYS_GPR258, HW_H_SYS_GPR259, HW_H_SYS_GPR260\n- , HW_H_SYS_GPR261, HW_H_SYS_GPR262, HW_H_SYS_GPR263, HW_H_SYS_GPR264\n- , HW_H_SYS_GPR265, HW_H_SYS_GPR266, HW_H_SYS_GPR267, HW_H_SYS_GPR268\n- , HW_H_SYS_GPR269, HW_H_SYS_GPR270, HW_H_SYS_GPR271, HW_H_SYS_GPR272\n- , HW_H_SYS_GPR273, HW_H_SYS_GPR274, HW_H_SYS_GPR275, HW_H_SYS_GPR276\n- , HW_H_SYS_GPR277, HW_H_SYS_GPR278, HW_H_SYS_GPR279, HW_H_SYS_GPR280\n- , HW_H_SYS_GPR281, HW_H_SYS_GPR282, HW_H_SYS_GPR283, HW_H_SYS_GPR284\n- , HW_H_SYS_GPR285, HW_H_SYS_GPR286, HW_H_SYS_GPR287, HW_H_SYS_GPR288\n- , HW_H_SYS_GPR289, HW_H_SYS_GPR290, HW_H_SYS_GPR291, HW_H_SYS_GPR292\n- , HW_H_SYS_GPR293, HW_H_SYS_GPR294, HW_H_SYS_GPR295, HW_H_SYS_GPR296\n- , HW_H_SYS_GPR297, HW_H_SYS_GPR298, HW_H_SYS_GPR299, HW_H_SYS_GPR300\n- , HW_H_SYS_GPR301, HW_H_SYS_GPR302, HW_H_SYS_GPR303, HW_H_SYS_GPR304\n- , HW_H_SYS_GPR305, HW_H_SYS_GPR306, HW_H_SYS_GPR307, HW_H_SYS_GPR308\n- , HW_H_SYS_GPR309, HW_H_SYS_GPR310, HW_H_SYS_GPR311, HW_H_SYS_GPR312\n- , HW_H_SYS_GPR313, HW_H_SYS_GPR314, HW_H_SYS_GPR315, HW_H_SYS_GPR316\n- , HW_H_SYS_GPR317, HW_H_SYS_GPR318, HW_H_SYS_GPR319, HW_H_SYS_GPR320\n- , HW_H_SYS_GPR321, HW_H_SYS_GPR322, HW_H_SYS_GPR323, HW_H_SYS_GPR324\n- , HW_H_SYS_GPR325, HW_H_SYS_GPR326, HW_H_SYS_GPR327, HW_H_SYS_GPR328\n- , HW_H_SYS_GPR329, HW_H_SYS_GPR330, HW_H_SYS_GPR331, HW_H_SYS_GPR332\n- , HW_H_SYS_GPR333, HW_H_SYS_GPR334, HW_H_SYS_GPR335, HW_H_SYS_GPR336\n- , HW_H_SYS_GPR337, HW_H_SYS_GPR338, HW_H_SYS_GPR339, HW_H_SYS_GPR340\n- , HW_H_SYS_GPR341, HW_H_SYS_GPR342, HW_H_SYS_GPR343, HW_H_SYS_GPR344\n- , HW_H_SYS_GPR345, HW_H_SYS_GPR346, HW_H_SYS_GPR347, HW_H_SYS_GPR348\n- , HW_H_SYS_GPR349, HW_H_SYS_GPR350, HW_H_SYS_GPR351, HW_H_SYS_GPR352\n- , HW_H_SYS_GPR353, HW_H_SYS_GPR354, HW_H_SYS_GPR355, HW_H_SYS_GPR356\n- , HW_H_SYS_GPR357, HW_H_SYS_GPR358, HW_H_SYS_GPR359, HW_H_SYS_GPR360\n- , HW_H_SYS_GPR361, HW_H_SYS_GPR362, HW_H_SYS_GPR363, HW_H_SYS_GPR364\n- , HW_H_SYS_GPR365, HW_H_SYS_GPR366, HW_H_SYS_GPR367, HW_H_SYS_GPR368\n- , HW_H_SYS_GPR369, HW_H_SYS_GPR370, HW_H_SYS_GPR371, HW_H_SYS_GPR372\n- , HW_H_SYS_GPR373, HW_H_SYS_GPR374, HW_H_SYS_GPR375, HW_H_SYS_GPR376\n- , HW_H_SYS_GPR377, HW_H_SYS_GPR378, HW_H_SYS_GPR379, HW_H_SYS_GPR380\n- , HW_H_SYS_GPR381, HW_H_SYS_GPR382, HW_H_SYS_GPR383, HW_H_SYS_GPR384\n- , HW_H_SYS_GPR385, HW_H_SYS_GPR386, HW_H_SYS_GPR387, HW_H_SYS_GPR388\n- , HW_H_SYS_GPR389, HW_H_SYS_GPR390, HW_H_SYS_GPR391, HW_H_SYS_GPR392\n- , HW_H_SYS_GPR393, HW_H_SYS_GPR394, HW_H_SYS_GPR395, HW_H_SYS_GPR396\n- , HW_H_SYS_GPR397, HW_H_SYS_GPR398, HW_H_SYS_GPR399, HW_H_SYS_GPR400\n- , HW_H_SYS_GPR401, HW_H_SYS_GPR402, HW_H_SYS_GPR403, HW_H_SYS_GPR404\n- , HW_H_SYS_GPR405, HW_H_SYS_GPR406, HW_H_SYS_GPR407, HW_H_SYS_GPR408\n- , HW_H_SYS_GPR409, HW_H_SYS_GPR410, HW_H_SYS_GPR411, HW_H_SYS_GPR412\n- , HW_H_SYS_GPR413, HW_H_SYS_GPR414, HW_H_SYS_GPR415, HW_H_SYS_GPR416\n- , HW_H_SYS_GPR417, HW_H_SYS_GPR418, HW_H_SYS_GPR419, HW_H_SYS_GPR420\n- , HW_H_SYS_GPR421, HW_H_SYS_GPR422, HW_H_SYS_GPR423, HW_H_SYS_GPR424\n- , HW_H_SYS_GPR425, HW_H_SYS_GPR426, HW_H_SYS_GPR427, HW_H_SYS_GPR428\n- , HW_H_SYS_GPR429, HW_H_SYS_GPR430, HW_H_SYS_GPR431, HW_H_SYS_GPR432\n- , HW_H_SYS_GPR433, HW_H_SYS_GPR434, HW_H_SYS_GPR435, HW_H_SYS_GPR436\n- , HW_H_SYS_GPR437, HW_H_SYS_GPR438, HW_H_SYS_GPR439, HW_H_SYS_GPR440\n- , HW_H_SYS_GPR441, HW_H_SYS_GPR442, HW_H_SYS_GPR443, HW_H_SYS_GPR444\n- , HW_H_SYS_GPR445, HW_H_SYS_GPR446, HW_H_SYS_GPR447, HW_H_SYS_GPR448\n- , HW_H_SYS_GPR449, HW_H_SYS_GPR450, HW_H_SYS_GPR451, HW_H_SYS_GPR452\n- , HW_H_SYS_GPR453, HW_H_SYS_GPR454, HW_H_SYS_GPR455, HW_H_SYS_GPR456\n- , HW_H_SYS_GPR457, HW_H_SYS_GPR458, HW_H_SYS_GPR459, HW_H_SYS_GPR460\n- , HW_H_SYS_GPR461, HW_H_SYS_GPR462, HW_H_SYS_GPR463, HW_H_SYS_GPR464\n- , HW_H_SYS_GPR465, HW_H_SYS_GPR466, HW_H_SYS_GPR467, HW_H_SYS_GPR468\n- , HW_H_SYS_GPR469, HW_H_SYS_GPR470, HW_H_SYS_GPR471, HW_H_SYS_GPR472\n- , HW_H_SYS_GPR473, HW_H_SYS_GPR474, HW_H_SYS_GPR475, HW_H_SYS_GPR476\n- , HW_H_SYS_GPR477, HW_H_SYS_GPR478, HW_H_SYS_GPR479, HW_H_SYS_GPR480\n- , HW_H_SYS_GPR481, HW_H_SYS_GPR482, HW_H_SYS_GPR483, HW_H_SYS_GPR484\n- , HW_H_SYS_GPR485, HW_H_SYS_GPR486, HW_H_SYS_GPR487, HW_H_SYS_GPR488\n- , HW_H_SYS_GPR489, HW_H_SYS_GPR490, HW_H_SYS_GPR491, HW_H_SYS_GPR492\n- , HW_H_SYS_GPR493, HW_H_SYS_GPR494, HW_H_SYS_GPR495, HW_H_SYS_GPR496\n- , HW_H_SYS_GPR497, HW_H_SYS_GPR498, HW_H_SYS_GPR499, HW_H_SYS_GPR500\n- , HW_H_SYS_GPR501, HW_H_SYS_GPR502, HW_H_SYS_GPR503, HW_H_SYS_GPR504\n- , HW_H_SYS_GPR505, HW_H_SYS_GPR506, HW_H_SYS_GPR507, HW_H_SYS_GPR508\n- , HW_H_SYS_GPR509, HW_H_SYS_GPR510, HW_H_SYS_GPR511, HW_H_MAC_MACLO\n- , HW_H_MAC_MACHI, HW_H_TICK_TTMR, HW_H_SYS_VR_REV, HW_H_SYS_VR_CFG\n- , HW_H_SYS_VR_VER, HW_H_SYS_UPR_UP, HW_H_SYS_UPR_DCP, HW_H_SYS_UPR_ICP\n- , HW_H_SYS_UPR_DMP, HW_H_SYS_UPR_MP, HW_H_SYS_UPR_IMP, HW_H_SYS_UPR_DUP\n- , HW_H_SYS_UPR_PCUP, HW_H_SYS_UPR_PICP, HW_H_SYS_UPR_PMP, HW_H_SYS_UPR_TTP\n- , HW_H_SYS_UPR_CUP, HW_H_SYS_CPUCFGR_NSGR, HW_H_SYS_CPUCFGR_CGF, HW_H_SYS_CPUCFGR_OB32S\n- , HW_H_SYS_CPUCFGR_OB64S, HW_H_SYS_CPUCFGR_OF32S, HW_H_SYS_CPUCFGR_OF64S, HW_H_SYS_CPUCFGR_OV64S\n- , HW_H_SYS_CPUCFGR_ND, HW_H_SYS_SR_SM, HW_H_SYS_SR_TEE, HW_H_SYS_SR_IEE\n- , HW_H_SYS_SR_DCE, HW_H_SYS_SR_ICE, HW_H_SYS_SR_DME, HW_H_SYS_SR_IME\n- , HW_H_SYS_SR_LEE, HW_H_SYS_SR_CE, HW_H_SYS_SR_F, HW_H_SYS_SR_CY\n- , HW_H_SYS_SR_OV, HW_H_SYS_SR_OVE, HW_H_SYS_SR_DSX, HW_H_SYS_SR_EPH\n- , HW_H_SYS_SR_FO, HW_H_SYS_SR_SUMRA, HW_H_SYS_SR_CID, HW_H_SYS_FPCSR_FPEE\n- , HW_H_SYS_FPCSR_RM, HW_H_SYS_FPCSR_OVF, HW_H_SYS_FPCSR_UNF, HW_H_SYS_FPCSR_SNF\n- , HW_H_SYS_FPCSR_QNF, HW_H_SYS_FPCSR_ZF, HW_H_SYS_FPCSR_IXF, HW_H_SYS_FPCSR_IVF\n- , HW_H_SYS_FPCSR_INF, HW_H_SYS_FPCSR_DZF, HW_H_SIMM16, HW_H_UIMM16\n- , HW_H_UIMM6, HW_H_ATOMIC_RESERVE, HW_H_ATOMIC_ADDRESS, HW_MAX\n+ , HW_H_IADDR, HW_H_PC, HW_H_SPR, HW_H_GPR\n+ , HW_H_FSR, HW_H_FDR, HW_H_FD32R, HW_H_I64R\n+ , HW_H_SYS_VR, HW_H_SYS_UPR, HW_H_SYS_CPUCFGR, HW_H_SYS_DMMUCFGR\n+ , HW_H_SYS_IMMUCFGR, HW_H_SYS_DCCFGR, HW_H_SYS_ICCFGR, HW_H_SYS_DCFGR\n+ , HW_H_SYS_PCCFGR, HW_H_SYS_NPC, HW_H_SYS_SR, HW_H_SYS_PPC\n+ , HW_H_SYS_FPCSR, HW_H_SYS_EPCR0, HW_H_SYS_EPCR1, HW_H_SYS_EPCR2\n+ , HW_H_SYS_EPCR3, HW_H_SYS_EPCR4, HW_H_SYS_EPCR5, HW_H_SYS_EPCR6\n+ , HW_H_SYS_EPCR7, HW_H_SYS_EPCR8, HW_H_SYS_EPCR9, HW_H_SYS_EPCR10\n+ , HW_H_SYS_EPCR11, HW_H_SYS_EPCR12, HW_H_SYS_EPCR13, HW_H_SYS_EPCR14\n+ , HW_H_SYS_EPCR15, HW_H_SYS_EEAR0, HW_H_SYS_EEAR1, HW_H_SYS_EEAR2\n+ , HW_H_SYS_EEAR3, HW_H_SYS_EEAR4, HW_H_SYS_EEAR5, HW_H_SYS_EEAR6\n+ , HW_H_SYS_EEAR7, HW_H_SYS_EEAR8, HW_H_SYS_EEAR9, HW_H_SYS_EEAR10\n+ , HW_H_SYS_EEAR11, HW_H_SYS_EEAR12, HW_H_SYS_EEAR13, HW_H_SYS_EEAR14\n+ , HW_H_SYS_EEAR15, HW_H_SYS_ESR0, HW_H_SYS_ESR1, HW_H_SYS_ESR2\n+ , HW_H_SYS_ESR3, HW_H_SYS_ESR4, HW_H_SYS_ESR5, HW_H_SYS_ESR6\n+ , HW_H_SYS_ESR7, HW_H_SYS_ESR8, HW_H_SYS_ESR9, HW_H_SYS_ESR10\n+ , HW_H_SYS_ESR11, HW_H_SYS_ESR12, HW_H_SYS_ESR13, HW_H_SYS_ESR14\n+ , HW_H_SYS_ESR15, HW_H_SYS_GPR0, HW_H_SYS_GPR1, HW_H_SYS_GPR2\n+ , HW_H_SYS_GPR3, HW_H_SYS_GPR4, HW_H_SYS_GPR5, HW_H_SYS_GPR6\n+ , HW_H_SYS_GPR7, HW_H_SYS_GPR8, HW_H_SYS_GPR9, HW_H_SYS_GPR10\n+ , HW_H_SYS_GPR11, HW_H_SYS_GPR12, HW_H_SYS_GPR13, HW_H_SYS_GPR14\n+ , HW_H_SYS_GPR15, HW_H_SYS_GPR16, HW_H_SYS_GPR17, HW_H_SYS_GPR18\n+ , HW_H_SYS_GPR19, HW_H_SYS_GPR20, HW_H_SYS_GPR21, HW_H_SYS_GPR22\n+ , HW_H_SYS_GPR23, HW_H_SYS_GPR24, HW_H_SYS_GPR25, HW_H_SYS_GPR26\n+ , HW_H_SYS_GPR27, HW_H_SYS_GPR28, HW_H_SYS_GPR29, HW_H_SYS_GPR30\n+ , HW_H_SYS_GPR31, HW_H_SYS_GPR32, HW_H_SYS_GPR33, HW_H_SYS_GPR34\n+ , HW_H_SYS_GPR35, HW_H_SYS_GPR36, HW_H_SYS_GPR37, HW_H_SYS_GPR38\n+ , HW_H_SYS_GPR39, HW_H_SYS_GPR40, HW_H_SYS_GPR41, HW_H_SYS_GPR42\n+ , HW_H_SYS_GPR43, HW_H_SYS_GPR44, HW_H_SYS_GPR45, HW_H_SYS_GPR46\n+ , HW_H_SYS_GPR47, HW_H_SYS_GPR48, HW_H_SYS_GPR49, HW_H_SYS_GPR50\n+ , HW_H_SYS_GPR51, HW_H_SYS_GPR52, HW_H_SYS_GPR53, HW_H_SYS_GPR54\n+ , HW_H_SYS_GPR55, HW_H_SYS_GPR56, HW_H_SYS_GPR57, HW_H_SYS_GPR58\n+ , HW_H_SYS_GPR59, HW_H_SYS_GPR60, HW_H_SYS_GPR61, HW_H_SYS_GPR62\n+ , HW_H_SYS_GPR63, HW_H_SYS_GPR64, HW_H_SYS_GPR65, HW_H_SYS_GPR66\n+ , HW_H_SYS_GPR67, HW_H_SYS_GPR68, HW_H_SYS_GPR69, HW_H_SYS_GPR70\n+ , HW_H_SYS_GPR71, HW_H_SYS_GPR72, HW_H_SYS_GPR73, HW_H_SYS_GPR74\n+ , HW_H_SYS_GPR75, HW_H_SYS_GPR76, HW_H_SYS_GPR77, HW_H_SYS_GPR78\n+ , HW_H_SYS_GPR79, HW_H_SYS_GPR80, HW_H_SYS_GPR81, HW_H_SYS_GPR82\n+ , HW_H_SYS_GPR83, HW_H_SYS_GPR84, HW_H_SYS_GPR85, HW_H_SYS_GPR86\n+ , HW_H_SYS_GPR87, HW_H_SYS_GPR88, HW_H_SYS_GPR89, HW_H_SYS_GPR90\n+ , HW_H_SYS_GPR91, HW_H_SYS_GPR92, HW_H_SYS_GPR93, HW_H_SYS_GPR94\n+ , HW_H_SYS_GPR95, HW_H_SYS_GPR96, HW_H_SYS_GPR97, HW_H_SYS_GPR98\n+ , HW_H_SYS_GPR99, HW_H_SYS_GPR100, HW_H_SYS_GPR101, HW_H_SYS_GPR102\n+ , HW_H_SYS_GPR103, HW_H_SYS_GPR104, HW_H_SYS_GPR105, HW_H_SYS_GPR106\n+ , HW_H_SYS_GPR107, HW_H_SYS_GPR108, HW_H_SYS_GPR109, HW_H_SYS_GPR110\n+ , HW_H_SYS_GPR111, HW_H_SYS_GPR112, HW_H_SYS_GPR113, HW_H_SYS_GPR114\n+ , HW_H_SYS_GPR115, HW_H_SYS_GPR116, HW_H_SYS_GPR117, HW_H_SYS_GPR118\n+ , HW_H_SYS_GPR119, HW_H_SYS_GPR120, HW_H_SYS_GPR121, HW_H_SYS_GPR122\n+ , HW_H_SYS_GPR123, HW_H_SYS_GPR124, HW_H_SYS_GPR125, HW_H_SYS_GPR126\n+ , HW_H_SYS_GPR127, HW_H_SYS_GPR128, HW_H_SYS_GPR129, HW_H_SYS_GPR130\n+ , HW_H_SYS_GPR131, HW_H_SYS_GPR132, HW_H_SYS_GPR133, HW_H_SYS_GPR134\n+ , HW_H_SYS_GPR135, HW_H_SYS_GPR136, HW_H_SYS_GPR137, HW_H_SYS_GPR138\n+ , HW_H_SYS_GPR139, HW_H_SYS_GPR140, HW_H_SYS_GPR141, HW_H_SYS_GPR142\n+ , HW_H_SYS_GPR143, HW_H_SYS_GPR144, HW_H_SYS_GPR145, HW_H_SYS_GPR146\n+ , HW_H_SYS_GPR147, HW_H_SYS_GPR148, HW_H_SYS_GPR149, HW_H_SYS_GPR150\n+ , HW_H_SYS_GPR151, HW_H_SYS_GPR152, HW_H_SYS_GPR153, HW_H_SYS_GPR154\n+ , HW_H_SYS_GPR155, HW_H_SYS_GPR156, HW_H_SYS_GPR157, HW_H_SYS_GPR158\n+ , HW_H_SYS_GPR159, HW_H_SYS_GPR160, HW_H_SYS_GPR161, HW_H_SYS_GPR162\n+ , HW_H_SYS_GPR163, HW_H_SYS_GPR164, HW_H_SYS_GPR165, HW_H_SYS_GPR166\n+ , HW_H_SYS_GPR167, HW_H_SYS_GPR168, HW_H_SYS_GPR169, HW_H_SYS_GPR170\n+ , HW_H_SYS_GPR171, HW_H_SYS_GPR172, HW_H_SYS_GPR173, HW_H_SYS_GPR174\n+ , HW_H_SYS_GPR175, HW_H_SYS_GPR176, HW_H_SYS_GPR177, HW_H_SYS_GPR178\n+ , HW_H_SYS_GPR179, HW_H_SYS_GPR180, HW_H_SYS_GPR181, HW_H_SYS_GPR182\n+ , HW_H_SYS_GPR183, HW_H_SYS_GPR184, HW_H_SYS_GPR185, HW_H_SYS_GPR186\n+ , HW_H_SYS_GPR187, HW_H_SYS_GPR188, HW_H_SYS_GPR189, HW_H_SYS_GPR190\n+ , HW_H_SYS_GPR191, HW_H_SYS_GPR192, HW_H_SYS_GPR193, HW_H_SYS_GPR194\n+ , HW_H_SYS_GPR195, HW_H_SYS_GPR196, HW_H_SYS_GPR197, HW_H_SYS_GPR198\n+ , HW_H_SYS_GPR199, HW_H_SYS_GPR200, HW_H_SYS_GPR201, HW_H_SYS_GPR202\n+ , HW_H_SYS_GPR203, HW_H_SYS_GPR204, HW_H_SYS_GPR205, HW_H_SYS_GPR206\n+ , HW_H_SYS_GPR207, HW_H_SYS_GPR208, HW_H_SYS_GPR209, HW_H_SYS_GPR210\n+ , HW_H_SYS_GPR211, HW_H_SYS_GPR212, HW_H_SYS_GPR213, HW_H_SYS_GPR214\n+ , HW_H_SYS_GPR215, HW_H_SYS_GPR216, HW_H_SYS_GPR217, HW_H_SYS_GPR218\n+ , HW_H_SYS_GPR219, HW_H_SYS_GPR220, HW_H_SYS_GPR221, HW_H_SYS_GPR222\n+ , HW_H_SYS_GPR223, HW_H_SYS_GPR224, HW_H_SYS_GPR225, HW_H_SYS_GPR226\n+ , HW_H_SYS_GPR227, HW_H_SYS_GPR228, HW_H_SYS_GPR229, HW_H_SYS_GPR230\n+ , HW_H_SYS_GPR231, HW_H_SYS_GPR232, HW_H_SYS_GPR233, HW_H_SYS_GPR234\n+ , HW_H_SYS_GPR235, HW_H_SYS_GPR236, HW_H_SYS_GPR237, HW_H_SYS_GPR238\n+ , HW_H_SYS_GPR239, HW_H_SYS_GPR240, HW_H_SYS_GPR241, HW_H_SYS_GPR242\n+ , HW_H_SYS_GPR243, HW_H_SYS_GPR244, HW_H_SYS_GPR245, HW_H_SYS_GPR246\n+ , HW_H_SYS_GPR247, HW_H_SYS_GPR248, HW_H_SYS_GPR249, HW_H_SYS_GPR250\n+ , HW_H_SYS_GPR251, HW_H_SYS_GPR252, HW_H_SYS_GPR253, HW_H_SYS_GPR254\n+ , HW_H_SYS_GPR255, HW_H_SYS_GPR256, HW_H_SYS_GPR257, HW_H_SYS_GPR258\n+ , HW_H_SYS_GPR259, HW_H_SYS_GPR260, HW_H_SYS_GPR261, HW_H_SYS_GPR262\n+ , HW_H_SYS_GPR263, HW_H_SYS_GPR264, HW_H_SYS_GPR265, HW_H_SYS_GPR266\n+ , HW_H_SYS_GPR267, HW_H_SYS_GPR268, HW_H_SYS_GPR269, HW_H_SYS_GPR270\n+ , HW_H_SYS_GPR271, HW_H_SYS_GPR272, HW_H_SYS_GPR273, HW_H_SYS_GPR274\n+ , HW_H_SYS_GPR275, HW_H_SYS_GPR276, HW_H_SYS_GPR277, HW_H_SYS_GPR278\n+ , HW_H_SYS_GPR279, HW_H_SYS_GPR280, HW_H_SYS_GPR281, HW_H_SYS_GPR282\n+ , HW_H_SYS_GPR283, HW_H_SYS_GPR284, HW_H_SYS_GPR285, HW_H_SYS_GPR286\n+ , HW_H_SYS_GPR287, HW_H_SYS_GPR288, HW_H_SYS_GPR289, HW_H_SYS_GPR290\n+ , HW_H_SYS_GPR291, HW_H_SYS_GPR292, HW_H_SYS_GPR293, HW_H_SYS_GPR294\n+ , HW_H_SYS_GPR295, HW_H_SYS_GPR296, HW_H_SYS_GPR297, HW_H_SYS_GPR298\n+ , HW_H_SYS_GPR299, HW_H_SYS_GPR300, HW_H_SYS_GPR301, HW_H_SYS_GPR302\n+ , HW_H_SYS_GPR303, HW_H_SYS_GPR304, HW_H_SYS_GPR305, HW_H_SYS_GPR306\n+ , HW_H_SYS_GPR307, HW_H_SYS_GPR308, HW_H_SYS_GPR309, HW_H_SYS_GPR310\n+ , HW_H_SYS_GPR311, HW_H_SYS_GPR312, HW_H_SYS_GPR313, HW_H_SYS_GPR314\n+ , HW_H_SYS_GPR315, HW_H_SYS_GPR316, HW_H_SYS_GPR317, HW_H_SYS_GPR318\n+ , HW_H_SYS_GPR319, HW_H_SYS_GPR320, HW_H_SYS_GPR321, HW_H_SYS_GPR322\n+ , HW_H_SYS_GPR323, HW_H_SYS_GPR324, HW_H_SYS_GPR325, HW_H_SYS_GPR326\n+ , HW_H_SYS_GPR327, HW_H_SYS_GPR328, HW_H_SYS_GPR329, HW_H_SYS_GPR330\n+ , HW_H_SYS_GPR331, HW_H_SYS_GPR332, HW_H_SYS_GPR333, HW_H_SYS_GPR334\n+ , HW_H_SYS_GPR335, HW_H_SYS_GPR336, HW_H_SYS_GPR337, HW_H_SYS_GPR338\n+ , HW_H_SYS_GPR339, HW_H_SYS_GPR340, HW_H_SYS_GPR341, HW_H_SYS_GPR342\n+ , HW_H_SYS_GPR343, HW_H_SYS_GPR344, HW_H_SYS_GPR345, HW_H_SYS_GPR346\n+ , HW_H_SYS_GPR347, HW_H_SYS_GPR348, HW_H_SYS_GPR349, HW_H_SYS_GPR350\n+ , HW_H_SYS_GPR351, HW_H_SYS_GPR352, HW_H_SYS_GPR353, HW_H_SYS_GPR354\n+ , HW_H_SYS_GPR355, HW_H_SYS_GPR356, HW_H_SYS_GPR357, HW_H_SYS_GPR358\n+ , HW_H_SYS_GPR359, HW_H_SYS_GPR360, HW_H_SYS_GPR361, HW_H_SYS_GPR362\n+ , HW_H_SYS_GPR363, HW_H_SYS_GPR364, HW_H_SYS_GPR365, HW_H_SYS_GPR366\n+ , HW_H_SYS_GPR367, HW_H_SYS_GPR368, HW_H_SYS_GPR369, HW_H_SYS_GPR370\n+ , HW_H_SYS_GPR371, HW_H_SYS_GPR372, HW_H_SYS_GPR373, HW_H_SYS_GPR374\n+ , HW_H_SYS_GPR375, HW_H_SYS_GPR376, HW_H_SYS_GPR377, HW_H_SYS_GPR378\n+ , HW_H_SYS_GPR379, HW_H_SYS_GPR380, HW_H_SYS_GPR381, HW_H_SYS_GPR382\n+ , HW_H_SYS_GPR383, HW_H_SYS_GPR384, HW_H_SYS_GPR385, HW_H_SYS_GPR386\n+ , HW_H_SYS_GPR387, HW_H_SYS_GPR388, HW_H_SYS_GPR389, HW_H_SYS_GPR390\n+ , HW_H_SYS_GPR391, HW_H_SYS_GPR392, HW_H_SYS_GPR393, HW_H_SYS_GPR394\n+ , HW_H_SYS_GPR395, HW_H_SYS_GPR396, HW_H_SYS_GPR397, HW_H_SYS_GPR398\n+ , HW_H_SYS_GPR399, HW_H_SYS_GPR400, HW_H_SYS_GPR401, HW_H_SYS_GPR402\n+ , HW_H_SYS_GPR403, HW_H_SYS_GPR404, HW_H_SYS_GPR405, HW_H_SYS_GPR406\n+ , HW_H_SYS_GPR407, HW_H_SYS_GPR408, HW_H_SYS_GPR409, HW_H_SYS_GPR410\n+ , HW_H_SYS_GPR411, HW_H_SYS_GPR412, HW_H_SYS_GPR413, HW_H_SYS_GPR414\n+ , HW_H_SYS_GPR415, HW_H_SYS_GPR416, HW_H_SYS_GPR417, HW_H_SYS_GPR418\n+ , HW_H_SYS_GPR419, HW_H_SYS_GPR420, HW_H_SYS_GPR421, HW_H_SYS_GPR422\n+ , HW_H_SYS_GPR423, HW_H_SYS_GPR424, HW_H_SYS_GPR425, HW_H_SYS_GPR426\n+ , HW_H_SYS_GPR427, HW_H_SYS_GPR428, HW_H_SYS_GPR429, HW_H_SYS_GPR430\n+ , HW_H_SYS_GPR431, HW_H_SYS_GPR432, HW_H_SYS_GPR433, HW_H_SYS_GPR434\n+ , HW_H_SYS_GPR435, HW_H_SYS_GPR436, HW_H_SYS_GPR437, HW_H_SYS_GPR438\n+ , HW_H_SYS_GPR439, HW_H_SYS_GPR440, HW_H_SYS_GPR441, HW_H_SYS_GPR442\n+ , HW_H_SYS_GPR443, HW_H_SYS_GPR444, HW_H_SYS_GPR445, HW_H_SYS_GPR446\n+ , HW_H_SYS_GPR447, HW_H_SYS_GPR448, HW_H_SYS_GPR449, HW_H_SYS_GPR450\n+ , HW_H_SYS_GPR451, HW_H_SYS_GPR452, HW_H_SYS_GPR453, HW_H_SYS_GPR454\n+ , HW_H_SYS_GPR455, HW_H_SYS_GPR456, HW_H_SYS_GPR457, HW_H_SYS_GPR458\n+ , HW_H_SYS_GPR459, HW_H_SYS_GPR460, HW_H_SYS_GPR461, HW_H_SYS_GPR462\n+ , HW_H_SYS_GPR463, HW_H_SYS_GPR464, HW_H_SYS_GPR465, HW_H_SYS_GPR466\n+ , HW_H_SYS_GPR467, HW_H_SYS_GPR468, HW_H_SYS_GPR469, HW_H_SYS_GPR470\n+ , HW_H_SYS_GPR471, HW_H_SYS_GPR472, HW_H_SYS_GPR473, HW_H_SYS_GPR474\n+ , HW_H_SYS_GPR475, HW_H_SYS_GPR476, HW_H_SYS_GPR477, HW_H_SYS_GPR478\n+ , HW_H_SYS_GPR479, HW_H_SYS_GPR480, HW_H_SYS_GPR481, HW_H_SYS_GPR482\n+ , HW_H_SYS_GPR483, HW_H_SYS_GPR484, HW_H_SYS_GPR485, HW_H_SYS_GPR486\n+ , HW_H_SYS_GPR487, HW_H_SYS_GPR488, HW_H_SYS_GPR489, HW_H_SYS_GPR490\n+ , HW_H_SYS_GPR491, HW_H_SYS_GPR492, HW_H_SYS_GPR493, HW_H_SYS_GPR494\n+ , HW_H_SYS_GPR495, HW_H_SYS_GPR496, HW_H_SYS_GPR497, HW_H_SYS_GPR498\n+ , HW_H_SYS_GPR499, HW_H_SYS_GPR500, HW_H_SYS_GPR501, HW_H_SYS_GPR502\n+ , HW_H_SYS_GPR503, HW_H_SYS_GPR504, HW_H_SYS_GPR505, HW_H_SYS_GPR506\n+ , HW_H_SYS_GPR507, HW_H_SYS_GPR508, HW_H_SYS_GPR509, HW_H_SYS_GPR510\n+ , HW_H_SYS_GPR511, HW_H_MAC_MACLO, HW_H_MAC_MACHI, HW_H_TICK_TTMR\n+ , HW_H_SYS_VR_REV, HW_H_SYS_VR_CFG, HW_H_SYS_VR_VER, HW_H_SYS_UPR_UP\n+ , HW_H_SYS_UPR_DCP, HW_H_SYS_UPR_ICP, HW_H_SYS_UPR_DMP, HW_H_SYS_UPR_MP\n+ , HW_H_SYS_UPR_IMP, HW_H_SYS_UPR_DUP, HW_H_SYS_UPR_PCUP, HW_H_SYS_UPR_PICP\n+ , HW_H_SYS_UPR_PMP, HW_H_SYS_UPR_TTP, HW_H_SYS_UPR_CUP, HW_H_SYS_CPUCFGR_NSGR\n+ , HW_H_SYS_CPUCFGR_CGF, HW_H_SYS_CPUCFGR_OB32S, HW_H_SYS_CPUCFGR_OB64S, HW_H_SYS_CPUCFGR_OF32S\n+ , HW_H_SYS_CPUCFGR_OF64S, HW_H_SYS_CPUCFGR_OV64S, HW_H_SYS_CPUCFGR_ND, HW_H_SYS_SR_SM\n+ , HW_H_SYS_SR_TEE, HW_H_SYS_SR_IEE, HW_H_SYS_SR_DCE, HW_H_SYS_SR_ICE\n+ , HW_H_SYS_SR_DME, HW_H_SYS_SR_IME, HW_H_SYS_SR_LEE, HW_H_SYS_SR_CE\n+ , HW_H_SYS_SR_F, HW_H_SYS_SR_CY, HW_H_SYS_SR_OV, HW_H_SYS_SR_OVE\n+ , HW_H_SYS_SR_DSX, HW_H_SYS_SR_EPH, HW_H_SYS_SR_FO, HW_H_SYS_SR_SUMRA\n+ , HW_H_SYS_SR_CID, HW_H_SYS_FPCSR_FPEE, HW_H_SYS_FPCSR_RM, HW_H_SYS_FPCSR_OVF\n+ , HW_H_SYS_FPCSR_UNF, HW_H_SYS_FPCSR_SNF, HW_H_SYS_FPCSR_QNF, HW_H_SYS_FPCSR_ZF\n+ , HW_H_SYS_FPCSR_IXF, HW_H_SYS_FPCSR_IVF, HW_H_SYS_FPCSR_INF, HW_H_SYS_FPCSR_DZF\n+ , HW_H_SIMM16, HW_H_UIMM16, HW_H_UIMM6, HW_H_ATOMIC_RESERVE\n+ , HW_H_ATOMIC_ADDRESS, HW_H_ROFF1, HW_MAX\n } CGEN_HW_TYPE;\n \n #define MAX_HW ((int) HW_MAX)\n@@ -626,11 +632,12 @@ typedef enum cgen_operand_type {\n  , OR1K_OPERAND_DISP26, OR1K_OPERAND_DISP21, OR1K_OPERAND_SIMM16, OR1K_OPERAND_UIMM16\n  , OR1K_OPERAND_SIMM16_SPLIT, OR1K_OPERAND_UIMM16_SPLIT, OR1K_OPERAND_RDSF, OR1K_OPERAND_RASF\n  , OR1K_OPERAND_RBSF, OR1K_OPERAND_RDDF, OR1K_OPERAND_RADF, OR1K_OPERAND_RBDF\n- , OR1K_OPERAND_MAX\n+ , OR1K_OPERAND_RDD32F, OR1K_OPERAND_RDDI, OR1K_OPERAND_RAD32F, OR1K_OPERAND_RADI\n+ , OR1K_OPERAND_RBD32F, OR1K_OPERAND_RBDI, OR1K_OPERAND_MAX\n } CGEN_OPERAND_TYPE;\n \n /* Number of operands types.  */\n-#define MAX_OPERANDS 32\n+#define MAX_OPERANDS 38\n \n /* Maximum number of operands referenced by any insn.  */\n #define MAX_OPERAND_INSTANCES 10\n@@ -678,9 +685,9 @@ extern const CGEN_ATTR_TABLE or1k_cgen_insn_attr_table[];\n \n /* Hardware decls.  */\n \n+extern CGEN_KEYWORD or1k_cgen_opval_h_gpr;\n extern CGEN_KEYWORD or1k_cgen_opval_h_fsr;\n extern CGEN_KEYWORD or1k_cgen_opval_h_fdr;\n-extern CGEN_KEYWORD or1k_cgen_opval_h_gpr;\n \n extern const CGEN_HW_ENTRY or1k_cgen_hw_table[];\n "
    },
    {
      "sha": "74bf38f26b70b9237bc28d82760486975ba7236d",
      "filename": "opcodes/or1k-dis.c",
      "status": "modified",
      "additions": 41,
      "deletions": 2,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-dis.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -58,6 +58,27 @@ static int read_insn\n \f\n /* -- disassembler routines inserted here.  */\n \n+/* -- dis.c */\n+\n+static void\n+print_regpair (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n+\t       void * dis_info,\n+\t       long value,\n+\t       unsigned int attrs ATTRIBUTE_UNUSED,\n+\t       bfd_vma pc ATTRIBUTE_UNUSED,\n+\t       int length ATTRIBUTE_UNUSED)\n+{\n+  disassemble_info *info = dis_info;\n+  char reg1_index;\n+  char reg2_index;\n+\n+  reg1_index = value & 0x1f;\n+  reg2_index = reg1_index + ((value & (1 << 5)) ? 2 : 1);\n+\n+  (*info->fprintf_func) (info->stream, \"r%d,r%d\", reg1_index, reg2_index);\n+}\n+\n+/* -- */\n \n void or1k_cgen_print_operand\n   (CGEN_CPU_DESC, int, PTR, CGEN_FIELDS *, void const *, bfd_vma, int);\n@@ -99,27 +120,45 @@ or1k_cgen_print_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RA :\n       print_keyword (cd, info, & or1k_cgen_opval_h_gpr, fields->f_r2, 0);\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      print_regpair (cd, info, fields->f_rad32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n+      break;\n     case OR1K_OPERAND_RADF :\n-      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r1, 0);\n+      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r2, 0);\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      print_regpair (cd, info, fields->f_rad32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n     case OR1K_OPERAND_RASF :\n       print_keyword (cd, info, & or1k_cgen_opval_h_fsr, fields->f_r2, 0);\n       break;\n     case OR1K_OPERAND_RB :\n       print_keyword (cd, info, & or1k_cgen_opval_h_gpr, fields->f_r3, 0);\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      print_regpair (cd, info, fields->f_rbd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r1, 0);\n+      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r3, 0);\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      print_regpair (cd, info, fields->f_rbd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n     case OR1K_OPERAND_RBSF :\n       print_keyword (cd, info, & or1k_cgen_opval_h_fsr, fields->f_r3, 0);\n       break;\n     case OR1K_OPERAND_RD :\n       print_keyword (cd, info, & or1k_cgen_opval_h_gpr, fields->f_r1, 0);\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      print_regpair (cd, info, fields->f_rdd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n+      break;\n     case OR1K_OPERAND_RDDF :\n       print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r1, 0);\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      print_regpair (cd, info, fields->f_rdd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n+      break;\n     case OR1K_OPERAND_RDSF :\n       print_keyword (cd, info, & or1k_cgen_opval_h_fsr, fields->f_r1, 0);\n       break;"
    },
    {
      "sha": "6271f5c6d11ddcf00351abf15ccac8f2da4dbabc",
      "filename": "opcodes/or1k-ibld.c",
      "status": "modified",
      "additions": 222,
      "deletions": 12,
      "changes": 234,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-ibld.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -590,27 +590,111 @@ or1k_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RA :\n       errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      {\n+{\n+  FLD (f_r2) = ((FLD (f_rad32)) & (31));\n+  FLD (f_raoff_9_1) = ((((SI) (FLD (f_rad32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_raoff_9_1, 0, 0, 9, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n+      break;\n     case OR1K_OPERAND_RADF :\n-      errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n+      errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      {\n+{\n+  FLD (f_r2) = ((FLD (f_rad32)) & (31));\n+  FLD (f_raoff_9_1) = ((((SI) (FLD (f_rad32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_raoff_9_1, 0, 0, 9, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n       break;\n     case OR1K_OPERAND_RASF :\n       errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n       break;\n     case OR1K_OPERAND_RB :\n       errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      {\n+{\n+  FLD (f_r3) = ((FLD (f_rbd32)) & (31));\n+  FLD (f_rboff_8_1) = ((((SI) (FLD (f_rbd32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_rboff_8_1, 0, 0, 8, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n+      errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      {\n+{\n+  FLD (f_r3) = ((FLD (f_rbd32)) & (31));\n+  FLD (f_rboff_8_1) = ((((SI) (FLD (f_rbd32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_rboff_8_1, 0, 0, 8, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n       break;\n     case OR1K_OPERAND_RBSF :\n       errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n       break;\n     case OR1K_OPERAND_RD :\n       errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      {\n+{\n+  FLD (f_r1) = ((FLD (f_rdd32)) & (31));\n+  FLD (f_rdoff_10_1) = ((((SI) (FLD (f_rdd32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_rdoff_10_1, 0, 0, 10, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n+      break;\n     case OR1K_OPERAND_RDDF :\n       errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      {\n+{\n+  FLD (f_r1) = ((FLD (f_rdd32)) & (31));\n+  FLD (f_rdoff_10_1) = ((((SI) (FLD (f_rdd32)) >> (5))) & (1));\n+}\n+        errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+        errmsg = insert_normal (cd, fields->f_rdoff_10_1, 0, 0, 10, 1, 32, total_length, buffer);\n+        if (errmsg)\n+          break;\n+      }\n+      break;\n     case OR1K_OPERAND_RDSF :\n       errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n       break;\n@@ -714,27 +798,81 @@ or1k_cgen_extract_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RA :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 1, 32, total_length, pc, & fields->f_raoff_9_1);\n+        if (length <= 0) break;\n+  FLD (f_rad32) = ((FLD (f_r2)) | (((FLD (f_raoff_9_1)) << (5))));\n+      }\n+      break;\n     case OR1K_OPERAND_RADF :\n-      length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 9, 1, 32, total_length, pc, & fields->f_raoff_9_1);\n+        if (length <= 0) break;\n+  FLD (f_rad32) = ((FLD (f_r2)) | (((FLD (f_raoff_9_1)) << (5))));\n+      }\n       break;\n     case OR1K_OPERAND_RASF :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n       break;\n     case OR1K_OPERAND_RB :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 8, 1, 32, total_length, pc, & fields->f_rboff_8_1);\n+        if (length <= 0) break;\n+  FLD (f_rbd32) = ((FLD (f_r3)) | (((FLD (f_rboff_8_1)) << (5))));\n+      }\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n+      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 8, 1, 32, total_length, pc, & fields->f_rboff_8_1);\n+        if (length <= 0) break;\n+  FLD (f_rbd32) = ((FLD (f_r3)) | (((FLD (f_rboff_8_1)) << (5))));\n+      }\n       break;\n     case OR1K_OPERAND_RBSF :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n       break;\n     case OR1K_OPERAND_RD :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 10, 1, 32, total_length, pc, & fields->f_rdoff_10_1);\n+        if (length <= 0) break;\n+  FLD (f_rdd32) = ((FLD (f_r1)) | (((FLD (f_rdoff_10_1)) << (5))));\n+      }\n+      break;\n     case OR1K_OPERAND_RDDF :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      {\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n+        if (length <= 0) break;\n+        length = extract_normal (cd, ex_info, insn_value, 0, 0, 10, 1, 32, total_length, pc, & fields->f_rdoff_10_1);\n+        if (length <= 0) break;\n+  FLD (f_rdd32) = ((FLD (f_r1)) | (((FLD (f_rdoff_10_1)) << (5))));\n+      }\n+      break;\n     case OR1K_OPERAND_RDSF :\n       length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n       break;\n@@ -813,27 +951,45 @@ or1k_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RA :\n       value = fields->f_r2;\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      value = fields->f_rad32;\n+      break;\n     case OR1K_OPERAND_RADF :\n-      value = fields->f_r1;\n+      value = fields->f_r2;\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      value = fields->f_rad32;\n       break;\n     case OR1K_OPERAND_RASF :\n       value = fields->f_r2;\n       break;\n     case OR1K_OPERAND_RB :\n       value = fields->f_r3;\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      value = fields->f_rbd32;\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      value = fields->f_r1;\n+      value = fields->f_r3;\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      value = fields->f_rbd32;\n       break;\n     case OR1K_OPERAND_RBSF :\n       value = fields->f_r3;\n       break;\n     case OR1K_OPERAND_RD :\n       value = fields->f_r1;\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      value = fields->f_rdd32;\n+      break;\n     case OR1K_OPERAND_RDDF :\n       value = fields->f_r1;\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      value = fields->f_rdd32;\n+      break;\n     case OR1K_OPERAND_RDSF :\n       value = fields->f_r1;\n       break;\n@@ -882,27 +1038,45 @@ or1k_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RA :\n       value = fields->f_r2;\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      value = fields->f_rad32;\n+      break;\n     case OR1K_OPERAND_RADF :\n-      value = fields->f_r1;\n+      value = fields->f_r2;\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      value = fields->f_rad32;\n       break;\n     case OR1K_OPERAND_RASF :\n       value = fields->f_r2;\n       break;\n     case OR1K_OPERAND_RB :\n       value = fields->f_r3;\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      value = fields->f_rbd32;\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      value = fields->f_r1;\n+      value = fields->f_r3;\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      value = fields->f_rbd32;\n       break;\n     case OR1K_OPERAND_RBSF :\n       value = fields->f_r3;\n       break;\n     case OR1K_OPERAND_RD :\n       value = fields->f_r1;\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      value = fields->f_rdd32;\n+      break;\n     case OR1K_OPERAND_RDDF :\n       value = fields->f_r1;\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      value = fields->f_rdd32;\n+      break;\n     case OR1K_OPERAND_RDSF :\n       value = fields->f_r1;\n       break;\n@@ -958,27 +1132,45 @@ or1k_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RA :\n       fields->f_r2 = value;\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      fields->f_rad32 = value;\n+      break;\n     case OR1K_OPERAND_RADF :\n-      fields->f_r1 = value;\n+      fields->f_r2 = value;\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      fields->f_rad32 = value;\n       break;\n     case OR1K_OPERAND_RASF :\n       fields->f_r2 = value;\n       break;\n     case OR1K_OPERAND_RB :\n       fields->f_r3 = value;\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      fields->f_rbd32 = value;\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      fields->f_r1 = value;\n+      fields->f_r3 = value;\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      fields->f_rbd32 = value;\n       break;\n     case OR1K_OPERAND_RBSF :\n       fields->f_r3 = value;\n       break;\n     case OR1K_OPERAND_RD :\n       fields->f_r1 = value;\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      fields->f_rdd32 = value;\n+      break;\n     case OR1K_OPERAND_RDDF :\n       fields->f_r1 = value;\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      fields->f_rdd32 = value;\n+      break;\n     case OR1K_OPERAND_RDSF :\n       fields->f_r1 = value;\n       break;\n@@ -1024,27 +1216,45 @@ or1k_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RA :\n       fields->f_r2 = value;\n       break;\n+    case OR1K_OPERAND_RAD32F :\n+      fields->f_rad32 = value;\n+      break;\n     case OR1K_OPERAND_RADF :\n-      fields->f_r1 = value;\n+      fields->f_r2 = value;\n+      break;\n+    case OR1K_OPERAND_RADI :\n+      fields->f_rad32 = value;\n       break;\n     case OR1K_OPERAND_RASF :\n       fields->f_r2 = value;\n       break;\n     case OR1K_OPERAND_RB :\n       fields->f_r3 = value;\n       break;\n+    case OR1K_OPERAND_RBD32F :\n+      fields->f_rbd32 = value;\n+      break;\n     case OR1K_OPERAND_RBDF :\n-      fields->f_r1 = value;\n+      fields->f_r3 = value;\n+      break;\n+    case OR1K_OPERAND_RBDI :\n+      fields->f_rbd32 = value;\n       break;\n     case OR1K_OPERAND_RBSF :\n       fields->f_r3 = value;\n       break;\n     case OR1K_OPERAND_RD :\n       fields->f_r1 = value;\n       break;\n+    case OR1K_OPERAND_RDD32F :\n+      fields->f_rdd32 = value;\n+      break;\n     case OR1K_OPERAND_RDDF :\n       fields->f_r1 = value;\n       break;\n+    case OR1K_OPERAND_RDDI :\n+      fields->f_rdd32 = value;\n+      break;\n     case OR1K_OPERAND_RDSF :\n       fields->f_r1 = value;\n       break;"
    },
    {
      "sha": "86e421099a3c76451cfa9053a717047cc2a19a1f",
      "filename": "opcodes/or1k-opc.c",
      "status": "modified",
      "additions": 289,
      "deletions": 30,
      "changes": 319,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opc.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -32,6 +32,21 @@ This file is part of the GNU Binutils and/or GDB, the GNU debugger.\n #include \"libiberty.h\"\n \n /* -- opc.c */\n+\n+/* Special check to ensure that instruction exists for given machine.  */\n+\n+int\n+or1k_cgen_insn_supported (CGEN_CPU_DESC cd, const CGEN_INSN *insn)\n+{\n+  int machs = CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_MACH);\n+\n+  /* No mach attribute?  Assume it's supported for all machs.  */\n+  if (machs == 0)\n+    return 1;\n+\n+  return ((machs & cd->machs) != 0);\n+}\n+\n /* -- */\n /* The hash functions are recorded here to help keep assembler code out of\n    the disassembler and vice versa.  */\n@@ -149,31 +164,59 @@ static const CGEN_IFMT ifmt_lf_add_s ATTRIBUTE_UNUSED = {\n };\n \n static const CGEN_IFMT ifmt_lf_add_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xfc0007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R1) }, { F (F_R1) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+  32, 32, 0xfc0007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n+static const CGEN_IFMT ifmt_lf_add_d32 ATTRIBUTE_UNUSED = {\n+  32, 32, 0xfc0000ff, { { F (F_OPCODE) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_lf_itof_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n+static const CGEN_IFMT ifmt_lf_itof_d ATTRIBUTE_UNUSED = {\n+  32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n+static const CGEN_IFMT ifmt_lf_itof_d32 ATTRIBUTE_UNUSED = {\n+  32, 32, 0xfc00f9ff, { { F (F_OPCODE) }, { F (F_R3) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RESV_8_1) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n static const CGEN_IFMT ifmt_lf_ftoi_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_lf_ftoi_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R1) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+  32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n+static const CGEN_IFMT ifmt_lf_ftoi_d32 ATTRIBUTE_UNUSED = {\n+  32, 32, 0xfc00f9ff, { { F (F_OPCODE) }, { F (F_R3) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RESV_8_1) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_eq_s ATTRIBUTE_UNUSED = {\n+static const CGEN_IFMT ifmt_lf_sfeq_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n+static const CGEN_IFMT ifmt_lf_sfeq_d ATTRIBUTE_UNUSED = {\n+  32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n+static const CGEN_IFMT ifmt_lf_sfeq_d32 ATTRIBUTE_UNUSED = {\n+  32, 32, 0xffe004ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_RESV_10_1) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n static const CGEN_IFMT ifmt_lf_cust1_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_lf_cust1_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_R1) }, { F (F_R1) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+  32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n+};\n+\n+static const CGEN_IFMT ifmt_lf_cust1_d32 ATTRIBUTE_UNUSED = {\n+  32, 32, 0xffe004ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_RESV_10_1) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n #undef F\n@@ -791,6 +834,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000010 }\n   },\n+/* lf.add.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000010 }\n+  },\n /* lf.sub.s $rDSF,$rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n@@ -803,6 +852,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000011 }\n   },\n+/* lf.sub.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000011 }\n+  },\n /* lf.mul.s $rDSF,$rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n@@ -815,6 +870,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000012 }\n   },\n+/* lf.mul.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000012 }\n+  },\n /* lf.div.s $rDSF,$rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n@@ -827,6 +888,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000013 }\n   },\n+/* lf.div.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000013 }\n+  },\n /* lf.rem.s $rDSF,$rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n@@ -839,17 +906,29 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000016 }\n   },\n+/* lf.rem.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000016 }\n+  },\n /* lf.itof.s $rDSF,$rA */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RDSF), ',', OP (RA), 0 } },\n     & ifmt_lf_itof_s, { 0xc8000004 }\n   },\n-/* lf.itof.d $rDSF,$rA */\n+/* lf.itof.d $rDDF,$rA */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDSF), ',', OP (RA), 0 } },\n-    & ifmt_lf_itof_s, { 0xc8000014 }\n+    { { MNEM, ' ', OP (RDDF), ',', OP (RA), 0 } },\n+    & ifmt_lf_itof_d, { 0xc8000014 }\n+  },\n+/* lf.itof.d $rDD32F,$rADI */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RADI), 0 } },\n+    & ifmt_lf_itof_d32, { 0xc8000014 }\n   },\n /* lf.ftoi.s $rD,$rASF */\n   {\n@@ -863,77 +942,245 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RD), ',', OP (RADF), 0 } },\n     & ifmt_lf_ftoi_d, { 0xc8000015 }\n   },\n+/* lf.ftoi.d $rDDI,$rAD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDDI), ',', OP (RAD32F), 0 } },\n+    & ifmt_lf_ftoi_d32, { 0xc8000015 }\n+  },\n /* lf.sfeq.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc8000008 }\n+    & ifmt_lf_sfeq_s, { 0xc8000008 }\n   },\n-/* lf.sfeq.d $rASF,$rBSF */\n+/* lf.sfeq.d $rADF,$rBDF */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc8000018 }\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc8000018 }\n+  },\n+/* lf.sfeq.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc8000018 }\n   },\n /* lf.sfne.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc8000009 }\n+    & ifmt_lf_sfeq_s, { 0xc8000009 }\n   },\n-/* lf.sfne.d $rASF,$rBSF */\n+/* lf.sfne.d $rADF,$rBDF */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc8000019 }\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc8000019 }\n+  },\n+/* lf.sfne.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc8000019 }\n   },\n /* lf.sfge.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800000b }\n+    & ifmt_lf_sfeq_s, { 0xc800000b }\n   },\n-/* lf.sfge.d $rASF,$rBSF */\n+/* lf.sfge.d $rADF,$rBDF */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800001b }\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800001b }\n+  },\n+/* lf.sfge.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800001b }\n   },\n /* lf.sfgt.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800000a }\n+    & ifmt_lf_sfeq_s, { 0xc800000a }\n   },\n-/* lf.sfgt.d $rASF,$rBSF */\n+/* lf.sfgt.d $rADF,$rBDF */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800001a }\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800001a }\n+  },\n+/* lf.sfgt.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800001a }\n   },\n /* lf.sflt.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800000c }\n+    & ifmt_lf_sfeq_s, { 0xc800000c }\n   },\n-/* lf.sflt.d $rASF,$rBSF */\n+/* lf.sflt.d $rADF,$rBDF */\n   {\n     { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800001c }\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800001c }\n+  },\n+/* lf.sflt.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800001c }\n   },\n /* lf.sfle.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800000d }\n+    & ifmt_lf_sfeq_s, { 0xc800000d }\n+  },\n+/* lf.sfle.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800001d }\n+  },\n+/* lf.sfle.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800001d }\n+  },\n+/* lf.sfueq.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc8000028 }\n+  },\n+/* lf.sfueq.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc8000038 }\n+  },\n+/* lf.sfueq.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc8000038 }\n+  },\n+/* lf.sfune.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc8000029 }\n+  },\n+/* lf.sfune.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc8000039 }\n+  },\n+/* lf.sfune.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc8000039 }\n+  },\n+/* lf.sfugt.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc800002a }\n+  },\n+/* lf.sfugt.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800003a }\n+  },\n+/* lf.sfugt.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800003a }\n+  },\n+/* lf.sfuge.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc800002b }\n+  },\n+/* lf.sfuge.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800003b }\n+  },\n+/* lf.sfuge.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800003b }\n+  },\n+/* lf.sfult.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc800002c }\n+  },\n+/* lf.sfult.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800003c }\n   },\n-/* lf.sfle.d $rASF,$rBSF */\n+/* lf.sfult.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800003c }\n+  },\n+/* lf.sfule.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n-    & ifmt_lf_eq_s, { 0xc800001d }\n+    & ifmt_lf_sfeq_s, { 0xc800002d }\n+  },\n+/* lf.sfule.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800003d }\n+  },\n+/* lf.sfule.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800003d }\n+  },\n+/* lf.sfun.s $rASF,$rBSF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n+    & ifmt_lf_sfeq_s, { 0xc800002e }\n+  },\n+/* lf.sfun.d $rADF,$rBDF */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n+    & ifmt_lf_sfeq_d, { 0xc800003e }\n+  },\n+/* lf.sfun.d $rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_sfeq_d32, { 0xc800003e }\n   },\n /* lf.madd.s $rDSF,$rASF,$rBSF */\n   {\n@@ -947,6 +1194,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n     & ifmt_lf_add_d, { 0xc8000017 }\n   },\n+/* lf.madd.d $rDD32F,$rAD32F,$rBD32F */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (RDD32F), ',', OP (RAD32F), ',', OP (RBD32F), 0 } },\n+    & ifmt_lf_add_d32, { 0xc8000017 }\n+  },\n /* lf.cust1.s $rASF,$rBSF */\n   {\n     { 0, 0, 0, 0 },\n@@ -959,6 +1212,12 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, 0 } },\n     & ifmt_lf_cust1_d, { 0xc80000e0 }\n   },\n+/* lf.cust1.d */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, 0 } },\n+    & ifmt_lf_cust1_d32, { 0xc80000e0 }\n+  },\n };\n \n #undef A"
    },
    {
      "sha": "2ec4b4b323e2bc9c263258ff93ccdc6c357946fd",
      "filename": "opcodes/or1k-opc.h",
      "status": "modified",
      "additions": 30,
      "deletions": 9,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opc.h?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -37,6 +37,11 @@ extern \"C\" {\n #undef  CGEN_DIS_HASH\n #define CGEN_DIS_HASH(buffer, value) (((unsigned char *) (buffer))[0] >> 2)\n \n+/* Check applicability of instructions against machines.  */\n+#define CGEN_VALIDATE_INSN_SUPPORTED\n+\n+extern int or1k_cgen_insn_supported (CGEN_CPU_DESC, const CGEN_INSN *);\n+\n /* -- */\n /* Enum declaration for or1k instruction types.  */\n typedef enum cgen_insn_type {\n@@ -65,21 +70,30 @@ typedef enum cgen_insn_type {\n  , OR1K_INSN_L_MACU, OR1K_INSN_L_MSB, OR1K_INSN_L_MSBU, OR1K_INSN_L_CUST1\n  , OR1K_INSN_L_CUST2, OR1K_INSN_L_CUST3, OR1K_INSN_L_CUST4, OR1K_INSN_L_CUST5\n  , OR1K_INSN_L_CUST6, OR1K_INSN_L_CUST7, OR1K_INSN_L_CUST8, OR1K_INSN_LF_ADD_S\n- , OR1K_INSN_LF_ADD_D, OR1K_INSN_LF_SUB_S, OR1K_INSN_LF_SUB_D, OR1K_INSN_LF_MUL_S\n- , OR1K_INSN_LF_MUL_D, OR1K_INSN_LF_DIV_S, OR1K_INSN_LF_DIV_D, OR1K_INSN_LF_REM_S\n- , OR1K_INSN_LF_REM_D, OR1K_INSN_LF_ITOF_S, OR1K_INSN_LF_ITOF_D, OR1K_INSN_LF_FTOI_S\n- , OR1K_INSN_LF_FTOI_D, OR1K_INSN_LF_EQ_S, OR1K_INSN_LF_EQ_D, OR1K_INSN_LF_NE_S\n- , OR1K_INSN_LF_NE_D, OR1K_INSN_LF_GE_S, OR1K_INSN_LF_GE_D, OR1K_INSN_LF_GT_S\n- , OR1K_INSN_LF_GT_D, OR1K_INSN_LF_LT_S, OR1K_INSN_LF_LT_D, OR1K_INSN_LF_LE_S\n- , OR1K_INSN_LF_LE_D, OR1K_INSN_LF_MADD_S, OR1K_INSN_LF_MADD_D, OR1K_INSN_LF_CUST1_S\n- , OR1K_INSN_LF_CUST1_D\n+ , OR1K_INSN_LF_ADD_D, OR1K_INSN_LF_ADD_D32, OR1K_INSN_LF_SUB_S, OR1K_INSN_LF_SUB_D\n+ , OR1K_INSN_LF_SUB_D32, OR1K_INSN_LF_MUL_S, OR1K_INSN_LF_MUL_D, OR1K_INSN_LF_MUL_D32\n+ , OR1K_INSN_LF_DIV_S, OR1K_INSN_LF_DIV_D, OR1K_INSN_LF_DIV_D32, OR1K_INSN_LF_REM_S\n+ , OR1K_INSN_LF_REM_D, OR1K_INSN_LF_REM_D32, OR1K_INSN_LF_ITOF_S, OR1K_INSN_LF_ITOF_D\n+ , OR1K_INSN_LF_ITOF_D32, OR1K_INSN_LF_FTOI_S, OR1K_INSN_LF_FTOI_D, OR1K_INSN_LF_FTOI_D32\n+ , OR1K_INSN_LF_SFEQ_S, OR1K_INSN_LF_SFEQ_D, OR1K_INSN_LF_SFEQ_D32, OR1K_INSN_LF_SFNE_S\n+ , OR1K_INSN_LF_SFNE_D, OR1K_INSN_LF_SFNE_D32, OR1K_INSN_LF_SFGE_S, OR1K_INSN_LF_SFGE_D\n+ , OR1K_INSN_LF_SFGE_D32, OR1K_INSN_LF_SFGT_S, OR1K_INSN_LF_SFGT_D, OR1K_INSN_LF_SFGT_D32\n+ , OR1K_INSN_LF_SFLT_S, OR1K_INSN_LF_SFLT_D, OR1K_INSN_LF_SFLT_D32, OR1K_INSN_LF_SFLE_S\n+ , OR1K_INSN_LF_SFLE_D, OR1K_INSN_LF_SFLE_D32, OR1K_INSN_LF_SFUEQ_S, OR1K_INSN_LF_SFUEQ_D\n+ , OR1K_INSN_LF_SFUEQ_D32, OR1K_INSN_LF_SFUNE_S, OR1K_INSN_LF_SFUNE_D, OR1K_INSN_LF_SFUNE_D32\n+ , OR1K_INSN_LF_SFUGT_S, OR1K_INSN_LF_SFUGT_D, OR1K_INSN_LF_SFUGT_D32, OR1K_INSN_LF_SFUGE_S\n+ , OR1K_INSN_LF_SFUGE_D, OR1K_INSN_LF_SFUGE_D32, OR1K_INSN_LF_SFULT_S, OR1K_INSN_LF_SFULT_D\n+ , OR1K_INSN_LF_SFULT_D32, OR1K_INSN_LF_SFULE_S, OR1K_INSN_LF_SFULE_D, OR1K_INSN_LF_SFULE_D32\n+ , OR1K_INSN_LF_SFUN_S, OR1K_INSN_LF_SFUN_D, OR1K_INSN_LF_SFUN_D32, OR1K_INSN_LF_MADD_S\n+ , OR1K_INSN_LF_MADD_D, OR1K_INSN_LF_MADD_D32, OR1K_INSN_LF_CUST1_S, OR1K_INSN_LF_CUST1_D\n+ , OR1K_INSN_LF_CUST1_D32\n } CGEN_INSN_TYPE;\n \n /* Index of `invalid' insn place holder.  */\n #define CGEN_INSN_INVALID OR1K_INSN_INVALID\n \n /* Total number of insns in table.  */\n-#define MAX_INSNS ((int) OR1K_INSN_LF_CUST1_D + 1)\n+#define MAX_INSNS ((int) OR1K_INSN_LF_CUST1_D32 + 1)\n \n /* This struct records data prior to insertion or after extraction.  */\n struct cgen_fields\n@@ -113,6 +127,7 @@ struct cgen_fields\n   long f_resv_10_7;\n   long f_resv_10_3;\n   long f_resv_10_1;\n+  long f_resv_8_1;\n   long f_resv_7_4;\n   long f_resv_5_2;\n   long f_imm16_25_5;\n@@ -124,6 +139,12 @@ struct cgen_fields\n   long f_uimm6;\n   long f_uimm16_split;\n   long f_simm16_split;\n+  long f_rdoff_10_1;\n+  long f_raoff_9_1;\n+  long f_rboff_8_1;\n+  long f_rdd32;\n+  long f_rad32;\n+  long f_rbd32;\n };\n \n #define CGEN_INIT_PARSE(od) \\"
    },
    {
      "sha": "84a0dfe9bc852d01296548947de9f933c543b646",
      "filename": "opcodes/or1k-opinst.c",
      "status": "modified",
      "additions": 86,
      "deletions": 14,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opinst.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c4ac46e8e7ef92311181f85b193af369897151/opcodes/or1k-opinst.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opinst.c?ref=e4c4ac46e8e7ef92311181f85b193af369897151",
      "patch": "@@ -461,6 +461,13 @@ static const CGEN_OPINST sfmt_lf_add_d_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n+static const CGEN_OPINST sfmt_lf_add_d32_ops[] ATTRIBUTE_UNUSED = {\n+  { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n+  { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n+  { OUTPUT, \"rDD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RDD32F), 0, 0 },\n+  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n+};\n+\n static const CGEN_OPINST sfmt_lf_itof_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n@@ -475,6 +482,13 @@ static const CGEN_OPINST sfmt_lf_itof_d_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n+static const CGEN_OPINST sfmt_lf_itof_d32_ops[] ATTRIBUTE_UNUSED = {\n+  { INPUT, \"rADI\", HW_H_I64R, CGEN_MODE_DI, OP_ENT (RADI), 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"rDD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RDD32F), 0, 0 },\n+  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n+};\n+\n static const CGEN_OPINST sfmt_lf_ftoi_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rASF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RASF), 0, 0 },\n   { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n@@ -489,20 +503,34 @@ static const CGEN_OPINST sfmt_lf_ftoi_d_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n-static const CGEN_OPINST sfmt_lf_eq_s_ops[] ATTRIBUTE_UNUSED = {\n+static const CGEN_OPINST sfmt_lf_ftoi_d32_ops[] ATTRIBUTE_UNUSED = {\n+  { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"rDDI\", HW_H_I64R, CGEN_MODE_DI, OP_ENT (RDDI), 0, 0 },\n+  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n+};\n+\n+static const CGEN_OPINST sfmt_lf_sfeq_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rASF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RASF), 0, 0 },\n   { INPUT, \"rBSF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RBSF), 0, 0 },\n   { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n-static const CGEN_OPINST sfmt_lf_eq_d_ops[] ATTRIBUTE_UNUSED = {\n+static const CGEN_OPINST sfmt_lf_sfeq_d_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rADF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RADF), 0, 0 },\n   { INPUT, \"rBDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RBDF), 0, 0 },\n   { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n+static const CGEN_OPINST sfmt_lf_sfeq_d32_ops[] ATTRIBUTE_UNUSED = {\n+  { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n+  { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n+};\n+\n static const CGEN_OPINST sfmt_lf_madd_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rASF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RASF), 0, 0 },\n   { INPUT, \"rBSF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RBSF), 0, 0 },\n@@ -519,6 +547,14 @@ static const CGEN_OPINST sfmt_lf_madd_d_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n+static const CGEN_OPINST sfmt_lf_madd_d32_ops[] ATTRIBUTE_UNUSED = {\n+  { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n+  { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n+  { INPUT, \"rDD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RDD32F), 0, 0 },\n+  { OUTPUT, \"rDD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RDD32F), 0, 0 },\n+  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n+};\n+\n #undef OP_ENT\n #undef INPUT\n #undef OUTPUT\n@@ -629,32 +665,68 @@ static const CGEN_OPINST *or1k_cgen_opinst_table[MAX_INSNS] = {\n   & sfmt_l_msync_ops[0],\n   & sfmt_lf_add_s_ops[0],\n   & sfmt_lf_add_d_ops[0],\n+  & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n   & sfmt_lf_add_d_ops[0],\n+  & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n   & sfmt_lf_add_d_ops[0],\n+  & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n   & sfmt_lf_add_d_ops[0],\n+  & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n   & sfmt_lf_add_d_ops[0],\n+  & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_itof_s_ops[0],\n   & sfmt_lf_itof_d_ops[0],\n+  & sfmt_lf_itof_d32_ops[0],\n   & sfmt_lf_ftoi_s_ops[0],\n   & sfmt_lf_ftoi_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n-  & sfmt_lf_eq_s_ops[0],\n-  & sfmt_lf_eq_d_ops[0],\n+  & sfmt_lf_ftoi_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n+  & sfmt_lf_sfeq_s_ops[0],\n+  & sfmt_lf_sfeq_d_ops[0],\n+  & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_madd_s_ops[0],\n   & sfmt_lf_madd_d_ops[0],\n+  & sfmt_lf_madd_d32_ops[0],\n+  & sfmt_l_msync_ops[0],\n   & sfmt_l_msync_ops[0],\n   & sfmt_l_msync_ops[0],\n };"
    }
  ]
}