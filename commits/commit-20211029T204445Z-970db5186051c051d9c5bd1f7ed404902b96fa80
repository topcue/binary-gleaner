{
  "sha": "970db5186051c051d9c5bd1f7ed404902b96fa80",
  "node_id": "C_kwDOANOeidoAKDk3MGRiNTE4NjA1MWMwNTFkOWM1YmQxZjdlZDQwNDkwMmI5NmZhODA",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-26T20:38:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-29T20:44:45Z"
    },
    "message": "gdb: remove TYPE_FIELD_ENUMVAL\n\nRemove TYPE_FIELD_ENUMVAL, replace with type::field +\nfield::loc_enumval.\n\nChange-Id: I2ada73e4635aad3363ce2eb22c1dc52698ee2072",
    "tree": {
      "sha": "ec3f149b291e22c532b6b61367fd9b2abcdff0e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ec3f149b291e22c532b6b61367fd9b2abcdff0e4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/970db5186051c051d9c5bd1f7ed404902b96fa80",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/970db5186051c051d9c5bd1f7ed404902b96fa80",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/970db5186051c051d9c5bd1f7ed404902b96fa80",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/970db5186051c051d9c5bd1f7ed404902b96fa80/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b610c04548a39dbce6d51c33d7a8125e59066939",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b610c04548a39dbce6d51c33d7a8125e59066939",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b610c04548a39dbce6d51c33d7a8125e59066939"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 38,
    "deletions": 39
  },
  "files": [
    {
      "sha": "d964dae42cf64c24637a0241585ad63f860c9e51",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -651,7 +651,7 @@ ada_discrete_type_high_bound (struct type *type)\n \t  }\n       }\n     case TYPE_CODE_ENUM:\n-      return TYPE_FIELD_ENUMVAL (type, type->num_fields () - 1);\n+      return type->field (type->num_fields () - 1).loc_enumval ();\n     case TYPE_CODE_BOOL:\n       return 1;\n     case TYPE_CODE_CHAR:\n@@ -686,7 +686,7 @@ ada_discrete_type_low_bound (struct type *type)\n \t  }\n       }\n     case TYPE_CODE_ENUM:\n-      return TYPE_FIELD_ENUMVAL (type, 0);\n+      return type->field (0).loc_enumval ();\n     case TYPE_CODE_BOOL:\n       return 0;\n     case TYPE_CODE_CHAR:\n@@ -4617,7 +4617,7 @@ ada_identical_enum_types_p (struct type *type1, struct type *type2)\n \n   /* All enums in the type should have an identical underlying value.  */\n   for (i = 0; i < type1->num_fields (); i++)\n-    if (TYPE_FIELD_ENUMVAL (type1, i) != TYPE_FIELD_ENUMVAL (type2, i))\n+    if (type1->field (i).loc_enumval () != type2->field (i).loc_enumval ())\n       return 0;\n \n   /* All enumerals should also have the same name (modulo any numerical\n@@ -8578,7 +8578,7 @@ val_atr (struct type *type, LONGEST val)\n     {\n       if (val < 0 || val >= type->num_fields ())\n \terror (_(\"argument to 'VAL out of range\"));\n-      val = TYPE_FIELD_ENUMVAL (type, val);\n+      val = type->field (val).loc_enumval ();\n     }\n   return value_from_longest (type, val);\n }\n@@ -10214,7 +10214,7 @@ convert_char_literal (struct type *type, LONGEST val)\n       size_t elen = strlen (ename);\n \n       if (elen >= len && strcmp (name, ename + elen - len) == 0)\n-\treturn TYPE_FIELD_ENUMVAL (type, f);\n+\treturn type->field (f).loc_enumval ();\n     }\n   return val;\n }"
    },
    {
      "sha": "e336e03448097e201ba99516ac96e41492784b7e",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -328,11 +328,11 @@ print_enum_type (struct type *type, struct ui_file *stream)\n       wrap_here (\"    \");\n       fputs_styled (ada_enum_name (type->field (i).name ()),\n \t\t    variable_name_style.style (), stream);\n-      if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n+      if (lastval != type->field (i).loc_enumval ())\n \t{\n \t  fprintf_filtered (stream, \" => %s\",\n-\t\t\t    plongest (TYPE_FIELD_ENUMVAL (type, i)));\n-\t  lastval = TYPE_FIELD_ENUMVAL (type, i);\n+\t\t\t    plongest (type->field (i).loc_enumval ()));\n+\t  lastval = type->field (i).loc_enumval ();\n \t}\n       lastval += 1;\n     }"
    },
    {
      "sha": "6813af56dda4a12b01d9248afb8c63b5299520d0",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -94,7 +94,7 @@ print_optional_low_bound (struct ui_file *stream, struct type *type,\n     case TYPE_CODE_ENUM:\n       if (low_bound == 0)\n \treturn 0;\n-      low_bound = TYPE_FIELD_ENUMVAL (index_type, low_bound);\n+      low_bound = index_type->field (low_bound).loc_enumval ();\n       break;\n     case TYPE_CODE_UNDEF:\n       index_type = NULL;\n@@ -381,7 +381,7 @@ ada_print_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n       len = type->num_fields ();\n       for (i = 0; i < len; i++)\n \t{\n-\t  if (TYPE_FIELD_ENUMVAL (type, i) == val)\n+\t  if (type->field (i).loc_enumval () == val)\n \t    {\n \t      break;\n \t    }\n@@ -835,7 +835,7 @@ ada_val_print_enum (struct value *value, struct ui_file *stream, int recurse,\n   for (i = 0; i < len; i++)\n     {\n       QUIT;\n-      if (val == TYPE_FIELD_ENUMVAL (type, i))\n+      if (val == type->field (i).loc_enumval ())\n \tbreak;\n     }\n "
    },
    {
      "sha": "5f20233c78ac0823c6ae702bbd557a8cb19116fb",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -1596,11 +1596,11 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t      wrap_here (\"    \");\n \t      fputs_styled (type->field (i).name (),\n \t\t\t    variable_name_style.style (), stream);\n-\t      if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n+\t      if (lastval != type->field (i).loc_enumval ())\n \t\t{\n \t\t  fprintf_filtered (stream, \" = %s\",\n-\t\t\t\t    plongest (TYPE_FIELD_ENUMVAL (type, i)));\n-\t\t  lastval = TYPE_FIELD_ENUMVAL (type, i);\n+\t\t\t\t    plongest (type->field (i).loc_enumval ()));\n+\t\t  lastval = type->field (i).loc_enumval ();\n \t\t}\n \t      lastval++;\n \t    }"
    },
    {
      "sha": "87eb970231d67f23af627bad35962b963f27938a",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -137,7 +137,7 @@ convert_enum (compile_c_instance *context, struct type *type)\n   for (i = 0; i < type->num_fields (); ++i)\n     {\n       context->plugin ().build_add_enum_constant\n-\t(result, type->field (i).name (), TYPE_FIELD_ENUMVAL (type, i));\n+\t(result, type->field (i).name (), type->field (i).loc_enumval ());\n     }\n \n   context->plugin ().finish_enum_type (result);"
    },
    {
      "sha": "1bd083df8703260d5639f8163ec41f6703356813",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -944,7 +944,7 @@ compile_cplus_convert_enum (compile_cplus_instance *instance, struct type *type,\n \tcontinue;\n \n       instance->plugin ().build_enum_constant (result, fname.get (),\n-\t\t\t\t\t       TYPE_FIELD_ENUMVAL (type, i));\n+\t\t\t\t\t       type->field (i).loc_enumval ());\n     }\n \n   /* Finish enum definition and pop scopes.  */"
    },
    {
      "sha": "48fb55c308c0e323f180a037b5b839c097db1284",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -9201,7 +9201,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t    {\n \t      const char *name\n \t\t= rust_last_path_segment (enum_type->field (i).name ());\n-\t      discriminant_map[name] = TYPE_FIELD_ENUMVAL (enum_type, i);\n+\t      discriminant_map[name] = enum_type->field (i).loc_enumval ();\n \t    }\n \t}\n "
    },
    {
      "sha": "84e987b0410e1ffc8e4143c701e754cc38172e17",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -1068,12 +1068,12 @@ get_discrete_low_bound (struct type *type)\n \t  {\n \t    /* The enums may not be sorted by value, so search all\n \t       entries.  */\n-\t    LONGEST low = TYPE_FIELD_ENUMVAL (type, 0);\n+\t    LONGEST low = type->field (0).loc_enumval ();\n \n \t    for (int i = 0; i < type->num_fields (); i++)\n \t      {\n-\t\tif (TYPE_FIELD_ENUMVAL (type, i) < low)\n-\t\t  low = TYPE_FIELD_ENUMVAL (type, i);\n+\t\tif (type->field (i).loc_enumval () < low)\n+\t\t  low = type->field (i).loc_enumval ();\n \t      }\n \n \t    /* Set unsigned indicator if warranted.  */\n@@ -1139,12 +1139,12 @@ get_discrete_high_bound (struct type *type)\n \t  {\n \t    /* The enums may not be sorted by value, so search all\n \t       entries.  */\n-\t    LONGEST high = TYPE_FIELD_ENUMVAL (type, 0);\n+\t    LONGEST high = type->field (0).loc_enumval ();\n \n \t    for (int i = 0; i < type->num_fields (); i++)\n \t      {\n-\t\tif (TYPE_FIELD_ENUMVAL (type, i) > high)\n-\t\t  high = TYPE_FIELD_ENUMVAL (type, i);\n+\t\tif (type->field (i).loc_enumval () > high)\n+\t\t  high = type->field (i).loc_enumval ();\n \t      }\n \n \t    return high;\n@@ -1250,7 +1250,7 @@ discrete_position (struct type *type, LONGEST val)\n \n       for (i = 0; i < type->num_fields (); i += 1)\n \t{\n-\t  if (val == TYPE_FIELD_ENUMVAL (type, i))\n+\t  if (val == type->field (i).loc_enumval ())\n \t    return i;\n \t}\n \n@@ -5337,7 +5337,7 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       if (type->code () == TYPE_CODE_ENUM)\n \tprintf_filtered (\"%*s[%d] enumval %s type \", spaces + 2, \"\",\n-\t\t\t idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));\n+\t\t\t idx, plongest (type->field (idx).loc_enumval ()));\n       else\n \tprintf_filtered (\"%*s[%d] bitpos %s bitsize %d type \", spaces + 2, \"\",\n \t\t\t idx, plongest (type->field (idx).loc_bitpos ()),\n@@ -5565,7 +5565,7 @@ copy_type_recursive (struct objfile *objfile,\n \t      new_type->field (i).set_loc_bitpos (type->field (i).loc_bitpos ());\n \t      break;\n \t    case FIELD_LOC_KIND_ENUMVAL:\n-\t      new_type->field (i).set_loc_enumval (TYPE_FIELD_ENUMVAL (type, i));\n+\t      new_type->field (i).set_loc_enumval (type->field (i).loc_enumval ());\n \t      break;\n \t    case FIELD_LOC_KIND_PHYSADDR:\n \t      new_type->field (i).set_loc_physaddr"
    },
    {
      "sha": "e6384b1e8bff245d9ce2152765da81473e8c9d6b",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -2128,7 +2128,6 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)\n #define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)\n \n-#define TYPE_FIELD_ENUMVAL(thistype, n) ((thistype)->field (n).loc_enumval ())\n #define TYPE_FIELD_STATIC_PHYSNAME(thistype, n) ((thistype)->field (n).loc_physname ())\n #define TYPE_FIELD_STATIC_PHYSADDR(thistype, n) ((thistype)->field (n).loc_physaddr ())\n #define TYPE_FIELD_DWARF_BLOCK(thistype, n) ((thistype)->field (n).loc_dwarf_block ())"
    },
    {
      "sha": "c4504e7c266c77e66c5b92784302ea86427136e1",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -611,11 +611,11 @@ m2_enum (struct type *type, struct ui_file *stream, int show, int level)\n \t  wrap_here (\"    \");\n \t  fputs_styled (type->field (i).name (),\n \t\t\tvariable_name_style.style (), stream);\n-\t  if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n+\t  if (lastval != type->field (i).loc_enumval ())\n \t    {\n \t      fprintf_filtered (stream, \" = %s\",\n-\t\t\t\tplongest (TYPE_FIELD_ENUMVAL (type, i)));\n-\t      lastval = TYPE_FIELD_ENUMVAL (type, i);\n+\t\t\t\tplongest (type->field (i).loc_enumval ()));\n+\t      lastval = type->field (i).loc_enumval ();\n \t    }\n \t  lastval++;\n \t}"
    },
    {
      "sha": "b2d167f68bfea7cffaf665fafabb1e15c4347556",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -711,12 +711,12 @@ pascal_language::type_print_base (struct type *type, struct ui_file *stream, int\n \t\tfprintf_filtered (stream, \", \");\n \t      wrap_here (\"    \");\n \t      fputs_filtered (type->field (i).name (), stream);\n-\t      if (lastval != TYPE_FIELD_ENUMVAL (type, i))\n+\t      if (lastval != type->field (i).loc_enumval ())\n \t\t{\n \t\t  fprintf_filtered (stream,\n \t\t\t\t    \" := %s\",\n-\t\t\t\t    plongest (TYPE_FIELD_ENUMVAL (type, i)));\n-\t\t  lastval = TYPE_FIELD_ENUMVAL (type, i);\n+\t\t\t\t    plongest (type->field (i).loc_enumval ()));\n+\t\t  lastval = type->field (i).loc_enumval ();\n \t\t}\n \t      lastval++;\n \t    }"
    },
    {
      "sha": "8b17b70fbe3fcd84cae9b89085195d054ce5e4a6",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -184,7 +184,7 @@ convert_field (struct type *type, int field)\n \n       if (type->code () == TYPE_CODE_ENUM)\n \t{\n-\t  arg = gdb_py_object_from_longest (TYPE_FIELD_ENUMVAL (type, field));\n+\t  arg = gdb_py_object_from_longest (type->field (field).loc_enumval ());\n \t  attrstring = \"enumval\";\n \t}\n       else"
    },
    {
      "sha": "1312111b6014499a3d0fc486dd50035798584e5d",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -626,7 +626,7 @@ print_type_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n       len = type->num_fields ();\n       for (i = 0; i < len; i++)\n \t{\n-\t  if (TYPE_FIELD_ENUMVAL (type, i) == val)\n+\t  if (type->field (i).loc_enumval () == val)\n \t    {\n \t      break;\n \t    }"
    },
    {
      "sha": "9787cdbb513c60eccd6b4a574d1a68c8a14305c2",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -3343,7 +3343,7 @@ enum_constant_from_type (struct type *type, const char *name)\n \t  && fname[len - name_len - 2] == ':'\n \t  && fname[len - name_len - 1] == ':'\n \t  && strcmp (&fname[len - name_len], name) == 0)\n-\treturn value_from_longest (type, TYPE_FIELD_ENUMVAL (type, i));\n+\treturn value_from_longest (type, type->field (i).loc_enumval ());\n     }\n \n   error (_(\"no constant named \\\"%s\\\" in enum \\\"%s\\\"\"),"
    },
    {
      "sha": "4230dcec228a4b2fc1de2b5d1419da7fec506dc1",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/970db5186051c051d9c5bd1f7ed404902b96fa80/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=970db5186051c051d9c5bd1f7ed404902b96fa80",
      "patch": "@@ -608,7 +608,7 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n   for (i = 0; i < len; i++)\n     {\n       QUIT;\n-      if (val == TYPE_FIELD_ENUMVAL (type, i))\n+      if (val == type->field (i).loc_enumval ())\n \t{\n \t  break;\n \t}\n@@ -630,7 +630,7 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t{\n \t  QUIT;\n \n-\t  ULONGEST enumval = TYPE_FIELD_ENUMVAL (type, i);\n+\t  ULONGEST enumval = type->field (i).loc_enumval ();\n \t  int nbits = count_one_bits_ll (enumval);\n \n \t  gdb_assert (nbits == 0 || nbits == 1);\n@@ -645,7 +645,7 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t      else\n \t\tfputs_filtered (\" | \", stream);\n \n-\t      val &= ~TYPE_FIELD_ENUMVAL (type, i);\n+\t      val &= ~type->field (i).loc_enumval ();\n \t      fputs_styled (type->field (i).name (),\n \t\t\t    variable_name_style.style (), stream);\n \t    }"
    }
  ]
}