{
  "sha": "e286671bf99ab870d67431068e863c1c57631b1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTI4NjY3MWJmOTlhYjg3MGQ2NzQzMTA2OGU4NjNjMWM1NzYzMWIxZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:19:35Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:35Z"
    },
    "message": "Move signatured_type::type to unshareable object\n\nsignatured_type has a link to the \"struct type\".  However, types are\ninherently objfile-specific, so once sharing is implemented, this will\nbe incorrect.\n\nThis patch moves the type to a new map in the DWARF unshareable\nobject.\n\ngdb/ChangeLog:\n\nYYYY-MM-DD  Tom Tromey  <tom@tromey.com>\nYYYY-MM-DD  Simon Marchi  <simon.marchi@efficios.com>\n\n\t* dwarf2/read.h (struct dwarf2_per_objfile)\n\t<get_type_for_signatured_type, set_type_for_signatured_type>:\n\tNew methods.\n\t<m_type_map>: New member.\n\t(struct signatured_type) <type>: Remove.\n\t* dwarf2/read.c\n\t(dwarf2_per_objfile::get_type_for_signatured_type,\n\tdwarf2_per_objfile::set_type_for_signatured_type): New.\n\t(get_signatured_type): Use new methods.\n\nChange-Id: I765ae3c43fae1064f51ced352167a57638609f02",
    "tree": {
      "sha": "7f7d93ab206ed9e3300dad71bb0940634bf4ebbd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7f7d93ab206ed9e3300dad71bb0940634bf4ebbd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e286671bf99ab870d67431068e863c1c57631b1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e286671bf99ab870d67431068e863c1c57631b1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e286671bf99ab870d67431068e863c1c57631b1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e286671bf99ab870d67431068e863c1c57631b1f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8adb84872b7b039c70f5448f6cf5fe7dfc79d367",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8adb84872b7b039c70f5448f6cf5fe7dfc79d367"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 47,
    "deletions": 10
  },
  "files": [
    {
      "sha": "a3dec4fd13fc4dd762c95e4dcbf3e05f9b1555a3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e286671bf99ab870d67431068e863c1c57631b1f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e286671bf99ab870d67431068e863c1c57631b1f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e286671bf99ab870d67431068e863c1c57631b1f",
      "patch": "@@ -1,3 +1,16 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\t    Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_objfile)\n+\t<get_type_for_signatured_type, set_type_for_signatured_type>:\n+\tNew methods.\n+\t<m_type_map>: New member.\n+\t(struct signatured_type) <type>: Remove.\n+\t* dwarf2/read.c\n+\t(dwarf2_per_objfile::get_type_for_signatured_type,\n+\tdwarf2_per_objfile::set_type_for_signatured_type): New.\n+\t(get_signatured_type): Use new methods.\n+\n 2020-05-27  Tom Tromey  <tom@tromey.com>\n \t    Simon Marchi  <simon.marchi@efficios.com>\n "
    },
    {
      "sha": "7819fc5c8d6f55aa33082e49a093fc9361143463",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e286671bf99ab870d67431068e863c1c57631b1f/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e286671bf99ab870d67431068e863c1c57631b1f/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e286671bf99ab870d67431068e863c1c57631b1f",
      "patch": "@@ -9630,6 +9630,25 @@ dwarf2_per_objfile::get_type_unit_group_unshareable (type_unit_group *tu_group)\n   return result;\n }\n \n+struct type *\n+dwarf2_per_objfile::get_type_for_signatured_type\n+  (signatured_type *sig_type) const\n+{\n+  auto iter = this->m_type_map.find (sig_type);\n+  if (iter == this->m_type_map.end ())\n+    return nullptr;\n+\n+  return iter->second;\n+}\n+\n+void dwarf2_per_objfile::set_type_for_signatured_type\n+  (signatured_type *sig_type, struct type *type)\n+{\n+  gdb_assert (this->m_type_map.find (sig_type) == this->m_type_map.end ());\n+\n+  this->m_type_map[sig_type] = type;\n+}\n+\n /* A helper function for computing the list of all symbol tables\n    included by PER_CU.  */\n \n@@ -22720,8 +22739,9 @@ get_signatured_type (struct die_info *die, ULONGEST signature,\n     }\n \n   /* If we already know the type we're done.  */\n-  if (sig_type->type != NULL)\n-    return sig_type->type;\n+  type = dwarf2_per_objfile->get_type_for_signatured_type (sig_type);\n+  if (type != nullptr)\n+    return type;\n \n   type_cu = cu;\n   type_die = follow_die_sig_1 (die, sig_type, &type_cu);\n@@ -22748,7 +22768,8 @@ get_signatured_type (struct die_info *die, ULONGEST signature,\n \t\t objfile_name (dwarf2_per_objfile->objfile));\n       type = build_error_marker_type (cu, die);\n     }\n-  sig_type->type = type;\n+\n+  dwarf2_per_objfile->set_type_for_signatured_type (sig_type, type);\n \n   return type;\n }"
    },
    {
      "sha": "3500b0e7ba9f6d31be15751e1f7bb44c0d8bd35b",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e286671bf99ab870d67431068e863c1c57631b1f/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e286671bf99ab870d67431068e863c1c57631b1f/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=e286671bf99ab870d67431068e863c1c57631b1f",
      "patch": "@@ -329,11 +329,16 @@ struct dwarf2_per_objfile\n   /* Set the compunit_symtab associated to PER_CU.  */\n   void set_symtab (const dwarf2_per_cu_data *per_cu, compunit_symtab *symtab);\n \n-/* Get the type_unit_group_unshareable corresponding to TU_GROUP.  If one\n-   does not exist, create it.  */\n+  /* Get the type_unit_group_unshareable corresponding to TU_GROUP.  If one\n+     does not exist, create it.  */\n   type_unit_group_unshareable *get_type_unit_group_unshareable\n     (type_unit_group *tu_group);\n \n+  struct type *get_type_for_signatured_type (signatured_type *sig_type) const;\n+\n+  void set_type_for_signatured_type (signatured_type *sig_type,\n+\t\t\t\t     struct type *type);\n+\n   /* Find an integer type SIZE_IN_BYTES bytes in size and return it.\n      UNSIGNED_P controls if the integer is unsigned or not.  */\n   struct type *int_type (int size_in_bytes, bool unsigned_p) const;\n@@ -363,6 +368,9 @@ struct dwarf2_per_objfile\n \n   std::unordered_map<type_unit_group *, type_unit_group_unshareable_up>\n     m_type_units;\n+\n+  /* Map from signatured types to the corresponding struct type.  */\n+  std::unordered_map<signatured_type *, struct type *> m_type_map;\n };\n \n /* Get the dwarf2_per_objfile associated to OBJFILE.  */\n@@ -584,11 +592,6 @@ struct signatured_type\n      can share them.  This points to the containing symtab.  */\n   struct type_unit_group *type_unit_group;\n \n-  /* The type.\n-     The first time we encounter this type we fully read it in and install it\n-     in the symbol tables.  Subsequent times we only need the type.  */\n-  struct type *type;\n-\n   /* Containing DWO unit.\n      This field is valid iff per_cu.reading_dwo_directly.  */\n   struct dwo_unit *dwo_unit;"
    }
  ]
}