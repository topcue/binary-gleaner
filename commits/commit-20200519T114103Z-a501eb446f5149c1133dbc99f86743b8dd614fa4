{
  "sha": "a501eb446f5149c1133dbc99f86743b8dd614fa4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUwMWViNDQ2ZjUxNDljMTEzM2RiYzk5Zjg2NzQzYjhkZDYxNGZhNA==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-05-19T11:40:27Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-05-19T11:41:03Z"
    },
    "message": "or1k: Regenerate opcodes after removing 32-bit support\n\nopcodes/ChangeLog:\n\nyyyy-mm-dd  Stafford Horne  <shorne@gmail.com>\n\n\tPR 25184\n\t* or1k-asm.c: Regenerate.\n\t* or1k-desc.c: Regenerate.\n\t* or1k-desc.h: Regenerate.\n\t* or1k-dis.c: Regenerate.\n\t* or1k-ibld.c: Regenerate.\n\t* or1k-opc.c: Regenerate.\n\t* or1k-opc.h: Regenerate.\n\t* or1k-opinst.c: Regenerate.",
    "tree": {
      "sha": "84ddbf1c87ccbf14b53db80f5a1cbd1de436cfbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/84ddbf1c87ccbf14b53db80f5a1cbd1de436cfbc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a501eb446f5149c1133dbc99f86743b8dd614fa4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a501eb446f5149c1133dbc99f86743b8dd614fa4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a501eb446f5149c1133dbc99f86743b8dd614fa4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a501eb446f5149c1133dbc99f86743b8dd614fa4/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae440402f54c634baddc462f8561442befe2cafe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae440402f54c634baddc462f8561442befe2cafe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae440402f54c634baddc462f8561442befe2cafe"
    }
  ],
  "stats": {
    "total": 2843,
    "additions": 1195,
    "deletions": 1648
  },
  "files": [
    {
      "sha": "b2b9f5ad4c3ab073d816555c6196b97788f8a9b7",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -1,3 +1,15 @@\n+2020-05-19  Stafford Horne  <shorne@gmail.com>\n+\n+\tPR 25184\n+\t* or1k-asm.c: Regenerate.\n+\t* or1k-desc.c: Regenerate.\n+\t* or1k-desc.h: Regenerate.\n+\t* or1k-dis.c: Regenerate.\n+\t* or1k-ibld.c: Regenerate.\n+\t* or1k-opc.c: Regenerate.\n+\t* or1k-opc.h: Regenerate.\n+\t* or1k-opinst.c: Regenerate.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-opc (powerpc_opcodes): Add xscmpeqqp, xscmpgeqp, xscmpgtqp,"
    },
    {
      "sha": "5f3c6c74b12e6c93c78552b00c372a369ef27e3d",
      "filename": "opcodes/or1k-asm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-asm.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -519,9 +519,6 @@ or1k_cgen_parse_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RAD32F :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RAD32F, (unsigned long *) (& fields->f_rad32));\n       break;\n-    case OR1K_OPERAND_RADF :\n-      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r2);\n-      break;\n     case OR1K_OPERAND_RADI :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RADI, (unsigned long *) (& fields->f_rad32));\n       break;\n@@ -534,9 +531,6 @@ or1k_cgen_parse_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RBD32F :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RBD32F, (unsigned long *) (& fields->f_rbd32));\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r3);\n-      break;\n     case OR1K_OPERAND_RBDI :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RBDI, (unsigned long *) (& fields->f_rbd32));\n       break;\n@@ -549,9 +543,6 @@ or1k_cgen_parse_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RDD32F :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RDD32F, (unsigned long *) (& fields->f_rdd32));\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      errmsg = cgen_parse_keyword (cd, strp, & or1k_cgen_opval_h_fdr, & fields->f_r1);\n-      break;\n     case OR1K_OPERAND_RDDI :\n       errmsg = parse_regpair (cd, strp, OR1K_OPERAND_RDDI, (unsigned long *) (& fields->f_rdd32));\n       break;"
    },
    {
      "sha": "74976191868740f55c9c1ae654dba260f97b6756",
      "filename": "opcodes/or1k-desc.c",
      "status": "modified",
      "additions": 819,
      "deletions": 992,
      "changes": 1811,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-desc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-desc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-desc.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4"
    },
    {
      "sha": "10ec288038731932464d005e15aae7c8f6c9c435",
      "filename": "opcodes/or1k-desc.h",
      "status": "modified",
      "additions": 164,
      "deletions": 168,
      "changes": 332,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-desc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-desc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-desc.h?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -38,7 +38,6 @@ extern \"C\" {\n \n /* Selected cpu families.  */\n #define HAVE_CPU_OR1K32BF\n-#define HAVE_CPU_OR1K64BF\n \n #define CGEN_INSN_LSB0_P 1\n \n@@ -359,8 +358,7 @@ typedef enum insn_opcode_float_regreg {\n \n /* Enum declaration for machine type selection.  */\n typedef enum mach_attr {\n-  MACH_BASE, MACH_OR32, MACH_OR32ND, MACH_OR64\n- , MACH_OR64ND, MACH_MAX\n+  MACH_BASE, MACH_OR32, MACH_OR32ND, MACH_MAX\n } MACH_ATTR;\n \n /* Enum declaration for instruction set selection.  */\n@@ -435,166 +433,166 @@ typedef enum cgen_hw_attr {\n typedef enum cgen_hw_type {\n   HW_H_MEMORY, HW_H_SINT, HW_H_UINT, HW_H_ADDR\n  , HW_H_IADDR, HW_H_PC, HW_H_SPR, HW_H_GPR\n- , HW_H_FSR, HW_H_FDR, HW_H_FD32R, HW_H_I64R\n- , HW_H_SYS_VR, HW_H_SYS_UPR, HW_H_SYS_CPUCFGR, HW_H_SYS_DMMUCFGR\n- , HW_H_SYS_IMMUCFGR, HW_H_SYS_DCCFGR, HW_H_SYS_ICCFGR, HW_H_SYS_DCFGR\n- , HW_H_SYS_PCCFGR, HW_H_SYS_NPC, HW_H_SYS_SR, HW_H_SYS_PPC\n- , HW_H_SYS_FPCSR, HW_H_SYS_EPCR0, HW_H_SYS_EPCR1, HW_H_SYS_EPCR2\n- , HW_H_SYS_EPCR3, HW_H_SYS_EPCR4, HW_H_SYS_EPCR5, HW_H_SYS_EPCR6\n- , HW_H_SYS_EPCR7, HW_H_SYS_EPCR8, HW_H_SYS_EPCR9, HW_H_SYS_EPCR10\n- , HW_H_SYS_EPCR11, HW_H_SYS_EPCR12, HW_H_SYS_EPCR13, HW_H_SYS_EPCR14\n- , HW_H_SYS_EPCR15, HW_H_SYS_EEAR0, HW_H_SYS_EEAR1, HW_H_SYS_EEAR2\n- , HW_H_SYS_EEAR3, HW_H_SYS_EEAR4, HW_H_SYS_EEAR5, HW_H_SYS_EEAR6\n- , HW_H_SYS_EEAR7, HW_H_SYS_EEAR8, HW_H_SYS_EEAR9, HW_H_SYS_EEAR10\n- , HW_H_SYS_EEAR11, HW_H_SYS_EEAR12, HW_H_SYS_EEAR13, HW_H_SYS_EEAR14\n- , HW_H_SYS_EEAR15, HW_H_SYS_ESR0, HW_H_SYS_ESR1, HW_H_SYS_ESR2\n- , HW_H_SYS_ESR3, HW_H_SYS_ESR4, HW_H_SYS_ESR5, HW_H_SYS_ESR6\n- , HW_H_SYS_ESR7, HW_H_SYS_ESR8, HW_H_SYS_ESR9, HW_H_SYS_ESR10\n- , HW_H_SYS_ESR11, HW_H_SYS_ESR12, HW_H_SYS_ESR13, HW_H_SYS_ESR14\n- , HW_H_SYS_ESR15, HW_H_SYS_GPR0, HW_H_SYS_GPR1, HW_H_SYS_GPR2\n- , HW_H_SYS_GPR3, HW_H_SYS_GPR4, HW_H_SYS_GPR5, HW_H_SYS_GPR6\n- , HW_H_SYS_GPR7, HW_H_SYS_GPR8, HW_H_SYS_GPR9, HW_H_SYS_GPR10\n- , HW_H_SYS_GPR11, HW_H_SYS_GPR12, HW_H_SYS_GPR13, HW_H_SYS_GPR14\n- , HW_H_SYS_GPR15, HW_H_SYS_GPR16, HW_H_SYS_GPR17, HW_H_SYS_GPR18\n- , HW_H_SYS_GPR19, HW_H_SYS_GPR20, HW_H_SYS_GPR21, HW_H_SYS_GPR22\n- , HW_H_SYS_GPR23, HW_H_SYS_GPR24, HW_H_SYS_GPR25, HW_H_SYS_GPR26\n- , HW_H_SYS_GPR27, HW_H_SYS_GPR28, HW_H_SYS_GPR29, HW_H_SYS_GPR30\n- , HW_H_SYS_GPR31, HW_H_SYS_GPR32, HW_H_SYS_GPR33, HW_H_SYS_GPR34\n- , HW_H_SYS_GPR35, HW_H_SYS_GPR36, HW_H_SYS_GPR37, HW_H_SYS_GPR38\n- , HW_H_SYS_GPR39, HW_H_SYS_GPR40, HW_H_SYS_GPR41, HW_H_SYS_GPR42\n- , HW_H_SYS_GPR43, HW_H_SYS_GPR44, HW_H_SYS_GPR45, HW_H_SYS_GPR46\n- , HW_H_SYS_GPR47, HW_H_SYS_GPR48, HW_H_SYS_GPR49, HW_H_SYS_GPR50\n- , HW_H_SYS_GPR51, HW_H_SYS_GPR52, HW_H_SYS_GPR53, HW_H_SYS_GPR54\n- , HW_H_SYS_GPR55, HW_H_SYS_GPR56, HW_H_SYS_GPR57, HW_H_SYS_GPR58\n- , HW_H_SYS_GPR59, HW_H_SYS_GPR60, HW_H_SYS_GPR61, HW_H_SYS_GPR62\n- , HW_H_SYS_GPR63, HW_H_SYS_GPR64, HW_H_SYS_GPR65, HW_H_SYS_GPR66\n- , HW_H_SYS_GPR67, HW_H_SYS_GPR68, HW_H_SYS_GPR69, HW_H_SYS_GPR70\n- , HW_H_SYS_GPR71, HW_H_SYS_GPR72, HW_H_SYS_GPR73, HW_H_SYS_GPR74\n- , HW_H_SYS_GPR75, HW_H_SYS_GPR76, HW_H_SYS_GPR77, HW_H_SYS_GPR78\n- , HW_H_SYS_GPR79, HW_H_SYS_GPR80, HW_H_SYS_GPR81, HW_H_SYS_GPR82\n- , HW_H_SYS_GPR83, HW_H_SYS_GPR84, HW_H_SYS_GPR85, HW_H_SYS_GPR86\n- , HW_H_SYS_GPR87, HW_H_SYS_GPR88, HW_H_SYS_GPR89, HW_H_SYS_GPR90\n- , HW_H_SYS_GPR91, HW_H_SYS_GPR92, HW_H_SYS_GPR93, HW_H_SYS_GPR94\n- , HW_H_SYS_GPR95, HW_H_SYS_GPR96, HW_H_SYS_GPR97, HW_H_SYS_GPR98\n- , HW_H_SYS_GPR99, HW_H_SYS_GPR100, HW_H_SYS_GPR101, HW_H_SYS_GPR102\n- , HW_H_SYS_GPR103, HW_H_SYS_GPR104, HW_H_SYS_GPR105, HW_H_SYS_GPR106\n- , HW_H_SYS_GPR107, HW_H_SYS_GPR108, HW_H_SYS_GPR109, HW_H_SYS_GPR110\n- , HW_H_SYS_GPR111, HW_H_SYS_GPR112, HW_H_SYS_GPR113, HW_H_SYS_GPR114\n- , HW_H_SYS_GPR115, HW_H_SYS_GPR116, HW_H_SYS_GPR117, HW_H_SYS_GPR118\n- , HW_H_SYS_GPR119, HW_H_SYS_GPR120, HW_H_SYS_GPR121, HW_H_SYS_GPR122\n- , HW_H_SYS_GPR123, HW_H_SYS_GPR124, HW_H_SYS_GPR125, HW_H_SYS_GPR126\n- , HW_H_SYS_GPR127, HW_H_SYS_GPR128, HW_H_SYS_GPR129, HW_H_SYS_GPR130\n- , HW_H_SYS_GPR131, HW_H_SYS_GPR132, HW_H_SYS_GPR133, HW_H_SYS_GPR134\n- , HW_H_SYS_GPR135, HW_H_SYS_GPR136, HW_H_SYS_GPR137, HW_H_SYS_GPR138\n- , HW_H_SYS_GPR139, HW_H_SYS_GPR140, HW_H_SYS_GPR141, HW_H_SYS_GPR142\n- , HW_H_SYS_GPR143, HW_H_SYS_GPR144, HW_H_SYS_GPR145, HW_H_SYS_GPR146\n- , HW_H_SYS_GPR147, HW_H_SYS_GPR148, HW_H_SYS_GPR149, HW_H_SYS_GPR150\n- , HW_H_SYS_GPR151, HW_H_SYS_GPR152, HW_H_SYS_GPR153, HW_H_SYS_GPR154\n- , HW_H_SYS_GPR155, HW_H_SYS_GPR156, HW_H_SYS_GPR157, HW_H_SYS_GPR158\n- , HW_H_SYS_GPR159, HW_H_SYS_GPR160, HW_H_SYS_GPR161, HW_H_SYS_GPR162\n- , HW_H_SYS_GPR163, HW_H_SYS_GPR164, HW_H_SYS_GPR165, HW_H_SYS_GPR166\n- , HW_H_SYS_GPR167, HW_H_SYS_GPR168, HW_H_SYS_GPR169, HW_H_SYS_GPR170\n- , HW_H_SYS_GPR171, HW_H_SYS_GPR172, HW_H_SYS_GPR173, HW_H_SYS_GPR174\n- , HW_H_SYS_GPR175, HW_H_SYS_GPR176, HW_H_SYS_GPR177, HW_H_SYS_GPR178\n- , HW_H_SYS_GPR179, HW_H_SYS_GPR180, HW_H_SYS_GPR181, HW_H_SYS_GPR182\n- , HW_H_SYS_GPR183, HW_H_SYS_GPR184, HW_H_SYS_GPR185, HW_H_SYS_GPR186\n- , HW_H_SYS_GPR187, HW_H_SYS_GPR188, HW_H_SYS_GPR189, HW_H_SYS_GPR190\n- , HW_H_SYS_GPR191, HW_H_SYS_GPR192, HW_H_SYS_GPR193, HW_H_SYS_GPR194\n- , HW_H_SYS_GPR195, HW_H_SYS_GPR196, HW_H_SYS_GPR197, HW_H_SYS_GPR198\n- , HW_H_SYS_GPR199, HW_H_SYS_GPR200, HW_H_SYS_GPR201, HW_H_SYS_GPR202\n- , HW_H_SYS_GPR203, HW_H_SYS_GPR204, HW_H_SYS_GPR205, HW_H_SYS_GPR206\n- , HW_H_SYS_GPR207, HW_H_SYS_GPR208, HW_H_SYS_GPR209, HW_H_SYS_GPR210\n- , HW_H_SYS_GPR211, HW_H_SYS_GPR212, HW_H_SYS_GPR213, HW_H_SYS_GPR214\n- , HW_H_SYS_GPR215, HW_H_SYS_GPR216, HW_H_SYS_GPR217, HW_H_SYS_GPR218\n- , HW_H_SYS_GPR219, HW_H_SYS_GPR220, HW_H_SYS_GPR221, HW_H_SYS_GPR222\n- , HW_H_SYS_GPR223, HW_H_SYS_GPR224, HW_H_SYS_GPR225, HW_H_SYS_GPR226\n- , HW_H_SYS_GPR227, HW_H_SYS_GPR228, HW_H_SYS_GPR229, HW_H_SYS_GPR230\n- , HW_H_SYS_GPR231, HW_H_SYS_GPR232, HW_H_SYS_GPR233, HW_H_SYS_GPR234\n- , HW_H_SYS_GPR235, HW_H_SYS_GPR236, HW_H_SYS_GPR237, HW_H_SYS_GPR238\n- , HW_H_SYS_GPR239, HW_H_SYS_GPR240, HW_H_SYS_GPR241, HW_H_SYS_GPR242\n- , HW_H_SYS_GPR243, HW_H_SYS_GPR244, HW_H_SYS_GPR245, HW_H_SYS_GPR246\n- , HW_H_SYS_GPR247, HW_H_SYS_GPR248, HW_H_SYS_GPR249, HW_H_SYS_GPR250\n- , HW_H_SYS_GPR251, HW_H_SYS_GPR252, HW_H_SYS_GPR253, HW_H_SYS_GPR254\n- , HW_H_SYS_GPR255, HW_H_SYS_GPR256, HW_H_SYS_GPR257, HW_H_SYS_GPR258\n- , HW_H_SYS_GPR259, HW_H_SYS_GPR260, HW_H_SYS_GPR261, HW_H_SYS_GPR262\n- , HW_H_SYS_GPR263, HW_H_SYS_GPR264, HW_H_SYS_GPR265, HW_H_SYS_GPR266\n- , HW_H_SYS_GPR267, HW_H_SYS_GPR268, HW_H_SYS_GPR269, HW_H_SYS_GPR270\n- , HW_H_SYS_GPR271, HW_H_SYS_GPR272, HW_H_SYS_GPR273, HW_H_SYS_GPR274\n- , HW_H_SYS_GPR275, HW_H_SYS_GPR276, HW_H_SYS_GPR277, HW_H_SYS_GPR278\n- , HW_H_SYS_GPR279, HW_H_SYS_GPR280, HW_H_SYS_GPR281, HW_H_SYS_GPR282\n- , HW_H_SYS_GPR283, HW_H_SYS_GPR284, HW_H_SYS_GPR285, HW_H_SYS_GPR286\n- , HW_H_SYS_GPR287, HW_H_SYS_GPR288, HW_H_SYS_GPR289, HW_H_SYS_GPR290\n- , HW_H_SYS_GPR291, HW_H_SYS_GPR292, HW_H_SYS_GPR293, HW_H_SYS_GPR294\n- , HW_H_SYS_GPR295, HW_H_SYS_GPR296, HW_H_SYS_GPR297, HW_H_SYS_GPR298\n- , HW_H_SYS_GPR299, HW_H_SYS_GPR300, HW_H_SYS_GPR301, HW_H_SYS_GPR302\n- , HW_H_SYS_GPR303, HW_H_SYS_GPR304, HW_H_SYS_GPR305, HW_H_SYS_GPR306\n- , HW_H_SYS_GPR307, HW_H_SYS_GPR308, HW_H_SYS_GPR309, HW_H_SYS_GPR310\n- , HW_H_SYS_GPR311, HW_H_SYS_GPR312, HW_H_SYS_GPR313, HW_H_SYS_GPR314\n- , HW_H_SYS_GPR315, HW_H_SYS_GPR316, HW_H_SYS_GPR317, HW_H_SYS_GPR318\n- , HW_H_SYS_GPR319, HW_H_SYS_GPR320, HW_H_SYS_GPR321, HW_H_SYS_GPR322\n- , HW_H_SYS_GPR323, HW_H_SYS_GPR324, HW_H_SYS_GPR325, HW_H_SYS_GPR326\n- , HW_H_SYS_GPR327, HW_H_SYS_GPR328, HW_H_SYS_GPR329, HW_H_SYS_GPR330\n- , HW_H_SYS_GPR331, HW_H_SYS_GPR332, HW_H_SYS_GPR333, HW_H_SYS_GPR334\n- , HW_H_SYS_GPR335, HW_H_SYS_GPR336, HW_H_SYS_GPR337, HW_H_SYS_GPR338\n- , HW_H_SYS_GPR339, HW_H_SYS_GPR340, HW_H_SYS_GPR341, HW_H_SYS_GPR342\n- , HW_H_SYS_GPR343, HW_H_SYS_GPR344, HW_H_SYS_GPR345, HW_H_SYS_GPR346\n- , HW_H_SYS_GPR347, HW_H_SYS_GPR348, HW_H_SYS_GPR349, HW_H_SYS_GPR350\n- , HW_H_SYS_GPR351, HW_H_SYS_GPR352, HW_H_SYS_GPR353, HW_H_SYS_GPR354\n- , HW_H_SYS_GPR355, HW_H_SYS_GPR356, HW_H_SYS_GPR357, HW_H_SYS_GPR358\n- , HW_H_SYS_GPR359, HW_H_SYS_GPR360, HW_H_SYS_GPR361, HW_H_SYS_GPR362\n- , HW_H_SYS_GPR363, HW_H_SYS_GPR364, HW_H_SYS_GPR365, HW_H_SYS_GPR366\n- , HW_H_SYS_GPR367, HW_H_SYS_GPR368, HW_H_SYS_GPR369, HW_H_SYS_GPR370\n- , HW_H_SYS_GPR371, HW_H_SYS_GPR372, HW_H_SYS_GPR373, HW_H_SYS_GPR374\n- , HW_H_SYS_GPR375, HW_H_SYS_GPR376, HW_H_SYS_GPR377, HW_H_SYS_GPR378\n- , HW_H_SYS_GPR379, HW_H_SYS_GPR380, HW_H_SYS_GPR381, HW_H_SYS_GPR382\n- , HW_H_SYS_GPR383, HW_H_SYS_GPR384, HW_H_SYS_GPR385, HW_H_SYS_GPR386\n- , HW_H_SYS_GPR387, HW_H_SYS_GPR388, HW_H_SYS_GPR389, HW_H_SYS_GPR390\n- , HW_H_SYS_GPR391, HW_H_SYS_GPR392, HW_H_SYS_GPR393, HW_H_SYS_GPR394\n- , HW_H_SYS_GPR395, HW_H_SYS_GPR396, HW_H_SYS_GPR397, HW_H_SYS_GPR398\n- , HW_H_SYS_GPR399, HW_H_SYS_GPR400, HW_H_SYS_GPR401, HW_H_SYS_GPR402\n- , HW_H_SYS_GPR403, HW_H_SYS_GPR404, HW_H_SYS_GPR405, HW_H_SYS_GPR406\n- , HW_H_SYS_GPR407, HW_H_SYS_GPR408, HW_H_SYS_GPR409, HW_H_SYS_GPR410\n- , HW_H_SYS_GPR411, HW_H_SYS_GPR412, HW_H_SYS_GPR413, HW_H_SYS_GPR414\n- , HW_H_SYS_GPR415, HW_H_SYS_GPR416, HW_H_SYS_GPR417, HW_H_SYS_GPR418\n- , HW_H_SYS_GPR419, HW_H_SYS_GPR420, HW_H_SYS_GPR421, HW_H_SYS_GPR422\n- , HW_H_SYS_GPR423, HW_H_SYS_GPR424, HW_H_SYS_GPR425, HW_H_SYS_GPR426\n- , HW_H_SYS_GPR427, HW_H_SYS_GPR428, HW_H_SYS_GPR429, HW_H_SYS_GPR430\n- , HW_H_SYS_GPR431, HW_H_SYS_GPR432, HW_H_SYS_GPR433, HW_H_SYS_GPR434\n- , HW_H_SYS_GPR435, HW_H_SYS_GPR436, HW_H_SYS_GPR437, HW_H_SYS_GPR438\n- , HW_H_SYS_GPR439, HW_H_SYS_GPR440, HW_H_SYS_GPR441, HW_H_SYS_GPR442\n- , HW_H_SYS_GPR443, HW_H_SYS_GPR444, HW_H_SYS_GPR445, HW_H_SYS_GPR446\n- , HW_H_SYS_GPR447, HW_H_SYS_GPR448, HW_H_SYS_GPR449, HW_H_SYS_GPR450\n- , HW_H_SYS_GPR451, HW_H_SYS_GPR452, HW_H_SYS_GPR453, HW_H_SYS_GPR454\n- , HW_H_SYS_GPR455, HW_H_SYS_GPR456, HW_H_SYS_GPR457, HW_H_SYS_GPR458\n- , HW_H_SYS_GPR459, HW_H_SYS_GPR460, HW_H_SYS_GPR461, HW_H_SYS_GPR462\n- , HW_H_SYS_GPR463, HW_H_SYS_GPR464, HW_H_SYS_GPR465, HW_H_SYS_GPR466\n- , HW_H_SYS_GPR467, HW_H_SYS_GPR468, HW_H_SYS_GPR469, HW_H_SYS_GPR470\n- , HW_H_SYS_GPR471, HW_H_SYS_GPR472, HW_H_SYS_GPR473, HW_H_SYS_GPR474\n- , HW_H_SYS_GPR475, HW_H_SYS_GPR476, HW_H_SYS_GPR477, HW_H_SYS_GPR478\n- , HW_H_SYS_GPR479, HW_H_SYS_GPR480, HW_H_SYS_GPR481, HW_H_SYS_GPR482\n- , HW_H_SYS_GPR483, HW_H_SYS_GPR484, HW_H_SYS_GPR485, HW_H_SYS_GPR486\n- , HW_H_SYS_GPR487, HW_H_SYS_GPR488, HW_H_SYS_GPR489, HW_H_SYS_GPR490\n- , HW_H_SYS_GPR491, HW_H_SYS_GPR492, HW_H_SYS_GPR493, HW_H_SYS_GPR494\n- , HW_H_SYS_GPR495, HW_H_SYS_GPR496, HW_H_SYS_GPR497, HW_H_SYS_GPR498\n- , HW_H_SYS_GPR499, HW_H_SYS_GPR500, HW_H_SYS_GPR501, HW_H_SYS_GPR502\n- , HW_H_SYS_GPR503, HW_H_SYS_GPR504, HW_H_SYS_GPR505, HW_H_SYS_GPR506\n- , HW_H_SYS_GPR507, HW_H_SYS_GPR508, HW_H_SYS_GPR509, HW_H_SYS_GPR510\n- , HW_H_SYS_GPR511, HW_H_MAC_MACLO, HW_H_MAC_MACHI, HW_H_TICK_TTMR\n- , HW_H_SYS_VR_REV, HW_H_SYS_VR_CFG, HW_H_SYS_VR_VER, HW_H_SYS_UPR_UP\n- , HW_H_SYS_UPR_DCP, HW_H_SYS_UPR_ICP, HW_H_SYS_UPR_DMP, HW_H_SYS_UPR_MP\n- , HW_H_SYS_UPR_IMP, HW_H_SYS_UPR_DUP, HW_H_SYS_UPR_PCUP, HW_H_SYS_UPR_PICP\n- , HW_H_SYS_UPR_PMP, HW_H_SYS_UPR_TTP, HW_H_SYS_UPR_CUP, HW_H_SYS_CPUCFGR_NSGR\n- , HW_H_SYS_CPUCFGR_CGF, HW_H_SYS_CPUCFGR_OB32S, HW_H_SYS_CPUCFGR_OB64S, HW_H_SYS_CPUCFGR_OF32S\n- , HW_H_SYS_CPUCFGR_OF64S, HW_H_SYS_CPUCFGR_OV64S, HW_H_SYS_CPUCFGR_ND, HW_H_SYS_SR_SM\n- , HW_H_SYS_SR_TEE, HW_H_SYS_SR_IEE, HW_H_SYS_SR_DCE, HW_H_SYS_SR_ICE\n- , HW_H_SYS_SR_DME, HW_H_SYS_SR_IME, HW_H_SYS_SR_LEE, HW_H_SYS_SR_CE\n- , HW_H_SYS_SR_F, HW_H_SYS_SR_CY, HW_H_SYS_SR_OV, HW_H_SYS_SR_OVE\n- , HW_H_SYS_SR_DSX, HW_H_SYS_SR_EPH, HW_H_SYS_SR_FO, HW_H_SYS_SR_SUMRA\n- , HW_H_SYS_SR_CID, HW_H_SYS_FPCSR_FPEE, HW_H_SYS_FPCSR_RM, HW_H_SYS_FPCSR_OVF\n- , HW_H_SYS_FPCSR_UNF, HW_H_SYS_FPCSR_SNF, HW_H_SYS_FPCSR_QNF, HW_H_SYS_FPCSR_ZF\n- , HW_H_SYS_FPCSR_IXF, HW_H_SYS_FPCSR_IVF, HW_H_SYS_FPCSR_INF, HW_H_SYS_FPCSR_DZF\n- , HW_H_SIMM16, HW_H_UIMM16, HW_H_UIMM6, HW_H_ATOMIC_RESERVE\n- , HW_H_ATOMIC_ADDRESS, HW_H_ROFF1, HW_MAX\n+ , HW_H_FSR, HW_H_FD32R, HW_H_I64R, HW_H_SYS_VR\n+ , HW_H_SYS_UPR, HW_H_SYS_CPUCFGR, HW_H_SYS_DMMUCFGR, HW_H_SYS_IMMUCFGR\n+ , HW_H_SYS_DCCFGR, HW_H_SYS_ICCFGR, HW_H_SYS_DCFGR, HW_H_SYS_PCCFGR\n+ , HW_H_SYS_NPC, HW_H_SYS_SR, HW_H_SYS_PPC, HW_H_SYS_FPCSR\n+ , HW_H_SYS_EPCR0, HW_H_SYS_EPCR1, HW_H_SYS_EPCR2, HW_H_SYS_EPCR3\n+ , HW_H_SYS_EPCR4, HW_H_SYS_EPCR5, HW_H_SYS_EPCR6, HW_H_SYS_EPCR7\n+ , HW_H_SYS_EPCR8, HW_H_SYS_EPCR9, HW_H_SYS_EPCR10, HW_H_SYS_EPCR11\n+ , HW_H_SYS_EPCR12, HW_H_SYS_EPCR13, HW_H_SYS_EPCR14, HW_H_SYS_EPCR15\n+ , HW_H_SYS_EEAR0, HW_H_SYS_EEAR1, HW_H_SYS_EEAR2, HW_H_SYS_EEAR3\n+ , HW_H_SYS_EEAR4, HW_H_SYS_EEAR5, HW_H_SYS_EEAR6, HW_H_SYS_EEAR7\n+ , HW_H_SYS_EEAR8, HW_H_SYS_EEAR9, HW_H_SYS_EEAR10, HW_H_SYS_EEAR11\n+ , HW_H_SYS_EEAR12, HW_H_SYS_EEAR13, HW_H_SYS_EEAR14, HW_H_SYS_EEAR15\n+ , HW_H_SYS_ESR0, HW_H_SYS_ESR1, HW_H_SYS_ESR2, HW_H_SYS_ESR3\n+ , HW_H_SYS_ESR4, HW_H_SYS_ESR5, HW_H_SYS_ESR6, HW_H_SYS_ESR7\n+ , HW_H_SYS_ESR8, HW_H_SYS_ESR9, HW_H_SYS_ESR10, HW_H_SYS_ESR11\n+ , HW_H_SYS_ESR12, HW_H_SYS_ESR13, HW_H_SYS_ESR14, HW_H_SYS_ESR15\n+ , HW_H_SYS_GPR0, HW_H_SYS_GPR1, HW_H_SYS_GPR2, HW_H_SYS_GPR3\n+ , HW_H_SYS_GPR4, HW_H_SYS_GPR5, HW_H_SYS_GPR6, HW_H_SYS_GPR7\n+ , HW_H_SYS_GPR8, HW_H_SYS_GPR9, HW_H_SYS_GPR10, HW_H_SYS_GPR11\n+ , HW_H_SYS_GPR12, HW_H_SYS_GPR13, HW_H_SYS_GPR14, HW_H_SYS_GPR15\n+ , HW_H_SYS_GPR16, HW_H_SYS_GPR17, HW_H_SYS_GPR18, HW_H_SYS_GPR19\n+ , HW_H_SYS_GPR20, HW_H_SYS_GPR21, HW_H_SYS_GPR22, HW_H_SYS_GPR23\n+ , HW_H_SYS_GPR24, HW_H_SYS_GPR25, HW_H_SYS_GPR26, HW_H_SYS_GPR27\n+ , HW_H_SYS_GPR28, HW_H_SYS_GPR29, HW_H_SYS_GPR30, HW_H_SYS_GPR31\n+ , HW_H_SYS_GPR32, HW_H_SYS_GPR33, HW_H_SYS_GPR34, HW_H_SYS_GPR35\n+ , HW_H_SYS_GPR36, HW_H_SYS_GPR37, HW_H_SYS_GPR38, HW_H_SYS_GPR39\n+ , HW_H_SYS_GPR40, HW_H_SYS_GPR41, HW_H_SYS_GPR42, HW_H_SYS_GPR43\n+ , HW_H_SYS_GPR44, HW_H_SYS_GPR45, HW_H_SYS_GPR46, HW_H_SYS_GPR47\n+ , HW_H_SYS_GPR48, HW_H_SYS_GPR49, HW_H_SYS_GPR50, HW_H_SYS_GPR51\n+ , HW_H_SYS_GPR52, HW_H_SYS_GPR53, HW_H_SYS_GPR54, HW_H_SYS_GPR55\n+ , HW_H_SYS_GPR56, HW_H_SYS_GPR57, HW_H_SYS_GPR58, HW_H_SYS_GPR59\n+ , HW_H_SYS_GPR60, HW_H_SYS_GPR61, HW_H_SYS_GPR62, HW_H_SYS_GPR63\n+ , HW_H_SYS_GPR64, HW_H_SYS_GPR65, HW_H_SYS_GPR66, HW_H_SYS_GPR67\n+ , HW_H_SYS_GPR68, HW_H_SYS_GPR69, HW_H_SYS_GPR70, HW_H_SYS_GPR71\n+ , HW_H_SYS_GPR72, HW_H_SYS_GPR73, HW_H_SYS_GPR74, HW_H_SYS_GPR75\n+ , HW_H_SYS_GPR76, HW_H_SYS_GPR77, HW_H_SYS_GPR78, HW_H_SYS_GPR79\n+ , HW_H_SYS_GPR80, HW_H_SYS_GPR81, HW_H_SYS_GPR82, HW_H_SYS_GPR83\n+ , HW_H_SYS_GPR84, HW_H_SYS_GPR85, HW_H_SYS_GPR86, HW_H_SYS_GPR87\n+ , HW_H_SYS_GPR88, HW_H_SYS_GPR89, HW_H_SYS_GPR90, HW_H_SYS_GPR91\n+ , HW_H_SYS_GPR92, HW_H_SYS_GPR93, HW_H_SYS_GPR94, HW_H_SYS_GPR95\n+ , HW_H_SYS_GPR96, HW_H_SYS_GPR97, HW_H_SYS_GPR98, HW_H_SYS_GPR99\n+ , HW_H_SYS_GPR100, HW_H_SYS_GPR101, HW_H_SYS_GPR102, HW_H_SYS_GPR103\n+ , HW_H_SYS_GPR104, HW_H_SYS_GPR105, HW_H_SYS_GPR106, HW_H_SYS_GPR107\n+ , HW_H_SYS_GPR108, HW_H_SYS_GPR109, HW_H_SYS_GPR110, HW_H_SYS_GPR111\n+ , HW_H_SYS_GPR112, HW_H_SYS_GPR113, HW_H_SYS_GPR114, HW_H_SYS_GPR115\n+ , HW_H_SYS_GPR116, HW_H_SYS_GPR117, HW_H_SYS_GPR118, HW_H_SYS_GPR119\n+ , HW_H_SYS_GPR120, HW_H_SYS_GPR121, HW_H_SYS_GPR122, HW_H_SYS_GPR123\n+ , HW_H_SYS_GPR124, HW_H_SYS_GPR125, HW_H_SYS_GPR126, HW_H_SYS_GPR127\n+ , HW_H_SYS_GPR128, HW_H_SYS_GPR129, HW_H_SYS_GPR130, HW_H_SYS_GPR131\n+ , HW_H_SYS_GPR132, HW_H_SYS_GPR133, HW_H_SYS_GPR134, HW_H_SYS_GPR135\n+ , HW_H_SYS_GPR136, HW_H_SYS_GPR137, HW_H_SYS_GPR138, HW_H_SYS_GPR139\n+ , HW_H_SYS_GPR140, HW_H_SYS_GPR141, HW_H_SYS_GPR142, HW_H_SYS_GPR143\n+ , HW_H_SYS_GPR144, HW_H_SYS_GPR145, HW_H_SYS_GPR146, HW_H_SYS_GPR147\n+ , HW_H_SYS_GPR148, HW_H_SYS_GPR149, HW_H_SYS_GPR150, HW_H_SYS_GPR151\n+ , HW_H_SYS_GPR152, HW_H_SYS_GPR153, HW_H_SYS_GPR154, HW_H_SYS_GPR155\n+ , HW_H_SYS_GPR156, HW_H_SYS_GPR157, HW_H_SYS_GPR158, HW_H_SYS_GPR159\n+ , HW_H_SYS_GPR160, HW_H_SYS_GPR161, HW_H_SYS_GPR162, HW_H_SYS_GPR163\n+ , HW_H_SYS_GPR164, HW_H_SYS_GPR165, HW_H_SYS_GPR166, HW_H_SYS_GPR167\n+ , HW_H_SYS_GPR168, HW_H_SYS_GPR169, HW_H_SYS_GPR170, HW_H_SYS_GPR171\n+ , HW_H_SYS_GPR172, HW_H_SYS_GPR173, HW_H_SYS_GPR174, HW_H_SYS_GPR175\n+ , HW_H_SYS_GPR176, HW_H_SYS_GPR177, HW_H_SYS_GPR178, HW_H_SYS_GPR179\n+ , HW_H_SYS_GPR180, HW_H_SYS_GPR181, HW_H_SYS_GPR182, HW_H_SYS_GPR183\n+ , HW_H_SYS_GPR184, HW_H_SYS_GPR185, HW_H_SYS_GPR186, HW_H_SYS_GPR187\n+ , HW_H_SYS_GPR188, HW_H_SYS_GPR189, HW_H_SYS_GPR190, HW_H_SYS_GPR191\n+ , HW_H_SYS_GPR192, HW_H_SYS_GPR193, HW_H_SYS_GPR194, HW_H_SYS_GPR195\n+ , HW_H_SYS_GPR196, HW_H_SYS_GPR197, HW_H_SYS_GPR198, HW_H_SYS_GPR199\n+ , HW_H_SYS_GPR200, HW_H_SYS_GPR201, HW_H_SYS_GPR202, HW_H_SYS_GPR203\n+ , HW_H_SYS_GPR204, HW_H_SYS_GPR205, HW_H_SYS_GPR206, HW_H_SYS_GPR207\n+ , HW_H_SYS_GPR208, HW_H_SYS_GPR209, HW_H_SYS_GPR210, HW_H_SYS_GPR211\n+ , HW_H_SYS_GPR212, HW_H_SYS_GPR213, HW_H_SYS_GPR214, HW_H_SYS_GPR215\n+ , HW_H_SYS_GPR216, HW_H_SYS_GPR217, HW_H_SYS_GPR218, HW_H_SYS_GPR219\n+ , HW_H_SYS_GPR220, HW_H_SYS_GPR221, HW_H_SYS_GPR222, HW_H_SYS_GPR223\n+ , HW_H_SYS_GPR224, HW_H_SYS_GPR225, HW_H_SYS_GPR226, HW_H_SYS_GPR227\n+ , HW_H_SYS_GPR228, HW_H_SYS_GPR229, HW_H_SYS_GPR230, HW_H_SYS_GPR231\n+ , HW_H_SYS_GPR232, HW_H_SYS_GPR233, HW_H_SYS_GPR234, HW_H_SYS_GPR235\n+ , HW_H_SYS_GPR236, HW_H_SYS_GPR237, HW_H_SYS_GPR238, HW_H_SYS_GPR239\n+ , HW_H_SYS_GPR240, HW_H_SYS_GPR241, HW_H_SYS_GPR242, HW_H_SYS_GPR243\n+ , HW_H_SYS_GPR244, HW_H_SYS_GPR245, HW_H_SYS_GPR246, HW_H_SYS_GPR247\n+ , HW_H_SYS_GPR248, HW_H_SYS_GPR249, HW_H_SYS_GPR250, HW_H_SYS_GPR251\n+ , HW_H_SYS_GPR252, HW_H_SYS_GPR253, HW_H_SYS_GPR254, HW_H_SYS_GPR255\n+ , HW_H_SYS_GPR256, HW_H_SYS_GPR257, HW_H_SYS_GPR258, HW_H_SYS_GPR259\n+ , HW_H_SYS_GPR260, HW_H_SYS_GPR261, HW_H_SYS_GPR262, HW_H_SYS_GPR263\n+ , HW_H_SYS_GPR264, HW_H_SYS_GPR265, HW_H_SYS_GPR266, HW_H_SYS_GPR267\n+ , HW_H_SYS_GPR268, HW_H_SYS_GPR269, HW_H_SYS_GPR270, HW_H_SYS_GPR271\n+ , HW_H_SYS_GPR272, HW_H_SYS_GPR273, HW_H_SYS_GPR274, HW_H_SYS_GPR275\n+ , HW_H_SYS_GPR276, HW_H_SYS_GPR277, HW_H_SYS_GPR278, HW_H_SYS_GPR279\n+ , HW_H_SYS_GPR280, HW_H_SYS_GPR281, HW_H_SYS_GPR282, HW_H_SYS_GPR283\n+ , HW_H_SYS_GPR284, HW_H_SYS_GPR285, HW_H_SYS_GPR286, HW_H_SYS_GPR287\n+ , HW_H_SYS_GPR288, HW_H_SYS_GPR289, HW_H_SYS_GPR290, HW_H_SYS_GPR291\n+ , HW_H_SYS_GPR292, HW_H_SYS_GPR293, HW_H_SYS_GPR294, HW_H_SYS_GPR295\n+ , HW_H_SYS_GPR296, HW_H_SYS_GPR297, HW_H_SYS_GPR298, HW_H_SYS_GPR299\n+ , HW_H_SYS_GPR300, HW_H_SYS_GPR301, HW_H_SYS_GPR302, HW_H_SYS_GPR303\n+ , HW_H_SYS_GPR304, HW_H_SYS_GPR305, HW_H_SYS_GPR306, HW_H_SYS_GPR307\n+ , HW_H_SYS_GPR308, HW_H_SYS_GPR309, HW_H_SYS_GPR310, HW_H_SYS_GPR311\n+ , HW_H_SYS_GPR312, HW_H_SYS_GPR313, HW_H_SYS_GPR314, HW_H_SYS_GPR315\n+ , HW_H_SYS_GPR316, HW_H_SYS_GPR317, HW_H_SYS_GPR318, HW_H_SYS_GPR319\n+ , HW_H_SYS_GPR320, HW_H_SYS_GPR321, HW_H_SYS_GPR322, HW_H_SYS_GPR323\n+ , HW_H_SYS_GPR324, HW_H_SYS_GPR325, HW_H_SYS_GPR326, HW_H_SYS_GPR327\n+ , HW_H_SYS_GPR328, HW_H_SYS_GPR329, HW_H_SYS_GPR330, HW_H_SYS_GPR331\n+ , HW_H_SYS_GPR332, HW_H_SYS_GPR333, HW_H_SYS_GPR334, HW_H_SYS_GPR335\n+ , HW_H_SYS_GPR336, HW_H_SYS_GPR337, HW_H_SYS_GPR338, HW_H_SYS_GPR339\n+ , HW_H_SYS_GPR340, HW_H_SYS_GPR341, HW_H_SYS_GPR342, HW_H_SYS_GPR343\n+ , HW_H_SYS_GPR344, HW_H_SYS_GPR345, HW_H_SYS_GPR346, HW_H_SYS_GPR347\n+ , HW_H_SYS_GPR348, HW_H_SYS_GPR349, HW_H_SYS_GPR350, HW_H_SYS_GPR351\n+ , HW_H_SYS_GPR352, HW_H_SYS_GPR353, HW_H_SYS_GPR354, HW_H_SYS_GPR355\n+ , HW_H_SYS_GPR356, HW_H_SYS_GPR357, HW_H_SYS_GPR358, HW_H_SYS_GPR359\n+ , HW_H_SYS_GPR360, HW_H_SYS_GPR361, HW_H_SYS_GPR362, HW_H_SYS_GPR363\n+ , HW_H_SYS_GPR364, HW_H_SYS_GPR365, HW_H_SYS_GPR366, HW_H_SYS_GPR367\n+ , HW_H_SYS_GPR368, HW_H_SYS_GPR369, HW_H_SYS_GPR370, HW_H_SYS_GPR371\n+ , HW_H_SYS_GPR372, HW_H_SYS_GPR373, HW_H_SYS_GPR374, HW_H_SYS_GPR375\n+ , HW_H_SYS_GPR376, HW_H_SYS_GPR377, HW_H_SYS_GPR378, HW_H_SYS_GPR379\n+ , HW_H_SYS_GPR380, HW_H_SYS_GPR381, HW_H_SYS_GPR382, HW_H_SYS_GPR383\n+ , HW_H_SYS_GPR384, HW_H_SYS_GPR385, HW_H_SYS_GPR386, HW_H_SYS_GPR387\n+ , HW_H_SYS_GPR388, HW_H_SYS_GPR389, HW_H_SYS_GPR390, HW_H_SYS_GPR391\n+ , HW_H_SYS_GPR392, HW_H_SYS_GPR393, HW_H_SYS_GPR394, HW_H_SYS_GPR395\n+ , HW_H_SYS_GPR396, HW_H_SYS_GPR397, HW_H_SYS_GPR398, HW_H_SYS_GPR399\n+ , HW_H_SYS_GPR400, HW_H_SYS_GPR401, HW_H_SYS_GPR402, HW_H_SYS_GPR403\n+ , HW_H_SYS_GPR404, HW_H_SYS_GPR405, HW_H_SYS_GPR406, HW_H_SYS_GPR407\n+ , HW_H_SYS_GPR408, HW_H_SYS_GPR409, HW_H_SYS_GPR410, HW_H_SYS_GPR411\n+ , HW_H_SYS_GPR412, HW_H_SYS_GPR413, HW_H_SYS_GPR414, HW_H_SYS_GPR415\n+ , HW_H_SYS_GPR416, HW_H_SYS_GPR417, HW_H_SYS_GPR418, HW_H_SYS_GPR419\n+ , HW_H_SYS_GPR420, HW_H_SYS_GPR421, HW_H_SYS_GPR422, HW_H_SYS_GPR423\n+ , HW_H_SYS_GPR424, HW_H_SYS_GPR425, HW_H_SYS_GPR426, HW_H_SYS_GPR427\n+ , HW_H_SYS_GPR428, HW_H_SYS_GPR429, HW_H_SYS_GPR430, HW_H_SYS_GPR431\n+ , HW_H_SYS_GPR432, HW_H_SYS_GPR433, HW_H_SYS_GPR434, HW_H_SYS_GPR435\n+ , HW_H_SYS_GPR436, HW_H_SYS_GPR437, HW_H_SYS_GPR438, HW_H_SYS_GPR439\n+ , HW_H_SYS_GPR440, HW_H_SYS_GPR441, HW_H_SYS_GPR442, HW_H_SYS_GPR443\n+ , HW_H_SYS_GPR444, HW_H_SYS_GPR445, HW_H_SYS_GPR446, HW_H_SYS_GPR447\n+ , HW_H_SYS_GPR448, HW_H_SYS_GPR449, HW_H_SYS_GPR450, HW_H_SYS_GPR451\n+ , HW_H_SYS_GPR452, HW_H_SYS_GPR453, HW_H_SYS_GPR454, HW_H_SYS_GPR455\n+ , HW_H_SYS_GPR456, HW_H_SYS_GPR457, HW_H_SYS_GPR458, HW_H_SYS_GPR459\n+ , HW_H_SYS_GPR460, HW_H_SYS_GPR461, HW_H_SYS_GPR462, HW_H_SYS_GPR463\n+ , HW_H_SYS_GPR464, HW_H_SYS_GPR465, HW_H_SYS_GPR466, HW_H_SYS_GPR467\n+ , HW_H_SYS_GPR468, HW_H_SYS_GPR469, HW_H_SYS_GPR470, HW_H_SYS_GPR471\n+ , HW_H_SYS_GPR472, HW_H_SYS_GPR473, HW_H_SYS_GPR474, HW_H_SYS_GPR475\n+ , HW_H_SYS_GPR476, HW_H_SYS_GPR477, HW_H_SYS_GPR478, HW_H_SYS_GPR479\n+ , HW_H_SYS_GPR480, HW_H_SYS_GPR481, HW_H_SYS_GPR482, HW_H_SYS_GPR483\n+ , HW_H_SYS_GPR484, HW_H_SYS_GPR485, HW_H_SYS_GPR486, HW_H_SYS_GPR487\n+ , HW_H_SYS_GPR488, HW_H_SYS_GPR489, HW_H_SYS_GPR490, HW_H_SYS_GPR491\n+ , HW_H_SYS_GPR492, HW_H_SYS_GPR493, HW_H_SYS_GPR494, HW_H_SYS_GPR495\n+ , HW_H_SYS_GPR496, HW_H_SYS_GPR497, HW_H_SYS_GPR498, HW_H_SYS_GPR499\n+ , HW_H_SYS_GPR500, HW_H_SYS_GPR501, HW_H_SYS_GPR502, HW_H_SYS_GPR503\n+ , HW_H_SYS_GPR504, HW_H_SYS_GPR505, HW_H_SYS_GPR506, HW_H_SYS_GPR507\n+ , HW_H_SYS_GPR508, HW_H_SYS_GPR509, HW_H_SYS_GPR510, HW_H_SYS_GPR511\n+ , HW_H_MAC_MACLO, HW_H_MAC_MACHI, HW_H_TICK_TTMR, HW_H_SYS_VR_REV\n+ , HW_H_SYS_VR_CFG, HW_H_SYS_VR_VER, HW_H_SYS_UPR_UP, HW_H_SYS_UPR_DCP\n+ , HW_H_SYS_UPR_ICP, HW_H_SYS_UPR_DMP, HW_H_SYS_UPR_MP, HW_H_SYS_UPR_IMP\n+ , HW_H_SYS_UPR_DUP, HW_H_SYS_UPR_PCUP, HW_H_SYS_UPR_PICP, HW_H_SYS_UPR_PMP\n+ , HW_H_SYS_UPR_TTP, HW_H_SYS_UPR_CUP, HW_H_SYS_CPUCFGR_NSGR, HW_H_SYS_CPUCFGR_CGF\n+ , HW_H_SYS_CPUCFGR_OB32S, HW_H_SYS_CPUCFGR_OB64S, HW_H_SYS_CPUCFGR_OF32S, HW_H_SYS_CPUCFGR_OF64S\n+ , HW_H_SYS_CPUCFGR_OV64S, HW_H_SYS_CPUCFGR_ND, HW_H_SYS_SR_SM, HW_H_SYS_SR_TEE\n+ , HW_H_SYS_SR_IEE, HW_H_SYS_SR_DCE, HW_H_SYS_SR_ICE, HW_H_SYS_SR_DME\n+ , HW_H_SYS_SR_IME, HW_H_SYS_SR_LEE, HW_H_SYS_SR_CE, HW_H_SYS_SR_F\n+ , HW_H_SYS_SR_CY, HW_H_SYS_SR_OV, HW_H_SYS_SR_OVE, HW_H_SYS_SR_DSX\n+ , HW_H_SYS_SR_EPH, HW_H_SYS_SR_FO, HW_H_SYS_SR_SUMRA, HW_H_SYS_SR_CID\n+ , HW_H_SYS_FPCSR_FPEE, HW_H_SYS_FPCSR_RM, HW_H_SYS_FPCSR_OVF, HW_H_SYS_FPCSR_UNF\n+ , HW_H_SYS_FPCSR_SNF, HW_H_SYS_FPCSR_QNF, HW_H_SYS_FPCSR_ZF, HW_H_SYS_FPCSR_IXF\n+ , HW_H_SYS_FPCSR_IVF, HW_H_SYS_FPCSR_INF, HW_H_SYS_FPCSR_DZF, HW_H_SIMM16\n+ , HW_H_UIMM16, HW_H_UIMM6, HW_H_ATOMIC_RESERVE, HW_H_ATOMIC_ADDRESS\n+ , HW_H_ROFF1, HW_MAX\n } CGEN_HW_TYPE;\n \n #define MAX_HW ((int) HW_MAX)\n@@ -631,13 +629,12 @@ typedef enum cgen_operand_type {\n  , OR1K_OPERAND_UIMM6, OR1K_OPERAND_RD, OR1K_OPERAND_RA, OR1K_OPERAND_RB\n  , OR1K_OPERAND_DISP26, OR1K_OPERAND_DISP21, OR1K_OPERAND_SIMM16, OR1K_OPERAND_UIMM16\n  , OR1K_OPERAND_SIMM16_SPLIT, OR1K_OPERAND_UIMM16_SPLIT, OR1K_OPERAND_RDSF, OR1K_OPERAND_RASF\n- , OR1K_OPERAND_RBSF, OR1K_OPERAND_RDDF, OR1K_OPERAND_RADF, OR1K_OPERAND_RBDF\n- , OR1K_OPERAND_RDD32F, OR1K_OPERAND_RDDI, OR1K_OPERAND_RAD32F, OR1K_OPERAND_RADI\n- , OR1K_OPERAND_RBD32F, OR1K_OPERAND_RBDI, OR1K_OPERAND_MAX\n+ , OR1K_OPERAND_RBSF, OR1K_OPERAND_RDD32F, OR1K_OPERAND_RDDI, OR1K_OPERAND_RAD32F\n+ , OR1K_OPERAND_RADI, OR1K_OPERAND_RBD32F, OR1K_OPERAND_RBDI, OR1K_OPERAND_MAX\n } CGEN_OPERAND_TYPE;\n \n /* Number of operands types.  */\n-#define MAX_OPERANDS 38\n+#define MAX_OPERANDS 35\n \n /* Maximum number of operands referenced by any insn.  */\n #define MAX_OPERAND_INSTANCES 10\n@@ -687,7 +684,6 @@ extern const CGEN_ATTR_TABLE or1k_cgen_insn_attr_table[];\n \n extern CGEN_KEYWORD or1k_cgen_opval_h_gpr;\n extern CGEN_KEYWORD or1k_cgen_opval_h_fsr;\n-extern CGEN_KEYWORD or1k_cgen_opval_h_fdr;\n \n extern const CGEN_HW_ENTRY or1k_cgen_hw_table[];\n "
    },
    {
      "sha": "dcb02c08ca57a05a7c47da99ad2be3b255f163a1",
      "filename": "opcodes/or1k-dis.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-dis.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -123,9 +123,6 @@ or1k_cgen_print_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RAD32F :\n       print_regpair (cd, info, fields->f_rad32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n-    case OR1K_OPERAND_RADF :\n-      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r2, 0);\n-      break;\n     case OR1K_OPERAND_RADI :\n       print_regpair (cd, info, fields->f_rad32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n@@ -138,9 +135,6 @@ or1k_cgen_print_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RBD32F :\n       print_regpair (cd, info, fields->f_rbd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r3, 0);\n-      break;\n     case OR1K_OPERAND_RBDI :\n       print_regpair (cd, info, fields->f_rbd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n@@ -153,9 +147,6 @@ or1k_cgen_print_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_RDD32F :\n       print_regpair (cd, info, fields->f_rdd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      print_keyword (cd, info, & or1k_cgen_opval_h_fdr, fields->f_r1, 0);\n-      break;\n     case OR1K_OPERAND_RDDI :\n       print_regpair (cd, info, fields->f_rdd32, 0|(1<<CGEN_OPERAND_VIRTUAL), pc, length);\n       break;"
    },
    {
      "sha": "2e476cb1523cc32443ac9143bf4bab86b6bb0b67",
      "filename": "opcodes/or1k-ibld.c",
      "status": "modified",
      "additions": 4,
      "deletions": 58,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-ibld.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -579,14 +579,14 @@ or1k_cgen_insert_operand (CGEN_CPU_DESC cd,\n     case OR1K_OPERAND_DISP21 :\n       {\n         long value = fields->f_disp21;\n-        value = ((((DI) (value) >> (13))) - (((DI) (pc) >> (13))));\n+        value = ((((SI) (value) >> (13))) - (((SI) (pc) >> (13))));\n         errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_ABS_ADDR), 0, 20, 21, 32, total_length, buffer);\n       }\n       break;\n     case OR1K_OPERAND_DISP26 :\n       {\n         long value = fields->f_disp26;\n-        value = ((DI) (((value) - (pc))) >> (2));\n+        value = ((SI) (((value) - (pc))) >> (2));\n         errmsg = insert_normal (cd, value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_PCREL_ADDR), 0, 25, 26, 32, total_length, buffer);\n       }\n       break;\n@@ -607,9 +607,6 @@ or1k_cgen_insert_operand (CGEN_CPU_DESC cd,\n           break;\n       }\n       break;\n-    case OR1K_OPERAND_RADF :\n-      errmsg = insert_normal (cd, fields->f_r2, 0, 0, 20, 5, 32, total_length, buffer);\n-      break;\n     case OR1K_OPERAND_RADI :\n       {\n {\n@@ -644,9 +641,6 @@ or1k_cgen_insert_operand (CGEN_CPU_DESC cd,\n           break;\n       }\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      errmsg = insert_normal (cd, fields->f_r3, 0, 0, 15, 5, 32, total_length, buffer);\n-      break;\n     case OR1K_OPERAND_RBDI :\n       {\n {\n@@ -681,9 +675,6 @@ or1k_cgen_insert_operand (CGEN_CPU_DESC cd,\n           break;\n       }\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      errmsg = insert_normal (cd, fields->f_r1, 0, 0, 25, 5, 32, total_length, buffer);\n-      break;\n     case OR1K_OPERAND_RDDI :\n       {\n {\n@@ -786,15 +777,15 @@ or1k_cgen_extract_operand (CGEN_CPU_DESC cd,\n       {\n         long value;\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_ABS_ADDR), 0, 20, 21, 32, total_length, pc, & value);\n-        value = ((((value) + (((DI) (pc) >> (13))))) * (MAKEDI (0, 8192)));\n+        value = ((((value) + (((SI) (pc) >> (13))))) * (8192));\n         fields->f_disp21 = value;\n       }\n       break;\n     case OR1K_OPERAND_DISP26 :\n       {\n         long value;\n         length = extract_normal (cd, ex_info, insn_value, 0|(1<<CGEN_IFLD_SIGNED)|(1<<CGEN_IFLD_PCREL_ADDR), 0, 25, 26, 32, total_length, pc, & value);\n-        value = ((((value) * (MAKEDI (0, 4)))) + (pc));\n+        value = ((((value) * (4))) + (pc));\n         fields->f_disp26 = value;\n       }\n       break;\n@@ -810,9 +801,6 @@ or1k_cgen_extract_operand (CGEN_CPU_DESC cd,\n   FLD (f_rad32) = ((FLD (f_r2)) | (((FLD (f_raoff_9_1)) << (5))));\n       }\n       break;\n-    case OR1K_OPERAND_RADF :\n-      length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n-      break;\n     case OR1K_OPERAND_RADI :\n       {\n         length = extract_normal (cd, ex_info, insn_value, 0, 0, 20, 5, 32, total_length, pc, & fields->f_r2);\n@@ -837,9 +825,6 @@ or1k_cgen_extract_operand (CGEN_CPU_DESC cd,\n   FLD (f_rbd32) = ((FLD (f_r3)) | (((FLD (f_rboff_8_1)) << (5))));\n       }\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n-      break;\n     case OR1K_OPERAND_RBDI :\n       {\n         length = extract_normal (cd, ex_info, insn_value, 0, 0, 15, 5, 32, total_length, pc, & fields->f_r3);\n@@ -864,9 +849,6 @@ or1k_cgen_extract_operand (CGEN_CPU_DESC cd,\n   FLD (f_rdd32) = ((FLD (f_r1)) | (((FLD (f_rdoff_10_1)) << (5))));\n       }\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n-      break;\n     case OR1K_OPERAND_RDDI :\n       {\n         length = extract_normal (cd, ex_info, insn_value, 0, 0, 25, 5, 32, total_length, pc, & fields->f_r1);\n@@ -957,9 +939,6 @@ or1k_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RAD32F :\n       value = fields->f_rad32;\n       break;\n-    case OR1K_OPERAND_RADF :\n-      value = fields->f_r2;\n-      break;\n     case OR1K_OPERAND_RADI :\n       value = fields->f_rad32;\n       break;\n@@ -972,9 +951,6 @@ or1k_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RBD32F :\n       value = fields->f_rbd32;\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      value = fields->f_r3;\n-      break;\n     case OR1K_OPERAND_RBDI :\n       value = fields->f_rbd32;\n       break;\n@@ -987,9 +963,6 @@ or1k_cgen_get_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RDD32F :\n       value = fields->f_rdd32;\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      value = fields->f_r1;\n-      break;\n     case OR1K_OPERAND_RDDI :\n       value = fields->f_rdd32;\n       break;\n@@ -1044,9 +1017,6 @@ or1k_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RAD32F :\n       value = fields->f_rad32;\n       break;\n-    case OR1K_OPERAND_RADF :\n-      value = fields->f_r2;\n-      break;\n     case OR1K_OPERAND_RADI :\n       value = fields->f_rad32;\n       break;\n@@ -1059,9 +1029,6 @@ or1k_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RBD32F :\n       value = fields->f_rbd32;\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      value = fields->f_r3;\n-      break;\n     case OR1K_OPERAND_RBDI :\n       value = fields->f_rbd32;\n       break;\n@@ -1074,9 +1041,6 @@ or1k_cgen_get_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RDD32F :\n       value = fields->f_rdd32;\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      value = fields->f_r1;\n-      break;\n     case OR1K_OPERAND_RDDI :\n       value = fields->f_rdd32;\n       break;\n@@ -1138,9 +1102,6 @@ or1k_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RAD32F :\n       fields->f_rad32 = value;\n       break;\n-    case OR1K_OPERAND_RADF :\n-      fields->f_r2 = value;\n-      break;\n     case OR1K_OPERAND_RADI :\n       fields->f_rad32 = value;\n       break;\n@@ -1153,9 +1114,6 @@ or1k_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RBD32F :\n       fields->f_rbd32 = value;\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      fields->f_r3 = value;\n-      break;\n     case OR1K_OPERAND_RBDI :\n       fields->f_rbd32 = value;\n       break;\n@@ -1168,9 +1126,6 @@ or1k_cgen_set_int_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RDD32F :\n       fields->f_rdd32 = value;\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      fields->f_r1 = value;\n-      break;\n     case OR1K_OPERAND_RDDI :\n       fields->f_rdd32 = value;\n       break;\n@@ -1222,9 +1177,6 @@ or1k_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RAD32F :\n       fields->f_rad32 = value;\n       break;\n-    case OR1K_OPERAND_RADF :\n-      fields->f_r2 = value;\n-      break;\n     case OR1K_OPERAND_RADI :\n       fields->f_rad32 = value;\n       break;\n@@ -1237,9 +1189,6 @@ or1k_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RBD32F :\n       fields->f_rbd32 = value;\n       break;\n-    case OR1K_OPERAND_RBDF :\n-      fields->f_r3 = value;\n-      break;\n     case OR1K_OPERAND_RBDI :\n       fields->f_rbd32 = value;\n       break;\n@@ -1252,9 +1201,6 @@ or1k_cgen_set_vma_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     case OR1K_OPERAND_RDD32F :\n       fields->f_rdd32 = value;\n       break;\n-    case OR1K_OPERAND_RDDF :\n-      fields->f_r1 = value;\n-      break;\n     case OR1K_OPERAND_RDDI :\n       fields->f_rdd32 = value;\n       break;"
    },
    {
      "sha": "632d731dc52a9127d5a2ddb40e3bbfe82219e4be",
      "filename": "opcodes/or1k-opc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 152,
      "changes": 152,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opc.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -163,10 +163,6 @@ static const CGEN_IFMT ifmt_lf_add_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc0007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_add_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xfc0007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n-};\n-\n static const CGEN_IFMT ifmt_lf_add_d32 ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc0000ff, { { F (F_OPCODE) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n };\n@@ -175,10 +171,6 @@ static const CGEN_IFMT ifmt_lf_itof_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_itof_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n-};\n-\n static const CGEN_IFMT ifmt_lf_itof_d32 ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00f9ff, { { F (F_OPCODE) }, { F (F_R3) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RESV_8_1) }, { F (F_OP_7_8) }, { 0 } }\n };\n@@ -187,10 +179,6 @@ static const CGEN_IFMT ifmt_lf_ftoi_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_ftoi_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xfc00ffff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n-};\n-\n static const CGEN_IFMT ifmt_lf_ftoi_d32 ATTRIBUTE_UNUSED = {\n   32, 32, 0xfc00f9ff, { { F (F_OPCODE) }, { F (F_R3) }, { F (F_RDD32) }, { F (F_RAD32) }, { F (F_RESV_8_1) }, { F (F_OP_7_8) }, { 0 } }\n };\n@@ -199,10 +187,6 @@ static const CGEN_IFMT ifmt_lf_sfeq_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_sfeq_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n-};\n-\n static const CGEN_IFMT ifmt_lf_sfeq_d32 ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe004ff, { { F (F_OPCODE) }, { F (F_R1) }, { F (F_RESV_10_1) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n };\n@@ -211,10 +195,6 @@ static const CGEN_IFMT ifmt_lf_cust1_s ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n };\n \n-static const CGEN_IFMT ifmt_lf_cust1_d ATTRIBUTE_UNUSED = {\n-  32, 32, 0xffe007ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_R2) }, { F (F_R3) }, { F (F_RESV_10_3) }, { F (F_OP_7_8) }, { 0 } }\n-};\n-\n static const CGEN_IFMT ifmt_lf_cust1_d32 ATTRIBUTE_UNUSED = {\n   32, 32, 0xffe004ff, { { F (F_OPCODE) }, { F (F_RESV_25_5) }, { F (F_RESV_10_1) }, { F (F_RAD32) }, { F (F_RBD32) }, { F (F_OP_7_8) }, { 0 } }\n };\n@@ -828,12 +808,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000000 }\n   },\n-/* lf.add.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000010 }\n-  },\n /* lf.add.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -846,12 +820,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000001 }\n   },\n-/* lf.sub.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000011 }\n-  },\n /* lf.sub.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -864,12 +832,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000002 }\n   },\n-/* lf.mul.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000012 }\n-  },\n /* lf.mul.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -882,12 +844,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000003 }\n   },\n-/* lf.div.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000013 }\n-  },\n /* lf.div.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -900,12 +856,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000006 }\n   },\n-/* lf.rem.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000016 }\n-  },\n /* lf.rem.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -918,12 +868,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RA), 0 } },\n     & ifmt_lf_itof_s, { 0xc8000004 }\n   },\n-/* lf.itof.d $rDDF,$rA */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RA), 0 } },\n-    & ifmt_lf_itof_d, { 0xc8000014 }\n-  },\n /* lf.itof.d $rDD32F,$rADI */\n   {\n     { 0, 0, 0, 0 },\n@@ -936,12 +880,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RD), ',', OP (RASF), 0 } },\n     & ifmt_lf_ftoi_s, { 0xc8000005 }\n   },\n-/* lf.ftoi.d $rD,$rADF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RD), ',', OP (RADF), 0 } },\n-    & ifmt_lf_ftoi_d, { 0xc8000015 }\n-  },\n /* lf.ftoi.d $rDDI,$rAD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -954,12 +892,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc8000008 }\n   },\n-/* lf.sfeq.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc8000018 }\n-  },\n /* lf.sfeq.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -972,12 +904,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc8000009 }\n   },\n-/* lf.sfne.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc8000019 }\n-  },\n /* lf.sfne.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -990,12 +916,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800000b }\n   },\n-/* lf.sfge.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800001b }\n-  },\n /* lf.sfge.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1008,12 +928,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800000a }\n   },\n-/* lf.sfgt.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800001a }\n-  },\n /* lf.sfgt.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1026,12 +940,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800000c }\n   },\n-/* lf.sflt.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800001c }\n-  },\n /* lf.sflt.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1044,12 +952,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800000d }\n   },\n-/* lf.sfle.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800001d }\n-  },\n /* lf.sfle.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1062,12 +964,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc8000028 }\n   },\n-/* lf.sfueq.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc8000038 }\n-  },\n /* lf.sfueq.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1080,12 +976,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc8000029 }\n   },\n-/* lf.sfune.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc8000039 }\n-  },\n /* lf.sfune.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1098,12 +988,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800002a }\n   },\n-/* lf.sfugt.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800003a }\n-  },\n /* lf.sfugt.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1116,12 +1000,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800002b }\n   },\n-/* lf.sfuge.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800003b }\n-  },\n /* lf.sfuge.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1134,12 +1012,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800002c }\n   },\n-/* lf.sfult.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800003c }\n-  },\n /* lf.sfult.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1152,12 +1024,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800002d }\n   },\n-/* lf.sfule.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800003d }\n-  },\n /* lf.sfule.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1170,12 +1036,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_sfeq_s, { 0xc800002e }\n   },\n-/* lf.sfun.d $rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_sfeq_d, { 0xc800003e }\n-  },\n /* lf.sfun.d $rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1188,12 +1048,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RDSF), ',', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_add_s, { 0xc8000007 }\n   },\n-/* lf.madd.d $rDDF,$rADF,$rBDF */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, ' ', OP (RDDF), ',', OP (RADF), ',', OP (RBDF), 0 } },\n-    & ifmt_lf_add_d, { 0xc8000017 }\n-  },\n /* lf.madd.d $rDD32F,$rAD32F,$rBD32F */\n   {\n     { 0, 0, 0, 0 },\n@@ -1206,12 +1060,6 @@ static const CGEN_OPCODE or1k_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (RASF), ',', OP (RBSF), 0 } },\n     & ifmt_lf_cust1_s, { 0xc80000d0 }\n   },\n-/* lf.cust1.d */\n-  {\n-    { 0, 0, 0, 0 },\n-    { { MNEM, 0 } },\n-    & ifmt_lf_cust1_d, { 0xc80000e0 }\n-  },\n /* lf.cust1.d */\n   {\n     { 0, 0, 0, 0 },"
    },
    {
      "sha": "78afa9f6a90fd0aa727289acbee0b0459c3a7a3c",
      "filename": "opcodes/or1k-opc.h",
      "status": "modified",
      "additions": 11,
      "deletions": 17,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opc.h?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -70,23 +70,17 @@ typedef enum cgen_insn_type {\n  , OR1K_INSN_L_MACU, OR1K_INSN_L_MSB, OR1K_INSN_L_MSBU, OR1K_INSN_L_CUST1\n  , OR1K_INSN_L_CUST2, OR1K_INSN_L_CUST3, OR1K_INSN_L_CUST4, OR1K_INSN_L_CUST5\n  , OR1K_INSN_L_CUST6, OR1K_INSN_L_CUST7, OR1K_INSN_L_CUST8, OR1K_INSN_LF_ADD_S\n- , OR1K_INSN_LF_ADD_D, OR1K_INSN_LF_ADD_D32, OR1K_INSN_LF_SUB_S, OR1K_INSN_LF_SUB_D\n- , OR1K_INSN_LF_SUB_D32, OR1K_INSN_LF_MUL_S, OR1K_INSN_LF_MUL_D, OR1K_INSN_LF_MUL_D32\n- , OR1K_INSN_LF_DIV_S, OR1K_INSN_LF_DIV_D, OR1K_INSN_LF_DIV_D32, OR1K_INSN_LF_REM_S\n- , OR1K_INSN_LF_REM_D, OR1K_INSN_LF_REM_D32, OR1K_INSN_LF_ITOF_S, OR1K_INSN_LF_ITOF_D\n- , OR1K_INSN_LF_ITOF_D32, OR1K_INSN_LF_FTOI_S, OR1K_INSN_LF_FTOI_D, OR1K_INSN_LF_FTOI_D32\n- , OR1K_INSN_LF_SFEQ_S, OR1K_INSN_LF_SFEQ_D, OR1K_INSN_LF_SFEQ_D32, OR1K_INSN_LF_SFNE_S\n- , OR1K_INSN_LF_SFNE_D, OR1K_INSN_LF_SFNE_D32, OR1K_INSN_LF_SFGE_S, OR1K_INSN_LF_SFGE_D\n- , OR1K_INSN_LF_SFGE_D32, OR1K_INSN_LF_SFGT_S, OR1K_INSN_LF_SFGT_D, OR1K_INSN_LF_SFGT_D32\n- , OR1K_INSN_LF_SFLT_S, OR1K_INSN_LF_SFLT_D, OR1K_INSN_LF_SFLT_D32, OR1K_INSN_LF_SFLE_S\n- , OR1K_INSN_LF_SFLE_D, OR1K_INSN_LF_SFLE_D32, OR1K_INSN_LF_SFUEQ_S, OR1K_INSN_LF_SFUEQ_D\n- , OR1K_INSN_LF_SFUEQ_D32, OR1K_INSN_LF_SFUNE_S, OR1K_INSN_LF_SFUNE_D, OR1K_INSN_LF_SFUNE_D32\n- , OR1K_INSN_LF_SFUGT_S, OR1K_INSN_LF_SFUGT_D, OR1K_INSN_LF_SFUGT_D32, OR1K_INSN_LF_SFUGE_S\n- , OR1K_INSN_LF_SFUGE_D, OR1K_INSN_LF_SFUGE_D32, OR1K_INSN_LF_SFULT_S, OR1K_INSN_LF_SFULT_D\n- , OR1K_INSN_LF_SFULT_D32, OR1K_INSN_LF_SFULE_S, OR1K_INSN_LF_SFULE_D, OR1K_INSN_LF_SFULE_D32\n- , OR1K_INSN_LF_SFUN_S, OR1K_INSN_LF_SFUN_D, OR1K_INSN_LF_SFUN_D32, OR1K_INSN_LF_MADD_S\n- , OR1K_INSN_LF_MADD_D, OR1K_INSN_LF_MADD_D32, OR1K_INSN_LF_CUST1_S, OR1K_INSN_LF_CUST1_D\n- , OR1K_INSN_LF_CUST1_D32\n+ , OR1K_INSN_LF_ADD_D32, OR1K_INSN_LF_SUB_S, OR1K_INSN_LF_SUB_D32, OR1K_INSN_LF_MUL_S\n+ , OR1K_INSN_LF_MUL_D32, OR1K_INSN_LF_DIV_S, OR1K_INSN_LF_DIV_D32, OR1K_INSN_LF_REM_S\n+ , OR1K_INSN_LF_REM_D32, OR1K_INSN_LF_ITOF_S, OR1K_INSN_LF_ITOF_D32, OR1K_INSN_LF_FTOI_S\n+ , OR1K_INSN_LF_FTOI_D32, OR1K_INSN_LF_SFEQ_S, OR1K_INSN_LF_SFEQ_D32, OR1K_INSN_LF_SFNE_S\n+ , OR1K_INSN_LF_SFNE_D32, OR1K_INSN_LF_SFGE_S, OR1K_INSN_LF_SFGE_D32, OR1K_INSN_LF_SFGT_S\n+ , OR1K_INSN_LF_SFGT_D32, OR1K_INSN_LF_SFLT_S, OR1K_INSN_LF_SFLT_D32, OR1K_INSN_LF_SFLE_S\n+ , OR1K_INSN_LF_SFLE_D32, OR1K_INSN_LF_SFUEQ_S, OR1K_INSN_LF_SFUEQ_D32, OR1K_INSN_LF_SFUNE_S\n+ , OR1K_INSN_LF_SFUNE_D32, OR1K_INSN_LF_SFUGT_S, OR1K_INSN_LF_SFUGT_D32, OR1K_INSN_LF_SFUGE_S\n+ , OR1K_INSN_LF_SFUGE_D32, OR1K_INSN_LF_SFULT_S, OR1K_INSN_LF_SFULT_D32, OR1K_INSN_LF_SFULE_S\n+ , OR1K_INSN_LF_SFULE_D32, OR1K_INSN_LF_SFUN_S, OR1K_INSN_LF_SFUN_D32, OR1K_INSN_LF_MADD_S\n+ , OR1K_INSN_LF_MADD_D32, OR1K_INSN_LF_CUST1_S, OR1K_INSN_LF_CUST1_D32\n } CGEN_INSN_TYPE;\n \n /* Index of `invalid' insn place holder.  */"
    },
    {
      "sha": "eb8350753ffb50659f0cfca035f982a3453270f4",
      "filename": "opcodes/or1k-opinst.c",
      "status": "modified",
      "additions": 185,
      "deletions": 243,
      "changes": 428,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opinst.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a501eb446f5149c1133dbc99f86743b8dd614fa4/opcodes/or1k-opinst.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-opinst.c?ref=a501eb446f5149c1133dbc99f86743b8dd614fa4",
      "patch": "@@ -43,54 +43,54 @@ static const CGEN_OPINST sfmt_empty_ops[] ATTRIBUTE_UNUSED = {\n };\n \n static const CGEN_OPINST sfmt_l_j_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_UDI, OP_ENT (DISP26), 0, 0 },\n-  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_USI, OP_ENT (DISP26), 0, 0 },\n+  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_adrp_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"disp21\", HW_H_IADDR, CGEN_MODE_UDI, OP_ENT (DISP21), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"disp21\", HW_H_IADDR, CGEN_MODE_USI, OP_ENT (DISP21), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_jal_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_UDI, OP_ENT (DISP26), 0, 0 },\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"h_gpr_UDI_9\", HW_H_GPR, CGEN_MODE_UDI, 0, 9, 0 },\n-  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_USI, OP_ENT (DISP26), 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"h_gpr_USI_9\", HW_H_GPR, CGEN_MODE_USI, 0, 9, 0 },\n+  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_jr_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_jalr_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"h_gpr_UDI_9\", HW_H_GPR, CGEN_MODE_UDI, 0, 9, 0 },\n-  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"h_gpr_USI_9\", HW_H_GPR, CGEN_MODE_USI, 0, 9, 0 },\n+  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_bnf_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_UDI, OP_ENT (DISP26), 0, COND_REF },\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n+  { INPUT, \"disp26\", HW_H_IADDR, CGEN_MODE_USI, OP_ENT (DISP26), 0, COND_REF },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"sys_cpucfgr_nd\", HW_H_SYS_CPUCFGR_ND, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_trap_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n@@ -105,94 +105,94 @@ static const CGEN_OPINST sfmt_l_nop_imm_ops[] ATTRIBUTE_UNUSED = {\n \n static const CGEN_OPINST sfmt_l_movhi_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"uimm16\", HW_H_UIMM16, CGEN_MODE_UINT, OP_ENT (UIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_macrc_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_mfspr_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"uimm16\", HW_H_UIMM16, CGEN_MODE_UINT, OP_ENT (UIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_mtspr_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n   { INPUT, \"uimm16_split\", HW_H_UIMM16, CGEN_MODE_UINT, OP_ENT (UIMM16_SPLIT), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lwz_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_USI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_4\", HW_H_MEMORY, CGEN_MODE_USI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lws_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_SI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_4\", HW_H_MEMORY, CGEN_MODE_SI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lwa_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_USI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_4\", HW_H_MEMORY, CGEN_MODE_USI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n   { OUTPUT, \"atomic_address\", HW_H_ATOMIC_ADDRESS, CGEN_MODE_SI, 0, 0, 0 },\n   { OUTPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lbz_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_UQI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_1\", HW_H_MEMORY, CGEN_MODE_UQI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lbs_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_QI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_1\", HW_H_MEMORY, CGEN_MODE_QI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lhz_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_UHI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_2\", HW_H_MEMORY, CGEN_MODE_UHI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_lhs_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"h_memory_HI_c_call__AI_@cpu@_make_load_store_addr_rA_ext__SI_simm16_2\", HW_H_MEMORY, CGEN_MODE_HI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_sw_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"atomic_address\", HW_H_ATOMIC_ADDRESS, CGEN_MODE_SI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n   { INPUT, \"simm16_split\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16_SPLIT), 0, 0 },\n   { OUTPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, COND_REF },\n   { OUTPUT, \"h_memory_USI_addr\", HW_H_MEMORY, CGEN_MODE_USI, 0, 0, 0 },\n@@ -201,8 +201,8 @@ static const CGEN_OPINST sfmt_l_sw_ops[] ATTRIBUTE_UNUSED = {\n \n static const CGEN_OPINST sfmt_l_sb_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"atomic_address\", HW_H_ATOMIC_ADDRESS, CGEN_MODE_SI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n   { INPUT, \"simm16_split\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16_SPLIT), 0, 0 },\n   { OUTPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, COND_REF },\n   { OUTPUT, \"h_memory_UQI_addr\", HW_H_MEMORY, CGEN_MODE_UQI, 0, 0, 0 },\n@@ -211,8 +211,8 @@ static const CGEN_OPINST sfmt_l_sb_ops[] ATTRIBUTE_UNUSED = {\n \n static const CGEN_OPINST sfmt_l_sh_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"atomic_address\", HW_H_ATOMIC_ADDRESS, CGEN_MODE_SI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n   { INPUT, \"simm16_split\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16_SPLIT), 0, 0 },\n   { OUTPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, COND_REF },\n   { OUTPUT, \"h_memory_UHI_addr\", HW_H_MEMORY, CGEN_MODE_UHI, 0, 0, 0 },\n@@ -222,228 +222,228 @@ static const CGEN_OPINST sfmt_l_sh_ops[] ATTRIBUTE_UNUSED = {\n static const CGEN_OPINST sfmt_l_swa_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"atomic_address\", HW_H_ATOMIC_ADDRESS, CGEN_MODE_SI, 0, 0, 0 },\n   { INPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, 0 },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, COND_REF },\n   { INPUT, \"simm16_split\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16_SPLIT), 0, 0 },\n-  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { OUTPUT, \"atomic_reserve\", HW_H_ATOMIC_RESERVE, CGEN_MODE_BI, 0, 0, 0 },\n   { OUTPUT, \"h_memory_USI_addr\", HW_H_MEMORY, CGEN_MODE_USI, 0, 0, COND_REF },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_sll_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_slli_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"uimm6\", HW_H_UIMM6, CGEN_MODE_UINT, OP_ENT (UIMM6), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_and_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_add_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_addc_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_mul_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_muld_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_mulu_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_div_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, COND_REF },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, COND_REF },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, COND_REF },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, COND_REF },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, COND_REF },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, COND_REF },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_divu_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, COND_REF },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, COND_REF },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, COND_REF },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, COND_REF },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, COND_REF },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, COND_REF },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_ff1_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_xori_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_addi_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_addic_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_muli_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_exths_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_cmov_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, COND_REF },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, COND_REF },\n-  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, COND_REF },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, COND_REF },\n+  { INPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, COND_REF },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_sfgts_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_sfgtsi_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_mac_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_maci_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n   { INPUT, \"simm16\", HW_H_SIMM16, CGEN_MODE_INT, OP_ENT (SIMM16), 0, 0 },\n-  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_ov\", HW_H_SYS_SR_OV, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_l_macu_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_UDI, 0, 0, COND_REF },\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RB), 0, 0 },\n-  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n-  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"pc\", HW_H_PC, CGEN_MODE_USI, 0, 0, COND_REF },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"rB\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RB), 0, 0 },\n+  { INPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n+  { INPUT, \"sys_sr_ove\", HW_H_SYS_SR_OVE, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_machi\", HW_H_MAC_MACHI, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"mac_maclo\", HW_H_MAC_MACLO, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_cy\", HW_H_SYS_SR_CY, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n@@ -454,13 +454,6 @@ static const CGEN_OPINST sfmt_lf_add_s_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n-static const CGEN_OPINST sfmt_lf_add_d_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rADF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RADF), 0, 0 },\n-  { INPUT, \"rBDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RBDF), 0, 0 },\n-  { OUTPUT, \"rDDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RDDF), 0, 0 },\n-  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n-};\n-\n static const CGEN_OPINST sfmt_lf_add_d32_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n   { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n@@ -469,65 +462,44 @@ static const CGEN_OPINST sfmt_lf_add_d32_ops[] ATTRIBUTE_UNUSED = {\n };\n \n static const CGEN_OPINST sfmt_lf_itof_s_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RA), 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_USI, 0, 0, 0 },\n   { OUTPUT, \"rDSF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RDSF), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n-static const CGEN_OPINST sfmt_lf_itof_d_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rA\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RA), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rDDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RDDF), 0, 0 },\n-  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n-};\n-\n static const CGEN_OPINST sfmt_lf_itof_d32_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rADI\", HW_H_I64R, CGEN_MODE_DI, OP_ENT (RADI), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_USI, 0, 0, 0 },\n   { OUTPUT, \"rDD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RDD32F), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_lf_ftoi_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rASF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RASF), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n-  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n-};\n-\n-static const CGEN_OPINST sfmt_lf_ftoi_d_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rADF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RADF), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n-  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_UDI, OP_ENT (RD), 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_USI, 0, 0, 0 },\n+  { OUTPUT, \"rD\", HW_H_GPR, CGEN_MODE_USI, OP_ENT (RD), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_lf_ftoi_d32_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n-  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_UDI, 0, 0, 0 },\n+  { INPUT, \"sys_fpcsr_rm\", HW_H_SYS_FPCSR_RM, CGEN_MODE_USI, 0, 0, 0 },\n   { OUTPUT, \"rDDI\", HW_H_I64R, CGEN_MODE_DI, OP_ENT (RDDI), 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_lf_sfeq_s_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rASF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RASF), 0, 0 },\n   { INPUT, \"rBSF\", HW_H_FSR, CGEN_MODE_SF, OP_ENT (RBSF), 0, 0 },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n-  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n-};\n-\n-static const CGEN_OPINST sfmt_lf_sfeq_d_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rADF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RADF), 0, 0 },\n-  { INPUT, \"rBDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RBDF), 0, 0 },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n static const CGEN_OPINST sfmt_lf_sfeq_d32_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n   { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n-  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_UDI, 0, 0, 0 },\n+  { OUTPUT, \"sys_sr_f\", HW_H_SYS_SR_F, CGEN_MODE_USI, 0, 0, 0 },\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n@@ -539,14 +511,6 @@ static const CGEN_OPINST sfmt_lf_madd_s_ops[] ATTRIBUTE_UNUSED = {\n   { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n };\n \n-static const CGEN_OPINST sfmt_lf_madd_d_ops[] ATTRIBUTE_UNUSED = {\n-  { INPUT, \"rADF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RADF), 0, 0 },\n-  { INPUT, \"rBDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RBDF), 0, 0 },\n-  { INPUT, \"rDDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RDDF), 0, 0 },\n-  { OUTPUT, \"rDDF\", HW_H_FDR, CGEN_MODE_DF, OP_ENT (RDDF), 0, 0 },\n-  { END, (const char *)0, (enum cgen_hw_type)0, (enum cgen_mode)0, (enum cgen_operand_type)0, 0, 0 }\n-};\n-\n static const CGEN_OPINST sfmt_lf_madd_d32_ops[] ATTRIBUTE_UNUSED = {\n   { INPUT, \"rAD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RAD32F), 0, 0 },\n   { INPUT, \"rBD32F\", HW_H_FD32R, CGEN_MODE_DF, OP_ENT (RBD32F), 0, 0 },\n@@ -664,71 +628,49 @@ static const CGEN_OPINST *or1k_cgen_opinst_table[MAX_INSNS] = {\n   & sfmt_l_msync_ops[0],\n   & sfmt_l_msync_ops[0],\n   & sfmt_lf_add_s_ops[0],\n-  & sfmt_lf_add_d_ops[0],\n   & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n-  & sfmt_lf_add_d_ops[0],\n   & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n-  & sfmt_lf_add_d_ops[0],\n   & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n-  & sfmt_lf_add_d_ops[0],\n   & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_add_s_ops[0],\n-  & sfmt_lf_add_d_ops[0],\n   & sfmt_lf_add_d32_ops[0],\n   & sfmt_lf_itof_s_ops[0],\n-  & sfmt_lf_itof_d_ops[0],\n   & sfmt_lf_itof_d32_ops[0],\n   & sfmt_lf_ftoi_s_ops[0],\n-  & sfmt_lf_ftoi_d_ops[0],\n   & sfmt_lf_ftoi_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_sfeq_s_ops[0],\n-  & sfmt_lf_sfeq_d_ops[0],\n   & sfmt_lf_sfeq_d32_ops[0],\n   & sfmt_lf_madd_s_ops[0],\n-  & sfmt_lf_madd_d_ops[0],\n   & sfmt_lf_madd_d32_ops[0],\n   & sfmt_l_msync_ops[0],\n   & sfmt_l_msync_ops[0],\n-  & sfmt_l_msync_ops[0],\n };\n \n /* Function to call before using the operand instance table.  */"
    }
  ]
}