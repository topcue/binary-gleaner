{
  "sha": "3769e2277d352243fa0121d68efe31ae5edc10d5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzc2OWUyMjc3ZDM1MjI0M2ZhMDEyMWQ2OGVmZTMxYWU1ZWRjMTBkNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:40Z"
    },
    "message": "Change add_target_sections to method on program_space\n\nThis changes add_target_sections to be a method on program_space.\nLike the earlier change to remove_target_sections, this makes sense\nbecause this function is manipulating data that is stored on the\nprogram space.\n\ngdb/ChangeLog\n2020-10-29  Tom Tromey  <tom@tromey.com>\n\n\t* solib.c (solib_map_sections): Update.\n\t* exec.c (program_space::add_target_sections): Now a method.\n\t(exec_file_attach): Update.\n\t* exec.h (add_target_sections): Don't declare.\n\t* progspace.h (struct program_space) <add_target_sections>:\n\tDeclare.",
    "tree": {
      "sha": "5ba00620cd4f327f0dc9261142099fa34d1f2843",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5ba00620cd4f327f0dc9261142099fa34d1f2843"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3769e2277d352243fa0121d68efe31ae5edc10d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3769e2277d352243fa0121d68efe31ae5edc10d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3769e2277d352243fa0121d68efe31ae5edc10d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3769e2277d352243fa0121d68efe31ae5edc10d5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2a3f84af539b4dc5473c44b0a01c1bcdfc7a1300",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a3f84af539b4dc5473c44b0a01c1bcdfc7a1300",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2a3f84af539b4dc5473c44b0a01c1bcdfc7a1300"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 22,
    "deletions": 16
  },
  "files": [
    {
      "sha": "3aeb0d12d1c527ac4121e76e7a7f9dccc058924c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3769e2277d352243fa0121d68efe31ae5edc10d5",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* solib.c (solib_map_sections): Update.\n+\t* exec.c (program_space::add_target_sections): Now a method.\n+\t(exec_file_attach): Update.\n+\t* exec.h (add_target_sections): Don't declare.\n+\t* progspace.h (struct program_space) <add_target_sections>:\n+\tDeclare.\n+\n 2020-10-29  Tom Tromey  <tom@tromey.com>\n \n \t* progspace.h (struct program_space) <remove_target_sections>:"
    },
    {
      "sha": "a57399b0e34ab2bdc8abeba3f6c636a1cbfc0257",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=3769e2277d352243fa0121d68efe31ae5edc10d5",
      "patch": "@@ -497,7 +497,8 @@ exec_file_attach (const char *filename, int from_tty)\n       /* Add the executable's sections to the current address spaces'\n \t list of sections.  This possibly pushes the exec_ops\n \t target.  */\n-      add_target_sections (&current_program_space->ebfd, sections);\n+      current_program_space->add_target_sections (&current_program_space->ebfd,\n+\t\t\t\t\t\t  sections);\n \n       /* Tell display code (if any) about the changed file name.  */\n       if (deprecated_exec_file_display_hook)\n@@ -594,28 +595,25 @@ build_section_table (struct bfd *some_bfd)\n    current set of target sections.  */\n \n void\n-add_target_sections (void *owner,\n-\t\t     const target_section_table &sections)\n+program_space::add_target_sections (void *owner,\n+\t\t\t\t    const target_section_table &sections)\n {\n-  target_section_table *table = &current_program_space->target_sections;\n-\n   if (!sections.empty ())\n     {\n       for (const target_section &s : sections)\n \t{\n-\t  table->push_back (s);\n-\t  table->back ().owner = owner;\n+\t  target_sections.push_back (s);\n+\t  target_sections.back ().owner = owner;\n \t}\n \n       scoped_restore_current_pspace_and_thread restore_pspace_thread;\n-      program_space *curr_pspace = current_program_space;\n \n       /* If these are the first file sections we can provide memory\n \t from, push the file_stratum target.  Must do this in all\n \t inferiors sharing the program space.  */\n       for (inferior *inf : all_inferiors ())\n \t{\n-\t  if (inf->pspace != curr_pspace)\n+\t  if (inf->pspace != this)\n \t    continue;\n \n \t  if (inf->target_is_pushed (&exec_ops))"
    },
    {
      "sha": "3aa248527c9e9a680c0b749315bb3e7ff0c914e2",
      "filename": "gdb/exec.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/exec.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/exec.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.h?ref=3769e2277d352243fa0121d68efe31ae5edc10d5",
      "patch": "@@ -92,12 +92,6 @@ extern enum target_xfer_status\n /* Set the loaded address of a section.  */\n extern void exec_set_section_address (const char *, int, CORE_ADDR);\n \n-/* Add the sections array defined by [SECTIONS..SECTIONS_END[ to the\n-   current set of target sections.  */\n-\n-extern void add_target_sections (void *owner,\n-\t\t\t\t const target_section_table &sections);\n-\n /* Add the sections of OBJFILE to the current set of target sections.\n  * OBJFILE owns the new target sections.  */\n "
    },
    {
      "sha": "92a7942c560eaa7be9f3739ce7e0ad11402c13d7",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=3769e2277d352243fa0121d68efe31ae5edc10d5",
      "patch": "@@ -300,6 +300,11 @@ struct program_space\n   /* Remove all target sections owned by OWNER.  */\n   void remove_target_sections (void *owner);\n \n+  /* Add the sections array defined by SECTIONS to the\n+     current set of target sections.  */\n+  void add_target_sections (void *owner,\n+\t\t\t    const target_section_table &sections);\n+\n   /* Unique ID number.  */\n   int num = 0;\n "
    },
    {
      "sha": "e7dbde6a7f64dd1e4944ebdc65ab4f96661a9b75",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3769e2277d352243fa0121d68efe31ae5edc10d5/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=3769e2277d352243fa0121d68efe31ae5edc10d5",
      "patch": "@@ -578,7 +578,7 @@ solib_map_sections (struct so_list *so)\n      section tables.  Do this immediately after mapping the object so\n      that later nodes in the list can query this object, as is needed\n      in solib-osf.c.  */\n-  add_target_sections (so, *so->sections);\n+  current_program_space->add_target_sections (so, *so->sections);\n \n   return 1;\n }"
    }
  ]
}