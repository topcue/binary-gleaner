{
  "sha": "e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTY2MWVmMDFlNTBhMmNiMzhjMDA2YjBmZTQ0NGExYjQxYmZjOTQwMA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-21T14:05:40Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-09-02T12:57:12Z"
    },
    "message": "Refactor svr4_create_solib_event_breakpoints\n\nMove the bulk of svr4_create_solib_event_breakpoints into a new\nfunction to simplify the logic. No functional changes.\n\ngdb/ChangeLog:\n\n\t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Move\n\tcode to here...\n\t(svr4_create_solib_event_breakpoints): ...from here.",
    "tree": {
      "sha": "4710fe6531d6c47170ec76810117b8d1096ce70f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4710fe6531d6c47170ec76810117b8d1096ce70f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e661ef01e50a2cb38c006b0fe444a1b41bfc9400/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "217d2eaa69c2a5d58cdfd11619c4f2e41c986826",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/217d2eaa69c2a5d58cdfd11619c4f2e41c986826",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/217d2eaa69c2a5d58cdfd11619c4f2e41c986826"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 66,
    "deletions": 67
  },
  "files": [
    {
      "sha": "e35ff66c54b46a732f517cff84bfd20d5e6d6590",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e661ef01e50a2cb38c006b0fe444a1b41bfc9400/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e661ef01e50a2cb38c006b0fe444a1b41bfc9400/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
      "patch": "@@ -1,3 +1,9 @@\n+2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Move\n+\tcode to here...\n+\t(svr4_create_solib_event_breakpoints): ...from here.\n+\n 2019-08-30  Sergio Durigan Junior  <sergiodj@redhat.com>\n \n \t* nat/fork-inferior.c (trace_start_error): Remove \"\\nError: \""
    },
    {
      "sha": "b21eacb68ffb75cc30aa421dc38d115c4dcee34a",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 60,
      "deletions": 67,
      "changes": 127,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e661ef01e50a2cb38c006b0fe444a1b41bfc9400/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e661ef01e50a2cb38c006b0fe444a1b41bfc9400/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=e661ef01e50a2cb38c006b0fe444a1b41bfc9400",
      "patch": "@@ -2061,6 +2061,61 @@ svr4_create_probe_breakpoints (svr4_info *info, struct gdbarch *gdbarch,\n   svr4_update_solib_event_breakpoints ();\n }\n \n+/* Find all the glibc named probes.  Only if all of the probes are found, then\n+   create them and return true.  Otherwise return false.  If WITH_PREFIX is set\n+   then add \"rtld\" to the front of the probe names.  */\n+static bool\n+svr4_find_and_create_probe_breakpoints (svr4_info *info,\n+\t\t\t\t\tstruct gdbarch *gdbarch,\n+\t\t\t\t\tstruct obj_section *os,\n+\t\t\t\t\tbool with_prefix)\n+{\n+  std::vector<probe *> probes[NUM_PROBES];\n+  bool checked_can_use_probe_arguments = false;\n+\n+  for (int i = 0; i < NUM_PROBES; i++)\n+    {\n+      const char *name = probe_info[i].name;\n+      char buf[32];\n+\n+      /* Fedora 17 and Red Hat Enterprise Linux 6.2-6.4 shipped with an early\n+\t version of the probes code in which the probes' names were prefixed\n+\t with \"rtld_\" and the \"map_failed\" probe did not exist.  The locations\n+\t of the probes are otherwise the same, so we check for probes with\n+\t prefixed names if probes with unprefixed names are not present.  */\n+      if (with_prefix)\n+\t{\n+\t  xsnprintf (buf, sizeof (buf), \"rtld_%s\", name);\n+\t  name = buf;\n+\t}\n+\n+      probes[i] = find_probes_in_objfile (os->objfile, \"rtld\", name);\n+\n+      /* The \"map_failed\" probe did not exist in early\n+\t versions of the probes code in which the probes'\n+\t names were prefixed with \"rtld_\".  */\n+      if (with_prefix && streq (name, \"rtld_map_failed\"))\n+\tcontinue;\n+\n+      /* Ensure at least one probe for the current name was found.  */\n+      if (probes[i].empty ())\n+\treturn false;\n+\n+      /* Ensure probe arguments can be evaluated.  */\n+      if (!checked_can_use_probe_arguments)\n+\t{\n+\t  probe *p = probes[i][0];\n+\t  if (!p->can_evaluate_arguments ())\n+\t    return false;\n+\t  checked_can_use_probe_arguments = true;\n+\t}\n+    }\n+\n+  /* All probes found.  Now create them.  */\n+  svr4_create_probe_breakpoints (info, gdbarch, probes, os->objfile);\n+  return true;\n+}\n+\n /* Both the SunOS and the SVR4 dynamic linkers call a marker function\n    before and after mapping and unmapping shared libraries.  The sole\n    purpose of this method is to allow debuggers to set a breakpoint so\n@@ -2077,74 +2132,12 @@ static void\n svr4_create_solib_event_breakpoints (svr4_info *info, struct gdbarch *gdbarch,\n \t\t\t\t     CORE_ADDR address)\n {\n-  struct obj_section *os;\n-\n-  os = find_pc_section (address);\n-  if (os != NULL)\n-    {\n-      int with_prefix;\n-\n-      for (with_prefix = 0; with_prefix <= 1; with_prefix++)\n-\t{\n-\t  std::vector<probe *> probes[NUM_PROBES];\n-\t  int all_probes_found = 1;\n-\t  int checked_can_use_probe_arguments = 0;\n-\n-\t  for (int i = 0; i < NUM_PROBES; i++)\n-\t    {\n-\t      const char *name = probe_info[i].name;\n-\t      probe *p;\n-\t      char buf[32];\n-\n-\t      /* Fedora 17 and Red Hat Enterprise Linux 6.2-6.4\n-\t\t shipped with an early version of the probes code in\n-\t\t which the probes' names were prefixed with \"rtld_\"\n-\t\t and the \"map_failed\" probe did not exist.  The\n-\t\t locations of the probes are otherwise the same, so\n-\t\t we check for probes with prefixed names if probes\n-\t\t with unprefixed names are not present.  */\n-\t      if (with_prefix)\n-\t\t{\n-\t\t  xsnprintf (buf, sizeof (buf), \"rtld_%s\", name);\n-\t\t  name = buf;\n-\t\t}\n-\n-\t      probes[i] = find_probes_in_objfile (os->objfile, \"rtld\", name);\n-\n-\t      /* The \"map_failed\" probe did not exist in early\n-\t\t versions of the probes code in which the probes'\n-\t\t names were prefixed with \"rtld_\".  */\n-\t      if (strcmp (name, \"rtld_map_failed\") == 0)\n-\t\tcontinue;\n-\n-\t      if (probes[i].empty ())\n-\t\t{\n-\t\t  all_probes_found = 0;\n-\t\t  break;\n-\t\t}\n-\n-\t      /* Ensure probe arguments can be evaluated.  */\n-\t      if (!checked_can_use_probe_arguments)\n-\t\t{\n-\t\t  p = probes[i][0];\n-\t\t  if (!p->can_evaluate_arguments ())\n-\t\t    {\n-\t\t      all_probes_found = 0;\n-\t\t      break;\n-\t\t    }\n-\t\t  checked_can_use_probe_arguments = 1;\n-\t\t}\n-\t    }\n-\n-\t  if (all_probes_found)\n-\t    svr4_create_probe_breakpoints (info, gdbarch, probes, os->objfile);\n-\n-\t  if (all_probes_found)\n-\t    return;\n-\t}\n-    }\n+  struct obj_section *os = find_pc_section (address);\n \n-  create_solib_event_breakpoint (gdbarch, address);\n+  if (os == nullptr\n+      || (!svr4_find_and_create_probe_breakpoints (info, gdbarch, os, false)\n+\t  && !svr4_find_and_create_probe_breakpoints (info, gdbarch, os, true)))\n+    create_solib_event_breakpoint (gdbarch, address);\n }\n \n /* Helper function for gdb_bfd_lookup_symbol.  */"
    }
  ]
}