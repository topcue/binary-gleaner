{
  "sha": "b54509b84488023954f6974229b24fe6c993742b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjU0NTA5Yjg0NDg4MDIzOTU0ZjY5NzQyMjliMjRmZTZjOTkzNzQyYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-06T12:53:15Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-07T01:11:29Z"
    },
    "message": "PR28307, segfault in ppc64_elf_toc64_reloc\n\nAdds missing bfd_reloc_offset_in_range checks to various relocation\nspecial_functions.\n\n\tPR 28307\n\t* elf32-ppc.c (ppc_elf_addr16_ha_reloc): Range check reloc offset.\n\t* elf64-ppc.c (ppc64_elf_ha_reloc, ppc64_elf_brtaken_reloc): Likewise.\n\t(ppc64_elf_toc64_reloc, ppc64_elf_prefix_reloc): Likewise.",
    "tree": {
      "sha": "abcbcdba27d2d4f5ddf767ea0c073609af32b01a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/abcbcdba27d2d4f5ddf767ea0c073609af32b01a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b54509b84488023954f6974229b24fe6c993742b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b54509b84488023954f6974229b24fe6c993742b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b54509b84488023954f6974229b24fe6c993742b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b54509b84488023954f6974229b24fe6c993742b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4d9dd5c3576a8d6b1a59b11f8af1a3a2abd5fdc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4d9dd5c3576a8d6b1a59b11f8af1a3a2abd5fdc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4d9dd5c3576a8d6b1a59b11f8af1a3a2abd5fdc"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 27,
    "deletions": 5
  },
  "files": [
    {
      "sha": "dd45da9d6a3bd4567c48e75c70e16207432a16e3",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b54509b84488023954f6974229b24fe6c993742b/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b54509b84488023954f6974229b24fe6c993742b/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=b54509b84488023954f6974229b24fe6c993742b",
      "patch": "@@ -959,6 +959,10 @@ ppc_elf_addr16_ha_reloc (bfd *abfd,\n   value >>= 16;\n \n   octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t  input_section, octets))\n+    return bfd_reloc_outofrange;\n+\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);"
    },
    {
      "sha": "520804a0e1c59ff6c7da86b5e753489828401fe7",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 23,
      "deletions": 5,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b54509b84488023954f6974229b24fe6c993742b/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b54509b84488023954f6974229b24fe6c993742b/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=b54509b84488023954f6974229b24fe6c993742b",
      "patch": "@@ -1435,6 +1435,10 @@ ppc64_elf_ha_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n   value = (bfd_signed_vma) value >> 16;\n \n   octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t  input_section, octets))\n+    return bfd_reloc_outofrange;\n+\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);\n@@ -1510,6 +1514,10 @@ ppc64_elf_brtaken_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n   octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t  input_section, octets))\n+    return bfd_reloc_outofrange;\n+\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~(0x01 << 21);\n   r_type = reloc_entry->howto->type;\n@@ -1655,11 +1663,15 @@ ppc64_elf_toc64_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t  input_section, octets))\n+    return bfd_reloc_outofrange;\n+\n   TOCstart = _bfd_get_gp_value (input_section->output_section->owner);\n   if (TOCstart == 0)\n     TOCstart = ppc64_elf_set_toc (NULL, input_section->output_section->owner);\n \n-  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n   bfd_put_64 (abfd, TOCstart + TOC_BASE_OFF, (bfd_byte *) data + octets);\n   return bfd_reloc_ok;\n }\n@@ -1671,14 +1683,20 @@ ppc64_elf_prefix_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n {\n   uint64_t insn;\n   bfd_vma targ;\n+  bfd_size_type octets;\n \n   if (output_bfd != NULL)\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n-  insn = bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address);\n+  octets = reloc_entry->address * OCTETS_PER_BYTE (abfd, input_section);\n+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n+\t\t\t\t  input_section, octets))\n+    return bfd_reloc_outofrange;\n+\n+  insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn <<= 32;\n-  insn |= bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address + 4);\n+  insn |= bfd_get_32 (abfd, (bfd_byte *) data + octets + 4);\n \n   targ = (symbol->section->output_section->vma\n \t  + symbol->section->output_offset\n@@ -1697,8 +1715,8 @@ ppc64_elf_prefix_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n   targ >>= reloc_entry->howto->rightshift;\n   insn &= ~reloc_entry->howto->dst_mask;\n   insn |= ((targ << 16) | (targ & 0xffff)) & reloc_entry->howto->dst_mask;\n-  bfd_put_32 (abfd, insn >> 32, (bfd_byte *) data + reloc_entry->address);\n-  bfd_put_32 (abfd, insn, (bfd_byte *) data + reloc_entry->address + 4);\n+  bfd_put_32 (abfd, insn >> 32, (bfd_byte *) data + octets);\n+  bfd_put_32 (abfd, insn, (bfd_byte *) data + octets + 4);\n   if (reloc_entry->howto->complain_on_overflow == complain_overflow_signed\n       && (targ + (1ULL << (reloc_entry->howto->bitsize - 1))\n \t  >= 1ULL << reloc_entry->howto->bitsize))"
    }
  ]
}