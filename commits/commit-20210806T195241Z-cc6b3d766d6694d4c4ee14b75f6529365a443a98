{
  "sha": "cc6b3d766d6694d4c4ee14b75f6529365a443a98",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2M2YjNkNzY2ZDY2OTRkNGM0ZWUxNGI3NWY2NTI5MzY1YTQ0M2E5OA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-06T19:52:41Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-06T19:52:41Z"
    },
    "message": "[gdb/symtab] Recognize .gdb_index symbol table with empty entries as empty\n\nWhen reading a .gdb_index that contains a non-empty symbol table with only\nempty entries, gdb doesn't recognize it as empty.\n\nFix this by recognizing that the constant pool is empty, and then setting the\nsymbol table to empty.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2021-08-01  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/28159\n\t* dwarf2/read.c (read_gdb_index_from_buffer): Handle symbol table\n\tfilled with empty entries.\n\ngdb/testsuite/ChangeLog:\n\n2021-08-01  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/28159\n\t* gdb.dwarf2/dw2-zero-range.exp: Remove kfail.",
    "tree": {
      "sha": "b8b6a3f69f731c3e5ecb9ed45fadf86d6caf91de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8b6a3f69f731c3e5ecb9ed45fadf86d6caf91de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cc6b3d766d6694d4c4ee14b75f6529365a443a98",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc6b3d766d6694d4c4ee14b75f6529365a443a98",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cc6b3d766d6694d4c4ee14b75f6529365a443a98",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc6b3d766d6694d4c4ee14b75f6529365a443a98/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fd986183343387b019080d81838ad9371593b219",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd986183343387b019080d81838ad9371593b219",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fd986183343387b019080d81838ad9371593b219"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 11,
    "deletions": 20
  },
  "files": [
    {
      "sha": "8dc2be6f176b05a3ed7784cc373d44ef472d0b52",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc6b3d766d6694d4c4ee14b75f6529365a443a98/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc6b3d766d6694d4c4ee14b75f6529365a443a98/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=cc6b3d766d6694d4c4ee14b75f6529365a443a98",
      "patch": "@@ -2777,6 +2777,15 @@ to use the section anyway.\"),\n   ++i;\n   map->constant_pool = buffer.slice (metadata[i]);\n \n+  if (map->constant_pool.empty () && !map->symbol_table.empty ())\n+    {\n+      /* An empty constant pool implies that all symbol table entries are\n+\t empty.  Make map->symbol_table.empty () == true.  */\n+      map->symbol_table\n+\t= offset_view (gdb::array_view<const gdb_byte> (symbol_table,\n+\t\t\t\t\t\t\tsymbol_table));\n+    }\n+\n   return 1;\n }\n "
    },
    {
      "sha": "e43f59ea1ad18da52d0cff6ba4aaceff71062d91",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-zero-range.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 20,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc6b3d766d6694d4c4ee14b75f6529365a443a98/gdb/testsuite/gdb.dwarf2/dw2-zero-range.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc6b3d766d6694d4c4ee14b75f6529365a443a98/gdb/testsuite/gdb.dwarf2/dw2-zero-range.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-zero-range.exp?ref=cc6b3d766d6694d4c4ee14b75f6529365a443a98",
      "patch": "@@ -139,16 +139,7 @@ foreach_with_prefix ranges_sect {ranges rnglists} {\n \t    }\n \t}\n \n-\tif { $have_complaint } {\n-\t    pass $test\n-\t} else {\n-\t    set index [have_index $lib1]\n-\t    if { $index == \"gdb_index\" } {\n-\t\tkfail symtab/28159 $test\n-\t    } else {\n-\t\tfail $test\n-\t    }\n-\t}\n+\tgdb_assert { $have_complaint } $test\n     }\n \n     if { ! $readnow_p } {\n@@ -164,16 +155,7 @@ foreach_with_prefix ranges_sect {ranges rnglists} {\n \tgdb_load $lib1\n \tset test \"Zero address complaint - unrelocated - psymtab\"\n \tset have_complaint [regexp $re.* $gdb_file_cmd_msg]\n-\tif { $have_complaint } {\n-\t    pass $test\n-\t} else {\n-\t    set index [have_index $lib1]\n-\t    if { $index == \"gdb_index\" } {\n-\t\tkfail symtab/28159 $test\n-\t    } else {\n-\t\tfail $test\n-\t    }\n-\t}\n+\tgdb_assert { $have_complaint } $test\n     }\n \n     if { ! $readnow_p } {"
    }
  ]
}