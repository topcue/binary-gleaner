{
  "sha": "08080f9744094772e935204a9d59a101da83a801",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDgwODBmOTc0NDA5NDc3MmU5MzUyMDRhOWQ1OWExMDFkYTgzYTgwMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-05T15:53:09Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-25T17:22:05Z"
    },
    "message": "gdb/guile: allow for catchpoint type breakpoints in guile\n\nThis commit adds initial support for catchpoints to the guile\nbreakpoint API.\n\nThis commit adds a BP_CATCHPOINT constant which corresponds to\nGDB's internal bp_catchpoint.  The new constant is documented in the\nmanual.\n\nThe user can't create breakpoints with type BP_CATCHPOINT after this\ncommit, but breakpoints that already exist, obtained with\nthe (breakpoints) function, can now have this type.\n\ngdb/ChangeLog:\n\n\t* guile/scm-breakpoint.c (bpscm_type_to_string): Handle\n\tbp_catchpoint.\n\t(bpscm_want_scm_wrapper_p): Likewise.\n\t(gdbscm_make_breakpoint): Likewise.\n\t(breakpoint_integer_constants): Likewise.\n\ngdb/doc/ChangeLog:\n\n\t* guile.texinfo (Breakpoints In Guile): Add BP_CATCHPOINT\n\tdescription.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.guile/scm-breakpoint.exp (test_catchpoints): New proc.",
    "tree": {
      "sha": "3b210fd6add91093c659cf3b7d11d0c366739596",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3b210fd6add91093c659cf3b7d11d0c366739596"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/08080f9744094772e935204a9d59a101da83a801",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08080f9744094772e935204a9d59a101da83a801",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/08080f9744094772e935204a9d59a101da83a801",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08080f9744094772e935204a9d59a101da83a801/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "81b327aadd3454a5c855e10180b30b6cafe5fc84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81b327aadd3454a5c855e10180b30b6cafe5fc84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/81b327aadd3454a5c855e10180b30b6cafe5fc84"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 63,
    "deletions": 1
  },
  "files": [
    {
      "sha": "b610f75d22646543bf9c586e8da1cdb319267adf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* guile/scm-breakpoint.c (bpscm_type_to_string): Handle\n+\tbp_catchpoint.\n+\t(bpscm_want_scm_wrapper_p): Likewise.\n+\t(gdbscm_make_breakpoint): Likewise.\n+\t(breakpoint_integer_constants): Likewise.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* guile/scm-breakpoint.c (gdbscm_make_breakpoint): Split the error"
    },
    {
      "sha": "1f197838a59c9399d2d864f938961f7050eedd57",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* guile.texinfo (Breakpoints In Guile): Add BP_CATCHPOINT\n+\tdescription.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.texinfo (RISC-V Features): Mention vector register feature."
    },
    {
      "sha": "36fc9a7af797d73c4f8e8ed9ab706075dac614c3",
      "filename": "gdb/doc/guile.texi",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/doc/guile.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/doc/guile.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/guile.texi?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -3019,6 +3019,10 @@ This value cannot be specified when creating the breakpoint.\n @item BP_ACCESS_WATCHPOINT\n Hardware assisted access watchpoint.\n This value cannot be specified when creating the breakpoint.\n+\n+@item BP_CATCHPOINT\n+Catchpoint.\n+This value cannot be specified when creating the breakpoint.\n @end vtable\n \n The available watchpoint types are represented by constants defined in the"
    },
    {
      "sha": "3f25708afffb3961e95ed638a65931d3099e4125",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -138,6 +138,7 @@ bpscm_type_to_string (enum bptype type)\n     case bp_hardware_watchpoint: return \"BP_HARDWARE_WATCHPOINT\";\n     case bp_read_watchpoint: return \"BP_READ_WATCHPOINT\";\n     case bp_access_watchpoint: return \"BP_ACCESS_WATCHPOINT\";\n+    case bp_catchpoint: return \"BP_CATCHPOINT\";\n     default: return \"internal/other\";\n     }\n }\n@@ -233,7 +234,8 @@ bpscm_want_scm_wrapper_p (struct breakpoint *bp, int from_scheme)\n       && bp->type != bp_watchpoint\n       && bp->type != bp_hardware_watchpoint\n       && bp->type != bp_read_watchpoint\n-      && bp->type != bp_access_watchpoint)\n+      && bp->type != bp_access_watchpoint\n+      && bp->type != bp_catchpoint)\n     return 0;\n \n   return 1;\n@@ -391,6 +393,7 @@ gdbscm_make_breakpoint (SCM location_scm, SCM rest)\n     case bp_hardware_watchpoint:\n     case bp_read_watchpoint:\n     case bp_access_watchpoint:\n+    case bp_catchpoint:\n       {\n \tconst char *type_name = bpscm_type_to_string (type);\n \tgdbscm_misc_error (FUNC_NAME, type_arg_pos,\n@@ -1152,6 +1155,7 @@ static const scheme_integer_constant breakpoint_integer_constants[] =\n   { \"BP_HARDWARE_WATCHPOINT\", bp_hardware_watchpoint },\n   { \"BP_READ_WATCHPOINT\", bp_read_watchpoint },\n   { \"BP_ACCESS_WATCHPOINT\", bp_access_watchpoint },\n+  { \"BP_CATCHPOINT\", bp_catchpoint },\n \n   { \"WP_READ\", hw_read },\n   { \"WP_WRITE\", hw_write },"
    },
    {
      "sha": "30db2611d1e6747885eaf53886425bfce1ba04b3",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.guile/scm-breakpoint.exp (test_catchpoints): New proc.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.guile/scm-breakpoint.exp (test_watchpoints): Add new tests."
    },
    {
      "sha": "c603af76a3394be7e918de785c49a332cd748ee7",
      "filename": "gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08080f9744094772e935204a9d59a101da83a801/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08080f9744094772e935204a9d59a101da83a801/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-breakpoint.exp?ref=08080f9744094772e935204a9d59a101da83a801",
      "patch": "@@ -519,10 +519,47 @@ proc_with_prefix test_bkpt_probe {} {\n \t\"register probe breakpoint\"\n }\n \n+proc_with_prefix test_catchpoints {} {\n+    global srcfile testfile\n+    global gdb_prompt decimal\n+\n+    # Start with a fresh gdb.\n+    clean_restart ${testfile}\n+\n+    if ![gdb_guile_runto_main] {\n+\treturn\n+    }\n+\n+    # Try to create a catchpoint, currently this isn't supported via\n+    # the guile api.\n+    gdb_test \"guile (define cp (make-breakpoint \\\"syscall\\\" #:type BP_CATCHPOINT))\" \\\n+\t\"ERROR: In procedure gdbscm_make_breakpoint: unsupported breakpoint type in position 3: \\\"BP_CATCHPOINT\\\"\\r\\n.*\" \\\n+\t\"create a catchpoint via the api\"\n+\n+    # Setup a catchpoint.\n+    set num \"XXX\"\n+    gdb_test_multiple \"catch syscall\" \"\" {\n+\t-re \"The feature \\'catch syscall\\' is not supported.*\\r\\n$gdb_prompt $\" {\n+\t    unsupported \"catch syscall isn't supported\"\n+\t    return -1\n+\t}\n+\t-re \"Catchpoint ($decimal) \\\\(any syscall\\\\)\\r\\n$gdb_prompt $\" {\n+\t    set num $expect_out(1,string)\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Look for the catchpoint in the breakpoint list.\n+    gdb_test \"guile (for-each (lambda (b) (if (= (breakpoint-type b) BP_CATCHPOINT) (begin (display b) (newline)))) (breakpoints))\" \\\n+\t\"#<gdb:breakpoint #${num} BP_CATCHPOINT enabled noisy hit:0 ignore:0>\" \\\n+\t\"look for BP_CATCHPOINT in breakpoint list\"\n+}\n+\n test_bkpt_basic\n test_bkpt_deletion\n test_bkpt_cond_and_cmds\n test_bkpt_invisible\n+test_catchpoints\n test_watchpoints\n test_bkpt_internal\n test_bkpt_eval_funcs"
    }
  ]
}