{
  "sha": "29db1eb3390cd45066680ef865214588afdc0eca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjlkYjFlYjMzOTBjZDQ1MDY2NjgwZWY4NjUyMTQ1ODhhZmRjMGVjYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-15T10:31:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-08T11:56:16Z"
    },
    "message": "gdb: return true in TuiWindow.is_valid only if TUI is enabled\n\nIf the user implements a TUI window in Python, and this window\nresponds to GDB events and then redraws its window contents then there\nis currently an edge case which can lead to problems.\n\nThe Python API documentation suggests that calling methods like erase\nor write on a TUI window (from Python code) will raise an exception if\nthe window is not valid.\n\nAnd the description for is_valid says:\n\n  This method returns True when this window is valid. When the user\n  changes the TUI layout, windows no longer visible in the new layout\n  will be destroyed. At this point, the gdb.TuiWindow will no longer\n  be valid, and methods (and attributes) other than is_valid will\n  throw an exception.\n\nFrom this I, as a user, would expect that if I did 'tui disable' to\nswitch back to CLI mode, then the window would no longer be valid.\nHowever, this is not the case.\n\nWhen the TUI is disabled the windows in the TUI are not deleted, they\nare simply hidden.  As such, currently, the is_valid method continues\nto return true.\n\nThis means that if the users Python code does something like:\n\n  def event_handler (e):\n    global tui_window_object\n    if tui_window_object->is_valid ():\n      tui_window_object->erase ()\n      tui_window_object->write (\"Hello World\")\n  gdb.events.stop.connect (event_handler)\n\nThen when a stop event arrives GDB will try to draw the TUI window,\neven when the TUI is disabled.\n\nThis exposes two bugs.  First, is_valid should be returning false in\nthis case, second, if the user forgot to add the is_valid call, then I\nbelieve the erase and write calls should be throwing an\nexception (when the TUI is disabled).\n\nThe solution to both of these issues is I think bound together, as it\ndepends on having a working 'is_valid' check.\n\nThere's a rogue assert added into tui-layout.c as part of this\ncommit.  While working on this commit I managed to break GDB such that\nTUI_CMD_WIN was nullptr, this was causing GDB to abort.  I'm leaving\nthe assert in as it might help people catch issues in the future.\n\nThis patch is inspired by the work done here:\n\n  https://sourceware.org/pipermail/gdb-patches/2020-December/174338.html\n\ngdb/ChangeLog:\n\n\t* python/py-tui.c (gdbpy_tui_window) <is_valid>: New member\n\tfunction.\n\t(REQUIRE_WINDOW): Call is_valid member function.\n\t(REQUIRE_WINDOW_FOR_SETTER): New define.\n\t(gdbpy_tui_is_valid): Call is_valid member function.\n\t(gdbpy_tui_set_title): Call REQUIRE_WINDOW_FOR_SETTER instead.\n\t* tui/tui-data.h (struct tui_win_info) <is_visible>: Check\n\ttui_active too.\n\t* tui/tui-layout.c (tui_apply_current_layout): Add an assert.\n\t* tui/tui.c (tui_enable): Move setting of tui_active earlier in\n\tthe function.\n\ngdb/doc/ChangeLog:\n\n\t* python.texinfo (TUI Windows In Python): Extend description of\n\tTuiWindow.is_valid.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/tui-window-disabled.c: New file.\n\t* gdb.python/tui-window-disabled.exp: New file.\n\t* gdb.python/tui-window-disabled.py: New file.",
    "tree": {
      "sha": "a4616a120c22a3a8d006263fd4353705b5fea622",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4616a120c22a3a8d006263fd4353705b5fea622"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/29db1eb3390cd45066680ef865214588afdc0eca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29db1eb3390cd45066680ef865214588afdc0eca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/29db1eb3390cd45066680ef865214588afdc0eca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29db1eb3390cd45066680ef865214588afdc0eca/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0c23e11da18b615c382888da8e978f16428e81b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0c23e11da18b615c382888da8e978f16428e81b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0c23e11da18b615c382888da8e978f16428e81b"
    }
  ],
  "stats": {
    "total": 409,
    "additions": 394,
    "deletions": 15
  },
  "files": [
    {
      "sha": "912ca6b94448769b2439b4785af00dd7c2740bc7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -1,3 +1,17 @@\n+2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-tui.c (gdbpy_tui_window) <is_valid>: New member\n+\tfunction.\n+\t(REQUIRE_WINDOW): Call is_valid member function.\n+\t(REQUIRE_WINDOW_FOR_SETTER): New define.\n+\t(gdbpy_tui_is_valid): Call is_valid member function.\n+\t(gdbpy_tui_set_title): Call REQUIRE_WINDOW_FOR_SETTER instead.\n+\t* tui/tui-data.h (struct tui_win_info) <is_visible>: Check\n+\ttui_active too.\n+\t* tui/tui-layout.c (tui_apply_current_layout): Add an assert.\n+\t* tui/tui.c (tui_enable): Move setting of tui_active earlier in\n+\tthe function.\n+\n 2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-tui.c (gdbpy_tui_set_title): Check that the new value"
    },
    {
      "sha": "bc84fdc6ee6d880ab7aecc455446a03123f31ce5",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texinfo (TUI Windows In Python): Extend description of\n+\tTuiWindow.is_valid.\n+\n 2021-02-02  Lancelot SIX  <lsix@lancelotsix.com>\n \n \t* gdb.texinfo (Inferiors Connections and Programs): Document the"
    },
    {
      "sha": "ba3d2f92a431a3c7e4876bfd66088559a5e36b1b",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -5848,6 +5848,11 @@ user changes the TUI layout, windows no longer visible in the new\n layout will be destroyed.  At this point, the @code{gdb.TuiWindow}\n will no longer be valid, and methods (and attributes) other than\n @code{is_valid} will throw an exception.\n+\n+When the TUI is disabled using @code{tui disable} (@pxref{TUI\n+Commands,,tui disable}) the window is hidden rather than destroyed,\n+but @code{is_valid} will still return @code{False} and other methods\n+(and attributes) will still throw an exception.\n @end defun\n \n @defvar TuiWindow.width"
    },
    {
      "sha": "72e9c0d5e2b11e065b24da66a9a4b2df9ad287c9",
      "filename": "gdb/python/py-tui.c",
      "status": "modified",
      "additions": 26,
      "deletions": 7,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/python/py-tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/python/py-tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-tui.c?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -47,6 +47,9 @@ struct gdbpy_tui_window\n \n   /* The TUI window, or nullptr if the window has been deleted.  */\n   tui_py_window *window;\n+\n+  /* Return true if this object is valid.  */\n+  bool is_valid () const;\n };\n \n extern PyTypeObject gdbpy_tui_window_object_type\n@@ -137,6 +140,14 @@ class tui_py_window : public tui_win_info\n   gdbpy_ref<gdbpy_tui_window> m_wrapper;\n };\n \n+/* See gdbpy_tui_window declaration above.  */\n+\n+bool\n+gdbpy_tui_window::is_valid () const\n+{\n+  return window != nullptr && tui_active;\n+}\n+\n tui_py_window::~tui_py_window ()\n {\n   gdbpy_enter enter_py (get_current_arch (), current_language);\n@@ -344,19 +355,31 @@ gdbpy_register_tui_window (PyObject *self, PyObject *args, PyObject *kw)\n \n #define REQUIRE_WINDOW(Window)\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n-      if ((Window)->window == nullptr)\t\t\t\t\\\n+      if (!(Window)->is_valid ())\t\t\t\t\\\n \treturn PyErr_Format (PyExc_RuntimeError,\t\t\\\n \t\t\t     _(\"TUI window is invalid.\"));\t\\\n     } while (0)\n \n+/* Require that \"Window\" be a valid window.  */\n+\n+#define REQUIRE_WINDOW_FOR_SETTER(Window)\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      if (!(Window)->is_valid ())\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  PyErr_Format (PyExc_RuntimeError,\t\t\t\\\n+\t\t\t_(\"TUI window is invalid.\"));\t\t\\\n+\t  return -1;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    } while (0)\n+\n /* Python function which checks the validity of a TUI window\n    object.  */\n static PyObject *\n gdbpy_tui_is_valid (PyObject *self, PyObject *args)\n {\n   gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n \n-  if (win->window != nullptr)\n+  if (win->is_valid ())\n     Py_RETURN_TRUE;\n   Py_RETURN_FALSE;\n }\n@@ -428,11 +451,7 @@ gdbpy_tui_set_title (PyObject *self, PyObject *newvalue, void *closure)\n {\n   gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n \n-  if (win->window == nullptr)\n-    {\n-      PyErr_Format (PyExc_RuntimeError, _(\"TUI window is invalid.\"));\n-      return -1;\n-    }\n+  REQUIRE_WINDOW_FOR_SETTER (win);\n \n   if (newvalue == nullptr)\n     {"
    },
    {
      "sha": "3e622adb4d0c335030af94327948a270ed26ad13",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -1,3 +1,9 @@\n+2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/tui-window-disabled.c: New file.\n+\t* gdb.python/tui-window-disabled.exp: New file.\n+\t* gdb.python/tui-window-disabled.py: New file.\n+\n 2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/tui-window.exp: Add new tests."
    },
    {
      "sha": "898c5361ca3817133b8a0dd6c79a49184e338682",
      "filename": "gdb/testsuite/gdb.python/tui-window-disabled.c",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/tui-window-disabled.c?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -0,0 +1,43 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n+\n+#include \"../lib/attributes.h\"\n+\n+volatile int val;\n+\n+void __attribute__((noinline)) ATTRIBUTE_NOCLONE\n+func (int i)\n+{\n+  val = i;\n+}\n+\n+int\n+main ()\n+{\n+  func (0);\n+  func (1);\n+  func (2);\n+  func (3);\n+  func (4);\n+  func (5);\n+  func (6);\n+  func (7);\n+  func (8);\n+  func (9);\n+\n+  return 0;\n+}"
    },
    {
      "sha": "af1fa0cde638a7d85f39555e1adb3ab8a0fff57b",
      "filename": "gdb/testsuite/gdb.python/tui-window-disabled.exp",
      "status": "added",
      "additions": 189,
      "deletions": 0,
      "changes": 189,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/tui-window-disabled.exp?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -0,0 +1,189 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Create a TUI window in Python that responds to GDB event.  Each\n+# event will trigger the TUI window to redraw itself.\n+#\n+# This test is checking how GDB behaves if the user first displays a\n+# Python based tui window, and then does 'tui disable'.  At one point\n+# it was possible that GDB would try to redraw the tui window even\n+# though the tui should be disabled.\n+\n+load_lib gdb-python.exp\n+tuiterm_env\n+\n+standard_testfile\n+\n+if {[build_executable \"failed to prepare\" ${testfile} ${srcfile}] == -1} {\n+    return -1\n+}\n+\n+# Copy the Python script to where the tests are being run.\n+set remote_python_file [gdb_remote_download host \\\n+\t\t\t    ${srcdir}/${subdir}/${testfile}.py]\n+\n+proc clean_restart_and_setup { prefix } {\n+    global testfile\n+    global remote_python_file\n+\n+    with_test_prefix $prefix {\n+\n+\tTerm::clean_restart 24 80 $testfile\n+\n+\t# Skip all tests if Python scripting is not enabled.\n+\tif { [skip_python_tests] } { return 0 }\n+\n+\t# Now source the python script.\n+\tgdb_test_no_output \"source ${remote_python_file}\" \\\n+\t    \"source ${testfile}.py\"\n+\n+\t# Create a new layout making use of our new event window.\n+\tgdb_test_no_output \"tui new-layout test events 1 cmd 1\"\n+\n+\t# Disable source code highlighting.\n+\tgdb_test_no_output \"set style sources off\"\n+\n+\tif {![runto_main]} {\n+\t    perror \"test suppressed\"\n+\t    return\n+\t}\n+    }\n+\n+    return 1\n+}\n+\n+# Run the test.  CLEANUP_PROPERLY is either true or false.  This is\n+# used to set a flag in the Python code which controls whether the\n+# Python TUI window cleans up properly or not.\n+#\n+# When the Python window does not cleanup properly then it retains a\n+# cyclic reference to itself, this means that it is still possible for\n+# the object to try and redraw itself even when the tui is disabled.\n+proc run_test { cleanup_properly } {\n+\n+    if { ![clean_restart_and_setup \"initial restart\"] } {\n+\tunsupported \"couldn't restart GDB\"\n+\treturn\n+    }\n+\n+    if { $cleanup_properly } {\n+\tgdb_test_no_output \"python cleanup_properly = True\"\n+    } else {\n+\tgdb_test_no_output \"python cleanup_properly = False\"\n+    }\n+\n+    if {![Term::enter_tui]} {\n+\tunsupported \"TUI not supported\"\n+\treturn\n+    }\n+\n+    Term::command \"layout test\"\n+\n+    # Confirm that the events box is initially empty, then perform two\n+    # actions that will add two events to the window.\n+    Term::check_box_contents \"no events yet\" 0 0 80 16 \"\"\n+    Term::command \"next\"\n+    Term::check_box_contents \"single stop event\" 0 0 80 16 \"stop\"\n+    Term::command \"next\"\n+    Term::check_box_contents \"two stop events\" 0 0 80 16 \\\n+\t\"stop\\[^\\n\\]+\\nstop\"\n+\n+    # Now disable the tui, we should end up back at a standard GDB prompt.\n+    Term::command \"tui disable\"\n+\n+    # Do something just so we know that the CLI is working.\n+    gdb_test \"print 1 + 1 + 1\" \" = 3\"\n+\n+    # Now perform an action that would trigger an event.  At one point\n+    # there was a bug where the TUI window might try to redraw itself.\n+    # This is why we use GDB_TEST_MULTIPLE here, so we can spot the tui\n+    # window title and know that things have gone wrong.\n+    gdb_test_multiple \"next\" \"next at cli\" {\n+\t-re -wrap \"func \\\\(3\\\\);\" {\n+\t    pass $gdb_test_name\n+\t}\n+\n+\t-re \"This Is The Event Window\" {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    # Do something just so we know that the CLI is still working.  This\n+    # also serves to drain the expect buffer if the above test failed.\n+    gdb_test \"print 2 + 2 + 2\" \" = 6\"\n+\n+    # Now tell the Python code not to check the window is valid before\n+    # calling rerended.  The result is the Python code will try to draw to\n+    # the screen.  This should throw a Python exception.\n+    gdb_test_no_output \"python perform_valid_check = False\"\n+    set exception_pattern \"\\r\\nPython Exception\\[^\\n\\r\\]+TUI window is invalid\\[^\\n\\r\\]+\"\n+    gdb_test_multiple \"next\" \"next at cli, with an exception\" {\n+\t-re -wrap \"func \\\\(4\\\\);${exception_pattern}\" {\n+\t    pass $gdb_test_name\n+\t}\n+\n+\t-re \"This Is The Event Window\" {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    # Do something just so we know that the CLI is still working.  This\n+    # also serves to drain the expect buffer if the above test failed.\n+    gdb_test \"print 3 + 3 + 3\" \" = 9\"\n+\n+    # Set 'update_title' to True.  The Python script will now try to set\n+    # the window title when an event occurs (instead of trying to redraw\n+    # the window). As the window is still not displayed this will again\n+    # through an exception.\n+    gdb_test_no_output \"python update_title = True\"\n+    gdb_test_multiple \"next\" \"next at cli, with an exception for setting the title\" {\n+\t-re -wrap \"func \\\\(5\\\\);${exception_pattern}\" {\n+\t    pass $gdb_test_name\n+\t}\n+\n+\t-re \"This Is The Event Window\" {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    # We need to perform a restart here as the TUI library we use for\n+    # testing doesn't seem to handle output in the command window\n+    # correctly, and gets really upset as we approach the bottom of\n+    # the screen.\n+    #\n+    # Restart GDB, enable tui mode, select the new layout.  Then\n+    # disable tui and re-enable again.\n+    if { ![clean_restart_and_setup \"second restart\"] } {\n+\tunsupported \"couldn't restart GDB\"\n+\treturn\n+    }\n+\n+    with_test_prefix \"enter tui again\" {\n+\tif {![Term::enter_tui]} {\n+\t    unsupported \"TUI not supported\"\n+\t    return\n+\t}\n+    }\n+\n+    Term::command \"layout test\"\n+    Term::command \"tui disable\"\n+    send_gdb \"tui enable\\n\"\n+    Term::check_box \"check for python window\" 0 0 80 16\n+}\n+\n+# Run the tests in both cleanup modes.\n+foreach_with_prefix cleanup_properly { True False } {\n+    run_test $cleanup_properly\n+}"
    },
    {
      "sha": "0b3c076f7e998c85d49d3da56f88cb829f6b701b",
      "filename": "gdb/testsuite/gdb.python/tui-window-disabled.py",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/testsuite/gdb.python/tui-window-disabled.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/tui-window-disabled.py?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -0,0 +1,89 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# A TUI window implemented in Python that responds to, and displays,\n+# stop and exit events.\n+\n+import gdb\n+\n+# When an event arrives we ask the window to redraw itself.  We should\n+# only do this if the window is valid.  When this flag is true we\n+# perform the is_valid check.  When this flag is false\n+perform_valid_check = True\n+update_title = False\n+cleanup_properly = False\n+\n+# A global place into which we can write the window title.\n+titles_at_the_close = {}\n+\n+class EventWindow:\n+    def __init__ (self, win):\n+        self._win = win\n+        self._count = 0\n+        win.title = \"This Is The Event Window\"\n+        self._stop_listener = lambda e : self._event ('stop', e)\n+        gdb.events.stop.connect (self._stop_listener)\n+        self._exit_listener = lambda e : self._event ('exit', e)\n+        gdb.events.exited.connect (self._exit_listener)\n+        self._events = []\n+\n+        # Ensure we can erase and write to the window from the\n+        # constructor, the window should be valid by this point.\n+        self._win.erase ()\n+        self._win.write (\"Hello world...\")\n+\n+    def close (self):\n+        global cleanup_properly\n+        global titles_at_the_close\n+\n+        # Ensure that window properties can be read within the close method.\n+        titles_at_the_close[self._win.title] = dict (width=self._win.width,\n+                                                     height=self._win.height)\n+\n+        # The following calls are pretty pointless, but this ensures\n+        # that we can erase and write to a window from the close\n+        # method, the last moment a window should be valid.\n+        self._win.erase ()\n+        self._win.write (\"Goodbye cruel world...\")\n+\n+        if cleanup_properly:\n+            # Disconnect the listeners and delete the lambda functions.\n+            # This removes cyclic references to SELF, and so alows SELF to\n+            # be deleted.\n+            gdb.events.stop.disconnect (self._stop_listener)\n+            gdb.events.exited.disconnect (self._exit_listener)\n+            self._stop_listener = None\n+            self._exit_listener = None\n+\n+    def _event (self, type, event):\n+        global perform_valid_check\n+        global update_title\n+\n+        self._count += 1\n+        self._events.insert (0, type)\n+        if not perform_valid_check or self._win.is_valid ():\n+            if update_title:\n+                self._win.title = \"This Is The Event Window (\" + str (self._count) + \")\"\n+            else:\n+                self.render ()\n+\n+    def render (self):\n+        self._win.erase ()\n+        w = self._win.width\n+        h = self._win.height\n+        for i in range (min (h, len (self._events))):\n+            self._win.write (self._events[i] + \"\\n\")\n+\n+gdb.register_window_type(\"events\", EventWindow)"
    },
    {
      "sha": "b4d788dd0a485ab10f1e79c9e6397a6e51b4ec44",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -96,7 +96,7 @@ struct tui_win_info\n   /* Return true if this window is visible.  */\n   bool is_visible () const\n   {\n-    return handle != nullptr;\n+    return handle != nullptr && tui_active;\n   }\n \n   /* Return true if this window can accept the focus.  */"
    },
    {
      "sha": "bf9c3ff4ddc5524eba009bbef93c5c070cfb9af4",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -86,6 +86,7 @@ tui_apply_current_layout ()\n       tui_win_list[win_type] = nullptr;\n \n   /* This should always be made visible by a layout.  */\n+  gdb_assert (TUI_CMD_WIN != nullptr);\n   gdb_assert (TUI_CMD_WIN->is_visible ());\n \n   /* Get the new list of currently visible windows.  */"
    },
    {
      "sha": "af92b2a804261fb83965db679f28de15cd68635f",
      "filename": "gdb/tui/tui.c",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29db1eb3390cd45066680ef865214588afdc0eca/gdb/tui/tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.c?ref=29db1eb3390cd45066680ef865214588afdc0eca",
      "patch": "@@ -420,6 +420,12 @@ tui_enable (void)\n \t}\n #endif\n \n+      /* We must mark the tui sub-system active before trying to setup the\n+\t current layout as tui windows defined by an extension language\n+\t rely on this flag being true in order to know that the window\n+\t they are creating is currently valid.  */\n+      tui_active = true;\n+\n       cbreak ();\n       noecho ();\n       /* timeout (1); */\n@@ -439,19 +445,21 @@ tui_enable (void)\n     }\n   else\n     {\n-     /* Save the current gdb setting of the terminal.\n-\tCurses will restore this state when endwin() is called.  */\n-     def_shell_mode ();\n-     clearok (stdscr, TRUE);\n-   }\n+      /* Save the current gdb setting of the terminal.\n+\t Curses will restore this state when endwin() is called.  */\n+      def_shell_mode ();\n+      clearok (stdscr, TRUE);\n+\n+      tui_active = true;\n+    }\n+\n+  gdb_assert (tui_active);\n \n   if (tui_update_variables ())\n     tui_rehighlight_all ();\n \n   tui_setup_io (1);\n \n-  tui_active = true;\n-\n   /* Resize windows before anything might display/refresh a\n      window.  */\n   if (tui_win_resized ())"
    }
  ]
}