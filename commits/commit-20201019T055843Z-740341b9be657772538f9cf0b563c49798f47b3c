{
  "sha": "740341b9be657772538f9cf0b563c49798f47b3c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzQwMzQxYjliZTY1Nzc3MjUzOGY5Y2YwYjU2M2M0OTc5OGY0N2IzYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-18T22:19:32Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-19T05:58:43Z"
    },
    "message": "Provide dummy libraries for alpha-vms\n\nalpha-dec-vms always loads a number of libraries, -limagelib,\n-lstarlet, and -lsys$public_vectors.  When running the ld testsuite\nwithout a full cross-build environment, those libraries are missing\nand cause fails.  This patch provides dummies, and tidies default.exp\na little.\n\n\t* testsuite/config/default.exp: Provide dummy libraries for\n\talpha-dec-vms.\n\t(compiler_supports): New proc.  Use it for compiler tests.\n\t* testsuite/lib/ld-lib.exp (default_ld_assemble): Don't die if\n\tsubdir not set.\n\t(run_ld_link_tests): Pass LDFLAGS to ld.\n\t* testsuite/ld-checks/checks.exp (section_check): Likewise.\n\t* testsuite/ld-scripts/assert.exp: Likewise.\n\t* testsuite/ld-scripts/extern.exp: Likewise.\n\t* testsuite/ld-scripts/log2.exp: Likewise.\n\t* testsuite/ld-scripts/map-address.exp: Likewise.\n\t* testsuite/ld-scripts/script.exp: Likewise.\n\t* testsuite/ld-scripts/sizeof.exp: Likewise.",
    "tree": {
      "sha": "016dc24ace4a05e744722c3c36ff45c8bd20a50d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/016dc24ace4a05e744722c3c36ff45c8bd20a50d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/740341b9be657772538f9cf0b563c49798f47b3c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/740341b9be657772538f9cf0b563c49798f47b3c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/740341b9be657772538f9cf0b563c49798f47b3c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/740341b9be657772538f9cf0b563c49798f47b3c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13e86dcf7a02f38a308279dc4272fe3bd3597c3d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e86dcf7a02f38a308279dc4272fe3bd3597c3d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/13e86dcf7a02f38a308279dc4272fe3bd3597c3d"
    }
  ],
  "stats": {
    "total": 374,
    "additions": 98,
    "deletions": 276
  },
  "files": [
    {
      "sha": "8d5fb456e43bd444cf060bf0e5b9afa9ad7de5d9",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -1,3 +1,19 @@\n+2020-10-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/config/default.exp: Provide dummy libraries for\n+\talpha-dec-vms.\n+\t(compiler_supports): New proc.  Use it for compiler tests.\n+\t* testsuite/lib/ld-lib.exp (default_ld_assemble): Don't die if\n+\tsubdir not set.\n+\t(run_ld_link_tests): Pass LDFLAGS to ld.\n+\t* testsuite/ld-checks/checks.exp (section_check): Likewise.\n+\t* testsuite/ld-scripts/assert.exp: Likewise.\n+\t* testsuite/ld-scripts/extern.exp: Likewise.\n+\t* testsuite/ld-scripts/log2.exp: Likewise.\n+\t* testsuite/ld-scripts/map-address.exp: Likewise.\n+\t* testsuite/ld-scripts/script.exp: Likewise.\n+\t* testsuite/ld-scripts/sizeof.exp: Likewise.\n+\n 2020-10-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ldlang.c (lang_process): Add extra call to"
    },
    {
      "sha": "dfb633406dcd055757bb08665a7aef136c529f8a",
      "filename": "ld/testsuite/config/default.exp",
      "status": "modified",
      "additions": 63,
      "deletions": 259,
      "changes": 322,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/config/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/config/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/config/default.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -312,304 +312,108 @@ if { ![info exists LD_CLASS] } then {\n     }\n }\n \n-# Set PLT_CFLAGS to \"-fplt\" if target compiler supports it.\n-\n-if { ![info exists PLT_CFLAGS] } then {\n+# Compiler tests\n+proc compiler_supports { flag args } {\n     if { [check_compiler_available] } {\n-\t# Check if gcc supports -fplt\n+\tglobal CC\n \tset flags \"\"\n \tif [board_info [target_info name] exists cflags] {\n \t    append flags \" [board_info [target_info name] cflags]\"\n \t}\n \tif [board_info [target_info name] exists ldflags] {\n \t    append flags \" [board_info [target_info name] ldflags]\"\n \t}\n-\n-\tset basename \"tmpdir/plt[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}.o\n-\tset f [open $src \"w\"]\n-\tputs $f \"\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset plt_available [run_host_cmd_yesno \"$CC\" \"$flags -c -fplt $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $plt_available == 1 } then {\n-\t    set PLT_CFLAGS \"-fplt\"\n+\tset fn \"cs[pid].c\"\n+\tset f [open $fn \"w\"]\n+\tif { [llength $args] > 0 } {\n+\t    puts $f [lindex $args 0]\n \t} else {\n-\t    set PLT_CFLAGS \"\"\n+\t    puts $f \"int main (void) { return 0; }\"\n \t}\n-    } else {\n-\tset PLT_CFLAGS \"\"\n+\tclose $f\n+\tset rfn [remote_download host $fn]\n+\tset avail [run_host_cmd_yesno \"$CC\" \"$flags $flag $rfn -o /dev/null\"]\n+\tremote_file host delete $rfn\n+\tfile delete $fn\n+\treturn $avail\n     }\n+    return 0\n }\n \n-# Set NOPIE_CFLAGS to \"-fno-PIE\" and NOPIE_LDFLAGS to \"-no-pie\" if\n-# target compiler supports them.\n+if { ![info exists PLT_CFLAGS] } then {\n+    set PLT_CFLAGS \"\"\n+    if [compiler_supports \"-c -fplt\"] {\n+\tset PLT_CFLAGS \"-fplt\"\n+    }\n+}\n \n if { ![info exists NOPIE_CFLAGS] || ![info exists NOPIE_LDFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -fno-PIE -no-pie.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/nopie[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void) { return 0; }\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset nopie_available [run_host_cmd_yesno \"$CC\" \"$flags -fno-PIE -no-pie $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $nopie_available == 1 } then {\n-\t    set NOPIE_CFLAGS \"-fno-PIE\"\n-\t    set NOPIE_LDFLAGS \"-no-pie\"\n-\t} else {\n-\t    set NOPIE_CFLAGS \"\"\n-\t    set NOPIE_LDFLAGS \"\"\n-\t}\n-    } else {\n-\tset NOPIE_CFLAGS \"\"\n-\tset NOPIE_LDFLAGS \"\"\n+    set NOPIE_CFLAGS \"\"\n+    set NOPIE_LDFLAGS \"\"\n+    if [compiler_supports \"-fno-PIE -no-pie\"] {\n+\tset NOPIE_CFLAGS \"-fno-PIE\"\n+\tset NOPIE_LDFLAGS \"-no-pie\"\n     }\n }\n \n-# Set NOCF_PROTECTION_CFLAGS to \"-fcf-protection=none\" if target compiler\n-# supports it.\n-\n if { ![info exists NOCF_PROTECTION_CFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -fcf-protection=none.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/available[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void) { return 0; }\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset available [run_host_cmd_yesno \"$CC\" \"$flags -fcf-protection=none $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $available == 1 } then {\n-\t    set NOCF_PROTECTION_CFLAGS \"-fcf-protection=none\"\n-\t} else {\n-\t    set NOCF_PROTECTION_CFLAGS \"\"\n-\t}\n-    } else {\n-\tset NOCF_PROTECTION_CFLAGS \"\"\n+    set NOCF_PROTECTION_CFLAGS \"\"\n+    if [compiler_supports \"-fcf-protection=none\"] {\n+\tset NOCF_PROTECTION_CFLAGS \"-fcf-protection=none\"\n     }\n }\n \n-# Set GNU2_CFLAGS to \"-mtls-dialect=gnu2\" if target compiler supports it.\n-\n if { ![info exists GNU2_CFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -mtls-dialect=gnu2\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/gnu2[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}.o\n-\tset f [open $src \"w\"]\n-\tputs $f \"__thread int yyy = 100;\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset gnu2_available [run_host_cmd_yesno \"$CC\" \"$flags -c -mtls-dialect=gnu2 $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $gnu2_available == 1 } then {\n-\t    set GNU2_CFLAGS \"-mtls-dialect=gnu2\"\n-\t} else {\n-\t    set GNU2_CFLAGS \"\"\n-\t}\n-    } else {\n-\tset GNU2_CFLAGS \"\"\n+    set GNU2_CFLAGS \"\"\n+    if [compiler_supports \"-c -mtls-dialect=gnu2\" \"__thread int y = 1;\"] {\n+\tset GNU2_CFLAGS \"-mtls-dialect=gnu2\"\n     }\n }\n \n-# Set INT128_CFLAGS to \"-DHAS_INT128\" if target compiler supports __int128.\n-\n if { ![info exists INT128_CFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports __int128.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/int128[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}.o\n-\tset f [open $src \"w\"]\n-\tputs $f \"__int128 a = 42;\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset int128_available [run_host_cmd_yesno \"$CC\" \"$flags -c $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $int128_available == 1 } then {\n-\t    set INT128_CFLAGS \"-DHAS_INT128\"\n-\t} else {\n-\t    set INT128_CFLAGS \"\"\n-\t}\n-    } else {\n-\tset INT128_CFLAGS \"\"\n+    set INT128_CFLAGS \"\"\n+    if [compiler_supports \"-c\" \"__int128 a = 42;\"] {\n+\tset INT128_CFLAGS \"-DHAS_INT128\"\n     }\n }\n \n-# Set STATIC_LDFLAGS to \"-static\" if target compiler supports it.\n-\n if { ![info exists STATIC_LDFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -static.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/static[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void) { return 0; }\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset static_available [run_host_cmd_yesno \"$CC\" \"-static $flags $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $static_available == 1 } then {\n-\t    set STATIC_LDFLAGS \"-static\"\n-\t} else {\n-\t    set STATIC_LDFLAGS \"\"\n-\t}\n-    } else {\n-\tset STATIC_LDFLAGS \"\"\n+    set STATIC_LDFLAGS \"\"\n+    if [compiler_supports \"-static\"] {\n+\tset STATIC_LDFLAGS \"-static\"\n     }\n }\n \n-# Set STATIC_PIE_LDFLAGS to \"-static-pie\" if target compiler supports it.\n-\n if { ![info exists STATIC_PIE_LDFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -static-pie.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/static[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void) { return 0; }\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset static_available [run_host_cmd_yesno \"$CC\" \"-static-pie $flags $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-\n-\tif { $static_available == 1 } then {\n-\t    set STATIC_PIE_LDFLAGS \"-static-pie\"\n-\t} else {\n-\t    set STATIC_PIE_LDFLAGS \"\"\n-\t}\n-    } else {\n-\tset STATIC_PIE_LDFLAGS \"\"\n+    set STATIC_PIE_LDFLAGS \"\"\n+    if [compiler_supports \"-static-pie\"] {\n+\tset STATIC_PIE_LDFLAGS \"-static-pie\"\n     }\n }\n \n-# Set NOSANITIZE_CFLAGS to \"-fno-sanitize=all\" if target compiler\n-# supports it.\n-\n if { ![info exists NOSANITIZE_CFLAGS] } then {\n-    if { [check_compiler_available] } {\n-\t# Check if gcc supports -fno-sanitize=all.\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/available[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void) { return 0; }\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset available [run_host_cmd_yesno \"$CC\" \"$flags -fno-sanitize=all $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n+    set NOSANITIZE_CFLAGS \"\"\n+    if [compiler_supports \"-fno-sanitize=all\"] {\n+\tset NOSANITIZE_CFLAGS \"-fno-sanitize=all\"\n+    }\n+}\n \n-\tif { $available == 1 } then {\n-\t    set NOSANITIZE_CFLAGS \"-fno-sanitize=all\"\n-\t} else {\n-\t    set NOSANITIZE_CFLAGS \"\"\n-\t}\n-    } else {\n-\tset NOSANITIZE_CFLAGS \"\"\n+# Provide dummy libraries that alpha-vms-ld always loads\n+if { [istarget alpha*-*-*vms*] } {\n+    set src tmpdir/empty.s\n+    set f [open $src \"w\"]\n+    close $f\n+    if { [ld_assemble $as $src tmpdir/empty.o]\n+\t && ![ld_link $LD tmpdir/empty tmpdir/empty.o]\n+\t && [regsub -all {[^\\n]*: cannot find -l([^\\n]*)} $exec_output {tmpdir/lib\\1.a } missing_libs] } {\n+\tregsub -all {\\$} $missing_libs {\\\\\\$} missing_libs\n+\tfor { set i 0 } { $i < [llength $missing_libs] } { incr i } {\n+\t    set f [lindex $missing_libs $i]\n+\t    verbose -log \"creating dummy $f\"\n+\t    ar_simple_create $ar {} $f tmpdir/empty.o\n+\t}\n+\tappend LDFLAGS \" -Ltmpdir\"\n+\tunset i missing_libs\n     }\n+    unset f src\n }"
    },
    {
      "sha": "8c5bf91532359e103ed6f9495578d406b50ef59d",
      "filename": "ld/testsuite/ld-checks/checks.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-checks/checks.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-checks/checks.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-checks/checks.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -21,7 +21,7 @@\n # Written by Nick Clifton (nickc@cygnus.com)\n \n proc section_check {} {\n-    global ld_flags\n+    global LDFLAGS\n     global as\n     global ld\n     global srcdir\n@@ -33,7 +33,7 @@ proc section_check {} {\n     }\n     set test \"check sections 1\"\n \n-    set ldflags \"--check-sections -e foo\"\n+    set ldflags \"$LDFLAGS --check-sections -e foo\"\n \n     if { ![ld_assemble $as $srcdir/$subdir/asm.s tmpdir/asm.o]} {\n \tunresolved $test\n@@ -50,7 +50,7 @@ proc section_check {} {\n \n     # Change the linker flags so that our \"buggy\" linker\n     # script is used.\n-    set ldflags \"--check-sections -T $srcdir/$subdir/script -e foo\"\n+    set ldflags \"$LDFLAGS --check-sections -T $srcdir/$subdir/script -e foo\"\n \n     # Perform the equivalent of invoking ld_link\n     # except that we need to massage the output further."
    },
    {
      "sha": "00c65548ba3bff78b7899a57d819a31737cfe153",
      "filename": "ld/testsuite/ld-scripts/assert.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/assert.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/assert.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/assert.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -26,7 +26,7 @@ if ![ld_assemble $as $srcdir/$subdir/assert.s tmpdir/assert.o] {\n     return\n }\n \n-if ![ld_link $ld tmpdir/assert \"-T $srcdir/$subdir/assert.t tmpdir/assert.o\"] {\n+if ![ld_link $ld tmpdir/assert \"$LDFLAGS -T $srcdir/$subdir/assert.t tmpdir/assert.o\"] {\n     fail $testname\n } else {\n     pass $testname"
    },
    {
      "sha": "877559b563e1784f41e09f447c08c0ed18ecc84c",
      "filename": "ld/testsuite/ld-scripts/extern.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/extern.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/extern.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/extern.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -26,7 +26,7 @@ if ![ld_assemble $as $srcdir/$subdir/extern.s tmpdir/extern.o] {\n     return\n }\n \n-if ![ld_link $ld tmpdir/extern \"-T $srcdir/$subdir/extern.t tmpdir/extern.o\"] {\n+if ![ld_link $ld tmpdir/extern \"$LDFLAGS -T $srcdir/$subdir/extern.t tmpdir/extern.o\"] {\n     fail $testname\n     return\n }"
    },
    {
      "sha": "228cd5c9374e632bd7b299c0e3b4970ae9f29f57",
      "filename": "ld/testsuite/ld-scripts/log2.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/log2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/log2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/log2.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -26,7 +26,7 @@ if {![ld_assemble $as $srcdir/$subdir/log2.s tmpdir/log2.o]} {\n     return\n }\n \n-if {![ld_link $ld tmpdir/log2 \"-T $srcdir/$subdir/log2.t tmpdir/log2.o\"]} {\n+if {![ld_link $ld tmpdir/log2 \"$LDFLAGS -T $srcdir/$subdir/log2.t tmpdir/log2.o\"]} {\n     fail $testname\n } else {\n     pass $testname"
    },
    {
      "sha": "1f9457a8cdbac1a30e48f4a67efa4a95bebe76ef",
      "filename": "ld/testsuite/ld-scripts/map-address.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/map-address.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/map-address.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/map-address.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -27,7 +27,7 @@ if {![ld_assemble $as $srcdir/$subdir/sizeof.s tmpdir/map-address.o]} {\n }\n \n if {![ld_link $ld tmpdir/map-address \\\n-\t \"-T $srcdir/$subdir/map-address.t \\\n+\t \"$LDFLAGS -T $srcdir/$subdir/map-address.t \\\n \t  tmpdir/map-address.o \\\n \t  -Map tmpdir/map-address.map\"]} {\n     fail $testname\n@@ -49,7 +49,7 @@ if {[regexp_diff \\\n set testname \"map to directory\"\n \n if {![ld_link $ld tmpdir/map-address \\\n-\t \"-T $srcdir/$subdir/map-address.t \\\n+\t \"$LDFLAGS -T $srcdir/$subdir/map-address.t \\\n \t  tmpdir/map-address.o \\\n \t  -Map tmpdir --output fred\"]} {\n     fail $testname"
    },
    {
      "sha": "8b97f6c0832dc6549ce1114248a97a501856fea6",
      "filename": "ld/testsuite/ld-scripts/script.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/script.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/script.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/script.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -182,15 +182,13 @@ proc extract_symbol_test { testfile testname } {\n }\n \n # PE targets need to set the image base to 0 to avoid complications from nm.\n-set flags \"\"\n set old_LDFLAGS $LDFLAGS\n if { [is_pecoff_format] } then {\n-    set flags \"--image-base 0\"\n-    set LDFLAGS \"$LDFLAGS --image-base 0\"\n+    append LDFLAGS \" --image-base 0\"\n } elseif { [is_xcoff_format] } then {\n-    set flags \"-bnogc\"\n-    set LDFLAGS \"$LDFLAGS -bnogc\"\n+    append LDFLAGS \" -bnogc\"\n }\n+set flags $LDFLAGS\n \n if ![ld_link $ld tmpdir/script \"$flags -T $srcdir/$subdir/script.t tmpdir/script.o\"] {\n     fail $testname"
    },
    {
      "sha": "e4f0219e3e05d2f00fdee980fa08c6c3ce5e78f7",
      "filename": "ld/testsuite/ld-scripts/sizeof.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/sizeof.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/ld-scripts/sizeof.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/sizeof.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -27,7 +27,7 @@ if ![ld_assemble $as $srcdir/$subdir/sizeof.s tmpdir/sizeof.o] {\n     return\n }\n \n-if ![ld_link $ld tmpdir/sizeof \"-T $srcdir/$subdir/sizeof.t tmpdir/sizeof.o\"] {\n+if ![ld_link $ld tmpdir/sizeof \"$LDFLAGS -T $srcdir/$subdir/sizeof.t tmpdir/sizeof.o\"] {\n     fail $testname\n     return\n }"
    },
    {
      "sha": "c02640761994a84d02bafb214cde8c5eae8194ed",
      "filename": "ld/testsuite/lib/ld-lib.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/lib/ld-lib.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/740341b9be657772538f9cf0b563c49798f47b3c/ld/testsuite/lib/ld-lib.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/lib/ld-lib.exp?ref=740341b9be657772538f9cf0b563c49798f47b3c",
      "patch": "@@ -305,7 +305,10 @@ proc default_ld_assemble { as in_flags source object } {\n \n     if ![info exists ASFLAGS] { set ASFLAGS \"\" }\n \n-    set flags \"[big_or_little_endian] -I$srcdir/$subdir\"\n+    set flags [big_or_little_endian]\n+    if [info exists subdir] {\n+\tappend flags \" -I$srcdir/$subdir\"\n+    }\n     set exec_output [run_host_cmd \"$as\" \"$flags $in_flags $ASFLAGS -o $object $source\"]\n     set exec_output [prune_warnings $exec_output]\n     if [string match \"\" $exec_output] then {\n@@ -450,6 +453,7 @@ proc ar_simple_create { ar aropts target objects } {\n #\n proc run_ld_link_tests { ldtests args } {\n     global ld\n+    global LDFLAGS\n     global as\n     global nm\n     global ar\n@@ -463,9 +467,9 @@ proc run_ld_link_tests { ldtests args } {\n     global runtests\n     global exec_output\n \n-    set ld_extra_opt \"\"\n+    set ld_extra_opt $LDFLAGS\n     if [check_relro_support] {\n-\tset ld_extra_opt \"-z norelro\"\n+\tappend ld_extra_opt \" -z norelro\"\n     }\n \n     foreach testitem $ldtests {"
    }
  ]
}