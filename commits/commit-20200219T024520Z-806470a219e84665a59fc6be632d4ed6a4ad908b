{
  "sha": "806470a219e84665a59fc6be632d4ed6a4ad908b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODA2NDcwYTIxOWU4NDY2NWE1OWZjNmJlNjMyZDRlZDZhNGFkOTA4Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:45:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-19T02:45:20Z"
    },
    "message": "Miscellaneous memory alloc related fixes\n\nSome minor tidies.  Allocating memory for internal relocs and symbols\nafter reading external relocs is slightly better with fuzzed files.\nYou can at least do something about silly sizes that way.\n\n\t* aoutx.h (slurp_reloc_table): Allocate reloc_cache after\n\treading external relocs.\n\t* ecoff.c (ecoff_slurp_reloc_table): Likewise.\n\t* archive.c (_bfd_write_archive_contents): Don't twiddle bfd_error\n\tafter bfd_bread.\n\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Remove unnecessary\n\tbfd_release.\n\t* elf32-m32c.c (m32c_offset_for_reloc): Make shndx_buf a bfd_byte*.\n\t(m32c_elf_relax_section): Likewise.\n\t* elf32-rl78.c (rl78_offset_for_reloc): Likewise.\n\t(rl78_elf_relax_section): Likewise.\n\t* elf32-rx.c (rx_offset_for_reloc): Likewise.\n\t(elf32_rx_relax_section): Likewise.\n\t* mach-o.c (bfd_mach_o_alloc_and_read): Move earlier with better\n\tparameter types and use..\n\t(bfd_mach_o_read_dylinker, bfd_mach_o_read_dylib),\n\t(bfd_mach_o_read_fvmlib, bfd_mach_o_read_str): ..in these functions.\n\t* peicode.h (pe_bfd_object_p): Don't zero the part of opthdr\n\tbeing read from file, just the extra.\n\t* som.c (som_slurp_symbol_table): Allocate internal symbol buffer\n\tafter reading external syms.  Free on failure.",
    "tree": {
      "sha": "2d6c80034712a1dca2ef77c4926caf39a1bce949",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d6c80034712a1dca2ef77c4926caf39a1bce949"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/806470a219e84665a59fc6be632d4ed6a4ad908b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/806470a219e84665a59fc6be632d4ed6a4ad908b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/806470a219e84665a59fc6be632d4ed6a4ad908b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/806470a219e84665a59fc6be632d4ed6a4ad908b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f4361a77b18c5ab32baf2f30fefe5e301e017be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f4361a77b18c5ab32baf2f30fefe5e301e017be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1f4361a77b18c5ab32baf2f30fefe5e301e017be"
    }
  ],
  "stats": {
    "total": 190,
    "additions": 98,
    "deletions": 92
  },
  "files": [
    {
      "sha": "85747ad64f99d1f1391bd9df6f29be41c44f1bc4",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1,3 +1,27 @@\n+2020-02-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* aoutx.h (slurp_reloc_table): Allocate reloc_cache after\n+\treading external relocs.\n+\t* ecoff.c (ecoff_slurp_reloc_table): Likewise.\n+\t* archive.c (_bfd_write_archive_contents): Don't twiddle bfd_error\n+\tafter bfd_bread.\n+\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Remove unnecessary\n+\tbfd_release.\n+\t* elf32-m32c.c (m32c_offset_for_reloc): Make shndx_buf a bfd_byte*.\n+\t(m32c_elf_relax_section): Likewise.\n+\t* elf32-rl78.c (rl78_offset_for_reloc): Likewise.\n+\t(rl78_elf_relax_section): Likewise.\n+\t* elf32-rx.c (rx_offset_for_reloc): Likewise.\n+\t(elf32_rx_relax_section): Likewise.\n+\t* mach-o.c (bfd_mach_o_alloc_and_read): Move earlier with better\n+\tparameter types and use..\n+\t(bfd_mach_o_read_dylinker, bfd_mach_o_read_dylib),\n+\t(bfd_mach_o_read_fvmlib, bfd_mach_o_read_str): ..in these functions.\n+\t* peicode.h (pe_bfd_object_p): Don't zero the part of opthdr\n+\tbeing read from file, just the extra.\n+\t* som.c (som_slurp_symbol_table): Allocate internal symbol buffer\n+\tafter reading external syms.  Free on failure.\n+\n 2020-02-19  Alan Modra  <amodra@gmail.com>\n \n \t* coffcode.h (buy_and_read, coff_slurp_line_table),"
    },
    {
      "sha": "7cc72b4b67741c7c04677721fecfc3ba1c4a1caa",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 8,
      "deletions": 13,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -2316,34 +2316,29 @@ NAME (aout, slurp_reloc_table) (bfd *abfd, sec_ptr asect, asymbol **symbols)\n       return FALSE;\n     }\n \n-  if (reloc_size == 0)\n-    return TRUE;\t\t/* Nothing to be done.  */\n-\n-  if (bfd_seek (abfd, asect->rel_filepos, SEEK_SET) != 0)\n-    return FALSE;\n-\n   each_size = obj_reloc_entry_size (abfd);\n-\n   count = reloc_size / each_size;\n   if (count == 0)\n     return TRUE;\t\t/* Nothing to be done.  */\n \n-  amt = count * sizeof (arelent);\n-  reloc_cache = (arelent *) bfd_zmalloc (amt);\n-  if (reloc_cache == NULL)\n+  if (bfd_seek (abfd, asect->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n \n   relocs = bfd_malloc (reloc_size);\n   if (relocs == NULL)\n+    return FALSE;\n+\n+  if (bfd_bread (relocs, reloc_size, abfd) != reloc_size)\n     {\n-      free (reloc_cache);\n+      free (relocs);\n       return FALSE;\n     }\n \n-  if (bfd_bread (relocs, reloc_size, abfd) != reloc_size)\n+  amt = count * sizeof (arelent);\n+  reloc_cache = (arelent *) bfd_zmalloc (amt);\n+  if (reloc_cache == NULL)\n     {\n       free (relocs);\n-      free (reloc_cache);\n       return FALSE;\n     }\n "
    },
    {
      "sha": "91127d7e6be6468650947d5ff92e5f97236219f6",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -2193,11 +2193,7 @@ _bfd_write_archive_contents (bfd *arch)\n \t    amt = remaining;\n \t  errno = 0;\n \t  if (bfd_bread (buffer, amt, current) != amt)\n-\t    {\n-\t      if (bfd_get_error () != bfd_error_system_call)\n-\t\tbfd_set_error (bfd_error_file_truncated);\n-\t      goto input_err;\n-\t    }\n+\t    goto input_err;\n \t  if (bfd_bwrite (buffer, amt, arch) != amt)\n \t    return FALSE;\n \t  remaining -= amt;"
    },
    {
      "sha": "c693ff9d0b18d052bfaf58244642a7b9428cc902",
      "filename": "bfd/archive64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/archive64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/archive64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive64.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -117,7 +117,7 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n     {\n       if (bfd_get_error () != bfd_error_system_call)\n \tbfd_set_error (bfd_error_malformed_archive);\n-      goto release_raw_armap;\n+      goto release_symdefs;\n     }\n \n   stringend = stringbase + stringsize;\n@@ -142,8 +142,6 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n \n   return TRUE;\n \n-release_raw_armap:\n-  bfd_release (abfd, raw_armap);\n release_symdefs:\n   bfd_release (abfd, ardata->symdefs);\n   return FALSE;"
    },
    {
      "sha": "1d9e385b2b5b0fdac6e5fa26b5c9c80511649a04",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1623,20 +1623,25 @@ ecoff_slurp_reloc_table (bfd *abfd,\n   if (! _bfd_ecoff_slurp_symbol_table (abfd))\n     return FALSE;\n \n-  amt = section->reloc_count;\n-  amt *= sizeof (arelent);\n-  internal_relocs = (arelent *) bfd_alloc (abfd, amt);\n-\n   external_reloc_size = backend->external_reloc_size;\n   amt = external_reloc_size * section->reloc_count;\n   external_relocs = (char *) bfd_alloc (abfd, amt);\n-  if (internal_relocs == NULL || external_relocs == NULL)\n+  if (external_relocs == NULL)\n     return FALSE;\n   if (bfd_seek (abfd, section->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n   if (bfd_bread (external_relocs, amt, abfd) != amt)\n     return FALSE;\n \n+  amt = section->reloc_count;\n+  amt *= sizeof (arelent);\n+  internal_relocs = (arelent *) bfd_alloc (abfd, amt);\n+  if (internal_relocs == NULL)\n+    {\n+      bfd_release (abfd, external_relocs);\n+      return FALSE;\n+    }\n+\n   for (i = 0, rptr = internal_relocs; i < section->reloc_count; i++, rptr++)\n     {\n       struct internal_reloc intern;"
    },
    {
      "sha": "a4dfd8d3d4e5c25d65c5addc115549241bacdabb",
      "filename": "bfd/elf32-m32c.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-m32c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-m32c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32c.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1284,7 +1284,7 @@ static bfd_vma\n m32c_offset_for_reloc (bfd *abfd,\n \t\t       Elf_Internal_Rela *rel,\n \t\t       Elf_Internal_Shdr *symtab_hdr,\n-\t\t       Elf_External_Sym_Shndx *shndx_buf ATTRIBUTE_UNUSED,\n+\t\t       bfd_byte *shndx_buf ATTRIBUTE_UNUSED,\n \t\t       Elf_Internal_Sym *intsyms)\n {\n   bfd_vma symval;\n@@ -1442,7 +1442,7 @@ m32c_elf_relax_section\n   bfd_byte * free_contents = NULL;\n   Elf_Internal_Sym *intsyms = NULL;\n   Elf_Internal_Sym *free_intsyms = NULL;\n-  Elf_External_Sym_Shndx *shndx_buf = NULL;\n+  bfd_byte *shndx_buf = NULL;\n   int machine;\n \n   if (abfd == elf_hash_table (link_info)->dynobj\n@@ -1499,13 +1499,13 @@ m32c_elf_relax_section\n \t  bfd_set_error (bfd_error_file_too_big);\n \t  goto error_return;\n \t}\n-      shndx_buf = (Elf_External_Sym_Shndx *) bfd_malloc (amt);\n+      shndx_buf = bfd_malloc (amt);\n       if (shndx_buf == NULL)\n \tgoto error_return;\n       if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n \t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n \tgoto error_return;\n-      shndx_hdr->contents = (bfd_byte *) shndx_buf;\n+      shndx_hdr->contents = shndx_buf;\n     }\n \n   /* Get a copy of the native relocations.  */"
    },
    {
      "sha": "40f8c5881b1d151e933e058127b2c42951b8439c",
      "filename": "bfd/elf32-rl78.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-rl78.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-rl78.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rl78.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1822,7 +1822,7 @@ static bfd_vma\n rl78_offset_for_reloc (bfd *\t\t\tabfd,\n \t\t       Elf_Internal_Rela *\trel,\n \t\t       Elf_Internal_Shdr *\tsymtab_hdr,\n-\t\t       Elf_External_Sym_Shndx * shndx_buf ATTRIBUTE_UNUSED,\n+\t\t       bfd_byte *\t\tshndx_buf ATTRIBUTE_UNUSED,\n \t\t       Elf_Internal_Sym *\tintsyms,\n \t\t       Elf_Internal_Rela **\tlrel,\n \t\t       bfd *\t\t\tinput_bfd,\n@@ -2068,7 +2068,7 @@ rl78_elf_relax_section\n   bfd_byte *\t      free_contents = NULL;\n   Elf_Internal_Sym *  intsyms = NULL;\n   Elf_Internal_Sym *  free_intsyms = NULL;\n-  Elf_External_Sym_Shndx * shndx_buf = NULL;\n+  bfd_byte *\t      shndx_buf = NULL;\n   bfd_vma pc;\n   bfd_vma symval ATTRIBUTE_UNUSED = 0;\n   int pcrel ATTRIBUTE_UNUSED = 0;\n@@ -2129,13 +2129,13 @@ rl78_elf_relax_section\n \t  bfd_set_error (bfd_error_no_memory);\n \t  goto error_return;\n \t}\n-      shndx_buf = (Elf_External_Sym_Shndx *) bfd_malloc (amt);\n+      shndx_buf = bfd_malloc (amt);\n       if (shndx_buf == NULL)\n \tgoto error_return;\n       if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n \t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n \tgoto error_return;\n-      shndx_hdr->contents = (bfd_byte *) shndx_buf;\n+      shndx_hdr->contents = shndx_buf;\n     }\n \n   /* Get a copy of the native relocations.  */"
    },
    {
      "sha": "0a9900ff21bf37c59aea3fabd2fc0bb8031a8763",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1738,7 +1738,7 @@ static bfd_vma\n rx_offset_for_reloc (bfd *\t\t      abfd,\n \t\t     Elf_Internal_Rela *      rel,\n \t\t     Elf_Internal_Shdr *      symtab_hdr,\n-\t\t     Elf_External_Sym_Shndx * shndx_buf ATTRIBUTE_UNUSED,\n+\t\t     bfd_byte *\t\t      shndx_buf ATTRIBUTE_UNUSED,\n \t\t     Elf_Internal_Sym *\t      intsyms,\n \t\t     Elf_Internal_Rela **     lrel,\n \t\t     bfd *\t\t      input_bfd,\n@@ -2005,7 +2005,7 @@ elf32_rx_relax_section (bfd *\t\t       abfd,\n   bfd_byte *\t      free_contents = NULL;\n   Elf_Internal_Sym *  intsyms = NULL;\n   Elf_Internal_Sym *  free_intsyms = NULL;\n-  Elf_External_Sym_Shndx * shndx_buf = NULL;\n+  bfd_byte *\t      shndx_buf = NULL;\n   bfd_vma pc;\n   bfd_vma sec_start;\n   bfd_vma symval = 0;\n@@ -2066,13 +2066,13 @@ elf32_rx_relax_section (bfd *\t\t       abfd,\n \t  bfd_set_error (bfd_error_file_too_big);\n \t  goto error_return;\n \t}\n-      shndx_buf = (Elf_External_Sym_Shndx *) bfd_malloc (amt);\n+      shndx_buf = bfd_malloc (amt);\n       if (shndx_buf == NULL)\n \tgoto error_return;\n       if (bfd_seek (abfd, shndx_hdr->sh_offset, SEEK_SET) != 0\n \t  || bfd_bread (shndx_buf, amt, abfd) != amt)\n \tgoto error_return;\n-      shndx_hdr->contents = (bfd_byte *) shndx_buf;\n+      shndx_hdr->contents = shndx_buf;\n     }\n \n   /* Get a copy of the native relocations.  */"
    },
    {
      "sha": "fd9f480245c4597c837cde6d8766b06b541f5319",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 26,
      "deletions": 42,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -3997,6 +3997,20 @@ bfd_mach_o_ppc_flavour_string (unsigned int flavour)\n     }\n }\n \n+static unsigned char *\n+bfd_mach_o_alloc_and_read (bfd *abfd, file_ptr filepos, size_t size)\n+{\n+  unsigned char *buf;\n+\n+  buf = bfd_alloc (abfd, size);\n+  if (buf == NULL)\n+    return NULL;\n+  if (bfd_seek (abfd, filepos, SEEK_SET) != 0\n+      || bfd_bread (buf, size, abfd) != size)\n+    return NULL;\n+  return buf;\n+}\n+\n static bfd_boolean\n bfd_mach_o_read_dylinker (bfd *abfd, bfd_mach_o_load_command *command)\n {\n@@ -4017,13 +4031,8 @@ bfd_mach_o_read_dylinker (bfd *abfd, bfd_mach_o_load_command *command)\n   cmd->name_offset = nameoff;\n   namelen = command->len - nameoff;\n   nameoff += command->offset;\n-  cmd->name_str = bfd_alloc (abfd, namelen);\n-  if (cmd->name_str == NULL)\n-    return FALSE;\n-  if (bfd_seek (abfd, nameoff, SEEK_SET) != 0\n-      || bfd_bread (cmd->name_str, namelen, abfd) != namelen)\n-    return FALSE;\n-  return TRUE;\n+  cmd->name_str = (char *) bfd_mach_o_alloc_and_read (abfd, nameoff, namelen);\n+  return cmd->name_str != NULL;\n }\n \n static bfd_boolean\n@@ -4034,6 +4043,7 @@ bfd_mach_o_read_dylib (bfd *abfd, bfd_mach_o_load_command *command)\n   struct mach_o_dylib_command_external raw;\n   unsigned int nameoff;\n   unsigned int namelen;\n+  file_ptr pos;\n \n   if (command->len < sizeof (raw) + 8)\n     return FALSE;\n@@ -4063,13 +4073,9 @@ bfd_mach_o_read_dylib (bfd *abfd, bfd_mach_o_load_command *command)\n \n   cmd->name_offset = command->offset + nameoff;\n   namelen = command->len - nameoff;\n-  cmd->name_str = bfd_alloc (abfd, namelen);\n-  if (cmd->name_str == NULL)\n-    return FALSE;\n-  if (bfd_seek (abfd, mdata->hdr_offset + cmd->name_offset, SEEK_SET) != 0\n-      || bfd_bread (cmd->name_str, namelen, abfd) != namelen)\n-    return FALSE;\n-  return TRUE;\n+  pos = mdata->hdr_offset + cmd->name_offset;\n+  cmd->name_str = (char *) bfd_mach_o_alloc_and_read (abfd, pos, namelen);\n+  return cmd->name_str != NULL;\n }\n \n static bfd_boolean\n@@ -4163,13 +4169,9 @@ bfd_mach_o_read_fvmlib (bfd *abfd, bfd_mach_o_load_command *command)\n \n   fvm->name_offset = command->offset + nameoff;\n   namelen = command->len - nameoff;\n-  fvm->name_str = bfd_alloc (abfd, namelen);\n-  if (fvm->name_str == NULL)\n-    return FALSE;\n-  if (bfd_seek (abfd, fvm->name_offset, SEEK_SET) != 0\n-      || bfd_bread (fvm->name_str, namelen, abfd) != namelen)\n-    return FALSE;\n-  return TRUE;\n+  fvm->name_str = (char *) bfd_mach_o_alloc_and_read (abfd, fvm->name_offset,\n+\t\t\t\t\t\t      namelen);\n+  return fvm->name_str != NULL;\n }\n \n static bfd_boolean\n@@ -4568,27 +4570,9 @@ bfd_mach_o_read_str (bfd *abfd, bfd_mach_o_load_command *command)\n \n   cmd->stroff = command->offset + off;\n   cmd->str_len = command->len - off;\n-  cmd->str = bfd_alloc (abfd, cmd->str_len);\n-  if (cmd->str == NULL)\n-    return FALSE;\n-  if (bfd_seek (abfd, cmd->stroff, SEEK_SET) != 0\n-      || bfd_bread ((void *) cmd->str, cmd->str_len, abfd) != cmd->str_len)\n-    return FALSE;\n-  return TRUE;\n-}\n-\n-static unsigned char *\n-bfd_mach_o_alloc_and_read (bfd *abfd, unsigned int off, unsigned int size)\n-{\n-  unsigned char *buf;\n-\n-  buf = bfd_alloc (abfd, size);\n-  if (buf == NULL)\n-    return NULL;\n-  if (bfd_seek (abfd, off, SEEK_SET) != 0\n-      || bfd_bread (buf, size, abfd) != size)\n-    return NULL;\n-  return buf;\n+  cmd->str = (char *) bfd_mach_o_alloc_and_read (abfd, cmd->stroff,\n+\t\t\t\t\t\t cmd->str_len);\n+  return cmd->str != NULL;\n }\n \n static bfd_boolean"
    },
    {
      "sha": "3f772a0785a43f886a253d5670690ebe36b685d7",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -1408,7 +1408,7 @@ pe_bfd_object_p (bfd * abfd)\n   struct external_PEI_IMAGE_hdr image_hdr;\n   struct internal_filehdr internal_f;\n   struct internal_aouthdr internal_a;\n-  file_ptr opt_hdr_size;\n+  bfd_size_type opt_hdr_size;\n   file_ptr offset;\n   const bfd_target *result;\n \n@@ -1494,12 +1494,14 @@ pe_bfd_object_p (bfd * abfd)\n       if (amt < sizeof (PEAOUTHDR))\n \tamt = sizeof (PEAOUTHDR);\n \n-      opthdr = bfd_zalloc (abfd, amt);\n+      opthdr = bfd_alloc (abfd, amt);\n       if (opthdr == NULL)\n \treturn NULL;\n       if (bfd_bread (opthdr, opt_hdr_size, abfd)\n \t  != (bfd_size_type) opt_hdr_size)\n \treturn NULL;\n+      if (amt > opt_hdr_size)\n+\tmemset (opthdr + opt_hdr_size, 0, amt - opt_hdr_size);\n \n       bfd_set_error (bfd_error_no_error);\n       bfd_coff_swap_aouthdr_in (abfd, opthdr, & internal_a);"
    },
    {
      "sha": "bd685920ba76273085fbf7911f5cc26443731ce8",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/806470a219e84665a59fc6be632d4ed6a4ad908b/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=806470a219e84665a59fc6be632d4ed6a4ad908b",
      "patch": "@@ -4659,7 +4659,7 @@ som_slurp_symbol_table (bfd *abfd)\n   size_t symsize = sizeof (struct som_external_symbol_dictionary_record);\n   char *stringtab;\n   struct som_external_symbol_dictionary_record *buf = NULL, *bufp, *endbufp;\n-  som_symbol_type *sym, *symbase;\n+  som_symbol_type *sym, *symbase = NULL;\n   size_t amt;\n \n   /* Return saved value if it exists.  */\n@@ -4675,15 +4675,6 @@ som_slurp_symbol_table (bfd *abfd)\n \n   stringtab = obj_som_stringtab (abfd);\n \n-  if (_bfd_mul_overflow (symbol_count, sizeof (som_symbol_type), &amt))\n-    {\n-      bfd_set_error (bfd_error_file_too_big);\n-      goto error_return;\n-    }\n-  symbase = bfd_zmalloc (amt);\n-  if (symbase == NULL)\n-    goto error_return;\n-\n   /* Read in the external SOM representation.  */\n   if (_bfd_mul_overflow (symbol_count, symsize, &amt))\n     {\n@@ -4698,6 +4689,15 @@ som_slurp_symbol_table (bfd *abfd)\n   if (bfd_bread (buf, amt, abfd) != amt)\n     goto error_return;\n \n+  if (_bfd_mul_overflow (symbol_count, sizeof (som_symbol_type), &amt))\n+    {\n+      bfd_set_error (bfd_error_file_too_big);\n+      goto error_return;\n+    }\n+  symbase = bfd_zmalloc (amt);\n+  if (symbase == NULL)\n+    goto error_return;\n+\n   /* Iterate over all the symbols and internalize them.  */\n   endbufp = buf + symbol_count;\n   for (bufp = buf, sym = symbase; bufp < endbufp; ++bufp)\n@@ -4837,6 +4837,8 @@ som_slurp_symbol_table (bfd *abfd)\n   return (TRUE);\n \n  error_return:\n+  if (symbase != NULL)\n+    free (symbase);\n   if (buf != NULL)\n     free (buf);\n   return FALSE;"
    }
  ]
}