{
  "sha": "fe56917a86c37fbf4399583f4fa041227594d187",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU1NjkxN2E4NmMzN2ZiZjQzOTk1ODNmNGZhMDQxMjI3NTk0ZDE4Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Add reprocessing flag to struct attribute\n\nSome forms require \"reprocessing\" -- a second pass to update their\nvalue appropriately.  In this case, we'll set the unsigned value on\nthe attribute, and then later set it to the correct value.\n\nTo handle this, we introduce a reprocessing flag to attribute.  Then,\nwe manage this flag to ensure that setting and unsetting is done\nproperly.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_cutu_die_from_dwo): Use OBSTACK_ZALLOC.\n\t(read_attribute_reprocess, read_attribute_value): Update.\n\t(read_attribute): Clear requires_reprocessing.\n\t* dwarf2/attribute.h (struct attribute) <as_unsigned_reprocess,\n\tform_requires_reprocessing>: New methods.\n\t<string_init>: Clear requires_reprocessing.\n\t<set_unsigned_reprocess>: New method.\n\t<name>: Shrink by one bit.\n\t<requires_reprocessing>: New member.\n\t* dwarf2/attribute.c (attribute::form_requires_reprocessing): New\n\tmethod.",
    "tree": {
      "sha": "2e9e30bfc67b8b861c3ce510fddfb8a8eb7859ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e9e30bfc67b8b861c3ce510fddfb8a8eb7859ed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe56917a86c37fbf4399583f4fa041227594d187",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe56917a86c37fbf4399583f4fa041227594d187",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe56917a86c37fbf4399583f4fa041227594d187",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe56917a86c37fbf4399583f4fa041227594d187/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/414ad644a86fab3e5c22f622c5f586ce7a8bcf03",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/414ad644a86fab3e5c22f622c5f586ce7a8bcf03"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 71,
    "deletions": 6
  },
  "files": [
    {
      "sha": "d02fd7d8cdafa1c5731a9071de5f90e21b32ccd9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe56917a86c37fbf4399583f4fa041227594d187/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe56917a86c37fbf4399583f4fa041227594d187/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe56917a86c37fbf4399583f4fa041227594d187",
      "patch": "@@ -1,3 +1,17 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_cutu_die_from_dwo): Use OBSTACK_ZALLOC.\n+\t(read_attribute_reprocess, read_attribute_value): Update.\n+\t(read_attribute): Clear requires_reprocessing.\n+\t* dwarf2/attribute.h (struct attribute) <as_unsigned_reprocess,\n+\tform_requires_reprocessing>: New methods.\n+\t<string_init>: Clear requires_reprocessing.\n+\t<set_unsigned_reprocess>: New method.\n+\t<name>: Shrink by one bit.\n+\t<requires_reprocessing>: New member.\n+\t* dwarf2/attribute.c (attribute::form_requires_reprocessing): New\n+\tmethod.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_attribute_value): Update."
    },
    {
      "sha": "5d9c559194aa20d8afe3efaefdab4a7a52abd461",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=fe56917a86c37fbf4399583f4fa041227594d187",
      "patch": "@@ -182,3 +182,17 @@ attribute::form_is_unsigned () const\n \t  || form == DW_FORM_ref8\n \t  || form == DW_FORM_ref_udata);\n }\n+\n+/* See attribute.h.  */\n+\n+bool\n+attribute::form_requires_reprocessing () const\n+{\n+  return (form == DW_FORM_strx1\n+\t  || form == DW_FORM_strx2\n+\t  || form == DW_FORM_strx3\n+\t  || form == DW_FORM_strx4\n+\t  || form == DW_FORM_GNU_str_index\n+\t  || form == DW_FORM_addrx\n+\t  || form == DW_FORM_GNU_addr_index);\n+}"
    },
    {
      "sha": "b2c824f71f759b9fbc0a82982e8cc482f2e38604",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 36,
      "deletions": 1,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=fe56917a86c37fbf4399583f4fa041227594d187",
      "patch": "@@ -73,6 +73,15 @@ struct attribute\n     return u.snd;\n   }\n \n+  /* Return the unsigned value, but only for attributes requiring\n+     reprocessing.  */\n+  ULONGEST as_unsigned_reprocess () const\n+  {\n+    gdb_assert (form_requires_reprocessing ());\n+    gdb_assert (requires_reprocessing);\n+    return u.unsnd;\n+  }\n+\n   /* Return non-zero if ATTR's value is a section offset --- classes\n      lineptr, loclistptr, macptr or rangelistptr --- or zero, otherwise.\n      You may use DW_UNSND (attr) to retrieve such offsets.\n@@ -127,6 +136,10 @@ struct attribute\n   /* Check if the attribute's form is an unsigned integer form.  */\n   bool form_is_unsigned () const;\n \n+  /* Check if the attribute's form is a form that requires\n+     \"reprocessing\".  */\n+  bool form_requires_reprocessing () const;\n+\n   /* Return DIE offset of this attribute.  Return 0 with complaint if\n      the attribute is not of the required kind.  */\n \n@@ -162,6 +175,7 @@ struct attribute\n     gdb_assert (form_is_string ());\n     u.str = str;\n     string_is_canonical = 0;\n+    requires_reprocessing = 0;\n   }\n \n   /* Set the canonical string value for this attribute.  */\n@@ -200,8 +214,29 @@ struct attribute\n     u.unsnd = unsnd;\n   }\n \n+  /* Temporarily set this attribute to an unsigned integer.  This is\n+     used only for those forms that require reprocessing.  */\n+  void set_unsigned_reprocess (ULONGEST unsnd)\n+  {\n+    gdb_assert (form_requires_reprocessing ());\n+    u.unsnd = unsnd;\n+    requires_reprocessing = 1;\n+  }\n+\n+\n+  ENUM_BITFIELD(dwarf_attribute) name : 15;\n+\n+  /* A boolean that is used for forms that require reprocessing.  A\n+     form may require data not directly available in the attribute.\n+     E.g., DW_FORM_strx requires the corresponding\n+     DW_AT_str_offsets_base.  In this case, the processing for the\n+     attribute must be done in two passes.  In the first past, this\n+     flag is set and the value is an unsigned.  In the second pass,\n+     the unsigned value is turned into the correct value for the form,\n+     and this flag is cleared.  This flag is unused for other\n+     forms.  */\n+  unsigned int requires_reprocessing : 1;\n \n-  ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;\n \n   /* Has u.str already been updated by dwarf2_canonicalize_name?  This"
    },
    {
      "sha": "57b667e1bb7d52d84873eb24f3de965c826ace45",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe56917a86c37fbf4399583f4fa041227594d187/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=fe56917a86c37fbf4399583f4fa041227594d187",
      "patch": "@@ -6869,7 +6869,7 @@ read_cutu_die_from_dwo (dwarf2_cu *cu,\n   else if (stub_comp_dir != NULL)\n     {\n       /* Reconstruct the comp_dir attribute to simplify the code below.  */\n-      comp_dir = XOBNEW (&cu->comp_unit_obstack, struct attribute);\n+      comp_dir = OBSTACK_ZALLOC (&cu->comp_unit_obstack, struct attribute);\n       comp_dir->name = DW_AT_comp_dir;\n       comp_dir->form = DW_FORM_string;\n       comp_dir->set_string_noncanonical (stub_comp_dir);\n@@ -19640,7 +19640,7 @@ read_attribute_reprocess (const struct die_reader_specs *reader,\n     {\n       case DW_FORM_addrx:\n       case DW_FORM_GNU_addr_index:\n-        DW_ADDR (attr) = read_addr_index (cu, DW_UNSND (attr));\n+        DW_ADDR (attr) = read_addr_index (cu, attr->as_unsigned_reprocess ());\n         break;\n       case DW_FORM_loclistx:\n \t DW_UNSND (attr) = read_loclist_index (cu, DW_UNSND (attr));\n@@ -19655,7 +19655,7 @@ read_attribute_reprocess (const struct die_reader_specs *reader,\n       case DW_FORM_strx4:\n       case DW_FORM_GNU_str_index:\n \t{\n-\t  unsigned int str_index = DW_UNSND (attr);\n+\t  unsigned int str_index = attr->as_unsigned_reprocess ();\n \t  gdb_assert (!attr->canonical_string_p ());\n \t  if (reader->dwo_file != NULL)\n \t    attr->set_string_noncanonical (read_dwo_str_index (reader,\n@@ -19879,7 +19879,8 @@ read_attribute_value (const struct die_reader_specs *reader,\n     case DW_FORM_addrx:\n     case DW_FORM_GNU_addr_index:\n       *need_reprocess = true;\n-      DW_UNSND (attr) = read_unsigned_leb128 (abfd, info_ptr, &bytes_read);\n+      attr->set_unsigned_reprocess (read_unsigned_leb128 (abfd, info_ptr,\n+\t\t\t\t\t\t\t  &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_strx:\n@@ -19916,7 +19917,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n \t    info_ptr += bytes_read;\n \t  }\n \t*need_reprocess = true;\n-\t DW_UNSND (attr) = str_index;\n+\tattr->set_unsigned_reprocess (str_index);\n \t}\n       break;\n     default:\n@@ -19957,6 +19958,7 @@ read_attribute (const struct die_reader_specs *reader,\n {\n   attr->name = abbrev->name;\n   attr->string_is_canonical = 0;\n+  attr->requires_reprocessing = 0;\n   return read_attribute_value (reader, attr, abbrev->form,\n \t\t\t       abbrev->implicit_const, info_ptr,\n \t\t\t       need_reprocess);"
    }
  ]
}