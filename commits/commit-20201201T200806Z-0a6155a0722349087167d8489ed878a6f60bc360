{
  "sha": "0a6155a0722349087167d8489ed878a6f60bc360",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGE2MTU1YTA3MjIzNDkwODcxNjdkODQ4OWVkODc4YTZmNjBiYzM2MA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-01T20:07:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-01T20:08:06Z"
    },
    "message": "gdb/testsuite: use foreach_with_prefix in gdb.threads/non-ldr-exc-*.exp\n\nReplace the manual with_test_prefix in the do_test proc with using\nforeach_with_prefix at the top-level.  This helps reduce the indentation\nlevel of the code a bit, and makes the test names in sync with the\nvariable names used in the code.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.threads/non-ldr-exc-1.exp: Use foreach_with_prefix.\n\t(do_test): Don't use with_test_prefix.\n\t* gdb.threads/non-ldr-exc-2.exp: Use foreach_with_prefix.\n\t(do_test): Don't use with_test_prefix.\n\t* gdb.threads/non-ldr-exc-3.exp: Use foreach_with_prefix.\n\t(do_test): Don't use with_test_prefix.\n\t* gdb.threads/non-ldr-exc-4.exp: Use foreach_with_prefix.\n\t(do_test): Don't use with_test_prefix.\n\nChange-Id: I3af1df2eee1a8add427a67b6048bb6dede41cbeb",
    "tree": {
      "sha": "ff693884006c85d31875be33e594ccc7add33ef2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ff693884006c85d31875be33e594ccc7add33ef2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0a6155a0722349087167d8489ed878a6f60bc360",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a6155a0722349087167d8489ed878a6f60bc360",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0a6155a0722349087167d8489ed878a6f60bc360",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a6155a0722349087167d8489ed878a6f60bc360/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "539d71e89a21990d9fd15641477e4790129bdb11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/539d71e89a21990d9fd15641477e4790129bdb11",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/539d71e89a21990d9fd15641477e4790129bdb11"
    }
  ],
  "stats": {
    "total": 261,
    "additions": 134,
    "deletions": 127
  },
  "files": [
    {
      "sha": "d3f0f885b2d61852a3f75e76ce9cb0a1b7150660",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0a6155a0722349087167d8489ed878a6f60bc360",
      "patch": "@@ -1,3 +1,14 @@\n+2020-12-01  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb.threads/non-ldr-exc-1.exp: Use foreach_with_prefix.\n+\t(do_test): Don't use with_test_prefix.\n+\t* gdb.threads/non-ldr-exc-2.exp: Use foreach_with_prefix.\n+\t(do_test): Don't use with_test_prefix.\n+\t* gdb.threads/non-ldr-exc-3.exp: Use foreach_with_prefix.\n+\t(do_test): Don't use with_test_prefix.\n+\t* gdb.threads/non-ldr-exc-4.exp: Use foreach_with_prefix.\n+\t(do_test): Don't use with_test_prefix.\n+\n 2020-12-01  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.threads/non-ldr-exit.exp: Fix comment."
    },
    {
      "sha": "78280e5bd2b7dcd918b8d8b11470414528eb9d8f",
      "filename": "gdb/testsuite/gdb.threads/non-ldr-exc-1.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 31,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-1.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-1.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/non-ldr-exc-1.exp?ref=0a6155a0722349087167d8489ed878a6f60bc360",
      "patch": "@@ -24,44 +24,43 @@ if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executab\n }\n \n proc do_test { lock_sched nonstop } {\n-    with_test_prefix \"lock-sched=$lock_sched,non-stop=$nonstop\" {\n-\tglobal executable\n+    global executable\n \n-\tsave_vars { GDBFLAGS } {\n-\t  append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n-\t  clean_restart ${executable}\n-\t}\n-\n-\tif ![runto_main] {\n-\t    return -1\n-\t}\n+    save_vars { GDBFLAGS } {\n+      append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n+      clean_restart ${executable}\n+    }\n \n-\tgdb_breakpoint [gdb_get_line_number \"break-here\"]\n-\tgdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n+    if ![runto_main] {\n+\treturn -1\n+    }\n \n-\t# Also test with sched-lock to make sure we can follow the\n-\t# non-leader thread execing even though the main thread wasn't\n-\t# resumed before the exec.\n-\tif { $lock_sched } {\n-\t    gdb_test_no_output \"set scheduler-locking on\"\n-\t}\n+    gdb_breakpoint [gdb_get_line_number \"break-here\"]\n+    gdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n \n-\tif { $nonstop == \"on\" } {\n-\t    gdb_test \"thread 2\" \"Switching.*\"\n-\t}\n+    # Also test with sched-lock to make sure we can follow the\n+    # non-leader thread execing even though the main thread wasn't\n+    # resumed before the exec.\n+    if { $lock_sched } {\n+\tgdb_test_no_output \"set scheduler-locking on\"\n+    }\n \n-\tgdb_test \"continue\" \\\n-\t    \".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n-\t    \"continue over exec\"\n+    if { $nonstop == \"on\" } {\n+\tgdb_test \"thread 2\" \"Switching.*\"\n     }\n+\n+    gdb_test \"continue\" \\\n+\t\".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n+\t\"continue over exec\"\n }\n \n-foreach nonstop {\"on\" \"off\"} {\n-  foreach schedlock {\"on\" \"off\"} {\n-    if {$schedlock == \"on\" && $nonstop == \"on\"} {\n-      # Schedule locking has no effect in nonstop mode.\n-      continue\n+foreach_with_prefix nonstop {\"on\" \"off\"} {\n+    foreach_with_prefix schedlock {\"on\" \"off\"} {\n+\tif {$schedlock == \"on\" && $nonstop == \"on\"} {\n+\t  # Schedule locking has no effect in nonstop mode.\n+\t  continue\n+\t}\n+\n+\tdo_test $schedlock $nonstop\n     }\n-    do_test $schedlock $nonstop\n-  }\n }"
    },
    {
      "sha": "194c1510290589c3a699a5ab1630d90b0a9ad23b",
      "filename": "gdb/testsuite/gdb.threads/non-ldr-exc-2.exp",
      "status": "modified",
      "additions": 33,
      "deletions": 34,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/non-ldr-exc-2.exp?ref=0a6155a0722349087167d8489ed878a6f60bc360",
      "patch": "@@ -25,48 +25,47 @@ if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executab\n }\n \n proc do_test { lock_sched nonstop } {\n-    with_test_prefix \"lock-sched=$lock_sched,non-stop=$nonstop\" {\n-\tglobal executable\n+    global executable\n \n-\tsave_vars { GDBFLAGS } {\n-\t  append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n-\t  clean_restart ${executable}\n-\t}\n-\n-\tif ![runto_main] {\n-\t    return -1\n-\t}\n+    save_vars { GDBFLAGS } {\n+      append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n+      clean_restart ${executable}\n+    }\n \n-\tgdb_breakpoint [gdb_get_line_number \"break-here\"]\n-\tgdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n+    if ![runto_main] {\n+\treturn -1\n+    }\n \n-\tif { $nonstop == \"on\" } {\n-\t    gdb_test \"thread 2\" \"Switching.*\"\n-\t}\n+    gdb_breakpoint [gdb_get_line_number \"break-here\"]\n+    gdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n \n-\tgdb_test \"info threads\" \\\n-\t    \"\\r\\n\\[ \\t\\]*Id\\[ \\t\\]+Target\\[ \\t\\]+Id\\[ \\t\\]+Frame\\[ \\t\\]*\\r\\n\\\\* 2 *Thread \\[^\\r\\n\\]* at \\[^\\r\\n\\]*\" \\\n-\t    \"single thread left\"\n+    if { $nonstop == \"on\" } {\n+\tgdb_test \"thread 2\" \"Switching.*\"\n+    }\n \n-\t# Also test with sched-lock to make sure we can follow the\n-\t# non-leader thread execing even though the main thread wasn't\n-\t# resumed before the exec.\n-\tif { $lock_sched } {\n-\t    gdb_test_no_output \"set scheduler-locking on\"\n-\t}\n+    gdb_test \"info threads\" \\\n+\t\"\\r\\n\\[ \\t\\]*Id\\[ \\t\\]+Target\\[ \\t\\]+Id\\[ \\t\\]+Frame\\[ \\t\\]*\\r\\n\\\\* 2 *Thread \\[^\\r\\n\\]* at \\[^\\r\\n\\]*\" \\\n+\t\"single thread left\"\n \n-\tgdb_test \"continue\" \\\n-\t    \".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n-\t    \"continue over exec\"\n+    # Also test with sched-lock to make sure we can follow the\n+    # non-leader thread execing even though the main thread wasn't\n+    # resumed before the exec.\n+    if { $lock_sched } {\n+\tgdb_test_no_output \"set scheduler-locking on\"\n     }\n+\n+    gdb_test \"continue\" \\\n+\t\".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n+\t\"continue over exec\"\n }\n \n-foreach nonstop {\"on\" \"off\"} {\n-  foreach schedlock {\"on\" \"off\"} {\n-    if {$schedlock == \"on\" && $nonstop == \"on\"} {\n-      # Schedule locking has no effect in nonstop mode.\n-      continue\n+foreach_with_prefix nonstop {\"on\" \"off\"} {\n+    foreach_with_prefix schedlock {\"on\" \"off\"} {\n+\tif {$schedlock == \"on\" && $nonstop == \"on\"} {\n+\t    # Schedule locking has no effect in nonstop mode.\n+\t    continue\n+\t}\n+\n+\tdo_test $schedlock $nonstop\n     }\n-    do_test $schedlock $nonstop\n-  }\n }"
    },
    {
      "sha": "50350e9f6d826d36c2edabe80d3d73abb156b732",
      "filename": "gdb/testsuite/gdb.threads/non-ldr-exc-3.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 31,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-3.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-3.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/non-ldr-exc-3.exp?ref=0a6155a0722349087167d8489ed878a6f60bc360",
      "patch": "@@ -27,44 +27,43 @@ if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executab\n }\n \n proc do_test { lock_sched nonstop } {\n-    with_test_prefix \"lock-sched=$lock_sched,non-stop=$nonstop\" {\n-\tglobal executable\n+    global executable\n \n-\tsave_vars { GDBFLAGS } {\n-\t  append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n-\t  clean_restart ${executable}\n-\t}\n-\n-\tif ![runto_main] {\n-\t    return -1\n-\t}\n+    save_vars { GDBFLAGS } {\n+      append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n+      clean_restart ${executable}\n+    }\n \n-\tgdb_breakpoint [gdb_get_line_number \"break-here\"]\n-\tgdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n+    if ![runto_main] {\n+\treturn -1\n+    }\n \n-\t# Also test with sched-lock to make sure we can follow the\n-\t# non-leader thread execing even though the main thread wasn't\n-\t# resumed before the exec.\n-\tif { $lock_sched } {\n-\t    gdb_test_no_output \"set scheduler-locking on\"\n-\t}\n+    gdb_breakpoint [gdb_get_line_number \"break-here\"]\n+    gdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n \n-\tif { $nonstop == \"on\" } {\n-\t    gdb_test \"thread 2\" \"Switching.*\"\n-\t}\n+    # Also test with sched-lock to make sure we can follow the\n+    # non-leader thread execing even though the main thread wasn't\n+    # resumed before the exec.\n+    if { $lock_sched } {\n+\tgdb_test_no_output \"set scheduler-locking on\"\n+    }\n \n-\tgdb_test \"continue\" \\\n-\t    \".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n-\t    \"continue over exec\"\n+    if { $nonstop == \"on\" } {\n+\tgdb_test \"thread 2\" \"Switching.*\"\n     }\n+\n+    gdb_test \"continue\" \\\n+\t\".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n+\t\"continue over exec\"\n }\n \n-foreach nonstop {\"on\" \"off\"} {\n-  foreach schedlock {\"on\" \"off\"} {\n-    if {$schedlock == \"on\" && $nonstop == \"on\"} {\n-      # Schedule locking has no effect in nonstop mode.\n-      continue\n+foreach_with_prefix nonstop {\"on\" \"off\"} {\n+    foreach_with_prefix schedlock {\"on\" \"off\"} {\n+\tif {$schedlock == \"on\" && $nonstop == \"on\"} {\n+\t    # Schedule locking has no effect in nonstop mode.\n+\t    continue\n+\t}\n+\n+\tdo_test $schedlock $nonstop\n     }\n-    do_test $schedlock $nonstop\n-  }\n }"
    },
    {
      "sha": "0838eace415635490474aea3067167e4dfe1e036",
      "filename": "gdb/testsuite/gdb.threads/non-ldr-exc-4.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 31,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-4.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6155a0722349087167d8489ed878a6f60bc360/gdb/testsuite/gdb.threads/non-ldr-exc-4.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/non-ldr-exc-4.exp?ref=0a6155a0722349087167d8489ed878a6f60bc360",
      "patch": "@@ -26,44 +26,43 @@ if {[gdb_compile_pthreads \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executab\n }\n \n proc do_test { lock_sched nonstop } {\n-    with_test_prefix \"lock-sched=$lock_sched,non-stop=$nonstop\" {\n-\tglobal executable\n+    global executable\n \n-\tsave_vars { GDBFLAGS } {\n-\t  append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n-\t  clean_restart ${executable}\n-\t}\n-\n-\tif ![runto_main] {\n-\t    return -1\n-\t}\n+    save_vars { GDBFLAGS } {\n+      append GDBFLAGS \" -ex \\\"set non-stop $nonstop\\\"\"\n+      clean_restart ${executable}\n+    }\n \n-\tgdb_breakpoint [gdb_get_line_number \"break-here\"]\n-\tgdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n+    if ![runto_main] {\n+\treturn -1\n+    }\n \n-\t# Also test with sched-lock to make sure we can follow the\n-\t# non-leader thread execing even though the main thread wasn't\n-\t# resumed before the exec.\n-\tif { $lock_sched } {\n-\t    gdb_test_no_output \"set scheduler-locking on\"\n-\t}\n+    gdb_breakpoint [gdb_get_line_number \"break-here\"]\n+    gdb_continue_to_breakpoint \"break-here\" \".* break-here .*\"\n \n-\tif { $nonstop == \"on\" } {\n-\t    gdb_test \"thread 2\" \"Switching.*\"\n-\t}\n+    # Also test with sched-lock to make sure we can follow the\n+    # non-leader thread execing even though the main thread wasn't\n+    # resumed before the exec.\n+    if { $lock_sched } {\n+\tgdb_test_no_output \"set scheduler-locking on\"\n+    }\n \n-\tgdb_test \"continue\" \\\n-\t    \".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n-\t    \"continue over exec\"\n+    if { $nonstop == \"on\" } {\n+\tgdb_test \"thread 2\" \"Switching.*\"\n     }\n+\n+    gdb_test \"continue\" \\\n+\t\".*is executing new program.*Breakpoint 1, main.* at .*\" \\\n+\t\"continue over exec\"\n }\n \n-foreach nonstop {\"on\" \"off\"} {\n-  foreach schedlock {\"on\" \"off\"} {\n-    if {$schedlock == \"on\" && $nonstop == \"on\"} {\n-      # Schedule locking has no effect in nonstop mode.\n-      continue\n+foreach_with_prefix nonstop {\"on\" \"off\"} {\n+    foreach_with_prefix schedlock {\"on\" \"off\"} {\n+\tif {$schedlock == \"on\" && $nonstop == \"on\"} {\n+\t    # Schedule locking has no effect in nonstop mode.\n+\t    continue\n+\t}\n+\n+\tdo_test $schedlock $nonstop\n     }\n-    do_test $schedlock $nonstop\n-  }\n }"
    }
  ]
}