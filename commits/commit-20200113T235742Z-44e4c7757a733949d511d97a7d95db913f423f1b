{
  "sha": "44e4c7757a733949d511d97a7d95db913f423f1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDRlNGM3NzU3YTczMzk0OWQ1MTFkOTdhN2Q5NWRiOTEzZjQyM2YxYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-06T23:12:29Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-13T23:57:42Z"
    },
    "message": "gdb: Handle malformed ELF, symbols in non-allocatable sections\n\nI ended up debugging a malformed ELF where a section containing\nexecutable code was not correctly marked as allocatable.  Before\nrealising the ELF was corrupted I tried to place a breakpoint on a\nsymbol in the non-allocatable, executable section, and GDB crashed.\n\nThough trying to debug such an ELF clearly isn't going to go well I\nwould prefer, as far as possible, that any input, no matter how\ncorrupted, not crash GDB.\n\nThe crash occurs when trying to set a breakpoint on the name of a\nfunction from the corrupted section.  GDB converts the symbol to a\nsymtab_and_line, and looks up a suitable section for this.\n\nThe problem is that the section is actually an obj_section, which is\nstored in the table within the objfile, and we only initialise this\ntable for allocatable sections (see add_to_objfile_sections_full in\nobjfiles.c).  So, if the symbol is in a non-allocatable section then\nwe end up referencing an uninitialised obj_section.\n\nLater we call get_sal_arch on the symtab_and_line, which calls\nget_objfile_arch, which uses the objfile from the uninitialised\nobj_section, which will be nullptr, at which point GDB crashes.\n\nThe fix I propose here is that when we setup the section references on\nmsymbols, we should check if the bfd_section being referenced is\nallocatable or not.  If it is not then we should set the section\nreference back to the default 0 section (see how MSYMBOL_OBJ_SECTION\nand SYMBOL_OBJ_SECTION treat the 0 section index).\n\nWith this fix in place GDB no longer crashes.  Instead GDB creates the\nbreakpoint at the non-allocated address, and then fails, with an\nerror, when it tries to insert the breakpoint.\n\ngdb/ChangeLog:\n\n\t* elfread.c (record_minimal_symbol): Set section index to 0 for\n\tnon-allocatable sections.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-bad-elf-other.S: New file.\n\t* gdb.dwarf2/dw2-bad-elf.c: New file.\n\t* gdb.dwarf2/dw2-bad-elf.exp: New file.\n\nChange-Id: Ie05436ab4c6a71440304d20ee639dfb021223f8b",
    "tree": {
      "sha": "d56563338f8435b7173b4675f6bf1075f78acd41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d56563338f8435b7173b4675f6bf1075f78acd41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/44e4c7757a733949d511d97a7d95db913f423f1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44e4c7757a733949d511d97a7d95db913f423f1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/44e4c7757a733949d511d97a7d95db913f423f1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44e4c7757a733949d511d97a7d95db913f423f1b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d93c6db74b7a9d6154f55f92d96f38819838bc99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d93c6db74b7a9d6154f55f92d96f38819838bc99",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d93c6db74b7a9d6154f55f92d96f38819838bc99"
    }
  ],
  "stats": {
    "total": 257,
    "additions": 253,
    "deletions": 4
  },
  "files": [
    {
      "sha": "fc4920ee6435cbf25eed456f03e248847a48fad9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* elfread.c (record_minimal_symbol): Set section index to 0 for\n+\tnon-allocatable sections.\n+\n \n 2020-01-13  Ali Tamur <tamur@google.com>\n "
    },
    {
      "sha": "453bca527e9b219aadab714c3faeff8cdcb121d9",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -210,11 +210,16 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n       || ms_type == mst_text_gnu_ifunc)\n     address = gdbarch_addr_bits_remove (gdbarch, address);\n \n+  /* We only setup section information for allocatable sections.  Usually\n+     we'd only expect to find msymbols for allocatable sections, but if the\n+     ELF is malformed then this might not be the case.  In that case don't\n+     create an msymbol that references an uninitialised section object.  */\n+  int section_index = 0;\n+  if ((bfd_section_flags (bfd_section) & SEC_ALLOC) == SEC_ALLOC)\n+    section_index = gdb_bfd_section_index (objfile->obfd, bfd_section);\n+\n   struct minimal_symbol *result\n-    = reader.record_full (name, copy_name, address,\n-\t\t\t  ms_type,\n-\t\t\t  gdb_bfd_section_index (objfile->obfd,\n-\t\t\t\t\t\t bfd_section));\n+    = reader.record_full (name, copy_name, address, ms_type, section_index);\n   if ((objfile->flags & OBJF_MAINLINE) == 0\n       && (ms_type == mst_data || ms_type == mst_bss))\n     result->maybe_copied = 1;"
    },
    {
      "sha": "6491d4d44b6d5bb03f30d3ec4882de2bb6bf6364",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-bad-elf-other.S: New file.\n+\t* gdb.dwarf2/dw2-bad-elf.c: New file.\n+\t* gdb.dwarf2/dw2-bad-elf.exp: New file.\n+\n 2020-01-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* lib/dwarf.exp (Dwarf::lines): Reset _line_saw_program and"
    },
    {
      "sha": "197c13deb5d67efed9233ea7b0db98189006159e",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-bad-elf-other.S",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf-other.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf-other.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-bad-elf-other.S?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -0,0 +1,29 @@\n+/* Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+\t.section \".other\", \"x\"\n+\t.global some_func, some_func_end\n+\t.type   some_func, @function\n+\tnop\n+\tnop\n+\tnop\n+\tnop\n+some_func:\n+\t.rept 64\n+\t.byte 0\n+\t.endr\n+\t.size some_func,.-some_func\n+some_func_end:\n+\tnop"
    },
    {
      "sha": "8e6193ee59742e8aa587b0e2b76eebf84f981b6e",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-bad-elf.c",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.c?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -0,0 +1,21 @@\n+/* Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main ()\n+{\n+  asm (\"main_label: .globl main_label\");\n+  return 0;\n+}"
    },
    {
      "sha": "f6fe54a634f508cc1235a240d31c15e2c4d3914c",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "status": "added",
      "additions": 183,
      "deletions": 0,
      "changes": 183,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44e4c7757a733949d511d97a7d95db913f423f1b/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-bad-elf.exp?ref=44e4c7757a733949d511d97a7d95db913f423f1b",
      "patch": "@@ -0,0 +1,183 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Checks for a bug where a baddly formed ELF would cause GDB to crash.\n+# A section containing executable code, for which there was DWARF is\n+# accidentally marked as non-alloctable, GDB becomes unhappy.\n+#\n+# This test creates some fake DWARF pointing at some symbols in a\n+# non-allocatable section that is still marked as executable.  We then\n+# start GDB and try to place a breakpoint on the symbol in the\n+# non-allocatable section.\n+#\n+# It is not expected that the final debug experience really makes\n+# sense, the symbol is in a non-allocatable section after all, but GDB\n+# absolutely shouldn't crash.  All we try to do after placing the\n+# breakpoint is check that GDB is still alive.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile dw2-bad-elf.c dw2-bad-elf-other.S dw2-bad-elf-dwarf.S\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile3]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+\n+    declare_labels ranges_label_1 ranges_label_2 L1 L2\n+\n+    set main_result [function_range main ${srcdir}/${subdir}/${srcfile}]\n+    set main_start [lindex $main_result 0]\n+    set main_length [lindex $main_result 1]\n+\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_language @DW_LANG_C}\n+\t    {DW_AT_name     dw2-bad-elf.c}\n+\t    {DW_AT_comp_dir ${srcdir}/${subdir}}\n+\t    {stmt_list $L1 DW_FORM_sec_offset}\n+\t    {ranges ${ranges_label_1} DW_FORM_sec_offset}\n+\t    {DW_AT_low_pc   0 addr}\n+\t} {\n+\t    declare_labels integer_label\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc $main_length data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 10 data1}\n+\t    }\n+\n+\t    integer_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size $int_size DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_language @DW_LANG_C}\n+\t    {DW_AT_name     dw2-bad-elf-other.c}\n+\t    {DW_AT_comp_dir ${srcdir}/${subdir}}\n+\t    {stmt_list $L2 DW_FORM_sec_offset}\n+\t    {ranges ${ranges_label_2} DW_FORM_sec_offset}\n+\t    {DW_AT_low_pc   0 addr}\n+\t} {\n+\t    declare_labels integer_label\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name some_func}\n+\t\t{low_pc some_func addr}\n+\t\t{high_pc some_func_end addr}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 2 data1}\n+\t\t{DW_AT_decl_line 5 data1}\n+\t    }\n+\n+\t    integer_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size $int_size DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\t}\n+    }\n+\n+    ranges {is_64 [is_64_target]} {\n+\tranges_label_1: sequence {\n+\t    {base [lindex $main_result 0]}\n+\t    {range 0 [lindex $main_result 1]}\n+\t}\n+\tranges_label_2: sequence {\n+\t    {base some_func}\n+\t    {range 0 64}\n+\t}\n+    }\n+\n+    lines {version 2} L1 {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\t# Line data doens't need to be correct, just present.\n+\tprogram {\n+\t    {DW_LNE_set_address [lindex $main_result 0]}\n+\t    {DW_LNS_advance_line 10}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNS_advance_pc [lindex $main_result 1]}\n+\t    {DW_LNS_advance_line 19}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+\n+    lines {version 2} L2 {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"dw2-bad-elf-other.c\" 1\n+\n+\t# Line data doens't need to be correct, just present.\n+\tprogram {\n+\t    {DW_LNE_set_address some_func}\n+\t    {DW_LNS_advance_line 5}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNS_advance_pc 64}\n+\t    {DW_LNS_advance_line 8}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+}\n+\n+if { [build_executable ${testfile}.exp ${testfile} \\\n+\t  [list $srcfile $srcfile2 $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+# Attempt to place a breakpoint on 'some_func', then check GDB is\n+# still alive.  This test can optionally set a breakpoint on 'main'\n+# first (based on GOTO_MAIN), the original bug behaved differently\n+# when there was already a breakpoint set.\n+proc run_test { goto_main } {\n+    global binfile decimal hex\n+\n+    clean_restart ${binfile}\n+\n+    if { $goto_main } {\n+\tif ![runto_main] {\n+\t    return -1\n+\t}\n+    }\n+\n+    # Place a breakpoint.\n+    gdb_test \"break some_func\" \\\n+\t\"Breakpoint $decimal at $hex: file .*dw2-bad-elf-other\\\\.c, line 6\\\\.\"\n+\n+    # Check GDB is still alive.\n+    gdb_test \"echo hello\\\\n\" \"hello\"\n+}\n+\n+# Run the tests.\n+foreach_with_prefix goto_main { 0 1 } {\n+    run_test $goto_main\n+}"
    }
  ]
}