{
  "sha": "6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmVkYmZkM2JlYjE1MTA1ZGZlNWM1OWVlM2IyMmUzZGFlZmFlYTUwOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-11T00:07:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-11T11:38:37Z"
    },
    "message": "Power10 SIMD permute class operations\n\nopcodes/\n\t* ppc-opc.c (insert_imm32, extract_imm32): New functions.\n\t(insert_xts, extract_xts): New functions.\n\t(IMM32, UIM3, IX, UIM5, SH3, XTS, P8RR): Define.\n\t(P_XX4_MASK, P_UXX4_MASK, VSOP, P_VS_MASK, P_VSI_MASK): Define.\n\t(VXRC_MASK, VXSH_MASK): Define.\n\t(powerpc_opcodes): Add vinsbvlx, vsldbi, vextdubvlx, vextdubvrx,\n\tvextduhvlx, vextduhvrx, vextduwvlx, vextduwvrx, vextddvlx,\n\tvextddvrx, vinshvlx, vinswvlx, vinsw, vinsbvrx, vinshvrx,\n\tvinswvrx, vinsd, vinsblx, vsrdbi, vinshlx, vinswlx, vinsdlx,\n\tvinsbrx, vinshrx, vinswrx, vinsdrx, lxvkq.\n\t(prefix_opcodes): Add xxsplti32dx, xxspltidp, xxspltiw, xxblendvb,\n\txxblendvh, xxblendvw, xxblendvd, xxpermx.\ngas/\n\t* testsuite/gas/ppc/simd_perm.d,\n\t* testsuite/gas/ppc/simd_perm.s: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.",
    "tree": {
      "sha": "f4fef2fba175ebfec254ee0e771062cbb17a12c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f4fef2fba175ebfec254ee0e771062cbb17a12c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c7d7aea2f5fadff84eee78aaa0b1830016d26319",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7d7aea2f5fadff84eee78aaa0b1830016d26319",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c7d7aea2f5fadff84eee78aaa0b1830016d26319"
    }
  ],
  "stats": {
    "total": 229,
    "additions": 226,
    "deletions": 3
  },
  "files": [
    {
      "sha": "3a81d8474ecf5311c0d91aa6b916044c930a5c15",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/gas/ppc/simd_perm.d,\n+\t* testsuite/gas/ppc/simd_perm.s: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/ppc/int128.d,"
    },
    {
      "sha": "afa53f38da022a8f857802135e517048cb7c21cd",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -135,3 +135,4 @@ run_dump_test \"byte_rev\"\n run_dump_test \"vec_mul\"\n run_dump_test \"vsx_32byte\"\n run_dump_test \"int128\"\n+run_dump_test \"simd_perm\""
    },
    {
      "sha": "62f9f8d5b725c460bd24d04e293071a781d28c57",
      "filename": "gas/testsuite/gas/ppc/simd_perm.d",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/simd_perm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/simd_perm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/simd_perm.d?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -0,0 +1,53 @@\n+#as: -mpower10\n+#objdump: -dr -Mpower10\n+#name: SIMD permute\n+\n+.*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+0 <_start>:\n+.*:\t(10 01 10 d8|d8 10 01 10) \tvextdubvlx v0,v1,v2,r3\n+.*:\t(10 85 31 d9|d9 31 85 10) \tvextdubvrx v4,v5,v6,r7\n+.*:\t(11 09 52 da|da 52 09 11) \tvextduhvlx v8,v9,v10,r11\n+.*:\t(11 8d 73 db|db 73 8d 11) \tvextduhvrx v12,v13,v14,r15\n+.*:\t(12 11 94 dc|dc 94 11 12) \tvextduwvlx v16,v17,v18,r19\n+.*:\t(12 95 b5 dd|dd b5 95 12) \tvextduwvrx v20,v21,v22,r23\n+.*:\t(13 19 d6 de|de d6 19 13) \tvextddvlx v24,v25,v26,r27\n+.*:\t(13 9d f7 df|df f7 9d 13) \tvextddvrx v28,v29,v30,r31\n+.*:\t(10 01 12 0f|0f 12 01 10) \tvinsblx v0,r1,r2\n+.*:\t(10 64 2b 0f|0f 2b 64 10) \tvinsbrx v3,r4,r5\n+.*:\t(10 c7 42 4f|4f 42 c7 10) \tvinshlx v6,r7,r8\n+.*:\t(11 2a 5b 4f|4f 5b 2a 11) \tvinshrx v9,r10,r11\n+.*:\t(11 8d 72 8f|8f 72 8d 11) \tvinswlx v12,r13,r14\n+.*:\t(11 f0 8b 8f|8f 8b f0 11) \tvinswrx v15,r16,r17\n+.*:\t(12 53 a2 cf|cf a2 53 12) \tvinsdlx v18,r19,r20\n+.*:\t(12 b6 bb cf|cf bb b6 12) \tvinsdrx v21,r22,r23\n+.*:\t(13 19 d0 0f|0f d0 19 13) \tvinsbvlx v24,r25,v26\n+.*:\t(13 7c e9 0f|0f e9 7c 13) \tvinsbvrx v27,r28,v29\n+.*:\t(13 df 00 4f|4f 00 df 13) \tvinshvlx v30,r31,v0\n+.*:\t(10 22 19 4f|4f 19 22 10) \tvinshvrx v1,r2,v3\n+.*:\t(10 85 30 8f|8f 30 85 10) \tvinswvlx v4,r5,v6\n+.*:\t(10 e8 49 8f|8f 49 e8 10) \tvinswvrx v7,r8,v9\n+.*:\t(11 4c 58 cf|cf 58 4c 11) \tvinsw   v10,r11,12\n+.*:\t(11 a3 71 cf|cf 71 a3 11) \tvinsd   v13,r14,3\n+.*:\t(11 f0 89 56|56 89 f0 11) \tvsldbi  v15,v16,v17,5\n+.*:\t(12 53 a3 d6|d6 a3 53 12) \tvsrdbi  v18,v19,v20,7\n+.*:\t(05 00 01 23|23 01 00 05) \txxspltiw vs63,19088743\n+.*:\t(83 e7 45 67|67 45 e7 83) \n+.*:\t(05 00 89 ab|ab 89 00 05) \txxsplti32dx vs62,1,2309737967\n+.*:\t(83 c3 cd ef|ef cd c3 83) \n+.*:\t(05 00 01 23|23 01 00 05) \txxspltidp vs61,19088743\n+.*:\t(83 a5 45 67|67 45 a5 83) \n+.*:\t(f3 9f c2 d1|d1 c2 9f f3) \tlxvkq   vs60,24\n+.*:\t(05 00 00 00|00 00 00 05) \txxblendvb vs59,vs58,vs57,vs56\n+.*:\t(87 7a ce 0f|0f ce 7a 87) \n+.*:\t(05 00 00 00|00 00 00 05) \txxblendvh vs55,vs54,vs53,vs52\n+.*:\t(86 f6 ad 1f|1f ad f6 86) \n+.*:\t(05 00 00 00|00 00 00 05) \txxblendvw vs51,vs50,vs49,vs48\n+.*:\t(86 72 8c 2f|2f 8c 72 86) \n+.*:\t(05 00 00 00|00 00 00 05) \txxblendvd vs47,vs46,vs45,vs44\n+.*:\t(85 ee 6b 3f|3f 6b ee 85) \n+.*:\t(05 00 00 07|07 00 00 05) \txxpermx vs43,vs42,vs41,vs40,7\n+.*:\t(89 6a 4a 0f|0f 4a 6a 89) "
    },
    {
      "sha": "c9b3986f6756fffc9b153c7cffd4ecc35c91913d",
      "filename": "gas/testsuite/gas/ppc/simd_perm.s",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/simd_perm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/gas/testsuite/gas/ppc/simd_perm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/simd_perm.s?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -0,0 +1,37 @@\n+\t.text\n+_start:\n+\tvextdubvlx 0,1,2,3\n+\tvextdubvrx 4,5,6,7\n+\tvextduhvlx 8,9,10,11\n+\tvextduhvrx 12,13,14,15\n+\tvextduwvlx 16,17,18,19\n+\tvextduwvrx 20,21,22,23\n+\tvextddvlx 24,25,26,27\n+\tvextddvrx 28,29,30,31\n+\tvinsblx 0,1,2\n+\tvinsbrx 3,4,5\n+\tvinshlx\t6,7,8\n+\tvinshrx\t9,10,11\n+\tvinswlx 12,13,14\n+\tvinswrx 15,16,17\n+\tvinsdlx 18,19,20\n+\tvinsdrx 21,22,23\n+\tvinsbvlx 24,25,26\n+\tvinsbvrx 27,28,29\n+\tvinshvlx 30,31,0\n+\tvinshvrx 1,2,3\n+\tvinswvlx 4,5,6\n+\tvinswvrx 7,8,9\n+\tvinsw\t10,11,12\n+\tvinsd\t13,14,3\n+\tvsldbi\t15,16,17,5\n+\tvsrdbi\t18,19,20,7\n+\txxspltiw 63,0x01234567\n+\txxsplti32dx 62,1,0x89abcdef\n+\txxspltidp 61,0x01234567\n+\tlxvkq\t60,24\n+\txxblendvb 59,58,57,56\n+\txxblendvh 55,54,53,52\n+\txxblendvw 51,50,49,48\n+\txxblendvd 47,46,45,44\n+\txxpermx\t43,42,41,40,7"
    },
    {
      "sha": "12281d5a7b810c9ce702b3b3b5d917c3d456a6b6",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -1,3 +1,18 @@\n+2020-05-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* ppc-opc.c (insert_imm32, extract_imm32): New functions.\n+\t(insert_xts, extract_xts): New functions.\n+\t(IMM32, UIM3, IX, UIM5, SH3, XTS, P8RR): Define.\n+\t(P_XX4_MASK, P_UXX4_MASK, VSOP, P_VS_MASK, P_VSI_MASK): Define.\n+\t(VXRC_MASK, VXSH_MASK): Define.\n+\t(powerpc_opcodes): Add vinsbvlx, vsldbi, vextdubvlx, vextdubvrx,\n+\tvextduhvlx, vextduhvrx, vextduwvlx, vextduwvrx, vextddvlx,\n+\tvextddvrx, vinshvlx, vinswvlx, vinsw, vinsbvrx, vinshvrx,\n+\tvinswvrx, vinsd, vinsblx, vsrdbi, vinshlx, vinswlx, vinsdlx,\n+\tvinsbrx, vinshrx, vinswrx, vinsdrx, lxvkq.\n+\t(prefix_opcodes): Add xxsplti32dx, xxspltidp, xxspltiw, xxblendvb,\n+\txxblendvh, xxblendvw, xxblendvd, xxpermx.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-opc.c (powerpc_opcodes): Add vrlq, vdivuq, vmsumcud, vrlqmi,"
    },
    {
      "sha": "45ab0fd034b653b2b583739abee64dfb1e45257b",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 114,
      "deletions": 3,
      "changes": 117,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6edbfd3beb15105dfe5c59ee3b22e3daefaea509/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "patch": "@@ -643,6 +643,25 @@ extract_nsi34 (uint64_t insn,\n   return -value;\n }\n \n+/* The split IMM32 field in a vector splat insn.  */\n+\n+static uint64_t\n+insert_imm32 (uint64_t insn,\n+\t      int64_t value,\n+\t      ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t      const char **errmsg ATTRIBUTE_UNUSED)\n+{\n+  return insn | ((value & 0xffff0000) << 16) | (value & 0xffff);\n+}\n+\n+static int64_t\n+extract_imm32 (uint64_t insn,\n+\t       ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t       int *invalid ATTRIBUTE_UNUSED)\n+{\n+  return (insn & 0xffff) | ((insn >> 16) & 0xffff0000);\n+}\n+\n /* The R field in an 8-byte prefix instruction when there are restrictions\n    between R's value and the RA value (ie, they cannot both be non zero).  */\n \n@@ -1613,6 +1632,25 @@ extract_xtp (uint64_t insn,\n   return ((insn >> (21 - 5)) & 0x20) | ((insn >> 21) & 0x1e);\n }\n \n+/* The split XT field in a vector splat insn.  */\n+\n+static uint64_t\n+insert_xts (uint64_t insn,\n+\t    int64_t value,\n+\t    ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t    const char **errmsg ATTRIBUTE_UNUSED)\n+{\n+  return insn | ((value & 0x1f) << 21) | ((value & 0x20) << (16 - 5));\n+}\n+\n+static int64_t\n+extract_xts (uint64_t insn,\n+\t     ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t     int *invalid ATTRIBUTE_UNUSED)\n+{\n+  return ((insn >> (16 - 5)) & 0x20) | ((insn >> 21) & 0x1f);\n+}\n+\n static uint64_t\n insert_dm (uint64_t insn,\n \t   int64_t value,\n@@ -2202,9 +2240,21 @@ const struct powerpc_operand powerpc_operands[] =\n   { UINT64_C(0x3ffffffff), PPC_OPSHIFT_INV, insert_nsi34, extract_nsi34,\n     PPC_OPERAND_NEGATIVE | PPC_OPERAND_SIGNED },\n \n+  /* The IMM32 field in a vector splat immediate prefix instruction.  */\n+#define IMM32 NSI34 + 1\n+  { 0xffffffff, PPC_OPSHIFT_INV, insert_imm32, extract_imm32, 0},\n+\n+  /* The UIM field in a vector permute extended prefix instruction.  */\n+#define UIM3 IMM32 + 1\n+  { 0x7, 32, NULL, NULL, 0},\n+\n+  /* The IX field in xxsplti32dx.  */\n+#define IX UIM3 + 1\n+  { 0x1, 17, NULL, NULL, 0 },\n+\n   /* The DUIS or BHRBE fields in a XFX form instruction, 10 bits\n      unsigned imediate */\n-#define DUIS NSI34 + 1\n+#define DUIS IX + 1\n #define BHRBE DUIS\n   { 0x3ff, 11, NULL, NULL, 0 },\n \n@@ -2524,6 +2574,7 @@ const struct powerpc_operand powerpc_operands[] =\n #define EVUIMM SH\n   /* The FC field in an atomic X form instruction.  */\n #define FC SH\n+#define UIM5 SH\n   { 0x1f, 11, NULL, NULL, 0 },\n \n #define EVUIMM_LT8 SH + 1\n@@ -2679,8 +2730,12 @@ const struct powerpc_operand powerpc_operands[] =\n #define PS SIX + 1\n   { 0x1, 9, NULL, NULL, 0 },\n \n+  /* The SH field in a vector shift double by bit immediate instruction.  */\n+#define SH3 PS + 1\n+  { 0x7, 6, NULL, NULL, 0 },\n+\n   /* The SHB field in a VA form instruction.  */\n-#define SHB PS + 1\n+#define SHB SH3 + 1\n   { 0xf, 6, NULL, NULL, 0 },\n \n   /* The other UIMM field in a half word EVX form instruction.  */\n@@ -2840,8 +2895,11 @@ const struct powerpc_operand powerpc_operands[] =\n #define XTP XSQ6 + 1\n   { 0x3e, PPC_OPSHIFT_INV, insert_xtp, extract_xtp, PPC_OPERAND_VSR },\n \n+#define XTS XTP + 1\n+  { 0x3f, PPC_OPSHIFT_INV, insert_xts, extract_xts, PPC_OPERAND_VSR },\n+\n   /* The XT field in a plxv instruction.  Runs into the OP field.  */\n-#define XTOP XTP + 1\n+#define XTOP XTS + 1\n   { 0x3f, 21, NULL, NULL, PPC_OPERAND_VSR },\n \n   /* The XA field in an XX3 form instruction.  This is split.  */\n@@ -2926,6 +2984,9 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* Prefix insn, eight byte load/store form 8LS.  */\n #define P8LS (PREFIX_OP | PREFIX_FORM (0))\n \n+/* Prefix insn, eight byte register to register form 8RR.  */\n+#define P8RR (PREFIX_OP | PREFIX_FORM (1))\n+\n /* Prefix insn, modified load/store form MLS.  */\n #define PMLS (PREFIX_OP | PREFIX_FORM (2))\n \n@@ -2938,6 +2999,15 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* The same as P_D_MASK, but with the RA and PCREL fields specified.  */\n #define P_DRAPCREL_MASK (P_D_MASK | PCREL_MASK | RA_MASK)\n \n+/* Mask for prefix vector permute insns.  */\n+#define P_XX4_MASK (PREFIX_MASK | XX4_MASK)\n+#define P_UXX4_MASK (P_XX4_MASK & ~(7ULL << 32))\n+\n+/* Vector splat immediate op.  */\n+#define VSOP(op, xop) (OP (op) | (xop << 17))\n+#define P_VS_MASK ((-1ULL << 48) | VSOP (0x3f, 0xf))\n+#define P_VSI_MASK ((-1ULL << 48) | VSOP (0x3f, 0xe))\n+\n /* The main opcode combined with a trap code in the TO field of a D\n    form instruction.  Used for extended mnemonics for the trap\n    instructions.  */\n@@ -3316,6 +3386,12 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* A VX_MASK for instructions using a BF field.  */\n #define VXBF_MASK (VX_MASK | (3 << 21))\n \n+/* A VX_MASK for instructions with an RC field.  */\n+#define VXRC_MASK (VX_MASK & ~(0x1f << 6))\n+\n+/* A VX_MASK for instructions with a SH field.  */\n+#define VXSH_MASK (VX_MASK & ~(0x7 << 6))\n+\n /* A VA form instruction.  */\n #define VXA(op, xop) (OP (op) | (((uint64_t)(xop)) & 0x03f))\n \n@@ -3923,21 +3999,31 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vmrghb\",\tVX (4,\t12),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"psq_stx\",\tXW (4,\t 7,0),\tXW_MASK,     PPCPS,\t0,\t\t{FRS,RA,RB,PSWM,PSQM}},\n {\"vpkuhum\",\tVX (4,\t14),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinsbvlx\",\tVX (4,  15),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"mulhhwu\",\tXRC(4,\t 8,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"mulhhwu.\",\tXRC(4,\t 8,1),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"ps_sum0\",\tA  (4,\t10,0),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n {\"ps_sum0.\",\tA  (4,\t10,1),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n+{\"vsldbi\",\tVX (4,  22),\tVXSH_MASK,   POWER10,\t0,\t\t{VD, VA, VB, SH3}},\n {\"ps_sum1\",\tA  (4,\t11,0),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n {\"ps_sum1.\",\tA  (4,\t11,1),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n+{\"vextdubvlx\",\tVX (4,  24),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_muls0\",\tA  (4,\t12,0),\tAFRB_MASK,   PPCPS,\t0,\t\t{FRT, FRA, FRC}},\n {\"machhwu\",\tXO (4,\t12,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n+{\"vextdubvrx\",\tVX (4,  25),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_muls0.\",\tA  (4,\t12,1),\tAFRB_MASK,   PPCPS,\t0,\t\t{FRT, FRA, FRC}},\n {\"machhwu.\",\tXO (4,\t12,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n+{\"vextduhvlx\",\tVX (4,  26),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_muls1\",\tA  (4,\t13,0),\tAFRB_MASK,   PPCPS,\t0,\t\t{FRT, FRA, FRC}},\n+{\"vextduhvrx\",\tVX (4,  27),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_muls1.\",\tA  (4,\t13,1),\tAFRB_MASK,   PPCPS,\t0,\t\t{FRT, FRA, FRC}},\n+{\"vextduwvlx\",\tVX (4,  28),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_madds0\",\tA  (4,\t14,0),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n+{\"vextduwvrx\",\tVX (4,  29),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_madds0.\",\tA  (4,\t14,1),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n+{\"vextddvlx\",\tVX (4,  30),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_madds1\",\tA  (4,\t15,0),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n+{\"vextddvrx\",\tVX (4,  31),\tVXRC_MASK,   POWER10,\t0,\t\t{VD, VA, VB, RC}},\n {\"ps_madds1.\",\tA  (4,\t15,1),\tA_MASK,\t     PPCPS,\t0,\t\t{FRT, FRA, FRC, FRB}},\n {\"vmhaddshs\",\tVXA(4,\t32),\tVXA_MASK,    PPCVEC,\t0,\t\t{VD, VA, VB, VC}},\n {\"vmhraddshs\",\tVXA(4,\t33),\tVXA_MASK,    PPCVEC,\t0,\t\t{VD, VA, VB, VC}},\n@@ -4000,6 +4086,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vmrghh\",\tVX (4,\t76),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"psq_stux\",\tXW (4,\t39,0),\tXW_MASK,     PPCPS,\t0,\t\t{FRS,RA,RB,PSWM,PSQM}},\n {\"vpkuwum\",\tVX (4,\t78),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinshvlx\",\tVX (4,  79),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"ps_neg\",\tXRC(4,\t40,0),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"mulhhw\",\tXRC(4,\t40,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"ps_neg.\",\tXRC(4,\t40,1),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n@@ -4020,6 +4107,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vdivuw\",\tVX (4,  139),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vmrghw\",\tVX (4,\t140),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"vpkuhus\",\tVX (4,\t142),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinswvlx\",\tVX (4,  143),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"ps_mr\",\tXRC(4,\t72,0),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"ps_mr.\",\tXRC(4,\t72,1),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"machhwsu\",\tXO (4,\t76,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -4034,6 +4122,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vmuloud\",\tVX (4, 200),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vdivud\",\tVX (4, 203),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vpkuwus\",\tVX (4, 206),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinsw\",\tVX (4, 207),   VXUIMM4_MASK, POWER10,\t0,\t\t{VD, RB, UIMM4}},\n {\"machhws\",\tXO (4, 108,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"machhws.\",\tXO (4, 108,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"nmachhws\",\tXO (4, 110,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -4049,6 +4138,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vdivsq\",\tVX (4, 267),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vmrglb\",\tVX (4, 268),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"vpkshus\",\tVX (4, 270),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinsbvrx\",\tVX (4, 271),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"ps_nabs\",\tXRC(4, 136,0),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"mulchwu\",\tXRC(4, 136,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"ps_nabs.\",\tXRC(4, 136,1),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n@@ -4065,6 +4155,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vrsqrtefp\",\tVX (4, 330),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n {\"vmrglh\",\tVX (4, 332),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"vpkswus\",\tVX (4, 334),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinshvrx\",\tVX (4, 335),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"mulchw\",\tXRC(4, 168,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"mulchw.\",\tXRC(4, 168,1),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"macchw\",\tXO (4, 172,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -4081,6 +4172,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vdivsw\",\tVX (4, 395),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vmrglw\",\tVX (4, 396),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n {\"vpkshss\",\tVX (4, 398),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinswvrx\",\tVX (4, 399),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, VB}},\n {\"macchwsu\",\tXO (4, 204,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"macchwsu.\",\tXO (4, 204,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"vmaxsd\",\tVX (4, 450),\tVX_MASK,     PPCVEC2,\t0,\t\t{VD, VA, VB}},\n@@ -4093,6 +4185,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vlogefp\",\tVX (4, 458),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n {\"vdivsd\",\tVX (4, 459),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vpkswss\",\tVX (4, 462),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinsd\",\tVX (4, 463),   VXUIMM4_MASK, POWER10,\t0,\t\t{VD, RB, UIMM4}},\n {\"macchws\",\tXO (4, 236,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"macchws.\",\tXO (4, 236,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"nmacchws\",\tXO (4, 238,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -4122,11 +4215,13 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"evcntlzw\",\tVX (4, 525),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA}},\n {\"evcntlsw\",\tVX (4, 526),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA}},\n {\"vupkhsb\",\tVX (4, 526),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinsblx\",\tVX (4, 527),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"brinc\",\tVX (4, 527),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n {\"ps_abs\",\tXRC(4, 264,0),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"ps_abs.\",\tXRC(4, 264,1),\tXRA_MASK,    PPCPS,\t0,\t\t{FRT, FRB}},\n {\"evand\",\tVX (4, 529),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n {\"evandc\",\tVX (4, 530),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n+{\"vsrdbi\",\tVX (4, 534),\tVXSH_MASK,   POWER10,\t0,\t\t{VD, VA, VB, SH3}},\n {\"evxor\",\tVX (4, 534),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n {\"evmr\",\tVX (4, 535),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RAB}},\n {\"evor\",\tVX (4, 535),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n@@ -4166,6 +4261,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vsplth\",\tVX (4, 588),   VXUIMM3_MASK, PPCVEC,\t0,\t\t{VD, VB, UIMM3}},\n {\"vextractuh\",\tVX (4, 589),   VXUIMM4_MASK, PPCVEC3,\t0,\t\t{VD, VB, UIMM4}},\n {\"vupkhsh\",\tVX (4, 590),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinshlx\",\tVX (4, 591),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"nget\",\tAPU(4, 300,0),\tAPU_RA_MASK, PPC405,\t0,\t\t{RT, FSL}},\n {\"evsel\",\tEVSEL(4,79),\tEVSEL_MASK,  PPCSPE,\t0,\t\t{RS, RA, RB, CRFS}},\n {\"ncget\",\tAPU(4, 316,0),\tAPU_RA_MASK, PPC405,\t0,\t\t{RT, FSL}},\n@@ -4196,6 +4292,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"evfscmplt\",\tVX (4, 653),\tVX_MASK,     PPCSPE,\t0,\t\t{CRFD, RA, RB}},\n {\"evfscmpeq\",\tVX (4, 654),\tVX_MASK,     PPCSPE,\t0,\t\t{CRFD, RA, RB}},\n {\"vupklsb\",\tVX (4, 654),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinswlx\",\tVX (4, 655),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"evfscfui\",\tVX (4, 656),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RB}},\n {\"evfscfh\",\tVX_RA_CONST(4, 657, 4),  VX_RA_CONST_MASK,\tPPCEFS2,\t0,\t\t{RD, RB}},\n {\"evfscfsi\",\tVX (4, 657),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RB}},\n@@ -4257,6 +4354,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"efscmplt\",\tVX (4, 717),\tVX_MASK,     PPCEFS,\t0,\t\t{CRFD, RA, RB}},\n {\"efscmpeq\",\tVX (4, 718),\tVX_MASK,     PPCEFS,\t0,\t\t{CRFD, RA, RB}},\n {\"vupklsh\",\tVX (4, 718),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinsdlx\",\tVX (4, 719),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"efscfd\",\tVX (4, 719),\tVX_MASK,     PPCEFS,\t0,\t\t{RS, RB}},\n {\"efscfui\",\tVX (4, 720),\tVX_MASK,     PPCEFS,\t0,\t\t{RS, RB}},\n {\"efscfh\",\tVX_RA_CONST(4, 721, 4), VX_RA_CONST_MASK, PPCEFS2, 0,\t{RD, RB}},\n@@ -4337,6 +4435,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"evlhhousplat\",VX (4, 781),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, EVUIMM_2, RA}},\n {\"evlhhossplatx\",VX(4, 782),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n {\"vpkpx\",\tVX (4, 782),\tVX_MASK,     PPCVEC,\t0,\t\t{VD, VA, VB}},\n+{\"vinsbrx\",\tVX (4, 783),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"evlhhossplat\",VX (4, 783),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, EVUIMM_2, RA}},\n {\"mullhwu\",\tXRC(4, 392,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"evlwhex\",\tVX (4, 784),\tVX_MASK,     PPCSPE,\t0,\t\t{RS, RA, RB}},\n@@ -4377,6 +4476,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vspltish\",\tVX (4, 844),\tVXVB_MASK,   PPCVEC,\t0,\t\t{VD, SIMM}},\n {\"vinserth\",\tVX (4, 845),   VXUIMM4_MASK, PPCVEC3,\t0,\t\t{VD, VB, UIMM4}},\n {\"vupkhpx\",\tVX (4, 846),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinshrx\",\tVX (4, 847),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"mullhw\",\tXRC(4, 424,0),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"mullhw.\",\tXRC(4, 424,1),\tX_MASK,\t     MULHW,\t0,\t\t{RT, RA, RB}},\n {\"maclhw\",\tXO (4, 428,0,0),XO_MASK,     MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -4395,6 +4495,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vdivesw\",\tVX (4, 907),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vspltisw\",\tVX (4, 908),\tVXVB_MASK,   PPCVEC,\t0,\t\t{VD, SIMM}},\n {\"vinsertw\",\tVX (4, 909),   VXUIMM4_MASK, PPCVEC3,\t0,\t\t{VD, VB, UIMM4}},\n+{\"vinswrx\",\tVX (4, 911),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"maclhwsu\",\tXO (4, 460,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"maclhwsu.\",\tXO (4, 460,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"vminsd\",\tVX (4, 962),\tVX_MASK,     PPCVEC2,\t0,\t\t{VD, VA, VB}},\n@@ -4408,6 +4509,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"vdivesd\",\tVX (4, 971),\tVX_MASK,     POWER10,\t0,\t\t{VD, VA, VB}},\n {\"vinsertd\",\tVX (4, 973),   VXUIMM4_MASK, PPCVEC3,\t0,\t\t{VD, VB, UIMM4}},\n {\"vupklpx\",\tVX (4, 974),\tVXVA_MASK,   PPCVEC,\t0,\t\t{VD, VB}},\n+{\"vinsdrx\",\tVX (4, 975),\tVX_MASK,     POWER10,\t0,\t\t{VD, RA, RB}},\n {\"maclhws\",\tXO (4, 492,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"maclhws.\",\tXO (4, 492,0,1), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n {\"nmaclhws\",\tXO (4, 494,0,0), XO_MASK,    MULHW,\t0,\t\t{RT, RA, RB}},\n@@ -7643,6 +7745,7 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"xvdivsp\",\tXX3(60,88),\tXX3_MASK,    PPCVSX,\tPPCVLE,\t\t{XT6, XA6, XB6}},\n {\"xvmsubmsp\",\tXX3(60,89),\tXX3_MASK,    PPCVSX,\tPPCVLE,\t\t{XT6, XA6, XB6}},\n {\"xxspltib\",\tX(60,360),   XX1_MASK|3<<19, PPCVSX3,\tPPCVLE,\t\t{XT6, IMM8}},\n+{\"lxvkq\",\tXVA(60,360,31),\tXVA_MASK&~1, POWER10,\tPPCVLE,\t\t{XT6, UIM5}},\n {\"xxinsertw\",\tXX2(60,181),   XX2UIM4_MASK, PPCVSX3,\tPPCVLE,\t\t{XT6, XB6, UIMM4}},\n {\"xvcvsxwsp\",\tXX2(60,184),\tXX2_MASK,    PPCVSX,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xvrspim\",\tXX2(60,185),\tXX2_MASK,    PPCVSX,\tPPCVLE,\t\t{XT6, XB6}},\n@@ -8095,7 +8198,15 @@ const struct powerpc_opcode prefix_opcodes[] = {\n {\"paddi\",\t  PMLS|OP(14),\t       P_D_MASK,\tPOWER10, 0,\t{RT, RA0, SI34, PCREL0}},\n {\"psubi\",\t  PMLS|OP(14),\t       P_D_MASK,\tPOWER10, 0,\t{RT, RA0, NSI34, PCREL0}},\n {\"pla\",\t\t  PMLS|OP(14),\t       P_D_MASK,\tPOWER10, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"xxsplti32dx\",\t  P8RR|VSOP(32,0),     P_VSI_MASK,\tPOWER10, 0,\t{XTS, IX, IMM32}},\n+{\"xxspltidp\",\t  P8RR|VSOP(32,2),     P_VS_MASK,\tPOWER10, 0,\t{XTS, IMM32}},\n+{\"xxspltiw\",\t  P8RR|VSOP(32,3),     P_VS_MASK,\tPOWER10, 0,\t{XTS, IMM32}},\n {\"plwz\",\t  PMLS|OP(32),\t       P_D_MASK,\tPOWER10, 0,\t{RT, D34, PRA0, PCREL}},\n+{\"xxblendvb\",\t  P8RR|XX4(33,0),      P_XX4_MASK,\tPOWER10, 0,\t{XT6, XA6, XB6, XC6}},\n+{\"xxblendvh\",\t  P8RR|XX4(33,1),      P_XX4_MASK,\tPOWER10, 0,\t{XT6, XA6, XB6, XC6}},\n+{\"xxblendvw\",\t  P8RR|XX4(33,2),      P_XX4_MASK,\tPOWER10, 0,\t{XT6, XA6, XB6, XC6}},\n+{\"xxblendvd\",\t  P8RR|XX4(33,3),      P_XX4_MASK,\tPOWER10, 0,\t{XT6, XA6, XB6, XC6}},\n+{\"xxpermx\",\t  P8RR|XX4(34,0),      P_UXX4_MASK,\tPOWER10, 0,\t{XT6, XA6, XB6, XC6, UIM3}},\n {\"plbz\",\t  PMLS|OP(34),\t       P_D_MASK,\tPOWER10, 0,\t{RT, D34, PRA0, PCREL}},\n {\"pstw\",\t  PMLS|OP(36),\t       P_D_MASK,\tPOWER10, 0,\t{RS, D34, PRA0, PCREL}},\n {\"pstb\",\t  PMLS|OP(38),\t       P_D_MASK,\tPOWER10, 0,\t{RS, D34, PRA0, PCREL}},"
    }
  ]
}