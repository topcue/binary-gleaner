{
  "sha": "ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWM5YmQwYTIyZGQ0MjMyN2FlOTk0MzkzN2E5NmYxZTg2NWZiNWQ0Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T03:04:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T06:17:12Z"
    },
    "message": "PR24955, libbfd terminating program on out of memory (part2)\n\n\tPR 24955\n\t* elflink.c (elf_output_implib): Don't use xmalloc.  Don't ignore\n\treturn value of bfd_alloc2.\n\t* peXXigen.c (_bfd_XXi_write_codeview_record): Don't use xmalloc.\n\t* pef.c (bfd_pef_print_symbol): Likewise.  Don't ignore return\n\tvalue of bfd_get_section_contents.\n\t* som.c (som_write_space_strings): Don't use xmalloc.\n\t(som_write_symbol_strings): Likewise.",
    "tree": {
      "sha": "a9f88543988ee484b7db067816ae25e00b431c89",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a9f88543988ee484b7db067816ae25e00b431c89"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "03f04b53b24fac848328eeafbea589d1120ccce0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03f04b53b24fac848328eeafbea589d1120ccce0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/03f04b53b24fac848328eeafbea589d1120ccce0"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 37,
    "deletions": 10
  },
  "files": [
    {
      "sha": "a864b8beb34bc1ad0151d3f65c51b4d52c9e998b",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
      "patch": "@@ -1,3 +1,14 @@\n+2019-10-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24955\n+\t* elflink.c (elf_output_implib): Don't use xmalloc.  Don't ignore\n+\treturn value of bfd_alloc2.\n+\t* peXXigen.c (_bfd_XXi_write_codeview_record): Don't use xmalloc.\n+\t* pef.c (bfd_pef_print_symbol): Likewise.  Don't ignore return\n+\tvalue of bfd_get_section_contents.\n+\t* som.c (som_write_space_strings): Don't use xmalloc.\n+\t(som_write_symbol_strings): Likewise.\n+\n 2019-10-11  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* dwarf2.c (stash_maybe_enable_info_hash_tables): Only set"
    },
    {
      "sha": "d0f70cb6f58007aee7d5755888f546df82a21838",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
      "patch": "@@ -11649,7 +11649,10 @@ elf_output_implib (bfd *abfd, struct bfd_link_info *info)\n     return FALSE;\n \n   /* Read in the symbol table.  */\n-  sympp = (asymbol **) xmalloc (symsize);\n+  sympp = (asymbol **) bfd_malloc (symsize);\n+  if (sympp == NULL)\n+    return FALSE;\n+\n   symcount = bfd_canonicalize_symtab (abfd, sympp);\n   if (symcount < 0)\n     goto free_sym_buf;\n@@ -11677,6 +11680,9 @@ elf_output_implib (bfd *abfd, struct bfd_link_info *info)\n   /* Make symbols absolute.  */\n   osymbuf = (elf_symbol_type *) bfd_alloc2 (implib_bfd, symcount,\n \t\t\t\t\t    sizeof (*osymbuf));\n+  if (osymbuf == NULL)\n+    goto free_sym_buf;\n+\n   for (src_count = 0; src_count < symcount; src_count++)\n     {\n       memcpy (&osymbuf[src_count], (elf_symbol_type *) sympp[src_count],"
    },
    {
      "sha": "ab0da7f53284be96a260fe608f4fda46bed168a2",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
      "patch": "@@ -1216,7 +1216,10 @@ _bfd_XXi_write_codeview_record (bfd * abfd, file_ptr where, CODEVIEW_INFO *cvinf\n   if (bfd_seek (abfd, where, SEEK_SET) != 0)\n     return 0;\n \n-  buffer = xmalloc (size);\n+  buffer = bfd_malloc (size);\n+  if (buffer == NULL)\n+    return 0;\n+\n   cvinfo70 = (CV_INFO_PDB70 *) buffer;\n   H_PUT_32 (abfd, CVINFO_PDB70_CVSIGNATURE, cvinfo70->CvSignature);\n "
    },
    {
      "sha": "fccb9b6ac38aba7fa2c820e280887c20945d35b0",
      "filename": "bfd/pef.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/pef.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/pef.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pef.c?ref=ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
      "patch": "@@ -221,15 +221,16 @@ bfd_pef_print_symbol (bfd *abfd,\n       fprintf (file, \" %-5s %s\", symbol->section->name, symbol->name);\n       if (CONST_STRNEQ (symbol->name, \"__traceback_\"))\n \t{\n-\t  unsigned char *buf = xmalloc (symbol->udata.i);\n+\t  unsigned char *buf;\n \t  size_t offset = symbol->value + 4;\n \t  size_t len = symbol->udata.i;\n-\t  int ret;\n \n-\t  bfd_get_section_contents (abfd, symbol->section, buf, offset, len);\n-\t  ret = bfd_pef_parse_traceback_table (abfd, symbol->section, buf,\n-\t\t\t\t\t       len, 0, NULL, file);\n-\t  if (ret < 0)\n+\t  buf = bfd_malloc (len);\n+\t  if (buf == NULL\n+\t      || !bfd_get_section_contents (abfd, symbol->section, buf,\n+\t\t\t\t\t    offset, len)\n+\t      || bfd_pef_parse_traceback_table (abfd, symbol->section, buf,\n+\t\t\t\t\t\tlen, 0, NULL, file) < 0)\n \t    fprintf (file, \" [ERROR]\");\n \t  free (buf);\n \t}"
    },
    {
      "sha": "5145651c3d677fa4d4d94feedadbd5f1abc6989b",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ec9bd0a22dd42327ae9943937a96f1e865fb5d46/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=ec9bd0a22dd42327ae9943937a96f1e865fb5d46",
      "patch": "@@ -3309,13 +3309,16 @@ som_write_space_strings (bfd *abfd,\n   /* Chunk of memory that we can use as buffer space, then throw\n      away.  */\n   size_t tmp_space_size = SOM_TMP_BUFSIZE;\n-  char *tmp_space = xmalloc (tmp_space_size);\n+  char *tmp_space = bfd_malloc (tmp_space_size);\n   char *p = tmp_space;\n   unsigned int strings_size = 0;\n   asection *section;\n   bfd_size_type amt;\n   bfd_size_type res;\n \n+  if (tmp_space == NULL)\n+    return FALSE;\n+\n   /* Seek to the start of the space strings in preparation for writing\n      them out.  */\n   if (bfd_seek (abfd, (file_ptr) current_offset, SEEK_SET) != 0)\n@@ -3419,12 +3422,15 @@ som_write_symbol_strings (bfd *abfd,\n   /* Chunk of memory that we can use as buffer space, then throw\n      away.  */\n   size_t tmp_space_size = SOM_TMP_BUFSIZE;\n-  char *tmp_space = xmalloc (tmp_space_size);\n+  char *tmp_space = bfd_malloc (tmp_space_size);\n   char *p = tmp_space;\n   unsigned int strings_size = 0;\n   bfd_size_type amt;\n   bfd_size_type res;\n \n+  if (tmp_space == NULL)\n+    return FALSE;\n+\n   /* This gets a bit gruesome because of the compilation unit.  The\n      strings within the compilation unit are part of the symbol\n      strings, but don't have symbol_dictionary entries.  So, manually"
    }
  ]
}