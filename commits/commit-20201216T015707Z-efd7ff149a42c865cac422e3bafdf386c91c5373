{
  "sha": "efd7ff149a42c865cac422e3bafdf386c91c5373",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZkN2ZmMTQ5YTQyYzg2NWNhYzQyMmUzYmFmZGYzODZjOTFjNTM3Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T01:35:13Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T01:57:07Z"
    },
    "message": "Add expected type parameter to evaluate_expression\n\nWhile working on the expression rewrite, I found a few spots that\ncalled the internal functions of the expression evaluator, just to\npass in an expected type.  This patch adds a parameter to\nevaluate_expression so that these functions can avoid this dependency.\n\nRegression tested on x86-64 Fedora 28.\n\ngdb/ChangeLog\n2020-12-15  Tom Tromey  <tom@tromey.com>\n\n\t* stap-probe.c (stap_probe::evaluate_argument): Use\n\tevaluate_expression.\n\t* dtrace-probe.c (dtrace_probe::evaluate_argument): Use\n\tevaluate_expression.\n\t* value.h (evaluate_expression): Add expect_type parameter.\n\t* objc-lang.c (print_object_command): Call evaluate_expression.\n\t* eval.c (evaluate_expression): Add expect_type parameter.",
    "tree": {
      "sha": "1ad19dfafeaca30bc40c43adf55e826327ead802",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1ad19dfafeaca30bc40c43adf55e826327ead802"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efd7ff149a42c865cac422e3bafdf386c91c5373",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd7ff149a42c865cac422e3bafdf386c91c5373",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efd7ff149a42c865cac422e3bafdf386c91c5373",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd7ff149a42c865cac422e3bafdf386c91c5373/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2adab65cc07f07a581d57b05dfbc100952fab748",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2adab65cc07f07a581d57b05dfbc100952fab748",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2adab65cc07f07a581d57b05dfbc100952fab748"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 26,
    "deletions": 15
  },
  "files": [
    {
      "sha": "91bf0a228159fde934b6c5310998f91fe14449e6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* stap-probe.c (stap_probe::evaluate_argument): Use\n+\tevaluate_expression.\n+\t* dtrace-probe.c (dtrace_probe::evaluate_argument): Use\n+\tevaluate_expression.\n+\t* value.h (evaluate_expression): Add expect_type parameter.\n+\t* objc-lang.c (print_object_command): Call evaluate_expression.\n+\t* eval.c (evaluate_expression): Add expect_type parameter.\n+\n 2020-12-15  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.c (varobj_create): Use first_opcode."
    },
    {
      "sha": "c105763ad11f855584afd54ab5375f28a2ac0b55",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -714,11 +714,9 @@ dtrace_probe::evaluate_argument (unsigned n,\n {\n   struct gdbarch *gdbarch = this->get_gdbarch ();\n   struct dtrace_probe_arg *arg;\n-  int pos = 0;\n \n   arg = this->get_arg_by_number (n, gdbarch);\n-  return evaluate_subexp_standard (arg->type, arg->expr.get (), &pos,\n-\t\t\t\t   EVAL_NORMAL);\n+  return evaluate_expression (arg->expr.get (), arg->type);\n }\n \n /* Implementation of the compile_to_ax method.  */"
    },
    {
      "sha": "c781fde0614ebd45fd272d3440e8d4509b4355fa",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -120,17 +120,15 @@ parse_to_comma_and_eval (const char **expp)\n   return evaluate_expression (expr.get ());\n }\n \f\n-/* Evaluate an expression in internal prefix form\n-   such as is constructed by parse.y.\n \n-   See expression.h for info on the format of an expression.  */\n+/* See value.h.  */\n \n struct value *\n-evaluate_expression (struct expression *exp)\n+evaluate_expression (struct expression *exp, struct type *expect_type)\n {\n   int pc = 0;\n \n-  return evaluate_subexp (nullptr, exp, &pc, EVAL_NORMAL);\n+  return evaluate_subexp (expect_type, exp, &pc, EVAL_NORMAL);\n }\n \n /* Evaluate an expression, avoiding all memory references"
    },
    {
      "sha": "10220c81ec3e8f49158a0fb2bce10ab400803023",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -1194,10 +1194,10 @@ print_object_command (const char *args, int from_tty)\n \n   {\n     expression_up expr = parse_expression (args);\n-    int pc = 0;\n \n-    object = evaluate_subexp (builtin_type (expr->gdbarch)->builtin_data_ptr,\n-\t\t\t      expr.get (), &pc, EVAL_NORMAL);\n+    object\n+      = evaluate_expression (expr.get (),\n+\t\t\t     builtin_type (expr->gdbarch)->builtin_data_ptr);\n   }\n \n   /* Validate the address for sanity.  */"
    },
    {
      "sha": "ffcded3c317447d6ba84452d7f85c2ca39f84696",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -1389,12 +1389,10 @@ struct value *\n stap_probe::evaluate_argument (unsigned n, struct frame_info *frame)\n {\n   struct stap_probe_arg *arg;\n-  int pos = 0;\n   struct gdbarch *gdbarch = get_frame_arch (frame);\n \n   arg = this->get_arg_by_number (n, gdbarch);\n-  return evaluate_subexp_standard (arg->atype, arg->aexpr.get (), &pos,\n-\t\t\t\t   EVAL_NORMAL);\n+  return evaluate_expression (arg->aexpr.get (), arg->atype);\n }\n \n /* Compile the probe's argument N (indexed from 0) to agent expression."
    },
    {
      "sha": "98012a5e3ae7cea9b7b00cf09fec87aaf3224255",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7ff149a42c865cac422e3bafdf386c91c5373/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=efd7ff149a42c865cac422e3bafdf386c91c5373",
      "patch": "@@ -905,7 +905,14 @@ extern int using_struct_return (struct gdbarch *gdbarch,\n \t\t\t\tstruct value *function,\n \t\t\t\tstruct type *value_type);\n \n-extern struct value *evaluate_expression (struct expression *exp);\n+/* Evaluate the expression EXP.  If set, EXPECT_TYPE is passed to the\n+   outermost operation's evaluation.  This is ignored by most\n+   operations, but may be used, e.g., to determine the type of an\n+   otherwise untyped symbol.  The caller should not assume that the\n+   returned value has this type.  */\n+\n+extern struct value *evaluate_expression (struct expression *exp,\n+\t\t\t\t\t  struct type *expect_type = nullptr);\n \n extern struct value *evaluate_type (struct expression *exp);\n "
    }
  ]
}