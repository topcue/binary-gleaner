{
  "sha": "6ad368b8caf6650852983fc23814c9f393da0439",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmFkMzY4YjhjYWY2NjUwODUyOTgzZmMyMzgxNGM5ZjM5M2RhMDQzOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-09T19:49:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-09T19:49:15Z"
    },
    "message": "gdb: address review comments of previous series\n\nI forgot to include fixes for review comments I got before pushing the\nprevious commits (or I pushed the wrong commits).  This one fixes it.\n\n - Return {} instead of false in get_discrete_low_bound and\n   get_discrete_high_bound.\n - Compute high bound after confirming low bound is valid in\n   get_discrete_bounds.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (get_discrete_low_bound, get_discrete_high_bound):\n\tReturn {} instead of false.\n\t(get_discrete_bounds): Compute high bound only if low bound is\n\tvalid.\n\nChange-Id: I5f9a66b3672adfac9441068c899ab113ab2c331a",
    "tree": {
      "sha": "8e0d02c1ef4fce05c41b6ed9ef8f0f012f4714db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8e0d02c1ef4fce05c41b6ed9ef8f0f012f4714db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ad368b8caf6650852983fc23814c9f393da0439",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ad368b8caf6650852983fc23814c9f393da0439",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ad368b8caf6650852983fc23814c9f393da0439",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ad368b8caf6650852983fc23814c9f393da0439/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b56203a7cadd545b33713e98e274e582242e090",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b56203a7cadd545b33713e98e274e582242e090",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b56203a7cadd545b33713e98e274e582242e090"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 15,
    "deletions": 6
  },
  "files": [
    {
      "sha": "afdfc772094f1cd470d77f37dc481fcd88a3504b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ad368b8caf6650852983fc23814c9f393da0439/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ad368b8caf6650852983fc23814c9f393da0439/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6ad368b8caf6650852983fc23814c9f393da0439",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-09  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbtypes.c (get_discrete_low_bound, get_discrete_high_bound):\n+\tReturn {} instead of false.\n+\t(get_discrete_bounds): Compute high bound only if low bound is\n+\tvalid.\n+\n 2020-12-09  Simon Marchi  <simon.marchi@efficios.com>\n \n \tPR 26875, PR 26901"
    },
    {
      "sha": "3e489fd1803b4857479374a7b4543059f713bff1",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ad368b8caf6650852983fc23814c9f393da0439/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ad368b8caf6650852983fc23814c9f393da0439/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=6ad368b8caf6650852983fc23814c9f393da0439",
      "patch": "@@ -1093,7 +1093,7 @@ get_discrete_low_bound (struct type *type)\n \n     case TYPE_CODE_INT:\n       if (TYPE_LENGTH (type) > sizeof (LONGEST))\t/* Too big */\n-\treturn false;\n+\treturn {};\n \n       if (!type->is_unsigned ())\n \treturn -(1 << (TYPE_LENGTH (type) * TARGET_CHAR_BIT - 1));\n@@ -1103,7 +1103,7 @@ get_discrete_low_bound (struct type *type)\n       return 0;\n \n     default:\n-      return false;\n+      return {};\n     }\n }\n \n@@ -1160,7 +1160,7 @@ get_discrete_high_bound (struct type *type)\n \n     case TYPE_CODE_INT:\n       if (TYPE_LENGTH (type) > sizeof (LONGEST))\t/* Too big */\n-\treturn false;\n+\treturn {};\n \n       if (!type->is_unsigned ())\n \t{\n@@ -1179,7 +1179,7 @@ get_discrete_high_bound (struct type *type)\n       }\n \n     default:\n-      return false;\n+      return {};\n     }\n }\n \n@@ -1189,9 +1189,11 @@ bool\n get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n {\n   gdb::optional<LONGEST> low = get_discrete_low_bound (type);\n-  gdb::optional<LONGEST> high = get_discrete_high_bound (type);\n+  if (!low.has_value ())\n+    return false;\n \n-  if (!low.has_value () || !high.has_value ())\n+  gdb::optional<LONGEST> high = get_discrete_high_bound (type);\n+  if (!high.has_value ())\n     return false;\n \n   *lowp = *low;"
    }
  ]
}