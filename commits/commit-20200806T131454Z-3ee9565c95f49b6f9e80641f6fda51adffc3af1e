{
  "sha": "3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2VlOTU2NWM5NWY0OWI2ZjllODA2NDFmNmZkYTUxYWRmZmMzYWYxZQ==",
  "commit": {
    "author": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-08-06T13:14:54Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-08-06T13:14:54Z"
    },
    "message": "bpf: relocation fixes for eBPF ELF backend\n\nThe eBPF ELF backend was not properly recording relocation addends\nduring installation, nor reading and applying them when performing\nthe final relocation. This lead to various issues with incorrect\nrelocations.\n\nThese issues are fixed with a new howto special function to install\nthe relocations, and updates to bpf_elf_relocate_section to read and\nuse the addends as recorded in the input_bfd.\n\nbfd/ChangeLog\n\n2020-08-05  David Faust  <david.faust@oracle.com>\n\n\t* elf64-bpf.c (bpf_elf_generic_reloc): New function.\n\t(bpf_elf_howto_table): Use it here.\n\t(bpf_elf_relocate_section): Use addends recorded in input_bfd for\n\tinstruction and data relocations.\n\nld/ChangeLog\n\n2020-08-05  David Faust  <david.faust@oracle.com>\n\n\t* testsuite/ld-bpf/call-2.s: New file.\n\t* testsuite/ld-bpf/call-2.d: Likewise.\n\t* testsuite/ld-bpf/reloc-data-be.d: Likewise.\n\t* testsuite/ld-bpf/reloc-data-le.d: Likewise.\n\t* testsuite/ld-bpf/reloc-data.s: Likewise.\n\t* testsuite/ld-bpf/reloc-insn-external-be.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn-external-le.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn-external.s: Likewise.\n\t* testsuite/ld-bpf/reloc-insn32-be.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn32-le.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn32.s: Likewise.\n\t* testsuite/ld-bpf/reloc-insn64-be.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn64-le.d: Likewise.\n\t* testsuite/ld-bpf/reloc-insn64.s: Likewise.",
    "tree": {
      "sha": "5690b3e6eccd1fd4820d9dccba2540138143b3b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5690b3e6eccd1fd4820d9dccba2540138143b3b4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/comments",
  "author": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1a9f72a7a8f445b8d665eb36b053a18e758e63e6"
    }
  ],
  "stats": {
    "total": 419,
    "additions": 371,
    "deletions": 48
  },
  "files": [
    {
      "sha": "1c96c22008ccd990d80785695673a2b53fd652ec",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-05  David Faust  <david.faust@oracle.com>\n+\n+\t* elf64-bpf.c (bpf_elf_generic_reloc): New function.\n+\t(bpf_elf_howto_table): Use it here.\n+\t(bpf_elf_relocate_section): Use addends recorded in input_bfd for\n+\tinstruction and data relocations.\n+\n 2020-08-03  Alan Modra  <amodra@gmail.com>\n \n \t* vms-lib.c (vms_traverse_index): Sanity check size remaining"
    },
    {
      "sha": "c6a726d932431da909a4f0cc627f2e7e350b1873",
      "filename": "bfd/elf64-bpf.c",
      "status": "modified",
      "additions": 158,
      "deletions": 48,
      "changes": 206,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/bfd/elf64-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/bfd/elf64-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-bpf.c?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -31,6 +31,9 @@\n \n #define BASEADDR(SEC)\t((SEC)->output_section->vma + (SEC)->output_offset)\n \n+static bfd_reloc_status_type bpf_elf_generic_reloc\n+  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n+\n /* Relocation tables.  */\n static reloc_howto_type bpf_elf_howto_table [] =\n {\n@@ -42,7 +45,7 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_dont, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_NONE\",\t\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n \t 0,\t\t\t/* src_mask */\n@@ -55,27 +58,27 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 64,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n+\t 32,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_INSN_64\",\t/* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n \t MINUS_ONE,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n-  /* 32-immediate in many instructions. Note: handled manually.  */\n+  /* 32-immediate in many instructions.  */\n   HOWTO (R_BPF_INSN_32,\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 32,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n+\t 32,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_INSN_32\",\t/* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -85,12 +88,12 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 16,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n+\t 16,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_INSN_16\",\t/* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0x0000ffff,\t\t/* src_mask */\n \t 0x0000ffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -100,11 +103,11 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 16,\t\t\t/* bitsize */\n \t TRUE,\t\t\t/* pc_relative */\n-\t 32,\t\t\t/* bitpos */\n+\t 16,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_INSN_DISP16\",   /* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n+\t TRUE,\t\t\t/* partial_inplace */\n \t 0xffff,\t\t/* src_mask */\n \t 0xffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n@@ -116,10 +119,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t TRUE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_8_PCREL\",\t/* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xff,\t\t\t/* src_mask */\n \t 0xff,\t\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -130,10 +133,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t TRUE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_16_PCREL\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t 0xffff,\t\t/* src_mask */\n \t 0xffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -144,10 +147,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t TRUE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_32_PCREL\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -158,10 +161,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_unsigned, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_DATA_8\",\t/* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xff,\t\t\t/* src_mask */\n \t 0xff,\t\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n@@ -172,10 +175,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_unsigned, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_DATA_16\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t 0xffff,\t\t/* src_mask */\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n@@ -185,11 +188,11 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 32,\t\t\t/* bitsize */\n \t TRUE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n+\t 32,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_INSN_DISP32\",   /* name */\n-\t FALSE,\t\t\t/* partial_inplace */\n+\t TRUE,\t\t\t/* partial_inplace */\n \t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n@@ -202,10 +205,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_DATA_32\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* src_mask */\n \t 0xffffffff,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n \n@@ -217,7 +220,7 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_DATA_64\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n \t 0,\t\t\t/* src_mask */\n@@ -231,10 +234,10 @@ static reloc_howto_type bpf_elf_howto_table [] =\n \t TRUE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n-\t bfd_elf_generic_reloc, /* special_function */\n+\t bpf_elf_generic_reloc, /* special_function */\n \t \"R_BPF_64_PCREL\",\t/* name */\n \t FALSE,\t\t\t/* partial_inplace */\n-\t 0,\t\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* src_mask */\n \t MINUS_ONE,\t\t/* dst_mask */\n \t TRUE),\t\t\t/* pcrel_offset */\n };\n@@ -391,13 +394,16 @@ bpf_elf_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n       bfd_reloc_status_type\t   r;\n       const char *\t\t   name = NULL;\n       int\t\t\t   r_type ATTRIBUTE_UNUSED;\n+      bfd_signed_vma               addend;\n+      bfd_byte                   * where;\n \n       r_type = ELF64_R_TYPE (rel->r_info);\n       r_symndx = ELF64_R_SYM (rel->r_info);\n       howto  = bpf_elf_howto_table + ELF64_R_TYPE (rel->r_info);\n       h      = NULL;\n       sym    = NULL;\n       sec    = NULL;\n+      where  = contents + rel->r_offset;\n \n       if (r_symndx < symtab_hdr->sh_info)\n \t{\n@@ -435,8 +441,6 @@ bpf_elf_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n         case R_BPF_INSN_DISP16:\n         case R_BPF_INSN_DISP32:\n           {\n-            bfd_signed_vma addend;\n-            \n             /* Make the relocation PC-relative, and change its unit to\n                64-bit words.  */\n             relocation -= sec_addr (input_section) + rel->r_offset;\n@@ -460,11 +464,35 @@ bpf_elf_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n             r = bfd_reloc_ok;\n             break;\n           }\n+\tcase R_BPF_DATA_8:\n+\tcase R_BPF_DATA_16:\n+\tcase R_BPF_DATA_32:\n+\tcase R_BPF_DATA_64:\n+\t  {\n+\t    addend = bfd_get (howto->bitsize, input_bfd, where);\n+\t    relocation += addend;\n+\t    bfd_put (howto->bitsize, input_bfd, relocation, where);\n+\n+\t    r = bfd_reloc_ok;\n+\t    break;\n+\t  }\n+\tcase R_BPF_INSN_16:\n+\t  {\n+\n+\t    addend = bfd_get_16 (input_bfd, where + 2);\n+\t    relocation += addend;\n+\t    bfd_put_16 (input_bfd, relocation, where + 2);\n+\n+\t    r = bfd_reloc_ok;\n+\t    break;\n+\t  }\n         case R_BPF_INSN_32:\n           {\n             /*  Write relocated value */\n-            bfd_put (howto->bitsize, input_bfd, relocation,\n-                     contents + rel->r_offset + 4);\n+\n+\t    addend = bfd_get_32 (input_bfd, where + 4);\n+\t    relocation += addend;\n+            bfd_put_32 (input_bfd, relocation, where + 4);\n \n             r = bfd_reloc_ok;\n             break;\n@@ -478,19 +506,30 @@ bpf_elf_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n                 The upper 32 bits of the immediate are stored at the end of\n                 the instruction.\n              */\n-            bfd_put (32, input_bfd, (relocation & 0xFFFFFFFF),\n-                     contents + rel->r_offset + 4);\n-            bfd_put (32, input_bfd, (relocation >> 32),\n-                     contents + rel->r_offset + 12);\n+\n+\n+            /* Get the addend. The upper and lower 32 bits are split.\n+               'where' is the beginning of the 16-byte instruction. */\n+            addend = bfd_get_32 (input_bfd, where + 4);\n+            addend |= (bfd_get_32 (input_bfd, where + 12) << 32);\n+\n+            relocation += addend;\n+\n+            bfd_put_32 (input_bfd, (relocation & 0xFFFFFFFF), where + 4);\n+            bfd_put_32 (input_bfd, (relocation >> 32), where + 12);\n             r = bfd_reloc_ok;\n             break;\n           }\n         default:\n-          r = _bfd_final_link_relocate (howto, input_bfd, input_section,\n-                                        contents, rel->r_offset, relocation,\n-                                        rel->r_addend);\n+\t  r = bfd_reloc_notsupported;\n         }\n \n+      if (r == bfd_reloc_ok)\n+\t  r = bfd_check_overflow (howto->complain_on_overflow,\n+\t\t\t\t  howto->bitsize,\n+\t\t\t\t  howto->rightshift,\n+\t\t\t\t  64, relocation);\n+\n       if (r != bfd_reloc_ok)\n \t{\n \t  const char * msg = NULL;\n@@ -548,6 +587,77 @@ elf64_bpf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n   return TRUE;\n }\n \n+/* A generic howto special function for installing BPF relocations.\n+   This function will be called by the assembler (via bfd_install_relocation).\n+   At link time, bpf_elf_relocate_section will resolve the final relocations.\n+\n+   BPF instructions are always big endian, and this approach avoids problems in\n+   bfd_install_relocation.  */\n+\n+static bfd_reloc_status_type\n+bpf_elf_generic_reloc (bfd * abfd, arelent *reloc_entry, asymbol *symbol,\n+\t\t       void *data, asection *input_section,\n+\t\t       bfd *output_bfd,\n+\t\t       char **error_message ATTRIBUTE_UNUSED)\n+{\n+\n+  bfd_signed_vma relocation;\n+  bfd_reloc_status_type status;\n+  bfd_byte *where;\n+\n+  /* Sanity check that the address is in range.  */\n+  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+    return bfd_reloc_outofrange;\n+\n+  /*  Get the symbol value.  */\n+  if (bfd_is_com_section (symbol->section))\n+    relocation = 0;\n+  else\n+    relocation = symbol->value;\n+\n+  if (symbol->flags & BSF_SECTION_SYM)\n+    /* Relocation against a section symbol: add in the section base address.  */\n+    relocation += BASEADDR (symbol->section);\n+\n+  relocation += reloc_entry->addend;\n+\n+  where = (bfd_byte *) data + reloc_entry->address;\n+\n+  status = bfd_check_overflow (reloc_entry->howto->complain_on_overflow,\n+\t\t\t       reloc_entry->howto->bitsize,\n+\t\t\t       reloc_entry->howto->rightshift, 64, relocation);\n+\n+  if (status != bfd_reloc_ok)\n+    return status;\n+\n+  /* Now finally install the relocation.  */\n+  if (reloc_entry->howto->type == R_BPF_INSN_64)\n+    {\n+      /* lddw is a 128-bit (!) instruction that allows loading a 64-bit\n+\t immediate into a register. the immediate is split in half, with the\n+\t lower 32 bits in the same position as the imm32 field of other\n+\t instructions, and the upper 32 bits placed at the very end of the\n+\t instruction. that is, there are 32 unused bits between them. */\n+\n+      bfd_put_32 (output_bfd, (relocation & 0xFFFFFFFF), where + 4);\n+      bfd_put_32 (output_bfd, (relocation >> 32), where + 12);\n+    }\n+  else\n+    {\n+      /* For other kinds of relocations, the relocated value simply goes\n+\t BITPOS bits from the start of the entry. This is always a multiple\n+\t of 8, i.e. whole bytes.  */\n+      bfd_put (reloc_entry->howto->bitsize, output_bfd, relocation,\n+\t       where + reloc_entry->howto->bitpos / 8);\n+    }\n+\n+  reloc_entry->addend = relocation;\n+  reloc_entry->address += input_section->output_offset;\n+\n+  return bfd_reloc_ok;\n+}\n+\n+\n /* The macros below configure the architecture.  */\n \n #define TARGET_LITTLE_SYM bpf_elf64_le_vec"
    },
    {
      "sha": "d46e9769c080467edee6474036fb201cf52a81e3",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -1,3 +1,20 @@\n+2020-08-05  David Faust  <david.faust@oracle.com>\n+\n+\t* testsuite/ld-bpf/call-2.s: New file.\n+\t* testsuite/ld-bpf/call-2.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-data-be.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-data-le.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-data.s: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn-external-be.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn-external-le.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn-external.s: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn32-be.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn32-le.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn32.s: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn64-be.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn64-le.d: Likewise.\n+\t* testsuite/ld-bpf/reloc-insn64.s: Likewise.\n+\n 2020-08-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* emultempl/msp430.em (change_output_section): Update the tail"
    },
    {
      "sha": "3d09095f6be5d4b689455f6bd8937550a933045a",
      "filename": "ld/testsuite/ld-bpf/call-2.d",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/call-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/call-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/call-2.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,20 @@\n+#as: --EL\n+#source: call-2.s\n+#source: bar.s\n+#objdump: -dr\n+#ld: -EL\n+#name: CALL with disp32 reloc and addend\n+\n+.*: +file format .*bpf.*\n+\n+Disassembly of section .text:\n+\n+[0-9a-f]+ <.*>:\n+ *[0-9a-f]+:\tb7 01 00 00 01 00 00 00 \tmov %r1,1\n+ *[0-9a-f]+:\t85 10 00 00 02 00 00 00 \tcall 2\n+ *[0-9a-f]+:\t95 00 00 00 00 00 00 00 \texit\n+\n+[0-9a-f]+ <bar>:\n+ *[0-9a-f]+:\tbf 21 00 00 00 00 00 00 \tmov %r1,%r2\n+ *[0-9a-f]+:\tbf 13 00 00 00 00 00 00 \tmov %r3,%r1\n+ *[0-9a-f]+:\t95 00 00 00 00 00 00 00 \texit"
    },
    {
      "sha": "e2a5b90647d916652b5aa7424c8f96dc11425a74",
      "filename": "ld/testsuite/ld-bpf/call-2.s",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/call-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/call-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/call-2.s?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,3 @@\n+    mov %r1, 1\n+    call bar + 0x1\n+    exit"
    },
    {
      "sha": "4d793e2b41a92bc37b0b52025d6daf40d5e2b43b",
      "filename": "ld/testsuite/ld-bpf/reloc-data-be.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data-be.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data-be.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-data-be.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,11 @@\n+#as: --EB\n+#source: reloc-data.s\n+#objdump: -s\n+#ld: -Tdata=0x20 -EB\n+#name: data relocs BE\n+\n+.*:     file format .*-bpfbe\n+\n+Contents of section \\.data:\n+ 0020 666f6f00 62617200 00000000 00000020  .*\n+ 0030 00000028 003034                      .*"
    },
    {
      "sha": "97cb1b36a2a0c70e0329995f3846b541d534142e",
      "filename": "ld/testsuite/ld-bpf/reloc-data-le.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data-le.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data-le.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-data-le.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,11 @@\n+#as: --EL\n+#source: reloc-data.s\n+#objdump: -s\n+#ld: -Tdata=0x20 -EL\n+#name: data relocs LE\n+\n+.*:     file format .*-bpfle\n+\n+Contents of section \\.data:\n+ 0020 666f6f00 62617200 20000000 00000000  .*\n+ 0030 28000000 300034                      .*"
    },
    {
      "sha": "431ef5aef6177615e45238a8c33c511ee302649c",
      "filename": "ld/testsuite/ld-bpf/reloc-data.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-data.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-data.s?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,16 @@\n+    .data\n+foo:\n+    .string \"foo\"\n+\n+    .global bar\n+bar:\n+    .string \"bar\"\n+\n+d64:\n+    .quad foo\n+d32:\n+    .word d64\n+d16:\n+    .half d32\n+d8:\n+    .byte d16"
    },
    {
      "sha": "032d3649d2a8dcfc477fb871aec7792a67cc3a0d",
      "filename": "ld/testsuite/ld-bpf/reloc-insn-external-be.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external-be.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external-be.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn-external-be.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,16 @@\n+#as: --EB\n+#source: reloc-data.s\n+#source: reloc-insn-external.s\n+#objdump: -dr\n+#ld: -Tdata=0x20 -EB\n+#name: reloc insn external BE\n+\n+.*: +file format .*bpfbe\n+\n+Disassembly of section .text:\n+\n+[0-9a-f]+ <.*>:\n+ *[0-9a-f]+:\t18 10 00 00 00 00 00 28[ \t]*lddw %r1,0x28\n+ *[0-9a-f]+:\t00 00 00 00 00 00 00 00[ \t]*\n+ *[0-9a-f]+:\tb7 20 00 00 00 00 00 26[ \t]*mov %r2,0x26\n+ *[0-9a-f]+:\t61 34 00 24 00 00 00 00[ \t]*ldxw %r3,\\[%r4\\+0x24\\]"
    },
    {
      "sha": "d3513766ee841310d6f0e2ff67b4ff14db1c10af",
      "filename": "ld/testsuite/ld-bpf/reloc-insn-external-le.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external-le.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external-le.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn-external-le.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,16 @@\n+#as: --EL\n+#source: reloc-data.s\n+#source: reloc-insn-external.s\n+#objdump: -dr\n+#ld: -Tdata=0x20 -EL\n+#name: reloc insn external LE\n+\n+.*: +file format .*bpfle\n+\n+Disassembly of section .text:\n+\n+[0-9a-f]+ <.*>:\n+ *[0-9a-f]+:\t18 01 00 00 28 00 00 00[ \t]*lddw %r1,0x28\n+ *[0-9a-f]+:\t00 00 00 00 00 00 00 00[ \t]*\n+ *[0-9a-f]+:\tb7 02 00 00 26 00 00 00[ \t]*mov %r2,0x26\n+ *[0-9a-f]+:\t61 43 24 00 00 00 00 00[ \t]*ldxw %r3,\\[%r4\\+0x24\\]"
    },
    {
      "sha": "be12813934a591adf4776194276586c4e7d33a60",
      "filename": "ld/testsuite/ld-bpf/reloc-insn-external.s",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn-external.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn-external.s?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,5 @@\n+\n+    lddw %r1, bar + 4\n+    mov %r2, bar + 2\n+\n+    ldxw %r3, [%r4 + bar]"
    },
    {
      "sha": "27d592d243944cfa2c5b3bd34b1b876bbe851bee",
      "filename": "ld/testsuite/ld-bpf/reloc-insn32-be.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32-be.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32-be.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn32-be.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,19 @@\n+#as: --EB\n+#source: reloc-insn32.s\n+#objdump: -d\n+#ld: -Tdata=0xdabeef -EB\n+#name: reloc INSN32 BE\n+\n+.*: +file format .*bpfbe\n+\n+Disassembly of section .text:\n+\n+[0-9a-f]+ <main>:\n+ *[0-9a-f]+:\tb7 10 00 00 00 da be f3[ \t]*mov %r1,0xdabef3\n+ *[0-9a-f]+:\t16 10 00 02 00 da be f3[ \t]*jeq32 %r1,0xdabef3,2\n+ *[0-9a-f]+:\t38 00 00 00 00 da be ff[ \t]*ldabsdw 0xdabeff\n+ *[0-9a-f]+:\t95 00 00 00 00 00 00 00[ \t]*exit\n+\n+[0-9a-f]+ <baz>:\n+ *[0-9a-f]+:\t07 10 00 00 00 da be ef[ \t]*add %r1,0xdabeef\n+ *[0-9a-f]+:\t62 20 00 08 00 da be f7[ \t]*stw \\[%r2\\+8\\],0xdabef7"
    },
    {
      "sha": "bdbb45f28c619391b354fdbcbbcb28ed9c2f3d0c",
      "filename": "ld/testsuite/ld-bpf/reloc-insn32-le.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32-le.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32-le.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn32-le.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,19 @@\n+#as: --EL\n+#source: reloc-insn32.s\n+#objdump: -d\n+#ld: -Tdata=0xdabeef -EL\n+#name: reloc INSN32 LE\n+\n+.*: +file format .*bpfle\n+\n+Disassembly of section .text:\n+\n+[0-9a-f]+ <main>:\n+ *[0-9a-f]+:\tb7 01 00 00 f3 be da 00[ \t]*mov %r1,0xdabef3\n+ *[0-9a-f]+:\t16 01 02 00 f3 be da 00[ \t]*jeq32 %r1,0xdabef3,2\n+ *[0-9a-f]+:\t38 00 00 00 ff be da 00[ \t]*ldabsdw 0xdabeff\n+ *[0-9a-f]+:\t95 00 00 00 00 00 00 00[ \t]*exit\n+\n+[0-9a-f]+ <baz>:\n+ *[0-9a-f]+:\t07 01 00 00 ef be da 00[ \t]*add %r1,0xdabeef\n+ *[0-9a-f]+:\t62 02 08 00 f7 be da 00[ \t]*stw \\[%r2\\+8\\],0xdabef7"
    },
    {
      "sha": "a53a0dc43f86b36031cbecd51131c94cb1b168f2",
      "filename": "ld/testsuite/ld-bpf/reloc-insn32.s",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn32.s?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,20 @@\n+    .data\n+foo:\n+    .string \"foo\"\n+bar:\n+    .string \"bar\"\n+d64:\n+    .dword bar\n+d32:\n+    .word d64\n+\n+    .text\n+main:\n+    mov %r1, bar\n+    jeq32 %r1, bar, baz\n+    ldabsdw d32\n+    exit\n+\n+baz:\n+    add %r1, foo\n+    stw [%r2 + 8], d64"
    },
    {
      "sha": "ca74e33099ccd56159b28fcc26266abf74ef142c",
      "filename": "ld/testsuite/ld-bpf/reloc-insn64-be.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64-be.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64-be.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn64-be.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,12 @@\n+#as: --EB\n+#source: reloc-insn64.s\n+#objdump: -s\n+#ld: -Tdata=0xdeadbeef1234 -EB\n+#name: reloc INSN64 big-endian\n+\n+.*:     file format .*-bpfbe\n+\n+#...\n+Contents of section \\.text:\n+[ \t][0-9a-f]+ 18100000 beef1238 00000000 0000dead .*\n+#pass"
    },
    {
      "sha": "63dcce3bd172a695f2a3619e90ee8f17be1acfe0",
      "filename": "ld/testsuite/ld-bpf/reloc-insn64-le.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64-le.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64-le.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn64-le.d?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,12 @@\n+#as: --EL\n+#source: reloc-insn64.s\n+#objdump: -s\n+#ld: -Tdata=0xdeadbeef1234 -EL\n+#name: reloc INSN64 little-endian\n+\n+.*:     file format .*-bpfle\n+\n+#...\n+Contents of section \\.text:\n+[ \t][0-9a-f]+ 18010000 3812efbe 00000000 adde0000 .*\n+#pass"
    },
    {
      "sha": "8cb1d9f896d564fe11a7c799846fe28599970c52",
      "filename": "ld/testsuite/ld-bpf/reloc-insn64.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ee9565c95f49b6f9e80641f6fda51adffc3af1e/ld/testsuite/ld-bpf/reloc-insn64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/reloc-insn64.s?ref=3ee9565c95f49b6f9e80641f6fda51adffc3af1e",
      "patch": "@@ -0,0 +1,9 @@\n+    .data\n+x:\n+    .string \"foo\"\n+y:\n+    .string \"bar\"\n+\n+    .text\n+main:\n+    lddw %r1, y"
    }
  ]
}