{
  "sha": "4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGM0ODk4ZThmNWEyMDJkMTk4NWMzZTY5YTRhM2UwNWRjZDYzNDgxYQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-03-09T09:12:14Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-03-09T09:12:14Z"
    },
    "message": "x86: allow opcode templates to be templated\n\nIn order to reduce redundancy as well as the chance of things going out\nof sync (see a later patch for an example), make the opcode table\ngenerator capable of recognizing and expanding templated templates. Use\nthe new capability for compacting the general purpose conditional insns.",
    "tree": {
      "sha": "d8cadfd68e82f5a438bd11ebe20026daccba1fc3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8cadfd68e82f5a438bd11ebe20026daccba1fc3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a15de1f5999228fa53c6c266e09499388f64869b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a15de1f5999228fa53c6c266e09499388f64869b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a15de1f5999228fa53c6c266e09499388f64869b"
    }
  ],
  "stats": {
    "total": 449,
    "additions": 298,
    "deletions": 151
  },
  "files": [
    {
      "sha": "f2ece6450545a8ac83d6cabfc82569fb3973c1c6",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (struct template_arg, struct template_instance,\n+\tstruct template_param, struct template, templates,\n+\tparse_template, expand_templates): New.\n+\t(process_i386_opcodes): Various local variables moved to\n+\texpand_templates. Call parse_template and expand_templates.\n+\t* i386-opc.tbl (cc): New. Use it for Jcc, SETcc, and CMOVcc.\n+\t* i386-tbl.h: Re-generate.\n+\n 2020-03-06  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.tbl (vcvtdq2pd, vcvtps2pd, vcvtudq2pd, vcvtps2ph,"
    },
    {
      "sha": "0c5a392a2ae76f55265b294bf981c5918e703a9a",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 267,
      "deletions": 46,
      "changes": 313,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
      "patch": "@@ -740,6 +740,31 @@ static const char *filename;\n static i386_cpu_flags active_cpu_flags;\n static int active_isstring;\n \n+struct template_arg {\n+  const struct template_arg *next;\n+  const char *val;\n+};\n+\n+struct template_instance {\n+  const struct template_instance *next;\n+  const char *name;\n+  const struct template_arg *args;\n+};\n+\n+struct template_param {\n+  const struct template_param *next;\n+  const char *name;\n+};\n+\n+struct template {\n+  const struct template *next;\n+  const char *name;\n+  const struct template_instance *instances;\n+  const struct template_param *params;\n+};\n+\n+static const struct template *templates;\n+\n static int\n compare (const void *x, const void *y)\n {\n@@ -1373,26 +1398,255 @@ opcode_hash_eq (const void *p, const void *q)\n   return strcmp (name, entry->name) == 0;\n }\n \n+static void\n+parse_template (char *buf, int lineno)\n+{\n+  char sep, *end, *name;\n+  struct template *tmpl = xmalloc (sizeof (*tmpl));\n+  struct template_instance *last_inst = NULL;\n+\n+  buf = remove_leading_whitespaces (buf + 1);\n+  end = strchr (buf, ':');\n+  if (end == NULL)\n+    fail (\"%s: %d: missing ':'\\n\", filename, lineno);\n+  *end++ = '\\0';\n+  remove_trailing_whitespaces (buf);\n+\n+  if (*buf == '\\0')\n+    fail (\"%s: %d: missing template identifier\\n\", filename, lineno);\n+  tmpl->name = xstrdup (buf);\n+\n+  tmpl->params = NULL;\n+  do {\n+      struct template_param *param;\n+\n+      buf = remove_leading_whitespaces (end);\n+      end = strpbrk (buf, \":,\");\n+      if (end == NULL)\n+        fail (\"%s: %d: missing ':' or ','\\n\", filename, lineno);\n+\n+      sep = *end;\n+      *end++ = '\\0';\n+      remove_trailing_whitespaces (buf);\n+\n+      param = xmalloc (sizeof (*param));\n+      param->name = xstrdup (buf);\n+      param->next = tmpl->params;\n+      tmpl->params = param;\n+  } while (sep == ':');\n+\n+  tmpl->instances = NULL;\n+  do {\n+      struct template_instance *inst;\n+      char *cur, *next;\n+      const struct template_param *param;\n+\n+      buf = remove_leading_whitespaces (end);\n+      end = strpbrk (buf, \",>\");\n+      if (end == NULL)\n+        fail (\"%s: %d: missing ',' or '>'\\n\", filename, lineno);\n+\n+      sep = *end;\n+      *end++ = '\\0';\n+\n+      inst = xmalloc (sizeof (*inst));\n+\n+      cur = next_field (buf, ':', &next, end);\n+      inst->name = xstrdup (cur);\n+\n+      for (param = tmpl->params; param; param = param->next)\n+\t{\n+\t  struct template_arg *arg = xmalloc (sizeof (*arg));\n+\n+\t  cur = next_field (next, ':', &next, end);\n+\t  if (next > end)\n+\t    fail (\"%s: %d: missing argument for '%s'\\n\", filename, lineno, param->name);\n+\t  arg->val = xstrdup (cur);\n+\t  arg->next = inst->args;\n+\t  inst->args = arg;\n+\t}\n+\n+      if (tmpl->instances)\n+\tlast_inst->next = inst;\n+      else\n+\ttmpl->instances = inst;\n+      last_inst = inst;\n+  } while (sep == ',');\n+\n+  buf = remove_leading_whitespaces (end);\n+  if (*buf)\n+    fprintf(stderr, \"%s: %d: excess characters '%s'\\n\",\n+\t    filename, lineno, buf);\n+\n+  tmpl->next = templates;\n+  templates = tmpl;\n+}\n+\n+static unsigned int\n+expand_templates (char *name, const char *str, htab_t opcode_hash_table,\n+\t\t  struct opcode_hash_entry ***opcode_array_p, int lineno)\n+{\n+  static unsigned int idx, opcode_array_size;\n+  struct opcode_hash_entry **opcode_array = *opcode_array_p;\n+  struct opcode_hash_entry **hash_slot, **entry;\n+  char *ptr1 = strchr(name, '<'), *ptr2;\n+\n+  if (ptr1 == NULL)\n+    {\n+      /* Get the slot in hash table.  */\n+      hash_slot = (struct opcode_hash_entry **)\n+\thtab_find_slot_with_hash (opcode_hash_table, name,\n+\t\t\t\t  htab_hash_string (name),\n+\t\t\t\t  INSERT);\n+\n+      if (*hash_slot == NULL)\n+\t{\n+\t  /* It is the new one.  Put it on opcode array.  */\n+\t  if (idx >= opcode_array_size)\n+\t    {\n+\t      /* Grow the opcode array when needed.  */\n+\t      opcode_array_size += 1024;\n+\t      opcode_array = (struct opcode_hash_entry **)\n+\t\txrealloc (opcode_array,\n+\t\t\t  sizeof (*opcode_array) * opcode_array_size);\n+\t\t*opcode_array_p = opcode_array;\n+\t    }\n+\n+\t  opcode_array[idx] = (struct opcode_hash_entry *)\n+\t    xmalloc (sizeof (struct opcode_hash_entry));\n+\t  opcode_array[idx]->next = NULL;\n+\t  opcode_array[idx]->name = xstrdup (name);\n+\t  opcode_array[idx]->opcode = xstrdup (str);\n+\t  opcode_array[idx]->lineno = lineno;\n+\t  *hash_slot = opcode_array[idx];\n+\t  idx++;\n+\t}\n+      else\n+\t{\n+\t  /* Append it to the existing one.  */\n+\t  entry = hash_slot;\n+\t  while ((*entry) != NULL)\n+\t    entry = &(*entry)->next;\n+\t  *entry = (struct opcode_hash_entry *)\n+\t    xmalloc (sizeof (struct opcode_hash_entry));\n+\t  (*entry)->next = NULL;\n+\t  (*entry)->name = (*hash_slot)->name;\n+\t  (*entry)->opcode = xstrdup (str);\n+\t  (*entry)->lineno = lineno;\n+\t}\n+    }\n+  else if ((ptr2 = strchr(ptr1 + 1, '>')) == NULL)\n+    fail (\"%s: %d: missing '>'\\n\", filename, lineno);\n+  else\n+    {\n+      const struct template *tmpl;\n+      const struct template_instance *inst;\n+\n+      *ptr1 = '\\0';\n+      ptr1 = remove_leading_whitespaces (ptr1 + 1);\n+      remove_trailing_whitespaces (ptr1);\n+\n+      *ptr2++ = '\\0';\n+\n+      for ( tmpl = templates; tmpl; tmpl = tmpl->next )\n+\tif (!strcmp(ptr1, tmpl->name))\n+\t  break;\n+      if (!tmpl)\n+\tfail (\"reference to unknown template '%s'\\n\", ptr1);\n+\n+      for (inst = tmpl->instances; inst; inst = inst->next)\n+\t{\n+\t  char *name2 = xmalloc(strlen(name) + strlen(inst->name) + strlen(ptr2) + 1);\n+\t  char *str2 = xmalloc(2 * strlen(str));\n+\t  const char *src;\n+\n+\t  strcpy (name2, name);\n+\t  strcat (name2, inst->name);\n+\t  strcat (name2, ptr2);\n+\n+\t  for (ptr1 = str2, src = str; *src; )\n+\t    {\n+\t      const char *ident = tmpl->name, *end;\n+\t      const struct template_param *param;\n+\t      const struct template_arg *arg;\n+\n+\t      if ((*ptr1 = *src++) != '<')\n+\t\t{\n+\t\t  ++ptr1;\n+\t\t  continue;\n+\t\t}\n+\t      while (ISSPACE(*src))\n+\t\t++src;\n+\t      while (*ident && *src == *ident)\n+\t\t++src, ++ident;\n+\t      while (ISSPACE(*src))\n+\t\t++src;\n+\t      if (*src != ':' || *ident != '\\0')\n+\t\t{\n+\t\t  memcpy (++ptr1, tmpl->name, ident - tmpl->name);\n+\t\t  ptr1 += ident - tmpl->name;\n+\t\t  continue;\n+\t\t}\n+\t      while (ISSPACE(*++src))\n+\t\t;\n+\n+\t      end = src;\n+\t      while (*end != '\\0' && !ISSPACE(*end) && *end != '>')\n+\t\t++end;\n+\n+\t      for (param = tmpl->params, arg = inst->args; param;\n+\t\t   param = param->next, arg = arg->next)\n+\t\t{\n+\t\t  if (end - src == strlen (param->name)\n+\t\t      && !memcmp (src, param->name, end - src))\n+\t\t    {\n+\t\t      src = end;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\n+\t      if (param == NULL)\n+\t\tfail (\"template '%s' has no parameter '%.*s'\\n\",\n+\t\t      tmpl->name, (int)(end - src), src);\n+\n+\t      while (ISSPACE(*src))\n+\t\t++src;\n+\t      if (*src != '>')\n+\t\tfail (\"%s: %d: missing '>'\\n\", filename, lineno);\n+\n+\t      memcpy(ptr1, arg->val, strlen(arg->val));\n+\t      ptr1 += strlen(arg->val);\n+\t      ++src;\n+\t    }\n+\n+\t  *ptr1 = '\\0';\n+\n+\t  expand_templates (name2, str2, opcode_hash_table, opcode_array_p,\n+\t\t\t    lineno);\n+\n+\t  free (str2);\n+\t  free (name2);\n+\t}\n+    }\n+\n+  return idx;\n+}\n+\n static void\n process_i386_opcodes (FILE *table)\n {\n   FILE *fp;\n   char buf[2048];\n   unsigned int i, j;\n   char *str, *p, *last, *name;\n-  struct opcode_hash_entry **hash_slot, **entry, *next;\n   htab_t opcode_hash_table;\n-  struct opcode_hash_entry **opcode_array;\n-  unsigned int opcode_array_size = 1024;\n+  struct opcode_hash_entry **opcode_array = NULL;\n   int lineno = 0, marker = 0;\n \n   filename = \"i386-opc.tbl\";\n   fp = stdin;\n \n   i = 0;\n-  opcode_array = (struct opcode_hash_entry **)\n-    xmalloc (sizeof (*opcode_array) * opcode_array_size);\n-\n   opcode_hash_table = htab_create_alloc (16, opcode_hash_hash,\n \t\t\t\t\t opcode_hash_eq, NULL,\n \t\t\t\t\t xcalloc, free);\n@@ -1444,6 +1698,9 @@ process_i386_opcodes (FILE *table)\n \tcase '\\0':\n \t  continue;\n \t  break;\n+\tcase '<':\n+\t  parse_template (p, lineno);\n+\t  continue;\n \tdefault:\n \t  if (!marker)\n \t    continue;\n@@ -1455,51 +1712,15 @@ process_i386_opcodes (FILE *table)\n       /* Find name.  */\n       name = next_field (p, ',', &str, last);\n \n-      /* Get the slot in hash table.  */\n-      hash_slot = (struct opcode_hash_entry **)\n-\thtab_find_slot_with_hash (opcode_hash_table, name,\n-\t\t\t\t  htab_hash_string (name),\n-\t\t\t\t  INSERT);\n-\n-      if (*hash_slot == NULL)\n-\t{\n-\t  /* It is the new one.  Put it on opcode array.  */\n-\t  if (i >= opcode_array_size)\n-\t    {\n-\t      /* Grow the opcode array when needed.  */\n-\t      opcode_array_size += 1024;\n-\t      opcode_array = (struct opcode_hash_entry **)\n-\t\txrealloc (opcode_array,\n-\t\t\t  sizeof (*opcode_array) * opcode_array_size);\n-\t    }\n-\n-\t  opcode_array[i] = (struct opcode_hash_entry *)\n-\t    xmalloc (sizeof (struct opcode_hash_entry));\n-\t  opcode_array[i]->next = NULL;\n-\t  opcode_array[i]->name = xstrdup (name);\n-\t  opcode_array[i]->opcode = xstrdup (str);\n-\t  opcode_array[i]->lineno = lineno;\n-\t  *hash_slot = opcode_array[i];\n-\t  i++;\n-\t}\n-      else\n-\t{\n-\t  /* Append it to the existing one.  */\n-\t  entry = hash_slot;\n-\t  while ((*entry) != NULL)\n-\t    entry = &(*entry)->next;\n-\t  *entry = (struct opcode_hash_entry *)\n-\t    xmalloc (sizeof (struct opcode_hash_entry));\n-\t  (*entry)->next = NULL;\n-\t  (*entry)->name = (*hash_slot)->name;\n-\t  (*entry)->opcode = xstrdup (str);\n-\t  (*entry)->lineno = lineno;\n-\t}\n+      i = expand_templates (name, str, opcode_hash_table, &opcode_array,\n+\t\t\t    lineno);\n     }\n \n   /* Process opcode array.  */\n   for (j = 0; j < i; j++)\n     {\n+      struct opcode_hash_entry *next;\n+\n       for (next = opcode_array[j]; next; next = next->next)\n \t{\n \t  name = next->name;"
    },
    {
      "sha": "2a64b969ef1370867b72c9791726c4623b3c96fd",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 6,
      "deletions": 90,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
      "patch": "@@ -420,37 +420,11 @@ enter, 2, 0xc8, None, 1, Cpu64, DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoR\n leave, 0, 0xc9, None, 1, Cpu186|CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { 0 }\n leave, 0, 0xc9, None, 1, Cpu64, DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { 0 }\n \n+<cc:opc, o:0, no:1, b:2, c:2, nae:2, nb:3, nc:3, ae:3, e:4, z:4, ne:5, nz:5, be:6, na:6, nbe:7, a:7, \\\n+         s:8, ns:9, p:a, pe:a, np:b, po:b, l:c, nge:c, nl:d, ge:d, le:e, ng:e, nle:f, g:f>\n+\n // Conditional jumps.\n-jo, 1, 0x70, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jno, 1, 0x71, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jb, 1, 0x72, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jc, 1, 0x72, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnae, 1, 0x72, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnb, 1, 0x73, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnc, 1, 0x73, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jae, 1, 0x73, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-je, 1, 0x74, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jz, 1, 0x74, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jne, 1, 0x75, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnz, 1, 0x75, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jbe, 1, 0x76, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jna, 1, 0x76, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnbe, 1, 0x77, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-ja, 1, 0x77, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-js, 1, 0x78, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jns, 1, 0x79, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jp, 1, 0x7a, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jpe, 1, 0x7a, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnp, 1, 0x7b, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jpo, 1, 0x7b, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jl, 1, 0x7c, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnge, 1, 0x7c, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnl, 1, 0x7d, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jge, 1, 0x7d, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jle, 1, 0x7e, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jng, 1, 0x7e, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jnle, 1, 0x7f, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n-jg, 1, 0x7f, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n+j<cc>, 1, 0x7<cc:opc>, None, 1, 0, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32|Disp32S }\n \n // jcxz vs. jecxz is chosen on the basis of the address size prefix.\n jcxz, 1, 0xe3, None, 1, CpuNo64, JumpByte|Size16|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Disp8 }\n@@ -473,36 +447,7 @@ loopne, 1, 0xe0, None, 1, CpuNo64, JumpByte|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, {\n loopne, 1, 0xe0, None, 1, Cpu64, JumpByte|No_bSuf|No_wSuf|No_sSuf|No_ldSuf|NoRex64, { Disp8 }\n \n // Set byte on flag instructions.\n-seto, 1, 0xf90, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setno, 1, 0xf91, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setb, 1, 0xf92, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setc, 1, 0xf92, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnae, 1, 0xf92, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnb, 1, 0xf93, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnc, 1, 0xf93, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setae, 1, 0xf93, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-sete, 1, 0xf94, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setz, 1, 0xf94, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setne, 1, 0xf95, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnz, 1, 0xf95, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setbe, 1, 0xf96, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setna, 1, 0xf96, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnbe, 1, 0xf97, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-seta, 1, 0xf97, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-sets, 1, 0xf98, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setns, 1, 0xf99, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setp, 1, 0xf9a, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setpe, 1, 0xf9a, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnp, 1, 0xf9b, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setpo, 1, 0xf9b, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setl, 1, 0xf9c, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnge, 1, 0xf9c, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnl, 1, 0xf9d, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setge, 1, 0xf9d, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setle, 1, 0xf9e, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setng, 1, 0xf9e, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setnle, 1, 0xf9f, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n-setg, 1, 0xf9f, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n+set<cc>, 1, 0xf9<cc:opc>, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg8|Byte|Unspecified|BaseIndex }\n \n // String manipulation.\n cmps, 0, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n@@ -934,36 +879,7 @@ ud2b, 2, 0xfb9, None, 2, Cpu186, Modrm|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|R\n // 3rd official undefined instr (older CPUs don't take a ModR/M byte)\n ud0, 2, 0xfff, None, 2, Cpu186, Modrm|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n \n-cmovo, 2, 0xf40, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovno, 2, 0xf41, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovb, 2, 0xf42, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovc, 2, 0xf42, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnae, 2, 0xf42, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovae, 2, 0xf43, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnc, 2, 0xf43, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnb, 2, 0xf43, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmove, 2, 0xf44, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovz, 2, 0xf44, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovne, 2, 0xf45, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnz, 2, 0xf45, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovbe, 2, 0xf46, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovna, 2, 0xf46, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmova, 2, 0xf47, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnbe, 2, 0xf47, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovs, 2, 0xf48, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovns, 2, 0xf49, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovp, 2, 0xf4a, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnp, 2, 0xf4b, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovl, 2, 0xf4c, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnge, 2, 0xf4c, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovge, 2, 0xf4d, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnl, 2, 0xf4d, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovle, 2, 0xf4e, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovng, 2, 0xf4e, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovg, 2, 0xf4f, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovnle, 2, 0xf4f, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovpe, 2, 0xf4a, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n-cmovpo, 2, 0xf4b, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n+cmov<cc>, 2, 0xf4<cc:opc>, None, 2, CpuCMOV, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, { Reg16|Reg32|Reg64|Word|Dword|Qword|Unspecified|BaseIndex, Reg16|Reg32|Reg64 }\n \n fcmovb, 2, 0xdac0, None, 2, Cpu687, No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { FloatReg, FloatAcc }\n fcmovnae, 2, 0xdac0, None, 2, Cpu687, No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { FloatReg, FloatAcc }"
    },
    {
      "sha": "f4af3fbb64640c6099d2c47092164f5a051d79b3",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c4898e8f5a202d1985c3e69a4a3e05dcd63481a/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=4c4898e8f5a202d1985c3e69a4a3e05dcd63481a",
      "patch": "@@ -8084,7 +8084,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovae\", 0xf43, None, 2, 2,\n+  { \"cmovnb\", 0xf43, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8112,7 +8112,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnb\", 0xf43, None, 2, 2,\n+  { \"cmovae\", 0xf43, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8210,7 +8210,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmova\", 0xf47, None, 2, 2,\n+  { \"cmovnbe\", 0xf47, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8224,7 +8224,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnbe\", 0xf47, None, 2, 2,\n+  { \"cmova\", 0xf47, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8280,7 +8280,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnp\", 0xf4b, None, 2, 2,\n+  { \"cmovpe\", 0xf4a, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8294,7 +8294,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovl\", 0xf4c, None, 2, 2,\n+  { \"cmovnp\", 0xf4b, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8308,7 +8308,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnge\", 0xf4c, None, 2, 2,\n+  { \"cmovpo\", 0xf4b, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8322,7 +8322,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovge\", 0xf4d, None, 2, 2,\n+  { \"cmovl\", 0xf4c, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8336,7 +8336,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnl\", 0xf4d, None, 2, 2,\n+  { \"cmovnge\", 0xf4c, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8350,7 +8350,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovle\", 0xf4e, None, 2, 2,\n+  { \"cmovnl\", 0xf4d, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8364,7 +8364,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovng\", 0xf4e, None, 2, 2,\n+  { \"cmovge\", 0xf4d, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8378,7 +8378,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovg\", 0xf4f, None, 2, 2,\n+  { \"cmovle\", 0xf4e, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8392,7 +8392,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovnle\", 0xf4f, None, 2, 2,\n+  { \"cmovng\", 0xf4e, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8406,7 +8406,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovpe\", 0xf4a, None, 2, 2,\n+  { \"cmovnle\", 0xf4f, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -8420,7 +8420,7 @@ const insn_template i386_optab[] =\n \t  0, 0, 0, 0, 1, 0 } },\n       { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n \t  0, 0, 0, 0, 0, 0 } } } },\n-  { \"cmovpo\", 0xf4b, None, 2, 2,\n+  { \"cmovg\", 0xf4f, None, 2, 2,\n     { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    }
  ]
}