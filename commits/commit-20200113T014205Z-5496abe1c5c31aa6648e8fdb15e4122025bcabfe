{
  "sha": "5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTQ5NmFiZTFjNWMzMWFhNjY0OGU4ZmRiMTVlNDEyMjAyNWJjYWJmZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-12T09:46:22Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-13T01:42:05Z"
    },
    "message": "tic4x: sign extension using shifts\n\nDon't do that.  Especially don't use shift counts that assume the type\nbeing shifted is 32 bits when the type is long/unsigned long.  Also\nreverts part of a change I made on 2019-12-11 to tic4x_print_register\nthat on closer inspection turns out to be unnecessary.\n\ninclude/\n\t* opcode/tic4x.h (EXTR): Delete.\n\t(EXTRU, EXTRS, INSERTU, INSERTS): Rewrite without zero/sign\n\textension using shifts.  Do trim INSERTU value to specified bitfield.\nopcodes/\n\t* tic4x-dis.c (tic4x_print_register): Remove dead code.\ngas/\n\t* config/tc-tic4x.c (tic4x_operands_match): Correct tic3x trap\n\tinsertion.",
    "tree": {
      "sha": "5e682ab1be6b87f94493f7fa4a4506d45f2f8362",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5e682ab1be6b87f94493f7fa4a4506d45f2f8362"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "202e762b322444344827acbf98162fcb2910e0dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/202e762b322444344827acbf98162fcb2910e0dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/202e762b322444344827acbf98162fcb2910e0dd"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 24,
    "deletions": 8
  },
  "files": [
    {
      "sha": "4186fbd05e31ca736567fd85c1d021b7d0cec2e2",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-tic4x.c (tic4x_operands_match): Correct tic3x trap\n+\tinsertion.\n+\n 2020-01-10  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/pr14891.s: Don't start directives in first column."
    },
    {
      "sha": "cc477b62bbca1d626e05d94e3e4d7ba46a91accf",
      "filename": "gas/config/tc-tic4x.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/gas/config/tc-tic4x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/gas/config/tc-tic4x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic4x.c?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -2193,7 +2193,7 @@ tic4x_operands_match (tic4x_inst_t *inst, tic4x_insn_t *tinsn, int check)\n \t\t}\n \t      else if (exp->X_add_number < 32 && IS_CPU_TIC3X (tic4x_cpu))\n \t\t{\n-\t\t  INSERTU (opcode, exp->X_add_number | 0x20, 4, 0);\n+\t\t  INSERTU (opcode, exp->X_add_number | 0x20, 5, 0);\n \t\t  continue;\n \t\t}\n \t      else"
    },
    {
      "sha": "3e2cdcaeb48dbcffe69a210abf46ae200794140d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/tic4x.h (EXTR): Delete.\n+\t(EXTRU, EXTRS, INSERTU, INSERTS): Rewrite without zero/sign\n+\textension using shifts.  Do trim INSERTU value to specified bitfield.\n+\n 2020-01-10  Alan Modra  <amodra@gmail.com>\n \n \t* opcode/spu.h: Formatting."
    },
    {
      "sha": "04e3f0853d2b8eabd5408eb32e115f65dc00c01e",
      "filename": "include/opcode/tic4x.h",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/include/opcode/tic4x.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/include/opcode/tic4x.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/tic4x.h?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -23,11 +23,13 @@\n #define IS_CPU_TIC4X(v) ((v) ==  0 || (v) == 40 || (v) == 44)\n \n /* Define some bitfield extraction/insertion macros.  */\n-#define EXTR(inst, m, l)          ((inst) << (31 - (m)) >> (31 - ((m) - (l)))) \n-#define EXTRU(inst, m, l)         EXTR ((unsigned long)(inst), (m), (l))\n-#define EXTRS(inst, m, l)         EXTR ((long)(inst), (m), (l))\n-#define INSERTU(inst, val, m, l)  (inst |= ((val) << (l))) \n-#define INSERTS(inst, val, m, l)  INSERTU (inst, ((val) & ((1 << ((m) - (l) + 1)) - 1)), m, l)\n+#define EXTRU(inst, m, l) \\\n+  (((inst) >> (l)) & ((2u << ((m) - (l))) - 1))\n+#define EXTRS(inst, m, l) \\\n+  ((int) ((EXTRU (inst, m, l) ^ (1u << ((m) - (l)))) - (1u << ((m) - (l)))))\n+#define INSERTU(inst, val, m, l) \\\n+  ((inst) |= ((val) & ((2u << ((m) - (l))) - 1)) << (l))\n+#define INSERTS INSERTU\n \n /* Define register numbers.  */\n typedef enum"
    },
    {
      "sha": "26d1e6c4a2c142e2a7df8e87463ca9ac422e5f41",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -1,3 +1,7 @@\n+2020-01-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* tic4x-dis.c (tic4x_print_register): Remove dead code.\n+\n 2020-01-13  Alan Modra  <amodra@gmail.com>\n \n \t* fr30-ibld.c: Regenerate."
    },
    {
      "sha": "34e270b71387ff53fa7139e04c9ae59f3fc37598",
      "filename": "opcodes/tic4x-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/opcodes/tic4x-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5496abe1c5c31aa6648e8fdb15e4122025bcabfe/opcodes/tic4x-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/tic4x-dis.c?ref=5496abe1c5c31aa6648e8fdb15e4122025bcabfe",
      "patch": "@@ -148,8 +148,7 @@ tic4x_print_register (struct disassemble_info *info, unsigned long regno)\n \t      = (tic4x_register_t *)(tic4x_registers + i);\n \t}\n     }\n-  if (regno > (IS_CPU_TIC4X (tic4x_version) ? TIC4X_REG_MAX : TIC3X_REG_MAX)\n-      || registertable[regno] == NULL)\n+  if (regno > (IS_CPU_TIC4X (tic4x_version) ? TIC4X_REG_MAX : TIC3X_REG_MAX))\n     return 0;\n   if (info != NULL)\n     (*info->fprintf_func) (info->stream, \"%s\", registertable[regno]->name);"
    }
  ]
}