{
  "sha": "ca0ab0aa8194eda711cf52efe6c26cb821218476",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2EwYWIwYWE4MTk0ZWRhNzExY2Y1MmVmZTZjMjZjYjgyMTIxODQ3Ng==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:53:31Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:25Z"
    },
    "message": "gdb/nds32: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* nds32-tdep.c (nds32_dummy_id): Delete.\n\t(nds32_unwind_pc): Delete.\n\t(nds32_unwind_sp): Delete.\n\t(nds32_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "cb2b6af597ef40af63b9280171e8dcae4f94f6d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb2b6af597ef40af63b9280171e8dcae4f94f6d9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca0ab0aa8194eda711cf52efe6c26cb821218476",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca0ab0aa8194eda711cf52efe6c26cb821218476",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca0ab0aa8194eda711cf52efe6c26cb821218476",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca0ab0aa8194eda711cf52efe6c26cb821218476/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c825904428f7c89a65eeb313b243f65e950a0a19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c825904428f7c89a65eeb313b243f65e950a0a19",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c825904428f7c89a65eeb313b243f65e950a0a19"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 8,
    "deletions": 28
  },
  "files": [
    {
      "sha": "bf091869b7735d6090acf29c7119ac7d4e025676",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0ab0aa8194eda711cf52efe6c26cb821218476/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0ab0aa8194eda711cf52efe6c26cb821218476/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ca0ab0aa8194eda711cf52efe6c26cb821218476",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* nds32-tdep.c (nds32_dummy_id): Delete.\n+\t(nds32_unwind_pc): Delete.\n+\t(nds32_unwind_sp): Delete.\n+\t(nds32_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* msp430-tdep.c (msp430_unwind_pc): Delete."
    },
    {
      "sha": "8e126cb7a58f4b33851adb10bd97f213430d61df",
      "filename": "gdb/nds32-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 28,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0ab0aa8194eda711cf52efe6c26cb821218476/gdb/nds32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0ab0aa8194eda711cf52efe6c26cb821218476/gdb/nds32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nds32-tdep.c?ref=ca0ab0aa8194eda711cf52efe6c26cb821218476",
      "patch": "@@ -1387,32 +1387,7 @@ static const struct frame_unwind nds32_epilogue_frame_unwind =\n   NULL,\n   nds32_epilogue_frame_sniffer\n };\n-\f\n-/* Implement the \"dummy_id\" gdbarch method.  */\n-\n-static struct frame_id\n-nds32_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  CORE_ADDR sp = get_frame_register_unsigned (this_frame, NDS32_SP_REGNUM);\n-\n-  return frame_id_build (sp, get_frame_pc (this_frame));\n-}\n-\n-/* Implement the \"unwind_pc\" gdbarch method.  */\n-\n-static CORE_ADDR\n-nds32_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, NDS32_PC_REGNUM);\n-}\n-\n-/* Implement the \"unwind_sp\" gdbarch method.  */\n \n-static CORE_ADDR\n-nds32_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, NDS32_SP_REGNUM);\n-}\n \f\n /* Floating type and struct type that has only one floating type member\n    can pass value using FPU registers (when FPU ABI is used).  */\n@@ -2094,14 +2069,11 @@ nds32_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   set_gdbarch_sp_regnum (gdbarch, NDS32_SP_REGNUM);\n   set_gdbarch_pc_regnum (gdbarch, NDS32_PC_REGNUM);\n-  set_gdbarch_unwind_sp (gdbarch, nds32_unwind_sp);\n-  set_gdbarch_unwind_pc (gdbarch, nds32_unwind_pc);\n   set_gdbarch_stack_frame_destroyed_p (gdbarch, nds32_stack_frame_destroyed_p);\n   set_gdbarch_dwarf2_reg_to_regnum (gdbarch, nds32_dwarf2_reg_to_regnum);\n \n   set_gdbarch_push_dummy_call (gdbarch, nds32_push_dummy_call);\n   set_gdbarch_return_value (gdbarch, nds32_return_value);\n-  set_gdbarch_dummy_id (gdbarch, nds32_dummy_id);\n \n   set_gdbarch_skip_prologue (gdbarch, nds32_skip_prologue);\n   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);"
    }
  ]
}