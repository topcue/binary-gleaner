{
  "sha": "0b4453c791106ab62011b59f97611f9ff21cda9f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI0NDUzYzc5MTEwNmFiNjIwMTFiNTlmOTc2MTFmOWZmMjFjZGE5Zg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:42:31Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:57:22Z"
    },
    "message": "elf bfd.h tidy\n\nbfd/\n\t* bfd-in.h (enum notice_asneeded_action): Move to bfdlink.h.\n\tMove most other elf declarations..\n\t* elf-bfd.h: ..to here.\n\t* bfd-in2.h: Regenerate.\ninclude/\n\t* bfdlink.h (enum notice_asneeded_action): Define.\nld/\n\t* deffilep.y: Include bfdlink.h.\n\t* ldelf.c: Likewise.\n\t* ldelfgen.c: Likewise.\n\t* ldver.c: Likewise.\n\t* mri.c: Likewise.\n\t* emultempl/irix.em: Don't include ld.h, ldmain.h, libiberty.h.\n\tComment.",
    "tree": {
      "sha": "fa4e755dbf52de6ec215fd740078c8b12a8f996d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fa4e755dbf52de6ec215fd740078c8b12a8f996d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b4453c791106ab62011b59f97611f9ff21cda9f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b4453c791106ab62011b59f97611f9ff21cda9f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b4453c791106ab62011b59f97611f9ff21cda9f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b4453c791106ab62011b59f97611f9ff21cda9f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5c5b7c124934b464b67c7c3c53a1c62a7f4e98a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5c5b7c124934b464b67c7c3c53a1c62a7f4e98a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5c5b7c124934b464b67c7c3c53a1c62a7f4e98a"
    }
  ],
  "stats": {
    "total": 240,
    "additions": 97,
    "deletions": 143
  },
  "files": [
    {
      "sha": "62115f25c665750cd73ab521c856bdfd7ab62ab5",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -1,3 +1,10 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h (enum notice_asneeded_action): Move to bfdlink.h.\n+\tMove most other elf declarations..\n+\t* elf-bfd.h: ..to here.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* bfd-in.h: Move m68k function declaration.."
    },
    {
      "sha": "de8479cf727b8cd546ce954b1ebd3b3623b9fb1c",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 69,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -570,72 +570,6 @@ extern bfd_boolean bfd_ecoff_write_accumulated_debug\n \n /* Externally visible ELF routines.  */\n \n-struct bfd_link_needed_list\n-{\n-  struct bfd_link_needed_list *next;\n-  bfd *by;\n-  const char *name;\n-};\n-\n-enum dynamic_lib_link_class {\n-  DYN_NORMAL = 0,\n-  DYN_AS_NEEDED = 1,\n-  DYN_DT_NEEDED = 2,\n-  DYN_NO_ADD_NEEDED = 4,\n-  DYN_NO_NEEDED = 8\n-};\n-\n-enum notice_asneeded_action {\n-  notice_as_needed,\n-  notice_not_needed,\n-  notice_needed\n-};\n-\n-extern bfd_boolean bfd_elf_record_link_assignment\n-  (bfd *, struct bfd_link_info *, const char *, bfd_boolean,\n-   bfd_boolean);\n-extern struct bfd_link_needed_list *bfd_elf_get_needed_list\n-  (bfd *, struct bfd_link_info *);\n-extern bfd_boolean bfd_elf_get_bfd_needed_list\n-  (bfd *, struct bfd_link_needed_list **);\n-extern bfd_boolean bfd_elf_stack_segment_size (bfd *, struct bfd_link_info *,\n-\t\t\t\t\t       const char *, bfd_vma);\n-extern bfd_boolean bfd_elf_size_dynamic_sections\n-  (bfd *, const char *, const char *, const char *, const char *, const char *,\n-   const char * const *, struct bfd_link_info *, struct bfd_section **);\n-extern bfd_boolean bfd_elf_size_dynsym_hash_dynstr\n-  (bfd *, struct bfd_link_info *);\n-extern void bfd_elf_set_dt_needed_name\n-  (bfd *, const char *);\n-extern const char *bfd_elf_get_dt_soname\n-  (bfd *);\n-extern void bfd_elf_set_dyn_lib_class\n-  (bfd *, enum dynamic_lib_link_class);\n-extern int bfd_elf_get_dyn_lib_class\n-  (bfd *);\n-extern struct bfd_link_needed_list *bfd_elf_get_runpath_list\n-  (bfd *, struct bfd_link_info *);\n-extern int bfd_elf_discard_info\n-  (bfd *, struct bfd_link_info *);\n-extern unsigned int _bfd_elf_default_action_discarded\n-  (struct bfd_section *);\n-\n-/* Return an upper bound on the number of bytes required to store a\n-   copy of ABFD's program header table entries.  Return -1 if an error\n-   occurs; bfd_get_error will return an appropriate code.  */\n-extern long bfd_get_elf_phdr_upper_bound\n-  (bfd *abfd);\n-\n-/* Copy ABFD's program header table entries to *PHDRS.  The entries\n-   will be stored as an array of Elf_Internal_Phdr structures, as\n-   defined in include/elf/internal.h.  To find out how large the\n-   buffer needs to be, call bfd_get_elf_phdr_upper_bound.\n-\n-   Return the number of program header table entries read, or -1 if an\n-   error occurs; bfd_get_error will return an appropriate code.  */\n-extern int bfd_get_elf_phdrs\n-  (bfd *abfd, void *phdrs);\n-\n /* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n    reconstruct an ELF file by reading the segments out of remote\n    memory based on the ELF file header at EHDR_VMA and the ELF program\n@@ -655,9 +589,6 @@ extern bfd *bfd_elf_bfd_from_remote_memory\n    int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n \t\t\t      bfd_size_type len));\n \n-extern struct bfd_section *_bfd_elf_tls_setup\n-  (bfd *, struct bfd_link_info *);\n-\n extern struct bfd_section *\n _bfd_nearby_section (bfd *, struct bfd_section *, bfd_vma);\n "
    },
    {
      "sha": "30b2685a83e86f7702834070f97657a79e677741",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 69,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -577,72 +577,6 @@ extern bfd_boolean bfd_ecoff_write_accumulated_debug\n \n /* Externally visible ELF routines.  */\n \n-struct bfd_link_needed_list\n-{\n-  struct bfd_link_needed_list *next;\n-  bfd *by;\n-  const char *name;\n-};\n-\n-enum dynamic_lib_link_class {\n-  DYN_NORMAL = 0,\n-  DYN_AS_NEEDED = 1,\n-  DYN_DT_NEEDED = 2,\n-  DYN_NO_ADD_NEEDED = 4,\n-  DYN_NO_NEEDED = 8\n-};\n-\n-enum notice_asneeded_action {\n-  notice_as_needed,\n-  notice_not_needed,\n-  notice_needed\n-};\n-\n-extern bfd_boolean bfd_elf_record_link_assignment\n-  (bfd *, struct bfd_link_info *, const char *, bfd_boolean,\n-   bfd_boolean);\n-extern struct bfd_link_needed_list *bfd_elf_get_needed_list\n-  (bfd *, struct bfd_link_info *);\n-extern bfd_boolean bfd_elf_get_bfd_needed_list\n-  (bfd *, struct bfd_link_needed_list **);\n-extern bfd_boolean bfd_elf_stack_segment_size (bfd *, struct bfd_link_info *,\n-\t\t\t\t\t       const char *, bfd_vma);\n-extern bfd_boolean bfd_elf_size_dynamic_sections\n-  (bfd *, const char *, const char *, const char *, const char *, const char *,\n-   const char * const *, struct bfd_link_info *, struct bfd_section **);\n-extern bfd_boolean bfd_elf_size_dynsym_hash_dynstr\n-  (bfd *, struct bfd_link_info *);\n-extern void bfd_elf_set_dt_needed_name\n-  (bfd *, const char *);\n-extern const char *bfd_elf_get_dt_soname\n-  (bfd *);\n-extern void bfd_elf_set_dyn_lib_class\n-  (bfd *, enum dynamic_lib_link_class);\n-extern int bfd_elf_get_dyn_lib_class\n-  (bfd *);\n-extern struct bfd_link_needed_list *bfd_elf_get_runpath_list\n-  (bfd *, struct bfd_link_info *);\n-extern int bfd_elf_discard_info\n-  (bfd *, struct bfd_link_info *);\n-extern unsigned int _bfd_elf_default_action_discarded\n-  (struct bfd_section *);\n-\n-/* Return an upper bound on the number of bytes required to store a\n-   copy of ABFD's program header table entries.  Return -1 if an error\n-   occurs; bfd_get_error will return an appropriate code.  */\n-extern long bfd_get_elf_phdr_upper_bound\n-  (bfd *abfd);\n-\n-/* Copy ABFD's program header table entries to *PHDRS.  The entries\n-   will be stored as an array of Elf_Internal_Phdr structures, as\n-   defined in include/elf/internal.h.  To find out how large the\n-   buffer needs to be, call bfd_get_elf_phdr_upper_bound.\n-\n-   Return the number of program header table entries read, or -1 if an\n-   error occurs; bfd_get_error will return an appropriate code.  */\n-extern int bfd_get_elf_phdrs\n-  (bfd *abfd, void *phdrs);\n-\n /* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n    reconstruct an ELF file by reading the segments out of remote\n    memory based on the ELF file header at EHDR_VMA and the ELF program\n@@ -662,9 +596,6 @@ extern bfd *bfd_elf_bfd_from_remote_memory\n    int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n \t\t\t      bfd_size_type len));\n \n-extern struct bfd_section *_bfd_elf_tls_setup\n-  (bfd *, struct bfd_link_info *);\n-\n extern struct bfd_section *\n _bfd_nearby_section (bfd *, struct bfd_section *, bfd_vma);\n "
    },
    {
      "sha": "0a83c173327c23b8078c124a890512d08ac00ab7",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -529,6 +529,13 @@ struct elf_sym_strtab\n   unsigned long destshndx_index;\n };\n \n+struct bfd_link_needed_list\n+{\n+  struct bfd_link_needed_list *next;\n+  bfd *by;\n+  const char *name;\n+};\n+\n /* ELF linker hash table.  */\n \n struct elf_link_hash_table\n@@ -1828,6 +1835,14 @@ typedef struct elf_section_list\n   struct elf_section_list *  next;\n } elf_section_list;\n \n+enum dynamic_lib_link_class {\n+  DYN_NORMAL = 0,\n+  DYN_AS_NEEDED = 1,\n+  DYN_DT_NEEDED = 2,\n+  DYN_NO_ADD_NEEDED = 4,\n+  DYN_NO_NEEDED = 8\n+};\n+\n /* Some private data is stashed away for future use using the tdata pointer\n    in the bfd structure.  */\n \n@@ -2287,6 +2302,37 @@ extern file_ptr _bfd_elf_assign_file_position_for_section\n extern bfd_boolean _bfd_elf_validate_reloc\n   (bfd *, arelent *);\n \n+extern bfd_boolean bfd_elf_record_link_assignment\n+  (bfd *, struct bfd_link_info *, const char *, bfd_boolean,\n+   bfd_boolean);\n+extern bfd_boolean bfd_elf_stack_segment_size (bfd *, struct bfd_link_info *,\n+\t\t\t\t\t       const char *, bfd_vma);\n+extern bfd_boolean bfd_elf_size_dynamic_sections\n+  (bfd *, const char *, const char *, const char *, const char *, const char *,\n+   const char * const *, struct bfd_link_info *, struct bfd_section **);\n+extern bfd_boolean bfd_elf_size_dynsym_hash_dynstr\n+  (bfd *, struct bfd_link_info *);\n+extern bfd_boolean bfd_elf_get_bfd_needed_list\n+  (bfd *, struct bfd_link_needed_list **);\n+extern struct bfd_link_needed_list *bfd_elf_get_needed_list\n+  (bfd *, struct bfd_link_info *);\n+extern void bfd_elf_set_dt_needed_name\n+  (bfd *, const char *);\n+extern const char *bfd_elf_get_dt_soname\n+  (bfd *);\n+extern void bfd_elf_set_dyn_lib_class\n+  (bfd *, enum dynamic_lib_link_class);\n+extern int bfd_elf_get_dyn_lib_class\n+  (bfd *);\n+extern struct bfd_link_needed_list *bfd_elf_get_runpath_list\n+  (bfd *, struct bfd_link_info *);\n+extern int bfd_elf_discard_info\n+  (bfd *, struct bfd_link_info *);\n+extern unsigned int _bfd_elf_default_action_discarded\n+  (struct bfd_section *);\n+extern struct bfd_section *_bfd_elf_tls_setup\n+  (bfd *, struct bfd_link_info *);\n+\n extern bfd_boolean _bfd_elf_link_create_dynamic_sections\n   (bfd *, struct bfd_link_info *);\n extern bfd_boolean _bfd_elf_omit_section_dynsym_default\n@@ -2557,6 +2603,22 @@ extern bfd_boolean _bfd_elf_ppc_set_arch (bfd *);\n extern bfd_boolean _bfd_elf_ppc_merge_fp_attributes\n   (bfd *, struct bfd_link_info *);\n \n+/* Return an upper bound on the number of bytes required to store a\n+   copy of ABFD's program header table entries.  Return -1 if an error\n+   occurs; bfd_get_error will return an appropriate code.  */\n+extern long bfd_get_elf_phdr_upper_bound\n+  (bfd *abfd);\n+\n+/* Copy ABFD's program header table entries to *PHDRS.  The entries\n+   will be stored as an array of Elf_Internal_Phdr structures, as\n+   defined in include/elf/internal.h.  To find out how large the\n+   buffer needs to be, call bfd_get_elf_phdr_upper_bound.\n+\n+   Return the number of program header table entries read, or -1 if an\n+   error occurs; bfd_get_error will return an appropriate code.  */\n+extern int bfd_get_elf_phdrs\n+  (bfd *abfd, void *phdrs);\n+\n /* Exported interface for writing elf corefile notes.  */\n extern char *elfcore_write_note\n   (bfd *, char *, int *, const char *, int, const void *, int);"
    },
    {
      "sha": "580eeb004735dc2b84e353dd63b539b981624f28",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -1,3 +1,7 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfdlink.h (enum notice_asneeded_action): Define.\n+\n 2019-09-17  Maxim Blinov  <maxim.blinov@embecosm.com>\n \n \t* opcode/riscv.h (riscv_insn_class): New enum."
    },
    {
      "sha": "bb7909a9e2f7ca961ea574f74013008a059a2cf7",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -42,6 +42,12 @@ enum bfd_link_discard\n   discard_all\t\t/* Discard all locals.  */\n };\n \n+enum notice_asneeded_action {\n+  notice_as_needed,\n+  notice_not_needed,\n+  notice_needed\n+};\n+\n /* Whether to generate ELF common symbols with the STT_COMMON type\n    during a relocatable link.  */\n enum bfd_link_elf_stt_common"
    },
    {
      "sha": "fe27434bf275a816546ac4177053bf82247a95b0",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* deffilep.y: Include bfdlink.h.\n+\t* ldelf.c: Likewise.\n+\t* ldelfgen.c: Likewise.\n+\t* ldver.c: Likewise.\n+\t* mri.c: Likewise.\n+\t* emultempl/irix.em: Don't include ld.h, ldmain.h, libiberty.h.\n+\tComment.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* emultempl/m68kelf.em: Include elf32-m68k.h."
    },
    {
      "sha": "92116e68a8e6d063704113235e70e8ae71503780",
      "filename": "ld/deffilep.y",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/deffilep.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/deffilep.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/deffilep.y?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -23,6 +23,7 @@\n #include \"libiberty.h\"\n #include \"safe-ctype.h\"\n #include \"bfd.h\"\n+#include \"bfdlink.h\"\n #include \"ld.h\"\n #include \"ldmisc.h\"\n #include \"deffile.h\""
    },
    {
      "sha": "e52c4a2d694987e7e86c1a98c9c9521de37deca0",
      "filename": "ld/emultempl/irix.em",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/emultempl/irix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/emultempl/irix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/irix.em?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -19,11 +19,10 @@\n # MA 02110-1301, USA.\n #\n \n-fragment <<EOF\n+# This file is sourced from elf.em, and defines extra irix specific\n+# functions.\n \n-#include \"ld.h\"\n-#include \"ldmain.h\"\n-#include \"libiberty.h\"\n+fragment <<EOF\n \n /* The native IRIX linker will always create a DT_SONAME for shared objects.\n    While this shouldn't really be necessary for ABI conformance, some versions"
    },
    {
      "sha": "3d12e3aa708e8129cbf32811741f3bdeed808971",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -23,6 +23,7 @@\n #include \"libiberty.h\"\n #include \"filenames.h\"\n #include \"safe-ctype.h\"\n+#include \"bfdlink.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "142a669db9cdc1688a3081132986222e2f6b5344",
      "filename": "ld/ldelfgen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldelfgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldelfgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.c?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -20,6 +20,7 @@\n \n #include \"sysdep.h\"\n #include \"bfd.h\"\n+#include \"bfdlink.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "7be0242ab20874c24e66e652d92262bd42640c30",
      "filename": "ld/ldver.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldver.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/ldver.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldver.c?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -21,7 +21,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdver.h\"\n-\n+#include \"bfdlink.h\"\n #include \"ld.h\"\n #include \"ldver.h\"\n #include \"ldexp.h\""
    },
    {
      "sha": "7f8d7064e83656614beff94a4074338039494797",
      "filename": "ld/mri.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/mri.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b4453c791106ab62011b59f97611f9ff21cda9f/ld/mri.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/mri.c?ref=0b4453c791106ab62011b59f97611f9ff21cda9f",
      "patch": "@@ -25,6 +25,7 @@\n \n #include \"sysdep.h\"\n #include \"bfd.h\"\n+#include \"bfdlink.h\"\n #include \"ld.h\"\n #include \"ldexp.h\"\n #include \"ldlang.h\""
    }
  ]
}