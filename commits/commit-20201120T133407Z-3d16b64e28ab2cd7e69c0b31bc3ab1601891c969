{
  "sha": "3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2QxNmI2NGUyOGFiMmNkN2U2OWMwYjMxYmMzYWIxNjAxODkxYzk2OQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-11-20T13:34:04Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-11-20T13:34:07Z"
    },
    "message": "bfd, include, ld, binutils, libctf: CTF should use the dynstr/sym\n\nThis is embarrassing.\n\nThe whole point of CTF is that it remains intact even after a binary is\nstripped, providing a compact mapping from symbols to types for\neverything in the externally-visible interface of an ELF object: it has\nconnections to the symbol table for that purpose, and to the string\ntable to avoid duplicating symbol names.  So it's a shame that the hooks\nI implemented last year served to hook it up to the .symtab and .strtab,\nwhich obviously disappear on strip, leaving any accompanying the CTF\ndict containing references to strings (and, soon, symbols) which don't\nexist any more because their containing strtab has been vaporized.  The\noriginal Solaris design used .dynsym and .dynstr (well, actually,\n.ldynsym, which has more symbols) which do not disappear. So should we.\n\nThankfully the work we did before serves as guide rails, and adjusting\nthings to use the .dynstr and .dynsym was fast and easy.  The only\nannoyance is that the dynsym is assembled inside elflink.c in a fairly\npiecemeal fashion, so that the easiest way to get the symbols out was to\nhook in before every call to swap_symbol_out (we also leave in a hook in\nfront of symbol additions to the .symtab because it seems plausible that\nwe might want to hook them in future too: for now that hook is unused).\nWe adjust things so that rather than being offered a whole hash table of\nsymbols at once, libctf is now given symbols one at a time, with st_name\nindexes already resolved and pointing at their final .dynstr offsets:\nit's now up to libctf to resolve these to names as needed using the\nstrtab info we pass it separately.\n\nSome bits might be contentious.  The ctf_new_dynstr callback takes an\nelf_internal_sym, and this remains an elf_internal_sym right down\nthrough the generic emulation layers into ldelfgen.  This is no worse\nthan the elf_sym_strtab we used to pass down, but in the future when we\ngain non-ELF CTF symtab support we might want to lower the\nelf_internal_sym to some other representation (perhaps a\nctf_link_symbol) in bfd or in ldlang_ctf_new_dynsym.  We rename the\n'apply_strsym' hooks to 'acquire_strings' instead, becuse they no longer\nhave anything to do with symbols.\n\nThere are some API changes to pieces of API which are technically public\nbut actually totally unused by anything and/or unused by anything but ld\nso they can change freely: the ctf_link_symbol gains new fields to allow\nsymbol names to be given as strtab offsets as well as strings, and a\nsymidx so that the symbol index can be passed in.  ctf_link_shuffle_syms\nloses its callback parameter: the idea now is that linkers call the new\nctf_link_add_linker_symbol for every symbol in .dynsym, feed in all the\nstrtab entries with ctf_link_add_strtab, and then a call to\nctf_link_shuffle_syms will apply both and arrange to use them to reorder\nthe CTF symtab at CTF serialization time (which is coming in the next\ncommit).\n\nInside libctf we have a new preamble flag CTF_F_DYNSTR which is always\nset in v3-format CTF dicts from this commit forwards: CTF dicts without\nthis flag are associated with .strtab like they used to be, so that old\ndicts' external strings don't turn to garbage when loaded by new libctf.\nDicts with this flag are associated with .dynstr and .dynsym instead.\n(The flag is not the next in sequence because this commit was written\nquite late: the missing flags will be filled in by the next commit.)\n\nTests forthcoming in a later commit in this series.\n\nbfd/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* elflink.c (elf_finalize_dynstr): Call examine_strtab after\n\tdynstr finalization.\n\t(elf_link_swap_symbols_out): Don't call it here.  Call\n\tctf_new_symbol before swap_symbol_out.\n\t(elf_link_output_extsym): Call ctf_new_dynsym before\n\tswap_symbol_out.\n\t(bfd_elf_final_link): Likewise.\n\t* elf.c (swap_out_syms): Pass in bfd_link_info.  Call\n\tctf_new_symbol before swap_symbol_out.\n\t(_bfd_elf_compute_section_file_positions): Adjust.\n\nbinutils/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* readelf.c (dump_section_as_ctf): Use .dynsym and .dynstr, not\n\t.symtab and .strtab.\n\ninclude/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* bfdlink.h (struct elf_sym_strtab): Replace with...\n\t(struct elf_internal_sym): ... this.\n\t(struct bfd_link_callbacks) <examine_strtab>: Take only a\n\tsymstrtab argument.\n\t<ctf_new_symbol>: New.\n\t<ctf_new_dynsym>: Likewise.\n\t* ctf-api.h (struct ctf_link_sym) <st_symidx>: New.\n\t<st_nameidx>: Likewise.\n\t<st_nameidx_set>: Likewise.\n\t(ctf_link_iter_symbol_f): Removed.\n\t(ctf_link_shuffle_syms): Remove most parameters, just takes a\n\tctf_dict_t now.\n\t(ctf_link_add_linker_symbol): New, split from\n\tctf_link_shuffle_syms.\n\t* ctf.h (CTF_F_DYNSTR): New.\n\t(CTF_F_MAX): Adjust.\n\nld/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ldelfgen.c (struct ctf_strsym_iter_cb_arg): Rename to...\n\t(struct ctf_strtab_iter_cb_arg): ... this, changing fields:\n\t<syms>: Remove.\n\t<symcount>: Remove.\n\t<symstrtab>: Rename to...\n\t<strtab>: ... this.\n\t(ldelf_ctf_strtab_iter_cb): Adjust.\n\t(ldelf_ctf_symbols_iter_cb): Remove.\n\t(ldelf_new_dynsym_for_ctf): New, tell libctf about a single\n\tsymbol.\n\t(ldelf_examine_strtab_for_ctf): Rename to...\n\t(ldelf_acquire_strings_for_ctf): ... this, only doing the strtab\n\tportion and not symbols.\n\t* ldelfgen.h: Adjust declarations accordingly.\n\t* ldemul.c (ldemul_examine_strtab_for_ctf): Rename to...\n\t(ldemul_acquire_strings_for_ctf): ... this.\n\t(ldemul_new_dynsym_for_ctf): New.\n\t* ldemul.h: Adjust declarations accordingly.\n\t* ldlang.c (ldlang_ctf_apply_strsym): Rename to...\n\t(ldlang_ctf_acquire_strings): ... this.\n\t(ldlang_ctf_new_dynsym): New.\n\t(lang_write_ctf): Call ldemul_new_dynsym_for_ctf with NULL to do\n\tthe actual symbol shuffle.\n\t* ldlang.h (struct elf_strtab_hash): Adjust accordingly.\n\t* ldmain.c (bfd_link_callbacks): Wire up new/renamed callbacks.\n\nlibctf/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-link.c (ctf_link_shuffle_syms): Adjust.\n\t(ctf_link_add_linker_symbol): New, unimplemented stub.\n\t* libctf.ver: Add it.\n\t* ctf-create.c (ctf_serialize): Set CTF_F_DYNSTR on newly-serialized\n\tdicts.\n\t* ctf-open-bfd.c (ctf_bfdopen_ctfsect): Check for the flag: open the\n\tsymtab/strtab if not present, dynsym/dynstr otherwise.\n\t* ctf-archive.c (ctf_arc_bufpreamble): New, get the preamble from\n\tsome arbitrary member of a CTF archive.\n\t* ctf-impl.h (ctf_arc_bufpreamble): Declare it.",
    "tree": {
      "sha": "437086ea5f07f3be6400e95422735a446ce28801",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/437086ea5f07f3be6400e95422735a446ce28801"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "83d59285d549dab64d1be496408c0e62f30030b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83d59285d549dab64d1be496408c0e62f30030b4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/83d59285d549dab64d1be496408c0e62f30030b4"
    }
  ],
  "stats": {
    "total": 496,
    "additions": 363,
    "deletions": 133
  },
  "files": [
    {
      "sha": "b2553a651663c65d6deeccb91cb69bec3fe710e8",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1,3 +1,16 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* elflink.c (elf_finalize_dynstr): Call examine_strtab after\n+\tdynstr finalization.\n+\t(elf_link_swap_symbols_out): Don't call it here.  Call\n+\tctf_new_symbol before swap_symbol_out.\n+\t(elf_link_output_extsym): Call ctf_new_dynsym before\n+\tswap_symbol_out.\n+\t(bfd_elf_final_link): Likewise.\n+\t* elf.c (swap_out_syms): Pass in bfd_link_info.  Call\n+\tctf_new_symbol before swap_symbol_out.\n+\t(_bfd_elf_compute_section_file_positions): Adjust.\n+\n 2020-11-19  Nick Clifton  <nickc@redhat.com>\n \n \tPR 26918"
    },
    {
      "sha": "9624df7271ea9deba7b451b10ac0d3af0c83a643",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -51,7 +51,8 @@ SECTION\n \n static int elf_sort_sections (const void *, const void *);\n static bfd_boolean assign_file_positions_except_relocs (bfd *, struct bfd_link_info *);\n-static bfd_boolean swap_out_syms (bfd *, struct elf_strtab_hash **, int) ;\n+static bfd_boolean swap_out_syms (bfd *, struct elf_strtab_hash **, int,\n+\t\t\t\t  struct bfd_link_info *);\n static bfd_boolean elf_parse_notes (bfd *abfd, char *buf, size_t size,\n \t\t\t\t    file_ptr offset, size_t align);\n \n@@ -4302,7 +4303,7 @@ _bfd_elf_compute_section_file_positions (bfd *abfd,\n       /* Non-zero if doing a relocatable link.  */\n       int relocatable_p = ! (abfd->flags & (EXEC_P | DYNAMIC));\n \n-      if (! swap_out_syms (abfd, &strtab, relocatable_p))\n+      if (! swap_out_syms (abfd, &strtab, relocatable_p, link_info))\n \treturn FALSE;\n     }\n \n@@ -8050,7 +8051,8 @@ _bfd_elf_copy_private_symbol_data (bfd *ibfd,\n static bfd_boolean\n swap_out_syms (bfd *abfd,\n \t       struct elf_strtab_hash **sttp,\n-\t       int relocatable_p)\n+\t       int relocatable_p,\n+\t       struct bfd_link_info *info)\n {\n   const struct elf_backend_data *bed;\n   unsigned int symcount;\n@@ -8402,6 +8404,12 @@ Unable to handle section index %x in ELF symbol.  Using ABS instead.\"),\n       else\n \telfsym->sym.st_name = _bfd_elf_strtab_offset (stt,\n \t\t\t\t\t\t      elfsym->sym.st_name);\n+      if (info && info->callbacks->ctf_new_symbol)\n+\tinfo->callbacks->ctf_new_symbol (elfsym->dest_index,\n+\t\t\t\t\t &elfsym->sym);\n+\n+      /* Inform the linker of the addition of this symbol.  */\n+\n       bed->s->swap_symbol_out (abfd, &elfsym->sym,\n \t\t\t       (outbound_syms\n \t\t\t\t+ (elfsym->dest_index"
    },
    {
      "sha": "7ba667a824821cbd6af9c134c1beb57c2c0cdc18",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 30,
      "deletions": 8,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -3779,6 +3779,11 @@ elf_finalize_dynstr (bfd *output_bfd, struct bfd_link_info *info)\n   _bfd_elf_strtab_finalize (dynstr);\n   size = _bfd_elf_strtab_size (dynstr);\n \n+  /* Allow the linker to examine the dynsymtab now it's fully populated.  */\n+\n+  if (info->callbacks->examine_strtab)\n+    info->callbacks->examine_strtab (dynstr);\n+\n   bed = get_elf_backend_data (dynobj);\n   sdyn = bfd_get_linker_section (dynobj, \".dynamic\");\n   BFD_ASSERT (sdyn != NULL);\n@@ -9853,6 +9858,7 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n \t}\n     }\n \n+  /* Now swap out the symbols.  */\n   for (i = 0; i < hash_table->strtabcount; i++)\n     {\n       struct elf_sym_strtab *elfsym = &hash_table->strtab[i];\n@@ -9862,6 +9868,13 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n \telfsym->sym.st_name\n \t  = (unsigned long) _bfd_elf_strtab_offset (flinfo->symstrtab,\n \t\t\t\t\t\t    elfsym->sym.st_name);\n+\n+      /* Inform the linker of the addition of this symbol.  */\n+\n+      if (flinfo->info->callbacks->ctf_new_symbol)\n+\tflinfo->info->callbacks->ctf_new_symbol (elfsym->dest_index,\n+\t\t\t\t\t\t &elfsym->sym);\n+\n       bed->s->swap_symbol_out (flinfo->output_bfd, &elfsym->sym,\n \t\t\t       ((bfd_byte *) symbuf\n \t\t\t\t+ (elfsym->dest_index\n@@ -9870,14 +9883,6 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n \t\t\t\t+ elfsym->destshndx_index));\n     }\n \n-  /* Allow the linker to examine the strtab and symtab now they are\n-     populated.  */\n-\n-  if (flinfo->info->callbacks->examine_strtab)\n-    flinfo->info->callbacks->examine_strtab (hash_table->strtab,\n-\t\t\t\t\t     hash_table->strtabcount,\n-\t\t\t\t\t     flinfo->symstrtab);\n-\n   hdr = &elf_tdata (flinfo->output_bfd)->symtab_hdr;\n   pos = hdr->sh_offset + hdr->sh_size;\n   amt = hash_table->strtabcount * bed->s->sizeof_sym;\n@@ -10485,6 +10490,12 @@ elf_link_output_extsym (struct bfd_hash_entry *bh, void *data)\n \t  eoinfo->failed = TRUE;\n \t  return FALSE;\n \t}\n+\n+      /* Inform the linker of the addition of this symbol.  */\n+\n+      if (flinfo->info->callbacks->ctf_new_dynsym)\n+\tflinfo->info->callbacks->ctf_new_dynsym (h->dynindx, &sym);\n+\n       bed->s->swap_symbol_out (flinfo->output_bfd, &sym, esym, 0);\n \n       if (flinfo->hash_sec != NULL)\n@@ -12761,6 +12772,12 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t\t}\n \t      sym.st_value = s->vma;\n \t      dest = dynsym + dynindx * bed->s->sizeof_sym;\n+\n+\t      /* Inform the linker of the addition of this symbol.  */\n+\n+\t      if (info->callbacks->ctf_new_dynsym)\n+\t\tinfo->callbacks->ctf_new_dynsym (dynindx, &sym);\n+\n \t      bed->s->swap_symbol_out (abfd, &sym, dest, 0);\n \t    }\n \t}\n@@ -12799,6 +12816,11 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t\t\t\t  + e->isym.st_value);\n \t\t}\n \n+\t      /* Inform the linker of the addition of this symbol.  */\n+\n+\t      if (info->callbacks->ctf_new_dynsym)\n+\t\tinfo->callbacks->ctf_new_dynsym (e->dynindx, &sym);\n+\n \t      dest = dynsym + e->dynindx * bed->s->sizeof_sym;\n \t      bed->s->swap_symbol_out (abfd, &sym, dest, 0);\n \t    }"
    },
    {
      "sha": "f899b6d3f132e6104cfd0f814c2c0e760506403a",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* readelf.c (dump_section_as_ctf): Use .dynsym and .dynstr, not\n+\t.symtab and .strtab.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* objdump.c (dump_ctf): Report errors from ctf_archive_iter."
    },
    {
      "sha": "e4d96bb9b34aac0a48434082df8c247c3c03ba64",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -14695,10 +14695,10 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n   ctfsect.cts_data = data;\n \n   if (!dump_ctf_symtab_name)\n-    dump_ctf_symtab_name = strdup (\".symtab\");\n+    dump_ctf_symtab_name = strdup (\".dynsym\");\n \n   if (!dump_ctf_strtab_name)\n-    dump_ctf_strtab_name = strdup (\".strtab\");\n+    dump_ctf_strtab_name = strdup (\".dynstr\");\n \n   if (dump_ctf_symtab_name && dump_ctf_symtab_name[0] != 0)\n     {"
    },
    {
      "sha": "5c0f6b9a8d628146f6ae5fcc2f0b72e76378d593",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1,3 +1,22 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* bfdlink.h (struct elf_sym_strtab): Replace with...\n+\t(struct elf_internal_sym): ... this.\n+\t(struct bfd_link_callbacks) <examine_strtab>: Take only a\n+\tsymstrtab argument.\n+\t<ctf_new_symbol>: New.\n+\t<ctf_new_dynsym>: Likewise.\n+\t* ctf-api.h (struct ctf_link_sym) <st_symidx>: New.\n+\t<st_nameidx>: Likewise.\n+\t<st_nameidx_set>: Likewise.\n+\t(ctf_link_iter_symbol_f): Removed.\n+\t(ctf_link_shuffle_syms): Remove most parameters, just takes a\n+\tctf_dict_t now.\n+\t(ctf_link_add_linker_symbol): New, split from\n+\tctf_link_shuffle_syms.\n+\t* ctf.h (CTF_F_DYNSTR): New.\n+\t(CTF_F_MAX): Adjust.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ctf_arc_open_by_name): Rename to..."
    },
    {
      "sha": "b92ef5408d54400a66ae6f14fb6703440d836e53",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -671,7 +671,7 @@ struct bfd_link_info\n /* Some forward-definitions used by some callbacks.  */\n \n struct elf_strtab_hash;\n-struct elf_sym_strtab;\n+struct elf_internal_sym;\n \n /* This structures holds a set of callback functions.  These are called\n    by the BFD linker routines.  */\n@@ -795,11 +795,17 @@ struct bfd_link_callbacks\n      asection * current_section, asection * previous_section,\n      bfd_boolean new_segment);\n   /* This callback provides a chance for callers of the BFD to examine the\n-     ELF string table and symbol table once they are complete and indexes and\n-     offsets assigned.  */\n+     ELF (dynamic) string table once it is complete.  */\n   void (*examine_strtab)\n-    (struct elf_sym_strtab *syms, bfd_size_type symcount,\n-     struct elf_strtab_hash *symstrtab);\n+    (struct elf_strtab_hash *symstrtab);\n+  /* This callback is called just before a symbol is swapped out, so that the\n+     CTF machinery can look up symbols during construction.  The name is\n+     already an external strtab offset at this point.  */\n+  void (*ctf_new_symbol)\n+    (int symidx, struct elf_internal_sym *sym);\n+  /* Likewise, for dynamic symbols.  */\n+  void (*ctf_new_dynsym)\n+    (int symidx, struct elf_internal_sym *sym);\n   /* This callback should emit the CTF section into a non-loadable section in\n      the output BFD named .ctf or a name beginning with \".ctf.\".  */\n   void (*emit_ctf)"
    },
    {
      "sha": "93bd5f359bfbd33b592b60dc61cff04afb557fbb",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -65,14 +65,20 @@ typedef struct ctf_sect\n } ctf_sect_t;\n \n /* A minimal symbol extracted from a linker's internal symbol table\n-   representation.  */\n+   representation.  The symbol name can be given either via st_name or via a\n+   strtab offset in st_nameidx, which corresponds to one of the string offsets\n+   communicated via the ctf_link_add_strtab callback.  */\n \n typedef struct ctf_link_sym\n {\n-  /* The st_name will not be accessed outside the call to\n-     ctf_link_shuffle_syms().  */\n+  /* The st_name and st_nameidx will not be accessed outside the call to\n+     ctf_link_shuffle_syms().  If you set st_nameidx to offset zero, make sure\n+     to set st_nameidx_set as well.  */\n \n   const char *st_name;\n+  size_t st_nameidx;\n+  int st_nameidx_set;\n+  uint32_t st_symidx;\n   uint32_t st_shndx;\n   uint32_t st_type;\n   uint32_t st_value;\n@@ -485,10 +491,8 @@ extern int ctf_link (ctf_dict_t *, int flags);\n typedef const char *ctf_link_strtab_string_f (uint32_t *offset, void *arg);\n extern int ctf_link_add_strtab (ctf_dict_t *, ctf_link_strtab_string_f *,\n \t\t\t\tvoid *);\n-typedef ctf_link_sym_t *ctf_link_iter_symbol_f (ctf_link_sym_t *dest,\n-\t\t\t\t\t\tvoid *arg);\n-extern int ctf_link_shuffle_syms (ctf_dict_t *, ctf_link_iter_symbol_f *,\n-\t\t\t\t  void *);\n+extern int ctf_link_add_linker_symbol (ctf_dict_t *, ctf_link_sym_t *);\n+extern int ctf_link_shuffle_syms (ctf_dict_t *);\n extern unsigned char *ctf_link_write (ctf_dict_t *, size_t *size,\n \t\t\t\t      size_t threshold);\n "
    },
    {
      "sha": "d0a21f185e1d20371681af770d63d49219cb5d23",
      "filename": "include/ctf.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ctf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/include/ctf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -200,7 +200,8 @@ typedef struct ctf_header\n #define CTF_VERSION CTF_VERSION_3 /* Current version.  */\n \n #define CTF_F_COMPRESS\t0x1\t\t/* Data buffer is compressed by libctf.  */\n-#define CTF_F_MAX\tCTF_F_COMPRESS\t/* The greatest flag value in use.  */\n+#define CTF_F_DYNSTR 0x8\t\t/* Strings come from .dynstr.  */\n+#define CTF_F_MAX (CTF_F_COMPRESS | CTF_F_DYNSTR)\n \n typedef struct ctf_lblent\n {"
    },
    {
      "sha": "f8265f4fc30c6f2c54911b70da69e315eb141ec4",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1,3 +1,45 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ldelfgen.c (struct ctf_strsym_iter_cb_arg): Rename to...\n+\t(struct ctf_strtab_iter_cb_arg): ... this, changing fields:\n+\t<syms>: Remove.\n+\t<symcount>: Remove.\n+\t<symstrtab>: Rename to...\n+\t<strtab>: ... this.\n+\t(ldelf_ctf_strtab_iter_cb): Adjust.\n+\t(ldelf_ctf_symbols_iter_cb): Remove.\n+\t(ldelf_new_dynsym_for_ctf): New, tell libctf about a single\n+\tsymbol.\n+\t(ldelf_examine_strtab_for_ctf): Rename to...\n+\t(ldelf_acquire_strings_for_ctf): ... this, only doing the strtab\n+\tportion and not symbols.\n+\t* ldelfgen.h: Adjust declarations accordingly.\n+\t* ldemul.c (ldemul_examine_strtab_for_ctf): Rename to...\n+\t(ldemul_acquire_strings_for_ctf): ... this.\n+\t(ldemul_new_dynsym_for_ctf): New.\n+\t* ldemul.h: Adjust declarations accordingly.\n+\t* ldlang.c (ldlang_ctf_apply_strsym): Rename to...\n+\t(ldlang_ctf_acquire_strings): ... this.\n+\t(ldlang_ctf_new_dynsym): New.\n+\t(lang_write_ctf): Call ldemul_new_dynsym_for_ctf with NULL to do\n+\tthe actual symbol shuffle.\n+\t* ldlang.h (struct elf_strtab_hash): Adjust accordingly.\n+\t* ldmain.c (bfd_link_callbacks): Wire up new/renamed callbacks.\n+\n+\t* emultempl/aix.em: Adjust for emulation changes:\n+\tldemul_examine_strtab_for_ctf renamed to\n+\tldemul_acquire_strings_for_ctf, new ldemul_new_dynsym_for_ctf.\n+\t* emultempl/armcoff.em: Likewise.\n+\t* emultempl/beos.em: Likewise.\n+\t* emultempl/elf.em: Likewise.\n+\t* emultempl/elf-generic.em: Likewise.\n+\t* emultempl/linux.em: Likewise.\n+\t* emultempl/msp430.em: Likewise.\n+\t* emultempl/pe.em: Likewise.\n+\t* emultempl/pep.em: Likewise.\n+\t* emultempl/ticoff.em: Likewise.\n+\t* emultempl/vanilla.em: Likewise.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ldlang.c (ctf_output): This is a ctf_dict_t now."
    },
    {
      "sha": "df7471bc4907949bf32b7c2af4471ad6d9e64273",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1595,7 +1595,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation = {\n   NULL,\t\t\t\t/* new_vers_pattern */\n   NULL,\t\t\t\t/* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   gld${EMULATION_NAME}_print_symbol\n };\n EOF"
    },
    {
      "sha": "3a86af9ad27d5da21c37cd2959ee45ea6ec33fb2",
      "filename": "ld/emultempl/armcoff.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/armcoff.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/armcoff.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/armcoff.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -286,7 +286,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern */\n   NULL,\t/* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "d025f21f7772b181adb5befec07033b472a4af22",
      "filename": "ld/emultempl/beos.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/beos.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/beos.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/beos.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -768,7 +768,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern */\n   NULL,\t/* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "a4041486577496f48aa012646286aec4675e7f62",
      "filename": "ld/emultempl/elf-generic.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/elf-generic.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/elf-generic.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf-generic.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -28,4 +28,5 @@ EOF\n # Put these extra routines in ld${EMULATION_NAME}_emulation\n #\n LDEMUL_EMIT_CTF_EARLY=ldelf_emit_ctf_early\n-LDEMUL_EXAMINE_STRTAB_FOR_CTF=ldelf_examine_strtab_for_ctf\n+LDEMUL_ACQUIRE_STRINGS_FOR_CTF=ldelf_acquire_strings_for_ctf\n+LDEMUL_NEW_DYNSYM_FOR_CTF=ldelf_new_dynsym_for_ctf"
    },
    {
      "sha": "cfdf60e1365ee8e84a25b283c8d43dd7b303e2f0",
      "filename": "ld/emultempl/elf.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -931,7 +931,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n   ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "5a69c011b6adce890b5e5c257be3d1f2e49fa984",
      "filename": "ld/emultempl/generic.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/generic.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/generic.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/generic.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -161,7 +161,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n   ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "0cff374416093db23850353a6a208447d80b0e9f",
      "filename": "ld/emultempl/linux.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/linux.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/linux.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/linux.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -219,7 +219,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern */\n   NULL,\t/* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "31cba4a39786e9a4b585339483a8cff1b713fdd3",
      "filename": "ld/emultempl/msp430.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/msp430.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/msp430.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/msp430.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -936,7 +936,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n   ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "e07dc9cb002e5853c383dbb83eddf89c469fb00c",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -2415,7 +2415,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern.  */\n   NULL,\t/* extra_map_file_text.  */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "74468be0ccb5743af47ea9b26bd85aed38f67a91",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -2235,7 +2235,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern.  */\n   NULL,\t/* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "1cf82beb3c61ebfc2d1cc1adb501353d18475cc7",
      "filename": "ld/emultempl/ticoff.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/ticoff.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/ticoff.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ticoff.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -186,7 +186,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* new_vers_pattern */\n   NULL,  /* extra_map_file_text */\n   ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL},\n+  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n+  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n   ${LDEMUL_PRINT_SYMBOL-NULL}\n };\n EOF"
    },
    {
      "sha": "324e38acd861b5971a471757d8c868a22bd90940",
      "filename": "ld/emultempl/vanilla.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/vanilla.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/emultempl/vanilla.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/vanilla.em?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -87,7 +87,8 @@ struct ld_emulation_xfer_struct ld_vanilla_emulation =\n   NULL,\t/* new_vers_pattern */\n   NULL,\t/* extra_map_file_text */\n   NULL, /* emit_ctf_early */\n-  NULL, /* examine_strtab_for_ctf */\n+  NULL, /* acquire_strings_for_ctf */\n+  NULL, /* new_dynsym_for_ctf */\n   NULL  /* print_symbol */\n };\n EOF"
    },
    {
      "sha": "ca531ee7cfe54eaf1a25f11dcda04fe4d44517d3",
      "filename": "ld/ldelfgen.c",
      "status": "modified",
      "additions": 57,
      "deletions": 53,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldelfgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldelfgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -28,6 +28,7 @@\n #include \"ldexp.h\"\n #include \"ldlang.h\"\n #include \"elf-bfd.h\"\n+#include \"elf/internal.h\"\n #include \"ldelfgen.h\"\n \n void\n@@ -103,11 +104,9 @@ ldelf_emit_ctf_early (void)\n /* Callbacks used to map from bfd types to libctf types, under libctf's\n    control.  */\n \n-struct ctf_strsym_iter_cb_arg\n+struct ctf_strtab_iter_cb_arg\n {\n-  struct elf_sym_strtab *syms;\n-  bfd_size_type symcount;\n-  struct elf_strtab_hash *symstrtab;\n+  struct elf_strtab_hash *strtab;\n   size_t next_i;\n   size_t next_idx;\n };\n@@ -121,20 +120,20 @@ ldelf_ctf_strtab_iter_cb (uint32_t *offset, void *arg_)\n   bfd_size_type off;\n   const char *ret;\n \n-  struct ctf_strsym_iter_cb_arg *arg =\n-    (struct ctf_strsym_iter_cb_arg *) arg_;\n+  struct ctf_strtab_iter_cb_arg *arg =\n+    (struct ctf_strtab_iter_cb_arg *) arg_;\n \n   /* There is no zeroth string.  */\n   if (arg->next_i == 0)\n     arg->next_i = 1;\n \n-  if (arg->next_i >= _bfd_elf_strtab_len (arg->symstrtab))\n+  if (arg->next_i >= _bfd_elf_strtab_len (arg->strtab))\n     {\n       arg->next_i = 0;\n       return NULL;\n     }\n \n-  ret = _bfd_elf_strtab_str (arg->symstrtab, arg->next_i++, &off);\n+  ret = _bfd_elf_strtab_str (arg->strtab, arg->next_i++, &off);\n   *offset = off;\n \n   /* If we've overflowed, we cannot share any further strings: the CTF\n@@ -145,69 +144,74 @@ ldelf_ctf_strtab_iter_cb (uint32_t *offset, void *arg_)\n   return ret;\n }\n \n-/* Return symbols from the symbol table to libctf, one by one.  We assume (and\n-   assert) that the symbols in the elf_link_hash_table are in strictly ascending\n-   order, and that none will be added in between existing ones.  Returns NULL\n-   when iteration is complete.  */\n-\n-static struct ctf_link_sym *\n-ldelf_ctf_symbols_iter_cb (struct ctf_link_sym *dest,\n-\t\t\t\t\t   void *arg_)\n+void\n+ldelf_acquire_strings_for_ctf\n+  (struct ctf_dict *ctf_output, struct elf_strtab_hash *strtab)\n {\n-  struct ctf_strsym_iter_cb_arg *arg =\n-    (struct ctf_strsym_iter_cb_arg *) arg_;\n+  struct ctf_strtab_iter_cb_arg args = { strtab, 0, 0 };\n+  if (!ctf_output)\n+    return;\n \n-  if (arg->next_i > arg->symcount)\n+  if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour)\n     {\n-      arg->next_i = 0;\n-      arg->next_idx = 0;\n-      return NULL;\n+      if (ctf_link_add_strtab (ctf_output, ldelf_ctf_strtab_iter_cb,\n+\t\t\t       &args) < 0)\n+\teinfo (_(\"%F%P: warning: CTF strtab association failed; strings will \"\n+\t\t \"not be shared: %s\\n\"),\n+\t       ctf_errmsg (ctf_errno (ctf_output)));\n     }\n-\n-  ASSERT (arg->syms[arg->next_i].dest_index == arg->next_idx);\n-  dest->st_name = _bfd_elf_strtab_str (arg->symstrtab, arg->next_i, NULL);\n-  dest->st_shndx = arg->syms[arg->next_i].sym.st_shndx;\n-  dest->st_type = ELF_ST_TYPE (arg->syms[arg->next_i].sym.st_info);\n-  dest->st_value = arg->syms[arg->next_i].sym.st_value;\n-  arg->next_i++;\n-  return dest;\n }\n \n void\n-ldelf_examine_strtab_for_ctf\n-  (struct ctf_dict *ctf_output, struct elf_sym_strtab *syms,\n-   bfd_size_type symcount, struct elf_strtab_hash *symstrtab)\n+ldelf_new_dynsym_for_ctf (struct ctf_dict *ctf_output, int symidx,\n+\t\t\t  struct elf_internal_sym *sym)\n {\n-  struct ctf_strsym_iter_cb_arg args = { syms, symcount, symstrtab,\n-\t\t\t\t\t  0, 0 };\n-   if (!ctf_output)\n+  ctf_link_sym_t lsym;\n+\n+  if (!ctf_output)\n      return;\n \n-   if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n-       && !bfd_link_relocatable (&link_info))\n+  /* New symbol.  */\n+  if (sym != NULL)\n     {\n-      if (ctf_link_add_strtab (ctf_output, ldelf_ctf_strtab_iter_cb,\n-\t\t\t       &args) < 0)\n-\teinfo (_(\"%F%P: warning: CTF strtab association failed; strings will \"\n-\t\t \"not be shared: %s\\n\"),\n-\t       ctf_errmsg (ctf_errno (ctf_output)));\n+      lsym.st_name = NULL;\n+      lsym.st_nameidx = sym->st_name;\n+      lsym.st_nameidx_set = 1;\n+      lsym.st_symidx = symidx;\n+      lsym.st_shndx = sym->st_shndx;\n+      lsym.st_type = ELF_ST_TYPE (sym->st_info);\n+      lsym.st_value = sym->st_value;\n+      if (ctf_link_add_linker_symbol (ctf_output, &lsym) < 0)\n+\t{\n+\t  einfo (_(\"%F%P: warning: CTF symbol addition failed; CTF will \"\n+\t\t   \"not be tied to symbols: %s\\n\"),\n+\t\t ctf_errmsg (ctf_errno (ctf_output)));\n+\t}\n+    }\n+  else\n+    {\n+      /* Shuffle all the symbols.  */\n \n-      if (ctf_link_shuffle_syms (ctf_output, ldelf_ctf_symbols_iter_cb,\n-\t\t\t\t &args) < 0)\n-\teinfo (_(\"%F%P: warning: CTF symbol shuffling failed; slight space \"\n-\t\t \"cost: %s\\n\"), ctf_errmsg (ctf_errno (ctf_output)));\n+      if (ctf_link_shuffle_syms (ctf_output) < 0)\n+\teinfo (_(\"%F%P: warning: CTF symbol shuffling failed; CTF will \"\n+\t\t \"not be tied to symbols: %s\\n\"),\n+\t       ctf_errmsg (ctf_errno (ctf_output)));\n     }\n }\n #else\n-extern int ldelf_emit_ctf_early (void)\n+int\n+ldelf_emit_ctf_early (void)\n {\n   return 0;\n }\n \n-extern void ldelf_examine_strtab_for_ctf\n-  (struct ctf_dict *ctf_output ATTRIBUTE_UNUSED,\n-   struct elf_sym_strtab *syms ATTRIBUTE_UNUSED,\n-   bfd_size_type symcount ATTRIBUTE_UNUSED,\n-   struct elf_strtab_hash *symstrtab ATTRIBUTE_UNUSED)\n+void\n+ldelf_acquire_strings_for_ctf (struct ctf_dict *ctf_output ATTRIBUTE_UNUSED,\n+\t\t\t       struct elf_strtab_hash *strtab ATTRIBUTE_UNUSED)\n+{}\n+void\n+ldelf_new_dynsym_for_ctf (struct ctf_dict *ctf_output ATTRIBUTE_UNUSED,\n+\t\t\t  int symidx ATTRIBUTE_UNUSED,\n+\t\t\t  struct elf_internal_sym *sym ATTRIBUTE_UNUSED)\n {}\n #endif"
    },
    {
      "sha": "3392c2b81a7b08b77dc4546bf702ad84d9c99b43",
      "filename": "ld/ldelfgen.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldelfgen.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldelfgen.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -18,12 +18,13 @@\n    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n    MA 02110-1301, USA.  */\n \n-struct elf_sym_strtab;\n+struct elf_internal_sym;\n struct elf_strtab_hash;\n struct ctf_dict;\n \n extern void ldelf_map_segments (bfd_boolean);\n extern int ldelf_emit_ctf_early (void);\n-extern void ldelf_examine_strtab_for_ctf\n-  (struct ctf_dict *ctf_output, struct elf_sym_strtab *syms,\n-   bfd_size_type symcount, struct elf_strtab_hash *symstrtab);\n+extern void ldelf_acquire_strings_for_ctf\n+  (struct ctf_dict *ctf_output, struct elf_strtab_hash *strtab);\n+extern void ldelf_new_dynsym_for_ctf\n+  (struct ctf_dict *ctf_output, int symidx, struct elf_internal_sym *sym);"
    },
    {
      "sha": "920afc8d6297521284f173f954ce8c0324bc7e72",
      "filename": "ld/ldemul.c",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldemul.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldemul.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -418,15 +418,19 @@ ldemul_emit_ctf_early (void)\n }\n \n void\n-ldemul_examine_strtab_for_ctf (struct ctf_dict *ctf_output,\n-\t\t\t       struct elf_sym_strtab *syms,\n-\t\t\t       bfd_size_type symcount,\n-\t\t\t       struct elf_strtab_hash *symstrtab)\n+ldemul_acquire_strings_for_ctf (struct ctf_dict *ctf_output,\n+\t\t\t\tstruct elf_strtab_hash *symstrtab)\n+{\n+  if (ld_emulation->acquire_strings_for_ctf)\n+    ld_emulation->acquire_strings_for_ctf (ctf_output, symstrtab);\n+}\n \n+void\n+ldemul_new_dynsym_for_ctf (struct ctf_dict *ctf_output, int symidx,\n+\t\t\t   struct elf_internal_sym *sym)\n {\n-  if (ld_emulation->examine_strtab_for_ctf)\n-    ld_emulation->examine_strtab_for_ctf (ctf_output, syms,\n-\t\t\t\t\t  symcount, symstrtab);\n+  if (ld_emulation->new_dynsym_for_ctf)\n+    ld_emulation->new_dynsym_for_ctf (ctf_output, symidx, sym);\n }\n \n bfd_boolean"
    },
    {
      "sha": "0b9653ed19375fe0578c3e732459c442d74e1b70",
      "filename": "ld/ldemul.h",
      "status": "modified",
      "additions": 20,
      "deletions": 10,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldemul.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldemul.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -109,9 +109,11 @@ extern void ldemul_extra_map_file_text\n extern int ldemul_emit_ctf_early\n   (void);\n /* Called from per-target code to examine the strtab and symtab.  */\n-extern void ldemul_examine_strtab_for_ctf\n-  (struct ctf_dict *, struct elf_sym_strtab *, bfd_size_type,\n-   struct elf_strtab_hash *);\n+extern void ldemul_acquire_strings_for_ctf\n+  (struct ctf_dict *, struct elf_strtab_hash *);\n+extern void ldemul_new_dynsym_for_ctf\n+  (struct ctf_dict *, int symidx, struct elf_internal_sym *);\n+\n extern bfd_boolean ldemul_print_symbol\n   (struct bfd_link_hash_entry *hash_entry, void *ptr);\n \n@@ -230,14 +232,22 @@ typedef struct ld_emulation_xfer_struct {\n   int (*emit_ctf_early)\n     (void);\n \n-  /* Called to examine the string and symbol table late enough in linking that\n-     they are finally laid out.  If emit_ctf_early returns true, this is not\n-     called and ldemul_maybe_emit_ctf() emits CTF in 'early' mode: otherwise, it\n-     waits until 'late'. (Late mode needs explicit support at per-target link\n-     time to get called at all).  If set, called by ld when the examine_strtab\n+  /* Called to examine the string table late enough in linking that it is\n+     finally laid out.  If emit_ctf_early returns true, this is not called, and\n+     ldemul_maybe_emit_ctf emits CTF in 'early' mode: otherwise, it waits\n+     until 'late'. (Late mode needs explicit support at per-target link time to\n+     get called at all).  If set, called by ld when the examine_strtab\n      bfd_link_callback is invoked by per-target code.  */\n-  void (*examine_strtab_for_ctf) (struct ctf_dict *, struct elf_sym_strtab *,\n-\t\t\t\t  bfd_size_type, struct elf_strtab_hash *);\n+  void (*acquire_strings_for_ctf) (struct ctf_dict *, struct elf_strtab_hash *);\n+\n+  /* Called when a new symbol is added to the dynamic symbol table.  If\n+     emit_ctf_early returns true, this is not called, and ldemul_maybe_emit_ctf\n+     emits CTF in 'early' mode: otherwise, it waits until 'late'. (Late mode\n+     needs explicit support at per-target link time to get called at all).  If\n+     set, called by ld when the ctf_new_symbol bfd_link_callback is invoked by\n+     per-target code.  Called with a NULL symbol when no further symbols will be\n+     provided.  */\n+  void (*new_dynsym_for_ctf) (struct ctf_dict *, int, struct elf_internal_sym *);\n \n   /* Called when printing a symbol to the map file.   AIX uses this\n      hook to flag gc'd symbols.  */"
    },
    {
      "sha": "b70937a1f217b2132955916e3f19eb2e3d708047",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 21,
      "deletions": 10,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -3826,14 +3826,20 @@ lang_merge_ctf (void)\n   lang_ctf_errs_warnings (ctf_output);\n }\n \n-/* Let the emulation examine the symbol table and strtab to help it optimize the\n-   CTF, if supported.  */\n+/* Let the emulation acquire strings from the dynamic strtab to help it optimize\n+   the CTF, if supported.  */\n \n void\n-ldlang_ctf_apply_strsym (struct elf_sym_strtab *syms, bfd_size_type symcount,\n-\t\t\t struct elf_strtab_hash *symstrtab)\n+ldlang_ctf_acquire_strings (struct elf_strtab_hash *dynstrtab)\n {\n-  ldemul_examine_strtab_for_ctf (ctf_output, syms, symcount, symstrtab);\n+  ldemul_acquire_strings_for_ctf (ctf_output, dynstrtab);\n+}\n+\n+/* Inform the emulation about the addition of a new dynamic symbol, in BFD\n+   internal format.  */\n+void ldlang_ctf_new_dynsym (int symidx, struct elf_internal_sym *sym)\n+{\n+  ldemul_new_dynsym_for_ctf (ctf_output, symidx, sym);\n }\n \n /* Write out the CTF section.  Called early, if the emulation isn't going to\n@@ -3860,6 +3866,11 @@ lang_write_ctf (int late)\n \treturn;\n     }\n \n+  /* Inform the emulation that all the symbols that will be received have\n+     been.  */\n+\n+  ldemul_new_dynsym_for_ctf (ctf_output, 0, NULL);\n+\n   /* Emit CTF.  */\n \n   output_sect = bfd_get_section_by_name (link_info.output_bfd, \".ctf\");\n@@ -3922,11 +3933,11 @@ ldlang_open_ctf (void)\n \n static void lang_merge_ctf (void) {}\n void\n-ldlang_ctf_apply_strsym (struct elf_sym_strtab *syms ATTRIBUTE_UNUSED,\n-\t\t\t bfd_size_type symcount ATTRIBUTE_UNUSED,\n-\t\t\t struct elf_strtab_hash *symstrtab ATTRIBUTE_UNUSED)\n-{\n-}\n+ldlang_ctf_acquire_strings (struct elf_strtab_hash *dynstrtab\n+\t\t\t    ATTRIBUTE_UNUSED) {}\n+void\n+ldlang_ctf_new_dynsym (int symidx ATTRIBUTE_UNUSED,\n+\t\t       struct elf_internal_sym *sym ATTRIBUTE_UNUSED) {}\n static void lang_write_ctf (int late ATTRIBUTE_UNUSED) {}\n void ldlang_write_ctf_late (void) {}\n #endif"
    },
    {
      "sha": "6675c57d74102b1f09ef996428ad996c18139f38",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -689,8 +689,10 @@ extern bfd_boolean load_symbols\n \n struct elf_sym_strtab;\n struct elf_strtab_hash;\n-extern void ldlang_ctf_apply_strsym\n-  (struct elf_sym_strtab *, bfd_size_type, struct elf_strtab_hash *);\n+extern void ldlang_ctf_acquire_strings\n+  (struct elf_strtab_hash *);\n+extern void ldlang_ctf_new_dynsym\n+  (int symidx, struct elf_internal_sym *);\n extern void ldlang_write_ctf_late\n   (void);\n extern bfd_boolean"
    },
    {
      "sha": "f8a03c6648fbce4f9f5798faa6a3665cb98e6a3c",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -151,7 +151,9 @@ static struct bfd_link_callbacks link_callbacks =\n   info_msg,\n   minfo,\n   ldlang_override_segment_assignment,\n-  ldlang_ctf_apply_strsym,\n+  ldlang_ctf_acquire_strings,\n+  NULL,\n+  ldlang_ctf_new_dynsym,\n   ldlang_write_ctf_late\n };\n "
    },
    {
      "sha": "6670a6a8e1160de719e665deb53dca1f0601e02b",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1,3 +1,16 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-link.c (ctf_link_shuffle_syms): Adjust.\n+\t(ctf_link_add_linker_symbol): New, unimplemented stub.\n+\t* libctf.ver: Add it.\n+\t* ctf-create.c (ctf_serialize): Set CTF_F_DYNSTR on newly-serialized\n+\tdicts.\n+\t* ctf-open-bfd.c (ctf_bfdopen_ctfsect): Check for the flag: open the\n+\tsymtab/strtab if not present, dynsym/dynstr otherwise.\n+\t* ctf-archive.c (ctf_arc_bufpreamble): New, get the preamble from\n+\tsome arbitrary member of a CTF archive.\n+\t* ctf-impl.h (ctf_arc_bufpreamble): Declare it.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-archive.c (ctf_arc_open_by_offset): Rename to..."
    },
    {
      "sha": "25c30f64b50eba7963a1cc1a362c94e9bba24cd3",
      "filename": "libctf/ctf-archive.c",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-archive.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -377,6 +377,25 @@ ctf_new_archive_internal (int is_archive, int unmap_on_close,\n   return arci;\n }\n \n+/* Get the CTF preamble from data in a buffer, which may be either an archive or\n+   a CTF dict.  If multiple dicts are present in an archive, the preamble comes\n+   from an arbitrary dict.  The preamble is a pointer into the ctfsect passed\n+   in.  */\n+\n+const ctf_preamble_t *\n+ctf_arc_bufpreamble (const ctf_sect_t *ctfsect)\n+{\n+  if (ctfsect->cts_size > sizeof (uint64_t) &&\n+      (le64toh ((*(uint64_t *) ctfsect->cts_data)) == CTFA_MAGIC))\n+    {\n+      struct ctf_archive *arc = (struct ctf_archive *) ctfsect->cts_data;\n+      return (const ctf_preamble_t *) ((char *) arc + le64toh (arc->ctfa_ctfs)\n+\t\t\t\t       + sizeof (uint64_t));\n+    }\n+  else\n+    return (const ctf_preamble_t *) ctfsect->cts_data;\n+}\n+\n /* Open a CTF archive or dictionary from data in a buffer (which the caller must\n    preserve until ctf_arc_close() time).  Returns the archive, or NULL and an\n    error in *err (if not NULL).  */"
    },
    {
      "sha": "384e8cfacc887e61a6145fe5d5d99871055ac245",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -298,6 +298,8 @@ ctf_serialize (ctf_dict_t *fp)\n   hdr.cth_magic = CTF_MAGIC;\n   hdr.cth_version = CTF_VERSION;\n \n+  hdr.cth_flags = CTF_F_DYNSTR;\n+\n   /* Iterate through the dynamic type definition list and compute the\n      size of the CTF type section we will need to generate.  */\n "
    },
    {
      "sha": "0e09a45b5bcbf562f5c791e37b5fee674fc5e135",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -683,6 +683,7 @@ ctf_new_archive_internal (int is_archive, int unmap_on_close,\n \t\t\t  const ctf_sect_t *strsect, int *errp);\n extern struct ctf_archive *ctf_arc_open_internal (const char *, int *);\n extern void ctf_arc_close_internal (struct ctf_archive *);\n+extern const ctf_preamble_t *ctf_arc_bufpreamble (const ctf_sect_t *);\n extern void *ctf_set_open_errno (int *, int);\n extern unsigned long ctf_set_errno (ctf_dict_t *, int);\n "
    },
    {
      "sha": "3f4f2ee72d97158871ef057bd9e24d323b753f20",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -1596,9 +1596,12 @@ ctf_link_add_strtab (ctf_dict_t *fp, ctf_link_strtab_string_f *add_string,\n \n /* Not yet implemented.  */\n int\n-ctf_link_shuffle_syms (ctf_dict_t *fp _libctf_unused_,\n-\t\t       ctf_link_iter_symbol_f *add_sym _libctf_unused_,\n-\t\t       void *arg _libctf_unused_)\n+ctf_link_add_linker_symbol (ctf_dict_t *fp, ctf_link_sym_t *sym)\n+{\n+  return 0;\n+}\n+int\n+ctf_link_shuffle_syms (ctf_dict_t *fp)\n {\n   return 0;\n }"
    },
    {
      "sha": "a6f0d3f6efe5e169ddcf6e31da845fd8efe20395",
      "filename": "libctf/ctf-open-bfd.c",
      "status": "modified",
      "additions": 29,
      "deletions": 5,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-open-bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/ctf-open-bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open-bfd.c?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -100,12 +100,36 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n \n #ifdef HAVE_BFD_ELF\n   ctf_sect_t symsect, strsect;\n-  Elf_Internal_Shdr *symhdr = &elf_symtab_hdr (abfd);\n+  Elf_Internal_Shdr *symhdr;\n   size_t symcount;\n   Elf_Internal_Sym *isymbuf;\n   bfd_byte *symtab = NULL;\n+  const char *symtab_name;\n   const char *strtab = NULL;\n+  const char *strtab_name;\n   size_t strsize;\n+  const ctf_preamble_t *preamble;\n+\n+  if (ctfsect->cts_data == NULL)\n+    {\n+      bfderrstr = N_(\"CTF section is NULL\");\n+      goto err;\n+    }\n+  preamble = ctf_arc_bufpreamble (ctfsect);\n+\n+  if (preamble->ctp_flags & CTF_F_DYNSTR)\n+    {\n+      symhdr = &elf_tdata (abfd)->dynsymtab_hdr;\n+      strtab_name = \".dynstr\";\n+      symtab_name = \".dynsym\";\n+    }\n+  else\n+    {\n+      symhdr = &elf_tdata (abfd)->symtab_hdr;\n+      strtab_name = \".strtab\";\n+      symtab_name = \".symtab\";\n+    }\n+\n   /* TODO: handle SYMTAB_SHNDX.  */\n \n   /* Get the symtab, and the strtab associated with it.  */\n@@ -145,12 +169,12 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n \t    strtab = (const char *) strhdr->contents;\n \t}\n     }\n-  else\t\t/* No symtab: just try getting .strtab by name.  */\n+  else\t\t/* No symtab: just try getting .strtab or .dynstr by name.  */\n     {\n       bfd_byte *str_bcontents;\n       asection *str_asect;\n \n-      if ((str_asect = bfd_get_section_by_name (abfd, \".strtab\")) != NULL)\n+      if ((str_asect = bfd_get_section_by_name (abfd, strtab_name)) != NULL)\n \t{\n \t  if (bfd_malloc_and_get_section (abfd, str_asect, &str_bcontents))\n \t    {\n@@ -168,15 +192,15 @@ ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n \t use it for anything but debugging.  */\n \n       strsect.cts_data = strtab;\n-      strsect.cts_name = \".strtab\";\n+      strsect.cts_name = strtab_name;\n       strsect.cts_size = strsize;\n       strsectp = &strsect;\n     }\n \n   if (symtab)\n     {\n       assert (symhdr->sh_entsize == get_elf_backend_data (abfd)->s->sizeof_sym);\n-      symsect.cts_name = \".symtab\";\n+      symsect.cts_name = symtab_name;\n       symsect.cts_entsize = symhdr->sh_entsize;\n       symsect.cts_size = symhdr->sh_size;\n       symsect.cts_data = symtab;"
    },
    {
      "sha": "317913e845080b381c92206f0d521fe894a0a752",
      "filename": "libctf/libctf.ver",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/libctf.ver",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d16b64e28ab2cd7e69c0b31bc3ab1601891c969/libctf/libctf.ver",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/libctf.ver?ref=3d16b64e28ab2cd7e69c0b31bc3ab1601891c969",
      "patch": "@@ -181,4 +181,6 @@ LIBCTF_1.1 {\n \tctf_dict_open_sections;\n \tctf_dict_close;\n \tctf_parent_dict;\n+\n+\tctf_link_add_linker_symbol;\n } LIBCTF_1.0;"
    }
  ]
}