{
  "sha": "e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTM5YzE2MDdhMmRmM2E5N2JmN2I3MGJlZjZkZTViN2EyZGI1NWVlYQ==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:15:13Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:15:13Z"
    },
    "message": "[binutils, Arm] Add support for conditional instructions in Armv8.1-M Mainline\n\nThis patch adds the following instructions which are part of the\nArmv8.1-M Mainline:\nCINC\nCINV\nCNEG\nCSINC\nCSINV\nCSNEG\nCSET\nCSETM\nCSEL\n\ngas/ChangeLog:\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-arm.c (TOGGLE_BIT): New.\n\t(T16_32_TAB): New entries for cinc, cinv, cneg, csinc,\n\tcsinv, csneg, cset, csetm and csel.\n\t(operand_parse_code): New OP_RR_ZR.\n\t(parse_operand): Handle case for OP_RR_ZR.\n\t(do_t_cond): New.\n\t(insns): New instructions for cinc, cinv, cneg, csinc,\n\tcsinv, csneg, cset, csetm, csel.\n\t* testsuite/gas/arm/armv8_1-m-cond-bad.d: New test.\n\t* testsuite/gas/arm/armv8_1-m-cond-bad.l: New test.\n\t* testsuite/gas/arm/armv8_1-m-cond-bad.s: New test.\n\t* testsuite/gas/arm/armv8_1-m-cond.d: New test.\n\t* testsuite/gas/arm/armv8_1-m-cond.s: New test.\n\nopcodes/ChangeLog:\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): New enum\n\tfor csinc, csinv, csneg, csel, cset, csetm, cinv, cinv\n\tand cneg.\n\t(mve_opcodes): New instructions as above.\n\t(is_mve_encoding_conflict): Add cases for csinc, csinv,\n\tcsneg and csel.\n\t(print_insn_mve): Accept new %<bitfield>c and %<bitfield>C.",
    "tree": {
      "sha": "4fbd7358df529b544ef84d586e471fd9a574eaa5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4fbd7358df529b544ef84d586e471fd9a574eaa5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/23d00a419fe67801afc02a87f7ab9c5374b0238e"
    }
  ],
  "stats": {
    "total": 262,
    "additions": 261,
    "deletions": 1
  },
  "files": [
    {
      "sha": "fc1fb65e29b58dcbb0e55ee545e63c1dde579cee",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -1,3 +1,19 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-arm.c (TOGGLE_BIT): New.\n+\t(T16_32_TAB): New entries for cinc, cinv, cneg, csinc,\n+\tcsinv, csneg, cset, csetm and csel.\n+\t(operand_parse_code): New OP_RR_ZR.\n+\t(parse_operand): Handle case for OP_RR_ZR.\n+\t(do_t_cond): New.\n+\t(insns): New instructions for cinc, cinv, cneg, csinc,\n+\tcsinv, csneg, cset, csetm, csel.\n+\t* testsuite/gas/arm/armv8_1-m-cond-bad.d: New test.\n+\t* testsuite/gas/arm/armv8_1-m-cond-bad.l: New test.\n+\t* testsuite/gas/arm/armv8_1-m-cond-bad.s: New test.\n+\t* testsuite/gas/arm/armv8_1-m-cond.d: New test.\n+\t* testsuite/gas/arm/armv8_1-m-cond.s: New test.\n+\n 2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/tc-arm.c (operand_parse_code): New entries for"
    },
    {
      "sha": "b657828c20eb7b807f7b0a8cd1c9bb64e34b54db",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 81,
      "deletions": 1,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -1009,6 +1009,9 @@ static void it_fsm_post_encode (void);\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Toggle value[pos].  */\n+#define TOGGLE_BIT(value, pos) (value ^ (1 << pos))\n+\n /* Pure syntax.\t */\n \n /* This array holds the chars that always start a comment.  If the\n@@ -6930,6 +6933,7 @@ enum operand_parse_code\n   OP_RRe,\t/* ARM register, only even numbered.  */\n   OP_RRo,\t/* ARM register, only odd numbered, not r13 or r15.  */\n   OP_RRnpcsp_I32, /* ARM register (no BadReg) or literal 1 .. 32 */\n+  OP_RR_ZR,\t/* ARM register or ZR but no PC */\n \n   OP_REGLST,\t/* ARM register list */\n   OP_CLRMLST,\t/* CLRM register list */\n@@ -7793,6 +7797,8 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_oRMQRZ:\n \t  po_reg_or_goto (REG_TYPE_MQ, try_rr_zr);\n \t  break;\n+\n+\tcase OP_RR_ZR:\n \ttry_rr_zr:\n \t  po_reg_or_goto (REG_TYPE_RN, ZR);\n \t  break;\n@@ -7880,6 +7886,7 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \n \tcase OP_RMQRZ:\n \tcase OP_oRMQRZ:\n+\tcase OP_RR_ZR:\n \t  if (!inst.operands[i].iszr && inst.operands[i].reg == REG_PC)\n \t    inst.error = BAD_PC;\n \t  break;\n@@ -11107,7 +11114,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n     inst.error = _(\"instruction does not accept unindexed addressing\");\n }\n \n-/* Table of Thumb instructions which exist in both 16- and 32-bit\n+/* Table of Thumb instructions which exist in 16- and/or 32-bit\n    encodings (the latter only in post-V6T2 cores).  The index is the\n    value used in the insns table below.  When there is more than one\n    possible 16-bit encoding for the instruction, this table always\n@@ -11136,11 +11143,20 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_bflx,  0000, f070e001),\t\t\t\\\n   X(_bic,   4380, ea200000),\t\t\t\\\n   X(_bics,  4380, ea300000),\t\t\t\\\n+  X(_cinc,  0000, ea509000),\t\t\t\\\n+  X(_cinv,  0000, ea50a000),\t\t\t\\\n   X(_cmn,   42c0, eb100f00),\t\t\t\\\n   X(_cmp,   2800, ebb00f00),\t\t\t\\\n+  X(_cneg,  0000, ea50b000),\t\t\t\\\n   X(_cpsie, b660, f3af8400),\t\t\t\\\n   X(_cpsid, b670, f3af8600),\t\t\t\\\n   X(_cpy,   4600, ea4f0000),\t\t\t\\\n+  X(_csel,  0000, ea508000),\t\t\t\\\n+  X(_cset,  0000, ea5f900f),\t\t\t\\\n+  X(_csetm, 0000, ea5fa00f),\t\t\t\\\n+  X(_csinc, 0000, ea509000),\t\t\t\\\n+  X(_csinv, 0000, ea50a000),\t\t\t\\\n+  X(_csneg, 0000, ea50b000),\t\t\t\\\n   X(_dec_sp,80dd, f1ad0d00),\t\t\t\\\n   X(_dls,   0000, f040e001),\t\t\t\\\n   X(_dlstp, 0000, f000e001),\t\t\t\\\n@@ -11955,6 +11971,60 @@ do_t_clz (void)\n   inst.instruction |= Rm;\n }\n \n+/* For the Armv8.1-M conditional instructions.  */\n+static void\n+do_t_cond (void)\n+{\n+  unsigned Rd, Rn, Rm;\n+  signed int cond;\n+\n+  constraint (inst.cond != COND_ALWAYS, BAD_COND);\n+\n+  Rd = inst.operands[0].reg;\n+  switch (inst.instruction)\n+    {\n+      case T_MNEM_csinc:\n+      case T_MNEM_csinv:\n+      case T_MNEM_csneg:\n+      case T_MNEM_csel:\n+\tRn = inst.operands[1].reg;\n+\tRm = inst.operands[2].reg;\n+\tcond = inst.operands[3].imm;\n+\tconstraint (Rn == REG_SP, BAD_SP);\n+\tconstraint (Rm == REG_SP, BAD_SP);\n+\tbreak;\n+\n+      case T_MNEM_cinc:\n+      case T_MNEM_cinv:\n+      case T_MNEM_cneg:\n+\tRn = inst.operands[1].reg;\n+\tcond = inst.operands[2].imm;\n+\t/* Invert the last bit to invert the cond.  */\n+\tcond = TOGGLE_BIT (cond, 0);\n+\tconstraint (Rn == REG_SP, BAD_SP);\n+\tRm = Rn;\n+\tbreak;\n+\n+      case T_MNEM_csetm:\n+      case T_MNEM_cset:\n+\tcond = inst.operands[1].imm;\n+\t/* Invert the last bit to invert the cond.  */\n+\tcond = TOGGLE_BIT (cond, 0);\n+\tRn = REG_PC;\n+\tRm = REG_PC;\n+\tbreak;\n+\n+      default: abort ();\n+    }\n+\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+  inst.instruction = THUMB_OP32 (inst.instruction);\n+  inst.instruction |= Rd << 8;\n+  inst.instruction |= Rn << 16;\n+  inst.instruction |= Rm;\n+  inst.instruction |= cond << 4;\n+}\n+\n static void\n do_t_csdb (void)\n {\n@@ -25157,6 +25227,16 @@ static const struct asm_opcode insns[] =\n  /* Armv8.1-M Mainline instructions.  */\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT & arm_ext_v8_1m_main\n+ toU(\"cinc\",  _cinc,  3, (RRnpcsp, RR_ZR, COND),\tt_cond),\n+ toU(\"cinv\",  _cinv,  3, (RRnpcsp, RR_ZR, COND),\tt_cond),\n+ toU(\"cneg\",  _cneg,  3, (RRnpcsp, RR_ZR, COND),\tt_cond),\n+ toU(\"csel\",  _csel,  4, (RRnpcsp, RR_ZR, RR_ZR, COND),\tt_cond),\n+ toU(\"csetm\", _csetm, 2, (RRnpcsp, COND),\t\tt_cond),\n+ toU(\"cset\",  _cset,  2, (RRnpcsp, COND),\t\tt_cond),\n+ toU(\"csinc\", _csinc, 4, (RRnpcsp, RR_ZR, RR_ZR, COND),\tt_cond),\n+ toU(\"csinv\", _csinv, 4, (RRnpcsp, RR_ZR, RR_ZR, COND),\tt_cond),\n+ toU(\"csneg\", _csneg, 4, (RRnpcsp, RR_ZR, RR_ZR, COND),\tt_cond),\n+\n  toC(\"bf\",     _bf,\t2, (EXPs, EXPs),\t     t_branch_future),\n  toU(\"bfcsel\", _bfcsel,\t4, (EXPs, EXPs, EXPs, COND), t_branch_future),\n  toC(\"bfx\",    _bfx,\t2, (EXPs, RRnpcsp),\t     t_branch_future),"
    },
    {
      "sha": "d953f9a0cd684673033f073948aa2a63d81acdde",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-cond-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-cond-bad.d?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid Armv8.1-M Mainline conditional instructions\n+#source: armv8_1-m-cond-bad.s\n+#as: -march=armv8.1-m.main\n+#error_output: armv8_1-m-cond-bad.l"
    },
    {
      "sha": "47eafcf79a7d55daf898663a33cc72bfea0b9162",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-cond-bad.l",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-cond-bad.l?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -0,0 +1,8 @@\n+.*: Assembler messages:\n+.*: Error: condition required -- `cset r4,r2,ne'\n+.*: Error: r13 not allowed here -- `csetm sp,ne'\n+.*: Error: r15 not allowed here -- `cinc r3,pc,lt'\n+.*: Error: r15 not allowed here -- `cinv pc,r2,lt'\n+.*: Error: r13 not allowed here -- `cneg r3,sp,lt'\n+.*: Error: instruction not allowed in IT block -- `csinc r3,r2,r4,lt'\n+.*: Error: instruction cannot be conditional -- `csnegne r3,r2,r4,lt'"
    },
    {
      "sha": "a7d98edb3d3c3bb8a4ba7ef013b3ca16f0b431b0",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-cond-bad.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-cond-bad.s?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -0,0 +1,15 @@\n+        .syntax unified\n+        .text\n+\n+foo:\n+\tcset\tr4, r2, ne\n+\tcsetm\tsp, ne\n+\tcinc\tr3, pc, lt\n+\tcinv\tpc, r2, lt\n+\tcneg\tr3, sp, lt\n+\tit eq\n+\tcsinc\tr3, r2, r4, lt\n+\tcsinv\tr3, r4, r4, lt\n+\tit ne\n+\tcsnegne\tr3, r2, r4, lt\n+\tcsinv\tr3, r4, r4, lt"
    },
    {
      "sha": "171da374a5baea752ab14945ebe61b78036620d0",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-cond.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-cond.d?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -0,0 +1,21 @@\n+#name: Valid Armv8.1-M Mainline conditional instructions\n+#source: armv8_1-m-cond.s\n+#as: -march=armv8.1-m.main\n+#objdump: -dr --prefix-addresses --show-raw-insn -marmv8.1-m.main\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+0[0-9a-f]+ <[^>]+> ea5f 940f \tcset\tr4, ne\n+0[0-9a-f]+ <[^>]+> ea5f a40f \tcsetm\tr4, ne\n+0[0-9a-f]+ <[^>]+> ea52 93a2 \tcinc\tr3, r2, lt\n+0[0-9a-f]+ <[^>]+> ea52 a3a2 \tcinv\tr3, r2, lt\n+0[0-9a-f]+ <[^>]+> ea52 b3a2 \tcneg\tr3, r2, lt\n+0[0-9a-f]+ <[^>]+> ea52 93b4 \tcsinc\tr3, r2, r4, lt\n+0[0-9a-f]+ <[^>]+> ea54 93b4 \tcinc\tr3, r4, ge\n+0[0-9a-f]+ <[^>]+> ea5f 93bf \tcset\tr3, ge\n+0[0-9a-f]+ <[^>]+> ea52 a3b4 \tcsinv\tr3, r2, r4, lt\n+0[0-9a-f]+ <[^>]+> ea54 a3b4 \tcinv\tr3, r4, ge\n+0[0-9a-f]+ <[^>]+> ea5f a3bf \tcsetm\tr3, ge\n+0[0-9a-f]+ <[^>]+> ea52 b3b4 \tcsneg\tr3, r2, r4, lt\n+0[0-9a-f]+ <[^>]+> ea54 b3b4 \tcneg\tr3, r4, ge"
    },
    {
      "sha": "f192d5f879c8c87dfb3caea2c5cc1fe5e7e73681",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-cond.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/gas/testsuite/gas/arm/armv8_1-m-cond.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-cond.s?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -0,0 +1,17 @@\n+        .syntax unified\n+        .text\n+\n+foo:\n+\tcset\tr4, ne\n+\tcsetm\tr4, ne\n+\tcinc\tr3, r2, lt\n+\tcinv\tr3, r2, lt\n+\tcneg\tr3, r2, lt\n+\tcsinc\tr3, r2, r4, lt\n+\tcsinc\tr3, r4, r4, lt\n+\tcsinc\tr3, zr, zr, lt\n+\tcsinv\tr3, r2, r4, lt\n+\tcsinv\tr3, r4, r4, lt\n+\tcsinv\tr3, zr, zr, lt\n+\tcsneg\tr3, r2, r4, lt\n+\tcsneg\tr3, r4, r4, lt"
    },
    {
      "sha": "c336a1a6a154d09db59fd63c39c8109c8c251e23",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): New enum\n+\tfor csinc, csinv, csneg, csel, cset, csetm, cinv, cinv\n+\tand cneg.\n+\t(mve_opcodes): New instructions as above.\n+\t(is_mve_encoding_conflict): Add cases for csinc, csinv,\n+\tcsneg and csel.\n+\t(print_insn_mve): Accept new %<bitfield>c and %<bitfield>C.\n+\n 2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* arm-dis.c (emun mve_instructions): Updated for new instructions."
    },
    {
      "sha": "ad65ffa99adff1244428f8d2931c51a0dbfa2172",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e39c1607a2df3a97bf7b70bef6de5b7a2db55eea/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=e39c1607a2df3a97bf7b70bef6de5b7a2db55eea",
      "patch": "@@ -281,6 +281,15 @@ enum mve_instructions\n   MVE_SRSHR,\n   MVE_SQSHLL,\n   MVE_SQSHL,\n+  MVE_CINC,\n+  MVE_CINV,\n+  MVE_CNEG,\n+  MVE_CSINC,\n+  MVE_CSINV,\n+  MVE_CSET,\n+  MVE_CSETM,\n+  MVE_CSNEG,\n+  MVE_CSEL,\n   MVE_NONE\n };\n \n@@ -2060,6 +2069,8 @@ static const struct opcode32 neon_opcodes[] =\n    %<bitfield>r\t\tprint as an ARM register\n    %<bitfield>d\t\tprint the bitfield in decimal\n    %<bitfield>A\t\tprint accumulate or not\n+   %<bitfield>c\t\tprint bitfield as a condition code\n+   %<bitfield>C\t\tprint bitfield as an inverted condition code\n    %<bitfield>Q\t\tprint as a MVE Q register\n    %<bitfield>F\t\tprint as a MVE S register\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n@@ -3400,6 +3411,51 @@ static const struct mopcode32 mve_opcodes[] =\n    0xea500f1f, 0xfff08f3f,\n    \"urshr%c\\t%16-19S, %j\"},\n \n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSINC,\n+   0xea509000, 0xfff0f000,\n+   \"csinc\\t%8-11S, %16-19Z, %0-3Z, %4-7c\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSINV,\n+   0xea50a000, 0xfff0f000,\n+   \"csinv\\t%8-11S, %16-19Z, %0-3Z, %4-7c\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSET,\n+   0xea5f900f, 0xfffff00f,\n+   \"cset\\t%8-11S, %4-7C\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSETM,\n+   0xea5fa00f, 0xfffff00f,\n+   \"csetm\\t%8-11S, %4-7C\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSEL,\n+   0xea508000, 0xfff0f000,\n+   \"csel\\t%8-11S, %16-19Z, %0-3Z, %4-7c\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CSNEG,\n+   0xea50b000, 0xfff0f000,\n+   \"csneg\\t%8-11S, %16-19Z, %0-3Z, %4-7c\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CINC,\n+   0xea509000, 0xfff0f000,\n+   \"cinc\\t%8-11S, %16-19Z, %4-7C\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CINV,\n+   0xea50a000, 0xfff0f000,\n+   \"cinv\\t%8-11S, %16-19Z, %4-7C\"},\n+\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+   MVE_CNEG,\n+   0xea50b000, 0xfff0f000,\n+   \"cneg\\t%8-11S, %16-19Z, %4-7C\"},\n+\n   {ARM_FEATURE_CORE_LOW (0),\n    MVE_NONE,\n    0x00000000, 0x00000000, 0}\n@@ -5653,6 +5709,30 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_CSINC:\n+    case MVE_CSINV:\n+      {\n+\tunsigned long rm, rn;\n+\trm = arm_decode_field (given, 0, 3);\n+\trn = arm_decode_field (given, 16, 19);\n+\t/* CSET/CSETM.  */\n+\tif (rm == 0xf && rn == 0xf)\n+\t  return TRUE;\n+\t/* CINC/CINV.  */\n+\telse if (rn == rm && rn != 0xf)\n+\t  return TRUE;\n+      }\n+    /* Fall through.  */\n+    case MVE_CSEL:\n+    case MVE_CSNEG:\n+      if (arm_decode_field (given, 0, 3) == 0xd)\n+\treturn TRUE;\n+      /* CNEG.  */\n+      else if (matched_insn == MVE_CSNEG)\n+\tif (arm_decode_field (given, 0, 3) == arm_decode_field (given, 16, 19))\n+\t  return TRUE;\n+      return FALSE;\n+\n     default:\n     case MVE_VADD_FP_T1:\n     case MVE_VADD_FP_T2:\n@@ -9264,6 +9344,15 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t      func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;\n \n+\t\t\t  case 'c':\n+\t\t\t    func (stream, \"%s\", arm_conditional[value]);\n+\t\t\t    break;\n+\n+\t\t\t  case 'C':\n+\t\t\t    value ^= 1;\n+\t\t\t    func (stream, \"%s\", arm_conditional[value]);\n+\t\t\t    break;\n+\n \t\t\t  case 'S':\n \t\t\t    if (value == 13 || value == 15)\n \t\t\t      is_unpredictable = TRUE;"
    }
  ]
}