{
  "sha": "206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjA2ZTZjNThhNzY5ZjllYzYzODI3YjhjYTM5NTJiMGNkOGM4MjhiYQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-07-16T00:21:36Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-07-16T00:21:36Z"
    },
    "message": "Fix build for aarch64, arm, and riscv FreeBSD native targets.\n\nRemove unused gdbarch argument to helper functions originally\ncopied from mips-fbsd-nat.c.  Include regcache.h previously\nincluded from defs.h via gdbarch.h.\n\ngdb/ChangeLog:\n\n\t* aarch64-fbsd-nat.c: Include regcache.h.\n\t(getregs_supplies, getfpregs_supplies): Remove unused gdbarch\n\targument.\n\t(aarch64_fbsd_nat_target::fetch_registers)\n\t(aarch64_fbsd_nat_target::store_registers): Remove gdbarch\n\tvariable.\n\t* arm-fbsd-nat.c, riscv-fbsd-nat.c: Likewise.",
    "tree": {
      "sha": "a100f807ade8ea17e7c9a0a9cf1d4a881bb58ef6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a100f807ade8ea17e7c9a0a9cf1d4a881bb58ef6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cbde90f25ec66b359c90514a50bbf25d122bb7e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cbde90f25ec66b359c90514a50bbf25d122bb7e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cbde90f25ec66b359c90514a50bbf25d122bb7e3"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 30,
    "deletions": 24
  },
  "files": [
    {
      "sha": "a46a1f52ef2dfb46dfc431afa065b8d1d6713e28",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-16  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* aarch64-fbsd-nat.c: Include regcache.h.\n+\t(getregs_supplies, getfpregs_supplies): Remove unused gdbarch\n+\targument.\n+\t(aarch64_fbsd_nat_target::fetch_registers)\n+\t(aarch64_fbsd_nat_target::store_registers): Remove gdbarch\n+\tvariable.\n+\t* arm-fbsd-nat.c, riscv-fbsd-nat.c: Likewise.\n+\n 2019-07-16  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-nat.c: Include gdbarch.h."
    },
    {
      "sha": "3c3931f6b7cfbcebf7ab95816b7a1fb171fc1bd8",
      "filename": "gdb/aarch64-fbsd-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/aarch64-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/aarch64-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-fbsd-nat.c?ref=206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "patch": "@@ -18,6 +18,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"regcache.h\"\n #include \"target.h\"\n \n #include <sys/types.h>\n@@ -40,15 +41,15 @@ static aarch64_fbsd_nat_target the_aarch64_fbsd_nat_target;\n /* Determine if PT_GETREGS fetches REGNUM.  */\n \n static bool\n-getregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getregs_supplies (int regnum)\n {\n   return (regnum >= AARCH64_X0_REGNUM && regnum <= AARCH64_CPSR_REGNUM);\n }\n \n /* Determine if PT_GETFPREGS fetches REGNUM.  */\n \n static bool\n-getfpregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getfpregs_supplies (int regnum)\n {\n   return (regnum >= AARCH64_V0_REGNUM && regnum <= AARCH64_FPCR_REGNUM);\n }\n@@ -62,8 +63,7 @@ aarch64_fbsd_nat_target::fetch_registers (struct regcache *regcache,\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -74,7 +74,7 @@ aarch64_fbsd_nat_target::fetch_registers (struct regcache *regcache,\n \t\t\t       sizeof (regs));\n     }\n \n-  if (regnum == -1 || getfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getfpregs_supplies (regnum))\n     {\n       struct fpreg fpregs;\n \n@@ -95,8 +95,7 @@ aarch64_fbsd_nat_target::store_registers (struct regcache *regcache,\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -110,7 +109,7 @@ aarch64_fbsd_nat_target::store_registers (struct regcache *regcache,\n \tperror_with_name (_(\"Couldn't write registers\"));\n     }\n \n-  if (regnum == -1 || getfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getfpregs_supplies (regnum))\n     {\n       struct fpreg fpregs;\n "
    },
    {
      "sha": "e6c7d3c4a8d1f72bdef882e115bb921fac532245",
      "filename": "gdb/arm-fbsd-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/arm-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/arm-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-fbsd-nat.c?ref=206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "patch": "@@ -41,7 +41,7 @@ static arm_fbsd_nat_target the_arm_fbsd_nat_target;\n /* Determine if PT_GETREGS fetches REGNUM.  */\n \n static bool\n-getregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getregs_supplies (int regnum)\n {\n   return ((regnum >= ARM_A1_REGNUM && regnum <= ARM_PC_REGNUM)\n \t  || regnum == ARM_PS_REGNUM);\n@@ -51,7 +51,7 @@ getregs_supplies (struct gdbarch *gdbarch, int regnum)\n /* Determine if PT_GETVFPREGS fetches REGNUM.  */\n \n static bool\n-getvfpregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getvfpregs_supplies (int regnum)\n {\n   return ((regnum >= ARM_D0_REGNUM && regnum <= ARM_D31_REGNUM)\n \t  || regnum == ARM_FPSCR_REGNUM);\n@@ -66,8 +66,7 @@ arm_fbsd_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -79,7 +78,7 @@ arm_fbsd_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n     }\n \n #ifdef PT_GETVFPREGS\n-  if (regnum == -1 || getvfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getvfpregs_supplies (regnum))\n     {\n       struct vfpreg vfpregs;\n \n@@ -100,8 +99,7 @@ arm_fbsd_nat_target::store_registers (struct regcache *regcache, int regnum)\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -116,7 +114,7 @@ arm_fbsd_nat_target::store_registers (struct regcache *regcache, int regnum)\n     }\n \n #ifdef PT_GETVFPREGS\n-  if (regnum == -1 || getvfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getvfpregs_supplies (regnum))\n     {\n       struct vfpreg vfpregs;\n "
    },
    {
      "sha": "24381e0dccf949f4a0f479d9a02317e99ae073eb",
      "filename": "gdb/riscv-fbsd-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/riscv-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/206e6c58a769f9ec63827b8ca3952b0cd8c828ba/gdb/riscv-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-fbsd-nat.c?ref=206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "patch": "@@ -18,6 +18,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"regcache.h\"\n #include \"target.h\"\n \n #include <sys/types.h>\n@@ -40,7 +41,7 @@ static riscv_fbsd_nat_target the_riscv_fbsd_nat_target;\n /* Determine if PT_GETREGS fetches REGNUM.  */\n \n static bool\n-getregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getregs_supplies (int regnum)\n {\n   return ((regnum >= RISCV_RA_REGNUM && regnum <= RISCV_PC_REGNUM)\n \t  || regnum == RISCV_CSR_SSTATUS_REGNUM);\n@@ -49,7 +50,7 @@ getregs_supplies (struct gdbarch *gdbarch, int regnum)\n /* Determine if PT_GETFPREGS fetches REGNUM.  */\n \n static bool\n-getfpregs_supplies (struct gdbarch *gdbarch, int regnum)\n+getfpregs_supplies (int regnum)\n {\n   return ((regnum >= RISCV_FIRST_FP_REGNUM && regnum <= RISCV_LAST_FP_REGNUM)\n \t  || regnum == RISCV_CSR_FCSR_REGNUM);\n@@ -64,10 +65,9 @@ riscv_fbsd_nat_target::fetch_registers (struct regcache *regcache,\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n   if (regnum == -1 || regnum == RISCV_ZERO_REGNUM)\n     regcache->raw_supply_zeroed (RISCV_ZERO_REGNUM);\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -78,7 +78,7 @@ riscv_fbsd_nat_target::fetch_registers (struct regcache *regcache,\n \t\t\t       sizeof (regs));\n     }\n \n-  if (regnum == -1 || getfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getfpregs_supplies (regnum))\n     {\n       struct fpreg fpregs;\n \n@@ -99,8 +99,7 @@ riscv_fbsd_nat_target::store_registers (struct regcache *regcache,\n {\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n \n-  struct gdbarch *gdbarch = regcache->arch ();\n-  if (regnum == -1 || getregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getregs_supplies (regnum))\n     {\n       struct reg regs;\n \n@@ -114,7 +113,7 @@ riscv_fbsd_nat_target::store_registers (struct regcache *regcache,\n \tperror_with_name (_(\"Couldn't write registers\"));\n     }\n \n-  if (regnum == -1 || getfpregs_supplies (gdbarch, regnum))\n+  if (regnum == -1 || getfpregs_supplies (regnum))\n     {\n       struct fpreg fpregs;\n "
    }
  ]
}