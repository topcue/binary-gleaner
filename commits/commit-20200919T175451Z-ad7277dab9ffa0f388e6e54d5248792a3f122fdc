{
  "sha": "ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWQ3Mjc3ZGFiOWZmYTBmMzg4ZTZlNTRkNTI0ODc5MmEzZjEyMmZkYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:51Z"
    },
    "message": "Use gdb_bfd_sections in symfile.c\n\nThis changes some functions in symfile.c to avoid\nbfd_map_over_sections, in favor of iteration.  Some helper types can\nalso be removed due to this change.\n\ngdb/ChangeLog\n2020-09-19  Tom Tromey  <tom@tromey.com>\n\n\t* symfile.h: (find_lowest_section): Don't declare.\n\t* symfile.c (find_lowest_section): Now static.  Change\n\tparameters.\n\t(struct place_section_arg): Remove.\n\t(place_section): Change parameters.\n\t(addr_info_make_relative): Use foreach.\n\t(symfile_dummy_outputs): Remove.\n\t(default_symfile_relocate): Use foreach.",
    "tree": {
      "sha": "3f8990eed44d78135aeb18b504995e54c8a1d7d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3f8990eed44d78135aeb18b504995e54c8a1d7d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb814f2e3062ae3c82bba3baca6450c5e3317e58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb814f2e3062ae3c82bba3baca6450c5e3317e58",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cb814f2e3062ae3c82bba3baca6450c5e3317e58"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 28,
    "deletions": 38
  },
  "files": [
    {
      "sha": "9f5cf4466f3ce5afd6dd2b55026e98d43673c31c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
      "patch": "@@ -1,3 +1,14 @@\n+2020-09-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile.h: (find_lowest_section): Don't declare.\n+\t* symfile.c (find_lowest_section): Now static.  Change\n+\tparameters.\n+\t(struct place_section_arg): Remove.\n+\t(place_section): Change parameters.\n+\t(addr_info_make_relative): Use foreach.\n+\t(symfile_dummy_outputs): Remove.\n+\t(default_symfile_relocate): Use foreach.\n+\n 2020-09-19  Tom Tromey  <tom@tromey.com>\n \n \t* objfiles.c (add_to_objfile_sections): Rename from"
    },
    {
      "sha": "97a6d4b667624779bb1e765b100e8a1e6bb71809",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 17,
      "deletions": 36,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
      "patch": "@@ -187,19 +187,16 @@ increment_reading_symtab (void)\n }\n \n /* Remember the lowest-addressed loadable section we've seen.\n-   This function is called via bfd_map_over_sections.\n \n    In case of equal vmas, the section with the largest size becomes the\n    lowest-addressed loadable section.\n \n    If the vmas and sizes are equal, the last section is considered the\n    lowest-addressed loadable section.  */\n \n-void\n-find_lowest_section (bfd *abfd, asection *sect, void *obj)\n+static void\n+find_lowest_section (asection *sect, asection **lowest)\n {\n-  asection **lowest = (asection **) obj;\n-\n   if (0 == (bfd_section_flags (sect) & (SEC_ALLOC | SEC_LOAD)))\n     return;\n   if (!*lowest)\n@@ -335,22 +332,13 @@ init_objfile_sect_indices (struct objfile *objfile)\n     }\n }\n \n-/* The arguments to place_section.  */\n-\n-struct place_section_arg\n-{\n-  section_offsets *offsets;\n-  CORE_ADDR lowest;\n-};\n-\n /* Find a unique offset to use for loadable section SECT if\n    the user did not provide an offset.  */\n \n static void\n-place_section (bfd *abfd, asection *sect, void *obj)\n+place_section (bfd *abfd, asection *sect, section_offsets &offsets,\n+\t       CORE_ADDR &lowest)\n {\n-  struct place_section_arg *arg = (struct place_section_arg *) obj;\n-  section_offsets &offsets = *arg->offsets;\n   CORE_ADDR start_addr;\n   int done;\n   ULONGEST align = ((ULONGEST) 1) << bfd_section_alignment (sect);\n@@ -364,7 +352,7 @@ place_section (bfd *abfd, asection *sect, void *obj)\n     return;\n \n   /* Otherwise, let's try to find a place for the section.  */\n-  start_addr = (arg->lowest + align - 1) & -align;\n+  start_addr = (lowest + align - 1) & -align;\n \n   do {\n     asection *cur_sec;\n@@ -405,7 +393,7 @@ place_section (bfd *abfd, asection *sect, void *obj)\n   while (!done);\n \n   offsets[gdb_bfd_section_index (abfd, sect)] = start_addr;\n-  arg->lowest = start_addr + bfd_section_size (sect);\n+  lowest = start_addr + bfd_section_size (sect);\n }\n \n /* Store section_addr_info as prepared (made relative and with SECTINDEX\n@@ -500,7 +488,8 @@ addr_info_make_relative (section_addr_info *addrs, bfd *abfd)\n   /* Find lowest loadable section to be used as starting point for\n      contiguous sections.  */\n   lower_sect = NULL;\n-  bfd_map_over_sections (abfd, find_lowest_section, &lower_sect);\n+  for (asection *iter : gdb_bfd_sections (abfd))\n+    find_lowest_section (iter, &lower_sect);\n   if (lower_sect == NULL)\n     {\n       warning (_(\"no loadable sections found in added symbol-file %s\"),\n@@ -645,7 +634,6 @@ default_symfile_offsets (struct objfile *objfile,\n      small.  */\n   if ((bfd_get_file_flags (objfile->obfd) & (EXEC_P | DYNAMIC)) == 0)\n     {\n-      struct place_section_arg arg;\n       bfd *abfd = objfile->obfd;\n       asection *cur_sec;\n \n@@ -661,9 +649,10 @@ default_symfile_offsets (struct objfile *objfile,\n \n \t  /* Pick non-overlapping offsets for sections the user did not\n \t     place explicitly.  */\n-\t  arg.offsets = &objfile->section_offsets;\n-\t  arg.lowest = 0;\n-\t  bfd_map_over_sections (objfile->obfd, place_section, &arg);\n+\t  CORE_ADDR lowest = 0;\n+\t  for (asection *sect : gdb_bfd_sections (objfile->obfd))\n+\t    place_section (objfile->obfd, sect, objfile->section_offsets,\n+\t\t\t   lowest);\n \n \t  /* Correctly filling in the section offsets is not quite\n \t     enough.  Relocatable files have two properties that\n@@ -3571,18 +3560,6 @@ simple_overlay_update (struct obj_section *osect)\n \t}\n }\n \n-/* Set the output sections and output offsets for section SECTP in\n-   ABFD.  The relocation code in BFD will read these offsets, so we\n-   need to be sure they're initialized.  We map each section to itself,\n-   with no offset; this means that SECTP->vma will be honored.  */\n-\n-static void\n-symfile_dummy_outputs (bfd *abfd, asection *sectp, void *dummy)\n-{\n-  sectp->output_section = sectp;\n-  sectp->output_offset = 0;\n-}\n-\n /* Default implementation for sym_relocate.  */\n \n bfd_byte *\n@@ -3600,7 +3577,11 @@ default_symfile_relocate (struct objfile *objfile, asection *sectp,\n \n   /* We will handle section offsets properly elsewhere, so relocate as if\n      all sections begin at 0.  */\n-  bfd_map_over_sections (abfd, symfile_dummy_outputs, NULL);\n+  for (asection *sect : gdb_bfd_sections (abfd))\n+    {\n+      sect->output_section = sect;\n+      sect->output_offset = 0;\n+    }\n \n   return bfd_simple_get_relocated_section_contents (abfd, sectp, buf, NULL);\n }"
    },
    {
      "sha": "ae29451fc6a4f08c527864a1ab43dfbf2d937a6c",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad7277dab9ffa0f388e6e54d5248792a3f122fdc/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
      "patch": "@@ -474,8 +474,6 @@ extern bool auto_solib_add;\n \n extern void set_initial_language (void);\n \n-extern void find_lowest_section (bfd *, asection *, void *);\n-\n extern gdb_bfd_ref_ptr symfile_bfd_open (const char *);\n \n extern int get_section_index (struct objfile *, const char *);"
    }
  ]
}