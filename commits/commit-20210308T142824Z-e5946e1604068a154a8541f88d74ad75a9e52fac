{
  "sha": "e5946e1604068a154a8541f88d74ad75a9e52fac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU5NDZlMTYwNDA2OGExNTRhODU0MWY4OGQ3NGFkNzVhOWU1MmZhYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:24Z"
    },
    "message": "Introduce assign_modify_operation\n\nThis adds class assign_modify_operation, which implements\nBINOP_ASSIGN_MODIFY.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class assign_modify_operation): New.\n\t* eval.c (eval_binop_assign_modify): No longer static.\n\t* ax-gdb.c (assign_modify_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "4d2d484d5f5b3a60ae9cef1ddc63952142ee62fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d2d484d5f5b3a60ae9cef1ddc63952142ee62fb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5946e1604068a154a8541f88d74ad75a9e52fac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5946e1604068a154a8541f88d74ad75a9e52fac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5946e1604068a154a8541f88d74ad75a9e52fac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5946e1604068a154a8541f88d74ad75a9e52fac/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40786782896deaf8f97f8dc62b85d9facb30fc8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40786782896deaf8f97f8dc62b85d9facb30fc8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40786782896deaf8f97f8dc62b85d9facb30fc8a"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 85,
    "deletions": 1
  },
  "files": [
    {
      "sha": "c260f04e48c73c988827c5ec9a082daeb5a7d71d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e5946e1604068a154a8541f88d74ad75a9e52fac",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class assign_modify_operation): New.\n+\t* eval.c (eval_binop_assign_modify): No longer static.\n+\t* ax-gdb.c (assign_modify_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class assign_operation): New."
    },
    {
      "sha": "f81e5b9ad29ad9b1d5b9e7af041e2a779d0d1b73",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=e5946e1604068a154a8541f88d74ad75a9e52fac",
      "patch": "@@ -2609,6 +2609,48 @@ assign_operation::do_generate_ax (struct expression *exp,\n \t     \"may not assign to it\"), name);\n }\n \n+void\n+assign_modify_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t\t struct agent_expr *ax,\n+\t\t\t\t\t struct axs_value *value,\n+\t\t\t\t\t struct type *cast_type)\n+{\n+  operation *subop = std::get<1> (m_storage).get ();\n+  if (subop->opcode () != OP_INTERNALVAR)\n+    error (_(\"May only assign to trace state variables\"));\n+\n+  internalvar_operation *ivarop\n+    = dynamic_cast<internalvar_operation *> (subop);\n+  gdb_assert (ivarop != nullptr);\n+\n+  const char *name = internalvar_name (ivarop->get_internalvar ());\n+  struct trace_state_variable *tsv;\n+\n+  tsv = find_trace_state_variable (name);\n+  if (tsv)\n+    {\n+      /* The tsv will be the left half of the binary operation.  */\n+      ax_tsv (ax, aop_getv, tsv->number);\n+      if (ax->tracing)\n+\tax_tsv (ax, aop_tracev, tsv->number);\n+      /* Trace state variables are always 64-bit integers.  */\n+      struct axs_value value1, value2;\n+      value1.kind = axs_rvalue;\n+      value1.type = builtin_type (ax->gdbarch)->builtin_long_long;\n+      /* Now do right half of expression.  */\n+      std::get<2> (m_storage)->generate_ax (exp, ax, &value2);\n+      gen_expr_binop_rest (exp, std::get<0> (m_storage), ax,\n+\t\t\t   value, &value1, &value2);\n+      /* We have a result of the binary op, set the tsv.  */\n+      ax_tsv (ax, aop_setv, tsv->number);\n+      if (ax->tracing)\n+\tax_tsv (ax, aop_tracev, tsv->number);\n+    }\n+  else\n+    error (_(\"$%s is not a trace state variable, \"\n+\t     \"may not assign to it\"), name);\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "4a7613565f11648dcaf4b395377eb7b583803886",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=e5946e1604068a154a8541f88d74ad75a9e52fac",
      "patch": "@@ -2074,7 +2074,7 @@ eval_op_type (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_ASSIGN_MODIFY.  */\n \n-static struct value *\n+struct value *\n eval_binop_assign_modify (struct type *expect_type, struct expression *exp,\n \t\t\t  enum noside noside, enum exp_opcode op,\n \t\t\t  struct value *arg1, struct value *arg2)"
    },
    {
      "sha": "93af40d9591a39a749c49c963c474dbdc350d7d0",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5946e1604068a154a8541f88d74ad75a9e52fac/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=e5946e1604068a154a8541f88d74ad75a9e52fac",
      "patch": "@@ -197,6 +197,12 @@ extern struct value *eval_op_memval (struct type *expect_type,\n \t\t\t\t     struct expression *exp,\n \t\t\t\t     enum noside noside,\n \t\t\t\t     struct value *arg1, struct type *type);\n+extern struct value *eval_binop_assign_modify (struct type *expect_type,\n+\t\t\t\t\t       struct expression *exp,\n+\t\t\t\t\t       enum noside noside,\n+\t\t\t\t\t       enum exp_opcode op,\n+\t\t\t\t\t       struct value *arg1,\n+\t\t\t\t\t       struct value *arg2);\n \n namespace expr\n {\n@@ -1800,6 +1806,36 @@ class assign_operation\n     override;\n };\n \n+/* Assignment with modification, like \"+=\".  */\n+class assign_modify_operation\n+  : public tuple_holding_operation<exp_opcode, operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+    value *rhs = std::get<2> (m_storage)->evaluate (expect_type, exp, noside);\n+    return eval_binop_assign_modify (expect_type, exp, noside,\n+\t\t\t\t     std::get<0> (m_storage), lhs, rhs);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_ASSIGN_MODIFY; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}