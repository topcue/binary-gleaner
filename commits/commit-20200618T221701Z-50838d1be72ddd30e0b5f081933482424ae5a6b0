{
  "sha": "50838d1be72ddd30e0b5f081933482424ae5a6b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTA4MzhkMWJlNzJkZGQzMGUwYjVmMDgxOTMzNDgyNDI0YWU1YTZiMA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T20:28:35Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T22:17:01Z"
    },
    "message": "Don't write to inferior_ptid in windows-nat.c, part II\n\nWriting to inferior_ptid in\nwindows_nat_target::get_windows_debug_event is just incorrect and not\nnecessary.  We'll report the event to GDB's core, which then takes\ncare of switching inferior_ptid / current thread.\n\nRelated (see windows_nat_target::get_windows_debug_event), there's\nalso a \"current_windows_thread\" global that is just begging to get out\nof sync with core GDB's current thread.  This patch removes it.\ngdbserver already does not have an equivalent global in win32-low.cc.\n\ngdb/ChangeLog:\n2020-06-18  Pedro Alves  <palves@redhat.com>\n\n\t* nat/windows-nat.c (current_windows_thread): Remove.\n\t* nat/windows-nat.h (current_windows_thread): Remove.\n\t* windows-nat.c (windows_nat_target::stopped_by_sw_breakpoint):\n\tAdjust.\n\t(display_selectors): Adjust to fetch the current\n\twindows_thread_info based on inferior_ptid.\n\t(fake_create_process): No longer write to current_windows_thread.\n\t(windows_nat_target::get_windows_debug_event):\n\tDon't set inferior_ptid or current_windows_thread.\n\t(windows_nat_target::wait): Adjust to not rely on\n\tcurrent_windows_thread.\n\t(do_initial_windows_stuff): Now a method of windows_nat_target.\n\tSwitch to the last_ptid thread.\n\t(windows_nat_target::attach): Adjust.\n\t(windows_nat_target::detach): Use switch_to_no_thread instead of\n\twriting to inferior_ptid directly.\n\t(windows_nat_target::create_inferior): Adjust.",
    "tree": {
      "sha": "cd02b16ad56827c891755a03fa64a2b1ac10309f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd02b16ad56827c891755a03fa64a2b1ac10309f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/50838d1be72ddd30e0b5f081933482424ae5a6b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50838d1be72ddd30e0b5f081933482424ae5a6b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/50838d1be72ddd30e0b5f081933482424ae5a6b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50838d1be72ddd30e0b5f081933482424ae5a6b0/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "31ce04e9e0ce96e752e2c53dfad5881d24e9f080",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31ce04e9e0ce96e752e2c53dfad5881d24e9f080",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/31ce04e9e0ce96e752e2c53dfad5881d24e9f080"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 70,
    "deletions": 51
  },
  "files": [
    {
      "sha": "9d0659a3f849cfe15157ef867083a9e7af2bc887",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=50838d1be72ddd30e0b5f081933482424ae5a6b0",
      "patch": "@@ -1,3 +1,23 @@\n+2020-06-18  Pedro Alves  <palves@redhat.com>\n+\n+\t* nat/windows-nat.c (current_windows_thread): Remove.\n+\t* nat/windows-nat.h (current_windows_thread): Remove.\n+\t* windows-nat.c (windows_nat_target::stopped_by_sw_breakpoint):\n+\tAdjust.\n+\t(display_selectors): Adjust to fetch the current\n+\twindows_thread_info based on inferior_ptid.\n+\t(fake_create_process): No longer write to current_windows_thread.\n+\t(windows_nat_target::get_windows_debug_event):\n+\tDon't set inferior_ptid or current_windows_thread.\n+\t(windows_nat_target::wait): Adjust to not rely on\n+\tcurrent_windows_thread.\n+\t(do_initial_windows_stuff): Now a method of windows_nat_target.\n+\tSwitch to the last_ptid thread.\n+\t(windows_nat_target::attach): Adjust.\n+\t(windows_nat_target::detach): Use switch_to_no_thread instead of\n+\twriting to inferior_ptid directly.\n+\t(windows_nat_target::create_inferior): Adjust.\n+\n 2020-06-18  Pedro Alves  <palves@redhat.com>\n \n \t* windows-nat.c (do_initial_windows_stuff): No longer set inferior_ptid."
    },
    {
      "sha": "be6db9719a0b37b8ad4db089ac70bf626fd592ef",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=50838d1be72ddd30e0b5f081933482424ae5a6b0",
      "patch": "@@ -36,7 +36,6 @@ DEBUG_EVENT current_event;\n    ContinueDebugEvent.  */\n static DEBUG_EVENT last_wait_event;\n \n-windows_thread_info *current_windows_thread;\n DWORD desired_stop_thread_id = -1;\n std::vector<pending_stop> pending_stops;\n EXCEPTION_RECORD siginfo_er;"
    },
    {
      "sha": "f742db2acc8e71167075ae4716c1dfa3041bd585",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=50838d1be72ddd30e0b5f081933482424ae5a6b0",
      "patch": "@@ -180,9 +180,6 @@ extern enum gdb_signal last_sig;\n    stop.  */\n extern DEBUG_EVENT current_event;\n \n-/* Info on currently selected thread */\n-extern windows_thread_info *current_windows_thread;\n-\n /* The ID of the thread for which we anticipate a stop event.\n    Normally this is -1, meaning we'll accept an event in any\n    thread.  */"
    },
    {
      "sha": "68df87d1bf2275d006a4dab254f0c890c7d29ca6",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 50,
      "deletions": 47,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50838d1be72ddd30e0b5f081933482424ae5a6b0/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=50838d1be72ddd30e0b5f081933482424ae5a6b0",
      "patch": "@@ -317,7 +317,9 @@ struct windows_nat_target final : public x86_nat_target<inf_child_target>\n \n   bool stopped_by_sw_breakpoint () override\n   {\n-    return current_windows_thread->stopped_at_software_breakpoint;\n+    windows_thread_info *th\n+      = thread_rec (inferior_ptid, DONT_INVALIDATE_CONTEXT);\n+    return th->stopped_at_software_breakpoint;\n   }\n \n   bool supports_stopped_by_sw_breakpoint () override\n@@ -356,6 +358,8 @@ struct windows_nat_target final : public x86_nat_target<inf_child_target>\n   const char *thread_name (struct thread_info *) override;\n \n   int get_windows_debug_event (int pid, struct target_waitstatus *ourstatus);\n+\n+  void do_initial_windows_stuff (DWORD pid, bool attaching);\n };\n \n static windows_nat_target the_windows_nat_target;\n@@ -1131,11 +1135,15 @@ display_selector (HANDLE thread, DWORD sel)\n static void\n display_selectors (const char * args, int from_tty)\n {\n-  if (!current_windows_thread)\n+  if (inferior_ptid == null_ptid)\n     {\n       puts_filtered (\"Impossible to display selectors now.\\n\");\n       return;\n     }\n+\n+  windows_thread_info *current_windows_thread\n+    = thread_rec (inferior_ptid, DONT_INVALIDATE_CONTEXT);\n+\n   if (!args)\n     {\n #ifdef __x86_64__\n@@ -1367,12 +1375,11 @@ fake_create_process (void)\n        (unsigned) GetLastError ());\n       /*  We can not debug anything in that case.  */\n     }\n-  current_windows_thread\n-    = windows_add_thread (ptid_t (current_event.dwProcessId,\n-\t\t\t\t  current_event.dwThreadId, 0),\n-\t\t\t  current_event.u.CreateThread.hThread,\n-\t\t\t  current_event.u.CreateThread.lpThreadLocalBase,\n-\t\t\t  true /* main_thread_p */);\n+  windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n+\t\t\t      current_event.dwThreadId),\n+\t\t      current_event.u.CreateThread.hThread,\n+\t\t      current_event.u.CreateThread.lpThreadLocalBase,\n+\t\t      true /* main_thread_p */);\n   return current_event.dwThreadId;\n }\n \n@@ -1532,8 +1539,6 @@ windows_nat_target::get_windows_debug_event (int pid,\n {\n   BOOL debug_event;\n   DWORD continue_status, event_code;\n-  windows_thread_info *th;\n-  static windows_thread_info dummy_thread_info (0, 0, 0);\n   DWORD thread_id = 0;\n \n   /* If there is a relevant pending stop, report it now.  See the\n@@ -1545,10 +1550,9 @@ windows_nat_target::get_windows_debug_event (int pid,\n       thread_id = stop->thread_id;\n       *ourstatus = stop->status;\n \n-      inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-      current_windows_thread = thread_rec (inferior_ptid,\n-\t\t\t\t\t   INVALIDATE_CONTEXT);\n-      current_windows_thread->reload_context = 1;\n+      ptid_t ptid (current_event.dwProcessId, thread_id);\n+      windows_thread_info *th = thread_rec (ptid, INVALIDATE_CONTEXT);\n+      th->reload_context = 1;\n \n       return thread_id;\n     }\n@@ -1562,7 +1566,6 @@ windows_nat_target::get_windows_debug_event (int pid,\n \n   event_code = current_event.dwDebugEventCode;\n   ourstatus->kind = TARGET_WAITKIND_SPURIOUS;\n-  th = NULL;\n   have_saved_context = 0;\n \n   switch (event_code)\n@@ -1588,7 +1591,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t}\n       /* Record the existence of this thread.  */\n       thread_id = current_event.dwThreadId;\n-      th = windows_add_thread\n+      windows_add_thread\n         (ptid_t (current_event.dwProcessId, current_event.dwThreadId, 0),\n \t current_event.u.CreateThread.hThread,\n \t current_event.u.CreateThread.lpThreadLocalBase,\n@@ -1605,7 +1608,6 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t\t\t\t     current_event.dwThreadId, 0),\n \t\t\t     current_event.u.ExitThread.dwExitCode,\n \t\t\t     false /* main_thread_p */);\n-      th = &dummy_thread_info;\n       break;\n \n     case CREATE_PROCESS_DEBUG_EVENT:\n@@ -1619,7 +1621,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n \n       current_process_handle = current_event.u.CreateProcessInfo.hProcess;\n       /* Add the main thread.  */\n-      th = windows_add_thread\n+      windows_add_thread\n         (ptid_t (current_event.dwProcessId,\n \t\t current_event.dwThreadId, 0),\n \t current_event.u.CreateProcessInfo.hThread,\n@@ -1756,22 +1758,14 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t  && windows_initialization_done)\n \t{\n \t  ptid_t ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-\t  th = thread_rec (ptid, INVALIDATE_CONTEXT);\n+\t  windows_thread_info *th = thread_rec (ptid, INVALIDATE_CONTEXT);\n \t  th->stopped_at_software_breakpoint = true;\n \t  th->pc_adjusted = false;\n \t}\n       pending_stops.push_back ({thread_id, *ourstatus, current_event});\n       thread_id = 0;\n       CHECK (windows_continue (continue_status, desired_stop_thread_id, 0));\n     }\n-  else\n-    {\n-      inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-      current_windows_thread = th;\n-      if (!current_windows_thread)\n-\tcurrent_windows_thread = thread_rec (inferior_ptid,\n-\t\t\t\t\t     INVALIDATE_CONTEXT);\n-    }\n \n out:\n   return thread_id;\n@@ -1828,19 +1822,24 @@ windows_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t{\n \t  ptid_t result = ptid_t (current_event.dwProcessId, retval, 0);\n \n-\t  if (current_windows_thread != nullptr)\n+\t  if (ourstatus->kind != TARGET_WAITKIND_EXITED\n+\t      && ourstatus->kind !=  TARGET_WAITKIND_SIGNALLED)\n \t    {\n-\t      current_windows_thread->stopped_at_software_breakpoint = false;\n-\t      if (current_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT\n-\t\t  && ((current_event.u.Exception.ExceptionRecord.ExceptionCode\n-\t\t       == EXCEPTION_BREAKPOINT)\n-\t\t      || (current_event.u.Exception.ExceptionRecord.ExceptionCode\n-\t\t\t  == STATUS_WX86_BREAKPOINT))\n-\t\t  && windows_initialization_done)\n+\t      windows_thread_info *th = thread_rec (result, INVALIDATE_CONTEXT);\n+\n+\t      if (th != nullptr)\n \t\t{\n-\t\t  current_windows_thread->stopped_at_software_breakpoint\n-\t\t    = true;\n-\t\t  current_windows_thread->pc_adjusted = false;\n+\t\t  th->stopped_at_software_breakpoint = false;\n+\t\t  if (current_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT\n+\t\t      && ((current_event.u.Exception.ExceptionRecord.ExceptionCode\n+\t\t\t   == EXCEPTION_BREAKPOINT)\n+\t\t\t  || (current_event.u.Exception.ExceptionRecord.ExceptionCode\n+\t\t\t      == STATUS_WX86_BREAKPOINT))\n+\t\t      && windows_initialization_done)\n+\t\t    {\n+\t\t      th->stopped_at_software_breakpoint = true;\n+\t\t      th->pc_adjusted = false;\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -1976,8 +1975,8 @@ windows_add_all_dlls (void)\n     }\n }\n \n-static void\n-do_initial_windows_stuff (struct target_ops *ops, DWORD pid, int attaching)\n+void\n+windows_nat_target::do_initial_windows_stuff (DWORD pid, bool attaching)\n {\n   int i;\n   struct inferior *inf;\n@@ -1993,8 +1992,8 @@ do_initial_windows_stuff (struct target_ops *ops, DWORD pid, int attaching)\n #endif\n   current_event.dwProcessId = pid;\n   memset (&current_event, 0, sizeof (current_event));\n-  if (!target_is_pushed (ops))\n-    push_target (ops);\n+  if (!target_is_pushed (this))\n+    push_target (this);\n   disable_breakpoints_in_shlibs ();\n   windows_clear_solib ();\n   clear_proceed_status (0);\n@@ -2024,21 +2023,25 @@ do_initial_windows_stuff (struct target_ops *ops, DWORD pid, int attaching)\n \n   windows_initialization_done = 0;\n \n+  ptid_t last_ptid;\n+\n   while (1)\n     {\n       struct target_waitstatus status;\n \n-      ops->wait (minus_one_ptid, &status, 0);\n+      last_ptid = this->wait (minus_one_ptid, &status, 0);\n \n       /* Note windows_wait returns TARGET_WAITKIND_SPURIOUS for thread\n \t events.  */\n       if (status.kind != TARGET_WAITKIND_LOADED\n \t  && status.kind != TARGET_WAITKIND_SPURIOUS)\n \tbreak;\n \n-      ops->resume (minus_one_ptid, 0, GDB_SIGNAL_0);\n+      this->resume (minus_one_ptid, 0, GDB_SIGNAL_0);\n     }\n \n+  switch_to_thread (find_thread_ptid (this, last_ptid));\n+\n   /* Now that the inferior has been started and all DLLs have been mapped,\n      we can iterate over all DLLs and load them in.\n \n@@ -2170,7 +2173,7 @@ windows_nat_target::attach (const char *args, int from_tty)\n     }\n #endif\n \n-  do_initial_windows_stuff (this, pid, 1);\n+  do_initial_windows_stuff (pid, 1);\n   target_terminal::ours ();\n }\n \n@@ -2200,7 +2203,7 @@ windows_nat_target::detach (inferior *inf, int from_tty)\n     }\n \n   x86_cleanup_dregs ();\n-  inferior_ptid = null_ptid;\n+  switch_to_no_thread ();\n   detach_inferior (inf);\n \n   maybe_unpush_target ();\n@@ -3010,7 +3013,7 @@ windows_nat_target::create_inferior (const char *exec_file,\n   else\n     saw_create = 0;\n \n-  do_initial_windows_stuff (this, pi.dwProcessId, 0);\n+  do_initial_windows_stuff (pi.dwProcessId, 0);\n \n   /* windows_continue (DBG_CONTINUE, -1, 0); */\n }"
    }
  ]
}