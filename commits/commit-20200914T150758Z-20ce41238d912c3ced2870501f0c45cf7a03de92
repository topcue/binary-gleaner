{
  "sha": "20ce41238d912c3ced2870501f0c45cf7a03de92",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjBjZTQxMjM4ZDkxMmMzY2VkMjg3MDUwMWYwYzQ1Y2Y3YTAzZGU5Mg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:58Z"
    },
    "message": "gdb: remove TYPE_NOSIGN\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_NOSIGN): Remove, replace all uses with\n\ttype::has_no_signedness.\n\nChange-Id: Iaf8d1cedad195d03a4358e90f6ada77290d03bf2",
    "tree": {
      "sha": "630ff96627efa10d3b1fb4e72f9091b9c80ae181",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/630ff96627efa10d3b1fb4e72f9091b9c80ae181"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/20ce41238d912c3ced2870501f0c45cf7a03de92",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20ce41238d912c3ced2870501f0c45cf7a03de92",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/20ce41238d912c3ced2870501f0c45cf7a03de92",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20ce41238d912c3ced2870501f0c45cf7a03de92/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/15152a54aebbd4eba6151b20333ba48ccfd703c5"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 20,
    "deletions": 17
  },
  "files": [
    {
      "sha": "6d46d5e5425356bcdf583ae2cee8a1c9ad756b7b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_NOSIGN): Remove, replace all uses with\n+\ttype::has_no_signedness.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <has_no_signedness,"
    },
    {
      "sha": "3527442e4eda2120e57988aa4e8318601ab8d8da",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -194,7 +194,7 @@ convert_int (compile_c_instance *context, struct type *type)\n {\n   if (context->plugin ().version () >= GCC_C_FE_VERSION_1)\n     {\n-      if (TYPE_NOSIGN (type))\n+      if (type->has_no_signedness ())\n \t{\n \t  gdb_assert (TYPE_LENGTH (type) == 1);\n \t  return context->plugin ().char_type ();"
    },
    {
      "sha": "8431cbc6c113b850fb0370abe21d491397900cc2",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -1015,7 +1015,7 @@ compile_cplus_convert_func (compile_cplus_instance *instance,\n static gcc_type\n compile_cplus_convert_int (compile_cplus_instance *instance, struct type *type)\n {\n-  if (TYPE_NOSIGN (type))\n+  if (type->has_no_signedness ())\n     {\n       gdb_assert (TYPE_LENGTH (type) == 1);\n       return instance->plugin ().get_char_type ();"
    },
    {
      "sha": "267cf0f18a886850684a062d5f5016c7b25d7694",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -10502,7 +10502,7 @@ dwarf2_compute_name (const char *name,\n \t\t\t\t\t   &cu->comp_unit_obstack, cu,\n \t\t\t\t\t   &value, &bytes, &baton);\n \n-\t\t  if (TYPE_NOSIGN (type))\n+\t\t  if (type->has_no_signedness ())\n \t\t    /* GDB prints characters as NUMBER 'CHAR'.  If that's\n \t\t       changed, this can use value_print instead.  */\n \t\t    c_printchar (value, type, &buf);"
    },
    {
      "sha": "997bb09c184c5966d61212a0583f6c1b40d1a301",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -3990,7 +3990,7 @@ check_types_equal (struct type *type1, struct type *type2,\n   if (type1->code () != type2->code ()\n       || TYPE_LENGTH (type1) != TYPE_LENGTH (type2)\n       || type1->is_unsigned () != type2->is_unsigned ()\n-      || TYPE_NOSIGN (type1) != TYPE_NOSIGN (type2)\n+      || type1->has_no_signedness () != type2->has_no_signedness ()\n       || TYPE_ENDIANITY_NOT_DEFAULT (type1) != TYPE_ENDIANITY_NOT_DEFAULT (type2)\n       || TYPE_VARARGS (type1) != TYPE_VARARGS (type2)\n       || TYPE_VECTOR (type1) != TYPE_VECTOR (type2)\n@@ -4264,10 +4264,10 @@ rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value\n \t{\n \t  /* Deal with signed, unsigned, and plain chars and\n \t     signed and unsigned ints.  */\n-\t  if (TYPE_NOSIGN (parm))\n+\t  if (parm->has_no_signedness ())\n \t    {\n \t      /* This case only for character types.  */\n-\t      if (TYPE_NOSIGN (arg))\n+\t      if (arg->has_no_signedness ())\n \t\treturn EXACT_MATCH_BADNESS;\t/* plain char -> plain char */\n \t      else\t\t/* signed/unsigned char -> plain char */\n \t\treturn INTEGER_CONVERSION_BADNESS;\n@@ -4304,7 +4304,7 @@ rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value\n \t\t    return INTEGER_CONVERSION_BADNESS;\n \t\t}\n \t    }\n-\t  else if (!TYPE_NOSIGN (arg) && !arg->is_unsigned ())\n+\t  else if (!arg->has_no_signedness () && !arg->is_unsigned ())\n \t    {\n \t      if (integer_types_same_name_p (parm->name (),\n \t\t\t\t\t     arg->name ()))\n@@ -4387,9 +4387,9 @@ rank_one_type_parm_char (struct type *parm, struct type *arg, struct value *valu\n     case TYPE_CODE_CHAR:\n       /* Deal with signed, unsigned, and plain chars for C++ and\n \t with int cases falling through from previous case.  */\n-      if (TYPE_NOSIGN (parm))\n+      if (parm->has_no_signedness ())\n \t{\n-\t  if (TYPE_NOSIGN (arg))\n+\t  if (arg->has_no_signedness ())\n \t    return EXACT_MATCH_BADNESS;\n \t  else\n \t    return INTEGER_CONVERSION_BADNESS;\n@@ -4401,7 +4401,7 @@ rank_one_type_parm_char (struct type *parm, struct type *arg, struct value *valu\n \t  else\n \t    return INTEGER_PROMOTION_BADNESS;\n \t}\n-      else if (!TYPE_NOSIGN (arg) && !arg->is_unsigned ())\n+      else if (!arg->has_no_signedness () && !arg->is_unsigned ())\n \treturn EXACT_MATCH_BADNESS;\n       else\n \treturn INTEGER_CONVERSION_BADNESS;\n@@ -5068,7 +5068,7 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       puts_filtered (\" TYPE_UNSIGNED\");\n     }\n-  if (TYPE_NOSIGN (type))\n+  if (type->has_no_signedness ())\n     {\n       puts_filtered (\" TYPE_NOSIGN\");\n     }"
    },
    {
      "sha": "0be0f5c5645b405a0c7482363f5a3de5ad7ef71e",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/20ce41238d912c3ced2870501f0c45cf7a03de92/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=20ce41238d912c3ced2870501f0c45cf7a03de92",
      "patch": "@@ -210,12 +210,6 @@ enum type_instance_flag_value : unsigned\n \n DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n-/* * No sign for this type.  In C++, \"char\", \"signed char\", and\n-   \"unsigned char\" are distinct types; so we need an extra flag to\n-   indicate the absence of a sign!  */\n-\n-#define TYPE_NOSIGN(t)\t\t((t)->has_no_signedness ())\n-\n /* * A compiler may supply dwarf instrumentation\n    that indicates the desired endian interpretation of the variable\n    differs from the native endian representation. */\n@@ -1076,6 +1070,10 @@ struct type\n     this->main_type->m_flag_unsigned = is_unsigned;\n   }\n \n+  /* No sign for this type.  In C++, \"char\", \"signed char\", and\n+     \"unsigned char\" are distinct types; so we need an extra flag to\n+     indicate the absence of a sign!  */\n+\n   bool has_no_signedness () const\n   {\n     return this->main_type->m_flag_nosign;"
    }
  ]
}