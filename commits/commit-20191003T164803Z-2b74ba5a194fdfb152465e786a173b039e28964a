{
  "sha": "2b74ba5a194fdfb152465e786a173b039e28964a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmI3NGJhNWExOTRmZGZiMTUyNDY1ZTc4NmExNzNiMDM5ZTI4OTY0YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-16T01:50:17Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-03T16:48:03Z"
    },
    "message": "gdb/testsuite: Reduce test name duplication in gdb.base tests\n\nThis commit removes some, but not all, of the test name duplication\nwithin the gdb.base tests.  On my local machine this takes the number\nof duplicate test names in this set of tests from 454 to 145.  It is\npossible that different setups might encounter more duplicate tests.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/break-interp.exp: Reduce test name duplication.\n\t* gdb.base/call-sc.exp: Likewise.\n\t* gdb.base/callfuncs.exp: Likewise.\n\t* gdb.base/charset.exp: Likewise.\n\t* gdb.base/dump.exp: Likewise.\n\t* gdb.base/ena-dis-br.exp: Likewise.\n\t* gdb.base/relational.exp: Likewise.\n\t* gdb.base/step-over-syscall.exp: Likewise.\n\t* gdb.base/structs.exp: Likewise.",
    "tree": {
      "sha": "4add8f54de9161e60ad746ce0dafd2750860d601",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4add8f54de9161e60ad746ce0dafd2750860d601"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2b74ba5a194fdfb152465e786a173b039e28964a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b74ba5a194fdfb152465e786a173b039e28964a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2b74ba5a194fdfb152465e786a173b039e28964a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b74ba5a194fdfb152465e786a173b039e28964a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "58eb20d527dbb0ebf26c21ecb32263def26d4593",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58eb20d527dbb0ebf26c21ecb32263def26d4593",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/58eb20d527dbb0ebf26c21ecb32263def26d4593"
    }
  ],
  "stats": {
    "total": 425,
    "additions": 251,
    "deletions": 174
  },
  "files": [
    {
      "sha": "2261b15542b30b4296393f6b9b1fefefbdc40a66",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/break-interp.exp: Reduce test name duplication.\n+\t* gdb.base/call-sc.exp: Likewise.\n+\t* gdb.base/callfuncs.exp: Likewise.\n+\t* gdb.base/charset.exp: Likewise.\n+\t* gdb.base/dump.exp: Likewise.\n+\t* gdb.base/ena-dis-br.exp: Likewise.\n+\t* gdb.base/relational.exp: Likewise.\n+\t* gdb.base/step-over-syscall.exp: Likewise.\n+\t* gdb.base/structs.exp: Likewise.\n+\n 2019-10-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.linespec/explicit.exp: Make test names unique."
    },
    {
      "sha": "a03c9f43fda254d92abe04e243bb37c849851197",
      "filename": "gdb/testsuite/gdb.base/break-interp.exp",
      "status": "modified",
      "additions": 45,
      "deletions": 31,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/break-interp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/break-interp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/break-interp.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -191,8 +191,16 @@ proc reach_1 {func command displacement} {\n # DISPLACEMENT can be \"NONE\" for no message to be present, \"ZERO\" for\n # displacement of 0 bytes to be present, \"NONZERO\" for displacement of non-0\n # bytes to be present and \"PRESENT\" if both \"ZERO\" and \"NONZERO\" are valid.\n-proc reach {func command displacement} {\n-    with_test_prefix \"reach-$func\" {\n+#\n+# The optional ITERATION parameter is used in order to make unique\n+# test prefixes, when calling this proc with the same FUNC name\n+# provide a unique ITERATION value for each call.\n+proc reach {func command displacement {iteration 1}} {\n+    set prefix \"reach-$func\"\n+    if { $iteration > 1 } {\n+\tset prefix \"$prefix-$iteration\"\n+    }\n+    with_test_prefix $prefix {\n \treach_1 $func $command $displacement\n     }\n }\n@@ -399,7 +407,7 @@ proc test_ld {file ifmain trynosym displacement} {\n \t    \"set args OBJDIR/${subdir}/$binfile_test\"\n     }\n \n-    reach $solib_bp \"run\" $displacement\n+    reach $solib_bp \"run\" $displacement 1\n \n     gdb_test \"bt\" \"#0 +\\[^\\r\\n\\]*\\\\m(__GI_)?$solib_bp\\\\M.*\" \"dl bt\"\n \n@@ -413,7 +421,7 @@ proc test_ld {file ifmain trynosym displacement} {\n \n     # Try re-run if the new PIE displacement takes effect.\n     gdb_test \"kill\" \"\" \"kill\" {Kill the program being debugged\\? \\(y or n\\) } \"y\"\n-    reach $solib_bp \"run\" $displacement\n+    reach $solib_bp \"run\" $displacement 2\n \n     if $ifmain {\n \ttest_core $file $displacement\n@@ -445,7 +453,7 @@ proc test_ld {file ifmain trynosym displacement} {\n \tgdb_test \"exec-file $file\" \"exec-file $escapedfile\" \"load\"\n \n \tif $ifmain {\n-\t    reach $solib_bp run $displacement\n+\t    reach $solib_bp run $displacement 3\n \n \t    # Use two separate gdb_test_multiple statements to avoid timeouts due\n \t    # to slow processing of wildcard capturing long output\n@@ -594,9 +602,10 @@ foreach ldprelink {NO YES} {\n \t\tfile delete \"${interp}.debug\"\n \t    }\n \n-\t    if ![prelink$ldprelink $interp] {\n+\t    if ![prelink$ldprelink $interp \"$interp, second time\"] {\n \t\tcontinue\n \t    }\n+\n \t    if {$ldprelink == \"NO\"} {\n \t\tset displacement \"NONZERO\"\n \t    } else {\n@@ -662,34 +671,39 @@ foreach ldprelink {NO YES} {\n \n \t\t\t    if {[prelink$binprelink $relink_args [file tail $exec]]\n \t\t\t\t&& [file_copy $interp_saved $interp]} {\n-\t\t\t\tif {$binpie != \"ATTACH\"} {\n-\t\t\t\t    test_ld $exec 1 [expr {$binsepdebug == \"NO\"}] $displacement\n-\t\t\t\t} else {\n-\t\t\t\t    # If the file has been randomly prelinked it must be\n-\t\t\t\t    # \"NONZERO\".  We could see \"ZERO\" only if it was unprelinked\n-\t\t\t\t    # and it is now running at the same address - which is 0 but\n-\t\t\t\t    # executable can never run at address 0.\n-\n-\t\t\t\t    set displacement \"NONZERO\"\n-\t\t\t\t    test_attach $exec $displacement $relink_args\n-\n-\t\t\t\t    # ATTACH means that executables and libraries have been\n-\t\t\t\t    # modified after they have been run.  They cannot be reused\n-\t\t\t\t    # for problem reproducibility after the testcase ends in\n-\t\t\t\t    # the ATTACH case.  Therefore they are rather deleted not\n-\t\t\t\t    # to confuse after the run finishes.\n-\t\t\t\t    set exec_debug [system_debug_get $exec]\n-\t\t\t\t    if {$exec_debug != \"\"} {\n-\t\t\t\t\t# `file delete [glob \"${exec_debug}*\"]' does not work.\n-\t\t\t\t\tforeach f [glob \"${exec_debug}*\"] {\n+\t\t\t\t# In order to make test names unique wrap the core of this if block\n+\t\t\t\t# with a test prefix.  Some of the tests performed in the if\n+\t\t\t\t# condition are repeated within this body.\n+\t\t\t\twith_test_prefix \"INNER\" {\n+\t\t\t\t    if {$binpie != \"ATTACH\"} {\n+\t\t\t\t\ttest_ld $exec 1 [expr {$binsepdebug == \"NO\"}] $displacement\n+\t\t\t\t    } else {\n+\t\t\t\t\t# If the file has been randomly prelinked it must be\n+\t\t\t\t\t# \"NONZERO\".  We could see \"ZERO\" only if it was unprelinked\n+\t\t\t\t\t# and it is now running at the same address - which is 0 but\n+\t\t\t\t\t# executable can never run at address 0.\n+\n+\t\t\t\t\tset displacement \"NONZERO\"\n+\t\t\t\t\ttest_attach $exec $displacement $relink_args\n+\n+\t\t\t\t\t# ATTACH means that executables and libraries have been\n+\t\t\t\t\t# modified after they have been run.  They cannot be reused\n+\t\t\t\t\t# for problem reproducibility after the testcase ends in\n+\t\t\t\t\t# the ATTACH case.  Therefore they are rather deleted not\n+\t\t\t\t\t# to confuse after the run finishes.\n+\t\t\t\t\tset exec_debug [system_debug_get $exec]\n+\t\t\t\t\tif {$exec_debug != \"\"} {\n+\t\t\t\t\t    # `file delete [glob \"${exec_debug}*\"]' does not work.\n+\t\t\t\t\t    foreach f [glob \"${exec_debug}*\"] {\n+\t\t\t\t\t\tfile delete $f\n+\t\t\t\t\t    }\n+\t\t\t\t\t}\n+\t\t\t\t\tfile delete -force $dir\n+\t\t\t\t\t# `file delete [glob \"${exec}*\"]' does not work.\n+\t\t\t\t\tforeach f [glob \"${exec}*\"] {\n \t\t\t\t\t    file delete $f\n \t\t\t\t\t}\n \t\t\t\t    }\n-\t\t\t\t    file delete -force $dir\n-\t\t\t\t    # `file delete [glob \"${exec}*\"]' does not work.\n-\t\t\t\t    foreach f [glob \"${exec}*\"] {\n-\t\t\t\t\tfile delete $f\n-\t\t\t\t    }\n \t\t\t\t}\n \t\t\t    }\n \t\t\t}"
    },
    {
      "sha": "6cb67f85ae3f2a9eb251354f19410f8210342019",
      "filename": "gdb/testsuite/gdb.base/call-sc.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/call-sc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/call-sc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/call-sc.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -71,9 +71,11 @@ proc start_scalars_test { type } {\n     gdb_load ${binfile}\n \n     # Make certain that the output is consistent\n-    gdb_test_no_output \"set print sevenbit-strings\"\n-    gdb_test_no_output \"set print address off\"\n-    gdb_test_no_output \"set width 0\"\n+    with_test_prefix \"testfile=$testfile\" {\n+\tgdb_test_no_output \"set print sevenbit-strings\"\n+\tgdb_test_no_output \"set print address off\"\n+\tgdb_test_no_output \"set width 0\"\n+    }\n \n     # Advance to main\n     if { ![runto_main] } then {\n@@ -243,7 +245,7 @@ proc test_scalar_returns { } {\n     #\n     # This happens on ppc64 GNU/Linux with gcc 3.4.1 and a buggy GDB\n \n-    set test \"return foo; synchronize pc to main()\"\n+    set test \"return foo; synchronize pc to main() for '${testfile}'\"\n     for {set loop_count 0} {$loop_count < 2} {incr loop_count} {\n       gdb_test_multiple \"backtrace 1\" $test {\n         -re \"#0.*main \\\\(\\\\).*${gdb_prompt} $\" {"
    },
    {
      "sha": "3f33feba42b97972db7abc9e4450cd00b4eb1148",
      "filename": "gdb/testsuite/gdb.base/callfuncs.exp",
      "status": "modified",
      "additions": 31,
      "deletions": 16,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/callfuncs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/callfuncs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/callfuncs.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -322,21 +322,31 @@ proc fetch_all_registers {test} {\n     return $all_registers_lines\n }\n \n+# Global used by RERUN_AND_PREPARE to make test names unique.\n+set rerun_count 0\n+\n proc rerun_and_prepare {} {\n-    if { ![runto_main] } {\n-\tgdb_suppress_tests\n-    }\n+    global rerun_count\n+\n+    incr rerun_count\n+    with_test_prefix \"rerun number ${rerun_count}\" {\n \n-    gdb_test_no_output \"set language c\"\n+\tif { ![runto_main] } {\n+\t    gdb_suppress_tests\n+\t}\n+\n+\tgdb_test_no_output \"set language c\"\n \n-    get_debug_format\n+\tget_debug_format\n \n-    # Make sure that malloc gets called and that the floating point unit\n-    # is initialized via a call to t_double_values.\n-    gdb_test \"next\" \"t_double_values\\\\(double_val1, double_val2\\\\);.*\" \\\n-\t\"next to t_double_values\"\n-    gdb_test \"next\" \"t_structs_c\\\\(struct_val1\\\\);.*\" \\\n-\t\"next to t_structs_c\"\n+\t# Make sure that malloc gets called and that the floating\n+\t# point unit is initialized via a call to t_double_values.\n+\tgdb_test \"next\" \\\n+\t    \"t_double_values\\\\(double_val1, double_val2\\\\);.*\" \\\n+\t    \"next to t_double_values\"\n+\tgdb_test \"next\" \"t_structs_c\\\\(struct_val1\\\\);.*\" \\\n+\t    \"next to t_structs_c\"\n+    }\n }\n \n proc perform_all_tests {prototypes} {\n@@ -347,7 +357,8 @@ proc perform_all_tests {prototypes} {\n     rerun_and_prepare\n \n     # Save all register contents.\n-    set old_reg_content [fetch_all_registers \"retrieve original register contents\"]\n+    set old_reg_content \\\n+\t[fetch_all_registers \"retrieve original register contents 1\"]\n \n     # Perform function calls.\n     do_function_calls $prototypes\n@@ -364,7 +375,8 @@ proc perform_all_tests {prototypes} {\n \n     rerun_and_prepare\n     # Save all register contents.\n-    set old_reg_content [fetch_all_registers \"retrieve original register contents\"]\n+    set old_reg_content \\\n+\t[fetch_all_registers \"retrieve original register contents 2\"]\n \n     # Set breakpoint at a function we will call from gdb.\n     gdb_breakpoint add\n@@ -391,7 +403,8 @@ proc perform_all_tests {prototypes} {\n     # Set breakpoint at a function we will call from gdb.\n     gdb_breakpoint add\n     # Save all register contents.\n-    set old_reg_content [fetch_all_registers \"retrieve original register contents\"]\n+    set old_reg_content \\\n+\t[fetch_all_registers \"retrieve original register contents 3\"]\n \n     # Call function (causing a breakpoint hit in the call dummy) and do a finish,\n     # make sure we are back at main and still have the same register contents.\n@@ -416,7 +429,8 @@ proc perform_all_tests {prototypes} {\n     # Set breakpoint at a function we will call from gdb.\n     gdb_breakpoint add\n     # Save all register contents.\n-    set old_reg_content [fetch_all_registers \"retrieve original register contents\"]\n+    set old_reg_content \\\n+\t[fetch_all_registers \"retrieve original register contents 4\"]\n \n     # Call function (causing a breakpoint hit in the call dummy) and do a return\n     # with a value, make sure we are back at main with the same register contents.\n@@ -439,7 +453,8 @@ proc perform_all_tests {prototypes} {\n     rerun_and_prepare\n     # Set breakpoint at a function we will call from gdb.\n     gdb_breakpoint add\n-    set old_reg_content [fetch_all_registers \"retrieve original register contents\"]\n+    set old_reg_content \\\n+\t[fetch_all_registers \"retrieve original register contents 5\"]\n \n     # Call function (causing a breakpoint hit in the call dummy), and\n     # call another function from the call dummy frame (thereby setting up"
    },
    {
      "sha": "16e986c51906d4261a703abaef7064c862acf57b",
      "filename": "gdb/testsuite/gdb.base/charset.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/charset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/charset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/charset.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -175,7 +175,7 @@ gdb_expect {\n # We don't want to test all the charset names here, since that would\n # be too many combinations.  We we pick a subset.\n set charset_subset {ASCII ISO-8859-1 EBCDIC-US IBM1047}\n-foreach host_charset $charset_subset {\n+foreach_with_prefix host_charset $charset_subset {\n     if {[valid_host_charset $host_charset]} {\n \n         set testname \"try `set host-charset $host_charset'\"\n@@ -591,8 +591,12 @@ gdb_test \"print 'a' == 'a' || 'b' == 'b'\" \\\n \n \n proc string_display { var_name set_prefix x_size x_type} {\n-  gdb_test_no_output \"set ${var_name} = ${set_prefix}\\\"Test String\\\\0with zeroes\\\"\" \"assign ${var_name} with prefix ${set_prefix}\"\n-  gdb_test \"x /2${x_size}s ${var_name}\" \".*\\t${x_type}\\\"Test String\\\"\\[\\r\\n\\]+.*\\t${x_type}\\\"with zeroes\\\"\" \"display String ${var_name} with x/${x_size}s\"\n+    with_test_prefix \"set_prefix=$set_prefix\" {\n+\tgdb_test_no_output \"set ${var_name} = ${set_prefix}\\\"Test String\\\\0with zeroes\\\"\"\\\n+\t    \"assign ${var_name} with prefix ${set_prefix}\"\n+\tgdb_test \"x /2${x_size}s ${var_name}\" \".*\\t${x_type}\\\"Test String\\\"\\[\\r\\n\\]+.*\\t${x_type}\\\"with zeroes\\\"\" \\\n+\t    \"display String ${var_name} with x/${x_size}s\"\n+    }\n }\n \n if {$ucs2_ok} {"
    },
    {
      "sha": "7635b6b272a8996179e627791954db2ee051c832",
      "filename": "gdb/testsuite/gdb.base/dump.exp",
      "status": "modified",
      "additions": 27,
      "deletions": 17,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/dump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/dump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/dump.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -30,6 +30,17 @@ if [istarget \"alpha*-*-*\"] then {\n     lappend options \"additional_flags=-Wl,-taso\"\n }\n \n+# Runs the command 'print zero_all ()'.  Uses the PRINT_ZERO_ALL_COUNT\n+# global to ensure the test names are unique.\n+set print_zero_all_count 0\n+proc print_zero_all { } {\n+    global print_zero_all_count\n+\n+    incr print_zero_all_count\n+    gdb_test \"print zero_all ()\" \" = void\" \\\n+\t\"call ${print_zero_all_count} to zero_all function\"\n+}\n+\n # Debian9/Ubuntu16.10 onwards default to PIE enabled. Ensure it is disabled as\n # this causes addresses to be out of range for IHEX.\n lappend options {nopie}\n@@ -272,47 +283,46 @@ proc test_restore_saved_value { restore_args msg oldval newval } {\n \n if ![string compare $is64bitonly \"no\"] then {\n \n-  gdb_test \"print zero_all ()\" \".*\"\n \n   test_restore_saved_value \"[set intarr1.srec]\" \"array as value, srec\" \\\n \t$array_val \"intarray\"\n \n   test_restore_saved_value \"[set intstr1.srec]\" \"struct as value, srec\" \\\n \t$struct_val \"intstruct\"\n \n-  gdb_test \"print zero_all ()\" \"void\" \"zero all\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr2.srec]\" \"array as memory, srec\" \\\n \t$array_val \"intarray\"\n \n   test_restore_saved_value \"[set intstr2.srec]\" \"struct as memory, srec\" \\\n \t$struct_val \"intstruct\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.ihex]\" \"array as value, ihex\" \\\n \t$array_val \"intarray\"\n \n   test_restore_saved_value \"[set intstr1.ihex]\" \"struct as value, ihex\" \\\n \t$struct_val \"intstruct\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr2.ihex]\" \"array as memory, ihex\" \\\n \t$array_val \"intarray\"\n \n   test_restore_saved_value \"[set intstr2.ihex]\" \"struct as memory, ihex\" \\\n \t$struct_val \"intstruct\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.tekhex]\" \"array as value, tekhex\" \\\n \t$array_val \"intarray\"\n \n   test_restore_saved_value \"[set intstr1.tekhex]\" \"struct as value, tekhex\" \\\n \t$struct_val \"intstruct\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr2.tekhex]\" \"array as memory, tekhex\" \\\n \t$array_val \"intarray\"\n@@ -321,7 +331,7 @@ if ![string compare $is64bitonly \"no\"] then {\n \t$struct_val \"intstruct\"\n }\n \n-gdb_test \"print zero_all ()\" \".*\"\n+print_zero_all\n \n test_restore_saved_value \"[set intarr1.bin] binary $array_start\" \\\n \t\"array as value, binary\" \\\n@@ -331,7 +341,7 @@ test_restore_saved_value \"[set intstr1.bin] binary $struct_start\" \\\n \t\"struct as value, binary\" \\\n \t$struct_val \"intstruct\"\n \n-gdb_test \"print zero_all ()\" \".*\"\n+print_zero_all\n \n test_restore_saved_value \"[set intarr2.bin] binary $array_start\" \\\n \t\"array as memory, binary\" \\\n@@ -350,7 +360,7 @@ set array2_offset  \\\n set struct2_offset \\\n \t[capture_value \"(char *) &intstruct2 - (char *) &intstruct\"]\n \n-gdb_test \"print zero_all ()\" \".*\"\n+print_zero_all\n \n \n if ![string compare $is64bitonly \"no\"] then {\n@@ -362,7 +372,7 @@ if ![string compare $is64bitonly \"no\"] then {\n \t\"struct copy, srec\" \\\n \t$struct_val \"intstruct2\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.ihex] $array2_offset\" \\\n \t\"array copy, ihex\" \\\n@@ -372,7 +382,7 @@ if ![string compare $is64bitonly \"no\"] then {\n \t\"struct copy, ihex\" \\\n \t$struct_val \"intstruct2\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.tekhex] $array2_offset\" \\\n \t\"array copy, tekhex\" \\\n@@ -383,7 +393,7 @@ if ![string compare $is64bitonly \"no\"] then {\n \t$struct_val \"intstruct2\"\n }\n \n-gdb_test \"print zero_all ()\" \".*\"\n+print_zero_all\n \n test_restore_saved_value \"[set intarr1.bin] binary $array2_start\" \\\n \t\"array copy, binary\" \\\n@@ -410,23 +420,23 @@ set element4_offset \\\n \t[capture_value \"/x (char *) &intarray\\[4\\] - (char *) &intarray\\[0\\]\"]\n \n if ![string compare $is64bitonly \"no\"] then {\n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.srec] 0 $element3_start $element4_start\" \\\n \t\"array partial, srec\" 4 \"intarray\\[3\\]\"\n \n   gdb_test \"print intarray\\[2\\] == 0\" \" = 1\" \"element 2 not changed - 1\"\n   gdb_test \"print intarray\\[4\\] == 0\" \" = 1\" \"element 4 not changed - 1\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.ihex] 0 $element3_start $element4_start\" \\\n \t\"array partial, ihex\" 4 \"intarray\\[3\\]\"\n \n   gdb_test \"print intarray\\[2\\] == 0\" \" = 1\" \"element 2 not changed - 2\"\n   gdb_test \"print intarray\\[4\\] == 0\" \" = 1\" \"element 4 not changed - 2\"\n \n-  gdb_test \"print zero_all ()\" \".*\"\n+  print_zero_all\n \n   test_restore_saved_value \"[set intarr1.tekhex] 0 $element3_start $element4_start\" \\\n \t\"array partial, tekhex\" 4 \"intarray\\[3\\]\"\n@@ -435,7 +445,7 @@ if ![string compare $is64bitonly \"no\"] then {\n   gdb_test \"print intarray\\[4\\] == 0\" \" = 1\" \"element 4 not changed - 3\"\n }\n \n-gdb_test \"print zero_all ()\" \".*\"\n+print_zero_all\n \n test_restore_saved_value \\\n     \"[set intarr1.bin] binary $array_start $element3_offset $element4_offset\" \\\n@@ -445,7 +455,7 @@ gdb_test \"print intarray\\[2\\] == 0\" \" = 1\" \"element 2 not changed - 4\"\n gdb_test \"print intarray\\[4\\] == 0\" \" = 1\" \"element 4 not changed - 4\"\n \n if ![string compare $is64bitonly \"no\"] then {\n-  gdb_test \"print zero_all ()\" \".*\" \"\"\n+  print_zero_all\n \n   # restore with expressions \n   test_restore_saved_value \\"
    },
    {
      "sha": "cd05052a0ee30820173d298a6de29f00601d7608",
      "filename": "gdb/testsuite/gdb.base/ena-dis-br.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/ena-dis-br.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/ena-dis-br.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ena-dis-br.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -60,7 +60,7 @@ gdb_test_no_output \"enable $bp\" \"enable break marker1\"\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+keep\\[ \\t\\]+y.*\" \\\n-    \"info break marker1\"\n+    \"info break marker1 before hitting breakpoint\"\n \n # See the comments in condbreak.exp for \"run until breakpoint at\n # marker1\" for an explanation of the xfail below.\n@@ -84,7 +84,7 @@ gdb_test_no_output \"enable once $bp\" \"enable once break marker2\"\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+dis\\[ \\t\\]+y.*\" \\\n-    \"info auto-disabled break marker2\"\n+    \"info auto-disabled break marker2 before hitting breakpoint\"\n \n # See the comments in condbreak.exp for \"run until breakpoint at\n # marker1\" for an explanation of the xfail below.\n@@ -100,7 +100,7 @@ gdb_test_multiple \"continue\" \"$test\" {\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+dis\\[ \\t\\]+n.*\" \\\n-    \"info auto-disabled break marker2\"\n+    \"info auto-disabled break marker2 after hitting breakpoint\"\n \n # Verify that we don't stop at a disabled breakpoint.\n gdb_continue_to_end \"no stop\"\n@@ -209,7 +209,7 @@ gdb_test \"ignore $bp 0\" \\\n \n gdb_test \"ignore $bp 1\" \\\n     \"Will ignore next crossing of breakpoint \\[0-9\\]*.*\" \\\n-    \"ignore break marker1\"\n+    \"ignore break marker1 1\"\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+keep\\[ \\t\\]+y.*ignore next 1 hits.*\" \\\n@@ -246,7 +246,7 @@ gdb_test_no_output \"enable del $bp\" \"enable del break marker1\"\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+del\\[ \\t\\]+y.*ignore next 1 hits.*\" \\\n-    \"info break marker1\"\n+    \"info break marker1 after hitting breakpoint\"\n \n gdb_continue_to_end \"no stop at ignored & auto-deleted break marker1\"\n rerun_to_main\n@@ -266,7 +266,7 @@ set bp [break_at marker1 \" line $bp_location15\"]\n \n gdb_test \"ignore $bp 10\" \\\n     \"Will ignore next 10 crossings of breakpoint \\[0-9\\]*.*\" \\\n-    \"ignore break marker1\"\n+    \"ignore break marker1 10\"\n \n gdb_test_no_output \"disable $bp\" \"disable break marker1\"\n "
    },
    {
      "sha": "eb8e0a717f8a65f8ace08f661e43fe0eaeebd20f",
      "filename": "gdb/testsuite/gdb.base/relational.exp",
      "status": "modified",
      "additions": 104,
      "deletions": 89,
      "changes": 193,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/relational.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/relational.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/relational.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -46,147 +46,162 @@ if ![runto_main] then {\n # test expressions with \"int\" types\n #\n \n-gdb_test_no_output \"set variable x=14\" \"set variable x=14\"\n-gdb_test_no_output \"set variable y=2\" \"set variable y=2\"\n-gdb_test_no_output \"set variable z=2\" \"set variable z=2\"\n-gdb_test_no_output \"set variable w=3\" \"set variable w=3\"\n+with_test_prefix \"int types\" {\n \n-gdb_test \"print x\" \" = 14\" \"print value of x\"\n+    gdb_test_no_output \"set variable x=14\" \"set variable x=14\"\n+    gdb_test_no_output \"set variable y=2\" \"set variable y=2\"\n+    gdb_test_no_output \"set variable z=2\" \"set variable z=2\"\n+    gdb_test_no_output \"set variable w=3\" \"set variable w=3\"\n \n-gdb_test \"print y\" \" = 2\" \"print value of y\"\n+    gdb_test \"print x\" \" = 14\" \"print value of x\"\n \n-gdb_test \"print z\" \" = 2\" \"print value of z\"\n+    gdb_test \"print y\" \" = 2\" \"print value of y\"\n \n-gdb_test \"print w\" \" = 3\" \"print value of w\"\n+    gdb_test \"print z\" \" = 2\" \"print value of z\"\n \n-gdb_test \"print x < y\" \"$false\" \"print value of x<y\"\n+    gdb_test \"print w\" \" = 3\" \"print value of w\"\n \n-gdb_test \"print x <= y\" \"$false\" \"print value of x<=y\"\n+    gdb_test \"print x < y\" \"$false\" \"print value of x<y\"\n \n-gdb_test \"print x > y\" \"$true\" \"print value of x>y\"\n+    gdb_test \"print x <= y\" \"$false\" \"print value of x<=y\"\n \n-gdb_test \"print x >= y\" \"$true\" \"print value of x>=y\"\n+    gdb_test \"print x > y\" \"$true\" \"print value of x>y\"\n \n-gdb_test \"print x == y\" \"$false\" \"print value of x==y\"\n+    gdb_test \"print x >= y\" \"$true\" \"print value of x>=y\"\n \n-gdb_test \"print x != y\" \"$true\" \"print value of x!=y\"\n+    gdb_test \"print x == y\" \"$false\" \"print value of x==y\"\n \n+    gdb_test \"print x != y\" \"$true\" \"print value of x!=y\"\n+}\n \n # Test associativity of <, >, <=, >=, ==, !=\n+with_test_prefix \"basic associativity\" {\n \n-gdb_test_no_output \"set variable x=3\" \"set variable x\"\n-gdb_test_no_output \"set variable y=5\" \"set variable y\"\n-gdb_test_no_output \"set variable z=2\" \"set variable z\"\n-\n-gdb_test \"print x < y < z\" \"$true\" \"print value of x<y<z\"\n-\n-gdb_test \"print x <= y <= z\" \"$true\" \"print value of x<=y<=z\"\n-\n-gdb_test \"print x > y > z\" \"$false\" \"print value of x>y>z\"\n-\n-gdb_test \"print x >= y >= z\" \"$false\" \"print value of x>=y>=z\"\n+    gdb_test_no_output \"set variable x=3\" \"set variable x=3\"\n+    gdb_test_no_output \"set variable y=5\" \"set variable y=5\"\n+    gdb_test_no_output \"set variable z=2\" \"set variable z=2\"\n \n-gdb_test_no_output \"set variable x=2\" \"set variable x\"\n-gdb_test_no_output \"set variable y=2\" \"set variable y\"\n-gdb_test_no_output \"set variable z=1\" \"set variable z\"\n+    gdb_test \"print x < y < z\" \"$true\" \"print value of x<y<z\"\n \n-gdb_test \"print x == y == z\" \"$true\" \"print value of x==y==z\"\n+    gdb_test \"print x <= y <= z\" \"$true\" \"print value of x<=y<=z\"\n \n-gdb_test_no_output \"set variable z=0\" \"set variable z\"\n+    gdb_test \"print x > y > z\" \"$false\" \"print value of x>y>z\"\n \n-gdb_test \"print x != y != z\" \"$false\" \"print value of x!=y!=z\"\n+    gdb_test \"print x >= y >= z\" \"$false\" \"print value of x>=y>=z\"\n \n-# test precedence rules on pairs of relational operators\n+    gdb_test_no_output \"set variable x=2\" \"set variable x=2\"\n+    gdb_test_no_output \"set variable y=2\" \"set variable y=2\"\n+    gdb_test_no_output \"set variable z=1\" \"set variable z=1\"\n \n-gdb_test_no_output \"set variable x=0\" \"set variable x\"\n-gdb_test_no_output \"set variable y=2\" \"set variable y\"\n-gdb_test_no_output \"set variable z=2\" \"set variable z\"\n+    gdb_test \"print x == y == z\" \"$true\" \"print value of x==y==z\"\n \n-gdb_test \"print x < y == z\" \"$false\" \"print value of x<y==z\"\n+    gdb_test_no_output \"set variable z=0\" \"set variable z\"\n \n-# 0  2  2\n-gdb_test \"print x < y != z\" \"$true\" \"print value of x<y!=z\"\n+    gdb_test \"print x != y != z\" \"$false\" \"print value of x!=y!=z\"\n+}\n \n-gdb_test_no_output \"set variable x=2\" \"set variable x\"\n-gdb_test_no_output \"set variable y=3\" \"set variable y\"\n-gdb_test_no_output \"set variable z=1\" \"set variable z\"\n+# Test precedence rules on pairs of relational operators.  The use of\n+# with_test_prefix with keys 1, 2, 3, etc is only to ensure that the\n+# test names are unique.  Each nested group of tests starts at a\n+# location where we are setting a variable to a value it has had in\n+# the past, which would result in a test name repeating.\n+with_test_prefix \"pair associativity\" {\n+    with_test_prefix \"1\" {\n+\tgdb_test_no_output \"set variable x=0\" \"set variable x=0\"\n+\tgdb_test_no_output \"set variable y=2\" \"set variable y=2\"\n+\tgdb_test_no_output \"set variable z=2\" \"set variable z=2\"\n \n+\tgdb_test \"print x < y == z\" \"$false\" \"print value of x<y==z\"\n \n-# 2 3 1\n-gdb_test \"print x < y <= z\" \"$true\" \"print value of x<y<=z\"\n+\t# 0  2  2\n+\tgdb_test \"print x < y != z\" \"$true\" \"print value of x<y!=z\"\n \n-# 2 3 1\n-gdb_test \"print x < y >= z\" \"$true\" \"print value of x<y>=z\"\n+\tgdb_test_no_output \"set variable x=2\" \"set variable x=2\"\n+\tgdb_test_no_output \"set variable y=3\" \"set variable y=3\"\n+\tgdb_test_no_output \"set variable z=1\" \"set variable z=1\"\n \n-gdb_test_no_output \"set variable z=0\" \" set variable z\"\n+\t# 2 3 1\n+\tgdb_test \"print x < y <= z\" \"$true\" \"print value of x<y<=z\"\n \n-# 2 3 0\n-gdb_test \"print x < y > z\" \"$true\" \"print value of x<y>z\"\n+\t# 2 3 1\n+\tgdb_test \"print x < y >= z\" \"$true\" \"print value of x<y>=z\"\n \n-gdb_test_no_output \"set variable x=1\" \" set variable x\"\n+\tgdb_test_no_output \"set variable z=0\" \" set variable z=0\"\n \n-# 1 3 0\n-gdb_test \"print x > y >= z\" \"$true\" \"print value of x>y>=z\"\n+\t# 2 3 0\n+\tgdb_test \"print x < y > z\" \"$true\" \"print value of x<y>z\"\n \n-gdb_test_no_output \"set variable z=2\" \" set variable z\"\n+\tgdb_test_no_output \"set variable x=1\" \" set variable x=1\"\n \n-# 1 3 2\n-gdb_test \"print x > y == z\" \"$false\" \"print value of x>y==z\"\n+\t# 1 3 0\n+\tgdb_test \"print x > y >= z\" \"$true\" \"print value of x>y>=z\"\n+    }\n \n-gdb_test_no_output \"set variable x=2\" \" set variable x\"\n-gdb_test_no_output \"set variable z=0\" \" set variable z\"\n+    with_test_prefix \"2\" {\n+\tgdb_test_no_output \"set variable z=2\" \" set variable z=2\"\n \n-# 2 3 0\n-gdb_test \"print x > y != z\" \"$false\" \"print value of x>y!=z\"\n+\t# 1 3 2\n+\tgdb_test \"print x > y == z\" \"$false\" \"print value of x>y==z\"\n \n-gdb_test_no_output \"set variable x=4\" \"set x to 4\"\n+\tgdb_test_no_output \"set variable x=2\" \" set variable x=2\"\n+\tgdb_test_no_output \"set variable z=0\" \" set variable z=0\"\n \n-# 4 3 0\n-gdb_test \"print x > y <= z\" \"$false\" \"print value of x>y<=z\"\n+\t# 2 3 0\n+\tgdb_test \"print x > y != z\" \"$false\" \"print value of x>y!=z\"\n \n-# 4 3 0\n-gdb_test \"print x >= y == z\" \"$false\" \"print value of x>=y==z\"\n+\tgdb_test_no_output \"set variable x=4\" \"set variable x=4\"\n \n-gdb_test_no_output \"set variable x=2\" \" set variable x\"\n+\t# 4 3 0\n+\tgdb_test \"print x > y <= z\" \"$false\" \"print value of x>y<=z\"\n \n-# 2 3 0\n-gdb_test \"print x >= y != z\" \"$false\" \"print value of x>=y!=z\"\n+\t# 4 3 0\n+\tgdb_test \"print x >= y == z\" \"$false\" \"print value of x>=y==z\"\n+    }\n \n-gdb_test_no_output \"set variable x=0\" \" set variable x\"\n-gdb_test_no_output \"set variable z=4\" \" set variable z\"\n+    with_test_prefix \"3\" {\n+\tgdb_test_no_output \"set variable x=2\" \" set variable x=2\"\n \n-# 0 3 4 \n-gdb_test \"print x >= y <= z\" \"$true\" \"print value of x>=y<=z\"\n+\t# 2 3 0\n+\tgdb_test \"print x >= y != z\" \"$false\" \"print value of x>=y!=z\"\n \n-# 0 3 4\n-gdb_test \"print x <= y == z\" \"$false\" \"print value of x<=y==z\"\n+\tgdb_test_no_output \"set variable x=0\" \" set variable x=0\"\n+\tgdb_test_no_output \"set variable z=4\" \" set variable z=4\"\n \n-gdb_test_no_output \"set variable x=2\" \" set variable x\"\n+\t# 0 3 4\n+\tgdb_test \"print x >= y <= z\" \"$true\" \"print value of x>=y<=z\"\n \n-# 2 3 4\n-gdb_test \"print x <= y != z\" \"$true\" \"print value of x<=y!=z\"\n+\t# 0 3 4\n+\tgdb_test \"print x <= y == z\" \"$false\" \"print value of x<=y==z\"\n+    }\n \n-# 2 3 4\n-gdb_test \"print x == y != z\" \"$true\" \"print value of x==y!=z\"\n+    with_test_prefix \"4\" {\n+\tgdb_test_no_output \"set variable x=2\" \" set variable x=2\"\n \n+\t# 2 3 4\n+\tgdb_test \"print x <= y != z\" \"$true\" \"print value of x<=y!=z\"\n \n+\t# 2 3 4\n+\tgdb_test \"print x == y != z\" \"$true\" \"print value of x==y!=z\"\n+    }\n+}\n \n # test use of parenthesis to enforce different order of evaluation\n+with_test_prefix \"with parenthesis\" {\n+    gdb_test_no_output \"set variable z=0\" \" set variable z=0\"\n \n-gdb_test_no_output \"set variable z=0\" \" set variable z\"\n+    # 2 3 0\n+    gdb_test \"print x >= (y < z)\" \"$true\" \"print value of x>=(y<z)\"\n \n-# 2 3 0\n-gdb_test \"print x >= (y < z)\" \"$true\" \"print value of x>=(y<z)\"\n+    # 2 3 0\n+    gdb_test \"print x >= (y != z)\" \"$true\" \"print value of x>=(y!=z)\"\n \n-# 2 3 0\n-gdb_test \"print x >= (y != z)\" \"$true\" \"print value of x>=(y!=z)\"\n+    # 2 3 0\n+    gdb_test \"print x == (y == z)\" \"$false\" \"print value of x==(y==z)\"\n \n-# 2 3 0\n-gdb_test \"print x == (y == z)\" \"$false\" \"print value of x==(y==z)\" \n+    gdb_test_no_output \"set variable x=1\" \" set variable x=1\"\n+    gdb_test_no_output \"set variable z=4\" \" set variable z=4\"\n \n-gdb_test_no_output \"set variable x=1\" \" set variable x\"\n-gdb_test_no_output \"set variable z=4\" \" set variable z\"\n-\n-# 1 3 4\n-gdb_test \"print (x == y) < z\" \"$true\" \"print value of (x==y)<z\"\n+    # 1 3 4\n+    gdb_test \"print (x == y) < z\" \"$true\" \"print value of (x==y)<z\"\n+}\n "
    },
    {
      "sha": "061d706c614f144a5cd22e79be7d5b3fbe559bfe",
      "filename": "gdb/testsuite/gdb.base/step-over-syscall.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/step-over-syscall.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/step-over-syscall.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/step-over-syscall.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -27,7 +27,7 @@ if { [istarget \"i\\[34567\\]86-*-linux*\"] || [istarget \"x86_64-*-linux*\"] } {\n     return -1\n }\n \n-proc check_pc_after_cross_syscall { syscall syscall_insn_next_addr } {\n+proc_with_prefix check_pc_after_cross_syscall { syscall syscall_insn_next_addr } {\n     set syscall_insn_next_addr_found [get_hexadecimal_valueof \"\\$pc\" \"0\"]\n \n     set test \"single step over $syscall final pc\"\n@@ -59,7 +59,8 @@ proc setup { syscall } {\n     # Delete the breakpoint on main.\n     gdb_test_no_output \"delete break 1\"\n \n-    gdb_test_no_output \"set displaced-stepping off\"\n+    gdb_test_no_output \"set displaced-stepping off\" \\\n+\t\"set displaced-stepping off during test setup\"\n \n     gdb_test \"break $syscall\" \"Breakpoint \\[0-9\\]* at .*\"\n \n@@ -100,11 +101,13 @@ proc setup { syscall } {\n \treturn { -1, -1 }\n     }\n \n-    set syscall_insn_addr [get_hexadecimal_valueof \"\\$pc\" \"0\"]\n+    set syscall_insn_addr [get_hexadecimal_valueof \"\\$pc\" \"0\" \\\n+\t\t\t       \"pc before stepi\"]\n     if {[gdb_test \"stepi\" \"x/i .*=>.*\" \"stepi $syscall insn\"] != 0} {\n \treturn { -1, -1 }\n     }\n-    return [list $syscall_insn_addr [get_hexadecimal_valueof \"\\$pc\" \"0\"]]\n+    return [list $syscall_insn_addr [get_hexadecimal_valueof \"\\$pc\" \\\n+\t\t\t\t\t \"0\" \"pc after stepi\"]]\n }\n \n proc step_over_syscall { syscall } {"
    },
    {
      "sha": "3d4172e3648ac621d487de261d89ecc64d512a31",
      "filename": "gdb/testsuite/gdb.base/structs.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b74ba5a194fdfb152465e786a173b039e28964a/gdb/testsuite/gdb.base/structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/structs.exp?ref=2b74ba5a194fdfb152465e786a173b039e28964a",
      "patch": "@@ -82,10 +82,12 @@ proc start_structs_test { types } {\n     gdb_load ${binfile}\n \n     # Make certain that the output is consistent\n-    gdb_test_no_output \"set print sevenbit-strings\"\n-    gdb_test_no_output \"set print address off\"\n-    gdb_test_no_output \"set width 0\"\n-    gdb_test_no_output \"set print elements 300\"\n+    with_test_prefix \"types=$types\" {\n+\tgdb_test_no_output \"set print sevenbit-strings\"\n+\tgdb_test_no_output \"set print address off\"\n+\tgdb_test_no_output \"set width 0\"\n+\tgdb_test_no_output \"set print elements 300\"\n+    }\n \n     # Advance to main\n     if { ![runto_main] } then {"
    }
  ]
}