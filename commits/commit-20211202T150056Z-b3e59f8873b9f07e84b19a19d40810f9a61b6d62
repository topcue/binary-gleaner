{
  "sha": "b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
  "node_id": "C_kwDOANOeidoAKGIzZTU5Zjg4NzNiOWYwN2U4NGIxOWExOWQ0MDgxMGY5YTYxYjZkNjI",
  "commit": {
    "author": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-02T15:00:56Z"
    },
    "committer": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-02T15:00:56Z"
    },
    "message": "aarch64: Tweak insn sequence code\n\nlibopcodes has some code to check constraints across sequences\nof consecutive instructions.  It was added to support MOVPRFX\nsequences but is going to be useful for the Armv8.8-A MOPS\nfeature as well.\n\nCurrently the structure has one field to record the instruction\nthat started a sequence and another to record the remaining\ninstructions in the sequence.  It's more convenient for the\nMOPS code if we put the instructions into a single array instead.\n\nNo functional change intended.\n\ninclude/\n\t* opcode/aarch64.h (aarch64_instr_sequence): Replace num_insns\n\tand current_insns with num_added_insns and num_allocated_insns.\n\nopcodes/\n\t* aarch64-opc.c (add_insn_to_sequence): New function.\n\t(init_insn_sequence): Update for new aarch64_instr_sequence layout.\n\tAdd the first instruction to the inst array.\n\t(verify_constraints): Update for new aarch64_instr_sequence layout.\n\tDon't add the last instruction to the array.",
    "tree": {
      "sha": "50f74009c8830755ab4abcd476faad6584b49cd1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/50f74009c8830755ab4abcd476faad6584b49cd1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3e59f8873b9f07e84b19a19d40810f9a61b6d62/comments",
  "author": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f96093c1f53bf4a930073f6ae862910583d79866",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f96093c1f53bf4a930073f6ae862910583d79866",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f96093c1f53bf4a930073f6ae862910583d79866"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 27,
    "deletions": 33
  },
  "files": [
    {
      "sha": "fa79aa9c25a9988fe9fc0dfb72eb2ddc9e28f884",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3e59f8873b9f07e84b19a19d40810f9a61b6d62/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3e59f8873b9f07e84b19a19d40810f9a61b6d62/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
      "patch": "@@ -1290,15 +1290,13 @@ struct aarch64_operand_error\n    dependencies for both assembler and disassembler.  */\n struct aarch64_instr_sequence\n {\n-  /* The instruction that caused this sequence to be opened.  */\n+  /* The instructions in the sequence, starting with the one that\n+     caused it to be opened.  */\n   aarch64_inst *instr;\n-  /* The number of instructions the above instruction allows one to be kept in the\n-     sequence before an automatic close is done.  */\n-  int num_insns;\n-  /* The instructions currently added to the sequence.  */\n-  aarch64_inst **current_insns;\n   /* The number of instructions already in the sequence.  */\n-  int next_insn;\n+  int num_added_insns;\n+  /* The number of instructions allocated to the sequence.  */\n+  int num_allocated_insns;\n };\n \n /* Encoding entrypoint.  */"
    },
    {
      "sha": "289df9e8848f9820c342837a42e37352c0fcc2e2",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 22,
      "deletions": 26,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3e59f8873b9f07e84b19a19d40810f9a61b6d62/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3e59f8873b9f07e84b19a19d40810f9a61b6d62/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=b3e59f8873b9f07e84b19a19d40810f9a61b6d62",
      "patch": "@@ -5403,6 +5403,15 @@ verify_elem_sd (const struct aarch64_inst *inst, const aarch64_insn insn,\n   return ERR_OK;\n }\n \n+/* Add INST to the end of INSN_SEQUENCE.  */\n+\n+static void\n+add_insn_to_sequence (const struct aarch64_inst *inst,\n+\t\t      aarch64_instr_sequence *insn_sequence)\n+{\n+  insn_sequence->instr[insn_sequence->num_added_insns++] = *inst;\n+}\n+\n /* Initialize an instruction sequence insn_sequence with the instruction INST.\n    If INST is NULL the given insn_sequence is cleared and the sequence is left\n    uninitialized.  */\n@@ -5412,16 +5421,11 @@ init_insn_sequence (const struct aarch64_inst *inst,\n \t\t    aarch64_instr_sequence *insn_sequence)\n {\n   int num_req_entries = 0;\n-  insn_sequence->next_insn = 0;\n-  insn_sequence->num_insns = num_req_entries;\n-  if (insn_sequence->instr)\n-    XDELETE (insn_sequence->instr);\n-  insn_sequence->instr = NULL;\n \n-  if (inst)\n+  if (insn_sequence->instr)\n     {\n-      insn_sequence->instr = XNEW (aarch64_inst);\n-      memcpy (insn_sequence->instr, inst, sizeof (aarch64_inst));\n+      XDELETE (insn_sequence->instr);\n+      insn_sequence->instr = NULL;\n     }\n \n   /* Handle all the cases here.  May need to think of something smarter than\n@@ -5430,16 +5434,13 @@ init_insn_sequence (const struct aarch64_inst *inst,\n   if (inst && inst->opcode->constraints & C_SCAN_MOVPRFX)\n     num_req_entries = 1;\n \n-  if (insn_sequence->current_insns)\n-    XDELETEVEC (insn_sequence->current_insns);\n-  insn_sequence->current_insns = NULL;\n+  insn_sequence->num_added_insns = 0;\n+  insn_sequence->num_allocated_insns = num_req_entries;\n \n   if (num_req_entries != 0)\n     {\n-      size_t size = num_req_entries * sizeof (aarch64_inst);\n-      insn_sequence->current_insns\n-\t= (aarch64_inst**) XNEWVEC (aarch64_inst, num_req_entries);\n-      memset (insn_sequence->current_insns, 0, size);\n+      insn_sequence->instr = XCNEWVEC (aarch64_inst, num_req_entries);\n+      add_insn_to_sequence (inst, insn_sequence);\n     }\n }\n \n@@ -5715,17 +5716,12 @@ verify_constraints (const struct aarch64_inst *inst,\n \t}\n \n     done:\n-      /* Add the new instruction to the sequence.  */\n-      memcpy (insn_sequence->current_insns + insn_sequence->next_insn++,\n-\t      inst, sizeof (aarch64_inst));\n-\n-      /* Check if sequence is now full.  */\n-      if (insn_sequence->next_insn >= insn_sequence->num_insns)\n-\t{\n-\t  /* Sequence is full, but we don't have anything special to do for now,\n-\t     so clear and reset it.  */\n-\t  init_insn_sequence (NULL, insn_sequence);\n-\t}\n+      if (insn_sequence->num_added_insns == insn_sequence->num_allocated_insns)\n+\t/* We've checked the last instruction in the sequence and so\n+\t   don't need the sequence any more.  */\n+\tinit_insn_sequence (NULL, insn_sequence);\n+      else\n+\tadd_insn_to_sequence (inst, insn_sequence);\n     }\n \n   return res;"
    }
  ]
}