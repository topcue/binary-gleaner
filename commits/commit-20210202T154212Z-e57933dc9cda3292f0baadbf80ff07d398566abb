{
  "sha": "e57933dc9cda3292f0baadbf80ff07d398566abb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTU3OTMzZGM5Y2RhMzI5MmYwYmFhZGJmODBmZjA3ZDM5ODU2NmFiYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-02T15:40:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-02T15:42:12Z"
    },
    "message": "gdb/dwarf: make read_{loc,rng}list_index return sect_offset\n\nI think it's wrong that read_loclist_index and read_rnglist_index return\na CORE_ADDR.  A CORE_ADDR is an address in the program.  These functions\nreturn offset in sections (.debug_loclists and .debug_rnglists).  I\nthink sect_offset is more appropriate.\n\nI'm wondering if struct attribute should have a \"set_sect_offset\"\nmethod, that takes  a sect_offset parameter, or if it's better to be\nleft as a simple \"unsigned\".\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (read_loclist_index, read_rnglist_index): Return\n\ta sect_offset.\n\t(read_attribute_reprocess): Adjust.\n\nChange-Id: I0e22e0864130fb490072b41ae099762918b8ad4d",
    "tree": {
      "sha": "968dec25a70d80a2fb73c3ffcffa4bbf1517bed3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/968dec25a70d80a2fb73c3ffcffa4bbf1517bed3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e57933dc9cda3292f0baadbf80ff07d398566abb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e57933dc9cda3292f0baadbf80ff07d398566abb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e57933dc9cda3292f0baadbf80ff07d398566abb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e57933dc9cda3292f0baadbf80ff07d398566abb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b0c7f41d1d90811fbfd71c523aaa157c8f21448",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b0c7f41d1d90811fbfd71c523aaa157c8f21448",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b0c7f41d1d90811fbfd71c523aaa157c8f21448"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 18,
    "deletions": 10
  },
  "files": [
    {
      "sha": "739b39e50ff148542f2b41fcf603b4d242de8274",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e57933dc9cda3292f0baadbf80ff07d398566abb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e57933dc9cda3292f0baadbf80ff07d398566abb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e57933dc9cda3292f0baadbf80ff07d398566abb",
      "patch": "@@ -1,3 +1,9 @@\n+2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (read_loclist_index, read_rnglist_index): Return\n+\ta sect_offset.\n+\t(read_attribute_reprocess): Adjust.\n+\n 2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/die.h (struct die_info) <ranges_base>: Split in..."
    },
    {
      "sha": "5f894895cdc47b7e33846e3a95019f74409569b5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e57933dc9cda3292f0baadbf80ff07d398566abb/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e57933dc9cda3292f0baadbf80ff07d398566abb/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e57933dc9cda3292f0baadbf80ff07d398566abb",
      "patch": "@@ -20223,7 +20223,8 @@ lookup_loclist_base (struct dwarf2_cu *cu)\n \n /* Given a DW_FORM_loclistx value LOCLIST_INDEX, fetch the offset from the\n    array of offsets in the .debug_loclists section.  */\n-static CORE_ADDR\n+\n+static sect_offset\n read_loclist_index (struct dwarf2_cu *cu, ULONGEST loclist_index)\n {\n   dwarf2_per_objfile *per_objfile = cu->per_objfile;\n@@ -20273,14 +20274,15 @@ read_loclist_index (struct dwarf2_cu *cu, ULONGEST loclist_index)\n   const gdb_byte *info_ptr = section->buffer + start_offset;\n \n   if (cu->header.offset_size == 4)\n-    return bfd_get_32 (abfd, info_ptr) + loclist_base;\n+    return (sect_offset) (bfd_get_32 (abfd, info_ptr) + loclist_base);\n   else\n-    return bfd_get_64 (abfd, info_ptr) + loclist_base;\n+    return (sect_offset) (bfd_get_64 (abfd, info_ptr) + loclist_base);\n }\n \n /* Given a DW_FORM_rnglistx value RNGLIST_INDEX, fetch the offset from the\n    array of offsets in the .debug_rnglists section.  */\n-static CORE_ADDR\n+\n+static sect_offset\n read_rnglist_index (struct dwarf2_cu *cu, ULONGEST rnglist_index,\n \t\t    dwarf_tag tag)\n {\n@@ -20337,9 +20339,9 @@ read_rnglist_index (struct dwarf2_cu *cu, ULONGEST rnglist_index,\n   const gdb_byte *info_ptr = section->buffer + start_offset;\n \n   if (cu->header.offset_size == 4)\n-    return read_4_bytes (abfd, info_ptr) + rnglist_base;\n+    return (sect_offset) (read_4_bytes (abfd, info_ptr) + rnglist_base);\n   else\n-    return read_8_bytes (abfd, info_ptr) + rnglist_base;\n+    return (sect_offset) (read_8_bytes (abfd, info_ptr) + rnglist_base);\n }\n \n /* Process the attributes that had to be skipped in the first round. These\n@@ -20360,18 +20362,18 @@ read_attribute_reprocess (const struct die_reader_specs *reader,\n \tbreak;\n       case DW_FORM_loclistx:\n \t{\n-\t  CORE_ADDR loclists_sect_off\n+\t  sect_offset loclists_sect_off\n \t    = read_loclist_index (cu, attr->as_unsigned_reprocess ());\n \n-\t  attr->set_unsigned (loclists_sect_off);\n+\t  attr->set_unsigned (to_underlying (loclists_sect_off));\n \t}\n \tbreak;\n       case DW_FORM_rnglistx:\n \t{\n-\t  CORE_ADDR rnglists_sect_off\n+\t  sect_offset rnglists_sect_off\n \t    = read_rnglist_index (cu, attr->as_unsigned_reprocess (), tag);\n \n-\t  attr->set_unsigned (rnglists_sect_off);\n+\t  attr->set_unsigned (to_underlying (rnglists_sect_off));\n \t}\n \tbreak;\n       case DW_FORM_strx:"
    }
  ]
}