{
  "sha": "e2295dade838ad296e1e1cd1096177058139b6b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTIyOTVkYWRlODM4YWQyOTZlMWUxY2QxMDk2MTc3MDU4MTM5YjZiMw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:30:26Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:30:26Z"
    },
    "message": "x86/ELF: fix .tfloat output\n\nThe ELF psABI-s are quite clear here: On 32-bit the data type is 12\nbytes long (with 2 bytes of trailing padding), while on 64-bit it is 16\nbytes long (with 6 bytes of padding). Make ieee_md_atof() capable of\nhandling such padding, and specify the needed padding for x86 (leaving\nnon-ELF targets alone for now). Split the existing x86 testcase.",
    "tree": {
      "sha": "e3a3e336bd33766ed7aea049b5b5f8ab887985e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e3a3e336bd33766ed7aea049b5b5f8ab887985e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e2295dade838ad296e1e1cd1096177058139b6b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2295dade838ad296e1e1cd1096177058139b6b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e2295dade838ad296e1e1cd1096177058139b6b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2295dade838ad296e1e1cd1096177058139b6b3/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7e57d02fb51dcb1e976f1a089de3113d9aac2ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7e57d02fb51dcb1e976f1a089de3113d9aac2ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7e57d02fb51dcb1e976f1a089de3113d9aac2ba"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 60,
    "deletions": 6
  },
  "files": [
    {
      "sha": "e6e8879b51bd6b2362eb893e0e095552d263ea85",
      "filename": "gas/config/atof-ieee.c",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/atof-ieee.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/atof-ieee.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/atof-ieee.c?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -30,7 +30,13 @@ extern FLONUM_TYPE generic_floating_point_number;\n #define F_PRECISION    2\n #define D_PRECISION    4\n #define X_PRECISION    5\n+#ifndef X_PRECISION_PAD\n+#define X_PRECISION_PAD 0\n+#endif\n #define P_PRECISION    5\n+#ifndef P_PRECISION_PAD\n+#define P_PRECISION_PAD X_PRECISION_PAD\n+#endif\n \n /* Length in LittleNums of guard bits.  */\n #define GUARD          2\n@@ -760,7 +766,7 @@ ieee_md_atof (int type,\n   LITTLENUM_TYPE words[MAX_LITTLENUMS];\n   LITTLENUM_TYPE *wordP;\n   char *t;\n-  int prec = 0;\n+  int prec = 0, pad = 0;\n \n   if (strchr (FLT_CHARS, type) != NULL)\n     {\n@@ -788,6 +794,7 @@ ieee_md_atof (int type,\n \tcase 't':\n \tcase 'T':\n \t  prec = X_PRECISION;\n+\t  pad = X_PRECISION_PAD;\n \t  type = 'x';\t\t/* This is what atof_ieee() understands.  */\n \t  break;\n \n@@ -803,6 +810,7 @@ ieee_md_atof (int type,\n #else\n \t  prec = P_PRECISION;\n #endif\n+\t  pad = P_PRECISION_PAD;\n \t  break;\n \n \tdefault:\n@@ -835,7 +843,7 @@ ieee_md_atof (int type,\n   if (t)\n     input_line_pointer = t;\n \n-  *sizeP = prec * sizeof (LITTLENUM_TYPE);\n+  *sizeP = (prec + pad) * sizeof (LITTLENUM_TYPE);\n \n   if (big_wordian)\n     {\n@@ -854,5 +862,8 @@ ieee_md_atof (int type,\n \t}\n     }\n \n+  memset (litP, 0, pad * sizeof (LITTLENUM_TYPE));\n+  litP += pad * sizeof (LITTLENUM_TYPE);\n+\n   return NULL;\n }"
    },
    {
      "sha": "0fa8b0d5a045bc64579de7362408d6bc70534d66",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -10229,6 +10229,19 @@ x86_cons_fix_new (fragS *frag, unsigned int off, unsigned int len,\n   fix_new_exp (frag, off, len, exp, 0, r);\n }\n \n+/* Return the number of padding LITTLENUMs following a tbyte floating\n+   point value.  */\n+\n+int\n+x86_tfloat_pad (void)\n+{\n+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n+   if (IS_ELF)\n+     return object_64bit ? 3 : 1;\n+#endif\n+   return 0;\n+}\n+\n /* Export the ABI address size for use by TC_ADDRESS_BYTES for the\n    purpose of the `.dc.a' internal pseudo-op.  */\n "
    },
    {
      "sha": "f94226edf7862a3422a0d518beedbdf8e7da34ae",
      "filename": "gas/config/tc-i386.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/tc-i386.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/config/tc-i386.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.h?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -134,6 +134,9 @@ extern bfd_reloc_code_real_type x86_cons (expressionS *, int);\n extern void x86_cons_fix_new\n (fragS *, unsigned int, unsigned int, expressionS *, bfd_reloc_code_real_type);\n \n+#define X_PRECISION_PAD x86_tfloat_pad ()\n+extern int x86_tfloat_pad (void);\n+\n #define TC_ADDRESS_BYTES x86_address_bytes\n extern int x86_address_bytes (void);\n "
    },
    {
      "sha": "6ef9c83ac54b4a7e1f13db34ae7a3c11adcda633",
      "filename": "gas/testsuite/gas/i386/fp-elf32.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp-elf32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp-elf32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/fp-elf32.d?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -0,0 +1,12 @@\n+#objdump: -s -j .data\n+#name: i386 fp (ELF)\n+#source: fp.s\n+\n+.*:     file format .*\n+\n+Contents of section .data:\n+ 0000 00881bcd 4b789ad4 00400000 71a37909  .*\n+ 0010 4f930a40 789a5440 789a5440 00000000  .*\n+ 0020 e65e1710 20395e3b e65e1710 20395e3b  .*\n+ 0030 00000000 0000a044 01000000 0000a044  .*\n+ 0040 00000000 0000f03f .*"
    },
    {
      "sha": "2e68ac8ebcae19e446a6643ae161ce03fb11b36c",
      "filename": "gas/testsuite/gas/i386/fp-elf64.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp-elf64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp-elf64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/fp-elf64.d?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -0,0 +1,12 @@\n+#objdump: -s -j .data\n+#name: x86-64 fp (ELF)\n+#source: fp.s\n+\n+.*:     file format .*\n+\n+Contents of section .data:\n+ 0000 00881bcd 4b789ad4 00400000 00000000  .*\n+ 0010 71a37909 4f930a40 789a5440 789a5440  .*\n+ 0020 e65e1710 20395e3b e65e1710 20395e3b  .*\n+ 0030 00000000 0000a044 01000000 0000a044  .*\n+ 0040 00000000 0000f03f .*"
    },
    {
      "sha": "fca56f29ac160366653ecb78eacc325fe8fa9b91",
      "filename": "gas/testsuite/gas/i386/fp.s",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/fp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/fp.s?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -7,10 +7,10 @@\n #\t.byte 0x71, 0xa3, 0x79, 0x09, 0x4f, 0x93, 0x0a, 0x40\n # The next two are 32-bit floating point format.\n \t.float 3.32192809488736218171e0\n-#\t.byte 0x78, 0x9a, 0x54, 0x40, 0, 0, 0, 0\n+#\t.byte 0x78, 0x9a, 0x54, 0x40\n \t.single 3.32192809488736218171e0\n-#\t.byte 0x78, 0x9a, 0x54, 0x40, 0, 0, 0, 0\n-\t.byte 0, 0, 0, 0, 0, 0\n+#\t.byte 0x78, 0x9a, 0x54, 0x40\n+\t.p2align 4,0\n \n # The assembler used to treat the next value as zero instead of 1e-22.\n         .double .0000000000000000000001"
    },
    {
      "sha": "122da6a2315b1c4bf55ee49f4247047a6886fff1",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2295dade838ad296e1e1cd1096177058139b6b3/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=e2295dade838ad296e1e1cd1096177058139b6b3",
      "patch": "@@ -118,7 +118,6 @@ if [gas_32_check] then {\n     run_list_test \"lockbad-1\" \"-al\"\n     run_dump_test \"long-1\"\n     run_dump_test \"long-1-intel\"\n-    run_dump_test \"fp\"\n     run_dump_test \"nops\"\n     run_dump_test \"nops16-1\"\n     run_dump_test \"nops-1\"\n@@ -624,6 +623,7 @@ if [gas_32_check] then {\n \trun_dump_test \"intel-movs16\"\n \trun_dump_test \"intel-cmps32\"\n \trun_dump_test \"intel-cmps16\"\n+\trun_dump_test \"fp-elf32\"\n \trun_list_test \"inval-equ-1\" \"-al\"\n \trun_list_test \"inval-equ-2\" \"-al\"\n \trun_dump_test \"ifunc\"\n@@ -697,6 +697,8 @@ if [gas_32_check] then {\n \t    run_dump_test \"iamcu-5\"\n \t    run_list_test \"iamcu-inval-1\" \"-march=iamcu -al\"\n \t}\n+    } else {\n+\trun_dump_test \"fp\"\n     }\n \n     # This is a PE specific test.\n@@ -1274,6 +1276,7 @@ if [gas_64_check] then {\n \trun_list_test \"reloc64\" \"--defsym _bad_=1\"\n \trun_dump_test \"mixed-mode-reloc64\"\n \trun_dump_test \"rela\"\n+\trun_dump_test \"fp-elf64\"\n \trun_dump_test \"x86-64-ifunc\"\n \trun_dump_test \"x86-64-opcode-inval\"\n \trun_dump_test \"x86-64-opcode-inval-intel\""
    }
  ]
}