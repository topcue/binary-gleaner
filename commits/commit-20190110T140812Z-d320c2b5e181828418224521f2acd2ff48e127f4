{
  "sha": "d320c2b5e181828418224521f2acd2ff48e127f4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDMyMGMyYjVlMTgxODI4NDE4MjI0NTIxZjJhY2QyZmY0OGUxMjdmNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-05-10T22:23:51Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T14:08:12Z"
    },
    "message": "Introduce class psymtab_storage\n\nThis introduces a new psymtab_storage class, which holds all\npsymbol-related objects that are independent of the objfile.  (This\nlatter contraint explains why psymbol_map was not moved; though this\ncould still be done with some work.)\n\nThis patch does not yet change where psymtab allocation is done --\nthat comes later.  This just wraps everything in a single object to\nmake further transformations simpler.\n\nNote that a shared_ptr is used to link from the objfile to the\npsymtab_storage object.  The end goal here is to allow a given symbol\nreader to simply attach to the psymtab_storage object to the BFD, then\nreuse it in later invocations; shared_ptr makes this simple to reason\nabout.\n\ngdb/ChangeLog\n2019-01-10  Tom Tromey  <tom@tromey.com>\n\n\t* symmisc.c (print_symbol_bcache_statistics): Update.\n\t(print_objfile_statistics): Update.\n\t* symfile.c (reread_symbols): Update.\n\t* psymtab.h (class psymtab_storage): New.\n\t* psymtab.c (psymtab_storage): New constructor.\n\t(~psymtab_storage): New destructor.\n\t(require_partial_symbols): Update.\n\t(ALL_OBJFILE_PSYMTABS_REQUIRED): Rewrite.\n\t(find_pc_sect_psymtab, find_pc_sect_psymbol)\n\t(match_partial_symbol, lookup_partial_symbol, dump_psymtab)\n\t(psym_dump, recursively_search_psymtabs, psym_has_symbols)\n\t(psym_find_compunit_symtab_by_address, sort_pst_symbols)\n\t(start_psymtab_common, end_psymtab_common)\n\t(add_psymbol_to_bcache, add_psymbol_to_list, init_psymbol_list)\n\t(allocate_psymtab): Update.\n\t(psymtab_storage::discard_psymtab): Rename from discard_psymtab.\n\tUpdate.\n\t(dump_psymtab_addrmap, maintenance_print_psymbols)\n\t(maintenance_check_psymtabs): Update.\n\t(class objfile_psymtabs): Move to objfiles.h.\n\t* psympriv.h (discard_psymtab): Now inline.\n\t(psymtab_discarder::psymtab_discarder): Update.\n\t(psymtab_discarder::~psymtab_discarder): Update.\n\t(ALL_OBJFILE_PSYMTABS): Rewrite.\n\t* objfiles.h (struct objfile) <psymtabs, psymtabs_addrmap,\n\tfree_psymtabs, psymbol_cache, global_psymbols, static_psymbols>:\n\tRemove fields.\n\t<partial_symtabs>: New field.\n\t(class objfile_psymtabs): Move from psymtab.h.  Update.\n\t* objfiles.c (objfile::objfile): Initialize partial_symtabs, not\n\tpsymbol_cache.\n\t(objfile::~objfile): Don't destroy psymbol_cache.\n\t* mdebugread.c (parse_partial_symbols): Update.\n\t* dwarf2read.c (create_addrmap_from_index)\n\t(create_addrmap_from_aranges, dw2_find_pc_sect_compunit_symtab)\n\t(process_psymtab_comp_unit_reader, dwarf2_build_psymtabs_hard)\n\t(add_partial_subprogram, dwarf2_ranges_read): Update.\n\t* dwarf-index-write.c (write_address_map)\n\t(write_one_signatured_type, recursively_write_psymbols)\n\t(class debug_names, class debug_names, write_psymtabs_to_index):\n\tUpdate.",
    "tree": {
      "sha": "afaea8c763b84f9a59a49662366ad5fcf7c917d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/afaea8c763b84f9a59a49662366ad5fcf7c917d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d320c2b5e181828418224521f2acd2ff48e127f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d320c2b5e181828418224521f2acd2ff48e127f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d320c2b5e181828418224521f2acd2ff48e127f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d320c2b5e181828418224521f2acd2ff48e127f4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d94a5a36a614cf7ebe259d7660f4fa725f38ee2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d94a5a36a614cf7ebe259d7660f4fa725f38ee2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d94a5a36a614cf7ebe259d7660f4fa725f38ee2"
    }
  ],
  "stats": {
    "total": 418,
    "additions": 273,
    "deletions": 145
  },
  "files": [
    {
      "sha": "207194dda40a3564d22162003e48f2b1605aa0ec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -1,3 +1,47 @@\n+2019-01-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* symmisc.c (print_symbol_bcache_statistics): Update.\n+\t(print_objfile_statistics): Update.\n+\t* symfile.c (reread_symbols): Update.\n+\t* psymtab.h (class psymtab_storage): New.\n+\t* psymtab.c (psymtab_storage): New constructor.\n+\t(~psymtab_storage): New destructor.\n+\t(require_partial_symbols): Update.\n+\t(ALL_OBJFILE_PSYMTABS_REQUIRED): Rewrite.\n+\t(find_pc_sect_psymtab, find_pc_sect_psymbol)\n+\t(match_partial_symbol, lookup_partial_symbol, dump_psymtab)\n+\t(psym_dump, recursively_search_psymtabs, psym_has_symbols)\n+\t(psym_find_compunit_symtab_by_address, sort_pst_symbols)\n+\t(start_psymtab_common, end_psymtab_common)\n+\t(add_psymbol_to_bcache, add_psymbol_to_list, init_psymbol_list)\n+\t(allocate_psymtab): Update.\n+\t(psymtab_storage::discard_psymtab): Rename from discard_psymtab.\n+\tUpdate.\n+\t(dump_psymtab_addrmap, maintenance_print_psymbols)\n+\t(maintenance_check_psymtabs): Update.\n+\t(class objfile_psymtabs): Move to objfiles.h.\n+\t* psympriv.h (discard_psymtab): Now inline.\n+\t(psymtab_discarder::psymtab_discarder): Update.\n+\t(psymtab_discarder::~psymtab_discarder): Update.\n+\t(ALL_OBJFILE_PSYMTABS): Rewrite.\n+\t* objfiles.h (struct objfile) <psymtabs, psymtabs_addrmap,\n+\tfree_psymtabs, psymbol_cache, global_psymbols, static_psymbols>:\n+\tRemove fields.\n+\t<partial_symtabs>: New field.\n+\t(class objfile_psymtabs): Move from psymtab.h.  Update.\n+\t* objfiles.c (objfile::objfile): Initialize partial_symtabs, not\n+\tpsymbol_cache.\n+\t(objfile::~objfile): Don't destroy psymbol_cache.\n+\t* mdebugread.c (parse_partial_symbols): Update.\n+\t* dwarf2read.c (create_addrmap_from_index)\n+\t(create_addrmap_from_aranges, dw2_find_pc_sect_compunit_symtab)\n+\t(process_psymtab_comp_unit_reader, dwarf2_build_psymtabs_hard)\n+\t(add_partial_subprogram, dwarf2_ranges_read): Update.\n+\t* dwarf-index-write.c (write_address_map)\n+\t(write_one_signatured_type, recursively_write_psymbols)\n+\t(class debug_names, class debug_names, write_psymtabs_to_index):\n+\tUpdate.\n+\n 2019-01-10  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.h (SYMBOL_SET_NAMES): Update."
    },
    {
      "sha": "b11927d360849dbbe9572cc77f3586a8b3d1133e",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -474,8 +474,8 @@ write_address_map (struct objfile *objfile, data_buf &addr_vec,\n   addrmap_index_data.objfile = objfile;\n   addrmap_index_data.previous_valid = 0;\n \n-  addrmap_foreach (objfile->psymtabs_addrmap, add_address_entry_worker,\n-\t\t   &addrmap_index_data);\n+  addrmap_foreach (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t   add_address_entry_worker, &addrmap_index_data);\n \n   /* It's highly unlikely the last entry (end address = 0xff...ff)\n      is valid, but we should still handle it.\n@@ -582,13 +582,13 @@ write_one_signatured_type (void **slot, void *d)\n \n   write_psymbols (info->symtab,\n \t\t  info->psyms_seen,\n-\t\t  (info->objfile->global_psymbols.data ()\n+\t\t  (info->objfile->partial_symtabs->global_psymbols.data ()\n \t\t   + psymtab->globals_offset),\n \t\t  psymtab->n_global_syms, info->cu_index,\n \t\t  0);\n   write_psymbols (info->symtab,\n \t\t  info->psyms_seen,\n-\t\t  (info->objfile->static_psymbols.data ()\n+\t\t  (info->objfile->partial_symtabs->static_psymbols.data ()\n \t\t   + psymtab->statics_offset),\n \t\t  psymtab->n_static_syms, info->cu_index,\n \t\t  1);\n@@ -639,12 +639,14 @@ recursively_write_psymbols (struct objfile *objfile,\n \n   write_psymbols (symtab,\n \t\t  psyms_seen,\n-\t\t  objfile->global_psymbols.data () + psymtab->globals_offset,\n+\t\t  (objfile->partial_symtabs->global_psymbols.data ()\n+\t\t   + psymtab->globals_offset),\n \t\t  psymtab->n_global_syms, cu_index,\n \t\t  0);\n   write_psymbols (symtab,\n \t\t  psyms_seen,\n-\t\t  objfile->static_psymbols.data () + psymtab->statics_offset,\n+\t\t  (objfile->partial_symtabs->static_psymbols.data ()\n+\t\t   + psymtab->statics_offset),\n \t\t  psymtab->n_static_syms, cu_index,\n \t\t  1);\n }\n@@ -835,10 +837,12 @@ class debug_names\n \t\t\t\t    psyms_seen, cu_index);\n \n     write_psymbols (psyms_seen,\n-\t\t    objfile->global_psymbols.data () + psymtab->globals_offset,\n+\t\t    (objfile->partial_symtabs->global_psymbols.data ()\n+\t\t     + psymtab->globals_offset),\n \t\t    psymtab->n_global_syms, cu_index, false, unit_kind::cu);\n     write_psymbols (psyms_seen,\n-\t\t    objfile->static_psymbols.data () + psymtab->statics_offset,\n+\t\t    (objfile->partial_symtabs->static_psymbols.data ()\n+\t\t     + psymtab->statics_offset),\n \t\t    psymtab->n_static_syms, cu_index, true, unit_kind::cu);\n   }\n \n@@ -1195,12 +1199,12 @@ class debug_names\n     struct partial_symtab *psymtab = entry->per_cu.v.psymtab;\n \n     write_psymbols (info->psyms_seen,\n-\t\t    (info->objfile->global_psymbols.data ()\n+\t\t    (info->objfile->partial_symtabs->global_psymbols.data ()\n \t\t     + psymtab->globals_offset),\n \t\t    psymtab->n_global_syms, info->cu_index, false,\n \t\t    unit_kind::tu);\n     write_psymbols (info->psyms_seen,\n-\t\t    (info->objfile->static_psymbols.data ()\n+\t\t    (info->objfile->partial_symtabs->static_psymbols.data ()\n \t\t     + psymtab->statics_offset),\n \t\t    psymtab->n_static_syms, info->cu_index, true,\n \t\t    unit_kind::tu);\n@@ -1554,7 +1558,8 @@ write_psymtabs_to_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   if (VEC_length (dwarf2_section_info_def, dwarf2_per_objfile->types) > 1)\n     error (_(\"Cannot make an index when the file has multiple .debug_types sections\"));\n \n-  if (!objfile->psymtabs || !objfile->psymtabs_addrmap)\n+  if (!objfile->partial_symtabs->psymtabs\n+      || !objfile->partial_symtabs->psymtabs_addrmap)\n     return;\n \n   struct stat st;"
    },
    {
      "sha": "a0365f56b86b9c94814c6e036dea01a716b73779",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -3190,8 +3190,8 @@ create_addrmap_from_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t dwarf2_per_objfile->get_cu (cu_index));\n     }\n \n-  objfile->psymtabs_addrmap = addrmap_create_fixed (mutable_map,\n-\t\t\t\t\t\t    &objfile->objfile_obstack);\n+  objfile->partial_symtabs->psymtabs_addrmap\n+    = addrmap_create_fixed (mutable_map, &objfile->objfile_obstack);\n }\n \n /* Read the address map data from DWARF-5 .debug_aranges, and use it to\n@@ -3351,8 +3351,8 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t}\n     }\n \n-  objfile->psymtabs_addrmap = addrmap_create_fixed (mutable_map,\n-\t\t\t\t\t\t    &objfile->objfile_obstack);\n+  objfile->partial_symtabs->psymtabs_addrmap\n+    = addrmap_create_fixed (mutable_map, &objfile->objfile_obstack);\n }\n \n /* Find a slot in the mapped index INDEX for the object named NAME.\n@@ -5245,13 +5245,13 @@ dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n   struct dwarf2_per_cu_data *data;\n   struct compunit_symtab *result;\n \n-  if (!objfile->psymtabs_addrmap)\n+  if (!objfile->partial_symtabs->psymtabs_addrmap)\n     return NULL;\n \n   CORE_ADDR baseaddr = ANOFFSET (objfile->section_offsets,\n \t\t\t\t SECT_OFF_TEXT (objfile));\n-  data = (struct dwarf2_per_cu_data *) addrmap_find (objfile->psymtabs_addrmap,\n-\t\t\t\t\t\t     pc - baseaddr);\n+  data = (struct dwarf2_per_cu_data *) addrmap_find\n+    (objfile->partial_symtabs->psymtabs_addrmap, pc - baseaddr);\n   if (!data)\n     return NULL;\n \n@@ -8010,7 +8010,8 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t   - baseaddr - 1);\n       /* Store the contiguous range if it is not empty; it can be\n \t empty for CUs with no code.  */\n-      addrmap_set_empty (objfile->psymtabs_addrmap, low, high, pst);\n+      addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t\t low, high, pst);\n     }\n \n   /* Check if comp unit has_children.\n@@ -8467,7 +8468,7 @@ dwarf2_build_psymtabs_hard (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   auto_obstack temp_obstack;\n \n   scoped_restore save_psymtabs_addrmap\n-    = make_scoped_restore (&objfile->psymtabs_addrmap,\n+    = make_scoped_restore (&objfile->partial_symtabs->psymtabs_addrmap,\n \t\t\t   addrmap_create_mutable (&temp_obstack));\n \n   for (dwarf2_per_cu_data *per_cu : dwarf2_per_objfile->all_comp_units)\n@@ -8488,8 +8489,9 @@ dwarf2_build_psymtabs_hard (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   set_partial_user (dwarf2_per_objfile);\n \n-  objfile->psymtabs_addrmap = addrmap_create_fixed (objfile->psymtabs_addrmap,\n-\t\t\t\t\t\t    &objfile->objfile_obstack);\n+  objfile->partial_symtabs->psymtabs_addrmap\n+    = addrmap_create_fixed (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t\t    &objfile->objfile_obstack);\n   /* At this point we want to keep the address map.  */\n   save_psymtabs_addrmap.release ();\n \n@@ -9113,7 +9115,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t\t= (gdbarch_adjust_dwarf2_addr (gdbarch,\n \t\t\t\t\t       pdi->highpc + baseaddr)\n \t\t   - baseaddr);\n-\t      addrmap_set_empty (objfile->psymtabs_addrmap,\n+\t      addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n \t\t\t\t this_lowpc, this_highpc - 1,\n \t\t\t\t cu->per_cu->v.psymtab);\n \t    }\n@@ -14603,8 +14605,8 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n \t  highpc = (gdbarch_adjust_dwarf2_addr (gdbarch,\n \t\t\t\t\t\trange_end + baseaddr)\n \t\t    - baseaddr);\n-\t  addrmap_set_empty (objfile->psymtabs_addrmap, lowpc, highpc - 1,\n-\t\t\t     ranges_pst);\n+\t  addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t\t     lowpc, highpc - 1, ranges_pst);\n \t}\n \n       /* FIXME: This is recording everything as a low-high"
    },
    {
      "sha": "7e098009c7de5840429ff2cf3513814c3cb927d7",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -3739,11 +3739,12 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \n   /* Remove the dummy psymtab created for -O3 images above, if it is\n      still empty, to enable the detection of stripped executables.  */\n-  if (objfile->psymtabs->next == NULL\n-      && objfile->psymtabs->number_of_dependencies == 0\n-      && objfile->psymtabs->n_global_syms == 0\n-      && objfile->psymtabs->n_static_syms == 0)\n-    objfile->psymtabs = NULL;\n+  pst = objfile->partial_symtabs->psymtabs;\n+  if (pst->next == NULL\n+      && pst->number_of_dependencies == 0\n+      && pst->n_global_syms == 0\n+      && pst->n_static_syms == 0)\n+    objfile->partial_symtabs->psymtabs = NULL;\n }\n \n /* If the current psymbol has an enumerated type, we need to add"
    },
    {
      "sha": "34154482124f9a413f6e3679faca23d866c2266d",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -369,8 +369,8 @@ build_objfile_section_table (struct objfile *objfile)\n objfile::objfile (bfd *abfd, const char *name, objfile_flags flags_)\n   : flags (flags_),\n     pspace (current_program_space),\n-    obfd (abfd),\n-    psymbol_cache (psymbol_bcache_init ())\n+    partial_symtabs (new psymtab_storage (this)),\n+    obfd (abfd)\n {\n   const char *expanded_name;\n \n@@ -713,7 +713,6 @@ objfile::~objfile ()\n   }\n \n   /* Free the obstacks for non-reusable objfiles.  */\n-  psymbol_bcache_free (psymbol_cache);\n   obstack_free (&objfile_obstack, 0);\n \n   /* Rebuild section map next time we need it.  */"
    },
    {
      "sha": "94b415c4e07268a0e9aba548d1204719329a559e",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 16,
      "deletions": 26,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -27,6 +27,7 @@\n #include \"progspace.h\"\n #include \"registry.h\"\n #include \"gdb_bfd.h\"\n+#include \"psymtab.h\"\n #include <vector>\n #include \"common/next-iterator.h\"\n #include \"common/safe-iterator.h\"\n@@ -321,22 +322,9 @@ struct objfile\n \n   struct compunit_symtab *compunit_symtabs = nullptr;\n \n-  /* Each objfile points to a linked list of partial symtabs derived from\n-     this file, one partial symtab structure for each compilation unit\n-     (source file).  */\n+  /* The partial symbol tables.  */\n \n-  struct partial_symtab *psymtabs = nullptr;\n-\n-  /* Map addresses to the entries of PSYMTABS.  It would be more efficient to\n-     have a map per the whole process but ADDRMAP cannot selectively remove\n-     its items during FREE_OBJFILE.  This mapping is already present even for\n-     PARTIAL_SYMTABs which still have no corresponding full SYMTABs read.  */\n-\n-  struct addrmap *psymtabs_addrmap = nullptr;\n-\n-  /* List of freed partial symtabs, available for re-use.  */\n-\n-  struct partial_symtab *free_psymtabs = nullptr;\n+  std::shared_ptr<psymtab_storage> partial_symtabs;\n \n   /* The object file's BFD.  Can be null if the objfile contains only\n      minimal symbols, e.g. the run time common symbols for SunOS4.  */\n@@ -358,22 +346,11 @@ struct objfile\n \n   struct obstack objfile_obstack {};\n \n-  /* A byte cache where we can stash arbitrary \"chunks\" of bytes that\n-     will not change.  */\n-\n-  struct psymbol_bcache *psymbol_cache;\n-\n   /* Map symbol addresses to the partial symtab that defines the\n      object at that address.  */\n \n   std::vector<std::pair<CORE_ADDR, partial_symtab *>> psymbol_map;\n \n-  /* Vectors of all partial symbols read in from file.  The actual data\n-     is stored in the objfile_obstack.  */\n-\n-  std::vector<partial_symbol *> global_psymbols;\n-  std::vector<partial_symbol *> static_psymbols;\n-\n   /* Structure which keeps track of functions that manipulate objfile's\n      of the same type as this objfile.  I.e. the function to read partial\n      symbols for example.  Note that this structure is in statically\n@@ -697,6 +674,19 @@ class objfile_msymbols\n   struct objfile *m_objfile;\n };\n \n+/* A range adapter that makes it possible to iterate over all\n+   psymtabs in one objfile.  */\n+\n+class objfile_psymtabs : public next_adapter<struct partial_symtab>\n+{\n+public:\n+\n+  explicit objfile_psymtabs (struct objfile *objfile)\n+    : next_adapter<struct partial_symtab> (objfile->partial_symtabs->psymtabs)\n+  {\n+  }\n+};\n+\n #define ALL_OBJFILE_OSECTIONS(objfile, osect)\t\\\n   for (osect = objfile->sections; osect < objfile->sections_end; osect++) \\\n     if (osect->the_bfd_section == NULL)\t\t\t\t\t\\"
    },
    {
      "sha": "7d2ce30f2e69ff470c60490e8dc6200019cbf60c",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -311,7 +311,11 @@ extern struct partial_symtab *allocate_psymtab (const char *filename,\n \t\t\t\t\t\tstruct objfile *objfile)\n   ATTRIBUTE_NONNULL (1);\n \n-extern void discard_psymtab (struct objfile *, struct partial_symtab *);\n+static inline void\n+discard_psymtab (struct objfile *objfile, struct partial_symtab *pst)\n+{\n+  objfile->partial_symtabs->discard_psymtab (pst);\n+}\n \n /* Used when recording partial symbol tables.  On destruction,\n    discards any partial symbol tables that have been built.  However,\n@@ -322,15 +326,14 @@ class psymtab_discarder\n \n   psymtab_discarder (struct objfile *objfile)\n     : m_objfile (objfile),\n-      m_psymtab (objfile->psymtabs)\n+      m_psymtab (objfile->partial_symtabs->psymtabs)\n   {\n   }\n \n   ~psymtab_discarder ()\n   {\n     if (m_objfile != NULL)\n-      while (m_objfile->psymtabs != m_psymtab)\n-\tdiscard_psymtab (m_objfile, m_objfile->psymtabs);\n+      m_objfile->partial_symtabs->discard_psymtabs_to (m_psymtab);\n   }\n \n   /* Keep any partial symbol tables that were built.  */"
    },
    {
      "sha": "7af82d6327cf507d8d7fed5d7bd71220a91b59d6",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 88,
      "deletions": 57,
      "changes": 145,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -65,6 +65,21 @@ static struct partial_symbol *find_pc_sect_psymbol (struct objfile *,\n static struct compunit_symtab *psymtab_to_symtab (struct objfile *objfile,\n \t\t\t\t\t\t  struct partial_symtab *pst);\n \n+\f\n+\n+psymtab_storage::psymtab_storage (struct objfile *objfile)\n+  : obstack (&objfile->objfile_obstack),\n+    psymbol_cache (psymbol_bcache_init ())\n+{\n+}\n+\n+psymtab_storage::~psymtab_storage ()\n+{\n+  psymbol_bcache_free (psymbol_cache);\n+}\n+\n+\f\n+\n /* See psymtab.h.  */\n \n objfile_psymtabs\n@@ -83,8 +98,8 @@ require_partial_symbols (struct objfile *objfile, int verbose)\n \n \t  /* Partial symbols list are not expected to changed after this\n \t     point.  */\n-\t  objfile->global_psymbols.shrink_to_fit ();\n-\t  objfile->static_psymbols.shrink_to_fit ();\n+\t  objfile->partial_symtabs->global_psymbols.shrink_to_fit ();\n+\t  objfile->partial_symtabs->static_psymbols.shrink_to_fit ();\n \n \t  if (verbose && !objfile_has_symbols (objfile))\n \t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n@@ -281,11 +296,12 @@ find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n   /* Try just the PSYMTABS_ADDRMAP mapping first as it has better granularity\n      than the later used TEXTLOW/TEXTHIGH one.  */\n \n-  if (objfile->psymtabs_addrmap != NULL)\n+  if (objfile->partial_symtabs->psymtabs_addrmap != NULL)\n     {\n       struct partial_symtab *pst\n \t= ((struct partial_symtab *)\n-\t   addrmap_find (objfile->psymtabs_addrmap, pc - baseaddr));\n+\t   addrmap_find (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t\t pc - baseaddr));\n       if (pst != NULL)\n \t{\n \t  /* FIXME: addrmaps currently do not handle overlayed sections,\n@@ -391,7 +407,9 @@ find_pc_sect_psymbol (struct objfile *objfile,\n      cache a bad endaddr.  */\n   for (int i = 0; i < psymtab->n_global_syms; i++)\n     {\n-      partial_symbol *p = objfile->global_psymbols[psymtab->globals_offset + i];\n+      partial_symbol *p\n+\t= objfile->partial_symtabs->global_psymbols[psymtab->globals_offset\n+\t\t\t\t\t\t    + i];\n \n       if (p->domain == VAR_DOMAIN\n \t  && p->aclass == LOC_BLOCK\n@@ -413,7 +431,9 @@ find_pc_sect_psymbol (struct objfile *objfile,\n \n   for (int i = 0; i < psymtab->n_static_syms; i++)\n     {\n-      partial_symbol *p = objfile->static_psymbols[psymtab->statics_offset + i];\n+      partial_symbol *p\n+\t= objfile->partial_symtabs->static_psymbols[psymtab->statics_offset\n+\t\t\t\t\t\t    + i];\n \n       if (p->domain == VAR_DOMAIN\n \t  && p->aclass == LOC_BLOCK\n@@ -522,8 +542,8 @@ match_partial_symbol (struct objfile *objfile,\n   lookup_name_info lookup_name (name, match_type);\n \n   start = (global ?\n-\t   &objfile->global_psymbols[pst->globals_offset] :\n-\t   &objfile->static_psymbols[pst->statics_offset]);\n+\t   &objfile->partial_symtabs->global_psymbols[pst->globals_offset] :\n+\t   &objfile->partial_symtabs->static_psymbols[pst->statics_offset]);\n \n   if (global && ordered_compare)  /* Can use a binary search.  */\n     {\n@@ -632,8 +652,8 @@ lookup_partial_symbol (struct objfile *objfile,\n   lookup_name_info lookup_name (search_name.get (), symbol_name_match_type::FULL);\n \n   start = (global ?\n-\t   &objfile->global_psymbols[pst->globals_offset] :\n-\t   &objfile->static_psymbols[pst->statics_offset]);\n+\t   &objfile->partial_symtabs->global_psymbols[pst->globals_offset] :\n+\t   &objfile->partial_symtabs->static_psymbols[pst->statics_offset]);\n \n   if (global)\t\t\t/* This means we can use a binary search.  */\n     {\n@@ -935,15 +955,17 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n     }\n   if (psymtab->n_global_syms > 0)\n     {\n-      print_partial_symbols (gdbarch, objfile,\n-\t\t\t     &objfile->global_psymbols[psymtab->globals_offset],\n-\t\t\t     psymtab->n_global_syms, \"Global\", outfile);\n+      print_partial_symbols\n+\t(gdbarch, objfile,\n+\t &objfile->partial_symtabs->global_psymbols[psymtab->globals_offset],\n+\t psymtab->n_global_syms, \"Global\", outfile);\n     }\n   if (psymtab->n_static_syms > 0)\n     {\n-      print_partial_symbols (gdbarch, objfile,\n-\t\t\t     &objfile->static_psymbols[psymtab->statics_offset],\n-\t\t\t     psymtab->n_static_syms, \"Static\", outfile);\n+      print_partial_symbols\n+\t(gdbarch, objfile,\n+\t &objfile->partial_symtabs->static_psymbols[psymtab->statics_offset],\n+\t psymtab->n_static_syms, \"Static\", outfile);\n     }\n   fprintf_filtered (outfile, \"\\n\");\n }\n@@ -973,10 +995,10 @@ psym_dump (struct objfile *objfile)\n {\n   struct partial_symtab *psymtab;\n \n-  if (objfile->psymtabs)\n+  if (objfile->partial_symtabs->psymtabs)\n     {\n       printf_filtered (\"Psymtabs:\\n\");\n-      for (psymtab = objfile->psymtabs;\n+      for (psymtab = objfile->partial_symtabs->psymtabs;\n \t   psymtab != NULL;\n \t   psymtab = psymtab->next)\n \t{\n@@ -1227,21 +1249,25 @@ recursively_search_psymtabs\n     }\n \n   partial_symbol **gbound\n-    = objfile->global_psymbols.data () + ps->globals_offset + ps->n_global_syms;\n+    = (objfile->partial_symtabs->global_psymbols.data ()\n+       + ps->globals_offset + ps->n_global_syms);\n   partial_symbol **sbound\n-    = objfile->static_psymbols.data () + ps->statics_offset + ps->n_static_syms;\n+    = (objfile->partial_symtabs->static_psymbols.data ()\n+       + ps->statics_offset + ps->n_static_syms);\n   partial_symbol **bound = gbound;\n \n   /* Go through all of the symbols stored in a partial\n      symtab in one loop.  */\n-  partial_symbol **psym = objfile->global_psymbols.data () + ps->globals_offset;\n+  partial_symbol **psym = (objfile->partial_symtabs->global_psymbols.data ()\n+\t\t\t   + ps->globals_offset);\n   while (keep_going)\n     {\n       if (psym >= bound)\n \t{\n \t  if (bound == gbound && ps->n_static_syms != 0)\n \t    {\n-\t      psym = objfile->static_psymbols.data () + ps->statics_offset;\n+\t      psym = (objfile->partial_symtabs->static_psymbols.data ()\n+\t\t      + ps->statics_offset);\n \t      bound = sbound;\n \t    }\n \t  else\n@@ -1343,7 +1369,7 @@ psym_expand_symtabs_matching\n static int\n psym_has_symbols (struct objfile *objfile)\n {\n-  return objfile->psymtabs != NULL;\n+  return objfile->partial_symtabs->psymtabs != NULL;\n }\n \n /* Helper function for psym_find_compunit_symtab_by_address that fills\n@@ -1388,12 +1414,12 @@ psym_find_compunit_symtab_by_address (struct objfile *objfile,\n \t{\n \t  psym_fill_psymbol_map (objfile, pst,\n \t\t\t\t &seen_addrs,\n-\t\t\t\t objfile->global_psymbols,\n+\t\t\t\t objfile->partial_symtabs->global_psymbols,\n \t\t\t\t pst->globals_offset,\n \t\t\t\t pst->n_global_syms);\n \t  psym_fill_psymbol_map (objfile, pst,\n \t\t\t\t &seen_addrs,\n-\t\t\t\t objfile->static_psymbols,\n+\t\t\t\t objfile->partial_symtabs->static_psymbols,\n \t\t\t\t pst->statics_offset,\n \t\t\t\t pst->n_static_syms);\n \t}\n@@ -1447,12 +1473,12 @@ static void\n sort_pst_symbols (struct objfile *objfile, struct partial_symtab *pst)\n {\n   /* Sort the global list; don't sort the static list.  */\n-  auto begin = objfile->global_psymbols.begin ();\n+  auto begin = objfile->partial_symtabs->global_psymbols.begin ();\n   std::advance (begin, pst->globals_offset);\n \n   /* The psymbols for this partial_symtab are currently at the end of the\n      vector.  */\n-  auto end = objfile->global_psymbols.end ();\n+  auto end = objfile->partial_symtabs->global_psymbols.end ();\n \n   std::sort (begin, end, [] (partial_symbol *s1, partial_symbol *s2)\n     {\n@@ -1476,8 +1502,8 @@ start_psymtab_common (struct objfile *objfile,\n   psymtab = allocate_psymtab (filename, objfile);\n   psymtab->set_text_low (textlow);\n   psymtab->set_text_high (psymtab->raw_text_low ()); /* default */\n-  psymtab->globals_offset = objfile->global_psymbols.size ();\n-  psymtab->statics_offset = objfile->static_psymbols.size ();\n+  psymtab->globals_offset = objfile->partial_symtabs->global_psymbols.size ();\n+  psymtab->statics_offset = objfile->partial_symtabs->static_psymbols.size ();\n   return psymtab;\n }\n \n@@ -1486,8 +1512,10 @@ start_psymtab_common (struct objfile *objfile,\n void\n end_psymtab_common (struct objfile *objfile, struct partial_symtab *pst)\n {\n-  pst->n_global_syms = objfile->global_psymbols.size () - pst->globals_offset;\n-  pst->n_static_syms = objfile->static_psymbols.size () - pst->statics_offset;\n+  pst->n_global_syms = (objfile->partial_symtabs->global_psymbols.size ()\n+\t\t\t- pst->globals_offset);\n+  pst->n_static_syms = (objfile->partial_symtabs->static_psymbols.size ()\n+\t\t\t- pst->statics_offset);\n \n   sort_pst_symbols (objfile, pst);\n }\n@@ -1613,7 +1641,9 @@ add_psymbol_to_bcache (const char *name, int namelength, int copy_name,\n   symbol_set_names (&psymbol, name, namelength, copy_name, objfile->per_bfd);\n \n   /* Stash the partial symbol away in the cache.  */\n-  return psymbol_bcache_full (&psymbol, objfile->psymbol_cache, added);\n+  return psymbol_bcache_full (&psymbol,\n+\t\t\t      objfile->partial_symtabs->psymbol_cache,\n+\t\t\t      added);\n }\n \n /* Helper function, adds partial symbol to the given partial symbol list.  */\n@@ -1657,8 +1687,8 @@ add_psymbol_to_list (const char *name, int namelength, int copy_name,\n   /* Save pointer to partial symbol in psymtab, growing symtab if needed.  */\n   std::vector<partial_symbol *> *list\n     = (where == psymbol_placement::STATIC\n-       ? &objfile->static_psymbols\n-       : &objfile->global_psymbols);\n+       ? &objfile->partial_symtabs->static_psymbols\n+       : &objfile->partial_symtabs->global_psymbols);\n   append_psymbol_to_list (list, psym, objfile);\n }\n \n@@ -1667,15 +1697,15 @@ add_psymbol_to_list (const char *name, int namelength, int copy_name,\n void\n init_psymbol_list (struct objfile *objfile, int total_symbols)\n {\n-  if (objfile->global_psymbols.capacity () == 0\n-      && objfile->static_psymbols.capacity () == 0)\n+  if (objfile->partial_symtabs->global_psymbols.capacity () == 0\n+      && objfile->partial_symtabs->static_psymbols.capacity () == 0)\n     {\n       /* Current best guess is that approximately a twentieth of the\n \t total symbols (in a debugging file) are global or static\n \t oriented symbols, then multiply that by slop factor of\n \t two.  */\n-      objfile->global_psymbols.reserve (total_symbols / 10);\n-      objfile->static_psymbols.reserve (total_symbols / 10);\n+      objfile->partial_symtabs->global_psymbols.reserve (total_symbols / 10);\n+      objfile->partial_symtabs->static_psymbols.reserve (total_symbols / 10);\n     }\n }\n \n@@ -1686,10 +1716,10 @@ allocate_psymtab (const char *filename, struct objfile *objfile)\n {\n   struct partial_symtab *psymtab;\n \n-  if (objfile->free_psymtabs)\n+  if (objfile->partial_symtabs->free_psymtabs)\n     {\n-      psymtab = objfile->free_psymtabs;\n-      objfile->free_psymtabs = psymtab->next;\n+      psymtab = objfile->partial_symtabs->free_psymtabs;\n+      objfile->partial_symtabs->free_psymtabs = psymtab->next;\n     }\n   else\n     psymtab = XOBNEW (&objfile->objfile_obstack, partial_symtab);\n@@ -1704,8 +1734,8 @@ allocate_psymtab (const char *filename, struct objfile *objfile)\n      Psymtabs are searched in most recent inserted -> least recent\n      inserted order.  */\n \n-  psymtab->next = objfile->psymtabs;\n-  objfile->psymtabs = psymtab;\n+  psymtab->next = objfile->partial_symtabs->psymtabs;\n+  objfile->partial_symtabs->psymtabs = psymtab;\n \n   if (symtab_create_debug)\n     {\n@@ -1731,7 +1761,7 @@ allocate_psymtab (const char *filename, struct objfile *objfile)\n }\n \n void\n-discard_psymtab (struct objfile *objfile, struct partial_symtab *pst)\n+psymtab_storage::discard_psymtab (struct partial_symtab *pst)\n {\n   struct partial_symtab **prev_pst;\n \n@@ -1744,15 +1774,15 @@ discard_psymtab (struct objfile *objfile, struct partial_symtab *pst)\n \n   /* First, snip it out of the psymtab chain.  */\n \n-  prev_pst = &(objfile->psymtabs);\n+  prev_pst = &psymtabs;\n   while ((*prev_pst) != pst)\n     prev_pst = &((*prev_pst)->next);\n   (*prev_pst) = pst->next;\n \n   /* Next, put it on a free list for recycling.  */\n \n-  pst->next = objfile->free_psymtabs;\n-  objfile->free_psymtabs = pst;\n+  pst->next = free_psymtabs;\n+  free_psymtabs = pst;\n }\n \n \f\n@@ -1818,16 +1848,16 @@ dump_psymtab_addrmap (struct objfile *objfile, struct partial_symtab *psymtab,\n \n   if ((psymtab == NULL\n        || psymtab->psymtabs_addrmap_supported)\n-      && objfile->psymtabs_addrmap != NULL)\n+      && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n     {\n       addrmap_dump_data.objfile = objfile;\n       addrmap_dump_data.psymtab = psymtab;\n       addrmap_dump_data.outfile = outfile;\n       addrmap_dump_data.previous_matched = 0;\n       fprintf_filtered (outfile, \"%sddress map:\\n\",\n \t\t\tpsymtab == NULL ? \"Entire a\" : \"  A\");\n-      addrmap_foreach (objfile->psymtabs_addrmap, dump_psymtab_addrmap_1,\n-\t\t       &addrmap_dump_data);\n+      addrmap_foreach (objfile->partial_symtabs->psymtabs_addrmap,\n+\t\t       dump_psymtab_addrmap_1, &addrmap_dump_data);\n     }\n }\n \n@@ -1970,7 +2000,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \n       if (address_arg == NULL\n \t  && source_arg == NULL\n-\t  && objfile->psymtabs_addrmap != NULL)\n+\t  && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n \t{\n \t  outfile->puts (\"\\n\");\n \t  dump_psymtab_addrmap (objfile, NULL, outfile);\n@@ -2046,8 +2076,8 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\tprintf_filtered (\"    globals \");\n \t\tif (psymtab->n_global_syms)\n \t\t  {\n-\t\t    auto p\n-\t\t      = &objfile->global_psymbols[psymtab->globals_offset];\n+\t\t    auto p = &(objfile->partial_symtabs\n+\t\t\t       ->global_psymbols[psymtab->globals_offset]);\n \n \t\t    printf_filtered\n \t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n@@ -2059,8 +2089,8 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\tprintf_filtered (\"    statics \");\n \t\tif (psymtab->n_static_syms)\n \t\t  {\n-\t\t    auto p\n-\t\t      = &objfile->static_psymbols[psymtab->statics_offset];\n+\t\t    auto p = &(objfile->partial_symtabs\n+\t\t\t       ->static_psymbols[psymtab->statics_offset]);\n \n \t\t    printf_filtered\n \t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n@@ -2140,7 +2170,8 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t  continue;\n \tbv = COMPUNIT_BLOCKVECTOR (cust);\n \tb = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n-\tpartial_symbol **psym = &objfile->static_psymbols[ps->statics_offset];\n+\tpartial_symbol **psym\n+\t  = &objfile->partial_symtabs->static_psymbols[ps->statics_offset];\n \tlength = ps->n_static_syms;\n \twhile (length--)\n \t  {\n@@ -2158,7 +2189,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t    psym++;\n \t  }\n \tb = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n-\tpsym = &objfile->global_psymbols[ps->globals_offset];\n+\tpsym = &objfile->partial_symtabs->global_psymbols[ps->globals_offset];\n \tlength = ps->n_global_syms;\n \twhile (length--)\n \t  {"
    },
    {
      "sha": "895f950a4665e7afa482b7258da1925765d661d7",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 64,
      "deletions": 13,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -23,37 +23,88 @@\n #include \"symfile.h\"\n #include \"common/next-iterator.h\"\n \n+struct partial_symbol;\n+\n /* A bcache for partial symbols.  */\n \n struct psymbol_bcache;\n \n-extern struct psymbol_bcache *psymbol_bcache_init (void);\n-extern void psymbol_bcache_free (struct psymbol_bcache *);\n-extern struct bcache *psymbol_bcache_get_bcache (struct psymbol_bcache *);\n+/* An instance of this class manages the partial symbol tables and\n+   partial symbols for a given objfile.  */\n \n-extern const struct quick_symbol_functions psym_functions;\n+class psymtab_storage\n+{\n+public:\n \n-extern const struct quick_symbol_functions dwarf2_gdb_index_functions;\n-extern const struct quick_symbol_functions dwarf2_debug_names_functions;\n+  explicit psymtab_storage (struct objfile *objfile);\n \n-/* A range adapter that makes it possible to iterate over all\n-   psymtabs in one objfile.  */\n+  ~psymtab_storage ();\n \n-class objfile_psymtabs : public next_adapter<struct partial_symtab>\n-{\n-public:\n+  DISABLE_COPY_AND_ASSIGN (psymtab_storage);\n+\n+  /* Discard all partial symbol tables starting with \"psymtabs\" and\n+     proceeding until \"to\" has been discarded.  */\n \n-  explicit objfile_psymtabs (struct objfile *objfile)\n-    : next_adapter<struct partial_symtab> (objfile->psymtabs)\n+  void discard_psymtabs_to (struct partial_symtab *to)\n   {\n+    while (psymtabs != to)\n+      discard_psymtab (psymtabs);\n   }\n+\n+  /* Discard the partial symbol table.  */\n+\n+  void discard_psymtab (struct partial_symtab *pst);\n+\n+\n+  /* Each objfile points to a linked list of partial symtabs derived from\n+     this file, one partial symtab structure for each compilation unit\n+     (source file).  */\n+\n+  struct partial_symtab *psymtabs = nullptr;\n+\n+  /* Map addresses to the entries of PSYMTABS.  It would be more efficient to\n+     have a map per the whole process but ADDRMAP cannot selectively remove\n+     its items during FREE_OBJFILE.  This mapping is already present even for\n+     PARTIAL_SYMTABs which still have no corresponding full SYMTABs read.  */\n+\n+  struct addrmap *psymtabs_addrmap = nullptr;\n+\n+  /* List of freed partial symtabs, available for re-use.  */\n+\n+  struct partial_symtab *free_psymtabs = nullptr;\n+\n+  /* The obstack where allocations are made.  */\n+\n+  struct obstack *obstack;\n+\n+  /* A byte cache where we can stash arbitrary \"chunks\" of bytes that\n+     will not change.  */\n+\n+  struct psymbol_bcache *psymbol_cache;\n+\n+  /* Vectors of all partial symbols read in from file.  The actual data\n+     is stored in the objfile_obstack.  */\n+\n+  std::vector<partial_symbol *> global_psymbols;\n+  std::vector<partial_symbol *> static_psymbols;\n };\n \n+\n+extern struct psymbol_bcache *psymbol_bcache_init (void);\n+extern void psymbol_bcache_free (struct psymbol_bcache *);\n+extern struct bcache *psymbol_bcache_get_bcache (struct psymbol_bcache *);\n+\n+extern const struct quick_symbol_functions psym_functions;\n+\n+extern const struct quick_symbol_functions dwarf2_gdb_index_functions;\n+extern const struct quick_symbol_functions dwarf2_debug_names_functions;\n+\n /* Ensure that the partial symbols for OBJFILE have been loaded.  If\n    VERBOSE is non-zero, then this will print a message when symbols\n    are loaded.  This function returns a range adapter suitable for\n    iterating over the psymtabs of OBJFILE.  */\n \n+class objfile_psymtabs;\n extern objfile_psymtabs require_partial_symbols (struct objfile *objfile,\n \t\t\t\t\t\t int verbose);\n "
    },
    {
      "sha": "d407461f43a141d8f2731cb9ea0396e68ee6ca20",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -2526,21 +2526,21 @@ reread_symbols (void)\n \n \t  /* FIXME: Do we have to free a whole linked list, or is this\n \t     enough?  */\n-\t  objfile->global_psymbols.clear ();\n-\t  objfile->static_psymbols.clear ();\n+\t  objfile->partial_symtabs->global_psymbols.clear ();\n+\t  objfile->partial_symtabs->static_psymbols.clear ();\n \n \t  /* Free the obstacks for non-reusable objfiles.  */\n-\t  psymbol_bcache_free (objfile->psymbol_cache);\n-\t  objfile->psymbol_cache = psymbol_bcache_init ();\n+\t  psymbol_bcache_free (objfile->partial_symtabs->psymbol_cache);\n+\t  objfile->partial_symtabs->psymbol_cache = psymbol_bcache_init ();\n \n \t  /* NB: after this call to obstack_free, objfiles_changed\n \t     will need to be called (see discussion below).  */\n \t  obstack_free (&objfile->objfile_obstack, 0);\n \t  objfile->sections = NULL;\n \t  objfile->compunit_symtabs = NULL;\n-\t  objfile->psymtabs = NULL;\n-\t  objfile->psymtabs_addrmap = NULL;\n-\t  objfile->free_psymtabs = NULL;\n+\t  objfile->partial_symtabs->psymtabs = NULL;\n+\t  objfile->partial_symtabs->psymtabs_addrmap = NULL;\n+\t  objfile->partial_symtabs->free_psymtabs = NULL;\n \t  objfile->template_symbols = NULL;\n \t  objfile->static_links = NULL;\n "
    },
    {
      "sha": "f798c6f264929c80bca1b1b8d5474b428f6a0157",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d320c2b5e181828418224521f2acd2ff48e127f4/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=d320c2b5e181828418224521f2acd2ff48e127f4",
      "patch": "@@ -69,8 +69,9 @@ print_symbol_bcache_statistics (void)\n \tQUIT;\n \tprintf_filtered (_(\"Byte cache statistics for '%s':\\n\"),\n \t\t\t objfile_name (objfile));\n-\tprint_bcache_statistics (psymbol_bcache_get_bcache (objfile->psymbol_cache),\n-\t\t\t\t \"partial symbol cache\");\n+\tprint_bcache_statistics\n+\t  (psymbol_bcache_get_bcache (objfile->partial_symtabs->psymbol_cache),\n+\t   \"partial symbol cache\");\n \tprint_bcache_statistics (objfile->per_bfd->macro_cache,\n \t\t\t\t \"preprocessor macro cache\");\n \tprint_bcache_statistics (objfile->per_bfd->filename_cache,\n@@ -133,9 +134,10 @@ print_objfile_statistics (void)\n       printf_filtered (_(\"  Total memory used for BFD obstack: %s\\n\"),\n \t\t       pulongest (obstack_memory_used (&objfile->per_bfd\n \t\t\t\t\t\t       ->storage_obstack)));\n-      printf_filtered (_(\"  Total memory used for psymbol cache: %d\\n\"),\n-\t\t       bcache_memory_used (psymbol_bcache_get_bcache\n-\t\t\t\t\t   (objfile->psymbol_cache)));\n+      printf_filtered\n+\t(_(\"  Total memory used for psymbol cache: %d\\n\"),\n+\t bcache_memory_used (psymbol_bcache_get_bcache\n+\t\t\t     (objfile->partial_symtabs->psymbol_cache)));\n       printf_filtered (_(\"  Total memory used for macro cache: %d\\n\"),\n \t\t       bcache_memory_used (objfile->per_bfd->macro_cache));\n       printf_filtered (_(\"  Total memory used for file name cache: %d\\n\"),"
    }
  ]
}