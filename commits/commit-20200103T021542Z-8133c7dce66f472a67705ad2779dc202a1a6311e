{
  "sha": "8133c7dce66f472a67705ad2779dc202a1a6311e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODEzM2M3ZGNlNjZmNDcyYTY3NzA1YWQyNzc5ZGMyMDJhMWE2MzExZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2019-12-30T18:47:10Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-03T02:15:42Z"
    },
    "message": "Remove stale references to Cell BE\n\nWhile reading some code i noticed we're still referencing Cell BE in a couple\nparts. This patch removes those.\n\nv2: Update comment in gdb/target.h.\n\ngdb/ChangeLog:\n\n2020-01-02  Luis Machado  <luis.machado@linaro.org>\n\n\t* proc-service.c (get_ps_regcache): Remove reference to obsolete\n\tCell BE architecture.\n\t* target.h (struct target_ops) <thread_architecture>: Likewise.\n\nChange-Id: I7a9ccc603b00db22a6275bc5ab69e1417148cb72",
    "tree": {
      "sha": "8a9d5df84c1351de8b3dd220245bea6921a61ead",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a9d5df84c1351de8b3dd220245bea6921a61ead"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8133c7dce66f472a67705ad2779dc202a1a6311e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8133c7dce66f472a67705ad2779dc202a1a6311e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8133c7dce66f472a67705ad2779dc202a1a6311e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8133c7dce66f472a67705ad2779dc202a1a6311e/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6687b129bcfada5ee26e5c34101d21d32ab8c3b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6687b129bcfada5ee26e5c34101d21d32ab8c3b0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6687b129bcfada5ee26e5c34101d21d32ab8c3b0"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 11,
    "deletions": 9
  },
  "files": [
    {
      "sha": "c9999315d964160a966364652b294cbf5cd46a7b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8133c7dce66f472a67705ad2779dc202a1a6311e",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-02  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* proc-service.c (get_ps_regcache): Remove reference to obsolete\n+\tCell BE architecture.\n+\t* target.h (struct target_ops) <thread_architecture>: Likewise.\n+\n 2020-01-01  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* Makefile.in: Use INSTALL_PROGRAM_ENV."
    },
    {
      "sha": "7593ffe389e5d43e812249f0f06daeec10279df9",
      "filename": "gdb/proc-service.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/proc-service.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/proc-service.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/proc-service.c?ref=8133c7dce66f472a67705ad2779dc202a1a6311e",
      "patch": "@@ -129,10 +129,7 @@ ps_pdwrite (struct ps_prochandle *ph, psaddr_t addr,\n /* Get a regcache for LWPID using its inferior's \"main\" architecture,\n    which is the register set libthread_db expects to be using.  In\n    multi-arch debugging scenarios, the thread's architecture may\n-   differ from the inferior's \"main\" architecture.  E.g., in the Cell\n-   combined debugger, if GDB happens to interrupt SPU code, the\n-   thread's architecture is SPU, and the main architecture is\n-   PowerPC.  */\n+   differ from the inferior's \"main\" architecture.  */\n \n static struct regcache *\n get_ps_regcache (struct ps_prochandle *ph, lwpid_t lwpid)"
    },
    {
      "sha": "a8e551ce697f44cbd6511795e46564337ceaffb1",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8133c7dce66f472a67705ad2779dc202a1a6311e/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=8133c7dce66f472a67705ad2779dc202a1a6311e",
      "patch": "@@ -878,11 +878,10 @@ struct target_ops\n     /* Determine current architecture of thread PTID.\n \n        The target is supposed to determine the architecture of the code where\n-       the target is currently stopped at (on Cell, if a target is in spu_run,\n-       to_thread_architecture would return SPU, otherwise PPC32 or PPC64).\n-       This is architecture used to perform decr_pc_after_break adjustment,\n-       and also determines the frame architecture of the innermost frame.\n-       ptrace operations need to operate according to target_gdbarch ().  */\n+       the target is currently stopped at.  The architecture information is\n+       used to perform decr_pc_after_break adjustment, and also to determine\n+       the frame architecture of the innermost frame.  ptrace operations need to\n+       operate according to target_gdbarch ().  */\n     virtual struct gdbarch *thread_architecture (ptid_t)\n       TARGET_DEFAULT_RETURN (NULL);\n "
    }
  ]
}