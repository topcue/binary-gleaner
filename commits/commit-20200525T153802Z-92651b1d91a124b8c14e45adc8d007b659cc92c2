{
  "sha": "92651b1d91a124b8c14e45adc8d007b659cc92c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTI2NTFiMWQ5MWExMjRiOGMxNGU0NWFkYzhkMDA3YjY1OWNjOTJjMg==",
  "commit": {
    "author": {
      "name": "Michael Weghorn",
      "email": "m.weghorn@posteo.de",
      "date": "2020-05-25T15:37:44Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-25T15:38:02Z"
    },
    "message": "gdb: Move construct_inferior_arguments to gdbsupport\n\nThis moves the function construct_inferior_arguments from\ngdb/inferior.h and gdb/infcmd.c to gdbsupport/common-inferior.{h,cc}.\nWhile at it, also move the function's comment to the header file\nto align with current standards.\n\nThe intention is to use it from gdbserver in a follow-up commit.\n\ngdb/ChangeLog:\n\n\t* infcmd.c, inferior.h: (construct_inferior_arguments):\n\tMoved function from here to gdbsupport/common-inferior.{h,cc}\n\ngdbsupport/ChangeLog:\n\n\t* common-inferior.h, common-inferior.cc: (construct_inferior_arguments):\n\tMove function here from gdb/infcmd.c, gdb/inferior.h\n\nChange-Id: Ib9290464ce8c0872f605d8829f88352d064c30d6",
    "tree": {
      "sha": "94d42142aaa4c08c436b28f37ca2582782fa5ba2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/94d42142aaa4c08c436b28f37ca2582782fa5ba2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/92651b1d91a124b8c14e45adc8d007b659cc92c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92651b1d91a124b8c14e45adc8d007b659cc92c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/92651b1d91a124b8c14e45adc8d007b659cc92c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92651b1d91a124b8c14e45adc8d007b659cc92c2/comments",
  "author": {
    "login": "michaelweghorn",
    "id": 6560939,
    "node_id": "MDQ6VXNlcjY1NjA5Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6560939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelweghorn",
    "html_url": "https://github.com/michaelweghorn",
    "followers_url": "https://api.github.com/users/michaelweghorn/followers",
    "following_url": "https://api.github.com/users/michaelweghorn/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelweghorn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelweghorn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelweghorn/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelweghorn/orgs",
    "repos_url": "https://api.github.com/users/michaelweghorn/repos",
    "events_url": "https://api.github.com/users/michaelweghorn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelweghorn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42cf184456fb1470835b6dccd536c2d74461e7b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42cf184456fb1470835b6dccd536c2d74461e7b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/42cf184456fb1470835b6dccd536c2d74461e7b6"
    }
  ],
  "stats": {
    "total": 262,
    "additions": 136,
    "deletions": 126
  },
  "files": [
    {
      "sha": "a43ab08dd6c61882815762c51afbb2ea8d74a76d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-25  Michael Weghorn  <m.weghorn@posteo.de>\n+\n+\t* infcmd.c, inferior.h: (construct_inferior_arguments):\n+\tMoved function from here to gdbsupport/common-inferior.{h,cc}\n+\n 2020-05-23  Tom Tromey  <tom@tromey.com>\n \n \tRevert commit eca1f90c:"
    },
    {
      "sha": "cf6e540e79587a41a98d1748e9dcad58e9c73884",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 0,
      "deletions": 124,
      "changes": 124,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -259,130 +259,6 @@ server's cwd if remote debugging.\\n\"));\n \t\t\t\"when starting the inferior is \\\"%s\\\".\\n\"), cwd);\n }\n \n-\f\n-/* Compute command-line string given argument vector.  This does the\n-   same shell processing as fork_inferior.  */\n-\n-char *\n-construct_inferior_arguments (int argc, char **argv)\n-{\n-  char *result;\n-\n-  /* ARGC should always be at least 1, but we double check this\n-     here.  This is also needed to silence -Werror-stringop\n-     warnings.  */\n-  gdb_assert (argc > 0);\n-\n-  if (startup_with_shell)\n-    {\n-#ifdef __MINGW32__\n-      /* This holds all the characters considered special to the\n-\t Windows shells.  */\n-      static const char special[] = \"\\\"!&*|[]{}<>?`~^=;, \\t\\n\";\n-      static const char quote = '\"';\n-#else\n-      /* This holds all the characters considered special to the\n-\t typical Unix shells.  We include `^' because the SunOS\n-\t /bin/sh treats it as a synonym for `|'.  */\n-      static const char special[] = \"\\\"!#$&*()\\\\|[]{}<>?'`~^; \\t\\n\";\n-      static const char quote = '\\'';\n-#endif\n-      int i;\n-      int length = 0;\n-      char *out, *cp;\n-\n-      /* We over-compute the size.  It shouldn't matter.  */\n-      for (i = 0; i < argc; ++i)\n-\tlength += 3 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\\0');\n-\n-      result = (char *) xmalloc (length);\n-      out = result;\n-\n-      for (i = 0; i < argc; ++i)\n-\t{\n-\t  if (i > 0)\n-\t    *out++ = ' ';\n-\n-\t  /* Need to handle empty arguments specially.  */\n-\t  if (argv[i][0] == '\\0')\n-\t    {\n-\t      *out++ = quote;\n-\t      *out++ = quote;\n-\t    }\n-\t  else\n-\t    {\n-#ifdef __MINGW32__\n-\t      int quoted = 0;\n-\n-\t      if (strpbrk (argv[i], special))\n-\t\t{\n-\t\t  quoted = 1;\n-\t\t  *out++ = quote;\n-\t\t}\n-#endif\n-\t      for (cp = argv[i]; *cp; ++cp)\n-\t\t{\n-\t\t  if (*cp == '\\n')\n-\t\t    {\n-\t\t      /* A newline cannot be quoted with a backslash (it\n-\t\t\t just disappears), only by putting it inside\n-\t\t\t quotes.  */\n-\t\t      *out++ = quote;\n-\t\t      *out++ = '\\n';\n-\t\t      *out++ = quote;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-#ifdef __MINGW32__\n-\t\t      if (*cp == quote)\n-#else\n-\t\t      if (strchr (special, *cp) != NULL)\n-#endif\n-\t\t\t*out++ = '\\\\';\n-\t\t      *out++ = *cp;\n-\t\t    }\n-\t\t}\n-#ifdef __MINGW32__\n-\t      if (quoted)\n-\t\t*out++ = quote;\n-#endif\n-\t    }\n-\t}\n-      *out = '\\0';\n-    }\n-  else\n-    {\n-      /* In this case we can't handle arguments that contain spaces,\n-\t tabs, or newlines -- see breakup_args().  */\n-      int i;\n-      int length = 0;\n-\n-      for (i = 0; i < argc; ++i)\n-\t{\n-\t  char *cp = strchr (argv[i], ' ');\n-\t  if (cp == NULL)\n-\t    cp = strchr (argv[i], '\\t');\n-\t  if (cp == NULL)\n-\t    cp = strchr (argv[i], '\\n');\n-\t  if (cp != NULL)\n-\t    error (_(\"can't handle command-line \"\n-\t\t     \"argument containing whitespace\"));\n-\t  length += strlen (argv[i]) + 1;\n-\t}\n-\n-      result = (char *) xmalloc (length);\n-      result[0] = '\\0';\n-      for (i = 0; i < argc; ++i)\n-\t{\n-\t  if (i > 0)\n-\t    strcat (result, \" \");\n-\t  strcat (result, argv[i]);\n-\t}\n-    }\n-\n-  return result;\n-}\n-\f\n \n /* This function strips the '&' character (indicating background\n    execution) that is added as *the last* of the arguments ARGS of a"
    },
    {
      "sha": "95af474eedeb77a025565c1f43bb7dd25f929759",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -184,8 +184,6 @@ extern void child_interrupt (struct target_ops *self);\n    STARTUP_INFERIOR.  */\n extern ptid_t gdb_startup_inferior (pid_t pid, int num_traps);\n \n-extern char *construct_inferior_arguments (int, char **);\n-\n /* From infcmd.c */\n \n /* Initial inferior setup.  Determines the exec file is not yet known,"
    },
    {
      "sha": "4f72c7dd15c201d30806f0f0d58b147e858ff419",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-25  Michael Weghorn  <m.weghorn@posteo.de>\n+\n+\t* common-inferior.h, common-inferior.cc: (construct_inferior_arguments):\n+\tMove function here from gdb/infcmd.c, gdb/inferior.h\n+\n 2020-05-14  Kevin Buettner  <kevinb@redhat.com>\n \n \t* btrace-common.h (btrace_cpu_vendor): Add CV_AMD."
    },
    {
      "sha": "a7d631f3574d64aacd171eaf594a94b1625ceb45",
      "filename": "gdbsupport/common-inferior.cc",
      "status": "modified",
      "additions": 122,
      "deletions": 0,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/common-inferior.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/common-inferior.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-inferior.cc?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -24,3 +24,125 @@\n /* See common-inferior.h.  */\n \n bool startup_with_shell = true;\n+\n+/* See common-inferior.h.  */\n+\n+char *\n+construct_inferior_arguments (int argc, char **argv)\n+{\n+  char *result;\n+\n+  /* ARGC should always be at least 1, but we double check this\n+     here.  This is also needed to silence -Werror-stringop\n+     warnings.  */\n+  gdb_assert (argc > 0);\n+\n+  if (startup_with_shell)\n+    {\n+#ifdef __MINGW32__\n+      /* This holds all the characters considered special to the\n+\t Windows shells.  */\n+      static const char special[] = \"\\\"!&*|[]{}<>?`~^=;, \\t\\n\";\n+      static const char quote = '\"';\n+#else\n+      /* This holds all the characters considered special to the\n+\t typical Unix shells.  We include `^' because the SunOS\n+\t /bin/sh treats it as a synonym for `|'.  */\n+      static const char special[] = \"\\\"!#$&*()\\\\|[]{}<>?'`~^; \\t\\n\";\n+      static const char quote = '\\'';\n+#endif\n+      int i;\n+      int length = 0;\n+      char *out, *cp;\n+\n+      /* We over-compute the size.  It shouldn't matter.  */\n+      for (i = 0; i < argc; ++i)\n+\tlength += 3 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\\0');\n+\n+      result = (char *) xmalloc (length);\n+      out = result;\n+\n+      for (i = 0; i < argc; ++i)\n+\t{\n+\t  if (i > 0)\n+\t    *out++ = ' ';\n+\n+\t  /* Need to handle empty arguments specially.  */\n+\t  if (argv[i][0] == '\\0')\n+\t    {\n+\t      *out++ = quote;\n+\t      *out++ = quote;\n+\t    }\n+\t  else\n+\t    {\n+#ifdef __MINGW32__\n+\t      int quoted = 0;\n+\n+\t      if (strpbrk (argv[i], special))\n+\t\t{\n+\t\t  quoted = 1;\n+\t\t  *out++ = quote;\n+\t\t}\n+#endif\n+\t      for (cp = argv[i]; *cp; ++cp)\n+\t\t{\n+\t\t  if (*cp == '\\n')\n+\t\t    {\n+\t\t      /* A newline cannot be quoted with a backslash (it\n+\t\t\t just disappears), only by putting it inside\n+\t\t\t quotes.  */\n+\t\t      *out++ = quote;\n+\t\t      *out++ = '\\n';\n+\t\t      *out++ = quote;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+#ifdef __MINGW32__\n+\t\t      if (*cp == quote)\n+#else\n+\t\t      if (strchr (special, *cp) != NULL)\n+#endif\n+\t\t\t*out++ = '\\\\';\n+\t\t      *out++ = *cp;\n+\t\t    }\n+\t\t}\n+#ifdef __MINGW32__\n+\t      if (quoted)\n+\t\t*out++ = quote;\n+#endif\n+\t    }\n+\t}\n+      *out = '\\0';\n+    }\n+  else\n+    {\n+      /* In this case we can't handle arguments that contain spaces,\n+\t tabs, or newlines -- see breakup_args().  */\n+      int i;\n+      int length = 0;\n+\n+      for (i = 0; i < argc; ++i)\n+\t{\n+\t  char *cp = strchr (argv[i], ' ');\n+\t  if (cp == NULL)\n+\t    cp = strchr (argv[i], '\\t');\n+\t  if (cp == NULL)\n+\t    cp = strchr (argv[i], '\\n');\n+\t  if (cp != NULL)\n+\t    error (_(\"can't handle command-line \"\n+\t\t     \"argument containing whitespace\"));\n+\t  length += strlen (argv[i]) + 1;\n+\t}\n+\n+      result = (char *) xmalloc (length);\n+      result[0] = '\\0';\n+      for (i = 0; i < argc; ++i)\n+\t{\n+\t  if (i > 0)\n+\t    strcat (result, \" \");\n+\t  strcat (result, argv[i]);\n+\t}\n+    }\n+\n+  return result;\n+}"
    },
    {
      "sha": "ee87bc75a3f33032d033f515f819520e841ffa15",
      "filename": "gdbsupport/common-inferior.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/common-inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92651b1d91a124b8c14e45adc8d007b659cc92c2/gdbsupport/common-inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-inferior.h?ref=92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "patch": "@@ -58,4 +58,8 @@ extern void set_inferior_cwd (const char *cwd);\n    the target is started up with a shell.  */\n extern bool startup_with_shell;\n \n+/* Compute command-line string given argument vector. This does the\n+   same shell processing as fork_inferior.  */\n+extern char *construct_inferior_arguments (int, char **);\n+\n #endif /* COMMON_COMMON_INFERIOR_H */"
    }
  ]
}