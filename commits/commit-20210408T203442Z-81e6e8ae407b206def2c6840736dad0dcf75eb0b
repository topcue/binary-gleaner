{
  "sha": "81e6e8ae407b206def2c6840736dad0dcf75eb0b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODFlNmU4YWU0MDdiMjA2ZGVmMmM2ODQwNzM2ZGFkMGRjZjc1ZWIwYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-08T12:41:25Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-08T20:34:42Z"
    },
    "message": "Do not use old-style definitions in sim\n\nThis changes all the non-generated (hand-written) code in sim to use\n\"new\" (post-K&R) style function definitions.\n\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* bpf.c (bpf_def_model_init): Use new-style declaration.\n\nsim/common/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* cgen-utils.c (RORQI, ROLQI, RORHI, ROLHI, RORSI, ROLSI): Use\n\tnew-style declaration.\n\nsim/erc32/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* sis.c (run_sim, main): Use new-style declaration.\n\t* interf.c (run_sim, sim_open, sim_close, sim_load)\n\t(sim_create_inferior, sim_store_register, sim_fetch_register)\n\t(sim_info, sim_stop_reason, flush_windows, sim_do_command): Use\n\tnew-style declaration.\n\t* help.c (usage, gen_help): Use new-style declaration.\n\t* func.c (batch, set_regi, set_rega, disp_reg, limcalc)\n\t(reset_stat, show_stat, init_bpt, int_handler, init_signals)\n\t(disp_fpu, disp_regs, disp_ctrl, disp_mem, dis_mem, event)\n\t(init_event, set_int, advance_time, now, wait_for_irq, check_bpt)\n\t(reset_all, sys_reset, sys_halt): Use new-style declaration.\n\t* float.c (get_accex, clear_accex, set_fsr): Use new-style\n\tdeclaration.\n\t* exec.c (sub_cc, add_cc, log_cc, dispatch_instruction, fpexec)\n\t(chk_asi, execute_trap, check_interrupts, init_regs): Use\n\tnew-style declaration.\n\t* erc32.c (init_sim, reset, decode_ersr, mecparerror)\n\t(error_mode, decode_memcfg, decode_wcr, decode_mcr, sim_halt)\n\t(close_port, exit_sim, mec_reset, mec_intack, chk_irq, mec_irq)\n\t(set_sfsr, mec_read, mec_write, init_stdio, restore_stdio)\n\t(port_init, read_uart, write_uart, flush_uart, uarta_tx)\n\t(uartb_tx, uart_rx, uart_intr, uart_irq_start, wdog_intr)\n\t(wdog_start, rtc_intr, rtc_start, rtc_counter_read)\n\t(rtc_scaler_set, rtc_reload_set, gpt_intr, gpt_start)\n\t(gpt_counter_read, gpt_scaler_set, gpt_reload_set, timer_ctrl)\n\t(memory_read, memory_write, get_mem_ptr, sis_memory_write)\n\t(sis_memory_read): Use new-style declaration.\n\nsim/frv/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* sim-if.c (sim_open, frv_sim_close, sim_create_inferior): Use\n\tnew-style declaration.\n\nsim/h8300/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* compile.c (cmdline_location): Use new-style declaration.\n\nsim/iq2000/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n\tdeclaration.\n\t* iq2000.c (fetch_str): Use new-style declaration.\n\nsim/lm32/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n\tdeclaration.\n\nsim/m32r/ChangeLog\n2021-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n\tdeclaration.",
    "tree": {
      "sha": "a2c916002fdbf8fd5a3ff714edaa686146b7b38e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a2c916002fdbf8fd5a3ff714edaa686146b7b38e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/81e6e8ae407b206def2c6840736dad0dcf75eb0b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81e6e8ae407b206def2c6840736dad0dcf75eb0b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/81e6e8ae407b206def2c6840736dad0dcf75eb0b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81e6e8ae407b206def2c6840736dad0dcf75eb0b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "83a559f7b93f2a06306e46d0d9ac094c599396ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83a559f7b93f2a06306e46d0d9ac094c599396ae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/83a559f7b93f2a06306e46d0d9ac094c599396ae"
    }
  ],
  "stats": {
    "total": 489,
    "additions": 191,
    "deletions": 298
  },
  "files": [
    {
      "sha": "89db85dd7c48f59ba7d7c2b04372c5a845f14b5c",
      "filename": "sim/bpf/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/bpf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/bpf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* bpf.c (bpf_def_model_init): Use new-style declaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "a0cc803da821639473feacf193b1e81d17e79937",
      "filename": "sim/bpf/bpf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/bpf/bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/bpf/bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -205,7 +205,7 @@ bpfbf_breakpoint (SIM_CPU *current_cpu)\n    several ISAs.  This should be fixed in CGEN.  */\n \n static void\n-bpf_def_model_init ()\n+bpf_def_model_init (void)\n {\n   /* Do nothing.  */\n }"
    },
    {
      "sha": "ca0829cd63183d500d47a0c7b89c383d1c7ca100",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* cgen-utils.c (RORQI, ROLQI, RORHI, ROLHI, RORSI, ROLSI): Use\n+\tnew-style declaration.\n+\n 2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n \n \t* Make-common.in (install-common): Install as run-$arch and"
    },
    {
      "sha": "3d7c2821eaa268fdde8e19af9070dfd853c4e62c",
      "filename": "sim/common/cgen-utils.c",
      "status": "modified",
      "additions": 6,
      "deletions": 18,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/common/cgen-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/common/cgen-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-utils.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -319,9 +319,7 @@ CONVDISI (val)\n #endif /* DI_FN_SUPPORT */\n \f\n QI\n-RORQI (val, shift)\n-     QI  val;\n-     int shift;\n+RORQI (QI val, int shift)\n {\n   if (shift != 0)\n     {\n@@ -336,9 +334,7 @@ RORQI (val, shift)\n }\n \n QI\n-ROLQI (val, shift)\n-     QI  val;\n-     int shift;\n+ROLQI (QI val, int shift)\n {\n   if (shift != 0)\n     {\n@@ -353,9 +349,7 @@ ROLQI (val, shift)\n }\n \n HI\n-RORHI (val, shift)\n-     HI  val;\n-     int shift;\n+RORHI (HI val, int shift)\n {\n   if (shift != 0)\n     {\n@@ -370,9 +364,7 @@ RORHI (val, shift)\n }\n \n HI\n-ROLHI (val, shift)\n-     HI  val;\n-     int shift;\n+ROLHI (HI val, int shift)\n {\n   if (shift != 0)\n     {\n@@ -387,9 +379,7 @@ ROLHI (val, shift)\n }\n \n SI\n-RORSI (val, shift)\n-     SI  val;\n-     int shift;\n+RORSI (SI val, int shift)\n {\n   if (shift != 0)\n     {\n@@ -404,9 +394,7 @@ RORSI (val, shift)\n }\n \n SI\n-ROLSI (val, shift)\n-     SI  val;\n-     int shift;\n+ROLSI (SI val, int shift)\n {\n   if (shift != 0)\n     {"
    },
    {
      "sha": "72de217ece94b4ce4b8fab1646ed7d2770152d97",
      "filename": "sim/erc32/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,33 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* sis.c (run_sim, main): Use new-style declaration.\n+\t* interf.c (run_sim, sim_open, sim_close, sim_load)\n+\t(sim_create_inferior, sim_store_register, sim_fetch_register)\n+\t(sim_info, sim_stop_reason, flush_windows, sim_do_command): Use\n+\tnew-style declaration.\n+\t* help.c (usage, gen_help): Use new-style declaration.\n+\t* func.c (batch, set_regi, set_rega, disp_reg, limcalc)\n+\t(reset_stat, show_stat, init_bpt, int_handler, init_signals)\n+\t(disp_fpu, disp_regs, disp_ctrl, disp_mem, dis_mem, event)\n+\t(init_event, set_int, advance_time, now, wait_for_irq, check_bpt)\n+\t(reset_all, sys_reset, sys_halt): Use new-style declaration.\n+\t* float.c (get_accex, clear_accex, set_fsr): Use new-style\n+\tdeclaration.\n+\t* exec.c (sub_cc, add_cc, log_cc, dispatch_instruction, fpexec)\n+\t(chk_asi, execute_trap, check_interrupts, init_regs): Use\n+\tnew-style declaration.\n+\t* erc32.c (init_sim, reset, decode_ersr, mecparerror)\n+\t(error_mode, decode_memcfg, decode_wcr, decode_mcr, sim_halt)\n+\t(close_port, exit_sim, mec_reset, mec_intack, chk_irq, mec_irq)\n+\t(set_sfsr, mec_read, mec_write, init_stdio, restore_stdio)\n+\t(port_init, read_uart, write_uart, flush_uart, uarta_tx)\n+\t(uartb_tx, uart_rx, uart_intr, uart_irq_start, wdog_intr)\n+\t(wdog_start, rtc_intr, rtc_start, rtc_counter_read)\n+\t(rtc_scaler_set, rtc_reload_set, gpt_intr, gpt_start)\n+\t(gpt_counter_read, gpt_scaler_set, gpt_reload_set, timer_ctrl)\n+\t(memory_read, memory_write, get_mem_ptr, sis_memory_write)\n+\t(sis_memory_read): Use new-style declaration.\n+\n 2021-04-05  Tom Tromey  <tromey@adacore.com>\n \n \t* configure: Rebuild."
    },
    {
      "sha": "a93b62b798c4fc3754487cd1d31a2b590f79028a",
      "filename": "sim/erc32/erc32.c",
      "status": "modified",
      "additions": 47,
      "deletions": 90,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/erc32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/erc32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/erc32.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -297,23 +297,23 @@ extern int\text_irl;\n /* One-time init */\n \n void\n-init_sim()\n+init_sim(void)\n {\n     port_init();\n }\n \n /* Power-on reset init */\n \n void\n-reset()\n+reset(void)\n {\n     mec_reset();\n     uart_irq_start();\n     wdog_start();\n }\n \n static void\n-decode_ersr()\n+decode_ersr(void)\n {\n     if (mec_ersr & 0x01) {\n \tif (!(mec_mcr & 0x20)) {\n@@ -375,7 +375,7 @@ iucomperr()\n #endif\n \n static void\n-mecparerror()\n+mecparerror(void)\n {\n     mec_ersr |= 0x20;\n     decode_ersr();\n@@ -385,8 +385,7 @@ mecparerror()\n /* IU error mode manager */\n \n void\n-error_mode(pc)\n-    uint32          pc;\n+error_mode(uint32 pc)\n {\n \n     mec_ersr |= 0x1;\n@@ -397,7 +396,7 @@ error_mode(pc)\n /* Check memory settings */\n \n static void\n-decode_memcfg()\n+decode_memcfg(void)\n {\n     if (rom8) mec_memcfg &= ~0x20000;\n     else mec_memcfg |= 0x20000;\n@@ -421,7 +420,7 @@ decode_memcfg()\n }\n \n static void\n-decode_wcr()\n+decode_wcr(void)\n {\n     mem_ramr_ws = mec_wcr & 3;\n     mem_ramw_ws = (mec_wcr >> 2) & 3;\n@@ -437,7 +436,7 @@ decode_wcr()\n }\n \n static void\n-decode_mcr()\n+decode_mcr(void)\n {\n     mem_accprot = (mec_wpr[0] | mec_wpr[1]);\n     mem_blockprot = (mec_mcr >> 3) & 1;\n@@ -456,7 +455,7 @@ decode_mcr()\n /* Flush ports when simulator stops */\n \n void\n-sim_halt()\n+sim_halt(void)\n {\n #ifdef FAST_UART\n     flush_uart();\n@@ -471,7 +470,7 @@ sim_stop(SIM_DESC sd)\n }\n \n static void\n-close_port()\n+close_port(void)\n {\n     if (f1open && f1in != stdin)\n \tfclose(f1in);\n@@ -480,13 +479,13 @@ close_port()\n }\n \n void\n-exit_sim()\n+exit_sim(void)\n {\n     close_port();\n }\n \n static void\n-mec_reset()\n+mec_reset(void)\n {\n     int             i;\n \n@@ -547,8 +546,7 @@ mec_reset()\n \n \n static void\n-mec_intack(level)\n-    int32           level;\n+mec_intack(int32 level)\n {\n     int             irq_test;\n \n@@ -563,7 +561,7 @@ mec_intack(level)\n }\n \n static void\n-chk_irq()\n+chk_irq(void)\n {\n     int32           i;\n     uint32          itmp;\n@@ -588,19 +586,14 @@ chk_irq()\n }\n \n static void\n-mec_irq(level)\n-    int32           level;\n+mec_irq(int32 level)\n {\n     mec_ipr |= (1 << level);\n     chk_irq();\n }\n \n static void\n-set_sfsr(fault, addr, asi, read)\n-    uint32          fault;\n-    uint32          addr;\n-    uint32          asi;\n-    uint32          read;\n+set_sfsr(uint32 fault, uint32 addr, uint32 asi, uint32 read)\n {\n     if ((asi == 0xa) || (asi == 0xb)) {\n \tmec_ffar = addr;\n@@ -618,10 +611,7 @@ set_sfsr(fault, addr, asi, read)\n }\n \n static int32\n-mec_read(addr, asi, data)\n-    uint32          addr;\n-    uint32          asi;\n-    uint32         *data;\n+mec_read(uint32 addr, uint32 asi, uint32 *data)\n {\n \n     switch (addr & 0x0ff) {\n@@ -748,9 +738,7 @@ mec_read(addr, asi, data)\n }\n \n static int\n-mec_write(addr, data)\n-    uint32          addr;\n-    uint32          data;\n+mec_write(uint32 addr, uint32 data)\n {\n     if (sis_verbose > 1)\n \tprintf(\"MEC write a: %08x, d: %08x\\n\",addr,data);\n@@ -932,7 +920,7 @@ mec_write(addr, data)\n static int      ifd1 = -1, ifd2 = -1, ofd1 = -1, ofd2 = -1;\n \n void\n-init_stdio()\n+init_stdio(void)\n {\n     if (dumbio)\n         return; /* do nothing */\n@@ -943,7 +931,7 @@ init_stdio()\n }\n \n void\n-restore_stdio()\n+restore_stdio(void)\n {\n     if (dumbio)\n         return; /* do nothing */\n@@ -960,7 +948,7 @@ restore_stdio()\n \n \n static void\n-port_init()\n+port_init(void)\n {\n \n     if (uben) {\n@@ -1037,8 +1025,7 @@ port_init()\n }\n \n static uint32\n-read_uart(addr)\n-    uint32          addr;\n+read_uart(uint32 addr)\n {\n \n     unsigned        tmp;\n@@ -1159,9 +1146,7 @@ read_uart(addr)\n }\n \n static void\n-write_uart(addr, data)\n-    uint32          addr;\n-    uint32          data;\n+write_uart(uint32 addr, uint32 data)\n {\n     unsigned char   c;\n \n@@ -1235,7 +1220,7 @@ write_uart(addr, data)\n }\n \n static void\n-flush_uart()\n+flush_uart(void)\n {\n     while (wnuma && f1open)\n \twnuma -= fwrite(wbufa, 1, wnuma, f1out);\n@@ -1246,7 +1231,7 @@ flush_uart()\n \n \n static void\n-uarta_tx()\n+uarta_tx(void)\n {\n \n     while (f1open && fwrite(&uarta_sreg, 1, 1, f1out) != 1);\n@@ -1261,7 +1246,7 @@ uarta_tx()\n }\n \n static void\n-uartb_tx()\n+uartb_tx(void)\n {\n     while (f2open && fwrite(&uartb_sreg, 1, 1, f2out) != 1);\n     if (uart_stat_reg & UARTB_HRE) {\n@@ -1275,8 +1260,7 @@ uartb_tx()\n }\n \n static void\n-uart_rx(arg)\n-    caddr_t         arg;\n+uart_rx(caddr_t arg)\n {\n     int32           rsize;\n     char            rxd;\n@@ -1318,8 +1302,7 @@ uart_rx(arg)\n }\n \n static void\n-uart_intr(arg)\n-    caddr_t         arg;\n+uart_intr(caddr_t arg)\n {\n     read_uart(0xE8);\t\t/* Check for UART interrupts every 1000 clk */\n     flush_uart();\t\t/* Flush UART ports      */\n@@ -1328,7 +1311,7 @@ uart_intr(arg)\n \n \n static void\n-uart_irq_start()\n+uart_irq_start(void)\n {\n #ifdef FAST_UART\n     event(uart_intr, 0, UART_FLUSH_TIME);\n@@ -1342,8 +1325,7 @@ uart_irq_start()\n /* Watch-dog */\n \n static void\n-wdog_intr(arg)\n-    caddr_t         arg;\n+wdog_intr(caddr_t arg)\n {\n     if (wdog_status == disabled) {\n \twdog_status = stopped;\n@@ -1368,7 +1350,7 @@ wdog_intr(arg)\n }\n \n static void\n-wdog_start()\n+wdog_start(void)\n {\n     event(wdog_intr, 0, wdog_scaler + 1);\n     if (sis_verbose)\n@@ -1381,8 +1363,7 @@ wdog_start()\n \n \n static void\n-rtc_intr(arg)\n-    caddr_t         arg;\n+rtc_intr(caddr_t arg)\n {\n     if (rtc_counter == 0) {\n \n@@ -1405,7 +1386,7 @@ rtc_intr(arg)\n }\n \n static void\n-rtc_start()\n+rtc_start(void)\n {\n     if (sis_verbose)\n \tprintf(\"RTC started (period %d)\\n\\r\", rtc_scaler + 1);\n@@ -1415,28 +1396,25 @@ rtc_start()\n }\n \n static uint32\n-rtc_counter_read()\n+rtc_counter_read(void)\n {\n     return rtc_counter;\n }\n \n static void\n-rtc_scaler_set(val)\n-    uint32          val;\n+rtc_scaler_set(uint32 val)\n {\n     rtc_scaler = val & 0x0ff;\t/* eight-bit scaler only */\n }\n \n static void\n-rtc_reload_set(val)\n-    uint32          val;\n+rtc_reload_set(uint32 val)\n {\n     rtc_reload = val;\n }\n \n static void\n-gpt_intr(arg)\n-    caddr_t         arg;\n+gpt_intr(caddr_t arg)\n {\n     if (gpt_counter == 0) {\n \tmec_irq(12);\n@@ -1458,7 +1436,7 @@ gpt_intr(arg)\n }\n \n static void\n-gpt_start()\n+gpt_start(void)\n {\n     if (sis_verbose)\n \tprintf(\"GPT started (period %d)\\n\\r\", gpt_scaler + 1);\n@@ -1468,28 +1446,25 @@ gpt_start()\n }\n \n static uint32\n-gpt_counter_read()\n+gpt_counter_read(void)\n {\n     return gpt_counter;\n }\n \n static void\n-gpt_scaler_set(val)\n-    uint32          val;\n+gpt_scaler_set(uint32 val)\n {\n     gpt_scaler = val & 0x0ffff;\t/* 16-bit scaler */\n }\n \n static void\n-gpt_reload_set(val)\n-    uint32          val;\n+gpt_reload_set(uint32 val)\n {\n     gpt_reload = val;\n }\n \n static void\n-timer_ctrl(val)\n-    uint32          val;\n+timer_ctrl(uint32 val)\n {\n \n     rtc_cr = ((val & TCR_TCRCR) != 0);\n@@ -1577,12 +1552,7 @@ memory_iread (uint32 addr, uint32 *data, int32 *ws)\n }\n \n int\n-memory_read(asi, addr, data, sz, ws)\n-    int32           asi;\n-    uint32          addr;\n-    uint32         *data;\n-    int32           sz;\n-    int32          *ws;\n+memory_read(int32 asi, uint32 addr, uint32 *data, int32 sz, int32 *ws)\n {\n     int32           mexc;\n \n@@ -1648,12 +1618,7 @@ memory_read(asi, addr, data, sz, ws)\n }\n \n int\n-memory_write(asi, addr, data, sz, ws)\n-    int32           asi;\n-    uint32          addr;\n-    uint32         *data;\n-    int32           sz;\n-    int32          *ws;\n+memory_write(int32 asi, uint32 addr, uint32 *data, int32 sz, int32 *ws)\n {\n     uint32          byte_addr;\n     uint32          byte_mask;\n@@ -1761,9 +1726,7 @@ memory_write(asi, addr, data, sz, ws)\n }\n \n static unsigned char  *\n-get_mem_ptr(addr, size)\n-    uint32          addr;\n-    uint32          size;\n+get_mem_ptr(uint32 addr, uint32 size)\n {\n     if ((addr + size) < ROM_SZ) {\n \treturn &romb[addr];\n@@ -1782,10 +1745,7 @@ get_mem_ptr(addr, size)\n }\n \n int\n-sis_memory_write(addr, data, length)\n-    uint32               addr;\n-    const unsigned char *data;\n-    uint32               length;\n+sis_memory_write(uint32 addr, const unsigned char *data, uint32 length)\n {\n     char           *mem;\n \n@@ -1797,10 +1757,7 @@ sis_memory_write(addr, data, length)\n }\n \n int\n-sis_memory_read(addr, data, length)\n-    uint32          addr;\n-    char           *data;\n-    uint32          length;\n+sis_memory_read(uint32 addr, char *data, uint32 length)\n {\n     char           *mem;\n "
    },
    {
      "sha": "8daf759514ecd04b1b58315e24583fe19f6354de",
      "filename": "sim/erc32/exec.c",
      "status": "modified",
      "additions": 9,
      "deletions": 28,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/exec.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -234,11 +234,7 @@ extern uint32 errtt, errftt;\n #endif\n \n static uint32\n-sub_cc(psr, operand1, operand2, result)\n-    uint32          psr;\n-    int32           operand1;\n-    int32           operand2;\n-    int32           result;\n+sub_cc(uint32 psr, int32 operand1, int32 operand2, int32 result)\n {\n     psr = ((psr & ~PSR_N) | ((result >> 8) & PSR_N));\n     if (result)\n@@ -253,11 +249,7 @@ sub_cc(psr, operand1, operand2, result)\n }\n \n uint32\n-add_cc(psr, operand1, operand2, result)\n-    uint32          psr;\n-    int32           operand1;\n-    int32           operand2;\n-    int32           result;\n+add_cc(uint32 psr, int32 operand1, int32 operand2, int32 result)\n {\n     psr = ((psr & ~PSR_N) | ((result >> 8) & PSR_N));\n     if (result)\n@@ -272,9 +264,7 @@ add_cc(psr, operand1, operand2, result)\n }\n \n static void\n-log_cc(result, sregs)\n-    int32           result;\n-    struct pstate  *sregs;\n+log_cc(int32 result, struct pstate *sregs)\n {\n     sregs->psr &= ~(PSR_CC);\t/* Zero CC bits */\n     sregs->psr = (sregs->psr | ((result >> 8) & PSR_N));\n@@ -398,8 +388,7 @@ extract_byte_signed (uint32 data, uint32 address)\n }\n \n int\n-dispatch_instruction(sregs)\n-    struct pstate  *sregs;\n+dispatch_instruction(struct pstate *sregs)\n {\n \n     uint32          cwp, op, op2, op3, asi, rd, cond, rs1,\n@@ -1671,9 +1660,7 @@ dispatch_instruction(sregs)\n \n \n static int\n-fpexec(op3, rd, rs1, rs2, sregs)\n-    uint32          op3, rd, rs1, rs2;\n-    struct pstate  *sregs;\n+fpexec(uint32 op3, uint32 rd, uint32 rs1, uint32 rs2, struct pstate *sregs)\n {\n     uint32          opf, tem, accex;\n     int32           fcc;\n@@ -1952,10 +1939,7 @@ fpexec(op3, rd, rs1, rs2, sregs)\n }\n \n static int\n-chk_asi(sregs, asi, op3)\n-    struct pstate  *sregs;\n-    uint32 *asi, op3;\n-\n+chk_asi(struct pstate *sregs, uint32 *asi, uint32 op3)\n {\n     if (!(sregs->psr & PSR_S)) {\n \tsregs->trap = TRAP_PRIVI;\n@@ -1969,8 +1953,7 @@ chk_asi(sregs, asi, op3)\n }\n \n int\n-execute_trap(sregs)\n-    struct pstate  *sregs;\n+execute_trap(struct pstate *sregs)\n {\n     int32           cwp;\n \n@@ -2017,8 +2000,7 @@ execute_trap(sregs)\n extern struct irqcell irqarr[16];\n \n int\n-check_interrupts(sregs)\n-    struct pstate  *sregs;\n+check_interrupts(struct pstate *sregs)\n {\n #ifdef ERRINJ\n     if (errtt) {\n@@ -2040,8 +2022,7 @@ check_interrupts(sregs)\n }\n \n void\n-init_regs(sregs)\n-    struct pstate  *sregs;\n+init_regs(struct pstate *sregs)\n {\n     sregs->pc = 0;\n     sregs->npc = 4;"
    },
    {
      "sha": "6d3d2bd73d264dace4f7896a10d3ec8901990ceb",
      "filename": "sim/erc32/float.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/float.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/float.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/float.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -32,7 +32,7 @@\n \n /* This routine should return the accrued exceptions */\n int\n-get_accex()\n+get_accex(void)\n {\n     int fexc, accx;\n \n@@ -53,15 +53,14 @@ get_accex()\n \n /* How to clear the accrued exceptions */\n void\n-clear_accex()\n+clear_accex(void)\n {\n     feclearexcept (FE_ALL_EXCEPT);\n }\n \n /* How to map SPARC FSR onto the host */\n void\n-set_fsr(fsr)\n-uint32 fsr;\n+set_fsr(uint32 fsr)\n {\n     int fround;\n "
    },
    {
      "sha": "98217f062aeef5ef1f3f9b486465f2e53872a3a8",
      "filename": "sim/erc32/func.c",
      "status": "modified",
      "additions": 25,
      "deletions": 57,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/func.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/func.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/func.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -70,9 +70,7 @@ static void\tdisp_ctrl (struct pstate *sregs);\n static void\tdisp_mem (uint32 addr, uint32 len);\n \n static int \n-batch(sregs, fname)\n-    struct pstate  *sregs;\n-    char           *fname;\n+batch(struct pstate *sregs, char *fname)\n {\n     FILE           *fp;\n     char           *lbuf = NULL;\n@@ -97,10 +95,7 @@ batch(sregs, fname)\n }\n \n void\n-set_regi(sregs, reg, rval)\n-    struct pstate  *sregs;\n-    int32           reg;\n-    uint32          rval;\n+set_regi(struct pstate *sregs, int32 reg, uint32 rval)\n {\n     uint32          cwp;\n \n@@ -187,10 +182,7 @@ get_regi(struct pstate * sregs, int32 reg, char *buf)\n \n \n static void\n-set_rega(sregs, reg, rval)\n-    struct pstate  *sregs;\n-    char           *reg;\n-    uint32          rval;\n+set_rega(struct pstate *sregs, char *reg, uint32 rval)\n {\n     uint32          cwp;\n     int32           err = 0;\n@@ -294,9 +286,7 @@ set_rega(sregs, reg, rval)\n }\n \n static void\n-disp_reg(sregs, reg)\n-    struct pstate  *sregs;\n-    char           *reg;\n+disp_reg(struct pstate *sregs, char *reg)\n {\n     if (strncmp(reg, \"w\",1) == 0)\n \tdisp_regs(sregs, VAL(&reg[1]));\n@@ -337,8 +327,7 @@ errinjstart()\n #endif\n \n static uint32\n-limcalc (freq)\n-    float32\t\tfreq;\n+limcalc (float32 freq)\n {\n     uint32          unit, lim;\n     double\t    flim;\n@@ -603,8 +592,7 @@ exec_cmd(struct pstate *sregs, const char *cmd)\n \n \n void\n-reset_stat(sregs)\n-    struct pstate  *sregs;\n+reset_stat(struct pstate *sregs)\n {\n     sregs->tottime = 0.0;\n     sregs->pwdtime = 0;\n@@ -621,8 +609,7 @@ reset_stat(sregs)\n }\n \n void\n-show_stat(sregs)\n-    struct pstate  *sregs;\n+show_stat(struct pstate *sregs)\n {\n     uint32          iinst;\n     uint32          stime;\n@@ -677,8 +664,7 @@ show_stat(sregs)\n \n \n void\n-init_bpt(sregs)\n-    struct pstate  *sregs;\n+init_bpt(struct pstate *sregs)\n {\n     sregs->bptnum = 0;\n     sregs->histlen = 0;\n@@ -688,16 +674,15 @@ init_bpt(sregs)\n }\n \n static void\n-int_handler(sig)\n-    int32           sig;\n+int_handler(int32 sig)\n {\n     if (sig != 2)\n \tprintf(\"\\n\\n Signal handler error  (%d)\\n\\n\", sig);\n     ctrl_c = 1;\n }\n \n void\n-init_signals()\n+init_signals(void)\n {\n     typedef void    (*PFI) ();\n     static PFI      int_tab[2];\n@@ -714,8 +699,7 @@ struct evcell   evbuf[EVENT_MAX];\n struct irqcell  irqarr[16];\n \n static int\n-disp_fpu(sregs)\n-    struct pstate  *sregs;\n+disp_fpu(struct pstate *sregs)\n {\n \n     int         i;\n@@ -741,9 +725,7 @@ disp_fpu(sregs)\n }\n \n static void\n-disp_regs(sregs,cwp)\n-    struct pstate  *sregs;\n-    int cwp;\n+disp_regs(struct pstate *sregs, int cwp)\n {\n \n     int           i;\n@@ -770,8 +752,7 @@ static void print_insn_sparc_sis(uint32 addr, struct disassemble_info *info)\n }\n \n static void\n-disp_ctrl(sregs)\n-    struct pstate  *sregs;\n+disp_ctrl(struct pstate *sregs)\n {\n \n     uint32           i;\n@@ -790,9 +771,7 @@ disp_ctrl(sregs)\n }\n \n static void\n-disp_mem(addr, len)\n-    uint32          addr;\n-    uint32          len;\n+disp_mem(uint32 addr, uint32 len)\n {\n \n     uint32          i;\n@@ -823,10 +802,7 @@ disp_mem(addr, len)\n }\n \n void\n-dis_mem(addr, len, info)\n-    uint32          addr;\n-    uint32          len;\n-    struct disassemble_info *info;\n+dis_mem(uint32 addr, uint32 len, struct disassemble_info *info)\n {\n     uint32          i;\n     union {\n@@ -846,10 +822,7 @@ dis_mem(addr, len, info)\n /* Add event to event queue */\n \n void\n-event(cfunc, arg, delta)\n-    void            (*cfunc) ();\n-    int32           arg;\n-    uint64          delta;\n+event(void (*cfunc) (), int32 arg, uint64 delta)\n {\n     struct evcell  *ev1, *evins;\n \n@@ -885,7 +858,7 @@ stop_event()\n #endif\n \n void\n-init_event()\n+init_event(void)\n {\n     int32           i;\n \n@@ -898,10 +871,7 @@ init_event()\n }\n \n void\n-set_int(level, callback, arg)\n-    int32           level;\n-    void            (*callback) ();\n-    int32           arg;\n+set_int(int32 level, void (*callback) (), int32 arg)\n {\n     irqarr[level & 0x0f].callback = callback;\n     irqarr[level & 0x0f].arg = arg;\n@@ -910,8 +880,7 @@ set_int(level, callback, arg)\n /* Advance simulator time */\n \n void\n-advance_time(sregs)\n-    struct pstate  *sregs;\n+advance_time(struct pstate *sregs)\n {\n \n     struct evcell  *evrem;\n@@ -942,7 +911,7 @@ advance_time(sregs)\n }\n \n uint32\n-now()\n+now(void)\n {\n     return ebase.simtime;\n }\n@@ -951,7 +920,7 @@ now()\n /* Advance time until an external interrupt is seen */\n \n int\n-wait_for_irq()\n+wait_for_irq(void)\n {\n     struct evcell  *evrem;\n     void            (*cfunc) ();\n@@ -980,8 +949,7 @@ wait_for_irq()\n }\n \n int\n-check_bpt(sregs)\n-    struct pstate  *sregs;\n+check_bpt(struct pstate *sregs)\n {\n     int32           i;\n \n@@ -995,7 +963,7 @@ check_bpt(sregs)\n }\n \n void\n-reset_all()\n+reset_all(void)\n {\n     init_event();\t\t/* Clear event queue */\n     init_regs(&sregs);\n@@ -1006,14 +974,14 @@ reset_all()\n }\n \n void\n-sys_reset()\n+sys_reset(void)\n {\n     reset_all();\n     sregs.trap = 256;\t\t/* Force fake reset trap */\n }\n \n void\n-sys_halt()\n+sys_halt(void)\n {\n     sregs.trap = 257;           /* Force fake halt trap */\n }"
    },
    {
      "sha": "419ab0d33ef0050b3c6238d67d5a3093255b5ee6",
      "filename": "sim/erc32/help.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/help.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/help.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/help.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -21,7 +21,7 @@\n #include \"sis.h\"\n \n void\n-usage()\n+usage(void)\n {\n \n     printf(\"usage: sis [-uart1 uart_device1] [-uart2 uart_device2]\\n\");\n@@ -30,7 +30,7 @@ usage()\n }\n \n void\n-gen_help()\n+gen_help(void)\n {\n \n   printf(\"\\n batch <file>          execute a batch file of SIS commands\\n\");"
    },
    {
      "sha": "c8e025b23e0803913931f8bc305bf9afd9f01d9f",
      "filename": "sim/erc32/interf.c",
      "status": "modified",
      "additions": 13,
      "deletions": 43,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/interf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/interf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/interf.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -60,10 +60,7 @@ int             sis_gdb_break = 1;\n host_callback *sim_callback;\n \n int\n-run_sim(sregs, icount, dis)\n-    struct pstate  *sregs;\n-    uint64          icount;\n-    int             dis;\n+run_sim(struct pstate *sregs, uint64 icount, int dis)\n {\n     int             mexc, irq;\n \n@@ -158,11 +155,8 @@ run_sim(sregs, icount, dis)\n }\n \n SIM_DESC\n-sim_open (kind, callback, abfd, argv)\n-     SIM_OPEN_KIND kind;\n-     struct host_callback_struct *callback;\n-     struct bfd *abfd;\n-     char * const *argv;\n+sim_open (SIM_OPEN_KIND kind, struct host_callback_struct *callback,\n+\t  struct bfd *abfd, char * const *argv)\n {\n \n     int             argc = 0;\n@@ -263,9 +257,7 @@ sim_open (kind, callback, abfd, argv)\n }\n \n void\n-sim_close(sd, quitting)\n-     SIM_DESC sd;\n-     int quitting;\n+sim_close(SIM_DESC sd, int quitting)\n {\n \n     exit_sim();\n@@ -274,22 +266,15 @@ sim_close(sd, quitting)\n };\n \n SIM_RC\n-sim_load(sd, prog, abfd, from_tty)\n-     SIM_DESC sd;\n-     const char *prog;\n-     bfd *abfd;\n-     int from_tty;\n+sim_load(SIM_DESC sd, const char *prog, bfd *abfd, int from_tty)\n {\n     bfd_load (prog);\n     return SIM_RC_OK;\n }\n \n SIM_RC\n-sim_create_inferior(sd, abfd, argv, env)\n-     SIM_DESC sd;\n-     struct bfd *abfd;\n-     char * const *argv;\n-     char * const *env;\n+sim_create_inferior(SIM_DESC sd, bfd *abfd, char * const *argv,\n+\t\t    char * const *env)\n {\n     bfd_vma start_address = 0;\n     if (abfd != NULL)\n@@ -304,11 +289,7 @@ sim_create_inferior(sd, abfd, argv, env)\n }\n \n int\n-sim_store_register(sd, regno, value, length)\n-    SIM_DESC sd;\n-    int             regno;\n-    unsigned char  *value;\n-    int length;\n+sim_store_register(SIM_DESC sd, int regno, unsigned char *value, int length)\n {\n     int regval;\n \n@@ -320,11 +301,7 @@ sim_store_register(sd, regno, value, length)\n \n \n int\n-sim_fetch_register(sd, regno, buf, length)\n-     SIM_DESC sd;\n-    int             regno;\n-    unsigned char  *buf;\n-     int length;\n+sim_fetch_register(SIM_DESC sd, int regno, unsigned char *buf, int length)\n {\n     get_regi(&sregs, regno, buf);\n     return -1;\n@@ -353,20 +330,15 @@ sim_read (SIM_DESC sd, SIM_ADDR mem, unsigned char *buf, int length)\n }\n \n void\n-sim_info(sd, verbose)\n-     SIM_DESC sd;\n-     int verbose;\n+sim_info(SIM_DESC sd, int verbose)\n {\n     show_stat(&sregs);\n }\n \n int             simstat = OK;\n \n void\n-sim_stop_reason(sd, reason, sigrc)\n-     SIM_DESC sd;\n-     enum sim_stop * reason;\n-     int *sigrc;\n+sim_stop_reason(SIM_DESC sd, enum sim_stop *reason, int *sigrc)\n {\n \n     switch (simstat) {\n@@ -400,7 +372,7 @@ sim_stop_reason(sd, reason, sigrc)\n */\n \n static void\n-flush_windows ()\n+flush_windows (void)\n {\n   int invwin;\n   int cwp;\n@@ -452,9 +424,7 @@ sim_resume(SIM_DESC sd, int step, int siggnal)\n }\n \n void\n-sim_do_command(sd, cmd)\n-     SIM_DESC sd;\n-     const char *cmd;\n+sim_do_command(SIM_DESC sd, const char *cmd)\n {\n     exec_cmd(&sregs, cmd);\n }"
    },
    {
      "sha": "05044c3ad8fff3ecedba9c4573ffe01285a77cc1",
      "filename": "sim/erc32/sis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/sis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/erc32/sis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/sis.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -65,10 +65,7 @@ extern int era;\n #endif\n \n int\n-run_sim(sregs, icount, dis)\n-    struct pstate  *sregs;\n-    uint64          icount;\n-    int             dis;\n+run_sim(struct pstate *sregs, uint64 icount, int dis)\n {\n     int             irq, mexc, deb;\n \n@@ -140,9 +137,7 @@ run_sim(sregs, icount, dis)\n }\n \n int\n-main(argc, argv)\n-    int             argc;\n-    char          **argv;\n+main(int argc, char **argv)\n {\n \n     int             cont = 1;"
    },
    {
      "sha": "c32d2c5131c6809223bb15141487ba292584b335",
      "filename": "sim/frv/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/frv/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/frv/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/frv/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* sim-if.c (sim_open, frv_sim_close, sim_create_inferior): Use\n+\tnew-style declaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "9351f79e053f46e497c716054514379a1c8ad3bf",
      "filename": "sim/frv/sim-if.c",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/frv/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/frv/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/frv/sim-if.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -43,11 +43,8 @@ free_state (SIM_DESC sd)\n /* Create an instance of the simulator.  */\n \n SIM_DESC\n-sim_open (kind, callback, abfd, argv)\n-     SIM_OPEN_KIND kind;\n-     host_callback *callback;\n-     bfd *abfd;\n-     char * const *argv;\n+sim_open (SIM_OPEN_KIND kind, host_callback *callback, bfd *abfd,\n+\t  char * const *argv)\n {\n   char c;\n   int i;\n@@ -162,9 +159,7 @@ sim_open (kind, callback, abfd, argv)\n }\n \n void\n-frv_sim_close (sd, quitting)\n-     SIM_DESC sd;\n-     int quitting;\n+frv_sim_close (SIM_DESC sd, int quitting)\n {\n   int i;\n   /* Terminate cache support.  */\n@@ -177,11 +172,8 @@ frv_sim_close (sd, quitting)\n }\n \f\n SIM_RC\n-sim_create_inferior (sd, abfd, argv, envp)\n-     SIM_DESC sd;\n-     bfd *abfd;\n-     char * const *argv;\n-     char * const *envp;\n+sim_create_inferior (SIM_DESC sd, bfd *abfd, char * const *argv,\n+\t\t     char * const *envp)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n   SIM_ADDR addr;"
    },
    {
      "sha": "cd47d25f02d4781fcf95c2be10527fc5c8c5e510",
      "filename": "sim/h8300/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/h8300/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/h8300/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* compile.c (cmdline_location): Use new-style declaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "c30a738c6d107aea1c3336ada1d92ed4d893b258",
      "filename": "sim/h8300/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/h8300/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/h8300/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/compile.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -465,7 +465,7 @@ lvalue (SIM_DESC sd, int x, int rn, unsigned int *val)\n }\n \n static int\n-cmdline_location()\n+cmdline_location(void)\n {\n   if (h8300smode && !h8300_normal_mode)\n     return 0xffff00L;"
    },
    {
      "sha": "970df7988a026612c1164314f39e307a119db397",
      "filename": "sim/iq2000/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n+\tdeclaration.\n+\t* iq2000.c (fetch_str): Use new-style declaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "23a342983ce41ae8d994895f6144a7ee0f688c8b",
      "filename": "sim/iq2000/iq2000.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/iq2000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/iq2000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/iq2000.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -56,10 +56,7 @@ enum libgloss_syscall\n \n /* Read a null terminated string from memory, return in a buffer */\n static char *\n-fetch_str (current_cpu, pc, addr)\n-     SIM_CPU *current_cpu;\n-     PCADDR pc;\n-     DI addr;\n+fetch_str (SIM_CPU *current_cpu, PCADDR pc, DI addr)\n {\n   char *buf;\n   int nr = 0;"
    },
    {
      "sha": "158c6e7574a81005cd69916455c454c95e976d63",
      "filename": "sim/iq2000/sim-if.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/iq2000/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/sim-if.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -50,11 +50,8 @@ free_state (SIM_DESC sd)\n /* Create an instance of the simulator.  */\n \n SIM_DESC\n-sim_open (kind, callback, abfd, argv)\n-     SIM_OPEN_KIND kind;\n-     host_callback *callback;\n-     struct bfd *abfd;\n-     char * const *argv;\n+sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n+\t  char * const *argv)\n {\n   char c;\n   int i;\n@@ -130,11 +127,8 @@ sim_open (kind, callback, abfd, argv)\n }\n \f\n SIM_RC\n-sim_create_inferior (sd, abfd, argv, envp)\n-     SIM_DESC sd;\n-     struct bfd *abfd;\n-     char * const *argv;\n-     char * const *envp;\n+sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n+\t\t     char * const *envp)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n   SIM_ADDR addr;"
    },
    {
      "sha": "92e86af34a69aeb39b04aa453057e3656cfd08b8",
      "filename": "sim/lm32/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/lm32/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/lm32/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n+\tdeclaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "398eb60c67ad417ade313b262b2b22ad636b1609",
      "filename": "sim/lm32/sim-if.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/lm32/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/lm32/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/sim-if.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -80,11 +80,8 @@ find_limit (SIM_DESC sd)\n /* Create an instance of the simulator.  */\n \n SIM_DESC\n-sim_open (kind, callback, abfd, argv)\n-     SIM_OPEN_KIND kind;\n-     host_callback *callback;\n-     struct bfd *abfd;\n-     char * const *argv;\n+sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n+\t  char * const *argv)\n {\n   SIM_DESC sd = sim_state_alloc (kind, callback);\n   char c;\n@@ -190,11 +187,8 @@ sim_open (kind, callback, abfd, argv)\n }\n \f\n SIM_RC\n-sim_create_inferior (sd, abfd, argv, envp)\n-     SIM_DESC sd;\n-     struct bfd *abfd;\n-     char * const *argv;\n-     char * const *envp;\n+sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n+\t\t     char * const *envp)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n   SIM_ADDR addr;"
    },
    {
      "sha": "f964397d5a399259edb55851568bcf4988625e60",
      "filename": "sim/m32r/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/m32r/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/m32r/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/ChangeLog?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* sim-if.c (sim_open, sim_create_inferior): Use new-style\n+\tdeclaration.\n+\n 2021-04-02  Mike Frysinger  <vapier@gentoo.org>\n \n \t* aclocal.m4, configure: Regenerate."
    },
    {
      "sha": "42cf728e79e53c86fc6c1aaac0d88658151dbe57",
      "filename": "sim/m32r/sim-if.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/m32r/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e6e8ae407b206def2c6840736dad0dcf75eb0b/sim/m32r/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/sim-if.c?ref=81e6e8ae407b206def2c6840736dad0dcf75eb0b",
      "patch": "@@ -44,11 +44,8 @@ free_state (SIM_DESC sd)\n /* Create an instance of the simulator.  */\n \n SIM_DESC\n-sim_open (kind, callback, abfd, argv)\n-     SIM_OPEN_KIND kind;\n-     host_callback *callback;\n-     struct bfd *abfd;\n-     char * const *argv;\n+sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n+\t  char * const *argv)\n {\n   SIM_DESC sd = sim_state_alloc (kind, callback);\n   char c;\n@@ -142,11 +139,8 @@ sim_open (kind, callback, abfd, argv)\n }\n \f\n SIM_RC\n-sim_create_inferior (sd, abfd, argv, envp)\n-     SIM_DESC sd;\n-     struct bfd *abfd;\n-     char * const *argv;\n-     char * const *envp;\n+sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n+\t\t     char * const *envp)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n   SIM_ADDR addr;"
    }
  ]
}