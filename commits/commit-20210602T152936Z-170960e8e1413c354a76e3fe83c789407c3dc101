{
  "sha": "170960e8e1413c354a76e3fe83c789407c3dc101",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTcwOTYwZThlMTQxM2MzNTRhNzZlM2ZlODNjNzg5NDA3YzNkYzEwMQ==",
  "commit": {
    "author": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-05-21T16:29:26Z"
    },
    "committer": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-06-02T15:29:36Z"
    },
    "message": "Fix threadapply test\n\nThe current test case leaves detached processes running at the end of\nthe test.  This patch changes the test to use a barrier wait to ensure all\nprocesses exit cleanly at the end of the tests.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-02  Carl Love  <cel@us.ibm.com>\n\n\t* gdb.threads/threadapply.c: Add global mybarrier.\n\t(main): Add pthread_barrier_init.\n\t(thread_function): Replace while loop with myp increment and\n\tpthread_barrier_wait.",
    "tree": {
      "sha": "4b7d288dd4454dc44a1e783f2a7f26f906d4c88e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4b7d288dd4454dc44a1e783f2a7f26f906d4c88e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/170960e8e1413c354a76e3fe83c789407c3dc101",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/170960e8e1413c354a76e3fe83c789407c3dc101",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/170960e8e1413c354a76e3fe83c789407c3dc101",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/170960e8e1413c354a76e3fe83c789407c3dc101/comments",
  "author": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8f467114435286e4f78b16fc1f5864acf6488fc0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f467114435286e4f78b16fc1f5864acf6488fc0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8f467114435286e4f78b16fc1f5864acf6488fc0"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 12,
    "deletions": 7
  },
  "files": [
    {
      "sha": "a0469c8623b8678c85bc81181db6eb8b29c7e827",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/170960e8e1413c354a76e3fe83c789407c3dc101/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/170960e8e1413c354a76e3fe83c789407c3dc101/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=170960e8e1413c354a76e3fe83c789407c3dc101",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-02  Carl Love  <cel@us.ibm.com>\n+\n+\t* gdb.threads/threadapply.c: Add global mybarrier.\n+\t(main): Add pthread_barrier_init.\n+\t(thread_function): Replace while loop with myp increment and\n+\tpthread_barrier_wait.\n+\n 2021-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* lib/gdb.exp (gdb_compile): Only add the -J option when using a"
    },
    {
      "sha": "1ac99b07fc11214db4a4a77b76ad4f8c8e6b5d1d",
      "filename": "gdb/testsuite/gdb.threads/threadapply.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/170960e8e1413c354a76e3fe83c789407c3dc101/gdb/testsuite/gdb.threads/threadapply.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/170960e8e1413c354a76e3fe83c789407c3dc101/gdb/testsuite/gdb.threads/threadapply.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/threadapply.c?ref=170960e8e1413c354a76e3fe83c789407c3dc101",
      "patch": "@@ -27,6 +27,7 @@ void *thread_function(void *arg); /* Pointer to function executed by each thread\n #define NUM 5\n \n unsigned int args[NUM+1];\n+pthread_barrier_t mybarrier;\n \n int main() {\n     int res;\n@@ -35,6 +36,8 @@ int main() {\n     void *thread_result;\n     long i;\n \n+    pthread_barrier_init(&mybarrier, NULL, NUM + 1);\n+\n     for (i = 0; i < NUM; i++)\n       {\n \targs[i] = 1; /* Init value.  */\n@@ -69,12 +72,7 @@ void *thread_function(void *arg) {\n     int my_number =  (long) arg;\n     int *myp = (int *) &args[my_number];\n \n-    /* Don't run forever.  Run just short of it :)  */\n-    while (*myp > 0)\n-      {\n-\t(*myp) ++;  /* Loop increment.  */\n-      }\n-\n-    pthread_exit(NULL);\n+    (*myp) ++;  /* Increment so parent knows child started.  */\n+    pthread_barrier_wait(&mybarrier);\n }\n "
    }
  ]
}