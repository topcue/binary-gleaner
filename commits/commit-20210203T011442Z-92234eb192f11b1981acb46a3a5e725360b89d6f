{
  "sha": "92234eb192f11b1981acb46a3a5e725360b89d6f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTIyMzRlYjE5MmYxMWIxOTgxYWNiNDZhM2E1ZTcyNTM2MGI4OWQ2Zg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-12-23T13:39:18Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-02-03T01:14:42Z"
    },
    "message": "Testcase for attaching in non-stop mode\n\nThis adds a testcase exercising attaching to a multi-threaded process,\nin all combinations of:\n\n  - set non-stop on/off\n  - maint target non-stop off/on\n  - \"attach\" vs \"attach &\"\n\nThis exercises the bugs fixed in the two previous patches.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.threads/attach-non-stop.c: New file.\n\t* gdb.threads/attach-non-stop.exp: New file.",
    "tree": {
      "sha": "b3d33211e8b2f53d97ca6def0f65ea84d6b32c54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b3d33211e8b2f53d97ca6def0f65ea84d6b32c54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/92234eb192f11b1981acb46a3a5e725360b89d6f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92234eb192f11b1981acb46a3a5e725360b89d6f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/92234eb192f11b1981acb46a3a5e725360b89d6f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92234eb192f11b1981acb46a3a5e725360b89d6f/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "621cc310717334b330e6301759dad62e641486f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/621cc310717334b330e6301759dad62e641486f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/621cc310717334b330e6301759dad62e641486f6"
    }
  ],
  "stats": {
    "total": 211,
    "additions": 211,
    "deletions": 0
  },
  "files": [
    {
      "sha": "75fcf3e77e47a82e592453aab786b94a62060f8d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=92234eb192f11b1981acb46a3a5e725360b89d6f",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-03  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.threads/attach-non-stop.c: New file.\n+\t* gdb.threads/attach-non-stop.exp: New file.\n+\n 2021-02-02  Lancelot SIX  <lsix@lancelotsix.com>\n \n \t* gdb.base/inferior-noarg.c: New test."
    },
    {
      "sha": "23a8b258c18b1bcea14860939dffef54092262ff",
      "filename": "gdb/testsuite/gdb.threads/attach-non-stop.c",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/gdb.threads/attach-non-stop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/gdb.threads/attach-non-stop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/attach-non-stop.c?ref=92234eb192f11b1981acb46a3a5e725360b89d6f",
      "patch": "@@ -0,0 +1,58 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#define _GNU_SOURCE\n+#include <assert.h>\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+/* Number of threads we'll create.  */\n+static const int n_threads = 10;\n+\n+/* Entry point for threads.  Loops forever.  */\n+\n+void *\n+thread_func (void *arg)\n+{\n+  while (1)\n+    sleep (1);\n+\n+  return NULL;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int i;\n+\n+  alarm (30);\n+\n+  /* Spawn the test threads.  */\n+  for (i = 0; i < n_threads; ++i)\n+    {\n+      pthread_t child;\n+      int rc;\n+\n+      rc = pthread_create (&child, NULL, thread_func, NULL);\n+      assert (rc == 0);\n+    }\n+\n+  while (1)\n+    sleep (1);\n+\n+  return 0;\n+}"
    },
    {
      "sha": "99b5bff94c8ea98875ee67d02ef9ef78133602ff",
      "filename": "gdb/testsuite/gdb.threads/attach-non-stop.exp",
      "status": "added",
      "additions": 148,
      "deletions": 0,
      "changes": 148,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/gdb.threads/attach-non-stop.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92234eb192f11b1981acb46a3a5e725360b89d6f/gdb/testsuite/gdb.threads/attach-non-stop.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/attach-non-stop.exp?ref=92234eb192f11b1981acb46a3a5e725360b89d6f",
      "patch": "@@ -0,0 +1,148 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test attaching to a multi-threaded process, in all combinations of:\n+#\n+#  - set non-stop on/off\n+#  - maint target non-stop off/on\n+#  - \"attach\" vs \"attach &\"\n+\n+if {![can_spawn_for_attach]} {\n+    return 0\n+}\n+\n+standard_testfile\n+\n+# The test proper.  See description above.\n+\n+proc test {target_non_stop non_stop cmd} {\n+    global binfile srcfile\n+    global gdb_prompt\n+    global decimal\n+    global GDBFLAGS\n+\n+    # Number of threads started by the program.\n+    set n_threads 10\n+\n+    save_vars { GDBFLAGS } {\n+\tappend GDBFLAGS \" -ex \\\"maint set target-non-stop $target_non_stop\\\"\"\n+\tappend GDBFLAGS \" -ex \\\"set non-stop $non_stop\\\"\"\n+\tclean_restart $binfile\n+    }\n+\n+    set test_spawn_id [spawn_wait_for_attach $binfile]\n+    set testpid [spawn_id_get_pid $test_spawn_id]\n+\n+    set attached 0\n+    set test \"attach\"\n+    set any \"\\[^\\r\\n\\]*\"\n+\n+    if {$cmd == \"attach\"} {\n+\tgdb_test_multiple \"attach $testpid\" $test {\n+\t    -re \"Attaching to program:${any}process $testpid\\r\\n.*$gdb_prompt \" {\n+\t\tpass $test\n+\t\tset attached 1\n+\t    }\n+\t}\n+\n+\tif {!$attached} {\n+\t    kill_wait_spawned_process $test_spawn_id\n+\t    return\n+\t}\n+\n+\tif {$non_stop} {\n+\t    # In non-stop, we will see one stop per thread after\n+\t    # the prompt.\n+\t    set stops 0\n+\t    set test \"seen all stops\"\n+\t    for {set thread 1} { $thread <= $n_threads } { incr thread } {\n+\t\tgdb_test_multiple \"\" $test {\n+\t\t    -re \"Thread $::decimal ${any} stopped\" {\n+\t\t\tincr stops\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t    # If we haven't seen all stops, then the gdb_test_multiple\n+\t    # in the loop above will have already issued a FAIL.\n+\t    if {$stops == $n_threads} {\n+\t\tpass $test\n+\t    }\n+\t}\n+\n+\tgdb_test_multiple \"info threads\" \"\" {\n+\t    -re \"\\\\(running\\\\).*$gdb_prompt $\" {\n+\t\tfail $gdb_test_name\n+\t    }\n+\t    -re \"$gdb_prompt $\" {\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}\n+    } else {\n+\tgdb_test_multiple \"attach $testpid &\" $test {\n+\t    -re \"Attaching to program:${any}process $testpid\\r\\n.*$gdb_prompt \" {\n+\t\tpass $test\n+\t\tset attached 1\n+\t    }\n+\t}\n+\n+\tif {!$attached} {\n+\t    kill_wait_spawned_process $test_spawn_id\n+\t    return\n+\t}\n+\n+\tset running_count 0\n+\tgdb_test_multiple \"info threads\" \"all threads running\" {\n+\t    -re \"\\\\(running\\\\)\" {\n+\t\tincr running_count\n+\t\texp_continue\n+\t    }\n+\t    -re \"Cannot execute this command while the target is running.*$gdb_prompt $\" {\n+\t\t# Testing against a remote server that doesn't do\n+\t\t# non-stop mode.  Explicitly interrupt.  This doesn't\n+\t\t# test the same code paths in GDB, but it's still\n+\t\t# something.\n+\t\tgdb_test_multiple \"interrupt\" \"\" {\n+\t\t    -re \"$gdb_prompt \" {\n+\t\t\tgdb_test_multiple \"\" $gdb_test_name {\n+\t\t\t    -re \"received signal SIGINT, Interrupt\" {\n+\t\t\t\tpass $gdb_test_name\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t    -re \"$gdb_prompt $\" {\n+\t\tgdb_assert {$running_count == ($n_threads + 1)} $gdb_test_name\n+\t    }\n+\t}\n+    }\n+\n+    gdb_test \"detach\" \"Detaching from.*\"\n+\n+    kill_wait_spawned_process $test_spawn_id\n+}\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile {debug pthreads}] == -1} {\n+    return -1\n+}\n+\n+foreach_with_prefix target-non-stop {\"off\" \"on\"} {\n+    foreach_with_prefix non-stop {\"off\" \"on\"} {\n+\tforeach_with_prefix cmd {\"attach\" \"attach&\"} {\n+\t    test ${target-non-stop} ${non-stop} ${cmd}\n+\t}\n+    }\n+}"
    }
  ]
}