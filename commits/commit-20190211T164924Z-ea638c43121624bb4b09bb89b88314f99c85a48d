{
  "sha": "ea638c43121624bb4b09bb89b88314f99c85a48d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWE2MzhjNDMxMjE2MjRiYjRiMDliYjg5Yjg4MzE0Zjk5Yzg1YTQ4ZA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-02-11T16:38:29Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-02-11T16:49:24Z"
    },
    "message": "AArch64: Detect exit from execve syscall\n\nChecking the syscall number when stopped on entry/exit relies on checking\nthe value in register X8.\n\nHowever, on exit from an execve syscall, the registers will all be cleared.\nGiven this is only checked on syscall entry/exit, then a cleared register\nstate either means execve exit or syscall 0 (io_setup) entry with invalid\nparameters and an invalid FR and LR, which in reality should never happen.\nUse this to detect execve exit.\n\nMove function to allow use of aarch64_sys_execve enum, and use newer\nregcache functions.\n\nFixes gdb.base/catch-syscall.exp on Aarch64.\n\ngdb/ChangeLog:\n\n\t* aarch64-linux-tdep.c (aarch64_linux_get_syscall_number): Check\n\tfor execve.",
    "tree": {
      "sha": "99b1fc939467411d9e1824c354d21b9d0c64c0cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/99b1fc939467411d9e1824c354d21b9d0c64c0cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ea638c43121624bb4b09bb89b88314f99c85a48d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea638c43121624bb4b09bb89b88314f99c85a48d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ea638c43121624bb4b09bb89b88314f99c85a48d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea638c43121624bb4b09bb89b88314f99c85a48d/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7115ab9c4b727a0c8fc1cdfe814b6e6032bb391d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7115ab9c4b727a0c8fc1cdfe814b6e6032bb391d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7115ab9c4b727a0c8fc1cdfe814b6e6032bb391d"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 39,
    "deletions": 22
  },
  "files": [
    {
      "sha": "4ab3af0198226000cfdd932e1639180ef52026b3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea638c43121624bb4b09bb89b88314f99c85a48d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea638c43121624bb4b09bb89b88314f99c85a48d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ea638c43121624bb4b09bb89b88314f99c85a48d",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-11  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-linux-tdep.c (aarch64_linux_get_syscall_number): Check\n+\tfor execve.\n+\n 2019-02-10  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* c-exp.y (direct_abs_decl): Use emplace_back to record the"
    },
    {
      "sha": "39e607658f45494382598d220ab315b8b74c191e",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 34,
      "deletions": 22,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea638c43121624bb4b09bb89b88314f99c85a48d/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea638c43121624bb4b09bb89b88314f99c85a48d/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=ea638c43121624bb4b09bb89b88314f99c85a48d",
      "patch": "@@ -757,28 +757,6 @@ aarch64_stap_parse_special_token (struct gdbarch *gdbarch,\n   return 1;\n }\n \n-/* Implement the \"get_syscall_number\" gdbarch method.  */\n-\n-static LONGEST\n-aarch64_linux_get_syscall_number (struct gdbarch *gdbarch,\n-\t\t\t\t  thread_info *thread)\n-{\n-  struct regcache *regs = get_thread_regcache (thread);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n-\n-  /* The content of register x8.  */\n-  gdb_byte buf[X_REGISTER_SIZE];\n-  /* The result.  */\n-  LONGEST ret;\n-\n-  /* Getting the system call number from the register x8.  */\n-  regs->cooked_read (AARCH64_DWARF_X0 + 8, buf);\n-\n-  ret = extract_signed_integer (buf, X_REGISTER_SIZE, byte_order);\n-\n-  return ret;\n-}\n-\n /* AArch64 process record-replay constructs: syscall, signal etc.  */\n \n struct linux_record_tdep aarch64_linux_record_tdep;\n@@ -1334,6 +1312,40 @@ aarch64_canonicalize_syscall (enum aarch64_syscall syscall_number)\n   }\n }\n \n+/* Retrieve the syscall number at a ptrace syscall-stop, either on syscall entry\n+   or exit.  Return -1 upon error.  */\n+\n+static LONGEST\n+aarch64_linux_get_syscall_number (struct gdbarch *gdbarch, thread_info *thread)\n+{\n+  struct regcache *regs = get_thread_regcache (thread);\n+  LONGEST ret;\n+\n+  /* Get the system call number from register x8.  */\n+  regs->cooked_read (AARCH64_X0_REGNUM + 8, &ret);\n+\n+  /* On exit from a successful execve, we will be in a new process and all the\n+     registers will be cleared - x0 to x30 will be 0, except for a 1 in x7.\n+     This function will only ever get called when stopped at the entry or exit\n+     of a syscall, so by checking for 0 in x0 (arg0/retval), x1 (arg1), x8\n+     (syscall), x29 (FP) and x30 (LR) we can infer:\n+     1) Either inferior is at exit from sucessful execve.\n+     2) Or inferior is at entry to a call to io_setup with invalid arguments and\n+\ta corrupted FP and LR.\n+     It should be safe enough to assume case 1.  */\n+  if (ret == 0)\n+    {\n+      LONGEST x1 = -1, fp = -1, lr = -1;\n+      regs->cooked_read (AARCH64_X0_REGNUM + 1, &x1);\n+      regs->cooked_read (AARCH64_FP_REGNUM, &fp);\n+      regs->cooked_read (AARCH64_LR_REGNUM, &lr);\n+      if (x1 == 0 && fp ==0 && lr == 0)\n+\treturn aarch64_sys_execve;\n+    }\n+\n+  return ret;\n+}\n+\n /* Record all registers but PC register for process-record.  */\n \n static int"
    }
  ]
}