{
  "sha": "30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzBhNjk2YzU0MzQxOWJiOWNhZGI4NDRmOWQyZTJkNmVjYzY2ZDNiNQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "message": "Add regcache_map_supplies helper routine.\n\nThis helper can be used in the fetch_registers and store_registers\ntarget methods to determine if a register set includes a specific\nregister.",
    "tree": {
      "sha": "b5cf1f5c88247850a01aca413ccefc7bb03fcbc0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b5cf1f5c88247850a01aca413ccefc7bb03fcbc0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3a76f8f489428bada97c9dea2145448a3e0f7135",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a76f8f489428bada97c9dea2145448a3e0f7135",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3a76f8f489428bada97c9dea2145448a3e0f7135"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 36,
    "deletions": 0
  },
  "files": [
    {
      "sha": "672da0556fcc2196f0632ddddcf345df076f35e8",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
      "patch": "@@ -1264,6 +1264,33 @@ regcache::collect_regset (const struct regset *regset,\n   transfer_regset (regset, nullptr, regnum, nullptr, (gdb_byte *) buf, size);\n }\n \n+/* See regcache.h  */\n+\n+bool\n+regcache_map_supplies (const struct regcache_map_entry *map, int regnum,\n+\t\t       struct gdbarch *gdbarch, size_t size)\n+{\n+  int offs = 0, count;\n+\n+  for (; (count = map->count) != 0; map++)\n+    {\n+      int regno = map->regno;\n+      int slot_size = map->size;\n+\n+      if (slot_size == 0 && regno != REGCACHE_MAP_SKIP)\n+\tslot_size = register_size (gdbarch, regno);\n+\n+      if (regno != REGCACHE_MAP_SKIP && regnum >= regno\n+\t  && regnum < regno + count)\n+\treturn offs + (regnum - regno + 1) * slot_size <= size;\n+\n+      offs += count * slot_size;\n+      if (offs >= size)\n+\treturn false;\n+    }\n+  return false;\n+}\n+\n /* See gdbsupport/common-regcache.h.  */\n \n bool"
    },
    {
      "sha": "cd2e441fed42eb463db4e3842604af629386e66a",
      "filename": "gdb/regcache.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5/gdb/regcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5/gdb/regcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.h?ref=30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
      "patch": "@@ -150,6 +150,15 @@ extern void regcache_collect_regset (const struct regset *regset,\n \t\t\t\t     int regnum, void *buf, size_t size);\n \n \n+/* Return true if a set of registers contains the value of the\n+   register numbered REGNUM.  The size of the set of registers is\n+   given in SIZE, and the layout of the set of registers is described\n+   by MAP.  */\n+\n+extern bool regcache_map_supplies (const struct regcache_map_entry *map,\n+\t\t\t\t   int regnum, struct gdbarch *gdbarch,\n+\t\t\t\t   size_t size);\n+\n /* The type of a register.  This function is slightly more efficient\n    then its gdbarch vector counterpart since it returns a precomputed\n    value stored in a table.  */"
    }
  ]
}