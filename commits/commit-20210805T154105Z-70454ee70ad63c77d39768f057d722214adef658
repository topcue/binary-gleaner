{
  "sha": "70454ee70ad63c77d39768f057d722214adef658",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzA0NTRlZTcwYWQ2M2M3N2QzOTc2OGYwNTdkNzIyMjE0YWRlZjY1OA==",
  "commit": {
    "author": {
      "name": "Zoran Zaric",
      "email": "Zoran.Zaric@amd.com",
      "date": "2020-09-22T09:44:45Z"
    },
    "committer": {
      "name": "Zoran Zaric",
      "email": "zoran.zaric@amd.com",
      "date": "2021-08-05T15:41:05Z"
    },
    "message": "Add as_lval argument to expression evaluator\n\nThere are cases where the result of the expression evaluation is\nexpected to be in a form of a value and not location description.\n\nOne place that has this requirement is dwarf_entry_parameter_to_value\nfunction, but more are expected in the future. Until now, this\nrequirement was fulfilled by extending the evaluated expression with\na DW_OP_stack_value operation at the end.\n\nNew implementation, introduces a new evaluation argument instead.\n\n\t* dwarf2/expr.c (dwarf_expr_context::fetch_result): Add as_lval\n\targument.\n\t(dwarf_expr_context::eval_exp): Add as_lval argument.\n\t* dwarf2/expr.h (struct dwarf_expr_context): Add as_lval\n\targument to fetch_result and eval_exp methods.\n\t* dwarf2/frame.c (execute_stack_op): Add as_lval argument.\n\t* dwarf2/loc.c (dwarf_entry_parameter_to_value): Remove\n\tDWARF expression extension.\n\t(dwarf2_evaluate_loc_desc_full): Add as_lval argument support.\n\t(dwarf2_evaluate_loc_desc): Add as_lval argument support.\n\t(dwarf2_locexpr_baton_eval): Add as_lval argument support.",
    "tree": {
      "sha": "a299c5b3c18f61a9ec4a98b52e314ad006bb10eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a299c5b3c18f61a9ec4a98b52e314ad006bb10eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/70454ee70ad63c77d39768f057d722214adef658",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70454ee70ad63c77d39768f057d722214adef658",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/70454ee70ad63c77d39768f057d722214adef658",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70454ee70ad63c77d39768f057d722214adef658/comments",
  "author": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0579205aec4369375dccb8566ba37eefee2be912",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0579205aec4369375dccb8566ba37eefee2be912",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0579205aec4369375dccb8566ba37eefee2be912"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 38,
    "deletions": 30
  },
  "files": [
    {
      "sha": "9e5a3566d61cb057fe441f3ac9dace47559d078c",
      "filename": "gdb/dwarf2/expr.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.c?ref=70454ee70ad63c77d39768f057d722214adef658",
      "patch": "@@ -886,7 +886,7 @@ dwarf_expr_context::push_dwarf_reg_entry_value (call_site_parameter_kind kind,\n \n value *\n dwarf_expr_context::fetch_result (struct type *type, struct type *subobj_type,\n-\t\t\t\t  LONGEST subobj_offset)\n+\t\t\t\t  LONGEST subobj_offset, bool as_lval)\n {\n   value *retval = nullptr;\n   gdbarch *arch = this->m_per_objfile->objfile->arch ();\n@@ -917,6 +917,11 @@ dwarf_expr_context::fetch_result (struct type *type, struct type *subobj_type,\n     }\n   else\n     {\n+      /* If AS_LVAL is false, means that the implicit conversion\n+\t from a location description to value is expected.  */\n+      if (!as_lval)\n+\tthis->m_location = DWARF_VALUE_STACK;\n+\n       switch (this->m_location)\n \t{\n \tcase DWARF_VALUE_REGISTER:\n@@ -1037,7 +1042,7 @@ dwarf_expr_context::fetch_result (struct type *type, struct type *subobj_type,\n /* See expr.h.  */\n \n value *\n-dwarf_expr_context::evaluate (const gdb_byte *addr, size_t len,\n+dwarf_expr_context::evaluate (const gdb_byte *addr, size_t len, bool as_lval,\n \t\t\t      dwarf2_per_cu_data *per_cu, frame_info *frame,\n \t\t\t      const struct property_addr_info *addr_info,\n \t\t\t      struct type *type, struct type *subobj_type,\n@@ -1048,7 +1053,7 @@ dwarf_expr_context::evaluate (const gdb_byte *addr, size_t len,\n   this->m_addr_info = addr_info;\n \n   eval (addr, len);\n-  return fetch_result (type, subobj_type, subobj_offset);\n+  return fetch_result (type, subobj_type, subobj_offset, as_lval);\n }\n \n /* Require that TYPE be an integral type; throw an exception if not.  */"
    },
    {
      "sha": "16c5e710ff52acfbfbf18306562e463a8051979b",
      "filename": "gdb/dwarf2/expr.h",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.h?ref=70454ee70ad63c77d39768f057d722214adef658",
      "patch": "@@ -126,11 +126,17 @@ struct dwarf_expr_context\n   void push_address (CORE_ADDR value, bool in_stack_memory);\n \n   /* Evaluate the expression at ADDR (LEN bytes long) in a given PER_CU\n-     and FRAME context.  TYPE, SUBOBJ_TYPE and SUBOBJ_OFFSET describe\n-     the expected struct value representation of the evaluation\n-     result.  The ADDR_INFO property can be specified to override the\n-     range of memory addresses with the passed in buffer.  */\n-  value *evaluate (const gdb_byte *addr, size_t len,\n+     and FRAME context.\n+\n+     AS_LVAL defines if the returned struct value is expected to be a\n+     value (false) or a location description (true).\n+\n+     TYPE, SUBOBJ_TYPE and SUBOBJ_OFFSET describe the expected struct\n+     value representation of the evaluation result.\n+\n+     The ADDR_INFO property can be specified to override the range of\n+     memory addresses with the passed in buffer.  */\n+  value *evaluate (const gdb_byte *addr, size_t len, bool as_lval,\n \t\t   dwarf2_per_cu_data *per_cu, frame_info *frame,\n \t\t   const struct property_addr_info *addr_info = nullptr,\n \t\t   struct type *type = nullptr,\n@@ -211,9 +217,11 @@ struct dwarf_expr_context\n \n   /* Fetch the result of the expression evaluation in a form of\n      a struct value, where TYPE, SUBOBJ_TYPE and SUBOBJ_OFFSET\n-     describe the source level representation of that result.  */\n+     describe the source level representation of that result.\n+     AS_LVAL defines if the fetched struct value is expected to\n+     be a value or a location description.  */\n   value *fetch_result (struct type *type, struct type *subobj_type,\n-\t\t       LONGEST subobj_offset);\n+\t\t       LONGEST subobj_offset, bool as_lval);\n \n   /* Return the location expression for the frame base attribute, in\n      START and LENGTH.  The result must be live until the current"
    },
    {
      "sha": "f3d3877170855ced463e37ad41a09d2e780d7e15",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=70454ee70ad63c77d39768f057d722214adef658",
      "patch": "@@ -233,7 +233,7 @@ execute_stack_op (const gdb_byte *exp, ULONGEST len, int addr_size,\n   scoped_value_mark free_values;\n \n   ctx.push_address (initial, initial_in_stack_memory);\n-  value *result_val = ctx.evaluate (exp, len, nullptr, this_frame);\n+  value *result_val = ctx.evaluate (exp, len, true, nullptr, this_frame);\n \n   if (VALUE_LVAL (result_val) == lval_memory)\n     return value_address (result_val);"
    },
    {
      "sha": "2322a01f396ad2d45eefd4dd2496a8cfc904398b",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 17,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=70454ee70ad63c77d39768f057d722214adef658",
      "patch": "@@ -50,7 +50,7 @@\n static struct value *dwarf2_evaluate_loc_desc_full\n   (struct type *type, struct frame_info *frame, const gdb_byte *data,\n    size_t size, dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n-   struct type *subobj_type, LONGEST subobj_byte_offset);\n+   struct type *subobj_type, LONGEST subobj_byte_offset, bool as_lval = true);\n \n /* Until these have formal names, we define these here.\n    ref: http://gcc.gnu.org/wiki/DebugFission\n@@ -1214,7 +1214,6 @@ dwarf_entry_parameter_to_value (struct call_site_parameter *parameter,\n \t\t\t\tdwarf2_per_objfile *per_objfile)\n {\n   const gdb_byte *data_src;\n-  gdb_byte *data;\n   size_t size;\n \n   data_src = deref_size == -1 ? parameter->value : parameter->data_value;\n@@ -1225,15 +1224,8 @@ dwarf_entry_parameter_to_value (struct call_site_parameter *parameter,\n     throw_error (NO_ENTRY_VALUE_ERROR,\n \t\t _(\"Cannot resolve DW_AT_call_data_value\"));\n \n-  /* DW_AT_call_value is a DWARF expression, not a DWARF\n-     location.  Postprocessing of DWARF_VALUE_MEMORY would lose the type from\n-     DWARF block.  */\n-  data = (gdb_byte *) alloca (size + 1);\n-  memcpy (data, data_src, size);\n-  data[size] = DW_OP_stack_value;\n-\n-  return dwarf2_evaluate_loc_desc (type, caller_frame, data, size + 1, per_cu,\n-\t\t\t\t   per_objfile);\n+  return dwarf2_evaluate_loc_desc (type, caller_frame, data_src, size, per_cu,\n+\t\t\t\t   per_objfile, false);\n }\n \n /* VALUE must be of type lval_computed with entry_data_value_funcs.  Perform\n@@ -1459,7 +1451,8 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \t\t\t       dwarf2_per_cu_data *per_cu,\n \t\t\t       dwarf2_per_objfile *per_objfile,\n \t\t\t       struct type *subobj_type,\n-\t\t\t       LONGEST subobj_byte_offset)\n+\t\t\t       LONGEST subobj_byte_offset,\n+\t\t\t       bool as_lval)\n {\n   if (subobj_type == NULL)\n     {\n@@ -1479,8 +1472,8 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \n   try\n     {\n-      retval = ctx.evaluate (data, size, per_cu, frame, nullptr, type,\n-\t\t\t     subobj_type, subobj_byte_offset);\n+      retval = ctx.evaluate (data, size, as_lval, per_cu, frame, nullptr,\n+\t\t\t     type, subobj_type, subobj_byte_offset);\n     }\n   catch (const gdb_exception_error &ex)\n     {\n@@ -1521,10 +1514,10 @@ struct value *\n dwarf2_evaluate_loc_desc (struct type *type, struct frame_info *frame,\n \t\t\t  const gdb_byte *data, size_t size,\n \t\t\t  dwarf2_per_cu_data *per_cu,\n-\t\t\t  dwarf2_per_objfile *per_objfile)\n+\t\t\t  dwarf2_per_objfile *per_objfile, bool as_lval)\n {\n   return dwarf2_evaluate_loc_desc_full (type, frame, data, size, per_cu,\n-\t\t\t\t\tper_objfile, NULL, 0);\n+\t\t\t\t\tper_objfile, NULL, 0, as_lval);\n }\n \n /* Evaluates a dwarf expression and stores the result in VAL,\n@@ -1567,7 +1560,7 @@ dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n   try\n     {\n       result = ctx.evaluate (dlbaton->data, dlbaton->size,\n-\t\t\t     per_cu, frame, addr_stack);\n+\t\t\t     true, per_cu, frame, addr_stack);\n     }\n   catch (const gdb_exception_error &ex)\n     {"
    },
    {
      "sha": "5ff061bb4b6607d164c2d51c396cc9520394bfd4",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70454ee70ad63c77d39768f057d722214adef658/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=70454ee70ad63c77d39768f057d722214adef658",
      "patch": "@@ -72,14 +72,16 @@ struct call_site_parameter *dwarf_expr_reg_to_entry_parameter\n \n /* Evaluate a location description, starting at DATA and with length\n    SIZE, to find the current location of variable of TYPE in the context\n-   of FRAME.  */\n+   of FRAME.  AS_LVAL defines if the resulting struct value is expected to\n+   be a value or a location description.  */\n \n struct value *dwarf2_evaluate_loc_desc (struct type *type,\n \t\t\t\t\tstruct frame_info *frame,\n \t\t\t\t\tconst gdb_byte *data,\n \t\t\t\t\tsize_t size,\n \t\t\t\t\tdwarf2_per_cu_data *per_cu,\n-\t\t\t\t\tdwarf2_per_objfile *per_objfile);\n+\t\t\t\t\tdwarf2_per_objfile *per_objfile,\n+\t\t\t\t\tbool as_lval = true);\n \n /* A chain of addresses that might be needed to resolve a dynamic\n    property.  */"
    }
  ]
}