{
  "sha": "c648120540c7a1550bd7e65e660fda419ecf23b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzY0ODEyMDU0MGM3YTE1NTBiZDdlNjVlNjYwZmRhNDE5ZWNmMjNiMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Remove DW_STRING and DW_STRING_IS_CANONICAL\n\nThis removes DW_STRING and DW_STRING_IS_CANONICAL, replacing them with\naccessor methods on struct attribute.  The new code ensures that a\nstring value will only ever be used when the form allows it.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_cutu_die_from_dwo)\n\t(read_attribute_reprocess, read_attribute_value, read_attribute)\n\t(dwarf2_const_value_attr, dwarf2_name, dump_die_shallow)\n\t(dwarf2_fetch_constant_bytes): Update.\n\t* dwarf2/attribute.h (struct attribute) <form_is_string>: Declare.\n\t<set_string_noncanonical, set_string_canonical>: New methods.\n\t<string_is_canonical>: Update comment.\n\t<canonical_string_p>: Add assert.\n\t(DW_STRING, DW_STRING_IS_CANONICAL): Remove.\n\t* dwarf2/attribute.c (attribute::form_is_string): New method.\n\t(attribute::string): Use it.",
    "tree": {
      "sha": "89ac85f4f1477aa22342aca569cf9aa38d79ed4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/89ac85f4f1477aa22342aca569cf9aa38d79ed4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c648120540c7a1550bd7e65e660fda419ecf23b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c648120540c7a1550bd7e65e660fda419ecf23b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c648120540c7a1550bd7e65e660fda419ecf23b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c648120540c7a1550bd7e65e660fda419ecf23b3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3b64bf15bc96d83e49521048bfe3eacf25d3649d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b64bf15bc96d83e49521048bfe3eacf25d3649d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3b64bf15bc96d83e49521048bfe3eacf25d3649d"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 81,
    "deletions": 49
  },
  "files": [
    {
      "sha": "70051dfd5fa3f9cb23b6917110d4aa51379db3bb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c648120540c7a1550bd7e65e660fda419ecf23b3",
      "patch": "@@ -1,3 +1,17 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_cutu_die_from_dwo)\n+\t(read_attribute_reprocess, read_attribute_value, read_attribute)\n+\t(dwarf2_const_value_attr, dwarf2_name, dump_die_shallow)\n+\t(dwarf2_fetch_constant_bytes): Update.\n+\t* dwarf2/attribute.h (struct attribute) <form_is_string>: Declare.\n+\t<set_string_noncanonical, set_string_canonical>: New methods.\n+\t<string_is_canonical>: Update comment.\n+\t<canonical_string_p>: Add assert.\n+\t(DW_STRING, DW_STRING_IS_CANONICAL): Remove.\n+\t* dwarf2/attribute.c (attribute::form_is_string): New method.\n+\t(attribute::string): Use it.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (anonymous_struct_prefix, dwarf2_name)"
    },
    {
      "sha": "3fe1f088d770d4e5241a48066aae43b4a4423bfc",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=c648120540c7a1550bd7e65e660fda419ecf23b3",
      "patch": "@@ -61,18 +61,26 @@ attribute::as_address () const\n \n /* See attribute.h.  */\n \n+bool\n+attribute::form_is_string () const\n+{\n+  return (form == DW_FORM_strp || form == DW_FORM_line_strp\n+\t  || form == DW_FORM_string\n+\t  || form == DW_FORM_strx\n+\t  || form == DW_FORM_strx1\n+\t  || form == DW_FORM_strx2\n+\t  || form == DW_FORM_strx3\n+\t  || form == DW_FORM_strx4\n+\t  || form == DW_FORM_GNU_str_index\n+\t  || form == DW_FORM_GNU_strp_alt);\n+}\n+\n+/* See attribute.h.  */\n+\n const char *\n attribute::as_string () const\n {\n-  if (form == DW_FORM_strp || form == DW_FORM_line_strp\n-      || form == DW_FORM_string\n-      || form == DW_FORM_strx\n-      || form == DW_FORM_strx1\n-      || form == DW_FORM_strx2\n-      || form == DW_FORM_strx3\n-      || form == DW_FORM_strx4\n-      || form == DW_FORM_GNU_str_index\n-      || form == DW_FORM_GNU_strp_alt)\n+  if (form_is_string ())\n     return u.str;\n   return nullptr;\n }"
    },
    {
      "sha": "a9b77c115e6e1ac863d8db4e47311b7e609af534",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 24,
      "deletions": 5,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=c648120540c7a1550bd7e65e660fda419ecf23b3",
      "patch": "@@ -98,6 +98,9 @@ struct attribute\n \n   bool form_is_block () const;\n \n+  /* Check if the attribute's form is a string form.  */\n+  bool form_is_string () const;\n+\n   /* Return DIE offset of this attribute.  Return 0 with complaint if\n      the attribute is not of the required kind.  */\n \n@@ -122,16 +125,34 @@ struct attribute\n      flag indicates whether the value has been canonicalized.  */\n   bool canonical_string_p () const\n   {\n+    gdb_assert (form_is_string ());\n     return string_is_canonical;\n   }\n \n+  /* Initialize this attribute to hold a non-canonical string\n+     value.  */\n+  void set_string_noncanonical (const char *str)\n+  {\n+    gdb_assert (form_is_string ());\n+    u.str = str;\n+    string_is_canonical = 0;\n+  }\n+\n+  /* Set the canonical string value for this attribute.  */\n+  void set_string_canonical (const char *str)\n+  {\n+    gdb_assert (form_is_string ());\n+    u.str = str;\n+    string_is_canonical = 1;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;\n \n-  /* Has DW_STRING already been updated by dwarf2_canonicalize_name?  This\n-     field should be in u.str (existing only for DW_STRING) but it is kept\n-     here for better struct attribute alignment.  */\n+  /* Has u.str already been updated by dwarf2_canonicalize_name?  This\n+     field should be in u.str but it is kept here for better struct\n+     attribute alignment.  */\n   unsigned int string_is_canonical : 1;\n \n   union\n@@ -154,8 +175,6 @@ struct attribute\n \n /* Get at parts of an attribute structure.  */\n \n-#define DW_STRING(attr)    ((attr)->u.str)\n-#define DW_STRING_IS_CANONICAL(attr) ((attr)->string_is_canonical)\n #define DW_UNSND(attr)     ((attr)->u.unsnd)\n #define DW_BLOCK(attr)     ((attr)->u.blk)\n #define DW_SND(attr)       ((attr)->u.snd)"
    },
    {
      "sha": "fa78be197574c5f66495dee0dcff964152f24e69",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 26,
      "deletions": 35,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c648120540c7a1550bd7e65e660fda419ecf23b3/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c648120540c7a1550bd7e65e660fda419ecf23b3",
      "patch": "@@ -6872,8 +6872,7 @@ read_cutu_die_from_dwo (dwarf2_cu *cu,\n       comp_dir = XOBNEW (&cu->comp_unit_obstack, struct attribute);\n       comp_dir->name = DW_AT_comp_dir;\n       comp_dir->form = DW_FORM_string;\n-      DW_STRING_IS_CANONICAL (comp_dir) = 0;\n-      DW_STRING (comp_dir) = stub_comp_dir;\n+      comp_dir->set_string_noncanonical (stub_comp_dir);\n     }\n \n   /* Set up for reading the DWO CU/TU.  */\n@@ -19641,16 +19640,13 @@ read_attribute_reprocess (const struct die_reader_specs *reader,\n       case DW_FORM_GNU_str_index:\n \t{\n \t  unsigned int str_index = DW_UNSND (attr);\n+\t  gdb_assert (!attr->canonical_string_p ());\n \t  if (reader->dwo_file != NULL)\n-\t    {\n-\t      DW_STRING (attr) = read_dwo_str_index (reader, str_index);\n-\t      DW_STRING_IS_CANONICAL (attr) = 0;\n-\t    }\n+\t    attr->set_string_noncanonical (read_dwo_str_index (reader,\n+\t\t\t\t\t\t\t       str_index));\n \t  else\n-\t    {\n-\t      DW_STRING (attr) = read_stub_str_index (cu, str_index);\n-\t      DW_STRING_IS_CANONICAL (attr) = 0;\n-\t    }\n+\t    attr->set_string_noncanonical (read_stub_str_index (cu,\n+\t\t\t\t\t\t\t\tstr_index));\n \t  break;\n \t}\n       default:\n@@ -19746,27 +19742,27 @@ read_attribute_value (const struct die_reader_specs *reader,\n       }\n       break;\n     case DW_FORM_string:\n-      DW_STRING (attr) = read_direct_string (abfd, info_ptr, &bytes_read);\n-      DW_STRING_IS_CANONICAL (attr) = 0;\n+      attr->set_string_noncanonical (read_direct_string (abfd, info_ptr,\n+\t\t\t\t\t\t\t &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_strp:\n       if (!cu->per_cu->is_dwz)\n \t{\n-\t  DW_STRING (attr) = read_indirect_string (per_objfile,\n-\t\t\t\t\t\t   abfd, info_ptr, cu_header,\n-\t\t\t\t\t\t   &bytes_read);\n-\t  DW_STRING_IS_CANONICAL (attr) = 0;\n+\t  attr->set_string_noncanonical\n+\t    (read_indirect_string (per_objfile,\n+\t\t\t\t   abfd, info_ptr, cu_header,\n+\t\t\t\t   &bytes_read));\n \t  info_ptr += bytes_read;\n \t  break;\n \t}\n       /* FALLTHROUGH */\n     case DW_FORM_line_strp:\n       if (!cu->per_cu->is_dwz)\n \t{\n-\t  DW_STRING (attr) = per_objfile->read_line_string (info_ptr, cu_header,\n-\t\t\t\t\t\t\t    &bytes_read);\n-\t  DW_STRING_IS_CANONICAL (attr) = 0;\n+\t  attr->set_string_noncanonical\n+\t    (per_objfile->read_line_string (info_ptr, cu_header,\n+\t\t\t\t\t    &bytes_read));\n \t  info_ptr += bytes_read;\n \t  break;\n \t}\n@@ -19777,8 +19773,8 @@ read_attribute_value (const struct die_reader_specs *reader,\n \tLONGEST str_offset = cu_header->read_offset (abfd, info_ptr,\n \t\t\t\t\t\t     &bytes_read);\n \n-\tDW_STRING (attr) = dwz->read_string (objfile, str_offset);\n-\tDW_STRING_IS_CANONICAL (attr) = 0;\n+\tattr->set_string_noncanonical\n+\t  (dwz->read_string (objfile, str_offset));\n \tinfo_ptr += bytes_read;\n       }\n       break;\n@@ -19944,6 +19940,7 @@ read_attribute (const struct die_reader_specs *reader,\n \t\tconst gdb_byte *info_ptr, bool *need_reprocess)\n {\n   attr->name = abbrev->name;\n+  attr->string_is_canonical = 0;\n   return read_attribute_value (reader, attr, abbrev->form,\n \t\t\t       abbrev->implicit_const, info_ptr,\n \t\t\t       need_reprocess);\n@@ -21861,7 +21858,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n     case DW_FORM_strx:\n     case DW_FORM_GNU_str_index:\n     case DW_FORM_GNU_strp_alt:\n-      /* DW_STRING is already allocated on the objfile obstack, point\n+      /* The string is already allocated on the objfile obstack, point\n \t directly to it.  */\n       *bytes = (const gdb_byte *) attr->as_string ();\n       break;\n@@ -22645,8 +22642,7 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \t      if (demangled == nullptr)\n \t\treturn nullptr;\n \n-\t      DW_STRING (attr) = objfile->intern (demangled.get ());\n-\t      DW_STRING_IS_CANONICAL (attr) = 1;\n+\t      attr->set_string_canonical (objfile->intern (demangled.get ()));\n \t    }\n \n \t  /* Strip any leading namespaces/classes, keep only the\n@@ -22665,13 +22661,8 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n     }\n \n   if (!attr->canonical_string_p ())\n-    {\n-      DW_STRING (attr) = dwarf2_canonicalize_name (attr_name, cu,\n-\t\t\t\t\t\t   objfile);\n-      DW_STRING_IS_CANONICAL (attr) = 1;\n-    }\n-\n-  /* We might have changed it just above.  */\n+    attr->set_string_canonical (dwarf2_canonicalize_name (attr_name, cu,\n+\t\t\t\t\t\t\t  objfile));\n   return attr->as_string ();\n }\n \n@@ -22784,9 +22775,9 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \tcase DW_FORM_GNU_str_index:\n \tcase DW_FORM_GNU_strp_alt:\n \t  fprintf_unfiltered (f, \"string: \\\"%s\\\" (%s canonicalized)\",\n-\t\t   DW_STRING (&die->attrs[i])\n-\t\t   ? DW_STRING (&die->attrs[i]) : \"\",\n-\t\t   die->attrs[i].canonical_string_p () ? \"is\" : \"not\");\n+\t\t\t      die->attrs[i].as_string ()\n+\t\t\t      ? die->attrs[i].as_string () : \"\",\n+\t\t\t      die->attrs[i].canonical_string_p () ? \"is\" : \"not\");\n \t  break;\n \tcase DW_FORM_flag:\n \t  if (DW_UNSND (&die->attrs[i]))\n@@ -23180,7 +23171,7 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n     case DW_FORM_strx:\n     case DW_FORM_GNU_str_index:\n     case DW_FORM_GNU_strp_alt:\n-      /* DW_STRING is already allocated on the objfile obstack, point\n+      /* The string is already allocated on the objfile obstack, point\n \t directly to it.  */\n       {\n \tconst char *attr_name = attr->as_string ();"
    }
  ]
}