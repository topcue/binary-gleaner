{
  "sha": "2d61316c32a9fa3e14786c3312d9ca87c9298db5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmQ2MTMxNmMzMmE5ZmEzZTE0Nzg2YzMzMTJkOWNhODdjOTI5OGRiNQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-03-13T14:38:19Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-03-13T14:38:19Z"
    },
    "message": "[gdb/testsuite] Fix buffer full errors in gdb.mi/mi-sym-info.exp\n\nWith debug info packages for system libs installed, I run into buffer full\nerrors with test-case gdb.mi/mi-sym-info.exp.  Fix these using exp_continue.\n\nThis exposes timeouts due to gdb taking a long time before starting to print\noutput.  Fix these using with_timeout_factor.\n\nTested on x86_64-linux, with make targets check and check-read1.\n\ngdb/testsuite/ChangeLog:\n\n2020-03-13  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.mi/mi-sym-info.exp: Fix buffer full errors, and timeouts.",
    "tree": {
      "sha": "9c34666627175f99b87c12c4cb12c1c13a2d673b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c34666627175f99b87c12c4cb12c1c13a2d673b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2d61316c32a9fa3e14786c3312d9ca87c9298db5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d61316c32a9fa3e14786c3312d9ca87c9298db5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2d61316c32a9fa3e14786c3312d9ca87c9298db5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d61316c32a9fa3e14786c3312d9ca87c9298db5/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e9145ace2a520f942d74fea7df9458cc8a16523",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e9145ace2a520f942d74fea7df9458cc8a16523",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e9145ace2a520f942d74fea7df9458cc8a16523"
    }
  ],
  "stats": {
    "total": 173,
    "additions": 148,
    "deletions": 25
  },
  "files": [
    {
      "sha": "48d3c946855026f158bb5dabd277851823191a95",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2d61316c32a9fa3e14786c3312d9ca87c9298db5/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2d61316c32a9fa3e14786c3312d9ca87c9298db5/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2d61316c32a9fa3e14786c3312d9ca87c9298db5",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-13  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.mi/mi-sym-info.exp: Fix buffer full errors, and timeouts.\n+\n 2020-03-13  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.mi/mi-sym-info.exp: Make matching more precise."
    },
    {
      "sha": "290fb46c412d2f7a4e3d3c3330516d3a9e9ed1f2",
      "filename": "gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "status": "modified",
      "additions": 144,
      "deletions": 25,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2d61316c32a9fa3e14786c3312d9ca87c9298db5/gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2d61316c32a9fa3e14786c3312d9ca87c9298db5/gdb/testsuite/gdb.mi/mi-sym-info.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-sym-info.exp?ref=2d61316c32a9fa3e14786c3312d9ca87c9298db5",
      "patch": "@@ -15,6 +15,13 @@\n \n # Test -symbol-info-functions, -symbol-info-variables, and\n # -symbol-info-types.\n+#\n+# These tests can generate large amounts of output, which can cause gdb to be\n+# slow in two different ways:\n+# - it takes long before the command starts producing output\n+# - it takes long to print all the output\n+# We can prevent timeouts due to the latter using exp_continue, but for\n+# the former that doesn't work.  There we use with_timeout_factor instead.\n \n load_lib mi-support.exp\n set MIFLAGS \"-i=mi\"\n@@ -51,52 +58,164 @@ set type_syms \\\n \n # Fetch all functions, variables and types without any non-debug\n # symbols.\n-mi_gdb_test \"111-symbol-info-functions\" \\\n-    \"111\\\\^done,${debug_only_syms}\" \\\n-    \"List all functions from debug information only\"\n+set testname \"List all functions from debug information only\"\n+set cmd \"111-symbol-info-functions\"\n+set state 0\n+gdb_test_multiple $cmd $testname -prompt \"${mi_gdb_prompt}$\" {\n+    -re \"111\\\\^done,symbols=\\{debug=\\\\\\[${symtab_re}\" {\n+\tif { $state == 0 } { incr state }\n+\texp_continue\n+    }\n+    -re \",${symtab_re}\" {\n+\texp_continue\n+    }\n+    -re \"\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n+\tif { $state == 1 } {\n+\t    pass $gdb_test_name\n+\t} else {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+}\n \n-mi_gdb_test \"112-symbol-info-variables\" \\\n-    \"112\\\\^done,${debug_only_syms}\" \\\n-    \"List all variables from debug information only\"\n+set testname \"List all variables from debug information only\"\n+set cmd \"112-symbol-info-variables\"\n+set state 0\n+gdb_test_multiple $cmd $testname -prompt \"${mi_gdb_prompt}$\" {\n+    -re \"112\\\\^done,symbols=\\{debug=\\\\\\[${symtab_re}\" {\n+\tif { $state == 0 } { incr state }\n+\texp_continue\n+    }\n+    -re \",${symtab_re}\" {\n+\texp_continue\n+    }\n+    -re \"\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n+\tif { $state == 1 } {\n+\t    pass $gdb_test_name\n+\t} else {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+}\n \n-mi_gdb_test \"113-symbol-info-types\" \\\n-    \"113\\\\^done,${type_syms}\" \\\n-    \"List all types\"\n+set testname \"List all types\"\n+set cmd \"113-symbol-info-types\"\n+set state 0\n+gdb_test_multiple $cmd $testname -prompt \"${mi_gdb_prompt}$\" {\n+    -re \"113\\\\^done,symbols=\\{debug=\\\\\\[${symtab_type_re}\" {\n+\tif { $state == 0 } { incr state }\n+\texp_continue\n+    }\n+    -re \",${symtab_type_re}\" {\n+\texp_continue\n+    }\n+    -re \"\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n+\tif { $state == 1 } {\n+\t    pass $gdb_test_name\n+\t} else {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+}\n \n # Fetch functions and variables but also grab the non-debug symbols\n # (from the symbol table).  There's often so much output output from\n # this command that we overflow expect's buffers, avoid this by\n # fetching the output piece by piece.\n set testname \"List all functions\"\n set cmd \"114-symbol-info-functions --include-nondebug\"\n+set state 0\n gdb_test_multiple $cmd ${testname} -prompt \"${mi_gdb_prompt}$\" {\n-    -re \"114\\\\^done,symbols=\\{debug=\\\\\\[${symtab_re}(?:,${symtab_re})*\\\\\\],nondebug=\\\\\\[\" {\n+    -re \"114\\\\^done,symbols=\\{\" {\n+\tif { $state == 0 } { set state 1 }\n \texp_continue\n     }\n-\n-    -re \"\\{address=${qstr},name=${qstr}\\},\" {\n+    -re \"debug=\\\\\\[${symtab_re}\" {\n+\tif { $state == 1 } { set state 2 }\n \texp_continue\n     }\n-\n-    -re \"\\{address=${qstr},name=${qstr}\\}\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n-\tpass ${testname}\n+    -re \",${symtab_re}\" {\n+\texp_continue\n     }\n-}\n-\n-set testname \"List all variables\"\n-set cmd \"115-symbol-info-variables --include-nondebug\"\n-gdb_test_multiple $cmd ${testname} -prompt \"${mi_gdb_prompt}$\" {\n-    -re \"115\\\\^done,symbols=\\{debug=\\\\\\[${symtab_re}(?:,${symtab_re})*\\\\\\],nondebug=\\\\\\[\" {\n-\tverbose -log \"Got the first part of the input\"\n+    -re \"\\\\\\],nondebug=\\\\\\[\" {\n+\tif { $state == 2 } { set state 3 }\n \texp_continue\n     }\n-\n     -re \"\\{address=${qstr},name=${qstr}\\},\" {\n \texp_continue\n     }\n-\n     -re \"\\{address=${qstr},name=${qstr}\\}\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n-\tpass ${testname}\n+\tif { $state == 3 } {\n+\t    pass $gdb_test_name\n+\t} else {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+}\n+\n+with_timeout_factor 2 {\n+    set testname \"List all variables\"\n+    set cmd \"115-symbol-info-variables --include-nondebug\"\n+    set state 0\n+    gdb_test_multiple $cmd ${testname} -prompt \"${mi_gdb_prompt}$\" {\n+\t-re \"115\\\\^done,symbols=\\{\" {\n+\t    if { $state == 0 } { set state 1 }\n+\t    exp_continue\n+\t}\n+\t-re \"debug=\\\\\\[${symtab_re}\" {\n+\t    if { $state == 1 } { set state 2 }\n+\t    exp_continue\n+\t}\n+\t-re \",${symtab_re}\" {\n+\t    exp_continue\n+\t}\n+\t-re \"\\\\\\],nondebug=\\\\\\[\" {\n+\t    if { $state == 2 } { set state 3 }\n+\t    exp_continue\n+\t}\n+\t-re \"\\{address=${qstr},name=${qstr}\\},\" {\n+\t    exp_continue\n+\t}\n+\t-re \"\\{address=${qstr},name=${qstr}\\}\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n+\t    if { $state == 3 } {\n+\t\tpass $gdb_test_name\n+\t    } else {\n+\t\tfail $gdb_test_name\n+\t    }\n+\t}\n+    }\n+}\n+\n+with_timeout_factor 2 {\n+    set testname \"List all variables\"\n+    set cmd \"115-symbol-info-variables --include-nondebug\"\n+    set state 0\n+    gdb_test_multiple $cmd ${testname} -prompt \"${mi_gdb_prompt}$\" {\n+\t-re \"115\\\\^done,symbols=\\{\" {\n+\t    if { $state == 0 } { incr state }\n+\t    exp_continue\n+\t}\n+\t-re \"debug=\\\\\\[${symtab_re}\" {\n+\t    if { $state == 1 } { incr state }\n+\t    exp_continue\n+\t}\n+\t-re \",${symtab_re}\" {\n+\t    exp_continue\n+\t}\n+\t-re \"\\\\\\],nondebug=\\\\\\[\" {\n+\t    if { $state == 2 } { incr state }\n+\t    exp_continue\n+\t}\n+\t-re \"\\{address=${qstr},name=${qstr}\\},\" {\n+\t    exp_continue\n+\t}\n+\t-re \"\\{address=${qstr},name=${qstr}\\}\\\\\\]\\}\\r\\n${mi_gdb_prompt}$\" {\n+\t    if { $state == 3 } {\n+\t\tpass $gdb_test_name\n+\t    } else {\n+\t\tfail $gdb_test_name\n+\t    }\n+\t}\n     }\n }\n "
    }
  ]
}