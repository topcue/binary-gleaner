{
  "sha": "b00a0a86c40c681cf4b22a3630f85188ac849721",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAwYTBhODZjNDBjNjgxY2Y0YjIyYTM2MzBmODUxODhhYzg0OTcyMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-18T01:28:01Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-18T12:47:30Z"
    },
    "message": "[PowerPC] Rename TLS_TPRELGD to TLS_GDIE\n\nChoose a better name, that reflects why the flag is set (GD to IE\noptimisation) rather than what the flag produces (TPREL64 reloc on\na single GOT entry replacing a tls_index pair).\n\n\t* elf32-ppc.c (TLS_GDIE): Rename from TLS_TPRELGD throughout file.\n\tCorrect comment.\n\t* elf64-ppc.c (TLS_GDIE): Likewise.",
    "tree": {
      "sha": "8c92d1b0358e489088a266c5e5bf9f55d4877d66",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8c92d1b0358e489088a266c5e5bf9f55d4877d66"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b00a0a86c40c681cf4b22a3630f85188ac849721",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b00a0a86c40c681cf4b22a3630f85188ac849721",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b00a0a86c40c681cf4b22a3630f85188ac849721",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b00a0a86c40c681cf4b22a3630f85188ac849721/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0b1474281c659919d9c63ccfd6891b9e9ed0fc9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b1474281c659919d9c63ccfd6891b9e9ed0fc9c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0b1474281c659919d9c63ccfd6891b9e9ed0fc9c"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 27,
    "deletions": 25
  },
  "files": [
    {
      "sha": "b913d18d8e82aac09a4c3e6d57e538be93adb075",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b00a0a86c40c681cf4b22a3630f85188ac849721",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-ppc.c (TLS_GDIE): Rename from TLS_TPRELGD throughout file.\n+\tCorrect comment.\n+\t* elf64-ppc.c (TLS_GDIE): Likewise.\n+\n 2019-07-18  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (ppc64_elf_tls_optimize): Correct test for allowed"
    },
    {
      "sha": "8dfeca3e3a5eea9c7cdc07f3f47757c00dedc8cf",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=b00a0a86c40c681cf4b22a3630f85188ac849721",
      "patch": "@@ -2111,17 +2111,15 @@ struct ppc_elf_link_hash_entry\n      of the other TLS bits are set.  tls_optimize clears bits when\n      optimizing to indicate the corresponding GOT entry type is not\n      needed.  If set, TLS_TLS is never cleared.  tls_optimize may also\n-     set TLS_TPRELGD when a GD reloc turns into a TPREL one.  We use a\n-     separate flag rather than setting TPREL just for convenience in\n-     distinguishing the two cases.\n+     set TLS_GDIE when a GD reloc turns into an IE one.\n      These flags are also kept for local symbols.  */\n #define TLS_TLS\t\t 1\t/* Any TLS reloc.  */\n #define TLS_GD\t\t 2\t/* GD reloc. */\n #define TLS_LD\t\t 4\t/* LD reloc. */\n #define TLS_TPREL\t 8\t/* TPREL reloc, => IE. */\n #define TLS_DTPREL\t16\t/* DTPREL reloc, => LD. */\n #define TLS_MARK\t32\t/* __tls_get_addr call marked. */\n-#define TLS_TPRELGD\t64\t/* TPREL reloc resulting from GD->IE. */\n+#define TLS_GDIE\t64\t/* GOT TPREL reloc resulting from GD->IE. */\n   unsigned char tls_mask;\n \n   /* The above field is also used to mark function symbols.  In which\n@@ -4525,7 +4523,7 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUTE_UNUSED,\n \t\t\ttls_set = 0;\n \t\t      else\n \t\t\t/* GD -> IE */\n-\t\t\ttls_set = TLS_TLS | TLS_TPRELGD;\n+\t\t\ttls_set = TLS_TLS | TLS_GDIE;\n \t\t      tls_clear = TLS_GD;\n \t\t      break;\n \n@@ -5051,7 +5049,7 @@ got_entries_needed (int tls_mask)\n       need = 0;\n       if ((tls_mask & TLS_GD) != 0)\n \tneed += 8;\n-      if ((tls_mask & (TLS_TPREL | TLS_TPRELGD)) != 0)\n+      if ((tls_mask & (TLS_TPREL | TLS_GDIE)) != 0)\n \tneed += 4;\n       if ((tls_mask & TLS_DTPREL) != 0)\n \tneed += 4;\n@@ -5072,7 +5070,7 @@ got_relocs_needed (int tls_mask, unsigned int need, bfd_boolean known)\n      condition as that for IE, but ld.so needs to differentiate\n      LD and GD entries.  */\n   if (known && (tls_mask & TLS_TLS) != 0\n-      && (tls_mask & (TLS_TPREL | TLS_TPRELGD)) != 0)\n+      && (tls_mask & (TLS_TPREL | TLS_GDIE)) != 0)\n     need -= 4;\n   return need * sizeof (Elf32_External_Rela) / 4;\n }\n@@ -7213,7 +7211,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC_GOT_TLSGD16_HI:\n \tcase R_PPC_GOT_TLSGD16_HA:\n-\t  tls_gd = TLS_TPRELGD;\n+\t  tls_gd = TLS_GDIE;\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n \t    goto tls_gdld_hi;\n \t  break;\n@@ -7238,7 +7236,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC_GOT_TLSGD16:\n \tcase R_PPC_GOT_TLSGD16_LO:\n-\t  tls_gd = TLS_TPRELGD;\n+\t  tls_gd = TLS_GDIE;\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n \t    goto tls_ldgd_opt;\n \t  break;\n@@ -7340,7 +7338,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t\t  break;\n \t\t}\n \n-\t      if ((tls_mask & TLS_TPRELGD) != 0)\n+\t      if ((tls_mask & TLS_GDIE) != 0)\n \t\t{\n \t\t  /* IE */\n \t\t  r_type = R_PPC_NONE;\n@@ -7798,7 +7796,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t      {\n \t\tunsigned int tls_m = ((tls_mask & TLS_TLS) != 0\n \t\t\t\t      ? tls_mask & (TLS_LD | TLS_GD | TLS_DTPREL\n-\t\t\t\t\t\t    | TLS_TPREL | TLS_TPRELGD)\n+\t\t\t\t\t\t    | TLS_TPREL | TLS_GDIE)\n \t\t\t\t      : 0);\n \n \t\tif (offp == &htab->tlsld_got.offset)\n@@ -7828,7 +7826,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t\t\ttls_ty = TLS_TLS | TLS_DTPREL;\n \t\t\ttls_m &= ~TLS_DTPREL;\n \t\t      }\n-\t\t    else if ((tls_m & (TLS_TPREL | TLS_TPRELGD)) != 0)\n+\t\t    else if ((tls_m & (TLS_TPREL | TLS_GDIE)) != 0)\n \t\t      {\n \t\t\ttls_ty = TLS_TLS | TLS_TPREL;\n \t\t\ttls_m = 0;"
    },
    {
      "sha": "9c32c692058300cfd53b15e2e1c379b1a6a43f11",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 13,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b00a0a86c40c681cf4b22a3630f85188ac849721/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=b00a0a86c40c681cf4b22a3630f85188ac849721",
      "patch": "@@ -3039,17 +3039,15 @@ struct ppc_link_hash_entry\n      of the other TLS bits are set.  tls_optimize clears bits when\n      optimizing to indicate the corresponding GOT entry type is not\n      needed.  If set, TLS_TLS is never cleared.  tls_optimize may also\n-     set TLS_TPRELGD when a GD reloc turns into a TPREL one.  We use a\n-     separate flag rather than setting TPREL just for convenience in\n-     distinguishing the two cases.\n+     set TLS_GDIE when a GD reloc turns into an IE one.\n      These flags are also kept for local symbols.  */\n #define TLS_TLS\t\t 1\t/* Any TLS reloc.  */\n #define TLS_GD\t\t 2\t/* GD reloc. */\n #define TLS_LD\t\t 4\t/* LD reloc. */\n #define TLS_TPREL\t 8\t/* TPREL reloc, => IE. */\n #define TLS_DTPREL\t16\t/* DTPREL reloc, => LD. */\n #define TLS_MARK\t32\t/* __tls_get_addr call marked. */\n-#define TLS_TPRELGD\t64\t/* TPREL reloc resulting from GD->IE. */\n+#define TLS_GDIE\t64\t/* GOT TPREL reloc resulting from GD->IE. */\n #define TLS_EXPLICIT   128\t/* Marks TOC section TLS relocs. */\n   unsigned char tls_mask;\n \n@@ -7797,7 +7795,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t\ttls_set = 0;\n \t\t      else\n \t\t\t/* GD -> IE */\n-\t\t\ttls_set = TLS_TLS | TLS_TPRELGD;\n+\t\t\ttls_set = TLS_TLS | TLS_GDIE;\n \t\t      tls_clear = TLS_GD;\n \t\t      tls_type = TLS_TLS | TLS_GD;\n \t\t      break;\n@@ -7924,7 +7922,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t\t    tls_set = TLS_EXPLICIT | TLS_GD;\n \t\t\t  else\n \t\t\t    /* GD -> IE */\n-\t\t\t    tls_set = TLS_EXPLICIT | TLS_GD | TLS_TPRELGD;\n+\t\t\t    tls_set = TLS_EXPLICIT | TLS_GD | TLS_GDIE;\n \t\t\t  tls_clear = TLS_GD;\n \t\t\t}\n \t\t      else\n@@ -9239,7 +9237,7 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n   eh = (struct ppc_link_hash_entry *) h;\n   /* Run through the TLS GD got entries first if we're changing them\n      to TPREL.  */\n-  if ((eh->tls_mask & (TLS_TLS | TLS_TPRELGD)) == (TLS_TLS | TLS_TPRELGD))\n+  if ((eh->tls_mask & (TLS_TLS | TLS_GDIE)) == (TLS_TLS | TLS_GDIE))\n     for (gent = h->got.glist; gent != NULL; gent = gent->next)\n       if (gent->got.refcount > 0\n \t  && (gent->tls_type & TLS_GD) != 0)\n@@ -14387,7 +14385,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t       doing a GD->IE transition.  */\n \t\t    if (retval == 2)\n \t\t      {\n-\t\t\ttls_gd = TLS_TPRELGD;\n+\t\t\ttls_gd = TLS_GDIE;\n \t\t\tif ((tls_mask & TLS_TLS) != 0\n \t\t\t    && (tls_mask & TLS_GD) == 0)\n \t\t\t  goto tls_ldgd_opt;\n@@ -14469,7 +14467,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC64_GOT_TLSGD16_HI:\n \tcase R_PPC64_GOT_TLSGD16_HA:\n-\t  tls_gd = TLS_TPRELGD;\n+\t  tls_gd = TLS_GDIE;\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n \t    goto tls_gdld_hi;\n \t  break;\n@@ -14494,7 +14492,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC64_GOT_TLSGD16:\n \tcase R_PPC64_GOT_TLSGD16_LO:\n-\t  tls_gd = TLS_TPRELGD;\n+\t  tls_gd = TLS_GDIE;\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n \t    goto tls_ldgd_opt;\n \t  break;\n@@ -14621,7 +14619,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      if (ELF64_R_TYPE (rel[1].r_info) == R_PPC64_PLTCALL)\n \t\tbfd_put_32 (output_bfd, NOP, contents + offset + 4);\n \n-\t      if ((tls_mask & TLS_TPRELGD) != 0)\n+\t      if ((tls_mask & TLS_GDIE) != 0)\n \t\t{\n \t\t  /* IE */\n \t\t  r_type = R_PPC64_NONE;\n@@ -14644,7 +14642,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      BFD_ASSERT (offset == rel[1].r_offset);\n \t      rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n \t      bfd_put_32 (input_bfd, insn2, contents + offset);\n-\t      if ((tls_mask & TLS_TPRELGD) == 0 && toc_symndx != 0)\n+\t      if ((tls_mask & TLS_GDIE) == 0 && toc_symndx != 0)\n \t\tgoto again;\n \t    }\n \t  break;\n@@ -14705,7 +14703,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      if ((tls_mask & TLS_GD) == 0)\n \t\t{\n \t\t  rel[1].r_info = ELF64_R_INFO (r_symndx, R_PPC64_NONE);\n-\t\t  if ((tls_mask & TLS_TPRELGD) != 0)\n+\t\t  if ((tls_mask & TLS_GDIE) != 0)\n \t\t    r_type = R_PPC64_TPREL64;\n \t\t  else\n \t\t    {"
    }
  ]
}