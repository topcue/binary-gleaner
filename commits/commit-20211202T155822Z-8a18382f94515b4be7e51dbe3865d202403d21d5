{
  "sha": "8a18382f94515b4be7e51dbe3865d202403d21d5",
  "node_id": "C_kwDOANOeidoAKDhhMTgzODJmOTQ1MTViNGJlN2U1MWRiZTM4NjVkMjAyNDAzZDIxZDU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-30T19:58:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-12-02T15:58:22Z"
    },
    "message": "Add \"task\" keyword to the \"watch\" command\n\nBreakpoints in gdb can be made specific to an Ada task using the\n\"task\" qualifier.  This patch applies this same idea to watchpoints.",
    "tree": {
      "sha": "c3621e18b8693281e0b45d5a1db988bd103f0947",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c3621e18b8693281e0b45d5a1db988bd103f0947"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8a18382f94515b4be7e51dbe3865d202403d21d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a18382f94515b4be7e51dbe3865d202403d21d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8a18382f94515b4be7e51dbe3865d202403d21d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a18382f94515b4be7e51dbe3865d202403d21d5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "36cb9e7e17cae5e05f007f37e555873c4f22594a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36cb9e7e17cae5e05f007f37e555873c4f22594a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/36cb9e7e17cae5e05f007f37e555873c4f22594a"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 175,
    "deletions": 1
  },
  "files": [
    {
      "sha": "b0a3a0867eaddef0768e8269c01a31512102855f",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=8a18382f94515b4be7e51dbe3865d202403d21d5",
      "patch": "@@ -24,6 +24,9 @@ show varsize-limit\n   These are now deprecated aliases for \"set max-value-size\" and\n   \"show max-value-size\".\n \n+watch [...] task ID\n+  Watchpoints can now be restricted to a specific Ada task.\n+\n maint set internal-error backtrace on|off\n maint show internal-error backtrace\n maint set internal-warning backtrace on|off"
    },
    {
      "sha": "acf38818c3f8c7b2a0c14b5b63505c7f2cdb9673",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=8a18382f94515b4be7e51dbe3865d202403d21d5",
      "patch": "@@ -10557,6 +10557,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n      the hardware watchpoint.  */\n   bool use_mask = false;\n   CORE_ADDR mask = 0;\n+  int task = 0;\n \n   /* Make sure that we actually have parameters to parse.  */\n   if (arg != NULL && arg[0] != '\\0')\n@@ -10612,6 +10613,16 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n \n \t      thread = thr->global_num;\n \t    }\n+\t  else if (toklen == 4 && startswith (tok, \"task\"))\n+\t    {\n+\t      char *tmp;\n+\n+\t      task = strtol (value_start, &tmp, 0);\n+\t      if (tmp == value_start)\n+\t\terror (_(\"Junk after task keyword.\"));\n+\t      if (!valid_task_id (task))\n+\t\terror (_(\"Unknown task %d.\"), task);\n+\t    }\n \t  else if (toklen == 4 && startswith (tok, \"mask\"))\n \t    {\n \t      /* We've found a \"mask\" token, which means the user wants to\n@@ -10785,6 +10796,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n     init_raw_breakpoint_without_location (w.get (), NULL, bp_type,\n \t\t\t\t\t  &watchpoint_breakpoint_ops);\n   w->thread = thread;\n+  w->task = task;\n   w->disposition = disp_donttouch;\n   w->pspace = current_program_space;\n   w->exp = std::move (exp);"
    },
    {
      "sha": "40f3e245a113c1afca7f9e4e08eafc7a3046ffa7",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=8a18382f94515b4be7e51dbe3865d202403d21d5",
      "patch": "@@ -4860,7 +4860,7 @@ slow down the running of your program.\n \n @table @code\n @kindex watch\n-@item watch @r{[}-l@r{|}-location@r{]} @var{expr} @r{[}thread @var{thread-id}@r{]} @r{[}mask @var{maskvalue}@r{]}\n+@item watch @r{[}-l@r{|}-location@r{]} @var{expr} @r{[}thread @var{thread-id}@r{]} @r{[}mask @var{maskvalue}@r{]} @r{[}task @var{task-id}@r{]}\n Set a watchpoint for an expression.  @value{GDBN} will break when the\n expression @var{expr} is written into by the program and its value\n changes.  The simplest (and the most popular) use of this command is\n@@ -4877,6 +4877,9 @@ change the value of @var{expr}, @value{GDBN} will not break.  Note\n that watchpoints restricted to a single thread in this way only work\n with Hardware Watchpoints.\n \n+Similarly, if the @code{task} argument is given, then the watchpoint\n+will be specific to the indicated Ada task (@pxref{Ada Tasks}).\n+\n Ordinarily a watchpoint respects the scope of variables in @var{expr}\n (see below).  The @code{-location} argument tells @value{GDBN} to\n instead watch the memory referred to by @var{expr}.  In this case,"
    },
    {
      "sha": "fc276ef5f0e052c43e945575c4b8cef42b3bd2bb",
      "filename": "gdb/testsuite/gdb.ada/task_watch.exp",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/testsuite/gdb.ada/task_watch.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/testsuite/gdb.ada/task_watch.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/task_watch.exp?ref=8a18382f94515b4be7e51dbe3865d202403d21d5",
      "patch": "@@ -0,0 +1,83 @@\n+# Copyright 2009-2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test task-specific watchpoints.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile foo\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n+  return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP_HERE\" ${testdir}/foo.adb]\n+runto \"foo.adb:$bp_location\"\n+\n+# Make sure that all tasks appear in the \"info tasks\" listing, and\n+# that the active task is the environment task.\n+gdb_test \"info tasks\" \\\n+    [join {\" +ID +TID P-ID Pri State +Name\" \\\n+\t       \"\\\\* +1 .* main_task\" \\\n+\t       \" +2 .* task_list\\\\(1\\\\)\" \\\n+\t       \" +3 .* task_list\\\\(2\\\\)\" \\\n+\t       \" +4 .* task_list\\\\(3\\\\)\"} \\\n+\t \"\\r\\n\"] \\\n+    \"info tasks before inserting breakpoint\"\n+\n+# Insert a watchpoint that should stop only if task 3 stops, and\n+# extract its number.\n+set bp_number -1\n+set test \"watch -location value task 3\"\n+gdb_test_multiple $test $test {\n+    -re \"atchpoint ($decimal): -location value\\r\\n$gdb_prompt $\" {\n+\tset bp_number $expect_out(1,string)\n+\tpass $test\n+    }\n+}\n+\n+if {$bp_number < 0} {\n+    return\n+}\n+\n+# Continue to that watchpoint.  Task 2 should hit it first, and GDB\n+# is expected to ignore that hit and resume the execution.  Only then\n+# task 3 will hit our watchpoint, and GDB is expected to stop at that\n+# point.  Also make sure that GDB reports the correct watchpoint number.\n+gdb_test \"continue\" \\\n+    \".* hit .*atchpoint $bp_number: -location value.*Old value = 1.*New value = 2.*\" \\\n+    \"continue to watchpoint\"\n+\n+# Check that it is indeed task 3 that hit the watchpoint by checking\n+# which is the active task.\n+gdb_test \"info tasks\" \\\n+    [join {\" +ID +TID P-ID Pri State +Name\" \\\n+\t       \" +1 .* main_task\" \\\n+\t       \" +2 .* task_list\\\\(1\\\\)\" \\\n+\t       \"\\\\* +3 .* task_list\\\\(2\\\\)\" \\\n+\t       \" +4 .* task_list\\\\(3\\\\)\"} \\\n+\t \"\\r\\n\"] \\\n+    \"info tasks after hitting watchpoint\"\n+\n+# Now, resume the execution and make sure that GDB does not stop when\n+# task 4 hits the watchpoint. Continuing thus results in our program\n+# running to completion.\n+set bp_location [gdb_get_line_number \"STOP_HERE_2\" ${testdir}/foo.adb]\n+gdb_breakpoint foo.adb:$bp_location\n+gdb_continue_to_breakpoint second \".*foo.adb:$bp_location.*null; -- STOP_HERE_2\""
    },
    {
      "sha": "f3540ec05c7569aaef0644788d805fb19b9dc43f",
      "filename": "gdb/testsuite/gdb.ada/task_watch/foo.adb",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/testsuite/gdb.ada/task_watch/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a18382f94515b4be7e51dbe3865d202403d21d5/gdb/testsuite/gdb.ada/task_watch/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/task_watch/foo.adb?ref=8a18382f94515b4be7e51dbe3865d202403d21d5",
      "patch": "@@ -0,0 +1,73 @@\n+--  Copyright 2009-2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+procedure Foo is\n+\n+   Value : Integer := 0;\n+\n+   task type Caller is\n+      entry Initialize;\n+      entry Call_Break_Me;\n+      entry Finalize;\n+   end Caller;\n+   type Caller_Ptr is access Caller;\n+\n+   procedure Break_Me is\n+   begin\n+      Value := Value + 1;\n+   end Break_Me;\n+\n+   task body Caller is\n+   begin\n+      accept Initialize do\n+         null;\n+      end Initialize;\n+      accept Call_Break_Me do\n+         Break_Me;\n+      end Call_Break_Me;\n+      accept Finalize do\n+         null;\n+      end Finalize;\n+   end Caller;\n+\n+   Task_List : array (1 .. 3) of Caller_Ptr;\n+\n+begin\n+\n+   --  Start all our tasks, and call the \"Initialize\" entry to make\n+   --  sure all of them have now been started.  We call that entry\n+   --  immediately after having created the task in order to make sure\n+   --  that we wait for that task to be created before we try to create\n+   --  another one.  That way, we know that the order in our Task_List\n+   --  corresponds to the order in the GNAT runtime.\n+   for J in Task_List'Range loop\n+      Task_List (J) := new Caller;\n+      Task_List (J).Initialize;\n+   end loop;\n+\n+   --  Next, call their Call_Break_Me entry of each task, using the same\n+   --  order as the order used to create them.\n+   for J in Task_List'Range loop  -- STOP_HERE\n+      Task_List (J).Call_Break_Me;\n+   end loop;\n+\n+   --  And finally, let all the tasks die...\n+   for J in Task_List'Range loop\n+      Task_List (J).Finalize;\n+   end loop;\n+\n+   null; -- STOP_HERE_2\n+\n+end Foo;"
    }
  ]
}