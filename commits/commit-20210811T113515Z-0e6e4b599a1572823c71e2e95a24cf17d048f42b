{
  "sha": "0e6e4b599a1572823c71e2e95a24cf17d048f42b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGU2ZTRiNTk5YTE1NzI4MjNjNzFlMmU5NWEyNGNmMTdkMDQ4ZjQyYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-07-21T17:23:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-08-11T11:35:15Z"
    },
    "message": "gdb: don't print backtrace when dumping core after an internal error\n\nCurrently, when GDB hits an internal error, and the user selects to\ndump core, the recently added feature to write a backtrace to the\nconsole will kick in, and print a backtrace as well as dumping the\ncore.\n\nThis was certainly not my intention when adding the backtrace on fatal\nsignal functionality, this feature was intended to produce a backtrace\nwhen GDB crashes due to some fatal signal, internal errors should have\ncontinued to behave as they did before, unchanged.\n\nIn this commit I set the signal disposition of SIGABRT back to SIG_DFL\njust prior to the call to abort() that GDB uses to trigger the core\ndump, this prevents GDB reaching the code that writes the backtrace to\nthe console.\n\nI've also added a test that checks we don't see a backtrace on the\nconsole after an internal error.",
    "tree": {
      "sha": "4440aa092ad2b38dbf70c818814bb8fcda47a302",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4440aa092ad2b38dbf70c818814bb8fcda47a302"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e6e4b599a1572823c71e2e95a24cf17d048f42b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e6e4b599a1572823c71e2e95a24cf17d048f42b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e6e4b599a1572823c71e2e95a24cf17d048f42b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e6e4b599a1572823c71e2e95a24cf17d048f42b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d03277b79793adec2508d51f8d789cd3761d9b9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d03277b79793adec2508d51f8d789cd3761d9b9d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d03277b79793adec2508d51f8d789cd3761d9b9d"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 41,
    "deletions": 0
  },
  "files": [
    {
      "sha": "1f0d61f00ed5fe992253038f5c614510f72ac70c",
      "filename": "gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e6e4b599a1572823c71e2e95a24cf17d048f42b/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e6e4b599a1572823c71e2e95a24cf17d048f42b/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bt-on-fatal-signal.exp?ref=0e6e4b599a1572823c71e2e95a24cf17d048f42b",
      "patch": "@@ -135,3 +135,39 @@ foreach test_data {{SEGV \"Segmentation fault\"} \\\n \tgdb_exit\n     }\n }\n+\n+# Check that when we get an internal error and choose to dump core, we\n+# don't print a backtrace to the console.\n+with_test_prefix \"internal-error\" {\n+    # Restart GDB.\n+    clean_restart $binfile\n+\n+    set saw_bt_start false\n+\n+    gdb_test_multiple \"maint internal-error foo\" \"\" {\n+\t-early -re \"internal-error: foo\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-early -re \"^A problem internal to GDB has been detected,\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-early -re \"^further debugging may prove unreliable\\\\.\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-early -re \"^Quit this debugging session\\\\? \\\\(y or n\\\\)\" {\n+\t    send_gdb \"y\\n\"\n+\t    exp_continue\n+\t}\n+\t-early -re \"^Create a core file of GDB\\\\? \\\\(y or n\\\\)\" {\n+\t    send_gdb \"y\\n\"\n+\t    exp_continue\n+\t}\n+\t-early -re \"----- Backtrace -----\\r\\n\" {\n+\t    set saw_bt_start true\n+\t    exp_continue\n+\t}\n+\teof {\n+\t    gdb_assert { [expr ! $saw_bt_start] }\n+\t}\n+    }\n+}"
    },
    {
      "sha": "1c226d5d85e57aacd0568753d8c5d1bda9bf1394",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e6e4b599a1572823c71e2e95a24cf17d048f42b/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e6e4b599a1572823c71e2e95a24cf17d048f42b/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=0e6e4b599a1572823c71e2e95a24cf17d048f42b",
      "patch": "@@ -201,6 +201,11 @@ dump_core (void)\n   setrlimit (RLIMIT_CORE, &rlim);\n #endif /* HAVE_SETRLIMIT */\n \n+  /* Ensure that the SIGABRT we're about to raise will immediately cause\n+     GDB to exit and dump core, we don't want to trigger GDB's printing of\n+     a backtrace to the console here.  */\n+  signal (SIGABRT, SIG_DFL);\n+\n   abort ();\t\t/* ARI: abort */\n }\n "
    }
  ]
}