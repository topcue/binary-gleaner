{
  "sha": "950b74950f6020eda38647f22e9077ac7f68ca49",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTUwYjc0OTUwZjYwMjBlZGEzODY0N2YyMmU5MDc3YWM3ZjY4Y2E0OQ==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-10-16T18:33:59Z"
    },
    "committer": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-10-16T18:35:16Z"
    },
    "message": "DWARF reader: Reject sections with invalid sizes\n\nThis is another fuzzer bug, gdb/23567.  This time, the fuzzer has\nspecifically altered the size of .debug_str:\n\n$ eu-readelf -S objdump\nSection Headers:\n[Nr] Name                 Type         Addr             Off      Size     ES Flags Lk Inf Al\n[31] .debug_str           PROGBITS     0000000000000000 0057116d ffffffffffffffff  1 MS     0   0  1\n\nWhen this file is loaded into GDB, the DWARF reader crashes attempting\nto access the string table (or it may just store a bunch of nonsense):\n\n[gdb-8.3-6-fc30]\n$ gdb -nx -q objdump\nBFD: warning: /path/to/objdump has a corrupt section with a size (ffffffffffffffff) larger than the file size\nReading symbols from /path/to/objdump...\nSegmentation fault (core dumped)\n\nNick has already committed a BFD patch to issue the warning seen above.\n\n[gdb master 6acc1a0b]\n$ gdb -BFD: warning: /path/to/objdump has a corrupt section with a size (ffffffffffffffff) larger than the file size\nReading symbols from /path/to/objdump...\n(gdb) inf func\nAll defined functions:\n\nFile ./../include/dwarf2.def:\n186:\tconst\n\n              8 *>(.:\n                     ;'@\ufffdB);\n747:\tconst\n\n              8 *\ufffd(.:\n                     ;'@\ufffdB);\n701:\tconst\n\n              8 *\ufffdD \ufffd\n                     (.:\n                        ;'@\ufffdB);\n71:\tconst\n\n              8 *(.:\n                    ;'@\ufffdB);\n/* and more gibberish  */\n\nConsider read_indirect_string_at_offset_from:\n\nstatic const char *\nread_indirect_string_at_offset_from (struct objfile *objfile,\n                                     bfd *abfd, LONGEST str_offset,\n                                     struct dwarf2_section_info *sect,\n                                     const char *form_name,\n                                     const char *sect_name)\n{\n  dwarf2_read_section (objfile, sect);\n  if (sect->buffer == NULL)\n    error (_(\"%s used without %s section [in module %s]\"),\n           form_name, sect_name, bfd_get_filename (abfd));\n  if (str_offset >= sect->size)\n    error (_(\"%s pointing outside of %s section [in module %s]\"),\n           form_name, sect_name, bfd_get_filename (abfd));\n  gdb_assert (HOST_CHAR_BIT == 8);\n  if (sect->buffer[str_offset] == '\\0')\n    return NULL;\n  return (const char *) (sect->buffer + str_offset);\n}\n\nWith sect_size being ginormous, the code attempts to access\nsect->buffer[GINORMOUS], and depending on the layout of memory,\nGDB either stores a bunch of gibberish strings or crashes.\n\nThis is an attempt to mitigate this by implementing a similar approach\nused by BFD. In our case, we simply reject the section with the invalid\nlength:\n\n$ ./gdb -nx -q objdump\nBFD: warning: /path/to/objdump has a corrupt section with a size (ffffffffffffffff) larger than the file size\nReading symbols from /path/to/objdump...\n\nwarning: Discarding section .debug_str which has a section size (ffffffffffffffff) larger than the file size [in module /path/to/objdump]\nDW_FORM_strp used without .debug_str section [in module /path/to/objdump]\n(No debugging symbols found in /path/to/objdump)\n(gdb)\n\nUnfortunately, I have not found a way to regression test this, since it\nrequires poking ELF section headers.\n\ngdb/ChangeLog:\n2019-10-16  Keith Seitz  <keiths@redhat.com>\n\n\tPR gdb/23567\n\t* dwarf2read.c (dwarf2_per_objfile::locate_sections): Discard\n\tsections whose size is greater than the file size.\n\nChange-Id: I896ac3b4eb2207c54e8e05c16beab3051d9b4b2f",
    "tree": {
      "sha": "6179c525842b477617cbb1b97965222454e69ae6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6179c525842b477617cbb1b97965222454e69ae6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/950b74950f6020eda38647f22e9077ac7f68ca49",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/950b74950f6020eda38647f22e9077ac7f68ca49",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/950b74950f6020eda38647f22e9077ac7f68ca49",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/950b74950f6020eda38647f22e9077ac7f68ca49/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "ff371ec99988662e16b061fe0f66e989340f129a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff371ec99988662e16b061fe0f66e989340f129a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff371ec99988662e16b061fe0f66e989340f129a"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 15,
    "deletions": 0
  },
  "files": [
    {
      "sha": "d11dbfbfcfd391f8d9fa63359df625e53ed94146",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/950b74950f6020eda38647f22e9077ac7f68ca49/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/950b74950f6020eda38647f22e9077ac7f68ca49/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=950b74950f6020eda38647f22e9077ac7f68ca49",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-16  Keith Seitz  <keiths@redhat.com>\n+\n+\tPR gdb/23567\n+\t* dwarf2read.c (dwarf2_per_objfile::locate_sections): Discard\n+\tsections whose size is greater than the file size.\n+\n 2019-10-16  Jim Wilson  <jimw@sifive.com>\n \n \t* riscv-tdep.c (riscv_gcc_target_options): New."
    },
    {
      "sha": "a78f818e0e8734c2ae99ed734b7bf3fa178493ea",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/950b74950f6020eda38647f22e9077ac7f68ca49/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/950b74950f6020eda38647f22e9077ac7f68ca49/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=950b74950f6020eda38647f22e9077ac7f68ca49",
      "patch": "@@ -2338,6 +2338,15 @@ dwarf2_per_objfile::locate_sections (bfd *abfd, asection *sectp,\n   if ((aflag & SEC_HAS_CONTENTS) == 0)\n     {\n     }\n+  else if (elf_section_data (sectp)->this_hdr.sh_size\n+\t   > bfd_get_file_size (abfd))\n+    {\n+      bfd_size_type size = elf_section_data (sectp)->this_hdr.sh_size;\n+      warning (_(\"Discarding section %s which has a section size (%s\"\n+\t\t \") larger than the file size [in module %s]\"),\n+\t       bfd_section_name (sectp), phex_nz (size, sizeof (size)),\n+\t       bfd_get_filename (abfd));\n+    }\n   else if (section_is_p (sectp->name, &names.info))\n     {\n       this->info.s.section = sectp;"
    }
  ]
}