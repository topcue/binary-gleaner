{
  "sha": "d73be6116811aeaedd1863c2597ede78be3cf4e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDczYmU2MTE2ODExYWVhZWRkMTg2M2MyNTk3ZWRlNzhiZTNjZjRlNQ==",
  "commit": {
    "author": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-06-25T18:34:29Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-06-25T18:34:29Z"
    },
    "message": "cpu: fix offset16 type, update c-calls in bpf.cpu\n\nCorrect the type of the offset16 field to HI, and simplify memory\naccesses which use it. Also update c-calls in semantics for a\nfew instructions.\n\ncpu/ChangeLog:\n\n2020-06-25 David Faust  <david.faust@oracle.com>\n\n\t* bpf.cpu (f-offset16): Change type from INT to HI.\n\t(dxli): Simplify memory access.\n\t(dxsi): Likewise.\n\t(define-endian-insn): Update c-call in semantics.\n\t(dlabs) Likewise.\n\t(dlind) Likewise.",
    "tree": {
      "sha": "457e068b990ce46a75501faf06627297f583c59c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/457e068b990ce46a75501faf06627297f583c59c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d73be6116811aeaedd1863c2597ede78be3cf4e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d73be6116811aeaedd1863c2597ede78be3cf4e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d73be6116811aeaedd1863c2597ede78be3cf4e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d73be6116811aeaedd1863c2597ede78be3cf4e5/comments",
  "author": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d74da72dacdbbe2b87a6b931e0f7edc3d3463e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d74da72dacdbbe2b87a6b931e0f7edc3d3463e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d74da72dacdbbe2b87a6b931e0f7edc3d3463e3"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 15,
    "deletions": 14
  },
  "files": [
    {
      "sha": "591ac01f38b01a60fabb19608c0c46ad2b314a2e",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d73be6116811aeaedd1863c2597ede78be3cf4e5/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d73be6116811aeaedd1863c2597ede78be3cf4e5/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=d73be6116811aeaedd1863c2597ede78be3cf4e5",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-25 David Faust  <david.faust@oracle.com>\n+\n+\t* bpf.cpu (f-offset16): Change type from INT to HI.\n+\t(dxli): Simplify memory access.\n+\t(dxsi): Likewise.\n+\t(define-endian-insn): Update c-call in semantics.\n+\t(dlabs) Likewise.\n+\t(dlind) Likewise.\n+\n 2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* bpf.cpu (define-bpf-isa): Set base-insn-bitsize to 64."
    },
    {
      "sha": "95290f6f4e11a7a12c321ac61d774929fe29620e",
      "filename": "cpu/bpf.cpu",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d73be6116811aeaedd1863c2597ede78be3cf4e5/cpu/bpf.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d73be6116811aeaedd1863c2597ede78be3cf4e5/cpu/bpf.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.cpu?ref=d73be6116811aeaedd1863c2597ede78be3cf4e5",
      "patch": "@@ -273,7 +273,7 @@\n ;; difficulty: we put them in their own instruction word so the\n ;; byte-endianness will be properly applied.\n \n-(dwf f-offset16 \"eBPF offset field\" (all-isas) 16 16 15 16 INT)\n+(dwf f-offset16 \"eBPF offset field\" (all-isas) 16 16 15 16 HI)\n (dwf f-imm32 \"eBPF 32-bit immediate field\" (all-isas) 32 32 31 32 INT)\n \n ;; For the disjoint 64-bit signed immediate, however, we need to use a\n@@ -488,7 +488,7 @@\n        (+  (f-offset16 0) ((.sym f-src x-endian) 0) (.sym dst x-endian) endsize\n            OP_CLASS_ALU x-op-src OP_CODE_END)\n        (set (.sym dst x-endian)\n-            (c-call DI \"bpfbf_end\" (.sym dst x-endian) endsize))\n+            (c-call DI (.str \"bpfbf_end\" x-suffix) (.sym dst x-endian) endsize))\n        ()))\n \n (define-endian-insn \"le\" OP_SRC_K le)\n@@ -538,11 +538,7 @@\n                       (mem DI\n                            (add DI\n                                 (reg DI h-gpr 6) ;; Pointer to struct sk_buff\n-                                (const DI 0)))   ;; XXX offsetof\n-                      ;; (struct sk_buff, data) XXX but the offset\n-                      ;; depends on CONFIG_* options, so this should\n-                      ;; be configured in the simulator and driven by\n-                      ;; command-line options.  Handle with a c-call.\n+                                (c-call \"bpfbf_skb_data_offset\")))\n                       imm32)))\n        ;; XXX this clobbers R1-R5\n        ()))\n@@ -572,11 +568,7 @@\n                       (mem DI\n                            (add DI\n                                 (reg DI h-gpr 6) ;; Pointer to struct sk_buff\n-                                (const DI 0)))   ;; XXX offsetof\n-                      ;; (struct sk_buff, data) XXX but the offset\n-                      ;; depends on CONFIG_* options, so this should\n-                      ;; be configured in the simulator and driven by\n-                      ;; command-line options.  Handle with a c-call.\n+                                (c-call \"bpfbf_skb_data_offset\")))\n                       (add DI\n                            (.sym src x-endian)\n                            imm32))))\n@@ -612,7 +604,7 @@\n           OP_CLASS_LDX (.sym OP_SIZE_ x-size) OP_MODE_MEM)\n        (set x-mode\n             (.sym dst x-endian)\n-            (mem x-mode (add DI (.sym src x-endian) (ext DI (trunc HI offset16)))))\n+            (mem x-mode (add DI (.sym src x-endian) offset16)))\n        ()))\n \n (define-pmacro (dxsi x-basename x-suffix x-size x-endian x-mode)\n@@ -623,7 +615,7 @@\n        (+ (f-imm32 0) offset16 (.sym src x-endian) (.sym dst x-endian)\n           OP_CLASS_STX (.sym OP_SIZE_ x-size) OP_MODE_MEM)\n        (set x-mode\n-            (mem x-mode (add DI (.sym dst x-endian) (ext DI (trunc HI offset16))))\n+            (mem x-mode (add DI (.sym dst x-endian) offset16))\n             (.sym src x-endian)) ;; XXX address is section-relative\n        ()))\n "
    }
  ]
}