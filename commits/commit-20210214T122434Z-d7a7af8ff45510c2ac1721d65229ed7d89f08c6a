{
  "sha": "d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDdhN2FmOGZmNDU1MTBjMmFjMTcyMWQ2NTIyOWVkN2Q4OWYwOGM2YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-14T09:27:05Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-14T12:24:34Z"
    },
    "message": "Modernise _bfd_elf_mips_get_relocated_section_contents\n\nIn particular, bfd_get_full_section_contents rather than\nbfd_get_section_contents so that compressed sections are handled\nproperly.\n\nNecessary for mips if objdump is to not cache debug sections.\n\n\t* elfxx-mips.c (_bfd_elf_mips_get_relocated_section_contents): Apply\n\tall fixes to bfd_generic_get_relocated_section_contents since this\n\tfunction was split out.",
    "tree": {
      "sha": "4929d6045bc399f02f23b8eaee3727fed7865cfc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4929d6045bc399f02f23b8eaee3727fed7865cfc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1944212b426d2e13cc4bb24aa1a850bbc572e624",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1944212b426d2e13cc4bb24aa1a850bbc572e624",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1944212b426d2e13cc4bb24aa1a850bbc572e624"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 99,
    "deletions": 21
  },
  "files": [
    {
      "sha": "3563b65d8ff91e67ae03cd792b89e40db99765d1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-02-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfxx-mips.c (_bfd_elf_mips_get_relocated_section_contents): Apply\n+\tall fixes to bfd_generic_get_relocated_section_contents since this\n+\tfunction was split out.\n+\n 2021-02-11  Alan Modra  <amodra@gmail.com>\n \n \t* config.bfd: Remove ia64 from obsolete list."
    },
    {
      "sha": "86e15b61edf592d4ffe4f5e28befb5837f39260b",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 93,
      "deletions": 21,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7a7af8ff45510c2ac1721d65229ed7d89f08c6a/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=d7a7af8ff45510c2ac1721d65229ed7d89f08c6a",
      "patch": "@@ -13216,26 +13216,29 @@ _bfd_elf_mips_get_relocated_section_contents\n    bfd_boolean relocatable,\n    asymbol **symbols)\n {\n-  /* Get enough memory to hold the stuff */\n   bfd *input_bfd = link_order->u.indirect.section->owner;\n   asection *input_section = link_order->u.indirect.section;\n-  bfd_size_type sz;\n-\n-  long reloc_size = bfd_get_reloc_upper_bound (input_bfd, input_section);\n-  arelent **reloc_vector = NULL;\n+  long reloc_size;\n+  arelent **reloc_vector;\n   long reloc_count;\n \n+  reloc_size = bfd_get_reloc_upper_bound (input_bfd, input_section);\n   if (reloc_size < 0)\n-    goto error_return;\n+    return NULL;\n \n-  reloc_vector = bfd_malloc (reloc_size);\n-  if (reloc_vector == NULL && reloc_size != 0)\n-    goto error_return;\n+  /* Read in the section.  */\n+  if (!bfd_get_full_section_contents (input_bfd, input_section, &data))\n+    return NULL;\n \n-  /* read in the section */\n-  sz = input_section->rawsize ? input_section->rawsize : input_section->size;\n-  if (!bfd_get_section_contents (input_bfd, input_section, data, 0, sz))\n-    goto error_return;\n+  if (data == NULL)\n+    return NULL;\n+\n+  if (reloc_size == 0)\n+    return data;\n+\n+  reloc_vector = (arelent **) bfd_malloc (reloc_size);\n+  if (reloc_vector == NULL)\n+    return NULL;\n \n   reloc_count = bfd_canonicalize_reloc (input_bfd,\n \t\t\t\t\tinput_section,\n@@ -13292,26 +13295,69 @@ _bfd_elf_mips_get_relocated_section_contents\n \t  gp_found = 0;\n       }\n       /* end mips */\n+\n       for (parent = reloc_vector; *parent != NULL; parent++)\n \t{\n \t  char *error_message = NULL;\n+\t  asymbol *symbol;\n \t  bfd_reloc_status_type r;\n \n+\t  symbol = *(*parent)->sym_ptr_ptr;\n+\t  /* PR ld/19628: A specially crafted input file\n+\t     can result in a NULL symbol pointer here.  */\n+\t  if (symbol == NULL)\n+\t    {\n+\t      link_info->callbacks->einfo\n+\t\t/* xgettext:c-format */\n+\t\t(_(\"%X%P: %pB(%pA): error: relocation for offset %V has no value\\n\"),\n+\t\t abfd, input_section, (* parent)->address);\n+\t      goto error_return;\n+\t    }\n+\n+\t  /* Zap reloc field when the symbol is from a discarded\n+\t     section, ignoring any addend.  Do the same when called\n+\t     from bfd_simple_get_relocated_section_contents for\n+\t     undefined symbols in debug sections.  This is to keep\n+\t     debug info reasonably sane, in particular so that\n+\t     DW_FORM_ref_addr to another file's .debug_info isn't\n+\t     confused with an offset into the current file's\n+\t     .debug_info.  */\n+\t  if ((symbol->section != NULL && discarded_section (symbol->section))\n+\t      || (symbol->section == bfd_und_section_ptr\n+\t\t  && (input_section->flags & SEC_DEBUGGING) != 0\n+\t\t  && link_info->input_bfds == link_info->output_bfd))\n+\t    {\n+\t      bfd_vma off;\n+\t      static reloc_howto_type none_howto\n+\t\t= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,\n+\t\t\t \"unused\", FALSE, 0, 0, FALSE);\n+\n+\t      off = ((*parent)->address\n+\t\t     * bfd_octets_per_byte (input_bfd, input_section));\n+\t      _bfd_clear_contents ((*parent)->howto, input_bfd,\n+\t\t\t\t   input_section, data, off);\n+\t      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;\n+\t      (*parent)->addend = 0;\n+\t      (*parent)->howto = &none_howto;\n+\t      r = bfd_reloc_ok;\n+\t    }\n+\n \t  /* Specific to MIPS: Deal with relocation types that require\n \t     knowing the gp of the output bfd.  */\n-\t  asymbol *sym = *(*parent)->sym_ptr_ptr;\n \n \t  /* If we've managed to find the gp and have a special\n \t     function for the relocation then go ahead, else default\n \t     to the generic handling.  */\n-\t  if (gp_found\n-\t      && (*parent)->howto->special_function\n-\t      == _bfd_mips_elf32_gprel16_reloc)\n-\t    r = _bfd_mips_elf_gprel16_with_gp (input_bfd, sym, *parent,\n+\t  else if (gp_found\n+\t\t   && ((*parent)->howto->special_function\n+\t\t       == _bfd_mips_elf32_gprel16_reloc))\n+\t    r = _bfd_mips_elf_gprel16_with_gp (input_bfd, symbol, *parent,\n \t\t\t\t\t       input_section, relocatable,\n \t\t\t\t\t       data, gp);\n \t  else\n-\t    r = bfd_perform_relocation (input_bfd, *parent, data,\n+\t    r = bfd_perform_relocation (input_bfd,\n+\t\t\t\t\t*parent,\n+\t\t\t\t\tdata,\n \t\t\t\t\tinput_section,\n \t\t\t\t\trelocatable ? abfd : NULL,\n \t\t\t\t\t&error_message);\n@@ -13320,7 +13366,7 @@ _bfd_elf_mips_get_relocated_section_contents\n \t    {\n \t      asection *os = input_section->output_section;\n \n-\t      /* A partial link, so keep the relocs */\n+\t      /* A partial link, so keep the relocs.  */\n \t      os->orelocation[os->reloc_count] = *parent;\n \t      os->reloc_count++;\n \t    }\n@@ -13348,14 +13394,40 @@ _bfd_elf_mips_get_relocated_section_contents\n \t\t     input_bfd, input_section, (*parent)->address);\n \t\t  break;\n \t\tcase bfd_reloc_outofrange:\n+\t\t  /* PR ld/13730:\n+\t\t     This error can result when processing some partially\n+\t\t     complete binaries.  Do not abort, but issue an error\n+\t\t     message instead.  */\n+\t\t  link_info->callbacks->einfo\n+\t\t    /* xgettext:c-format */\n+\t\t    (_(\"%X%P: %pB(%pA): relocation \\\"%pR\\\" goes out of range\\n\"),\n+\t\t     abfd, input_section, * parent);\n+\t\t  goto error_return;\n+\n+\t\tcase bfd_reloc_notsupported:\n+\t\t  /* PR ld/17512\n+\t\t     This error can result when processing a corrupt binary.\n+\t\t     Do not abort.  Issue an error message instead.  */\n+\t\t  link_info->callbacks->einfo\n+\t\t    /* xgettext:c-format */\n+\t\t    (_(\"%X%P: %pB(%pA): relocation \\\"%pR\\\" is not supported\\n\"),\n+\t\t     abfd, input_section, * parent);\n+\t\t  goto error_return;\n+\n \t\tdefault:\n-\t\t  abort ();\n+\t\t  /* PR 17512; file: 90c2a92e.\n+\t\t     Report unexpected results, without aborting.  */\n+\t\t  link_info->callbacks->einfo\n+\t\t    /* xgettext:c-format */\n+\t\t    (_(\"%X%P: %pB(%pA): relocation \\\"%pR\\\" returns an unrecognized value %x\\n\"),\n+\t\t     abfd, input_section, * parent, r);\n \t\t  break;\n \t\t}\n \n \t    }\n \t}\n     }\n+\n   free (reloc_vector);\n   return data;\n "
    }
  ]
}