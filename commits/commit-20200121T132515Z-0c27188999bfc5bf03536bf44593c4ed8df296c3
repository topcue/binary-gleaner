{
  "sha": "0c27188999bfc5bf03536bf44593c4ed8df296c3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGMyNzE4ODk5OWJmYzViZjAzNTM2YmY0NDU5M2M0ZWQ4ZGYyOTZjMw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-09T19:04:36Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-21T13:25:15Z"
    },
    "message": "Fix step-over-syscall.exp failure\n\nIn particular, this one:\n\nFAIL: gdb.base/step-over-syscall.exp: fork: displaced=on: check_pc_after_cross_syscall: single step over fork final pc\n\nWhen ptrace fork event reporting is enabled, GDB gets a PTRACE_EVENT_FORK\nevent whenever the inferior executes the fork syscall.\n\nThen the logic is that GDB needs to step the inferior yet again in order to\nreceive a predetermined SIGTRAP, but no execution takes place because the\nsignal was already queued for delivery. That means the PC should stay the same.\n\nI noticed the aarch64 code is currently adjusting the PC in this situation,\nmaking the inferior skip an instruction without executing it.\n\nThe following change checks if we did not execute the instruction\n(pc - to == 0), making proper adjustments for such case.\n\nRegression tested on aarch64-linux-gnu on the tryserver.\n\ngdb/ChangeLog:\n\n2020-01-21  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-tdep.c (struct aarch64_displaced_step_closure )\n\t<pc_adjust>: Adjust the documentation.\n\t(aarch64_displaced_step_fixup): Check if PC really moved before\n\tadjusting it.",
    "tree": {
      "sha": "84eb2d1782b3d4bef8b5484a2540c1c98ce69c6e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/84eb2d1782b3d4bef8b5484a2540c1c98ce69c6e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c27188999bfc5bf03536bf44593c4ed8df296c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c27188999bfc5bf03536bf44593c4ed8df296c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c27188999bfc5bf03536bf44593c4ed8df296c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c27188999bfc5bf03536bf44593c4ed8df296c3/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1a0351246a5cfd4a425e0a32b6a1a94f3ce21f3f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a0351246a5cfd4a425e0a32b6a1a94f3ce21f3f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1a0351246a5cfd4a425e0a32b6a1a94f3ce21f3f"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 20,
    "deletions": 4
  },
  "files": [
    {
      "sha": "146767f06976aec890b03019bd4cadfb664ac59f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c27188999bfc5bf03536bf44593c4ed8df296c3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c27188999bfc5bf03536bf44593c4ed8df296c3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0c27188999bfc5bf03536bf44593c4ed8df296c3",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-21  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-tdep.c (struct aarch64_displaced_step_closure )\n+\t<pc_adjust>: Adjust the documentation.\n+\t(aarch64_displaced_step_fixup): Check if PC really moved before\n+\tadjusting it.\n+\n 2020-01-19  Tom Tromey  <tom@tromey.com>\n \n \t* disasm.c (~gdb_disassembler): New destructor."
    },
    {
      "sha": "fb7b8621ba20a05ea90552fe173d540b3e168c0f",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c27188999bfc5bf03536bf44593c4ed8df296c3/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c27188999bfc5bf03536bf44593c4ed8df296c3/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=0c27188999bfc5bf03536bf44593c4ed8df296c3",
      "patch": "@@ -2737,7 +2737,8 @@ struct aarch64_displaced_step_closure : public displaced_step_closure\n      is being displaced stepping.  */\n   int cond = 0;\n \n-  /* PC adjustment offset after displaced stepping.  */\n+  /* PC adjustment offset after displaced stepping.  If 0, then we don't\n+     write the PC back, assuming the PC is already the right address.  */\n   int32_t pc_adjust = 0;\n };\n \n@@ -3032,11 +3033,12 @@ aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n {\n   aarch64_displaced_step_closure *dsc = (aarch64_displaced_step_closure *) dsc_;\n \n+  ULONGEST pc;\n+\n+  regcache_cooked_read_unsigned (regs, AARCH64_PC_REGNUM, &pc);\n+\n   if (dsc->cond)\n     {\n-      ULONGEST pc;\n-\n-      regcache_cooked_read_unsigned (regs, AARCH64_PC_REGNUM, &pc);\n       if (pc - to == 8)\n \t{\n \t  /* Condition is true.  */\n@@ -3052,6 +3054,13 @@ aarch64_displaced_step_fixup (struct gdbarch *gdbarch,\n \n   if (dsc->pc_adjust != 0)\n     {\n+      /* Make sure the previous instruction was executed (that is, the PC\n+\t has changed).  If the PC didn't change, then discard the adjustment\n+\t offset.  Otherwise we may skip an instruction before its execution\n+\t took place.  */\n+      if ((pc - to) == 0)\n+\tdsc->pc_adjust = 0;\n+\n       if (debug_displaced)\n \t{\n \t  debug_printf (\"displaced: fixup: set PC to %s:%d\\n\","
    }
  ]
}