{
  "sha": "eb34d29be8766b7466becebdd94e8121e88a44d4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWIzNGQyOWJlODc2NmI3NDY2YmVjZWJkZDk0ZTgxMjFlODhhNDRkNA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:09:03Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:09:03Z"
    },
    "message": "x86: drop vex_scalar_w_dq_mode\n\nIt has only a single use and can easily be represented by dq_mode\ninstead. Plus its handling in intel_operand_size() was duplicating\nthat of vex_vsib_{d,q}_w_dq_mode anyway.",
    "tree": {
      "sha": "e82ff62e9f14291bd506cc7a38828e5f6ca7ade2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e82ff62e9f14291bd506cc7a38828e5f6ca7ade2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb34d29be8766b7466becebdd94e8121e88a44d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb34d29be8766b7466becebdd94e8121e88a44d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb34d29be8766b7466becebdd94e8121e88a44d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb34d29be8766b7466becebdd94e8121e88a44d4/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c1d66d5f24eb54a6453b3a813cbc7a7e0b5d15fe"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 41,
    "deletions": 51
  },
  "files": [
    {
      "sha": "5c24618bec4b44c3da0fdcaddda28bd2fcc38cc4",
      "filename": "opcodes/i386-dis-evex-prefix.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis-evex-prefix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis-evex-prefix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-prefix.h?ref=eb34d29be8766b7466becebdd94e8121e88a44d4",
      "patch": "@@ -358,7 +358,7 @@\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vfmsub132s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, 0 },\n+    { \"vfmsub132s%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexR }, 0 },\n     { \"v4fmaddss\",\t{ XMScalar, VexScalar, Mxmm }, 0 },\n   },\n   /* PREFIX_EVEX_0F38AA */\n@@ -372,6 +372,6 @@\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vfmsub213s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, 0 },\n+    { \"vfmsub213s%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexR }, 0 },\n     { \"v4fnmaddss\",\t{ XMScalar, VexScalar, Mxmm }, 0 },\n   },"
    },
    {
      "sha": "287c7a84635454914ec3ad356717f8336b1337d1",
      "filename": "opcodes/i386-dis-evex.h",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis-evex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis-evex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex.h?ref=eb34d29be8766b7466becebdd94e8121e88a44d4",
      "patch": "@@ -343,7 +343,7 @@ static const struct dis386 evex_table[][256] = {\n     { PREFIX_TABLE (PREFIX_EVEX_0F382A) },\n     { VEX_W_TABLE (EVEX_W_0F382B) },\n     { \"vscalefp%XW\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vscalefs%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vscalefs%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 30 */\n@@ -368,7 +368,7 @@ static const struct dis386 evex_table[][256] = {\n     { \"vpmull%DQ\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n     { Bad_Opcode },\n     { \"vgetexpp%XW\",\t{ XM, EXx, EXxEVexS }, PREFIX_DATA },\n-    { \"vgetexps%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS }, PREFIX_DATA },\n+    { \"vgetexps%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS }, PREFIX_DATA },\n     { \"vplzcnt%DQ\",\t{ XM, EXx }, PREFIX_DATA },\n     { \"vpsrlv%DQ\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n     { \"vpsrav%DQ\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n@@ -379,9 +379,9 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { \"vrcp14p%XW\",\t{ XM, EXx }, PREFIX_DATA },\n-    { \"vrcp14s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vrcp14s%XW\",\t{ XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vrsqrt14p%XW\",\t{ XM, EXx }, 0 },\n-    { \"vrsqrt14s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vrsqrt14s%XW\",\t{ XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     /* 50 */\n     { \"vpdpbusd\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n     { \"vpdpbusds\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n@@ -465,13 +465,13 @@ static const struct dis386 evex_table[][256] = {\n     { \"vfmsubadd132p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n     /* 98 */\n     { \"vfmadd132p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfmadd132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfmadd132s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { PREFIX_TABLE (PREFIX_EVEX_0F389A) },\n     { PREFIX_TABLE (PREFIX_EVEX_0F389B) },\n     { \"vfnmadd132p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmadd132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmadd132s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { \"vfnmsub132p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmsub132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmsub132s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     /* A0 */\n     { \"vpscatterd%DQ\",\t{ MVexVSIBDWpX, XM }, PREFIX_DATA },\n     { \"vpscatterq%DQ\",\t{ MVexVSIBQWpX, XMGatherQ }, PREFIX_DATA },\n@@ -483,13 +483,13 @@ static const struct dis386 evex_table[][256] = {\n     { \"vfmsubadd213p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n     /* A8 */\n     { \"vfmadd213p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfmadd213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfmadd213s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { PREFIX_TABLE (PREFIX_EVEX_0F38AA) },\n     { PREFIX_TABLE (PREFIX_EVEX_0F38AB) },\n     { \"vfnmadd213p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmadd213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmadd213s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { \"vfnmsub213p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmsub213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmsub213s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     /* B0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -501,13 +501,13 @@ static const struct dis386 evex_table[][256] = {\n     { \"vfmsubadd231p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n     /* B8 */\n     { \"vfmadd231p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfmadd231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfmadd231s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { \"vfmsub231p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfmsub231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfmsub231s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { \"vfnmadd231p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmadd231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmadd231s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     { \"vfnmsub231p%XW\", { XM, Vex, EXx, EXxEVexR }, PREFIX_DATA },\n-    { \"vfnmsub231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar, EXxEVexR }, PREFIX_DATA },\n+    { \"vfnmsub231s%XW\", { XMScalar, VexScalar, EXdq, EXxEVexR }, PREFIX_DATA },\n     /* C0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -521,9 +521,9 @@ static const struct dis386 evex_table[][256] = {\n     { \"vexp2p%XW\",        { XM, EXx, EXxEVexS }, PREFIX_DATA },\n     { Bad_Opcode },\n     { \"vrcp28p%XW\",       { XM, EXx, EXxEVexS }, PREFIX_DATA },\n-    { \"vrcp28s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS }, PREFIX_DATA },\n+    { \"vrcp28s%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS }, PREFIX_DATA },\n     { \"vrsqrt28p%XW\",     { XM, EXx, EXxEVexS }, PREFIX_DATA },\n-    { \"vrsqrt28s%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS }, PREFIX_DATA },\n+    { \"vrsqrt28s%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS }, PREFIX_DATA },\n     { Bad_Opcode },\n     { VEX_W_TABLE (VEX_W_0F38CF) },\n     /* D0 */\n@@ -627,7 +627,7 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     { \"vpternlog%DQ\",\t{ XM, Vex, EXx, Ib }, PREFIX_DATA },\n     { \"vgetmantp%XW\",\t{ XM, EXx, EXxEVexS, Ib }, PREFIX_DATA },\n-    { \"vgetmants%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vgetmants%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS, Ib }, PREFIX_DATA },\n     /* 28 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -675,13 +675,13 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     /* 50 */\n     { \"vrangep%XW\",\t{ XM, Vex, EXx, EXxEVexS, Ib }, PREFIX_DATA },\n-    { \"vranges%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vranges%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS, Ib }, PREFIX_DATA },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { \"vfixupimmp%XW\",\t{ XM, Vex, EXx, EXxEVexS, Ib }, PREFIX_DATA },\n-    { \"vfixupimms%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vfixupimms%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS, Ib }, PREFIX_DATA },\n     { \"vreducep%XW\",\t{ XM, EXx, EXxEVexS, Ib }, PREFIX_DATA },\n-    { \"vreduces%XW\",\t{ XMScalar, VexScalar, EXVexWdqScalar, EXxEVexS, Ib }, PREFIX_DATA },\n+    { \"vreduces%XW\",\t{ XMScalar, VexScalar, EXdq, EXxEVexS, Ib }, PREFIX_DATA },\n     /* 58 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -699,7 +699,7 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { \"vfpclassp%XW%XZ\",\t{ MaskG, EXx, Ib }, PREFIX_DATA },\n-    { \"vfpclasss%XW\",\t{ MaskG, EXVexWdqScalar, Ib }, PREFIX_DATA },\n+    { \"vfpclasss%XW\",\t{ MaskG, EXdq, Ib }, PREFIX_DATA },\n     /* 68 */\n     { Bad_Opcode },\n     { Bad_Opcode },"
    },
    {
      "sha": "6efc15b851b62faa872a8d3e07dd0c8e58e68ccd",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 18,
      "deletions": 28,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb34d29be8766b7466becebdd94e8121e88a44d4/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=eb34d29be8766b7466becebdd94e8121e88a44d4",
      "patch": "@@ -358,6 +358,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EXdS { OP_EX, d_swap_mode }\n #define EXq { OP_EX, q_mode }\n #define EXqS { OP_EX, q_swap_mode }\n+#define EXdq { OP_EX, dq_mode }\n #define EXx { OP_EX, x_mode }\n #define EXxS { OP_EX, x_swap_mode }\n #define EXxmm { OP_EX, xmm_mode }\n@@ -368,7 +369,6 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EXxmmdw { OP_EX, xmmdw_mode }\n #define EXxmmqd { OP_EX, xmmqd_mode }\n #define EXymmq { OP_EX, ymmq_mode }\n-#define EXVexWdqScalar { OP_EX, vex_scalar_w_dq_mode }\n #define EXEvexXGscat { OP_EX, evex_x_gscat_mode }\n #define EXEvexXNoBcst { OP_EX, evex_x_nobcst_mode }\n #define MS { OP_MS, v_mode }\n@@ -507,7 +507,7 @@ enum\n   v_bnd_mode,\n   /* like v_bnd_mode in 32bit, no RIP-rel in 64bit mode.  */\n   v_bndmk_mode,\n-  /* operand size depends on REX prefixes.  */\n+  /* operand size depends on REX.W / VEX.W.  */\n   dq_mode,\n   /* registers like dq_mode, memory like w_mode, displacements like\n      v_mode without considering Intel64 ISA.  */\n@@ -545,8 +545,6 @@ enum\n \n   /* scalar, ignore vector length.  */\n   scalar_mode,\n-  /* Operand size depends on the VEX.W bit, ignore vector length.  */\n-  vex_scalar_w_dq_mode,\n \n   /* Static rounding.  */\n   evex_rounding_mode,\n@@ -6300,13 +6298,13 @@ static const struct dis386 vex_table[][256] = {\n     { \"vfmsubadd132p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n     /* 98 */\n     { \"vfmadd132p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmadd132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmadd132s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfmsub132p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmsub132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmsub132s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmadd132p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmadd132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmadd132s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmsub132p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmsub132s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmsub132s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     /* a0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -6318,13 +6316,13 @@ static const struct dis386 vex_table[][256] = {\n     { \"vfmsubadd213p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n     /* a8 */\n     { \"vfmadd213p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmadd213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmadd213s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfmsub213p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmsub213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmsub213s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmadd213p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmadd213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmadd213s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmsub213p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmsub213s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmsub213s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     /* b0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -6336,13 +6334,13 @@ static const struct dis386 vex_table[][256] = {\n     { \"vfmsubadd231p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n     /* b8 */\n     { \"vfmadd231p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmadd231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmadd231s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfmsub231p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfmsub231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfmsub231s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmadd231p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmadd231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmadd231s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     { \"vfnmsub231p%XW\", { XM, Vex, EXx }, PREFIX_DATA },\n-    { \"vfnmsub231s%XW\", { XMScalar, VexScalar, EXVexWdqScalar }, PREFIX_DATA },\n+    { \"vfnmsub231s%XW\", { XMScalar, VexScalar, EXdq }, PREFIX_DATA },\n     /* c0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -11170,15 +11168,6 @@ intel_operand_size (int bytemode, int sizeflag)\n     case o_mode:\n       oappend (\"OWORD PTR \");\n       break;\n-    case vex_scalar_w_dq_mode:\n-      if (!need_vex)\n-\tabort ();\n-\n-      if (vex.w)\n-\toappend (\"QWORD PTR \");\n-      else\n-\toappend (\"DWORD PTR \");\n-      break;\n     case vex_vsib_d_w_dq_mode:\n     case vex_vsib_q_w_dq_mode:\n       if (!need_vex)\n@@ -11371,7 +11360,6 @@ OP_E_memory (int bytemode, int sizeflag)\n \t      break;\n \t    }\n \t    /* fall through */\n-\tcase vex_scalar_w_dq_mode:\n \tcase vex_vsib_d_w_dq_mode:\n \tcase vex_vsib_q_w_dq_mode:\n \tcase evex_x_gscat_mode:\n@@ -12496,8 +12484,7 @@ print_vector_reg (unsigned int reg, int bytemode)\n \t   && bytemode != b_mode\n \t   && bytemode != w_mode\n \t   && bytemode != d_mode\n-\t   && bytemode != q_mode\n-\t   && bytemode != vex_scalar_w_dq_mode)\n+\t   && bytemode != q_mode)\n     {\n       switch (vex.length)\n \t{\n@@ -12627,6 +12614,9 @@ OP_EX (int bytemode, int sizeflag)\n   MODRM_CHECK;\n   codep++;\n \n+  if (bytemode == dq_mode)\n+    bytemode = vex.w ? q_mode : d_mode;\n+\n   if (modrm.mod != 3)\n     {\n       OP_E_memory (bytemode, sizeflag);"
    }
  ]
}