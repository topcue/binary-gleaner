{
  "sha": "4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGMwNDg3MzEwMzA0M2RjOWExYzhkNmNkZWVhMWI5YjFmNTQ1ZjM3NQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-13T14:22:44Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-13T14:22:44Z"
    },
    "message": "Fix \"set integer-command unlimited junk\"\n\nWith integer commands that support \"unlimited\", we currently fail to\nnotice junk after \"unlimited\":\n\n (gdb) show print elements\n Limit on string chars or array elements to print is 200.\n (gdb) set print elements unlimited foo\n (gdb) show print elements\n Limit on string chars or array elements to print is unlimited.\n\nThis commit fixes that.  After, we get:\n\n (gdb) set print elements unlimited foo\n Junk after \"unlimited\": foo\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* cli/cli-setshow.c (cli/cli-setshow.c): New parameter\n\t'expression'.  When parsing an expression, error out if there's\n\tjunk after \"unlimited\".\n\t(parse_cli_var_uinteger, parse_cli_var_zuinteger_unlimited)\n\t(do_set_command): Adjust calls to is_unlimited_literal.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/settings.exp (test-integer): Test junk after\n\t\"unlimited\".",
    "tree": {
      "sha": "f4adcab2e6f1551d7fa9e95d1c6d9acdc8cdccae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f4adcab2e6f1551d7fa9e95d1c6d9acdc8cdccae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57a63d27dcc8c7620f2168b370b649c7458c687e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57a63d27dcc8c7620f2168b370b649c7458c687e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57a63d27dcc8c7620f2168b370b649c7458c687e"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 43,
    "deletions": 4
  },
  "files": [
    {
      "sha": "91f3b7549ab3276b2aa8623c9133952b9d4badc0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* cli/cli-setshow.c (cli/cli-setshow.c): New parameter\n+\t'expression'.  When parsing an expression, error out if there's\n+\tjunk after \"unlimited\".\n+\t(parse_cli_var_uinteger, parse_cli_var_zuinteger_unlimited)\n+\t(do_set_command): Adjust calls to is_unlimited_literal.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* compile/compile.c (make_compile_options_def_group): Add braces"
    },
    {
      "sha": "8199fa7c0b0199ea21b5e37637ec26bf791aac84",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
      "patch": "@@ -150,17 +150,32 @@ deprecated_show_value_hack (struct ui_file *ignore_file,\n /* Returns true if ARG is \"unlimited\".  */\n \n static bool\n-is_unlimited_literal (const char **arg)\n+is_unlimited_literal (const char **arg, bool expression)\n {\n   *arg = skip_spaces (*arg);\n \n+  const char *unl_start = *arg;\n+\n   const char *p = skip_to_space (*arg);\n \n   size_t len = p - *arg;\n \n   if (len > 0 && strncmp (\"unlimited\", *arg, len) == 0)\n     {\n       *arg += len;\n+\n+      /* If parsing an expression (i.e., parsing for a \"set\" command),\n+\t anything after \"unlimited\" is junk.  For options, anything\n+\t after \"unlimited\" might be a command argument or another\n+\t option.  */\n+      if (expression)\n+\t{\n+\t  const char *after = skip_spaces (*arg);\n+\t  if (*after != '\\0')\n+\t    error (_(\"Junk after \\\"%.*s\\\": %s\"),\n+\t\t   (int) len, unl_start, after);\n+\t}\n+\n       return true;\n     }\n \n@@ -183,7 +198,7 @@ parse_cli_var_uinteger (var_types var_type, const char **arg,\n \terror_no_arg (_(\"integer to set it to.\"));\n     }\n \n-  if (var_type == var_uinteger && is_unlimited_literal (arg))\n+  if (var_type == var_uinteger && is_unlimited_literal (arg, expression))\n     val = 0;\n   else if (expression)\n     val = parse_and_eval_long (*arg);\n@@ -213,7 +228,7 @@ parse_cli_var_zuinteger_unlimited (const char **arg, bool expression)\n   if (*arg == nullptr)\n     error_no_arg (_(\"integer to set it to, or \\\"unlimited\\\".\"));\n \n-  if (is_unlimited_literal (arg))\n+  if (is_unlimited_literal (arg, expression))\n     val = -1;\n   else if (expression)\n     val = parse_and_eval_long (*arg);\n@@ -448,7 +463,7 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \t      error_no_arg (_(\"integer to set it to.\"));\n \t  }\n \n-\tif (c->var_type == var_integer && is_unlimited_literal (&arg))\n+\tif (c->var_type == var_integer && is_unlimited_literal (&arg, true))\n \t  val = 0;\n \telse\n \t  val = parse_and_eval_long (arg);"
    },
    {
      "sha": "37e327d9f2adabcb42f945db920a233f4b1af1c0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/settings.exp (test-integer): Test junk after\n+\t\"unlimited\".\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/options.exp (test-thread-apply): New."
    },
    {
      "sha": "aeca67c0e7fcdbf05f5abdf37542430fb9ddac58",
      "filename": "gdb/testsuite/gdb.base/settings.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/testsuite/gdb.base/settings.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c04873103043dc9a1c8d6cdeea1b9b1f545f375/gdb/testsuite/gdb.base/settings.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/settings.exp?ref=4c04873103043dc9a1c8d6cdeea1b9b1f545f375",
      "patch": "@@ -141,8 +141,19 @@ proc test-integer {variant} {\n \t    \"$set_cmd unlimited\"\n     }\n \n+    # Check junk after \"unlimited\".\n     gdb_test \"$set_cmd unlimitedu\" \"No symbol table is loaded.*\"\n \n+    if {$variant == \"zinteger\" || $variant == \"zuinteger\"} {\n+\tgdb_test \"$set_cmd unlimited u\" \"No symbol table is loaded.*\"\n+\tgdb_test \"$set_cmd unlimited 1\" \"No symbol table is loaded.*\"\n+\tgdb_test \"$set_cmd unlimited -1\" \"No symbol table is loaded.*\"\n+    } else {\n+\tgdb_test \"$set_cmd unlimited u\" \"Junk after \\\"unlimited\\\": u\"\n+\tgdb_test \"$set_cmd unlimited 1\" \"Junk after \\\"unlimited\\\": 1\"\n+\tgdb_test \"$set_cmd unlimited -1\" \"Junk after \\\"unlimited\\\": -1\"\n+    }\n+\n     test_gdb_complete_none \"$set_cmd unlimited \"\n     test_gdb_complete_none \"$set_cmd unlimitedu\"\n     test_gdb_complete_none \"$set_cmd unlimited u\""
    }
  ]
}