{
  "sha": "39498edbc850409c332dd5be60a82d1bf704bc8f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk0OThlZGJjODUwNDA5YzMzMmRkNWJlNjBhODJkMWJmNzA0YmM4Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:52Z"
    },
    "message": "gdb: remove TYPE_ARRAY_{UPPER,LOWER}_BOUND_IS_UNDEFINED\n\nRemove the macros, use the various equivalent getters instead.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED,\n\tTYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED): Remove.  Update all\n\tcallers to use the equivalent accessor methods instead.\n\nChange-Id: Ifb4c36f440b82533bde5d15a5cbb2fc91f467292",
    "tree": {
      "sha": "a02e5fa6f5e7e742aad3da678648b80be17a22f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a02e5fa6f5e7e742aad3da678648b80be17a22f3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39498edbc850409c332dd5be60a82d1bf704bc8f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39498edbc850409c332dd5be60a82d1bf704bc8f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39498edbc850409c332dd5be60a82d1bf704bc8f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39498edbc850409c332dd5be60a82d1bf704bc8f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3b606f384df54adb8e70dd678cd9a4c9759e4122"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 20,
    "deletions": 17
  },
  "files": [
    {
      "sha": "e17a61ee063648dc6c12c03f65b3c6e3e4272b68",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED,\n+\tTYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED): Remove.  Update all\n+\tcallers to use the equivalent accessor methods instead.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_LOW_BOUND_KIND,"
    },
    {
      "sha": "2bcfe8672eb712dabc3c481aa6a935b84114dfc9",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -192,7 +192,7 @@ c_number_of_children (const struct varobj *var)\n     {\n     case TYPE_CODE_ARRAY:\n       if (TYPE_LENGTH (type) > 0 && TYPE_LENGTH (target) > 0\n-\t  && !TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+\t  && (type->index_type ()->bounds ()->high.kind () != PROP_UNDEFINED))\n \tchildren = TYPE_LENGTH (type) / TYPE_LENGTH (target);\n       else\n \t/* If we don't know how many elements there are, don't display"
    },
    {
      "sha": "df83a481386a4e28a7a0f72240883d203046d0d6",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -223,7 +223,7 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \t  /* Make sure that, if we have an assumed size array, we\n \t       print out a warning and print the upperbound as '*'.  */\n \n-\t  if (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+\t  if (type->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED)\n \t    fprintf_filtered (stream, \"*\");\n \t  else\n \t    {\n@@ -408,7 +408,7 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n     case TYPE_CODE_STRING:\n       /* Strings may have dynamic upperbounds (lengths) like arrays.  */\n \n-      if (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+      if (type->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED)\n \tfprintfi_filtered (level, stream, \"character*(*)\");\n       else\n \t{"
    },
    {
      "sha": "05f98bc3505279c2e3abc2f534935b6f03f7b28e",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -46,7 +46,7 @@ int f77_array_offset_tbl[MAX_FORTRAN_DIMS + 1][2];\n LONGEST\n f77_get_lowerbound (struct type *type)\n {\n-  if (TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED (type))\n+  if (type->index_type ()->bounds ()->low.kind () == PROP_UNDEFINED)\n     error (_(\"Lower bound may not be '*' in F77\"));\n \n   return TYPE_ARRAY_LOWER_BOUND_VALUE (type);\n@@ -55,7 +55,7 @@ f77_get_lowerbound (struct type *type)\n LONGEST\n f77_get_upperbound (struct type *type)\n {\n-  if (TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+  if (type->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED)\n     {\n       /* We have an assumed size array on our hands.  Assume that\n \t upper_bound == lower_bound so that we show at least 1 element."
    },
    {
      "sha": "83432b6fc7785eb98fdda78d32a2f2d22f39b891",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -1628,11 +1628,6 @@ extern bool set_type_align (struct type *, ULONGEST);\n /* Accessors for struct range_bounds data attached to an array type's\n    index type.  */\n \n-#define TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED(arraytype) \\\n-   ((arraytype)->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED)\n-#define TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED(arraytype) \\\n-   ((arraytype)->index_type ()->bounds ()->low.kind () == PROP_UNDEFINED)\n-\n #define TYPE_ARRAY_UPPER_BOUND_VALUE(arraytype) \\\n    ((arraytype)->index_type ()->bounds ()->high.const_val ())\n "
    },
    {
      "sha": "474e58725c7f58e7292359bdcf401feb9f4f16d6",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -226,7 +226,7 @@ static void m2_array (struct type *type, struct ui_file *stream,\n {\n   fprintf_filtered (stream, \"ARRAY [\");\n   if (TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0\n-      && !TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+      && type->index_type ()->bounds ()->high.kind () != PROP_UNDEFINED)\n     {\n       if (type->index_type () != 0)\n \t{"
    },
    {
      "sha": "5a32667603b7e2431aa5962457fcf664a8d2d153",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -274,7 +274,7 @@ pascal_type_print_varspec_prefix (struct type *type, struct ui_file *stream,\n \tfprintf_filtered (stream, \"(\");\n       fprintf_filtered (stream, \"array \");\n       if (TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0\n-\t&& !TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+\t  && type->index_type ()->bounds ()->high.kind () != PROP_UNDEFINED)\n \tfprintf_filtered (stream, \"[%s..%s] \",\n \t\t\t  plongest (TYPE_ARRAY_LOWER_BOUND_VALUE (type)),\n \t\t\t  plongest (TYPE_ARRAY_UPPER_BOUND_VALUE (type)));"
    },
    {
      "sha": "0b1f43f2e009e23921b67527b81adc9d38ce461c",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -200,12 +200,13 @@ value_subscripted_rvalue (struct value *array, LONGEST index, LONGEST lowerbound\n     }\n \n   LONGEST elt_offs = elt_size * (index - lowerbound);\n+  bool array_upper_bound_undefined\n+    = array_type->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED;\n \n   if (index < lowerbound\n-      || (!TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (array_type)\n-          && elt_offs >= type_length_units (array_type))\n-      || (VALUE_LVAL (array) != lval_memory\n-          && TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (array_type)))\n+      || (!array_upper_bound_undefined\n+\t  && elt_offs >= type_length_units (array_type))\n+      || (VALUE_LVAL (array) != lval_memory && array_upper_bound_undefined))\n     {\n       if (type_not_associated (array_type))\n         error (_(\"no such vector element (vector not associated)\"));"
    },
    {
      "sha": "cfa0f5415d2e6c6f4c8d998bbda74c42d9c734d0",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39498edbc850409c332dd5be60a82d1bf704bc8f/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=39498edbc850409c332dd5be60a82d1bf704bc8f",
      "patch": "@@ -388,7 +388,8 @@ value_cast (struct type *type, struct value *arg2)\n       struct type *element_type = TYPE_TARGET_TYPE (type);\n       unsigned element_length = TYPE_LENGTH (check_typedef (element_type));\n \n-      if (element_length > 0 && TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n+      if (element_length > 0\n+\t  && type->index_type ()->bounds ()->high.kind () == PROP_UNDEFINED)\n \t{\n \t  struct type *range_type = type->index_type ();\n \t  int val_length = TYPE_LENGTH (type2);"
    }
  ]
}