{
  "sha": "38583298e0ab81ab78689d89abcb5122e0251c74",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzg1ODMyOThlMGFiODFhYjc4Njg5ZDg5YWJjYjUxMjJlMDI1MWM3NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-25T17:53:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-02T15:53:17Z"
    },
    "message": "Change SYMBOL_VALUE_ADDRESS to be an rvalue\n\nThis changes SYMBOL_VALUE_ADDRESS to be an rvalue.  The symbol readers\ngenerally assign using this, so this also introduces\nSET_SYMBOL_VALUE_ADDRESS and updates the readers.  Making this change\nis useful in a subsequent patch, which redefined SYMBOL_VALUE_ADDRESS.\n\ngdb/ChangeLog\n2019-10-02  Tom Tromey  <tromey@adacore.com>\n\n\t* coffread.c (process_coff_symbol): Update.\n\t* dwarf2read.c (var_decode_location, new_symbol): Update.\n\t* mdebugread.c (parse_symbol): Update.\n\t* objfiles.c (relocate_one_symbol): Update.\n\t* stabsread.c (define_symbol, fix_common_block)\n\t(scan_file_globals): Update.\n\t* symtab.h (SYMBOL_VALUE_ADDRESS): Expand to an rvalue.\n\t(SET_SYMBOL_VALUE_ADDRESS): New macro.\n\t* xcoffread.c (process_xcoff_symbol): Update.",
    "tree": {
      "sha": "2b36a7aa7b2874177aacd6ce83ad7b0f4256ab99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b36a7aa7b2874177aacd6ce83ad7b0f4256ab99"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/38583298e0ab81ab78689d89abcb5122e0251c74",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38583298e0ab81ab78689d89abcb5122e0251c74",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/38583298e0ab81ab78689d89abcb5122e0251c74",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38583298e0ab81ab78689d89abcb5122e0251c74/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9344c18feb0ef3dfacfd1d0437c0d1e329feaa83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9344c18feb0ef3dfacfd1d0437c0d1e329feaa83",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9344c18feb0ef3dfacfd1d0437c0d1e329feaa83"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 58,
    "deletions": 29
  },
  "files": [
    {
      "sha": "aa524630831a81a99140b12d23ee07617f34bbbb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* coffread.c (process_coff_symbol): Update.\n+\t* dwarf2read.c (var_decode_location, new_symbol): Update.\n+\t* mdebugread.c (parse_symbol): Update.\n+\t* objfiles.c (relocate_one_symbol): Update.\n+\t* stabsread.c (define_symbol, fix_common_block)\n+\t(scan_file_globals): Update.\n+\t* symtab.h (SYMBOL_VALUE_ADDRESS): Expand to an rvalue.\n+\t(SET_SYMBOL_VALUE_ADDRESS): New macro.\n+\t* xcoffread.c (process_xcoff_symbol): Update.\n+\n 2019-10-02  Andreas Arnez  <arnez@linux.ibm.com>\n \n \t* MAINTAINERS: Update my email address."
    },
    {
      "sha": "869a32b2c199255fae08287d73963f8dc932316a",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -1609,19 +1609,21 @@ process_coff_symbol (struct coff_symbol *cs,\n \tcase C_THUMBEXTFUNC:\n \tcase C_EXT:\n \t  SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n-\t  SYMBOL_VALUE_ADDRESS (sym) = (CORE_ADDR) cs->c_value;\n-\t  SYMBOL_VALUE_ADDRESS (sym) += ANOFFSET (objfile->section_offsets,\n-\t\t\t\t\t\t  SECT_OFF_TEXT (objfile));\n+\t  SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\t    (CORE_ADDR) cs->c_value\n+\t\t\t\t    + ANOFFSET (objfile->section_offsets,\n+\t\t\t\t\t\tSECT_OFF_TEXT (objfile)));\n \t  add_symbol_to_list (sym, get_global_symbols ());\n \t  break;\n \n \tcase C_THUMBSTAT:\n \tcase C_THUMBSTATFUNC:\n \tcase C_STAT:\n \t  SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n-\t  SYMBOL_VALUE_ADDRESS (sym) = (CORE_ADDR) cs->c_value;\n-\t  SYMBOL_VALUE_ADDRESS (sym) += ANOFFSET (objfile->section_offsets,\n-\t\t\t\t\t\t  SECT_OFF_TEXT (objfile));\n+\t  SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\t    (CORE_ADDR) cs->c_value\n+\t\t\t\t    + ANOFFSET (objfile->section_offsets,\n+\t\t\t\t\t\tSECT_OFF_TEXT (objfile)));\n \t  if (within_function)\n \t    {\n \t      /* Static symbol of local scope.  */"
    },
    {
      "sha": "f10f384f628d95ed912cdf3af5d90a1a0911e6e2",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -21495,15 +21495,20 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n       unsigned int dummy;\n \n       if (DW_BLOCK (attr)->data[0] == DW_OP_addr)\n-\tSYMBOL_VALUE_ADDRESS (sym) =\n-\t  read_address (objfile->obfd, DW_BLOCK (attr)->data + 1, cu, &dummy);\n+\tSET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\t  read_address (objfile->obfd,\n+\t\t\t\t\t\tDW_BLOCK (attr)->data + 1,\n+\t\t\t\t\t\tcu, &dummy));\n       else\n-\tSYMBOL_VALUE_ADDRESS (sym) =\n-\t  read_addr_index_from_leb128 (cu, DW_BLOCK (attr)->data + 1, &dummy);\n+\tSET_SYMBOL_VALUE_ADDRESS\n+\t  (sym, read_addr_index_from_leb128 (cu, DW_BLOCK (attr)->data + 1,\n+\t\t\t\t\t     &dummy));\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n       fixup_symbol_section (sym, objfile);\n-      SYMBOL_VALUE_ADDRESS (sym) += ANOFFSET (objfile->section_offsets,\n-\t\t\t\t\t      SYMBOL_SECTION (sym));\n+      SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\tSYMBOL_VALUE_ADDRESS (sym)\n+\t\t\t\t+ ANOFFSET (objfile->section_offsets,\n+\t\t\t\t\t    SYMBOL_SECTION (sym)));\n       return;\n     }\n \n@@ -21617,7 +21622,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \n \t      addr = attr_value_as_address (attr);\n \t      addr = gdbarch_adjust_dwarf2_addr (gdbarch, addr + baseaddr);\n-\t      SYMBOL_VALUE_ADDRESS (sym) = addr;\n+\t      SET_SYMBOL_VALUE_ADDRESS (sym, addr);\n \t    }\n \t  SYMBOL_TYPE (sym) = objfile_type (objfile)->builtin_core_addr;\n \t  SYMBOL_DOMAIN (sym) = LABEL_DOMAIN;"
    },
    {
      "sha": "eed714636dc1fda7710bca6d008a48c790d09a17",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -632,7 +632,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       b = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (top_stack->cur_st),\n \t\t\t     GLOBAL_BLOCK);\n       s = new_symbol (name);\n-      SYMBOL_VALUE_ADDRESS (s) = (CORE_ADDR) sh->value;\n+      SET_SYMBOL_VALUE_ADDRESS (s, (CORE_ADDR) sh->value);\n       add_data_symbol (sh, ax, bigend, s, LOC_STATIC, b, objfile, name);\n       break;\n \n@@ -649,7 +649,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t  global_sym_chain[bucket] = s;\n \t}\n       else\n-\tSYMBOL_VALUE_ADDRESS (s) = (CORE_ADDR) sh->value;\n+\tSET_SYMBOL_VALUE_ADDRESS (s, (CORE_ADDR) sh->value);\n       add_data_symbol (sh, ax, bigend, s, LOC_STATIC, b, objfile, name);\n       break;\n \n@@ -706,7 +706,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       s = new_symbol (name);\n       SYMBOL_DOMAIN (s) = VAR_DOMAIN;\t/* So that it can be used */\n       SYMBOL_ACLASS_INDEX (s) = LOC_LABEL;\t/* but not misused.  */\n-      SYMBOL_VALUE_ADDRESS (s) = (CORE_ADDR) sh->value;\n+      SET_SYMBOL_VALUE_ADDRESS (s, (CORE_ADDR) sh->value);\n       SYMBOL_TYPE (s) = objfile_type (objfile)->builtin_int;\n       add_symbol (s, top_stack->cur_st, top_stack->cur_block);\n       break;"
    },
    {
      "sha": "f9e7d20bab5e525d5ff6356ed6a349ad0611b02a",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -707,7 +707,9 @@ relocate_one_symbol (struct symbol *sym, struct objfile *objfile,\n        || SYMBOL_CLASS (sym) == LOC_STATIC)\n       && SYMBOL_SECTION (sym) >= 0)\n     {\n-      SYMBOL_VALUE_ADDRESS (sym) += ANOFFSET (delta, SYMBOL_SECTION (sym));\n+      SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\tSYMBOL_VALUE_ADDRESS (sym)\n+\t\t\t\t+ ANOFFSET (delta, SYMBOL_SECTION (sym)));\n     }\n }\n "
    },
    {
      "sha": "da455da36587f2978876dacded5fba1d2fc96c6d",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -942,7 +942,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_LABEL;\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n-      SYMBOL_VALUE_ADDRESS (sym) = valu;\n+      SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1188,7 +1188,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* Static symbol at top level of file.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n-      SYMBOL_VALUE_ADDRESS (sym) = valu;\n+      SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n       if (gdbarch_static_transform_name_p (gdbarch)\n \t  && gdbarch_static_transform_name (gdbarch,\n \t\t\t\t\t    SYMBOL_LINKAGE_NAME (sym))\n@@ -1204,7 +1204,8 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t\t(gdbarch, SYMBOL_LINKAGE_NAME (sym));\n \n \t      SYMBOL_SET_LINKAGE_NAME (sym, new_name);\n-\t      SYMBOL_VALUE_ADDRESS (sym) = BMSYMBOL_VALUE_ADDRESS (msym);\n+\t      SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\t\tBMSYMBOL_VALUE_ADDRESS (msym));\n \t    }\n \t}\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n@@ -1380,7 +1381,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* Static symbol of local scope.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n-      SYMBOL_VALUE_ADDRESS (sym) = valu;\n+      SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n       if (gdbarch_static_transform_name_p (gdbarch)\n \t  && gdbarch_static_transform_name (gdbarch,\n \t\t\t\t\t    SYMBOL_LINKAGE_NAME (sym))\n@@ -1396,7 +1397,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t\t(gdbarch, SYMBOL_LINKAGE_NAME (sym));\n \n \t      SYMBOL_SET_LINKAGE_NAME (sym, new_name);\n-\t      SYMBOL_VALUE_ADDRESS (sym) = BMSYMBOL_VALUE_ADDRESS (msym);\n+\t      SET_SYMBOL_VALUE_ADDRESS (sym, BMSYMBOL_VALUE_ADDRESS (msym));\n \t    }\n \t}\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n@@ -4363,7 +4364,9 @@ fix_common_block (struct symbol *sym, CORE_ADDR valu)\n       int j;\n \n       for (j = next->nsyms - 1; j >= 0; j--)\n-\tSYMBOL_VALUE_ADDRESS (next->symbol[j]) += valu;\n+\tSET_SYMBOL_VALUE_ADDRESS (next->symbol[j],\n+\t\t\t\t  SYMBOL_VALUE_ADDRESS (next->symbol[j])\n+\t\t\t\t  + valu);\n     }\n }\n \f\n@@ -4641,8 +4644,9 @@ scan_file_globals (struct objfile *objfile)\n \t\t\t}\n \t\t      else\n \t\t\t{\n-\t\t\t  SYMBOL_VALUE_ADDRESS (sym)\n-\t\t\t    = MSYMBOL_VALUE_ADDRESS (resolve_objfile, msymbol);\n+\t\t\t  SET_SYMBOL_VALUE_ADDRESS\n+\t\t\t    (sym, MSYMBOL_VALUE_ADDRESS (resolve_objfile,\n+\t\t\t\t\t\t\t msymbol));\n \t\t\t}\n \t\t      SYMBOL_SECTION (sym) = MSYMBOL_SECTION (msymbol);\n \t\t    }\n@@ -4680,7 +4684,7 @@ scan_file_globals (struct objfile *objfile)\n \n \t  /* Change the symbol address from the misleading chain value\n \t     to address zero.  */\n-\t  SYMBOL_VALUE_ADDRESS (prev) = 0;\n+\t  SET_SYMBOL_VALUE_ADDRESS (prev, 0);\n \n \t  /* Complain about unresolved common block symbols.  */\n \t  if (SYMBOL_CLASS (prev) == LOC_STATIC)"
    },
    {
      "sha": "e9024a0a7397d70259e343dd456f10b8133c1028",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -463,7 +463,9 @@ extern CORE_ADDR symbol_overlayed_address (CORE_ADDR, struct obj_section *);\n    field only, instead of the SYMBOL parameter.  */\n \n #define SYMBOL_VALUE(symbol)\t\t(symbol)->ginfo.value.ivalue\n-#define SYMBOL_VALUE_ADDRESS(symbol)\t(symbol)->ginfo.value.address\n+#define SYMBOL_VALUE_ADDRESS(symbol)\t((symbol)->ginfo.value.address + 0)\n+#define SET_SYMBOL_VALUE_ADDRESS(symbol, new_value)\t\\\n+  ((symbol)->ginfo.value.address = (new_value))\n #define SYMBOL_VALUE_BYTES(symbol)\t(symbol)->ginfo.value.bytes\n #define SYMBOL_VALUE_COMMON_BLOCK(symbol) (symbol)->ginfo.value.common_block\n #define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->ginfo.value.block"
    },
    {
      "sha": "aec19237214a1598195d0a9b2d18adb62fba9a6c",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/38583298e0ab81ab78689d89abcb5122e0251c74/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=38583298e0ab81ab78689d89abcb5122e0251c74",
      "patch": "@@ -1576,7 +1576,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n   initialize_objfile_symbol (sym);\n \n   /* default assumptions */\n-  SYMBOL_VALUE_ADDRESS (sym) = cs->c_value + off;\n+  SET_SYMBOL_VALUE_ADDRESS (sym, cs->c_value + off);\n   SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n   SYMBOL_SECTION (sym) = secnum_to_section (cs->c_secnum, objfile);\n \n@@ -1674,7 +1674,9 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n \t\t\t       cs->c_name, 0, 0, objfile);\n \t  if (sym != NULL)\n \t    {\n-\t      SYMBOL_VALUE_ADDRESS (sym) += static_block_base;\n+\t      SET_SYMBOL_VALUE_ADDRESS (sym,\n+\t\t\t\t\tSYMBOL_VALUE_ADDRESS (sym)\n+\t\t\t\t\t+ static_block_base);\n \t      SYMBOL_SECTION (sym) = static_block_section;\n \t    }\n \t  return sym;"
    }
  ]
}