{
  "sha": "9e820dec13ec153f5843a30afe6d1c5037405278",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWU4MjBkZWMxM2VjMTUzZjU4NDNhMzBhZmU2ZDFjNTAzNzQwNTI3OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-28T02:30:30Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-28T02:30:32Z"
    },
    "message": "Use a curses pad for source and disassembly windows\n\nThis changes the TUI source and disassembly windows to use a curses\npad for their text.  This is an important step toward properly\nhandling non-ASCII characters, because it makes it easy to scroll\nhorizontally without needing gdb to also understand multi-byte\ncharacter boundaries -- this can be wholly delegated to curses.\nHorizontal scrolling is probably also faster now, because no\nre-rendering is required.\n\ngdb/ChangeLog\n2020-09-27  Tom Tromey  <tom@tromey.com>\n\n\t* unittests/tui-selftests.c: Update.\n\t* tui/tui-winsource.h (struct tui_source_window_base)\n\t<extra_margin, show_line_number, refresh_pad>: New methods.\n\t<m_max_length, m_pad>: New members.\n\t(tui_copy_source_line): Update.\n\t* tui/tui-winsource.c (tui_copy_source_line): Remove line_no,\n\tfirst_col, line_width, ndigits parameters.  Add length.\n\t(tui_source_window_base::show_source_line): Write to pad.  Line\n\tnumber now 0-based.\n\t(tui_source_window_base::refresh_pad): New method.\n\t(tui_source_window_base::show_source_content): Write to pad.  Call\n\trefresh_pad.\n\t(tui_source_window_base::do_scroll_horizontal): Call refresh_pad,\n\tnot refill.\n\t(tui_source_window_base::update_exec_info): Call\n\tshow_line_number.\n\t* tui/tui-source.h (struct tui_source_window) <extra_margin>: New\n\tmethod.\n\t<m_digits>: New member.\n\t* tui/tui-source.c (tui_source_window::set_contents): Set m_digits\n\tand m_max_length.\n\t(tui_source_window::show_line_number): New method.\n\t* tui/tui-io.h (tui_puts): Fix comment.\n\t* tui/tui-disasm.c (tui_disasm_window::set_contents): Set\n\tm_max_length.",
    "tree": {
      "sha": "4dd4ccdadf25c5eb5781d4034cc5be52e109d32a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4dd4ccdadf25c5eb5781d4034cc5be52e109d32a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e820dec13ec153f5843a30afe6d1c5037405278",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e820dec13ec153f5843a30afe6d1c5037405278",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e820dec13ec153f5843a30afe6d1c5037405278",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e820dec13ec153f5843a30afe6d1c5037405278/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c15c15c8d998af6676562d15b9a1f1dcac1fa3ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c15c15c8d998af6676562d15b9a1f1dcac1fa3ea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c15c15c8d998af6676562d15b9a1f1dcac1fa3ea"
    }
  ],
  "stats": {
    "total": 211,
    "additions": 140,
    "deletions": 71
  },
  "files": [
    {
      "sha": "38b9fa6b353e5be3776cfdf122b5545eb0f496d0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -1,3 +1,31 @@\n+2020-09-27  Tom Tromey  <tom@tromey.com>\n+\n+\t* unittests/tui-selftests.c: Update.\n+\t* tui/tui-winsource.h (struct tui_source_window_base)\n+\t<extra_margin, show_line_number, refresh_pad>: New methods.\n+\t<m_max_length, m_pad>: New members.\n+\t(tui_copy_source_line): Update.\n+\t* tui/tui-winsource.c (tui_copy_source_line): Remove line_no,\n+\tfirst_col, line_width, ndigits parameters.  Add length.\n+\t(tui_source_window_base::show_source_line): Write to pad.  Line\n+\tnumber now 0-based.\n+\t(tui_source_window_base::refresh_pad): New method.\n+\t(tui_source_window_base::show_source_content): Write to pad.  Call\n+\trefresh_pad.\n+\t(tui_source_window_base::do_scroll_horizontal): Call refresh_pad,\n+\tnot refill.\n+\t(tui_source_window_base::update_exec_info): Call\n+\tshow_line_number.\n+\t* tui/tui-source.h (struct tui_source_window) <extra_margin>: New\n+\tmethod.\n+\t<m_digits>: New member.\n+\t* tui/tui-source.c (tui_source_window::set_contents): Set m_digits\n+\tand m_max_length.\n+\t(tui_source_window::show_line_number): New method.\n+\t* tui/tui-io.h (tui_puts): Fix comment.\n+\t* tui/tui-disasm.c (tui_disasm_window::set_contents): Set\n+\tm_max_length.\n+\n 2020-09-27  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.c"
    },
    {
      "sha": "0b7980ee80b3a5d7113648e21c5db30b9fa2b4d2",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -318,8 +318,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \t\t\t\t const struct symtab_and_line &sal)\n {\n   int i;\n-  int offset = m_horizontal_offset;\n-  int max_lines, line_width;\n+  int max_lines;\n   CORE_ADDR cur_pc;\n   struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n   int tab_len = tui_tab_width;\n@@ -336,7 +335,6 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \n   /* Window size, excluding highlight box.  */\n   max_lines = height - 2;\n-  line_width = width - TUI_EXECINFO_SIZE - 2;\n \n   /* Get temporary table that will hold all strings (addr & insn).  */\n   std::vector<tui_asm_line> asm_lines;\n@@ -348,6 +346,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \n   /* Now construct each line.  */\n   m_content.resize (max_lines);\n+  m_max_length = -1;\n   for (i = 0; i < max_lines; i++)\n     {\n       tui_source_element *src = &m_content[i];\n@@ -370,7 +369,9 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \t}\n \n       const char *ptr = line.c_str ();\n-      src->line = tui_copy_source_line (&ptr, -1, offset, line_width, 0);\n+      int line_len;\n+      src->line = tui_copy_source_line (&ptr, &line_len);\n+      m_max_length = std::max (m_max_length, line_len);\n \n       src->line_or_addr.loa = LOA_ADDRESS;\n       src->line_or_addr.u.addr = addr;"
    },
    {
      "sha": "5e21bb7811dda8e08139a59c22d827607dc9e278",
      "filename": "gdb/tui/tui-io.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-io.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-io.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.h?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -27,7 +27,8 @@\n struct ui_out;\n class cli_ui_out;\n \n-/* Print the string in the curses command window.  */\n+/* Print the string in the given curses window.  If no window is\n+   provided, the command window is used.  */\n extern void tui_puts (const char *, WINDOW * = nullptr);\n \n /* Print LENGTH characters from the buffer pointed to by BUF to the"
    },
    {
      "sha": "cc6680406d9bee6656c3b1b78feeadb138af97df",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -50,12 +50,9 @@ tui_source_window::set_contents (struct gdbarch *arch,\n   if (s == NULL)\n     return false;\n \n-  int line_width, nlines;\n-\n-  line_width = width - TUI_EXECINFO_SIZE - 1;\n   /* Take hilite (window border) into account, when\n      calculating the number of lines.  */\n-  nlines = height - 2;\n+  int nlines = height - 2;\n \n   std::string srclines;\n   const std::vector<off_t> *offsets;\n@@ -78,15 +75,16 @@ tui_source_window::set_contents (struct gdbarch *arch,\n   m_start_line_or_addr.loa = LOA_LINE;\n   cur_line_no = m_start_line_or_addr.u.line_no = line_no;\n \n-  int digits = 0;\n+  m_digits = 7;\n   if (compact_source)\n     {\n       /* Solaris 11+gcc 5.5 has ambiguous overloads of log10, so we\n \t cast to double to get the right one.  */\n       double l = log10 ((double) offsets->size ());\n-      digits = 1 + (int) l;\n+      m_digits = 1 + (int) l;\n     }\n \n+  m_max_length = -1;\n   const char *iter = srclines.c_str ();\n   m_content.resize (nlines);\n   while (cur_line < nlines)\n@@ -95,9 +93,11 @@ tui_source_window::set_contents (struct gdbarch *arch,\n \n       std::string text;\n       if (*iter != '\\0')\n-\ttext = tui_copy_source_line (&iter, cur_line_no,\n-\t\t\t\t     m_horizontal_offset,\n-\t\t\t\t     line_width, digits);\n+\t{\n+\t  int line_len;\n+\t  text = tui_copy_source_line (&iter, &line_len);\n+\t  m_max_length = std::max (m_max_length, line_len);\n+\t}\n \n       /* Set whether element is the execution point\n \t and whether there is a break point on it.  */\n@@ -225,3 +225,14 @@ tui_source_window::display_start_addr (struct gdbarch **gdbarch_p,\n   *gdbarch_p = m_gdbarch;\n   find_line_pc (cursal.symtab, m_start_line_or_addr.u.line_no, addr_p);\n }\n+\n+/* See tui-winsource.h.  */\n+\n+void\n+tui_source_window::show_line_number (int offset) const\n+{\n+  int lineno = m_content[0].line_or_addr.u.line_no + offset;\n+  char text[20];\n+  xsnprintf (text, sizeof (text), \"%*d \", m_digits - 1, lineno);\n+  waddstr (handle.get (), text);\n+}"
    },
    {
      "sha": "020f710c2374056433fe27ddc7ea3ed021d1cf1f",
      "filename": "gdb/tui/tui-source.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.h?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -63,12 +63,23 @@ struct tui_source_window : public tui_source_window_base\n   bool set_contents (struct gdbarch *gdbarch,\n \t\t     const struct symtab_and_line &sal) override;\n \n+  int extra_margin () const override\n+  {\n+    return m_digits;\n+  }\n+\n+  void show_line_number (int lineno) const override;\n+\n private:\n \n   /* Answer whether a particular line number or address is displayed\n      in the current source window.  */\n   bool line_is_displayed (int line) const;\n \n+  /* How many digits to use when formatting the line number.  This\n+     includes the trailing space.  */\n+  int m_digits;\n+\n   /* It is the resolved form as returned by symtab_to_fullname.  */\n   gdb::unique_xmalloc_ptr<char> m_fullname;\n };"
    },
    {
      "sha": "2300b9ab1e923a0edbe0816b1dc75c2687e85898",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 41,
      "deletions": 43,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -65,27 +65,13 @@ tui_display_main ()\n /* See tui-winsource.h.  */\n \n std::string\n-tui_copy_source_line (const char **ptr, int line_no, int first_col,\n-\t\t      int line_width, int ndigits)\n+tui_copy_source_line (const char **ptr, int *length)\n {\n   const char *lineptr = *ptr;\n \n   /* Init the line with the line number.  */\n   std::string result;\n \n-  if (line_no > 0)\n-    {\n-      if (ndigits > 0)\n-\tresult = string_printf (\"%*d \", ndigits, line_no);\n-      else\n-\t{\n-\t  result = string_printf (\"%-6d\", line_no);\n-\t  int len = result.size ();\n-\t  len = len - ((len / tui_tab_width) * tui_tab_width);\n-\t  result.append (len, ' ');\n-\t}\n-    }\n-\n   int column = 0;\n   char c;\n   do\n@@ -112,21 +98,11 @@ tui_copy_source_line (const char **ptr, int line_no, int first_col,\n \n \t  --column;\n \t  for (int j = column % max_tab_len;\n-\t       j < max_tab_len && column < first_col + line_width;\n+\t       j < max_tab_len;\n \t       column++, j++)\n-\t    if (column >= first_col)\n-\t      result.push_back (' ');\n+\t    result.push_back (' ');\n \t};\n \n-      /* We have to process all the text in order to pick up all the\n-\t escapes.  */\n-      if (column <= first_col || column > first_col + line_width)\n-\t{\n-\t  if (c == '\\t')\n-\t    process_tab ();\n-\t  continue;\n-\t}\n-\n       if (c == '\\n' || c == '\\r' || c == '\\0')\n \t{\n \t  /* Nothing.  */\n@@ -135,11 +111,13 @@ tui_copy_source_line (const char **ptr, int line_no, int first_col,\n \t{\n \t  result.push_back ('^');\n \t  result.push_back (c + 0100);\n+\t  ++column;\n \t}\n       else if (c == 0177)\n \t{\n \t  result.push_back ('^');\n \t  result.push_back ('?');\n+\t  ++column;\n \t}\n       else if (c == '\\t')\n \tprocess_tab ();\n@@ -152,6 +130,9 @@ tui_copy_source_line (const char **ptr, int line_no, int first_col,\n     ++lineptr;\n   *ptr = lineptr;\n \n+  if (length != nullptr)\n+    *length = column;\n+\n   return result;\n }\n \n@@ -254,35 +235,50 @@ void\n tui_source_window_base::show_source_line (int lineno)\n {\n   struct tui_source_element *line;\n-  int x;\n \n-  line = &m_content[lineno - 1];\n+  line = &m_content[lineno];\n   if (line->is_exec_point)\n-    tui_set_reverse_mode (handle.get (), true);\n+    tui_set_reverse_mode (m_pad.get (), true);\n \n-  wmove (handle.get (), lineno, TUI_EXECINFO_SIZE);\n-  tui_puts (line->line.c_str (), handle.get ());\n+  wmove (m_pad.get (), lineno, 0);\n+  tui_puts (line->line.c_str (), m_pad.get ());\n   if (line->is_exec_point)\n-    tui_set_reverse_mode (handle.get (), false);\n+    tui_set_reverse_mode (m_pad.get (), false);\n+}\n \n-  /* Clear to end of line but stop before the border.  */\n-  x = getcurx (handle.get ());\n-  while (x + 1 < width)\n-    {\n-      waddch (handle.get (), ' ');\n-      x = getcurx (handle.get ());\n-    }\n+/* See tui-winsource.h.  */\n+\n+void\n+tui_source_window_base::refresh_pad ()\n+{\n+  int pad_width = std::max (m_max_length, width);\n+  int left_margin = 1 + TUI_EXECINFO_SIZE + extra_margin ();\n+  int view_width = width - left_margin - 1;\n+  int pad_x = std::min (pad_width - view_width, m_horizontal_offset);\n+  /* Ensure that an equal number of scrolls will work if the user\n+     scrolled beyond where we clip.  */\n+  m_horizontal_offset = pad_x;\n+  prefresh (m_pad.get (), 0, pad_x, y + 1, x + left_margin,\n+\t    y + 1 + m_content.size (), x + left_margin + view_width - 1);\n }\n \n void\n tui_source_window_base::show_source_content ()\n {\n   gdb_assert (!m_content.empty ());\n \n-  for (int lineno = 1; lineno <= m_content.size (); lineno++)\n+  check_and_display_highlight_if_needed ();\n+\n+  int pad_width = std::max (m_max_length, width);\n+  if (m_pad == nullptr || pad_width > getmaxx (m_pad.get ()))\n+    m_pad.reset (newpad (m_content.size (), pad_width));\n+\n+  werase (m_pad.get ());\n+  for (int lineno = 0; lineno < m_content.size (); lineno++)\n     show_source_line (lineno);\n \n-  check_and_display_highlight_if_needed ();\n+  refresh_pad ();\n+\n   refresh_window ();\n }\n \n@@ -380,7 +376,7 @@ tui_source_window_base::do_scroll_horizontal (int num_to_scroll)\n       if (offset < 0)\n \toffset = 0;\n       m_horizontal_offset = offset;\n-      refill ();\n+      refresh_pad ();\n     }\n }\n \n@@ -519,6 +515,8 @@ tui_source_window_base::update_exec_info ()\n \telement[TUI_EXEC_POS] = '>';\n \n       mvwaddstr (handle.get (), i + 1, 1, element);\n+\n+      show_line_number (i);\n     }\n   refresh_window ();\n }"
    },
    {
      "sha": "5fc6a6d812662ece0f09491d2dae560394df6997",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 30,
      "deletions": 11,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -107,6 +107,20 @@ struct tui_source_window_base : public tui_win_info\n   virtual bool set_contents (struct gdbarch *gdbarch,\n \t\t\t     const struct symtab_and_line &sal) = 0;\n \n+  /* Return the number of extra margin characters needed by this\n+     instance.  */\n+  virtual int extra_margin () const\n+  {\n+    return 0;\n+  }\n+\n+  /* Display the line number in the window margin.  OFFSET indicates\n+     which line to display; it is 0-based, with 0 meaning the line at\n+     the top of the window.  */\n+  virtual void show_line_number (int offset) const\n+  {\n+  }\n+\n   /* Redraw the complete line of a source or disassembly window.  */\n   void show_source_line (int lineno);\n \n@@ -119,6 +133,9 @@ struct tui_source_window_base : public tui_win_info\n \n   std::vector<tui_source_element> m_content;\n \n+  /* Length of longest line to be displayed.  */\n+  int m_max_length;\n+\n public:\n \n   /* Refill the source window's source cache and update it.  If this\n@@ -162,11 +179,17 @@ struct tui_source_window_base : public tui_win_info\n \n   void show_source_content ();\n \n+  /* Re-display the pad in the window.  */\n+  void refresh_pad ();\n+\n   /* Called when the user \"set style enabled\" setting is changed.  */\n   void style_changed ();\n \n   /* A token used to register and unregister an observer.  */\n   gdb::observers::token m_observable;\n+\n+  /* Pad used to display fixme mumble  */\n+  std::unique_ptr<WINDOW, curses_deleter> m_pad;\n };\n \n \n@@ -264,19 +287,15 @@ extern void tui_display_main (void);\n extern void tui_update_source_windows_with_addr (struct gdbarch *, CORE_ADDR);\n extern void tui_update_source_windows_with_line (struct symtab_and_line sal);\n \n-/* Extract some source text from PTR.  LINE_NO is the line number.  If\n-   it is positive, it is printed at the start of the line.  FIRST_COL\n-   is the first column to extract, and LINE_WIDTH is the number of\n-   characters to display.  NDIGITS is used to format the line number\n-   (if it is positive).  If NDIGITS is greater than 0, then that many\n-   digits are used; otherwise the line number is formatted with 6\n-   digits and the text is aligned to the next tab stop.  Returns a\n-   string holding the desired text.  PTR is updated to point to the\n-   start of the next line.  */\n+/* Extract some source text from PTR.  Returns a string holding the\n+   desired text.  PTR is updated to point to the start of the next\n+   line.  If LENGTH is non-NULL, then the length of the line is stored\n+   there.  Escape sequences are not counted against the length.\n+   Actually an approximation is used -- each byte of a multi-byte\n+   sequence counts as a character here.  */\n \n extern std::string tui_copy_source_line (const char **ptr,\n-\t\t\t\t\t int line_no, int first_col,\n-\t\t\t\t\t int line_width, int ndigits);\n+\t\t\t\t\t int *length = nullptr);\n \n /* Constant definitions. */\n #define SCROLL_THRESHOLD 2\t/* Threshold for lazy scroll.  */"
    },
    {
      "sha": "7ab2a634b6129229350a071258afc70825d44706",
      "filename": "gdb/unittests/tui-selftests.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/unittests/tui-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e820dec13ec153f5843a30afe6d1c5037405278/gdb/unittests/tui-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/tui-selftests.c?ref=9e820dec13ec153f5843a30afe6d1c5037405278",
      "patch": "@@ -31,13 +31,13 @@ static void\n run_tests ()\n {\n   const char *text = \"hello\";\n-  std::string result = tui_copy_source_line (&text, 0, 0, 50, 0);\n+  std::string result = tui_copy_source_line (&text);\n   SELF_CHECK (result == \"hello\");\n   SELF_CHECK (*text == '\\0');\n \n   text = \"hello\\n\";\n-  result = tui_copy_source_line (&text, 0, 0, 3, 0);\n-  SELF_CHECK (result == \"hel\");\n+  result = tui_copy_source_line (&text);\n+  SELF_CHECK (result == \"hello\");\n   SELF_CHECK (*text == '\\0');\n }\n "
    }
  ]
}