{
  "sha": "b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjllOTIwZWNkNmY2NWJkMzc5MTdiMmY5ZTZkM2ZlZDljOGE2MGY2Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-20T04:29:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-20T07:33:19Z"
    },
    "message": "readelf.c display_lto_symtab offset outside bounds of constant string\n\nUsing gcc-10 or current mainline gcc, binutils configured with\n--disable-nls results in:\n\nreadelf.c: In function 'display_lto_symtab':\nreadelf.c:12283:26: error: offset '17' outside bounds of constant string [-Werror=array-bounds]\n12283 |   SECTION_NAME (section) + strlen (\".gnu.lto_.symtab.\")) > 0\n      |                          ^\n\nWhich is actually a bogus warning in this case because we've already\nchecked the name string for validity, so SECTION_NAME won't ever be\n\"<none>\", \"<no-strings>\" or \"<corrupt>\".  This patch fixes the problem\nby making SECTION_NAME simply return the string from the string table.\nOther places also shouldn't be trying to match any of the error\nstrings against a section name, so fix them too.\n\n\t* readelf.c: Delete whitespace at end of line throughout.\n\t(SECTION_NAME, SECTION_NAME_VALID): New.\n\t(SECTION_NAME_PRINT): Rename from SECTION_NAME.  Formatting.\n\t(printable_section_name, dump_relocations): Use SECTION_NAME_PRINT.\n\t(process_section_headers, process_section_groups): Likewise.\n\t(shdr_to_ctf_sect): Likewise.\n\t(find_section, find_section_in_set): Use SECTION_NAME_VALID.\n\t(ia64_process_unwind, hppa_process_unwind): Likewise.\n\t(display_debug_section, initialise_dumps_byname): Likewise.\n\t(process_lto_symbol_tables): Likewise.  Check trailing period of\n\tlto symbol table names.\n\t(display_lto_symtab): Use sizeof instead of strlen.",
    "tree": {
      "sha": "96973238c3e2fd9ef143ee1efd73308f6a78951d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/96973238c3e2fd9ef143ee1efd73308f6a78951d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce786647f0c54c9ca61bb6790a1d52a1c4781f82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce786647f0c54c9ca61bb6790a1d52a1c4781f82",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce786647f0c54c9ca61bb6790a1d52a1c4781f82"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 77,
    "deletions": 37
  },
  "files": [
    {
      "sha": "b297de9667c382963a4ab8bb7149a4077bf991f9",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
      "patch": "@@ -1,3 +1,18 @@\n+2020-10-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c: Delete whitespace at end of line throughout.\n+\t(SECTION_NAME, SECTION_NAME_VALID): New.\n+\t(SECTION_NAME_PRINT): Rename from SECTION_NAME.  Formatting.\n+\t(printable_section_name, dump_relocations): Use SECTION_NAME_PRINT.\n+\t(process_section_headers, process_section_groups): Likewise.\n+\t(shdr_to_ctf_sect): Likewise.\n+\t(find_section, find_section_in_set): Use SECTION_NAME_VALID.\n+\t(ia64_process_unwind, hppa_process_unwind): Likewise.\n+\t(display_debug_section, initialise_dumps_byname): Likewise.\n+\t(process_lto_symbol_tables): Likewise.  Check trailing period of\n+\tlto symbol table names.\n+\t(display_lto_symtab): Use sizeof instead of strlen.\n+\n 2020-10-20  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* MAINTAINERS (RISC-V): Add myself as RISC-V co-maintainer."
    },
    {
      "sha": "03cfc97464b1d68d9f58787781afa6c94b9a5404",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 62,
      "deletions": 37,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=b9e920ecd6f65bd37917b2f9e6d3fed9c8a60f66",
      "patch": "@@ -335,11 +335,19 @@ static const char * get_symbol_version_string\n \n #define UNKNOWN -1\n \n-#define SECTION_NAME(X)\t\t\t\t\t\t\\\n-  ((X) == NULL ? _(\"<none>\")\t\t\t\t\t\\\n-   : filedata->string_table == NULL ? _(\"<no-strings>\")\t\t\\\n-   : ((X)->sh_name >= filedata->string_table_length ? _(\"<corrupt>\")\t\\\n-  : filedata->string_table + (X)->sh_name))\n+#define SECTION_NAME(X) \\\n+  (filedata->string_table + (X)->sh_name)\n+\n+#define SECTION_NAME_VALID(X) \\\n+  ((X) != NULL\t\t\t\t\t\t\t\t\\\n+   && filedata->string_table != NULL\t\t\t\t\t\\\n+   && (X)->sh_name < filedata->string_table_length)\n+\n+#define SECTION_NAME_PRINT(X) \\\n+  ((X) == NULL ? _(\"<none>\")\t\t\t\t\t\t\\\n+   : filedata->string_table == NULL ? _(\"<no-strings>\")\t\t\t\\\n+   : (X)->sh_name >= filedata->string_table_length ? _(\"<corrupt>\")\t\\\n+   : filedata->string_table + (X)->sh_name)\n \n #define DT_VERSIONTAGIDX(tag)\t(DT_VERNEEDNUM - (tag))\t/* Reverse order!  */\n \n@@ -669,7 +677,7 @@ printable_section_name (Filedata * filedata, const Elf_Internal_Shdr * sec)\n {\n #define MAX_PRINT_SEC_NAME_LEN 128\n   static char  sec_name_buf [MAX_PRINT_SEC_NAME_LEN + 1];\n-  const char * name = SECTION_NAME (sec);\n+  const char * name = SECTION_NAME_PRINT (sec);\n   char *       buf = sec_name_buf;\n   char         c;\n   unsigned int remaining = MAX_PRINT_SEC_NAME_LEN;\n@@ -731,7 +739,8 @@ find_section (Filedata * filedata, const char * name)\n     return NULL;\n \n   for (i = 0; i < filedata->file_header.e_shnum; i++)\n-    if (streq (SECTION_NAME (filedata->section_headers + i), name))\n+    if (SECTION_NAME_VALID (filedata->section_headers + i)\n+\t&& streq (SECTION_NAME (filedata->section_headers + i), name))\n       return filedata->section_headers + i;\n \n   return NULL;\n@@ -797,7 +806,8 @@ find_section_in_set (Filedata * filedata, const char * name, unsigned int * set)\n \t  if (i >= filedata->file_header.e_shnum)\n \t    continue; /* FIXME: Should we issue an error message ?  */\n \n-\t  if (streq (SECTION_NAME (filedata->section_headers + i), name))\n+\t  if (SECTION_NAME_VALID (filedata->section_headers + i)\n+\t      && streq (SECTION_NAME (filedata->section_headers + i), name))\n \t    return filedata->section_headers + i;\n \t}\n     }\n@@ -1729,7 +1739,8 @@ dump_relocations (Filedata *          filedata,\n \t\t  if (ELF_ST_TYPE (psym->st_info) == STT_SECTION)\n \t\t    {\n \t\t      if (psym->st_shndx < filedata->file_header.e_shnum)\n-\t\t\tsec_name = SECTION_NAME (filedata->section_headers + psym->st_shndx);\n+\t\t\tsec_name = SECTION_NAME_PRINT (filedata->section_headers\n+\t\t\t\t\t\t       + psym->st_shndx);\n \t\t      else if (psym->st_shndx == SHN_ABS)\n \t\t\tsec_name = \"ABS\";\n \t\t      else if (psym->st_shndx == SHN_COMMON)\n@@ -4034,7 +4045,7 @@ get_segment_type (Filedata * filedata, unsigned long p_type)\n     case PT_OPENBSD_RANDOMIZE: return \"OPENBSD_RANDOMIZE\";\n     case PT_OPENBSD_WXNEEDED: return \"OPENBSD_WXNEEDED\";\n     case PT_OPENBSD_BOOTDATA: return \"OPENBSD_BOOTDATA\";\n-      \n+\n     default:\n       if ((p_type >= PT_LOPROC) && (p_type <= PT_HIPROC))\n \t{\n@@ -4915,7 +4926,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \tcase OPTION_WITH_SYMBOL_VERSIONS:\n \t  /* Ignored for backward compatibility.  */\n \t  break;\n-\t  \n+\n \tdefault:\n \t  /* xgettext:c-format */\n \t  error (_(\"Invalid option '-%c'\\n\"), c);\n@@ -6394,7 +6405,7 @@ process_section_headers (Filedata * filedata)\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n     {\n-      char * name = SECTION_NAME (section);\n+      char * name = SECTION_NAME_PRINT (section);\n \n       /* Run some sanity checks on the headers and\n \t possibly fill in some file data as well.  */\n@@ -6730,7 +6741,7 @@ process_section_headers (Filedata * filedata)\n       if (do_section_details)\n \tprintf (\"%s\\n      \", printable_section_name (filedata, section));\n       else\n-\tprint_symbol (-17, SECTION_NAME (section));\n+\tprint_symbol (-17, SECTION_NAME_PRINT (section));\n \n       printf (do_wide ? \" %-15s \" : \" %-15.15s \",\n \t      get_section_type_name (filedata, section->sh_type));\n@@ -7127,7 +7138,8 @@ process_section_groups (Filedata * filedata)\n \t\t  continue;\n \t\t}\n \n-\t      group_name = SECTION_NAME (filedata->section_headers + sym->st_shndx);\n+\t      group_name = SECTION_NAME_PRINT (filedata->section_headers\n+\t\t\t\t\t       + sym->st_shndx);\n \t      strtab_sec = NULL;\n \t      free (strtab);\n \t      strtab = NULL;\n@@ -8055,22 +8067,28 @@ ia64_process_unwind (Filedata * filedata)\n \t\t{\n \t\t  sec = filedata->section_headers + g->section_index;\n \n-\t\t  if (streq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info))\n+\t\t  if (SECTION_NAME_VALID (sec)\n+\t\t      && streq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info))\n \t\t    break;\n \t\t}\n \n \t      if (g == NULL)\n \t\ti = filedata->file_header.e_shnum;\n \t    }\n \t}\n-      else if (strneq (SECTION_NAME (unwsec), ELF_STRING_ia64_unwind_once, len))\n+      else if (SECTION_NAME_VALID (unwsec)\n+\t       && strneq (SECTION_NAME (unwsec),\n+\t\t\t  ELF_STRING_ia64_unwind_once, len))\n \t{\n \t  /* .gnu.linkonce.ia64unw.FOO -> .gnu.linkonce.ia64unwi.FOO.  */\n \t  len2 = sizeof (ELF_STRING_ia64_unwind_info_once) - 1;\n \t  suffix = SECTION_NAME (unwsec) + len;\n-\t  for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum;\n+\t  for (i = 0, sec = filedata->section_headers;\n+\t       i < filedata->file_header.e_shnum;\n \t       ++i, ++sec)\n-\t    if (strneq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info_once, len2)\n+\t    if (SECTION_NAME_VALID (sec)\n+\t\t&& strneq (SECTION_NAME (sec),\n+\t\t\t   ELF_STRING_ia64_unwind_info_once, len2)\n \t\t&& streq (SECTION_NAME (sec) + len2, suffix))\n \t      break;\n \t}\n@@ -8081,11 +8099,14 @@ ia64_process_unwind (Filedata * filedata)\n \t  len = sizeof (ELF_STRING_ia64_unwind) - 1;\n \t  len2 = sizeof (ELF_STRING_ia64_unwind_info) - 1;\n \t  suffix = \"\";\n-\t  if (strneq (SECTION_NAME (unwsec), ELF_STRING_ia64_unwind, len))\n+\t  if (SECTION_NAME_VALID (unwsec)\n+\t      && strneq (SECTION_NAME (unwsec), ELF_STRING_ia64_unwind, len))\n \t    suffix = SECTION_NAME (unwsec) + len;\n-\t  for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum;\n+\t  for (i = 0, sec = filedata->section_headers;\n+\t       i < filedata->file_header.e_shnum;\n \t       ++i, ++sec)\n-\t    if (strneq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info, len2)\n+\t    if (SECTION_NAME_VALID (sec)\n+\t\t&& strneq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info, len2)\n \t\t&& streq (SECTION_NAME (sec) + len2, suffix))\n \t      break;\n \t}\n@@ -8468,7 +8489,8 @@ hppa_process_unwind (Filedata * filedata)\n \t\t\t   &aux.strtab, &aux.strtab_size))\n \t    return FALSE;\n \t}\n-      else if (streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n+      else if (SECTION_NAME_VALID (sec)\n+\t       && streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n \tunwsec = sec;\n     }\n \n@@ -8477,7 +8499,8 @@ hppa_process_unwind (Filedata * filedata)\n \n   for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum; ++i, ++sec)\n     {\n-      if (streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n+      if (SECTION_NAME_VALID (sec)\n+\t  && streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n \t{\n \t  unsigned long num_unwind = sec->sh_size / 16;\n \n@@ -12116,7 +12139,7 @@ print_dynamic_symbol (Filedata *filedata, unsigned long si,\n   enum versioned_symbol_info sym_info;\n   unsigned short vna_other;\n   Elf_Internal_Sym *psym = symtab + si;\n-  \n+\n   printf (\"%6ld: \", si);\n   print_vma (psym->st_value, LONG_HEX);\n   putchar (' ');\n@@ -12148,7 +12171,7 @@ print_dynamic_symbol (Filedata *filedata, unsigned long si,\n \t\t\t\t  || section->sh_type == SHT_DYNSYM),\n \t\t\t\t strtab, strtab_size, si,\n \t\t\t\t psym, &sym_info, &vna_other);\n-  \n+\n   int len_avail = 21;\n   if (! do_wide && version_string != NULL)\n     {\n@@ -12163,7 +12186,7 @@ print_dynamic_symbol (Filedata *filedata, unsigned long si,\n     }\n \n   print_symbol (len_avail, sstr);\n-    \n+\n   if (version_string)\n     {\n       if (sym_info == symbol_undefined)\n@@ -12280,7 +12303,7 @@ display_lto_symtab (Filedata *           filedata,\n   char * ext_name = NULL;\n \n   if (asprintf (& ext_name, \".gnu.lto_.ext_symtab.%s\",\n-\t\tSECTION_NAME (section) + strlen (\".gnu.lto_.symtab.\")) > 0\n+\t\tSECTION_NAME (section) + sizeof (\".gnu.lto_.symtab.\") - 1) > 0\n       && ext_name != NULL /* Paranoia.  */\n       && (ext = find_section (filedata, ext_name)) != NULL)\n     {\n@@ -12300,7 +12323,7 @@ display_lto_symtab (Filedata *           filedata,\n \t    }\n \t}\n     }\n-  \n+\n   const unsigned char * data = (const unsigned char *) alloced_data;\n   const unsigned char * end = data + section->sh_size;\n \n@@ -12321,10 +12344,10 @@ display_lto_symtab (Filedata *           filedata,\n   else\n     printf (_(\"\\nLTO Symbol table '%s' contains:\\n\"),\n \t    printable_section_name (filedata, section));\n-    \n+\n \n   /* FIXME: Add a wide version.  */\n-  if (ext_data_orig != NULL) \n+  if (ext_data_orig != NULL)\n     printf (_(\"  Comdat_Key       Kind  Visibility     Size      Slot      Type  Section Name\\n\"));\n   else\n     printf (_(\"  Comdat_Key       Kind  Visibility     Size      Slot Name\\n\"));\n@@ -12402,7 +12425,7 @@ display_lto_symtab (Filedata *           filedata,\n   free (ext_data_orig);\n   free (ext_name);\n   return TRUE;\n-  \n+\n  fail:\n   error (_(\"Buffer overrun encountered whilst decoding LTO symbol table\\n\"));\n   free (alloced_data);\n@@ -12429,10 +12452,11 @@ process_lto_symbol_tables (Filedata * filedata)\n   for (i = 0, section = filedata->section_headers;\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n-    if (CONST_STRNEQ (SECTION_NAME (section), \".gnu.lto_.symtab\"))\n+    if (SECTION_NAME_VALID (section)\n+\t&& CONST_STRNEQ (SECTION_NAME (section), \".gnu.lto_.symtab.\"))\n       res &= display_lto_symtab (filedata, section);\n \n-  return res; \n+  return res;\n }\n \n /* Dump the symbol table.  */\n@@ -14508,7 +14532,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n static ctf_sect_t *\n shdr_to_ctf_sect (ctf_sect_t *buf, Elf_Internal_Shdr *shdr, Filedata *filedata)\n {\n-  buf->cts_name = SECTION_NAME (shdr);\n+  buf->cts_name = SECTION_NAME_PRINT (shdr);\n   buf->cts_size = shdr->sh_size;\n   buf->cts_entsize = shdr->sh_entsize;\n \n@@ -15071,7 +15095,7 @@ free_debug_section (enum dwarf_section_display_enum debug)\n static bfd_boolean\n display_debug_section (int shndx, Elf_Internal_Shdr * section, Filedata * filedata)\n {\n-  char * name = SECTION_NAME (section);\n+  char * name = SECTION_NAME_VALID (section) ? SECTION_NAME (section) : \"\";\n   const char * print_name = printable_section_name (filedata, section);\n   bfd_size_type length;\n   bfd_boolean result = TRUE;\n@@ -15160,7 +15184,8 @@ initialise_dumps_byname (Filedata * filedata)\n       bfd_boolean any = FALSE;\n \n       for (i = 0; i < filedata->file_header.e_shnum; i++)\n-\tif (streq (SECTION_NAME (filedata->section_headers + i), cur->name))\n+\tif (SECTION_NAME_VALID (filedata->section_headers + i)\n+\t    && streq (SECTION_NAME (filedata->section_headers + i), cur->name))\n \t  {\n \t    request_dump_bynumber (&filedata->dump, i, cur->type);\n \t    any = TRUE;\n@@ -20863,7 +20888,7 @@ process_object (Filedata * filedata)\n \n   if (! process_lto_symbol_tables (filedata))\n     res = FALSE;\n-  \n+\n   if (! process_syminfo (filedata))\n     res = FALSE;\n "
    }
  ]
}