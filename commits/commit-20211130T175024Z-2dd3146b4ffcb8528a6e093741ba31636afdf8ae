{
  "sha": "2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
  "node_id": "C_kwDOANOeidoAKDJkZDMxNDZiNGZmY2I4NTI4YTZlMDkzNzQxYmEzMTYzNmFmZGY4YWU",
  "commit": {
    "author": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-11-30T17:50:24Z"
    },
    "committer": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-11-30T17:50:24Z"
    },
    "message": "aarch64: Check for register aliases before mnemonics\n\nPreviously we would not accept:\n\n\tA .req B\n\nif A happened to be the name of an instruction.  Adding new\ninstructions could therefore invalidate existing register aliases.\n\nI noticed this with a test that used \"zero\" as a register alias\nfor \"xzr\", where \"zero\" is now also the name of an SME instruction.\nI don't have any evidence that \"real\" code is doing this, but it\nseems at least plausible.\n\nThis patch switches things so that we check for register aliases\nfirst.  It might slow down parsing slightly, but the difference\nis unlikely to be noticeable.\n\nThings like:\n\n\tb\t.req + 0\n\nstill work, since create_register_alias checks for \" .req \",\nand with the input scrubber, we'll only keep whitespace after\n.req if it's followed by another name.  If there's some valid\nexpression that I haven't thought about that is scrubbed to\n\" .req \", users could avoid the ambiguity by wrapping .req\nin parentheses.\n\nThe new test for invalid aliases already passed.  I just wanted\nsomething to exercise the !dot condition.\n\nI can't find a way of exercising the (existing) p == base condition,\nbut I'm not brave enough to say that it can never happen.  If it does\nhappen, get_mnemonic_name would return an empty string.\n\ngas/\n\t* config/tc-aarch64.c (opcode_lookup): Move mnemonic extraction\n\tcode to...\n\t(md_assemble): ...here.  Check for register aliases first.\n\t* testsuite/gas/aarch64/register_aliases.d,\n\ttestsuite/gas/aarch64/register_aliases.s: Test for a register\n\talias called \"zero\".\n\t* testsuite/gas/aarch64/register_aliases_invalid.d,\n\ttestsuite/gas/aarch64/register_aliases_invalid.l,\n\ttestsuite/gas/aarch64/register_aliases_invalid.s: New test.",
    "tree": {
      "sha": "a2543c17fb985705cd980f6cb61b53f41300ff96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a2543c17fb985705cd980f6cb61b53f41300ff96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/comments",
  "author": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90fe61ced1c9aa4afb263326e336330d15603fbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90fe61ced1c9aa4afb263326e336330d15603fbf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90fe61ced1c9aa4afb263326e336330d15603fbf"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 38,
    "deletions": 34
  },
  "files": [
    {
      "sha": "b6ed80e6d3a087fad47fd3273bb0858a197640ac",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 29,
      "deletions": 33,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -5738,25 +5738,18 @@ lookup_mnemonic (const char *start, int len)\n }\n \n /* Subroutine of md_assemble, responsible for looking up the primary\n-   opcode from the mnemonic the user wrote.  STR points to the\n-   beginning of the mnemonic. */\n+   opcode from the mnemonic the user wrote.  BASE points to the beginning\n+   of the mnemonic, DOT points to the first '.' within the mnemonic\n+   (if any) and END points to the end of the mnemonic.  */\n \n static templates *\n-opcode_lookup (char **str)\n+opcode_lookup (char *base, char *dot, char *end)\n {\n-  char *end, *base, *dot;\n   const aarch64_cond *cond;\n   char condname[16];\n   int len;\n \n-  /* Scan up to the end of the mnemonic, which must end in white space,\n-     '.', or end of string.  */\n-  dot = 0;\n-  for (base = end = *str; is_part_of_name(*end); end++)\n-    if (*end == '.' && !dot)\n-      dot = end;\n-\n-  if (end == base || dot == base)\n+  if (dot == end)\n     return 0;\n \n   inst.cond = COND_ALWAYS;\n@@ -5765,23 +5758,13 @@ opcode_lookup (char **str)\n   if (dot)\n     {\n       cond = str_hash_find_n (aarch64_cond_hsh, dot + 1, end - dot - 1);\n-      if (cond)\n-\t{\n-\t  inst.cond = cond->value;\n-\t  *str = end;\n-\t}\n-      else\n-\t{\n-\t  *str = dot;\n-\t  return 0;\n-\t}\n+      if (!cond)\n+\treturn 0;\n+      inst.cond = cond->value;\n       len = dot - base;\n     }\n   else\n-    {\n-      *str = end;\n-      len = end - base;\n-    }\n+    len = end - base;\n \n   if (inst.cond == COND_ALWAYS)\n     {\n@@ -7870,7 +7853,6 @@ dump_opcode_operands (const aarch64_opcode *opcode)\n void\n md_assemble (char *str)\n {\n-  char *p = str;\n   templates *template;\n   const aarch64_opcode *opcode;\n   aarch64_inst *inst_base;\n@@ -7893,14 +7875,28 @@ md_assemble (char *str)\n   DEBUG_TRACE (\"==============================\");\n   DEBUG_TRACE (\"Enter md_assemble with %s\", str);\n \n-  template = opcode_lookup (&p);\n+  /* Scan up to the end of the mnemonic, which must end in whitespace,\n+     '.', or end of string.  */\n+  char *p = str;\n+  char *dot = 0;\n+  for (; is_part_of_name (*p); p++)\n+    if (*p == '.' && !dot)\n+      dot = p;\n+\n+  if (p == str)\n+    {\n+      as_bad (_(\"unknown mnemonic -- `%s'\"), str);\n+      return;\n+    }\n+\n+  if (!dot && create_register_alias (str, p))\n+    return;\n+\n+  template = opcode_lookup (str, dot, p);\n   if (!template)\n     {\n-      /* It wasn't an instruction, but it might be a register alias of\n-         the form alias .req reg directive.  */\n-      if (!create_register_alias (str, p))\n-\tas_bad (_(\"unknown mnemonic `%s' -- `%s'\"), get_mnemonic_name (str),\n-\t\tstr);\n+      as_bad (_(\"unknown mnemonic `%s' -- `%s'\"), get_mnemonic_name (str),\n+\t      str);\n       return;\n     }\n "
    },
    {
      "sha": "8d614b4760605eac7b8f90136c7a21ebf2979e36",
      "filename": "gas/testsuite/gas/aarch64/register_aliases.d",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/register_aliases.d?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -10,3 +10,4 @@ Disassembly of section \\.text:\n    8:\tf94003b1 \tldr\tx17, \\[x29\\]\n    c:\tf90003b0 \tstr\tx16, \\[x29\\]\n   10:\tf94003b1 \tldr\tx17, \\[x29\\]\n+  14:\tf900001f \tstr\txzr, \\[x0\\]"
    },
    {
      "sha": "856be5699ce434e41d52923020dcbc615208f983",
      "filename": "gas/testsuite/gas/aarch64/register_aliases.s",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/register_aliases.s?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -3,9 +3,10 @@\n \tfp \t.req \tx29\n \tip0\t.req \tx16\n \tip1\t.req \tx17\n+\tzero\t.req\txzr\n \tadd\tip0, ip0, lr\n \tstr \tip0, [fp]\n \tldr\tip1, [fp]\n \tstr \tIP0, [fp]\n \tldr\tIP1, [fp]\n-\n+\tstr\tzero, [x0]"
    },
    {
      "sha": "7c453ce02b82b55b9ea62f0bea1596253afe6e1f",
      "filename": "gas/testsuite/gas/aarch64/register_aliases_invalid.d",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/register_aliases_invalid.d?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -0,0 +1 @@\n+#error_output: register_aliases_invalid.l"
    },
    {
      "sha": "6350049df740e4344d4c5f5558e3df9845c31271",
      "filename": "gas/testsuite/gas/aarch64/register_aliases_invalid.l",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/register_aliases_invalid.l?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -0,0 +1,3 @@\n+.*:\n+.*: Error: unknown mnemonic `lr\\.req' -- `lr\\.req x30'\n+.*: Error: unknown mnemonic `lr\\.a' -- `lr\\.a .req x30'"
    },
    {
      "sha": "2df2eaab4d6fec9051f2921d2e32069c77b4f6de",
      "filename": "gas/testsuite/gas/aarch64/register_aliases_invalid.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2dd3146b4ffcb8528a6e093741ba31636afdf8ae/gas/testsuite/gas/aarch64/register_aliases_invalid.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/register_aliases_invalid.s?ref=2dd3146b4ffcb8528a6e093741ba31636afdf8ae",
      "patch": "@@ -0,0 +1,2 @@\n+lr.req \tx30\n+lr.a\t.req\tx30"
    }
  ]
}