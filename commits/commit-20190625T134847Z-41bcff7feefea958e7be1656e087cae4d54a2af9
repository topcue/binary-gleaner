{
  "sha": "41bcff7feefea958e7be1656e087cae4d54a2af9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDFiY2ZmN2ZlZWZlYTk1OGU3YmUxNjU2ZTA4N2NhZTRkNTRhMmFmOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-22T06:20:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:47Z"
    },
    "message": "Separate out data item window\n\nThis introduces a new subclass of tui_gen_win_info for the data item\nwindows, letting us remove another element from tui_which_element.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-regs.c (tui_show_registers, tui_show_register_group)\n\t(tui_display_registers_from, tui_check_register_values): Update.\n\t(tui_display_register): Remove win_info parameter; update.\n\t(tui_get_register): Change type of parameters.\n\t* tui/tui-data.h (struct tui_data_element): Remove.\n\t(union tui_which_element) <data>: Remove.\n\t<data_window>: Change type.\n\t(struct tui_data_item_window): New.\n\t* tui/tui-data.c (init_content_element): Remove DATA_ITEM_WIN\n\tcase.  Add assert.\n\t(~tui_data_item_window): New destructor.\n\t(free_content_elements): Remove DATA_ITEM_WIN case.",
    "tree": {
      "sha": "1640f384acaab9dac2133711ae4cf6f8c4b9f8a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1640f384acaab9dac2133711ae4cf6f8c4b9f8a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41bcff7feefea958e7be1656e087cae4d54a2af9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41bcff7feefea958e7be1656e087cae4d54a2af9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41bcff7feefea958e7be1656e087cae4d54a2af9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41bcff7feefea958e7be1656e087cae4d54a2af9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d2802c33429eb73303dc610401f5d7d27e071ff2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2802c33429eb73303dc610401f5d7d27e071ff2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d2802c33429eb73303dc610401f5d7d27e071ff2"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 82,
    "deletions": 85
  },
  "files": [
    {
      "sha": "0e8551eda109e7b9d8c4c371450aed4cfeb49b16",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=41bcff7feefea958e7be1656e087cae4d54a2af9",
      "patch": "@@ -1,3 +1,18 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-regs.c (tui_show_registers, tui_show_register_group)\n+\t(tui_display_registers_from, tui_check_register_values): Update.\n+\t(tui_display_register): Remove win_info parameter; update.\n+\t(tui_get_register): Change type of parameters.\n+\t* tui/tui-data.h (struct tui_data_element): Remove.\n+\t(union tui_which_element) <data>: Remove.\n+\t<data_window>: Change type.\n+\t(struct tui_data_item_window): New.\n+\t* tui/tui-data.c (init_content_element): Remove DATA_ITEM_WIN\n+\tcase.  Add assert.\n+\t(~tui_data_item_window): New destructor.\n+\t(free_content_elements): Remove DATA_ITEM_WIN case.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.h (enum tui_win_type) <MAX_WINDOWS, UNDEFINED_WIN>:"
    },
    {
      "sha": "9f11dfe108f767d8cf8eb6e5eae05c2b18612010",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 10,
      "deletions": 22,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=41bcff7feefea958e7be1656e087cae4d54a2af9",
      "patch": "@@ -367,6 +367,7 @@ init_content_element (struct tui_win_element *element,\n   gdb_assert (type != EXEC_INFO_WIN);\n   gdb_assert (type != LOCATOR_WIN);\n   gdb_assert (type != CMD_WIN);\n+  gdb_assert (type != DATA_ITEM_WIN);\n \n   switch (type)\n     {\n@@ -379,18 +380,7 @@ init_content_element (struct tui_win_element *element,\n       element->which_element.source.has_break = FALSE;\n       break;\n     case DATA_WIN:\n-      element->which_element.data_window = new struct tui_gen_win_info (DATA_ITEM_WIN);\n-      element->which_element.data_window->content =\n-\ttui_alloc_content (1, DATA_ITEM_WIN);\n-      element->which_element.data_window->content_size = 1;\n-      break;\n-    case DATA_ITEM_WIN:\n-      element->which_element.data.name = NULL;\n-      element->which_element.data.type = TUI_REGISTER;\n-      element->which_element.data.item_no = UNDEFINED_ITEM;\n-      element->which_element.data.value = NULL;\n-      element->which_element.data.highlight = FALSE;\n-      element->which_element.data.content = NULL;\n+      element->which_element.data_window = new tui_data_item_window ();\n       break;\n     default:\n       break;\n@@ -581,6 +571,14 @@ free_content (tui_win_content content,\n }\n \n \n+tui_data_item_window::~tui_data_item_window ()\n+{\n+  if (data_type != TUI_REGISTER)\n+    xfree ((void *) name);\n+  xfree (value);\n+  xfree (content);\n+}\n+\n /* free_content_elements().\n  */\n static void\n@@ -615,16 +613,6 @@ free_content_elements (tui_win_content content,\n \t\t      delete element->which_element.data_window;\n \t\t      xfree (element);\n \t\t      break;\n-\t\t    case DATA_ITEM_WIN:\n-\t\t      /* Note that data elements are not allocated in\n-\t\t         a single block, but individually, as\n-\t\t         needed.  */\n-\t\t      if (element->which_element.data.type != TUI_REGISTER)\n-\t\t\txfree ((void *)element->which_element.data.name);\n-\t\t      xfree (element->which_element.data.value);\n-                      xfree (element->which_element.data.content);\n-\t\t      xfree (element);\n-\t\t      break;\n \t\t    default:\n \t\t      break;\n \t\t    }"
    },
    {
      "sha": "6567874b7edef4b80a4c2d53b301829908bc45bd",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 21,
      "deletions": 15,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=41bcff7feefea958e7be1656e087cae4d54a2af9",
      "patch": "@@ -188,19 +188,6 @@ struct tui_source_element\n };\n \n \n-/* Elements in the data display window content.  */\n-struct tui_data_element\n-{\n-  const char *name;\n-  int item_no;\t\t/* The register number, or data display\n-\t\t\t   number.  */\n-  enum tui_data_type type;\n-  void *value;\n-  int highlight;\n-  char *content;\n-};\n-\n-\n #ifdef PATH_MAX\n # define MAX_LOCATOR_ELEMENT_LEN        PATH_MAX\n #else\n@@ -226,8 +213,7 @@ typedef char tui_exec_info_content[TUI_EXECINFO_SIZE];\n union tui_which_element\n {\n   struct tui_source_element source;\t/* The source elements.  */\n-  struct tui_gen_win_info *data_window;\t/* Data display elements.  */\n-  struct tui_data_element data;\t\t/* Elements of data_window.  */\n+  struct tui_data_item_window *data_window;\t/* Data display elements.  */\n };\n \n struct tui_win_element\n@@ -282,6 +268,26 @@ struct tui_locator_window : public tui_gen_win_info\n   struct gdbarch *gdbarch = nullptr;\n };\n \n+/* A data item window.  */\n+\n+struct tui_data_item_window : public tui_gen_win_info\n+{\n+  tui_data_item_window ()\n+    : tui_gen_win_info (DATA_ITEM_WIN)\n+  {\n+  }\n+\n+  ~tui_data_item_window () override;\n+\n+  const char *name = nullptr;\n+  /* The register number, or data display number.  */\n+  int item_no = UNDEFINED_ITEM;\n+  enum tui_data_type data_type = TUI_REGISTER;\n+  void *value = nullptr;\n+  bool highlight = false;\n+  char *content = nullptr;\n+};\n+\n /* This defines information about each logical window.  */\n struct tui_win_info : public tui_gen_win_info\n {"
    },
    {
      "sha": "590a075228041f0392b880e9824cc2995b34c50b",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 36,
      "deletions": 48,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41bcff7feefea958e7be1656e087cae4d54a2af9/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=41bcff7feefea958e7be1656e087cae4d54a2af9",
      "patch": "@@ -47,17 +47,15 @@\n /*****************************************\n ** STATIC LOCAL FUNCTIONS FORWARD DECLS    **\n ******************************************/\n-static void\n-tui_display_register (struct tui_data_element *data,\n-                      struct tui_gen_win_info *win_info);\n+static void tui_display_register (struct tui_data_item_window *data);\n \n static enum tui_status tui_show_register_group (struct reggroup *group,\n \t\t\t\t\t\tstruct frame_info *frame,\n \t\t\t\t\t\tint refresh_values_only);\n \n static enum tui_status tui_get_register (struct frame_info *frame,\n-\t\t\t\t\t struct tui_data_element *data,\n-\t\t\t\t\t int regnum, int *changedp);\n+\t\t\t\t\t struct tui_data_item_window *data,\n+\t\t\t\t\t int regnum, bool *changedp);\n \n \n \n@@ -162,13 +160,11 @@ tui_show_registers (struct reggroup *group)\n       /* Clear all notation of changed values.  */\n       for (i = 0; i < TUI_DATA_WIN->regs_content_count; i++)\n \t{\n-\t  struct tui_gen_win_info *data_item_win;\n-          struct tui_win_element *win;\n+\t  struct tui_data_item_window *data_item_win;\n \n \t  data_item_win = TUI_DATA_WIN->regs_content[i]\n             ->which_element.data_window;\n-          win = data_item_win->content[0];\n-          win->which_element.data.highlight = FALSE;\n+\t  data_item_win->highlight = false;\n \t}\n       TUI_DATA_WIN->current_group = group;\n       tui_display_all_data ();\n@@ -246,8 +242,7 @@ tui_show_register_group (struct reggroup *group,\n       pos = 0;\n       for (regnum = 0; regnum < gdbarch_num_cooked_regs (gdbarch); regnum++)\n         {\n-\t  struct tui_gen_win_info *data_item_win;\n-          struct tui_data_element *data;\n+\t  struct tui_data_item_window *data_item_win;\n           const char *name;\n \n           /* Must be in the group.  */\n@@ -262,16 +257,15 @@ tui_show_register_group (struct reggroup *group,\n \n \t  data_item_win =\n             TUI_DATA_WIN->regs_content[pos]->which_element.data_window;\n-          data = &data_item_win->content[0]->which_element.data;\n-          if (data)\n+          if (data_item_win)\n             {\n               if (!refresh_values_only)\n                 {\n-                  data->item_no = regnum;\n-                  data->name = name;\n-                  data->highlight = FALSE;\n+                  data_item_win->item_no = regnum;\n+                  data_item_win->name = name;\n+                  data_item_win->highlight = false;\n                 }\n-              tui_get_register (frame, data, regnum, 0);\n+              tui_get_register (frame, data_item_win, regnum, 0);\n             }\n           pos++;\n \t}\n@@ -300,16 +294,14 @@ tui_display_registers_from (int start_element_no)\n       int max_len = 0;\n       for (i = 0; i < TUI_DATA_WIN->regs_content_count; i++)\n         {\n-          struct tui_data_element *data;\n-          struct tui_gen_win_info *data_item_win;\n+          struct tui_data_item_window *data_item_win;\n           char *p;\n           int len;\n \n           data_item_win\n \t    = TUI_DATA_WIN->regs_content[i]->which_element.data_window;\n-          data = &data_item_win->content[0]->which_element.data;\n           len = 0;\n-          p = data->content;\n+          p = data_item_win->content;\n           if (p != 0)\n             while (*p)\n               {\n@@ -343,13 +335,11 @@ tui_display_registers_from (int start_element_no)\n \t\t && i < TUI_DATA_WIN->regs_content_count;\n \t       j++)\n \t    {\n-\t      struct tui_gen_win_info *data_item_win;\n-\t      struct tui_data_element *data_element_ptr;\n+\t      struct tui_data_item_window *data_item_win;\n \n \t      /* Create the window if necessary.  */\n \t      data_item_win = TUI_DATA_WIN->regs_content[i]\n                 ->which_element.data_window;\n-\t      data_element_ptr = &data_item_win->content[0]->which_element.data;\n               if (data_item_win->handle != NULL\n                   && (data_item_win->height != 1\n                       || data_item_win->width != item_win_width\n@@ -373,7 +363,7 @@ tui_display_registers_from (int start_element_no)\n \n \t      /* Get the printable representation of the register\n                  and display it.  */\n-              tui_display_register (data_element_ptr, data_item_win);\n+              tui_display_register (data_item_win);\n \t      i++;\t\t/* Next register.  */\n \t    }\n \t  cur_y++;\t\t/* Next row.  */\n@@ -481,21 +471,20 @@ tui_check_register_values (struct frame_info *frame)\n \n \t  for (i = 0; (i < TUI_DATA_WIN->regs_content_count); i++)\n \t    {\n-\t      struct tui_data_element *data;\n-\t      struct tui_gen_win_info *data_item_win_ptr;\n+\t      struct tui_data_item_window *data_item_win_ptr;\n \t      int was_hilighted;\n \n \t      data_item_win_ptr = TUI_DATA_WIN->regs_content[i]->\n                 which_element.data_window;\n-\t      data = &data_item_win_ptr->content[0]->which_element.data;\n-\t      was_hilighted = data->highlight;\n+\t      was_hilighted = data_item_win_ptr->highlight;\n \n-              tui_get_register (frame, data,\n-                                data->item_no, &data->highlight);\n+              tui_get_register (frame, data_item_win_ptr,\n+                                data_item_win_ptr->item_no,\n+\t\t\t\t&data_item_win_ptr->highlight);\n \n-\t      if (data->highlight || was_hilighted)\n+\t      if (data_item_win_ptr->highlight || was_hilighted)\n \t\t{\n-                  tui_display_register (data, data_item_win_ptr);\n+                  tui_display_register (data_item_win_ptr);\n \t\t}\n \t    }\n \t}\n@@ -505,10 +494,9 @@ tui_check_register_values (struct frame_info *frame)\n /* Display a register in a window.  If hilite is TRUE, then the value\n    will be displayed in reverse video.  */\n static void\n-tui_display_register (struct tui_data_element *data,\n-                      struct tui_gen_win_info *win_info)\n+tui_display_register (struct tui_data_item_window *data)\n {\n-  if (win_info->handle != NULL)\n+  if (data->handle != NULL)\n     {\n       int i;\n \n@@ -518,23 +506,23 @@ tui_display_register (struct tui_data_element *data,\n \t   to ncurses 5.7 dated 2009-08-29, changing this macro to expand\n \t   to code that causes the compiler to generate an unused-value\n \t   warning.  */\n-\t(void) wstandout (win_info->handle);\n+\t(void) wstandout (data->handle);\n       \n-      wmove (win_info->handle, 0, 0);\n-      for (i = 1; i < win_info->width; i++)\n-        waddch (win_info->handle, ' ');\n-      wmove (win_info->handle, 0, 0);\n+      wmove (data->handle, 0, 0);\n+      for (i = 1; i < data->width; i++)\n+        waddch (data->handle, ' ');\n+      wmove (data->handle, 0, 0);\n       if (data->content)\n-        waddstr (win_info->handle, data->content);\n+        waddstr (data->handle, data->content);\n \n       if (data->highlight)\n \t/* We ignore the return value, casting it to void in order to avoid\n \t   a compiler warning.  The warning itself was introduced by a patch\n \t   to ncurses 5.7 dated 2009-08-29, changing this macro to expand\n \t   to code that causes the compiler to generate an unused-value\n \t   warning.  */\n-\t(void) wstandend (win_info->handle);\n-      win_info->refresh_window ();\n+\t(void) wstandend (data->handle);\n+      data->refresh_window ();\n     }\n }\n \n@@ -716,13 +704,13 @@ tui_register_format (struct frame_info *frame, int regnum)\n    changed with respect to the previous call.  */\n static enum tui_status\n tui_get_register (struct frame_info *frame,\n-                  struct tui_data_element *data, \n-\t\t  int regnum, int *changedp)\n+                  struct tui_data_item_window *data, \n+\t\t  int regnum, bool *changedp)\n {\n   enum tui_status ret = TUI_FAILURE;\n \n   if (changedp)\n-    *changedp = FALSE;\n+    *changedp = false;\n   if (target_has_registers)\n     {\n       char *prev_content = data->content;\n@@ -731,7 +719,7 @@ tui_get_register (struct frame_info *frame,\n \n       if (changedp != NULL\n \t  && strcmp (prev_content, data->content) != 0)\n-\t*changedp = 1;\n+\t*changedp = true;\n \n       xfree (prev_content);\n "
    }
  ]
}