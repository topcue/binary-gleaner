{
  "sha": "3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2NjMTdhZjU4OTBkNTg3N2I4YWM1M2ViNWNkOWEyYWRmODI0NjdlNg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-10-30T08:07:40Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-10-30T08:07:40Z"
    },
    "message": "x86: re-do \"shorthand\" handling\n\nNow that the opcode table gets preprocessed, undo parts of commit\ndc821c5f9a (\"x86: replace Reg8, Reg16, Reg32, and Reg64\"): Have the\npreprocessor handle the expansion there, while making the expansions\nexplicit in i386-gen and the register table.",
    "tree": {
      "sha": "2819878c197833e73797d9ae6408affd5a07be34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2819878c197833e73797d9ae6408affd5a07be34"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a2cebd03faf935d292b524e999787d379a6b04ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2cebd03faf935d292b524e999787d379a6b04ad",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a2cebd03faf935d292b524e999787d379a6b04ad"
    }
  ],
  "stats": {
    "total": 433,
    "additions": 214,
    "deletions": 219
  },
  "files": [
    {
      "sha": "dc22f411154ea1d219ab6594afdd278c0433ed66",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
      "patch": "@@ -1,3 +1,15 @@\n+2019-10-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_shorthands): Delete.\n+\t(operand_type_init): Expand previous shorthands.\n+\t(set_bitfield_from_shorthand): Rename back to ...\n+\t(set_bitfield_from_cpu_flag_init): ... this.  Drop processing\n+\tof operand_type_init[].\n+\t(set_bitfield): Adjust call to the above function.\n+\t* i386-opc.tbl (Reg8, Reg16, Reg32, Reg64, FloatAcc, FloatReg,\n+\tRegXMM, RegYMM, RegZMM): Define.\n+\t* i386-reg.tbl: Expand prior shorthands.\n+\n 2019-10-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (output_i386_opcode): Change order of fields"
    },
    {
      "sha": "a3160f2c3d6bb2ae2c678b263e338fdd694069fb",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 13,
      "deletions": 42,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
      "patch": "@@ -379,31 +379,18 @@ static initializer cpu_flag_init[] =\n     \"CpuAVX512_VP2INTERSECT\" },\n };\n \n-static const initializer operand_type_shorthands[] =\n-{\n-  { \"Reg8\",     \"Reg|Byte\" },\n-  { \"Reg16\",    \"Reg|Word\" },\n-  { \"Reg32\",    \"Reg|Dword\" },\n-  { \"Reg64\",    \"Reg|Qword\" },\n-  { \"FloatAcc\", \"Acc|Tbyte\" },\n-  { \"FloatReg\", \"Reg|Tbyte\" },\n-  { \"RegXMM\",   \"RegSIMD|Xmmword\" },\n-  { \"RegYMM\",   \"RegSIMD|Ymmword\" },\n-  { \"RegZMM\",   \"RegSIMD|Zmmword\" },\n-};\n-\n static initializer operand_type_init[] =\n {\n   { \"OPERAND_TYPE_NONE\",\n     \"0\" },\n   { \"OPERAND_TYPE_REG8\",\n-    \"Reg8\" },\n+    \"Reg|Byte\" },\n   { \"OPERAND_TYPE_REG16\",\n-    \"Reg16\" },\n+    \"Reg|Word\" },\n   { \"OPERAND_TYPE_REG32\",\n-    \"Reg32\" },\n+    \"Reg|Dword\" },\n   { \"OPERAND_TYPE_REG64\",\n-    \"Reg64\" },\n+    \"Reg|Qword\" },\n   { \"OPERAND_TYPE_IMM1\",\n     \"Imm1\" },\n   { \"OPERAND_TYPE_IMM8\",\n@@ -441,21 +428,21 @@ static initializer operand_type_init[] =\n   { \"OPERAND_TYPE_DEBUG\",\n     \"Debug\" },\n   { \"OPERAND_TYPE_FLOATREG\",\n-    \"FloatReg\" },\n+    \"Reg|Tbyte\" },\n   { \"OPERAND_TYPE_FLOATACC\",\n-    \"FloatAcc\" },\n+    \"Acc|Tbyte\" },\n   { \"OPERAND_TYPE_SREG\",\n     \"SReg\" },\n   { \"OPERAND_TYPE_JUMPABSOLUTE\",\n     \"JumpAbsolute\" },\n   { \"OPERAND_TYPE_REGMMX\",\n     \"RegMMX\" },\n   { \"OPERAND_TYPE_REGXMM\",\n-    \"RegXMM\" },\n+    \"RegSIMD|Xmmword\" },\n   { \"OPERAND_TYPE_REGYMM\",\n-    \"RegYMM\" },\n+    \"RegSIMD|Ymmword\" },\n   { \"OPERAND_TYPE_REGZMM\",\n-    \"RegZMM\" },\n+    \"RegSIMD|Zmmword\" },\n   { \"OPERAND_TYPE_REGMASK\",\n     \"RegMask\" },\n   { \"OPERAND_TYPE_ESSEG\",\n@@ -830,8 +817,8 @@ next_field (char *str, char sep, char **next, char *last)\n static void set_bitfield (char *, bitfield *, int, unsigned int, int);\n \n static int\n-set_bitfield_from_shorthand (char *f, bitfield *array, unsigned int size,\n-\t\t\t     int lineno)\n+set_bitfield_from_cpu_flag_init (char *f, bitfield *array, unsigned int size,\n+\t\t\t\t int lineno)\n {\n   char *str, *next, *last;\n   unsigned int i;\n@@ -852,22 +839,6 @@ set_bitfield_from_shorthand (char *f, bitfield *array, unsigned int size,\n \treturn 0;\n       }\n \n-  for (i = 0; i < ARRAY_SIZE (operand_type_shorthands); i++)\n-    if (strcmp (operand_type_shorthands[i].name, f) == 0)\n-      {\n-\t/* Turn on selective bits.  */\n-\tchar *init = xstrdup (operand_type_shorthands[i].init);\n-\tlast = init + strlen (init);\n-\tfor (next = init; next && next < last; )\n-\t  {\n-\t    str = next_field (next, '|', &next, last);\n-\t    if (str)\n-\t      set_bitfield (str, array, 1, size, lineno);\n-\t  }\n-\tfree (init);\n-\treturn 0;\n-      }\n-\n   return -1;\n }\n \n@@ -918,8 +889,8 @@ set_bitfield (char *f, bitfield *array, int value,\n \t}\n     }\n \n-  /* Handle shorthands.  */\n-  if (value == 1 && !set_bitfield_from_shorthand (f, array, size, lineno))\n+  /* Handle CPU_XXX_FLAGS.  */\n+  if (value == 1 && !set_bitfield_from_cpu_flag_init (f, array, size, lineno))\n     return;\n \n   if (lineno != -1)"
    },
    {
      "sha": "02c83a30f8e4d2e29ce92fd1ac7dad98d12b4e37",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
      "patch": "@@ -22,6 +22,18 @@\n #include \"i386-opc.h\"\n #undef None\n \n+#define Reg8  Reg|Byte\n+#define Reg16 Reg|Word\n+#define Reg32 Reg|Dword\n+#define Reg64 Reg|Qword\n+\n+#define FloatAcc Acc|Tbyte\n+#define FloatReg Reg|Tbyte\n+\n+#define RegXMM RegSIMD|Xmmword\n+#define RegYMM RegSIMD|Ymmword\n+#define RegZMM RegSIMD|Zmmword\n+\n #define Size16 Size=SIZE16\n #define Size32 Size=SIZE32\n #define Size64 Size=SIZE64"
    },
    {
      "sha": "61e9fe07c201296249a3c1f69c20e12da5bfb93f",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 177,
      "deletions": 177,
      "changes": 354,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cc17af5890d5877b8ac53eb5cd9a2adf82467e6/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=3cc17af5890d5877b8ac53eb5cd9a2adf82467e6",
      "patch": "@@ -19,82 +19,82 @@\n // 02110-1301, USA.\n \n // Make %st first as we test for it.\n-st, FloatReg|Acc, 0, 0, 11, 33\n+st, Reg|Acc|Tbyte, 0, 0, 11, 33\n // 8 bit regs\n-al, Reg8|Acc, 0, 0, Dw2Inval, Dw2Inval\n-cl, Reg8|ShiftCount, 0, 1, Dw2Inval, Dw2Inval\n-dl, Reg8, 0, 2, Dw2Inval, Dw2Inval\n-bl, Reg8, 0, 3, Dw2Inval, Dw2Inval\n-ah, Reg8, 0, 4, Dw2Inval, Dw2Inval\n-ch, Reg8, 0, 5, Dw2Inval, Dw2Inval\n-dh, Reg8, 0, 6, Dw2Inval, Dw2Inval\n-bh, Reg8, 0, 7, Dw2Inval, Dw2Inval\n-axl, Reg8, RegRex64, 0, Dw2Inval, Dw2Inval\n-cxl, Reg8, RegRex64, 1, Dw2Inval, Dw2Inval\n-dxl, Reg8, RegRex64, 2, Dw2Inval, Dw2Inval\n-bxl, Reg8, RegRex64, 3, Dw2Inval, Dw2Inval\n-spl, Reg8, RegRex64, 4, Dw2Inval, Dw2Inval\n-bpl, Reg8, RegRex64, 5, Dw2Inval, Dw2Inval\n-sil, Reg8, RegRex64, 6, Dw2Inval, Dw2Inval\n-dil, Reg8, RegRex64, 7, Dw2Inval, Dw2Inval\n-r8b, Reg8, RegRex|RegRex64, 0, Dw2Inval, Dw2Inval\n-r9b, Reg8, RegRex|RegRex64, 1, Dw2Inval, Dw2Inval\n-r10b, Reg8, RegRex|RegRex64, 2, Dw2Inval, Dw2Inval\n-r11b, Reg8, RegRex|RegRex64, 3, Dw2Inval, Dw2Inval\n-r12b, Reg8, RegRex|RegRex64, 4, Dw2Inval, Dw2Inval\n-r13b, Reg8, RegRex|RegRex64, 5, Dw2Inval, Dw2Inval\n-r14b, Reg8, RegRex|RegRex64, 6, Dw2Inval, Dw2Inval\n-r15b, Reg8, RegRex|RegRex64, 7, Dw2Inval, Dw2Inval\n+al, Reg|Acc|Byte, 0, 0, Dw2Inval, Dw2Inval\n+cl, Reg|Byte|ShiftCount, 0, 1, Dw2Inval, Dw2Inval\n+dl, Reg|Byte, 0, 2, Dw2Inval, Dw2Inval\n+bl, Reg|Byte, 0, 3, Dw2Inval, Dw2Inval\n+ah, Reg|Byte, 0, 4, Dw2Inval, Dw2Inval\n+ch, Reg|Byte, 0, 5, Dw2Inval, Dw2Inval\n+dh, Reg|Byte, 0, 6, Dw2Inval, Dw2Inval\n+bh, Reg|Byte, 0, 7, Dw2Inval, Dw2Inval\n+axl, Reg|Byte, RegRex64, 0, Dw2Inval, Dw2Inval\n+cxl, Reg|Byte, RegRex64, 1, Dw2Inval, Dw2Inval\n+dxl, Reg|Byte, RegRex64, 2, Dw2Inval, Dw2Inval\n+bxl, Reg|Byte, RegRex64, 3, Dw2Inval, Dw2Inval\n+spl, Reg|Byte, RegRex64, 4, Dw2Inval, Dw2Inval\n+bpl, Reg|Byte, RegRex64, 5, Dw2Inval, Dw2Inval\n+sil, Reg|Byte, RegRex64, 6, Dw2Inval, Dw2Inval\n+dil, Reg|Byte, RegRex64, 7, Dw2Inval, Dw2Inval\n+r8b, Reg|Byte, RegRex|RegRex64, 0, Dw2Inval, Dw2Inval\n+r9b, Reg|Byte, RegRex|RegRex64, 1, Dw2Inval, Dw2Inval\n+r10b, Reg|Byte, RegRex|RegRex64, 2, Dw2Inval, Dw2Inval\n+r11b, Reg|Byte, RegRex|RegRex64, 3, Dw2Inval, Dw2Inval\n+r12b, Reg|Byte, RegRex|RegRex64, 4, Dw2Inval, Dw2Inval\n+r13b, Reg|Byte, RegRex|RegRex64, 5, Dw2Inval, Dw2Inval\n+r14b, Reg|Byte, RegRex|RegRex64, 6, Dw2Inval, Dw2Inval\n+r15b, Reg|Byte, RegRex|RegRex64, 7, Dw2Inval, Dw2Inval\n // 16 bit regs\n-ax, Reg16|Acc, 0, 0, Dw2Inval, Dw2Inval\n-cx, Reg16, 0, 1, Dw2Inval, Dw2Inval\n-dx, Reg16|InOutPortReg, 0, 2, Dw2Inval, Dw2Inval\n-bx, Reg16|BaseIndex, 0, 3, Dw2Inval, Dw2Inval\n-sp, Reg16, 0, 4, Dw2Inval, Dw2Inval\n-bp, Reg16|BaseIndex, 0, 5, Dw2Inval, Dw2Inval\n-si, Reg16|BaseIndex, 0, 6, Dw2Inval, Dw2Inval\n-di, Reg16|BaseIndex, 0, 7, Dw2Inval, Dw2Inval\n-r8w, Reg16, RegRex, 0, Dw2Inval, Dw2Inval\n-r9w, Reg16, RegRex, 1, Dw2Inval, Dw2Inval\n-r10w, Reg16, RegRex, 2, Dw2Inval, Dw2Inval\n-r11w, Reg16, RegRex, 3, Dw2Inval, Dw2Inval\n-r12w, Reg16, RegRex, 4, Dw2Inval, Dw2Inval\n-r13w, Reg16, RegRex, 5, Dw2Inval, Dw2Inval\n-r14w, Reg16, RegRex, 6, Dw2Inval, Dw2Inval\n-r15w, Reg16, RegRex, 7, Dw2Inval, Dw2Inval\n+ax, Reg|Acc|Word, 0, 0, Dw2Inval, Dw2Inval\n+cx, Reg|Word, 0, 1, Dw2Inval, Dw2Inval\n+dx, Reg|Word|InOutPortReg, 0, 2, Dw2Inval, Dw2Inval\n+bx, Reg|Word|BaseIndex, 0, 3, Dw2Inval, Dw2Inval\n+sp, Reg|Word, 0, 4, Dw2Inval, Dw2Inval\n+bp, Reg|Word|BaseIndex, 0, 5, Dw2Inval, Dw2Inval\n+si, Reg|Word|BaseIndex, 0, 6, Dw2Inval, Dw2Inval\n+di, Reg|Word|BaseIndex, 0, 7, Dw2Inval, Dw2Inval\n+r8w, Reg|Word, RegRex, 0, Dw2Inval, Dw2Inval\n+r9w, Reg|Word, RegRex, 1, Dw2Inval, Dw2Inval\n+r10w, Reg|Word, RegRex, 2, Dw2Inval, Dw2Inval\n+r11w, Reg|Word, RegRex, 3, Dw2Inval, Dw2Inval\n+r12w, Reg|Word, RegRex, 4, Dw2Inval, Dw2Inval\n+r13w, Reg|Word, RegRex, 5, Dw2Inval, Dw2Inval\n+r14w, Reg|Word, RegRex, 6, Dw2Inval, Dw2Inval\n+r15w, Reg|Word, RegRex, 7, Dw2Inval, Dw2Inval\n // 32 bit regs\n-eax, Reg32|BaseIndex|Acc, 0, 0, 0, Dw2Inval\n-ecx, Reg32|BaseIndex, 0, 1, 1, Dw2Inval\n-edx, Reg32|BaseIndex, 0, 2, 2, Dw2Inval\n-ebx, Reg32|BaseIndex, 0, 3, 3, Dw2Inval\n-esp, Reg32, 0, 4, 4, Dw2Inval\n-ebp, Reg32|BaseIndex, 0, 5, 5, Dw2Inval\n-esi, Reg32|BaseIndex, 0, 6, 6, Dw2Inval\n-edi, Reg32|BaseIndex, 0, 7, 7, Dw2Inval\n-r8d, Reg32|BaseIndex, RegRex, 0, Dw2Inval, Dw2Inval\n-r9d, Reg32|BaseIndex, RegRex, 1, Dw2Inval, Dw2Inval\n-r10d, Reg32|BaseIndex, RegRex, 2, Dw2Inval, Dw2Inval\n-r11d, Reg32|BaseIndex, RegRex, 3, Dw2Inval, Dw2Inval\n-r12d, Reg32|BaseIndex, RegRex, 4, Dw2Inval, Dw2Inval\n-r13d, Reg32|BaseIndex, RegRex, 5, Dw2Inval, Dw2Inval\n-r14d, Reg32|BaseIndex, RegRex, 6, Dw2Inval, Dw2Inval\n-r15d, Reg32|BaseIndex, RegRex, 7, Dw2Inval, Dw2Inval\n-rax, Reg64|BaseIndex|Acc, 0, 0, Dw2Inval, 0\n-rcx, Reg64|BaseIndex, 0, 1, Dw2Inval, 2\n-rdx, Reg64|BaseIndex, 0, 2, Dw2Inval, 1\n-rbx, Reg64|BaseIndex, 0, 3, Dw2Inval, 3\n-rsp, Reg64, 0, 4, Dw2Inval, 7\n-rbp, Reg64|BaseIndex, 0, 5, Dw2Inval, 6\n-rsi, Reg64|BaseIndex, 0, 6, Dw2Inval, 4\n-rdi, Reg64|BaseIndex, 0, 7, Dw2Inval, 5\n-r8, Reg64|BaseIndex, RegRex, 0, Dw2Inval, 8\n-r9, Reg64|BaseIndex, RegRex, 1, Dw2Inval, 9\n-r10, Reg64|BaseIndex, RegRex, 2, Dw2Inval, 10\n-r11, Reg64|BaseIndex, RegRex, 3, Dw2Inval, 11\n-r12, Reg64|BaseIndex, RegRex, 4, Dw2Inval, 12\n-r13, Reg64|BaseIndex, RegRex, 5, Dw2Inval, 13\n-r14, Reg64|BaseIndex, RegRex, 6, Dw2Inval, 14\n-r15, Reg64|BaseIndex, RegRex, 7, Dw2Inval, 15\n+eax, Reg|Acc|Dword|BaseIndex, 0, 0, 0, Dw2Inval\n+ecx, Reg|Dword|BaseIndex, 0, 1, 1, Dw2Inval\n+edx, Reg|Dword|BaseIndex, 0, 2, 2, Dw2Inval\n+ebx, Reg|Dword|BaseIndex, 0, 3, 3, Dw2Inval\n+esp, Reg|Dword, 0, 4, 4, Dw2Inval\n+ebp, Reg|Dword|BaseIndex, 0, 5, 5, Dw2Inval\n+esi, Reg|Dword|BaseIndex, 0, 6, 6, Dw2Inval\n+edi, Reg|Dword|BaseIndex, 0, 7, 7, Dw2Inval\n+r8d, Reg|Dword|BaseIndex, RegRex, 0, Dw2Inval, Dw2Inval\n+r9d, Reg|Dword|BaseIndex, RegRex, 1, Dw2Inval, Dw2Inval\n+r10d, Reg|Dword|BaseIndex, RegRex, 2, Dw2Inval, Dw2Inval\n+r11d, Reg|Dword|BaseIndex, RegRex, 3, Dw2Inval, Dw2Inval\n+r12d, Reg|Dword|BaseIndex, RegRex, 4, Dw2Inval, Dw2Inval\n+r13d, Reg|Dword|BaseIndex, RegRex, 5, Dw2Inval, Dw2Inval\n+r14d, Reg|Dword|BaseIndex, RegRex, 6, Dw2Inval, Dw2Inval\n+r15d, Reg|Dword|BaseIndex, RegRex, 7, Dw2Inval, Dw2Inval\n+rax, Reg|Acc|Qword|BaseIndex, 0, 0, Dw2Inval, 0\n+rcx, Reg|Qword|BaseIndex, 0, 1, Dw2Inval, 2\n+rdx, Reg|Qword|BaseIndex, 0, 2, Dw2Inval, 1\n+rbx, Reg|Qword|BaseIndex, 0, 3, Dw2Inval, 3\n+rsp, Reg|Qword, 0, 4, Dw2Inval, 7\n+rbp, Reg|Qword|BaseIndex, 0, 5, Dw2Inval, 6\n+rsi, Reg|Qword|BaseIndex, 0, 6, Dw2Inval, 4\n+rdi, Reg|Qword|BaseIndex, 0, 7, Dw2Inval, 5\n+r8, Reg|Qword|BaseIndex, RegRex, 0, Dw2Inval, 8\n+r9, Reg|Qword|BaseIndex, RegRex, 1, Dw2Inval, 9\n+r10, Reg|Qword|BaseIndex, RegRex, 2, Dw2Inval, 10\n+r11, Reg|Qword|BaseIndex, RegRex, 3, Dw2Inval, 11\n+r12, Reg|Qword|BaseIndex, RegRex, 4, Dw2Inval, 12\n+r13, Reg|Qword|BaseIndex, RegRex, 5, Dw2Inval, 13\n+r14, Reg|Qword|BaseIndex, RegRex, 6, Dw2Inval, 14\n+r15, Reg|Qword|BaseIndex, RegRex, 7, Dw2Inval, 15\n // Vector mask registers.\n k0, RegMask, 0, 0, 93, 118\n k1, RegMask, 0, 1, 94, 119\n@@ -180,104 +180,104 @@ mm4, RegMMX, 0, 4, 33, 45\n mm5, RegMMX, 0, 5, 34, 46\n mm6, RegMMX, 0, 6, 35, 47\n mm7, RegMMX, 0, 7, 36, 48\n-xmm0, RegXMM|Acc, 0, 0, 21, 17\n-xmm1, RegXMM, 0, 1, 22, 18\n-xmm2, RegXMM, 0, 2, 23, 19\n-xmm3, RegXMM, 0, 3, 24, 20\n-xmm4, RegXMM, 0, 4, 25, 21\n-xmm5, RegXMM, 0, 5, 26, 22\n-xmm6, RegXMM, 0, 6, 27, 23\n-xmm7, RegXMM, 0, 7, 28, 24\n-xmm8, RegXMM, RegRex, 0, Dw2Inval, 25\n-xmm9, RegXMM, RegRex, 1, Dw2Inval, 26\n-xmm10, RegXMM, RegRex, 2, Dw2Inval, 27\n-xmm11, RegXMM, RegRex, 3, Dw2Inval, 28\n-xmm12, RegXMM, RegRex, 4, Dw2Inval, 29\n-xmm13, RegXMM, RegRex, 5, Dw2Inval, 30\n-xmm14, RegXMM, RegRex, 6, Dw2Inval, 31\n-xmm15, RegXMM, RegRex, 7, Dw2Inval, 32\n-xmm16, RegXMM, RegVRex, 0, Dw2Inval, 67\n-xmm17, RegXMM, RegVRex, 1, Dw2Inval, 68\n-xmm18, RegXMM, RegVRex, 2, Dw2Inval, 69\n-xmm19, RegXMM, RegVRex, 3, Dw2Inval, 70\n-xmm20, RegXMM, RegVRex, 4, Dw2Inval, 71\n-xmm21, RegXMM, RegVRex, 5, Dw2Inval, 72\n-xmm22, RegXMM, RegVRex, 6, Dw2Inval, 73\n-xmm23, RegXMM, RegVRex, 7, Dw2Inval, 74\n-xmm24, RegXMM, RegVRex|RegRex, 0, Dw2Inval, 75\n-xmm25, RegXMM, RegVRex|RegRex, 1, Dw2Inval, 76\n-xmm26, RegXMM, RegVRex|RegRex, 2, Dw2Inval, 77\n-xmm27, RegXMM, RegVRex|RegRex, 3, Dw2Inval, 78\n-xmm28, RegXMM, RegVRex|RegRex, 4, Dw2Inval, 79\n-xmm29, RegXMM, RegVRex|RegRex, 5, Dw2Inval, 80\n-xmm30, RegXMM, RegVRex|RegRex, 6, Dw2Inval, 81\n-xmm31, RegXMM, RegVRex|RegRex, 7, Dw2Inval, 82\n+xmm0, RegSIMD|Acc|Xmmword, 0, 0, 21, 17\n+xmm1, RegSIMD|Xmmword, 0, 1, 22, 18\n+xmm2, RegSIMD|Xmmword, 0, 2, 23, 19\n+xmm3, RegSIMD|Xmmword, 0, 3, 24, 20\n+xmm4, RegSIMD|Xmmword, 0, 4, 25, 21\n+xmm5, RegSIMD|Xmmword, 0, 5, 26, 22\n+xmm6, RegSIMD|Xmmword, 0, 6, 27, 23\n+xmm7, RegSIMD|Xmmword, 0, 7, 28, 24\n+xmm8, RegSIMD|Xmmword, RegRex, 0, Dw2Inval, 25\n+xmm9, RegSIMD|Xmmword, RegRex, 1, Dw2Inval, 26\n+xmm10, RegSIMD|Xmmword, RegRex, 2, Dw2Inval, 27\n+xmm11, RegSIMD|Xmmword, RegRex, 3, Dw2Inval, 28\n+xmm12, RegSIMD|Xmmword, RegRex, 4, Dw2Inval, 29\n+xmm13, RegSIMD|Xmmword, RegRex, 5, Dw2Inval, 30\n+xmm14, RegSIMD|Xmmword, RegRex, 6, Dw2Inval, 31\n+xmm15, RegSIMD|Xmmword, RegRex, 7, Dw2Inval, 32\n+xmm16, RegSIMD|Xmmword, RegVRex, 0, Dw2Inval, 67\n+xmm17, RegSIMD|Xmmword, RegVRex, 1, Dw2Inval, 68\n+xmm18, RegSIMD|Xmmword, RegVRex, 2, Dw2Inval, 69\n+xmm19, RegSIMD|Xmmword, RegVRex, 3, Dw2Inval, 70\n+xmm20, RegSIMD|Xmmword, RegVRex, 4, Dw2Inval, 71\n+xmm21, RegSIMD|Xmmword, RegVRex, 5, Dw2Inval, 72\n+xmm22, RegSIMD|Xmmword, RegVRex, 6, Dw2Inval, 73\n+xmm23, RegSIMD|Xmmword, RegVRex, 7, Dw2Inval, 74\n+xmm24, RegSIMD|Xmmword, RegVRex|RegRex, 0, Dw2Inval, 75\n+xmm25, RegSIMD|Xmmword, RegVRex|RegRex, 1, Dw2Inval, 76\n+xmm26, RegSIMD|Xmmword, RegVRex|RegRex, 2, Dw2Inval, 77\n+xmm27, RegSIMD|Xmmword, RegVRex|RegRex, 3, Dw2Inval, 78\n+xmm28, RegSIMD|Xmmword, RegVRex|RegRex, 4, Dw2Inval, 79\n+xmm29, RegSIMD|Xmmword, RegVRex|RegRex, 5, Dw2Inval, 80\n+xmm30, RegSIMD|Xmmword, RegVRex|RegRex, 6, Dw2Inval, 81\n+xmm31, RegSIMD|Xmmword, RegVRex|RegRex, 7, Dw2Inval, 82\n // AVX registers.\n-ymm0, RegYMM, 0, 0, Dw2Inval, Dw2Inval\n-ymm1, RegYMM, 0, 1, Dw2Inval, Dw2Inval\n-ymm2, RegYMM, 0, 2, Dw2Inval, Dw2Inval\n-ymm3, RegYMM, 0, 3, Dw2Inval, Dw2Inval\n-ymm4, RegYMM, 0, 4, Dw2Inval, Dw2Inval\n-ymm5, RegYMM, 0, 5, Dw2Inval, Dw2Inval\n-ymm6, RegYMM, 0, 6, Dw2Inval, Dw2Inval\n-ymm7, RegYMM, 0, 7, Dw2Inval, Dw2Inval\n-ymm8, RegYMM, RegRex, 0, Dw2Inval, Dw2Inval\n-ymm9, RegYMM, RegRex, 1, Dw2Inval, Dw2Inval\n-ymm10, RegYMM, RegRex, 2, Dw2Inval, Dw2Inval\n-ymm11, RegYMM, RegRex, 3, Dw2Inval, Dw2Inval\n-ymm12, RegYMM, RegRex, 4, Dw2Inval, Dw2Inval\n-ymm13, RegYMM, RegRex, 5, Dw2Inval, Dw2Inval\n-ymm14, RegYMM, RegRex, 6, Dw2Inval, Dw2Inval\n-ymm15, RegYMM, RegRex, 7, Dw2Inval, Dw2Inval\n-ymm16, RegYMM, RegVRex, 0, Dw2Inval, Dw2Inval\n-ymm17, RegYMM, RegVRex, 1, Dw2Inval, Dw2Inval\n-ymm18, RegYMM, RegVRex, 2, Dw2Inval, Dw2Inval\n-ymm19, RegYMM, RegVRex, 3, Dw2Inval, Dw2Inval\n-ymm20, RegYMM, RegVRex, 4, Dw2Inval, Dw2Inval\n-ymm21, RegYMM, RegVRex, 5, Dw2Inval, Dw2Inval\n-ymm22, RegYMM, RegVRex, 6, Dw2Inval, Dw2Inval\n-ymm23, RegYMM, RegVRex, 7, Dw2Inval, Dw2Inval\n-ymm24, RegYMM, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n-ymm25, RegYMM, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n-ymm26, RegYMM, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n-ymm27, RegYMM, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n-ymm28, RegYMM, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n-ymm29, RegYMM, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n-ymm30, RegYMM, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n-ymm31, RegYMM, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n+ymm0, RegSIMD|Ymmword, 0, 0, Dw2Inval, Dw2Inval\n+ymm1, RegSIMD|Ymmword, 0, 1, Dw2Inval, Dw2Inval\n+ymm2, RegSIMD|Ymmword, 0, 2, Dw2Inval, Dw2Inval\n+ymm3, RegSIMD|Ymmword, 0, 3, Dw2Inval, Dw2Inval\n+ymm4, RegSIMD|Ymmword, 0, 4, Dw2Inval, Dw2Inval\n+ymm5, RegSIMD|Ymmword, 0, 5, Dw2Inval, Dw2Inval\n+ymm6, RegSIMD|Ymmword, 0, 6, Dw2Inval, Dw2Inval\n+ymm7, RegSIMD|Ymmword, 0, 7, Dw2Inval, Dw2Inval\n+ymm8, RegSIMD|Ymmword, RegRex, 0, Dw2Inval, Dw2Inval\n+ymm9, RegSIMD|Ymmword, RegRex, 1, Dw2Inval, Dw2Inval\n+ymm10, RegSIMD|Ymmword, RegRex, 2, Dw2Inval, Dw2Inval\n+ymm11, RegSIMD|Ymmword, RegRex, 3, Dw2Inval, Dw2Inval\n+ymm12, RegSIMD|Ymmword, RegRex, 4, Dw2Inval, Dw2Inval\n+ymm13, RegSIMD|Ymmword, RegRex, 5, Dw2Inval, Dw2Inval\n+ymm14, RegSIMD|Ymmword, RegRex, 6, Dw2Inval, Dw2Inval\n+ymm15, RegSIMD|Ymmword, RegRex, 7, Dw2Inval, Dw2Inval\n+ymm16, RegSIMD|Ymmword, RegVRex, 0, Dw2Inval, Dw2Inval\n+ymm17, RegSIMD|Ymmword, RegVRex, 1, Dw2Inval, Dw2Inval\n+ymm18, RegSIMD|Ymmword, RegVRex, 2, Dw2Inval, Dw2Inval\n+ymm19, RegSIMD|Ymmword, RegVRex, 3, Dw2Inval, Dw2Inval\n+ymm20, RegSIMD|Ymmword, RegVRex, 4, Dw2Inval, Dw2Inval\n+ymm21, RegSIMD|Ymmword, RegVRex, 5, Dw2Inval, Dw2Inval\n+ymm22, RegSIMD|Ymmword, RegVRex, 6, Dw2Inval, Dw2Inval\n+ymm23, RegSIMD|Ymmword, RegVRex, 7, Dw2Inval, Dw2Inval\n+ymm24, RegSIMD|Ymmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n+ymm25, RegSIMD|Ymmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n+ymm26, RegSIMD|Ymmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n+ymm27, RegSIMD|Ymmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n+ymm28, RegSIMD|Ymmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n+ymm29, RegSIMD|Ymmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n+ymm30, RegSIMD|Ymmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n+ymm31, RegSIMD|Ymmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n // AVX512 registers.\n-zmm0, RegZMM, 0, 0, Dw2Inval, Dw2Inval\n-zmm1, RegZMM, 0, 1, Dw2Inval, Dw2Inval\n-zmm2, RegZMM, 0, 2, Dw2Inval, Dw2Inval\n-zmm3, RegZMM, 0, 3, Dw2Inval, Dw2Inval\n-zmm4, RegZMM, 0, 4, Dw2Inval, Dw2Inval\n-zmm5, RegZMM, 0, 5, Dw2Inval, Dw2Inval\n-zmm6, RegZMM, 0, 6, Dw2Inval, Dw2Inval\n-zmm7, RegZMM, 0, 7, Dw2Inval, Dw2Inval\n-zmm8, RegZMM, RegRex, 0, Dw2Inval, Dw2Inval\n-zmm9, RegZMM, RegRex, 1, Dw2Inval, Dw2Inval\n-zmm10, RegZMM, RegRex, 2, Dw2Inval, Dw2Inval\n-zmm11, RegZMM, RegRex, 3, Dw2Inval, Dw2Inval\n-zmm12, RegZMM, RegRex, 4, Dw2Inval, Dw2Inval\n-zmm13, RegZMM, RegRex, 5, Dw2Inval, Dw2Inval\n-zmm14, RegZMM, RegRex, 6, Dw2Inval, Dw2Inval\n-zmm15, RegZMM, RegRex, 7, Dw2Inval, Dw2Inval\n-zmm16, RegZMM, RegVRex, 0, Dw2Inval, Dw2Inval\n-zmm17, RegZMM, RegVRex, 1, Dw2Inval, Dw2Inval\n-zmm18, RegZMM, RegVRex, 2, Dw2Inval, Dw2Inval\n-zmm19, RegZMM, RegVRex, 3, Dw2Inval, Dw2Inval\n-zmm20, RegZMM, RegVRex, 4, Dw2Inval, Dw2Inval\n-zmm21, RegZMM, RegVRex, 5, Dw2Inval, Dw2Inval\n-zmm22, RegZMM, RegVRex, 6, Dw2Inval, Dw2Inval\n-zmm23, RegZMM, RegVRex, 7, Dw2Inval, Dw2Inval\n-zmm24, RegZMM, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n-zmm25, RegZMM, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n-zmm26, RegZMM, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n-zmm27, RegZMM, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n-zmm28, RegZMM, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n-zmm29, RegZMM, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n-zmm30, RegZMM, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n-zmm31, RegZMM, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n+zmm0, RegSIMD|Zmmword, 0, 0, Dw2Inval, Dw2Inval\n+zmm1, RegSIMD|Zmmword, 0, 1, Dw2Inval, Dw2Inval\n+zmm2, RegSIMD|Zmmword, 0, 2, Dw2Inval, Dw2Inval\n+zmm3, RegSIMD|Zmmword, 0, 3, Dw2Inval, Dw2Inval\n+zmm4, RegSIMD|Zmmword, 0, 4, Dw2Inval, Dw2Inval\n+zmm5, RegSIMD|Zmmword, 0, 5, Dw2Inval, Dw2Inval\n+zmm6, RegSIMD|Zmmword, 0, 6, Dw2Inval, Dw2Inval\n+zmm7, RegSIMD|Zmmword, 0, 7, Dw2Inval, Dw2Inval\n+zmm8, RegSIMD|Zmmword, RegRex, 0, Dw2Inval, Dw2Inval\n+zmm9, RegSIMD|Zmmword, RegRex, 1, Dw2Inval, Dw2Inval\n+zmm10, RegSIMD|Zmmword, RegRex, 2, Dw2Inval, Dw2Inval\n+zmm11, RegSIMD|Zmmword, RegRex, 3, Dw2Inval, Dw2Inval\n+zmm12, RegSIMD|Zmmword, RegRex, 4, Dw2Inval, Dw2Inval\n+zmm13, RegSIMD|Zmmword, RegRex, 5, Dw2Inval, Dw2Inval\n+zmm14, RegSIMD|Zmmword, RegRex, 6, Dw2Inval, Dw2Inval\n+zmm15, RegSIMD|Zmmword, RegRex, 7, Dw2Inval, Dw2Inval\n+zmm16, RegSIMD|Zmmword, RegVRex, 0, Dw2Inval, Dw2Inval\n+zmm17, RegSIMD|Zmmword, RegVRex, 1, Dw2Inval, Dw2Inval\n+zmm18, RegSIMD|Zmmword, RegVRex, 2, Dw2Inval, Dw2Inval\n+zmm19, RegSIMD|Zmmword, RegVRex, 3, Dw2Inval, Dw2Inval\n+zmm20, RegSIMD|Zmmword, RegVRex, 4, Dw2Inval, Dw2Inval\n+zmm21, RegSIMD|Zmmword, RegVRex, 5, Dw2Inval, Dw2Inval\n+zmm22, RegSIMD|Zmmword, RegVRex, 6, Dw2Inval, Dw2Inval\n+zmm23, RegSIMD|Zmmword, RegVRex, 7, Dw2Inval, Dw2Inval\n+zmm24, RegSIMD|Zmmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n+zmm25, RegSIMD|Zmmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n+zmm26, RegSIMD|Zmmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n+zmm27, RegSIMD|Zmmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n+zmm28, RegSIMD|Zmmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n+zmm29, RegSIMD|Zmmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n+zmm30, RegSIMD|Zmmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n+zmm31, RegSIMD|Zmmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n // Bound registers for MPX\n bnd0, RegBND, 0, 0, Dw2Inval, Dw2Inval\n bnd1, RegBND, 0, 1, Dw2Inval, Dw2Inval\n@@ -292,14 +292,14 @@ eip, Dword, RegRex64, RegIP, 8, Dw2Inval\n riz, Qword|BaseIndex, RegRex64, RegIZ, Dw2Inval, Dw2Inval\n eiz, Dword|BaseIndex, 0, RegIZ, Dw2Inval, Dw2Inval\n // fp regs.\n-st(0), FloatReg|Acc, 0, 0, 11, 33\n-st(1), FloatReg, 0, 1, 12, 34\n-st(2), FloatReg, 0, 2, 13, 35\n-st(3), FloatReg, 0, 3, 14, 36\n-st(4), FloatReg, 0, 4, 15, 37\n-st(5), FloatReg, 0, 5, 16, 38\n-st(6), FloatReg, 0, 6, 17, 39\n-st(7), FloatReg, 0, 7, 18, 40\n+st(0), Reg|Acc|Tbyte, 0, 0, 11, 33\n+st(1), Reg|Tbyte, 0, 1, 12, 34\n+st(2), Reg|Tbyte, 0, 2, 13, 35\n+st(3), Reg|Tbyte, 0, 3, 14, 36\n+st(4), Reg|Tbyte, 0, 4, 15, 37\n+st(5), Reg|Tbyte, 0, 5, 16, 38\n+st(6), Reg|Tbyte, 0, 6, 17, 39\n+st(7), Reg|Tbyte, 0, 7, 18, 40\n // Pseudo-register names only used in .cfi_* directives\n eflags, 0, 0, 0, 9, 49\n rflags, 0, 0, 0, Dw2Inval, 49"
    }
  ]
}