{
  "sha": "90d3edf01630093142e833235abea548aa78e65b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTBkM2VkZjAxNjMwMDkzMTQyZTgzMzIzNWFiZWE1NDhhYTc4ZTY1Yg==",
  "commit": {
    "author": {
      "name": "Michael Forney",
      "email": "mforney@mforney.org",
      "date": "2021-06-14T13:05:39Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-06-14T13:05:39Z"
    },
    "message": "GNU gettext introduced this change[0] in version 0.19.8 to fix gettext detection with musl libc, since it does not define these internal symbols.\n\nThis allows binutils to build with musl gettext rather than falling\nback to the bundled version.\n\n[0] https://git.savannah.gnu.org/gitweb/?p=gettext.git;a=commit;h=b67399b4\n\n2021-06-13  Michael Forney  <mforney@mforney.org>\n\nconfig/ChangeLog:\n\n        * gettext.m4 (AM_GNU_GETTEXT): Skip checks for the internal\n        symbols _nl_msg_cat_cntr, _nl_domain_bindings, and\n        _nl_expand_alias, if __GNU_GETTEXT_SUPPORTED_REVISION is defined.\n\tBackport of gettext serial 68 patch.\n\nintl/ChangeLog:\n\n\t* configure: Regenerate.\n---\nThi",
    "tree": {
      "sha": "60b20dad93a50411a0d0853a17f2e019baab991c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/60b20dad93a50411a0d0853a17f2e019baab991c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/90d3edf01630093142e833235abea548aa78e65b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90d3edf01630093142e833235abea548aa78e65b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/90d3edf01630093142e833235abea548aa78e65b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90d3edf01630093142e833235abea548aa78e65b/comments",
  "author": {
    "login": "michaelforney",
    "id": 52851,
    "node_id": "MDQ6VXNlcjUyODUx",
    "avatar_url": "https://avatars.githubusercontent.com/u/52851?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelforney",
    "html_url": "https://github.com/michaelforney",
    "followers_url": "https://api.github.com/users/michaelforney/followers",
    "following_url": "https://api.github.com/users/michaelforney/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelforney/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelforney/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelforney/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelforney/orgs",
    "repos_url": "https://api.github.com/users/michaelforney/repos",
    "events_url": "https://api.github.com/users/michaelforney/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelforney/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "987610f2d6841a48009a170bd401112a23f040f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/987610f2d6841a48009a170bd401112a23f040f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/987610f2d6841a48009a170bd401112a23f040f2"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 67,
    "deletions": 20
  },
  "files": [
    {
      "sha": "f2dd1152964cea9416948a5a306c38bace9a76bb",
      "filename": "config/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d3edf01630093142e833235abea548aa78e65b/config/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d3edf01630093142e833235abea548aa78e65b/config/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/ChangeLog?ref=90d3edf01630093142e833235abea548aa78e65b",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-14  Michael Forney  <mforney@mforney.org>\n+\n+\t* gettext.m4 (AM_GNU_GETTEXT): Skip checks for the internal\n+\tsymbols _nl_msg_cat_cntr, _nl_domain_bindings, and\n+\t_nl_expand_alias, if __GNU_GETTEXT_SUPPORTED_REVISION is defined.\n+\tBackport of gettext serial 68 patch.\n+\n 2021-05-18  Mike Frysinger  <vapier@gentoo.org>\n \n \t* acinclude.m4 (CYG_AC_PATH_SIM, CYG_AC_PATH_DEVO): Delete."
    },
    {
      "sha": "5b42bb1652318092df643e20e8ade2d49148fa46",
      "filename": "config/gettext.m4",
      "status": "modified",
      "additions": 35,
      "deletions": 17,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d3edf01630093142e833235abea548aa78e65b/config/gettext.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d3edf01630093142e833235abea548aa78e65b/config/gettext.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/gettext.m4?ref=90d3edf01630093142e833235abea548aa78e65b",
      "patch": "@@ -128,17 +128,23 @@ AC_DEFUN([AM_GNU_GETTEXT],\n \n         AC_CACHE_CHECK([for GNU gettext in libc], gt_cv_func_gnugettext_libc,\n          [AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern int *_nl_domain_bindings;\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_domain_bindings)\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern int *_nl_domain_bindings;],\n+], []),\n             [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_domain_bindings],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n             gt_cv_func_gnugettext_libc=yes,\n             gt_cv_func_gnugettext_libc=no)])\n \n@@ -160,42 +166,54 @@ return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\",\n             LIBS=\"$LIBS $LIBINTL\"\n             dnl Now see whether libintl exists and does not depend on libiconv.\n             AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-const char *_nl_expand_alias ();],\n+], []),\n               [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_expand_alias (0)],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n               gt_cv_func_gnugettext_libintl=yes,\n               gt_cv_func_gnugettext_libintl=no)\n             dnl Now see whether libintl exists and depends on libiconv.\n             if test \"$gt_cv_func_gnugettext_libintl\" != yes && test -n \"$LIBICONV\"; then\n               LIBS=\"$LIBS $LIBICONV\"\n               AC_TRY_LINK([#include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n+extern int _nl_msg_cat_cntr;\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n ]ifelse([$2], [need-formatstring-macros],\n [#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n #define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)\n #endif\n changequote(,)dnl\n typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];\n changequote([,])dnl\n-], [])[extern int _nl_msg_cat_cntr;\n-extern\n-#ifdef __cplusplus\n-\"C\"\n-#endif\n-const char *_nl_expand_alias ();],\n+], []),\n                 [bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + _nl_msg_cat_cntr + *_nl_expand_alias (0)],\n+return (int) gettext (\"\")]ifelse([$2], [need-ngettext], [ + (int) ngettext (\"\", \"\", 0)], [])[ + __GNU_GETTEXT_SYMBOL_EXPRESSION],\n                [LIBINTL=\"$LIBINTL $LIBICONV\"\n                 LTLIBINTL=\"$LTLIBINTL $LTLIBICONV\"\n                 gt_cv_func_gnugettext_libintl=yes"
    },
    {
      "sha": "00827d7faeb513216f68343f53444f74d0c3bf9a",
      "filename": "intl/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d3edf01630093142e833235abea548aa78e65b/intl/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d3edf01630093142e833235abea548aa78e65b/intl/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/intl/ChangeLog?ref=90d3edf01630093142e833235abea548aa78e65b",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-14  Michael Forney  <mforney@mforney.org>\n+\n+\t* configure: Regenerate.\n+\n 2021-02-04  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac (LIBINTL): Transform into -L/-lintl form."
    },
    {
      "sha": "2d0b2abec0543767ffddf638961dcc27cf3c09c8",
      "filename": "intl/configure",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90d3edf01630093142e833235abea548aa78e65b/intl/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90d3edf01630093142e833235abea548aa78e65b/intl/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/intl/configure?ref=90d3edf01630093142e833235abea548aa78e65b",
      "patch": "@@ -5981,13 +5981,19 @@ else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n extern int _nl_msg_cat_cntr;\n extern int *_nl_domain_bindings;\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_domain_bindings)\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n+\n int\n main ()\n {\n bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + _nl_msg_cat_cntr + *_nl_domain_bindings\n+return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + __GNU_GETTEXT_SYMBOL_EXPRESSION\n   ;\n   return 0;\n }\n@@ -6410,17 +6416,23 @@ else\n                         cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n extern int _nl_msg_cat_cntr;\n extern\n #ifdef __cplusplus\n \"C\"\n #endif\n const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n+\n int\n main ()\n {\n bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + _nl_msg_cat_cntr + *_nl_expand_alias (0)\n+return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + __GNU_GETTEXT_SYMBOL_EXPRESSION\n   ;\n   return 0;\n }\n@@ -6437,17 +6449,23 @@ rm -f core conftest.err conftest.$ac_objext \\\n               cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <libintl.h>\n+#ifndef __GNU_GETTEXT_SUPPORTED_REVISION\n extern int _nl_msg_cat_cntr;\n extern\n #ifdef __cplusplus\n \"C\"\n #endif\n const char *_nl_expand_alias ();\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (0))\n+#else\n+#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0\n+#endif\n+\n int\n main ()\n {\n bindtextdomain (\"\", \"\");\n-return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + _nl_msg_cat_cntr + *_nl_expand_alias (0)\n+return (int) gettext (\"\") + (int) ngettext (\"\", \"\", 0) + __GNU_GETTEXT_SYMBOL_EXPRESSION\n   ;\n   return 0;\n }"
    }
  ]
}