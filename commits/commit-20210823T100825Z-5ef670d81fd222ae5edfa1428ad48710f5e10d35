{
  "sha": "5ef670d81fd222ae5edfa1428ad48710f5e10d35",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWVmNjcwZDgxZmQyMjJhZTVlZGZhMTQyOGFkNDg3MTBmNWUxMGQzNQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-23T10:08:25Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-23T10:08:25Z"
    },
    "message": "[gdb/testsuite] Add dummy start and end CUs in dwarf assembly\n\nSay one compiles a hello.c:\n...\n$ gcc -g hello.c\n...\n\nOn openSUSE Leap 15.2 and Tumbleweed, the CU for hello.c is typically not the\nfirst in .debug_info, nor the last, due to presence of debug information in\nobjects for sources like:\n- ../sysdeps/x86_64/start.S\n- init.c\n- ../sysdeps/x86_64/crti.S\n- elf-init.c\n- ../sysdeps/x86_64/crtn.S.\n\nOn other systems, say ubuntu 18.04.5, the CU for hello.c is typically the\nfirst and the last in .debug_info.\n\nThis difference has caused me to find some errors in the dwarf assembly\nusing openSUSE, that didn't show up on other platforms.\n\nForce the same situation on other platforms by adding a dummy start\nand end CU.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2021-08-22  Tom de Vries  <tdevries@suse.de>\n\n\tPR testsuite/28235\n\t* lib/dwarf.exp (Dwarf::dummy_cu): New proc.\n\t(Dwarf::assemble): Add dummy start and end CU.",
    "tree": {
      "sha": "0e82fd1ab01854e02b0fa65fa7bcaa91fe399b52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e82fd1ab01854e02b0fa65fa7bcaa91fe399b52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ef670d81fd222ae5edfa1428ad48710f5e10d35",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ef670d81fd222ae5edfa1428ad48710f5e10d35",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ef670d81fd222ae5edfa1428ad48710f5e10d35",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ef670d81fd222ae5edfa1428ad48710f5e10d35/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d53f8a847228418346457254736dd5e7824bf504",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d53f8a847228418346457254736dd5e7824bf504",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d53f8a847228418346457254736dd5e7824bf504"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 16,
    "deletions": 1
  },
  "files": [
    {
      "sha": "ce7b5983ab9d990457dfb50ac255c0a91ff92bab",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef670d81fd222ae5edfa1428ad48710f5e10d35/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef670d81fd222ae5edfa1428ad48710f5e10d35/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=5ef670d81fd222ae5edfa1428ad48710f5e10d35",
      "patch": "@@ -2252,6 +2252,13 @@ namespace eval Dwarf {\n \t}\n     }\n \n+    # Emit a dummy CU.\n+    proc dummy_cu {} {\n+\t# Generate a CU with default options and empty body.\n+\tcu {} {\n+\t}\n+    }\n+\n     # The top-level interface to the DWARF assembler.\n     # FILENAME is the name of the file where the generated assembly\n     # code is written.\n@@ -2291,7 +2298,7 @@ namespace eval Dwarf {\n \t}\n \n \tset _output_file [open $filename w]\n-\tset _cu_count 0\n+\tset _cu_count -1\n \t_empty_array _deferred_output\n \tset _defer \"\"\n \tset _label_num 0\n@@ -2304,11 +2311,19 @@ namespace eval Dwarf {\n \n \tset _debug_addr_index 0\n \n+\t# Dummy CU at the start to ensure that the first CU in $body is not\n+\t# the first in .debug_info.\n+\tdummy_cu\n+\n \t# Not \"uplevel\" here, because we want to evaluate in this\n \t# namespace.  This is somewhat bad because it means we can't\n \t# readily refer to outer variables.\n \teval $body\n \n+\t# Dummy CU at the end to ensure that the last CU in $body is not\n+\t# the last in .debug_info.\n+\tdummy_cu\n+\n \t_write_deferred_output\n \n \tcatch {close $_output_file}"
    }
  ]
}