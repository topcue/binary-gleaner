{
  "sha": "1a0ea39913588b4e7ae47e384683784314fca8fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWEwZWEzOTkxMzU4OGI0ZTdhZTQ3ZTM4NDY4Mzc4NDMxNGZjYThmZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-16T15:27:30Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-23T09:57:14Z"
    },
    "message": "gdb: move f_language class into a header file\n\nMoves the f_language class from f-lang.c into f-lang.h.  The benefit\nof this is that functions declared in other f-*.c files can become\nmember functions without having to go through a level of indirection.\n\nSome additional support functions have now become private member\nfunctions of the f_language class, these are mostly functions that\nthen called some other function that was itself a member of the\nlanguage_defn class hierarchy.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (f_parse): Rename to...\n\t(f_language::parser): ...this.\n\t* f-lang.c (f_get_encoding): Rename to...\n\t(f_language::get_encoding): ...this.\n\t(f_op_print_tab): Rename to...\n\t(f_language::op_print_tab): ...this.\n\t(exp_descriptor_f): Rename to...\n\t(f_language::exp_descriptor_tab): ...this.\n\t(class f_language): Moved to f-lang.h.\n\t(f_language::language_arch_info): New function, moved out of class\n\tdeclaration.\n\t(f_language::search_name_hash): Likewise.\n\t(f_language::lookup_symbol_nonlocal): Likewise.\n\t(f_language::get_symbol_name_matcher_inner): Likewise.\n\t* f-lang.h: Add 'valprint.h' include.\n\t(class f_language): Moved here from f-lang.c.\n\t* f-typeprint.c (f_type_print_args): Delete commented out\n\tdeclaration.\n\t(f_print_typedef): Rename to...\n\t(f_language::print_typedef): ...this.\n\t(f_print_type): Rename to...\n\t(f_language::print_type): ...this.\n\t(f_type_print_varspec_prefix): Delete declaration and rename to...\n\t(f_language::f_type_print_varspec_prefix): ...this.\n\t(f_type_print_varspec_suffix): Delete declaration and rename to...\n\t(f_language::f_type_print_varspec_suffix): ...this.\n\t(f_type_print_base): Delete declaration and rename to...\n\t(f_language::f_type_print_base): ...this.\n\t* f-valprint.c (f_value_print_inner): Rename to...\n\t(f_language::value_print_inner): ...this.\n\t* parse.c: Delete 'f-lang.h' include.",
    "tree": {
      "sha": "eaacbc454afff822ae1f7495b6bc16532ce2de90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eaacbc454afff822ae1f7495b6bc16532ce2de90"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a0ea39913588b4e7ae47e384683784314fca8fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a0ea39913588b4e7ae47e384683784314fca8fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a0ea39913588b4e7ae47e384683784314fca8fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a0ea39913588b4e7ae47e384683784314fca8fe/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "88cefd9be076ea1f66b933be484d82f200b0f6c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88cefd9be076ea1f66b933be484d82f200b0f6c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/88cefd9be076ea1f66b933be484d82f200b0f6c3"
    }
  ],
  "stats": {
    "total": 716,
    "additions": 387,
    "deletions": 329
  },
  "files": [
    {
      "sha": "398d9a7fd1052ef794d8b21b2fcef69472641acc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -1,3 +1,37 @@\n+2020-10-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-exp.y (f_parse): Rename to...\n+\t(f_language::parser): ...this.\n+\t* f-lang.c (f_get_encoding): Rename to...\n+\t(f_language::get_encoding): ...this.\n+\t(f_op_print_tab): Rename to...\n+\t(f_language::op_print_tab): ...this.\n+\t(exp_descriptor_f): Rename to...\n+\t(f_language::exp_descriptor_tab): ...this.\n+\t(class f_language): Moved to f-lang.h.\n+\t(f_language::language_arch_info): New function, moved out of class\n+\tdeclaration.\n+\t(f_language::search_name_hash): Likewise.\n+\t(f_language::lookup_symbol_nonlocal): Likewise.\n+\t(f_language::get_symbol_name_matcher_inner): Likewise.\n+\t* f-lang.h: Add 'valprint.h' include.\n+\t(class f_language): Moved here from f-lang.c.\n+\t* f-typeprint.c (f_type_print_args): Delete commented out\n+\tdeclaration.\n+\t(f_print_typedef): Rename to...\n+\t(f_language::print_typedef): ...this.\n+\t(f_print_type): Rename to...\n+\t(f_language::print_type): ...this.\n+\t(f_type_print_varspec_prefix): Delete declaration and rename to...\n+\t(f_language::f_type_print_varspec_prefix): ...this.\n+\t(f_type_print_varspec_suffix): Delete declaration and rename to...\n+\t(f_language::f_type_print_varspec_suffix): ...this.\n+\t(f_type_print_base): Delete declaration and rename to...\n+\t(f_language::f_type_print_base): ...this.\n+\t* f-valprint.c (f_value_print_inner): Rename to...\n+\t(f_language::value_print_inner): ...this.\n+\t* parse.c: Delete 'f-lang.h' include.\n+\n 2020-10-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* language.h (language_defn::print_type): Add variable names in"
    },
    {
      "sha": "6c1c1fa11d4c65f6ce80ca4e826d23e7e38c776e",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -1383,7 +1383,7 @@ yylex (void)\n }\n \n int\n-f_parse (struct parser_state *par_state)\n+f_language::parser (struct parser_state *par_state) const\n {\n   /* Setting up the parser state.  */\n   scoped_restore pstate_restore = make_scoped_restore (&pstate);"
    },
    {
      "sha": "52493743031716f21262e34048879122ea6db128",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 62,
      "deletions": 258,
      "changes": 320,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -44,8 +44,8 @@\n /* Return the encoding that should be used for the character type\n    TYPE.  */\n \n-static const char *\n-f_get_encoding (struct type *type)\n+const char *\n+f_language::get_encoding (struct type *type)\n {\n   const char *encoding;\n \n@@ -72,7 +72,7 @@ f_get_encoding (struct type *type)\n \n /* Table of operators and their precedences for printing expressions.  */\n \n-static const struct op_print f_op_print_tab[] =\n+const struct op_print f_language::op_print_tab[] =\n {\n   {\"+\", BINOP_ADD, PREC_ADD, 0},\n   {\"+\", UNOP_PLUS, PREC_PREFIX, 0},\n@@ -701,7 +701,7 @@ operator_check_f (struct expression *exp, int pos,\n }\n \n /* Expression processing for Fortran.  */\n-static const struct exp_descriptor exp_descriptor_f =\n+const struct exp_descriptor f_language::exp_descriptor_tab =\n {\n   print_subexp_f,\n   operator_length_f,\n@@ -711,268 +711,72 @@ static const struct exp_descriptor exp_descriptor_f =\n   evaluate_subexp_f\n };\n \n-/* Class representing the Fortran language.  */\n+/* See language.h.  */\n \n-class f_language : public language_defn\n+void\n+f_language::language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t\tstruct language_arch_info *lai) const\n {\n-public:\n-  f_language ()\n-    : language_defn (language_fortran)\n-  { /* Nothing.  */ }\n-\n-  /* See language.h.  */\n-\n-  const char *name () const override\n-  { return \"fortran\"; }\n-\n-  /* See language.h.  */\n-\n-  const char *natural_name () const override\n-  { return \"Fortran\"; }\n-\n-  /* See language.h.  */\n-\n-  const std::vector<const char *> &filename_extensions () const override\n-  {\n-    static const std::vector<const char *> extensions = {\n-      \".f\", \".F\", \".for\", \".FOR\", \".ftn\", \".FTN\", \".fpp\", \".FPP\",\n-      \".f90\", \".F90\", \".f95\", \".F95\", \".f03\", \".F03\", \".f08\", \".F08\"\n-    };\n-    return extensions;\n-  }\n-\n-  /* See language.h.  */\n-  void language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t   struct language_arch_info *lai) const override\n-  {\n-    const struct builtin_f_type *builtin = builtin_f_type (gdbarch);\n-\n-    lai->string_char_type = builtin->builtin_character;\n-    lai->primitive_type_vector\n-      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_f_primitive_types + 1,\n-\t\t\t\tstruct type *);\n-\n-    lai->primitive_type_vector [f_primitive_type_character]\n-      = builtin->builtin_character;\n-    lai->primitive_type_vector [f_primitive_type_logical]\n-      = builtin->builtin_logical;\n-    lai->primitive_type_vector [f_primitive_type_logical_s1]\n-      = builtin->builtin_logical_s1;\n-    lai->primitive_type_vector [f_primitive_type_logical_s2]\n-      = builtin->builtin_logical_s2;\n-    lai->primitive_type_vector [f_primitive_type_logical_s8]\n-      = builtin->builtin_logical_s8;\n-    lai->primitive_type_vector [f_primitive_type_real]\n-      = builtin->builtin_real;\n-    lai->primitive_type_vector [f_primitive_type_real_s8]\n-      = builtin->builtin_real_s8;\n-    lai->primitive_type_vector [f_primitive_type_real_s16]\n-      = builtin->builtin_real_s16;\n-    lai->primitive_type_vector [f_primitive_type_complex_s8]\n-      = builtin->builtin_complex_s8;\n-    lai->primitive_type_vector [f_primitive_type_complex_s16]\n-      = builtin->builtin_complex_s16;\n-    lai->primitive_type_vector [f_primitive_type_void]\n-      = builtin->builtin_void;\n-\n-    lai->bool_type_symbol = \"logical\";\n-    lai->bool_type_default = builtin->builtin_logical_s2;\n-  }\n-\n-  /* See language.h.  */\n-  unsigned int search_name_hash (const char *name) const override\n-  {\n-    return cp_search_name_hash (name);\n-  }\n-\n-  /* See language.h.  */\n-\n-  char *demangle_symbol (const char *mangled, int options) const override\n-  {\n-      /* We could support demangling here to provide module namespaces\n-\t also for inferiors with only minimal symbol table (ELF symbols).\n-\t Just the mangling standard is not standardized across compilers\n-\t and there is no DW_AT_producer available for inferiors with only\n-\t the ELF symbols to check the mangling kind.  */\n-    return nullptr;\n-  }\n-\n-  /* See language.h.  */\n-\n-  void print_type (struct type *type, const char *varstring,\n-\t\t   struct ui_file *stream, int show, int level,\n-\t\t   const struct type_print_options *flags) const override\n-  {\n-    f_print_type (type, varstring, stream, show, level, flags);\n-  }\n-\n-  /* See language.h.  This just returns default set of word break\n-     characters but with the modules separator `::' removed.  */\n-\n-  const char *word_break_characters (void) const override\n-  {\n-    static char *retval;\n-\n-    if (!retval)\n-      {\n-\tchar *s;\n-\n-\tretval = xstrdup (language_defn::word_break_characters ());\n-\ts = strchr (retval, ':');\n-\tif (s)\n-\t  {\n-\t    char *last_char = &s[strlen (s) - 1];\n-\n-\t    *s = *last_char;\n-\t    *last_char = 0;\n-\t  }\n-      }\n-    return retval;\n-  }\n-\n-\n-  /* See language.h.  */\n-\n-  void collect_symbol_completion_matches (completion_tracker &tracker,\n-\t\t\t\t\t  complete_symbol_mode mode,\n-\t\t\t\t\t  symbol_name_match_type name_match_type,\n-\t\t\t\t\t  const char *text, const char *word,\n-\t\t\t\t\t  enum type_code code) const override\n-  {\n-    /* Consider the modules separator :: as a valid symbol name character\n-       class.  */\n-    default_collect_symbol_completion_matches_break_on (tracker, mode,\n-\t\t\t\t\t\t\tname_match_type,\n-\t\t\t\t\t\t\ttext, word, \":\",\n-\t\t\t\t\t\t\tcode);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void value_print_inner\n-\t(struct value *val, struct ui_file *stream, int recurse,\n-\t const struct value_print_options *options) const override\n-  {\n-    return f_value_print_inner (val, stream, recurse, options);\n-  }\n-\n-  /* See language.h.  */\n-\n-  struct block_symbol lookup_symbol_nonlocal\n-\t(const char *name, const struct block *block,\n-\t const domain_enum domain) const override\n-  {\n-    return cp_lookup_symbol_nonlocal (this, name, block, domain);\n-  }\n-\n-  /* See language.h.  */\n-\n-  int parser (struct parser_state *ps) const override\n-  {\n-    return f_parse (ps);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void emitchar (int ch, struct type *chtype,\n-\t\t struct ui_file *stream, int quoter) const override\n-  {\n-    const char *encoding = f_get_encoding (chtype);\n-    generic_emit_char (ch, chtype, stream, quoter, encoding);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void printchar (int ch, struct type *chtype,\n-\t\t  struct ui_file *stream) const override\n-  {\n-    fputs_filtered (\"'\", stream);\n-    LA_EMIT_CHAR (ch, chtype, stream, '\\'');\n-    fputs_filtered (\"'\", stream);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void printstr (struct ui_file *stream, struct type *elttype,\n-\t\t const gdb_byte *string, unsigned int length,\n-\t\t const char *encoding, int force_ellipses,\n-\t\t const struct value_print_options *options) const override\n-  {\n-    const char *type_encoding = f_get_encoding (elttype);\n-\n-    if (TYPE_LENGTH (elttype) == 4)\n-      fputs_filtered (\"4_\", stream);\n-\n-    if (!encoding || !*encoding)\n-      encoding = type_encoding;\n-\n-    generic_printstr (stream, elttype, string, length, encoding,\n-\t\t      force_ellipses, '\\'', 0, options);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t      struct ui_file *stream) const override\n-  {\n-    f_print_typedef (type, new_symbol, stream);\n-  }\n-\n-  /* See language.h.  */\n-\n-  bool is_string_type_p (struct type *type) const override\n-  {\n-    type = check_typedef (type);\n-    return (type->code () == TYPE_CODE_STRING\n-\t    || (type->code () == TYPE_CODE_ARRAY\n-\t\t&& TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_CHAR));\n-  }\n-\n-  /* See language.h.  */\n-\n-  const char *struct_too_deep_ellipsis () const override\n-  { return \"(...)\"; }\n-\n-  /* See language.h.  */\n-\n-  bool c_style_arrays_p () const override\n-  { return false; }\n-\n-  /* See language.h.  */\n-\n-  bool range_checking_on_by_default () const override\n-  { return true; }\n-\n-  /* See language.h.  */\n-\n-  enum case_sensitivity case_sensitivity () const override\n-  { return case_sensitive_off; }\n-\n-  /* See language.h.  */\n-\n-  enum array_ordering array_ordering () const override\n-  { return array_column_major; }\n-\n-  /* See language.h.  */\n+  const struct builtin_f_type *builtin = builtin_f_type (gdbarch);\n+\n+  lai->string_char_type = builtin->builtin_character;\n+  lai->primitive_type_vector\n+    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_f_primitive_types + 1,\n+\t\t\t      struct type *);\n+\n+  lai->primitive_type_vector [f_primitive_type_character]\n+    = builtin->builtin_character;\n+  lai->primitive_type_vector [f_primitive_type_logical]\n+    = builtin->builtin_logical;\n+  lai->primitive_type_vector [f_primitive_type_logical_s1]\n+    = builtin->builtin_logical_s1;\n+  lai->primitive_type_vector [f_primitive_type_logical_s2]\n+    = builtin->builtin_logical_s2;\n+  lai->primitive_type_vector [f_primitive_type_logical_s8]\n+    = builtin->builtin_logical_s8;\n+  lai->primitive_type_vector [f_primitive_type_real]\n+    = builtin->builtin_real;\n+  lai->primitive_type_vector [f_primitive_type_real_s8]\n+    = builtin->builtin_real_s8;\n+  lai->primitive_type_vector [f_primitive_type_real_s16]\n+    = builtin->builtin_real_s16;\n+  lai->primitive_type_vector [f_primitive_type_complex_s8]\n+    = builtin->builtin_complex_s8;\n+  lai->primitive_type_vector [f_primitive_type_complex_s16]\n+    = builtin->builtin_complex_s16;\n+  lai->primitive_type_vector [f_primitive_type_void]\n+    = builtin->builtin_void;\n+\n+  lai->bool_type_symbol = \"logical\";\n+  lai->bool_type_default = builtin->builtin_logical_s2;\n+}\n \n-  const struct exp_descriptor *expression_ops () const override\n-  { return &exp_descriptor_f; }\n+/* See language.h.  */\n \n-  /* See language.h.  */\n+unsigned int\n+f_language::search_name_hash (const char *name) const\n+{\n+  return cp_search_name_hash (name);\n+}\n \n-  const struct op_print *opcode_print_table () const override\n-  { return f_op_print_tab; }\n+/* See language.h.  */\n \n-protected:\n+struct block_symbol\n+f_language::lookup_symbol_nonlocal (const char *name,\n+\t\t\t\t    const struct block *block,\n+\t\t\t\t    const domain_enum domain) const\n+{\n+  return cp_lookup_symbol_nonlocal (this, name, block, domain);\n+}\n \n-  /* See language.h.  */\n+/* See language.h.  */\n \n-  symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n-\t(const lookup_name_info &lookup_name) const override\n-  {\n-    return cp_get_symbol_name_matcher (lookup_name);\n-  }\n-};\n+symbol_name_matcher_ftype *\n+f_language::get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const\n+{\n+  return cp_get_symbol_name_matcher (lookup_name);\n+}\n \n /* Single instance of the Fortran language class.  */\n "
    },
    {
      "sha": "e59fdef1b19c8286a03931e191511e182dd1c363",
      "filename": "gdb/f-lang.h",
      "status": "modified",
      "additions": 262,
      "deletions": 10,
      "changes": 272,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.h?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -23,24 +23,276 @@\n #ifndef F_LANG_H\n #define F_LANG_H\n \n+#include \"valprint.h\"\n+\n struct type_print_options;\n struct parser_state;\n \n-extern int f_parse (struct parser_state *);\n+/* Class representing the Fortran language.  */\n+\n+class f_language : public language_defn\n+{\n+public:\n+  f_language ()\n+    : language_defn (language_fortran)\n+  { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"fortran\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Fortran\"; }\n+\n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = {\n+      \".f\", \".F\", \".for\", \".FOR\", \".ftn\", \".FTN\", \".fpp\", \".FPP\",\n+      \".f90\", \".F90\", \".f95\", \".F95\", \".f03\", \".F03\", \".f08\", \".F08\"\n+    };\n+    return extensions;\n+  }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override;\n+\n+  /* See language.h.  */\n+  unsigned int search_name_hash (const char *name) const override;\n+\n+  /* See language.h.  */\n+\n+  char *demangle_symbol (const char *mangled, int options) const override\n+  {\n+      /* We could support demangling here to provide module namespaces\n+\t also for inferiors with only minimal symbol table (ELF symbols).\n+\t Just the mangling standard is not standardized across compilers\n+\t and there is no DW_AT_producer available for inferiors with only\n+\t the ELF symbols to check the mangling kind.  */\n+    return nullptr;\n+  }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override;\n+\n+  /* See language.h.  This just returns default set of word break\n+     characters but with the modules separator `::' removed.  */\n+\n+  const char *word_break_characters (void) const override\n+  {\n+    static char *retval;\n+\n+    if (!retval)\n+      {\n+\tchar *s;\n+\n+\tretval = xstrdup (language_defn::word_break_characters ());\n+\ts = strchr (retval, ':');\n+\tif (s)\n+\t  {\n+\t    char *last_char = &s[strlen (s) - 1];\n+\n+\t    *s = *last_char;\n+\t    *last_char = 0;\n+\t  }\n+      }\n+    return retval;\n+  }\n+\n+\n+  /* See language.h.  */\n+\n+  void collect_symbol_completion_matches (completion_tracker &tracker,\n+\t\t\t\t\t  complete_symbol_mode mode,\n+\t\t\t\t\t  symbol_name_match_type name_match_type,\n+\t\t\t\t\t  const char *text, const char *word,\n+\t\t\t\t\t  enum type_code code) const override\n+  {\n+    /* Consider the modules separator :: as a valid symbol name character\n+       class.  */\n+    default_collect_symbol_completion_matches_break_on (tracker, mode,\n+\t\t\t\t\t\t\tname_match_type,\n+\t\t\t\t\t\t\ttext, word, \":\",\n+\t\t\t\t\t\t\tcode);\n+  }\n+\n+  /* See language.h.  */\n+\n+  void value_print_inner\n+\t(struct value *val, struct ui_file *stream, int recurse,\n+\t const struct value_print_options *options) const override;\n+\n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override;\n+\n+  /* See language.h.  */\n+\n+  int parser (struct parser_state *ps) const override;\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override\n+  {\n+    const char *encoding = get_encoding (chtype);\n+    generic_emit_char (ch, chtype, stream, quoter, encoding);\n+  }\n+\n+  /* See language.h.  */\n+\n+  void printchar (int ch, struct type *chtype,\n+\t\t  struct ui_file *stream) const override\n+  {\n+    fputs_filtered (\"'\", stream);\n+    LA_EMIT_CHAR (ch, chtype, stream, '\\'');\n+    fputs_filtered (\"'\", stream);\n+  }\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    const char *type_encoding = get_encoding (elttype);\n+\n+    if (TYPE_LENGTH (elttype) == 4)\n+      fputs_filtered (\"4_\", stream);\n+\n+    if (!encoding || !*encoding)\n+      encoding = type_encoding;\n+\n+    generic_printstr (stream, elttype, string, length, encoding,\n+\t\t      force_ellipses, '\\'', 0, options);\n+  }\n \n-/* Implement the la_print_typedef language method for Fortran.  */\n+  /* See language.h.  */\n \n-extern void f_print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t\t     struct ui_file *stream);\n+  void print_typedef (struct type *type, struct symbol *new_symbol,\n+\t\t      struct ui_file *stream) const override;\n \n-extern void f_print_type (struct type *, const char *, struct ui_file *, int,\n-\t\t\t  int, const struct type_print_options *);\n+  /* See language.h.  */\n \n-/* Implement la_value_print_inner for Fortran.  */\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    type = check_typedef (type);\n+    return (type->code () == TYPE_CODE_STRING\n+\t    || (type->code () == TYPE_CODE_ARRAY\n+\t\t&& TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_CHAR));\n+  }\n \n-extern void f_value_print_inner (struct value *val, struct ui_file *stream,\n-\t\t\t\t  int recurse,\n-\t\t\t\t  const struct value_print_options *options);\n+  /* See language.h.  */\n+\n+  const char *struct_too_deep_ellipsis () const override\n+  { return \"(...)\"; }\n+\n+  /* See language.h.  */\n+\n+  bool c_style_arrays_p () const override\n+  { return false; }\n+\n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n+\n+  /* See language.h.  */\n+\n+  enum case_sensitivity case_sensitivity () const override\n+  { return case_sensitive_off; }\n+\n+  /* See language.h.  */\n+\n+  enum array_ordering array_ordering () const override\n+  { return array_column_major; }\n+\n+  /* See language.h.  */\n+\n+  const struct exp_descriptor *expression_ops () const override\n+  { return &exp_descriptor_tab; }\n+\n+  /* See language.h.  */\n+\n+  const struct op_print *opcode_print_table () const override\n+  { return op_print_tab; }\n+\n+protected:\n+\n+  /* See language.h.  */\n+\n+  symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const override;\n+\n+private:\n+  /* Table of expression handling functions for use by EXPRESSION_OPS\n+     member function.  */\n+\n+  static const struct exp_descriptor exp_descriptor_tab;\n+\n+  /* Table of opcode data for use by OPCODE_PRINT_TABLE member function.  */\n+\n+  static const struct op_print op_print_tab[];\n+\n+  /* Return the encoding that should be used for the character type\n+     TYPE.  */\n+\n+  static const char *get_encoding (struct type *type);\n+\n+  /* Print any asterisks or open-parentheses needed before the variable\n+     name (to describe its type).\n+\n+     On outermost call, pass 0 for PASSED_A_PTR.\n+     On outermost call, SHOW > 0 means should ignore\n+     any typename for TYPE and show its details.\n+     SHOW is always zero on recursive calls.  */\n+\n+  void f_type_print_varspec_prefix (struct type *type,\n+\t\t\t\t    struct ui_file * stream,\n+\t\t\t\t    int show, int passed_a_ptr) const;\n+\n+  /* Print any array sizes, function arguments or close parentheses needed\n+     after the variable name (to describe its type).  Args work like\n+     c_type_print_varspec_prefix.\n+\n+     PRINT_RANK_ONLY is true when TYPE is an array which should be printed\n+     without the upper and lower bounds being specified, this will occur\n+     when the array is not allocated or not associated and so there are no\n+     known upper or lower bounds.  */\n+\n+  void f_type_print_varspec_suffix (struct type *type,\n+\t\t\t\t    struct ui_file *stream,\n+\t\t\t\t    int show, int passed_a_ptr,\n+\t\t\t\t    int demangled_args,\n+\t\t\t\t    int arrayprint_recurse_level,\n+\t\t\t\t    bool print_rank_only) const;\n+\n+  /* Print the name of the type (or the ultimate pointer target, function\n+     value or array element), or the description of a structure or union.\n+\n+     SHOW nonzero means don't print this type as just its name;\n+     show its real definition even if it has a name.\n+     SHOW zero means print just typename or struct tag if there is one\n+     SHOW negative means abbreviate structure elements.\n+     SHOW is decremented for printing of structure elements.\n+\n+     LEVEL is the depth to indent by.  We increase it for some recursive\n+     calls.  */\n+\n+  void f_type_print_base (struct type *type, struct ui_file *stream, int show,\n+\t\t\t  int level) const;\n+};\n \n /* Language-specific data structures */\n "
    },
    {
      "sha": "0e8bbd614988ee8d68eba16f61d0d6ef1c1e4a03",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 25,
      "deletions": 57,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -33,34 +33,22 @@\n #include \"typeprint.h\"\n #include \"cli/cli-style.h\"\n \n-#if 0\t\t\t\t/* Currently unused.  */\n-static void f_type_print_args (struct type *, struct ui_file *);\n-#endif\n-\n-static void f_type_print_varspec_suffix (struct type *, struct ui_file *, int,\n-\t\t\t\t\t int, int, int, bool);\n-\n-void f_type_print_varspec_prefix (struct type *, struct ui_file *,\n-\t\t\t\t  int, int);\n-\n-void f_type_print_base (struct type *, struct ui_file *, int, int);\n-\f\n-\n-/* See documentation in f-lang.h.  */\n+/* See f-lang.h.  */\n \n void\n-f_print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t struct ui_file *stream)\n+f_language::print_typedef (struct type *type, struct symbol *new_symbol,\n+\t\t\t   struct ui_file *stream) const\n {\n   type = check_typedef (type);\n-  f_print_type (type, \"\", stream, 0, 0, &type_print_raw_options);\n+  print_type (type, \"\", stream, 0, 0, &type_print_raw_options);\n }\n \n-/* LEVEL is the depth to indent lines by.  */\n+/* See f-lang.h.  */\n \n void\n-f_print_type (struct type *type, const char *varstring, struct ui_file *stream,\n-\t      int show, int level, const struct type_print_options *flags)\n+f_language::print_type (struct type *type, const char *varstring,\n+\t\t\tstruct ui_file *stream, int show, int level,\n+\t\t\tconst struct type_print_options *flags) const\n {\n   enum type_code code;\n \n@@ -99,17 +87,12 @@ f_print_type (struct type *type, const char *varstring, struct ui_file *stream,\n    }\n }\n \n-/* Print any asterisks or open-parentheses needed before the\n-   variable name (to describe its type).\n-\n-   On outermost call, pass 0 for PASSED_A_PTR.\n-   On outermost call, SHOW > 0 means should ignore\n-   any typename for TYPE and show its details.\n-   SHOW is always zero on recursive calls.  */\n+/* See f-lang.h.  */\n \n void\n-f_type_print_varspec_prefix (struct type *type, struct ui_file *stream,\n-\t\t\t     int show, int passed_a_ptr)\n+f_language::f_type_print_varspec_prefix (struct type *type,\n+\t\t\t\t\t struct ui_file *stream,\n+\t\t\t\t\t int show, int passed_a_ptr) const\n {\n   if (type == 0)\n     return;\n@@ -158,19 +141,15 @@ f_type_print_varspec_prefix (struct type *type, struct ui_file *stream,\n     }\n }\n \n-/* Print any array sizes, function arguments or close parentheses\n-   needed after the variable name (to describe its type).\n-   Args work like c_type_print_varspec_prefix.\n+/* See f-lang.h.  */\n \n-   PRINT_RANK_ONLY is true when TYPE is an array which should be printed\n-   without the upper and lower bounds being specified, this will occur\n-   when the array is not allocated or not associated and so there are no\n-   known upper or lower bounds.  */\n-\n-static void\n-f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n-\t\t\t     int show, int passed_a_ptr, int demangled_args,\n-\t\t\t     int arrayprint_recurse_level, bool print_rank_only)\n+void\n+f_language::f_type_print_varspec_suffix (struct type *type,\n+\t\t\t\t\t struct ui_file *stream,\n+\t\t\t\t\t int show, int passed_a_ptr,\n+\t\t\t\t\t int demangled_args,\n+\t\t\t\t\t int arrayprint_recurse_level,\n+\t\t\t\t\t bool print_rank_only) const\n {\n   /* No static variables are permitted as an error call may occur during\n      execution of this function.  */\n@@ -263,7 +242,7 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \t  fprintf_filtered (stream, \") \");\n \tfprintf_filtered (stream, \"(\");\n \tif (nfields == 0 && type->is_prototyped ())\n-\t  f_print_type (builtin_f_type (get_type_arch (type))->builtin_void,\n+\t  print_type (builtin_f_type (get_type_arch (type))->builtin_void,\n \t\t\t\"\", stream, -1, 0, 0);\n \telse\n \t  for (i = 0; i < nfields; i++)\n@@ -273,7 +252,7 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n \t\t  fputs_filtered (\", \", stream);\n \t\t  wrap_here (\"    \");\n \t\t}\n-\t      f_print_type (type->field (i).type (), \"\", stream, -1, 0, 0);\n+\t      print_type (type->field (i).type (), \"\", stream, -1, 0, 0);\n \t    }\n \tfprintf_filtered (stream, \")\");\n       }\n@@ -301,22 +280,11 @@ f_type_print_varspec_suffix (struct type *type, struct ui_file *stream,\n     }\n }\n \n-/* Print the name of the type (or the ultimate pointer target,\n-   function value or array element), or the description of a\n-   structure or union.\n-\n-   SHOW nonzero means don't print this type as just its name;\n-   show its real definition even if it has a name.\n-   SHOW zero means print just typename or struct tag if there is one\n-   SHOW negative means abbreviate structure elements.\n-   SHOW is decremented for printing of structure elements.\n-\n-   LEVEL is the depth to indent by.\n-   We increase it for some recursive calls.  */\n+/* See f-lang.h.  */\n \n void\n-f_type_print_base (struct type *type, struct ui_file *stream, int show,\n-\t\t   int level)\n+f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n+\t\t\t       int show, int level) const\n {\n   int index;\n "
    },
    {
      "sha": "95630a76d7d9a2a0e679fd7e9b4273d11a4ccd12",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -214,8 +214,9 @@ static const struct generic_val_print_decorations f_decorations =\n /* See f-lang.h.  */\n \n void\n-f_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n-\t\t      const struct value_print_options *options)\n+f_language::value_print_inner (struct value *val, struct ui_file *stream,\n+\t\t\t       int recurse,\n+\t\t\t       const struct value_print_options *options) const\n {\n   struct type *type = check_typedef (value_type (val));\n   struct gdbarch *gdbarch = get_type_arch (type);"
    },
    {
      "sha": "ccdbdeb518dc4c18109a2b3594792027f1239653",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a0ea39913588b4e7ae47e384683784314fca8fe/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=1a0ea39913588b4e7ae47e384683784314fca8fe",
      "patch": "@@ -39,7 +39,6 @@\n #include \"value.h\"\n #include \"command.h\"\n #include \"language.h\"\n-#include \"f-lang.h\"\n #include \"parser-defs.h\"\n #include \"gdbcmd.h\"\n #include \"symfile.h\"\t\t/* for overlay functions */"
    }
  ]
}