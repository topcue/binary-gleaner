{
  "sha": "5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTIwM2FlMWU4NzAxOTFlZjA1OGMxYjQ1OTBmOWI5ZmJmNmI1OTRlZA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:56Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:09Z"
    },
    "message": "gdbserver: turn target op 'read_offsets' into a method\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's read_offsets op into a method of\n\tprocess_target.\n\n\t* target.h (struct process_stratum_target): Remove the target op.\n\t(class process_target): Add the target op.  Also add\n\t'supports_read_offsets'.\n\t* target.cc (process_target::read_offsets): Define.\n\t(process_target::supports_read_offsets): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* server.cc (handle_query): Update.\n\t* linux-low.cc (SUPPORTS_READ_OFFSETS): New #define directive.\n\t(linux_target_ops): Update.\n\t(linux_process_target::supports_read_offsets): Define.\n\t(linux_read_offsets): Turn into ...\n\t(linux_process_target::read_offsets): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "3e007efaed194549c0aa7c25797e200cb0ba348a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3e007efaed194549c0aa7c25797e200cb0ba348a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6eeb5c5531f0238d367a2f3f1520ae3e2401f7ea"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 75,
    "deletions": 26
  },
  "files": [
    {
      "sha": "fd2c6271505ae0cfca90669bca5dde4fdf23d3d0",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -1,3 +1,27 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's read_offsets op into a method of\n+\tprocess_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target op.\n+\t(class process_target): Add the target op.  Also add\n+\t'supports_read_offsets'.\n+\t* target.cc (process_target::read_offsets): Define.\n+\t(process_target::supports_read_offsets): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* server.cc (handle_query): Update.\n+\t* linux-low.cc (SUPPORTS_READ_OFFSETS): New #define directive.\n+\t(linux_target_ops): Update.\n+\t(linux_process_target::supports_read_offsets): Define.\n+\t(linux_read_offsets): Turn into ...\n+\t(linux_process_target::read_offsets): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's stopped_by_watchpoint and"
    },
    {
      "sha": "34bbc0d3484bd415aa87b67ea96d87b32167ad5a",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 25,
      "deletions": 15,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -100,6 +100,14 @@\n #endif\n #endif\n \n+#if (defined(__UCLIBC__)\t\t\\\n+     && defined(HAS_NOMMU)\t\t\\\n+     && defined(PT_TEXT_ADDR)\t\t\\\n+     && defined(PT_DATA_ADDR)\t\t\\\n+     && defined(PT_TEXT_END_ADDR))\n+#define SUPPORTS_READ_OFFSETS\n+#endif\n+\n #ifdef HAVE_LINUX_BTRACE\n # include \"nat/linux-btrace.h\"\n # include \"gdbsupport/btrace-common.h\"\n@@ -6059,21 +6067,28 @@ linux_process_target::stopped_data_address ()\n   return lwp->stopped_data_address;\n }\n \n-#if defined(__UCLIBC__) && defined(HAS_NOMMU)\t      \\\n-    && defined(PT_TEXT_ADDR) && defined(PT_DATA_ADDR) \\\n-    && defined(PT_TEXT_END_ADDR)\n-\n /* This is only used for targets that define PT_TEXT_ADDR,\n    PT_DATA_ADDR and PT_TEXT_END_ADDR.  If those are not defined, supposedly\n    the target has different ways of acquiring this information, like\n    loadmaps.  */\n \n+bool\n+linux_process_target::supports_read_offsets ()\n+{\n+#ifdef SUPPORTS_READ_OFFSETS\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n /* Under uClinux, programs are loaded at non-zero offsets, which we need\n    to tell gdb about.  */\n \n-static int\n-linux_read_offsets (CORE_ADDR *text_p, CORE_ADDR *data_p)\n+int\n+linux_process_target::read_offsets (CORE_ADDR *text_p, CORE_ADDR *data_p)\n {\n+#ifdef SUPPORTS_READ_OFFSETS\n   unsigned long text, text_end, data;\n   int pid = lwpid_of (current_thread);\n \n@@ -6102,9 +6117,11 @@ linux_read_offsets (CORE_ADDR *text_p, CORE_ADDR *data_p)\n \n       return 1;\n     }\n- return 0;\n-}\n+  return 0;\n+#else\n+  gdb_assert_not_reached (\"target op read_offsets not supported\");\n #endif\n+}\n \n static int\n linux_qxfer_osdata (const char *annex,\n@@ -7375,13 +7392,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-#if defined(__UCLIBC__) && defined(HAS_NOMMU)\t      \\\n-    && defined(PT_TEXT_ADDR) && defined(PT_DATA_ADDR) \\\n-    && defined(PT_TEXT_END_ADDR)\n-  linux_read_offsets,\n-#else\n-  NULL,\n-#endif\n #ifdef USE_THREAD_DB\n   thread_db_get_tls_address,\n #else"
    },
    {
      "sha": "f2e2dfd98e23e8f78c35b0d79c9b16ff3b78a677",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -336,6 +336,10 @@ class linux_process_target : public process_target\n   bool stopped_by_watchpoint () override;\n \n   CORE_ADDR stopped_data_address () override;\n+\n+  bool supports_read_offsets () override;\n+\n+  int read_offsets (CORE_ADDR *text, CORE_ADDR *data) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "44c57a5ca71af42012a170e0a789950b2c72f8e2",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -735,7 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* read_offsets */\n   NULL,  /* get_tls_address */\n   NULL,  /* hostio_last_error */\n   NULL,  /* qxfer_osdata */"
    },
    {
      "sha": "040fa93859f1406b450e4cd8224479b3cd2b4b98",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -956,7 +956,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* nto_read_offsets */\n   NULL, /* thread_db_set_tls_address */\n   hostio_last_error_from_errno,\n   NULL, /* nto_qxfer_osdata */"
    },
    {
      "sha": "b4fd9c6a5e510f15e74c2115cf2edbeb5eb46e57",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -2234,13 +2234,13 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t}\n     }\n \n-  if (the_target->read_offsets != NULL\n+  if (the_target->pt->supports_read_offsets ()\n       && strcmp (\"qOffsets\", own_buf) == 0)\n     {\n       CORE_ADDR text, data;\n \n       require_running_or_return (own_buf);\n-      if (the_target->read_offsets (&text, &data))\n+      if (the_target->pt->read_offsets (&text, &data))\n \tsprintf (own_buf, \"Text=%lX;Data=%lX;Bss=%lX\",\n \t\t (long)text, (long)data, (long)data);\n       else"
    },
    {
      "sha": "501a8d675db11a95ac11b18db15a80fcb53f82de",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -481,3 +481,15 @@ process_target::stopped_data_address ()\n {\n   return 0;\n }\n+\n+bool\n+process_target::supports_read_offsets ()\n+{\n+  return false;\n+}\n+\n+int\n+process_target::read_offsets (CORE_ADDR *text, CORE_ADDR *data)\n+{\n+  gdb_assert_not_reached (\"target op read_offsets not supported\");\n+}"
    },
    {
      "sha": "5cf039e5f701fe399d76f34bb795bb0213c71c83",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -70,12 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Reports the text, data offsets of the executable.  This is\n-     needed for uclinux where the executable is relocated during load\n-     time.  */\n-\n-  int (*read_offsets) (CORE_ADDR *text, CORE_ADDR *data);\n-\n   /* Fetch the address associated with a specific thread local storage\n      area, determined by the specified THREAD, OFFSET, and LOAD_MODULE.\n      Stores it in *ADDRESS and returns zero on success; otherwise returns\n@@ -475,6 +469,14 @@ class process_target\n   /* Returns the address associated with the watchpoint that hit, if any;\n      returns 0 otherwise.  */\n   virtual CORE_ADDR stopped_data_address ();\n+\n+  /* Return true if the read_offsets target op is supported.  */\n+  virtual bool supports_read_offsets ();\n+\n+  /* Reports the text, data offsets of the executable.  This is\n+     needed for uclinux where the executable is relocated during load\n+     time.  */\n+  virtual int read_offsets (CORE_ADDR *text, CORE_ADDR *data);\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "875736a5eecb4608a0832dc4cc0dcd4e91ae53e2",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5203ae1e870191ef058c1b4590f9b9fbf6b594ed/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=5203ae1e870191ef058c1b4590f9b9fbf6b594ed",
      "patch": "@@ -1844,7 +1844,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* read_offsets */\n   NULL, /* get_tls_address */\n #ifdef _WIN32_WCE\n   wince_hostio_last_error,"
    }
  ]
}