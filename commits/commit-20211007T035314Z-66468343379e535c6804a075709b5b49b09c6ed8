{
  "sha": "66468343379e535c6804a075709b5b49b09c6ed8",
  "node_id": "C_kwDOANOeidoAKDY2NDY4MzQzMzc5ZTUzNWM2ODA0YTA3NTcwOWI1YjQ5YjA5YzZlZDg",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-07T00:49:53Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-07T03:53:14Z"
    },
    "message": "PR28423, use-after-free in objdump\n\nXCOFF archives use a bi-directional linked list for file members.  So\none member points to both the previous member and the next member.\nMembers may not be sequentially ordered in the file.  This of course\nis over-engineered nonsense and an attractive target for fuzzers.\n(There is even a free list of members!)  The testcase in PR28423 is an\nXCOFF archive with one member pointing to itself, which results in\nlots of bad behaviour.  For example, \"ar t\" never terminates.\n\nThe use-after-free with \"objdump -r\" happens like this:  The first\narchive element is opened, its symbols are read and \"canonicalized\"\nfor objdump, then relocations are read and printed.  Those relocations\nuse the canonicalized symbols, and also happen to be cached by the\ncoff bfd backend support.  objdump frees the symbols.  The next\narchive element is then opened.  This must be done before the first\nelement is closed, because finding the next element uses data held in\nthe currect element.  Unfortunately the next element happens to be the\noriginal, so we aren't opening, we're reopening a bfd which has cached\ndata.  When the relocations are printed they use the cached copy\ncontaining references to the freed canonical symbols.\n\nThis patch adds a little sanity checking to the XCOFF \"open next\narchive file\" support, so that it rejects archive members pointing at\nthemselves.  That is sufficient to cure this problem.  Anything more\nis overkill.  If someone deliberately fuzzes an XCOFF archive with an\nelement loop then reports an \"ar\" bug when it runs forever, they will\nfind their bug report closed WONTFIX.\n\n\tPR 28423\n\t* coff-rs6000.c (_bfd_xcoff_read_ar_hdr): Save size occupied\n\tby member name in areltdata.extra_size.\n\t(_bfd_xcoff_openr_next_archived_file): Sanity check nextoff.\n\t* coff64-rs6000.c (xcoff64_openr_next_archived_file): Call\n\t_bfd_xcoff_openr_next_archived_file.",
    "tree": {
      "sha": "f8f1b5523bac8fa1019b15a10f60ac06f0e423b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8f1b5523bac8fa1019b15a10f60ac06f0e423b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/66468343379e535c6804a075709b5b49b09c6ed8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66468343379e535c6804a075709b5b49b09c6ed8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/66468343379e535c6804a075709b5b49b09c6ed8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66468343379e535c6804a075709b5b49b09c6ed8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d661cdc5be46e890ed9255e749806f46a88e26c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d661cdc5be46e890ed9255e749806f46a88e26c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d661cdc5be46e890ed9255e749806f46a88e26c"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 46,
    "deletions": 27
  },
  "files": [
    {
      "sha": "31d91190103a9be5434c6d900e9385638a155e25",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 45,
      "deletions": 4,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66468343379e535c6804a075709b5b49b09c6ed8/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66468343379e535c6804a075709b5b49b09c6ed8/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=66468343379e535c6804a075709b5b49b09c6ed8",
      "patch": "@@ -1669,6 +1669,10 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n       ret->filename = (char *) hdrp + SIZEOF_AR_HDR_BIG;\n     }\n \n+  /* Size occupied by the header above that covered in the fixed\n+     SIZEOF_AR_HDR or SIZEOF_AR_HDR_BIG.  */\n+  ret->extra_size = namlen + (namlen & 1) + SXCOFFARFMAG;\n+\n   /* Skip over the XCOFFARFMAG at the end of the file name.  */\n   if (bfd_seek (abfd, (file_ptr) ((namlen & 1) + SXCOFFARFMAG), SEEK_CUR) != 0)\n     return NULL;\n@@ -1682,6 +1686,7 @@ bfd *\n _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)\n {\n   file_ptr filestart;\n+  file_ptr laststart, lastend;\n \n   if (xcoff_ardata (archive) == NULL)\n     {\n@@ -1692,9 +1697,27 @@ _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)\n   if (! xcoff_big_format_p (archive))\n     {\n       if (last_file == NULL)\n-\tfilestart = bfd_ardata (archive)->first_file_filepos;\n+\t{\n+\t  filestart = bfd_ardata (archive)->first_file_filepos;\n+\t  laststart = 0;\n+\t  lastend = SIZEOF_AR_FILE_HDR;\n+\t}\n       else\n-\tGET_VALUE_IN_FIELD (filestart, arch_xhdr (last_file)->nextoff, 10);\n+\t{\n+\t  struct areltdata *arel = arch_eltdata (last_file);\n+\n+\t  GET_VALUE_IN_FIELD (filestart, arch_xhdr (last_file)->nextoff, 10);\n+\t  laststart = last_file->proxy_origin;\n+\t  lastend = laststart + arel->parsed_size;\n+\t  laststart -= SIZEOF_AR_HDR + arel->extra_size;\n+\t}\n+\n+      /* Sanity check that we aren't pointing into the previous element.  */\n+      if (filestart != 0 && filestart >= laststart && filestart < lastend)\n+\t{\n+\t  bfd_set_error (bfd_error_malformed_archive);\n+\t  return NULL;\n+\t}\n \n       if (filestart == 0\n \t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata (archive)->memoff, 10)\n@@ -1707,9 +1730,27 @@ _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)\n   else\n     {\n       if (last_file == NULL)\n-\tfilestart = bfd_ardata (archive)->first_file_filepos;\n+\t{\n+\t  filestart = bfd_ardata (archive)->first_file_filepos;\n+\t  laststart = 0;\n+\t  lastend = SIZEOF_AR_FILE_HDR_BIG;\n+\t}\n       else\n-\tGET_VALUE_IN_FIELD (filestart, arch_xhdr_big (last_file)->nextoff, 10);\n+\t{\n+\t  struct areltdata *arel = arch_eltdata (last_file);\n+\n+\t  GET_VALUE_IN_FIELD (filestart, arch_xhdr_big (last_file)->nextoff, 10);\n+\t  laststart = last_file->proxy_origin;\n+\t  lastend = laststart + arel->parsed_size;\n+\t  laststart -= SIZEOF_AR_HDR_BIG + arel->extra_size;\n+\t}\n+\n+      /* Sanity check that we aren't pointing into the previous element.  */\n+      if (filestart != 0 && filestart >= laststart && filestart < lastend)\n+\t{\n+\t  bfd_set_error (bfd_error_malformed_archive);\n+\t  return NULL;\n+\t}\n \n       if (filestart == 0\n \t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata_big (archive)->memoff, 10)"
    },
    {
      "sha": "04e0798bf69cf10ca70079cae67a2a8f8e0af483",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 1,
      "deletions": 23,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66468343379e535c6804a075709b5b49b09c6ed8/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66468343379e535c6804a075709b5b49b09c6ed8/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=66468343379e535c6804a075709b5b49b09c6ed8",
      "patch": "@@ -1938,36 +1938,14 @@ xcoff64_archive_p (bfd *abfd)\n static bfd *\n xcoff64_openr_next_archived_file (bfd *archive, bfd *last_file)\n {\n-  bfd_vma filestart;\n-\n   if ((xcoff_ardata (archive) == NULL)\n       || ! xcoff_big_format_p (archive))\n     {\n       bfd_set_error (bfd_error_invalid_operation);\n       return NULL;\n     }\n \n-  if (last_file == NULL)\n-    {\n-      filestart = bfd_ardata (archive)->first_file_filepos;\n-    }\n-  else\n-    {\n-      filestart = bfd_scan_vma (arch_xhdr_big (last_file)->nextoff,\n-\t\t\t\t(const char **) NULL, 10);\n-    }\n-\n-  if (filestart == 0\n-      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->memoff,\n-\t\t\t\t    (const char **) NULL, 10)\n-      || filestart == bfd_scan_vma (xcoff_ardata_big (archive)->symoff,\n-\t\t\t\t    (const char **) NULL, 10))\n-    {\n-      bfd_set_error (bfd_error_no_more_archived_files);\n-      return NULL;\n-    }\n-\n-  return _bfd_get_elt_at_filepos (archive, (file_ptr) filestart);\n+  return _bfd_xcoff_openr_next_archived_file (archive, last_file);\n }\n \n /* We can't use the usual coff_sizeof_headers routine, because AIX"
    }
  ]
}