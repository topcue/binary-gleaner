{
  "sha": "6dfa2fc20773615c3a08c3565974dcfdfa36f052",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmRmYTJmYzIwNzczNjE1YzNhMDhjMzU2NTk3NGRjZmRmYTM2ZjA1Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-31T16:37:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-01-08T18:17:18Z"
    },
    "message": "Use std::vector in abbrev_table_read_table\n\nThis removes some manual memory management from\nabbrev_table_read_table, replacing it with a std::vector.\n\ngdb/ChangeLog\n2020-01-08  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2read.c (abbrev_table_read_table): Use std::vector.\n\t(ATTR_ALLOC_CHUNK): Remove.\n\nChange-Id: I0b0e70ac2281d89a78f4d6a642700c9f0506871d",
    "tree": {
      "sha": "58d43ac2bcacec28c796b03303c51b7862dda456",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/58d43ac2bcacec28c796b03303c51b7862dda456"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6dfa2fc20773615c3a08c3565974dcfdfa36f052",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6dfa2fc20773615c3a08c3565974dcfdfa36f052",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6dfa2fc20773615c3a08c3565974dcfdfa36f052",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6dfa2fc20773615c3a08c3565974dcfdfa36f052/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "421d1616230a78449dc2f5abb60f03d38b96c3cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/421d1616230a78449dc2f5abb60f03d38b96c3cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/421d1616230a78449dc2f5abb60f03d38b96c3cf"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 13,
    "deletions": 23
  },
  "files": [
    {
      "sha": "118d6d7a2ba6f9c0e33c1cbc7d59830ecc7de22a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6dfa2fc20773615c3a08c3565974dcfdfa36f052/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6dfa2fc20773615c3a08c3565974dcfdfa36f052/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6dfa2fc20773615c3a08c3565974dcfdfa36f052",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2read.c (abbrev_table_read_table): Use std::vector.\n+\t(ATTR_ALLOC_CHUNK): Remove.\n+\n 2020-01-08  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2read.c (fixup_go_packaging): Use unique_xmalloc_ptr."
    },
    {
      "sha": "5a194f4e27b4e891e1f2844fbe29884c47f8cdb3",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 23,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6dfa2fc20773615c3a08c3565974dcfdfa36f052/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6dfa2fc20773615c3a08c3565974dcfdfa36f052/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=6dfa2fc20773615c3a08c3565974dcfdfa36f052",
      "patch": "@@ -1339,10 +1339,6 @@ struct dwarf_block\n     const gdb_byte *data;\n   };\n \n-#ifndef ATTR_ALLOC_CHUNK\n-#define ATTR_ALLOC_CHUNK 4\n-#endif\n-\n /* FIXME: We might want to set this from BFD via bfd_arch_bits_per_byte,\n    but this would require a corresponding change in unpack_field_as_long\n    and friends.  */\n@@ -18559,8 +18555,7 @@ abbrev_table_read_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   struct abbrev_info *cur_abbrev;\n   unsigned int abbrev_number, bytes_read, abbrev_name;\n   unsigned int abbrev_form;\n-  struct attr_abbrev *cur_attrs;\n-  unsigned int allocated_attrs;\n+  std::vector<struct attr_abbrev> cur_attrs;\n \n   abbrev_table_up abbrev_table (new struct abbrev_table (sect_off));\n \n@@ -18569,12 +18564,10 @@ abbrev_table_read_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   abbrev_number = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n   abbrev_ptr += bytes_read;\n \n-  allocated_attrs = ATTR_ALLOC_CHUNK;\n-  cur_attrs = XNEWVEC (struct attr_abbrev, allocated_attrs);\n-\n   /* Loop until we reach an abbrev number of 0.  */\n   while (abbrev_number)\n     {\n+      cur_attrs.clear ();\n       cur_abbrev = abbrev_table->alloc_abbrev ();\n \n       /* read in abbrev header */\n@@ -18609,25 +18602,18 @@ abbrev_table_read_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  if (abbrev_name == 0)\n \t    break;\n \n-\t  if (cur_abbrev->num_attrs == allocated_attrs)\n-\t    {\n-\t      allocated_attrs += ATTR_ALLOC_CHUNK;\n-\t      cur_attrs\n-\t\t= XRESIZEVEC (struct attr_abbrev, cur_attrs, allocated_attrs);\n-\t    }\n-\n-\t  cur_attrs[cur_abbrev->num_attrs].name\n-\t    = (enum dwarf_attribute) abbrev_name;\n-\t  cur_attrs[cur_abbrev->num_attrs].form\n-\t    = (enum dwarf_form) abbrev_form;\n-\t  cur_attrs[cur_abbrev->num_attrs].implicit_const = implicit_const;\n+\t  cur_attrs.emplace_back ();\n+\t  struct attr_abbrev &cur_attr = cur_attrs.back ();\n+\t  cur_attr.name = (enum dwarf_attribute) abbrev_name;\n+\t  cur_attr.form = (enum dwarf_form) abbrev_form;\n+\t  cur_attr.implicit_const = implicit_const;\n \t  ++cur_abbrev->num_attrs;\n \t}\n \n       cur_abbrev->attrs =\n \tXOBNEWVEC (&abbrev_table->abbrev_obstack, struct attr_abbrev,\n \t\t   cur_abbrev->num_attrs);\n-      memcpy (cur_abbrev->attrs, cur_attrs,\n+      memcpy (cur_abbrev->attrs, cur_attrs.data (),\n \t      cur_abbrev->num_attrs * sizeof (struct attr_abbrev));\n \n       abbrev_table->add_abbrev (abbrev_number, cur_abbrev);\n@@ -18647,7 +18633,6 @@ abbrev_table_read_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \tbreak;\n     }\n \n-  xfree (cur_attrs);\n   return abbrev_table;\n }\n "
    }
  ]
}