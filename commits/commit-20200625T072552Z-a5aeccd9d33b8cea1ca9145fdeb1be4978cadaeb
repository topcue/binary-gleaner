{
  "sha": "a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTVhZWNjZDlkMzNiOGNlYTFjYTkxNDVmZGViMWJlNDk3OGNhZGFlYg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-25T07:25:52Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-25T07:25:52Z"
    },
    "message": "x86-64: honor REX prefixes for SSE2AVX\n\nLegacy encoded insns do so, and their automatic conversion to AVX ones\nought to produce functionally identical code. Therefore explicit REX\nprefixes cannot simply be ignored. This is in particular relevant\nbecause at least PCMPESTR{I,M}'s 64-bit forms couldn't be expressed in\nolder gas by other than using a REX64 prefix.",
    "tree": {
      "sha": "ca0931b6ae2235fa6850a61a35a721da45d28ed0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca0931b6ae2235fa6850a61a35a721da45d28ed0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40d231b4fbcb68d5906a949acd1d421123d74082",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40d231b4fbcb68d5906a949acd1d421123d74082",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40d231b4fbcb68d5906a949acd1d421123d74082"
    }
  ],
  "stats": {
    "total": 141,
    "additions": 112,
    "deletions": 29
  },
  "files": [
    {
      "sha": "c2fa02d03caf37586c66809e372f6491ef982ce3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-25  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (process_operands): Translate explicit REX\n+\tprefix into i.rex for SSE2AVX templates.\n+\t(set_rex_vrex): New helper.\n+\t(build_modrm_byte): Use it.\n+\t* testsuite/gas/i386/x86-64-sse2avx.s: Add cases with explict\n+\tREX prefixes.\n+\t* testsuite/gas/i386/x86-64-sse2avx.d: Adjust expectations.\n+\n 2020-06-25  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (cpu_flags_match): Only match SSE2AVX"
    },
    {
      "sha": "c84192e03100431daa0ad3e3e9a8b9fe7bb8ab39",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 37,
      "deletions": 28,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
      "patch": "@@ -7408,6 +7408,15 @@ process_operands (void)\n      unnecessary segment overrides.  */\n   const seg_entry *default_seg = 0;\n \n+  if (i.tm.opcode_modifier.sse2avx)\n+    {\n+      /* Legacy encoded insns allow explicit REX prefixes, so these prefixes\n+\t need converting.  */\n+      i.rex |= i.prefix[REX_PREFIX] & (REX_W | REX_R | REX_X | REX_B);\n+      i.prefix[REX_PREFIX] = 0;\n+      i.rex_encoding = 0;\n+    }\n+\n   if (i.tm.opcode_modifier.sse2avx && i.tm.opcode_modifier.vexvvvv)\n     {\n       unsigned int dupl = i.operands;\n@@ -7645,6 +7654,25 @@ process_operands (void)\n   return 1;\n }\n \n+static INLINE void set_rex_vrex (const reg_entry *r, unsigned int rex_bit,\n+\t\t\t\t bfd_boolean do_sse2avx)\n+{\n+  if (r->reg_flags & RegRex)\n+    {\n+      if (i.rex & rex_bit)\n+\tas_bad (_(\"same type of prefix used twice\"));\n+      i.rex |= rex_bit;\n+    }\n+  else if (do_sse2avx && (i.rex & rex_bit) && i.vex.register_specifier)\n+    {\n+      gas_assert (i.vex.register_specifier == r);\n+      i.vex.register_specifier += 8;\n+    }\n+\n+  if (r->reg_flags & RegVRex)\n+    i.vrex |= rex_bit;\n+}\n+\n static const seg_entry *\n build_modrm_byte (void)\n {\n@@ -7875,27 +7903,15 @@ build_modrm_byte (void)\n \t      else\n \t\ti.has_regxmm = TRUE;\n \t    }\n-\t  if ((i.op[dest].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_R;\n-\t  if ((i.op[dest].regs->reg_flags & RegVRex) != 0)\n-\t    i.vrex |= REX_R;\n-\t  if ((i.op[source].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_B;\n-\t  if ((i.op[source].regs->reg_flags & RegVRex) != 0)\n-\t    i.vrex |= REX_B;\n+\t  set_rex_vrex (i.op[dest].regs, REX_R, i.tm.opcode_modifier.sse2avx);\n+\t  set_rex_vrex (i.op[source].regs, REX_B, FALSE);\n \t}\n       else\n \t{\n \t  i.rm.reg = i.op[source].regs->reg_num;\n \t  i.rm.regmem = i.op[dest].regs->reg_num;\n-\t  if ((i.op[dest].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_B;\n-\t  if ((i.op[dest].regs->reg_flags & RegVRex) != 0)\n-\t    i.vrex |= REX_B;\n-\t  if ((i.op[source].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_R;\n-\t  if ((i.op[source].regs->reg_flags & RegVRex) != 0)\n-\t    i.vrex |= REX_R;\n+\t  set_rex_vrex (i.op[dest].regs, REX_B, i.tm.opcode_modifier.sse2avx);\n+\t  set_rex_vrex (i.op[source].regs, REX_R, FALSE);\n \t}\n       if (flag_code != CODE_64BIT && (i.rex & REX_R))\n \t{\n@@ -7945,10 +7961,7 @@ build_modrm_byte (void)\n \t\t    }\n \t\t}\n \t      i.sib.index = i.index_reg->reg_num;\n-\t      if ((i.index_reg->reg_flags & RegRex) != 0)\n-\t\ti.rex |= REX_X;\n-\t      if ((i.index_reg->reg_flags & RegVRex) != 0)\n-\t\ti.vrex |= REX_X;\n+\t      set_rex_vrex (i.index_reg, REX_X, FALSE);\n \t    }\n \n \t  default_seg = &ds;\n@@ -8314,18 +8327,14 @@ build_modrm_byte (void)\n \t      if (i.tm.extension_opcode != None)\n \t\t{\n \t\t  i.rm.regmem = i.op[op].regs->reg_num;\n-\t\t  if ((i.op[op].regs->reg_flags & RegRex) != 0)\n-\t\t    i.rex |= REX_B;\n-\t\t  if ((i.op[op].regs->reg_flags & RegVRex) != 0)\n-\t\t    i.vrex |= REX_B;\n+\t\t  set_rex_vrex (i.op[op].regs, REX_B,\n+\t\t\t\ti.tm.opcode_modifier.sse2avx);\n \t\t}\n \t      else\n \t\t{\n \t\t  i.rm.reg = i.op[op].regs->reg_num;\n-\t\t  if ((i.op[op].regs->reg_flags & RegRex) != 0)\n-\t\t    i.rex |= REX_R;\n-\t\t  if ((i.op[op].regs->reg_flags & RegVRex) != 0)\n-\t\t    i.vrex |= REX_R;\n+\t\t  set_rex_vrex (i.op[op].regs, REX_R,\n+\t\t\t\ti.tm.opcode_modifier.sse2avx);\n \t\t}\n \t    }\n "
    },
    {
      "sha": "8eed2db5dd7b206a31c69317ba152bd57564f9af",
      "filename": "gas/testsuite/gas/i386/x86-64-sse2avx.d",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/testsuite/gas/i386/x86-64-sse2avx.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/testsuite/gas/i386/x86-64-sse2avx.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-sse2avx.d?ref=a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
      "patch": "@@ -711,6 +711,33 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\tc5 d9 73 d4 64       \tvpsrlq \\$0x64,%xmm4,%xmm4\n [ \t]*[a-f0-9]+:\tc5 d9 71 d4 64       \tvpsrlw \\$0x64,%xmm4,%xmm4\n [ \t]*[a-f0-9]+:\tc5 f9 c5 cc 64       \tvpextrw \\$0x64,%xmm4,%ecx\n+[ \t]*[a-f0-9]+:\tc5 f8 58 c0          \tvaddps %xmm0,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 f8 58 04 00       \tvaddps \\(%rax,%rax(,1)?\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 f8 58 c0          \tvaddps %xmm0,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 f8 58 04 00       \tvaddps \\(%rax,%rax(,1)?\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 38 58 c0          \tvaddps %xmm0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc5 38 58 04 00       \tvaddps \\(%rax,%rax(,1)?\\),%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc4 a1 78 58 c0       \tvaddps %xmm0,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 a1 78 58 04 00    \tvaddps \\(%rax,%r8(,1)?\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 c1 78 58 c0       \tvaddps %xmm8,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 c1 78 58 04 00    \tvaddps \\(%r8,%rax(,1)?\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 3a 10 c0          \tvmovss %xmm0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc4 c1 7a 10 c0       \tvmovss %xmm8,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc5 7a 11 c0          \tvmovss %xmm8,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 c1 3a 11 c0       \tvmovss %xmm0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc4 c1 39 71 f0 00    \tvpsllw \\$(0x)?0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc5 79 c5 c0 00       \tvpextrw \\$(0x)?0,%xmm0,%r8d\n+[ \t]*[a-f0-9]+:\tc4 c1 79 c5 c0 00    \tvpextrw \\$(0x)?0,%xmm8,%eax\n+[ \t]*[a-f0-9]+:\tc4 63 79 14 c0 00    \tvpextrb \\$(0x)?0,%xmm8,%eax\n+[ \t]*[a-f0-9]+:\tc4 c3 79 14 c0 00    \tvpextrb \\$(0x)?0,%xmm0,%r8d\n+[ \t]*[a-f0-9]+:\tc4 63 39 4a c0 00    \tvblendvps %xmm0,%xmm0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc4 c3 79 4a c0 00    \tvblendvps %xmm0,%xmm8,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 63 39 4a c0 00    \tvblendvps %xmm0,%xmm0,%xmm8,%xmm8\n+[ \t]*[a-f0-9]+:\tc4 c3 79 4a c0 00    \tvblendvps %xmm0,%xmm8,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 e1 fb 2a 00       \tvcvtsi2sdq \\(%rax\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 e1 fa 2a 00       \tvcvtsi2ssq \\(%rax\\),%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 e3 f9 61 c0 00    \tvpcmpestriq \\$(0x)?0,%xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tc4 e3 f9 60 c0 00    \tvpcmpestrmq \\$(0x)?0,%xmm0,%xmm0\n [ \t]*[a-f0-9]+:\tc5 f8 ae 11          \tvldmxcsr \\(%rcx\\)\n [ \t]*[a-f0-9]+:\tc5 f8 ae 19          \tvstmxcsr \\(%rcx\\)\n [ \t]*[a-f0-9]+:\tc5 f8 5b f4          \tvcvtdq2ps %xmm4,%xmm6"
    },
    {
      "sha": "1d3cda18152d74543a92c45fad926cc4fb3271aa",
      "filename": "gas/testsuite/gas/i386/x86-64-sse2avx.s",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/testsuite/gas/i386/x86-64-sse2avx.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb/gas/testsuite/gas/i386/x86-64-sse2avx.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-sse2avx.s?ref=a5aeccd9d33b8cea1ca9145fdeb1be4978cadaeb",
      "patch": "@@ -802,6 +802,44 @@ _start:\n # Tests for op imm8, xmm, regl\n \tpextrw $100,%xmm4,%ecx\n \n+# Tests for REX prefix conversion\n+\t{rex} addps %xmm0, %xmm0\n+\t{rex} addps (%rax,%rax), %xmm0\n+\trex addps %xmm0, %xmm0\n+\trex addps (%rax,%rax), %xmm0\n+\trexx addps %xmm0, %xmm0\n+\trexx addps (%rax,%rax), %xmm0\n+\trexy addps %xmm0, %xmm0\n+\trexy addps (%rax,%rax), %xmm0\n+\trexz addps %xmm0, %xmm0\n+\trexz addps (%rax,%rax), %xmm0\n+\n+\t{load} rexx movss %xmm0, %xmm0\n+\t{load} rexz movss %xmm0, %xmm0\n+\n+\t{store} rexx movss %xmm0, %xmm0\n+\t{store} rexz movss %xmm0, %xmm0\n+\n+\trexz psllw $0, %xmm0\n+\n+\trexx pextrw $0, %xmm0, %eax\n+\trexz pextrw $0, %xmm0, %eax\n+\n+\trexx pextrb $0, %xmm0, %eax\n+\trexz pextrb $0, %xmm0, %eax\n+\n+\trexx blendvps %xmm0, %xmm0, %xmm0\n+\trexz blendvps %xmm0, %xmm0, %xmm0\n+\n+\trexx blendvps %xmm0, %xmm0\n+\trexz blendvps %xmm0, %xmm0\n+\n+\trex64 cvtsi2sd (%rax), %xmm0\n+\trex64 cvtsi2ss (%rax), %xmm0\n+\n+\trex64 pcmpestri $0, %xmm0, %xmm0\n+\trex64 pcmpestrm $0, %xmm0, %xmm0\n+\n \n \t.intel_syntax noprefix\n # Tests for op mem64\n@@ -1505,4 +1543,3 @@ _start:\n \n # Tests for op imm8, xmm, regl\n \tpextrw ecx,xmm4,100\n-"
    }
  ]
}