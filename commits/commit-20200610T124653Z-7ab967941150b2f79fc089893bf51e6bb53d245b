{
  "sha": "7ab967941150b2f79fc089893bf51e6bb53d245b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2FiOTY3OTQxMTUwYjJmNzlmYzA4OTg5M2JmNTFlNmJiNTNkMjQ1Yg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-10T12:46:53Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-10T12:46:53Z"
    },
    "message": "[gdb/symtab] Enable ada .gdb_index\n\nCurrently the .gdb_index is not enabled for ada executables (PR24713).\n\nFix this by adding the required support in write_psymbols, similar to how that\nis done for .debug_names in debug_names::insert.\n\nTested on x86_64-linux, with native and target board cc-with-gdb-index.\n\ngdb/ChangeLog:\n\n2020-06-10  Tom de Vries  <tdevries@suse.de>\n\n\tPR ada/24713\n\t* dwarf2/index-write.c (struct mapped_symtab): Add m_string_obstack.\n\t(write_psymbols): Enable .gdb_index for ada.\n\t* dwarf2/read.c: Remove comment stating .gdb_index is unsupported for\n\tada.\n\ngdb/testsuite/ChangeLog:\n\n2020-06-10  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.ada/ptype_union.exp: Remove PR24713 workaround.",
    "tree": {
      "sha": "b3bb8366a5e5844465c99d99b2b1b0b6daa88b7d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b3bb8366a5e5844465c99d99b2b1b0b6daa88b7d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ab967941150b2f79fc089893bf51e6bb53d245b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ab967941150b2f79fc089893bf51e6bb53d245b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ab967941150b2f79fc089893bf51e6bb53d245b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ab967941150b2f79fc089893bf51e6bb53d245b/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 48,
    "deletions": 12
  },
  "files": [
    {
      "sha": "91315fafb44f92072df6744eb3773dbeba9b76a8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7ab967941150b2f79fc089893bf51e6bb53d245b",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-10  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR ada/24713\n+\t* dwarf2/index-write.c (struct mapped_symtab): Add m_string_obstack.\n+\t(write_psymbols): Enable .gdb_index for ada.\n+\t* dwarf2/read.c: Remove comment stating .gdb_index is unsupported for\n+\tada.\n+\n 2020-06-10  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2/read.c (dw2_symtab_iter_init_common): Factor out of ..."
    },
    {
      "sha": "97b2310656ca3f784f234946eb6e50c82e1bf636",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 36,
      "deletions": 4,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=7ab967941150b2f79fc089893bf51e6bb53d245b",
      "patch": "@@ -184,6 +184,9 @@ struct mapped_symtab\n \n   offset_type n_elements = 0;\n   std::vector<symtab_index_entry> data;\n+\n+  /* Temporary storage for Ada names.  */\n+  auto_obstack m_string_obstack;\n };\n \n /* Find a slot in SYMTAB for the symbol NAME.  Returns a reference to\n@@ -543,18 +546,47 @@ write_psymbols (struct mapped_symtab *symtab,\n   for (; count-- > 0; ++psymp)\n     {\n       struct partial_symbol *psym = *psymp;\n+      const char *name = psym->ginfo.search_name ();\n \n       if (psym->ginfo.language () == language_ada)\n-\terror (_(\"Ada is not currently supported by the index; \"\n-\t\t \"use the DWARF 5 index instead\"));\n+\t{\n+\t  /* We want to ensure that the Ada main function's name appears\n+\t     verbatim in the index.  However, this name will be of the\n+\t     form \"_ada_mumble\", and will be rewritten by ada_decode.\n+\t     So, recognize it specially here and add it to the index by\n+\t     hand.  */\n+\t  if (strcmp (main_name (), name) == 0)\n+\t    {\n+\t      gdb_index_symbol_kind kind = symbol_kind (psym);\n+\n+\t      add_index_entry (symtab, name, is_static, kind, cu_index);\n+\t    }\n+\n+\t  /* In order for the index to work when read back into gdb, it\n+\t     has to supply a funny form of the name: it should be the\n+\t     encoded name, with any suffixes stripped.  Using the\n+\t     ordinary encoded name will not work properly with the\n+\t     searching logic in find_name_components_bounds; nor will\n+\t     using the decoded name.  Furthermore, an Ada \"verbatim\"\n+\t     name (of the form \"<MumBle>\") must be entered without the\n+\t     angle brackets.  Note that the current index is unusual,\n+\t     see PR symtab/24820 for details.  */\n+\t  std::string decoded = ada_decode (name);\n+\t  if (decoded[0] == '<')\n+\t    name = (char *) obstack_copy0 (&symtab->m_string_obstack,\n+\t\t\t\t\t   decoded.c_str () + 1,\n+\t\t\t\t\t   decoded.length () - 2);\n+\t  else\n+\t    name = obstack_strdup (&symtab->m_string_obstack,\n+\t\t\t\t   ada_encode (decoded.c_str ()));\n+\t}\n \n       /* Only add a given psymbol once.  */\n       if (psyms_seen.insert (psym).second)\n \t{\n \t  gdb_index_symbol_kind kind = symbol_kind (psym);\n \n-\t  add_index_entry (symtab, psym->ginfo.search_name (),\n-\t\t\t   is_static, kind, cu_index);\n+\t  add_index_entry (symtab, name, is_static, kind, cu_index);\n \t}\n     }\n }"
    },
    {
      "sha": "e3073fe43ce35c58e1de56173ea3b0f1b3b87cee",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7ab967941150b2f79fc089893bf51e6bb53d245b",
      "patch": "@@ -3778,9 +3778,6 @@ dw2_map_matching_symbols\n \n   if (per_objfile->per_bfd->index_table != nullptr)\n     {\n-      /* Ada currently doesn't support .gdb_index (see PR24713).  We can get\n-\t here though if the current language is Ada for a non-Ada objfile\n-\t using GNU index.  */\n       mapped_index &index = *per_objfile->per_bfd->index_table;\n \n       const char *match_name = name.ada ().lookup_name ().c_str ();"
    },
    {
      "sha": "e8306bd87fc9717ba90544d7411c154b49afb34c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7ab967941150b2f79fc089893bf51e6bb53d245b",
      "patch": "@@ -1,3 +1,7 @@\n+2020-06-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.ada/ptype_union.exp: Remove PR24713 workaround.\n+\n 2020-06-09  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.base/index-cache.exp (test_cache_disabled): Add test_prefix"
    },
    {
      "sha": "c85e5f4b4b6e6682e13fac71cc43794994808d17",
      "filename": "gdb/testsuite/gdb.ada/ptype_union.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/testsuite/gdb.ada/ptype_union.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ab967941150b2f79fc089893bf51e6bb53d245b/gdb/testsuite/gdb.ada/ptype_union.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/ptype_union.exp?ref=7ab967941150b2f79fc089893bf51e6bb53d245b",
      "patch": "@@ -19,11 +19,6 @@ if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n     return -1\n }\n \n-if {[exec_has_index_section $binfile]} {\n-    unsupported \"Ada is not currently supported by the index (PR 24713)\"\n-    return -1\n-}\n-\n # The test case is written in C, because it was easy to make the\n # required type there; but the bug itself only happens in Ada.\n gdb_test \"set lang ada\" \"\""
    }
  ]
}