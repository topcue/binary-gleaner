{
  "sha": "1acda8039ba681e88416a7da6a6e3abdcae6b86b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWFjZGE4MDM5YmE2ODFlODg0MTZhN2RhNmE2ZTNhYmRjYWU2Yjg2Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:33Z"
    },
    "message": "Add Python support for dynamic types\n\nThis changes the gdb Python API to add support for dynamic types.  In\nparticular, this adds an attribute to gdb.Type, and updates some\nattributes to reflect dynamic sizes and field offsets.\n\nThere's still no way to get the dynamic type from one of its concrete\ninstances.  This could perhaps be added if needed.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\tPR python/23662:\n\t* python/py-type.c (convert_field): Handle\n\tFIELD_LOC_KIND_DWARF_BLOCK.\n\t(typy_get_sizeof): Handle TYPE_HAS_DYNAMIC_LENGTH.\n\t(typy_get_dynamic): Nw function.\n\t(type_object_getset): Add \"dynamic\".\n\t* NEWS: Add entry.\n\ngdb/doc/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\tPR python/23662:\n\t* python.texi (Types In Python): Document new features.\n\ngdb/testsuite/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\tPR python/23662:\n\t* gdb.ada/variant.exp: Add Python checks.\n\t* gdb.rust/simple.exp: Add dynamic type checks.",
    "tree": {
      "sha": "4ca5562817e90e1a657fc47eced4369a0c75b342",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4ca5562817e90e1a657fc47eced4369a0c75b342"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1acda8039ba681e88416a7da6a6e3abdcae6b86b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1acda8039ba681e88416a7da6a6e3abdcae6b86b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1acda8039ba681e88416a7da6a6e3abdcae6b86b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1acda8039ba681e88416a7da6a6e3abdcae6b86b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "adfb981595c1ea12736b6d3c4686973040f171ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/adfb981595c1ea12736b6d3c4686973040f171ff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/adfb981595c1ea12736b6d3c4686973040f171ff"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 91,
    "deletions": 4
  },
  "files": [
    {
      "sha": "8911ff5dfdbabdd09b7301f59f63d60676b5be37",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR python/23662:\n+\t* python/py-type.c (convert_field): Handle\n+\tFIELD_LOC_KIND_DWARF_BLOCK.\n+\t(typy_get_sizeof): Handle TYPE_HAS_DYNAMIC_LENGTH.\n+\t(typy_get_dynamic): Nw function.\n+\t(type_object_getset): Add \"dynamic\".\n+\t* NEWS: Add entry.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-typeprint.c (print_choices, print_variant_part)"
    },
    {
      "sha": "01e73c9e5eacf2d6773ea5048803276d636322a6",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -68,6 +68,11 @@ GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n   ** gdb.register_window_type can be used to implement new TUI windows\n      in Python.\n \n+  ** Dynamic types can now be queried.  gdb.Type has a new attribute,\n+     \"dynamic\", and gdb.Type.sizeof can be None for a dynamic type.  A\n+     field of a dynamic type may have None for its \"bitpos\" attribute\n+     as well.\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "7073c17b2ea5df89bfc903ab676e418f142cde4e",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR python/23662:\n+\t* python.texi (Types In Python): Document new features.\n+\n 2020-04-15  Artur Shepilko  <nomadbyte@gmail.com>\n \n \t* gdb.texinfo: Transform @var{[host]} to [@var{host}]; this"
    },
    {
      "sha": "cfa813128cec670a7dcabeefea7e32d7b9aba8b4",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -1068,6 +1068,12 @@ The type code for this type.  The type code will be one of the\n @code{TYPE_CODE_} constants defined below.\n @end defvar\n \n+@defvar Type.dynamic\n+A boolean indicating whether this type is dynamic.  In some\n+situations, such as Rust @code{enum} types or Ada variant records, the\n+concrete type of a value may vary depending on its contents.\n+@end defvar\n+\n @defvar Type.name\n The name of this type.  If this type has no name, then @code{None}\n is returned.\n@@ -1076,7 +1082,9 @@ is returned.\n @defvar Type.sizeof\n The size of this type, in target @code{char} units.  Usually, a\n target's @code{char} type will be an 8-bit byte.  However, on some\n-unusual platforms, this type may have a different size.\n+unusual platforms, this type may have a different size.  A dynamic\n+type may not have a fixed size; in this case, this attribute's value\n+will be @code{None}.\n @end defvar\n \n @defvar Type.tag\n@@ -1106,7 +1114,9 @@ Each field is a @code{gdb.Field} object, with some pre-defined attributes:\n @item bitpos\n This attribute is not available for @code{enum} or @code{static}\n (as in C@t{++}) fields.  The value is the position, counting\n-in bits, from the start of the containing type.\n+in bits, from the start of the containing type.  Note that, in a\n+dynamic type, the position of a field may not be constant.  In this\n+case, the value will be @code{None}.\n \n @item enumval\n This attribute is only available for @code{enum} fields, and its value"
    },
    {
      "sha": "db031e0fb6e3d8e7b99dd222fd4aaa32026c99de",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 33,
      "deletions": 2,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -189,8 +189,11 @@ convert_field (struct type *type, int field)\n \t}\n       else\n \t{\n-\t  arg.reset (gdb_py_long_from_longest (TYPE_FIELD_BITPOS (type,\n-\t\t\t\t\t\t\t\t  field)));\n+\t  if (TYPE_FIELD_LOC_KIND (type, field) == FIELD_LOC_KIND_DWARF_BLOCK)\n+\t    arg = gdbpy_ref<>::new_reference (Py_None);\n+\t  else\n+\t    arg.reset (gdb_py_long_from_longest (TYPE_FIELD_BITPOS (type,\n+\t\t\t\t\t\t\t\t    field)));\n \t  attrstring = \"bitpos\";\n \t}\n \n@@ -710,16 +713,21 @@ typy_get_sizeof (PyObject *self, void *closure)\n {\n   struct type *type = ((type_object *) self)->type;\n \n+  bool size_varies = false;\n   try\n     {\n       check_typedef (type);\n+\n+      size_varies = TYPE_HAS_DYNAMIC_LENGTH (type);\n     }\n   catch (const gdb_exception &except)\n     {\n     }\n \n   /* Ignore exceptions.  */\n \n+  if (size_varies)\n+    Py_RETURN_NONE;\n   return gdb_py_long_from_longest (TYPE_LENGTH (type));\n }\n \n@@ -744,6 +752,27 @@ typy_get_alignof (PyObject *self, void *closure)\n   return gdb_py_object_from_ulongest (align).release ();\n }\n \n+/* Return whether or not the type is dynamic.  */\n+static PyObject *\n+typy_get_dynamic (PyObject *self, void *closure)\n+{\n+  struct type *type = ((type_object *) self)->type;\n+\n+  bool result = false;\n+  try\n+    {\n+      result = is_dynamic_type (type);\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      /* Ignore exceptions.  */\n+    }\n+\n+  if (result)\n+    Py_RETURN_TRUE;\n+  Py_RETURN_FALSE;\n+}\n+\n static struct type *\n typy_lookup_typename (const char *type_name, const struct block *block)\n {\n@@ -1436,6 +1465,8 @@ static gdb_PyGetSetDef type_object_getset[] =\n     \"The alignment of this type, in bytes.\", NULL },\n   { \"code\", typy_get_code, NULL,\n     \"The code for this type.\", NULL },\n+  { \"dynamic\", typy_get_dynamic, NULL,\n+    \"Whether this type is dynamic.\", NULL },\n   { \"name\", typy_get_name, NULL,\n     \"The name for this type, or None.\", NULL },\n   { \"sizeof\", typy_get_sizeof, NULL,"
    },
    {
      "sha": "862d8b09a65549cce2826bd9d4c333e3964b5952",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR python/23662:\n+\t* gdb.ada/variant.exp: Add Python checks.\n+\t* gdb.rust/simple.exp: Add dynamic type checks.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/mi_var_array.exp: Try all -fgnat-encodings settings."
    },
    {
      "sha": "da51f7ba2e839378a95ac9415374016fd0c52092",
      "filename": "gdb/testsuite/gdb.ada/variant.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/gdb.ada/variant.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/gdb.ada/variant.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/variant.exp?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -14,6 +14,7 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n load_lib \"ada.exp\"\n+load_lib \"gdb-python.exp\"\n \n standard_ada_testfile pkg\n \n@@ -43,4 +44,13 @@ foreach_with_prefix scenario {none all minimal} {\n \t\" = \\\\(one => 3, two => 0, str => \\\"zzz\\\", onevalue => 33, str2 => \\\"\\\"\\\\)\"\n     gdb_test \"print nav3\" \\\n \t\" = \\\\(one => 3, two => 7, str => \\\"zzz\\\", onevalue => 33, str2 => \\\"qqqqqqq\\\", twovalue => 88\\\\)\"\n+\n+    # This is only supported for the DWARF encoding.\n+    if {$scenario == \"minimal\" && ![skip_python_tests]} {\n+\tgdb_test_no_output \\\n+\t    \"python t = gdb.lookup_type('nested_and_variable')\" \\\n+\t    \"fetch type for python\"\n+\tgdb_test \"python print(t.dynamic)\" \"True\"\n+\tgdb_test \"python print(t\\['onevalue'\\].bitpos)\" \"None\"\n+    }\n }"
    },
    {
      "sha": "6daaf8415c53f48d43a94a02d203b95c8c4867dc",
      "filename": "gdb/testsuite/gdb.rust/simple.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/gdb.rust/simple.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1acda8039ba681e88416a7da6a6e3abdcae6b86b/gdb/testsuite/gdb.rust/simple.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/simple.exp?ref=1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "patch": "@@ -364,3 +364,13 @@ if {[skip_python_tests]} {\n }\n \n gdb_test \"python print(gdb.lookup_type('simple::HiBob'))\" \"simple::HiBob\"\n+\n+gdb_test_no_output \"python e = gdb.parse_and_eval('e')\" \\\n+    \"get value of e for python\"\n+gdb_test \"python print(len(e.type.fields()))\" \"2\"\n+gdb_test \"python print(e.type.fields()\\[0\\].artificial)\" \"True\"\n+gdb_test \"python print(e.type.fields()\\[1\\].name)\" \"Two\"\n+\n+gdb_test \"python print(e.type.dynamic)\" \"False\"\n+gdb_test \"python print(gdb.lookup_type('simple::MoreComplicated').dynamic)\" \\\n+    \"True\""
    }
  ]
}