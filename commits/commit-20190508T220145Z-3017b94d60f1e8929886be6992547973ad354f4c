{
  "sha": "3017b94d60f1e8929886be6992547973ad354f4c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzAxN2I5NGQ2MGYxZTg5Mjk4ODZiZTY5OTI1NDc5NzNhZDM1NGY0Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-10T03:46:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:45Z"
    },
    "message": "Convert symbol_cache to type-safe registry API\n\nThis changes the symbol_cache to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (struct symbol_cache): Add destructor and\n\tinitializers.\n\t(symbol_cache_key): Move.  Change type.\n\t(make_symbol_cache, free_symbol_cache): Remove.\n\t(get_symbol_cache): Update.\n\t(symbol_cache_cleanup): Remove.\n\t(ALL_PSPACES, symbol_cache_flush)\n\t(maintenance_print_symbol_cache)\n\t(maintenance_print_symbol_cache_statistics, _initialize_symtab):\n\tUpdate.",
    "tree": {
      "sha": "0a6753535a856514959fbd1c1431d9241bfdee4e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0a6753535a856514959fbd1c1431d9241bfdee4e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3017b94d60f1e8929886be6992547973ad354f4c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3017b94d60f1e8929886be6992547973ad354f4c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3017b94d60f1e8929886be6992547973ad354f4c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3017b94d60f1e8929886be6992547973ad354f4c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a32ad8c55c5c6bcdbc6773b6b825c4505fd44c16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a32ad8c55c5c6bcdbc6773b6b825c4505fd44c16",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a32ad8c55c5c6bcdbc6773b6b825c4505fd44c16"
    }
  ],
  "stats": {
    "total": 88,
    "additions": 34,
    "deletions": 54
  },
  "files": [
    {
      "sha": "c12fdd5892305cac4b40f4f4f134453e85f22251",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3017b94d60f1e8929886be6992547973ad354f4c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3017b94d60f1e8929886be6992547973ad354f4c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3017b94d60f1e8929886be6992547973ad354f4c",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (struct symbol_cache): Add destructor and\n+\tinitializers.\n+\t(symbol_cache_key): Move.  Change type.\n+\t(make_symbol_cache, free_symbol_cache): Remove.\n+\t(get_symbol_cache): Update.\n+\t(symbol_cache_cleanup): Remove.\n+\t(ALL_PSPACES, symbol_cache_flush)\n+\t(maintenance_print_symbol_cache)\n+\t(maintenance_print_symbol_cache_statistics, _initialize_symtab):\n+\tUpdate.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (struct main_info): Add destructor and initializers."
    },
    {
      "sha": "130d5cd48fff120e3770f7e4230575f629932cb0",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 21,
      "deletions": 54,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3017b94d60f1e8929886be6992547973ad354f4c/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3017b94d60f1e8929886be6992547973ad354f4c/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=3017b94d60f1e8929886be6992547973ad354f4c",
      "patch": "@@ -119,10 +119,6 @@ struct main_info\n \n static const program_space_key<main_info> main_progspace_key;\n \n-/* Program space key for finding its symbol cache.  */\n-\n-static const struct program_space_data *symbol_cache_key;\n-\n /* The default symbol cache size.\n    There is no extra cpu cost for large N (except when flushing the cache,\n    which is rare).  The value here is just a first attempt.  A better default\n@@ -214,10 +210,22 @@ struct block_symbol_cache\n \n struct symbol_cache\n {\n-  struct block_symbol_cache *global_symbols;\n-  struct block_symbol_cache *static_symbols;\n+  symbol_cache () = default;\n+\n+  ~symbol_cache ()\n+  {\n+    xfree (global_symbols);\n+    xfree (static_symbols);\n+  }\n+\n+  struct block_symbol_cache *global_symbols = nullptr;\n+  struct block_symbol_cache *static_symbols = nullptr;\n };\n \n+/* Program space key for finding its symbol cache.  */\n+\n+static const program_space_key<symbol_cache> symbol_cache_key;\n+\n /* When non-zero, print debugging messages related to symtab creation.  */\n unsigned int symtab_create_debug = 0;\n \n@@ -1226,57 +1234,23 @@ resize_symbol_cache (struct symbol_cache *cache, unsigned int new_size)\n     }\n }\n \n-/* Make a symbol cache of size SIZE.  */\n-\n-static struct symbol_cache *\n-make_symbol_cache (unsigned int size)\n-{\n-  struct symbol_cache *cache;\n-\n-  cache = XCNEW (struct symbol_cache);\n-  resize_symbol_cache (cache, symbol_cache_size);\n-  return cache;\n-}\n-\n-/* Free the space used by CACHE.  */\n-\n-static void\n-free_symbol_cache (struct symbol_cache *cache)\n-{\n-  xfree (cache->global_symbols);\n-  xfree (cache->static_symbols);\n-  xfree (cache);\n-}\n-\n /* Return the symbol cache of PSPACE.\n    Create one if it doesn't exist yet.  */\n \n static struct symbol_cache *\n get_symbol_cache (struct program_space *pspace)\n {\n-  struct symbol_cache *cache\n-    = (struct symbol_cache *) program_space_data (pspace, symbol_cache_key);\n+  struct symbol_cache *cache = symbol_cache_key.get (pspace);\n \n   if (cache == NULL)\n     {\n-      cache = make_symbol_cache (symbol_cache_size);\n-      set_program_space_data (pspace, symbol_cache_key, cache);\n+      cache = symbol_cache_key.emplace (pspace);\n+      resize_symbol_cache (cache, symbol_cache_size);\n     }\n \n   return cache;\n }\n \n-/* Delete the symbol cache of PSPACE.\n-   Called when PSPACE is destroyed.  */\n-\n-static void\n-symbol_cache_cleanup (struct program_space *pspace, void *data)\n-{\n-  struct symbol_cache *cache = (struct symbol_cache *) data;\n-\n-  free_symbol_cache (cache);\n-}\n-\n /* Set the size of the symbol cache in all program spaces.  */\n \n static void\n@@ -1286,8 +1260,7 @@ set_symbol_cache_size (unsigned int new_size)\n \n   ALL_PSPACES (pspace)\n     {\n-      struct symbol_cache *cache\n-\t= (struct symbol_cache *) program_space_data (pspace, symbol_cache_key);\n+      struct symbol_cache *cache = symbol_cache_key.get (pspace);\n \n       /* The pspace could have been created but not have a cache yet.  */\n       if (cache != NULL)\n@@ -1443,8 +1416,7 @@ symbol_cache_mark_not_found (struct block_symbol_cache *bsc,\n static void\n symbol_cache_flush (struct program_space *pspace)\n {\n-  struct symbol_cache *cache\n-    = (struct symbol_cache *) program_space_data (pspace, symbol_cache_key);\n+  struct symbol_cache *cache = symbol_cache_key.get (pspace);\n   int pass;\n \n   if (cache == NULL)\n@@ -1558,8 +1530,7 @@ maintenance_print_symbol_cache (const char *args, int from_tty)\n \t\t       : \"(no object file)\");\n \n       /* If the cache hasn't been created yet, avoid creating one.  */\n-      cache\n-\t= (struct symbol_cache *) program_space_data (pspace, symbol_cache_key);\n+      cache = symbol_cache_key.get (pspace);\n       if (cache == NULL)\n \tprintf_filtered (\"  <empty>\\n\");\n       else\n@@ -1630,8 +1601,7 @@ maintenance_print_symbol_cache_statistics (const char *args, int from_tty)\n \t\t       : \"(no object file)\");\n \n       /* If the cache hasn't been created yet, avoid creating one.  */\n-      cache\n-\t= (struct symbol_cache *) program_space_data (pspace, symbol_cache_key);\n+      cache = symbol_cache_key.get (pspace);\n       if (cache == NULL)\n  \tprintf_filtered (\"  empty, no stats available\\n\");\n       else\n@@ -6037,9 +6007,6 @@ _initialize_symtab (void)\n {\n   initialize_ordinary_address_classes ();\n \n-  symbol_cache_key\n-    = register_program_space_data_with_cleanup (NULL, symbol_cache_cleanup);\n-\n   add_info (\"variables\", info_variables_command,\n \t    info_print_args_help (_(\"\\\n All global and static variable names or those matching REGEXPs.\\n\\"
    }
  ]
}