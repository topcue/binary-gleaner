{
  "sha": "84685904937577dabf4fb0b458784f853fc648be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODQ2ODU5MDQ5Mzc1NzdkYWJmNGZiMGI0NTg3ODRmODUzZmM2NDhiZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:44Z"
    },
    "message": "Reference psymtabs via per_bfd in DWARF reader\n\nThis changes the DWARF reader to reference the psymtabs via the\nper_bfd object, rather than via the objfile.  This helps isolate the\npartial symtabs from the objfile.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_create_include_psymtab): Add per_bfd\n\tparameter.\n\t(process_psymtab_comp_unit_reader)\n\t(build_type_psymtab_dependencies, dwarf2_build_psymtabs_hard)\n\t(add_partial_subprogram, dwarf2_ranges_read, dwarf_decode_lines):\n\tReference psymtabs via per_bfd.",
    "tree": {
      "sha": "e7730ff3c01553711ad06bfe9ad646328afe0ba5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e7730ff3c01553711ad06bfe9ad646328afe0ba5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84685904937577dabf4fb0b458784f853fc648be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84685904937577dabf4fb0b458784f853fc648be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84685904937577dabf4fb0b458784f853fc648be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84685904937577dabf4fb0b458784f853fc648be/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79cc99f69b97e8bc6aa109c937095d34ecdf3762",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79cc99f69b97e8bc6aa109c937095d34ecdf3762",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79cc99f69b97e8bc6aa109c937095d34ecdf3762"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 32,
    "deletions": 17
  },
  "files": [
    {
      "sha": "14efa054c7963bbb384840cc61a72163277b8111",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84685904937577dabf4fb0b458784f853fc648be/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84685904937577dabf4fb0b458784f853fc648be/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=84685904937577dabf4fb0b458784f853fc648be",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_create_include_psymtab): Add per_bfd\n+\tparameter.\n+\t(process_psymtab_comp_unit_reader)\n+\t(build_type_psymtab_dependencies, dwarf2_build_psymtabs_hard)\n+\t(add_partial_subprogram, dwarf2_ranges_read, dwarf_decode_lines):\n+\tReference psymtabs via per_bfd.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/index-write.c (struct addrmap_index_data) <objfile>:"
    },
    {
      "sha": "befaea5aea78fa5d82d0beff4d1e82428ea297a7",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 23,
      "deletions": 17,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84685904937577dabf4fb0b458784f853fc648be/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84685904937577dabf4fb0b458784f853fc648be/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=84685904937577dabf4fb0b458784f853fc648be",
      "patch": "@@ -6284,15 +6284,16 @@ struct dwarf2_include_psymtab : public partial_symtab\n    partial symtab as being an include of PST.  */\n \n static void\n-dwarf2_create_include_psymtab (const char *name, dwarf2_psymtab *pst,\n+dwarf2_create_include_psymtab (dwarf2_per_bfd *per_bfd,\n+\t\t\t       const char *name, dwarf2_psymtab *pst,\n \t\t\t       struct objfile *objfile)\n {\n   dwarf2_include_psymtab *subpst = new dwarf2_include_psymtab (name, objfile);\n \n   if (!IS_ABSOLUTE_PATH (subpst->filename))\n     subpst->dirname = pst->dirname;\n \n-  subpst->dependencies = objfile->partial_symtabs->allocate_dependencies (1);\n+  subpst->dependencies = per_bfd->partial_symtabs->allocate_dependencies (1);\n   subpst->dependencies[0] = pst;\n   subpst->number_of_dependencies = 1;\n }\n@@ -7562,6 +7563,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n {\n   struct dwarf2_cu *cu = reader->cu;\n   dwarf2_per_objfile *per_objfile = cu->per_objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n   struct objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   struct dwarf2_per_cu_data *per_cu = cu->per_cu;\n@@ -7612,7 +7614,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t   - baseaddr - 1);\n       /* Store the contiguous range if it is not empty; it can be\n \t empty for CUs with no code.  */\n-      addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n+      addrmap_set_empty (per_bfd->partial_symtabs->psymtabs_addrmap,\n \t\t\t low, high, pst);\n     }\n \n@@ -7663,7 +7665,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t post-pass.  */\n       pst->number_of_dependencies = len;\n       pst->dependencies\n-\t= objfile->partial_symtabs->allocate_dependencies (len);\n+\t= per_bfd->partial_symtabs->allocate_dependencies (len);\n       for (i = 0; i < len; ++i)\n \t{\n \t  pst->dependencies[i]\n@@ -7919,7 +7921,7 @@ static int\n build_type_psymtab_dependencies (void **slot, void *info)\n {\n   dwarf2_per_objfile *per_objfile = (dwarf2_per_objfile *) info;\n-  struct objfile *objfile = per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n   struct type_unit_group *tu_group = (struct type_unit_group *) *slot;\n   struct dwarf2_per_cu_data *per_cu = &tu_group->per_cu;\n   dwarf2_psymtab *pst = per_cu->v.psymtab;\n@@ -7930,7 +7932,7 @@ build_type_psymtab_dependencies (void **slot, void *info)\n   gdb_assert (per_cu->type_unit_group_p ());\n \n   pst->number_of_dependencies = len;\n-  pst->dependencies = objfile->partial_symtabs->allocate_dependencies (len);\n+  pst->dependencies = per_bfd->partial_symtabs->allocate_dependencies (len);\n   for (i = 0; i < len; ++i)\n     {\n       struct signatured_type *iter = tu_group->tus->at (i);\n@@ -8054,6 +8056,7 @@ static void\n dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n {\n   struct objfile *objfile = per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n \n   dwarf_read_debug_printf (\"Building psymtabs of objfile %s ...\",\n \t\t\t   objfile_name (objfile));\n@@ -8062,7 +8065,7 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n     = make_scoped_restore (&per_objfile->per_bfd->reading_partial_symbols,\n \t\t\t   true);\n \n-  per_objfile->per_bfd->info.read (objfile);\n+  per_bfd->info.read (objfile);\n \n   /* Any cached compilation units will be linked by the per-objfile\n      read_in_chain.  Make sure to free them when we're done.  */\n@@ -8077,10 +8080,10 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n   auto_obstack temp_obstack;\n \n   scoped_restore save_psymtabs_addrmap\n-    = make_scoped_restore (&objfile->partial_symtabs->psymtabs_addrmap,\n+    = make_scoped_restore (&per_bfd->partial_symtabs->psymtabs_addrmap,\n \t\t\t   addrmap_create_mutable (&temp_obstack));\n \n-  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n+  for (dwarf2_per_cu_data *per_cu : per_bfd->all_comp_units)\n     {\n       if (per_cu->v.psymtab != NULL)\n \t/* In case a forward DW_TAG_imported_unit has read the CU already.  */\n@@ -8093,9 +8096,9 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n   process_skeletonless_type_units (per_objfile);\n \n   /* Now that all TUs have been processed we can fill in the dependencies.  */\n-  if (per_objfile->per_bfd->type_unit_groups != NULL)\n+  if (per_bfd->type_unit_groups != NULL)\n     {\n-      htab_traverse_noresize (per_objfile->per_bfd->type_unit_groups.get (),\n+      htab_traverse_noresize (per_bfd->type_unit_groups.get (),\n \t\t\t      build_type_psymtab_dependencies, per_objfile);\n     }\n \n@@ -8104,9 +8107,9 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n \n   set_partial_user (per_objfile);\n \n-  objfile->partial_symtabs->psymtabs_addrmap\n-    = addrmap_create_fixed (objfile->partial_symtabs->psymtabs_addrmap,\n-\t\t\t    objfile->partial_symtabs->obstack ());\n+  per_bfd->partial_symtabs->psymtabs_addrmap\n+    = addrmap_create_fixed (per_bfd->partial_symtabs->psymtabs_addrmap,\n+\t\t\t    per_bfd->partial_symtabs->obstack ());\n   /* At this point we want to keep the address map.  */\n   save_psymtabs_addrmap.release ();\n \n@@ -8721,6 +8724,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t  if (set_addrmap)\n \t    {\n \t      struct objfile *objfile = cu->per_objfile->objfile;\n+\t      dwarf2_per_bfd *per_bfd = cu->per_objfile->per_bfd;\n \t      struct gdbarch *gdbarch = objfile->arch ();\n \t      CORE_ADDR baseaddr;\n \t      CORE_ADDR this_highpc;\n@@ -8735,7 +8739,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t\t= (gdbarch_adjust_dwarf2_addr (gdbarch,\n \t\t\t\t\t       pdi->highpc + baseaddr)\n \t\t   - baseaddr);\n-\t      addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n+\t      addrmap_set_empty (per_bfd->partial_symtabs->psymtabs_addrmap,\n \t\t\t\t this_lowpc, this_highpc - 1,\n \t\t\t\t cu->per_cu->v.psymtab);\n \t    }\n@@ -14507,6 +14511,7 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n \t\t    dwarf2_psymtab *ranges_pst, dwarf_tag tag)\n {\n   struct objfile *objfile = cu->per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = cu->per_objfile->per_bfd;\n   struct gdbarch *gdbarch = objfile->arch ();\n   const CORE_ADDR baseaddr = objfile->text_section_offset ();\n   int low_set = 0;\n@@ -14528,7 +14533,7 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n \t  highpc = (gdbarch_adjust_dwarf2_addr (gdbarch,\n \t\t\t\t\t\trange_end + baseaddr)\n \t\t    - baseaddr);\n-\t  addrmap_set_empty (objfile->partial_symtabs->psymtabs_addrmap,\n+\t  addrmap_set_empty (per_bfd->partial_symtabs->psymtabs_addrmap,\n \t\t\t     lowpc, highpc - 1, ranges_pst);\n \t}\n \n@@ -21961,7 +21966,8 @@ dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n \t      psymtab_include_file_name (lh, file_entry, pst,\n \t\t\t\t\t comp_dir, &name_holder);\n \t    if (include_name != NULL)\n-\t      dwarf2_create_include_psymtab (include_name, pst, objfile);\n+\t      dwarf2_create_include_psymtab (cu->per_objfile->per_bfd,\n+\t\t\t\t\t     include_name, pst, objfile);\n \t  }\n     }\n   else"
    }
  ]
}