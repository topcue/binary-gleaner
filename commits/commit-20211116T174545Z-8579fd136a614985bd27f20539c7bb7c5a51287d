{
  "sha": "8579fd136a614985bd27f20539c7bb7c5a51287d",
  "node_id": "C_kwDOANOeidoAKDg1NzlmZDEzNmE2MTQ5ODViZDI3ZjIwNTM5YzdiYjdjNWE1MTI4N2Q",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-08T14:58:46Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-16T17:45:45Z"
    },
    "message": "gdb/gdbsupport: make xstrprintf and xstrvprintf return a unique_ptr\n\nThe motivation is to reduce the number of places where unmanaged\npointers are returned from allocation type routines.  All of the\ncallers are updated.\n\nThere should be no user visible changes after this commit.",
    "tree": {
      "sha": "fb84850409a44e13e832cbadc9025d40c1d33d9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb84850409a44e13e832cbadc9025d40c1d33d9f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8579fd136a614985bd27f20539c7bb7c5a51287d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8579fd136a614985bd27f20539c7bb7c5a51287d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8579fd136a614985bd27f20539c7bb7c5a51287d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8579fd136a614985bd27f20539c7bb7c5a51287d/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "2bb7589ddf61e163f2e414e7033fad56ea17e784",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bb7589ddf61e163f2e414e7033fad56ea17e784",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2bb7589ddf61e163f2e414e7033fad56ea17e784"
    }
  ],
  "stats": {
    "total": 270,
    "additions": 119,
    "deletions": 151
  },
  "files": [
    {
      "sha": "b84e10fd029fc6ac27ca9016e72ccb2f7fd38516",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -13287,8 +13287,7 @@ class ada_language : public language_defn\n   {\n     type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n     std::string name = type_to_string (type);\n-    return gdb::unique_xmalloc_ptr<char>\n-      (xstrprintf (\"{%s} %s\", name.c_str (), core_addr_to_string (addr)));\n+    return xstrprintf (\"{%s} %s\", name.c_str (), core_addr_to_string (addr));\n   }\n \n   /* See language.h.  */"
    },
    {
      "sha": "6579eb57ffb54716aafe00a0ff61864fa4a6407f",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -1489,8 +1489,8 @@ void\n _initialize_auto_load ()\n {\n   struct cmd_list_element *cmd;\n-  char *scripts_directory_help, *gdb_name_help, *python_name_help;\n-  char *guile_name_help;\n+  gdb::unique_xmalloc_ptr<char> scripts_directory_help, gdb_name_help,\n+    python_name_help, guile_name_help;\n   const char *suffix;\n \n   gdb::observers::new_objfile.attach (auto_load_new_objfile,\n@@ -1565,23 +1565,18 @@ having 'set auto-load ... off'.\\n\\\n Directories listed here need to be present also \\\n in the 'set auto-load safe-path'\\n\\\n option.\"),\n-\t\t  gdb_name_help,\n-\t\t  python_name_help ? python_name_help : \"\",\n-\t\t  guile_name_help ? guile_name_help : \"\");\n+\t\t  gdb_name_help.get (),\n+\t\t  python_name_help.get () ? python_name_help.get () : \"\",\n+\t\t  guile_name_help.get () ? guile_name_help.get () : \"\");\n \n   add_setshow_optional_filename_cmd (\"scripts-directory\", class_support,\n \t\t\t\t     &auto_load_dir, _(\"\\\n Set the list of directories from which to load auto-loaded scripts.\"), _(\"\\\n Show the list of directories from which to load auto-loaded scripts.\"),\n-\t\t\t\t     scripts_directory_help,\n+\t\t\t\t     scripts_directory_help.get (),\n \t\t\t\t     set_auto_load_dir, show_auto_load_dir,\n \t\t\t\t     auto_load_set_cmdlist_get (),\n \t\t\t\t     auto_load_show_cmdlist_get ());\n-  xfree (scripts_directory_help);\n-  xfree (python_name_help);\n-  xfree (gdb_name_help);\n-  xfree (guile_name_help);\n-\n   auto_load_safe_path_vec_update ();\n   add_setshow_optional_filename_cmd (\"safe-path\", class_support,\n \t\t\t\t     &auto_load_safe_path, _(\"\\"
    },
    {
      "sha": "d98c3a7cf0f914ebc48381f2328cb0dcebe868c6",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -8728,7 +8728,7 @@ static void\n update_dprintf_command_list (struct breakpoint *b)\n {\n   const char *dprintf_args = b->extra_string.get ();\n-  char *printf_line = NULL;\n+  gdb::unique_xmalloc_ptr<char> printf_line = nullptr;\n \n   if (!dprintf_args)\n     return;\n@@ -8779,7 +8779,7 @@ update_dprintf_command_list (struct breakpoint *b)\n \n   /* Manufacture a printf sequence.  */\n   struct command_line *printf_cmd_line\n-    = new struct command_line (simple_control, printf_line);\n+    = new struct command_line (simple_control, printf_line.release ());\n   breakpoint_set_commands (b, counted_command_line (printf_cmd_line,\n \t\t\t\t\t\t    command_lines_deleter ()));\n }\n@@ -10798,9 +10798,8 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n       w->exp_string_reparse\n \t= current_language->watch_location_expression (t, addr);\n \n-      w->exp_string.reset (xstrprintf (\"-location %.*s\",\n-\t\t\t\t       (int) (exp_end - exp_start),\n-\t\t\t\t       exp_start));\n+      w->exp_string = xstrprintf (\"-location %.*s\",\n+\t\t\t\t  (int) (exp_end - exp_start), exp_start);\n     }\n   else\n     w->exp_string.reset (savestring (exp_start, exp_end - exp_start));"
    },
    {
      "sha": "d1aebaa501165fd008a18d6f32e057dba38010ae",
      "filename": "gdb/charset.c",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/charset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/charset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/charset.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -960,35 +960,31 @@ intermediate_encoding (void)\n {\n   iconv_t desc;\n   static const char *stored_result = NULL;\n-  char *result;\n+  gdb::unique_xmalloc_ptr<char> result;\n \n   if (stored_result)\n     return stored_result;\n   result = xstrprintf (\"UTF-%d%s\", (int) (sizeof (gdb_wchar_t) * 8),\n \t\t       ENDIAN_SUFFIX);\n   /* Check that the name is supported by iconv_open.  */\n-  desc = iconv_open (result, host_charset ());\n+  desc = iconv_open (result.get (), host_charset ());\n   if (desc != (iconv_t) -1)\n     {\n       iconv_close (desc);\n-      stored_result = result;\n-      return result;\n+      stored_result = result.release ();\n+      return stored_result;\n     }\n-  /* Not valid, free the allocated memory.  */\n-  xfree (result);\n   /* Second try, with UCS-2 type.  */\n   result = xstrprintf (\"UCS-%d%s\", (int) sizeof (gdb_wchar_t),\n \t\t       ENDIAN_SUFFIX);\n   /* Check that the name is supported by iconv_open.  */\n-  desc = iconv_open (result, host_charset ());\n+  desc = iconv_open (result.get (), host_charset ());\n   if (desc != (iconv_t) -1)\n     {\n       iconv_close (desc);\n-      stored_result = result;\n-      return result;\n+      stored_result = result.release ();\n+      return stored_result;\n     }\n-  /* Not valid, free the allocated memory.  */\n-  xfree (result);\n   /* No valid charset found, generate error here.  */\n   error (_(\"Unable to find a valid charset for string conversions\"));\n }"
    },
    {
      "sha": "3fe479400763d35a3c9d835c6b7d4feed0b3427c",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -943,7 +943,6 @@ edit_command (const char *arg, int from_tty)\n   struct symtab_and_line sal;\n   struct symbol *sym;\n   const char *editor;\n-  char *p;\n   const char *fn;\n \n   /* Pull in the current default source line if necessary.  */\n@@ -1032,9 +1031,9 @@ edit_command (const char *arg, int from_tty)\n \n   /* Quote the file name, in case it has whitespace or other special\n      characters.  */\n-  p = xstrprintf (\"%s +%d \\\"%s\\\"\", editor, sal.line, fn);\n-  shell_escape (p, from_tty);\n-  xfree (p);\n+  gdb::unique_xmalloc_ptr<char> p\n+    = xstrprintf (\"%s +%d \\\"%s\\\"\", editor, sal.line, fn);\n+  shell_escape (p.get (), from_tty);\n }\n \n /* The options for the \"pipe\" command.  */\n@@ -2730,7 +2729,7 @@ Usage: source [-s] [-v] FILE\\n\\\n -v: each command in FILE is echoed as it is executed.\\n\\\n \\n\\\n Note that the file \\\"%s\\\" is read automatically in this way\\n\\\n-when GDB is started.\"), GDBINIT);\n+when GDB is started.\"), GDBINIT).release ();\n   c = add_cmd (\"source\", class_support, source_command,\n \t       source_help_text, &cmdlist);\n   set_cmd_completer (c, filename_completer);"
    },
    {
      "sha": "030cba443386cfd157d708a2bd18f3ed42a3aab7",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -534,8 +534,8 @@ add_setshow_cmd_full_erased (const char *name,\n {\n   struct cmd_list_element *set;\n   struct cmd_list_element *show;\n-  char *full_set_doc;\n-  char *full_show_doc;\n+  gdb::unique_xmalloc_ptr<char> full_set_doc;\n+  gdb::unique_xmalloc_ptr<char> full_show_doc;\n \n   if (help_doc != NULL)\n     {\n@@ -544,18 +544,18 @@ add_setshow_cmd_full_erased (const char *name,\n     }\n   else\n     {\n-      full_set_doc = xstrdup (set_doc);\n-      full_show_doc = xstrdup (show_doc);\n+      full_set_doc = make_unique_xstrdup (set_doc);\n+      full_show_doc = make_unique_xstrdup (show_doc);\n     }\n   set = add_set_or_show_cmd (name, set_cmd, theclass, var_type, args,\n-\t\t\t     full_set_doc, set_list);\n+\t\t\t     full_set_doc.release (), set_list);\n   set->doc_allocated = 1;\n \n   if (set_func != NULL)\n     set->func = set_func;\n \n   show = add_set_or_show_cmd (name, show_cmd, theclass, var_type, args,\n-\t\t\t      full_show_doc, show_list);\n+\t\t\t      full_show_doc.release (), show_list);\n   show->doc_allocated = 1;\n   show->show_value_func = show_func;\n   /* Disable the default symbol completer.  Doesn't make much sense"
    },
    {
      "sha": "8fc7557dbfe3bc9381b5a84ea9608dd337429bad",
      "filename": "gdb/cli/cli-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cli/cli-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-utils.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -209,7 +209,7 @@ The flag -q disables the production of these headers and messages.%s\"),\n \t\t     prefix, entity_kind, entity_kind, entity_kind,\n \t\t     (document_n_flag ? _(\"\\n\\\n By default, the command will include non-debug symbols in the output;\\n\\\n-these can be excluded using the -n flag.\") : \"\"));\n+these can be excluded using the -n flag.\") : \"\")).release ();\n }\n \n /* See documentation in cli-utils.h.  */"
    },
    {
      "sha": "f14bf45b04d3f15fd1183036faae7214bcef30ad",
      "filename": "gdb/cp-abi.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cp-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/cp-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-abi.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -265,7 +265,6 @@ register_cp_abi (struct cp_abi_ops *abi)\n void\n set_cp_abi_as_auto_default (const char *short_name)\n {\n-  char *new_longname, *new_doc;\n   struct cp_abi_ops *abi = find_cp_abi (short_name);\n \n   if (abi == NULL)\n@@ -279,12 +278,10 @@ set_cp_abi_as_auto_default (const char *short_name)\n   auto_cp_abi = *abi;\n \n   auto_cp_abi.shortname = \"auto\";\n-  new_longname = xstrprintf (\"currently \\\"%s\\\"\", abi->shortname);\n-  auto_cp_abi.longname = new_longname;\n-\n-  new_doc = xstrprintf (\"Automatically selected; currently \\\"%s\\\"\",\n-\t     abi->shortname);\n-  auto_cp_abi.doc = new_doc;\n+  auto_cp_abi.longname = xstrprintf (\"currently \\\"%s\\\"\",\n+\t\t\t\t     abi->shortname).release ();\n+  auto_cp_abi.doc = xstrprintf (\"Automatically selected; currently \\\"%s\\\"\",\n+\t\t\t\tabi->shortname).release ();\n \n   /* Since we copy the current ABI into current_cp_abi instead of\n      using a pointer, if auto is currently the default, we need to"
    },
    {
      "sha": "c5eac6b61b5a0e9a2cf6bfde827fac9fb7428c1a",
      "filename": "gdb/frv-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/frv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/frv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-tdep.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -182,11 +182,8 @@ new_variant (void)\n      in the G packet.  If we need more in the future, we'll add them\n      elsewhere.  */\n   for (r = acc0_regnum; r <= acc7_regnum; r++)\n-    {\n-      char *buf;\n-      buf = xstrprintf (\"acc%d\", r - acc0_regnum);\n-      var->register_names[r] = buf;\n-    }\n+    var->register_names[r]\n+      = xstrprintf (\"acc%d\", r - acc0_regnum).release ();\n \n   /* accg0 - accg7: These are one byte registers.  The remote protocol\n      provides the raw values packed four into a slot.  accg0123 and\n@@ -195,11 +192,8 @@ new_variant (void)\n      likely not want to see these raw values.  */\n \n   for (r = accg0_regnum; r <= accg7_regnum; r++)\n-    {\n-      char *buf;\n-      buf = xstrprintf (\"accg%d\", r - accg0_regnum);\n-      var->register_names[r] = buf;\n-    }\n+    var->register_names[r]\n+      = xstrprintf (\"accg%d\", r - accg0_regnum).release ();\n \n   /* msr0 and msr1.  */\n "
    },
    {
      "sha": "0b4bab6e67dffee4d4aea2d82f6b5ec2a7dde3b9",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -136,7 +136,7 @@ gcore_command (const char *args, int from_tty)\n   else\n     {\n       /* Default corefile name is \"core.PID\".  */\n-      corefilename.reset (xstrprintf (\"core.%d\", inferior_ptid.pid ()));\n+      corefilename = xstrprintf (\"core.%d\", inferior_ptid.pid ());\n     }\n \n   if (info_verbose)"
    },
    {
      "sha": "15ac45a39fccd541572e696965cbdd8d174b9bc6",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -968,7 +968,7 @@ gdbscm_set_breakpoint_stop_x (SCM self, SCM newvalue)\n \t= xstrprintf (_(\"Only one stop condition allowed.  There is\"\n \t\t\t\" currently a %s stop condition defined for\"\n \t\t\t\" this breakpoint.\"),\n-\t\t      ext_lang_capitalized_name (extlang));\n+\t\t      ext_lang_capitalized_name (extlang)).release ();\n \n       scm_dynwind_begin ((scm_t_dynwind_flags) 0);\n       gdbscm_dynwind_xfree (error_text);"
    },
    {
      "sha": "619c89c252c6cae3b936f39a4ea7b2bd0392cbae",
      "filename": "gdb/guile/scm-cmd.c",
      "status": "modified",
      "additions": 14,
      "deletions": 19,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-cmd.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -475,9 +475,7 @@ gdbscm_parse_command_name (const char *name,\n   struct cmd_list_element *elt;\n   int len = strlen (name);\n   int i, lastchar;\n-  char *prefix_text;\n-  const char *prefix_text2;\n-  char *result, *msg;\n+  char *msg;\n \n   /* Skip trailing whitespace.  */\n   for (i = len - 1; i >= 0 && (name[i] == ' ' || name[i] == '\\t'); --i)\n@@ -493,30 +491,29 @@ gdbscm_parse_command_name (const char *name,\n   /* Find first character of the final word.  */\n   for (; i > 0 && valid_cmd_char_p (name[i - 1]); --i)\n     ;\n-  result = (char *) xmalloc (lastchar - i + 2);\n-  memcpy (result, &name[i], lastchar - i + 1);\n-  result[lastchar - i + 1] = '\\0';\n+  gdb::unique_xmalloc_ptr<char> result ((char *) xmalloc (lastchar - i + 2));\n+  memcpy (result.get (), &name[i], lastchar - i + 1);\n+  result.get ()[lastchar - i + 1] = '\\0';\n \n   /* Skip whitespace again.  */\n   for (--i; i >= 0 && (name[i] == ' ' || name[i] == '\\t'); --i)\n     ;\n   if (i < 0)\n     {\n       *base_list = start_list;\n-      return result;\n+      return result.release ();\n     }\n \n-  prefix_text = (char *) xmalloc (i + 2);\n-  memcpy (prefix_text, name, i + 1);\n-  prefix_text[i + 1] = '\\0';\n+  gdb::unique_xmalloc_ptr<char> prefix_text ((char *) xmalloc (i + 2));\n+  memcpy (prefix_text.get (), name, i + 1);\n+  prefix_text.get ()[i + 1] = '\\0';\n \n-  prefix_text2 = prefix_text;\n+  const char *prefix_text2 = prefix_text.get ();\n   elt = lookup_cmd_1 (&prefix_text2, *start_list, NULL, NULL, 1);\n   if (elt == NULL || elt == CMD_LIST_AMBIGUOUS)\n     {\n-      msg = xstrprintf (_(\"could not find command prefix '%s'\"), prefix_text);\n-      xfree (prefix_text);\n-      xfree (result);\n+      msg = xstrprintf (_(\"could not find command prefix '%s'\"),\n+\t\t\tprefix_text.get ()).release ();\n       scm_dynwind_begin ((scm_t_dynwind_flags) 0);\n       gdbscm_dynwind_xfree (msg);\n       gdbscm_out_of_range_error (func_name, arg_pos,\n@@ -525,14 +522,12 @@ gdbscm_parse_command_name (const char *name,\n \n   if (elt->is_prefix ())\n     {\n-      xfree (prefix_text);\n       *base_list = elt->subcommands;\n-      return result;\n+      return result.release ();\n     }\n \n-  msg = xstrprintf (_(\"'%s' is not a prefix command\"), prefix_text);\n-  xfree (prefix_text);\n-  xfree (result);\n+  msg = xstrprintf (_(\"'%s' is not a prefix command\"),\n+\t\t    prefix_text.get ()).release ();\n   scm_dynwind_begin ((scm_t_dynwind_flags) 0);\n   gdbscm_dynwind_xfree (msg);\n   gdbscm_out_of_range_error (func_name, arg_pos,"
    },
    {
      "sha": "0c9cb5d50efa1c5323a55c3bd6c2ca284f740754",
      "filename": "gdb/guile/scm-exception.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-exception.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-exception.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-exception.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -234,7 +234,7 @@ SCM\n gdbscm_make_type_error (const char *subr, int arg_pos, SCM bad_value,\n \t\t\tconst char *expected_type)\n {\n-  char *msg;\n+  gdb::unique_xmalloc_ptr<char> msg;\n   SCM result;\n \n   if (arg_pos > 0)\n@@ -262,9 +262,8 @@ gdbscm_make_type_error (const char *subr, int arg_pos, SCM bad_value,\n \tmsg = xstrprintf (_(\"Wrong type argument: ~S\"));\n     }\n \n-  result = gdbscm_make_error (scm_arg_type_key, subr, msg,\n+  result = gdbscm_make_error (scm_arg_type_key, subr, msg.get (),\n \t\t\t      scm_list_1 (bad_value), scm_list_1 (bad_value));\n-  xfree (msg);\n   return result;\n }\n \n@@ -279,7 +278,7 @@ static SCM\n gdbscm_make_arg_error (SCM key, const char *subr, int arg_pos, SCM bad_value,\n \t\t       const char *error_prefix, const char *error)\n {\n-  char *msg;\n+  gdb::unique_xmalloc_ptr<char> msg;\n   SCM result;\n \n   if (error_prefix != NULL)\n@@ -300,9 +299,8 @@ gdbscm_make_arg_error (SCM key, const char *subr, int arg_pos, SCM bad_value,\n \tmsg = xstrprintf (_(\"%s: ~S\"), error);\n     }\n \n-  result = gdbscm_make_error (key, subr, msg,\n-\t\t\t      scm_list_1 (bad_value), scm_list_1 (bad_value));\n-  xfree (msg);\n+  result = gdbscm_make_error (key, subr, msg.get (), scm_list_1 (bad_value),\n+\t\t\t      scm_list_1 (bad_value));\n   return result;\n }\n "
    },
    {
      "sha": "110c1e69593dca69f27bd9c495a7da2186ac1205",
      "filename": "gdb/guile/scm-gsmob.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-gsmob.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-gsmob.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-gsmob.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -191,16 +191,13 @@ gdbscm_gsmob_kind (SCM self)\n   SCM smob, result;\n   scm_t_bits smobnum;\n   const char *name;\n-  char *kind;\n \n   smob = gsscm_get_gsmob_arg_unsafe (self, SCM_ARG1, FUNC_NAME);\n \n   smobnum = SCM_SMOBNUM (smob);\n   name = SCM_SMOBNAME (smobnum);\n-  kind = xstrprintf (\"<%s>\", name);\n-  result = scm_from_latin1_symbol (kind);\n-  xfree (kind);\n-\n+  gdb::unique_xmalloc_ptr<char> kind = xstrprintf (\"<%s>\", name);\n+  result = scm_from_latin1_symbol (kind.get ());\n   return result;\n }\n "
    },
    {
      "sha": "41ccf30202dab079925419c8a94c6f801e4fb8cf",
      "filename": "gdb/guile/scm-ports.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-ports.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/guile/scm-ports.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-ports.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -139,7 +139,7 @@ static const unsigned min_memory_port_buf_size = 1;\n static const unsigned max_memory_port_buf_size = 4096;\n \n /* \"out of range\" error message for buf sizes.  */\n-static char *out_of_range_buf_size;\n+static gdb::unique_xmalloc_ptr<char> out_of_range_buf_size;\n \n #else\n \n@@ -1447,7 +1447,7 @@ gdbscm_set_memory_port_read_buffer_size_x (SCM port, SCM size)\n \t\t\t\tmax_memory_port_buf_size))\n     {\n       gdbscm_out_of_range_error (FUNC_NAME, SCM_ARG2, size,\n-\t\t\t\t out_of_range_buf_size);\n+\t\t\t\t out_of_range_buf_size.get ());\n     }\n \n   iomem = (ioscm_memory_port *) SCM_STREAM (port);\n@@ -1497,7 +1497,7 @@ gdbscm_set_memory_port_write_buffer_size_x (SCM port, SCM size)\n \t\t\t\tmax_memory_port_buf_size))\n     {\n       gdbscm_out_of_range_error (FUNC_NAME, SCM_ARG2, size,\n-\t\t\t\t out_of_range_buf_size);\n+\t\t\t\t out_of_range_buf_size.get ());\n     }\n \n   iomem = (ioscm_memory_port *) SCM_STREAM (port);"
    },
    {
      "sha": "e190e695aa853f4f3fda86aab73e892a1ce0274a",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -164,8 +164,8 @@ jit_reader_load_command (const char *args, int from_tty)\n     error (_(\"JIT reader already loaded.  Run jit-reader-unload first.\"));\n \n   if (!IS_ABSOLUTE_PATH (file.get ()))\n-    file.reset (xstrprintf (\"%s%s%s\", jit_reader_dir.c_str (), SLASH_STRING,\n-\t\t\t    file.get ()));\n+    file = xstrprintf (\"%s%s%s\", jit_reader_dir.c_str (),\n+\t\t       SLASH_STRING, file.get ());\n \n   loaded_jit_reader = jit_reader_load (file.get ());\n   reinit_frame_cache ();"
    },
    {
      "sha": "3e60a668ed61097ed910a3ea157bac05c6859c70",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -602,8 +602,7 @@ language_defn::watch_location_expression (struct type *type,\n   /* Generates an expression that assumes a C like syntax is valid.  */\n   type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n   std::string name = type_to_string (type);\n-  return gdb::unique_xmalloc_ptr<char>\n-    (xstrprintf (\"* (%s *) %s\", name.c_str (), core_addr_to_string (addr)));\n+  return xstrprintf (\"* (%s *) %s\", name.c_str (), core_addr_to_string (addr));\n }\n \n /* See language.h.  */"
    },
    {
      "sha": "56bfaede9d9a120b5ed5c621982cfdd5960500d8",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -1078,11 +1078,12 @@ add_sal_to_sals (struct linespec_state *self,\n \t     the time being.  */\n \t  if (symname != NULL && sal->line != 0\n \t      && self->language->la_language == language_ada)\n-\t    canonical->suffix = xstrprintf (\"%s:%d\", symname, sal->line);\n+\t    canonical->suffix = xstrprintf (\"%s:%d\", symname,\n+\t\t\t\t\t    sal->line).release ();\n \t  else if (symname != NULL)\n \t    canonical->suffix = xstrdup (symname);\n \t  else\n-\t    canonical->suffix = xstrprintf (\"%d\", sal->line);\n+\t    canonical->suffix = xstrprintf (\"%d\", sal->line).release ();\n \t  canonical->symtab = sal->symtab;\n \t}\n       else"
    },
    {
      "sha": "8ec455bd15ba8ef61139e62fecb5f55484e301ab",
      "filename": "gdb/location.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/location.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/location.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/location.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -415,9 +415,12 @@ event_location_to_string (struct event_location *location)\n \t  break;\n \n \tcase ADDRESS_LOCATION:\n-\t  EL_STRING (location)\n-\t    = xstrprintf (\"*%s\",\n-\t\t\t  core_addr_to_string (EL_ADDRESS (location)));\n+\t  {\n+\t    const char *addr_string\n+\t      = core_addr_to_string (EL_ADDRESS (location));\n+\t    EL_STRING (location)\n+\t      = xstrprintf (\"*%s\", addr_string).release ();\n+\t  }\n \t  break;\n \n \tcase EXPLICIT_LOCATION:"
    },
    {
      "sha": "bf2d79d219fbf6d95b0eed4056c920cdaae74523",
      "filename": "gdb/macrotab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/macrotab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/macrotab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrotab.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -893,7 +893,7 @@ fixup_definition (const char *filename, int line, struct macro_definition *def)\n \t}\n       else if (def->argc == macro_LINE)\n \t{\n-\t  saved_expansion.reset (xstrprintf (\"%d\", line));\n+\t  saved_expansion = xstrprintf (\"%d\", line);\n \t  def->replacement = saved_expansion.get ();\n \t}\n     }"
    },
    {
      "sha": "5e97f98e928e787260b9fdf522e919baa80970d2",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -702,7 +702,7 @@ captured_main_1 (struct captured_main_args *context)\n \n   /* Prefix warning messages with the command name.  */\n   gdb::unique_xmalloc_ptr<char> tmp_warn_preprint\n-    (xstrprintf (\"%s: warning: \", gdb_program_name));\n+    = xstrprintf (\"%s: warning: \", gdb_program_name);\n   warning_pre_print = tmp_warn_preprint.get ();\n \n   current_directory = getcwd (NULL, 0);"
    },
    {
      "sha": "078087f327e56489c9a242d238259be5f0c0db38",
      "filename": "gdb/mi/mi-cmd-env.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/mi/mi-cmd-env.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/mi/mi-cmd-env.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-env.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -48,7 +48,7 @@ env_execute_cli_command (const char *cmd, const char *args)\n       gdb::unique_xmalloc_ptr<char> run;\n \n       if (args != NULL)\n-\trun.reset (xstrprintf (\"%s %s\", cmd, args));\n+\trun = xstrprintf (\"%s %s\", cmd, args);\n       else\n \trun.reset (xstrdup (cmd));\n       execute_command ( /*ui */ run.get (), 0 /*from_tty */ );"
    },
    {
      "sha": "1b414a1e028b5dc5a1be915b852622085354befd",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -781,7 +781,7 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n   if (lineobj != NULL)\n     {\n       if (PyInt_Check (lineobj))\n-\tline.reset (xstrprintf (\"%ld\", PyInt_AsLong (lineobj)));\n+\tline = xstrprintf (\"%ld\", PyInt_AsLong (lineobj));\n       else if (PyString_Check (lineobj))\n \tline = python_string_to_host_string (lineobj);\n       else"
    },
    {
      "sha": "c360197240094773b0e802797ff73a349725b2e0",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 17,
      "deletions": 22,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -1919,41 +1919,36 @@ static void\n add_packet_config_cmd (struct packet_config *config, const char *name,\n \t\t       const char *title, int legacy)\n {\n-  char *set_doc;\n-  char *show_doc;\n-  char *cmd_name;\n-\n   config->name = name;\n   config->title = title;\n-  set_doc = xstrprintf (\"Set use of remote protocol `%s' (%s) packet.\",\n-\t\t\tname, title);\n-  show_doc = xstrprintf (\"Show current use of remote \"\n-\t\t\t \"protocol `%s' (%s) packet.\",\n-\t\t\t name, title);\n+  gdb::unique_xmalloc_ptr<char> set_doc\n+    = xstrprintf (\"Set use of remote protocol `%s' (%s) packet.\",\n+\t\t  name, title);\n+  gdb::unique_xmalloc_ptr<char> show_doc\n+    = xstrprintf (\"Show current use of remote protocol `%s' (%s) packet.\",\n+\t\t  name, title);\n   /* set/show TITLE-packet {auto,on,off} */\n-  cmd_name = xstrprintf (\"%s-packet\", title);\n+  gdb::unique_xmalloc_ptr<char> cmd_name = xstrprintf (\"%s-packet\", title);\n   set_show_commands cmds\n-    = add_setshow_auto_boolean_cmd (cmd_name, class_obscure,\n-\t\t\t\t    &config->detect, set_doc,\n-\t\t\t\t    show_doc, NULL, /* help_doc */\n+    = add_setshow_auto_boolean_cmd (cmd_name.release (), class_obscure,\n+\t\t\t\t    &config->detect, set_doc.get (),\n+\t\t\t\t    show_doc.get (), NULL, /* help_doc */\n \t\t\t\t    NULL,\n \t\t\t\t    show_remote_protocol_packet_cmd,\n \t\t\t\t    &remote_set_cmdlist, &remote_show_cmdlist);\n   config->show_cmd = cmds.show;\n \n-  /* The command code copies the documentation strings.  */\n-  xfree (set_doc);\n-  xfree (show_doc);\n-\n   /* set/show remote NAME-packet {auto,on,off} -- legacy.  */\n   if (legacy)\n     {\n-      char *legacy_name;\n-\n-      legacy_name = xstrprintf (\"%s-packet\", name);\n-      add_alias_cmd (legacy_name, cmds.set, class_obscure, 0,\n+      /* It's not clear who should take ownership of this string, so, for\n+\t now, make it static, and give copies to each of the add_alias_cmd\n+\t calls below.  */\n+      static gdb::unique_xmalloc_ptr<char> legacy_name\n+\t= xstrprintf (\"%s-packet\", name);\n+      add_alias_cmd (legacy_name.get (), cmds.set, class_obscure, 0,\n \t\t     &remote_set_cmdlist);\n-      add_alias_cmd (legacy_name, cmds.show, class_obscure, 0,\n+      add_alias_cmd (legacy_name.get (), cmds.show, class_obscure, 0,\n \t\t     &remote_show_cmdlist);\n     }\n }"
    },
    {
      "sha": "522eaa7440e1d7792e59d219507bebf254dad5c2",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -566,8 +566,8 @@ struct riscv_csr_feature : public riscv_register_feature\n     for (auto &reg : m_registers)\n       {\n \tint csr_num = reg.regnum - RISCV_FIRST_CSR_REGNUM;\n-\tconst char *alias = xstrprintf (\"csr%d\", csr_num);\n-\treg.names.push_back (alias);\n+\tgdb::unique_xmalloc_ptr<char> alias = xstrprintf (\"csr%d\", csr_num);\n+\treg.names.push_back (alias.release ());\n       }\n   }\n };"
    },
    {
      "sha": "06de60ff7eab531b3f6a73df6d99fab5a3ef24fd",
      "filename": "gdb/rust-lang.h",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/rust-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/rust-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.h?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -113,9 +113,8 @@ class rust_language : public language_defn\n   {\n     type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n     std::string name = type_to_string (type);\n-    return gdb::unique_xmalloc_ptr<char>\n-      (xstrprintf (\"*(%s as *mut %s)\", core_addr_to_string (addr),\n-\t\t   name.c_str ()));\n+    return xstrprintf (\"*(%s as *mut %s)\", core_addr_to_string (addr),\n+\t\t       name.c_str ());\n   }\n \n   /* See language.h.  */"
    },
    {
      "sha": "0498becbdf1a74af7cbaa4140329bd3b5873c13f",
      "filename": "gdb/skip.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/skip.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/skip.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/skip.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -650,7 +650,7 @@ complete_skip_number (cmd_list_element *cmd,\n \n   for (const skiplist_entry &entry : skiplist_entries)\n     {\n-      gdb::unique_xmalloc_ptr<char> name (xstrprintf (\"%d\", entry.number ()));\n+      gdb::unique_xmalloc_ptr<char> name = xstrprintf (\"%d\", entry.number ());\n       if (strncmp (word, name.get (), word_len) == 0)\n \tcompleter.add_completion (std::move (name));\n     }"
    },
    {
      "sha": "8fe27c775ea74beb036305666375ad6f9dc35f25",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -887,15 +887,15 @@ void\n add_deprecated_target_alias (const target_info &tinfo, const char *alias)\n {\n   struct cmd_list_element *c;\n-  char *alt;\n \n   /* If we use add_alias_cmd, here, we do not get the deprecated warning,\n      see PR cli/15104.  */\n   c = add_cmd (alias, no_class, tinfo.doc, &targetlist);\n   c->func = open_target;\n   c->set_context ((void *) &tinfo);\n-  alt = xstrprintf (\"target %s\", tinfo.shortname);\n-  deprecate_cmd (c, alt);\n+  gdb::unique_xmalloc_ptr<char> alt\n+    = xstrprintf (\"target %s\", tinfo.shortname);\n+  deprecate_cmd (c, alt.release ());\n }\n \n /* Stub functions */"
    },
    {
      "sha": "0c5107c8d5c6d840117534f98955ea341ddf6a18",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -2809,7 +2809,7 @@ all_tracepoint_actions (struct breakpoint *t)\n   if (!default_collect.empty ())\n     {\n       gdb::unique_xmalloc_ptr<char> default_collect_line\n-\t(xstrprintf (\"collect %s\", default_collect.c_str ()));\n+\t= xstrprintf (\"collect %s\", default_collect.c_str ());\n \n       validate_actionline (default_collect_line.get (), t);\n       actions.reset (new struct command_line (simple_control,"
    },
    {
      "sha": "89f84a2b9425b08bae1f9afdd9caa63537bd6452",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -850,10 +850,10 @@ add_layout_command (const char *name, tui_layout_split *layout)\n   layout->specification (&spec, 0);\n \n   gdb::unique_xmalloc_ptr<char> doc\n-    (xstrprintf (_(\"Apply the \\\"%s\\\" layout.\\n\\\n+    = xstrprintf (_(\"Apply the \\\"%s\\\" layout.\\n\\\n This layout was created using:\\n\\\n   tui new-layout %s %s\"),\n-\t\t name, name, spec.c_str ()));\n+\t\t  name, name, spec.c_str ());\n \n   cmd = add_cmd (name, class_tui, nullptr, doc.get (), &layout_list);\n   cmd->set_context (layout);"
    },
    {
      "sha": "e27a8818b94cb8392f77a59ad1e5dd7732d9ea11",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -534,10 +534,10 @@ add_internal_problem_command (struct internal_problem *problem)\n      set_doc and show_doc in this function.  */\n   const char *set_doc\n     = xstrprintf (_(\"Configure what GDB does when %s is detected.\"),\n-\t\t  problem->name);\n+\t\t  problem->name).release ();\n   const char *show_doc\n     = xstrprintf (_(\"Show what GDB does when %s is detected.\"),\n-\t\t  problem->name);\n+\t\t  problem->name).release ();\n \n   add_setshow_prefix_cmd (problem->name, class_maintenance,\n \t\t\t  set_doc, show_doc, set_cmd_list, show_cmd_list,"
    },
    {
      "sha": "239f1f786aad0160e082bbf07ed6b501e5d69192",
      "filename": "gdb/xtensa-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/xtensa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdb/xtensa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-tdep.c?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -727,7 +727,8 @@ xtensa_init_reggroups (void)\n   xtensa_vectra_reggroup = reggroup_new (\"vectra\", USER_REGGROUP);\n \n   for (i = 0; i < XTENSA_MAX_COPROCESSOR; i++)\n-    xtensa_cp[i] = reggroup_new (xstrprintf (\"cp%d\", i), USER_REGGROUP);\n+    xtensa_cp[i] = reggroup_new (xstrprintf (\"cp%d\", i).release (),\n+\t\t\t\t USER_REGGROUP);\n }\n \n static void"
    },
    {
      "sha": "42bce36e535604f9112d874c5454802c84efb4a1",
      "filename": "gdbsupport/common-utils.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdbsupport/common-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdbsupport/common-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-utils.cc?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -32,19 +32,18 @@ xzalloc (size_t size)\n /* Like asprintf/vasprintf but get an internal_error if the call\n    fails. */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n xstrprintf (const char *format, ...)\n {\n-  char *ret;\n   va_list args;\n \n   va_start (args, format);\n-  ret = xstrvprintf (format, args);\n+  gdb::unique_xmalloc_ptr<char> ret = xstrvprintf (format, args);\n   va_end (args);\n   return ret;\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n xstrvprintf (const char *format, va_list ap)\n {\n   char *ret = NULL;\n@@ -56,7 +55,7 @@ xstrvprintf (const char *format, va_list ap)\n      happen, but just to be sure.  */\n   if (ret == NULL || status < 0)\n     internal_error (__FILE__, __LINE__, _(\"vasprintf call failed\"));\n-  return ret;\n+  return gdb::unique_xmalloc_ptr<char> (ret);\n }\n \n int"
    },
    {
      "sha": "1e90a5c078b0f2b96d544e80af9a2a4d55a36b33",
      "filename": "gdbsupport/common-utils.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8579fd136a614985bd27f20539c7bb7c5a51287d/gdbsupport/common-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8579fd136a614985bd27f20539c7bb7c5a51287d/gdbsupport/common-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-utils.h?ref=8579fd136a614985bd27f20539c7bb7c5a51287d",
      "patch": "@@ -23,6 +23,7 @@\n #include <string>\n #include <vector>\n #include \"gdbsupport/byte-vector.h\"\n+#include \"gdbsupport/gdb_unique_ptr.h\"\n \n #include \"poison.h\"\n \n@@ -54,8 +55,9 @@ void *xzalloc (size_t);\n \n /* Like asprintf and vasprintf, but return the string, throw an error\n    if no memory.  */\n-char *xstrprintf (const char *format, ...) ATTRIBUTE_PRINTF (1, 2);\n-char *xstrvprintf (const char *format, va_list ap)\n+gdb::unique_xmalloc_ptr<char> xstrprintf (const char *format, ...)\n+     ATTRIBUTE_PRINTF (1, 2);\n+gdb::unique_xmalloc_ptr<char> xstrvprintf (const char *format, va_list ap)\n      ATTRIBUTE_PRINTF (1, 0);\n \n /* Like snprintf, but throw an error if the output buffer is too small.  */"
    }
  ]
}