{
  "sha": "e12437dc862690eeaa4a487fee35a237703d2b29",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTEyNDM3ZGM4NjI2OTBlZWFhNGE0ODdmZWUzNWEyMzc3MDNkMmIyOQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T10:06:30Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T11:29:35Z"
    },
    "message": "[binutils, ARM, 3/16] BF insns infrastructure with new bfd_reloc_code_real for fallback branch\n\nThis patch is part of a series of patches to add support for Armv8.1-M Mainline\ninstructions to binutils.\nThis adds infrastructure for the Branch Future instructions (BF, BFX, BFL, BFLX,\nBFCSEL). These are the first instructions in ARM that have more than one\nrelocations in them.\n\nThis is the first infrastructure patch that adds a new bfd_reloc_code_real enum\nfor the fallback branch offset.\nThis is common for all such instructions and needs to be resolvable by the\nassembler.\n\nChangeLog entries are as follows :\n*** bfd/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* reloc.c (BFD_RELOC_THUMB_PCREL_BRANCH5): New enum.\n\t* bfd-in2.h: Regenerate.\n\t* libbfd.h: Regenerate.\n\n*** gas/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-arm.c (md_pcrel_from_section): New switch case\n\tfor BFD_RELOC_THUMB_PCREL_BRANCH5.\n\t(v8_1_branch_value_check): New function to check branch\n\toffsets.\n\t(md_appdy_fix): New switch case for\n\tBFD_RELOC_THUMB_PCREL_BRANCH5.\n\t(tc_gen_reloc): Likewise.\n\n*** opcodes/ChangeLog ***\n\n2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (print_insn_thumb32): Updated to accept new %G pattern.",
    "tree": {
      "sha": "308949d90e4b742fd3363a90988fc365881914a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/308949d90e4b742fd3363a90988fc365881914a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e12437dc862690eeaa4a487fee35a237703d2b29",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e12437dc862690eeaa4a487fee35a237703d2b29",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e12437dc862690eeaa4a487fee35a237703d2b29",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e12437dc862690eeaa4a487fee35a237703d2b29/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0991585ade56ff86a382978bb3b0268d6e1f31c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0991585ade56ff86a382978bb3b0268d6e1f31c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0991585ade56ff86a382978bb3b0268d6e1f31c"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 91,
    "deletions": 0
  },
  "files": [
    {
      "sha": "bbb251a000fa98d063b6a3360356bcf1cb5588f8",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* reloc.c (BFD_RELOC_THUMB_PCREL_BRANCH5): New enum.\n+\t* bfd-in2.h: Regenerate.\n+\t* libbfd.h: Regenerate.\n+\n 2019-04-15  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* archures.c (bfd_mach_arm_8_1M_MAIN): Define."
    },
    {
      "sha": "3493d4f0de41cb184710248ce6664700bca78cca",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -3564,6 +3564,9 @@ field in the instruction.  */\n /* ARM 26-bit pc-relative branch for B or conditional BL instruction.  */\n   BFD_RELOC_ARM_PCREL_JUMP,\n \n+/* ARM 5-bit pc-relative branch for Branch Future instructions.  */\n+  BFD_RELOC_THUMB_PCREL_BRANCH5,\n+\n /* Thumb 7-, 9-, 12-, 20-, 23-, and 25-bit pc-relative branches.\n The lowest bit must be zero and is not stored in the instruction.\n Note that the corresponding ELF R_ARM_THM_JUMPnn constant has an"
    },
    {
      "sha": "02daa29b433e390507fe91e7a045f43eb85d548d",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -1529,6 +1529,7 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_THUMB_PCREL_BLX\",\n   \"BFD_RELOC_ARM_PCREL_CALL\",\n   \"BFD_RELOC_ARM_PCREL_JUMP\",\n+  \"BFD_RELOC_THUMB_PCREL_BRANCH5\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH7\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH9\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH12\","
    },
    {
      "sha": "a071dc75c0499192077da30aba8ee7fc3d62dacb",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -3014,6 +3014,11 @@ ENUM\n ENUMDOC\n   ARM 26-bit pc-relative branch for B or conditional BL instruction.\n \n+ENUM\n+  BFD_RELOC_THUMB_PCREL_BRANCH5\n+ENUMDOC\n+  ARM 5-bit pc-relative branch for Branch Future instructions.\n+\n ENUM\n   BFD_RELOC_THUMB_PCREL_BRANCH7\n ENUMX"
    },
    {
      "sha": "02f28f24dc116bae102955735306a9f9e25428dc",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-arm.c (md_pcrel_from_section): New switch case\n+\tfor BFD_RELOC_THUMB_PCREL_BRANCH5.\n+\t(v8_1_branch_value_check): New function to check branch\n+\toffsets.\n+\t(md_appdy_fix): New switch case for\n+\tBFD_RELOC_THUMB_PCREL_BRANCH5.\n+\t(tc_gen_reloc): Likewise.\n+\n 2019-04-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_neon_movhf): Remove fp-armv8 check."
    },
    {
      "sha": "a13baa603486623836977d4c8f68ac283d02cbab",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -235,6 +235,8 @@ static const arm_feature_set arm_ext_pan = ARM_FEATURE_CORE_HIGH (ARM_EXT2_PAN);\n static const arm_feature_set arm_ext_v8m = ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8M);\n static const arm_feature_set arm_ext_v8m_main =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8M_MAIN);\n+static const arm_feature_set arm_ext_v8_1m_main =\n+ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN);\n /* Instructions in ARMv8-M only found in M profile architectures.  */\n static const arm_feature_set arm_ext_v8m_m_only =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8M | ARM_EXT2_V8M_MAIN);\n@@ -843,6 +845,7 @@ struct asm_opcode\n #define BAD_THUMB32\t_(\"instruction not supported in Thumb16 mode\")\n #define BAD_ADDR_MODE   _(\"instruction does not accept this addressing mode\");\n #define BAD_BRANCH\t_(\"branch must be last instruction in IT block\")\n+#define BAD_BRANCH_OFF\t_(\"branch out of range or not a multiple of 2\")\n #define BAD_NOT_IT\t_(\"instruction not allowed in IT block\")\n #define BAD_FPU\t\t_(\"selected FPU does not support instruction\")\n #define BAD_OUT_IT \t_(\"thumb conditional instruction should be in IT block\")\n@@ -13272,6 +13275,26 @@ do_t_usat16 (void)\n   inst.instruction |= Rn << 16;\n }\n \n+/* Checking the range of the branch offset (VAL) with NBITS bits\n+   and IS_SIGNED signedness.  Also checks the LSB to be 0.  */\n+static int\n+v8_1_branch_value_check (int val, int nbits, int is_signed)\n+{\n+  gas_assert (nbits > 0 && nbits <= 32);\n+  if (is_signed)\n+    {\n+      int cmp = (1 << (nbits - 1));\n+      if ((val < -cmp) || (val >= cmp) || (val & 0x01))\n+\treturn FAIL;\n+    }\n+  else\n+    {\n+      if ((val <= 0) || (val >= (1 << nbits)) || (val & 0x1))\n+\treturn FAIL;\n+    }\n+    return SUCCESS;\n+}\n+\n /* Neon instruction encoder helpers.  */\n \n /* Encodings for the different types for various Neon opcodes.  */\n@@ -22791,6 +22814,7 @@ md_pcrel_from_section (fixS * fixP, segT seg)\n       return (base + 4) & ~3;\n \n       /* Thumb branches are simply offset by +4.  */\n+    case BFD_RELOC_THUMB_PCREL_BRANCH5:\n     case BFD_RELOC_THUMB_PCREL_BRANCH7:\n     case BFD_RELOC_THUMB_PCREL_BRANCH9:\n     case BFD_RELOC_THUMB_PCREL_BRANCH12:\n@@ -24669,6 +24693,30 @@ md_apply_fix (fixS *\tfixP,\n \t}\n       break;\n \n+    case BFD_RELOC_THUMB_PCREL_BRANCH5:\n+      if (fixP->fx_addsy\n+\t  && (S_GET_SEGMENT (fixP->fx_addsy) == seg)\n+\t  && !S_FORCE_RELOC (fixP->fx_addsy, TRUE)\n+\t  && ARM_IS_FUNC (fixP->fx_addsy)\n+\t  && ARM_CPU_HAS_FEATURE (selected_cpu, arm_ext_v8_1m_main))\n+\t{\n+\t  /* Force a relocation for a branch 5 bits wide.  */\n+\t  fixP->fx_done = 0;\n+\t}\n+      if (v8_1_branch_value_check (value, 5, FALSE) == FAIL)\n+\tas_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t      BAD_BRANCH_OFF);\n+\n+      if (fixP->fx_done || !seg->use_rela_p)\n+\t{\n+\t  addressT boff = value >> 1;\n+\n+\t  newval  = md_chars_to_number (buf, THUMB_SIZE);\n+\t  newval |= (boff << 7);\n+\t  md_number_to_chars (buf, newval, THUMB_SIZE);\n+\t}\n+      break;\n+\n     case BFD_RELOC_ARM_V4BX:\n       /* This will need to go in the object file.  */\n       fixP->fx_done = 0;\n@@ -24880,6 +24928,12 @@ tc_gen_reloc (asection *section, fixS *fixp)\n \t\t    _(\"ADRL used for a symbol not defined in the same file\"));\n       return NULL;\n \n+    case BFD_RELOC_THUMB_PCREL_BRANCH5:\n+      as_bad_where (fixp->fx_file, fixp->fx_line,\n+\t\t    _(\"%s used for a symbol not defined in the same file\"),\n+\t\t    bfd_get_reloc_code_name (fixp->fx_r_type));\n+      return NULL;\n+\n     case BFD_RELOC_ARM_OFFSET_IMM:\n       if (section->use_rela_p)\n \t{"
    },
    {
      "sha": "fc9697b83d8247c3f62981570c8dbc55755e8aa8",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (print_insn_thumb32): Updated to accept new %G pattern.\n+\n 2019-04-15  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* arm-dis.c (select_arm_features): Add logic for Armv8.1-M Mainline."
    },
    {
      "sha": "0ed893b01acdabe33ddb24de10303cecf6be95e5",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e12437dc862690eeaa4a487fee35a237703d2b29/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e12437dc862690eeaa4a487fee35a237703d2b29/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=e12437dc862690eeaa4a487fee35a237703d2b29",
      "patch": "@@ -2713,6 +2713,7 @@ static const struct opcode16 thumb_opcodes[] =\n \n        %E\t\tprint the lsb and width fields of a bfc/bfi instruction\n        %F\t\tprint the lsb and width fields of a sbfx/ubfx instruction\n+       %G\t\tprint a fallback offset for Branch Future instructions\n        %b\t\tprint a conditional branch offset\n        %B\t\tprint an unconditional branch offset\n        %s\t\tprint the shift field of an SSAT instruction\n@@ -5862,6 +5863,13 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n \t\t}\n \t\tbreak;\n \n+\t      case 'G':\n+\t\t{\n+\t\t  unsigned int boff = (((given & 0x07800000) >> 23) << 1);\n+\t\t  func (stream, \"%x\", boff);\n+\t\t}\n+\t\tbreak;\n+\n \t      case 'b':\n \t\t{\n \t\t  unsigned int S = (given & 0x04000000u) >> 26;"
    }
  ]
}