{
  "sha": "15295543f94cc5951e1d2802d97b228777e6828e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTUyOTU1NDNmOTRjYzU5NTFlMWQyODAyZDk3YjIyODc3N2U2ODI4ZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:50Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:01Z"
    },
    "message": "gdbserver: turn target op 'create_inferior' into a method\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's create_inferior op into a method of\n\tprocess_target.\n\n\t* target.h (struct process_stratum_target): Remove the target op.\n\t(class process_target): Add the target op.\n\t(create_inferior): Rename the macro to ...\n\t(target_create_inferior): ... this.\n\n\tUpdate the derived classes and callers below.\n\n\t* server.cc (handle_v_run): Update.\n\t(captured_main): Update.\n\t(process_serial_event): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_create_inferior): Turn into ...\n\t(linux_process_target::create_inferior): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t(lynx_create_inferior): Turn into ...\n\t(lynx_process_target::create_inferior): ... this.\n\t* lynx-low.h (class lynx_process_target): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_create_inferior): Turn into ...\n\t(nto_process_target::create_inferior): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_create_inferior): Turn into ...\n\t(win32_process_target::create_inferior): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "eac59cf523d1a9282283531e3efcebc75c392c27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eac59cf523d1a9282283531e3efcebc75c392c27"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/15295543f94cc5951e1d2802d97b228777e6828e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15295543f94cc5951e1d2802d97b228777e6828e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/15295543f94cc5951e1d2802d97b228777e6828e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15295543f94cc5951e1d2802d97b228777e6828e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5ef9273d29137dd81d7dff62821970e067baa82e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ef9273d29137dd81d7dff62821970e067baa82e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5ef9273d29137dd81d7dff62821970e067baa82e"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 69,
    "deletions": 33
  },
  "files": [
    {
      "sha": "7dd9cf366022e86f2a8c2b79ef21296f49ff01ea",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -1,3 +1,35 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's create_inferior op into a method of\n+\tprocess_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target op.\n+\t(class process_target): Add the target op.\n+\t(create_inferior): Rename the macro to ...\n+\t(target_create_inferior): ... this.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* server.cc (handle_v_run): Update.\n+\t(captured_main): Update.\n+\t(process_serial_event): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_create_inferior): Turn into ...\n+\t(linux_process_target::create_inferior): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t(lynx_create_inferior): Turn into ...\n+\t(lynx_process_target::create_inferior): ... this.\n+\t* lynx-low.h (class lynx_process_target): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_create_inferior): Turn into ...\n+\t(nto_process_target::create_inferior): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_create_inferior): Turn into ...\n+\t(win32_process_target::create_inferior): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* target.h (class process_target): New class definition."
    },
    {
      "sha": "0521afcfc19576389b66e7f23ba065ba5f61d515",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -996,9 +996,9 @@ linux_ptrace_fun ()\n    PROGRAM is the name of the program to be started, and PROGRAM_ARGS\n    are its arguments.  */\n \n-static int\n-linux_create_inferior (const char *program,\n-\t\t       const std::vector<char *> &program_args)\n+int\n+linux_process_target::create_inferior (const char *program,\n+\t\t\t\t       const std::vector<char *> &program_args)\n {\n   client_state &cs = get_client_state ();\n   struct lwp_info *new_lwp;\n@@ -7359,7 +7359,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_create_inferior,\n   linux_post_create_inferior,\n   linux_attach,\n   linux_kill,"
    },
    {
      "sha": "f49af7b2be3ca9190a4657d7932043d0d0b5c234",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -270,6 +270,8 @@ class linux_process_target : public process_target\n {\n public:\n \n+  int create_inferior (const char *program,\n+\t\t       const std::vector<char *> &program_args) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "9566e12d2df210b0ab5485efd25384629a5501c8",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -248,14 +248,14 @@ lynx_ptrace_fun ()\n \n /* Implement the create_inferior method of the target_ops vector.  */\n \n-static int\n-lynx_create_inferior (const char *program,\n-\t\t      const std::vector<char *> &program_args)\n+int\n+lynx_process_target::create_inferior (const char *program,\n+\t\t\t\t      const std::vector<char *> &program_args)\n {\n   int pid;\n   std::string str_program_args = stringify_argv (program_args);\n \n-  lynx_debug (\"lynx_create_inferior ()\");\n+  lynx_debug (\"create_inferior ()\");\n \n   pid = fork_inferior (program,\n \t\t       str_program_args.c_str (),\n@@ -726,7 +726,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  lynx_create_inferior,\n   NULL,  /* post_create_inferior */\n   lynx_attach,\n   lynx_kill,"
    },
    {
      "sha": "66cfdfa870c7e3001a4e62740a2b05d6128be9f5",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -58,6 +58,8 @@ class lynx_process_target : public process_target\n {\n public:\n \n+  int create_inferior (const char *program,\n+\t\t       const std::vector<char *> &program_args) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "c27126f3126fc31db7745114ef4ec0673deb01ca",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -350,9 +350,9 @@ nto_read_auxv_from_initial_stack (CORE_ADDR initial_stack,\n /* Start inferior specified by PROGRAM, using PROGRAM_ARGS as its\n    arguments.  */\n \n-static int\n-nto_create_inferior (const char *program,\n-\t\t     const std::vector<char *> &program_args)\n+int\n+nto_process_target::create_inferior (const char *program,\n+\t\t\t\t     const std::vector<char *> &program_args)\n {\n   struct inheritance inherit;\n   pid_t pid;\n@@ -935,7 +935,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_create_inferior,\n   NULL,  /* post_create_inferior */\n   nto_attach,\n   nto_kill,"
    },
    {
      "sha": "3bad08b82ac079cd62d4d00eaa99b41322c2d237",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -48,6 +48,8 @@ class nto_process_target : public process_target\n {\n public:\n \n+  int create_inferior (const char *program,\n+\t\t       const std::vector<char *> &program_args) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "73f8e185477378989dbbcbfe859ddb9f3d91ef3f",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -3028,7 +3028,7 @@ handle_v_run (char *own_buf)\n   free_vector_argv (program_args);\n   program_args = new_argv;\n \n-  create_inferior (program_path.get (), program_args);\n+  target_create_inferior (program_path.get (), program_args);\n \n   if (cs.last_status.kind == TARGET_WAITKIND_STOPPED)\n     {\n@@ -3784,7 +3784,7 @@ captured_main (int argc, char *argv[])\n       program_args.push_back (NULL);\n \n       /* Wait till we are at first instruction in program.  */\n-      create_inferior (program_path.get (), program_args);\n+      target_create_inferior (program_path.get (), program_args);\n \n       /* We are now (hopefully) stopped at the first instruction of\n \t the target process.  This assumes that the target process was\n@@ -4303,7 +4303,7 @@ process_serial_event (void)\n \t  /* Wait till we are at 1st instruction in prog.  */\n \t  if (program_path.get () != NULL)\n \t    {\n-\t      create_inferior (program_path.get (), program_args);\n+\t      target_create_inferior (program_path.get (), program_args);\n \n \t      if (cs.last_status.kind == TARGET_WAITKIND_STOPPED)\n \t\t{"
    },
    {
      "sha": "b6d04139108d599cdb2327eb97350579f4279398",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -70,17 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Start a new process.\n-\n-     PROGRAM is a path to the program to execute.\n-     PROGRAM_ARGS is a standard NULL-terminated array of arguments,\n-     to be passed to the inferior as ``argv'' (along with PROGRAM).\n-\n-     Returns the new PID on success, -1 on failure.  Registers the new\n-     process with the process list.  */\n-  int (*create_inferior) (const char *program,\n-\t\t\t  const std::vector<char *> &program_args);\n-\n   /* Do additional setup after a new process is created, including\n      exec-wrapper completion.  */\n   void (*post_create_inferior) (void);\n@@ -489,14 +478,25 @@ class process_target\n public:\n \n   virtual ~process_target () = default;\n+\n+  /* Start a new process.\n+\n+     PROGRAM is a path to the program to execute.\n+     PROGRAM_ARGS is a standard NULL-terminated array of arguments,\n+     to be passed to the inferior as ``argv'' (along with PROGRAM).\n+\n+     Returns the new PID on success, -1 on failure.  Registers the new\n+     process with the process list.  */\n+  virtual int create_inferior (const char *program,\n+\t\t\t       const std::vector<char *> &program_args) = 0;\n };\n \n extern process_stratum_target *the_target;\n \n void set_target_ops (process_stratum_target *);\n \n-#define create_inferior(program, program_args)\t\\\n-  (*the_target->create_inferior) (program, program_args)\n+#define target_create_inferior(program, program_args)\t\\\n+  the_target->pt->create_inferior (program, program_args)\n \n #define target_post_create_inferior()\t\t\t \\\n   do\t\t\t\t\t\t\t \\"
    },
    {
      "sha": "ecef54c461ebeea56d0434e9853eb8f346b7d36a",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -633,9 +633,9 @@ Could not convert the expanded inferior cwd to wide-char.\"));\n    PROGRAM_ARGS is the vector containing the inferior's args.\n    Returns the new PID on success, -1 on failure.  Registers the new\n    process with the process list.  */\n-static int\n-win32_create_inferior (const char *program,\n-\t\t       const std::vector<char *> &program_args)\n+int\n+win32_process_target::create_inferior (const char *program,\n+\t\t\t\t       const std::vector<char *> &program_args)\n {\n   client_state &cs = get_client_state ();\n #ifndef USE_WIN32API\n@@ -1839,7 +1839,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  win32_create_inferior,\n   NULL,  /* post_create_inferior */\n   win32_attach,\n   win32_kill,"
    },
    {
      "sha": "c922d735068aa97447766bc6cab143939053f380",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15295543f94cc5951e1d2802d97b228777e6828e/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=15295543f94cc5951e1d2802d97b228777e6828e",
      "patch": "@@ -107,6 +107,8 @@ class win32_process_target : public process_target\n {\n public:\n \n+  int create_inferior (const char *program,\n+\t\t       const std::vector<char *> &program_args) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}