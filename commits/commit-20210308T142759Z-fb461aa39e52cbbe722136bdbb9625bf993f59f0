{
  "sha": "fb461aa39e52cbbe722136bdbb9625bf993f59f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI0NjFhYTM5ZTUyY2JiZTcyMjEzNmJkYmI5NjI1YmY5OTNmNTlmMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:59Z"
    },
    "message": "Split out eval_op_structop_ptr\n\nThis splits STRUCTOP_PTR into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_structop_ptr): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "2665b5156b4290b3af2545c9a82d30a3600f56de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2665b5156b4290b3af2545c9a82d30a3600f56de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb461aa39e52cbbe722136bdbb9625bf993f59f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb461aa39e52cbbe722136bdbb9625bf993f59f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb461aa39e52cbbe722136bdbb9625bf993f59f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb461aa39e52cbbe722136bdbb9625bf993f59f0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3e96c4fc0f4b286c96e6c95618c7f34293185308",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e96c4fc0f4b286c96e6c95618c7f34293185308",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3e96c4fc0f4b286c96e6c95618c7f34293185308"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 66,
    "deletions": 50
  },
  "files": [
    {
      "sha": "fb4299e0798d9aabac7a7be1c6b440e0fe1ef170",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb461aa39e52cbbe722136bdbb9625bf993f59f0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb461aa39e52cbbe722136bdbb9625bf993f59f0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fb461aa39e52cbbe722136bdbb9625bf993f59f0",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_structop_ptr): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_op_structop_struct): New function."
    },
    {
      "sha": "4800438b121fd9fde661f2568cfc7789a6daac76",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 61,
      "deletions": 50,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb461aa39e52cbbe722136bdbb9625bf993f59f0/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb461aa39e52cbbe722136bdbb9625bf993f59f0/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=fb461aa39e52cbbe722136bdbb9625bf993f59f0",
      "patch": "@@ -1354,6 +1354,65 @@ eval_op_structop_struct (struct type *expect_type, struct expression *exp,\n   return arg3;\n }\n \n+/* A helper function for STRUCTOP_PTR.  */\n+\n+static struct value *\n+eval_op_structop_ptr (struct type *expect_type, struct expression *exp,\n+\t\t      enum noside noside, enum exp_opcode op,\n+\t\t      struct value *arg1, const char *string)\n+{\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  /* Check to see if operator '->' has been overloaded.  If so replace\n+     arg1 with the value returned by evaluating operator->().  */\n+  while (unop_user_defined_p (op, arg1))\n+    {\n+      struct value *value = NULL;\n+      try\n+\t{\n+\t  value = value_x_unop (arg1, op, noside);\n+\t}\n+\n+      catch (const gdb_exception_error &except)\n+\t{\n+\t  if (except.error == NOT_FOUND_ERROR)\n+\t    break;\n+\t  else\n+\t    throw;\n+\t}\n+\n+      arg1 = value;\n+    }\n+\n+  /* JYG: if print object is on we need to replace the base type\n+     with rtti type in order to continue on with successful\n+     lookup of member / method only available in the rtti type.  */\n+  {\n+    struct type *arg_type = value_type (arg1);\n+    struct type *real_type;\n+    int full, using_enc;\n+    LONGEST top;\n+    struct value_print_options opts;\n+\n+    get_user_print_options (&opts);\n+    if (opts.objectprint && TYPE_TARGET_TYPE (arg_type)\n+\t&& (TYPE_TARGET_TYPE (arg_type)->code () == TYPE_CODE_STRUCT))\n+      {\n+\treal_type = value_rtti_indirect_type (arg1, &full, &top,\n+\t\t\t\t\t      &using_enc);\n+\tif (real_type)\n+\t  arg1 = value_cast (real_type, arg1);\n+      }\n+  }\n+\n+  struct value *arg3 = value_struct_elt (&arg1, NULL, string,\n+\t\t\t\t\t NULL, \"structure pointer\");\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    arg3 = value_zero (value_type (arg3), VALUE_LVAL (arg3));\n+  return arg3;\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -1952,56 +2011,8 @@ evaluate_subexp_standard (struct type *expect_type,\n       tem = longest_to_int (exp->elts[pc + 1].longconst);\n       (*pos) += 3 + BYTES_TO_EXP_ELEM (tem + 1);\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      if (noside == EVAL_SKIP)\n-\treturn eval_skip_value (exp);\n-\n-      /* Check to see if operator '->' has been overloaded.  If so replace\n-\t arg1 with the value returned by evaluating operator->().  */\n-      while (unop_user_defined_p (op, arg1))\n-\t{\n-\t  struct value *value = NULL;\n-\t  try\n-\t    {\n-\t      value = value_x_unop (arg1, op, noside);\n-\t    }\n-\n-\t  catch (const gdb_exception_error &except)\n-\t    {\n-\t      if (except.error == NOT_FOUND_ERROR)\n-\t\tbreak;\n-\t      else\n-\t\tthrow;\n-\t    }\n-\n-\t  arg1 = value;\n-\t}\n-\n-      /* JYG: if print object is on we need to replace the base type\n-\t with rtti type in order to continue on with successful\n-\t lookup of member / method only available in the rtti type.  */\n-      {\n-\tstruct type *arg_type = value_type (arg1);\n-\tstruct type *real_type;\n-\tint full, using_enc;\n-\tLONGEST top;\n-\tstruct value_print_options opts;\n-\n-\tget_user_print_options (&opts);\n-\tif (opts.objectprint && TYPE_TARGET_TYPE (arg_type)\n-\t    && (TYPE_TARGET_TYPE (arg_type)->code () == TYPE_CODE_STRUCT))\n-\t  {\n-\t    real_type = value_rtti_indirect_type (arg1, &full, &top,\n-\t\t\t\t\t\t  &using_enc);\n-\t    if (real_type)\n-\t\targ1 = value_cast (real_type, arg1);\n-\t  }\n-      }\n-\n-      arg3 = value_struct_elt (&arg1, NULL, &exp->elts[pc + 2].string,\n-\t\t\t       NULL, \"structure pointer\");\n-      if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\targ3 = value_zero (value_type (arg3), VALUE_LVAL (arg3));\n-      return arg3;\n+      return eval_op_structop_ptr (expect_type, exp, noside, op, arg1,\n+\t\t\t\t   &exp->elts[pc + 2].string);\n \n     case STRUCTOP_MEMBER:\n     case STRUCTOP_MPTR:"
    }
  ]
}