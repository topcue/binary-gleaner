{
  "sha": "087945261c7523ed895e48a97418ec6dee6cdb67",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDg3OTQ1MjYxYzc1MjNlZDg5NWU0OGE5NzQxOGVjNmRlZTZjZGI2Nw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-03-18T12:37:52Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-03-18T12:37:52Z"
    },
    "message": "libctf: fix some tabdamage and move some code around\n\nctf-link.c is unnecessarily confusing because ctf_link_lazy_open is\npositioned near functions that have nothing to do with opening files.\n\nMove it around, and fix some tabdamage that's crept in lately.\n\nlibctf/ChangeLog\n2021-03-18  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-link.c (ctf_link_lazy_open): Move up in the file, to near\n\tctf_link_add_ctf.\n\t* ctf-lookup.c (ctf_lookup_symbol_idx): Repair tabdamage.\n\t(ctf_lookup_by_sym_or_name): Likewise.\n\t* testsuite/libctf-lookup/struct-iteration.c: Likewise.\n\t* testsuite/libctf-regression/type-add-unnamed-struct.c: Likewise.",
    "tree": {
      "sha": "0aa276ff4c07816d30d92c256a4aed521a94f97d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0aa276ff4c07816d30d92c256a4aed521a94f97d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/087945261c7523ed895e48a97418ec6dee6cdb67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/087945261c7523ed895e48a97418ec6dee6cdb67",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/087945261c7523ed895e48a97418ec6dee6cdb67",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/087945261c7523ed895e48a97418ec6dee6cdb67/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1f463bedd63b6524cc32930185df93ede3765f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1f463bedd63b6524cc32930185df93ede3765f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1f463bedd63b6524cc32930185df93ede3765f9"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 65,
    "deletions": 56
  },
  "files": [
    {
      "sha": "cf78d8c6abcec4f2ab435fe66d5528d21df39761",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=087945261c7523ed895e48a97418ec6dee6cdb67",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-18  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-link.c (ctf_link_lazy_open): Move up in the file, to near\n+\tctf_link_add_ctf.\n+\t* ctf-lookup.c (ctf_lookup_symbol_idx): Repair tabdamage.\n+\t(ctf_lookup_by_sym_or_name): Likewise.\n+\t* testsuite/libctf-lookup/struct-iteration.c: Likewise.\n+\t* testsuite/libctf-regression/type-add-unnamed-struct.c: Likewise.\n+\n 2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-create.c (symtypetab_density): Report the symbol name as"
    },
    {
      "sha": "cc99f818970bf698e7a1a22b82236cb7877baa0d",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 46,
      "deletions": 46,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=087945261c7523ed895e48a97418ec6dee6cdb67",
      "patch": "@@ -189,6 +189,52 @@ ctf_link_add_ctf (ctf_dict_t *fp, ctf_archive_t *ctf, const char *name)\n   return ctf_link_add (fp, ctf, name, NULL, 0);\n }\n \n+/* Lazily open a CTF archive for linking, if not already open.\n+\n+   Returns the number of files contained within the opened archive (0 for none),\n+   or -1 on error, as usual.  */\n+static ssize_t\n+ctf_link_lazy_open (ctf_dict_t *fp, ctf_link_input_t *input)\n+{\n+  size_t count;\n+  int err;\n+\n+  if (input->clin_arc)\n+    return ctf_archive_count (input->clin_arc);\n+\n+  if (input->clin_fp)\n+    return 1;\n+\n+  /* See ctf_link_add_ctf.  */\n+#if defined (PIC) || !NOBFD\n+  input->clin_arc = ctf_open (input->clin_filename, NULL, &err);\n+#else\n+  ctf_err_warn (fp, 0, ECTF_NEEDSBFD, _(\"cannot open %s lazily\"),\n+\t\tinput->clin_filename);\n+  ctf_set_errno (fp, ECTF_NEEDSBFD);\n+  return -1;\n+#endif\n+\n+  /* Having no CTF sections is not an error.  We just don't need to do\n+     anything.  */\n+\n+  if (!input->clin_arc)\n+    {\n+      if (err == ECTF_NOCTFDATA)\n+\treturn 0;\n+\n+      ctf_err_warn (fp, 0, err, _(\"opening CTF %s failed\"),\n+\t\t    input->clin_filename);\n+      ctf_set_errno (fp, err);\n+      return -1;\n+    }\n+\n+  if ((count = ctf_archive_count (input->clin_arc)) == 0)\n+    ctf_arc_close (input->clin_arc);\n+\n+  return (ssize_t) count;\n+}\n+\n /* Return a per-CU output CTF dictionary suitable for the given CU, creating and\n    interning it if need be.  */\n \n@@ -461,52 +507,6 @@ ctf_link_one_variable (ctf_dict_t *fp, ctf_dict_t *in_fp, const char *name,\n   return 0;\n }\n \n-/* Lazily open a CTF archive for linking, if not already open.\n-\n-   Returns the number of files contained within the opened archive (0 for none),\n-   or -1 on error, as usual.  */\n-static ssize_t\n-ctf_link_lazy_open (ctf_dict_t *fp, ctf_link_input_t *input)\n-{\n-  size_t count;\n-  int err;\n-\n-  if (input->clin_arc)\n-    return ctf_archive_count (input->clin_arc);\n-\n-  if (input->clin_fp)\n-    return 1;\n-\n-  /* See ctf_link_add_ctf.  */\n-#if defined (PIC) || !NOBFD\n-  input->clin_arc = ctf_open (input->clin_filename, NULL, &err);\n-#else\n-  ctf_err_warn (fp, 0, ECTF_NEEDSBFD, _(\"cannot open %s lazily\"),\n-\t\tinput->clin_filename);\n-  ctf_set_errno (fp, ECTF_NEEDSBFD);\n-  return -1;\n-#endif\n-\n-  /* Having no CTF sections is not an error.  We just don't need to do\n-     anything.  */\n-\n-  if (!input->clin_arc)\n-    {\n-      if (err == ECTF_NOCTFDATA)\n-\treturn 0;\n-\n-      ctf_err_warn (fp, 0, err, _(\"opening CTF %s failed\"),\n-\t\t    input->clin_filename);\n-      ctf_set_errno (fp, err);\n-      return -1;\n-    }\n-\n-  if ((count = ctf_archive_count (input->clin_arc)) == 0)\n-    ctf_arc_close (input->clin_arc);\n-\n-  return (ssize_t) count;\n-}\n-\n typedef struct link_sort_inputs_cb_arg\n {\n   int is_cu_mapped;"
    },
    {
      "sha": "2e78cf492763af348d8a48d59e9353086aaaf10a",
      "filename": "libctf/ctf-lookup.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ctf-lookup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/ctf-lookup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-lookup.c?ref=087945261c7523ed895e48a97418ec6dee6cdb67",
      "patch": "@@ -592,9 +592,9 @@ ctf_lookup_symbol_idx (ctf_dict_t *fp, const char *symname)\n \t\t\t\t       cache->ctf_symhash_latest) < 0)\n \t\tgoto oom;\n \t    if (strcmp (sym.st_name, symname) == 0)\n-              return cache->ctf_symhash_latest++;\n-          }\n-          break;\n+\t      return cache->ctf_symhash_latest++;\n+\t  }\n+\t  break;\n \tcase sizeof (Elf32_Sym):\n \t  {\n \t    Elf32_Sym *symp = (Elf32_Sym *) sp->cts_data;\n@@ -607,8 +607,8 @@ ctf_lookup_symbol_idx (ctf_dict_t *fp, const char *symname)\n \t\t\t\t       cache->ctf_symhash_latest) < 0)\n \t\tgoto oom;\n \t    if (strcmp (sym.st_name, symname) == 0)\n-              return cache->ctf_symhash_latest++;\n-          }\n+\t      return cache->ctf_symhash_latest++;\n+\t  }\n \t  break;\n \tdefault:\n \t  ctf_set_errno (fp, ECTF_SYMTAB);\n@@ -902,7 +902,7 @@ ctf_lookup_by_sym_or_name (ctf_dict_t *fp, unsigned long symidx,\n \t  if (symidx > fp->ctf_dynsymmax)\n \t    goto try_parent;\n \n-          sym = fp->ctf_dynsymidx[symidx];\n+\t  sym = fp->ctf_dynsymidx[symidx];\n \t  err = ECTF_NOTYPEDAT;\n \t  if (!sym || (sym->st_shndx != STT_OBJECT && sym->st_shndx != STT_FUNC))\n \t    goto try_parent;"
    },
    {
      "sha": "005aba124d4c7b6c44568185656d88adc8a4b414",
      "filename": "libctf/testsuite/libctf-lookup/struct-iteration.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/testsuite/libctf-lookup/struct-iteration.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/testsuite/libctf-lookup/struct-iteration.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-lookup/struct-iteration.c?ref=087945261c7523ed895e48a97418ec6dee6cdb67",
      "patch": "@@ -4,13 +4,13 @@\n \n static int\n print_struct (const char *name, ctf_id_t membtype, unsigned long offset,\n-              void *fp_)\n+\t      void *fp_)\n {\n   ctf_dict_t *fp = (ctf_dict_t *) fp_;\n   char *type_name = ctf_type_aname (fp, membtype);\n \n   printf (\"iter test: %s, offset %lx, has type %lx/%s\\n\",\n-          name, offset, membtype, type_name);\n+\t  name, offset, membtype, type_name);\n   free (type_name);\n \n   return 0;\n@@ -54,7 +54,7 @@ main (int argc, char *argv[])\n       char *type_name = ctf_type_aname (fp, membtype);\n \n       printf (\"next test: %s, offset %lx, has type %lx/%s\\n\",\n-              name, offset, membtype, type_name);\n+\t      name, offset, membtype, type_name);\n       free (type_name);\n     }\n   if (ctf_errno (fp) != ECTF_NEXT_END)"
    },
    {
      "sha": "43c3934add4e48cd3aeb3a0c1406d9f0266562c0",
      "filename": "libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/087945261c7523ed895e48a97418ec6dee6cdb67/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c?ref=087945261c7523ed895e48a97418ec6dee6cdb67",
      "patch": "@@ -47,7 +47,7 @@ main (int argc, char *argv[])\n   for (walk = membs; *walk != NULL; walk++)\n     {\n       if (ctf_member_info (dyn, newtype, *walk, &mi) < 0)\n-        goto lookup_err;\n+\tgoto lookup_err;\n       printf (\"Looked up %s, type %lx, offset %lx\\n\", *walk, (long) mi.ctm_type, mi.ctm_offset);\n     }\n "
    }
  ]
}