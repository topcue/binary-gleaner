{
  "sha": "123cd851480c728845a4c3f85da772dd8331cf19",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTIzY2Q4NTE0ODBjNzI4ODQ1YTRjM2Y4NWRhNzcyZGQ4MzMxY2YxOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-06T19:50:03Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-07T12:37:21Z"
    },
    "message": "Make struct frame_arg self-managing\n\nThis changes struct frame_arg to be self-managing and then fixes the\nvarious users.\n\nTested by the buildbot.\n\ngdb/ChangeLog\n2019-08-07  Tom Tromey  <tromey@adacore.com>\n\n\t* stack.c (print_frame_arg, read_frame_local, read_frame_arg)\n\t(print_frame_args): Update.\n\t* python/py-framefilter.c (py_print_single_arg, enumerate_args):\n\tUpdate.\n\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n\t* frame.h (struct frame_arg): Add initializers.\n\t<error>: Now a unique_xmalloc_ptr.",
    "tree": {
      "sha": "1ecc475ebe4da5ade1fd9e0219bcaafd567f11ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1ecc475ebe4da5ade1fd9e0219bcaafd567f11ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/123cd851480c728845a4c3f85da772dd8331cf19",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/123cd851480c728845a4c3f85da772dd8331cf19",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/123cd851480c728845a4c3f85da772dd8331cf19",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/123cd851480c728845a4c3f85da772dd8331cf19/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d31bc39e655ea39721754fa0ea539a8a0c9b26c"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 22,
    "deletions": 25
  },
  "files": [
    {
      "sha": "04bb14e92b5adcd8764b66d10dbe0693787f1f12",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/123cd851480c728845a4c3f85da772dd8331cf19/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/123cd851480c728845a4c3f85da772dd8331cf19/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=123cd851480c728845a4c3f85da772dd8331cf19",
      "patch": "@@ -1,3 +1,13 @@\n+2019-08-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* stack.c (print_frame_arg, read_frame_local, read_frame_arg)\n+\t(print_frame_args): Update.\n+\t* python/py-framefilter.c (py_print_single_arg, enumerate_args):\n+\tUpdate.\n+\t* mi/mi-cmd-stack.c (list_arg_or_local): Update.\n+\t* frame.h (struct frame_arg): Add initializers.\n+\t<error>: Now a unique_xmalloc_ptr.\n+\n 2019-08-07  Alan Hayward  <alan.hayward@arm.com>\n \n \t* NEWS: Expand the Pointer Authentication entry."
    },
    {
      "sha": "09842c92a345c0cbf734738a37b0ba004a8c1049",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/123cd851480c728845a4c3f85da772dd8331cf19/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/123cd851480c728845a4c3f85da772dd8331cf19/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=123cd851480c728845a4c3f85da772dd8331cf19",
      "patch": "@@ -821,15 +821,15 @@ extern frame_print_options user_frame_print_options;\n struct frame_arg\n {\n   /* Symbol for this parameter used for example for its name.  */\n-  struct symbol *sym;\n+  struct symbol *sym = nullptr;\n \n   /* Value of the parameter.  It is NULL if ERROR is not NULL; if both VAL and\n      ERROR are NULL this parameter's value should not be printed.  */\n-  struct value *val;\n+  struct value *val = nullptr;\n \n   /* String containing the error message, it is more usually NULL indicating no\n      error occured reading this parameter.  */\n-  char *error;\n+  gdb::unique_xmalloc_ptr<char> error;\n \n   /* One of the print_entry_values_* entries as appropriate specifically for\n      this frame_arg.  It will be different from print_entry_values.  With\n@@ -840,7 +840,7 @@ struct frame_arg\n      value - print_entry_values_compact is not permitted fi ui_out_is_mi_like_p\n      (in such case print_entry_values_no and print_entry_values_only is used\n      for each parameter kind specifically.  */\n-  const char *entry_kind;\n+  const char *entry_kind = nullptr;\n };\n \n extern void read_frame_arg (const frame_print_options &fp_opts,"
    },
    {
      "sha": "7a3ba476415bdd9a7fa081b60b17b3a7ea2939af",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/123cd851480c728845a4c3f85da772dd8331cf19/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/123cd851480c728845a4c3f85da772dd8331cf19/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=123cd851480c728845a4c3f85da772dd8331cf19",
      "patch": "@@ -533,7 +533,7 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n   if (arg->val || arg->error)\n     {\n       if (arg->error)\n-\tstb.printf (_(\"<error reading variable: %s>\"), arg->error);\n+\tstb.printf (_(\"<error reading variable: %s>\"), arg->error.get ());\n       else\n \t{\n \t  try\n@@ -641,10 +641,8 @@ list_args_or_locals (const frame_print_options &fp_opts,\n \t\tsym2 = sym;\n \t      gdb_assert (sym2 != NULL);\n \n-\t      memset (&arg, 0, sizeof (arg));\n \t      arg.sym = sym2;\n \t      arg.entry_kind = print_entry_values_no;\n-\t      memset (&entryarg, 0, sizeof (entryarg));\n \t      entryarg.sym = sym2;\n \t      entryarg.entry_kind = print_entry_values_no;\n \n@@ -669,8 +667,6 @@ list_args_or_locals (const frame_print_options &fp_opts,\n \t\tlist_arg_or_local (&arg, what, values, skip_unavailable);\n \t      if (entryarg.entry_kind != print_entry_values_no)\n \t\tlist_arg_or_local (&entryarg, what, values, skip_unavailable);\n-\t      xfree (arg.error);\n-\t      xfree (entryarg.error);\n \t    }\n \t}\n "
    },
    {
      "sha": "ecd633ab6950d6d2fc52fe307d53ff941897540d",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/123cd851480c728845a4c3f85da772dd8331cf19/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/123cd851480c728845a4c3f85da772dd8331cf19/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=123cd851480c728845a4c3f85da772dd8331cf19",
      "patch": "@@ -398,7 +398,7 @@ py_print_single_arg (struct ui_out *out,\n \t      gdb_assert (fa != NULL && fa->error != NULL);\n \t      out->field_fmt (\"value\",\n \t\t\t      _(\"<error reading variable: %s>\"),\n-\t\t\t      fa->error);\n+\t\t\t      fa->error.get ());\n \t    }\n \t  else\n \t    py_print_value (out, val, opts, 0, args_type, language);\n@@ -486,9 +486,6 @@ enumerate_args (PyObject *iter,\n \t  read_frame_arg (user_frame_print_options,\n \t\t\t  sym, frame, &arg, &entryarg);\n \n-\t  gdb::unique_xmalloc_ptr<char> arg_holder (arg.error);\n-\t  gdb::unique_xmalloc_ptr<char> entry_holder (entryarg.error);\n-\n \t  /* The object has not provided a value, so this is a frame\n \t     argument to be read by GDB.  In this case we have to\n \t     account for entry-values.  */"
    },
    {
      "sha": "49b9100485ff15112b8d89741577e7733de479db",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/123cd851480c728845a4c3f85da772dd8331cf19/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/123cd851480c728845a4c3f85da772dd8331cf19/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=123cd851480c728845a4c3f85da772dd8331cf19",
      "patch": "@@ -390,7 +390,7 @@ print_frame_arg (const frame_print_options &fp_opts,\n   else\n     {\n       if (arg->error)\n-\tstb.printf (_(\"<error reading variable: %s>\"), arg->error);\n+\tstb.printf (_(\"<error reading variable: %s>\"), arg->error.get ());\n       else\n \t{\n \t  try\n@@ -452,13 +452,12 @@ read_frame_local (struct symbol *sym, struct frame_info *frame,\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      argp->error = xstrdup (except.what ());\n+      argp->error.reset (xstrdup (except.what ()));\n     }\n }\n \n-/* Read in inferior function parameter SYM at FRAME into ARGP.  Caller is\n-   responsible for xfree of ARGP->ERROR.  This function never throws an\n-   exception.  */\n+/* Read in inferior function parameter SYM at FRAME into ARGP.  This\n+   function never throws an exception.  */\n \n void\n read_frame_arg (const frame_print_options &fp_opts,\n@@ -626,7 +625,7 @@ read_frame_arg (const frame_print_options &fp_opts,\n \n   argp->sym = sym;\n   argp->val = val;\n-  argp->error = val_error ? xstrdup (val_error) : NULL;\n+  argp->error.reset (val_error ? xstrdup (val_error) : NULL);\n   if (!val && !val_error)\n     argp->entry_kind = print_entry_values_only;\n   else if ((fp_opts.print_entry_values == print_entry_values_compact\n@@ -641,7 +640,7 @@ read_frame_arg (const frame_print_options &fp_opts,\n \n   entryargp->sym = sym;\n   entryargp->val = entryval;\n-  entryargp->error = entryval_error ? xstrdup (entryval_error) : NULL;\n+  entryargp->error.reset (entryval_error ? xstrdup (entryval_error) : NULL);\n   if (!entryval && !entryval_error)\n     entryargp->entry_kind = print_entry_values_no;\n   else\n@@ -810,10 +809,8 @@ print_frame_args (const frame_print_options &fp_opts,\n \n \t  if (!print_args)\n \t    {\n-\t      memset (&arg, 0, sizeof (arg));\n \t      arg.sym = sym;\n \t      arg.entry_kind = print_entry_values_no;\n-\t      memset (&entryarg, 0, sizeof (entryarg));\n \t      entryarg.sym = sym;\n \t      entryarg.entry_kind = print_entry_values_no;\n \t    }\n@@ -834,9 +831,6 @@ print_frame_args (const frame_print_options &fp_opts,\n \t      print_frame_arg (fp_opts, &entryarg);\n \t    }\n \n-\t  xfree (arg.error);\n-\t  xfree (entryarg.error);\n-\n \t  first = 0;\n \t}\n     }"
    }
  ]
}