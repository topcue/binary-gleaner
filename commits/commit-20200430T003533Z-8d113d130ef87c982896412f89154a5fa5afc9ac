{
  "sha": "8d113d130ef87c982896412f89154a5fa5afc9ac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQxMTNkMTMwZWY4N2M5ODI4OTY0MTJmODkxNTRhNWZhNWFmYzlhYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-04-30T00:35:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-04-30T00:35:33Z"
    },
    "message": "gdb: fix shellcheck warnings SC2059 (variables in printf format string) in gdbarch.sh\n\nFix all instances of this:\n\n    In gdbarch.sh line 2182:\n                printf \"  gdb_assert (!(${invalid_p}));\\n\"\n                       ^-- SC2059: Don't use variables in the printf format string. Use printf \"..%s..\" \"$foo\".\n\n... by doing exactly as the message suggests.\n\nThe rationale explained here [1] makes sense, if there happens to be a\nformat specifier in text substituted for the variable, the printf won't\ndo what we expect.\n\n[1] https://github.com/koalaman/shellcheck/wiki/SC2059\n\ngdb/ChangeLog:\n\n\t* gdbarch.sh: Use %s with printf, instead of variables in the\n\tformat string.",
    "tree": {
      "sha": "93c8f2b0a2b66da1a6d877c8d3e2250a8e23ffbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93c8f2b0a2b66da1a6d877c8d3e2250a8e23ffbc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d113d130ef87c982896412f89154a5fa5afc9ac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d113d130ef87c982896412f89154a5fa5afc9ac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d113d130ef87c982896412f89154a5fa5afc9ac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d113d130ef87c982896412f89154a5fa5afc9ac/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84ed7a472551bce1ac58e0eced619433fabc956c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84ed7a472551bce1ac58e0eced619433fabc956c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84ed7a472551bce1ac58e0eced619433fabc956c"
    }
  ],
  "stats": {
    "total": 127,
    "additions": 66,
    "deletions": 61
  },
  "files": [
    {
      "sha": "b6928233fb8c2bbb7d1dc29b299981bc1e16107d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d113d130ef87c982896412f89154a5fa5afc9ac/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d113d130ef87c982896412f89154a5fa5afc9ac/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8d113d130ef87c982896412f89154a5fa5afc9ac",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-29  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbarch.sh: Use %s with printf, instead of variables in the\n+\tformat string.\n+\n 2020-04-29  Sterling Augustine <saugustine@google.com>\n \n        * dwarf2/read.c (setup_type_unit_groups): Set list_in_scope."
    },
    {
      "sha": "2780a819f915580efd42a455dffbe7d0c43470db",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 61,
      "deletions": 61,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d113d130ef87c982896412f89154a5fa5afc9ac/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d113d130ef87c982896412f89154a5fa5afc9ac/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=8d113d130ef87c982896412f89154a5fa5afc9ac",
      "patch": "@@ -1409,8 +1409,8 @@ do\n     if class_is_info_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"extern ${returntype} gdbarch_${function} (struct gdbarch *gdbarch);\\n\"\n-\tprintf \"/* set_gdbarch_${function}() - not applicable - pre-initialized.  */\\n\"\n+\tprintf \"extern %s gdbarch_%s (struct gdbarch *gdbarch);\\n\" \"$returntype\" \"$function\"\n+\tprintf \"/* set_gdbarch_%s() - not applicable - pre-initialized.  */\\n\" \"$function\"\n     fi\n done\n \n@@ -1431,33 +1431,33 @@ do\n     if class_is_predicate_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"extern int gdbarch_${function}_p (struct gdbarch *gdbarch);\\n\"\n+\tprintf \"extern int gdbarch_%s_p (struct gdbarch *gdbarch);\\n\" \"$function\"\n     fi\n     if class_is_variable_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"extern ${returntype} gdbarch_${function} (struct gdbarch *gdbarch);\\n\"\n-\tprintf \"extern void set_gdbarch_${function} (struct gdbarch *gdbarch, ${returntype} ${function});\\n\"\n+\tprintf \"extern %s gdbarch_%s (struct gdbarch *gdbarch);\\n\" \"$returntype\" \"$function\"\n+\tprintf \"extern void set_gdbarch_%s (struct gdbarch *gdbarch, %s %s);\\n\" \"$function\" \"$returntype\" \"$function\"\n     fi\n     if class_is_function_p\n     then\n \tprintf \"\\n\"\n \tif [ \"x${formal}\" = \"xvoid\" ] && class_is_multiarch_p\n \tthen\n-\t    printf \"typedef ${returntype} (gdbarch_${function}_ftype) (struct gdbarch *gdbarch);\\n\"\n+\t    printf \"typedef %s (gdbarch_%s_ftype) (struct gdbarch *gdbarch);\\n\" \"$returntype\" \"$function\"\n \telif class_is_multiarch_p\n \tthen\n-\t    printf \"typedef ${returntype} (gdbarch_${function}_ftype) (struct gdbarch *gdbarch, ${formal});\\n\"\n+\t    printf \"typedef %s (gdbarch_%s_ftype) (struct gdbarch *gdbarch, %s);\\n\" \"$returntype\" \"$function\" \"$formal\"\n \telse\n-\t    printf \"typedef ${returntype} (gdbarch_${function}_ftype) (${formal});\\n\"\n+\t    printf \"typedef %s (gdbarch_%s_ftype) (%s);\\n\" \"$returntype\" \"$function\" \"$formal\"\n \tfi\n \tif [ \"x${formal}\" = \"xvoid\" ]\n \tthen\n-\t  printf \"extern ${returntype} gdbarch_${function} (struct gdbarch *gdbarch);\\n\"\n+\t  printf \"extern %s gdbarch_%s (struct gdbarch *gdbarch);\\n\" \"$returntype\" \"$function\"\n \telse\n-\t  printf \"extern ${returntype} gdbarch_${function} (struct gdbarch *gdbarch, ${formal});\\n\"\n+\t  printf \"extern %s gdbarch_%s (struct gdbarch *gdbarch, %s);\\n\" \"$returntype\" \"$function\" \"$formal\"\n \tfi\n-\tprintf \"extern void set_gdbarch_${function} (struct gdbarch *gdbarch, gdbarch_${function}_ftype *${function});\\n\"\n+\tprintf \"extern void set_gdbarch_%s (struct gdbarch *gdbarch, gdbarch_%s_ftype *%s);\\n\" \"$function\" \"$function\" \"$function\"\n     fi\n done\n \n@@ -1832,7 +1832,7 @@ function_list | while do_read\n do\n     if class_is_info_p\n     then\n-\tprintf \"  ${returntype} ${function};\\n\"\n+\tprintf \"  %s %s;\\n\" \"$returntype\" \"$function\"\n     fi\n done\n printf \"\\n\"\n@@ -1873,10 +1873,10 @@ function_list | while do_read\n do\n     if class_is_variable_p\n     then\n-\tprintf \"  ${returntype} ${function};\\n\"\n+\tprintf \"  %s %s;\\n\" \"$returntype\" \"$function\"\n     elif class_is_function_p\n     then\n-\tprintf \"  gdbarch_${function}_ftype *${function};\\n\"\n+\tprintf \"  gdbarch_%s_ftype *%s;\\n\" \"$function\" \"$function\"\n     fi\n done\n printf \"};\\n\"\n@@ -1912,7 +1912,7 @@ function_list | while do_read\n do\n     if class_is_info_p\n     then\n-\tprintf \"  gdbarch->${function} = info->${function};\\n\"\n+\tprintf \"  gdbarch->%s = info->%s;\\n\" \"$function\" \"$function\"\n     fi\n done\n printf \"\\n\"\n@@ -1923,7 +1923,7 @@ do\n     then\n \tif [ -n \"${predefault}\" -a \"x${predefault}\" != \"x0\" ]\n \tthen\n-\t  printf \"  gdbarch->${function} = ${predefault};\\n\"\n+\t  printf \"  gdbarch->%s = %s;\\n\" \"$function\" \"$predefault\"\n \tfi\n     fi\n done\n@@ -1996,31 +1996,31 @@ do\n     then\n \tif [ \"x${invalid_p}\" = \"x0\" ]\n \tthen\n-\t    printf \"  /* Skip verify of ${function}, invalid_p == 0 */\\n\"\n+\t    printf \"  /* Skip verify of %s, invalid_p == 0 */\\n\" \"$function\"\n \telif class_is_predicate_p\n \tthen\n-\t    printf \"  /* Skip verify of ${function}, has predicate.  */\\n\"\n+\t    printf \"  /* Skip verify of %s, has predicate.  */\\n\" \"$function\"\n \t# FIXME: See do_read for potential simplification\n  \telif [ -n \"${invalid_p}\" -a -n \"${postdefault}\" ]\n \tthen\n-\t    printf \"  if (${invalid_p})\\n\"\n-\t    printf \"    gdbarch->${function} = ${postdefault};\\n\"\n+\t    printf \"  if (%s)\\n\" \"$invalid_p\"\n+\t    printf \"    gdbarch->%s = %s;\\n\" \"$function\" \"$postdefault\"\n \telif [ -n \"${predefault}\" -a -n \"${postdefault}\" ]\n \tthen\n-\t    printf \"  if (gdbarch->${function} == ${predefault})\\n\"\n-\t    printf \"    gdbarch->${function} = ${postdefault};\\n\"\n+\t    printf \"  if (gdbarch->%s == %s)\\n\" \"$function\" \"$predefault\"\n+\t    printf \"    gdbarch->%s = %s;\\n\" \"$function\" \"$postdefault\"\n \telif [ -n \"${postdefault}\" ]\n \tthen\n-\t    printf \"  if (gdbarch->${function} == 0)\\n\"\n-\t    printf \"    gdbarch->${function} = ${postdefault};\\n\"\n+\t    printf \"  if (gdbarch->%s == 0)\\n\" \"$function\"\n+\t    printf \"    gdbarch->%s = %s;\\n\" \"$function\" \"$postdefault\"\n \telif [ -n \"${invalid_p}\" ]\n \tthen\n-\t    printf \"  if (${invalid_p})\\n\"\n-\t    printf \"    log.puts (\\\"\\\\\\\\n\\\\\\\\t${function}\\\");\\n\"\n+\t    printf \"  if (%s)\\n\" \"$invalid_p\"\n+\t    printf \"    log.puts (\\\"\\\\\\\\n\\\\\\\\t%s\\\");\\n\" \"$function\"\n \telif [ -n \"${predefault}\" ]\n \tthen\n-\t    printf \"  if (gdbarch->${function} == ${predefault})\\n\"\n-\t    printf \"    log.puts (\\\"\\\\\\\\n\\\\\\\\t${function}\\\");\\n\"\n+\t    printf \"  if (gdbarch->%s == %s)\\n\" \"$function\" \"$predefault\"\n+\t    printf \"    log.puts (\\\"\\\\\\\\n\\\\\\\\t%s\\\");\\n\" \"$function\"\n \tfi\n     fi\n done\n@@ -2056,15 +2056,15 @@ do\n     if class_is_predicate_p\n     then\n \tprintf \"  fprintf_unfiltered (file,\\n\"\n-\tprintf \"                      \\\"gdbarch_dump: gdbarch_${function}_p() = %%d\\\\\\\\n\\\",\\n\"\n-\tprintf \"                      gdbarch_${function}_p (gdbarch));\\n\"\n+\tprintf \"                      \\\"gdbarch_dump: gdbarch_%s_p() = %%d\\\\\\\\n\\\",\\n\" \"$function\"\n+\tprintf \"                      gdbarch_%s_p (gdbarch));\\n\" \"$function\"\n     fi\n     # Print the corresponding value.\n     if class_is_function_p\n     then\n \tprintf \"  fprintf_unfiltered (file,\\n\"\n-\tprintf \"                      \\\"gdbarch_dump: ${function} = <%%s>\\\\\\\\n\\\",\\n\"\n-\tprintf \"                      host_address_to_string (gdbarch->${function}));\\n\"\n+\tprintf \"                      \\\"gdbarch_dump: %s = <%%s>\\\\\\\\n\\\",\\n\" \"$function\"\n+\tprintf \"                      host_address_to_string (gdbarch->%s));\\n\" \"$function\"\n     else\n \t# It is a variable\n \tcase \"${print}:${returntype}\" in\n@@ -2081,8 +2081,8 @@ do\n \t\t;;\n         esac\n \tprintf \"  fprintf_unfiltered (file,\\n\"\n-\tprintf \"                      \\\"gdbarch_dump: ${function} = %s\\\\\\\\n\\\",\\n\" \"${fmt}\"\n-\tprintf \"                      ${print});\\n\"\n+\tprintf \"                      \\\"gdbarch_dump: %s = %s\\\\\\\\n\\\",\\n\" \"$function\" \"$fmt\"\n+\tprintf \"                      %s);\\n\" \"$print\"\n     fi\n done\n cat <<EOF\n@@ -2110,32 +2110,32 @@ do\n     then\n \tprintf \"\\n\"\n \tprintf \"int\\n\"\n-\tprintf \"gdbarch_${function}_p (struct gdbarch *gdbarch)\\n\"\n+\tprintf \"gdbarch_%s_p (struct gdbarch *gdbarch)\\n\" \"$function\"\n \tprintf \"{\\n\"\n         printf \"  gdb_assert (gdbarch != NULL);\\n\"\n-\tprintf \"  return ${predicate};\\n\"\n+\tprintf \"  return %s;\\n\" \"$predicate\"\n \tprintf \"}\\n\"\n     fi\n     if class_is_function_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"${returntype}\\n\"\n+\tprintf \"%s\\n\" \"$returntype\"\n \tif [ \"x${formal}\" = \"xvoid\" ]\n \tthen\n-\t  printf \"gdbarch_${function} (struct gdbarch *gdbarch)\\n\"\n+\t  printf \"gdbarch_%s (struct gdbarch *gdbarch)\\n\" \"$function\"\n \telse\n-\t  printf \"gdbarch_${function} (struct gdbarch *gdbarch, ${formal})\\n\"\n+\t  printf \"gdbarch_%s (struct gdbarch *gdbarch, %s)\\n\" \"$function\" \"$formal\"\n \tfi\n \tprintf \"{\\n\"\n         printf \"  gdb_assert (gdbarch != NULL);\\n\"\n-\tprintf \"  gdb_assert (gdbarch->${function} != NULL);\\n\"\n+\tprintf \"  gdb_assert (gdbarch->%s != NULL);\\n\" \"$function\"\n \tif class_is_predicate_p && test -n \"${predefault}\"\n \tthen\n \t    # Allow a call to a function with a predicate.\n-\t    printf \"  /* Do not check predicate: ${predicate}, allow call.  */\\n\"\n+\t    printf \"  /* Do not check predicate: %s, allow call.  */\\n\" \"$predicate\"\n \tfi\n \tprintf \"  if (gdbarch_debug >= 2)\\n\"\n-\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_${function} called\\\\\\\\n\\\");\\n\"\n+\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_%s called\\\\\\\\n\\\");\\n\" \"$function\"\n \tif [ \"x${actual}\" = \"x-\" -o \"x${actual}\" = \"x\" ]\n \tthen\n \t    if class_is_multiarch_p\n@@ -2154,58 +2154,58 @@ do\n         fi\n        \tif [ \"x${returntype}\" = \"xvoid\" ]\n \tthen\n-\t  printf \"  gdbarch->${function} (${params});\\n\"\n+\t  printf \"  gdbarch->%s (%s);\\n\" \"$function\" \"$params\"\n \telse\n-\t  printf \"  return gdbarch->${function} (${params});\\n\"\n+\t  printf \"  return gdbarch->%s (%s);\\n\" \"$function\" \"$params\"\n \tfi\n \tprintf \"}\\n\"\n \tprintf \"\\n\"\n \tprintf \"void\\n\"\n-\tprintf \"set_gdbarch_${function} (struct gdbarch *gdbarch,\\n\"\n-        printf \"            `echo ${function} | sed -e 's/./ /g'`  gdbarch_${function}_ftype ${function})\\n\"\n+\tprintf \"set_gdbarch_%s (struct gdbarch *gdbarch,\\n\" \"$function\"\n+        printf \"            `echo ${function} | sed -e 's/./ /g'`  gdbarch_%s_ftype %s)\\n\" \"$function\" \"$function\"\n \tprintf \"{\\n\"\n-\tprintf \"  gdbarch->${function} = ${function};\\n\"\n+\tprintf \"  gdbarch->%s = %s;\\n\" \"$function\" \"$function\"\n \tprintf \"}\\n\"\n     elif class_is_variable_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"${returntype}\\n\"\n-\tprintf \"gdbarch_${function} (struct gdbarch *gdbarch)\\n\"\n+\tprintf \"%s\\n\" \"$returntype\"\n+\tprintf \"gdbarch_%s (struct gdbarch *gdbarch)\\n\" \"$function\"\n \tprintf \"{\\n\"\n         printf \"  gdb_assert (gdbarch != NULL);\\n\"\n \tif [ \"x${invalid_p}\" = \"x0\" ]\n \tthen\n-\t    printf \"  /* Skip verify of ${function}, invalid_p == 0 */\\n\"\n+\t    printf \"  /* Skip verify of %s, invalid_p == 0 */\\n\" \"$function\"\n \telif [ -n \"${invalid_p}\" ]\n \tthen\n \t    printf \"  /* Check variable is valid.  */\\n\"\n-\t    printf \"  gdb_assert (!(${invalid_p}));\\n\"\n+\t    printf \"  gdb_assert (!(%s));\\n\" \"$invalid_p\"\n \telif [ -n \"${predefault}\" ]\n \tthen\n \t    printf \"  /* Check variable changed from pre-default.  */\\n\"\n-\t    printf \"  gdb_assert (gdbarch->${function} != ${predefault});\\n\"\n+\t    printf \"  gdb_assert (gdbarch->%s != %s);\\n\" \"$function\" \"$predefault\"\n \tfi\n \tprintf \"  if (gdbarch_debug >= 2)\\n\"\n-\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_${function} called\\\\\\\\n\\\");\\n\"\n-\tprintf \"  return gdbarch->${function};\\n\"\n+\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_%s called\\\\\\\\n\\\");\\n\" \"$function\"\n+\tprintf \"  return gdbarch->%s;\\n\" \"$function\"\n \tprintf \"}\\n\"\n \tprintf \"\\n\"\n \tprintf \"void\\n\"\n-\tprintf \"set_gdbarch_${function} (struct gdbarch *gdbarch,\\n\"\n-        printf \"            `echo ${function} | sed -e 's/./ /g'`  ${returntype} ${function})\\n\"\n+\tprintf \"set_gdbarch_%s (struct gdbarch *gdbarch,\\n\" \"$function\"\n+        printf \"            `echo ${function} | sed -e 's/./ /g'`  %s %s)\\n\" \"$returntype\" \"$function\"\n \tprintf \"{\\n\"\n-\tprintf \"  gdbarch->${function} = ${function};\\n\"\n+\tprintf \"  gdbarch->%s = %s;\\n\" \"$function\" \"$function\"\n \tprintf \"}\\n\"\n     elif class_is_info_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"${returntype}\\n\"\n-\tprintf \"gdbarch_${function} (struct gdbarch *gdbarch)\\n\"\n+\tprintf \"%s\\n\" \"$returntype\"\n+\tprintf \"gdbarch_%s (struct gdbarch *gdbarch)\\n\" \"$function\"\n \tprintf \"{\\n\"\n         printf \"  gdb_assert (gdbarch != NULL);\\n\"\n \tprintf \"  if (gdbarch_debug >= 2)\\n\"\n-\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_${function} called\\\\\\\\n\\\");\\n\"\n-\tprintf \"  return gdbarch->${function};\\n\"\n+\tprintf \"    fprintf_unfiltered (gdb_stdlog, \\\"gdbarch_%s called\\\\\\\\n\\\");\\n\" \"$function\"\n+\tprintf \"  return gdbarch->%s;\\n\" \"$function\"\n \tprintf \"}\\n\"\n     fi\n done"
    }
  ]
}