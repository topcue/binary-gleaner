{
  "sha": "a50264baf57716993e701096fa6e466fb63e0301",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUwMjY0YmFmNTc3MTY5OTNlNzAxMDk2ZmE2ZTQ2NmZiNjNlMDMwMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:13:50Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:50Z"
    },
    "message": "Add dwarf2_per_objfile member to DWARF batons\n\nVarious DWARF callbacks expect to be able to fetch the objfile and / or\ndwarf2_per_objfile from the DWARF CU object.  However, this won't be\npossible once sharing is implemented.\n\nBecause these objects are related to full symbols (e.g., they are used\nto implement location expressions), they can simply store the\ndwarf2_per_objfile they need.\n\nThis patch adds a per_objfile member to the various \"baton\" structures\nand arranges to set this value when constructing the baton.\n\ngdb/ChangeLog:\n\nYYYY-MM-DD  Tom Tromey  <tom@tromey.com>\nYYYY-MM-DD  Simon Marchi  <simon.marchi@efficios.com>\n\n\t* dwarf2/loc.c (struct piece_closure) <per_objfile>: New member.\n\t(allocate_piece_closure): Set \"per_objfile\" member.\n\t(dwarf2_find_location_expression, dwarf2_locexpr_baton_eval)\n\t(locexpr_describe_location, loclist_describe_location): Use new\n\tmember.\n\t* dwarf2/read.c (read_call_site_scope)\n\t(mark_common_block_symbol_computed, attr_to_dynamic_prop)\n\t(dwarf2_const_value_attr, dwarf2_fetch_die_loc_sect_off)\n\t(fill_in_loclist_baton, dwarf2_symbol_mark_computed,\n\thandle_data_member_location): Set per_objfile member.\n\t* dwarf2/loc.h (struct dwarf2_locexpr_baton) <per_objfile>: New\n\tmember.\n\t(struct dwarf2_loclist_baton) <per_objfile>: New member.\n\nChange-Id: If3aaa6a0f544be86710157c3adb68fde24d80037",
    "tree": {
      "sha": "e776c6ce6b5000d5bfaf252dbe4e817f28bdca91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e776c6ce6b5000d5bfaf252dbe4e817f28bdca91"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a50264baf57716993e701096fa6e466fb63e0301",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a50264baf57716993e701096fa6e466fb63e0301",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a50264baf57716993e701096fa6e466fb63e0301",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a50264baf57716993e701096fa6e466fb63e0301/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3473f0c4b8e8d791ed87b1919a666bc368497dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3473f0c4b8e8d791ed87b1919a666bc368497dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3473f0c4b8e8d791ed87b1919a666bc368497dc"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 54,
    "deletions": 12
  },
  "files": [
    {
      "sha": "6839b6149d7dde865c1d15ba8c6a503d635c1daa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50264baf57716993e701096fa6e466fb63e0301/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50264baf57716993e701096fa6e466fb63e0301/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a50264baf57716993e701096fa6e466fb63e0301",
      "patch": "@@ -1,3 +1,20 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\t    Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/loc.c (struct piece_closure) <per_objfile>: New member.\n+\t(allocate_piece_closure): Set \"per_objfile\" member.\n+\t(dwarf2_find_location_expression, dwarf2_locexpr_baton_eval)\n+\t(locexpr_describe_location, loclist_describe_location): Use new\n+\tmember.\n+\t* dwarf2/read.c (read_call_site_scope)\n+\t(mark_common_block_symbol_computed, attr_to_dynamic_prop)\n+\t(dwarf2_const_value_attr, dwarf2_fetch_die_loc_sect_off)\n+\t(fill_in_loclist_baton, dwarf2_symbol_mark_computed,\n+\thandle_data_member_location): Set per_objfile member.\n+\t* dwarf2/loc.h (struct dwarf2_locexpr_baton) <per_objfile>: New\n+\tmember.\n+\t(struct dwarf2_loclist_baton) <per_objfile>: New member.\n+\n 2020-05-27  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_objfile) <allocate_per_cu,"
    },
    {
      "sha": "414f9bcf6b12616f101f2c382ebed3bb9096d247",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=a50264baf57716993e701096fa6e466fb63e0301",
      "patch": "@@ -317,7 +317,8 @@ const gdb_byte *\n dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t\t\t\t size_t *locexpr_length, CORE_ADDR pc)\n {\n-  struct objfile *objfile = baton->per_cu->objfile ();\n+  dwarf2_per_objfile *per_objfile = baton->per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   unsigned int addr_size = baton->per_cu->addr_size ();\n@@ -1552,6 +1553,9 @@ struct piece_closure\n   /* Reference count.  */\n   int refc = 0;\n \n+  /* The objfile from which this closure's expression came.  */\n+  dwarf2_per_objfile *per_objfile = nullptr;\n+\n   /* The CU from which this closure's expression came.  */\n   struct dwarf2_per_cu_data *per_cu = NULL;\n \n@@ -1574,6 +1578,8 @@ allocate_piece_closure (struct dwarf2_per_cu_data *per_cu,\n   struct piece_closure *c = new piece_closure;\n \n   c->refc = 1;\n+  /* We must capture this here due to sharing of DWARF state.  */\n+  c->per_objfile = per_cu->dwarf2_per_objfile;\n   c->per_cu = per_cu;\n   c->pieces = std::move (pieces);\n   if (frame == NULL)\n@@ -2454,7 +2460,7 @@ dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n       ctx.data_view = addr_stack->valaddr;\n     }\n \n-  objfile = dlbaton->per_cu->objfile ();\n+  objfile = dlbaton->per_objfile->objfile;\n \n   ctx.gdbarch = objfile->arch ();\n   ctx.addr_size = dlbaton->per_cu->addr_size ();\n@@ -4348,7 +4354,8 @@ locexpr_describe_location (struct symbol *symbol, CORE_ADDR addr,\n {\n   struct dwarf2_locexpr_baton *dlbaton\n     = (struct dwarf2_locexpr_baton *) SYMBOL_LOCATION_BATON (symbol);\n-  struct objfile *objfile = dlbaton->per_cu->objfile ();\n+  dwarf2_per_objfile *per_objfile = dlbaton->per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   unsigned int addr_size = dlbaton->per_cu->addr_size ();\n   int offset_size = dlbaton->per_cu->offset_size ();\n \n@@ -4485,7 +4492,8 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n   struct dwarf2_loclist_baton *dlbaton\n     = (struct dwarf2_loclist_baton *) SYMBOL_LOCATION_BATON (symbol);\n   const gdb_byte *loc_ptr, *buf_end;\n-  struct objfile *objfile = dlbaton->per_cu->objfile ();\n+  dwarf2_per_objfile *per_objfile = dlbaton->per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   unsigned int addr_size = dlbaton->per_cu->addr_size ();"
    },
    {
      "sha": "51f242ec431a105c2dbe2e12f6da71651f8c1102",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=a50264baf57716993e701096fa6e466fb63e0301",
      "patch": "@@ -23,7 +23,7 @@\n #include \"dwarf2/expr.h\"\n \n struct symbol_computed_ops;\n-struct objfile;\n+struct dwarf2_per_objfile;\n struct dwarf2_per_cu_data;\n struct dwarf2_loclist_baton;\n struct agent_expr;\n@@ -146,6 +146,9 @@ struct dwarf2_locexpr_baton\n      directly.  */\n   bool is_reference;\n \n+  /* The objfile that was used when creating this.  */\n+  dwarf2_per_objfile *per_objfile;\n+\n   /* The compilation unit containing the symbol whose location\n      we're computing.  */\n   struct dwarf2_per_cu_data *per_cu;\n@@ -163,6 +166,9 @@ struct dwarf2_loclist_baton\n   /* Length of the location list.  */\n   size_t size;\n \n+  /* The objfile that was used when creating this.  */\n+  dwarf2_per_objfile *per_objfile;\n+\n   /* The compilation unit containing the symbol whose location\n      we're computing.  */\n   struct dwarf2_per_cu_data *per_cu;"
    },
    {
      "sha": "8a74420a4d2ffa8a83f59f5d525ed66f8c6cfb24",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 7,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50264baf57716993e701096fa6e466fb63e0301/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=a50264baf57716993e701096fa6e466fb63e0301",
      "patch": "@@ -13235,7 +13235,8 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n static void\n read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR pc, baseaddr;\n   struct attribute *attr;\n@@ -13375,6 +13376,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n       dlbaton = XOBNEW (&objfile->objfile_obstack, struct dwarf2_locexpr_baton);\n       dlbaton->data = DW_BLOCK (attr)->data;\n       dlbaton->size = DW_BLOCK (attr)->size;\n+      dlbaton->per_objfile = per_objfile;\n       dlbaton->per_cu = cu->per_cu;\n \n       SET_FIELD_DWARF_BLOCK (call_site->target, dlbaton);\n@@ -14342,6 +14344,7 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n \t\t of the field, not the value.  This is why\n \t\t is_reference is set to false here.  */\n \t      dlbaton->is_reference = false;\n+\t      dlbaton->per_objfile = cu->per_cu->dwarf2_per_objfile;\n \t      dlbaton->per_cu = cu->per_cu;\n \n \t      SET_FIELD_DWARF_BLOCK (*field, dlbaton);\n@@ -16310,9 +16313,8 @@ mark_common_block_symbol_computed (struct symbol *sym,\n \t\t\t\t   struct attribute *member_loc,\n \t\t\t\t   struct dwarf2_cu *cu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct dwarf2_locexpr_baton *baton;\n   gdb_byte *ptr;\n   unsigned int cu_off;\n@@ -16325,6 +16327,7 @@ mark_common_block_symbol_computed (struct symbol *sym,\n \t      || member_loc->form_is_constant ());\n \n   baton = XOBNEW (&objfile->objfile_obstack, struct dwarf2_locexpr_baton);\n+  baton->per_objfile = per_objfile;\n   baton->per_cu = cu->per_cu;\n   gdb_assert (baton->per_cu);\n \n@@ -17448,8 +17451,9 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \t\t      struct type *default_type)\n {\n   struct dwarf2_property_baton *baton;\n-  struct obstack *obstack\n-    = &cu->per_cu->dwarf2_per_objfile->objfile->objfile_obstack;\n+  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n+  struct obstack *obstack = &objfile->objfile_obstack;\n \n   gdb_assert (default_type != NULL);\n \n@@ -17461,6 +17465,7 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n       baton = XOBNEW (obstack, struct dwarf2_property_baton);\n       baton->property_type = default_type;\n       baton->locexpr.per_cu = cu->per_cu;\n+      baton->locexpr.per_objfile = per_objfile;\n       baton->locexpr.size = DW_BLOCK (attr)->size;\n       baton->locexpr.data = DW_BLOCK (attr)->data;\n       switch (attr->name)\n@@ -17507,6 +17512,7 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \t\tbaton = XOBNEW (obstack, struct dwarf2_property_baton);\n \t\tbaton->property_type = die_type (target_die, target_cu);\n \t\tbaton->locexpr.per_cu = cu->per_cu;\n+\t\tbaton->locexpr.per_objfile = per_objfile;\n \t\tbaton->locexpr.size = DW_BLOCK (target_attr)->size;\n \t\tbaton->locexpr.data = DW_BLOCK (target_attr)->data;\n \t\tbaton->locexpr.is_reference = true;\n@@ -21064,7 +21070,8 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n \t\t\t LONGEST *value, const gdb_byte **bytes,\n \t\t\t struct dwarf2_locexpr_baton **baton)\n {\n-  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n+  dwarf2_per_objfile *per_objfile = cu->per_cu->dwarf2_per_objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   struct comp_unit_head *cu_header = &cu->header;\n   struct dwarf_block *blk;\n   enum bfd_endian byte_order = (bfd_big_endian (objfile->obfd) ?\n@@ -21090,6 +21097,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n \t   piggyback on the existing location code rather than writing\n \t   a new implementation of symbol_computed_ops.  */\n \t*baton = XOBNEW (obstack, struct dwarf2_locexpr_baton);\n+\t(*baton)->per_objfile = per_objfile;\n \t(*baton)->per_cu = cu->per_cu;\n \tgdb_assert ((*baton)->per_cu);\n \n@@ -22327,6 +22335,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n       retval.data = DW_BLOCK (attr)->data;\n       retval.size = DW_BLOCK (attr)->size;\n     }\n+  retval.per_objfile = dwarf2_per_objfile;\n   retval.per_cu = cu->per_cu;\n \n   age_cached_comp_units (dwarf2_per_objfile);\n@@ -23176,6 +23185,7 @@ fill_in_loclist_baton (struct dwarf2_cu *cu,\n \n   section->read (dwarf2_per_objfile->objfile);\n \n+  baton->per_objfile = dwarf2_per_objfile;\n   baton->per_cu = cu->per_cu;\n   gdb_assert (baton->per_cu);\n   /* We don't know how long the location list is, but make sure we\n@@ -23224,6 +23234,7 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n       struct dwarf2_locexpr_baton *baton;\n \n       baton = XOBNEW (&objfile->objfile_obstack, struct dwarf2_locexpr_baton);\n+      baton->per_objfile = dwarf2_per_objfile;\n       baton->per_cu = cu->per_cu;\n       gdb_assert (baton->per_cu);\n "
    }
  ]
}