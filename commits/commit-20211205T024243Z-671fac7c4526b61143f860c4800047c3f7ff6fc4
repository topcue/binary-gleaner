{
  "sha": "671fac7c4526b61143f860c4800047c3f7ff6fc4",
  "node_id": "C_kwDOANOeidoAKDY3MWZhYzdjNDUyNmI2MTE0M2Y4NjBjNDgwMDA0N2MzZjdmZjZmYzQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-02T19:04:18Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-05T02:42:43Z"
    },
    "message": "gdbsupport: fix memory leak in create_file_handler when re-using file handler\n\nASan made me notice a memory leak, where the memory tied to the file\nhandle name string wasn't freed.  When register a file handler with an\nfd that is already registered, we re-use the file_handler object, so we\nended up creating a new std::string object and overwriting the\nfile_handler::name pointer, without free-ing the old std::string.\n\nFix this by allocating file_handler with new, deleting it with\ndelete, and making file_handler::name not a pointer.\n\nChange-Id: Ie304cc78ab5ae5dfad9a1366e9890c09de651f43",
    "tree": {
      "sha": "026b4a16156c11ecfe011a8324317290c029e832",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/026b4a16156c11ecfe011a8324317290c029e832"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/671fac7c4526b61143f860c4800047c3f7ff6fc4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/671fac7c4526b61143f860c4800047c3f7ff6fc4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/671fac7c4526b61143f860c4800047c3f7ff6fc4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/671fac7c4526b61143f860c4800047c3f7ff6fc4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e8f6cf14c97ef4221a78094c2fad4cdd06b7d97e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8f6cf14c97ef4221a78094c2fad4cdd06b7d97e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e8f6cf14c97ef4221a78094c2fad4cdd06b7d97e"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 6,
    "deletions": 7
  },
  "files": [
    {
      "sha": "51cfaec4c7eabe64b0202e77dfe7defb7f950e62",
      "filename": "gdbsupport/event-loop.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/671fac7c4526b61143f860c4800047c3f7ff6fc4/gdbsupport/event-loop.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/671fac7c4526b61143f860c4800047c3f7ff6fc4/gdbsupport/event-loop.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.cc?ref=671fac7c4526b61143f860c4800047c3f7ff6fc4",
      "patch": "@@ -65,8 +65,8 @@ struct file_handler\n   /* Argument to pass to proc.  */\n   gdb_client_data client_data;\n \n-  /* User-friendly name of this handler.  Heap-allocated, owned by this.*/\n-  std::string *name;\n+  /* User-friendly name of this handler.  */\n+  std::string name;\n \n   /* If set, this file descriptor is used for a user interface.  */\n   bool is_ui;\n@@ -315,7 +315,7 @@ create_file_handler (int fd, int mask, handler_func * proc,\n      change the data associated with it.  */\n   if (file_ptr == NULL)\n     {\n-      file_ptr = XNEW (file_handler);\n+      file_ptr = new file_handler;\n       file_ptr->fd = fd;\n       file_ptr->ready_mask = 0;\n       file_ptr->next_file = gdb_notifier.first_file_handler;\n@@ -366,7 +366,7 @@ create_file_handler (int fd, int mask, handler_func * proc,\n   file_ptr->proc = proc;\n   file_ptr->client_data = client_data;\n   file_ptr->mask = mask;\n-  file_ptr->name = new std::string (std::move (name));\n+  file_ptr->name = std::move (name);\n   file_ptr->is_ui = is_ui;\n }\n \n@@ -500,8 +500,7 @@ delete_file_handler (int fd)\n       prev_ptr->next_file = file_ptr->next_file;\n     }\n \n-  delete file_ptr->name;\n-  xfree (file_ptr);\n+  delete file_ptr;\n }\n \n /* Handle the given event by calling the procedure associated to the\n@@ -571,7 +570,7 @@ handle_file_event (file_handler *file_ptr, int ready_mask)\n \t    {\n \t      event_loop_ui_debug_printf (file_ptr->is_ui,\n \t\t\t\t\t  \"invoking fd file handler `%s`\",\n-\t\t\t\t\t  file_ptr->name->c_str ());\n+\t\t\t\t\t  file_ptr->name.c_str ());\n \t      file_ptr->proc (file_ptr->error, file_ptr->client_data);\n \t    }\n \t}"
    }
  ]
}