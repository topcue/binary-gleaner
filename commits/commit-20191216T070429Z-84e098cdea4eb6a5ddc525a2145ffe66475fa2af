{
  "sha": "84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODRlMDk4Y2RlYTRlYjZhNWRkYzUyNWEyMTQ1ZmZlNjY0NzVmYTJhZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-15T23:30:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-16T07:04:29Z"
    },
    "message": "asan: score: global-buffer-overflow\n\nI'm flying blind here, not having an s+core s3 insn set reference,\nbut this seems reasonably obvious from what is done by the assembler.\ns3_do16_rpop does some mixing of imm and reg values to place in the\nrpop reg field, but I'm not going to try to fix the disassembly\nthere.\n\n\t* score-dis.c (print_insn_score16): Move rpush/rpop imm field\n\tvalue adjustment so that it doesn't affect reg field too.",
    "tree": {
      "sha": "569550d423ddb6dd4ebaaeadf3e2ae77478b726f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/569550d423ddb6dd4ebaaeadf3e2ae77478b726f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84e098cdea4eb6a5ddc525a2145ffe66475fa2af/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 12,
    "deletions": 9
  },
  "files": [
    {
      "sha": "ce56ec023129cf3ba594d3b532283b79328edd16",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84e098cdea4eb6a5ddc525a2145ffe66475fa2af/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84e098cdea4eb6a5ddc525a2145ffe66475fa2af/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* score-dis.c (print_insn_score16): Move rpush/rpop imm field\n+\tvalue adjustment so that it doesn't affect reg field too.\n+\n 2019-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* crx-dis.c (EXTRACT, SBM): Avoid signed overflow."
    },
    {
      "sha": "74a1f1d93203d995ecee35c14c74cac33c91d201",
      "filename": "opcodes/score-dis.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84e098cdea4eb6a5ddc525a2145ffe66475fa2af/opcodes/score-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84e098cdea4eb6a5ddc525a2145ffe66475fa2af/opcodes/score-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/score-dis.c?ref=84e098cdea4eb6a5ddc525a2145ffe66475fa2af",
      "patch": "@@ -954,15 +954,6 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n                               reg = given >> bitstart;\n                               reg &= (2 << (bitend - bitstart)) - 1;\n \n-                              /* Check rpush rd, 0 and rpop! rd, 0.\n-                                 If reg = 0, then set to 32.  */\n-                              if (((given & 0x00007c00) == 0x00006c00\n-                                    || (given & 0x00007c00) == 0x00006800)\n-                                  && reg == 0)\n-                                {\n-                                  reg = 32;\n-                                }\n-\n                               switch (*c)\n                                 {\n                                 case 'R':\n@@ -972,6 +963,13 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   func (stream, \"%s\", score_regnames[reg]);\n                                   break;\n                                 case 'd':\n+\t\t\t\t  /* Check rpush rd, 0 and rpop! rd, 0.\n+\t\t\t\t     If 0, then print 32.  */\n+\t\t\t\t  if (((given & 0x00007c00) == 0x00006c00\n+\t\t\t\t       || (given & 0x00007c00) == 0x00006800)\n+\t\t\t\t      && reg == 0)\n+\t\t\t\t    reg = 32;\n+\n                                   if (*(c + 1) == '\\0')\n                                     func (stream, \"%ld\", reg);\n                                   else"
    }
  ]
}