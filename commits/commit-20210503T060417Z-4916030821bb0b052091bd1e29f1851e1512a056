{
  "sha": "4916030821bb0b052091bd1e29f1851e1512a056",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDkxNjAzMDgyMWJiMGIwNTIwOTFiZDFlMjlmMTg1MWUxNTEyYTA1Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-03T02:58:46Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-03T06:04:17Z"
    },
    "message": "PPC: undefweak dynamic relocs\n\nThis makes the default for ppc to keep dynamic relocs on undefweak\nsymbols when the code won't cause DT_TEXTREL (for instance when -fPIE\nor -fPIC).  If ld is given -z dynamic-undefined-weak then dynamic\nrelocations will be created for non-PIC at the expense of possibly\ncausing DT_TEXTREL to be set on ppc32.  Note that DT_TEXTREL and GNU\nindirect functions are incompatible.\n\n\t* elf32-ppc.c (allocate_dynrelocs): Keep dyn_relocs for undefweak\n\tsymbols when -z dynamic-undefined-weak or when there are no\n\tdynamic relocs in read-only sections and -z nodynamic-undefined-weak\n\tis not given.\n\t* elf64-ppc.c (allocate_dynrelocs): Likewise.",
    "tree": {
      "sha": "d31767be8a1f6dec3edb1871a10f9770d04fe8e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d31767be8a1f6dec3edb1871a10f9770d04fe8e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4916030821bb0b052091bd1e29f1851e1512a056",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4916030821bb0b052091bd1e29f1851e1512a056",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4916030821bb0b052091bd1e29f1851e1512a056",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4916030821bb0b052091bd1e29f1851e1512a056/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b293661219c36e72acb80502a86b51160bb88cfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b293661219c36e72acb80502a86b51160bb88cfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b293661219c36e72acb80502a86b51160bb88cfd"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 18,
    "deletions": 2
  },
  "files": [
    {
      "sha": "cdcf5d7616748e9c5c0a3c8855f5d0d2b0186a77",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4916030821bb0b052091bd1e29f1851e1512a056/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4916030821bb0b052091bd1e29f1851e1512a056/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4916030821bb0b052091bd1e29f1851e1512a056",
      "patch": "@@ -1,3 +1,11 @@\n+2021-05-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-ppc.c (allocate_dynrelocs): Keep dyn_relocs for undefweak\n+\tsymbols when -z dynamic-undefined-weak or when there are no\n+\tdynamic relocs in read-only sections and -z nodynamic-undefined-weak\n+\tis not given.\n+\t* elf64-ppc.c (allocate_dynrelocs): Likewise.\n+\n 2021-05-03  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-ppc.c (allocate_dynrelocs): Call ensure_undef_dynamic for"
    },
    {
      "sha": "34a6b3fd837cc82dd27fe5da3ce76a8852f6aad3",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4916030821bb0b052091bd1e29f1851e1512a056/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4916030821bb0b052091bd1e29f1851e1512a056/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=4916030821bb0b052091bd1e29f1851e1512a056",
      "patch": "@@ -5245,7 +5245,11 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n       /* For the non-pic case, discard space for relocs against\n \t symbols which turn out to need copy relocs or are not\n \t dynamic.  */\n-      if (h->dynamic_adjusted\n+      if ((h->dynamic_adjusted\n+\t   || (h->ref_regular\n+\t       && h->root.type == bfd_link_hash_undefweak\n+\t       && (info->dynamic_undefined_weak > 0\n+\t\t   || !_bfd_elf_readonly_dynrelocs (h))))\n \t  && !h->def_regular\n \t  && !ELF_COMMON_DEF_P (h)\n \t  && !(h->protected_def"
    },
    {
      "sha": "a4a05302a6ad17d1a8f918dae34203903808c149",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4916030821bb0b052091bd1e29f1851e1512a056/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4916030821bb0b052091bd1e29f1851e1512a056/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=4916030821bb0b052091bd1e29f1851e1512a056",
      "patch": "@@ -9808,7 +9808,11 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \t relocs against symbols which are not dynamic.  */\n       else if (h->type != STT_GNU_IFUNC)\n \t{\n-\t  if (h->dynamic_adjusted\n+\t  if ((h->dynamic_adjusted\n+\t       || (h->ref_regular\n+\t\t   && h->root.type == bfd_link_hash_undefweak\n+\t\t   && (info->dynamic_undefined_weak > 0\n+\t\t       || !_bfd_elf_readonly_dynrelocs (h))))\n \t      && !h->def_regular\n \t      && !ELF_COMMON_DEF_P (h))\n \t    {"
    }
  ]
}