{
  "sha": "fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmNhOGUyM2MzMWU2ZWMzN2JkY2I1Y2YxZDk4MWEzOWQxZTZmYjZmNg==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2019-08-07T09:40:55Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2019-08-07T11:57:30Z"
    },
    "message": "ld: use a specific linker script in BPF targets\n\nThis patch makes the elf64bpf emulation to use it's own linker script,\nbased on elf.sc.  At the moment, the only change is that the BPF\nexecutable doesn't define an entry symbol (BPF programs feature\nseveral entry points scattered in several sections.)\n\nThis is a step towards the goal of generating proper ELF executables\nthat would be loaded by the kernel's libbpf.  We are not there yet:\nBPF \"programs\" should still be linked with -r.\n\nThis change removes a warning while linking executables, decreases the\nnumber of unsupported tests in the target from 47 to 29, and increases\nthe number of expected passes from 104 to 145.\n\nRegtested in x86_64 for all targets.\nNo regressions.\n\nld/ChangeLog:\n\n2019-08-07  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* scripttempl/elf64bpf.sc: Adapted from elf.sc.\n\t* emulparams/elf64bpf.sh (SCRIPT_NAME): Use elf64bpf.\n\t(EMBEDDED): Define.\n\t* testsuite/ld-bpf/call-1.d: Do not expect a warning regarding an\n\tundefined entry symbol.\n\t* testsuite/ld-bpf/jump-1.d: Likewise.\n\t* testsuite/ld-undefined/undefined.exp: Do not pass '-e entry' to\n\tld in BPF targets, and do not expect line number information.\n\t* testsuite/ld-srec/srec.exp (run_srec_test): xfail s-record tests\n\tin BPF targets.",
    "tree": {
      "sha": "479748460853db0e6bd2bc62f6c80049c6b77c2e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/479748460853db0e6bd2bc62f6c80049c6b77c2e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc8de8e227e5146336d654f2fb4f98010d7cf12d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc8de8e227e5146336d654f2fb4f98010d7cf12d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc8de8e227e5146336d654f2fb4f98010d7cf12d"
    }
  ],
  "stats": {
    "total": 738,
    "additions": 732,
    "deletions": 6
  },
  "files": [
    {
      "sha": "424d92c072a5ef4a7608edf3a14fcc3d01ed7c92",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -1,3 +1,16 @@\n+2019-08-07  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* scripttempl/elf64bpf.sc: Adapted from elf.sc.\n+\t* emulparams/elf64bpf.sh (SCRIPT_NAME): Use elf64bpf.\n+\t(EMBEDDED): Define.\n+\t* testsuite/ld-bpf/call-1.d: Do not expect a warning regarding an\n+\tundefined entry symbol.\n+\t* testsuite/ld-bpf/jump-1.d: Likewise.\n+\t* testsuite/ld-undefined/undefined.exp: Do not pass '-e entry' to\n+\tld in BPF targets, and do not expect line number information.\n+\t* testsuite/ld-srec/srec.exp (run_srec_test): xfail s-record tests\n+\tin BPF targets.\n+\n 2019-08-06  Alan Modra  <amodra@gmail.com>\n \n \tPR 24873"
    },
    {
      "sha": "94a7580487550ad52dcbcb9119c4dacc56638323",
      "filename": "ld/emulparams/elf64bpf.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/emulparams/elf64bpf.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/emulparams/elf64bpf.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64bpf.sh?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -1,5 +1,5 @@\n TEMPLATE_NAME=elf32\n-SCRIPT_NAME=elf\n+SCRIPT_NAME=elf64bpf\n BIG_OUTPUT_FORMAT=\"elf64-bpfbe\"\n LITTLE_OUTPUT_FORMAT=\"elf64-bpfle\"\n OUTPUT_FORMAT=\"$LITTLE_OUTPUT_FORMAT\"\n@@ -8,3 +8,4 @@ MACHINE=\n TARGET_PAGE_SIZE=0x1000\n # XXX this is arbitrary, for now\n TEXT_START_ADDR=0x00400000\n+EMBEDDED=yes"
    },
    {
      "sha": "0996f562ad1911933ab5dcaf2a17a25876874971",
      "filename": "ld/scripttempl/elf64bpf.sc",
      "status": "added",
      "additions": 702,
      "deletions": 0,
      "changes": 702,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/scripttempl/elf64bpf.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/scripttempl/elf64bpf.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elf64bpf.sc?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -0,0 +1,702 @@\n+# Copyright (C) 2014-2019 Free Software Foundation, Inc.\n+#\n+# Copying and distribution of this file, with or without modification,\n+# are permitted in any medium without royalty provided the copyright\n+# notice and this notice are preserved.\n+#\n+# Unusual variables checked by this code:\n+#\tNOP - four byte opcode for no-op (defaults to none)\n+#\tNO_SMALL_DATA - no .sbss/.sbss2/.sdata/.sdata2 sections if not\n+#\t\tempty.\n+#\tSMALL_DATA_CTOR - .ctors contains small data.\n+#\tSMALL_DATA_DTOR - .dtors contains small data.\n+#\tDATA_ADDR - if end-of-text-plus-one-page isn't right for data start\n+#\tINITIAL_READONLY_SECTIONS - at start of text segment\n+#\tOTHER_READONLY_SECTIONS - other than .text .init .rodata ...\n+#\t\t(e.g., .PARISC.milli)\n+#\tOTHER_TEXT_SECTIONS - these get put in .text when relocating\n+#\tINITIAL_READWRITE_SECTIONS - at start of data segment (after relro)\n+#\tOTHER_READWRITE_SECTIONS - other than .data .bss .ctors .sdata ...\n+#\t\t(e.g., .PARISC.global)\n+#\tOTHER_RELRO_SECTIONS - other than .data.rel.ro ...\n+#\t\t(e.g. PPC32 .fixup, .got[12])\n+#\tOTHER_RELRO_SECTIONS_2 - as above, but after .dynamic in text segment\n+#\tOTHER_BSS_SECTIONS - other than .bss .sbss ...\n+#\tATTRS_SECTIONS - at the end\n+#\tOTHER_SECTIONS - at the end\n+#\tEXECUTABLE_SYMBOLS - symbols that must be defined for an\n+#\t\texecutable (e.g., _DYNAMIC_LINK)\n+#       TEXT_START_ADDR - the first byte of the text segment, after any\n+#               headers.\n+#       TEXT_BASE_ADDRESS - the first byte of the text segment.\n+#\tTEXT_START_SYMBOLS - symbols that appear at the start of the\n+#\t\t.text section.\n+#\tDATA_START_SYMBOLS - symbols that appear at the start of the\n+#\t\t.data section.\n+#\tDATA_END_SYMBOLS - symbols that appear at the end of the\n+#\t\twriteable data sections.\n+#\tOTHER_GOT_SYMBOLS - symbols defined just before .got.\n+#\tOTHER_GOT_SECTIONS - sections just after .got.\n+#\tOTHER_PLT_SECTIONS - sections just after .plt.\n+#\tOTHER_SDATA_SECTIONS - sections just after .sdata.\n+#\tOTHER_BSS_SYMBOLS - symbols that appear at the start of the\n+#\t\t.bss section besides __bss_start.\n+#\tPLT_NEXT_DATA - .plt next to data segment when .plt is in text segment.\n+#\tDATA_PLT - .plt should be in data segment, not text segment.\n+#\tPLT_BEFORE_GOT - .plt just before .got when .plt is in data segement.\n+#\tBSS_PLT - .plt should be in bss segment\n+#\tNO_REL_RELOCS - Don't include .rel.* sections in script\n+#\tNO_RELA_RELOCS - Don't include .rela.* sections in script\n+#\tNON_ALLOC_DYN - Place dynamic sections after data segment.\n+#\tTEXT_DYNAMIC - .dynamic in text segment, not data segment.\n+#\tEMBEDDED - whether this is for an embedded system.\n+#\tSHLIB_TEXT_START_ADDR - if set, add to SIZEOF_HEADERS to set\n+#\t\tstart address of shared library.\n+#\tINPUT_FILES - INPUT command of files to always include\n+#\tWRITABLE_RODATA - if set, the .rodata section should be writable\n+#\tINIT_START, INIT_END -  statements just before and just after\n+#\tcombination of .init sections.\n+#\tFINI_START, FINI_END - statements just before and just after\n+#\tcombination of .fini sections.\n+#\tSTACK_ADDR - start of a .stack section.\n+#\tOTHER_SYMBOLS - symbols to place right at the end of the script.\n+#\tETEXT_NAME - name of a symbol for the end of the text section,\n+#\t\tnormally etext.\n+#\tSEPARATE_CODE - if set, .text and similar sections containing\n+#\t\tactual machine instructions must be in wholly disjoint\n+#\t\tpages from any other data, including headers\n+#\tSEPARATE_GOTPLT - if set, .got.plt should be separate output section,\n+#\t\tso that .got can be in the RELRO area.  It should be set to\n+#\t\tthe number of bytes in the beginning of .got.plt which can be\n+#\t\tin the RELRO area as well.\n+#\tUSER_LABEL_PREFIX - prefix to add to user-visible symbols.\n+#\tRODATA_NAME, SDATA_NAME, SBSS_NAME, BSS_NAME - base parts of names\n+#\t\tfor standard sections, without initial \".\" or suffixes.\n+#\n+# When adding sections, do note that the names of some sections are used\n+# when specifying the start address of the next.\n+#\n+\n+#  Many sections come in three flavours.  There is the 'real' section,\n+#  like \".data\".  Then there are the per-procedure or per-variable\n+#  sections, generated by -ffunction-sections and -fdata-sections in GCC,\n+#  and useful for --gc-sections, which for a variable \"foo\" might be\n+#  \".data.foo\".  Then there are the linkonce sections, for which the linker\n+#  eliminates duplicates, which are named like \".gnu.linkonce.d.foo\".\n+#  The exact correspondences are:\n+#\n+#  Section\tLinkonce section\n+#  .text\t.gnu.linkonce.t.foo\n+#  .rodata\t.gnu.linkonce.r.foo\n+#  .data\t.gnu.linkonce.d.foo\n+#  .bss\t\t.gnu.linkonce.b.foo\n+#  .sdata\t.gnu.linkonce.s.foo\n+#  .sbss\t.gnu.linkonce.sb.foo\n+#  .sdata2\t.gnu.linkonce.s2.foo\n+#  .sbss2\t.gnu.linkonce.sb2.foo\n+#  .debug_info\t.gnu.linkonce.wi.foo\n+#  .tdata\t.gnu.linkonce.td.foo\n+#  .tbss\t.gnu.linkonce.tb.foo\n+#  .lrodata\t.gnu.linkonce.lr.foo\n+#  .ldata\t.gnu.linkonce.l.foo\n+#  .lbss\t.gnu.linkonce.lb.foo\n+#\n+#  Each of these can also have corresponding .rel.* and .rela.* sections.\n+\n+if test -n \"$NOP\"; then\n+  FILL=\"=$NOP\"\n+else\n+  FILL=\n+fi\n+\n+test -n \"$CREATE_SHLIB$CREATE_PIE\" && CREATE_PIC=\" \"\n+test -z \"$RODATA_NAME\" && RODATA_NAME=rodata\n+test -z \"$SDATA_NAME\" && SDATA_NAME=sdata\n+test -z \"$SBSS_NAME\" && SBSS_NAME=sbss\n+test -z \"$BSS_NAME\" && BSS_NAME=bss\n+test -z \"${BIG_OUTPUT_FORMAT}\" && BIG_OUTPUT_FORMAT=${OUTPUT_FORMAT}\n+test -z \"${LITTLE_OUTPUT_FORMAT}\" && LITTLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}\n+if [ -z \"$MACHINE\" ]; then OUTPUT_ARCH=${ARCH}; else OUTPUT_ARCH=${ARCH}:${MACHINE}; fi\n+test -z \"${ELFSIZE}\" && ELFSIZE=32\n+test -z \"${ALIGNMENT}\" && ALIGNMENT=\"${ELFSIZE} / 8\"\n+test \"$LD_FLAG\" = \"N\" && DATA_ADDR=.\n+test -z \"${ETEXT_NAME}\" && ETEXT_NAME=${USER_LABEL_PREFIX}etext\n+test -n \"$RELRO_NOW\" && unset SEPARATE_GOTPLT\n+test -z \"$ATTRS_SECTIONS\" && ATTRS_SECTIONS=\".gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }\"\n+if test -z \"$DATA_SEGMENT_ALIGN\"; then\n+  test -n \"$CREATE_SHLIB$CREATE_PIE\" && test -n \"$SHLIB_DATA_ADDR\" && COMMONPAGESIZE=\"\"\n+  test -z \"$CREATE_SHLIB$CREATE_PIE\" && test -n \"$DATA_ADDR\" && COMMONPAGESIZE=\"\"\n+  DATA_SEGMENT_ALIGN=\"ALIGN(${SEGMENT_SIZE}) + (. & (${MAXPAGESIZE} - 1))\"\n+  DATA_SEGMENT_RELRO_END=\"\"\n+  DATA_SEGMENT_END=\"\"\n+  if test -n \"${COMMONPAGESIZE}\"; then\n+    if test \"${SEGMENT_SIZE}\" != \"${MAXPAGESIZE}\"; then\n+      DATA_SEGMENT_ALIGN=\"ALIGN (${SEGMENT_SIZE}) - ((${MAXPAGESIZE} - .) & (${MAXPAGESIZE} - 1)); . = DATA_SEGMENT_ALIGN (${MAXPAGESIZE}, ${COMMONPAGESIZE})\"\n+    else\n+      DATA_SEGMENT_ALIGN=\"DATA_SEGMENT_ALIGN (${MAXPAGESIZE}, ${COMMONPAGESIZE})\"\n+    fi\n+    DATA_SEGMENT_END=\". = DATA_SEGMENT_END (.);\"\n+    DATA_SEGMENT_RELRO_END=\". = DATA_SEGMENT_RELRO_END (${SEPARATE_GOTPLT-0}, .);\"\n+  fi\n+fi\n+if test -z \"${INITIAL_READONLY_SECTIONS}${CREATE_SHLIB}\"; then\n+  INITIAL_READONLY_SECTIONS=\".interp       ${RELOCATING-0} : { *(.interp) }\"\n+fi\n+if test -z \"$PLT\"; then\n+  IPLT=\".iplt         ${RELOCATING-0} : { *(.iplt) }\"\n+  PLT=\".plt          ${RELOCATING-0} : { *(.plt)${RELOCATING+${IREL_IN_PLT+ *(.iplt)}} }\n+  ${IREL_IN_PLT-$IPLT}\"\n+fi\n+test -n \"${DATA_PLT-${BSS_PLT-text}}\" && TEXT_PLT=\n+if test -z \"$GOT\"; then\n+  if test -z \"$SEPARATE_GOTPLT\"; then\n+    GOT=\".got          ${RELOCATING-0} : {${RELOCATING+ *(.got.plt) *(.igot.plt)} *(.got)${RELOCATING+ *(.igot)} }\"\n+  else\n+    GOT=\".got          ${RELOCATING-0} : { *(.got)${RELOCATING+ *(.igot)} }\"\n+    GOTPLT=\".got.plt      ${RELOCATING-0} : { *(.got.plt)${RELOCATING+ *(.igot.plt)} }\"\n+  fi\n+fi\n+REL_IFUNC=\".rel.ifunc    ${RELOCATING-0} : { *(.rel.ifunc) }\"\n+RELA_IFUNC=\".rela.ifunc   ${RELOCATING-0} : { *(.rela.ifunc) }\"\n+REL_IPLT=\".rel.iplt     ${RELOCATING-0} :\n+    {\n+      ${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rel_iplt_start = .);}}\n+      *(.rel.iplt)\n+      ${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rel_iplt_end = .);}}\n+    }\"\n+RELA_IPLT=\".rela.iplt    ${RELOCATING-0} :\n+    {\n+      ${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rela_iplt_start = .);}}\n+      *(.rela.iplt)\n+      ${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rela_iplt_end = .);}}\n+    }\"\n+DYNAMIC=\".dynamic      ${RELOCATING-0} : { *(.dynamic) }\"\n+RODATA=\".${RODATA_NAME}       ${RELOCATING-0} : { *(.${RODATA_NAME}${RELOCATING+ .${RODATA_NAME}.* .gnu.linkonce.r.*}) }\"\n+DATARELRO=\".data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }\"\n+DISCARDED=\"/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }\"\n+if test -z \"${NO_SMALL_DATA}\"; then\n+  SBSS=\".${SBSS_NAME}         ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${SBSS_START_SYMBOLS}}\n+    ${CREATE_SHLIB+*(.${SBSS_NAME}2 .${SBSS_NAME}2.* .gnu.linkonce.sb2.*)}\n+    ${RELOCATING+*(.dyn${SBSS_NAME})}\n+    *(.${SBSS_NAME}${RELOCATING+ .${SBSS_NAME}.* .gnu.linkonce.sb.*})\n+    ${RELOCATING+*(.scommon)}\n+    ${RELOCATING+${SBSS_END_SYMBOLS}}\n+  }\"\n+  SBSS2=\".${SBSS_NAME}2        ${RELOCATING-0} : { *(.${SBSS_NAME}2${RELOCATING+ .${SBSS_NAME}2.* .gnu.linkonce.sb2.*}) }\"\n+  SDATA=\"/* We want the small data sections together, so single-instruction offsets\n+     can access them all, and initialized data all before uninitialized, so\n+     we can shorten the on-disk segment size.  */\n+  .${SDATA_NAME}        ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${SDATA_START_SYMBOLS}}\n+    ${CREATE_SHLIB+*(.${SDATA_NAME}2 .${SDATA_NAME}2.* .gnu.linkonce.s2.*)}\n+    *(.${SDATA_NAME}${RELOCATING+ .${SDATA_NAME}.* .gnu.linkonce.s.*})\n+  }\"\n+  SDATA2=\".${SDATA_NAME}2       ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${SDATA2_START_SYMBOLS}}\n+    *(.${SDATA_NAME}2${RELOCATING+ .${SDATA_NAME}2.* .gnu.linkonce.s2.*})\n+  }\"\n+  REL_SDATA=\".rel.${SDATA_NAME}    ${RELOCATING-0} : { *(.rel.${SDATA_NAME}${RELOCATING+ .rel.${SDATA_NAME}.* .rel.gnu.linkonce.s.*}) }\n+  .rela.${SDATA_NAME}   ${RELOCATING-0} : { *(.rela.${SDATA_NAME}${RELOCATING+ .rela.${SDATA_NAME}.* .rela.gnu.linkonce.s.*}) }\"\n+  REL_SBSS=\".rel.${SBSS_NAME}     ${RELOCATING-0} : { *(.rel.${SBSS_NAME}${RELOCATING+ .rel.${SBSS_NAME}.* .rel.gnu.linkonce.sb.*}) }\n+  .rela.${SBSS_NAME}    ${RELOCATING-0} : { *(.rela.${SBSS_NAME}${RELOCATING+ .rela.${SBSS_NAME}.* .rela.gnu.linkonce.sb.*}) }\"\n+  REL_SDATA2=\".rel.${SDATA_NAME}2   ${RELOCATING-0} : { *(.rel.${SDATA_NAME}2${RELOCATING+ .rel.${SDATA_NAME}2.* .rel.gnu.linkonce.s2.*}) }\n+  .rela.${SDATA_NAME}2  ${RELOCATING-0} : { *(.rela.${SDATA_NAME}2${RELOCATING+ .rela.${SDATA_NAME}2.* .rela.gnu.linkonce.s2.*}) }\"\n+  REL_SBSS2=\".rel.${SBSS_NAME}2    ${RELOCATING-0} : { *(.rel.${SBSS_NAME}2${RELOCATING+ .rel.${SBSS_NAME}2.* .rel.gnu.linkonce.sb2.*}) }\n+  .rela.${SBSS_NAME}2   ${RELOCATING-0} : { *(.rela.${SBSS_NAME}2${RELOCATING+ .rela.${SBSS_NAME}2.* .rela.gnu.linkonce.sb2.*}) }\"\n+else\n+  NO_SMALL_DATA=\" \"\n+fi\n+if test -z \"${SDATA_GOT}${DATA_GOT}\"; then\n+  if test -n \"${NO_SMALL_DATA}\"; then\n+    DATA_GOT=\" \"\n+  fi\n+fi\n+if test -z \"${SDATA_GOT}${DATA_GOT}\"; then\n+  if test -z \"${NO_SMALL_DATA}\"; then\n+    SDATA_GOT=\" \"\n+  fi\n+fi\n+test -n \"$SEPARATE_GOTPLT\" && SEPARATE_GOTPLT=\" \"\n+test \"${LARGE_SECTIONS}\" = \"yes\" && REL_LARGE=\"\n+  .rel.ldata    ${RELOCATING-0} : { *(.rel.ldata${RELOCATING+ .rel.ldata.* .rel.gnu.linkonce.l.*}) }\n+  .rela.ldata   ${RELOCATING-0} : { *(.rela.ldata${RELOCATING+ .rela.ldata.* .rela.gnu.linkonce.l.*}) }\n+  .rel.lbss     ${RELOCATING-0} : { *(.rel.lbss${RELOCATING+ .rel.lbss.* .rel.gnu.linkonce.lb.*}) }\n+  .rela.lbss    ${RELOCATING-0} : { *(.rela.lbss${RELOCATING+ .rela.lbss.* .rela.gnu.linkonce.lb.*}) }\n+  .rel.lrodata  ${RELOCATING-0} : { *(.rel.lrodata${RELOCATING+ .rel.lrodata.* .rel.gnu.linkonce.lr.*}) }\n+  .rela.lrodata ${RELOCATING-0} : { *(.rela.lrodata${RELOCATING+ .rela.lrodata.* .rela.gnu.linkonce.lr.*}) }\"\n+test \"${LARGE_SECTIONS}\" = \"yes\" && LARGE_BSS=\"\n+  .lbss ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+*(.dynlbss)}\n+    *(.lbss${RELOCATING+ .lbss.* .gnu.linkonce.lb.*})\n+    ${RELOCATING+*(LARGE_COMMON)}\n+  }\"\n+test \"${LARGE_SECTIONS}\" = \"yes\" && LARGE_SECTIONS=\"\n+  .lrodata ${RELOCATING-0} ${RELOCATING+ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1))} :\n+  {\n+    *(.lrodata${RELOCATING+ .lrodata.* .gnu.linkonce.lr.*})\n+  }\n+  .ldata ${RELOCATING-0} ${RELOCATING+ALIGN(${MAXPAGESIZE}) + (. & (${MAXPAGESIZE} - 1))} :\n+  {\n+    *(.ldata${RELOCATING+ .ldata.* .gnu.linkonce.l.*})\n+    ${RELOCATING+. = ALIGN(. != 0 ? ${ALIGNMENT} : 1);}\n+  }\"\n+if test \"${ENABLE_INITFINI_ARRAY}\" = \"yes\"; then\n+  SORT_INIT_ARRAY=\"KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))\"\n+  SORT_FINI_ARRAY=\"KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))\"\n+  CTORS_IN_INIT_ARRAY=\"EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .ctors\"\n+  DTORS_IN_FINI_ARRAY=\"EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .dtors\"\n+else\n+  SORT_INIT_ARRAY=\"KEEP (*(SORT(.init_array.*)))\"\n+  SORT_FINI_ARRAY=\"KEEP (*(SORT(.fini_array.*)))\"\n+  CTORS_IN_INIT_ARRAY=\n+  DTORS_IN_FINI_ARRAY=\n+fi\n+PREINIT_ARRAY=\".preinit_array    :\n+  {\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__preinit_array_start = .);}\n+    KEEP (*(.preinit_array))\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__preinit_array_end = .);}\n+  }\"\n+INIT_ARRAY=\".init_array    :\n+  {\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__init_array_start = .);}\n+    ${SORT_INIT_ARRAY}\n+    KEEP (*(.init_array ${CTORS_IN_INIT_ARRAY}))\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__init_array_end = .);}\n+  }\"\n+FINI_ARRAY=\".fini_array    :\n+  {\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__fini_array_start = .);}\n+    ${SORT_FINI_ARRAY}\n+    KEEP (*(.fini_array ${DTORS_IN_FINI_ARRAY}))\n+    ${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__fini_array_end = .);}\n+  }\"\n+CTOR=\".ctors        ${CONSTRUCTING-0} :\n+  {\n+    ${CONSTRUCTING+${CTOR_START}}\n+    /* gcc uses crtbegin.o to find the start of\n+       the constructors, so we make sure it is\n+       first.  Because this is a wildcard, it\n+       doesn't matter if the user does not\n+       actually link against crtbegin.o; the\n+       linker won't look for a file to match a\n+       wildcard.  The wildcard also means that it\n+       doesn't matter which directory crtbegin.o\n+       is in.  */\n+\n+    KEEP (*crtbegin.o(.ctors))\n+    KEEP (*crtbegin?.o(.ctors))\n+\n+    /* We don't want to include the .ctor section from\n+       the crtend.o file until after the sorted ctors.\n+       The .ctor section from the crtend file contains the\n+       end of ctors marker and it must be last */\n+\n+    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .ctors))\n+    KEEP (*(SORT(.ctors.*)))\n+    KEEP (*(.ctors))\n+    ${CONSTRUCTING+${CTOR_END}}\n+  }\"\n+DTOR=\".dtors        ${CONSTRUCTING-0} :\n+  {\n+    ${CONSTRUCTING+${DTOR_START}}\n+    KEEP (*crtbegin.o(.dtors))\n+    KEEP (*crtbegin?.o(.dtors))\n+    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .dtors))\n+    KEEP (*(SORT(.dtors.*)))\n+    KEEP (*(.dtors))\n+    ${CONSTRUCTING+${DTOR_END}}\n+  }\"\n+STACK=\".stack        ${RELOCATING-0}${RELOCATING+${STACK_ADDR}} :\n+  {\n+    ${RELOCATING+${USER_LABEL_PREFIX}_stack = .;}\n+    *(.stack)\n+    ${RELOCATING+${STACK_SENTINEL}}\n+  }\"\n+\n+TEXT_START_ADDR=\"SEGMENT_START(\\\"text-segment\\\", ${TEXT_START_ADDR})\"\n+SHLIB_TEXT_START_ADDR=\"SEGMENT_START(\\\"text-segment\\\", ${SHLIB_TEXT_START_ADDR:-0})\"\n+\n+# Don't bother with separate code segment when there are data sections\n+# between .plt and .text.\n+if test -z \"$TINY_READONLY_SECTION\"; then\n+  case \"$LD_FLAG\" in\n+    *textonly*)\n+      SEPARATE_TEXT=\" \"\n+      TEXT_SEGMENT_ALIGN=\". = ALIGN(${MAXPAGESIZE});\"\n+      ;;\n+  esac\n+fi\n+\n+if [ -z \"$SEPARATE_CODE\" ]; then\n+  SIZEOF_HEADERS_CODE=\" + SIZEOF_HEADERS\"\n+else\n+  SIZEOF_HEADERS_CODE=\n+fi\n+\n+# If this is for an embedded system, don't add SIZEOF_HEADERS.\n+if [ -z \"$EMBEDDED\" ]; then\n+   test -z \"${TEXT_BASE_ADDRESS}\" && TEXT_BASE_ADDRESS=\"${TEXT_START_ADDR}${SIZEOF_HEADERS_CODE}\"\n+else\n+   test -z \"${TEXT_BASE_ADDRESS}\" && TEXT_BASE_ADDRESS=\"${TEXT_START_ADDR}\"\n+fi\n+\n+cat <<EOF\n+/* Copyright (C) 2014-2019 Free Software Foundation, Inc.\n+\n+   Copying and distribution of this script, with or without modification,\n+   are permitted in any medium without royalty provided the copyright\n+   notice and this notice are preserved.  */\n+\n+OUTPUT_FORMAT(\"${OUTPUT_FORMAT}\", \"${BIG_OUTPUT_FORMAT}\",\n+\t      \"${LITTLE_OUTPUT_FORMAT}\")\n+OUTPUT_ARCH(${OUTPUT_ARCH})\n+\n+${RELOCATING+${LIB_SEARCH_DIRS}}\n+${RELOCATING+${CREATE_SHLIB-${EXECUTABLE_SYMBOLS}}}\n+${RELOCATING+${INPUT_FILES}}\n+${RELOCATING- /* For some reason, the Solaris linker makes bad executables\n+  if gld -r is used and the intermediate file has sections starting\n+  at non-zero addresses.  Could be a Solaris ld bug, could be a GNU ld\n+  bug.  But for now assigning the zero vmas works.  */}\n+\n+SECTIONS\n+{\n+  ${RELOCATING+${SEPARATE_TEXT-/* Read-only sections, merged into text segment: */}}\n+  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+PROVIDE (__executable_start = ${TEXT_START_ADDR}); . = ${TEXT_BASE_ADDRESS};}}}\n+  ${CREATE_SHLIB+${RELOCATING+. = ${SHLIB_TEXT_START_ADDR}${SIZEOF_HEADERS_CODE};}}\n+  ${CREATE_PIE+${RELOCATING+PROVIDE (__executable_start = ${SHLIB_TEXT_START_ADDR}); . = ${SHLIB_TEXT_START_ADDR}${SIZEOF_HEADERS_CODE};}}\n+EOF\n+\n+emit_early_ro()\n+{\n+  cat <<EOF\n+  ${INITIAL_READONLY_SECTIONS}\n+  .note.gnu.build-id ${RELOCATING-0}: { *(.note.gnu.build-id) }\n+EOF\n+}\n+\n+test -n \"${SEPARATE_CODE}\" || emit_early_ro\n+\n+test -n \"${RELOCATING+0}\" || unset NON_ALLOC_DYN\n+test -z \"${NON_ALLOC_DYN}\" || TEXT_DYNAMIC=\n+cat > ldscripts/dyntmp.$$ <<EOF\n+  ${TEXT_DYNAMIC+${DYNAMIC}}\n+  .hash         ${RELOCATING-0} : { *(.hash) }\n+  .gnu.hash     ${RELOCATING-0} : { *(.gnu.hash) }\n+  .dynsym       ${RELOCATING-0} : { *(.dynsym) }\n+  .dynstr       ${RELOCATING-0} : { *(.dynstr) }\n+  .gnu.version  ${RELOCATING-0} : { *(.gnu.version) }\n+  .gnu.version_d ${RELOCATING-0}: { *(.gnu.version_d) }\n+  .gnu.version_r ${RELOCATING-0}: { *(.gnu.version_r) }\n+EOF\n+\n+if [ \"x$COMBRELOC\" = x ]; then\n+  COMBRELOCCAT=\"cat >> ldscripts/dyntmp.$$\"\n+else\n+  COMBRELOCCAT=\"cat > $COMBRELOC\"\n+fi\n+eval $COMBRELOCCAT <<EOF\n+  ${INITIAL_RELOC_SECTIONS}\n+  .rel.init     ${RELOCATING-0} : { *(.rel.init) }\n+  .rela.init    ${RELOCATING-0} : { *(.rela.init) }\n+  .rel.text     ${RELOCATING-0} : { *(.rel.text${RELOCATING+ .rel.text.* .rel.gnu.linkonce.t.*}) }\n+  .rela.text    ${RELOCATING-0} : { *(.rela.text${RELOCATING+ .rela.text.* .rela.gnu.linkonce.t.*}) }\n+  .rel.fini     ${RELOCATING-0} : { *(.rel.fini) }\n+  .rela.fini    ${RELOCATING-0} : { *(.rela.fini) }\n+  .rel.${RODATA_NAME}   ${RELOCATING-0} : { *(.rel.${RODATA_NAME}${RELOCATING+ .rel.${RODATA_NAME}.* .rel.gnu.linkonce.r.*}) }\n+  .rela.${RODATA_NAME}  ${RELOCATING-0} : { *(.rela.${RODATA_NAME}${RELOCATING+ .rela.${RODATA_NAME}.* .rela.gnu.linkonce.r.*}) }\n+  ${OTHER_READONLY_RELOC_SECTIONS}\n+  .rel.data.rel.ro ${RELOCATING-0} : { *(.rel.data.rel.ro${RELOCATING+ .rel.data.rel.ro.* .rel.gnu.linkonce.d.rel.ro.*}) }\n+  .rela.data.rel.ro ${RELOCATING-0} : { *(.rela.data.rel.ro${RELOCATING+ .rela.data.rel.ro.* .rela.gnu.linkonce.d.rel.ro.*}) }\n+  .rel.data     ${RELOCATING-0} : { *(.rel.data${RELOCATING+ .rel.data.* .rel.gnu.linkonce.d.*}) }\n+  .rela.data    ${RELOCATING-0} : { *(.rela.data${RELOCATING+ .rela.data.* .rela.gnu.linkonce.d.*}) }\n+  ${OTHER_READWRITE_RELOC_SECTIONS}\n+  .rel.tdata\t${RELOCATING-0} : { *(.rel.tdata${RELOCATING+ .rel.tdata.* .rel.gnu.linkonce.td.*}) }\n+  .rela.tdata\t${RELOCATING-0} : { *(.rela.tdata${RELOCATING+ .rela.tdata.* .rela.gnu.linkonce.td.*}) }\n+  .rel.tbss\t${RELOCATING-0} : { *(.rel.tbss${RELOCATING+ .rel.tbss.* .rel.gnu.linkonce.tb.*}) }\n+  .rela.tbss\t${RELOCATING-0} : { *(.rela.tbss${RELOCATING+ .rela.tbss.* .rela.gnu.linkonce.tb.*}) }\n+  .rel.ctors    ${RELOCATING-0} : { *(.rel.ctors) }\n+  .rela.ctors   ${RELOCATING-0} : { *(.rela.ctors) }\n+  .rel.dtors    ${RELOCATING-0} : { *(.rel.dtors) }\n+  .rela.dtors   ${RELOCATING-0} : { *(.rela.dtors) }\n+  .rel.got      ${RELOCATING-0} : { *(.rel.got) }\n+  .rela.got     ${RELOCATING-0} : { *(.rela.got) }\n+  ${OTHER_GOT_RELOC_SECTIONS}\n+  ${REL_SDATA}\n+  ${REL_SBSS}\n+  ${REL_SDATA2}\n+  ${REL_SBSS2}\n+  .rel.${BSS_NAME}      ${RELOCATING-0} : { *(.rel.${BSS_NAME}${RELOCATING+ .rel.${BSS_NAME}.* .rel.gnu.linkonce.b.*}) }\n+  .rela.${BSS_NAME}     ${RELOCATING-0} : { *(.rela.${BSS_NAME}${RELOCATING+ .rela.${BSS_NAME}.* .rela.gnu.linkonce.b.*}) }\n+  ${REL_LARGE}\n+  ${IREL_IN_PLT+$REL_IFUNC}\n+  ${IREL_IN_PLT+$RELA_IFUNC}\n+  ${IREL_IN_PLT-$REL_IPLT}\n+  ${IREL_IN_PLT-$RELA_IPLT}\n+EOF\n+\n+if [ -n \"$COMBRELOC\" ]; then\n+cat >> ldscripts/dyntmp.$$ <<EOF\n+  .rel.dyn      ${RELOCATING-0} :\n+    {\n+EOF\n+sed -e '/^[\t ]*[{}][\t ]*$/d;/:[\t ]*$/d;/\\.rela\\./d;/__rela_iplt_/d;s/^.*: { *\\(.*\\)}$/      \\1/' $COMBRELOC >> ldscripts/dyntmp.$$\n+cat >> ldscripts/dyntmp.$$ <<EOF\n+    }\n+  .rela.dyn     ${RELOCATING-0} :\n+    {\n+EOF\n+sed -e '/^[\t ]*[{}][\t ]*$/d;/:[\t ]*$/d;/\\.rel\\./d;/__rel_iplt_/d;s/^.*: { *\\(.*\\)}/      \\1/' $COMBRELOC >> ldscripts/dyntmp.$$\n+cat >> ldscripts/dyntmp.$$ <<EOF\n+    }\n+EOF\n+fi\n+\n+cat >> ldscripts/dyntmp.$$ <<EOF\n+  .rel.plt      ${RELOCATING-0} :\n+    {\n+      *(.rel.plt)\n+      ${IREL_IN_PLT+${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rel_iplt_start = .);}}}\n+      ${IREL_IN_PLT+${RELOCATING+*(.rel.iplt)}}\n+      ${IREL_IN_PLT+${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rel_iplt_end = .);}}}\n+    }\n+  .rela.plt     ${RELOCATING-0} :\n+    {\n+      *(.rela.plt)\n+      ${IREL_IN_PLT+${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rela_iplt_start = .);}}}\n+      ${IREL_IN_PLT+${RELOCATING+*(.rela.iplt)}}\n+      ${IREL_IN_PLT+${RELOCATING+${CREATE_PIC-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__rela_iplt_end = .);}}}\n+    }\n+  ${OTHER_PLT_RELOC_SECTIONS}\n+EOF\n+\n+emit_dyn()\n+{\n+  if test -z \"${NO_REL_RELOCS}${NO_RELA_RELOCS}\"; then\n+    cat ldscripts/dyntmp.$$\n+  else\n+    if test -z \"${NO_REL_RELOCS}\"; then\n+      sed -e '/^[\t ]*\\.rela\\.[^}]*$/,/}/d;/^[\t ]*\\.rela\\./d;/__rela_iplt_/d' ldscripts/dyntmp.$$\n+    fi\n+    if test -z \"${NO_RELA_RELOCS}\"; then\n+      sed -e '/^[\t ]*\\.rel\\.[^}]*$/,/}/d;/^[\t ]*\\.rel\\./d;/__rel_iplt_/d' ldscripts/dyntmp.$$\n+    fi\n+  fi\n+  rm -f ldscripts/dyntmp.$$\n+}\n+\n+test -n \"${NON_ALLOC_DYN}${SEPARATE_CODE}\" || emit_dyn\n+\n+cat <<EOF\n+  ${RELOCATING+${TEXT_SEGMENT_ALIGN}}\n+\n+  .init         ${RELOCATING-0}${RELOCATING+${INIT_ADDR}} :\n+  {\n+    ${RELOCATING+${INIT_START}}\n+    KEEP (*(SORT_NONE(.init)))\n+    ${RELOCATING+${INIT_END}}\n+  } ${FILL}\n+\n+  ${TEXT_PLT+${PLT_NEXT_DATA-${PLT} ${OTHER_PLT_SECTIONS}}}\n+  ${TINY_READONLY_SECTION}\n+  .text         ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${TEXT_START_SYMBOLS}}\n+    ${RELOCATING+*(.text.unlikely .text.*_unlikely .text.unlikely.*)}\n+    ${RELOCATING+*(.text.exit .text.exit.*)}\n+    ${RELOCATING+*(.text.startup .text.startup.*)}\n+    ${RELOCATING+*(.text.hot .text.hot.*)}\n+    *(.text .stub${RELOCATING+ .text.* .gnu.linkonce.t.*})\n+    /* .gnu.warning sections are handled specially by elf32.em.  */\n+    *(.gnu.warning)\n+    ${RELOCATING+${OTHER_TEXT_SECTIONS}}\n+  } ${FILL}\n+  .fini         ${RELOCATING-0}${RELOCATING+${FINI_ADDR}} :\n+  {\n+    ${RELOCATING+${FINI_START}}\n+    KEEP (*(SORT_NONE(.fini)))\n+    ${RELOCATING+${FINI_END}}\n+  } ${FILL}\n+  ${RELOCATING+PROVIDE (__${ETEXT_NAME} = .);}\n+  ${RELOCATING+PROVIDE (_${ETEXT_NAME} = .);}\n+  ${RELOCATING+PROVIDE (${ETEXT_NAME} = .);}\n+  ${RELOCATING+${TEXT_SEGMENT_ALIGN}}\n+EOF\n+\n+if test -n \"${SEPARATE_CODE}${SEPARATE_TEXT}\"; then\n+  if test -n \"${RODATA_ADDR}\"; then\n+    RODATA_ADDR=\"\\\n+SEGMENT_START(\\\"rodata-segment\\\", ${RODATA_ADDR}) + SIZEOF_HEADERS\"\n+  else\n+    RODATA_ADDR=\"ALIGN(${SEGMENT_SIZE}) + (. & (${MAXPAGESIZE} - 1))\"\n+    RODATA_ADDR=\"SEGMENT_START(\\\"rodata-segment\\\", ${RODATA_ADDR})\"\n+  fi\n+  if test -n \"${SHLIB_RODATA_ADDR}\"; then\n+    SHLIB_RODATA_ADDR=\"\\\n+SEGMENT_START(\\\"rodata-segment\\\", ${SHLIB_RODATA_ADDR}) + SIZEOF_HEADERS\"\n+  else\n+    SHLIB_RODATA_ADDR=\"ALIGN(${SEGMENT_SIZE}) + (. & (${MAXPAGESIZE} - 1))\"\n+    SHLIB_RODATA_ADDR=\"SEGMENT_START(\\\"rodata-segment\\\", ${SHLIB_RODATA_ADDR})\"\n+  fi\n+  cat <<EOF\n+  ${RELOCATING+/* Adjust the address for the rodata segment.  We want to adjust up to\n+     the same address within the page on the next page up.  */\n+  ${CREATE_SHLIB-${CREATE_PIE-. = ${RODATA_ADDR};}}\n+  ${CREATE_SHLIB+. = ${SHLIB_RODATA_ADDR};}\n+  ${CREATE_PIE+. = ${SHLIB_RODATA_ADDR};}}\n+EOF\n+  if test -n \"${SEPARATE_CODE}\"; then\n+    emit_early_ro\n+    emit_dyn\n+  fi\n+fi\n+\n+cat <<EOF\n+  ${WRITABLE_RODATA-${RODATA}}\n+  .${RODATA_NAME}1      ${RELOCATING-0} : { *(.${RODATA_NAME}1) }\n+  ${CREATE_SHLIB-${SDATA2}}\n+  ${CREATE_SHLIB-${SBSS2}}\n+  ${OTHER_READONLY_SECTIONS}\n+  .eh_frame_hdr ${RELOCATING-0} : { *(.eh_frame_hdr)${RELOCATING+ *(.eh_frame_entry .eh_frame_entry.*)} }\n+  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame))${RELOCATING+ *(.eh_frame.*)} }\n+  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { *(.gcc_except_table${RELOCATING+ .gcc_except_table.*}) }\n+  .gnu_extab ${RELOCATING-0} : ONLY_IF_RO { *(.gnu_extab*) }\n+  /* These sections are generated by the Sun/Oracle C++ compiler.  */\n+  .exception_ranges ${RELOCATING-0} : ONLY_IF_RO { *(.exception_ranges${RELOCATING+*}) }\n+  ${TEXT_PLT+${PLT_NEXT_DATA+${PLT} ${OTHER_PLT_SECTIONS}}}\n+\n+  ${RELOCATING+/* Adjust the address for the data segment.  We want to adjust up to\n+     the same address within the page on the next page up.  */}\n+  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+. = ${DATA_ADDR-${DATA_SEGMENT_ALIGN}};}}}\n+  ${CREATE_SHLIB+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}\n+  ${CREATE_PIE+. = ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}};}\n+\n+  /* Exception handling  */\n+  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame))${RELOCATING+ *(.eh_frame.*)} }\n+  .gnu_extab    ${RELOCATING-0} : ONLY_IF_RW { *(.gnu_extab) }\n+  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { *(.gcc_except_table${RELOCATING+ .gcc_except_table.*}) }\n+  .exception_ranges ${RELOCATING-0} : ONLY_IF_RW { *(.exception_ranges${RELOCATING+*}) }\n+\n+  /* Thread Local Storage sections  */\n+  .tdata\t${RELOCATING-0} :\n+   {\n+     ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (${USER_LABEL_PREFIX}__tdata_start = .);}}\n+     *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*})\n+   }\n+  .tbss\t\t${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }\n+\n+  ${RELOCATING+${PREINIT_ARRAY}}\n+  ${RELOCATING+${INIT_ARRAY}}\n+  ${RELOCATING+${FINI_ARRAY}}\n+  ${SMALL_DATA_CTOR-${RELOCATING+${CTOR}}}\n+  ${SMALL_DATA_DTOR-${RELOCATING+${DTOR}}}\n+  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }\n+\n+  ${RELOCATING+${DATARELRO}}\n+  ${OTHER_RELRO_SECTIONS}\n+  ${TEXT_DYNAMIC-${DYNAMIC}}\n+  ${OTHER_RELRO_SECTIONS_2}\n+  ${DATA_GOT+${RELRO_NOW+${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}}}\n+  ${DATA_GOT+${RELRO_NOW+${GOT}}}\n+  ${DATA_GOT+${RELRO_NOW+${GOTPLT}}}\n+  ${DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT+${GOT}}}}\n+  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}\n+  ${INITIAL_READWRITE_SECTIONS}\n+  ${DATA_SDATA+${SDATA}}\n+  ${DATA_SDATA+${OTHER_SDATA_SECTIONS}}\n+  ${DATA_SDATA+${SBSS}}\n+  ${DATA_GOT+${RELRO_NOW-${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}}}\n+  ${DATA_GOT+${RELRO_NOW-${SEPARATE_GOTPLT-${GOT}}}}\n+  ${DATA_GOT+${RELRO_NOW-${GOTPLT}}}\n+\n+  ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}\n+\n+  .data         ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${DATA_START_SYMBOLS}}\n+    *(.data${RELOCATING+ .data.* .gnu.linkonce.d.*})\n+    ${CONSTRUCTING+SORT(CONSTRUCTORS)}\n+  }\n+  .data1        ${RELOCATING-0} : { *(.data1) }\n+  ${WRITABLE_RODATA+${RODATA}}\n+  ${OTHER_READWRITE_SECTIONS}\n+  ${SMALL_DATA_CTOR+${RELOCATING+${CTOR}}}\n+  ${SMALL_DATA_DTOR+${RELOCATING+${DTOR}}}\n+  ${SDATA_GOT+${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}}\n+  ${SDATA_GOT+${RELOCATING+${OTHER_GOT_SYMBOLS+. = .; ${OTHER_GOT_SYMBOLS}}}}\n+  ${SDATA_GOT+${GOT}}\n+  ${SDATA_GOT+${OTHER_GOT_SECTIONS}}\n+  ${DATA_SDATA-${SDATA}}\n+  ${DATA_SDATA-${OTHER_SDATA_SECTIONS}}\n+  ${RELOCATING+${DATA_END_SYMBOLS-${CREATE_SHLIB+PROVIDE (}${USER_LABEL_PREFIX}_edata = .${CREATE_SHLIB+)}; PROVIDE (${USER_LABEL_PREFIX}edata = .);}}\n+  ${RELOCATING+. = .;}\n+  ${RELOCATING+${CREATE_SHLIB+PROVIDE (}${USER_LABEL_PREFIX}__bss_start = .${CREATE_SHLIB+)};}\n+  ${RELOCATING+${OTHER_BSS_SYMBOLS}}\n+  ${DATA_SDATA-${SBSS}}\n+  ${BSS_PLT+${PLT}}\n+  .${BSS_NAME}          ${RELOCATING-0} :\n+  {\n+   ${RELOCATING+*(.dynbss)}\n+   *(.${BSS_NAME}${RELOCATING+ .${BSS_NAME}.* .gnu.linkonce.b.*})\n+   ${RELOCATING+*(COMMON)\n+   /* Align here to ensure that the .bss section occupies space up to\n+      _end.  Align after .bss to ensure correct alignment even if the\n+      .bss section disappears because there are no input sections.\n+      FIXME: Why do we need it? When there is no .bss section, we do not\n+      pad the .data section.  */\n+   . = ALIGN(. != 0 ? ${ALIGNMENT} : 1);}\n+  }\n+  ${OTHER_BSS_SECTIONS}\n+  ${LARGE_BSS_AFTER_BSS+${LARGE_BSS}}\n+  ${RELOCATING+${OTHER_BSS_END_SYMBOLS}}\n+  ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+EOF\n+\n+LARGE_DATA_ADDR=\". = SEGMENT_START(\\\"ldata-segment\\\", ${LARGE_DATA_ADDR-.});\"\n+SHLIB_LARGE_DATA_ADDR=\". = SEGMENT_START(\\\"ldata-segment\\\", ${SHLIB_LARGE_DATA_ADDR-.});\"\n+\n+cat <<EOF\n+  ${RELOCATING+${CREATE_SHLIB-${CREATE_PIE-${LARGE_DATA_ADDR}}}}\n+  ${CREATE_SHLIB+${SHLIB_LARGE_DATA_ADDR}}\n+  ${CREATE_PIE+${SHLIB_LARGE_DATA_ADDR}}\n+  ${LARGE_SECTIONS}\n+  ${LARGE_BSS_AFTER_BSS-${LARGE_BSS}}\n+  ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n+  ${RELOCATING+${OTHER_END_SYMBOLS}}\n+  ${RELOCATING+${END_SYMBOLS-${CREATE_SHLIB+PROVIDE (}${USER_LABEL_PREFIX}_end = .${CREATE_SHLIB+)}; PROVIDE (${USER_LABEL_PREFIX}end = .);}}\n+  ${RELOCATING+${DATA_SEGMENT_END}}\n+  ${TINY_DATA_SECTION}\n+  ${TINY_BSS_SECTION}\n+  ${STACK_ADDR+${STACK}}\n+EOF\n+\n+test -z \"${NON_ALLOC_DYN}\" || emit_dyn\n+\n+cat <<EOF\n+  /* Stabs debugging sections.  */\n+  .stab          0 : { *(.stab) }\n+  .stabstr       0 : { *(.stabstr) }\n+  .stab.excl     0 : { *(.stab.excl) }\n+  .stab.exclstr  0 : { *(.stab.exclstr) }\n+  .stab.index    0 : { *(.stab.index) }\n+  .stab.indexstr 0 : { *(.stab.indexstr) }\n+\n+  .comment       0 : { *(.comment) }\n+\n+  .gnu.build.attributes : { *(.gnu.build.attributes${RELOCATING+ .gnu.build.attributes.*}) }\n+\n+EOF\n+\n+cat <<EOF\n+  ${ATTRS_SECTIONS}\n+  ${OTHER_SECTIONS}\n+  ${RELOCATING+${OTHER_SYMBOLS}}\n+  ${RELOCATING+${DISCARDED}}\n+}\n+EOF"
    },
    {
      "sha": "d44c14e92463fa72c327d6eaf4e50b713818539e",
      "filename": "ld/testsuite/ld-bpf/call-1.d",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-bpf/call-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-bpf/call-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/call-1.d?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -3,7 +3,6 @@\n #source: bar.s\n #objdump: -dr\n #ld: -EL\n-#warning: .*cannot find entry symbol _start.*\n #name: CALL with disp32 reloc\n \n .*: +file format .*bpf.*"
    },
    {
      "sha": "0e3de4edc7b6b01bb96b9f327b6139b6c2f25cd3",
      "filename": "ld/testsuite/ld-bpf/jump-1.d",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-bpf/jump-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-bpf/jump-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bpf/jump-1.d?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -3,7 +3,6 @@\n #source: bar.s\n #objdump: -dr\n #ld: -EL\n-#warning: .*cannot find entry symbol _start.*\n #name: jump with disp16 reloc\n \n .*: +file format .*bpf.*"
    },
    {
      "sha": "17d4bc465d4284f3f47e912c87bf7fec870735a6",
      "filename": "ld/testsuite/ld-srec/srec.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-srec/srec.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-srec/srec.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-srec/srec.exp?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -428,6 +428,9 @@ setup_xfail \"tile*-*-*\"\n # The S-record linker is not supported for C-SKY.\n setup_xfail \"csky*-*-*\"\n \n+# The S-record linker is not supported for eBPF.\n+setup_xfail \"bpf-*-*\"\n+\n run_srec_test $test1 \"tmpdir/sr1.o tmpdir/sr2.o\"\n \n # Now try linking a C++ program with global constructors and\n@@ -464,6 +467,7 @@ setup_xfail \"score-*-*\"\n setup_xfail \"bfin-*-linux-uclibc\"\n setup_xfail \"tile*-*-*\"\n setup_xfail \"csky*-*-*\"\n+setup_xfail \"bpf-*-*\"\n \n run_srec_test $test2 \"tmpdir/sr3.o\"\n "
    },
    {
      "sha": "958623f3a9c637b48681cc402a38450aa996aa98",
      "filename": "ld/testsuite/ld-undefined/undefined.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-undefined/undefined.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6/ld/testsuite/ld-undefined/undefined.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-undefined/undefined.exp?ref=fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "patch": "@@ -40,9 +40,14 @@ if { ![check_compiler_available] } {\n     set flags [big_or_little_endian]\n \n     # Using -e start prevents the SunOS linker from trying to build a\n-    # shared library.\n-    send_log \"$ld -e start $flags -o tmpdir/undefined tmpdir/undefined.o\\n\"\n-    set exec_output [run_host_cmd \"$ld\" \"-e start $flags -o tmpdir/undefined tmpdir/undefined.o\"]\n+    # shared library.  But don't use an entry point in BPF targets.\n+    switch -glob $target_triplet {\n+        bpf-*-* { set entry \"\" }\n+        * { set entry \"-e start\" }\n+    }\n+\n+    send_log \"$ld $entry $flags -o tmpdir/undefined tmpdir/undefined.o\\n\"\n+    set exec_output [run_host_cmd \"$ld\" \"$entry $flags -o tmpdir/undefined tmpdir/undefined.o\"]\n \n     send_log \"$exec_output\\n\"\n     verbose \"$exec_output\"\n@@ -142,6 +147,9 @@ if { ![check_compiler_available] } {\n     setup_xfail xtensa*-*-linux*\n     setup_xfail hppa*64*-*-*\n \n+    # eBPF doesn't support dwarf yet.\n+    setup_xfail bpf-*-*\n+\n     checkund $ml $testline\n }\n "
    }
  ]
}