{
  "sha": "91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTFlNWU4ZGIzMzRiOWE4N2M1NGYwMzk4MmRmYTBjODhlM2M5ZDdhMQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-07T03:57:52Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-07T12:52:25Z"
    },
    "message": "Add common write_memory and read_memory NetBSD routines\n\nInstead of sharing the native-only code with all BSDs with slightly\ndifferent semantics of the kernels, share the NetBSD-only behavior beteen\nthe NetBSD native and gdbserver setup.\n\nNetBSD does not differentiate the address space I and D in the\noperations (contrary to OpenBSD). NetBSD handles EACCES that integrates\nwith NetBSD specific PaX MPROTECT error handling.\n\nAdd a verbose message in the native client that an operation could be\ncancelled due to PaX MPROTECT setup.\n\ngdb/ChangeLog:\n\n       * nat/netbsd-nat.c (write_memory, read_memory): Add.\n       * nat/netbsd-nat.h (write_memory, read_memory): Likewise.\n       * nbsd-nat.c (nbsd_nat_target::xfer_partial): Update.\n\ngdbserver/ChangeLog:\n\n       * netbsd-low.cc (netbsd_process_target::read_memory)\n       (netbsd_process_target::write_memory): Update.",
    "tree": {
      "sha": "a46f4667d6dd8c4b099d0c06b9884c39d9c1bb56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a46f4667d6dd8c4b099d0c06b9884c39d9c1bb56"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9529c852664bbfc64f3ccda6abd81fc1aced6f16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9529c852664bbfc64f3ccda6abd81fc1aced6f16",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9529c852664bbfc64f3ccda6abd81fc1aced6f16"
    }
  ],
  "stats": {
    "total": 197,
    "additions": 138,
    "deletions": 59
  },
  "files": [
    {
      "sha": "4dc729c69bc099c202386c946aa3eaeb06651b8b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-07  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nat/netbsd-nat.c (write_memory, read_memory): Add.\n+\t* nat/netbsd-nat.h (write_memory, read_memory): Likewise.\n+\t* nbsd-nat.c (nbsd_nat_target::xfer_partial): Update.\n+\n 2020-10-07  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* break-catch-sig.c (signal_catch_counts): Make a static arrray."
    },
    {
      "sha": "cae9cc2fc2c550c507a66b37fdfde6ee57372716",
      "filename": "gdb/nat/netbsd-nat.c",
      "status": "modified",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nat/netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nat/netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/netbsd-nat.c?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -210,4 +210,84 @@ qxfer_siginfo (pid_t pid, const char *annex, unsigned char *readbuf,\n   return len;\n }\n \n+/* See netbsd-nat.h.  */\n+\n+int\n+write_memory (pid_t pid, unsigned const char *writebuf, CORE_ADDR offset,\n+\t      size_t len, size_t *xfered_len)\n+{\n+  struct ptrace_io_desc io;\n+  io.piod_op = PIOD_WRITE_D;\n+  io.piod_len = len;\n+\n+  size_t bytes_written = 0;\n+\n+  /* Zero length write always succeeds.  */\n+  if (len > 0)\n+    {\n+      do\n+\t{\n+\t  io.piod_addr = (void *)(writebuf + bytes_written);\n+\t  io.piod_offs = (void *)(offset + bytes_written);\n+\n+\t  errno = 0;\n+\t  int rv = ptrace (PT_IO, pid, &io, 0);\n+\t  if (rv == -1)\n+\t    {\n+\t      gdb_assert (errno != 0);\n+\t      return errno;\n+\t    }\n+\t  if (io.piod_len == 0)\n+\t    return 0;\n+\n+\t  bytes_written += io.piod_len;\n+\t  io.piod_len = len - bytes_written;\n+\t}\n+      while (bytes_written < len);\n+    }\n+\n+  if (xfered_len != nullptr)\n+    *xfered_len = bytes_written;\n+\n+  return 0;\n+}\n+\n+/* See netbsd-nat.h.  */\n+\n+int\n+read_memory (pid_t pid, unsigned char *readbuf, CORE_ADDR offset,\n+\t      size_t len, size_t *xfered_len)\n+{\n+  struct ptrace_io_desc io;\n+  io.piod_op = PIOD_READ_D;\n+  io.piod_len = len;\n+\n+  size_t bytes_read = 0;\n+\n+  /* Zero length read always succeeds.  */\n+  if (len > 0)\n+    {\n+      do\n+\t{\n+\t  io.piod_offs = (void *)(offset + bytes_read);\n+\t  io.piod_addr = readbuf + bytes_read;\n+\n+\t  int rv = ptrace (PT_IO, pid, &io, 0);\n+\t  if (rv == -1)\n+\t    return errno;\n+\t  if (io.piod_len == 0)\n+\t    return 0;\n+\n+\t  bytes_read += io.piod_len;\n+\t  io.piod_len = len - bytes_read;\n+\t}\n+      while (bytes_read < len);\n+    }\n+\n+  if (xfered_len != nullptr)\n+    *xfered_len = bytes_read;\n+\n+  return 0;\n+}\n+\n }"
    },
    {
      "sha": "594dec1ba482653042157c68bda1fc6a8cf511b8",
      "filename": "gdb/nat/netbsd-nat.h",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nat/netbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nat/netbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/netbsd-nat.h?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -67,6 +67,28 @@ extern void enable_proc_events (pid_t pid);\n extern int qxfer_siginfo (pid_t pid, const char *annex, unsigned char *readbuf,\n \t\t\t  unsigned const char *writebuf, CORE_ADDR offset,\n \t\t\t  int len);\n+\n+/* Write gdb's LEN bytes from WRITEBUF and copy it to OFFSET in inferior\n+   process' address space. The inferior is specified by PID.\n+   Returns 0 on success or errno on failure and the number of bytes\n+   on a successful transfer in XFERED_LEN.\n+\n+   This function assumes internally that the queried process is stopped and\n+   traced.  */\n+\n+extern int write_memory (pid_t pid, unsigned const char *writebuf,\n+\t\t\t CORE_ADDR offset, size_t len, size_t *xfered_len);\n+\n+/* Read inferior process's LEN bytes from OFFSET and copy it to WRITEBUF in\n+   gdb's address space.\n+   Returns 0 on success or errno on failure and the number of bytes\n+   on a successful transfer in XFERED_LEN.\n+\n+   This function assumes internally that the queried process is stopped and\n+   traced.  */\n+\n+extern int read_memory (pid_t pid, unsigned char *readbuf, CORE_ADDR offset,\n+\t\t\tsize_t len, size_t *xfered_len);\n }\n \n #endif"
    },
    {
      "sha": "46dcfac2cf6d7e2d75ef850f9778411c2436d831",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -764,6 +764,29 @@ nbsd_nat_target::xfer_partial (enum target_object object,\n \t*xfered_len = len;\n \treturn TARGET_XFER_OK;\n       }\n+    case TARGET_OBJECT_MEMORY:\n+      {\n+\tsize_t xfered;\n+\tint res;\n+\tif (writebuf != nullptr)\n+\t  res = netbsd_nat::write_memory (pid, writebuf, offset, len, &xfered);\n+\telse\n+\t  res = netbsd_nat::read_memory (pid, readbuf, offset, len, &xfered);\n+\tif (res != 0)\n+\t  {\n+\t    if (res == EACCES)\n+\t      fprintf_unfiltered (gdb_stderr, \"Cannot %s process at %s (%s). \"\n+\t\t\t\t  \"Is PaX MPROTECT active? See security(7), \"\n+\t\t\t\t  \"sysctl(7), paxctl(8)\\n\",\n+\t\t\t\t  (writebuf ? \"write to\" : \"read from\"),\n+\t\t\t\t  pulongest (offset), safe_strerror (errno));\n+\t    return TARGET_XFER_E_IO;\n+\t  }\n+\tif (xfered == 0)\n+\t  return TARGET_XFER_EOF;\n+\t*xfered_len = (ULONGEST) xfered;\n+\treturn TARGET_XFER_OK;\n+      }\n     default:\n       return inf_ptrace_target::xfer_partial (object, annex,\n \t\t\t\t\t      readbuf, writebuf, offset,"
    },
    {
      "sha": "1709f3f3f11fedc669dadd1eb687b1f96a493362",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-07  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* netbsd-low.cc (netbsd_process_target::read_memory)\n+\t(netbsd_process_target::write_memory): Update.\n+\n 2020-10-07  Kamil Rytarowski  <n54@gmx.com>\n \n \t* netbsd-aarch64-low.cc: Add."
    },
    {
      "sha": "e5ea8233e003f12d1fe3867b059be21e7ea5a5a8",
      "filename": "gdbserver/netbsd-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 59,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdbserver/netbsd-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1/gdbserver/netbsd-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.cc?ref=91e5e8db334b9a87c54f03982dfa0c88e3c9d7a1",
      "patch": "@@ -556,36 +556,8 @@ int\n netbsd_process_target::read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n \t\t\t\t    int size)\n {\n-  struct ptrace_io_desc io;\n-  io.piod_op = PIOD_READ_D;\n-  io.piod_len = size;\n-\n   pid_t pid = current_process ()->pid;\n-\n-  int bytes_read = 0;\n-\n-  if (size == 0)\n-    {\n-      /* Zero length write always succeeds.  */\n-      return 0;\n-    }\n-  do\n-    {\n-      io.piod_offs = (void *)(memaddr + bytes_read);\n-      io.piod_addr = myaddr + bytes_read;\n-\n-      int rv = ptrace (PT_IO, pid, &io, 0);\n-      if (rv == -1)\n-\treturn errno;\n-      if (io.piod_len == 0)\n-\treturn 0;\n-\n-      bytes_read += io.piod_len;\n-      io.piod_len = size - bytes_read;\n-    }\n-  while (bytes_read < size);\n-\n-  return 0;\n+  return netbsd_nat::read_memory (pid, myaddr, memaddr, size, nullptr);\n }\n \n /* Implement the write_memory target_ops method.  */\n@@ -594,37 +566,8 @@ int\n netbsd_process_target::write_memory (CORE_ADDR memaddr,\n \t\t\t\t     const unsigned char *myaddr, int size)\n {\n-  struct ptrace_io_desc io;\n-  io.piod_op = PIOD_WRITE_D;\n-  io.piod_len = size;\n-\n   pid_t pid = current_process ()->pid;\n-\n-  int bytes_written = 0;\n-\n-  if (size == 0)\n-    {\n-      /* Zero length write always succeeds.  */\n-      return 0;\n-    }\n-\n-  do\n-    {\n-      io.piod_addr = (void *)(myaddr + bytes_written);\n-      io.piod_offs = (void *)(memaddr + bytes_written);\n-\n-      int rv = ptrace (PT_IO, pid, &io, 0);\n-      if (rv == -1)\n-\treturn errno;\n-      if (io.piod_len == 0)\n-\treturn 0;\n-\n-      bytes_written += io.piod_len;\n-      io.piod_len = size - bytes_written;\n-    }\n-  while (bytes_written < size);\n-\n-  return 0;\n+  return netbsd_nat::write_memory (pid, myaddr, memaddr, size, nullptr);\n }\n \n /* Implement the request_interrupt target_ops method.  */"
    }
  ]
}