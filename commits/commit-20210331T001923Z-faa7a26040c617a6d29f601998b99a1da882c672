{
  "sha": "faa7a26040c617a6d29f601998b99a1da882c672",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmFhN2EyNjA0MGM2MTdhNmQyOWY2MDE5OThiOTlhMWRhODgyYzY3Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-30T23:59:52Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-31T00:19:23Z"
    },
    "message": "Use bool in gprof\n\n\t* basic_blocks.c: Replace bfd_boolean with bool, FALSE with false,\n\tand TRUE with true throughout.\n\t* basic_blocks.h: Likewise.\n\t* cg_arcs.c: Likewise.\n\t* cg_dfn.c: Likewise.\n\t* cg_print.c: Likewise.\n\t* corefile.c: Likewise.\n\t* gmon_io.c: Likewise.\n\t* gprof.c: Likewise.\n\t* gprof.h: Likewise.\n\t* hist.c: Likewise.\n\t* mips.c: Likewise.\n\t* source.c: Likewise.\n\t* source.h: Likewise.\n\t* sym_ids.c: Likewise.\n\t* sym_ids.h: Likewise.\n\t* symtab.h: Likewise.\n\t* vax.c: Likewise.",
    "tree": {
      "sha": "704031231af1213b66d56395a5edaa65a043dd0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/704031231af1213b66d56395a5edaa65a043dd0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/faa7a26040c617a6d29f601998b99a1da882c672",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/faa7a26040c617a6d29f601998b99a1da882c672",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/faa7a26040c617a6d29f601998b99a1da882c672",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/faa7a26040c617a6d29f601998b99a1da882c672/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9193bc4285c232400a26448ca75095c44c13f637",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9193bc4285c232400a26448ca75095c44c13f637",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9193bc4285c232400a26448ca75095c44c13f637"
    }
  ],
  "stats": {
    "total": 218,
    "additions": 120,
    "deletions": 98
  },
  "files": [
    {
      "sha": "0e4265522f447c69cb579950e913cef32d77332d",
      "filename": "gprof/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/ChangeLog?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -1,3 +1,24 @@\n+2021-03-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* basic_blocks.c: Replace bfd_boolean with bool, FALSE with false,\n+\tand TRUE with true throughout.\n+\t* basic_blocks.h: Likewise.\n+\t* cg_arcs.c: Likewise.\n+\t* cg_dfn.c: Likewise.\n+\t* cg_print.c: Likewise.\n+\t* corefile.c: Likewise.\n+\t* gmon_io.c: Likewise.\n+\t* gprof.c: Likewise.\n+\t* gprof.h: Likewise.\n+\t* hist.c: Likewise.\n+\t* mips.c: Likewise.\n+\t* source.c: Likewise.\n+\t* source.h: Likewise.\n+\t* sym_ids.c: Likewise.\n+\t* sym_ids.h: Likewise.\n+\t* symtab.h: Likewise.\n+\t* vax.c: Likewise.\n+\n 2021-01-13  Alan Modra  <amodra@gmail.com>\n \n \t* Makefile.in: Regenerate."
    },
    {
      "sha": "586833879a22669ca8c8aaec149dae7eada79315",
      "filename": "gprof/basic_blocks.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/basic_blocks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/basic_blocks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/basic_blocks.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -39,7 +39,7 @@ static void fskip_string (FILE *);\n static void annotate_with_count (char *, unsigned int, int, PTR);\n \n /* Default option values:  */\n-bfd_boolean bb_annotate_all_lines = FALSE;\n+bool bb_annotate_all_lines = false;\n unsigned long bb_min_calls = 1;\n int bb_table_length = 10;\n \n@@ -144,8 +144,8 @@ bb_read_rec (FILE *ifp, const char *filename)\n \t     care about anymore.  */\n \t  if ((fread (&ncalls, sizeof (ncalls), 1, ifp) != 1)\n \t      || (fread (&addr, sizeof (addr), 1, ifp) != 1)\n-\t      || (fskip_string (ifp), FALSE)\n-\t      || (fskip_string (ifp), FALSE)\n+\t      || (fskip_string (ifp), false)\n+\t      || (fskip_string (ifp), false)\n \t      || (fread (&line_num, sizeof (line_num), 1, ifp) != 1))\n \t    {\n \t      perror (filename);\n@@ -187,11 +187,11 @@ bb_read_rec (FILE *ifp, const char *filename)\n \t}\n       else\n \t{\n-\t  static bfd_boolean user_warned = FALSE;\n+\t  static bool user_warned = false;\n \n \t  if (!user_warned)\n \t    {\n-\t      user_warned = TRUE;\n+\t      user_warned = true;\n \t      fprintf (stderr,\n   _(\"%s: warning: ignoring basic-block exec counts (use -l or --line)\\n\"),\n \t\t       whoami);\n@@ -254,7 +254,7 @@ print_exec_counts (void)\n   unsigned int i, j, len;\n \n   if (first_output)\n-    first_output = FALSE;\n+    first_output = false;\n   else\n     printf (\"\\f\\n\");\n "
    },
    {
      "sha": "3524d928ecbfd215fdfb3a05620fdb9f6772e7fb",
      "filename": "gprof/basic_blocks.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/basic_blocks.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/basic_blocks.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/basic_blocks.h?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -22,7 +22,7 @@\n #define basic_blocks_h\n \n /* Options:  */\n-extern bfd_boolean bb_annotate_all_lines; /* Force annotation of all lines?  */\n+extern bool bb_annotate_all_lines;\t/* Force annotation of all lines?  */\n extern int bb_table_length;\t\t/* Length of most-used bb table.  */\n extern unsigned long bb_min_calls;\t/* Minimum execution count.  */\n "
    },
    {
      "sha": "77534ae78e8162d1c82078faff050a3993ddc318",
      "filename": "gprof/cg_arcs.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_arcs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_arcs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/cg_arcs.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -308,7 +308,7 @@ cycle_link (void)\n       ++num;\n       ++cyc;\n       sym_init (cyc);\n-      cyc->cg.print_flag = TRUE;\t/* should this be printed? */\n+      cyc->cg.print_flag = true;\t/* should this be printed? */\n       cyc->cg.top_order = DFN_NAN;\t/* graph call chain top-sort order */\n       cyc->cg.cyc.num = num;\t/* internal number of cycle on */\n       cyc->cg.cyc.head = cyc;\t/* pointer to head of cycle */\n@@ -366,7 +366,7 @@ inherit_flags (Sym *child)\n   if (child == head)\n     {\n       /* just a regular child, check its parents: */\n-      child->cg.print_flag = FALSE;\n+      child->cg.print_flag = false;\n       child->cg.prop.fract = 0.0;\n       for (arc = child->cg.parents; arc; arc = arc->next_parent)\n \t{\n@@ -394,7 +394,7 @@ inherit_flags (Sym *child)\n        * Its a member of a cycle, look at all parents from outside\n        * the cycle.\n        */\n-      head->cg.print_flag = FALSE;\n+      head->cg.print_flag = false;\n       head->cg.prop.fract = 0.0;\n       for (member = head->cg.cyc.next; member; member = member->cg.cyc.next)\n \t{\n@@ -471,7 +471,7 @@ propagate_flags (Sym **symbols)\n \t      || (syms[INCL_GRAPH].len == 0\n \t\t  && !sym_lookup (&syms[EXCL_GRAPH], child->addr)))\n \t    {\n-\t      child->cg.print_flag = TRUE;\n+\t      child->cg.print_flag = true;\n \t    }\n \t}\n       else\n@@ -484,7 +484,7 @@ propagate_flags (Sym **symbols)\n \t  if (!sym_lookup (&syms[INCL_GRAPH], child->addr)\n \t      && sym_lookup (&syms[EXCL_GRAPH], child->addr))\n \t    {\n-\t      child->cg.print_flag = FALSE;\n+\t      child->cg.print_flag = false;\n \t    }\n \t}\n       if (child->cg.prop.fract == 0.0)\n@@ -617,7 +617,7 @@ cg_assemble (void)\n       parent->cg.prop.fract = 0.0;\n       parent->cg.prop.self = 0.0;\n       parent->cg.prop.child = 0.0;\n-      parent->cg.print_flag = FALSE;\n+      parent->cg.print_flag = false;\n       parent->cg.top_order = DFN_NAN;\n       parent->cg.cyc.num = 0;\n       parent->cg.cyc.head = parent;"
    },
    {
      "sha": "426bf43f78ea70df206fb07722f9fb629d885a9b",
      "filename": "gprof/cg_dfn.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_dfn.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_dfn.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/cg_dfn.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -44,8 +44,8 @@ typedef struct\n   }\n DFN_Stack;\n \n-static bfd_boolean is_numbered (Sym *);\n-static bfd_boolean is_busy (Sym *);\n+static bool is_numbered (Sym *);\n+static bool is_busy (Sym *);\n static void find_cycle (Sym *);\n static void pre_visit (Sym *);\n static void post_visit (Sym *);\n@@ -59,7 +59,7 @@ int dfn_counter = DFN_NAN;\n /*\n  * Is CHILD already numbered?\n  */\n-static bfd_boolean\n+static bool\n is_numbered (Sym *child)\n {\n   return child->cg.top_order != DFN_NAN && child->cg.top_order != DFN_BUSY;\n@@ -69,14 +69,14 @@ is_numbered (Sym *child)\n /*\n  * Is CHILD already busy?\n  */\n-static bfd_boolean\n+static bool\n is_busy (Sym *child)\n {\n   if (child->cg.top_order == DFN_NAN)\n     {\n-      return FALSE;\n+      return false;\n     }\n-  return TRUE;\n+  return true;\n }\n \n "
    },
    {
      "sha": "73b195d95911983184c1d1e1c36f0573111aab41",
      "filename": "gprof/cg_print.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/cg_print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/cg_print.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -64,7 +64,7 @@ static void\n print_header (void)\n {\n   if (first_output)\n-    first_output = FALSE;\n+    first_output = false;\n   else\n     printf (\"\\f\\n\");\n "
    },
    {
      "sha": "831d589f29c85d45072324bcd46df9e983c31607",
      "filename": "gprof/corefile.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/corefile.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -45,7 +45,7 @@ unsigned int symbol_map_count;\n \n static void read_function_mappings (const char *);\n static int core_sym_class (asymbol *);\n-static bfd_boolean get_src_info\n+static bool get_src_info\n   (bfd_vma, const char **, const char **, int *);\n \n extern void i386_find_call  (Sym *, bfd_vma, bfd_vma);\n@@ -332,7 +332,7 @@ find_call (Sym *parent, bfd_vma p_lowpc, bfd_vma p_highpc)\n \t       whoami, bfd_printable_name(core_bfd));\n \n       /* Don't give the error more than once.  */\n-      ignore_direct_calls = FALSE;\n+      ignore_direct_calls = false;\n     }\n }\n \n@@ -453,8 +453,9 @@ core_sym_class (asymbol *sym)\n \n /* Get whatever source info we can get regarding address ADDR.  */\n \n-static bfd_boolean\n-get_src_info (bfd_vma addr, const char **filename, const char **name, int *line_num)\n+static bool\n+get_src_info (bfd_vma addr, const char **filename, const char **name,\n+\t      int *line_num)\n {\n   const char *fname = 0, *func_name = 0;\n   int l = 0;\n@@ -469,15 +470,15 @@ get_src_info (bfd_vma addr, const char **filename, const char **name, int *line_\n       *filename = fname;\n       *name = func_name;\n       *line_num = l;\n-      return TRUE;\n+      return true;\n     }\n   else\n     {\n       DBG (AOUTDEBUG, printf (\"[get_src_info] no info for 0x%lx (%s:%d,%s)\\n\",\n \t\t\t      (unsigned long) addr,\n \t\t\t      fname ? fname : \"<unknown>\", l,\n \t\t\t      func_name ? func_name : \"<unknown>\"));\n-      return FALSE;\n+      return false;\n     }\n }\n \n@@ -564,8 +565,8 @@ core_create_syms_from (const char * sym_table_file)\n       symtab.limit->name = (char *) xmalloc (strlen (name) + 1);\n       strcpy ((char *) symtab.limit->name, name);\n       symtab.limit->mapped = 0;\n-      symtab.limit->is_func = TRUE;\n-      symtab.limit->is_bb_head = TRUE;\n+      symtab.limit->is_func = true;\n+      symtab.limit->is_bb_head = true;\n       symtab.limit->is_static = (type == 't');\n       min_vma = MIN (symtab.limit->addr, min_vma);\n       max_vma = MAX (symtab.limit->addr, max_vma);\n@@ -724,10 +725,10 @@ core_create_function_syms (void)\n \n       symtab.limit->is_func = (!core_has_func_syms\n \t\t\t       || (core_syms[i]->flags & BSF_FUNCTION) != 0);\n-      symtab.limit->is_bb_head = TRUE;\n+      symtab.limit->is_bb_head = true;\n \n       if (cxxclass == 't')\n-\tsymtab.limit->is_static = TRUE;\n+\tsymtab.limit->is_static = true;\n \n       /* Keep track of the minimum and maximum vma addresses used by all\n \t symbols.  When computing the max_vma, use the ending address of the"
    },
    {
      "sha": "a800ecbf9225c9848f982e9d59d2692a7b8d9d89",
      "filename": "gprof/gmon_io.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gmon_io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gmon_io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/gmon_io.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -586,7 +586,7 @@ gmon_out_read (const char *filename)\n       printf (nbbs == 1 ?\n \t      _(\"\\t%d basic-block count record\\n\") :\n \t      _(\"\\t%d basic-block count records\\n\"), nbbs);\n-      first_output = FALSE;\n+      first_output = false;\n     }\n }\n "
    },
    {
      "sha": "678299e7b0e35997bbb151ea65ac22d67894dd73",
      "filename": "gprof/gprof.c",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gprof.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gprof.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/gprof.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -59,19 +59,19 @@ long hz = HZ_WRONG;\n int debug_level = 0;\n int output_style = 0;\n int output_width = 80;\n-bfd_boolean bsd_style_output = FALSE;\n-bfd_boolean demangle = TRUE;\n-bfd_boolean ignore_direct_calls = FALSE;\n-bfd_boolean ignore_static_funcs = FALSE;\n-bfd_boolean ignore_zeros = TRUE;\n-bfd_boolean line_granularity = FALSE;\n-bfd_boolean print_descriptions = TRUE;\n-bfd_boolean print_path = FALSE;\n-bfd_boolean ignore_non_functions = FALSE;\n-bfd_boolean inline_file_names = FALSE;\n+bool bsd_style_output = false;\n+bool demangle = true;\n+bool ignore_direct_calls = false;\n+bool ignore_static_funcs = false;\n+bool ignore_zeros = true;\n+bool line_granularity = false;\n+bool print_descriptions = true;\n+bool print_path = false;\n+bool ignore_non_functions = false;\n+bool inline_file_names = false;\n File_Format file_format = FF_AUTO;\n \n-bfd_boolean first_output = TRUE;\n+bool first_output = true;\n \n char copyright[] =\n  \"@(#) Copyright (c) 1983 Regents of the University of California.\\n\\\n@@ -211,7 +211,7 @@ main (int argc, char **argv)\n       switch (ch)\n \t{\n \tcase 'a':\n-\t  ignore_static_funcs = TRUE;\n+\t  ignore_static_funcs = true;\n \t  break;\n \tcase 'A':\n \t  if (optarg)\n@@ -222,14 +222,14 @@ main (int argc, char **argv)\n \t  user_specified |= STYLE_ANNOTATED_SOURCE;\n \t  break;\n \tcase 'b':\n-\t  print_descriptions = FALSE;\n+\t  print_descriptions = false;\n \t  break;\n \tcase 'B':\n \t  output_style |= STYLE_CALL_GRAPH;\n \t  user_specified |= STYLE_CALL_GRAPH;\n \t  break;\n \tcase 'c':\n-\t  ignore_direct_calls = TRUE;\n+\t  ignore_direct_calls = true;\n \t  break;\n \tcase 'C':\n \t  if (optarg)\n@@ -255,7 +255,7 @@ main (int argc, char **argv)\n #endif\t/* DEBUG */\n \t  break;\n \tcase 'D':\n-\t  ignore_non_functions = TRUE;\n+\t  ignore_non_functions = true;\n \t  break;\n \tcase 'E':\n \t  sym_id_add (optarg, EXCL_TIME);\n@@ -304,10 +304,10 @@ main (int argc, char **argv)\n \t  sym_id_add (optarg, EXCL_ARCS);\n \t  break;\n \tcase 'l':\n-\t  line_granularity = TRUE;\n+\t  line_granularity = true;\n \t  break;\n \tcase 'L':\n-\t  print_path = TRUE;\n+\t  print_path = true;\n \t  break;\n \tcase 'm':\n \t  bb_min_calls = (unsigned long) strtoul (optarg, (char **) NULL, 10);\n@@ -421,7 +421,7 @@ main (int argc, char **argv)\n \t    }\n \t  break;\n \tcase 'T':\n-\t  bsd_style_output = TRUE;\n+\t  bsd_style_output = true;\n \t  break;\n \tcase 'v':\n \t  /* This output is intended to follow the GNU standards document.  */\n@@ -438,13 +438,13 @@ This program is free software.  This program has absolutely no warranty.\\n\"));\n \t    }\n \t  break;\n \tcase 'x':\n-\t  bb_annotate_all_lines = TRUE;\n+\t  bb_annotate_all_lines = true;\n \t  break;\n \tcase 'y':\n-\t  create_annotation_files = TRUE;\n+\t  create_annotation_files = true;\n \t  break;\n \tcase 'z':\n-\t  ignore_zeros = FALSE;\n+\t  ignore_zeros = false;\n \t  break;\n \tcase 'Z':\n \t  if (optarg)\n@@ -459,7 +459,7 @@ This program is free software.  This program has absolutely no warranty.\\n\"));\n \t  user_specified |= STYLE_EXEC_COUNTS;\n \t  break;\n \tcase OPTION_DEMANGLE:\n-\t  demangle = TRUE;\n+\t  demangle = true;\n \t  if (optarg != NULL)\n \t    {\n \t      enum demangling_styles style;\n@@ -477,10 +477,10 @@ This program is free software.  This program has absolutely no warranty.\\n\"));\n \t   }\n \t  break;\n \tcase OPTION_NO_DEMANGLE:\n-\t  demangle = FALSE;\n+\t  demangle = false;\n \t  break;\n \tcase OPTION_INLINE_FILE_NAMES:\n-\t  inline_file_names = TRUE;\n+\t  inline_file_names = true;\n \t  break;\n \tdefault:\n \t  usage (stderr, 1);"
    },
    {
      "sha": "e1ce282437a2c2efb7822c522736a71948d680b4",
      "filename": "gprof/gprof.h",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gprof.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/gprof.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/gprof.h?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -117,20 +117,20 @@ extern long hz;\t\t\t/* ticks per second */\n extern int debug_level;\t\t\t/* debug level */\n extern int output_style;\n extern int output_width;\t\t/* controls column width in index */\n-extern bfd_boolean bsd_style_output;\t/* as opposed to FSF style output */\n-extern bfd_boolean demangle;\t\t/* demangle symbol names? */\n-extern bfd_boolean ignore_direct_calls;\t/* don't count direct calls */\n-extern bfd_boolean ignore_static_funcs;\t/* suppress static functions */\n-extern bfd_boolean ignore_zeros;\t/* ignore unused symbols/files */\n-extern bfd_boolean line_granularity;\t/* function or line granularity? */\n-extern bfd_boolean print_descriptions;\t/* output profile description */\n-extern bfd_boolean print_path;\t\t/* print path or just filename? */\n-extern bfd_boolean ignore_non_functions; /* Ignore non-function symbols.  */\n-extern bfd_boolean inline_file_names;\t/* print file names after symbols */\n+extern bool bsd_style_output;\t\t/* as opposed to FSF style output */\n+extern bool demangle;\t\t\t/* demangle symbol names? */\n+extern bool ignore_direct_calls;\t/* don't count direct calls */\n+extern bool ignore_static_funcs;\t/* suppress static functions */\n+extern bool ignore_zeros;\t\t/* ignore unused symbols/files */\n+extern bool line_granularity;\t\t/* function or line granularity? */\n+extern bool print_descriptions;\t\t/* output profile description */\n+extern bool print_path;\t\t\t/* print path or just filename? */\n+extern bool ignore_non_functions;\t/* Ignore non-function symbols.  */\n+extern bool inline_file_names;\t\t/* print file names after symbols */\n \n extern File_Format file_format;\t\t/* requested file format */\n \n-extern bfd_boolean first_output;\t/* no output so far? */\n+extern bool first_output;\t\t/* no output so far? */\n \n extern void done (int status) ATTRIBUTE_NORETURN;\n "
    },
    {
      "sha": "fd370f682a3ce9bfc5452edba52f089b7c242026",
      "filename": "gprof/hist.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/hist.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/hist.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/hist.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -571,7 +571,7 @@ hist_print (void)\n   bfd_vma addr;\n \n   if (first_output)\n-    first_output = FALSE;\n+    first_output = false;\n   else\n     printf (\"\\f\\n\");\n "
    },
    {
      "sha": "e198a6f411a54648ba035d05ac5e1d7d862367f9",
      "filename": "gprof/mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/mips.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -45,11 +45,11 @@ mips_find_call (Sym *parent, bfd_vma p_lowpc, bfd_vma p_highpc)\n   unsigned int op;\n   int offset;\n   Sym *child;\n-  static bfd_boolean inited = FALSE;\n+  static bool inited = false;\n \n   if (!inited)\n     {\n-      inited = TRUE;\n+      inited = true;\n       sym_init (&indirect_child);\n       indirect_child.name = _(\"<indirect child>\");\n       indirect_child.cg.prop.fract = 1.0;"
    },
    {
      "sha": "e648a3a7465d571d316f15cbe5fc0c98984c735f",
      "filename": "gprof/source.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/source.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -28,7 +28,7 @@\n #define EXT_ANNO \"-ann\"\t\t/* Postfix of annotated files.  */\n \n /* Default option values.  */\n-bfd_boolean create_annotation_files = FALSE;\n+bool create_annotation_files = false;\n \n Search_List src_search_list = {0, 0};\n Source_File *first_src_file = 0;\n@@ -93,9 +93,9 @@ annotate_source (Source_File *sf, unsigned int max_width,\n      void (*annote) (char *, unsigned int, int, void *),\n      void *arg)\n {\n-  static bfd_boolean first_file = TRUE;\n+  static bool first_file = true;\n   int i, line_num, nread;\n-  bfd_boolean new_line;\n+  bool new_line;\n   char buf[8192];\n   char fname[PATH_MAX];\n   char *annotation, *name_only;\n@@ -110,7 +110,7 @@ annotate_source (Source_File *sf, unsigned int max_width,\n     sle = 0;\t\t\t/* Don't use search list for absolute paths.  */\n \n   name_only = 0;\n-  while (TRUE)\n+  while (true)\n     {\n       DBG (SRCDEBUG, printf (\"[annotate_source]: looking for %s, trying %s\\n\",\n \t\t\t     sf->name, fname));\n@@ -225,12 +225,12 @@ annotate_source (Source_File *sf, unsigned int max_width,\n   if (ofp == stdout)\n     {\n       if (first_file)\n-\tfirst_file = FALSE;\n+\tfirst_file = false;\n       else\n \tfputc ('\\n', ofp);\n \n       if (first_output)\n-\tfirst_output = FALSE;\n+\tfirst_output = false;\n       else\n \tfprintf (ofp, \"\\f\\n\");\n \n@@ -239,7 +239,7 @@ annotate_source (Source_File *sf, unsigned int max_width,\n \n   annotation = (char *) xmalloc (max_width + 1);\n   line_num = 1;\n-  new_line = TRUE;\n+  new_line = true;\n \n   while ((nread = fread (buf, 1, sizeof (buf), ifp)) > 0)\n     {"
    },
    {
      "sha": "fb4e9dd72ec8ecbc3430fefde55645b9d129bc31",
      "filename": "gprof/source.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/source.h?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -36,7 +36,7 @@ Source_File;\n /* Options.  */\n \n /* Create annotated output files?  */\n-extern bfd_boolean create_annotation_files;\n+extern bool create_annotation_files;\n \n /* List of directories to search for source files.  */\n extern Search_List src_search_list;"
    },
    {
      "sha": "d712d315fa9e9d0de6d319fc80a4a32bc6a95f9b",
      "filename": "gprof/sym_ids.c",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/sym_ids.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/sym_ids.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/sym_ids.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -42,7 +42,7 @@ struct sym_id\n     struct sym_id *next;\n     char *spec;\t\t\t/* Parsing modifies this.  */\n     Table_Id which_table;\n-    bfd_boolean has_right;\n+    bool has_right;\n \n     struct match left, right;\n   };\n@@ -53,10 +53,10 @@ static void parse_spec\n   (char *, Sym *);\n static void parse_id\n   (struct sym_id *);\n-static bfd_boolean match\n+static bool match\n   (Sym *, Sym *);\n static void extend_match\n-  (struct match *, Sym *, Sym_Table *, bfd_boolean);\n+  (struct match *, Sym *, Sym_Table *, bool);\n \n \n Sym_Table syms[NUM_TABLES];\n@@ -181,7 +181,7 @@ parse_id (struct sym_id *id)\n     {\n       parse_spec (slash + 1, &id->right.sym);\n       *slash = '\\0';\n-      id->has_right = TRUE;\n+      id->has_right = true;\n     }\n   parse_spec (id->spec, &id->left.sym);\n \n@@ -218,27 +218,27 @@ parse_id (struct sym_id *id)\n \n /* Return TRUE iff PATTERN matches SYM.  */\n \n-static bfd_boolean\n+static bool\n match (Sym *pattern, Sym *sym)\n {\n   if (pattern->file && pattern->file != sym->file)\n-    return FALSE;\n+    return false;\n   if (pattern->line_num && pattern->line_num != sym->line_num)\n-    return FALSE;\n+    return false;\n   if (pattern->name)\n     {\n       const char *sym_name = sym->name;\n       if (*sym_name && bfd_get_symbol_leading_char (core_bfd) == *sym_name)\n \tsym_name++;\n       if (strcmp (pattern->name, sym_name) != 0)\n-\treturn FALSE;\n+\treturn false;\n     }\n-  return TRUE;\n+  return true;\n }\n \n \n static void\n-extend_match (struct match *m, Sym *sym, Sym_Table *tab, bfd_boolean second_pass)\n+extend_match (struct match *m, Sym *sym, Sym_Table *tab, bool second_pass)\n {\n   if (m->prev_match != sym - 1)\n     {\n@@ -289,10 +289,10 @@ sym_id_parse (void)\n       for (id = id_list; id; id = id->next)\n \t{\n \t  if (match (&id->left.sym, sym))\n-\t    extend_match (&id->left, sym, &syms[id->which_table], FALSE);\n+\t    extend_match (&id->left, sym, &syms[id->which_table], false);\n \n \t  if (id->has_right && match (&id->right.sym, sym))\n-\t    extend_match (&id->right, sym, &right_ids, FALSE);\n+\t    extend_match (&id->right, sym, &right_ids, false);\n \t}\n     }\n \n@@ -320,10 +320,10 @@ sym_id_parse (void)\n       for (id = id_list; id; id = id->next)\n \t{\n \t  if (match (&id->left.sym, sym))\n-\t    extend_match (&id->left, sym, &syms[id->which_table], TRUE);\n+\t    extend_match (&id->left, sym, &syms[id->which_table], true);\n \n \t  if (id->has_right && match (&id->right.sym, sym))\n-\t    extend_match (&id->right, sym, &right_ids, TRUE);\n+\t    extend_match (&id->right, sym, &right_ids, true);\n \t}\n     }\n \n@@ -371,7 +371,7 @@ sym_id_parse (void)\n    time requesting -k a/b.  Fortunately, those symbol tables don't get\n    very big (the user has to type them!), so a linear search is probably\n    tolerable.  */\n-bfd_boolean\n+bool\n sym_id_arc_is_present (Sym_Table *sym_tab, Sym *from, Sym *to)\n {\n   Sym *sym;\n@@ -380,8 +380,8 @@ sym_id_arc_is_present (Sym_Table *sym_tab, Sym *from, Sym *to)\n     {\n       if (from->addr >= sym->addr && from->addr <= sym->end_addr\n \t  && arc_lookup (sym, to))\n-\treturn TRUE;\n+\treturn true;\n     }\n \n-  return FALSE;\n+  return false;\n }"
    },
    {
      "sha": "7d1ecf641d676498ac53aaf1a1dc15d30bbeb9f0",
      "filename": "gprof/sym_ids.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/sym_ids.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/sym_ids.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/sym_ids.h?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -38,6 +38,6 @@ extern Sym_Table syms[NUM_TABLES];\n \n extern void sym_id_add (const char *, Table_Id);\n extern void sym_id_parse (void);\n-extern bfd_boolean sym_id_arc_is_present (Sym_Table *, Sym *, Sym *);\n+extern bool sym_id_arc_is_present (Sym_Table *, Sym *, Sym *);\n \n #endif /* sym_ids_h */"
    },
    {
      "sha": "113440f086bea7daca6bf7951388cf5b2cfc27bf",
      "filename": "gprof/symtab.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/symtab.h?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -78,7 +78,7 @@ typedef struct sym\n \tdouble child_time;\t/* Cumulative ticks in children.  */\n \tint index;\t\t/* Index in the graph list.  */\n \tint top_order;\t\t/* Graph call chain top-sort order.  */\n-\tbfd_boolean print_flag;\t/* Should this be printed?  */\n+\tbool print_flag;\t/* Should this be printed?  */\n \tstruct\n \t  {\n \t    double fract;\t/* What % of time propagates.  */"
    },
    {
      "sha": "92942353b48cfd1aa17dd8889f94922c0a78941f",
      "filename": "gprof/vax.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/faa7a26040c617a6d29f601998b99a1da882c672/gprof/vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/faa7a26040c617a6d29f601998b99a1da882c672/gprof/vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/vax.c?ref=faa7a26040c617a6d29f601998b99a1da882c672",
      "patch": "@@ -237,11 +237,11 @@ vax_find_call (Sym *parent, bfd_vma p_lowpc, bfd_vma p_highpc)\n   operandenum mode;\n   operandenum firstmode;\n   bfd_vma pc, destpc;\n-  static bfd_boolean inited = FALSE;\n+  static bool inited = false;\n \n   if (!inited)\n     {\n-      inited = TRUE;\n+      inited = true;\n       sym_init (&indirectchild);\n       indirectchild.cg.prop.fract = 1.0;\n       indirectchild.cg.cyc.head = &indirectchild;"
    }
  ]
}