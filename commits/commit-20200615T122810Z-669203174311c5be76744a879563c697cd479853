{
  "sha": "669203174311c5be76744a879563c697cd479853",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjY5MjAzMTc0MzExYzViZTc2NzQ0YTg3OTU2M2M2OTdjZDQ3OTg1Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:10Z"
    },
    "message": "Change target_read_string API\n\nThis simplifies the target_read_string API a bit.\n\nNote that some code was using safe_strerror on the error codes\nreturned by target_read_string.  It seems to me that this is incorrect\n(if it was ever correct, it must have been quite a long time ago).\n\ngdb/ChangeLog\n2020-06-15  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (windows_nat::handle_output_debug_string):\n\tUpdate.\n\t(windows_nat::handle_ms_vc_exception): Update.\n\t* target.h (target_read_string): Change API.\n\t* target.c (target_read_string): Change API.\n\t* solib-svr4.c (open_symbol_file_object, svr4_read_so_list):\n\tUpdate.\n\t* solib-frv.c (frv_current_sos): Update.\n\t* solib-dsbt.c (dsbt_current_sos): Update.\n\t* solib-darwin.c (darwin_current_sos): Update.\n\t* linux-thread-db.c (inferior_has_bug): Update.\n\t* expprint.c (print_subexp_standard): Update.\n\t* ada-lang.c (ada_main_name, ada_tag_name_from_tsd)\n\t(ada_exception_message_1): Update.",
    "tree": {
      "sha": "77b21ddbec4501e2cf04dafd9987a347d66e8cc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/77b21ddbec4501e2cf04dafd9987a347d66e8cc2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/669203174311c5be76744a879563c697cd479853",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/669203174311c5be76744a879563c697cd479853",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/669203174311c5be76744a879563c697cd479853",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/669203174311c5be76744a879563c697cd479853/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a5d871ddaf2aa8462922ed25b0c0dc7f02128cb9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5d871ddaf2aa8462922ed25b0c0dc7f02128cb9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a5d871ddaf2aa8462922ed25b0c0dc7f02128cb9"
    }
  ],
  "stats": {
    "total": 167,
    "additions": 76,
    "deletions": 91
  },
  "files": [
    {
      "sha": "08362f291dee0ef5a811474e5fcae3641782904f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -1,3 +1,20 @@\n+2020-06-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (windows_nat::handle_output_debug_string):\n+\tUpdate.\n+\t(windows_nat::handle_ms_vc_exception): Update.\n+\t* target.h (target_read_string): Change API.\n+\t* target.c (target_read_string): Change API.\n+\t* solib-svr4.c (open_symbol_file_object, svr4_read_so_list):\n+\tUpdate.\n+\t* solib-frv.c (frv_current_sos): Update.\n+\t* solib-dsbt.c (dsbt_current_sos): Update.\n+\t* solib-darwin.c (darwin_current_sos): Update.\n+\t* linux-thread-db.c (inferior_has_bug): Update.\n+\t* expprint.c (print_subexp_standard): Update.\n+\t* ada-lang.c (ada_main_name, ada_tag_name_from_tsd)\n+\t(ada_exception_message_1): Update.\n+\n 2020-06-15  Tom Tromey  <tromey@adacore.com>\n \n \t* linux-tdep.c (dump_mapping_p): Use target_read_memory."
    },
    {
      "sha": "c5e28c5b6691499ab40eea9b90f0703825a269fd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 20,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -865,18 +865,11 @@ ada_main_name (void)\n \n   if (msym.minsym != NULL)\n     {\n-      CORE_ADDR main_program_name_addr;\n-      int err_code;\n-\n-      main_program_name_addr = BMSYMBOL_VALUE_ADDRESS (msym);\n+      CORE_ADDR main_program_name_addr = BMSYMBOL_VALUE_ADDRESS (msym);\n       if (main_program_name_addr == 0)\n         error (_(\"Invalid address for Ada main program name.\"));\n \n-      target_read_string (main_program_name_addr, &main_program_name,\n-                          1024, &err_code);\n-\n-      if (err_code != 0)\n-        return NULL;\n+      main_program_name = target_read_string (main_program_name_addr, 1024);\n       return main_program_name.get ();\n     }\n \n@@ -6729,10 +6722,9 @@ ada_tag_name_from_tsd (struct value *tsd)\n   val = ada_value_struct_elt (tsd, \"expanded_name\", 1);\n   if (val == NULL)\n     return NULL;\n-  gdb::unique_xmalloc_ptr<char> buffer;\n-  int err;\n-  if (target_read_string (value_as_address (val), &buffer, INT_MAX, &err) == 0\n-      || err != 0)\n+  gdb::unique_xmalloc_ptr<char> buffer\n+    = target_read_string (value_as_address (val), INT_MAX);\n+  if (buffer == nullptr)\n     return nullptr;\n \n   for (p = buffer.get (); *p != '\\0'; ++p)\n@@ -12109,13 +12101,7 @@ ada_exception_message_1 (void)\n   if (e_msg_len <= 0)\n     return NULL;\n \n-  gdb::unique_xmalloc_ptr<char> e_msg;\n-  int err;\n-  if (target_read_string (value_address (e_msg_val), &e_msg, INT_MAX, &err) == 0\n-      || err != 0)\n-    return nullptr;\n-\n-  return e_msg;\n+  return target_read_string (value_address (e_msg_val), INT_MAX);\n }\n \n /* Same as ada_exception_message_1, except that all exceptions are"
    },
    {
      "sha": "5427a56f6ae0323845f44494f24f81d413959b29",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -241,18 +241,14 @@ print_subexp_standard (struct expression *exp, int *pos,\n \n     case OP_OBJC_MSGCALL:\n       {\t\t\t/* Objective C message (method) call.  */\n-\tgdb::unique_xmalloc_ptr<char> selector;\n-\n \t(*pos) += 3;\n \tnargs = longest_to_int (exp->elts[pc + 2].longconst);\n \tfprintf_unfiltered (stream, \"[\");\n \tprint_subexp (exp, pos, stream, PREC_SUFFIX);\n-\tif (0 == target_read_string (exp->elts[pc + 1].longconst,\n-\t\t\t\t     &selector, 1024, NULL))\n-\t  {\n-\t    error (_(\"bad selector\"));\n-\t    return;\n-\t  }\n+\tgdb::unique_xmalloc_ptr<char> selector\n+\t  = target_read_string (exp->elts[pc + 1].longconst, 1024);\n+\tif (selector == nullptr)\n+\t  error (_(\"bad selector\"));\n \tif (nargs)\n \t  {\n \t    char *s, *nextS;"
    },
    {
      "sha": "b3cda05cd6e0bfc6a602044ab5150bf22d3c2f55",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -472,16 +472,17 @@ inferior_has_bug (const char *ver_symbol, int ver_major_min, int ver_minor_min)\n {\n   struct bound_minimal_symbol version_msym;\n   CORE_ADDR version_addr;\n-  gdb::unique_xmalloc_ptr<char> version;\n-  int err, got, retval = 0;\n+  int got, retval = 0;\n \n   version_msym = lookup_minimal_symbol (ver_symbol, NULL, NULL);\n   if (version_msym.minsym == NULL)\n     return 0;\n \n   version_addr = BMSYMBOL_VALUE_ADDRESS (version_msym);\n-  got = target_read_string (version_addr, &version, 32, &err);\n-  if (err == 0 && memchr (version.get (), 0, got) == version.get () + got - 1)\n+  gdb::unique_xmalloc_ptr<char> version\n+    = target_read_string (version_addr, 32, &got);\n+  if (version != nullptr\n+      && memchr (version.get (), 0, got) == version.get () + got - 1)\n     {\n       int major, minor;\n "
    },
    {
      "sha": "3806c7e48cca59e96c0dfaa99dd1f548e9bd8eac",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -251,8 +251,6 @@ darwin_current_sos (void)\n       CORE_ADDR path_addr;\n       struct mach_o_header_external hdr;\n       unsigned long hdr_val;\n-      gdb::unique_xmalloc_ptr<char> file_path;\n-      int errcode;\n \n       /* Read image info from inferior.  */\n       if (target_read_memory (iinfo, buf, image_info_size))\n@@ -275,9 +273,9 @@ darwin_current_sos (void)\n       if (hdr_val == BFD_MACH_O_MH_EXECUTE)\n         continue;\n \n-      target_read_string (path_addr, &file_path,\n-\t\t\t  SO_NAME_MAX_PATH_SIZE - 1, &errcode);\n-      if (errcode)\n+      gdb::unique_xmalloc_ptr<char> file_path\n+\t= target_read_string (path_addr, SO_NAME_MAX_PATH_SIZE - 1);\n+      if (file_path == nullptr)\n \tbreak;\n \n       /* Create and fill the new so_list element.  */"
    },
    {
      "sha": "94a6ac8375438d1758037871735e691cdf0cef13",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -681,8 +681,6 @@ dsbt_current_sos (void)\n \t this in the list of shared objects.  */\n       if (dsbt_index != 0)\n \t{\n-\t  int errcode;\n-\t  gdb::unique_xmalloc_ptr<char> name_buf;\n \t  struct int_elf32_dsbt_loadmap *loadmap;\n \t  struct so_list *sop;\n \t  CORE_ADDR addr;\n@@ -703,12 +701,11 @@ dsbt_current_sos (void)\n \t  addr = extract_unsigned_integer (lm_buf.l_name,\n \t\t\t\t\t   sizeof (lm_buf.l_name),\n \t\t\t\t\t   byte_order);\n-\t  target_read_string (addr, &name_buf, SO_NAME_MAX_PATH_SIZE - 1,\n-\t\t\t      &errcode);\n+\t  gdb::unique_xmalloc_ptr<char> name_buf\n+\t    = target_read_string (addr, SO_NAME_MAX_PATH_SIZE - 1);\n \n-\t  if (errcode != 0)\n-\t    warning (_(\"Can't read pathname for link map entry: %s.\"),\n-\t\t     safe_strerror (errcode));\n+\t  if (name_buf == nullptr)\n+\t    warning (_(\"Can't read pathname for link map entry.\"));\n \t  else\n \t    {\n \t      if (solib_dsbt_debug)"
    },
    {
      "sha": "bce33a3e4d61f287b05a98c755695b73425ed0e0",
      "filename": "gdb/solib-frv.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/solib-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/solib-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-frv.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -376,8 +376,6 @@ frv_current_sos (void)\n \t this in the list of shared objects.  */\n       if (got_addr != mgot)\n \t{\n-\t  int errcode;\n-\t  gdb::unique_xmalloc_ptr<char> name_buf;\n \t  struct int_elf32_fdpic_loadmap *loadmap;\n \t  struct so_list *sop;\n \t  CORE_ADDR addr;\n@@ -404,16 +402,15 @@ frv_current_sos (void)\n \t  addr = extract_unsigned_integer (lm_buf.l_name,\n \t\t\t\t\t   sizeof (lm_buf.l_name),\n \t\t\t\t\t   byte_order);\n-\t  target_read_string (addr, &name_buf, SO_NAME_MAX_PATH_SIZE - 1,\n-\t\t\t      &errcode);\n+\t  gdb::unique_xmalloc_ptr<char> name_buf\n+\t    = target_read_string (addr, SO_NAME_MAX_PATH_SIZE - 1);\n \n \t  if (solib_frv_debug)\n \t    fprintf_unfiltered (gdb_stdlog, \"current_sos: name = %s\\n\",\n \t                        name_buf.get ());\n \t  \n-\t  if (errcode != 0)\n-\t    warning (_(\"Can't read pathname for link map entry: %s.\"),\n-\t\t     safe_strerror (errcode));\n+\t  if (name_buf == nullptr)\n+\t    warning (_(\"Can't read pathname for link map entry.\"));\n \t  else\n \t    {\n \t      strncpy (sop->so_name, name_buf.get (),"
    },
    {
      "sha": "570450c5400619925c8e19d2a0bdec06d328cd8e",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 8,
      "deletions": 14,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -957,8 +957,6 @@ static int\n open_symbol_file_object (int from_tty)\n {\n   CORE_ADDR lm, l_name;\n-  gdb::unique_xmalloc_ptr<char> filename;\n-  int errcode;\n   struct link_map_offsets *lmo = svr4_fetch_link_map_offsets ();\n   struct type *ptr_type = builtin_type (target_gdbarch ())->builtin_data_ptr;\n   int l_name_size = TYPE_LENGTH (ptr_type);\n@@ -993,12 +991,12 @@ open_symbol_file_object (int from_tty)\n     return 0;\t\t/* No filename.  */\n \n   /* Now fetch the filename from target memory.  */\n-  target_read_string (l_name, &filename, SO_NAME_MAX_PATH_SIZE - 1, &errcode);\n+  gdb::unique_xmalloc_ptr<char> filename\n+    = target_read_string (l_name, SO_NAME_MAX_PATH_SIZE - 1);\n \n-  if (errcode)\n+  if (filename == nullptr)\n     {\n-      warning (_(\"failed to read exec filename from attached file: %s\"),\n-\t       safe_strerror (errcode));\n+      warning (_(\"failed to read exec filename from attached file\"));\n       return 0;\n     }\n \n@@ -1297,9 +1295,6 @@ svr4_read_so_list (svr4_info *info, CORE_ADDR lm, CORE_ADDR prev_lm,\n \n   for (; lm != 0; prev_lm = lm, lm = next_lm)\n     {\n-      int errcode;\n-      gdb::unique_xmalloc_ptr<char> buffer;\n-\n       so_list_up newobj (XCNEW (struct so_list));\n \n       lm_info_svr4 *li = lm_info_read (lm).release ();\n@@ -1330,17 +1325,16 @@ svr4_read_so_list (svr4_info *info, CORE_ADDR lm, CORE_ADDR prev_lm,\n \t}\n \n       /* Extract this shared object's name.  */\n-      target_read_string (li->l_name, &buffer, SO_NAME_MAX_PATH_SIZE - 1,\n-\t\t\t  &errcode);\n-      if (errcode != 0)\n+      gdb::unique_xmalloc_ptr<char> buffer\n+\t= target_read_string (li->l_name, SO_NAME_MAX_PATH_SIZE - 1);\n+      if (buffer == nullptr)\n \t{\n \t  /* If this entry's l_name address matches that of the\n \t     inferior executable, then this is not a normal shared\n \t     object, but (most likely) a vDSO.  In this case, silently\n \t     skip it; otherwise emit a warning. */\n \t  if (first_l_name == 0 || li->l_name != first_l_name)\n-\t    warning (_(\"Can't read pathname for load map: %s.\"),\n-\t\t     safe_strerror (errcode));\n+\t    warning (_(\"Can't read pathname for load map.\"));\n \t  continue;\n \t}\n "
    },
    {
      "sha": "e8193b49fa0716679eaff8140ae2b3c3671232e6",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 11,
      "deletions": 15,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -804,28 +804,24 @@ target_xfer_status_to_string (enum target_xfer_status status)\n };\n \n \n-/* target_read_string -- read a null terminated string, up to LEN bytes,\n-   from MEMADDR in target.  Set *ERRNOP to the errno code, or 0 if successful.\n-   Set *STRING to a pointer to malloc'd memory containing the data; the caller\n-   is responsible for freeing it.  Return the number of bytes successfully\n-   read.  */\n+/* See target.h.  */\n \n-int\n-target_read_string (CORE_ADDR memaddr, gdb::unique_xmalloc_ptr<char> *string,\n-\t\t    int len, int *errnop)\n+gdb::unique_xmalloc_ptr<char>\n+target_read_string (CORE_ADDR memaddr, int len, int *bytes_read)\n {\n-  int bytes_read;\n   gdb::unique_xmalloc_ptr<gdb_byte> buffer;\n \n+  int ignore;\n+  if (bytes_read == nullptr)\n+    bytes_read = &ignore;\n+\n   /* Note that the endian-ness does not matter here.  */\n   int errcode = read_string (memaddr, -1, 1, len, BFD_ENDIAN_LITTLE,\n-\t\t\t     &buffer, &bytes_read);\n-\n-  if (errnop != nullptr)\n-    *errnop = errcode;\n+\t\t\t     &buffer, bytes_read);\n+  if (errcode != 0)\n+    return {};\n \n-  string->reset ((char *) buffer.release ());\n-  return bytes_read;\n+  return gdb::unique_xmalloc_ptr<char> ((char *) buffer.release ());\n }\n \n struct target_section_table *"
    },
    {
      "sha": "4e8d4cccd5ceaaba21fd559c82d80d141adedbdc",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -1505,8 +1505,13 @@ int target_supports_disable_randomization (void);\n #define target_can_run_breakpoint_commands() \\\n   (current_top_target ()->can_run_breakpoint_commands) ()\n \n-extern int target_read_string (CORE_ADDR, gdb::unique_xmalloc_ptr<char> *,\n-\t\t\t       int, int *);\n+/* Read a string from target memory at address MEMADDR.  The string\n+   will be at most LEN bytes long (note that excess bytes may be read\n+   in some cases -- but these will not be returned).  Returns nullptr\n+   on error.  */\n+\n+extern gdb::unique_xmalloc_ptr<char> target_read_string\n+  (CORE_ADDR memaddr, int len, int *bytes_read = nullptr);\n \n /* For target_read_memory see target/target.h.  */\n "
    },
    {
      "sha": "c3a4bdc0d473085d525781630e8ca099df4782d2",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/669203174311c5be76744a879563c697cd479853/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/669203174311c5be76744a879563c697cd479853/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=669203174311c5be76744a879563c697cd479853",
      "patch": "@@ -985,13 +985,13 @@ signal_event_command (const char *args, int from_tty)\n int\n windows_nat::handle_output_debug_string (struct target_waitstatus *ourstatus)\n {\n-  gdb::unique_xmalloc_ptr<char> s;\n   int retval = 0;\n \n-  if (!target_read_string\n-\t((CORE_ADDR) (uintptr_t) current_event.u.DebugString.lpDebugStringData,\n-\t &s, 1024, 0)\n-      || !s || !*(s.get ()))\n+  gdb::unique_xmalloc_ptr<char> s\n+    = (target_read_string\n+       ((CORE_ADDR) (uintptr_t) current_event.u.DebugString.lpDebugStringData,\n+\t1024));\n+  if (s == nullptr || !*(s.get ()))\n     /* nothing to do */;\n   else if (!startswith (s.get (), _CYGWIN_SIGNAL_STRING))\n     {\n@@ -1216,10 +1216,8 @@ windows_nat::handle_ms_vc_exception (const EXCEPTION_RECORD *rec)\n       if (named_thread != NULL)\n \t{\n \t  int thread_name_len;\n-\t  gdb::unique_xmalloc_ptr<char> thread_name;\n-\n-\t  thread_name_len = target_read_string (thread_name_target,\n-\t\t\t\t\t\t&thread_name, 1025, NULL);\n+\t  gdb::unique_xmalloc_ptr<char> thread_name\n+\t    = target_read_string (thread_name_target, 1025, &thread_name_len);\n \t  if (thread_name_len > 0)\n \t    {\n \t      thread_name.get ()[thread_name_len - 1] = '\\0';"
    }
  ]
}