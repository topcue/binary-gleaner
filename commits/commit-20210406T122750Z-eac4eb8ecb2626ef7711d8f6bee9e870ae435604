{
  "sha": "eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWFjNGViOGVjYjI2MjZlZjc3MTFkOGY2YmVlOWU4NzBhZTQzNTYwNA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-06T12:27:50Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-06T12:27:50Z"
    },
    "message": "Fix a problem assembling AArch64 sources when a relocation is generated against a symbol that has a defined value.\n\n\tPR 27217\n\t* config/tc-aarch64.c (my_get_expression): Rename to\n\taarch64_get_expression.  Add a fifth argument to enable deferring\n\tof expression resolution.\n\t(parse_typed_reg): Update calls to my_get_expression.\n\t(parse_vector_reg_list): Likewise.\n\t(parse_immediate_expression): Likewise.\n\t(parse_big_immediate): Likewise.\n\t(parse_shift): Likewise.\n\t(parse_shifter_operand_imm): Likewise.\n\t(parse_operands): Likewise.\n\t(parse_shifter_operand_reloc): Update calls to my_get_expression\n\tand call aarch64_force_reloc to determine the value of the new\n\tfifth argument.\n\t(parse_address_main): Likewise.\n\t(parse_half): Likewise.\n\t(parse_adrp): Likewise.\n\t(aarch64_force_reloc): New function.  Contains code extracted from...\n\t(aarch64_force_relocation): ... here.\n\t* testsuite/gas/aarch64/pr27217.s: New test case.\n\t* testsuite/gas/aarch64/pr27217.d: New test driver.",
    "tree": {
      "sha": "fd02dab5fb608d6b4383540e03f36dcd295f9dd8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fd02dab5fb608d6b4383540e03f36dcd295f9dd8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "da0835aebea71232f6b4fb4dea3ee18bdef0c139",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da0835aebea71232f6b4fb4dea3ee18bdef0c139",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/da0835aebea71232f6b4fb4dea3ee18bdef0c139"
    }
  ],
  "stats": {
    "total": 375,
    "additions": 235,
    "deletions": 140
  },
  "files": [
    {
      "sha": "f62e81730538bedbadb895b85a0f58bd8d24547b",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "patch": "@@ -1,3 +1,27 @@\n+2021-04-06  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 27217\n+\t* config/tc-aarch64.c (my_get_expression): Rename to\n+\taarch64_get_expression.  Add a fifth argument to enable deferring\n+\tof expression resolution.\n+\t(parse_typed_reg): Update calls to my_get_expression.\n+\t(parse_vector_reg_list): Likewise.\n+\t(parse_immediate_expression): Likewise.\n+\t(parse_big_immediate): Likewise.\n+\t(parse_shift): Likewise.\n+\t(parse_shifter_operand_imm): Likewise.\n+\t(parse_operands): Likewise.\n+\t(parse_shifter_operand_reloc): Update calls to my_get_expression\n+\tand call aarch64_force_reloc to determine the value of the new\n+\tfifth argument.\n+\t(parse_address_main): Likewise.\n+\t(parse_half): Likewise.\n+\t(parse_adrp): Likewise.\n+\t(aarch64_force_reloc): New function.  Contains code extracted from...\n+\t(aarch64_force_relocation): ... here.\n+\t* testsuite/gas/aarch64/pr27217.s: New test case.\n+\t* testsuite/gas/aarch64/pr27217.d: New test driver.\n+\n 2021-04-06  Jan Beulich  <jbeulich@suse.com>\n \n \t* write.c (fixup_segment): Move add_symbol_segment declaration"
    },
    {
      "sha": "f67ee1e81398832a49ac0c52fb4527af8eb74643",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 180,
      "deletions": 140,
      "changes": 320,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "patch": "@@ -548,53 +548,66 @@ skip_past_char (char **str, char c)\n \n /* Arithmetic expressions (possibly involving symbols).\t */\n \n-static bool in_my_get_expression_p = false;\n+static bool in_aarch64_get_expression = false;\n \n-/* Third argument to my_get_expression.\t */\n-#define GE_NO_PREFIX 0\n-#define GE_OPT_PREFIX 1\n+/* Third argument to aarch64_get_expression.  */\n+#define GE_NO_PREFIX  false\n+#define GE_OPT_PREFIX true\n+\n+/* Fourth argument to aarch64_get_expression.  */\n+#define ALLOW_ABSENT  false\n+#define REJECT_ABSENT true\n+\n+/* Fifth argument to aarch64_get_expression.  */\n+#define NORMAL_RESOLUTION false\n \n /* Return TRUE if the string pointed by *STR is successfully parsed\n    as an valid expression; *EP will be filled with the information of\n-   such an expression.  Otherwise return FALSE.  */\n+   such an expression.  Otherwise return FALSE.\n+\n+   If ALLOW_IMMEDIATE_PREFIX is true then skip a '#' at the start.\n+   If REJECT_ABSENT is true then trat missing expressions as an error.\n+   If DEFER_RESOLUTION is true, then do not resolve expressions against\n+   constant symbols.  Necessary if the expression is part of a fixup\n+   that uses a reloc that must be emitted.  */\n \n static bool\n-my_get_expression (expressionS * ep, char **str, int prefix_mode,\n-\t\t   int reject_absent)\n+aarch64_get_expression (expressionS *  ep,\n+\t\t\tchar **        str,\n+\t\t\tbool           allow_immediate_prefix,\n+\t\t\tbool           reject_absent,\n+\t\t\tbool           defer_resolution)\n {\n   char *save_in;\n   segT seg;\n-  int prefix_present_p = 0;\n+  bool prefix_present = false;\n \n-  switch (prefix_mode)\n+  if (allow_immediate_prefix)\n     {\n-    case GE_NO_PREFIX:\n-      break;\n-    case GE_OPT_PREFIX:\n       if (is_immediate_prefix (**str))\n \t{\n \t  (*str)++;\n-\t  prefix_present_p = 1;\n+\t  prefix_present = true;\n \t}\n-      break;\n-    default:\n-      abort ();\n     }\n \n   memset (ep, 0, sizeof (expressionS));\n \n   save_in = input_line_pointer;\n   input_line_pointer = *str;\n-  in_my_get_expression_p = true;\n-  seg = expression (ep);\n-  in_my_get_expression_p = false;\n+  in_aarch64_get_expression = true;\n+  if (defer_resolution)\n+    seg = deferred_expression (ep);\n+  else\n+    seg = expression (ep);\n+  in_aarch64_get_expression = false;\n \n   if (ep->X_op == O_illegal || (reject_absent && ep->X_op == O_absent))\n     {\n       /* We found a bad expression in md_operand().  */\n       *str = input_line_pointer;\n       input_line_pointer = save_in;\n-      if (prefix_present_p && ! error_p ())\n+      if (prefix_present && ! error_p ())\n \tset_fatal_syntax_error (_(\"bad expression\"));\n       else\n \tset_first_syntax_error (_(\"bad expression\"));\n@@ -605,7 +618,8 @@ my_get_expression (expressionS * ep, char **str, int prefix_mode,\n   if (seg != absolute_section\n       && seg != text_section\n       && seg != data_section\n-      && seg != bss_section && seg != undefined_section)\n+      && seg != bss_section\n+      && seg != undefined_section)\n     {\n       set_syntax_error (_(\"bad segment\"));\n       *str = input_line_pointer;\n@@ -685,7 +699,7 @@ md_atof (int type, char *litP, int *sizeP)\n void\n md_operand (expressionS * exp)\n {\n-  if (in_my_get_expression_p)\n+  if (in_aarch64_get_expression)\n     exp->X_op = O_illegal;\n }\n \n@@ -1062,7 +1076,8 @@ parse_typed_reg (char **ccp, aarch64_reg_type type, aarch64_reg_type *rtype,\n \n       atype.defined |= NTA_HASINDEX;\n \n-      my_get_expression (&exp, &str, GE_NO_PREFIX, 1);\n+      aarch64_get_expression (&exp, &str, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t      NORMAL_RESOLUTION);\n \n       if (exp.X_op != O_constant)\n \t{\n@@ -1265,7 +1280,8 @@ parse_vector_reg_list (char **ccp, aarch64_reg_type type,\n \t{\n \t  expressionS exp;\n \n-\t  my_get_expression (&exp, &str, GE_NO_PREFIX, 1);\n+\t  aarch64_get_expression (&exp, &str, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\t  NORMAL_RESOLUTION);\n \t  if (exp.X_op != O_constant)\n \t    {\n \t      set_first_syntax_error (_(\"constant expression required.\"));\n@@ -2208,7 +2224,8 @@ parse_immediate_expression (char **str, expressionS *exp,\n       return false;\n     }\n \n-  my_get_expression (exp, str, GE_OPT_PREFIX, 1);\n+  aarch64_get_expression (exp, str, GE_OPT_PREFIX, REJECT_ABSENT,\n+\t\t\t  NORMAL_RESOLUTION);\n \n   if (exp->X_op == O_absent)\n     {\n@@ -2442,7 +2459,8 @@ parse_big_immediate (char **str, int64_t *imm, aarch64_reg_type reg_type)\n       return false;\n     }\n \n-  my_get_expression (&inst.reloc.exp, &ptr, GE_OPT_PREFIX, 1);\n+  aarch64_get_expression (&inst.reloc.exp, &ptr, GE_OPT_PREFIX, REJECT_ABSENT,\n+\t\t\t  NORMAL_RESOLUTION);\n \n   if (inst.reloc.exp.X_op == O_constant)\n     *imm = inst.reloc.exp.X_add_number;\n@@ -2526,7 +2544,8 @@ struct reloc_table_entry\n   bfd_reloc_code_real_type ld_literal_type;\n };\n \n-static struct reloc_table_entry reloc_table[] = {\n+static struct reloc_table_entry reloc_table[] =\n+{\n   /* Low 12 bits of absolute address: ADD/i and LDR/STR */\n   {\"lo12\", 0,\n    0,\t\t\t\t/* adr_type */\n@@ -3079,6 +3098,114 @@ find_reloc_table_entry (char **str)\n   return NULL;\n }\n \n+/* Returns 0 if the relocation should never be forced,\n+   1 if the relocation must be forced, and -1 if either\n+   result is OK.  */\n+\n+static signed int\n+aarch64_force_reloc (unsigned int type)\n+{\n+  switch (type)\n+    {\n+    case BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP:\n+      /* Perform these \"immediate\" internal relocations\n+         even if the symbol is extern or weak.  */\n+      return 0;\n+\n+    case BFD_RELOC_AARCH64_LD_GOT_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC:\n+      /* Pseudo relocs that need to be fixed up according to\n+\t ilp32_p.  */\n+      return 0;\n+\n+    case BFD_RELOC_AARCH64_ADD_LO12:\n+    case BFD_RELOC_AARCH64_ADR_GOT_PAGE:\n+    case BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL:\n+    case BFD_RELOC_AARCH64_ADR_HI21_PCREL:\n+    case BFD_RELOC_AARCH64_GOT_LD_PREL19:\n+    case BFD_RELOC_AARCH64_LD32_GOT_LO12_NC:\n+    case BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14:\n+    case BFD_RELOC_AARCH64_LD64_GOTOFF_LO15:\n+    case BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15:\n+    case BFD_RELOC_AARCH64_LD64_GOT_LO12_NC:\n+    case BFD_RELOC_AARCH64_LDST128_LO12:\n+    case BFD_RELOC_AARCH64_LDST16_LO12:\n+    case BFD_RELOC_AARCH64_LDST32_LO12:\n+    case BFD_RELOC_AARCH64_LDST64_LO12:\n+    case BFD_RELOC_AARCH64_LDST8_LO12:\n+    case BFD_RELOC_AARCH64_TLSDESC_ADD_LO12:\n+    case BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21:\n+    case BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21:\n+    case BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSDESC_LD64_LO12:\n+    case BFD_RELOC_AARCH64_TLSDESC_LD_PREL19:\n+    case BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC:\n+    case BFD_RELOC_AARCH64_TLSDESC_OFF_G1:\n+    case BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21:\n+    case BFD_RELOC_AARCH64_TLSGD_ADR_PREL21:\n+    case BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC:\n+    case BFD_RELOC_AARCH64_TLSGD_MOVW_G1:\n+    case BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21:\n+    case BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19:\n+    case BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC:\n+    case BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1:\n+    case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12:\n+    case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21:\n+    case BFD_RELOC_AARCH64_TLSLD_ADR_PREL21:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0:\n+    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1:\n+    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC:\n+    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12:\n+    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12:\n+    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0:\n+    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1:\n+    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC:\n+    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2:\n+      /* Always leave these relocations for the linker.  */\n+      return 1;\n+\n+    default:\n+      return -1;\n+    }\n+}\n+\n+int\n+aarch64_force_relocation (struct fix *fixp)\n+{\n+  int res = aarch64_force_reloc (fixp->fx_r_type);\n+\n+  if (res == -1)\n+    return generic_force_reloc (fixp);\n+  return res;\n+}\n+\n /* Mode argument to parse_shift and parser_shifter_operand.  */\n enum parse_shift_mode\n {\n@@ -3225,7 +3352,8 @@ parse_shift (char **str, aarch64_opnd_info *operand, enum parse_shift_mode mode)\n \t  p++;\n \t  exp_has_prefix = 1;\n \t}\n-      my_get_expression (&exp, &p, GE_NO_PREFIX, 0);\n+      (void) aarch64_get_expression (&exp, &p, GE_NO_PREFIX, ALLOW_ABSENT,\n+\t\t\t\t     NORMAL_RESOLUTION);\n     }\n   if (kind == AARCH64_MOD_MUL_VL)\n     /* For consistency, give MUL VL the same shift amount as an implicit\n@@ -3288,7 +3416,8 @@ parse_shifter_operand_imm (char **str, aarch64_opnd_info *operand,\n   p = *str;\n \n   /* Accept an immediate expression.  */\n-  if (! my_get_expression (&inst.reloc.exp, &p, GE_OPT_PREFIX, 1))\n+  if (! aarch64_get_expression (&inst.reloc.exp, &p, GE_OPT_PREFIX,\n+\t\t\t\tREJECT_ABSENT, NORMAL_RESOLUTION))\n     return false;\n \n   /* Accept optional LSL for arithmetic immediate values.  */\n@@ -3411,9 +3540,11 @@ parse_shifter_operand_reloc (char **str, aarch64_opnd_info *operand,\n       p = *str;\n \n       /* Next, we parse the expression.  */\n-      if (! my_get_expression (&inst.reloc.exp, str, GE_NO_PREFIX, 1))\n+      if (! aarch64_get_expression (&inst.reloc.exp, str, GE_NO_PREFIX,\n+\t\t\t\t    REJECT_ABSENT,\n+\t\t\t\t    aarch64_force_reloc (entry->add_type) == 1))\n \treturn false;\n-\n+      \n       /* Record the relocation type (use the ADD variant here).  */\n       inst.reloc.type = entry->add_type;\n       inst.reloc.pc_rel = entry->pc_rel;\n@@ -3557,25 +3688,25 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t    }\n \n \t  /* #:<reloc_op>:  */\n-\t  if (! my_get_expression (exp, &p, GE_NO_PREFIX, 1))\n+\t  if (! aarch64_get_expression (exp, &p, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\t\taarch64_force_reloc (entry->add_type) == 1))\n \t    {\n \t      set_syntax_error (_(\"invalid relocation expression\"));\n \t      return false;\n \t    }\n-\n \t  /* #:<reloc_op>:<expr>  */\n \t  /* Record the relocation type.  */\n \t  inst.reloc.type = ty;\n \t  inst.reloc.pc_rel = entry->pc_rel;\n \t}\n       else\n \t{\n-\n \t  if (skip_past_char (&p, '='))\n \t    /* =immediate; need to generate the literal in the literal pool. */\n \t    inst.gen_lit_pool = 1;\n \n-\t  if (!my_get_expression (exp, &p, GE_NO_PREFIX, 1))\n+\t  if (!aarch64_get_expression (exp, &p, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\t       NORMAL_RESOLUTION))\n \t    {\n \t      set_syntax_error (_(\"invalid address\"));\n \t      return false;\n@@ -3681,7 +3812,8 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t      /* We now have the group relocation table entry corresponding to\n \t         the name in the assembler source.  Next, we parse the\n \t         expression.  */\n-\t      if (! my_get_expression (exp, &p, GE_NO_PREFIX, 1))\n+\t      if (! aarch64_get_expression (exp, &p, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\t\t    aarch64_force_reloc (entry->add_type) == 1))\n \t\t{\n \t\t  set_syntax_error (_(\"invalid relocation expression\"));\n \t\t  return false;\n@@ -3694,7 +3826,8 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t    }\n \t  else\n \t    {\n-\t      if (! my_get_expression (exp, &p, GE_OPT_PREFIX, 1))\n+\t      if (! aarch64_get_expression (exp, &p, GE_OPT_PREFIX, REJECT_ABSENT,\n+\t\t\t\t\t    NORMAL_RESOLUTION))\n \t\t{\n \t\t  set_syntax_error (_(\"invalid expression in the address\"));\n \t\t  return false;\n@@ -3750,7 +3883,8 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t  operand->addr.offset.regno = reg->number;\n \t  operand->addr.offset.is_reg = 1;\n \t}\n-      else if (! my_get_expression (exp, &p, GE_OPT_PREFIX, 1))\n+      else if (! aarch64_get_expression (exp, &p, GE_OPT_PREFIX, REJECT_ABSENT,\n+\t\t\t\t\t NORMAL_RESOLUTION))\n \t{\n \t  /* [Xn],#expr */\n \t  set_syntax_error (_(\"invalid expression in the address\"));\n@@ -3843,6 +3977,7 @@ parse_half (char **str, int *internal_fixup_p)\n \n       /* Try to parse a relocation.  Anything else is an error.  */\n       ++p;\n+\n       if (!(entry = find_reloc_table_entry (&p)))\n \t{\n \t  set_syntax_error (_(\"unknown relocation modifier\"));\n@@ -3861,7 +3996,8 @@ parse_half (char **str, int *internal_fixup_p)\n   else\n     *internal_fixup_p = 1;\n \n-  if (! my_get_expression (&inst.reloc.exp, &p, GE_NO_PREFIX, 1))\n+  if (! aarch64_get_expression (&inst.reloc.exp, &p, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\taarch64_force_reloc (inst.reloc.type) == 1))\n     return false;\n \n   *str = p;\n@@ -3903,10 +4039,9 @@ parse_adrp (char **str)\n     inst.reloc.type = BFD_RELOC_AARCH64_ADR_HI21_PCREL;\n \n   inst.reloc.pc_rel = 1;\n-\n-  if (! my_get_expression (&inst.reloc.exp, &p, GE_NO_PREFIX, 1))\n+  if (! aarch64_get_expression (&inst.reloc.exp, &p, GE_NO_PREFIX, REJECT_ABSENT,\n+\t\t\t\taarch64_force_reloc (inst.reloc.type) == 1))\n     return false;\n-\n   *str = p;\n   return true;\n }\n@@ -6023,8 +6158,9 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t\treg_name_p (str, REG_TYPE_VN))\n \t      goto failure;\n \t    str = saved;\n-\t    po_misc_or_fail (my_get_expression (&inst.reloc.exp, &str,\n-\t\t\t\t\t\tGE_OPT_PREFIX, 1));\n+\t    po_misc_or_fail (aarch64_get_expression (&inst.reloc.exp, &str,\n+\t\t\t\t\t\t     GE_OPT_PREFIX, REJECT_ABSENT,\n+\t\t\t\t\t\t     NORMAL_RESOLUTION));\n \t    /* The MOV immediate alias will be fixed up by fix_mov_imm_insn\n \t       later.  fix_mov_imm_insn will try to determine a machine\n \t       instruction (MOVZ, MOVN or ORR) for it and will issue an error\n@@ -8436,102 +8572,6 @@ cons_fix_new_aarch64 (fragS * frag, int where, int size, expressionS * exp)\n   fix_new_exp (frag, where, (int) size, exp, pcrel, type);\n }\n \n-int\n-aarch64_force_relocation (struct fix *fixp)\n-{\n-  switch (fixp->fx_r_type)\n-    {\n-    case BFD_RELOC_AARCH64_GAS_INTERNAL_FIXUP:\n-      /* Perform these \"immediate\" internal relocations\n-         even if the symbol is extern or weak.  */\n-      return 0;\n-\n-    case BFD_RELOC_AARCH64_LD_GOT_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC:\n-      /* Pseudo relocs that need to be fixed up according to\n-\t ilp32_p.  */\n-      return 0;\n-\n-    case BFD_RELOC_AARCH64_ADD_LO12:\n-    case BFD_RELOC_AARCH64_ADR_GOT_PAGE:\n-    case BFD_RELOC_AARCH64_ADR_HI21_NC_PCREL:\n-    case BFD_RELOC_AARCH64_ADR_HI21_PCREL:\n-    case BFD_RELOC_AARCH64_GOT_LD_PREL19:\n-    case BFD_RELOC_AARCH64_LD32_GOT_LO12_NC:\n-    case BFD_RELOC_AARCH64_LD32_GOTPAGE_LO14:\n-    case BFD_RELOC_AARCH64_LD64_GOTOFF_LO15:\n-    case BFD_RELOC_AARCH64_LD64_GOTPAGE_LO15:\n-    case BFD_RELOC_AARCH64_LD64_GOT_LO12_NC:\n-    case BFD_RELOC_AARCH64_LDST128_LO12:\n-    case BFD_RELOC_AARCH64_LDST16_LO12:\n-    case BFD_RELOC_AARCH64_LDST32_LO12:\n-    case BFD_RELOC_AARCH64_LDST64_LO12:\n-    case BFD_RELOC_AARCH64_LDST8_LO12:\n-    case BFD_RELOC_AARCH64_TLSDESC_ADD_LO12:\n-    case BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21:\n-    case BFD_RELOC_AARCH64_TLSDESC_ADR_PREL21:\n-    case BFD_RELOC_AARCH64_TLSDESC_LD32_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSDESC_LD64_LO12:\n-    case BFD_RELOC_AARCH64_TLSDESC_LD_PREL19:\n-    case BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC:\n-    case BFD_RELOC_AARCH64_TLSDESC_OFF_G1:\n-    case BFD_RELOC_AARCH64_TLSGD_ADD_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSGD_ADR_PAGE21:\n-    case BFD_RELOC_AARCH64_TLSGD_ADR_PREL21:\n-    case BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC:\n-    case BFD_RELOC_AARCH64_TLSGD_MOVW_G1:\n-    case BFD_RELOC_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21:\n-    case BFD_RELOC_AARCH64_TLSIE_LD32_GOTTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_PREL19:\n-    case BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC:\n-    case BFD_RELOC_AARCH64_TLSIE_MOVW_GOTTPREL_G1:\n-   case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_HI12:\n-    case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLD_ADD_DTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_ADD_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_ADR_PAGE21:\n-    case BFD_RELOC_AARCH64_TLSLD_ADR_PREL21:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0:\n-    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G0_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1:\n-    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC:\n-    case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST16_TPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12:\n-    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12:\n-    case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0:\n-    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G0_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1:\n-    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC:\n-    case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2:\n-      /* Always leave these relocations for the linker.  */\n-      return 1;\n-\n-    default:\n-      break;\n-    }\n-\n-  return generic_force_reloc (fixp);\n-}\n-\n #ifdef OBJ_ELF\n \n /* Implement md_after_parse_args.  This is the earliest time we need to decide"
    },
    {
      "sha": "4645ff55a34f9d0832171a39979d85795296e371",
      "filename": "gas/testsuite/gas/aarch64/pr27217.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/testsuite/gas/aarch64/pr27217.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/testsuite/gas/aarch64/pr27217.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/pr27217.d?ref=eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "patch": "@@ -0,0 +1,15 @@\n+# Check that expressions that generate relocations work when the symbol is a constant.\n+#name: PR27212\n+#objdump: -rd\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+000 <.*>:\n+[ \t]+0:[ \t]+90000000[ \t]+adrp[ \t]+x0, 12345678[ \t]+<bar>\n+[ \t]+0:[ \t]+R_AARCH64_ADR_PREL_PG_HI21[ \t]+bar\n+[ \t]+4:[ \t]+91000000[ \t]+add[ \t]+x0, x0, #0x0\n+[ \t]+4:[ \t]+R_AARCH64_ADD_ABS_LO12_NC[ \t]+bar\n+[ \t]+8:[ \t]+d65f03c0[ \t]+ret\n+#pass"
    },
    {
      "sha": "8cb92309f35d9243ee0ff30d02128f61c73cb0a8",
      "filename": "gas/testsuite/gas/aarch64/pr27217.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/testsuite/gas/aarch64/pr27217.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eac4eb8ecb2626ef7711d8f6bee9e870ae435604/gas/testsuite/gas/aarch64/pr27217.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/pr27217.s?ref=eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "patch": "@@ -0,0 +1,16 @@\n+\t.arch armv8-a\n+\t.file\t\"set.c\"\n+\t.text\n+\t// Start of user assembly\n+\t.set bar, 0x12345678\n+\t// End of user assembly\n+\t.align\t2\n+\t.p2align 4,,11\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\tadrp\tx0, bar\n+\tadd\tx0, x0, :lo12:bar\n+\tret\n+\t.size\tfoo, .-foo\n+\t.ident\t\"GCC: (GNU) 10.2.1 20201030 (RTEMS 6, RSB \""
    }
  ]
}