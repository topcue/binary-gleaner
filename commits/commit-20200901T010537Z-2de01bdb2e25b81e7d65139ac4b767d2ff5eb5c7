{
  "sha": "2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmRlMDFiZGIyZTI1YjgxZTdkNjUxMzlhYzRiNzY3ZDJmZjVlYjVjNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-01T01:05:37Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-01T01:05:37Z"
    },
    "message": "gdb: fix indentation of struct field_info\n\nThe indentation is off, fix it before doing other changes.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (struct field_info): Fix indentation.\n\nChange-Id: Ife6a3d017abcf0a33e49e47e51429e95d504343c",
    "tree": {
      "sha": "908247dda591ab9328c0946da807ba61409693bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/908247dda591ab9328c0946da807ba61409693bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6a42ec96cab650c17890ca38da357f47e2f54071",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a42ec96cab650c17890ca38da357f47e2f54071",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a42ec96cab650c17890ca38da357f47e2f54071"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 32,
    "deletions": 28
  },
  "files": [
    {
      "sha": "329c3517adb594f6db6670c561276e8a89885250",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-31  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.c (struct field_info): Fix indentation.\n+\n 2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* frame-unwind.h (frame_prev_register_ftype): Fix adjective"
    },
    {
      "sha": "fe66dd36fca426d55afa32819f28c8bdbbe5d8df",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 28,
      "deletions": 28,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2de01bdb2e25b81e7d65139ac4b767d2ff5eb5c7",
      "patch": "@@ -1190,40 +1190,40 @@ struct fnfieldlist\n    pass lists of data member fields and lists of member function fields\n    in an instance of a field_info structure, as defined below.  */\n struct field_info\n-  {\n-    /* List of data member and baseclasses fields.  */\n-    std::vector<struct nextfield> fields;\n-    std::vector<struct nextfield> baseclasses;\n+{\n+  /* List of data member and baseclasses fields.  */\n+  std::vector<struct nextfield> fields;\n+  std::vector<struct nextfield> baseclasses;\n \n-    /* Set if the accessibility of one of the fields is not public.  */\n-    int non_public_fields = 0;\n+  /* Set if the accessibility of one of the fields is not public.  */\n+  int non_public_fields = 0;\n \n-    /* Member function fieldlist array, contains name of possibly overloaded\n-       member function, number of overloaded member functions and a pointer\n-       to the head of the member function field chain.  */\n-    std::vector<struct fnfieldlist> fnfieldlists;\n+  /* Member function fieldlist array, contains name of possibly overloaded\n+     member function, number of overloaded member functions and a pointer\n+     to the head of the member function field chain.  */\n+  std::vector<struct fnfieldlist> fnfieldlists;\n \n-    /* typedefs defined inside this class.  TYPEDEF_FIELD_LIST contains head of\n-       a NULL terminated list of TYPEDEF_FIELD_LIST_COUNT elements.  */\n-    std::vector<struct decl_field> typedef_field_list;\n+  /* typedefs defined inside this class.  TYPEDEF_FIELD_LIST contains head of\n+     a NULL terminated list of TYPEDEF_FIELD_LIST_COUNT elements.  */\n+  std::vector<struct decl_field> typedef_field_list;\n \n-    /* Nested types defined by this class and the number of elements in this\n-       list.  */\n-    std::vector<struct decl_field> nested_types_list;\n+  /* Nested types defined by this class and the number of elements in this\n+     list.  */\n+  std::vector<struct decl_field> nested_types_list;\n \n-    /* If non-null, this is the variant part we are currently\n-       reading.  */\n-    variant_part_builder *current_variant_part = nullptr;\n-    /* This holds all the top-level variant parts attached to the type\n-       we're reading.  */\n-    std::vector<variant_part_builder> variant_parts;\n+  /* If non-null, this is the variant part we are currently\n+     reading.  */\n+  variant_part_builder *current_variant_part = nullptr;\n+  /* This holds all the top-level variant parts attached to the type\n+     we're reading.  */\n+  std::vector<variant_part_builder> variant_parts;\n \n-    /* Return the total number of fields (including baseclasses).  */\n-    int nfields () const\n-    {\n-      return fields.size () + baseclasses.size ();\n-    }\n-  };\n+  /* Return the total number of fields (including baseclasses).  */\n+  int nfields () const\n+  {\n+    return fields.size () + baseclasses.size ();\n+  }\n+};\n \n /* Loaded secondary compilation units are kept in memory until they\n    have not been referenced for the processing of this many"
    }
  ]
}