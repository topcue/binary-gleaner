{
  "sha": "8c95582da858ac981f689a6f599acacb8c5c490f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGM5NTU4MmRhODU4YWM5ODFmNjg5YTZmNTk5YWNhY2I4YzVjNDkwZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-30T21:04:51Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-10T22:32:07Z"
    },
    "message": "gdb: Add support for tracking the DWARF line table is-stmt field\n\nThis commit brings support for the DWARF line table is_stmt field to\nGDB.  The is_stmt field is used by the compiler when a single source\nline is split into multiple assembler instructions, especially if the\nassembler instructions are interleaved with instruction from other\nsource lines.\n\nThe compiler will set the is_stmt flag false from some instructions\nfrom the source lines, these instructions are not a good place to\ninsert a breakpoint in order to stop at the source line.\nInstructions which are marked with the is_stmt flag true are a good\nplace to insert a breakpoint for that source line.\n\nCurrently GDB ignores all instructions for which is_stmt is false.\nThis is fine in a lot of cases, however, there are some cases where\nthis means the debug experience is not as good as it could be.\n\nConsider stopping at a random instruction, currently this instruction\nwill be attributed to the last line table entry before this point for\nwhich is_stmt was true - as these are the only line table entries that\nGDB tracks.  This can easily be incorrect in code with even a low\nlevel of optimisation.\n\nWith is_stmt tracking in place, when stopping at a random instruction\nwe now attribute the instruction back to the real source line, even\nwhen is_stmt is false for that instruction in the line table.\n\nWhen inserting breakpoints we still select line table entries for\nwhich is_stmt is true, so the breakpoint placing behaviour should not\nchange.\n\nWhen stepping though code (at the line level, not the instruction\nlevel) we will still stop at instruction where is_stmt is true, I\nthink this is more likely to be the desired behaviour.\n\nInstruction stepping is, of course, unchanged, stepping one\ninstruction at a time, but we should now report more accurate line\ntable information with each instruction step.\n\nThe original motivation for this work was a patch posted by Bernd\nhere:\n  https://sourceware.org/ml/gdb-patches/2019-11/msg00792.html\n\nAs part of that thread it was suggested that many issues would be\nresolved if GDB supported line table views, this isn't something I've\nattempted in this patch, though reading the spec, it seems like this\nwould be a useful feature to support in GDB in the future.  The spec\nis here:\n  http://dwarfstd.org/ShowIssue.php?issue=170427.1\n\nAnd Bernd gives a brief description of the benefits here:\n  https://sourceware.org/ml/gdb-patches/2020-01/msg00147.html\n\nWith that all said, I think that there is benefit to having proper\nis_stmt support regardless of whether we have views support, so I\nthink we should consider getting this in first, and then building view\nsupport on top of this.\n\nThe gdb.cp/step-and-next-inline.exp test is based off a test proposed\nby Bernd Edlinger in this message:\n  https://sourceware.org/ml/gdb-patches/2019-12/msg00842.html\n\ngdb/ChangeLog:\n\n\t* buildsym-legacy.c (record_line): Pass extra parameter to\n\trecord_line.\n\t* buildsym.c (buildsym_compunit::record_line): Take an extra\n\tparameter, reduce duplication in the line table, and record the\n\tis_stmt flag in the line table.\n\t* buildsym.h (buildsym_compunit::record_line): Add extra\n\tparameter.\n\t* disasm.c (do_mixed_source_and_assembly_deprecated): Ignore\n\tnon-statement lines.\n\t* dwarf2/read.c (dwarf_record_line_1): Add extra parameter, pass\n\tthis to the symtab builder.\n\t(dwarf_finish_line): Pass extra parameter to dwarf_record_line_1.\n\t(lnp_state_machine::record_line): Pass a suitable is_stmt flag\n\tthrough to dwarf_record_line_1.\n\t* infrun.c (process_event_stop_test): When stepping, don't stop at\n\ta non-statement instruction, and only refresh the step info when\n\twe land in the middle of a line's range.  Also add an extra\n\tcomment.\n\t* jit.c (jit_symtab_line_mapping_add_impl): Initialise is_stmt\n\tfield.\n\t* record-btrace.c (btrace_find_line_range): Only record lines\n\tmarked as is-statement.\n\t* stack.c (frame_show_address): Show the frame address if we are\n\tin a non-statement sal.\n\t* symmisc.c (dump_symtab_1): Print the is_stmt flag.\n\t(maintenance_print_one_line_table): Print a header for the is_stmt\n\tcolumn, and include is_stmt information in the output.\n\t* symtab.c (find_pc_sect_line): Find lines marked as statements in\n\tpreference to non-statements.\n\t(find_pcs_for_symtab_line): Prefer is-statement entries.\n\t(find_line_common): Likewise.\n\t* symtab.h (struct linetable_entry): Add is_stmt field.\n\t(struct symtab_and_line): Likewise.\n\t* xcoffread.c (arrange_linetable): Initialise is_stmt field when\n\tarranging the line table.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.cp/step-and-next-inline.cc: New file.\n\t* gdb.cp/step-and-next-inline.exp: New file.\n\t* gdb.cp/step-and-next-inline.h: New file.\n\t* gdb.dwarf2/dw2-is-stmt.c: New file.\n\t* gdb.dwarf2/dw2-is-stmt.exp: New file.\n\t* gdb.dwarf2/dw2-is-stmt-2.c: New file.\n\t* gdb.dwarf2/dw2-is-stmt-2.exp: New file.\n\t* gdb.dwarf2/dw2-ranges-base.exp: Update line table pattern.",
    "tree": {
      "sha": "4a48968bceed4a3d14a653155c092fbd8e808b9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a48968bceed4a3d14a653155c092fbd8e808b9f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8c95582da858ac981f689a6f599acacb8c5c490f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c95582da858ac981f689a6f599acacb8c5c490f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8c95582da858ac981f689a6f599acacb8c5c490f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c95582da858ac981f689a6f599acacb8c5c490f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cecf854779049c3f491caf23f80d13eabbb90c86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cecf854779049c3f491caf23f80d13eabbb90c86",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cecf854779049c3f491caf23f80d13eabbb90c86"
    }
  ],
  "stats": {
    "total": 1125,
    "additions": 1096,
    "deletions": 29
  },
  "files": [
    {
      "sha": "1013e91866b0d7f8c53aac3f8362634c1cc71a2d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -1,3 +1,41 @@\n+2020-03-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* buildsym-legacy.c (record_line): Pass extra parameter to\n+\trecord_line.\n+\t* buildsym.c (buildsym_compunit::record_line): Take an extra\n+\tparameter, reduce duplication in the line table, and record the\n+\tis_stmt flag in the line table.\n+\t* buildsym.h (buildsym_compunit::record_line): Add extra\n+\tparameter.\n+\t* disasm.c (do_mixed_source_and_assembly_deprecated): Ignore\n+\tnon-statement lines.\n+\t* dwarf2/read.c (dwarf_record_line_1): Add extra parameter, pass\n+\tthis to the symtab builder.\n+\t(dwarf_finish_line): Pass extra parameter to dwarf_record_line_1.\n+\t(lnp_state_machine::record_line): Pass a suitable is_stmt flag\n+\tthrough to dwarf_record_line_1.\n+\t* infrun.c (process_event_stop_test): When stepping, don't stop at\n+\ta non-statement instruction, and only refresh the step info when\n+\twe land in the middle of a line's range.  Also add an extra\n+\tcomment.\n+\t* jit.c (jit_symtab_line_mapping_add_impl): Initialise is_stmt\n+\tfield.\n+\t* record-btrace.c (btrace_find_line_range): Only record lines\n+\tmarked as is-statement.\n+\t* stack.c (frame_show_address): Show the frame address if we are\n+\tin a non-statement sal.\n+\t* symmisc.c (dump_symtab_1): Print the is_stmt flag.\n+\t(maintenance_print_one_line_table): Print a header for the is_stmt\n+\tcolumn, and include is_stmt information in the output.\n+\t* symtab.c (find_pc_sect_line): Find lines marked as statements in\n+\tpreference to non-statements.\n+\t(find_pcs_for_symtab_line): Prefer is-statement entries.\n+\t(find_line_common): Likewise.\n+\t* symtab.h (struct linetable_entry): Add is_stmt field.\n+\t(struct symtab_and_line): Likewise.\n+\t* xcoffread.c (arrange_linetable): Initialise is_stmt field when\n+\tarranging the line table.\n+\n 2020-03-07  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2/read.c (read_typedef): Treat anonymous typedef as forwarder"
    },
    {
      "sha": "d9c27ebc9562b25be8b700fd0357fd53c50a8b3c",
      "filename": "gdb/buildsym-legacy.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym-legacy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym-legacy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym-legacy.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -252,7 +252,9 @@ void\n record_line (struct subfile *subfile, int line, CORE_ADDR pc)\n {\n   gdb_assert (buildsym_compunit != nullptr);\n-  buildsym_compunit->record_line (subfile, line, pc);\n+  /* Assume every line entry is a statement start, that is a good place to\n+     put a breakpoint for that line number.  */\n+  buildsym_compunit->record_line (subfile, line, pc, true);\n }\n \n /* Start a new symtab for a new source file in OBJFILE.  Called, for example,"
    },
    {
      "sha": "24aeba8e25220b80210e0d08b0a8badf6cd848af",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -666,7 +666,7 @@ buildsym_compunit::pop_subfile ()\n \n void\n buildsym_compunit::record_line (struct subfile *subfile, int line,\n-\t\t\t\tCORE_ADDR pc)\n+\t\t\t\tCORE_ADDR pc, bool is_stmt)\n {\n   struct linetable_entry *e;\n \n@@ -681,6 +681,17 @@ buildsym_compunit::record_line (struct subfile *subfile, int line,\n       m_have_line_numbers = true;\n     }\n \n+  /* If we have a duplicate for the previous entry then ignore the new\n+     entry, except, if the new entry is setting the is_stmt flag, then\n+     ensure the previous entry respects the new setting.  */\n+  e = subfile->line_vector->item + subfile->line_vector->nitems - 1;\n+  if (e->line == line && e->pc == pc)\n+    {\n+      if (is_stmt && !e->is_stmt)\n+\te->is_stmt = 1;\n+      return;\n+    }\n+\n   if (subfile->line_vector->nitems + 1 >= subfile->line_vector_length)\n     {\n       subfile->line_vector_length *= 2;\n@@ -716,6 +727,7 @@ buildsym_compunit::record_line (struct subfile *subfile, int line,\n \n   e = subfile->line_vector->item + subfile->line_vector->nitems++;\n   e->line = line;\n+  e->is_stmt = is_stmt ? 1 : 0;\n   e->pc = pc;\n }\n "
    },
    {
      "sha": "c768a4c2daecaf57d0d53d5067d5f6dce6d50c72",
      "filename": "gdb/buildsym.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/buildsym.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.h?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -187,7 +187,8 @@ struct buildsym_compunit\n \n   const char *pop_subfile ();\n \n-  void record_line (struct subfile *subfile, int line, CORE_ADDR pc);\n+  void record_line (struct subfile *subfile, int line, CORE_ADDR pc,\n+\t\t    bool is_stmt);\n \n   struct compunit_symtab *get_compunit_symtab ()\n   {"
    },
    {
      "sha": "143ba2f59b9534b7f0faad25aa52c291aa4b64f7",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -376,6 +376,12 @@ do_mixed_source_and_assembly_deprecated\n       if (le[i].line == le[i + 1].line && le[i].pc == le[i + 1].pc)\n \tcontinue;\t\t/* Ignore duplicates.  */\n \n+      /* Ignore non-statement line table entries.  This means we print the\n+\t source line at the place where GDB would insert a breakpoint for\n+\t that line, which seems more intuitive.  */\n+      if (le[i].is_stmt == 0)\n+\tcontinue;\n+\n       /* Skip any end-of-function markers.  */\n       if (le[i].line == 0)\n \tcontinue;"
    },
    {
      "sha": "1706b96cc0443162675669cfba10d23428515174",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -19939,7 +19939,7 @@ dwarf_record_line_p (struct dwarf2_cu *cu,\n \n static void\n dwarf_record_line_1 (struct gdbarch *gdbarch, struct subfile *subfile,\n-\t\t     unsigned int line, CORE_ADDR address,\n+\t\t     unsigned int line, CORE_ADDR address, bool is_stmt,\n \t\t     struct dwarf2_cu *cu)\n {\n   CORE_ADDR addr = gdbarch_addr_bits_remove (gdbarch, address);\n@@ -19953,7 +19953,7 @@ dwarf_record_line_1 (struct gdbarch *gdbarch, struct subfile *subfile,\n     }\n \n   if (cu != nullptr)\n-    cu->get_builder ()->record_line (subfile, line, addr);\n+    cu->get_builder ()->record_line (subfile, line, addr, is_stmt);\n }\n \n /* Subroutine of dwarf_decode_lines_1 to simplify it.\n@@ -19976,7 +19976,7 @@ dwarf_finish_line (struct gdbarch *gdbarch, struct subfile *subfile,\n \t\t\t  paddress (gdbarch, address));\n     }\n \n-  dwarf_record_line_1 (gdbarch, subfile, 0, address, cu);\n+  dwarf_record_line_1 (gdbarch, subfile, 0, address, true, cu);\n }\n \n void\n@@ -20003,8 +20003,7 @@ lnp_state_machine::record_line (bool end_sequence)\n   else if (m_op_index == 0 || end_sequence)\n     {\n       fe->included_p = 1;\n-      if (m_record_lines_p\n-\t  && (producer_is_codewarrior (m_cu) || m_is_stmt || end_sequence))\n+      if (m_record_lines_p)\n \t{\n \t  if (m_last_subfile != m_cu->get_builder ()->get_current_subfile ()\n \t      || end_sequence)\n@@ -20015,14 +20014,16 @@ lnp_state_machine::record_line (bool end_sequence)\n \n \t  if (!end_sequence)\n \t    {\n+\t      bool is_stmt = producer_is_codewarrior (m_cu) || m_is_stmt;\n+\n \t      if (dwarf_record_line_p (m_cu, m_line, m_last_line,\n \t\t\t\t       m_line_has_non_zero_discriminator,\n \t\t\t\t       m_last_subfile))\n \t\t{\n \t\t  buildsym_compunit *builder = m_cu->get_builder ();\n \t\t  dwarf_record_line_1 (m_gdbarch,\n \t\t\t\t       builder->get_current_subfile (),\n-\t\t\t\t       m_line, m_address,\n+\t\t\t\t       m_line, m_address, is_stmt,\n \t\t\t\t       m_currently_recording_lines ? m_cu : nullptr);\n \t\t}\n \t      m_last_subfile = m_cu->get_builder ()->get_current_subfile ();"
    },
    {
      "sha": "d672d1a1609b83856dbff08d0af396c1e27b7dd1",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 40,
      "deletions": 11,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -7045,6 +7045,10 @@ process_event_stop_test (struct execution_control_state *ecs)\n \t}\n     }\n \n+  /* This always returns the sal for the inner-most frame when we are in a\n+     stack of inlined frames, even if GDB actually believes that it is in a\n+     more outer frame.  This is checked for below by calls to\n+     inline_skipped_frames.  */\n   stop_pc_sal = find_pc_line (ecs->event_thread->suspend.stop_pc, 0);\n \n   /* NOTE: tausq/2004-05-24: This if block used to be done before all\n@@ -7179,32 +7183,57 @@ process_event_stop_test (struct execution_control_state *ecs)\n       return;\n     }\n \n+  bool refresh_step_info = true;\n   if ((ecs->event_thread->suspend.stop_pc == stop_pc_sal.pc)\n       && (ecs->event_thread->current_line != stop_pc_sal.line\n  \t  || ecs->event_thread->current_symtab != stop_pc_sal.symtab))\n     {\n-      /* We are at the start of a different line.  So stop.  Note that\n-         we don't stop if we step into the middle of a different line.\n-         That is said to make things like for (;;) statements work\n-         better.  */\n-      if (debug_infrun)\n-\t fprintf_unfiltered (gdb_stdlog,\n-\t\t\t     \"infrun: stepped to a different line\\n\");\n-      end_stepping_range (ecs);\n-      return;\n+      if (stop_pc_sal.is_stmt)\n+\t{\n+\t  /* We are at the start of a different line.  So stop.  Note that\n+\t     we don't stop if we step into the middle of a different line.\n+\t     That is said to make things like for (;;) statements work\n+\t     better.  */\n+\t  if (debug_infrun)\n+\t    fprintf_unfiltered (gdb_stdlog,\n+\t\t\t\t\"infrun: stepped to a different line\\n\");\n+\t  end_stepping_range (ecs);\n+\t  return;\n+\t}\n+      else if (frame_id_eq (get_frame_id (get_current_frame ()),\n+\t\t\t    ecs->event_thread->control.step_frame_id))\n+\t{\n+\t  /* We are at the start of a different line, however, this line is\n+\t     not marked as a statement, and we have not changed frame.  We\n+\t     ignore this line table entry, and continue stepping forward,\n+\t     looking for a better place to stop.  */\n+\t  refresh_step_info = false;\n+\t  if (debug_infrun)\n+\t    fprintf_unfiltered (gdb_stdlog,\n+\t\t\t\t\"infrun: stepped to a different line, but \"\n+\t\t\t\t\"it's not the start of a statement\\n\");\n+\t}\n     }\n \n   /* We aren't done stepping.\n \n      Optimize by setting the stepping range to the line.\n      (We might not be in the original line, but if we entered a\n      new line in mid-statement, we continue stepping.  This makes\n-     things like for(;;) statements work better.)  */\n+     things like for(;;) statements work better.)\n+\n+     If we entered a SAL that indicates a non-statement line table entry,\n+     then we update the stepping range, but we don't update the step info,\n+     which includes things like the line number we are stepping away from.\n+     This means we will stop when we find a line table entry that is marked\n+     as is-statement, even if it matches the non-statement one we just\n+     stepped into.   */\n \n   ecs->event_thread->control.step_range_start = stop_pc_sal.pc;\n   ecs->event_thread->control.step_range_end = stop_pc_sal.end;\n   ecs->event_thread->control.may_range_step = 1;\n-  set_step_info (ecs->event_thread, frame, stop_pc_sal);\n+  if (refresh_step_info)\n+    set_step_info (ecs->event_thread, frame, stop_pc_sal);\n \n   if (debug_infrun)\n      fprintf_unfiltered (gdb_stdlog, \"infrun: keep going\\n\");"
    },
    {
      "sha": "8eb98f4a38af77df9b059394869a05a2c5350580",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -579,6 +579,7 @@ jit_symtab_line_mapping_add_impl (struct gdb_symbol_callbacks *cb,\n     {\n       stab->linetable->item[i].pc = (CORE_ADDR) map[i].pc;\n       stab->linetable->item[i].line = map[i].line;\n+      stab->linetable->item[i].is_stmt = 1;\n     }\n }\n "
    },
    {
      "sha": "d3da8527c5c2d5ceda81c2832c817adf1a7619c2",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -718,7 +718,16 @@ btrace_find_line_range (CORE_ADDR pc)\n   range = btrace_mk_line_range (symtab, 0, 0);\n   for (i = 0; i < nlines - 1; i++)\n     {\n-      if ((lines[i].pc == pc) && (lines[i].line != 0))\n+      /* The test of is_stmt here was added when the is_stmt field was\n+\t introduced to the 'struct linetable_entry' structure.  This\n+\t ensured that this loop maintained the same behaviour as before we\n+\t introduced is_stmt.  That said, it might be that we would be\n+\t better off not checking is_stmt here, this would lead to us\n+\t possibly adding more line numbers to the range.  At the time this\n+\t change was made I was unsure how to test this so chose to go with\n+\t maintaining the existing experience.  */\n+      if ((lines[i].pc == pc) && (lines[i].line != 0)\n+\t  && (lines[i].is_stmt == 1))\n \trange = btrace_line_range_add (range, lines[i].line);\n     }\n "
    },
    {
      "sha": "024ead0b611bcec684410a27a7df9b60cd9c3d0e",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -330,7 +330,7 @@ frame_show_address (struct frame_info *frame,\n       return false;\n     }\n \n-  return get_frame_pc (frame) != sal.pc;\n+  return get_frame_pc (frame) != sal.pc || !sal.is_stmt;\n }\n \n /* See frame.h.  */"
    },
    {
      "sha": "4bf1f08849f211447bbae39d63ac9d5f31ce1993",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -301,6 +301,8 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n \t{\n \t  fprintf_filtered (outfile, \" line %d at \", l->item[i].line);\n \t  fputs_filtered (paddress (gdbarch, l->item[i].pc), outfile);\n+\t  if (l->item[i].is_stmt)\n+\t    fprintf_filtered (outfile, \"\\t(stmt)\");\n \t  fprintf_filtered (outfile, \"\\n\");\n \t}\n     }\n@@ -987,8 +989,8 @@ maintenance_print_one_line_table (struct symtab *symtab, void *data)\n \n       /* Leave space for 6 digits of index and line number.  After that the\n \t tables will just not format as well.  */\n-      printf_filtered (_(\"%-6s %6s %s\\n\"),\n-\t\t       _(\"INDEX\"), _(\"LINE\"), _(\"ADDRESS\"));\n+      printf_filtered (_(\"%-6s %6s %s %s\\n\"),\n+\t\t       _(\"INDEX\"), _(\"LINE\"), _(\"ADDRESS\"), _(\"IS-STMT\"));\n \n       for (i = 0; i < linetable->nitems; ++i)\n \t{\n@@ -1000,7 +1002,9 @@ maintenance_print_one_line_table (struct symtab *symtab, void *data)\n \t    printf_filtered (\"%6d \", item->line);\n \t  else\n \t    printf_filtered (\"%6s \", _(\"END\"));\n-\t  printf_filtered (\"%s\\n\", core_addr_to_string (item->pc));\n+\t  printf_filtered (\"%s%s\\n\",\n+\t\t\t   core_addr_to_string (item->pc),\n+\t\t\t   (item->is_stmt ? \" Y\" : \"\"));\n \t}\n     }\n "
    },
    {
      "sha": "44b711397d5a2be48a22c34987f2037a3a588754",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -3236,6 +3236,23 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n \t  best = prev;\n \t  best_symtab = iter_s;\n \n+\t  /* If during the binary search we land on a non-statement entry,\n+\t     scan backward through entries at the same address to see if\n+\t     there is an entry marked as is-statement.  In theory this\n+\t     duplication should have been removed from the line table\n+\t     during construction, this is just a double check.  If the line\n+\t     table has had the duplication removed then this should be\n+\t     pretty cheap.  */\n+\t  if (!best->is_stmt)\n+\t    {\n+\t      struct linetable_entry *tmp = best;\n+\t      while (tmp > first && (tmp - 1)->pc == tmp->pc\n+\t\t     && (tmp - 1)->line != 0 && !tmp->is_stmt)\n+\t\t--tmp;\n+\t      if (tmp->is_stmt)\n+\t\tbest = tmp;\n+\t    }\n+\n \t  /* Discard BEST_END if it's before the PC of the current BEST.  */\n \t  if (best_end <= best->pc)\n \t    best_end = 0;\n@@ -3266,6 +3283,7 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n     }\n   else\n     {\n+      val.is_stmt = best->is_stmt;\n       val.symtab = best_symtab;\n       val.line = best->line;\n       val.pc = best->pc;\n@@ -3434,7 +3452,8 @@ find_pcs_for_symtab_line (struct symtab *symtab, int line,\n \t{\n \t  struct linetable_entry *item = &SYMTAB_LINETABLE (symtab)->item[idx];\n \n-\t  if (*best_item == NULL || item->line < (*best_item)->line)\n+\t  if (*best_item == NULL\n+\t      || (item->line < (*best_item)->line && item->is_stmt))\n \t    *best_item = item;\n \n \t  break;\n@@ -3545,6 +3564,10 @@ find_line_common (struct linetable *l, int lineno,\n     {\n       struct linetable_entry *item = &(l->item[i]);\n \n+      /* Ignore non-statements.  */\n+      if (!item->is_stmt)\n+\tcontinue;\n+\n       if (item->line == lineno)\n \t{\n \t  /* Return the first (lowest address) entry which matches.  */"
    },
    {
      "sha": "771b5ec5bf7e26863e777ed71d17be6dc0c3ab4b",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -1277,7 +1277,13 @@ struct rust_vtable_symbol : public symbol\n \n struct linetable_entry\n {\n+  /* The line number for this entry.  */\n   int line;\n+\n+  /* True if this PC is a good location to place a breakpoint for LINE.  */\n+  unsigned is_stmt : 1;\n+\n+  /* The address for this entry.  */\n   CORE_ADDR pc;\n };\n \n@@ -1853,6 +1859,10 @@ struct symtab_and_line\n   bool explicit_pc = false;\n   bool explicit_line = false;\n \n+  /* If the line number information is valid, then this indicates if this\n+     line table entry had the is-stmt flag set or not.  */\n+  bool is_stmt = false;\n+\n   /* The probe associated with this symtab_and_line.  */\n   probe *prob = NULL;\n   /* If PROBE is not NULL, then this is the objfile in which the probe"
    },
    {
      "sha": "dca2d304666395d3dac019d4989c309b455d77d9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -1,3 +1,15 @@\n+2020-03-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gdb.cp/step-and-next-inline.cc: New file.\n+\t* gdb.cp/step-and-next-inline.exp: New file.\n+\t* gdb.cp/step-and-next-inline.h: New file.\n+\t* gdb.dwarf2/dw2-is-stmt.c: New file.\n+\t* gdb.dwarf2/dw2-is-stmt.exp: New file.\n+\t* gdb.dwarf2/dw2-is-stmt-2.c: New file.\n+\t* gdb.dwarf2/dw2-is-stmt-2.exp: New file.\n+\t* gdb.dwarf2/dw2-ranges-base.exp: Update line table pattern.\n+\n 2020-03-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* lib/dwarf.exp (Dwarf::lines) Add support for modifying the"
    },
    {
      "sha": "d923cc53413841e6a9b8d2ee031129ee4f11da78",
      "filename": "gdb/testsuite/gdb.cp/step-and-next-inline.cc",
      "status": "added",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/step-and-next-inline.cc?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,66 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifdef USE_NEXT_INLINE_H\n+\n+#include \"step-and-next-inline.h\"\n+\n+#else\t/* USE_NEXT_INLINE_H */\n+\n+/* The code below must remain identical to the code in\n+   step-and-next-inline.h.  */\n+\n+#include <stdlib.h>\n+\n+struct tree\n+{\n+  volatile int x;\n+  volatile int z;\n+};\n+\n+#define TREE_TYPE(NODE) (*tree_check (NODE, 0))\n+\n+inline tree *\n+tree_check (tree *t, int i)\n+{\n+  if (t->x != i)\n+    abort();\n+  tree *x = t;\n+  return x;\n+}\n+\n+#endif\t/* USE_NEXT_INLINE_H */\n+\n+int __attribute__((noinline, noclone))\n+get_alias_set (tree *t)\n+{\n+  if (t != NULL\n+      && TREE_TYPE (t).z != 1\n+      && TREE_TYPE (t).z != 2\n+      && TREE_TYPE (t).z != 3)\n+    return 0;\n+  return 1;\n+}\n+\n+tree xx;\n+\n+int\n+main()\n+{\n+  get_alias_set (&xx);\n+  return 0;\n+}"
    },
    {
      "sha": "acec48ba81d5e381f09a1e001a787fdf2aa6c4cb",
      "filename": "gdb/testsuite/gdb.cp/step-and-next-inline.exp",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/step-and-next-inline.exp?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,119 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile .cc\n+\n+# Compile the test source with USE_NEXT_INLINE_H defined (when\n+# use_header is true), or not defined.\n+proc do_test { use_header } {\n+    global srcfile testfile\n+\n+    set options {c++ debug nowarnings optimize=-O2\\ -gstatement-frontiers}\n+    if { $use_header } {\n+\tlappend options additional_flags=-DUSE_NEXT_INLINE_H\n+\tset executable \"$testfile-with-header\"\n+\tset hdrfile \"step-and-next-inline.h\"\n+\tset prefix \"use_header\"\n+    } else {\n+\tset executable \"$testfile-no-header\"\n+\tset hdrfile \"$srcfile\"\n+\tset prefix \"no_header\"\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" $executable \\\n+\t      $srcfile $options] } {\n+\treturn -1\n+    }\n+\n+    with_test_prefix $prefix {\n+\n+    if ![runto_main] {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n+\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+main.*\" \"in main\"\n+    gdb_test \"step\" \".*\" \"step into get_alias_set\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 1\"\n+    # It's possible that this first failure (when not using a header\n+    # file) is GCC's fault, though the remaining failures would best\n+    # be fixed by adding location views support (though it could be\n+    # that some easier heuristic could be figured out).  Still, it is\n+    # not certain that the first failure wouldn't also be fixed by\n+    # having location view support, so for now it is tagged as such.\n+    if {!$use_header} { setup_kfail \"*-*-*\" symtab/25507 }\n+    gdb_test \"next\" \".*TREE_TYPE.*\" \"next step 1\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 2\"\n+    gdb_test \"next\" \".*TREE_TYPE.*\" \"next step 2\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 3\"\n+    if {!$use_header} { setup_kfail \"*-*-*\" symtab/25507 }\n+    gdb_test \"next\" \".*TREE_TYPE.*\" \"next step 3\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 4\"\n+    if {!$use_header} { setup_kfail \"*-*-*\" symtab/25507 }\n+    gdb_test \"next\" \"return 0.*\" \"next step 4\"\n+    gdb_test \"bt\" \\\n+\t\"\\\\s*\\\\#0\\\\s+(main|get_alias_set)\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 5\"\n+\n+    if {!$use_header} {\n+\t# With the debug from GCC 10.x (and earlier) GDB is currently\n+\t# unable to successfully complete the following tests when we\n+\t# are not using a header file.\n+\tkfail symtab/25507 \"stepping tests\"\n+\treturn\n+    }\n+\n+    clean_restart ${executable}\n+\n+    if ![runto_main] {\n+\tfail \"can't run to main pass 2\"\n+\treturn\n+    }\n+\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+main.*\" \"in main pass 2\"\n+    gdb_test \"step\" \".*\" \"step into get_alias_set pass 2\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"in get_alias_set pass 2\"\n+    gdb_test \"step\" \".*TREE_TYPE.*\" \"step 1\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 1 pass 2\"\n+    gdb_test \"step\" \".*if \\\\(t->x != i\\\\).*\" \"step 2\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+\\[^\\r\\]*tree_check\\[^\\r\\]*${hdrfile}:.*\" \\\n+\t\"in inline 1 pass 2\"\n+    gdb_test \"step\" \".*TREE_TYPE.*\" \"step 3\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 2 pass 2\"\n+    gdb_test \"step\" \".*if \\\\(t->x != i\\\\).*\" \"step 4\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+\\[^\\r\\]*tree_check\\[^\\r\\]*${hdrfile}:.*\" \\\n+\t\"in inline 2 pass 2\"\n+    gdb_test \"step\" \".*TREE_TYPE.*\" \"step 5\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+get_alias_set\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 3 pass 2\"\n+    gdb_test \"step\" \".*if \\\\(t->x != i\\\\).*\" \"step 6\"\n+    gdb_test \"bt\" \"\\\\s*\\\\#0\\\\s+\\[^\\r\\]*tree_check\\[^\\r\\]*${hdrfile}:.*\" \\\n+\t\"in inline 3 pass 2\"\n+    gdb_test \"step\" \"return 0.*\" \"step 7\"\n+    gdb_test \"bt\" \\\n+\t\"\\\\s*\\\\#0\\\\s+(main|get_alias_set)\\[^\\r\\]*${srcfile}:.*\" \\\n+\t\"not in inline 4 pass 2\"\n+    }\n+}\n+\n+do_test 0\n+do_test 1"
    },
    {
      "sha": "6c6d90a37ffd5a4b031645d8bc56e4bf71c7aea5",
      "filename": "gdb/testsuite/gdb.cp/step-and-next-inline.h",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.cp/step-and-next-inline.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/step-and-next-inline.h?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,38 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* The code below must remain identical to the block of code in\n+   step-and-next-inline.cc.  */\n+\n+#include <stdlib.h>\n+\n+struct tree\n+{\n+  volatile int x;\n+  volatile int z;\n+};\n+\n+#define TREE_TYPE(NODE) (*tree_check (NODE, 0))\n+\n+inline tree *\n+tree_check (tree *t, int i)\n+{\n+  if (t->x != i)\n+    abort();\n+  tree *x = t;\n+  return x;\n+}"
    },
    {
      "sha": "be3fa458cf09dacf0ff63cb15fcebe17851ecf89",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.c",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,99 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This tests GDB's handling of the DWARF is-stmt field in the line table.\n+\n+   This field is used when many addresses all represent the same source\n+   line.  The address(es) at which it is suitable to place a breakpoint for\n+   a line are marked with is-stmt true, while address(es) that are not good\n+   places to place a breakpoint are marked as is-stmt false.\n+\n+   In order to build a reproducible test and exercise GDB's is-stmt\n+   support, we will be generating our own DWARF.  The test will contain a\n+   series of C source lines, ensuring that we get a series of assembler\n+   instructions.  Each C source line will be given an assembler label,\n+   which we use to generate a fake line table.\n+\n+   In this fake line table each assembler block is claimed to represent a\n+   single C source line, however, we will toggle the is-stmt flag.  We can\n+   then debug this with GDB and test the handling of is-stmt.  */\n+\n+/* Used to insert labels with which we can build a fake line table.  */\n+#define LL(N)\t\t\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      asm (\"line_label_\" #N \": .globl line_label_\" #N); \\\n+      var = (N);\t\t\t\t\t\\\n+      bar = ((N) + 1);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+volatile int var;\n+volatile int bar;\n+\n+int\n+main ()\n+{\t\t\t\t\t/* main prologue */\n+  asm (\"main_label: .globl main_label\");\n+\n+  /* main start */\n+\n+  /* Line 1.  */\n+  /* Line 2.  */\n+  /* Line 3.  */\n+  /* Line 4.  */\n+  /* Line 5.  */\n+\n+  LL (0);\n+  LL (1);\n+  LL (2);\n+  LL (3);\n+  LL (4);\n+  LL (5);\n+  LL (6);\n+  LL (7);\n+  LL (8);\n+  LL (9);\n+  LL (10);\n+  LL (11);\n+  LL (12);\n+  LL (13);\n+  LL (14);\n+  LL (15);\n+  LL (16);\n+  return 0;\t\t\t\t/* main end */\n+}\n+\n+#if 0\n+\n+PROLOGUE*\n+1: L1\n+2: L1*\n+3: L2\n+4: L1\n+L3\n+L4\n+L4*\n+L2*\n+L2\n+L3\n+L5\n+L5*\n+L3\n+L4\n+L5\n+RETURN\n+\n+#endif"
    },
    {
      "sha": "436c4d010244a6d5526906e21b5cc1c0bc84f354",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.exp",
      "status": "added",
      "additions": 265,
      "deletions": 0,
      "changes": 265,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-is-stmt-2.exp?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,265 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test shows the importance of not corrupting the order of line\n+# table information.  When multiple lines are given for the same\n+# address the compiler usually lists these in the order in which we\n+# would expect to encounter them.  When stepping through nested inline\n+# frames the last line given for an address is assumed by GDB to be\n+# the most inner frame, and this is what GDB displays.\n+#\n+# If we corrupt the order of the line table entries then GDB will\n+# display the wrong line as being the inner most frame.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# The .c files use __attribute__.\n+if [get_compiler_info] {\n+    return -1\n+}\n+if !$gcc_compiled {\n+    return 0\n+}\n+\n+standard_testfile dw2-is-stmt-2.c dw2-is-stmt-2.S\n+\n+# Extract the start, length, and end for function called NAME and\n+# create suitable variables in the callers scope.\n+proc get_func_info { name } {\n+    global srcdir subdir srcfile\n+\n+    upvar 1 \"${name}_start\" func_start\n+    upvar 1 \"${name}_len\" func_len\n+    upvar 1 \"${name}_end\" func_end\n+\n+    lassign [function_range ${name} [list ${srcdir}/${subdir}/$srcfile]] \\\n+\tfunc_start func_len\n+    set func_end \"$func_start + $func_len\"\n+}\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+    declare_labels lines_label\n+\n+    get_func_info main\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name dw2-is-stmt.c}\n+\t    {low_pc 0 addr}\n+\t    {stmt_list ${lines_label} DW_FORM_sec_offset}\n+\t} {\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_len\" addr}\n+\t    } {}\n+\t}\n+    }\n+\n+    lines {version 2 default_is_stmt 1} lines_label {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address main}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_0}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main start\"] \\\n+\t\t      - [gdb_get_line_number \"main prologue\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_1}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 1\"] \\\n+\t\t      - [gdb_get_line_number \"main start\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_2}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_3}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 2\"] \\\n+\t\t      - [gdb_get_line_number \"Line 1\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_4}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 1\"] \\\n+\t\t      - [gdb_get_line_number \"Line 2\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_5}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 3\"] \\\n+\t\t      - [gdb_get_line_number \"Line 1\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_6}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 4\"] \\\n+\t\t      - [gdb_get_line_number \"Line 3\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_7}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_8}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 2\"] \\\n+\t\t      - [gdb_get_line_number \"Line 4\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_9}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_10}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 3\"] \\\n+\t\t      - [gdb_get_line_number \"Line 2\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_11}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 5\"] \\\n+\t\t      - [gdb_get_line_number \"Line 3\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_12}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_13}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 3\"] \\\n+\t\t      - [gdb_get_line_number \"Line 5\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_14}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 4\"] \\\n+\t\t      - [gdb_get_line_number \"Line 3\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_15}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"Line 5\"] \\\n+\t\t      - [gdb_get_line_number \"Line 4\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_16}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main end\"] \\\n+\t\t      - [gdb_get_line_number \"Line 5\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address ${main_end}}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Check stepping through the out of order lines gives the experience\n+# we expect; lines in the correct order, and stop at the correct\n+# labels.Q\n+set locs { { \"Line 1.\" \"line_label_2\" } \\\n+\t       { \"Line 4.\" \"line_label_7\" } \\\n+\t       { \"Line 2.\" \"line_label_8\" } \\\n+\t       { \"Line 5.\" \"line_label_12\" } \\\n+\t       { \"Line 3.\" \"line_label_13\" } }\n+foreach entry $locs {\n+    set pattern [lindex $entry 0]\n+    set label  [lindex $entry 1]\n+\n+    set linum [gdb_get_line_number \"$pattern\"]\n+    gdb_test \"step\" \"\\r\\n$linum\\[ \\t\\]+/\\\\* $pattern  \\\\*/\" \\\n+\t\"step to $pattern\"\n+\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t       \"read \\$pc at $pattern\"]\n+    set val [get_hexadecimal_valueof \"&${label}\" \"INVALID\"]\n+    gdb_assert { $pc == $val } \\\n+\t\"check pc at $pattern\"\n+}\n+\n+# Now restart the test, and this time, single instruction step\n+# through.  This is checking that the is-stmt marked lines are\n+# displayed differently (without addresses) to addresses that are\n+# mid-way through a line, or not marked as is-stmt.\n+clean_restart $binfile\n+runto_main\n+\n+foreach entry $locs {\n+    set pattern [lindex $entry 0]\n+    set label  [lindex $entry 1]\n+\n+    with_test_prefix \"stepi to $label\" {\n+\t# If can take many instruction steps to get to the next label.\n+\tset i 0\n+\tset pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" ]\n+\tset val [get_hexadecimal_valueof \"&${label}\" \"INVALID\"]\n+\twhile { $pc < $val } {\n+\t    incr i\n+\t    set line_changed -1\n+\t    gdb_test_multiple \"stepi\" \"stepi $i\" {\n+\t\t-re \"\\r\\n$hex\\[ \\t\\]+$decimal\\[^\\r\\n\\]+\\r\\n$gdb_prompt\" {\n+\t\t    set line_changed 0\n+\t\t}\n+\t\t-re \"\\r\\n$decimal\\[ \\t\\]+/\\\\* $pattern  \\\\*/\\r\\n$gdb_prompt\" {\n+\t\t    set line_changed 1\n+\t\t}\n+\t    }\n+\t    gdb_assert { $line_changed != -1 } \\\n+\t\t\"ensure we saw a valid pattern, $i\"\n+\t    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t\t\t\"get pc inside stepi loop, $i\"]\n+\t    if { $pc == $val } {\n+\t\tgdb_assert { $line_changed } \\\n+\t\t    \"line must change at $label\"\n+\t    } else {\n+\t\tgdb_assert { !$line_changed } \"same line $i\"\n+\t    }\n+\t}\n+    }\n+}"
    },
    {
      "sha": "7e70995d80fd429b1fa661fd59cc4a6ac1425287",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-is-stmt.c",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,61 @@\n+/* Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This tests GDB's handling of the DWARF is-stmt field in the line table.\n+\n+   This field is used when many addresses all represent the same source\n+   line.  The address(es) at which it is suitable to place a breakpoint for\n+   a line are marked with is-stmt true, while address(es) that are not good\n+   places to place a breakpoint are marked as is-stmt false.\n+\n+   In order to build a reproducible test and exercise GDB's is-stmt\n+   support, we will be generating our own DWARF.  The test will contain a\n+   series of C source lines, ensuring that we get a series of assembler\n+   instructions.  Each C source line will be given an assembler label,\n+   which we use to generate a fake line table.\n+\n+   In this fake line table each assembler block is claimed to represent a\n+   single C source line, however, we will toggle the is-stmt flag.  We can\n+   then debug this with GDB and test the handling of is-stmt.  */\n+\n+/* Used to insert labels with which we can build a fake line table.  */\n+#define LL(N) asm (\"line_label_\" #N \": .globl line_label_\" #N)\n+\n+volatile int var;\n+volatile int bar;\n+\n+int\n+main ()\n+{\t\t\t\t\t/* main prologue */\n+  asm (\"main_label: .globl main_label\");\n+  LL (1);\n+  var = 99;\t\t\t\t/* main, set var to 99 */\n+  bar = 99;\n+\n+  LL (2);\n+  var = 0;\t\t\t\t/* main, set var to 0 */\n+  bar = 0;\n+\n+  LL (3);\n+  var = 1;\t\t\t\t/* main, set var to 1 */\n+  bar = 1;\n+\n+  LL (4);\n+  var = 2;\t\t\t\t/* main, set var to 2 */\n+  bar = 2;\n+\n+  LL (5);\n+  return 0;\t\t\t\t/* main end */\n+}"
    },
    {
      "sha": "1bcf5b0c6982d93f5ae4d326e56e7e79d6930a07",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-is-stmt.exp",
      "status": "added",
      "additions": 267,
      "deletions": 0,
      "changes": 267,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-is-stmt.exp?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -0,0 +1,267 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test shows the importance of not corrupting the order of line\n+# table information.  When multiple lines are given for the same\n+# address the compiler usually lists these in the order in which we\n+# would expect to encounter them.  When stepping through nested inline\n+# frames the last line given for an address is assumed by GDB to be\n+# the most inner frame, and this is what GDB displays.\n+#\n+# If we corrupt the order of the line table entries then GDB will\n+# display the wrong line as being the inner most frame.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# The .c files use __attribute__.\n+if [get_compiler_info] {\n+    return -1\n+}\n+if !$gcc_compiled {\n+    return 0\n+}\n+\n+standard_testfile dw2-is-stmt.c dw2-is-stmt.S\n+\n+# Extract the start, length, and end for function called NAME and\n+# create suitable variables in the callers scope.\n+proc get_func_info { name } {\n+    global srcdir subdir srcfile\n+\n+    upvar 1 \"${name}_start\" func_start\n+    upvar 1 \"${name}_len\" func_len\n+    upvar 1 \"${name}_end\" func_end\n+\n+    lassign [function_range ${name} [list ${srcdir}/${subdir}/$srcfile]] \\\n+\tfunc_start func_len\n+    set func_end \"$func_start + $func_len\"\n+}\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+    declare_labels lines_label\n+\n+    get_func_info main\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name dw2-is-stmt.c}\n+\t    {low_pc 0 addr}\n+\t    {stmt_list ${lines_label} DW_FORM_sec_offset}\n+\t} {\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_len\" addr}\n+\t    } {}\n+\t}\n+    }\n+\n+    lines {version 2 default_is_stmt 0} lines_label {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address main}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main prologue\"] - 1]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_1}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main, set var to 99\"] \\\n+\t\t      - [gdb_get_line_number \"main prologue\"]]}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_2}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main, set var to 0\"] \\\n+\t\t      - [gdb_get_line_number \"main, set var to 99\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_3}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_4}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_5}\n+\t    {DW_LNS_advance_line \\\n+\t\t [expr [gdb_get_line_number \"main end\"] \\\n+\t\t      - [gdb_get_line_number \"main, set var to 0\"]]}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address ${main_end}}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# First, break by address at a location we know is marked as not a\n+# statement.  GDB should still correctly report the file and line\n+# number.\n+gdb_breakpoint \"*line_label_2\"\n+gdb_continue_to_breakpoint \"*line_label_2\"\n+\n+# Now step by instruction.  We should skip over the is-stmt location\n+# for this line, and land on the next source line.\n+gdb_test \"step\" \"/\\\\* main end \\\\*/\" \\\n+    \"step to end from line_label_2\"\n+\n+# Restart the test.  This time, stop at a location we know is marked\n+# as a statement.\n+clean_restart ${binfile}\n+runto_main\n+\n+gdb_breakpoint \"*line_label_3\"\n+gdb_continue_to_breakpoint \"*line_label_3\"\n+\n+# Now step by instruction.  As you would expect we should leave this\n+# line and stop at the next source line.\n+gdb_test \"step\" \"/\\\\* main end \\\\*/\" \\\n+    \"step to end from line_label_3\"\n+\n+# Restart the test, this time, step through line by line, ensure we\n+# only stop at the places where is-stmt is true.\n+clean_restart ${binfile}\n+runto_main\n+\n+# Get the values of the labels where we expect to stop.\n+set ll1 [get_hexadecimal_valueof \"&line_label_1\" \"INVALID\"]\n+set ll2 [get_hexadecimal_valueof \"&line_label_2\" \"INVALID\"]\n+set ll3 [get_hexadecimal_valueof \"&line_label_3\" \"INVALID\"]\n+set ll5 [get_hexadecimal_valueof \"&line_label_5\" \"INVALID\"]\n+\n+# The first stop should be at line_label_1\n+with_test_prefix \"check we're at line_label_1\" {\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\"]\n+    gdb_assert { $ll1 == $pc } \"check initial \\$pc is line_label_1\"\n+}\n+\n+# Now step, this should take us to line_label_3 which is the next\n+# location marked as is-stmt.\n+with_test_prefix \"step to line_label_3\" {\n+    gdb_test \"step\" \"/\\\\* main, set var to 0 \\\\*/\"\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\"]\n+    gdb_assert { $ll3 == $pc } \"check initial \\$pc is line_label_3\"\n+}\n+\n+# A final step should take us to line_label_5.\n+with_test_prefix \"step to line_label_5\" {\n+    gdb_test \"step\" \"/\\\\* main end \\\\*/\"\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\"]\n+    gdb_assert { $ll5 == $pc } \"check initial \\$pc\"\n+}\n+\n+# Now restart the test, and place a breakpoint by line number.  GDB\n+# should select the location that is marked as is-stmt.\n+clean_restart ${binfile}\n+runto_main\n+set linum [gdb_get_line_number \"main, set var to 0\"]\n+gdb_breakpoint \"$srcfile:$linum\"\n+gdb_continue_to_breakpoint \"Breakpoint on line, set var to 0\"\n+set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\"]\n+gdb_assert { $ll3 == $pc } \"check initial \\$pc\"\n+\n+# Restart the test again, this time we will test stepping by\n+# instruction.\n+clean_restart ${binfile}\n+runto_main\n+\n+# We will be at line_label_1 at this point - we already tested this\n+# above.  Now single instruction step forward until we get to\n+# line_label_2.  Every instruction before line_label_2 should be\n+# attributed to the 'var = 99' line.  For most targets there will only\n+# be a single instruction between line_label_1 and line_label_2, but\n+# we allow for up to 25 (just a random number).\n+\n+set $i 0\n+set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t   \"get pc before stepi loop at line_label_1\"]\n+while { $pc < $ll2 } {\n+    incr i\n+    set line_changed -1\n+    gdb_test_multiple \"stepi\" \"stepi until line_label_2, $i\" {\n+\t-re \"main, set var to 99.*$gdb_prompt\" {\n+\t    set line_changed 0\n+\t}\n+\t-re \"main, set var to 0.*$gdb_prompt \" {\n+\t    set line_changed 1\n+\t}\n+    }\n+    gdb_assert { $line_changed != -1 } \\\n+\t\"ensure we saw a valid line pattern, $i\"\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t\t\"get pc inside stepi loop from line_label_1, $i\"]\n+    if { $ll2 == $pc } {\n+\tgdb_assert { $line_changed } \\\n+\t    \"line must change at line_label_2\"\n+    } else {\n+\tgdb_assert { !$line_changed } \\\n+\t    \"line should not change until line_label_2, $i\"\n+    }\n+}\n+\n+# Now single instruction step forward until GDB reports a new source\n+# line, at which point we should be at line_label_5.\n+\n+set $i 0\n+set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t   \"get pc before stepi loop at line_label_2\"]\n+while { $pc < $ll5 } {\n+    incr i\n+    set line_changed -1\n+    gdb_test_multiple \"stepi\" \"stepi until line_label_5, $i\" {\n+\t-re \"main, set var to 0.*$gdb_prompt\" {\n+\t    set line_changed 0\n+\t}\n+\t-re \"main end.*$gdb_prompt \" {\n+\t    set line_changed 1\n+\t}\n+    }\n+    gdb_assert { $line_changed != -1 } \\\n+\t\"ensure we saw a valid line pattern, $i\"\n+    set pc [get_hexadecimal_valueof \"\\$pc\" \"NO-PC\" \\\n+\t\t\"get pc inside stepi loop from line_label_2, $i\"]\n+    if { $ll5 == $pc } {\n+\tgdb_assert { $line_changed } \\\n+\t    \"line must change at line_label_5\"\n+    } else {\n+\tgdb_assert { !$line_changed } \\\n+\t    \"line should not change until line_label_5, $i\"\n+    }\n+}"
    },
    {
      "sha": "7f7301502ab1c4fb8355f2e37f5ed7e6cc1fbe69",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -146,10 +146,10 @@ gdb_test \"info line frame3\" \\\n set end_seq_count 0\n gdb_test_multiple \"maint info line-table\" \\\n     \"count END markers in line table\" {\n-\t-re \"^$decimal\\[ \\t\\]+$decimal\\[ \\t\\]+$hex\\r\\n\" {\n+\t-re \"^$decimal\\[ \\t\\]+$decimal\\[ \\t\\]+$hex\\(\\[ \\t\\]+Y\\)?\\r\\n\" {\n \t    exp_continue\n \t}\n-\t-re \"^$decimal\\[ \\t\\]+END\\[ \\t\\]+$hex\\r\\n\" {\n+\t-re \"^$decimal\\[ \\t\\]+END\\[ \\t\\]+$hex\\(\\[ \\t\\]+Y\\)?\\r\\n\" {\n \t    incr end_seq_count\n \t    exp_continue\n \t}\n@@ -159,7 +159,7 @@ gdb_test_multiple \"maint info line-table\" \\\n \t-re \".*linetable: \\\\(\\\\(struct linetable \\\\*\\\\) 0x0\\\\):\\r\\nNo line table.\\r\\n\" {\n \t    exp_continue\n \t}\n-\t-re \".*linetable: \\\\(\\\\(struct linetable \\\\*\\\\) $hex\\\\):\\r\\nINDEX\\[ \\t\\]+LINE\\[ \\t\\]+ADDRESS\\r\\n\" {\n+\t-re \".*linetable: \\\\(\\\\(struct linetable \\\\*\\\\) $hex\\\\):\\r\\nINDEX\\[ \\t\\]+LINE\\[ \\t\\]+ADDRESS\\[ \\t\\]+IS-STMT\\r\\n\" {\n \t    exp_continue\n \t}\n     }"
    },
    {
      "sha": "735f8b088258ba78fce61ce4d53c28c5d618e04f",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c95582da858ac981f689a6f599acacb8c5c490f/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=8c95582da858ac981f689a6f599acacb8c5c490f",
      "patch": "@@ -432,6 +432,9 @@ arrange_linetable (struct linetable *oldLineTb)\n \n   for (function_count = 0, ii = 0; ii < oldLineTb->nitems; ++ii)\n     {\n+      if (oldLineTb->item[ii].is_stmt == 0)\n+\tcontinue;\n+\n       if (oldLineTb->item[ii].line == 0)\n \t{\t\t\t/* Function entry found.  */\n \t  if (function_count >= fentry_size)\n@@ -442,6 +445,7 @@ arrange_linetable (struct linetable *oldLineTb)\n \t\t\t  fentry_size * sizeof (struct linetable_entry));\n \t    }\n \t  fentry[function_count].line = ii;\n+\t  fentry[function_count].is_stmt = 1;\n \t  fentry[function_count].pc = oldLineTb->item[ii].pc;\n \t  ++function_count;\n "
    }
  ]
}