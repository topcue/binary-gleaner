{
  "sha": "e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTNkNTI4ZDdlNmE2Yjg2M2QzMGFhZWNmNzRhZGY4Yzc4Mjg2Zjg0Yw==",
  "commit": {
    "author": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-04-12T18:35:54Z"
    },
    "committer": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-04-12T18:35:54Z"
    },
    "message": "[PATCH, rs6000, v3][PR gdb/27525] displaced stepping across addpcis/lnia.\n\n  This addresses PR gdb/27525.     The lnia and other variations\nof the addpcis instruction write the value of the NIA into a target register.\nIf we are single-stepping across a breakpoint, the instruction is executed\nfrom a displaced location, and thusly the written value of the PC/NIA\nwill be incorrect.   The changes here will measure the displacement\noffset, and adjust the target register value to compensate.\n\nYYYY-MM-DD  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\ngdb/ChangeLog:\n\n        * rs6000-tdep.c (ppc_displaced_step_fixup): Update to handle\n        the addpcis/lnia instruction.\n\ngdb/testsuite/ChangeLog:\n\n        * gdb.arch/powerpc-addpcis.exp: Testcase harness to\n        exercise single-stepping over subpcis,lnia,addpcis instructions\n        with displacement.\n        * gdb.arch/powerpc-addpcis.s: Testcase with stream\n        of addpcis/lnia/subpcis instructions.\n        * gdb.arch/powerpc-lnia.exp: Testcase harness to exercise\n        single-stepping over lnia instructions with displacement.\n        * gdb.arch/powerpc-lnia.s: Testcase with stream of\n        lnia instructions.",
    "tree": {
      "sha": "ec7b64bf5893b1bad1aec556ae7754896a47cdc6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ec7b64bf5893b1bad1aec556ae7754896a47cdc6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/comments",
  "author": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "82d9b2804751252a31342ab5a501ef6c96f4548a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82d9b2804751252a31342ab5a501ef6c96f4548a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/82d9b2804751252a31342ab5a501ef6c96f4548a"
    }
  ],
  "stats": {
    "total": 320,
    "additions": 319,
    "deletions": 1
  },
  "files": [
    {
      "sha": "fe52581fa52b18c1603bdac56a90841fd3dce564",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -1,5 +1,11 @@\n 2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n+\tPR gdb/27525\n+\t* gdb/rs6000-tdep.c (ppc_displaced_step_fixup): Update to\n+\thandle the addpcis/lnia instruction.\n+\n+2021-04-05  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n \t* MAINTAINERS (Write After Approval): Add myself.\n \n 2021-4-12  Carl Love  <cel@us.ibm.com>"
    },
    {
      "sha": "7a5b4bf647c996d66bafa042e101d564052d779c",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -863,6 +863,12 @@ typedef BP_MANIPULATION_ENDIAN (little_breakpoint, big_breakpoint)\n #define STHCX_INSTRUCTION 0x7c0005ad\n #define STQCX_INSTRUCTION 0x7c00016d\n \n+/* Instruction masks for single-stepping of addpcis/lnia.  */\n+#define ADDPCIS_INSN            0x4c000004\n+#define ADDPCIS_INSN_MASK       0xfc00003e\n+#define ADDPCIS_TARGET_REGISTER 0x03F00000\n+#define ADDPCIS_INSN_REGSHIFT   21\n+\n /* Check if insn is one of the Load And Reserve instructions used for atomic\n    sequences.  */\n #define IS_LOAD_AND_RESERVE_INSN(insn)\t((insn & LOAD_AND_RESERVE_MASK) == LWARX_INSTRUCTION \\\n@@ -941,8 +947,27 @@ ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n   displaced_debug_printf (\"(ppc) fixup (%s, %s)\",\n \t\t\t  paddress (gdbarch, from), paddress (gdbarch, to));\n \n+  /* Handle the addpcis/lnia instruction.  */\n+  if ((insn & ADDPCIS_INSN_MASK) == ADDPCIS_INSN)\n+    {\n+      LONGEST displaced_offset;\n+      ULONGEST current_val;\n+      /* Measure the displacement.  */\n+      displaced_offset = from - to;\n+      /* Identify the target register that was updated by the instruction.  */\n+      int regnum = (insn & ADDPCIS_TARGET_REGISTER) >> ADDPCIS_INSN_REGSHIFT;\n+      /* Read and update the target value.  */\n+      regcache_cooked_read_unsigned (regs, regnum , &current_val);\n+      displaced_debug_printf (\"addpcis target regnum %d was 0x%lx now 0x%lx\",\n+\t\t\tregnum, current_val, current_val + displaced_offset );\n+      regcache_cooked_write_unsigned (regs, regnum,\n+\t\t\t\t\tcurrent_val + displaced_offset);\n+      /* point the PC back at the non-displaced instruction.  */\n+      regcache_cooked_write_unsigned (regs, gdbarch_pc_regnum (gdbarch),\n+\t\t\t\t    from + offset);\n+    }\n   /* Handle PC-relative branch instructions.  */\n-  if (opcode == B_INSN || opcode == BC_INSN || opcode == BXL_INSN)\n+  else if (opcode == B_INSN || opcode == BC_INSN || opcode == BXL_INSN)\n     {\n       ULONGEST current_pc;\n "
    },
    {
      "sha": "2c0233d4bfd853a86867a0c3350d35a20fd04164",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -1,5 +1,18 @@\n 2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n+\tPR gdb/27525\n+\t* gdb/testsuite/gdb.arch/powerpc-addpcis.exp:  Testcase harness to\n+\texercise single-stepping over subpcis,lnia,addpcis instructions\n+\twith displacement.\n+\t* gdb/testsuite/gdb.arch/powerpc-addpcis.s: Testcase with stream\n+\tof addpcis/lnia/subpcis instructions.\n+\t* gdb/testsuite/gdb.arch/powerpc-lnia.exp: Testcase harness to\n+\texercise single-stepping over lnia instructions with displacement.\n+\t* gdb/testsuite/gdb.arch/powerpc-lnia.s: Testcase with stream of\n+\tlnia instructions.\n+\n+2021-03-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n \t* gdb.arch/powerpc-power10.s: New test for instructions.\n \t* gdb.arch/powerpc-power10.exp: Harness to run the test.\n "
    },
    {
      "sha": "d1bc7f49ce6bbba9b29ba033f8dee290253681ab",
      "filename": "gdb/testsuite/gdb.arch/powerpc-addpcis.exp",
      "status": "added",
      "additions": 105,
      "deletions": 0,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-addpcis.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-addpcis.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-addpcis.exp?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -0,0 +1,105 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+\n+# Test to confirm that gdb is properly single stepping over the\n+# displaced addpcis instruction.\n+# The addpcis instruction and its extended mnemonics lnia and subpcis\n+# apply an immediate shifted value (X || 0x0000) to the current PC/NIA\n+# value, and store that value into the instructions target register.\n+# When the instruction is displaced, it needs special handling.\n+\n+# lnia Rx == addpcis Rx,0\n+# subcis Rx,value == addpcis Rx,-value\n+\n+if { ![istarget powerpc*-*] } {\n+    verbose \"Skipping powerpc addpcis test.\"\n+    return\n+}\n+\n+set retval 0\n+\n+standard_testfile .s\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile \"$srcfile\" \\\n+      {debug quiet}] } {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+      return\n+}\n+\n+set check_pc [get_hexadecimal_valueof \"\\$pc\" \"default0\"]\n+set bp1 *$check_pc+4\n+set bp2 *$check_pc+12\n+set bp3 *$check_pc+16\n+gdb_breakpoint $bp1\n+gdb_breakpoint $bp2\n+gdb_breakpoint $bp3\n+\n+gdb_test \"stepi\" \"\" \"set r3 \"\n+set check_r3 [get_hexadecimal_valueof \"\\$r3\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r4\"\n+set check_r4 [get_hexadecimal_valueof \"\\$r4\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r5\"\n+set check_r5 [get_hexadecimal_valueof \"\\$r5\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r6\"\n+set check_r6 [get_hexadecimal_valueof \"\\$r6\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r7\"\n+set check_r7 [get_hexadecimal_valueof \"\\$r7\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r8\"\n+set check_r8 [get_hexadecimal_valueof \"\\$r8\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r9\"\n+set check_r9 [get_hexadecimal_valueof \"\\$r9\" \"default0\"]\n+\n+# R6 will contain the reference value.  All other\n+# instructions in this test will be storing values\n+# relative to what is stored in R6.\n+\n+#\tsubpcis 3,+0x100 \t# /* set r3 */\n+#\tsubpcis 4,+0x10\t\t# /* set r4 */\n+#\tsubpcis 5,+0x1\t\t# /* set r5 */\n+#\tlnia    6\t\t# /* set r6 */\n+#\taddpcis 7,+0x1\t\t# /* set r7 */\n+#\taddpcis 8,+0x10\t\t# /* set r8 */\n+#\taddpcis 9,+0x100\t# /* set r9 */\n+\n+if [expr $check_r3 + 0x1000000   != $check_r6 - 0xc ] {\n+    fail \"unexpected value r3 + 0x1,000,000 != r6 + 0xc ; r3: $check_r3  r6: $check_r6 \"\n+}\n+if [expr $check_r4 + 0x100000  != $check_r6 - 0x8 ] {\n+    fail \"unexpected value r4 + 0x100,000 != r6 - 0x8 ; r4: $check_r4  r6: $check_r6 \"\n+}\n+if [expr $check_r5 + 0x10000  != $check_r6 - 0x4 ] {\n+    fail \"unexpected value r5 + 0x10,000 != r6 , r5: $check_r5  r6: $check_r6 \"\n+}\n+if [expr $check_r6 != $check_r6] {\n+    fail \"unexpected value r6 != r6 , r6: $check_r6  r6: $check_r6 \"\n+}\n+if [expr $check_r7 - 0x10000  != $check_r6 + 0x4] {\n+    fail \"unexpected value r7 - 0x10,000 != r6 + 0x4 , r7: $check_r7  r7: $check_r6 \"\n+}\n+if [expr $check_r8 - 0x100000  != $check_r6 + 0x8 ] {\n+    fail \"unexpected value r8 - 0x100,000 != r6 , r8: $check_r8  r8: $check_r6 \"\n+}\n+if [expr $check_r9 - 0x1000000  != $check_r6 + 0xc ] {\n+    fail \"unexpected value r9 - 0x1,000,000 != r6 + 0xc , r9: $check_r9  r6: $check_r6 \"\n+}\n+\n+gdb_test \"info break\"\n+gdb_test \"info register r3 r4 r5 r6 r7 r8 r9\"\n+gdb_test \"disas main\"\n+"
    },
    {
      "sha": "8a163a23cb32f56870ae0a3f2bd1ced2a8190bf8",
      "filename": "gdb/testsuite/gdb.arch/powerpc-addpcis.s",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-addpcis.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-addpcis.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-addpcis.s?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -0,0 +1,35 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n+\n+\n+/*  Test to confirm that gdb is properly single stepping over the\n+    displaced addpcis instruction.  */\n+\n+.global main\n+.type main,function\n+# addpcis: the sum of NIA + ( D || 0x0000) is placed in RT.\n+main:\n+\tsubpcis 3,+0x100  \t# /* set r3 */\n+\tsubpcis 4,+0x10  \t# /* set r4 */\n+\tsubpcis 5,+0x1  \t# /* set r5 */\n+\tlnia    6  \t\t# /* set r6 */\n+\taddpcis 7,+0x1  \t# /* set r7 */\n+\taddpcis 8,+0x10  \t# /* set r8 */\n+\taddpcis 9,+0x100  \t# /* set r9 */\n+\tblr\n+\n+"
    },
    {
      "sha": "0f56d8340468db2a2ab38767b5f1c5ed2aa69326",
      "filename": "gdb/testsuite/gdb.arch/powerpc-lnia.exp",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-lnia.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-lnia.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-lnia.exp?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -0,0 +1,101 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test to see if gdb is properly single stepping over the\n+# displaced lnia instruction.  This test checks that a series\n+# of lnia instructions are loading ascending values as expected.\n+\n+# lnia is an extended mnemonic for the addpcis instruction, which\n+# stores the $NIA plus an immediate value into a register.\n+#\n+#\t\tlnia Rx == addpcis Rx,0 == lnia Rx\n+#\t\tsubcis Rx,value == addpcis Rx,-value\n+\n+if { ![istarget powerpc*-*] } {\n+    verbose \"Skipping powerpc lnia test.\"\n+    return\n+}\n+\n+set retval 0\n+\n+standard_testfile .s\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile \"$srcfile\" \\\n+      {debug quiet}] } {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+      return\n+}\n+\n+set before_pc 0\n+set check_pc [get_hexadecimal_valueof \"\\$pc\" \"default0\"]\n+\n+# set some breakpoints on the instructions below main().\n+set bp1 *$check_pc+4\n+set bp2 *$check_pc+12\n+set bp3 *$check_pc+16\n+gdb_breakpoint $bp1\n+gdb_breakpoint $bp2\n+gdb_breakpoint $bp3\n+\n+# single-step through the lnia instructions, and retrieve the\n+# register values as we proceed.\n+gdb_test \"stepi\" \"\" \"set r3\"\n+set check_r3 [get_hexadecimal_valueof \"\\$r3\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r4\"\n+set check_r4 [get_hexadecimal_valueof \"\\$r4\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r5\"\n+set check_r5 [get_hexadecimal_valueof \"\\$r5\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r6\"\n+set check_r6 [get_hexadecimal_valueof \"\\$r6\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r7\"\n+set check_r7 [get_hexadecimal_valueof \"\\$r7\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r8\"\n+set check_r8 [get_hexadecimal_valueof \"\\$r8\" \"default0\"]\n+gdb_test \"stepi\" \"\" \"set r9\"\n+set check_r9 [get_hexadecimal_valueof \"\\$r9\" \"default0\"]\n+\n+# Ensure that our register values are as expected.\n+# Specifically that the values loaded by the lnia instruction\n+# reflect the value of the PC as if the instruction was\n+# not displaced.\n+if [expr $check_r3 + 4 != $check_r4] {\n+    fail \"unexpected value r3+4 != r4 , r3: $check_r3  r4: $check_r4 \"\n+}\n+if [expr $check_r4 + 4 != $check_r5] {\n+    fail \"unexpected value r4+4 != r5 , r4: $check_r4  r5: $check_r5 \"\n+}\n+if [expr $check_r5 + 4 != $check_r6] {\n+    fail \"unexpected value r5+4 != r6 , r5: $check_r5  r6: $check_r6 \"\n+}\n+if [expr $check_r6 + 4 != $check_r7] {\n+    fail \"unexpected value r6+4 != r7 , r6: $check_r6  r7: $check_r7 \"\n+}\n+if [expr $check_r7 + 4 != $check_r8] {\n+    fail \"unexpected value r7+4 != r8 , r7: $check_r7  r8: $check_r8 \"\n+}\n+if [expr $check_r8 + 4 != $check_r9] {\n+    fail \"unexpected value r8+4 != r9 , r8: $check_r8  r9: $check_r9 \"\n+}\n+\n+gdb_test \"info break\"\n+gdb_test \"info register r3 r4 r5 r6 r7 r8 r9\"\n+gdb_test \"disas main\"\n+\n+# Let the inferior store all vector registers in a buffer, then dump\n+# the buffer and check it.\n+"
    },
    {
      "sha": "56e574591213755b1be44e74977d89ad7413ddd3",
      "filename": "gdb/testsuite/gdb.arch/powerpc-lnia.s",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-lnia.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3d528d7e6a6b863d30aaecf74adf8c78286f84c/gdb/testsuite/gdb.arch/powerpc-lnia.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-lnia.s?ref=e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "patch": "@@ -0,0 +1,33 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n+\n+/* Test to confirm that gdb properly handles lnia instructions\n+   that load the current PC into a target register when executed\n+   from a displaced location.  */\n+\n+.global main\n+.type main,function\n+main:\n+\tlnia 3  # /* set r3 */\n+\tlnia 4  # /* set r4 */\n+\tlnia 5  # /* set r5 */\n+\tlnia 6  # /* set r6 */\n+\tlnia 7  # /* set r7 */\n+\tlnia 8  # /* set r8 */\n+\tlnia 9  # /* set r9 */\n+\tblr\n+"
    }
  ]
}