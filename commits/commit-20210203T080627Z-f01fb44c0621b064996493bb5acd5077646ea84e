{
  "sha": "f01fb44c0621b064996493bb5acd5077646ea84e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjAxZmI0NGMwNjIxYjA2NDk5NjQ5M2JiNWFjZDUwNzc2NDZlYTg0ZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-03T05:27:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-03T08:06:27Z"
    },
    "message": "Re: PR27311, ld.bfd (symbol from plugin): undefined reference\n\nThis does exactly the same as making decisions based on an override\nin _bfd_elf_add_default_symbol, and is simpler.\n\n\tPR 27311\n\t* elflink.c (_bfd_elf_add_default_symbol): Revert last two changes.\n\t(elf_link_add_object_symbols): Here too.  Don't pull in as-needed\n\tlibraries when H is an indirect symbol after calling\n\t_bfd_elf_add_default_symbol.",
    "tree": {
      "sha": "a5fb29ebf2f9a6b8e3216dc06cb11b62617dc539",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5fb29ebf2f9a6b8e3216dc06cb11b62617dc539"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f01fb44c0621b064996493bb5acd5077646ea84e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f01fb44c0621b064996493bb5acd5077646ea84e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f01fb44c0621b064996493bb5acd5077646ea84e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f01fb44c0621b064996493bb5acd5077646ea84e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "95b91a043aeaeb546d2fea556d84a2de1e917770",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95b91a043aeaeb546d2fea556d84a2de1e917770",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/95b91a043aeaeb546d2fea556d84a2de1e917770"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 17,
    "deletions": 15
  },
  "files": [
    {
      "sha": "99987a26402a78f010dead298738a0599b12ff1b",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f01fb44c0621b064996493bb5acd5077646ea84e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f01fb44c0621b064996493bb5acd5077646ea84e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f01fb44c0621b064996493bb5acd5077646ea84e",
      "patch": "@@ -1,3 +1,11 @@\n+2021-02-03  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27311\n+\t* elflink.c (_bfd_elf_add_default_symbol): Revert last two changes.\n+\t(elf_link_add_object_symbols): Here too.  Don't pull in as-needed\n+\tlibraries when H is an indirect symbol after calling\n+\t_bfd_elf_add_default_symbol.\n+\n 2021-02-03  Alan Modra  <amodra@gmail.com>\n \n \tPR 27311"
    },
    {
      "sha": "b8c29250a2c41d0c20d79e93159d46245e4eda00",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 9,
      "deletions": 15,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f01fb44c0621b064996493bb5acd5077646ea84e/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f01fb44c0621b064996493bb5acd5077646ea84e/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=f01fb44c0621b064996493bb5acd5077646ea84e",
      "patch": "@@ -1850,8 +1850,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n \t\t\t     asection *sec,\n \t\t\t     bfd_vma value,\n \t\t\t     bfd **poldbfd,\n-\t\t\t     bfd_boolean *dynsym,\n-\t\t\t     bfd **override)\n+\t\t\t     bfd_boolean *dynsym)\n {\n   bfd_boolean type_change_ok;\n   bfd_boolean size_change_ok;\n@@ -1862,7 +1861,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n   const struct elf_backend_data *bed;\n   bfd_boolean collect;\n   bfd_boolean dynamic;\n-  bfd *nondef_override;\n+  bfd *override;\n   char *p;\n   size_t len, shortlen;\n   asection *tmp_sec;\n@@ -1922,7 +1921,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n   matched = TRUE;\n   tmp_sec = sec;\n   if (!_bfd_elf_merge_symbol (abfd, info, shortname, sym, &tmp_sec, &value,\n-\t\t\t      &hi, poldbfd, NULL, NULL, &skip, override,\n+\t\t\t      &hi, poldbfd, NULL, NULL, &skip, &override,\n \t\t\t      &type_change_ok, &size_change_ok, &matched))\n     return FALSE;\n \n@@ -1946,19 +1945,15 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n \t  if (hi->verinfo.vertree != NULL && hide)\n \t    {\n \t      (*bed->elf_backend_hide_symbol) (info, hi, TRUE);\n-\t      *override = FALSE;\n \t      goto nondefault;\n \t    }\n \t}\n       if (hi->verinfo.vertree != NULL\n \t  && strcmp (p + 1 + (p[1] == '@'), hi->verinfo.vertree->name) != 0)\n-\t{\n-\t  *override = FALSE;\n-\t  goto nondefault;\n-\t}\n+\tgoto nondefault;\n     }\n \n-  if (!*override)\n+  if (! override)\n     {\n       /* Add the default symbol if not performing a relocatable link.  */\n       if (! bfd_link_relocatable (info))\n@@ -2085,7 +2080,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n   size_change_ok = FALSE;\n   tmp_sec = sec;\n   if (!_bfd_elf_merge_symbol (abfd, info, shortname, sym, &tmp_sec, &value,\n-\t\t\t      &hi, poldbfd, NULL, NULL, &skip, &nondef_override,\n+\t\t\t      &hi, poldbfd, NULL, NULL, &skip, &override,\n \t\t\t      &type_change_ok, &size_change_ok, &matched))\n     return FALSE;\n \n@@ -2109,7 +2104,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n       else\n \treturn TRUE;\n     }\n-  else if (nondef_override)\n+  else if (override)\n     {\n       /* Here SHORTNAME is a versioned name, so we don't expect to see\n \t the type of override we do in the case above unless it is\n@@ -5094,8 +5089,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t      && !(hi != h\n \t\t   && hi->versioned == versioned_hidden))\n \t    if (!_bfd_elf_add_default_symbol (abfd, info, h, name, isym,\n-\t\t\t\t\t      sec, value, &old_bfd, &dynsym,\n-\t\t\t\t\t      &override))\n+\t\t\t\t\t      sec, value, &old_bfd, &dynsym))\n \t      goto error_free_vers;\n \n \t  /* Check the alignment when a common symbol is involved. This\n@@ -5278,9 +5272,9 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t      }\n \n \t  if (!add_needed\n-\t      && !override\n \t      && matched\n \t      && definition\n+\t      && h->root.type != bfd_link_hash_indirect\n \t      && ((dynsym\n \t\t   && h->ref_regular_nonweak)\n \t\t  || (old_bfd != NULL"
    }
  ]
}