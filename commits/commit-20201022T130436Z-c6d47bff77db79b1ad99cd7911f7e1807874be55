{
  "sha": "c6d47bff77db79b1ad99cd7911f7e1807874be55",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzZkNDdiZmY3N2RiNzliMWFkOTljZDc5MTFmN2UxODA3ODc0YmU1NQ==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-22T13:04:21Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-22T13:04:36Z"
    },
    "message": "ld: Pass -fno-lto to non LTO tests\n\n\t* testsuite/config/default.exp (NOLTO_CFLAGS): New.\n\t* ld/testsuite/ld-elfcomm/elfcomm.exp: Add $NOLTO_CFLAGS to CC.\n\t* testsuite/ld-elfvers/vers.exp: Likewise.\n\t* testsuite/ld-elfvsb/elfvsb.exp: Likewise.\n\t* testsuite/ld-gc/gc.exp: Likewise.\n\t* testsuite/ld-plugin/plugin.exp: Likewise.\n\t* testsuite/ld-scripts/crossref.exp: Likewise.\n\t* testsuite/ld-selective/selective.exp: Likewise.\n\t* testsuite/ld-undefined/undefined.exp: Likewise.\n\t* testsuite/ld-srec/srec.exp: Add $NOLTO_CFLAGS to CC.  Override\n\tCXXFLAGS.\n\t* testsuite/lib/ld-lib.exp (run_ld_link_tests): Prepend -fno-lto\n\tto cflags.",
    "tree": {
      "sha": "bc57be9e8e0f4e3e660b455411c5fecdae6401b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc57be9e8e0f4e3e660b455411c5fecdae6401b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6d47bff77db79b1ad99cd7911f7e1807874be55",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d47bff77db79b1ad99cd7911f7e1807874be55",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6d47bff77db79b1ad99cd7911f7e1807874be55",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d47bff77db79b1ad99cd7911f7e1807874be55/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "63aa0ac0fd8f4d46507a12c1a38217f8d7d1ee33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63aa0ac0fd8f4d46507a12c1a38217f8d7d1ee33",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/63aa0ac0fd8f4d46507a12c1a38217f8d7d1ee33"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 64,
    "deletions": 27
  },
  "files": [
    {
      "sha": "2e6cfd4a8b2f68585815f52ed68336fc70b25079",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -1,3 +1,19 @@\n+2020-10-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* testsuite/config/default.exp (NOLTO_CFLAGS): New.\n+\t* ld/testsuite/ld-elfcomm/elfcomm.exp: Add $NOLTO_CFLAGS to CC.\n+\t* testsuite/ld-elfvers/vers.exp: Likewise.\n+\t* testsuite/ld-elfvsb/elfvsb.exp: Likewise.\n+\t* testsuite/ld-gc/gc.exp: Likewise.\n+\t* testsuite/ld-plugin/plugin.exp: Likewise.\n+\t* testsuite/ld-scripts/crossref.exp: Likewise.\n+\t* testsuite/ld-selective/selective.exp: Likewise.\n+\t* testsuite/ld-undefined/undefined.exp: Likewise.\n+\t* testsuite/ld-srec/srec.exp: Add $NOLTO_CFLAGS to CC.  Override\n+\tCXXFLAGS.\n+\t* testsuite/lib/ld-lib.exp (run_ld_link_tests): Prepend -fno-lto\n+\tto cflags.\n+\n 2020-10-19  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/config/default.exp: Provide dummy libraries for"
    },
    {
      "sha": "e5730ff565476770e32dfdd3728d4098806e529a",
      "filename": "ld/testsuite/config/default.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/config/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/config/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/config/default.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -398,6 +398,13 @@ if { ![info exists NOSANITIZE_CFLAGS] } then {\n     }\n }\n \n+if { ![info exists NOLTO_CFLAGS] } then {\n+    set NOLTO_CFLAGS \"\"\n+    if [compiler_supports \"-fno-lto\"] {\n+\tset NOLTO_CFLAGS \"-fno-lto\"\n+    }\n+}\n+\n # Provide dummy libraries that alpha-vms-ld always loads\n if { [istarget alpha*-*-*vms*] } {\n     set src tmpdir/empty.s"
    },
    {
      "sha": "856a6db5c622696b633b56a1c23bae70dfef9615",
      "filename": "ld/testsuite/ld-elfcomm/elfcomm.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfcomm/elfcomm.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfcomm/elfcomm.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elfcomm/elfcomm.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -169,9 +169,9 @@ if [istarget nios2*-*-*] {\n \n # Explicitly use \"-fcommon\" so that even if $CFLAGS includes\n # \"-fno-common\", these tests are compiled as expected.\n-if {   ![ld_compile \"$CC $CFLAGS -fcommon $NOSANITIZE_CFLAGS\" $srcdir/$subdir/common1a.c tmpdir/common1a.o]\n-    || ![ld_compile \"$CC $CFLAGS -fcommon $NOSANITIZE_CFLAGS\" $srcdir/$subdir/common1b.c tmpdir/common1b.o]\n-    || ![ld_compile \"$CC $CFLAGS $NOSANITIZE_CFLAGS -Wa,--elf-stt-common=yes -fcommon\" $srcdir/$subdir/common1b.c tmpdir/common1c.o] } {\n+if {   ![ld_compile \"$CC $CFLAGS -fcommon $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/common1a.c tmpdir/common1a.o]\n+    || ![ld_compile \"$CC $CFLAGS -fcommon $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/common1b.c tmpdir/common1b.o]\n+    || ![ld_compile \"$CC $CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -Wa,--elf-stt-common=yes -fcommon\" $srcdir/$subdir/common1b.c tmpdir/common1c.o] } {\n     unresolved $test1\n     unresolved $test1\n     return"
    },
    {
      "sha": "817e8be6d4d73a9a4c677656bdd570fa8f59d1c1",
      "filename": "ld/testsuite/ld-elfvers/vers.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfvers/vers.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfvers/vers.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elfvers/vers.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -490,8 +490,9 @@ proc build_binary { shared pic test source libname other mapfile verexp versymex\n     global CFLAGS\n     global script\n     global NOSANITIZE_CFLAGS\n+    global NOLTO_CFLAGS\n \n-    if ![ld_compile \"$CC -S $pic $CFLAGS $NOSANITIZE_CFLAGS\" $srcdir/$subdir/$source $tmpdir/$libname.s]     {\n+    if ![ld_compile \"$CC -S $pic $CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/$source $tmpdir/$libname.s]     {\n \tunresolved \"$test\"\n \treturn\n     }\n@@ -619,8 +620,9 @@ proc test_asfail { test flag source execname whyfail } {\n     global as\n     global CC\n     global CFLAGS\n+    global NOLTO_CFLAGS\n \n-    if ![ld_compile \"$CC -S $flag $CFLAGS\" $srcdir/$subdir/$source $tmpdir/$execname.s]     {\n+    if ![ld_compile \"$CC -S $flag $CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/$source $tmpdir/$execname.s]     {\n \tunresolved \"$test\"\n \treturn\n     }\n@@ -689,6 +691,7 @@ proc build_exec { test source execname flags solibname verexp versymexp symexp }\n     global CC\n     global CFLAGS\n     global NOSANITIZE_CFLAGS\n+    global NOLTO_CFLAGS\n \n     set shared \"--shared --no-undefined-version\"\n     set script --version-script\n@@ -699,8 +702,8 @@ proc build_exec { test source execname flags solibname verexp versymexp symexp }\n \tappend cc_cmd \" -fno-lto\"\n     }\n \n-    # Disable all sanitizers.\n-    append cc_cmd \" $NOSANITIZE_CFLAGS\"\n+    # Disable all sanitizers and LTO.\n+    append cc_cmd \" $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n \n     if ![ld_compile $cc_cmd $srcdir/$subdir/$source $tmpdir/$execname.s]     {\n \tunresolved \"$test\""
    },
    {
      "sha": "a729df3f01a218a06edb27918f4915aa124715e3",
      "filename": "ld/testsuite/ld-elfvsb/elfvsb.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfvsb/elfvsb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-elfvsb/elfvsb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elfvsb/elfvsb.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -198,6 +198,7 @@ proc visibility_run {visibility} {\n     global NOPIE_CFLAGS\n     global COMPRESS_LDFLAG\n     global NOSANITIZE_CFLAGS\n+    global NOLTO_CFLAGS\n \n     if [ string match $visibility \"hidden\" ] {\n \tset VSBCFLAG \"-DHIDDEN_TEST\"\n@@ -236,7 +237,7 @@ proc visibility_run {visibility} {\n     } else {\n     # Compile the main program.  Make sure that PLT is used since PLT\n     # is expected.\n-    if ![ld_compile \"$CC -g $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS\" $srcdir/$subdir/main.c $tmpdir/mainnp.o] {\n+    if ![ld_compile \"$CC -g $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/main.c $tmpdir/mainnp.o] {\n \tunresolved \"visibility ($visibility) (non PIC)\"\n \tunresolved \"visibility ($visibility)\"\n     } else {\n@@ -246,8 +247,8 @@ proc visibility_run {visibility} {\n \t# will need to do more relocation work.  However, note that not\n \t# using -fpic will cause some of the tests to return different\n \t# results.  Make sure that PLT is used since PLT is expected.\n-\tif { ![ld_compile \"$CC -g $NOPIE_CFLAGS $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS\" $srcdir/$subdir/sh1.c $tmpdir/sh1np.o]\n-\t     || ![ld_compile \"$CC -g $NOPIE_CFLAGS $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS\" $srcdir/$subdir/sh2.c $tmpdir/sh2np.o] } {\n+\tif { ![ld_compile \"$CC -g $NOPIE_CFLAGS $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/sh1.c $tmpdir/sh1np.o]\n+\t     || ![ld_compile \"$CC -g $NOPIE_CFLAGS $PLT_CFLAGS $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/sh2.c $tmpdir/sh2np.o] } {\n \t    unresolved \"visibility ($visibility) (non PIC)\"\n \t} else {\n \t    # SunOS non PIC shared libraries don't permit some cases of\n@@ -335,8 +336,8 @@ proc visibility_run {visibility} {\n \n \t# Now compile the code using -fpic.\n \n-\tif { ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh1.c $tmpdir/sh1p.o]\n-\t    || ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh2.c $tmpdir/sh2p.o] } {\n+\tif { ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh1.c $tmpdir/sh1p.o]\n+\t    || ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh2.c $tmpdir/sh2p.o] } {\n \t    unresolved \"visibility ($visibility)\"\n \t} else {\n \t    if { [ string match $visibility \"protected\" ]\n@@ -353,7 +354,7 @@ proc visibility_run {visibility} {\n \t# Don't bother.\n     } else {\n     # Now do the same tests again, but this time compile main.c PIC.\n-    if ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/main.c $tmpdir/mainp.o] {\n+    if ![ld_compile \"$CC -g $CFLAGS $SHCFLAG $VSBCFLAG $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/main.c $tmpdir/mainp.o] {\n \tunresolved \"visibility ($visibility) (PIC main, non PIC so)\"\n \tunresolved \"visibility ($visibility) (PIC main)\"\n     } else {\n@@ -445,7 +446,7 @@ visibility_run protected_undef_def\n visibility_run protected_weak\n visibility_run normal\n \n-if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS\" $srcdir/$subdir/common.c tmpdir/common.o] } {\n+if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/common.c tmpdir/common.o] } {\n     unresolved \"common hidden symbol\"\n } else {\n     if ![ld_link $ld tmpdir/common \"tmpdir/common.o\"] {\n@@ -455,10 +456,10 @@ if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS\" $srcdir/$subdir/common.c t\n     }\n }\n \n-if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS\" $srcdir/$subdir/test.c tmpdir/test.o] } {\n+if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" $srcdir/$subdir/test.c tmpdir/test.o] } {\n     unresolved \"weak hidden symbol\"\n } else {\n-   if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh3.c tmpdir/sh3.o] } {\n+   if { ![ld_compile \"$CC -g $CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS -DSHARED $picflag\" $srcdir/$subdir/sh3.c tmpdir/sh3.o] } {\n \tunresolved \"weak hidden symbol\"\n     } else {\n \tif ![ld_link $ld tmpdir/sh3.so \"-shared tmpdir/sh3.o\"] {"
    },
    {
      "sha": "aa0152373676b3c4cd353149c9ca194bb9c1372d",
      "filename": "ld/testsuite/ld-gc/gc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-gc/gc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-gc/gc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-gc/gc.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -23,7 +23,7 @@ if ![check_gc_sections_available] {\n     return\n }\n \n-set cflags \"-ffunction-sections -fdata-sections $NOSANITIZE_CFLAGS\"\n+set cflags \"-ffunction-sections -fdata-sections $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n set objfile \"tmpdir/gc.o\"\n \n if { [istarget powerpc*-*-*] && ![istarget powerpc64*-*-*] } {"
    },
    {
      "sha": "4b6b2fc7cda2fcfcb9174317fde08869026b56c2",
      "filename": "ld/testsuite/ld-plugin/plugin.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-plugin/plugin.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-plugin/plugin.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/plugin.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -94,7 +94,7 @@ set failed_compile 0\n set _ \"\"\n set plugin_nm_output \"\"\n set old_CFLAGS \"$CFLAGS\"\n-append CFLAGS \" $NOSANITIZE_CFLAGS\"\n+append CFLAGS \" $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n \n if { $can_compile && \\\n \t(![ld_compile \"$CC $CFLAGS\" $srcdir/$subdir/main.c tmpdir/main.o] \\"
    },
    {
      "sha": "d5cd5079c82eb0ba9678b45245887fce305463a6",
      "filename": "ld/testsuite/ld-scripts/crossref.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-scripts/crossref.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-scripts/crossref.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/crossref.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -63,8 +63,8 @@ if [istarget tic6x*-*-*] {\n     set CFLAGS \"-mno-dsbt -msdata=none\"\n }\n \n-if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS\" \"$srcdir/$subdir/cross1.c\" tmpdir/cross1.o] \\\n-     || ![ld_compile \"$CC $NOSANITIZE_CFLAGS\" \"$srcdir/$subdir/cross2.c\" tmpdir/cross2.o] } {\n+if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" \"$srcdir/$subdir/cross1.c\" tmpdir/cross1.o] \\\n+     || ![ld_compile \"$CC $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" \"$srcdir/$subdir/cross2.c\" tmpdir/cross2.o] } {\n     unresolved $test1\n     unresolved $test2\n     set CFLAGS \"$old_CFLAGS\"\n@@ -101,7 +101,7 @@ if [string match \"\" $exec_output] then {\n \n # Check cross references within a single object.\n \n-if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS\" \"$srcdir/$subdir/cross3.c\" tmpdir/cross3.o] } {\n+if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" \"$srcdir/$subdir/cross3.c\" tmpdir/cross3.o] } {\n     unresolved $test2\n     set CFLAGS \"$old_CFLAGS\"\n     set CC \"$old_CC\"\n@@ -126,7 +126,7 @@ if [string match \"\" $exec_output] then {\n \n # Check cross references for ld -r\n \n-if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS\" \"$srcdir/$subdir/cross4.c\" tmpdir/cross4.o] } {\n+if { ![ld_compile \"$CC $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\" \"$srcdir/$subdir/cross4.c\" tmpdir/cross4.o] } {\n     unresolved $test3\n     set CFLAGS \"$old_CFLAGS\"\n     set CC \"$old_CC\""
    },
    {
      "sha": "8c34699203e2ab1ada812019341cb1a1b7cdd7e0",
      "filename": "ld/testsuite/ld-selective/selective.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-selective/selective.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-selective/selective.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-selective/selective.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -46,8 +46,8 @@ set seltests {\n     {A::foo() B::foo() dropme1() dropme2()} {*-*-*}}\n }\n \n-set cflags \"-w -O -ffunction-sections -fdata-sections $NOSANITIZE_CFLAGS\"\n-set cxxflags \"-fno-exceptions -fno-rtti $NOSANITIZE_CFLAGS\"\n+set cflags \"-w -O -ffunction-sections -fdata-sections $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n+set cxxflags \"-fno-exceptions -fno-rtti $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n set ldflags \"--gc-sections -Bstatic\"\n \n if [istarget mips*-*] {"
    },
    {
      "sha": "1842f35bfa4bb82b600d9e135dcd8ce87a38f70e",
      "filename": "ld/testsuite/ld-srec/srec.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-srec/srec.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-srec/srec.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-srec/srec.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -353,9 +353,10 @@ if { ![check_compiler_available] } {\n # with S-records.  Also add $NOCF_PROTECTION_CFLAGS for S-records.\n # Also add $NOSANITIZE_CFLAGS for S-records.\n set old_CC \"$CC\"\n-set CC \"$CC $PLT_CFLAGS $NOPIE_CFLAGS $NOPIE_LDFLAGS $NOCF_PROTECTION_CFLAGS $NOSANITIZE_CFLAGS\"\n+set CC \"$CC $PLT_CFLAGS $NOPIE_CFLAGS $NOPIE_LDFLAGS $NOCF_PROTECTION_CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n set old_CXX \"$CXX\"\n-set CXX \"$CXX $PLT_CFLAGS $NOPIE_CFLAGS $NOPIE_LDFLAGS $NOCF_PROTECTION_CFLAGS $NOSANITIZE_CFLAGS\"\n+set old_CXXFLAGS \"$CXXFLAGS\"\n+set CXXFLAGS \"$CXXFLAGS $PLT_CFLAGS $NOPIE_CFLAGS $NOPIE_LDFLAGS $NOCF_PROTECTION_CFLAGS $NOSANITIZE_CFLAGS $NOLTO_CFLAGS\"\n \n # S-records can't handle .note.gnu.property sections.\n if { [is_elf_format] \\\n@@ -370,6 +371,7 @@ if { ![ld_compile $CC $srcdir/$subdir/sr1.c tmpdir/sr1.o] \\\n     unresolved $test2\n     set CC \"$old_CC\"\n     set CXX \"$old_CXX\"\n+    set CXXFLAGS \"$old_CXXFLAGS\"\n     return\n }\n \n@@ -443,13 +445,15 @@ if { ![is_remote host] && [which $CXX] == 0 } {\n     untested $test2\n     set CC \"$old_CC\"\n     set CXX \"$old_CXX\"\n+    set CXXFLAGS \"$old_CXXFLAGS\"\n     return\n }\n \n if ![ld_compile \"$CXX $CXXFLAGS -fno-exceptions\" $srcdir/$subdir/sr3.cc tmpdir/sr3.o] {\n     unresolved $test2\n     set CC \"$old_CC\"\n     set CXX \"$old_CXX\"\n+    set CXXFLAGS \"$old_CXXFLAGS\"\n     return\n }\n \n@@ -477,3 +481,4 @@ run_srec_test $test2 \"tmpdir/sr3.o\"\n \n set CC \"$old_CC\"\n set CXX \"$old_CXX\"\n+set CXXFLAGS \"$old_CXXFLAGS\""
    },
    {
      "sha": "ea7172a7ec5e17295199cd6f2fb5a544b0d57cc7",
      "filename": "ld/testsuite/ld-undefined/undefined.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-undefined/undefined.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/ld-undefined/undefined.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-undefined/undefined.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -29,7 +29,7 @@ if { ![check_compiler_available] } {\n     untested $testund\n     untested $testfn\n     untested $testline\n-} elseif { ![ld_compile \"$CC -g\" $srcdir/$subdir/undefined.c tmpdir/undefined.o] } {\n+} elseif { ![ld_compile \"$CC -g $NOLTO_CFLAGS\" $srcdir/$subdir/undefined.c tmpdir/undefined.o] } {\n     verbose \"Unable to compile test file!\" 1\n     unresolved $testund\n     unresolved $testfn"
    },
    {
      "sha": "1aa614fa36266b5e56d52bb0030d0474fcc1d0e5",
      "filename": "ld/testsuite/lib/ld-lib.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/lib/ld-lib.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d47bff77db79b1ad99cd7911f7e1807874be55/ld/testsuite/lib/ld-lib.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/lib/ld-lib.exp?ref=c6d47bff77db79b1ad99cd7911f7e1807874be55",
      "patch": "@@ -499,6 +499,11 @@ proc run_ld_link_tests { ldtests args } {\n \tset maybe_failed 0\n \tset ld_output \"\"\n \n+\t# Add -fno-lto.  LTO should be tested explicitly by $cflags.\n+\tif {[check_lto_available]} {\n+\t    set cflags \"-fno-lto $cflags\"\n+\t}\n+\n #\tverbose -log \"Testname is $testname\"\n #\tverbose -log \"ld_options is $ld_options\"\n #\tverbose -log \"ld_after is $ld_after\""
    }
  ]
}