{
  "sha": "336aa7b740c64070ae14d2364edddb7df7bce011",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzM2YWE3Yjc0MGM2NDA3MGFlMTRkMjM2NGVkZGRiN2RmN2JjZTAxMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-12T11:39:31Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-24T16:58:04Z"
    },
    "message": "gdb: move get_section_table from exec_target to dummy_target\n\nThe only target that implements target_ops::get_section_table in a\nmeaningful way is exec_target.  This target calls back into the\nprogram space to return the current global section_table.\n\nThe global section table is populated whenever the user provides GDB\nwith an executable, or when a symbol file is loaded, e.g. when a\ndynamic library is loaded, or when the user does add-symbol-file.\n\nI recently ran into a situation where a user, debugging a remote\ntarget, was not supplying GDB with a main executable at all.  Instead\nthe user attached to the target then did add-symbol-file, and then\nproceeded to debug the target.\n\nThis works fine, but it was noticed that even when\ntrust-readonly-sections was on GDB was still accessing the target to\nget the contents of readonly sections.\n\nThe problem is that by not providing an executable there was no\nexec_target in the target stack, and so when GDB calls the\ntarget_ops::get_section_table function GDB ends up in\ndummy_target::get_section_table, which just returns NULL.\n\nWhat I want is that even when GDB doesn't have an exec_target in the\ntarget stack, a call to target_ops::get_section_table will still\nreturn the section_table from the current program space.\n\nWhen considering how to achieve this my first though was, why is the\nrequest for the section table going via the target stack at all?  The\nset of sections loaded is a property of the program space, not the\ntarget.  This is, after all, why the data is being stored in the\nprogram space.\n\nSo I initially tried changing target_get_section_table so that,\ninstead of calling into the target it just returns\ncurrent_program_space->target_sections ().\n\nThis would be fine except for one issue, target_bfd (from\nbfd-target.c).  This code is used from solib-svr4.c to create a\ntemporary target_ops structure that implements two functions\ntarget_bfd::xfer_partial and target_bfd::get_section_table.\n\nThe purpose behind the code is to enable two targets, ppc64 and frv to\ndecode function descriptors from the dynamic linker, based on the\nnon-relocated addresses from within the dynamic linker bfd object.\n\nBoth of the implemented functions in target_bfd rely on the target_bfd\nobject holding a section table, and the ppc64 target requires that the\ntarget_bfd implement ::get_section_table.\n\nThe frv target doesn't require ::get_section_table, instead it\nrequires the ::xfer_partial.  We could in theory change the ppc64\ntarget to use the same approach as frv, however, this would be a bad\nidea.  I believe that the frv target approach is broken.  I'll\nexplain:\n\nThe frv target calls get_target_memory_unsigned to read the function\ndescriptor.  The address being read is the non-relocated address read\nfrom the dynamic linker in solib-srv4.c:enable_break.  Calling\nget_target_memory_unsigned eventually ends up in target_xfer_partial\nwith an object type of TARGET_OBJECT_RAW_MEMORY.  This will then call\nmemory_xfer_check_region.  I believe that it is quite possible that a\nthe non-relocated addresses pulled from the dynamic linker could be in\na memory region that is not readable, while the relocated addresses\nare in a readable memory region.  If this was ever the case for the\nfrv target then GDB would reject the attempt to read the non-relocated\nfunction pointer.\n\nIn contrast the ppc64 target calls target_section_by_addr, which calls\ntarget_get_section_table, which then calls the ::get_section_table\nfunction on the target.\n\nThus, when reflecting on target_bfd we see two functions,\n::xfer_partial and ::get_section_table.  The former is required by the\nfrv target, but that target is (I think) potentially broken.  While\nthe latter is required by the ppc64 target, but this forces\n::get_section_table to exist as a target_ops member function.\n\nSo my original plan, have target_get_section_table NOT call a\ntarget_ops member function appears to be flawed.\n\nMy next idea was to remove exec_target::get_section_table, and instead\nmove the implementation into dummy_target::get_section_table.\nCurrently the dummy_target implementation always returns NULL\nindicating no section table, but plenty of other dummy_target member\nfunctions do more than just return null values.\n\nSo now, dummy_target::get_section_table returns the section table from\nthe current program space.  This allows target_bfd to remain\nunchanged, so ppc64 and frv should not be affected.\n\nMaking this change removes the requirement for the user to provide an\nexecutable, GDB can now always access the section_table, as the\ndummy_target always exists in the target stack.\n\nFinally, there's a test that the target_section table is not empty in\nthe case where the user does add-symbol-file without providing an\nexecutable.\n\ngdb/ChangeLog:\n\n\t* exec.c (exec_target::get_section_table): Delete member function.\n\t(section_table_read_available_memory): Use current_top_target, not\n\tjust the exec_ops target.\n\t* target-delegates.c: Regenerate.\n\t* target.c (default_get_section_table): New function.\n\t* target.h (target_ops::get_section_table): Change default\n\tbehaviour to call default_get_section_table.\n\t(default_get_section_table): Declare.",
    "tree": {
      "sha": "e49e3443ecdbbf12364cbc0697d7e0bc9d363b83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e49e3443ecdbbf12364cbc0697d7e0bc9d363b83"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/336aa7b740c64070ae14d2364edddb7df7bce011",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336aa7b740c64070ae14d2364edddb7df7bce011",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/336aa7b740c64070ae14d2364edddb7df7bce011",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/336aa7b740c64070ae14d2364edddb7df7bce011/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/02f7d26b0bc929eba44372fa0955bb1c72f2deb8"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 27,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f50d89f25c1e663012bf9b22bced29b5c2fbf401",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -1,3 +1,14 @@\n+2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* exec.c (exec_target::get_section_table): Delete member function.\n+\t(section_table_read_available_memory): Use current_top_target, not\n+\tjust the exec_ops target.\n+\t* target-delegates.c: Regenerate.\n+\t* target.c (default_get_section_table): New function.\n+\t* target.h (target_ops::get_section_table): Change default\n+\tbehaviour to call default_get_section_table.\n+\t(default_get_section_table): Declare.\n+\n 2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* exec.c (exec_target::close): Call new clear_target_sections"
    },
    {
      "sha": "8e3c19ec272295a034620fbe5dd93f428b0271f8",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -75,7 +75,6 @@ struct exec_target final : public target_ops\n \t\t\t\t\tconst gdb_byte *writebuf,\n \t\t\t\t\tULONGEST offset, ULONGEST len,\n \t\t\t\t\tULONGEST *xfered_len) override;\n-  const target_section_table *get_section_table () override;\n   void files_info () override;\n \n   bool has_memory () override;\n@@ -775,7 +774,8 @@ enum target_xfer_status\n section_table_read_available_memory (gdb_byte *readbuf, ULONGEST offset,\n \t\t\t\t     ULONGEST len, ULONGEST *xfered_len)\n {\n-  const target_section_table *table = target_get_section_table (&exec_ops);\n+  const target_section_table *table\n+    = target_get_section_table (current_top_target ());\n   std::vector<mem_range> available_memory\n     = section_table_available_memory (offset, len, *table);\n \n@@ -884,12 +884,6 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n   return TARGET_XFER_EOF;\t\t/* We can't help.  */\n }\n \n-const target_section_table *\n-exec_target::get_section_table ()\n-{\n-  return &current_program_space->target_sections ();\n-}\n-\n enum target_xfer_status\n exec_target::xfer_partial (enum target_object object,\n \t\t\t   const char *annex, gdb_byte *readbuf,"
    },
    {
      "sha": "1c7999724c7c2111e1803884d2acc20823f47e96",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -2030,7 +2030,7 @@ target_ops::get_section_table ()\n const target_section_table *\n dummy_target::get_section_table ()\n {\n-  return NULL;\n+  return default_get_section_table ();\n }\n \n const target_section_table *"
    },
    {
      "sha": "ba445e7fd34c9fe1aad86bc8bdda55eee4060ec3",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -836,6 +836,13 @@ target_section_by_addr (struct target_ops *target, CORE_ADDR addr)\n   return NULL;\n }\n \n+/* See target.h.  */\n+\n+const target_section_table *\n+default_get_section_table ()\n+{\n+  return &current_program_space->target_sections ();\n+}\n \n /* Helper for the memory xfer routines.  Checks the attributes of the\n    memory region of MEMADDR against the read or write being attempted."
    },
    {
      "sha": "ee93c5cf3959a1d8deadde821c38edb07a970e74",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -688,7 +688,7 @@ struct target_ops\n     virtual void log_command (const char *)\n       TARGET_DEFAULT_IGNORE ();\n     virtual const target_section_table *get_section_table ()\n-      TARGET_DEFAULT_RETURN (NULL);\n+      TARGET_DEFAULT_RETURN (default_get_section_table ());\n \n     /* Provide default values for all \"must have\" methods.  */\n     virtual bool has_all_memory () { return false; }\n@@ -2436,6 +2436,10 @@ const struct target_section *target_section_by_addr (struct target_ops *target,\n extern const target_section_table *target_get_section_table\n   (struct target_ops *target);\n \n+/* Default implementation of get_section_table for dummy_target.  */\n+\n+extern const target_section_table *default_get_section_table ();\n+\n /* From mem-break.c */\n \n extern int memory_remove_breakpoint (struct target_ops *,"
    },
    {
      "sha": "06508de366d504e8aa0001430cb6b8d008c074b8",
      "filename": "gdb/testsuite/gdb.base/maint-info-sections.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/testsuite/gdb.base/maint-info-sections.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/336aa7b740c64070ae14d2364edddb7df7bce011/gdb/testsuite/gdb.base/maint-info-sections.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/maint-info-sections.exp?ref=336aa7b740c64070ae14d2364edddb7df7bce011",
      "patch": "@@ -223,9 +223,7 @@ gdb_test_multiple \"maint info sections -all-objects\" \"\" {\n     }\n }\n \n-# NOTE: We would like to check 'maint info target-sections' again\n-# here, but GDB currently doesn't display the target sections table in\n-# this case.  This is a bug and will be fixed shortly!!\n+check_maint_info_target_sections_output \"with loaded symbol file\"\n \n # Test the command line completion on 'maint info sections'.  First\n # the command line flag."
    }
  ]
}