{
  "sha": "2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjEwOGE2M2E1YTczNmMyMzI5YTJhOTJjYTU4ZTBiOTk5M2RjNWQ0Mg==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-14T16:41:11Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-17T22:16:49Z"
    },
    "message": "Add support for NetBSD threads in sparc-nat.c\n\nNetBSD ptrace(2) accepts thread id (LWP) as the 4th argument for threads.\n\nDefine gdb_ptrace() a wrapper function for ptrace(2) that properly passes\nthe pid,lwp pair on NetBSD and the result of get_ptrace_pid() for others.\n\ngdb/ChangeLog:\n\n\t* sparc-nat.c (gdb_ptrace): New.\n\t* sparc-nat.c (sparc_fetch_inferior_registers)\n\t(sparc_store_inferior_registers) Remove obsolete comment.\n\t* sparc-nat.c (sparc_fetch_inferior_registers)\n\t(sparc_store_inferior_registers) Switch from pid_t to ptid_t.\n\t* sparc-nat.c (sparc_fetch_inferior_registers)\n\t(sparc_store_inferior_registers) Use gdb_ptrace.",
    "tree": {
      "sha": "e5cebff36db00e96bc766cf190c4bacd500f065f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5cebff36db00e96bc766cf190c4bacd500f065f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2108a63a5a736c2329a2a92ca58e0b9993dc5d42/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3c3c54293ce8c42503e66f8076059a7c8b1639f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3c3c54293ce8c42503e66f8076059a7c8b1639f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3c3c54293ce8c42503e66f8076059a7c8b1639f"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 32,
    "deletions": 28
  },
  "files": [
    {
      "sha": "abf3346edb3151cd7977d2dc84a3d9805622a993",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2108a63a5a736c2329a2a92ca58e0b9993dc5d42/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2108a63a5a736c2329a2a92ca58e0b9993dc5d42/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* sparc-nat.c (gdb_ptrace): New.\n+\t* sparc-nat.c (sparc_fetch_inferior_registers)\n+\t(sparc_store_inferior_registers) Remove obsolete comment.\n+\t* sparc-nat.c (sparc_fetch_inferior_registers)\n+\t(sparc_store_inferior_registers) Switch from pid_t to ptid_t.\n+\t* sparc-nat.c (sparc_fetch_inferior_registers)\n+\t(sparc_store_inferior_registers) Use gdb_ptrace.\n+\n 2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n \n \t* sh-nbsd-nat.c (fetch_registers): New variable lwp and pass"
    },
    {
      "sha": "fadcfd344740013494abc64deed314ef8bebcf64",
      "filename": "gdb/sparc-nat.c",
      "status": "modified",
      "additions": 22,
      "deletions": 28,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2108a63a5a736c2329a2a92ca58e0b9993dc5d42/gdb/sparc-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2108a63a5a736c2329a2a92ca58e0b9993dc5d42/gdb/sparc-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-nat.c?ref=2108a63a5a736c2329a2a92ca58e0b9993dc5d42",
      "patch": "@@ -78,6 +78,19 @@ typedef struct fp_status fpregset_t;\n #define PTRACE_SETFPREGS PT_SETFPREGS\n #endif\n \n+static int\n+gdb_ptrace (PTRACE_TYPE_ARG1 request, ptid_t ptid, PTRACE_TYPE_ARG3 addr)\n+{\n+#ifdef __NetBSD__\n+  /* Support for NetBSD threads: unlike other ptrace implementations in this\n+     file, NetBSD requires that we pass both the pid and lwp.  */\n+  return ptrace (request, ptid.pid (), addr, ptid.lwp ());\n+#else\n+  pid_t pid = get_ptrace_pid (ptid);\n+  return ptrace (request, pid, addr, 0);\n+#endif\n+}\n+\n /* Register set description.  */\n const struct sparc_gregmap *sparc_gregmap;\n const struct sparc_fpregmap *sparc_fpregmap;\n@@ -137,22 +150,7 @@ void\n sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  pid_t pid;\n-\n-  /* NOTE: cagney/2002-12-03: This code assumes that the currently\n-     selected light weight processes' registers can be written\n-     directly into the selected thread's register cache.  This works\n-     fine when given an 1:1 LWP:thread model (such as found on\n-     GNU/Linux) but will, likely, have problems when used on an N:1\n-     (userland threads) or N:M (userland multiple LWP) model.  In the\n-     case of the latter two, the LWP's registers do not necessarily\n-     belong to the selected thread (the LWP could be in the middle of\n-     executing the thread switch code).\n-\n-     These functions should instead be parameterized with an explicit\n-     object (struct regcache, struct thread_info?) into which the LWPs\n-     registers can be written.  */\n-  pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n \n   if (regnum == SPARC_G0_REGNUM)\n     {\n@@ -166,7 +164,7 @@ sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       gregset_t regs;\n \n-      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PTRACE_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs) == -1)\n \tperror_with_name (_(\"Couldn't get registers\"));\n \n       sparc_supply_gregset (sparc_gregmap, regcache, -1, &regs);\n@@ -178,7 +176,7 @@ sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       fpregset_t fpregs;\n \n-      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+      if (gdb_ptrace (PTRACE_GETFPREGS, ptid, (PTRACE_TYPE_ARG3) &fpregs) == -1)\n \tperror_with_name (_(\"Couldn't get floating point status\"));\n \n       sparc_supply_fpregset (sparc_fpregmap, regcache, -1, &fpregs);\n@@ -189,22 +187,18 @@ void\n sparc_store_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  pid_t pid;\n-\n-  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers\n-     about threaded assumptions.  */\n-  pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n \n   if (regnum == -1 || sparc_gregset_supplies_p (gdbarch, regnum))\n     {\n       gregset_t regs;\n \n-      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PTRACE_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs) == -1)\n \tperror_with_name (_(\"Couldn't get registers\"));\n \n       sparc_collect_gregset (sparc_gregmap, regcache, regnum, &regs);\n \n-      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PTRACE_SETREGS, ptid, (PTRACE_TYPE_ARG3) &regs) == -1)\n \tperror_with_name (_(\"Couldn't write registers\"));\n \n       /* Deal with the stack regs.  */\n@@ -225,7 +219,7 @@ sparc_store_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       fpregset_t fpregs, saved_fpregs;\n \n-      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+      if (gdb_ptrace (PTRACE_GETFPREGS, ptid, (PTRACE_TYPE_ARG3) &fpregs) == -1)\n \tperror_with_name (_(\"Couldn't get floating-point registers\"));\n \n       memcpy (&saved_fpregs, &fpregs, sizeof (fpregs));\n@@ -237,8 +231,8 @@ sparc_store_inferior_registers (struct regcache *regcache, int regnum)\n \t to write the registers if nothing changed.  */\n       if (memcmp (&saved_fpregs, &fpregs, sizeof (fpregs)) != 0)\n \t{\n-\t  if (ptrace (PTRACE_SETFPREGS, pid,\n-\t\t      (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+\t  if (gdb_ptrace (PTRACE_SETFPREGS, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) &fpregs) == -1)\n \t    perror_with_name (_(\"Couldn't write floating-point registers\"));\n \t}\n "
    }
  ]
}