{
  "sha": "ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ0OGVjMmU2ZWM1NTE0ZjAxYjliM2E4MTBkNmRkZjM5NjUxMTE0Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T05:37:33Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T12:51:58Z"
    },
    "message": "Don't use bfd_get_* macro to set bfd fields\n\n\t* aoutx.h (slurp_symbol_table): Don't set symcount using bfd_get\n\tmacros.\n\t* pdp11.c (slurp_symbol_table): Likewise.\n\t* som.c (som_slurp_symbol_table): Likewise.\n\t* coff-ppc.c (ppc_bfd_coff_final_link): Likewise.\n\t* coffcode.h (coff_slurp_symbol_table): Likewise.\n\t* cofflink.c (_bfd_coff_final_link): Likewise.\n\t* ecoff.c (ecoff_slurp_symbolic_header): Likewise.\n\t(_bfd_ecoff_slurp_symbolic_info): Likewise.\n\t(_bfd_ecoff_slurp_symbol_table): Likewise.\n\t(_bfd_ecoff_bfd_final_link): Likewise.\n\t* elf.c (_bfd_elf_canonicalize_symtab): Likewise.\n\t* elflink.c (elf_link_output_symstrtab): Likewise.\n\t(bfd_elf_final_link): Likewise.\n\t* peicode.h (pe_ILF_build_a_bfd): Likewise.\n\t* xcofflink.c (_bfd_xcoff_bfd_final_link): Likewise.\n\t* aoutx.h (some_aout_object_p, slurp_symbol_table): Don't set\n\tstart_address or symcount using bfd_get macros.\n\t* coffgen.c (coff_real_object_p): Likewise.\n\t* pdp11.c (some_aout_object_p, slurp_symbol_table): Likewise.\n\t* som.c (som_object_setup, som_slurp_symbol_table): Likewise.\n\t* elfcore.h (elf_core_file_p): Don't set start_address using\n\tbfd_get macro.\n\t* elf.c (_bfd_elf_canonicalize_dynamic_symtab): Don't set dynsymcount\n\tusing bfd_get macro.\n\t* bfd.c (bfd_set_file_flags): Don't set flags using bfd_get macro.\n\t* linker.c (bfd_generic_link_read_symbols): Don't set outsymbols\n\tor symcount using bfd_get macros.\n\t(_bfd_generic_final_link, generic_add_output_symbol): Likewise.\n\t* syms.c (bfd_set_symtab): Likewise.\n\t* vms-alpha.c (alpha_vms_bfd_final_link): Likewise.\n\t* archive.c (do_slurp_bsd_armap): Don't set has_armap using\n\tbfd_has_map macro.\n\t(do_slurp_coff_armap, bfd_slurp_armap): Likewise.\n\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Likewise.\n\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.\n\t* ecoff.c (_bfd_ecoff_slurp_armap): Likewise.\n\t* som.c (som_slurp_armap): Likewise.",
    "tree": {
      "sha": "68111a47a8fbf5230be398cb68fe84840ab0d099",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/68111a47a8fbf5230be398cb68fe84840ab0d099"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01c2b26160575ad4add68da8a043b3fa30defae4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01c2b26160575ad4add68da8a043b3fa30defae4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01c2b26160575ad4add68da8a043b3fa30defae4"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 103,
    "deletions": 63
  },
  "files": [
    {
      "sha": "32c57b796343f09eeb245796884bbf4bd8466a9d",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1,3 +1,45 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* aoutx.h (slurp_symbol_table): Don't set symcount using bfd_get\n+\tmacros.\n+\t* pdp11.c (slurp_symbol_table): Likewise.\n+\t* som.c (som_slurp_symbol_table): Likewise.\n+\t* coff-ppc.c (ppc_bfd_coff_final_link): Likewise.\n+\t* coffcode.h (coff_slurp_symbol_table): Likewise.\n+\t* cofflink.c (_bfd_coff_final_link): Likewise.\n+\t* ecoff.c (ecoff_slurp_symbolic_header): Likewise.\n+\t(_bfd_ecoff_slurp_symbolic_info): Likewise.\n+\t(_bfd_ecoff_slurp_symbol_table): Likewise.\n+\t(_bfd_ecoff_bfd_final_link): Likewise.\n+\t* elf.c (_bfd_elf_canonicalize_symtab): Likewise.\n+\t* elflink.c (elf_link_output_symstrtab): Likewise.\n+\t(bfd_elf_final_link): Likewise.\n+\t* peicode.h (pe_ILF_build_a_bfd): Likewise.\n+\t* xcofflink.c (_bfd_xcoff_bfd_final_link): Likewise.\n+\t* aoutx.h (some_aout_object_p, slurp_symbol_table): Don't set\n+\tstart_address or symcount using bfd_get macros.\n+\t* coffgen.c (coff_real_object_p): Likewise.\n+\t* pdp11.c (some_aout_object_p, slurp_symbol_table): Likewise.\n+\t* som.c (som_object_setup, som_slurp_symbol_table): Likewise.\n+\t* elfcore.h (elf_core_file_p): Don't set start_address using\n+\tbfd_get macro.\n+\t* elf.c (_bfd_elf_canonicalize_dynamic_symtab): Don't set dynsymcount\n+\tusing bfd_get macro.\n+\t* bfd.c (bfd_set_file_flags): Don't set flags using bfd_get macro.\n+\t* linker.c (bfd_generic_link_read_symbols): Don't set outsymbols\n+\tor symcount using bfd_get macros.\n+\t(_bfd_generic_final_link, generic_add_output_symbol): Likewise.\n+\t* syms.c (bfd_set_symtab): Likewise.\n+\t* vms-alpha.c (alpha_vms_bfd_final_link): Likewise.\n+\t* archive.c (do_slurp_bsd_armap): Don't set has_armap using\n+\tbfd_has_map macro.\n+\t(do_slurp_coff_armap, bfd_slurp_armap): Likewise.\n+\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n+\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Likewise.\n+\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.\n+\t* ecoff.c (_bfd_ecoff_slurp_armap): Likewise.\n+\t* som.c (som_slurp_armap): Likewise.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* archures.c (bfd_get_arch): Make param const."
    },
    {
      "sha": "cd50b44e60af2fce7c4edb580a25216625e59697",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -511,10 +511,10 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n        was called.  */\n     abort ();\n \n-  bfd_get_start_address (abfd) = execp->a_entry;\n+  abfd->start_address = execp->a_entry;\n \n   obj_aout_symbols (abfd) = NULL;\n-  bfd_get_symcount (abfd) = execp->a_syms / sizeof (struct external_nlist);\n+  abfd->symcount = execp->a_syms / sizeof (struct external_nlist);\n \n   /* The default relocation entry size is that of traditional V7 Unix.  */\n   obj_reloc_entry_size (abfd) = RELOC_STD_SIZE;\n@@ -1782,7 +1782,7 @@ NAME (aout, slurp_symbol_table) (bfd *abfd)\n       return FALSE;\n     }\n \n-  bfd_get_symcount (abfd) = obj_aout_external_sym_count (abfd);\n+  abfd->symcount = obj_aout_external_sym_count (abfd);\n \n   obj_aout_symbols (abfd) = cached;\n "
    },
    {
      "sha": "dc0400d1cf6bbbe00ca86eb41e066755a04ac901",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1013,7 +1013,7 @@ do_slurp_bsd_armap (bfd *abfd)\n   /* FIXME, we should provide some way to free raw_ardata when\n      we are done using the strings from it.  For now, it seems\n      to be allocated on an objalloc anyway...  */\n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n   return TRUE;\n }\n \n@@ -1105,7 +1105,7 @@ do_slurp_coff_armap (bfd *abfd)\n   /* Pad to an even boundary if you have to.  */\n   ardata->first_file_filepos += (ardata->first_file_filepos) % 2;\n \n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n   bfd_release (abfd, raw_armap);\n \n   /* Check for a second archive header (as used by PE).  */\n@@ -1188,7 +1188,7 @@ bfd_slurp_armap (bfd *abfd)\n \treturn do_slurp_bsd_armap (abfd);\n     }\n \n-  bfd_has_map (abfd) = FALSE;\n+  abfd->has_armap = FALSE;\n   return TRUE;\n }\n \f"
    },
    {
      "sha": "37fecc28d4831269628786b015353c0a33654fdb",
      "filename": "bfd/archive64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/archive64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/archive64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive64.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -66,7 +66,7 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n \n   if (! CONST_STRNEQ (nextname, \"/SYM64/         \"))\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n@@ -137,7 +137,7 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n   /* Pad to an even boundary if you have to.  */\n   ardata->first_file_filepos += (ardata->first_file_filepos) % 2;\n \n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n   bfd_release (abfd, raw_armap);\n \n   return TRUE;"
    },
    {
      "sha": "c973c780b40f7ec4e42f6b5f974bd0504aca7ca8",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1418,7 +1418,7 @@ bfd_set_file_flags (bfd *abfd, flagword flags)\n       return FALSE;\n     }\n \n-  bfd_get_file_flags (abfd) = flags;\n+  abfd->flags = flags;\n   if ((flags & bfd_applicable_file_flags (abfd)) != flags)\n     {\n       bfd_set_error (bfd_error_invalid_operation);"
    },
    {
      "sha": "ab5c2c837c10e10b317261a6488b916535ff7edb",
      "filename": "bfd/coff-ppc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-ppc.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -2420,9 +2420,9 @@ ppc_bfd_coff_final_link (bfd *abfd, struct bfd_link_info *info)\n \n   _bfd_stringtab_free (flaginfo.strtab);\n \n-  /* Setting bfd_get_symcount to 0 will cause write_object_contents to\n+  /* Setting symcount to 0 will cause write_object_contents to\n      not try to write out the symbols.  */\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->symcount = 0;\n \n   return TRUE;\n "
    },
    {
      "sha": "bdbb499a4ab245170b47668fedb386485849bfb5",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1243,7 +1243,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \n   if (xcoff_ardata (abfd) == NULL)\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n@@ -1255,7 +1255,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n       GET_VALUE_IN_FIELD (off, xcoff_ardata (abfd)->symoff, 10);\n       if (off == 0)\n \t{\n-\t  bfd_has_map (abfd) = FALSE;\n+\t  abfd->has_armap = FALSE;\n \t  return TRUE;\n \t}\n \n@@ -1310,7 +1310,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n       GET_VALUE_IN_FIELD (off, xcoff_ardata_big (abfd)->symoff, 10);\n       if (off == 0)\n \t{\n-\t  bfd_has_map (abfd) = FALSE;\n+\t  abfd->has_armap = FALSE;\n \t  return TRUE;\n \t}\n \n@@ -1373,7 +1373,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n     }\n \n   bfd_ardata (abfd)->symdef_count = c;\n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n \n   return TRUE;\n }"
    },
    {
      "sha": "1c80a9df8851c39c3a1459320d299f11c9e4fca2",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1906,15 +1906,15 @@ xcoff64_slurp_armap (bfd *abfd)\n \n   if (xcoff_ardata (abfd) == NULL)\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n   off = bfd_scan_vma (xcoff_ardata_big (abfd)->symoff64,\n \t\t      (const char **) NULL, 10);\n   if (off == 0)\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n@@ -1976,7 +1976,7 @@ xcoff64_slurp_armap (bfd *abfd)\n     }\n \n   bfd_ardata (abfd)->symdef_count = c;\n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n \n   return TRUE;\n }"
    },
    {
      "sha": "dd3189fbd3d4b1f002c092fa5891d22c392e8525",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -4809,7 +4809,7 @@ coff_slurp_symbol_table (bfd * abfd)\n   obj_symbols (abfd) = cached_area;\n   obj_raw_syments (abfd) = native_symbols;\n \n-  bfd_get_symcount (abfd) = number_of_symbols;\n+  abfd->symcount = number_of_symbols;\n   obj_convert (abfd) = table_ptr;\n   /* Slurp the line tables for each section too.  */\n   {"
    },
    {
      "sha": "80a9a2ab9ae6ce2d8905c0b51922f4104205507c",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -257,14 +257,14 @@ coff_real_object_p (bfd *abfd,\n   if ((internal_f->f_flags & F_EXEC) != 0)\n     abfd->flags |= D_PAGED;\n \n-  bfd_get_symcount (abfd) = internal_f->f_nsyms;\n+  abfd->symcount = internal_f->f_nsyms;\n   if (internal_f->f_nsyms)\n     abfd->flags |= HAS_SYMS;\n \n   if (internal_a != (struct internal_aouthdr *) NULL)\n-    bfd_get_start_address (abfd) = internal_a->entry;\n+    abfd->start_address = internal_a->entry;\n   else\n-    bfd_get_start_address (abfd) = 0;\n+    abfd->start_address = 0;\n \n   /* Set up the tdata area.  ECOFF uses its own routine, and overrides\n      abfd->flags.  */\n@@ -309,7 +309,7 @@ coff_real_object_p (bfd *abfd,\n  fail2:\n   abfd->tdata.any = tdata_save;\n   abfd->flags = oflags;\n-  bfd_get_start_address (abfd) = ostart;\n+  abfd->start_address = ostart;\n   return (const bfd_target *) NULL;\n }\n "
    },
    {
      "sha": "34d68c93b5da2525cd509c6d07f8d9e814b46d4b",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1186,9 +1186,9 @@ _bfd_coff_final_link (bfd *abfd,\n \n   _bfd_stringtab_free (flaginfo.strtab);\n \n-  /* Setting bfd_get_symcount to 0 will cause write_object_contents to\n+  /* Setting symcount to 0 will cause write_object_contents to\n      not try to write out the symbols.  */\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->symcount = 0;\n \n   return TRUE;\n "
    },
    {
      "sha": "1e6f4d219cde7bc8056fc49109856c9114198fcd",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -446,7 +446,7 @@ ecoff_slurp_symbolic_header (bfd *abfd)\n   /* See whether there is a symbolic header.  */\n   if (ecoff_data (abfd)->sym_filepos == 0)\n     {\n-      bfd_get_symcount (abfd) = 0;\n+      abfd->symcount = 0;\n       return TRUE;\n     }\n \n@@ -479,8 +479,7 @@ ecoff_slurp_symbolic_header (bfd *abfd)\n     }\n \n   /* Now we can get the correct number of symbols.  */\n-  bfd_get_symcount (abfd) = (internal_symhdr->isymMax\n-\t\t\t     + internal_symhdr->iextMax);\n+  abfd->symcount = internal_symhdr->isymMax + internal_symhdr->iextMax;\n \n   if (raw != NULL)\n     free (raw);\n@@ -521,7 +520,7 @@ _bfd_ecoff_slurp_symbolic_info (bfd *abfd,\n     return TRUE;\n   if (ecoff_data (abfd)->sym_filepos == 0)\n     {\n-      bfd_get_symcount (abfd) = 0;\n+      abfd->symcount = 0;\n       return TRUE;\n     }\n \n@@ -965,7 +964,7 @@ _bfd_ecoff_slurp_symbol_table (bfd *abfd)\n      the symbol count and warning the user.  */\n   if (internal_ptr - internal < (ptrdiff_t) bfd_get_symcount (abfd))\n     {\n-      bfd_get_symcount (abfd) = internal_ptr - internal;\n+      abfd->symcount = internal_ptr - internal;\n       _bfd_error_handler\n \t/* xgettext:c-format */\n \t(_(\"%pB: warning: isymMax (%ld) is greater than ifdMax (%ld)\"),\n@@ -2905,7 +2904,7 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n \t  && nextname[ARMAP_OBJECT_ENDIAN_INDEX] != ARMAP_LITTLE_ENDIAN)\n       || ! strneq (nextname + ARMAP_END_INDEX, ARMAP_END, sizeof ARMAP_END - 1))\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n@@ -3018,7 +3017,7 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   /* Pad to an even boundary.  */\n   ardata->first_file_filepos += ardata->first_file_filepos % 2;\n \n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n \n   return TRUE;\n }\n@@ -4459,7 +4458,7 @@ _bfd_ecoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \t}\n     }\n \n-  bfd_get_symcount (abfd) = symhdr->iextMax + symhdr->isymMax;\n+  abfd->symcount = symhdr->iextMax + symhdr->isymMax;\n \n   ecoff_data (abfd)->linker = TRUE;\n "
    },
    {
      "sha": "ecd348e1a5093bf32ce6daa51c054705350dacc2",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -8405,7 +8405,7 @@ _bfd_elf_canonicalize_symtab (bfd *abfd, asymbol **allocation)\n   long symcount = bed->s->slurp_symbol_table (abfd, allocation, FALSE);\n \n   if (symcount >= 0)\n-    bfd_get_symcount (abfd) = symcount;\n+    abfd->symcount = symcount;\n   return symcount;\n }\n \n@@ -8417,7 +8417,7 @@ _bfd_elf_canonicalize_dynamic_symtab (bfd *abfd,\n   long symcount = bed->s->slurp_symbol_table (abfd, allocation, TRUE);\n \n   if (symcount >= 0)\n-    bfd_get_dynamic_symcount (abfd) = symcount;\n+    abfd->dynsymcount = symcount;\n   return symcount;\n }\n "
    },
    {
      "sha": "3550eaac27248184cef6b7ba7c86b6e39d287945",
      "filename": "bfd/elfcore.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elfcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elfcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcore.h?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -305,7 +305,7 @@ elf_core_file_p (bfd *abfd)\n   }\n \n   /* Save the entry point from the ELF header.  */\n-  bfd_get_start_address (abfd) = i_ehdrp->e_entry;\n+  abfd->start_address = i_ehdrp->e_entry;\n   return abfd->xvec;\n \n wrong:"
    },
    {
      "sha": "8f18be07db72bb93625ddf63efff2cc64fbedb22",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -9481,7 +9481,7 @@ elf_link_output_symstrtab (struct elf_final_link_info *flinfo,\n   hash_table->strtab[hash_table->strtabcount].destshndx_index\n     = flinfo->symshndxbuf ? bfd_get_symcount (flinfo->output_bfd) : 0;\n \n-  bfd_get_symcount (flinfo->output_bfd) += 1;\n+  flinfo->output_bfd->symcount += 1;\n   hash_table->strtabcount += 1;\n \n   return 1;\n@@ -12012,7 +12012,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   /* Figure out the file positions for everything but the symbol table\n      and the relocs.  We set symcount to force assign_section_numbers\n      to create a symbol table.  */\n-  bfd_get_symcount (abfd) = info->strip != strip_all || emit_relocs;\n+  abfd->symcount = info->strip != strip_all || emit_relocs;\n   BFD_ASSERT (! abfd->output_has_begun);\n   if (! _bfd_elf_compute_section_file_positions (abfd, info))\n     goto error_return;\n@@ -12057,7 +12057,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n      .symtab, .strtab, and non-loaded reloc sections.  We start the\n      .symtab section at the current file position, and write directly\n      to it.  We build the .strtab section in memory.  */\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->symcount = 0;\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   /* sh_name is set in prep_headers.  */\n   symtab_hdr->sh_type = SHT_SYMTAB;"
    },
    {
      "sha": "8aec0d23588d2934111bfc733fcc6177e77e4ac3",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -810,14 +810,13 @@ bfd_generic_link_read_symbols (bfd *abfd)\n       symsize = bfd_get_symtab_upper_bound (abfd);\n       if (symsize < 0)\n \treturn FALSE;\n-      bfd_get_outsymbols (abfd) = (struct bfd_symbol **) bfd_alloc (abfd,\n-\t\t\t\t\t\t\t\t    symsize);\n+      abfd->outsymbols = bfd_alloc (abfd, symsize);\n       if (bfd_get_outsymbols (abfd) == NULL && symsize != 0)\n \treturn FALSE;\n       symcount = bfd_canonicalize_symtab (abfd, bfd_get_outsymbols (abfd));\n       if (symcount < 0)\n \treturn FALSE;\n-      bfd_get_symcount (abfd) = symcount;\n+      abfd->symcount = symcount;\n     }\n \n   return TRUE;\n@@ -1824,8 +1823,8 @@ _bfd_generic_final_link (bfd *abfd, struct bfd_link_info *info)\n   size_t outsymalloc;\n   struct generic_write_global_symbol_info wginfo;\n \n-  bfd_get_outsymbols (abfd) = NULL;\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->outsymbols = NULL;\n+  abfd->symcount = 0;\n   outsymalloc = 0;\n \n   /* Mark all sections which will be included in the output file.  */\n@@ -1958,12 +1957,12 @@ generic_add_output_symbol (bfd *output_bfd, size_t *psymalloc, asymbol *sym)\n       newsyms = (asymbol **) bfd_realloc (bfd_get_outsymbols (output_bfd), amt);\n       if (newsyms == NULL)\n \treturn FALSE;\n-      bfd_get_outsymbols (output_bfd) = newsyms;\n+      output_bfd->outsymbols = newsyms;\n     }\n \n-  bfd_get_outsymbols (output_bfd) [bfd_get_symcount (output_bfd)] = sym;\n+  output_bfd->outsymbols[output_bfd->symcount] = sym;\n   if (sym != NULL)\n-    ++ bfd_get_symcount (output_bfd);\n+    ++output_bfd->symcount;\n \n   return TRUE;\n }"
    },
    {
      "sha": "f7f31284095a8cc7b2595d5e2dc7235c0d8bb3df",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -505,10 +505,10 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n       abort ();\n     }\n \n-  bfd_get_start_address (abfd) = execp->a_entry;\n+  abfd->start_address = execp->a_entry;\n \n   obj_aout_symbols (abfd) = NULL;\n-  bfd_get_symcount (abfd) = execp->a_syms / sizeof (struct external_nlist);\n+  abfd->symcount = execp->a_syms / sizeof (struct external_nlist);\n \n   /* The default relocation entry size is that of traditional V7 Unix.  */\n   obj_reloc_entry_size (abfd) = RELOC_SIZE;\n@@ -1512,7 +1512,7 @@ NAME (aout, slurp_symbol_table) (bfd *abfd)\n       return FALSE;\n     }\n \n-  bfd_get_symcount (abfd) = obj_aout_external_sym_count (abfd);\n+  abfd->symcount = obj_aout_external_sym_count (abfd);\n \n   obj_aout_symbols (abfd) = cached;\n "
    },
    {
      "sha": "679474ecd152892e0e1a881260ee4b672238d967",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -1093,7 +1093,7 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n \n   /* Point the bfd at the symbol table.  */\n   obj_symbols (abfd) = vars.sym_cache;\n-  bfd_get_symcount (abfd) = vars.sym_index;\n+  abfd->symcount = vars.sym_index;\n \n   obj_raw_syments (abfd) = vars.native_syms;\n   obj_raw_syment_count (abfd) = vars.sym_index;"
    },
    {
      "sha": "4c9dcaee67673b2e951a208e7fb41b94db8295da",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -2031,20 +2031,20 @@ som_object_setup (bfd *abfd,\n \t  || (aux_hdrp->exec_entry & 0x3) != 0\n \t  || ! found)\n \t{\n-\t  bfd_get_start_address (abfd) = aux_hdrp->exec_flags;\n+\t  abfd->start_address = aux_hdrp->exec_flags;\n \t  obj_som_exec_data (abfd)->exec_flags = aux_hdrp->exec_entry;\n \t}\n       else\n \t{\n-\t  bfd_get_start_address (abfd) = aux_hdrp->exec_entry + current_offset;\n+\t  abfd->start_address = aux_hdrp->exec_entry + current_offset;\n \t  obj_som_exec_data (abfd)->exec_flags = aux_hdrp->exec_flags;\n \t}\n     }\n \n   obj_som_exec_data (abfd)->version_id = file_hdrp->version_id;\n \n   bfd_default_set_arch_mach (abfd, bfd_arch_hppa, pa10);\n-  bfd_get_symcount (abfd) = file_hdrp->symbol_total;\n+  abfd->symcount = file_hdrp->symbol_total;\n \n   /* Initialize the saved symbol table and string table to NULL.\n      Save important offsets and sizes from the SOM header into\n@@ -4792,7 +4792,7 @@ som_slurp_symbol_table (bfd *abfd)\n \n   /* We modify the symbol count to record the number of BFD symbols we\n      created.  */\n-  bfd_get_symcount (abfd) = sym - symbase;\n+  abfd->symcount = sym - symbase;\n \n   /* Save our results and return success.  */\n   obj_som_symtab (abfd) = symbase;\n@@ -6131,7 +6131,7 @@ som_slurp_armap (bfd *abfd)\n   /* For archives without .o files there is no symbol table.  */\n   if (! CONST_STRNEQ (nextname, \"/               \"))\n     {\n-      bfd_has_map (abfd) = FALSE;\n+      abfd->has_armap = FALSE;\n       return TRUE;\n     }\n \n@@ -6201,7 +6201,7 @@ som_slurp_armap (bfd *abfd)\n     return FALSE;\n \n   /* Notify the generic archive code that we have a symbol map.  */\n-  bfd_has_map (abfd) = TRUE;\n+  abfd->has_armap = TRUE;\n   return TRUE;\n }\n "
    },
    {
      "sha": "4d532b2cd21cfc99731cf8e6860cb2d0861e6028",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -455,8 +455,8 @@ bfd_set_symtab (bfd *abfd, asymbol **location, unsigned int symcount)\n       return FALSE;\n     }\n \n-  bfd_get_outsymbols (abfd) = location;\n-  bfd_get_symcount (abfd) = symcount;\n+  abfd->outsymbols = location;\n+  abfd->symcount = symcount;\n   return TRUE;\n }\n "
    },
    {
      "sha": "8d2a2dff623a15ea9756e8e9e39a03a77d76d405",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -8912,8 +8912,8 @@ alpha_vms_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n       return FALSE;\n     }\n \n-  bfd_get_outsymbols (abfd) = NULL;\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->outsymbols = NULL;\n+  abfd->symcount = 0;\n \n   /* Mark all sections which will be included in the output file.  */\n   for (o = abfd->sections; o != NULL; o = o->next)"
    },
    {
      "sha": "1a2f87c4b0084cc3ade3539d8add2b6f23638e1d",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed48ec2e6ec5514f01b9b3a810d6ddf39651114b/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=ed48ec2e6ec5514f01b9b3a810d6ddf39651114b",
      "patch": "@@ -6412,9 +6412,9 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \tgoto error_return;\n     }\n \n-  /* Setting bfd_get_symcount to 0 will cause write_object_contents to\n+  /* Setting symcount to 0 will cause write_object_contents to\n      not try to write out the symbols.  */\n-  bfd_get_symcount (abfd) = 0;\n+  abfd->symcount = 0;\n \n   return TRUE;\n "
    }
  ]
}