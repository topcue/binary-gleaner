{
  "sha": "84714f86b37ae36fedca2c0936c7d274a4000900",
  "node_id": "C_kwDOANOeidoAKDg0NzE0Zjg2YjM3YWUzNmZlZGNhMmMwOTM2YzdkMjc0YTQwMDA5MDA",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-21T06:32:06Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-21T11:39:21Z"
    },
    "message": "Avoid -Waddress warnings in readelf\n\nMainline gcc:\nreadelf.c: In function 'find_section':\nreadelf.c:349:8: error: the comparison will always evaluate as 'true' for the pointer operand in 'filedata->section_headers + (sizetype)((long unsigned int)i * 80)' must not be NULL [-Werror=address]\n  349 |   ((X) != NULL                                                          \\\n      |        ^~\nreadelf.c:761:9: note: in expansion of macro 'SECTION_NAME_VALID'\n  761 |     if (SECTION_NAME_VALID (filedata->section_headers + i)\n      |         ^~~~~~~~~~~~~~~~~~\n\nThis will likely be fixed in gcc, but inline functions are nicer than\nmacros.\n\n\t* readelf.c (SECTION_NAME, SECTION_NAME_VALID),\n\t(SECTION_NAME_PRINT, VALID_SYMBOL_NAME, VALID_DYNAMIC_NAME),\n\t(GET_DYNAMIC_NAME): Delete.  Replace with..\n\t(section_name, section_name_valid, section_name_print),\n\t(valid_symbol_name, valid_dynamic_name, get_dynamic_name): ..these\n\tnew inline functions.  Update use throughout file.",
    "tree": {
      "sha": "443b0edc5e874b7b6220256863458f97f4ee5ecf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/443b0edc5e874b7b6220256863458f97f4ee5ecf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84714f86b37ae36fedca2c0936c7d274a4000900",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84714f86b37ae36fedca2c0936c7d274a4000900",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84714f86b37ae36fedca2c0936c7d274a4000900",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84714f86b37ae36fedca2c0936c7d274a4000900/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f4efb229b72a133c6a5472ebbf484f5207dc0e56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f4efb229b72a133c6a5472ebbf484f5207dc0e56",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f4efb229b72a133c6a5472ebbf484f5207dc0e56"
    }
  ],
  "stats": {
    "total": 209,
    "additions": 123,
    "deletions": 86
  },
  "files": [
    {
      "sha": "5885b87fff4eee0c182e872a741ca291f831ee98",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 123,
      "deletions": 86,
      "changes": 209,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84714f86b37ae36fedca2c0936c7d274a4000900/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84714f86b37ae36fedca2c0936c7d274a4000900/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=84714f86b37ae36fedca2c0936c7d274a4000900",
      "patch": "@@ -342,31 +342,54 @@ static const char * get_symbol_version_string\n \n #define UNKNOWN -1\n \n-#define SECTION_NAME(X) \\\n-  (filedata->string_table + (X)->sh_name)\n+static inline const char *\n+section_name (const Filedata *filedata, const Elf_Internal_Shdr *hdr)\n+{\n+  return filedata->string_table + hdr->sh_name;\n+}\n \n-#define SECTION_NAME_VALID(X) \\\n-  ((X) != NULL\t\t\t\t\t\t\t\t\\\n-   && filedata->string_table != NULL\t\t\t\t\t\\\n-   && (X)->sh_name < filedata->string_table_length)\n+static inline bool\n+section_name_valid (const Filedata *filedata, const Elf_Internal_Shdr *hdr)\n+{\n+  return (hdr != NULL\n+\t  && filedata->string_table != NULL\n+\t  && hdr->sh_name < filedata->string_table_length);\n+}\n \n-#define SECTION_NAME_PRINT(X) \\\n-  ((X) == NULL ? _(\"<none>\")\t\t\t\t\t\t\\\n-   : filedata->string_table == NULL ? _(\"<no-strings>\")\t\t\t\\\n-   : (X)->sh_name >= filedata->string_table_length ? _(\"<corrupt>\")\t\\\n-   : filedata->string_table + (X)->sh_name)\n+static inline const char *\n+section_name_print (const Filedata *filedata, const Elf_Internal_Shdr *hdr)\n+{\n+  if (hdr == NULL)\n+    return _(\"<none>\");\n+  if (filedata->string_table == NULL)\n+    return _(\"<no-strings>\");\n+  if (hdr->sh_name >= filedata->string_table_length)\n+    return _(\"<corrupt>\");\n+  return section_name (filedata, hdr);\n+}\n \n #define DT_VERSIONTAGIDX(tag)\t(DT_VERNEEDNUM - (tag))\t/* Reverse order!  */\n \n-#define VALID_SYMBOL_NAME(strtab, strtab_size, offset) \\\n-   (strtab != NULL && offset < strtab_size)\n-#define VALID_DYNAMIC_NAME(filedata, offset) \\\n-  VALID_SYMBOL_NAME (filedata->dynamic_strings, \\\n-\t\t     filedata->dynamic_strings_length, offset)\n+static inline bool\n+valid_symbol_name (const char *strtab, size_t strtab_size, uint64_t offset)\n+{\n+  return strtab != NULL && offset < strtab_size;\n+}\n+\n+static inline bool\n+valid_dynamic_name (const Filedata *filedata, uint64_t offset)\n+{\n+  return valid_symbol_name (filedata->dynamic_strings,\n+\t\t\t    filedata->dynamic_strings_length, offset);\n+}\n+\n /* GET_DYNAMIC_NAME asssumes that VALID_DYNAMIC_NAME has\n    already been called and verified that the string exists.  */\n-#define GET_DYNAMIC_NAME(filedata, offset) \\\n-  (filedata->dynamic_strings + offset)\n+static inline const char *\n+get_dynamic_name (const Filedata *filedata, size_t offset)\n+{\n+  return filedata->dynamic_strings + offset;\n+}\n \n #define REMOVE_ARCH_BITS(ADDR)\t\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -696,7 +719,7 @@ printable_section_name (Filedata * filedata, const Elf_Internal_Shdr * sec)\n {\n #define MAX_PRINT_SEC_NAME_LEN 256\n   static char  sec_name_buf [MAX_PRINT_SEC_NAME_LEN + 1];\n-  const char * name = SECTION_NAME_PRINT (sec);\n+  const char * name = section_name_print (filedata, sec);\n   char *       buf = sec_name_buf;\n   char         c;\n   unsigned int remaining = MAX_PRINT_SEC_NAME_LEN;\n@@ -758,8 +781,9 @@ find_section (Filedata * filedata, const char * name)\n     return NULL;\n \n   for (i = 0; i < filedata->file_header.e_shnum; i++)\n-    if (SECTION_NAME_VALID (filedata->section_headers + i)\n-\t&& streq (SECTION_NAME (filedata->section_headers + i), name))\n+    if (section_name_valid (filedata, filedata->section_headers + i)\n+\t&& streq (section_name (filedata, filedata->section_headers + i),\n+\t\t  name))\n       return filedata->section_headers + i;\n \n   return NULL;\n@@ -825,8 +849,9 @@ find_section_in_set (Filedata * filedata, const char * name, unsigned int * set)\n \t  if (i >= filedata->file_header.e_shnum)\n \t    continue; /* FIXME: Should we issue an error message ?  */\n \n-\t  if (SECTION_NAME_VALID (filedata->section_headers + i)\n-\t      && streq (SECTION_NAME (filedata->section_headers + i), name))\n+\t  if (section_name_valid (filedata, filedata->section_headers + i)\n+\t      && streq (section_name (filedata, filedata->section_headers + i),\n+\t\t\tname))\n \t    return filedata->section_headers + i;\n \t}\n     }\n@@ -1758,7 +1783,8 @@ dump_relocations (Filedata *          filedata,\n \t\t  if (ELF_ST_TYPE (psym->st_info) == STT_SECTION)\n \t\t    {\n \t\t      if (psym->st_shndx < filedata->file_header.e_shnum)\n-\t\t\tsec_name = SECTION_NAME_PRINT (filedata->section_headers\n+\t\t\tsec_name = section_name_print (filedata,\n+\t\t\t\t\t\t       filedata->section_headers\n \t\t\t\t\t\t       + psym->st_shndx);\n \t\t      else if (psym->st_shndx == SHN_ABS)\n \t\t\tsec_name = \"ABS\";\n@@ -6697,7 +6723,7 @@ process_section_headers (Filedata * filedata)\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n     {\n-      char * name = SECTION_NAME_PRINT (section);\n+      const char *name = section_name_print (filedata, section);\n \n       /* Run some sanity checks on the headers and\n \t possibly fill in some file data as well.  */\n@@ -7040,7 +7066,7 @@ process_section_headers (Filedata * filedata)\n       if (do_section_details)\n \tprintf (\"%s\\n      \", printable_section_name (filedata, section));\n       else\n-\tprint_symbol (-17, SECTION_NAME_PRINT (section));\n+\tprint_symbol (-17, section_name_print (filedata, section));\n \n       printf (do_wide ? \" %-15s \" : \" %-15.15s \",\n \t      get_section_type_name (filedata, section->sh_type));\n@@ -7464,7 +7490,8 @@ process_section_groups (Filedata * filedata)\n \t\t  continue;\n \t\t}\n \n-\t      group_name = SECTION_NAME_PRINT (filedata->section_headers\n+\t      group_name = section_name_print (filedata,\n+\t\t\t\t\t       filedata->section_headers\n \t\t\t\t\t       + sym->st_shndx);\n \t      strtab_sec = NULL;\n \t      free (strtab);\n@@ -8385,7 +8412,7 @@ ia64_process_unwind (Filedata * filedata)\n \n   while (unwcount-- > 0)\n     {\n-      char * suffix;\n+      const char *suffix;\n       size_t len, len2;\n \n       for (i = unwstart, sec = filedata->section_headers + unwstart, unwsec = NULL;\n@@ -8418,29 +8445,30 @@ ia64_process_unwind (Filedata * filedata)\n \t\t{\n \t\t  sec = filedata->section_headers + g->section_index;\n \n-\t\t  if (SECTION_NAME_VALID (sec)\n-\t\t      && streq (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info))\n+\t\t  if (section_name_valid (filedata, sec)\n+\t\t      && streq (section_name (filedata, sec),\n+\t\t\t\tELF_STRING_ia64_unwind_info))\n \t\t    break;\n \t\t}\n \n \t      if (g == NULL)\n \t\ti = filedata->file_header.e_shnum;\n \t    }\n \t}\n-      else if (SECTION_NAME_VALID (unwsec)\n-\t       && startswith (SECTION_NAME (unwsec),\n+      else if (section_name_valid (filedata, unwsec)\n+\t       && startswith (section_name (filedata, unwsec),\n \t\t\t      ELF_STRING_ia64_unwind_once))\n \t{\n \t  /* .gnu.linkonce.ia64unw.FOO -> .gnu.linkonce.ia64unwi.FOO.  */\n \t  len2 = sizeof (ELF_STRING_ia64_unwind_info_once) - 1;\n-\t  suffix = SECTION_NAME (unwsec) + len;\n+\t  suffix = section_name (filedata, unwsec) + len;\n \t  for (i = 0, sec = filedata->section_headers;\n \t       i < filedata->file_header.e_shnum;\n \t       ++i, ++sec)\n-\t    if (SECTION_NAME_VALID (sec)\n-\t\t&& startswith (SECTION_NAME (sec),\n+\t    if (section_name_valid (filedata, sec)\n+\t\t&& startswith (section_name (filedata, sec),\n \t\t\t       ELF_STRING_ia64_unwind_info_once)\n-\t\t&& streq (SECTION_NAME (sec) + len2, suffix))\n+\t\t&& streq (section_name (filedata, sec) + len2, suffix))\n \t      break;\n \t}\n       else\n@@ -8450,15 +8478,17 @@ ia64_process_unwind (Filedata * filedata)\n \t  len = sizeof (ELF_STRING_ia64_unwind) - 1;\n \t  len2 = sizeof (ELF_STRING_ia64_unwind_info) - 1;\n \t  suffix = \"\";\n-\t  if (SECTION_NAME_VALID (unwsec)\n-\t      && startswith (SECTION_NAME (unwsec), ELF_STRING_ia64_unwind))\n-\t    suffix = SECTION_NAME (unwsec) + len;\n+\t  if (section_name_valid (filedata, unwsec)\n+\t      && startswith (section_name (filedata, unwsec),\n+\t\t\t     ELF_STRING_ia64_unwind))\n+\t    suffix = section_name (filedata, unwsec) + len;\n \t  for (i = 0, sec = filedata->section_headers;\n \t       i < filedata->file_header.e_shnum;\n \t       ++i, ++sec)\n-\t    if (SECTION_NAME_VALID (sec)\n-\t\t&& startswith (SECTION_NAME (sec), ELF_STRING_ia64_unwind_info)\n-\t\t&& streq (SECTION_NAME (sec) + len2, suffix))\n+\t    if (section_name_valid (filedata, sec)\n+\t\t&& startswith (section_name (filedata, sec),\n+\t\t\t       ELF_STRING_ia64_unwind_info)\n+\t\t&& streq (section_name (filedata, sec) + len2, suffix))\n \t      break;\n \t}\n \n@@ -8840,8 +8870,8 @@ hppa_process_unwind (Filedata * filedata)\n \t\t\t   &aux.strtab, &aux.strtab_size))\n \t    return false;\n \t}\n-      else if (SECTION_NAME_VALID (sec)\n-\t       && streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n+      else if (section_name_valid (filedata, sec)\n+\t       && streq (section_name (filedata, sec), \".PARISC.unwind\"))\n \tunwsec = sec;\n     }\n \n@@ -8850,8 +8880,8 @@ hppa_process_unwind (Filedata * filedata)\n \n   for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum; ++i, ++sec)\n     {\n-      if (SECTION_NAME_VALID (sec)\n-\t  && streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n+      if (section_name_valid (filedata, sec)\n+\t  && streq (section_name (filedata, sec), \".PARISC.unwind\"))\n \t{\n \t  unsigned long num_unwind = sec->sh_size / 16;\n \n@@ -10064,9 +10094,9 @@ dynamic_section_mips_val (Filedata * filedata, Elf_Internal_Dyn * entry)\n       break;\n \n     case DT_MIPS_IVERSION:\n-      if (VALID_DYNAMIC_NAME (filedata, entry->d_un.d_val))\n+      if (valid_dynamic_name (filedata, entry->d_un.d_val))\n \tprintf (_(\"Interface Version: %s\"),\n-\t\tGET_DYNAMIC_NAME (filedata, entry->d_un.d_val));\n+\t\tget_dynamic_name (filedata, entry->d_un.d_val));\n       else\n \t{\n \t  char buf[40];\n@@ -11012,9 +11042,9 @@ the .dynstr section doesn't match the DT_STRTAB and DT_STRSZ tags\\n\"));\n \t\t  break;\n \t\t}\n \n-\t      if (VALID_DYNAMIC_NAME (filedata, entry->d_un.d_val))\n+\t      if (valid_dynamic_name (filedata, entry->d_un.d_val))\n \t\tprintf (\": [%s]\\n\",\n-\t\t\tGET_DYNAMIC_NAME (filedata, entry->d_un.d_val));\n+\t\t\tget_dynamic_name (filedata, entry->d_un.d_val));\n \t      else\n \t\t{\n \t\t  printf (\": \");\n@@ -11279,10 +11309,10 @@ the .dynstr section doesn't match the DT_STRTAB and DT_STRSZ tags\\n\"));\n \n \t  if (do_dynamic)\n \t    {\n-\t      char * name;\n+\t      const char *name;\n \n-\t      if (VALID_DYNAMIC_NAME (filedata, entry->d_un.d_val))\n-\t\tname = GET_DYNAMIC_NAME (filedata, entry->d_un.d_val);\n+\t      if (valid_dynamic_name (filedata, entry->d_un.d_val))\n+\t\tname = get_dynamic_name (filedata, entry->d_un.d_val);\n \t      else\n \t\tname = NULL;\n \n@@ -11365,9 +11395,10 @@ the .dynstr section doesn't match the DT_STRTAB and DT_STRSZ tags\\n\"));\n \t  if (do_dynamic)\n \t    {\n \t      if (entry->d_tag == DT_USED\n-\t\t  && VALID_DYNAMIC_NAME (filedata, entry->d_un.d_val))\n+\t\t  && valid_dynamic_name (filedata, entry->d_un.d_val))\n \t\t{\n-\t\t  char * name = GET_DYNAMIC_NAME (filedata, entry->d_un.d_val);\n+\t\t  const char *name\n+\t\t    = get_dynamic_name (filedata, entry->d_un.d_val);\n \n \t\t  if (*name)\n \t\t    {\n@@ -11610,9 +11641,9 @@ process_version_sections (Filedata * filedata)\n \t\taux.vda_name = BYTE_GET (eaux->vda_name);\n \t\taux.vda_next = BYTE_GET (eaux->vda_next);\n \n-\t\tif (VALID_DYNAMIC_NAME (filedata, aux.vda_name))\n+\t\tif (valid_dynamic_name (filedata, aux.vda_name))\n \t\t  printf (_(\"Name: %s\\n\"),\n-\t\t\t  GET_DYNAMIC_NAME (filedata, aux.vda_name));\n+\t\t\t  get_dynamic_name (filedata, aux.vda_name));\n \t\telse\n \t\t  printf (_(\"Name index: %ld\\n\"), aux.vda_name);\n \n@@ -11642,10 +11673,10 @@ process_version_sections (Filedata * filedata)\n \t\t    aux.vda_name = BYTE_GET (eaux->vda_name);\n \t\t    aux.vda_next = BYTE_GET (eaux->vda_next);\n \n-\t\t    if (VALID_DYNAMIC_NAME (filedata, aux.vda_name))\n+\t\t    if (valid_dynamic_name (filedata, aux.vda_name))\n \t\t      printf (_(\"  %#06lx: Parent %d: %s\\n\"),\n \t\t\t      isum, j,\n-\t\t\t      GET_DYNAMIC_NAME (filedata, aux.vda_name));\n+\t\t\t      get_dynamic_name (filedata, aux.vda_name));\n \t\t    else\n \t\t      printf (_(\"  %#06lx: Parent %d, name index: %ld\\n\"),\n \t\t\t      isum, j, aux.vda_name);\n@@ -11737,9 +11768,9 @@ process_version_sections (Filedata * filedata)\n \n \t\tprintf (_(\"  %#06lx: Version: %d\"), idx, ent.vn_version);\n \n-\t\tif (VALID_DYNAMIC_NAME (filedata, ent.vn_file))\n+\t\tif (valid_dynamic_name (filedata, ent.vn_file))\n \t\t  printf (_(\"  File: %s\"),\n-\t\t\t  GET_DYNAMIC_NAME (filedata, ent.vn_file));\n+\t\t\t  get_dynamic_name (filedata, ent.vn_file));\n \t\telse\n \t\t  printf (_(\"  File: %lx\"), ent.vn_file);\n \n@@ -11765,9 +11796,9 @@ process_version_sections (Filedata * filedata)\n \t\t    aux.vna_name  = BYTE_GET (eaux->vna_name);\n \t\t    aux.vna_next  = BYTE_GET (eaux->vna_next);\n \n-\t\t    if (VALID_DYNAMIC_NAME (filedata, aux.vna_name))\n+\t\t    if (valid_dynamic_name (filedata, aux.vna_name))\n \t\t      printf (_(\"  %#06lx:   Name: %s\"),\n-\t\t\t      isum, GET_DYNAMIC_NAME (filedata, aux.vna_name));\n+\t\t\t      isum, get_dynamic_name (filedata, aux.vna_name));\n \t\t    else\n \t\t      printf (_(\"  %#06lx:   Name index: %lx\"),\n \t\t\t      isum, aux.vna_name);\n@@ -12632,14 +12663,17 @@ print_dynamic_symbol (Filedata *filedata, unsigned long si,\n       && psym->st_shndx < filedata->file_header.e_shnum\n       && psym->st_name == 0)\n     {\n-      is_valid = SECTION_NAME_VALID (filedata->section_headers + psym->st_shndx);\n+      is_valid\n+\t= section_name_valid (filedata,\n+\t\t\t      filedata->section_headers + psym->st_shndx);\n       sstr = is_valid ?\n-\tSECTION_NAME_PRINT (filedata->section_headers + psym->st_shndx)\n+\tsection_name_print (filedata,\n+\t\t\t    filedata->section_headers + psym->st_shndx)\n \t: _(\"<corrupt>\");\n     }\n   else\n     {\n-      is_valid = VALID_SYMBOL_NAME (strtab, strtab_size, psym->st_name);\n+      is_valid = valid_symbol_name (strtab, strtab_size, psym->st_name);\n       sstr = is_valid  ? strtab + psym->st_name : _(\"<corrupt>\");\n     }\n \n@@ -12787,7 +12821,8 @@ display_lto_symtab (Filedata *           filedata,\n   char * ext_name = NULL;\n \n   if (asprintf (& ext_name, \".gnu.lto_.ext_symtab.%s\",\n-\t\tSECTION_NAME (section) + sizeof (\".gnu.lto_.symtab.\") - 1) > 0\n+\t\t(section_name (filedata, section)\n+\t\t + sizeof (\".gnu.lto_.symtab.\") - 1)) > 0\n       && ext_name != NULL /* Paranoia.  */\n       && (ext = find_section (filedata, ext_name)) != NULL)\n     {\n@@ -12940,8 +12975,8 @@ process_lto_symbol_tables (Filedata * filedata)\n   for (i = 0, section = filedata->section_headers;\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n-    if (SECTION_NAME_VALID (section)\n-\t&& startswith (SECTION_NAME (section), \".gnu.lto_.symtab.\"))\n+    if (section_name_valid (filedata, section)\n+\t&& startswith (section_name (filedata, section), \".gnu.lto_.symtab.\"))\n       res &= display_lto_symtab (filedata, section);\n \n   return res;\n@@ -13290,8 +13325,8 @@ process_syminfo (Filedata * filedata)\n       printf (\"%4d: \", i);\n       if (i >= filedata->num_dynamic_syms)\n \tprintf (_(\"<corrupt index>\"));\n-      else if (VALID_DYNAMIC_NAME (filedata, filedata->dynamic_symbols[i].st_name))\n-\tprint_symbol (30, GET_DYNAMIC_NAME (filedata,\n+      else if (valid_dynamic_name (filedata, filedata->dynamic_symbols[i].st_name))\n+\tprint_symbol (30, get_dynamic_name (filedata,\n \t\t\t\t\t    filedata->dynamic_symbols[i].st_name));\n       else\n \tprintf (_(\"<corrupt: %19ld>\"), filedata->dynamic_symbols[i].st_name);\n@@ -13308,10 +13343,10 @@ process_syminfo (Filedata * filedata)\n \tdefault:\n \t  if (filedata->dynamic_syminfo[i].si_boundto > 0\n \t      && filedata->dynamic_syminfo[i].si_boundto < filedata->dynamic_nent\n-\t      && VALID_DYNAMIC_NAME (filedata,\n+\t      && valid_dynamic_name (filedata,\n \t\t\t\t     filedata->dynamic_section[filedata->dynamic_syminfo[i].si_boundto].d_un.d_val))\n \t    {\n-\t      print_symbol (10, GET_DYNAMIC_NAME (filedata,\n+\t      print_symbol (10, get_dynamic_name (filedata,\n \t\t\t\t\t\t  filedata->dynamic_section[filedata->dynamic_syminfo[i].si_boundto].d_un.d_val));\n \t      putchar (' ' );\n \t    }\n@@ -15060,7 +15095,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *section,\n static ctf_sect_t *\n shdr_to_ctf_sect (ctf_sect_t *buf, Elf_Internal_Shdr *shdr, Filedata *filedata)\n {\n-  buf->cts_name = SECTION_NAME_PRINT (shdr);\n+  buf->cts_name = section_name_print (filedata, shdr);\n   buf->cts_size = shdr->sh_size;\n   buf->cts_entsize = shdr->sh_entsize;\n \n@@ -15636,8 +15671,9 @@ free_debug_section (enum dwarf_section_display_enum debug)\n static bool\n display_debug_section (int shndx, Elf_Internal_Shdr * section, Filedata * filedata)\n {\n-  char * name = SECTION_NAME_VALID (section) ? SECTION_NAME (section) : \"\";\n-  const char * print_name = printable_section_name (filedata, section);\n+  const char *name = (section_name_valid (filedata, section)\n+\t\t      ? section_name (filedata, section) : \"\");\n+  const char *print_name = printable_section_name (filedata, section);\n   bfd_size_type length;\n   bool result = true;\n   int i;\n@@ -15725,8 +15761,9 @@ initialise_dumps_byname (Filedata * filedata)\n       bool any = false;\n \n       for (i = 0; i < filedata->file_header.e_shnum; i++)\n-\tif (SECTION_NAME_VALID (filedata->section_headers + i)\n-\t    && streq (SECTION_NAME (filedata->section_headers + i), cur->name))\n+\tif (section_name_valid (filedata, filedata->section_headers + i)\n+\t    && streq (section_name (filedata, filedata->section_headers + i),\n+\t\t      cur->name))\n \t  {\n \t    request_dump_bynumber (&filedata->dump, i, cur->type);\n \t    any = true;\n@@ -18004,8 +18041,8 @@ process_mips_specific (Filedata * filedata)\n \t\t\ttmp->tm_hour, tmp->tm_min, tmp->tm_sec);\n \n \t      printf (\"%3lu: \", (unsigned long) cnt);\n-\t      if (VALID_DYNAMIC_NAME (filedata, liblist.l_name))\n-\t\tprint_symbol (20, GET_DYNAMIC_NAME (filedata, liblist.l_name));\n+\t      if (valid_dynamic_name (filedata, liblist.l_name))\n+\t\tprint_symbol (20, get_dynamic_name (filedata, liblist.l_name));\n \t      else\n \t\tprintf (_(\"<corrupt: %9ld>\"), liblist.l_name);\n \t      printf (\" %s %#10lx %-7ld\", timebuf, liblist.l_checksum,\n@@ -18384,8 +18421,8 @@ process_mips_specific (Filedata * filedata)\n \t      psym = & filedata->dynamic_symbols[iconf[cnt]];\n \t      print_vma (psym->st_value, FULL_HEX);\n \t      putchar (' ');\n-\t      if (VALID_DYNAMIC_NAME (filedata, psym->st_name))\n-\t\tprint_symbol (25, GET_DYNAMIC_NAME (filedata, psym->st_name));\n+\t      if (valid_dynamic_name (filedata, psym->st_name))\n+\t\tprint_symbol (25, get_dynamic_name (filedata, psym->st_name));\n \t      else\n \t\tprintf (_(\"<corrupt: %14ld>\"), psym->st_name);\n \t    }\n@@ -18509,9 +18546,9 @@ process_mips_specific (Filedata * filedata)\n \t\t\t  get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)),\n \t\t\t  get_symbol_index_type (filedata, psym->st_shndx));\n \n-\t\t  if (VALID_DYNAMIC_NAME (filedata, psym->st_name))\n+\t\t  if (valid_dynamic_name (filedata, psym->st_name))\n \t\t    print_symbol (sym_width,\n-\t\t\t\t  GET_DYNAMIC_NAME (filedata, psym->st_name));\n+\t\t\t\t  get_dynamic_name (filedata, psym->st_name));\n \t\t  else\n \t\t    printf (_(\"<corrupt: %14ld>\"), psym->st_name);\n \t\t}\n@@ -18597,9 +18634,9 @@ process_mips_specific (Filedata * filedata)\n \t      printf (\" %-7s %3s \",\n \t\t      get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)),\n \t\t      get_symbol_index_type (filedata, psym->st_shndx));\n-\t      if (VALID_DYNAMIC_NAME (filedata, psym->st_name))\n+\t      if (valid_dynamic_name (filedata, psym->st_name))\n \t\tprint_symbol (sym_width,\n-\t\t\t      GET_DYNAMIC_NAME (filedata, psym->st_name));\n+\t\t\t      get_dynamic_name (filedata, psym->st_name));\n \t      else\n \t\tprintf (_(\"<corrupt: %14ld>\"), psym->st_name);\n \t    }"
    }
  ]
}