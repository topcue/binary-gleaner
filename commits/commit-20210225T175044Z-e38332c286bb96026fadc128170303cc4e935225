{
  "sha": "e38332c286bb96026fadc128170303cc4e935225",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTM4MzMyYzI4NmJiOTYwMjZmYWRjMTI4MTcwMzAzY2M0ZTkzNTIyNQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-02-25T17:50:44Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-02-25T17:50:44Z"
    },
    "message": "Add initial support for .debug_sup sections.\n\n\t* dwarf.c (get_type_abbrev_from_form): Accept but ignore sup\n\tforms.\n\t(read_and_display_attr_value): Handle sup forms.\n\t(display_debug_sup): New function.  Displays the contents of a\n\t.debug_sup section.\n\t(load_debug_sup_file): New function.  Loads the contents of a file\n\treferenced by a .debug_sup section.\n\t(check_for_and_load_links): Call load_debug_sup_file.\n\t(debug_displays): Add entry for .debug_sup.\n\t* dwarf.h (enum dwarf_section_display_enum): Add debug_sup.\n\t* readelf.c (process_section_headers): Add support for debug_sup.\n\t* doc/debug.options.texi: Note that the =links option will display\n\tthe contents of .debug_sup sections.\n\t* NEWS: Mention the new support.",
    "tree": {
      "sha": "1a1d7c9ce4a753f7cf5467ee13dc27e34e62a3d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a1d7c9ce4a753f7cf5467ee13dc27e34e62a3d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e38332c286bb96026fadc128170303cc4e935225",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e38332c286bb96026fadc128170303cc4e935225",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e38332c286bb96026fadc128170303cc4e935225",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e38332c286bb96026fadc128170303cc4e935225/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4ff3cbfdb361a1c3a16425c084cdd2ff8535cfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4ff3cbfdb361a1c3a16425c084cdd2ff8535cfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4ff3cbfdb361a1c3a16425c084cdd2ff8535cfd"
    }
  ],
  "stats": {
    "total": 185,
    "additions": 176,
    "deletions": 9
  },
  "files": [
    {
      "sha": "332bf8f426b358ab1e493a73ea6b684e374937e1",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -1,3 +1,20 @@\n+2021-02-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* dwarf.c (get_type_abbrev_from_form): Accept but ignore sup\n+\tforms.\n+\t(read_and_display_attr_value): Handle sup forms.\n+\t(display_debug_sup): New function.  Displays the contents of a\n+\t.debug_sup section.\n+\t(load_debug_sup_file): New function.  Loads the contents of a file\n+\treferenced by a .debug_sup section.\n+\t(check_for_and_load_links): Call load_debug_sup_file.\n+\t(debug_displays): Add entry for .debug_sup.\n+\t* dwarf.h (enum dwarf_section_display_enum): Add debug_sup.\n+\t* readelf.c (process_section_headers): Add support for debug_sup.\n+\t* doc/debug.options.texi: Note that the =links option will display\n+\tthe contents of .debug_sup sections.\n+\t* NEWS: Mention the new support.\n+\n 2021-02-25  Alan Modra  <amodra@gmail.com>\n \n \tPR 27456"
    },
    {
      "sha": "61aca952f2de69dcd67d94d1456cc6138fa11271",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Readelf and objdump can now display and use the contents of .debug_sup\n+  sections.\n+\n * Readelf and objdump will now follow links to separate debug info files by\n   default.  This behaviour can be stopped via the use of the new -wN or\n   --debug-dump=no-follow-links options for readelf and the -WN or"
    },
    {
      "sha": "3f0234ab0cc397406d6205acc48733586fb7829e",
      "filename": "binutils/doc/debug.options.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/doc/debug.options.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/doc/debug.options.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/debug.options.texi?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -44,11 +44,11 @@ output from this option can also be restricted by the use of the\n \n @item k\n @itemx =links\n-Displays the contents of the @samp{.gnu_debuglink} and/or\n-@samp{.gnu_debugaltlink} sections.  Also displays any links to\n-separate dwarf object files (dwo), if they are specified by the \n-DW_AT_GNU_dwo_name or DW_AT_dwo_name attributes in the\n-@samp{.debug_info} section.\n+Displays the contents of the @samp{.gnu_debuglink},\n+@samp{.gnu_debugaltlink} and @samp{.debug_sup} sections, if any of\n+them are present.  Also displays any links to separate dwarf object\n+files (dwo), if they are specified by the DW_AT_GNU_dwo_name or\n+DW_AT_dwo_name attributes in the @samp{.debug_info} section.\n \n @item K\n @itemx =follow-links"
    },
    {
      "sha": "3d279079380f3b4df37f9e63f7135bd659630e15",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 147,
      "deletions": 3,
      "changes": 150,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -2131,6 +2131,10 @@ get_type_abbrev_from_form (unsigned long                 form,\n \t}\n       break;\n \n+    case DW_FORM_ref_sup4:\n+    case DW_FORM_ref_sup8:\n+      break;\n+\n     case DW_FORM_ref1:\n     case DW_FORM_ref2:\n     case DW_FORM_ref4:\n@@ -2387,7 +2391,7 @@ display_discr_list (unsigned long          form,\n \n \tdefault:\n \t  printf (\"<corrupt>\\n\");\n-\t  warn (_(\"corrupt discr_list - unrecognised discriminant byte %#x\\n\"),\n+\t  warn (_(\"corrupt discr_list - unrecognized discriminant byte %#x\\n\"),\n \t\tdiscriminant);\n \t  return;\n \t}\n@@ -2460,6 +2464,7 @@ read_and_display_attr_value (unsigned long           attribute,\n       SAFE_BYTE_GET_AND_INC (uvalue, data, pointer_size, end);\n       break;\n \n+    case DW_FORM_strp_sup:\n     case DW_FORM_strp:\n     case DW_FORM_line_strp:\n     case DW_FORM_sec_offset:\n@@ -2483,6 +2488,7 @@ read_and_display_attr_value (unsigned long           attribute,\n       SAFE_BYTE_GET_AND_INC (uvalue, data, 2, end);\n       break;\n \n+    case DW_FORM_ref_sup4:\n     case DW_FORM_ref4:\n     case DW_FORM_data4:\n       SAFE_BYTE_GET_AND_INC (uvalue, data, 4, end);\n@@ -2536,6 +2542,7 @@ read_and_display_attr_value (unsigned long           attribute,\n     case DW_FORM_ref1:\n     case DW_FORM_ref2:\n     case DW_FORM_ref4:\n+    case DW_FORM_ref_sup4:\n     case DW_FORM_ref_udata:\n       if (!do_loc)\n \tprintf (\"%c<0x%s>\", delimiter, dwarf_vmatoa (\"x\", uvalue + cu_offset));\n@@ -2563,6 +2570,7 @@ read_and_display_attr_value (unsigned long           attribute,\n \tprintf (\"%c%s\", delimiter, dwarf_vmatoa (\"d\", implicit_const));\n       break;\n \n+    case DW_FORM_ref_sup8:\n     case DW_FORM_ref8:\n     case DW_FORM_data8:\n       if (!do_loc)\n@@ -2755,8 +2763,13 @@ read_and_display_attr_value (unsigned long           attribute,\n \t}\n       break;\n \n+    case DW_FORM_strp_sup:\n+      if (!do_loc)\n+\tprintf (\"%c<0x%s>\", delimiter, dwarf_vmatoa (\"x\", uvalue + cu_offset));\n+      break;\n+      \n     default:\n-      warn (_(\"Unrecognized form: %lu\\n\"), form);\n+      warn (_(\"Unrecognized form: 0x%lx\\n\"), form);\n       break;\n     }\n \n@@ -4334,6 +4347,81 @@ display_formatted_table (unsigned char *                   data,\n   return data;\n }\n \n+static int\n+display_debug_sup (struct dwarf_section *  section,\n+\t\t   void *                  file ATTRIBUTE_UNUSED)\n+{\n+  unsigned char * start = section->start;\n+  unsigned char * end = section->start + section->size;\n+  unsigned int version;\n+  char is_supplementary;\n+  const unsigned char * sup_filename;\n+  size_t sup_filename_len;\n+  unsigned int num_read;\n+  int status;\n+  dwarf_vma checksum_len;\n+\n+\n+  introduce (section, TRUE);\n+  if (section->size < 4)\n+    {\n+      error (_(\"corrupt .debug_sup section: size is too small\\n\"));\n+      return 0;\n+    }\n+\n+  /* Read the data.  */\n+  SAFE_BYTE_GET_AND_INC (version, start, 2, end);\n+  if (version < 5)\n+    warn (_(\"corrupt .debug_sup section: version < 5\"));\n+\n+  SAFE_BYTE_GET_AND_INC (is_supplementary, start, 1, end);\n+  if (is_supplementary != 0 && is_supplementary != 1)\n+    warn (_(\"corrupt .debug_sup section: is_supplementary not 0 or 1\\n\"));    \n+\n+  sup_filename = start;\n+  if (is_supplementary && sup_filename[0] != 0)\n+    warn (_(\"corrupt .debug_sup section: filename not empty in supplementary section\\n\"));\n+\n+  sup_filename_len = strnlen ((const char *) start, end - start);\n+  if (sup_filename_len == (size_t) (end - start))\n+    {\n+      error (_(\"corrupt .debug_sup section: filename is not NUL terminated\\n\"));\n+      return 0;\n+    }\n+  start += sup_filename_len + 1;\n+\n+  checksum_len = read_leb128 (start, end, FALSE /* unsigned */, & num_read, & status);\n+  if (status)\n+    {\n+      error (_(\"corrupt .debug_sup section: bad LEB128 field for checksum length\\n\"));\n+      checksum_len = 0;\n+    }\n+  start += num_read;\n+  if (checksum_len > (dwarf_vma) (end - start))\n+    {\n+      error (_(\"corrupt .debug_sup section: checksum length is longer than the remaining section length\\n\"));\n+      checksum_len = end - start;\n+    }\n+  else if (checksum_len < (dwarf_vma) (end - start))\n+    {\n+      warn (_(\"corrupt .debug_sup section: there are 0x%lx extra, unused bytes at the end of the section\\n\"),\n+\t    (long) ((end - start) - checksum_len));\n+    }\n+\n+  printf (_(\"  Version:      %u\\n\"), version);\n+  printf (_(\"  Is Supp:      %u\\n\"), is_supplementary);\n+  printf (_(\"  Filename:     %s\\n\"), sup_filename);\n+  printf (_(\"  Checksum Len: %lu\\n\"), (long) checksum_len);\n+  if (checksum_len > 0)\n+    {\n+      printf (_(\"  Checksum:     \"));\n+      while (checksum_len--)\n+\tprintf (\"0x%x \", * start++ );\n+      printf (\"\\n\");\n+    }\n+  return 1;\n+}\n+\n static int\n display_debug_lines_raw (struct dwarf_section *  section,\n \t\t\t unsigned char *         data,\n@@ -11131,9 +11219,62 @@ load_dwo_file (const char * main_filename, const char * name, const char * dir,\n   return separate_handle;\n }\n \n+static void\n+load_debug_sup_file (const char * main_filename, void * file)\n+{\n+  if (! load_debug_section (debug_sup, file))\n+    return; /* No .debug_sup section.  */\n+\n+  struct dwarf_section * section;\n+  section = & debug_displays [debug_sup].section;\n+  assert (section != NULL);\n+\n+  if (section->start == NULL || section->size < 5)\n+    {\n+      warn (_(\".debug_sup section is corrupt/empty\\n\"));\n+      return;\n+    }\n+\n+  if (section->start[2] != 0)\n+    return; /* This is a supplementary file.  */\n+\n+  const char * filename = (const char *) section->start + 3;\n+  if (strnlen (filename, section->size - 3) == section->size - 3)\n+    {\n+      warn (_(\"filename in .debug_sup section is corrupt\\n\"));\n+      return;\n+    }\n+\n+  if (filename[0] != '/' && strchr (main_filename, '/'))\n+    {\n+      char * new_name;\n+      if (asprintf (& new_name, \"%.*s/%s\",\n+\t\t    (int) (strrchr (main_filename, '/') - main_filename),\n+\t\t    main_filename,\n+\t\t    filename) < 3)\n+\twarn (_(\"unable to construct path for supplementary debug file\"));\n+      else\n+\tfilename = new_name;\n+    }\n+\n+  void * handle;\n+  handle = open_debug_file (filename);\n+  if (handle == NULL)\n+    {\n+      warn (_(\"unable to open file '%s' referenced from .debug_sup section\\n\"), filename);\n+      return;\n+    }\n+\n+  printf (_(\"%s: Found supplementary debug file: %s\\n\\n\"), main_filename, filename);\n+\n+  /* FIXME: Compare the checksums, if present.  */\n+  add_separate_debug_file (filename, handle);\n+}\n+\n /* Load a debuglink section and/or a debugaltlink section, if either are present.\n    Recursively check the loaded files for more of these sections.\n-   FIXME: Should also check for DWO_* entries in the newlu loaded files.  */\n+   Also follow any links in .debug_sup sections.\n+   FIXME: Should also check for DWO_* entries in the newly loaded files.  */\n \n static void\n check_for_and_load_links (void * file, const char * filename)\n@@ -11175,6 +11316,8 @@ check_for_and_load_links (void * file, const char * filename)\n \t\t\t\t    first_separate_info->filename);\n \t}\n     }\n+\n+  load_debug_sup_file (filename, file);\n }\n \n /* Load the separate debug info file(s) attached to FILE, if any exist.\n@@ -11541,6 +11684,7 @@ struct dwarf_section_display debug_displays[] =\n   { { \".debug_tu_index\",    \"\",\t\t\tNO_ABBREVS },      display_cu_index,       &do_debug_cu_index,\tFALSE },\n   { { \".gnu_debuglink\",     \"\",                 NO_ABBREVS },      display_debug_links,    &do_debug_links,     FALSE },\n   { { \".gnu_debugaltlink\",  \"\",                 NO_ABBREVS },      display_debug_links,    &do_debug_links,     FALSE },\n+  { { \".debug_sup\",         \"\",\t\t\tNO_ABBREVS },      display_debug_sup,      &do_debug_links,\tFALSE },\n   /* Separate debug info files can containt their own .debug_str section,\n      and this might be in *addition* to a .debug_str section already present\n      in the main file.  Hence we need to have two entries for .debug_str.  */"
    },
    {
      "sha": "043d3f9c9d0c74094a9d8a2276e1db866d568f1e",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -120,6 +120,7 @@ enum dwarf_section_display_enum\n   dwp_tu_index,\n   gnu_debuglink,\n   gnu_debugaltlink,\n+  debug_sup,\n   separate_debug_str,\n   max\n };"
    },
    {
      "sha": "7c8496c17ae5449a8ac4048043b3eb9ba198321d",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38332c286bb96026fadc128170303cc4e935225/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38332c286bb96026fadc128170303cc4e935225/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=e38332c286bb96026fadc128170303cc4e935225",
      "patch": "@@ -6556,7 +6556,8 @@ process_section_headers (Filedata * filedata)\n       if ((do_debugging || do_debug_info || do_debug_abbrevs\n \t   || do_debug_lines || do_debug_pubnames || do_debug_pubtypes\n \t   || do_debug_aranges || do_debug_frames || do_debug_macinfo\n-\t   || do_debug_str || do_debug_str_offsets || do_debug_loc || do_debug_ranges\n+\t   || do_debug_str || do_debug_str_offsets || do_debug_loc\n+\t   || do_debug_ranges\n \t   || do_debug_addr || do_debug_cu_index || do_debug_links)\n \t  && (const_strneq (name, \".debug_\")\n \t      || const_strneq (name, \".zdebug_\")))\n@@ -6583,6 +6584,7 @@ process_section_headers (Filedata * filedata)\n \t      || (do_debug_macinfo  && const_strneq (name, \"macinfo\"))\n \t      || (do_debug_macinfo  && const_strneq (name, \"macro\"))\n \t      || (do_debug_str      && const_strneq (name, \"str\"))\n+\t      || (do_debug_links    && const_strneq (name, \"sup\"))\n \t      || (do_debug_str_offsets && const_strneq (name, \"str_offsets\"))\n \t      || (do_debug_loc      && const_strneq (name, \"loc\"))\n \t      || (do_debug_loc      && const_strneq (name, \"loclists\"))"
    }
  ]
}