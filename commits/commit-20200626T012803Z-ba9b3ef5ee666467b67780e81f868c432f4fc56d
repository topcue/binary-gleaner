{
  "sha": "ba9b3ef5ee666467b67780e81f868c432f4fc56d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmE5YjNlZjVlZTY2NjQ2N2I2Nzc4MGU4MWY4NjhjNDMyZjRmYzU2ZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-26T01:22:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-26T01:28:03Z"
    },
    "message": "RISCV changes broke 32-bit --enable-targets=all\n\nBy the look of it, git commit 39ff0b812324 broke 32-bit host\n--enable-targets=all binutils builds.\n\n/usr/local/bin/ld: ../opcodes/.libs/libopcodes.a(riscv-dis.o): in function `parse_riscv_dis_option':\n/home/alan/src/binutils-gdb/opcodes/riscv-dis.c:102: undefined reference to `riscv_get_priv_spec_class'\ncollect2: error: ld returned 1 exit status\nMakefile:925: recipe for target 'objdump' failed\n\nThe problem is that elfxx-riscv.c is not built for a 32-bit host\nwithout --enable-64-bit-bfd or unless RISCV is given specifically as a\ntarget.  No such trimming of 64-bit only targets is done in opcodes.\n\nOne solution is to move these support functions to cpu-riscv.c, which\nruns into \"error: implicit declaration of function \u2018xmalloc\u2019\".  Now,\nxmalloc is not supposed to be used in libbfd or libopcodes - it's rude\nto crash out of an application that calls libbfd or libopcodes\nfunctions without giving it a chance to deal with out-of-memory\nitself.  So I removed the xmalloc and instead used a fixed size\nbuffer.  If you are worried about adding 36 bytes for the buffer to\nthe riscv_get_priv_spec_class_from_numbers stack frame size, then you\nhave no idea of the likely xmalloc + malloc stack frame size!  Trying\nto reduce memory usage is commendable, but in this instance\nriscv_estimate_digit and malloc for a temp buffer uses a lot more\nmemory than a fixed max-size buffer.\n\n\t* elfxx-riscv.c (struct priv_spec_t, priv_specs),\n\t(riscv_get_priv_spec_class, riscv_get_priv_spec_class_from_numbers),\n\t(riscv_get_priv_spec_name): Move to..\n\t* cpu-riscv.c: ..here.\n\t(riscv_get_priv_spec_class_from_numbers): Don't xmalloc temp buffer.\n\tUse %u to print unsigned numbers.",
    "tree": {
      "sha": "7b4799779c2f3f03e1d16f89dfdaf495e05ad146",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b4799779c2f3f03e1d16f89dfdaf495e05ad146"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ba9b3ef5ee666467b67780e81f868c432f4fc56d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba9b3ef5ee666467b67780e81f868c432f4fc56d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ba9b3ef5ee666467b67780e81f868c432f4fc56d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba9b3ef5ee666467b67780e81f868c432f4fc56d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "30610e152009eab265a9fa484f321c5ab4421cdc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30610e152009eab265a9fa484f321c5ab4421cdc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/30610e152009eab265a9fa484f321c5ab4421cdc"
    }
  ],
  "stats": {
    "total": 184,
    "additions": 89,
    "deletions": 95
  },
  "files": [
    {
      "sha": "2d9f1ec4cb06bbabd511f67680687925c1eec017",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ba9b3ef5ee666467b67780e81f868c432f4fc56d",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfxx-riscv.c (struct priv_spec_t, priv_specs),\n+\t(riscv_get_priv_spec_class, riscv_get_priv_spec_class_from_numbers),\n+\t(riscv_get_priv_spec_name): Move to..\n+\t* cpu-riscv.c: ..here.\n+\t(riscv_get_priv_spec_class_from_numbers): Don't xmalloc temp buffer.\n+\tUse %u to print unsigned numbers.\n+\n 2020-06-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* cpu-riscv.c (riscv_scan): Don't allow shorter matches using the"
    },
    {
      "sha": "2e9e9eb9d2875d28cab4f56fe049baee2d19ace9",
      "filename": "bfd/cpu-riscv.c",
      "status": "modified",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/cpu-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/cpu-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.c?ref=ba9b3ef5ee666467b67780e81f868c432f4fc56d",
      "patch": "@@ -23,6 +23,86 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"libbfd.h\"\n+#include \"elfxx-riscv.h\"\n+\n+/* Record the priv spec version string and the corresponding class.  */\n+\n+struct priv_spec_t\n+{\n+  const char *name;\n+  enum riscv_priv_spec_class class;\n+};\n+\n+/* List for all supported privilege versions.  */\n+\n+static const struct priv_spec_t priv_specs[] =\n+{\n+  {\"1.9.1\", PRIV_SPEC_CLASS_1P9P1},\n+  {\"1.10\",  PRIV_SPEC_CLASS_1P10},\n+  {\"1.11\",  PRIV_SPEC_CLASS_1P11},\n+\n+/* Terminate the list.  */\n+  {NULL, 0}\n+};\n+\n+/* Get the corresponding CSR version class by giving a privilege\n+   version string.  */\n+\n+int\n+riscv_get_priv_spec_class (const char *s,\n+\t\t\t   enum riscv_priv_spec_class *class)\n+{\n+  const struct priv_spec_t *version;\n+\n+  if (s == NULL)\n+    return 0;\n+\n+  for (version = &priv_specs[0]; version->name != NULL; ++version)\n+    if (strcmp (version->name, s) == 0)\n+      {\n+\t*class = version->class;\n+\treturn 1;\n+      }\n+\n+  /* Can not find the supported privilege version.  */\n+  return 0;\n+}\n+\n+/* Get the corresponding CSR version class by giving privilege\n+   version numbers.  It is usually used to convert the priv\n+   attribute numbers into the corresponding class.  */\n+\n+int\n+riscv_get_priv_spec_class_from_numbers (unsigned int major,\n+\t\t\t\t\tunsigned int minor,\n+\t\t\t\t\tunsigned int revision,\n+\t\t\t\t\tenum riscv_priv_spec_class *class)\n+{\n+  char buf[36];\n+\n+  if (major == 0 && minor == 0 && revision == 0)\n+    {\n+      *class = PRIV_SPEC_CLASS_NONE;\n+      return 1;\n+    }\n+\n+  if (revision != 0)\n+    snprintf (buf, sizeof (buf), \"%u.%u.%u\", major, minor, revision);\n+  else\n+    snprintf (buf, sizeof (buf), \"%u.%u\", major, minor);\n+\n+  return riscv_get_priv_spec_class (buf, class);\n+}\n+\n+/* Get the corresponding privilege version string by giving a CSR\n+   version class.  */\n+\n+const char *\n+riscv_get_priv_spec_name (enum riscv_priv_spec_class class)\n+{\n+  /* The first enum is PRIV_SPEC_CLASS_NONE.  */\n+  return priv_specs[class - 1].name;\n+}\n \n /* This routine is provided two arch_infos and returns an arch_info\n    that is compatible with both, or NULL if none exists.  */"
    },
    {
      "sha": "1570f1d862904869c04c21cc88e876aec1c3be02",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 0,
      "deletions": 95,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba9b3ef5ee666467b67780e81f868c432f4fc56d/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=ba9b3ef5ee666467b67780e81f868c432f4fc56d",
      "patch": "@@ -1749,98 +1749,3 @@ riscv_arch_str (unsigned xlen, const riscv_subset_list_t *subset)\n \n   return attr_str;\n }\n-\n-/* Record the priv spec version string and the corresponding class.  */\n-\n-struct priv_spec_t\n-{\n-  const char *name;\n-  enum riscv_priv_spec_class class;\n-};\n-\n-/* List for all supported privilege versions.  */\n-\n-static const struct priv_spec_t priv_specs[] =\n-{\n-  {\"1.9.1\", PRIV_SPEC_CLASS_1P9P1},\n-  {\"1.10\",  PRIV_SPEC_CLASS_1P10},\n-  {\"1.11\",  PRIV_SPEC_CLASS_1P11},\n-\n-/* Terminate the list.  */\n-  {NULL, 0}\n-};\n-\n-/* Get the corresponding CSR version class by giving a privilege\n-   version string.  */\n-\n-int\n-riscv_get_priv_spec_class (const char *s,\n-\t\t\t   enum riscv_priv_spec_class *class)\n-{\n-  const struct priv_spec_t *version;\n-\n-  if (s == NULL)\n-    return 0;\n-\n-  for (version = &priv_specs[0]; version->name != NULL; ++version)\n-    if (strcmp (version->name, s) == 0)\n-      {\n-\t*class = version->class;\n-\treturn 1;\n-      }\n-\n-  /* Can not find the supported privilege version.  */\n-  return 0;\n-}\n-\n-/* Get the corresponding CSR version class by giving privilege\n-   version numbers.  It is usually used to convert the priv\n-   attribute numbers into the corresponding class.  */\n-\n-int\n-riscv_get_priv_spec_class_from_numbers (unsigned int major,\n-\t\t\t\t\tunsigned int minor,\n-\t\t\t\t\tunsigned int revision,\n-\t\t\t\t\tenum riscv_priv_spec_class *class)\n-{\n-  size_t buf_size;\n-  char *buf;\n-  int result = 1;\n-\n-  if (major == 0 && minor == 0 && revision == 0)\n-    {\n-      *class = PRIV_SPEC_CLASS_NONE;\n-      return result;\n-    }\n-\n-  buf_size = riscv_estimate_digit (major)\n-\t     + 1 /* '.' */\n-\t     + riscv_estimate_digit (minor)\n-\t     + 1; /* string terminator */\n-  if (revision != 0)\n-    {\n-      buf_size += 1 /* '.' */\n-\t\t  + riscv_estimate_digit (revision);\n-      buf = xmalloc (buf_size);\n-      snprintf (buf, buf_size, \"%d.%d.%d\", major, minor, revision);\n-    }\n-  else\n-    {\n-      buf = xmalloc (buf_size);\n-      snprintf (buf, buf_size, \"%d.%d\", major, minor);\n-    }\n-\n-  result = riscv_get_priv_spec_class (buf, class);\n-  free (buf);\n-  return result;\n-}\n-\n-/* Get the corresponding privilege version string by giving a CSR\n-   version class.  */\n-\n-const char *\n-riscv_get_priv_spec_name (enum riscv_priv_spec_class class)\n-{\n-  /* The first enum is PRIV_SPEC_CLASS_NONE.  */\n-  return priv_specs[class - 1].name;\n-}"
    }
  ]
}