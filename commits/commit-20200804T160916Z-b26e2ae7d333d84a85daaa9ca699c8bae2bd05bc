{
  "sha": "b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI2ZTJhZTdkMzMzZDg0YTg1ZGFhYTljYTY5OWM4YmFlMmJkMDViYw==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-08-04T16:09:16Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-08-04T16:09:16Z"
    },
    "message": "sim: eBPF simulator\n\nThis patch introduces the basics of an instruction-simulator for eBPF.\nThe simulator is based on CGEN.\n\ngdb/ChangeLog:\n\n2020-08-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* configure.tgt: Set gdb_sim for bpf-*-* targets.\n\nsim/ChangeLog:\n\n2020-08-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\t    David Faust <david.faust@oracle.com>\n\n\t* configure.tgt (sim_arch): Add entry for bpf-*-*.\n\t* configure: Regenerate.\n\t* MAINTAINERS: Add maintainer for the BPF simulator.\n\t* bpf/Makefile.in: New file.\n\t* bpf/bpf-helpers.c: Likewise.\n\t* bpf/bpf-helpers.def: Likewise.\n\t* bpf/bpf-helpers.h: Likewise.\n\t* bpf/bpf-sim.h: Likewise.\n\t* bpf/bpf.c: Likewise.\n\t* bpf/config.in: Likewise.\n\t* bpf/configure.ac: Likewise.\n\t* bpf/decode.h: Likewise.\n\t* bpf/eng.h: Likewise.\n\t* bpf/mloop.in: Likewise.\n\t* bpf/sim-if.c: Likewise.\n\t* bpf/sim-main.h: Likewise.\n\t* bpf/traps.c: Likewise.\n\t* bpf/configure: Generate.\n\t* bpf/aclocal.m4: Likewise.\n\nsim/testsuite/ChangeLog:\n\n2020-08-04  David Faust  <david.faust@oracle.com>\n\t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* configure: Regenerate.\n\t* sim/bpf/allinsn.exp: New file.\n\t* sim/bpf/alu.s: Likewise.\n\t* sim/bpf/alu32.s: Likewise.\n\t* sim/bpf/endbe.s: Likewise.\n\t* sim/bpf/endle.s: Likewise.\n\t* sim/bpf/jmp.s: Likewise.\n\t* sim/bpf/jmp32.s: Likewise.\n\t* sim/bpf/ldabs.s: Likewise.\n\t* sim/bpf/mem.s: Likewise.\n\t* sim/bpf/mov.s: Likewise.\n\t* sim/bpf/testutils.inc: Likewise.\n\t* sim/bpf/xadd.s: Likewise.",
    "tree": {
      "sha": "73db093a038074bb84b9104e5bd1182e062e9546",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/73db093a038074bb84b9104e5bd1182e062e9546"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39791af2a2191a2f7765d7809ecedcd0442138bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39791af2a2191a2f7765d7809ecedcd0442138bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39791af2a2191a2f7765d7809ecedcd0442138bf"
    }
  ],
  "stats": {
    "total": 18708,
    "additions": 18708,
    "deletions": 0
  },
  "files": [
    {
      "sha": "175d28151d70f7fb3be602c2e6d434fae95acf36",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* configure.tgt: Set gdb_sim for bpf-*-* targets.\n+\n 2020-08-04  Weimin Pan <weimin.pan@oracle.com>\n \t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n "
    },
    {
      "sha": "8a26bdeb87391dd003545ff8611a4915b2b97b1a",
      "filename": "gdb/configure.tgt",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/gdb/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/gdb/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.tgt?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -208,6 +208,7 @@ bfin-*-*)\n bpf-*-*)\n \t# Target: eBPF\n \tgdb_target_obs=\"bpf-tdep.o\"\n+\tgdb_sim=../sim/bpf/libsim.a\n \t;;\n \n cris*)"
    },
    {
      "sha": "d18161654884c2543f62551ed214cf16fc265d30",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -1,3 +1,26 @@\n+2020-08-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\t    David Faust <david.faust@oracle.com>\n+\n+\t* configure.tgt (sim_arch): Add entry for bpf-*-*.\n+\t* configure: Regenerate.\n+\t* MAINTAINERS: Add maintainer for the BPF simulator.\n+\t* bpf/Makefile.in: New file.\n+\t* bpf/bpf-helpers.c: Likewise.\n+\t* bpf/bpf-helpers.def: Likewise.\n+\t* bpf/bpf-helpers.h: Likewise.\n+\t* bpf/bpf-sim.h: Likewise.\n+\t* bpf/bpf.c: Likewise.\n+\t* bpf/config.in: Likewise.\n+\t* bpf/configure.ac: Likewise.\n+\t* bpf/decode.h: Likewise.\n+\t* bpf/eng.h: Likewise.\n+\t* bpf/mloop.in: Likewise.\n+\t* bpf/sim-if.c: Likewise.\n+\t* bpf/sim-main.h: Likewise.\n+\t* bpf/traps.c: Likewise.\n+\t* bpf/configure: Generate.\n+\t* bpf/aclocal.m4: Likewise.\n+\n 2019-12-19  Tom Tromey  <tromey@adacore.com>\n \n \tPR build/24572:"
    },
    {
      "sha": "7dcd88422c5689e27e13435b4c5f8ca49a774764",
      "filename": "sim/MAINTAINERS",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/MAINTAINERS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/MAINTAINERS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/MAINTAINERS?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -17,6 +17,7 @@ aarch64\t        Nick Clifton <nickc@redhat.com>\n aarch64\t        Jim Wilson <wilson@tuliptree.org>\n arm\t        Nick Clifton <nickc@redhat.com>\n bfin\t\tMike Frysinger <vapier@gentoo.org>\n+bpf\t\tJose E. Marchesi <jose.marchesi@oracle.com>\n cr16\t        M R Swami Reddy <MR.Swami.Reddy@nsc.com>\n frv\t\tDave Brolley <brolley@redhat.com>\n ft32\t\tJames Bowman <james.bowman@ftdichip.com>"
    },
    {
      "sha": "4dbaceb12b02c8902501a95f6ac323f1d922f9ef",
      "filename": "sim/bpf/Makefile.in",
      "status": "added",
      "additions": 203,
      "deletions": 0,
      "changes": 203,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/Makefile.in?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,203 @@\n+# Makefile template for configure for the eBPF simulator\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GDB, the GNU debugger.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+## COMMON_PRE_CONFIG_FRAG\n+\n+CGEN_STD_OBJS = cgen-run.o cgen-scache.o cgen-trace.o cgen-utils.o\n+BPF_GEN_OBJS = arch.o cpu.o \\\n+               decode-le.o decode-be.o \\\n+               sem-le.o sem-be.o \\\n+               mloop-le.o mloop-be.o\n+BPF_HAND_OBJS = bpf.o sim-if.o traps.o bpf-helpers.o\n+\n+SIM_OBJS = \\\n+\t$(SIM_NEW_COMMON_OBJS) \\\n+\t$(CGEN_STD_OBJS) \\\n+\t$(BPF_GEN_OBJS) \\\n+\t$(BPF_HAND_OBJS)\n+\n+SIM_EXTRA_DEPS = \\\n+\t$(CGEN_INCLUDE_DEPS) \\\n+\tarch.h \\\n+\tbpf-sim.h \\\n+\t$(srcdir)/../../opcodes/bpf-desc.h \\\n+\t$(srcdir)/../../opcodes/bpf-opc.h\n+\n+SIM_EXTRA_CLEAN = bpf-clean\n+\n+## COMMON_POST_CONFIG_FRAG\n+\n+# cgen support, enable with --enable-cgen-maint\n+CGEN_MAINT = ; @true\n+# The following line is commented in or out depending upon --enable-cgen-maint.\n+@CGEN_MAINT@CGEN_MAINT =\n+\n+# BPF headers\n+\n+BPF_INCLUDE_DEPS = \\\n+\t$(CGEN_MAIN_CPU_DEPS) \\\n+\t$(SIM_EXTRA_DEPS) \\\n+\tcpu.h cpuall.h \\\n+        decode-le.h decode-be.h \\\n+        defs-le.h defs-be.h \\\n+        eng-le.h eng-be.h \\\n+        config.h\n+\n+# Dependencies for binaries from CGEN generated source\n+\n+arch.o: arch.c $(SIM_MAIN_DEPS)\n+cpu.o: cpu.c $(BPF_INCLUDE_DEPS)\n+decode-le.o: decode-le.c $(BPF_INCLUDE_DEPS)\n+decode-be.o: decode-be.c $(BPF_INCLUDE_DEPS)\n+\n+sim-if.o: sim-if.c $(SIM_MAIN_DEPS) $(srcdir)/../common/sim-core.h eng.h\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n+traps.o: traps.c $(SIM_MAIN_DEPS) eng.h\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n+mloop-le.o: mloop-le.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c mloop-le.c $(ALL_CFLAGS) -DWANT_ISA_EBPFLE\n+mloop-be.o: mloop-be.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c mloop-be.c $(ALL_CFLAGS) -DWANT_ISA_EBPFBE\n+\n+decode-le.o: decode-le.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c $(srcdir)/decode-le.c $(ALL_CFLAGS) -DWANT_ISA_EBPFLE\n+decode-be.o: decode-be.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c $(srcdir)/decode-be.c $(ALL_CFLAGS) -DWANT_ISA_EBPFBE\n+\n+sem-le.o: sem-le.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c $(srcdir)/sem-le.c $(ALL_CFLAGS) -DWANT_ISA_EBPFLE\n+sem-be.o: sem-be.c $(BPF_INCLUDE_DEPS)\n+\t$(CC) -c $(srcdir)/sem-be.c $(ALL_CFLAGS) -DWANT_ISA_EBPFBE\n+\n+arch = bpf\n+\n+CGEN_COMMON_DEPS = \\\n+\t$(CGEN_READ_SCM) \\\n+\t$(srcdir)/../../cpu/bpf.cpu \\\n+\t$(srcdir)/../../cpu/bpf.opc \\\n+\tMakefile\n+\n+stamp-arch: $(CGEN_COMMON_DEPS) $(CGEN_ARCH_SCM)\n+\t$(MAKE) cgen-arch $(CGEN_FLAGS_TO_PASS) \\\n+\t\tmach=bpf cpu=bpfbf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-scache\"\n+\ttouch $@\n+$(srcdir)/arch.h $(srcdir)/arch.c $(srcdir)/cpuall.h: $(CGEN_MAINT) stamp-arch\n+\t@true\n+\n+stamp-cpu: $(CGEN_COMMON_DEPS) $(CGEN_CPU_SCM)\n+\t$(MAKE) cgen-cpu  $(CGEN_FLAGS_TO_PASS) \\\n+\t\tisa=ebpfle,ebpfbe cpu=bpfbf mach=bpf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-multiple-isa with-scache\"\n+\trm -f $(srcdir)/model.c\n+\ttouch $@\n+$(srcdir)/cpu.h $(srcdir)/cpu.c $(srcdir)/model.c: $(CGEN_MAINT) stamp-cpu\n+\t@true\n+\n+# We need to generate a group of files per ISA.\n+# For eBPF little-endian:\n+#    defs-le.h\n+#    sem-le.c, decode-le.c, decode-le.h\n+#    $(objdir)/mloop-le.c $(objdir)/eng-le.h\n+# For eBPF big-endian:\n+#    defs-be.h\n+#    sem-be.c, decode-be.c, decode-be.h\n+#    $(objdir)/mloop-be.c $(objdir)/eng-le.h\n+#\n+# The rules below take care of that.\n+\n+stamp-defs-le: $(CGEN_COMMON_DEPS) $(CGEN_CPU_SCM)\n+\t$(MAKE) cgen-defs $(CGEN_FLAGS_TO_PASS) \\\n+\t\tisa=ebpfle cpu=bpfbf mach=bpf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-scache\" \\\n+                SUFFIX=\"-le\"\n+\ttouch $@\n+$(srcdir)/defs-le.h: $(CGEN_MAINT) stamp-defs-le\n+\t@true\n+\n+\n+stamp-defs-be: $(CGEN_COMMON_DEPS) $(CGEN_CPU_SCM)\n+\t$(MAKE) cgen-defs $(CGEN_FLAGS_TO_PASS) \\\n+\t\tisa=ebpfbe cpu=bpfbf mach=bpf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-scache\" \\\n+                SUFFIX=\"-be\"\n+\ttouch $@\n+$(srcdir)/defs-be.h: $(CGEN_MAINT) stamp-defs-be\n+\t@true\n+\n+stamp-decode-le: $(CGEN_COMMON_DEPS) $(CGEN_CPU_SCM) $(GEN_DECODE_SCM)\n+\t$(MAKE) cgen-decode $(CGEN_FLAGS_TO_PASS) \\\n+\t\tisa=ebpfle cpu=bpfbf mach=bpf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-scache\" \\\n+                SUFFIX=\"-le\" \\\n+\t\tEXTRAFILES=\"$(CGEN_CPU_SEM)\"\n+\ttouch $@\n+$(srcdir)/sem-le.c $(srcdir)/decode-le.c $(srcdir)/decode-le.h: \\\n+              $(CGEN_MAINT) stamp-decode-le\n+\t@true\n+\n+\n+stamp-decode-be: $(CGEN_COMMON_DEPS) $(CGEN_CPU_SCM) $(GEN_DECODE_SCM)\n+\t$(MAKE) cgen-decode $(CGEN_FLAGS_TO_PASS) \\\n+\t\tisa=ebpfbe cpu=bpfbf mach=bpf \\\n+\t\tarchfile=$(srcdir)/../../cpu/bpf.cpu \\\n+\t\tFLAGS=\"with-scache\" \\\n+                SUFFIX=\"-be\" \\\n+\t\tEXTRAFILES=\"$(CGEN_CPU_SEM)\"\n+\ttouch $@\n+$(srcdir)/sem-be.c $(srcdir)/decode-be.c $(srcdir)/decode-be.h: \\\n+              $(CGEN_MAINT) stamp-decode-be\n+\t@true\n+\n+# Note the following files are generated in objdir, not srcdir.\n+\n+stamp-mloop: stamp-mloop-le stamp-mloop-be\n+\n+stamp-mloop-le: $(srcdir)/../common/genmloop.sh mloop.in Makefile\n+\t$(SHELL) $(srccom)/genmloop.sh -shell $(SHELL) \\\n+\t\t-mono -scache -prefix bpfbf_ebpfle -cpu bpfbf \\\n+                -infile $(srcdir)/mloop.in -outfile-suffix -le\n+\t$(SHELL) $(srcroot)/move-if-change eng-le.hin eng-le.h\n+\t$(SHELL) $(srcroot)/move-if-change mloop-le.cin mloop-le.c\n+\ttouch $@\n+mloop-le.c eng-le.h: stamp-mloop-le\n+\t@true\n+\n+stamp-mloop-be: $(srcdir)/../common/genmloop.sh mloop.in Makefile\n+\t$(SHELL) $(srccom)/genmloop.sh -shell $(SHELL) \\\n+\t\t-mono -scache -prefix bpfbf_ebpfbe -cpu bpfbf \\\n+                -infile $(srcdir)/mloop.in -outfile-suffix -be\n+\t$(SHELL) $(srcroot)/move-if-change eng-be.hin eng-be.h\n+\t$(SHELL) $(srcroot)/move-if-change mloop-be.cin mloop-be.c\n+\ttouch $@\n+mloop-be.c eng-be.h: stamp-mloop-be\n+\t@true\n+\n+.PHONY = bpf-clean\n+\n+bpf-clean:\n+\trm -f stamp-arch stamp-cpu stamp-decode stamp-defs stamp-mloop"
    },
    {
      "sha": "e9f11c775c310ba5c0051681d74d579dd6f39321",
      "filename": "sim/bpf/aclocal.m4",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/aclocal.m4?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,119 @@\n+# generated automatically by aclocal 1.15.1 -*- Autoconf -*-\n+\n+# Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\n+# AM_CONDITIONAL                                            -*- Autoconf -*-\n+\n+# Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n+# -------------------------------------\n+# Define a conditional.\n+AC_DEFUN([AM_CONDITIONAL],\n+[AC_PREREQ([2.52])dnl\n+ m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n+       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n+AC_SUBST([$1_TRUE])dnl\n+AC_SUBST([$1_FALSE])dnl\n+_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n+_AM_SUBST_NOTMAKE([$1_FALSE])dnl\n+m4_define([_AM_COND_VALUE_$1], [$2])dnl\n+if $2; then\n+  $1_TRUE=\n+  $1_FALSE='#'\n+else\n+  $1_TRUE='#'\n+  $1_FALSE=\n+fi\n+AC_CONFIG_COMMANDS_PRE(\n+[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n+  AC_MSG_ERROR([[conditional \"$1\" was never defined.\n+Usually this means the macro was only invoked conditionally.]])\n+fi])])\n+\n+# Copyright (C) 2003-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# Check whether the underlying file-system supports filenames\n+# with a leading dot.  For instance MS-DOS doesn't.\n+AC_DEFUN([AM_SET_LEADING_DOT],\n+[rm -rf .tst 2>/dev/null\n+mkdir .tst 2>/dev/null\n+if test -d .tst; then\n+  am__leading_dot=.\n+else\n+  am__leading_dot=_\n+fi\n+rmdir .tst 2>/dev/null\n+AC_SUBST([am__leading_dot])])\n+\n+# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n+# From Jim Meyering\n+\n+# Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_MAINTAINER_MODE([DEFAULT-MODE])\n+# ----------------------------------\n+# Control maintainer-specific portions of Makefiles.\n+# Default is to disable them, unless 'enable' is passed literally.\n+# For symmetry, 'disable' may be passed as well.  Anyway, the user\n+# can override the default with the --enable/--disable switch.\n+AC_DEFUN([AM_MAINTAINER_MODE],\n+[m4_case(m4_default([$1], [disable]),\n+       [enable], [m4_define([am_maintainer_other], [disable])],\n+       [disable], [m4_define([am_maintainer_other], [enable])],\n+       [m4_define([am_maintainer_other], [enable])\n+        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\n+AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n+  AC_ARG_ENABLE([maintainer-mode],\n+    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],\n+      am_maintainer_other[ make rules and dependencies not useful\n+      (and sometimes confusing) to the casual installer])],\n+    [USE_MAINTAINER_MODE=$enableval],\n+    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n+  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n+  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n+  MAINT=$MAINTAINER_MODE_TRUE\n+  AC_SUBST([MAINT])dnl\n+]\n+)\n+\n+# Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# _AM_SUBST_NOTMAKE(VARIABLE)\n+# ---------------------------\n+# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n+# This macro is traced by Automake.\n+AC_DEFUN([_AM_SUBST_NOTMAKE])\n+\n+# AM_SUBST_NOTMAKE(VARIABLE)\n+# --------------------------\n+# Public sister of _AM_SUBST_NOTMAKE.\n+AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n+"
    },
    {
      "sha": "cec56459aa4edc12e04735072acdd09914a1a4a8",
      "filename": "sim/bpf/bpf-helpers.c",
      "status": "added",
      "additions": 175,
      "deletions": 0,
      "changes": 175,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf-helpers.c?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,175 @@\n+/* Emulation of eBPF helpers.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* BPF programs rely on the existence of several helper functions,\n+   which are provided by the kernel.  This simulator provides an\n+   implementation of the helpers, which can be customized by the\n+   user.  */\n+\n+#define WANT_CPU_BPFBF\n+#define WANT_CPU bpfbf\n+\n+#include \"sim-main.h\"\n+#include \"cgen-mem.h\"\n+#include \"cgen-ops.h\"\n+#include \"cpu.h\"\n+\n+/* bpf_trace_printk is a printk-like facility for debugging.\n+\n+   In the kernel, it appends a line to the Linux's tracing debugging\n+   interface.\n+\n+   In this simulator, it uses the simulator's tracing interface\n+   instead.\n+\n+   The format tags recognized by this helper are:\n+   %d, %i, %u, %x, %ld, %li, %lu, %lx, %lld, %lli, %llu, %llx,\n+   %p, %s\n+\n+   A maximum of three tags are supported.\n+\n+   This helper returns the number of bytes written, or a negative\n+   value in case of failure.  */\n+\n+int\n+bpf_trace_printk (SIM_CPU *current_cpu)\n+{\n+  va_list ap;\n+  SIM_DESC sd = CPU_STATE (current_cpu);\n+\n+  DI fmt_address;\n+  uint32_t size, tags_processed;\n+  size_t i, bytes_written = 0;\n+\n+  /* The first argument is the format string, which is passed as a\n+     pointer in %r1.  */\n+  fmt_address = GET_H_GPR (1);\n+\n+  /* The second argument is the length of the format string, as an\n+     unsigned 32-bit number in %r2.  */\n+  size = GET_H_GPR (2);\n+\n+  /* Read the format string from the memory pointed by %r2, printing\n+     out the stuff as we go.  There is a maximum of three format tags\n+     supported, which are read from %r3, %r4 and %r5 respectively.  */\n+  for (i = 0, tags_processed = 0; i < size;)\n+    {\n+      QI c = GETMEMUQI (current_cpu, CPU_PC_GET (current_cpu),\n+                        fmt_address + i);\n+\n+      switch (c)\n+        {\n+        case '%':\n+          /* Check we are not exceeding the limit of three format\n+             tags.  */\n+          if (tags_processed > 2)\n+            return -1; /* XXX look for kernel error code.  */\n+\n+          /* Depending on the kind of tag, extract the value from the\n+             proper argument.  */\n+          if (i++ >= size)\n+            return -1; /* XXX look for kernel error code.  */\n+\n+          UDI value = GET_H_GPR (3 + tags_processed);\n+\n+          switch ((GETMEMUQI (current_cpu, CPU_PC_GET (current_cpu),\n+                             fmt_address + i)))\n+            {\n+            case 'd':\n+              trace_printf (sd, current_cpu, \"%d\", value);\n+              break;\n+            case 'i':\n+              trace_printf (sd, current_cpu, \"%i\", value);\n+              break;\n+            case 'u':\n+              trace_printf (sd, current_cpu, \"%u\", value);\n+              break;\n+            case 'x':\n+              trace_printf (sd, current_cpu, \"%x\", value);\n+              break;\n+            case 'l':\n+              {\n+                if (i++ >= size)\n+                  return -1;\n+                switch (GETMEMUQI (current_cpu, CPU_PC_GET (current_cpu),\n+                             fmt_address + i))\n+                  {\n+                  case 'd':\n+                    trace_printf (sd, current_cpu, \"%ld\", value);\n+                    break;\n+                  case 'i':\n+                    trace_printf (sd, current_cpu, \"%li\", value);\n+                    break;\n+                  case 'u':\n+                    trace_printf (sd, current_cpu, \"%lu\", value);\n+                    break;\n+                  case 'x':\n+                    trace_printf (sd, current_cpu, \"%lx\", value);\n+                    break;\n+                  case 'l':\n+                    {\n+                      if (i++ >= size)\n+                        return -1;\n+                      switch (GETMEMUQI (current_cpu, CPU_PC_GET (current_cpu),\n+                                fmt_address + i)) {\n+                        case 'd':\n+                          trace_printf (sd, current_cpu, \"%lld\", value);\n+                          break;\n+                        case 'i':\n+                          trace_printf (sd, current_cpu, \"%lli\", value);\n+                          break;\n+                        case 'u':\n+                          trace_printf (sd, current_cpu, \"%llu\", value);\n+                          break;\n+                        case 'x':\n+                          trace_printf (sd, current_cpu, \"%llx\", value);\n+                          break;\n+                        default:\n+                          assert (0);\n+                          break;\n+                      }\n+                      break;\n+                    }\n+                  default:\n+                    assert (0);\n+                    break;\n+                }\n+                break;\n+              }\n+            default:\n+              /* XXX completeme */\n+              assert (0);\n+              break;\n+            }\n+\n+          tags_processed++;\n+          i++;\n+          break;\n+        case '\\0':\n+          i = size;\n+          break;\n+        default:\n+          trace_printf (sd, current_cpu, \"%c\", c);\n+          bytes_written++;\n+          i++;\n+          break;\n+        }\n+    }\n+\n+  return bytes_written;\n+}"
    },
    {
      "sha": "c8b66dc3d9138215b02d85f8c150604b0031d043",
      "filename": "sim/bpf/bpf-helpers.def",
      "status": "added",
      "additions": 194,
      "deletions": 0,
      "changes": 194,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf-helpers.def?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,194 @@\n+/* BPF helpers database.\n+   Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+\n+This file is part of the GNU simulator.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains the definition of the helpers that are available\n+   to BPF programs.\n+\n+   The primary source for information on kernel helpers is the\n+   linux/include/uapi/linux/bpf.h file in the Linux source tree.\n+   Please keep this database in sync.\n+\n+   The first column is the first kernel version featuring the helper\n+   function.  This should be an enumerate from bpf_kernel_version,\n+   defined in bpf-opts.h.  Note that the backend assumes that helpers\n+   never get deprecated in the kernel.  If that eventually happens,\n+   then we will need to use a bitmask here instead of an enumerate.\n+\n+   The second column is the constant-name for the helper.\n+   The third column is the program-name of the helper.\n+\n+   The fourth column is a list of names describing the types of the\n+   values returned and accepted by the helper, in one of these forms:\n+\n+     TYPES (type1, type2, ..., 0)\n+     VTYPES (type1, type2, ..., 0)\n+\n+   VTYPES should be used should the helper accept a variable number of\n+   arguments, TYPES otherwise.  The valid type names are:\n+\n+     `vt' for void.\n+     `it' for signed int.\n+     `ut' for unsigned int.\n+     `pt' for void*.\n+     `cpt' for const void*.\n+     `st' for short int.\n+     `ust' for unsigned short int.\n+     `cst' for const char *.\n+     `ullt' for unsigned long long.\n+     `llt' for long long.\n+     `u32t' for uint32.\n+     `u64t' for uint64.\n+\n+   In types descriptions, the firt entry corresponds to the value\n+   returned by the helper.  Subsequent names correspond to the helper\n+   arguments.  Finally, a 0 should close the list.\n+\n+   VERY IMPORTANT: the helper entries should be listed in the same\n+   order than in the definition of __BPF_FUNC_MAPPER in\n+   linux/include/uapi/linux/bpf.h!  */\n+\n+DEF_HELPER (LINUX_V4_0, MAP_LOOKUP_ELEM, map_lookup_elem, TYPES (pt, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_0, MAP_UPDATE_ELEM, map_update_elem, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_0, MAP_DELETE_ELEM, map_delete_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_1, PROBE_READ, probe_read, TYPES (it, pt, ut, cpt, 0))\n+DEF_HELPER (LINUX_V4_1, KTIME_GET_NS, ktime_get_ns, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, TRACE_PRINTK, trace_printk, VTYPES (it, cst, it, 0))\n+DEF_HELPER (LINUX_V4_1, GET_PRANDOM_U32, get_prandom_u32, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, GET_SMP_PROCESSOR_ID, get_smp_processor_id, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_1, SKB_STORE_BYTES, skb_store_bytes, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_1, L3_CSUM_REPLACE, l3_csum_replace, TYPES (it, pt, it, it ,it ,it, 0))\n+DEF_HELPER (LINUX_V4_1, L4_CSUM_REPLACE, l4_csum_replace, TYPES (it, pt, it, it, it, it, 0))\n+DEF_HELPER (LINUX_V4_2, TAIL_CALL, tail_call, TYPES (vt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_2, CLONE_REDIRECT, clone_redirect, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_PID_TGID, get_current_pid_tgid, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_UID_GID, get_current_uid_gid, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_2, GET_CURRENT_COMM, get_current_comm, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_3, GET_CGROUP_CLASSID, get_cgroup_classid, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_VLAN_PUSH, skb_vlan_push, TYPES (it, pt, st, ust, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_VLAN_POP, skb_vlan_pop, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_GET_TUNNEL_KEY, skb_get_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_3, SKB_SET_TUNNEL_KEY, skb_set_tunnel_key, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_3, PERF_EVENT_READ, perf_event_read, TYPES (ullt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_4, REDIRECT, redirect, TYPES (it, it, it, 0))\n+DEF_HELPER (LINUX_V4_4, GET_ROUTE_REALM, get_route_realm, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_4, PERF_EVENT_OUTPUT, perf_event_output, \\\n+\t    TYPES (it, pt, pt, ullt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_5, SKB_LOAD_BYTES, skb_load_bytes, TYPES (it, pt, it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, GET_STACKID, get_stackid, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, CSUM_DIFF, csum_diff, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_6, SKB_GET_TUNNEL_OPT, skb_get_tunnel_opt, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_6, SKB_SET_TUNNEL_OPT, skb_set_tunnel_opt, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_CHANGE_PROTO, skb_change_proto, TYPES (it, pt, st, u64t, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_CHANGE_TYPE, skb_change_type, TYPES (it, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_8, SKB_UNDER_CGROUP, skb_under_cgroup, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_8, GET_HASH_RECALC, get_hash_recalc, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_8, GET_CURRENT_TASK, get_current_task, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_8, PROBE_WRITE_USER, probe_write_user, TYPES (it, pt, cpt, ut, 0))\n+DEF_HELPER (LINUX_V4_9, CURRENT_TASK_UNDER_CGROUP, current_task_under_cgroup, \\\n+\t    TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_9, SKB_CHANGE_TAIL, skb_change_tail, TYPES (it, pt, ut, u64t, 0))\n+DEF_HELPER (LINUX_V4_9, SKB_PULL_DATA, skb_pull_data, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_9, CSUM_UPDATE, csum_update, TYPES (llt, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_9, SET_HASH_INVALID, set_hash_invalid, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V4_10, GET_NUMA_NODE_ID, get_numa_node_id, TYPES (it, 0))\n+DEF_HELPER (LINUX_V4_10, SKB_CHANGE_HEAD, skb_change_head, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_10, XDP_ADJUST_HEAD, xdp_adjust_head, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_11, PROBE_READ_STR, probe_read_str, TYPES (it, pt, u32t, cpt, 0))\n+DEF_HELPER (LINUX_V4_12, GET_SOCKET_COOKIE, get_socket_cookie, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_12, GET_SOCKET_UID, get_socket_uid, TYPES (ut, pt, 0))\n+DEF_HELPER (LINUX_V4_13, SET_HASH, set_hash, TYPES (ut, pt, u32t, 0))\n+DEF_HELPER (LINUX_V4_13, SETSOCKOPT, setsockopt, TYPES (it, pt, it, it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_13, SKB_ADJUST_ROOM, skb_adjust_room, TYPES (it, pt, st, u32t, ullt, 0))\n+DEF_HELPER (LINUX_V4_14, REDIRECT_MAP, redirect_map, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_14, SK_REDIRECT_MAP, sk_redirect_map, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_14, SOCK_MAP_UPDATE, sock_map_update, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_15, XDP_ADJUST_META, xdp_adjust_meta, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_15, PERF_EVENT_READ_VALUE, perf_event_read_value,\n+\t    TYPES (it, pt, ullt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_15, PERF_PROG_READ_VALUE, perf_prog_read_value,\n+\t    TYPES (it, pt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_15, GETSOCKOPT, getsockopt, TYPES (it, pt, it, it, pt, it, 0))\n+\n+DEF_HELPER (LINUX_V4_16, OVERRIDE_RETURN, override_return, TYPES (it, pt, ult, 0))\n+DEF_HELPER (LINUX_V4_16, SOCK_OPS_CB_FLAGS_SET, sock_ops_cb_flags_set, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_REDIRECT_MAP, msg_redirect_map, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_APPLY_BYTES, msg_apply_bytes, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_CORK_BYTES, msg_cork_bytes, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_17, MSG_PULL_DATA, msg_pull_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V4_17, BIND, bind, TYPES (it, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, XDP_ADJUST_TAIL, xdp_adjust_tail, TYPES (it, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_GET_XFRM_STATE,\n+\t    skb_get_xfrm_state, TYPES (it, pt, it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_18, GET_STACK, get_stack, TYPES (it, pt, pt, it, it, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_LOAD_BYTES_RELATIVE, skb_load_bytes_relative,\n+\t    TYPES (it, pt, it, pt, it, ut, 0))\n+DEF_HELPER (LINUX_V4_18, FIB_LOOKUP, fib_lookup, TYPES (it, pt, pt, it, ut, 0))\n+DEF_HELPER (LINUX_V4_18, SOCK_HASH_UPDATE, sock_hash_update, TYPES (it, pt, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_18, MSG_REDIRECT_HASH, msg_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, SK_REDIRECT_HASH, sk_redirect_hash, TYPES (it, pt, pt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_PUSH_ENCAP, lwt_push_encap, TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_STORE_BYTES, lwt_seg6_store_bytes,\n+\t    TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_ADJUST_SRH, lwt_seg6_adjust_srh, TYPES (it, pt, ut, ut, 0))\n+DEF_HELPER (LINUX_V4_18, LWT_SEG6_ACTION, lwt_seg6_action, TYPES (it, pt, ut, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, RC_REPEAT, rc_repeat, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_18, RC_KEYDOWN, rc_keydown, TYPES (it, pt, ut, ullt, ut, 0))\n+DEF_HELPER (LINUX_V4_18, SKB_CGROUP_ID, skb_cgroup_id, TYPES (ullt, pt, 0))\n+DEF_HELPER (LINUX_V4_18, GET_CURRENT_CGROUP_ID, get_current_cgroup_id, TYPES (ullt, 0))\n+DEF_HELPER (LINUX_V4_19, GET_LOCAL_STORAGE, get_local_storage, TYPES (pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_19, SK_SELECT_REUSEPORT, sk_select_reuseport,\n+\t    TYPES (it, pt, pt, pt, ut, 0))\n+DEF_HELPER (LINUX_V4_19, SKB_ANCESTOR_CGROUP_ID, skb_ancestor_cgroup_id,\n+\t    TYPES (ullt, pt, it, 0))\n+DEF_HELPER (LINUX_V4_20, SK_LOOKUP_TCP, sk_lookup_tcp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, SK_LOOKUP_UDP, sk_lookup_udp, TYPES (pt, pt, pt, it, ullt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, SK_RELEASE, sk_release, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_PUSH_ELEM, map_push_elem, TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_POP_ELEM, map_pop_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MAP_PEEK_ELEM, map_peek_elem, TYPES (it, pt, pt, 0))\n+DEF_HELPER (LINUX_V4_20, MSG_PUSH_DATA, msg_push_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V5_0, MSG_POP_DATA, msg_pop_data, TYPES (it, pt, it, it, it, 0))\n+DEF_HELPER (LINUX_V5_0, RC_POINTER_REL, rc_pointer_rel, TYPES (it, pt, it, it, 0))\n+DEF_HELPER (LINUX_V5_1, SPIN_LOCK, spin_lock, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SPIN_UNLOCK, spin_unlock, TYPES (vt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SK_FULLSOCK, sk_fullsock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, TCP_SOCK, tcp_sock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_1, SKB_ECN_SET_CE, skb_ecn_set_ce, TYPES (it, pt, 0))\n+DEF_HELPER (LINUX_V5_1, GET_LISTENER_SOCK, get_listener_sock, TYPES (pt, pt, 0))\n+DEF_HELPER (LINUX_V5_2, SKC_LOOKUP_TCP, skc_lookup_tcp,\n+\t    TYPES (pt, pt, pt, u32t, u64t, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, TCP_CHECK_SYNCOOKIE, tcp_check_syncookie,\n+\t    TYPES (it, pt, pt, u32t, pt, u32t, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NAME, sysctl_get_name, TYPES (it, pt, pt, ullt, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_CURRENT_VALUE, sysctl_get_current_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_GET_NEW_VALUE, sysctl_get_new_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, SYSCTL_SET_NEW_VALUE, sysctl_set_new_value,\n+\t    TYPES (it, pt, pt, ullt, 0))\n+DEF_HELPER (LINUX_V5_2, STRTOL, strtol, TYPES (it, cst, ullt, u64t, pt, 0))\n+DEF_HELPER (LINUX_V5_2, STRTOUL, strtoul, TYPES (it, pt, ullt, u64t, pt, 0))\n+DEF_HELPER (LINUX_V5_2, SK_STORAGE_GET, sk_storage_get, TYPES (pt, pt, pt, pt, u64t, 0))\n+DEF_HELPER (LINUX_V5_2, SK_STORAGE_DELETE, sk_storage_delete, TYPES (it, pt, pt, 0))\n+\n+/*\n+Local variables:\n+mode:c\n+End:\n+*/"
    },
    {
      "sha": "fe9413f266f2e99db3aed7c69d0fd7ed224ba625",
      "filename": "sim/bpf/bpf-helpers.h",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-helpers.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf-helpers.h?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,31 @@\n+/* Emulation of eBPF helpers.  Interface.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef BPF_HELPERS_H\n+#define BPF_HELPERS_H\n+\n+enum bpf_kernel_helper\n+  {\n+#define DEF_HELPER(kver, name, fn, types) name,\n+#include \"bpf-helpers.def\"\n+#undef DEF_HELPER\n+  };\n+\n+/* void bpf_trace_printk (const char *fmt); */\n+\n+#endif /* ! BPF_HELPERS_H */"
    },
    {
      "sha": "6b5c275cd58d1bfbba31beb693f18bc9710be957",
      "filename": "sim/bpf/bpf-sim.h",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf-sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf-sim.h?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,31 @@\n+/* eBPF simulator support code header\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef BPF_SIM_H\n+#define BPF_SIM_H\n+\n+void bpfbf_insn_before (sim_cpu* current_cpu, SEM_PC vpc, const IDESC *idesc);\n+void bpfbf_insn_after (sim_cpu* current_cpu, SEM_PC vpc, const IDESC *idesc);\n+\n+DI bpfbf_endbe (SIM_CPU *, DI, UINT);\n+DI bpfbf_endle (SIM_CPU *, DI, UINT);\n+DI bpfbf_skb_data_offset (SIM_CPU *);\n+VOID bpfbf_call (SIM_CPU *, INT, UINT);\n+VOID bpfbf_exit (SIM_CPU *);\n+\n+#endif /* ! BPF_SIM_H */"
    },
    {
      "sha": "0fb8d81c4695df612f2f1a5a8d9812112d98dce0",
      "filename": "sim/bpf/bpf.c",
      "status": "added",
      "additions": 327,
      "deletions": 0,
      "changes": 327,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf.c?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,327 @@\n+/* eBPF simulator support code\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#define WANT_CPU_BPFBF\n+#define WANT_CPU bpfbf\n+\n+#include \"sim-main.h\"\n+#include \"sim-fpu.h\"\n+#include \"cgen-mem.h\"\n+#include \"cgen-ops.h\"\n+#include \"cpuall.h\"\n+#include \"decode.h\"\n+\n+#include \"defs-le.h\"  /* For SCACHE */\n+\n+/* It is not possible to include both defs-le.h and defs-be.h due to\n+   duplicated definitions, so we need a bunch of forward declarations\n+   here.  */\n+extern void bpfbf_ebpfle_init_idesc_table (SIM_CPU *);\n+extern void bpfbf_ebpfbe_init_idesc_table (SIM_CPU *);\n+\n+uint64_t skb_data_offset;\n+\n+IDESC *bpf_idesc_le;\n+IDESC *bpf_idesc_be;\n+\n+\n+int\n+bpfbf_fetch_register (SIM_CPU *current_cpu,\n+                      int rn,\n+                      unsigned char *buf,\n+                      int len)\n+{\n+  if (rn == 11)\n+    SETTDI (buf, CPU_PC_GET (current_cpu));\n+  else if (0 <= rn && rn < 10)\n+    SETTDI (buf, GET_H_GPR (rn));\n+  else\n+    return 0;\n+\n+  return len;\n+}\n+\n+int\n+bpfbf_store_register (SIM_CPU *current_cpu,\n+                      int rn,\n+                      unsigned char *buf,\n+                      int len)\n+{\n+  if (rn == 11)\n+    CPU_PC_SET (current_cpu, GETTDI (buf));\n+  else if (0 <= rn && rn < 10)\n+    SET_H_GPR (rn, GETTDI (buf));\n+  else\n+    return 0;\n+\n+  return len;\n+}\n+\n+void\n+bpfbf_model_insn_before (SIM_CPU *current_cpu, int first_p)\n+{\n+  /* XXX */\n+}\n+\n+void\n+bpfbf_model_insn_after (SIM_CPU *current_cpu, int first_p)\n+{\n+  /* XXX */\n+}\n+\n+\f\n+/***** Instruction helpers.  *****/\n+\n+/* The semantic routines for most instructions are expressed in RTL in\n+   the cpu/bpf.cpu file, and automatically translated to C in the\n+   sem-*.c files in this directory.\n+\n+   However, some of the semantic routines make use of helper C\n+   functions.  This happens when the semantics of the instructions\n+   can't be expressed in RTL alone in a satisfactory way, or not at\n+   all.\n+\n+   The following functions implement these C helpers. */\n+\n+DI\n+bpfbf_endle (SIM_CPU *current_cpu, DI value, UINT bitsize)\n+{\n+  switch (bitsize)\n+    {\n+      case 16: return endian_h2le_2(endian_t2h_2(value));\n+      case 32: return endian_h2le_4(endian_t2h_4(value));\n+      case 64: return endian_h2le_8(endian_t2h_8(value));\n+      default: assert(0);\n+    }\n+  return value;\n+}\n+\n+DI\n+bpfbf_endbe (SIM_CPU *current_cpu, DI value, UINT bitsize)\n+{\n+  switch (bitsize)\n+    {\n+      case 16: return endian_h2be_2(endian_t2h_2(value));\n+      case 32: return endian_h2be_4(endian_t2h_4(value));\n+      case 64: return endian_h2be_8(endian_t2h_8(value));\n+      default: assert(0);\n+    }\n+  return value;\n+}\n+\n+DI\n+bpfbf_skb_data_offset (SIM_CPU *current_cpu)\n+{\n+  /* Simply return the user-configured value.\n+     This will be 0 if it has not been set. */\n+  return skb_data_offset;\n+}\n+\n+\n+VOID\n+bpfbf_call (SIM_CPU *current_cpu, INT disp32, UINT src)\n+{\n+  /* eBPF supports two kind of CALL instructions: the so called pseudo\n+     calls (\"bpf to bpf\") and external calls (\"bpf to helper\").\n+\n+     Both kind of calls use the same instruction (CALL).  However,\n+     external calls are constructed by passing a constant argument to\n+     the instruction, that identifies the helper, whereas pseudo calls\n+     result from expressions involving symbols.\n+\n+     We distinguish calls from pseudo-calls with the later having a 1\n+     stored in the SRC field of the instruction.  */\n+\n+  if (src == 1)\n+    {\n+      /* This is a pseudo-call.  */\n+\n+      /* XXX allocate a new stack frame and transfer control.  For\n+         that we need to analyze the target function, like the kernel\n+         verifier does.  We better populate a cache\n+         (function_start_address -> frame_size) so we avoid\n+         calculating this more than once.  */\n+      /* XXX note that disp32 is PC-relative in number of 64-bit\n+         words, _minus one_.  */\n+    }\n+  else\n+    {\n+      /* This is a call to a helper.\n+\n+         DISP32 contains the helper number.  Dispatch to the\n+         corresponding helper emulator in bpf-helpers.c.  */\n+\n+      switch (disp32) {\n+        /* case TRACE_PRINTK: */\n+        case 7:\n+          bpf_trace_printk (current_cpu);\n+          break;\n+        default:;\n+      }\n+    }\n+}\n+\n+VOID\n+bpfbf_exit (SIM_CPU *current_cpu)\n+{\n+  SIM_DESC sd = CPU_STATE (current_cpu);\n+\n+  /*  r0 holds \"return code\" */\n+  DI r0 = GET_H_GPR (0);\n+\n+  printf (\"exit %ld (0x%lx)\\n\", r0, r0);\n+\n+  sim_engine_halt (sd, current_cpu, NULL, CPU_PC_GET (current_cpu),\n+                   sim_exited, 0 /* sigrc */);\n+}\n+\n+VOID\n+bpfbf_breakpoint (SIM_CPU *current_cpu)\n+{\n+  SIM_DESC sd = CPU_STATE (current_cpu);\n+\n+  sim_engine_halt (sd, current_cpu, NULL, CPU_PC_GET (current_cpu),\n+                   sim_stopped, SIM_SIGTRAP);\n+}\n+\n+/* We use the definitions below instead of the cgen-generated model.c,\n+   because the later is not really able to work with cpus featuring\n+   several ISAs.  This should be fixed in CGEN.  */\n+\n+static void\n+bpf_def_model_init ()\n+{\n+  /* Do nothing.  */\n+}\n+\n+static void\n+bpfbf_prepare_run (SIM_CPU *cpu)\n+{\n+  /* Nothing.  */\n+}\n+\n+void\n+bpf_engine_run_full (SIM_CPU *cpu)\n+{\n+  if (current_target_byte_order == BFD_ENDIAN_LITTLE)\n+    {\n+      if (!bpf_idesc_le)\n+        {\n+          bpfbf_ebpfle_init_idesc_table (cpu);\n+          bpf_idesc_le = CPU_IDESC (cpu);\n+        }\n+      else\n+        CPU_IDESC (cpu) = bpf_idesc_le;\n+\n+      bpfbf_ebpfle_engine_run_full (cpu);\n+    }\n+  else\n+    {\n+      if (!bpf_idesc_be)\n+        {\n+          bpfbf_ebpfbe_init_idesc_table (cpu);\n+          bpf_idesc_be = CPU_IDESC (cpu);\n+        }\n+      else\n+        CPU_IDESC (cpu) = bpf_idesc_be;\n+\n+      bpfbf_ebpfbe_engine_run_full (cpu);\n+    }\n+}\n+\n+#if WITH_FAST\n+\n+void\n+bpf_engine_run_fast (SIM_CPU *cpu)\n+{\n+  if (current_target_byte_order == BFD_ENDIAN_LITTLE)\n+    {\n+      if (!bpf_idesc_le)\n+        {\n+          bpfbf_ebpfle_init_idesc_table (cpu);\n+          bpf_idesc_le = CPU_IDESC (cpu);\n+        }\n+      else\n+        CPU_IDESC (cpu) = bpf_idesc_le;\n+\n+      bpfbf_ebpfle_engine_run_fast (cpu);\n+    }\n+  else\n+    {\n+      if (!bpf_idesc_be)\n+        {\n+          bpfbf_ebpfbe_init_idesc_table (cpu);\n+          bpf_idesc_be = CPU_IDESC (cpu);\n+        }\n+      else\n+        CPU_IDESC (cpu) = bpf_idesc_be;\n+\n+      bpfbf_ebpfbe_engine_run_fast (cpu);\n+    }\n+}\n+\n+#endif /* WITH_FAST */\n+\n+static const CGEN_INSN *\n+bpfbf_get_idata (SIM_CPU *cpu, int inum)\n+{\n+  return CPU_IDESC (cpu) [inum].idata;\n+}\n+\n+static void\n+bpf_init_cpu (SIM_CPU *cpu)\n+{\n+  CPU_REG_FETCH (cpu) = bpfbf_fetch_register;\n+  CPU_REG_STORE (cpu) = bpfbf_store_register;\n+  CPU_PC_FETCH (cpu) = bpfbf_h_pc_get;\n+  CPU_PC_STORE (cpu) = bpfbf_h_pc_set;\n+  CPU_GET_IDATA (cpu) = bpfbf_get_idata;\n+  /* Only used by profiling.  0 disables it. */\n+  CPU_MAX_INSNS (cpu) = 0;\n+  CPU_INSN_NAME (cpu) = cgen_insn_name;\n+  CPU_FULL_ENGINE_FN (cpu) = bpf_engine_run_full;\n+#if WITH_FAST\n+  CPU_FAST_ENGINE_FN (cpu) = bpf_engine_run_fast;\n+#else\n+  CPU_FAST_ENGINE_FN (cpu) = bpf_engine_run_full;\n+#endif\n+}\n+\n+static const SIM_MODEL bpf_models[] =\n+{\n+ { \"bpf-def\", & bpf_mach, MODEL_BPF_DEF, NULL, bpf_def_model_init },\n+ { 0 }\n+};\n+\n+static const SIM_MACH_IMP_PROPERTIES bpfbf_imp_properties =\n+{\n+  sizeof (SIM_CPU),\n+#if WITH_SCACHE\n+  sizeof (SCACHE)\n+#else\n+  0\n+#endif\n+};\n+\n+const SIM_MACH bpf_mach =\n+{\n+  \"bpf\", \"bpf\", MACH_BPF,\n+  32, 32, & bpf_models[0], & bpfbf_imp_properties,\n+  bpf_init_cpu,\n+  bpfbf_prepare_run\n+};"
    },
    {
      "sha": "7c667a1c0d4147429afd5d30d58f04f590cfee36",
      "filename": "sim/bpf/config.in",
      "status": "added",
      "additions": 248,
      "deletions": 0,
      "changes": 248,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/config.in?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,248 @@\n+/* config.in.  Generated from configure.ac by autoheader.  */\n+\n+/* Define if building universal (internal helper macro) */\n+#undef AC_APPLE_UNIVERSAL_BUILD\n+\n+/* Sim debug setting */\n+#undef DEBUG\n+\n+/* Define to 1 if translation of program messages to the user's native\n+   language is requested. */\n+#undef ENABLE_NLS\n+\n+/* Define to 1 if you have the <dlfcn.h> header file. */\n+#undef HAVE_DLFCN_H\n+\n+/* Define to 1 if you have the <errno.h> header file. */\n+#undef HAVE_ERRNO_H\n+\n+/* Define to 1 if you have the <fcntl.h> header file. */\n+#undef HAVE_FCNTL_H\n+\n+/* Define to 1 if you have the <fpu_control.h> header file. */\n+#undef HAVE_FPU_CONTROL_H\n+\n+/* Define to 1 if you have the `ftruncate' function. */\n+#undef HAVE_FTRUNCATE\n+\n+/* Define to 1 if you have the `getrusage' function. */\n+#undef HAVE_GETRUSAGE\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#undef HAVE_INTTYPES_H\n+\n+/* Define to 1 if you have the `nsl' library (-lnsl). */\n+#undef HAVE_LIBNSL\n+\n+/* Define to 1 if you have the `socket' library (-lsocket). */\n+#undef HAVE_LIBSOCKET\n+\n+/* Define to 1 if you have the `lstat' function. */\n+#undef HAVE_LSTAT\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#undef HAVE_MEMORY_H\n+\n+/* Define to 1 if you have the `mmap' function. */\n+#undef HAVE_MMAP\n+\n+/* Define to 1 if you have the `munmap' function. */\n+#undef HAVE_MUNMAP\n+\n+/* Define to 1 if you have the `posix_fallocate' function. */\n+#undef HAVE_POSIX_FALLOCATE\n+\n+/* Define to 1 if you have the `sigaction' function. */\n+#undef HAVE_SIGACTION\n+\n+/* Define to 1 if the system has the type `socklen_t'. */\n+#undef HAVE_SOCKLEN_T\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#undef HAVE_STDINT_H\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#undef HAVE_STDLIB_H\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#undef HAVE_STRINGS_H\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#undef HAVE_STRING_H\n+\n+/* Define to 1 if `st_atime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_ATIME\n+\n+/* Define to 1 if `st_blksize' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_BLKSIZE\n+\n+/* Define to 1 if `st_blocks' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_BLOCKS\n+\n+/* Define to 1 if `st_ctime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_CTIME\n+\n+/* Define to 1 if `st_dev' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_DEV\n+\n+/* Define to 1 if `st_gid' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_GID\n+\n+/* Define to 1 if `st_ino' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_INO\n+\n+/* Define to 1 if `st_mode' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_MODE\n+\n+/* Define to 1 if `st_mtime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_MTIME\n+\n+/* Define to 1 if `st_nlink' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_NLINK\n+\n+/* Define to 1 if `st_rdev' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_RDEV\n+\n+/* Define to 1 if `st_size' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_SIZE\n+\n+/* Define to 1 if `st_uid' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_UID\n+\n+/* Define to 1 if you have the <sys/mman.h> header file. */\n+#undef HAVE_SYS_MMAN_H\n+\n+/* Define to 1 if you have the <sys/resource.h> header file. */\n+#undef HAVE_SYS_RESOURCE_H\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#undef HAVE_SYS_STAT_H\n+\n+/* Define to 1 if you have the <sys/times.h> header file. */\n+#undef HAVE_SYS_TIMES_H\n+\n+/* Define to 1 if you have the <sys/time.h> header file. */\n+#undef HAVE_SYS_TIME_H\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#undef HAVE_SYS_TYPES_H\n+\n+/* Define to 1 if you have the `time' function. */\n+#undef HAVE_TIME\n+\n+/* Define to 1 if you have the <time.h> header file. */\n+#undef HAVE_TIME_H\n+\n+/* Define to 1 if you have the `truncate' function. */\n+#undef HAVE_TRUNCATE\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+#undef HAVE_UNISTD_H\n+\n+/* Define to 1 if you have the <windows.h> header file. */\n+#undef HAVE_WINDOWS_H\n+\n+/* Define to 1 if you have the `__setfpucw' function. */\n+#undef HAVE___SETFPUCW\n+\n+/* Define to the sub-directory in which libtool stores uninstalled libraries.\n+   */\n+#undef LT_OBJDIR\n+\n+/* Name of this package. */\n+#undef PACKAGE\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#undef PACKAGE_BUGREPORT\n+\n+/* Define to the full name of this package. */\n+#undef PACKAGE_NAME\n+\n+/* Define to the full name and version of this package. */\n+#undef PACKAGE_STRING\n+\n+/* Define to the one symbol short name of this package. */\n+#undef PACKAGE_TARNAME\n+\n+/* Define to the home page for this package. */\n+#undef PACKAGE_URL\n+\n+/* Define to the version of this package. */\n+#undef PACKAGE_VERSION\n+\n+/* Additional package description */\n+#undef PKGVERSION\n+\n+/* Sim profile settings */\n+#undef PROFILE\n+\n+/* Bug reporting address */\n+#undef REPORT_BUGS_TO\n+\n+/* Define as the return type of signal handlers (`int' or `void'). */\n+#undef RETSIGTYPE\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#undef STDC_HEADERS\n+\n+/* Enable extensions on AIX 3, Interix.  */\n+#ifndef _ALL_SOURCE\n+# undef _ALL_SOURCE\n+#endif\n+/* Enable GNU extensions on systems that have them.  */\n+#ifndef _GNU_SOURCE\n+# undef _GNU_SOURCE\n+#endif\n+/* Enable threading extensions on Solaris.  */\n+#ifndef _POSIX_PTHREAD_SEMANTICS\n+# undef _POSIX_PTHREAD_SEMANTICS\n+#endif\n+/* Enable extensions on HP NonStop.  */\n+#ifndef _TANDEM_SOURCE\n+# undef _TANDEM_SOURCE\n+#endif\n+/* Enable general extensions on Solaris.  */\n+#ifndef __EXTENSIONS__\n+# undef __EXTENSIONS__\n+#endif\n+\n+\n+/* Sim assert settings */\n+#undef WITH_ASSERT\n+\n+/* Sim debug setting */\n+#undef WITH_DEBUG\n+\n+/* Sim default environment */\n+#undef WITH_ENVIRONMENT\n+\n+/* Sim profile settings */\n+#undef WITH_PROFILE\n+\n+/* How to route I/O */\n+#undef WITH_STDIO\n+\n+/* Sim trace settings */\n+#undef WITH_TRACE\n+\n+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n+   significant byte first (like Motorola and SPARC, unlike Intel). */\n+#if defined AC_APPLE_UNIVERSAL_BUILD\n+# if defined __BIG_ENDIAN__\n+#  define WORDS_BIGENDIAN 1\n+# endif\n+#else\n+# ifndef WORDS_BIGENDIAN\n+#  undef WORDS_BIGENDIAN\n+# endif\n+#endif\n+\n+/* Define to 1 if on MINIX. */\n+#undef _MINIX\n+\n+/* Define to 2 if the system does not provide POSIX.1 features except with\n+   this defined. */\n+#undef _POSIX_1_SOURCE\n+\n+/* Define to 1 if you need to in order for `stat' and other things to work. */\n+#undef _POSIX_SOURCE"
    },
    {
      "sha": "7125c50ff17527204a1ef85605daac5d70a7097d",
      "filename": "sim/bpf/configure",
      "status": "added",
      "additions": 15942,
      "deletions": 0,
      "changes": 15942,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/configure?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc"
    },
    {
      "sha": "16ca54e86c2bea382ce65e36996f1b3c9fcc53f1",
      "filename": "sim/bpf/configure.ac",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/configure.ac?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,13 @@\n+dnl Process this file with autoconf to produce a configure script.\n+AC_INIT(Makefile.in)\n+sinclude(../common/acinclude.m4)\n+\n+SIM_AC_COMMON\n+\n+SIM_AC_OPTION_ENDIAN([], [LITTLE])\n+SIM_AC_OPTION_ALIGNMENT(NONSTRICT_ALIGNMENT)\n+SIM_AC_OPTION_SCACHE(16384)\n+SIM_AC_OPTION_DEFAULT_MODEL([bpf-def])\n+SIM_AC_OPTION_CGEN_MAINT\n+\n+SIM_AC_OUTPUT"
    },
    {
      "sha": "74d31cbdfedc6f1880b5f4e02be2300b0c314b2d",
      "filename": "sim/bpf/decode.h",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/decode.h?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,37 @@\n+/* Decode declarations.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Oracle, Inc.\n+\n+This file is part of the GNU simulators.\n+\n+This program is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3 of the License, or\n+(at your option) any later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Include declarations for eBPF LE and eBPF BE ISAs. */\n+\n+#ifndef DECODE_H\n+#define DECODE_H\n+\n+#undef WITH_PROFILE_MODEL_P\n+\n+#ifdef WANT_ISA_EBPFLE\n+#include \"decode-le.h\"\n+#include \"defs-le.h\"\n+#endif /* WANT_ISA_EBPFLE */\n+\n+#ifdef WANT_ISA_EBPFBE\n+#include \"decode-be.h\"\n+#include \"defs-be.h\"\n+#endif /* WANT_ISA_EBPFBE */\n+\n+#endif /* DECODE_H */"
    },
    {
      "sha": "9277be04897254d14667a195152d95018597fb5e",
      "filename": "sim/bpf/eng.h",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/eng.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/eng.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/eng.h?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,23 @@\n+/* Engine declarations.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Oracle, Inc.\n+\n+This file is part of the GNU simulators.\n+\n+This program is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3 of the License, or\n+(at your option) any later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Include declarations for eBPF LE and eBPF BE ISAs. */\n+\n+#include \"eng-le.h\"\n+#include \"eng-be.h\""
    },
    {
      "sha": "921c591caa0a3c94725966f25e0da364bdf0b858",
      "filename": "sim/bpf/mloop.in",
      "status": "added",
      "additions": 165,
      "deletions": 0,
      "changes": 165,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/mloop.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/mloop.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/mloop.in?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,165 @@\n+# Simulator main loop for eBPF. -*- C -*-\n+#\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of the GNU Simulators.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Syntax:\n+# /bin/sh mloop.in command\n+#\n+# Command is one of:\n+#\n+# init\n+# support\n+# extract-{simple,scache,pbb}\n+# {full,fast}-exec-{simple,scache,pbb}\n+#\n+# A target need only provide a \"full\" version of one of simple,scache,pbb.\n+# If the target wants it can also provide a fast version of same, or if\n+# the slow (full featured) version is `simple', then the fast version can be\n+# one of scache/pbb.\n+# A target can't provide more than this.\n+# However for illustration's sake this file provides examples of all.\n+\n+# ??? After a few more ports are done, revisit.\n+# Will eventually need to machine generate a lot of this.\n+\n+case \"x$1\" in\n+\n+xsupport)\n+\n+cat <<EOF\n+\n+static INLINE const IDESC *\n+extract (SIM_CPU *current_cpu, PCADDR pc, CGEN_INSN_WORD insn,\n+         ARGBUF *abuf, int fast_p)\n+{\n+  const IDESC *id = @prefix@_decode (current_cpu, pc, insn, abuf);\n+  @prefix@_fill_argbuf (current_cpu, abuf, id, pc, fast_p);\n+  if (!fast_p)\n+    {\n+      int trace_p = PC_IN_TRACE_RANGE_P (current_cpu, pc);\n+      int profile_p = PC_IN_PROFILE_RANGE_P (current_cpu, pc);\n+      @prefix@_fill_argbuf_tp (current_cpu, abuf, trace_p, profile_p);\n+    }\n+  return id;\n+}\n+\n+static INLINE SEM_PC\n+execute (SIM_CPU *current_cpu, SCACHE *sc, int fast_p)\n+{\n+  SEM_PC vpc;\n+\n+  if (fast_p)\n+      vpc = (*sc->argbuf.semantic.sem_fast) (current_cpu, sc);\n+  else\n+    {\n+      ARGBUF *abuf = &sc->argbuf;\n+      const IDESC *idesc = abuf->idesc;\n+      const CGEN_INSN *idata = idesc->idata;\n+      int virtual_p = 0;\n+\n+      if (! virtual_p)\n+        {\n+          /* FIXME: call x-before */\n+          if (ARGBUF_PROFILE_P (abuf))\n+            PROFILE_COUNT_INSN (current_cpu, abuf->addr, idesc->num);\n+          /* FIXME: Later make cover macros: PROFILE_INSN_{INIT,FINI}.  */\n+          if (PROFILE_MODEL_P (current_cpu)\n+              && ARGBUF_PROFILE_P (abuf))\n+            @cpu@_model_insn_before (current_cpu, 1 /*first_p*/);\n+          CGEN_TRACE_INSN_INIT (current_cpu, abuf, 1);\n+          CGEN_TRACE_INSN (current_cpu, idata,\n+                      (const struct argbuf *) abuf, abuf->addr);\n+        }\n+      vpc = (*sc->argbuf.semantic.sem_full) (current_cpu, sc);\n+      if (! virtual_p)\n+        {\n+          /* FIXME: call x-after */\n+          if (PROFILE_MODEL_P (current_cpu)\n+              && ARGBUF_PROFILE_P (abuf))\n+            {\n+              int cycles;\n+\n+              cycles = (*idesc->timing->model_fn) (current_cpu, sc);\n+              @cpu@_model_insn_after (current_cpu, 1 /*last_p*/, cycles);\n+            }\n+          CGEN_TRACE_INSN_FINI (current_cpu, abuf, 1);\n+        }\n+    }\n+\n+  return vpc;\n+}\n+\n+EOF\n+\n+;;\n+\n+xinit)\n+\n+# Nothing needed.\n+\n+;;\n+\n+xextract-scache)\n+\n+cat <<EOF\n+{\n+\n+  UDI insn = GETIMEMUDI (current_cpu, vpc);\n+\n+  if (current_target_byte_order == BFD_ENDIAN_BIG)\n+    {\n+      /* eBPF instructions are little-endian, but GETIMEMUDI reads according\n+         to target byte order. Swap to little-endian. */\n+      insn = SWAP_8 (insn);\n+\n+      /* But, the imm32 and offset16 fields within instructions follow target\n+         byte order. Swap those fields back. */\n+      UHI off16 = (UHI) ((insn & 0x00000000ffff0000) >> 16);\n+      USI imm32 = (USI) ((insn & 0xffffffff00000000) >> 32);\n+      off16 = SWAP_2 (off16);\n+      imm32 = SWAP_4 (imm32);\n+\n+      insn = (((UDI) imm32) << 32) | (((UDI) off16) << 16) | (insn & 0xffff);\n+    }\n+\n+  extract (current_cpu, vpc, insn, sc, FAST_P);\n+\n+  //XXX  SEM_SKIP_COMPILE (current_cpu, sc, 1);\n+}\n+EOF\n+\n+;;\n+\n+xfull-exec-* | xfast-exec-*)\n+\n+# Inputs: current_cpu, vpc, sc, FAST_P\n+# Outputs: vpc\n+# vpc is the virtual program counter.\n+\n+cat <<EOF\n+   vpc = execute (current_cpu, sc, FAST_P);\n+EOF\n+\n+;;\n+\n+*)\n+  echo \"Invalid argument to mainloop.in: $1\" >&2\n+  exit 1\n+  ;;\n+\n+esac"
    },
    {
      "sha": "fbb122b36ef134ea7d2cdadd9187555d028a9866",
      "filename": "sim/bpf/sim-if.c",
      "status": "added",
      "additions": 214,
      "deletions": 0,
      "changes": 214,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sim-if.c?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,214 @@\n+/* Main simulator entry points specific to the eBPF.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"sim-main.h\"\n+#include \"sim-options.h\"\n+#include \"libiberty.h\"\n+#include \"bfd.h\"\n+\n+/* Globals.  */\n+\n+/* String with the name of the section containing the BPF program to\n+   run.  */\n+static char *bpf_program_section = NULL;\n+\n+extern uint64_t skb_data_offset;\n+\n+\f\n+/* Handle BPF-specific options.  */\n+\n+static SIM_RC bpf_option_handler (SIM_DESC, sim_cpu *, int, char *, int);\n+\n+typedef enum\n+{\n+ OPTION_BPF_SET_PROGRAM = OPTION_START,\n+ OPTION_BPF_LIST_PROGRAMS,\n+ OPTION_BPF_VERIFY_PROGRAM,\n+ OPTION_BPF_SKB_DATA_OFFSET,\n+} BPF_OPTION;\n+\n+static const OPTION bpf_options[] =\n+{\n+ { {\"bpf-set-program\", required_argument, NULL, OPTION_BPF_SET_PROGRAM},\n+   '\\0', \"SECTION_NAME\", \"Set the entry point\",\n+   bpf_option_handler },\n+ { {\"bpf-list-programs\", no_argument, NULL, OPTION_BPF_LIST_PROGRAMS},\n+   '\\0', \"\", \"List loaded bpf programs\",\n+   bpf_option_handler },\n+ { {\"bpf-verify-program\", required_argument, NULL, OPTION_BPF_VERIFY_PROGRAM},\n+   '\\0', \"PROGRAM\", \"Run the verifier on the given BPF program\",\n+   bpf_option_handler },\n+ { {\"skb-data-offset\", required_argument, NULL, OPTION_BPF_SKB_DATA_OFFSET},\n+   '\\0', \"OFFSET\", \"Configure offsetof(struct sk_buff, data)\",\n+   bpf_option_handler },\n+\n+ { {NULL, no_argument, NULL, 0}, '\\0', NULL, NULL, NULL, NULL }\n+};\n+\n+static SIM_RC\n+bpf_option_handler (SIM_DESC sd, sim_cpu *cpu ATTRIBUTE_UNUSED, int opt,\n+                    char *arg, int is_command ATTRIBUTE_UNUSED)\n+{\n+  switch ((BPF_OPTION) opt)\n+    {\n+    case OPTION_BPF_VERIFY_PROGRAM:\n+      /* XXX call the verifier. */\n+      sim_io_printf (sd, \"Verifying BPF program %s...\\n\", arg);\n+      break;\n+\n+    case OPTION_BPF_LIST_PROGRAMS:\n+      /* XXX list programs.  */\n+      sim_io_printf (sd, \"BPF programs available:\\n\");\n+      break;\n+\n+    case OPTION_BPF_SET_PROGRAM:\n+      /* XXX: check that the section exists and tell the user about a\n+         new start_address.  */\n+      bpf_program_section = xstrdup (arg);\n+      break;\n+\n+    case OPTION_BPF_SKB_DATA_OFFSET:\n+      skb_data_offset = strtoul (arg, NULL, 0);\n+      break;\n+\n+    default:\n+      sim_io_eprintf (sd, \"Unknown option `%s'\\n\", arg);\n+      return SIM_RC_FAIL;\n+    }\n+\n+  return SIM_RC_OK;\n+}\n+\n+/* Like sim_state_free, but free the cpu buffers as well.  */\n+\n+static void\n+bpf_free_state (SIM_DESC sd)\n+{\n+  if (STATE_MODULES (sd) != NULL)\n+    sim_module_uninstall (sd);\n+\n+  sim_cpu_free_all (sd);\n+  sim_state_free (sd);\n+}\n+\n+/* Create an instance of the simulator.  */\n+\n+SIM_DESC\n+sim_open (SIM_OPEN_KIND kind,\n+          host_callback *callback,\n+          struct bfd *abfd,\n+\t  char * const *argv)\n+{\n+  /* XXX Analyze the program, and collect per-function information\n+     like the kernel verifier does.  The implementation of the CALL\n+     instruction will need that information, to update %fp.  */\n+\n+  SIM_DESC sd = sim_state_alloc (kind, callback);\n+\n+  if (sim_cpu_alloc_all (sd, 1, cgen_cpu_max_extra_bytes ())\n+      != SIM_RC_OK)\n+    goto error;\n+\n+  if (sim_pre_argv_init (sd, argv[0]) != SIM_RC_OK)\n+    goto error;\n+\n+  /* Add the BPF-specific option list to the simulator.  */\n+  if (sim_add_option_table (sd, NULL, bpf_options) != SIM_RC_OK)\n+    {\n+      bpf_free_state (sd);\n+      return 0;\n+    }\n+\n+  if (sim_parse_args (sd, argv) != SIM_RC_OK)\n+    goto error;\n+\n+  if (sim_analyze_program (sd,\n+                           (STATE_PROG_ARGV (sd) != NULL\n+                            ? *STATE_PROG_ARGV (sd)\n+                            : NULL), abfd) != SIM_RC_OK)\n+    goto error;\n+\n+  if (sim_config (sd) != SIM_RC_OK)\n+    goto error;\n+\n+  if (sim_post_argv_init (sd) != SIM_RC_OK)\n+    goto error;\n+\n+  /* ... */\n+\n+  /* Initialize the CPU descriptors and the disassemble in the cpu\n+     descriptor table entries.  */\n+  {\n+    int i;\n+    CGEN_CPU_DESC cd = bpf_cgen_cpu_open_1 (STATE_ARCHITECTURE (sd)->printable_name,\n+                                            CGEN_ENDIAN_LITTLE);\n+\n+    /* We have one cpu per installed program! MAX_NR_PROCESSORS is an\n+       arbitrary upper limit.  XXX where is it defined?  */\n+    for (i = 0; i < MAX_NR_PROCESSORS; ++i)\n+      {\n+        SIM_CPU *cpu = STATE_CPU (sd, i);\n+\n+        CPU_CPU_DESC (cpu) = cd;\n+        CPU_DISASSEMBLER (cpu) = sim_cgen_disassemble_insn;\n+      }\n+\n+    bpf_cgen_init_dis (cd);\n+  }\n+\n+  /* Initialize various cgen things not done by common framework.\n+     Must be done after bpf_cgen_cpu_open.  */\n+  cgen_init (sd);\n+\n+  /* XXX do eBPF sim specific initializations.  */\n+\n+  return sd;\n+\n+ error:\n+      bpf_free_state (sd);\n+      return NULL;\n+}\n+\f\n+\n+SIM_RC\n+sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n+\t\t     char *const *argv, char *const *envp)\n+{\n+  SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  SIM_ADDR addr;\n+\n+  /* Determine the start address.\n+\n+     XXX acknowledge bpf_program_section.  If it is NULL, emit a\n+     warning explaining that we are using the ELF file start address,\n+     which often is not what is actually wanted.  */\n+  if (abfd != NULL)\n+    addr = bfd_get_start_address (abfd);\n+  else\n+    addr = 0;\n+\n+  sim_pc_set (current_cpu, addr);\n+\n+  if (STATE_PROG_ARGV (sd) != argv)\n+    {\n+      freeargv (STATE_PROG_ARGV (sd));\n+      STATE_PROG_ARGV (sd) = dupargv (argv);\n+    }\n+\n+  return SIM_RC_OK;\n+}"
    },
    {
      "sha": "fc1e69f6f39af3b33d8df386c851dfa741fd0a49",
      "filename": "sim/bpf/sim-main.h",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sim-main.h?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,51 @@\n+/* eBPF simulator main header\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef SIM_MAIN_H\n+#define SIM_MAIN_H\n+\n+#include \"sim-basics.h\"\n+#include \"cgen-types.h\"\n+#include \"bpf-desc.h\"\n+#include \"bpf-opc.h\"\n+#include \"arch.h\"\n+#include \"sim-base.h\"\n+#include \"cgen-sim.h\"\n+#include \"bpf-sim.h\"\n+\n+\n+struct _sim_cpu\n+{\n+  sim_cpu_base base;\n+  CGEN_CPU cgen_cpu;\n+\n+#if defined (WANT_CPU_BPFBF)\n+  BPFBF_CPU_DATA cpu_data;\n+#endif\n+};\n+\n+\f\n+\n+struct sim_state\n+{\n+  sim_cpu *cpu[MAX_NR_PROCESSORS];\n+  CGEN_STATE cgen_state;\n+  sim_state_base base;\n+};\n+\n+#endif /* ! SIM_MAIN_H */"
    },
    {
      "sha": "e7ac0c2838ba1b42fb79f17b005d8a09dabe929a",
      "filename": "sim/bpf/traps.c",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/traps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/bpf/traps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/traps.c?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,33 @@\n+/* Trap handlers for eBPF.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB, the GNU debugger.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#define WANT_CPU bpfbf\n+#define WANT_CPU_BPFBF\n+\n+#include \"sim-main.h\"\n+\n+SEM_PC\n+sim_engine_invalid_insn (SIM_CPU *current_cpu ATTRIBUTE_UNUSED,\n+                         IADDR cia ATTRIBUTE_UNUSED,\n+                         SEM_PC pc ATTRIBUTE_UNUSED)\n+{\n+  /* Can't just return 0 here: the return value is used to set vpc\n+     (see decdde-{le,be}.c)\n+     Returning 0 will cause an infinite loop! */\n+  abort();\n+}"
    },
    {
      "sha": "37a86f435c18f8ebaebe0f3f8f9ea17b0d420977",
      "filename": "sim/configure",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/configure?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -669,6 +669,7 @@ ac_subdirs_all='aarch64\n arm\n avr\n bfin\n+bpf\n cr16\n cris\n d10v\n@@ -3717,6 +3718,13 @@ subdirs=\"$subdirs aarch64\"\n   subdirs=\"$subdirs bfin\"\n \n \n+       ;;\n+   bpf-*-*)\n+\n+  sim_arch=bpf\n+  subdirs=\"$subdirs bpf\"\n+\n+\n        ;;\n    cr16*-*-*)\n "
    },
    {
      "sha": "c115c3c8ddc7d2ea14204b4a89d230ea013f12f1",
      "filename": "sim/configure.tgt",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/configure.tgt?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -26,6 +26,9 @@ case \"${target}\" in\n    bfin-*-*)\n        SIM_ARCH(bfin)\n        ;;\n+   bpf-*-*)\n+       SIM_ARCH(bpf)\n+       ;;\n    cr16*-*-*)\n        SIM_ARCH(cr16)\n        ;;"
    },
    {
      "sha": "f2df7346bc264c73fcee4728658abc0c1817e0d4",
      "filename": "sim/testsuite/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/ChangeLog?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -1,3 +1,20 @@\n+2020-08-04  David Faust  <david.faust@oracle.com>\n+\t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* configure: Regenerate.\n+\t* sim/bpf/allinsn.exp: New file.\n+\t* sim/bpf/alu.s: Likewise.\n+\t* sim/bpf/alu32.s: Likewise.\n+\t* sim/bpf/endbe.s: Likewise.\n+\t* sim/bpf/endle.s: Likewise.\n+\t* sim/bpf/jmp.s: Likewise.\n+\t* sim/bpf/jmp32.s: Likewise.\n+\t* sim/bpf/ldabs.s: Likewise.\n+\t* sim/bpf/mem.s: Likewise.\n+\t* sim/bpf/mov.s: Likewise.\n+\t* sim/bpf/testutils.inc: Likewise.\n+\t* sim/bpf/xadd.s: Likewise.\n+\n 2020-07-29  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* configure: Re-generate."
    },
    {
      "sha": "c3674c2fa076593f2b1c24e0d5953c0b62c9102c",
      "filename": "sim/testsuite/configure",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/configure?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -1875,6 +1875,9 @@ case \"${target}\" in\n    bfin-*-*)\n        sim_arch=bfin\n        ;;\n+   bpf-*-*)\n+       sim_arch=bpf\n+       ;;\n    cr16*-*-*)\n        sim_arch=cr16\n        ;;"
    },
    {
      "sha": "2cca77021afed94f9de5ae0c4d4cabfba566a609",
      "filename": "sim/testsuite/sim/bpf/allinsn.exp",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/allinsn.exp?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,26 @@\n+# eBPF simulator testsuite\n+\n+if [istarget bpf-unknown-none] {\n+    # all machines\n+    set all_machs \"bpf\"\n+\n+    global global_sim_options\n+    if ![info exists global_sim_options] {\n+\tset global_sim_options \"--memory-size=4Mb\"\n+    }\n+\n+    global global_ld_options\n+    if ![info exists global_ld_options] {\n+        set global_ld_options \"-Ttext=0x0\"\n+    }\n+\n+    foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.s]] {\n+\t# If we're only testing specific files and this isn't one of them,\n+\t# skip it.\n+\tif ![runtest_file_p $runtests $src] {\n+\t    continue\n+\t}\n+\n+\trun_sim_test $src $all_machs\n+    }\n+}"
    },
    {
      "sha": "6013ac7eb93e6da67fda21e23b341ec74856d4ac",
      "filename": "sim/testsuite/sim/bpf/alu.s",
      "status": "added",
      "additions": 109,
      "deletions": 0,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/alu.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/alu.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/alu.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,109 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; alu.s\n+;;; Tests for ALU64 BPF instructions in simulator\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    mov         %r1, 0\n+    mov         %r2, -1\n+\n+    ;; add\n+    add         %r1, 1\n+    add         %r2, -1\n+    add         %r1, %r2\n+    fail_ne     %r1, -1\n+\n+    ;; sub\n+    sub         %r1, %r1\n+    fail_ne     %r1, 0\n+    sub         %r1, 10\n+    sub         %r2, %r1\n+    fail_ne     %r2, 8\n+\n+    ;; mul\n+    mul         %r2, %r2        ; r2 = 64\n+    mul         %r2, 3          ; r2 = 192\n+    mov         %r1, -3\n+    mul         %r1, %r2        ; r1 = -576\n+    mul         %r2, 0\n+    fail_ne     %r1, -576\n+    fail_ne     %r2, 0\n+    mul         %r1, %r1\n+    mul         %r1, %r1\n+    fail_ne     %r1, 110075314176\n+\n+    ;; div\n+    div         %r2, %r1\n+    fail_ne     %r2, 0\n+    div         %r1, -10000\n+    fail_ne     %r1, -11007531\n+    div         %r1, %r1\n+    fail_ne     %r1, 1\n+\n+    ;; and\n+    lddw        %r1, 0xaaaaaaaa55555555\n+    and         %r1, 0x55aaaaaa         ; we still only have 32-bit imm.\n+    fail_ne     %r1, 0x0000000055000000\n+    lddw        %r2, 0x5555555a5aaaaaaa\n+    and         %r2, %r1\n+    fail_ne     %r2, 0x0000000050000000\n+\n+    ;; or\n+    or          %r2, 0xdeadbeef\n+    fail_ne     %r2, 0xffffffffdeadbeef ; 0xdeadbeef gets sign extended\n+    lddw        %r1, 0xdead00000000beef\n+    lddw        %r2, 0x0000123456780000\n+    or          %r1, %r2\n+    fail_ne     %r1, 0xdead12345678beef\n+\n+    ;; lsh\n+    mov         %r1, 0xdeadbeef\n+    lsh         %r1, 11\n+    fail_ne     %r1, 0xfffffef56df77800 ; because deadbeef gets sign ext.\n+    mov         %r2, 21\n+    lsh         %r1, %r2\n+    fail_ne     %r1, 0xdeadbeef00000000\n+\n+    ;; rsh\n+    rsh         %r1, 11\n+    fail_ne     %r1, 0x001bd5b7dde00000 ; 0xdeadbeef 00000000 >> 0xb\n+    rsh         %r1, %r2\n+    fail_ne     %r1, 0x00000000deadbeef\n+\n+    ;; arsh\n+    arsh        %r1, 8\n+    fail_ne     %r1, 0x0000000000deadbe\n+    lsh         %r1, 40                 ; r1 = 0xdead be00 0000 0000\n+    arsh        %r1, %r2                ; r1 arsh (r2 == 21)\n+    fail_ne     %r1, 0xfffffef56df00000\n+\n+    ;; mod\n+    mov         %r1, 1025\n+    mod         %r1, -16\n+    fail_ne     %r1, 1\n+    mov         %r1, -25\n+    mov         %r2, 5\n+    mod         %r1, %r2\n+    fail_ne     %r1, 0\n+\n+    ;; xor\n+    xor         %r1, %r2\n+    fail_ne     %r1, 5\n+    xor         %r1, 0x7eadbeef\n+    fail_ne     %r1, 0x7eadbeea\n+    xor         %r1, %r1\n+    fail_ne     %r1, 0\n+\n+    ;; neg\n+    neg         %r2\n+    fail_ne     %r2, -5\n+    mov         %r1, -1025\n+    neg         %r1\n+    fail_ne     %r1, 1025\n+\n+    pass"
    },
    {
      "sha": "fcd6699464f7abe4c222e23b840fd0bab4e33bba",
      "filename": "sim/testsuite/sim/bpf/alu32.s",
      "status": "added",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/alu32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/alu32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/alu32.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,99 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;; alu32.s\n+;; Tests for ALU(32) BPF instructions in simulator\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    mov32       %r1, 10         ; r1 = 10\n+    mov32       %r2, -5         ; r2 = -5\n+\n+    ;; add\n+    add32       %r1, 1          ; r1 += 1  (r1 = 11)\n+    add32       %r2, -1         ; r2 += -1 (r2 = -6)\n+    add32       %r1, %r2        ; r1 += r2 (r1 = 11 + -6 = 5)\n+    fail_ne32   %r1, 5\n+\n+    ;; sub\n+    sub32       %r1, 5          ; r1 -= 5 (r1 = 0)\n+    sub32       %r1, -5         ; r1 -= -5 (r1 = 5)\n+    sub32       %r1, %r2        ; r1 -= r2 (r1 = 5 - -6 = 11)\n+    fail_ne32   %r1, 11\n+\n+    ;; mul\n+    mul32       %r1, 2          ; r1 *= 2  (r1 = 22)\n+    mul32       %r1, -2         ; r1 *= -2 (r1 = -44)\n+    mul32       %r1, %r2        ; r1 *= r2 (r1 = -44 * -6 = 264)\n+    fail_ne32   %r1, 264\n+\n+    ;; div\n+    div32       %r1, %r2        ; r1 /= r2 (r1 = 264 / -6 = -44)\n+    div32       %r1, -2         ; r1 /= -2 (r1 = 22)\n+    div32       %r1, 2          ; r1 /= 2  (r1 = 11)\n+    fail_ne32   %r1, 11\n+\n+    ;; and (bitwise)\n+    mov32       %r1, 0xb        ; r1  = (0xb = 0b1011)\n+    mov32       %r2, 0x5        ; r2  = (0x5 = 0b0101)\n+    and32       %r1, 0xa        ; r1 &= (0xa = 0b1010) = (0b1010 = 0xa)\n+    fail_ne32   %r1, 0xa\n+    and32       %r1, %r2        ; r1 &= r2 = 0x0\n+    fail_ne32   %r1, 0x0\n+\n+    ;; or (bitwise)\n+    or32        %r1, 0xb\n+    or32        %r1, %r2\n+    fail_ne32   %r1, 0xf\n+\n+    ;; lsh (left shift)\n+    lsh32       %r1, 4          ; r1 <<= 4 (r1 = 0xf0)\n+    mov32       %r2, 24         ; r2 = 24\n+    lsh32       %r1, %r2\n+    fail_ne32   %r1, 0xf0000000\n+\n+    ;; rsh (right logical shift)\n+    rsh32       %r1, 2\n+    rsh32       %r1, %r2\n+    fail_ne32   %r1, 0x3c       ; (0xf000 0000 >> 26)\n+\n+    ;; arsh (right arithmetic shift)\n+    arsh32      %r1, 1\n+    or32        %r1, 0x80000000\n+    mov32       %r2, 3\n+    arsh32      %r1, %r2\n+    fail_ne     %r1, 0x00000000F0000003\n+                                ; Note: make sure r1 is NOT sign-extended\n+                                ; i.e. upper-32 bits should be untouched\n+\n+    ;; mod\n+    mov32       %r1, -25\n+    mov32       %r2, 4\n+    mod32       %r1, %r2\n+    fail_ne32   %r1, -1\n+    mov32       %r1, 25\n+    mod32       %r1, 5\n+    fail_ne32   %r1, 0\n+\n+    ;; xor\n+    xor32       %r1, %r2\n+    fail_ne32   %r1, 4\n+    xor32       %r1, 0xF000000F\n+    fail_ne     %r1, 0xF000000B ; Note: check for (bad) sign-extend\n+    xor32       %r1, %r1\n+    fail_ne     %r1, 0\n+\n+    ;; neg\n+    mov32       %r1, -1\n+    mov32       %r2, 0x7fffffff\n+    neg32       %r1\n+    neg32       %r2\n+    fail_ne32   %r1, 1\n+    fail_ne     %r2, 0x80000001 ; Note: check for (bad) sign-extend\n+    neg32       %r2\n+    fail_ne32   %r2, 0x7fffffff\n+\n+    pass"
    },
    {
      "sha": "2f662aec02cc708fd5e02f233794c084558efd72",
      "filename": "sim/testsuite/sim/bpf/endbe.s",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/endbe.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/endbe.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/endbe.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,46 @@\n+# mach: bpf\n+# as: --EB\n+# ld: --EB\n+# sim: -E big\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; endbe.s\n+;;; Tests for BPF endianness-conversion instructions in simulator\n+;;; running in BIG ENDIAN\n+;;;\n+;;; Both 'be' and 'le' ISAs have both endbe and endle instructions.\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    lddw        %r1, 0x12345678deadbeef\n+    endle       %r1, 64\n+    fail_ne     %r1, 0xefbeadde78563412\n+    endle       %r1, 64\n+    fail_ne     %r1, 0x12345678deadbeef\n+\n+    ;; `bitsize` < 64 will truncate\n+    endle       %r1, 32\n+    fail_ne     %r1, 0xefbeadde\n+    endle       %r1, 32\n+    fail_ne     %r1, 0xdeadbeef\n+\n+    endle       %r1, 16\n+    fail_ne     %r1, 0xefbe\n+    endle       %r1, 16\n+    fail_ne     %r1, 0xbeef\n+\n+    ;; endbe on be should be noop (except truncate)\n+    lddw        %r1, 0x12345678deadbeef\n+    endbe       %r1, 64\n+    fail_ne     %r1, 0x12345678deadbeef\n+\n+    endbe       %r1, 32\n+    fail_ne     %r1, 0xdeadbeef\n+\n+    endbe       %r1, 16\n+    fail_ne     %r1, 0xbeef\n+\n+    pass"
    },
    {
      "sha": "d8f5ceb977ee9a9e45c8368e7f6928ec2b633600",
      "filename": "sim/testsuite/sim/bpf/endle.s",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/endle.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/endle.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/endle.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,43 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; endle.s\n+;;; Tests for BPF endianness-conversion instructions in simulator\n+;;; running in LITTLE ENDIAN\n+;;;\n+;;; Both 'be' and 'le' ISAs have both endbe and endle instructions.\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    lddw        %r1, 0x12345678deadbeef\n+    endbe       %r1, 64\n+    fail_ne     %r1, 0xefbeadde78563412\n+    endbe       %r1, 64\n+    fail_ne     %r1, 0x12345678deadbeef\n+\n+    ;; `bitsize` < 64 will truncate\n+    endbe       %r1, 32\n+    fail_ne     %r1, 0xefbeadde\n+    endbe       %r1, 32\n+    fail_ne     %r1, 0xdeadbeef\n+\n+    endbe       %r1, 16\n+    fail_ne     %r1, 0xefbe\n+    endbe       %r1, 16\n+    fail_ne     %r1, 0xbeef\n+\n+    ;; endle on le should be noop (except truncate)\n+    lddw        %r1, 0x12345678deadbeef\n+    endle       %r1, 64\n+    fail_ne     %r1, 0x12345678deadbeef\n+\n+    endle       %r1, 32\n+    fail_ne     %r1, 0xdeadbeef\n+\n+    endle       %r1, 16\n+    fail_ne     %r1, 0xbeef\n+\n+    pass"
    },
    {
      "sha": "5ab5de005a75915dfc342e597d24c3c4ef8223d1",
      "filename": "sim/testsuite/sim/bpf/jmp.s",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/jmp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/jmp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/jmp.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,120 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; jmp.s\n+;;; Tests for eBPF JMP instructions in simulator\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    mov         %r1, 5\n+    mov         %r2, 2\n+    mov         %r3, 7\n+    mov         %r4, -1\n+\n+    ;; ja - jump absolute (unconditional)\n+    ja          2f\n+1:  fail\n+\n+2:  ;; jeq - jump eq\n+    jeq         %r1, 4, 1b      ; no\n+    jeq         %r1, %r2, 1b    ; no\n+    jeq         %r1, 5, 2f      ; yes\n+    fail\n+2:  jeq         %r1, %r1, 2f    ; yes\n+    fail\n+\n+2:  ;; jgt - jump (unsigned) greater-than\n+    jgt         %r1, 6, 1b      ; no\n+    jgt         %r1, -5, 1b     ; no - unsigned\n+    jgt         %r1, %r4, 1b    ; no - unsigned\n+    jgt         %r1, 4, 2f      ; yes\n+    fail\n+2:  jgt         %r1, %r2, 2f    ; yes\n+    fail\n+\n+2:  ;; jge - jump (unsigned) greater-than-or-equal-to\n+    jge         %r1, 6, 1b      ; no\n+    jge         %r1, 5, 2f      ; yes\n+    fail\n+2:  jge         %r1, %r3, 1b    ; no\n+    jge         %r1, -5, 1b     ; no - unsigned\n+    jge         %r1, %r2, 2f    ; yes\n+    fail\n+\n+2:  ;; jlt - jump (unsigned) less-than\n+    jlt         %r1, 5, 1b      ; no\n+    jlt         %r1, %r2, 1b    ; no\n+    jlt         %r4, %r1, 1b    ; no - unsigned\n+    jlt         %r1, 6, 2f      ; yes\n+    fail\n+2:\n+    jlt         %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:  ;; jle - jump (unsigned) less-than-or-equal-to\n+    jle         %r1, 4, 1b      ; no\n+    jle         %r1, %r2, 1b    ; no\n+    jle         %r4, %r1, 1b    ; no\n+    jle         %r1, 5, 2f      ; yes\n+    fail\n+2:  jle         %r1, %r1, 2f    ; yes\n+    fail\n+\n+2:  ;; jset - jump \"test\" (AND)\n+    jset        %r1, 2, 1b      ; no (5 & 2 = 0)\n+    jset        %r1, %r2, 1b    ; no (same)\n+    jset        %r1, 4, 2f      ; yes (5 & 4 != 0)\n+    fail\n+\n+2:  ;; jne  - jump not-equal-to\n+    jne         %r1, 5, 1b      ; no\n+    jne         %r1, %r1, 1b    ; no\n+    jne         %r1, 6, 2f      ; yes\n+    fail\n+2:  jne         %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jsgt - jump (signed) greater-than\n+    jsgt        %r1, %r3, 1b    ; no\n+    jsgt        %r1, %r1, 1b    ; no\n+    jsgt        %r1, 5, 1b      ; no\n+    jsgt        %r1, -4, 2f     ; yes\n+    fail\n+2:  jsgt        %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jsge - jump (signed) greater-than-or-equal-to\n+    jsge        %r1, %r3, 1b    ; no\n+    jsge        %r1, %r1, 2f    ; yes\n+    fail\n+2:  jsge        %r1, 7, 1b      ; no\n+    jsge        %r1, -4, 2f     ; yes\n+    fail\n+2:  jsge        %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jslt - jump (signed) less-than\n+    jslt        %r1, 5, 1b      ; no\n+    jslt        %r1, %r2, 1b    ; no\n+    jslt        %r4, %r1, 2f    ; yes\n+    fail\n+2:  jslt        %r1, 6, 2f      ; yes\n+    fail\n+2:  jslt        %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:  ;; jsle - jump (signed) less-than-or-equal-to\n+    jsle         %r1, 4, 1b      ; no\n+    jsle         %r1, %r2, 1b    ; no\n+    jsle         %r4, %r1, 2f    ; yes\n+    fail\n+2:  jsle         %r1, 5, 2f      ; yes\n+    fail\n+2:  jsle         %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:\n+    pass"
    },
    {
      "sha": "a6074cd4de3f23d0c2e23f88a22601c7cd168d37",
      "filename": "sim/testsuite/sim/bpf/jmp32.s",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/jmp32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/jmp32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/jmp32.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,120 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; jmp32.s\n+;;; Tests for eBPF JMP32 instructions in simulator\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    mov32       %r1, 5\n+    mov32       %r2, 2\n+    mov32       %r3, 7\n+    mov32       %r4, -1\n+\n+    ;; ja - jump absolute (unconditional)\n+    ja          2f\n+1:  fail\n+\n+2:  ;; jeq - jump eq\n+    jeq32       %r1, 4, 1b      ; no\n+    jeq32       %r1, %r2, 1b    ; no\n+    jeq32       %r1, 5, 2f      ; yes\n+    fail\n+2:  jeq32       %r1, %r1, 2f    ; yes\n+    fail\n+\n+2:  ;; jgt - jump (unsigned) greater-than\n+    jgt32       %r1, 6, 1b      ; no\n+    jgt32       %r1, -5, 1b     ; no - unsigned\n+    jgt32       %r1, %r4, 1b    ; no - unsigned\n+    jgt32       %r1, 4, 2f      ; yes\n+    fail\n+2:  jgt32       %r1, %r2, 2f    ; yes\n+    fail\n+\n+2:  ;; jge - jump (unsigned) greater-than-or-equal-to\n+    jge32       %r1, 6, 1b      ; no\n+    jge32       %r1, 5, 2f      ; yes\n+    fail\n+2:  jge32       %r1, %r3, 1b    ; no\n+    jge32       %r1, -5, 1b     ; no - unsigned\n+    jge32       %r1, %r2, 2f    ; yes\n+    fail\n+\n+2:  ;; jlt - jump (unsigned) less-than\n+    jlt32       %r1, 5, 1b      ; no\n+    jlt32       %r1, %r2, 1b    ; no\n+    jlt32       %r4, %r1, 1b    ; no - unsigned\n+    jlt32       %r1, 6, 2f      ; yes\n+    fail\n+2:\n+    jlt32       %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:  ;; jle - jump (unsigned) less-than-or-equal-to\n+    jle32       %r1, 4, 1b      ; no\n+    jle32       %r1, %r2, 1b    ; no\n+    jle32       %r4, %r1, 1b    ; no\n+    jle32       %r1, 5, 2f      ; yes\n+    fail\n+2:  jle32       %r1, %r1, 2f    ; yes\n+    fail\n+\n+2:  ;; jset - jump \"test\" (AND)\n+    jset32      %r1, 2, 1b      ; no (5 & 2 = 0)\n+    jset32      %r1, %r2, 1b    ; no (same)\n+    jset32      %r1, 4, 2f      ; yes (5 & 4 != 0)\n+    fail\n+\n+2:  ;; jne  - jump not-equal-to\n+    jne32       %r1, 5, 1b      ; no\n+    jne32       %r1, %r1, 1b    ; no\n+    jne32       %r1, 6, 2f      ; yes\n+    fail\n+2:  jne32       %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jsgt - jump (signed) greater-than\n+    jsgt32      %r1, %r3, 1b    ; no\n+    jsgt32      %r1, %r1, 1b    ; no\n+    jsgt32      %r1, 5, 1b      ; no\n+    jsgt32      %r1, -4, 2f     ; yes\n+    fail\n+2:  jsgt32      %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jsge - jump (signed) greater-than-or-equal-to\n+    jsge32      %r1, %r3, 1b    ; no\n+    jsge32      %r1, %r1, 2f    ; yes\n+    fail\n+2:  jsge32      %r1, 7, 1b      ; no\n+    jsge32      %r1, -4, 2f     ; yes\n+    fail\n+2:  jsge32      %r1, %r4, 2f    ; yes\n+    fail\n+\n+2:  ;; jslt - jump (signed) less-than\n+    jslt32      %r1, 5, 1b      ; no\n+    jslt32      %r1, %r2, 1b    ; no\n+    jslt32      %r4, %r1, 2f    ; yes\n+    fail\n+2:  jslt32      %r1, 6, 2f      ; yes\n+    fail\n+2:  jslt32      %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:  ;; jsle - jump (signed) less-than-or-equal-to\n+    jsle32       %r1, 4, 1b      ; no\n+    jsle32       %r1, %r2, 1b    ; no\n+    jsle32       %r4, %r1, 2f    ; yes\n+    fail\n+2:  jsle32       %r1, 5, 2f      ; yes\n+    fail\n+2:  jsle32       %r1, %r3, 2f    ; yes\n+    fail\n+\n+2:\n+    pass"
    },
    {
      "sha": "ae777f1cf547eb45b922ab9403112d3e3d3e858a",
      "filename": "sim/testsuite/sim/bpf/ldabs.s",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/ldabs.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/ldabs.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/ldabs.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,87 @@\n+# mach: bpf\n+# sim: --skb-data-offset=0x20\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; ldabs.s\n+;;; Tests for non-generic BPF load instructions in simulator.\n+;;; These instructions (ld{abs,ind}{b,h,w,dw}) are used to access\n+;;; kernel socket data from BPF programs for high performance filters.\n+;;;\n+;;; Register r6 is an implicit input holding a pointer to a struct sk_buff.\n+;;; Register r0 is an implicit output, holding the fetched data.\n+;;;\n+;;; e.g.\n+;;; ldabsw means:\n+;;; r0 = ntohl (*(u32 *) (((struct sk_buff *)r6)->data + imm32))\n+;;;\n+;;; ldindw means\n+;;; r0 = ntohl (*(u32 *) (((struct sk_buff *)r6)->data + src_reg + imm32))\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    ;; R6 holds a pointer to a struct sk_buff, which we pretend\n+    ;; exists at 0x1000\n+    mov         %r6, 0x1000\n+\n+    ;; We configure skb-data-offset=0x20\n+    ;; This specifies offsetof(struct sk_buff, data), where the field 'data'\n+    ;; is a pointer a data buffer, in this case at 0x2000\n+    stw         [%r6+0x20], 0x2000\n+\n+    ;; Write the value 0x7eadbeef into memory at 0x2004\n+    ;; i.e. offset 4 within the data buffer pointed to by\n+    ;; ((struct sk_buff *)r6)->data\n+    stw         [%r6+0x1004], 0xdeadbeef\n+\n+    ;; Now load data[4] into r0 using the ldabsw instruction\n+    ldabsw      0x4\n+\n+    ;; ...and compare to what we expect\n+    fail_ne32   %r0, 0xdeadbeef\n+\n+    ;; Repeat for a half-word (2-bytes)\n+    sth         [%r6+0x1008], 0x1234\n+    ldabsh      0x8\n+    fail_ne32   %r0, 0x1234\n+\n+    ;; Repeat for a single byte\n+    stb         [%r6+0x1010], 0x5a\n+    ldabsb      0x10\n+    fail_ne32   %r0, 0x5a\n+\n+    ;; Repeat for a double-word (8-byte)\n+    ;; (note: fail_ne macro uses r0, so copy to another r1 to compare)\n+    lddw        %r2, 0x1234deadbeef5678\n+    stxdw       [%r6+0x1018], %r2\n+    ldabsdw     0x18\n+    mov         %r1, %r0\n+    fail_ne     %r1, 0x1234deadbeef5678\n+\n+    ;; Now, we do the same for the indirect loads\n+    mov         %r7, 0x100\n+    stw         [%r6+0x1100], 0xfeedbeef\n+\n+    ldindw      %r7, 0x0\n+    fail_ne32   %r0, 0xfeedbeef\n+\n+    ;; half-word\n+    sth         [%r6+0x1104], 0x6789\n+    ldindh      %r7, 0x4\n+    fail_ne32   %r0, 0x6789\n+\n+    ;; byte\n+    stb         [%r6+0x1108], 0x5f\n+    ldindb      %r7, 0x8\n+    fail_ne32   %r0, 0x5f\n+\n+    ;; double-word\n+    lddw        %r2, 0xcafe12345678d00d\n+    stxdw       [%r6+0x1110], %r2\n+    ldinddw     %r7, 0x10\n+    mov         %r1, %r0\n+    fail_ne     %r1, 0xcafe12345678d00d\n+\n+    pass"
    },
    {
      "sha": "f9c6a193eab242d37f7421b9065f49b2db404120",
      "filename": "sim/testsuite/sim/bpf/mem.s",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/mem.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/mem.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/mem.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,56 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; mem.s\n+;;; Tests for BPF memory (ldx, stx, ..) instructions in simulator\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    lddw        %r1, 0x1234deadbeef5678\n+    mov         %r2, 0x1000\n+\n+    ;; basic store/load check\n+    stxb        [%r2+0], %r1\n+    stxh        [%r2+2], %r1\n+    stxw        [%r2+4], %r1\n+    stxdw       [%r2+8], %r1\n+\n+    stb         [%r2+16], 0x5a\n+    sth         [%r2+18], 0xcafe\n+    stw         [%r2+20], 0xbeefface\n+    stdw        [%r2+24], 0x7eadbeef\n+\n+    ldxb        %r1, [%r2+16]\n+    fail_ne     %r1, 0x5a\n+    ldxh        %r1, [%r2+18]\n+    fail_ne     %r1, 0xffffffffffffcafe\n+    ldxw        %r1, [%r2+20]\n+    fail_ne     %r1, 0xffffffffbeefface\n+    ldxdw       %r1, [%r2+24]\n+    fail_ne     %r1, 0x7eadbeef\n+\n+    ldxb        %r3, [%r2+0]\n+    fail_ne     %r3, 0x78\n+    ldxh        %r3, [%r2+2]\n+    fail_ne     %r3, 0x5678\n+    ldxw        %r3, [%r2+4]\n+    fail_ne     %r3, 0xffffffffbeef5678\n+    ldxdw       %r3, [%r2+8]\n+    fail_ne     %r3, 0x1234deadbeef5678\n+\n+    ldxw        %r4, [%r2+10]\n+    fail_ne     %r4, 0xffffffffdeadbeef\n+\n+    ;; negative offsets\n+    add         %r2, 16\n+    ldxh        %r5, [%r2+-14]\n+    fail_ne     %r5, 0x5678\n+    ldxw        %r5, [%r2+-12]\n+    fail_ne     %r5, 0xffffffffbeef5678\n+    ldxdw       %r5, [%r2+-8]\n+    fail_ne     %r5, 0x1234deadbeef5678\n+\n+    pass"
    },
    {
      "sha": "6665450468cb2d0a5bab9fa7282db0252ee5461d",
      "filename": "sim/testsuite/sim/bpf/mov.s",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/mov.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/mov.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/mov.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,54 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;; mov.s\n+;; Tests for mov and mov32 instructions\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    ;; some basic sanity checks\n+    mov32       %r1, 5\n+    fail_ne     %r1, 5\n+\n+    mov32       %r2, %r1\n+    fail_ne     %r2, 5\n+\n+    mov         %r2, %r1\n+    fail_ne     %r2, 5\n+\n+    mov         %r1, -666\n+    fail_ne     %r1, -666\n+\n+    ;; should NOT sign extend\n+    mov32       %r1, -1\n+    fail_ne     %r1, 0x00000000ffffffff\n+\n+    ;; should sign extend\n+    mov         %r2, -1\n+    fail_ne     %r2, 0xffffffffffffffff\n+\n+    mov         %r3, 0x80000000\n+\n+    ;; should NOT sign extend\n+    mov32       %r4, %r3\n+    fail_ne     %r4, 0x0000000080000000\n+\n+    ;; should sign extend\n+    mov         %r5, %r3\n+    fail_ne     %r5, 0xffffffff80000000\n+\n+    mov32       %r1, -2147483648\n+    mov32       %r1, %r1\n+    fail_ne32   %r1, -2147483648\n+\n+    ;; casting shenanigans\n+    mov         %r1, %r1\n+    fail_ne     %r1, +2147483648\n+    mov32       %r2, -1\n+    mov         %r2, %r2\n+    fail_ne     %r2, +4294967295\n+\n+    pass"
    },
    {
      "sha": "d3d6b17b5b61d6e1925ade6c480667ba47ee829b",
      "filename": "sim/testsuite/sim/bpf/testutils.inc",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/testutils.inc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/testutils.inc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/testutils.inc?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,38 @@\n+\n+    ;; Print \"pass\\n\" and 'exit 0'\n+    .macro      pass\n+    .data\n+mpass:\n+    .string \"pass\\n\"\n+    .text\n+_pass:\n+    mov         %r1, mpass      ; point to \"pass\\n\" string\n+    mov         %r2, 5          ; strlen mpass\n+    call        7               ; printk\n+    mov         %r0, 0          ;\n+    exit                        ; exit 0\n+    .endm\n+\n+;;; MACRO fail\n+;;; Exit with status 1\n+    .macro fail\n+    mov %r0, 1\n+    exit\n+    .endm\n+\n+;;; MACRO fail_ne32\n+;;; Exit with status 1 if \\reg32 != \\val\n+    .macro      fail_ne32 reg val\n+    jeq32       \\reg, \\val, 2\n+    mov         %r0, 1\n+    exit\n+    .endm\n+\n+;;; MACRO fail_ne\n+;;; Exit with status1 if \\reg ne \\val\n+    .macro      fail_ne reg val\n+    lddw        %r0, \\val\n+    jeq         \\reg, %r0, 2\n+    mov         %r0, 1\n+    exit\n+    .endm"
    },
    {
      "sha": "be6071424257be653f63197bc37746f7f5ac678b",
      "filename": "sim/testsuite/sim/bpf/xadd.s",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/xadd.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc/sim/testsuite/sim/bpf/xadd.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/xadd.s?ref=b26e2ae7d333d84a85daaa9ca699c8bae2bd05bc",
      "patch": "@@ -0,0 +1,44 @@\n+# mach: bpf\n+# output: pass\\nexit 0 (0x0)\\n\n+;;; xadd.s\n+;;; Tests for BPF atomic exchange-and-add instructions in simulator\n+;;;\n+;;; The xadd instructions (XADDW, XADDDW) operate on a memory location\n+;;; specified in $dst + offset16, atomically adding the value in $src.\n+;;;\n+;;; In the simulator, there isn't anything else happening. The atomic\n+;;; instructions are identical to a non-atomic load/add/store.\n+\n+    .include \"testutils.inc\"\n+\n+    .text\n+    .global main\n+    .type main, @function\n+main:\n+    mov         %r1, 0x1000\n+    mov         %r2, 5\n+\n+    ;; basic xadd w\n+    stw         [%r1+0], 10\n+    xaddw       [%r1+0], %r2\n+    ldxw        %r3, [%r1+0]\n+    fail_ne     %r3, 15\n+\n+    ;; basic xadd dw\n+    stdw        [%r1+8], 42\n+    xadddw      [%r1+8], %r2\n+    ldxdw       %r3, [%r1+8]\n+    fail_ne     %r3, 47\n+\n+    ;; xadd w negative value\n+    mov         %r4, -1\n+    xaddw       [%r1+0], %r4\n+    ldxw        %r3, [%r1+0]\n+    fail_ne     %r3, 14\n+\n+    ;; xadd dw negative val\n+    xadddw      [%r1+8], %r4\n+    ldxdw       %r3, [%r1+8]\n+    fail_ne     %r3, 46\n+\n+    pass"
    }
  ]
}