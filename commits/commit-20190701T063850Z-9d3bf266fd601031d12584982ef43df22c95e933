{
  "sha": "9d3bf266fd601031d12584982ef43df22c95e933",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWQzYmYyNjZmZDYwMTAzMWQxMjU4NDk4MmVmNDNkZjIyYzk1ZTkzMw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-01T06:38:50Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-01T06:38:50Z"
    },
    "message": "x86: drop Vec_Imm4\n\nIt is pretty wasteful to have a per-operand flag which is used in\nexactly 4 cases. It can be relatively easily replaced, and by doing so\nI've actually found some dead code to remove at the same time (there's\nno case of ImmExt set at the same time as Vec_Imm4).",
    "tree": {
      "sha": "819ccc648355ca9ef44015b02e20a81be262cc87",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/819ccc648355ca9ef44015b02e20a81be262cc87"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9d3bf266fd601031d12584982ef43df22c95e933",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d3bf266fd601031d12584982ef43df22c95e933",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9d3bf266fd601031d12584982ef43df22c95e933",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d3bf266fd601031d12584982ef43df22c95e933/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3949f432f4f7e4a776bd15e10dad56593abeb47",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3949f432f4f7e4a776bd15e10dad56593abeb47",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3949f432f4f7e4a776bd15e10dad56593abeb47"
    }
  ],
  "stats": {
    "total": 20012,
    "additions": 10002,
    "deletions": 10010
  },
  "files": [
    {
      "sha": "ac4a132235f23d67e02826ef4d8a9c514981756d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-01  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (vec_imm4): Delete.\n+\t(VEX_check_operands): Replace Vec_Imm4 check by CpuXOP with five\n+\toperands one.  Clear Imm<N> by different means.\n+\t(build_modrm_byte): Adjust comment.  Remove dead code.  Add and\n+\tadjust assertions.\n+\n 2019-07-01  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (output_insn): Adjust recognition of xFENCE"
    },
    {
      "sha": "596dde4da24e36784173f1aa68eefa36a930734c",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 11,
      "deletions": 25,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -1915,7 +1915,6 @@ static const i386_operand_type imm64 = OPERAND_TYPE_IMM64;\n static const i386_operand_type imm16_32 = OPERAND_TYPE_IMM16_32;\n static const i386_operand_type imm16_32s = OPERAND_TYPE_IMM16_32S;\n static const i386_operand_type imm16_32_32s = OPERAND_TYPE_IMM16_32_32S;\n-static const i386_operand_type vec_imm4 = OPERAND_TYPE_VEC_IMM4;\n \n enum operand_type\n {\n@@ -5649,8 +5648,8 @@ VEX_check_operands (const insn_template *t)\n       return 0;\n     }\n \n-  /* Only check VEX_Imm4, which must be the first operand.  */\n-  if (t->operand_types[0].bitfield.vec_imm4)\n+  /* Check the special Imm4 cases; must be the first operand.  */\n+  if (t->cpu_flags.bitfield.cpuxop && t->operands == 5)\n     {\n       if (i.op[0].imms->X_op != O_constant\n \t  || !fits_in_imm4 (i.op[0].imms->X_add_number))\n@@ -5659,8 +5658,8 @@ VEX_check_operands (const insn_template *t)\n \t  return 1;\n \t}\n \n-      /* Turn off Imm8 so that update_imm won't complain.  */\n-      i.types[0] = vec_imm4;\n+      /* Turn off Imm<N> so that update_imm won't complain.  */\n+      operand_type_set (&i.types[0], 0);\n     }\n \n   return 0;\n@@ -7098,7 +7097,7 @@ build_modrm_byte (void)\n \n       /* There are 2 kinds of instructions:\n \t 1. 5 operands: 4 register operands or 3 register operands\n-\t plus 1 memory operand plus one Vec_Imm4 operand, VexXDS, and\n+\t plus 1 memory operand plus one Imm4 operand, VexXDS, and\n \t VexW0 or VexW1.  The destination must be either XMM, YMM or\n \t ZMM register.\n \t 2. 4 operands: 4 register operands or 3 register operands\n@@ -7138,28 +7137,15 @@ build_modrm_byte (void)\n \t}\n       else\n \t{\n-\t  unsigned int imm_slot;\n+\t  gas_assert (i.imm_operands == 1);\n+\t  gas_assert (fits_in_imm4 (i.op[0].imms->X_add_number));\n+\t  gas_assert (!i.tm.opcode_modifier.immext);\n \n-\t  gas_assert (i.imm_operands == 1 && i.types[0].bitfield.vec_imm4);\n-\n-\t  if (i.tm.opcode_modifier.immext)\n-\t    {\n-\t      /* When ImmExt is set, the immediate byte is the last\n-\t\t operand.  */\n-\t      imm_slot = i.operands - 1;\n-\t      source--;\n-\t      reg_slot--;\n-\t    }\n-\t  else\n-\t    {\n-\t      imm_slot = 0;\n-\n-\t      /* Turn on Imm8 so that output_imm will generate it.  */\n-\t      i.types[imm_slot].bitfield.imm8 = 1;\n-\t    }\n+\t  /* Turn on Imm8 again so that output_imm will generate it.  */\n+\t  i.types[0].bitfield.imm8 = 1;\n \n \t  gas_assert (i.tm.operand_types[reg_slot].bitfield.regsimd);\n-\t  i.op[imm_slot].imms->X_add_number\n+\t  i.op[0].imms->X_add_number\n \t      |= register_number (i.op[reg_slot].regs) << 4;\n \t  gas_assert ((i.op[reg_slot].regs->reg_flags & RegVRex) == 0);\n \t}"
    },
    {
      "sha": "314ef7f9e4ee38a232553fda6deef98ba6fda467",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-01  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* opcodes/i386-gen.c (operand_type_init): Remove\n+\tOPERAND_TYPE_VEC_IMM4 entry.\n+\t(operand_types): Remove Vec_Imm4.\n+\t* opcodes/i386-opc.h (Vec_Imm4): Delete.\n+\t(union i386_operand_type): Remove vec_imm4.\n+\t* i386-opc.tbl (vpermil2pd, vpermil2ps): Remove Vec_Imm4.\n+\t* opcodes/i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-07-01  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.tbl (lfence, mfence, sfence, monitor, mwait, vmcall,"
    },
    {
      "sha": "6e457a8cc9770bce1e5af4293288b0a2bebc2ce0",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -486,8 +486,6 @@ static initializer operand_type_init[] =\n     \"Imm32|Imm32S|Imm64|Disp32\" },\n   { \"OPERAND_TYPE_IMM32_32S_64_DISP32_64\",\n     \"Imm32|Imm32S|Imm64|Disp32|Disp64\" },\n-  { \"OPERAND_TYPE_VEC_IMM4\",\n-    \"Vec_Imm4\" },\n   { \"OPERAND_TYPE_REGBND\",\n     \"RegBND\" },\n };\n@@ -721,7 +719,6 @@ static bitfield operand_types[] =\n   BITFIELD (Zmmword),\n   BITFIELD (Unspecified),\n   BITFIELD (Anysize),\n-  BITFIELD (Vec_Imm4),\n   BITFIELD (RegBND),\n #ifdef OTUnused\n   BITFIELD (OTUnused),"
    },
    {
      "sha": "7e507c117fd6eac4f88a1c9aae9e23b401fb7278",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 50,
      "deletions": 55,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -1350,249 +1350,244 @@\n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REG8 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_SREG2 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_SREG3 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ESSEG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0 } }\n-\n-#define OPERAND_TYPE_VEC_IMM4 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0 } }\n+      0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0 } }"
    },
    {
      "sha": "831ffbfda18a34275647fc85d86026a490dc1449",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -784,9 +784,6 @@ enum\n   /* Any memory size.  */\n   Anysize,\n \n-  /* Vector 4 bit immediate.  */\n-  Vec_Imm4,\n-\n   /* Bound register.  */\n   RegBND,\n \n@@ -846,7 +843,6 @@ typedef union i386_operand_type\n       unsigned int zmmword:1;\n       unsigned int unspecified:1;\n       unsigned int anysize:1;\n-      unsigned int vec_imm4:1;\n       unsigned int regbnd:1;\n #ifdef OTUnused\n       unsigned int unused:(OTNumOfBits - OTUnused);"
    },
    {
      "sha": "77f4efe73b5af9c5a0de4e6491d0709f12f1f397",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=9d3bf266fd601031d12584982ef43df22c95e933",
      "patch": "@@ -2587,10 +2587,10 @@ vpcomud,    4, 0xee, None, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf\n vpcomuq,    4, 0xef, None, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex, { Imm8, RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }\n vpcomuw,    4, 0xed, None, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex, { Imm8, RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }\n vpcomw,     4, 0xcd, None, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex, { Imm8, RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }\n-vpermil2pd, 5, 0x6649, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=1|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8|Vec_Imm4, RegXMM|RegYMM, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n-vpermil2pd, 5, 0x6649, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=2|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8|Vec_Imm4, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n-vpermil2ps, 5, 0x6648, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=1|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8|Vec_Imm4, RegXMM|RegYMM, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n-vpermil2ps, 5, 0x6648, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=2|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8|Vec_Imm4, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n+vpermil2pd, 5, 0x6649, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=1|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|RegYMM, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n+vpermil2pd, 5, 0x6649, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=2|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n+vpermil2ps, 5, 0x6648, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=1|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|RegYMM, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n+vpermil2ps, 5, 0x6648, None, 1, CpuXOP, Modrm|VexOpcode=2|VexVVVV=1|VexW=2|Vex|VexSources=2|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, Unspecified|BaseIndex|RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM, RegXMM|RegYMM }\n vpcomltb,   3, 0xcc, 0x0, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex|ImmExt, { RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }\n vpcomltd,   3, 0xce, 0x0, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex|ImmExt, { RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }\n vpcomltq,   3, 0xcf, 0x0, 1, CpuXOP, Modrm|VexOpcode=3|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Vex|ImmExt, { RegXMM|Unspecified|BaseIndex, RegXMM, RegXMM }"
    },
    {
      "sha": "7a5caa57617d5efc0c054114e5cf6670ebbce323",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 9919,
      "deletions": 9919,
      "changes": 19838,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d3bf266fd601031d12584982ef43df22c95e933/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=9d3bf266fd601031d12584982ef43df22c95e933"
    }
  ]
}