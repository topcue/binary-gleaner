{
  "sha": "fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
  "node_id": "C_kwDOANOeidoAKGZhYjY5MzliMDFkYTA2ZTFiNWY0MjNhOGM3ZjcyMTYwYjBhMWUzNWQ",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T05:03:50Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T07:09:46Z"
    },
    "message": "sim: syscall: fix argvlen & argv implementation\n\nNow that we have access to the argv & envp strings, finish implementing\nthese syscalls.  Delete unused variables, fix tbuf by incrementing the\npointer instead of setting to the length, and make sure we don't write\nmore data than the bufsize says is available.",
    "tree": {
      "sha": "7e47092831bee6c4413a3a382ce4cae6b19b36ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7e47092831bee6c4413a3a382ce4cae6b19b36ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fab6939b01da06e1b5f423a8c7f72160b0a1e35d/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 50,
    "deletions": 42
  },
  "files": [
    {
      "sha": "bad3b3b6214d494788198e77fe9369e420aaa673",
      "filename": "sim/common/syscall.c",
      "status": "modified",
      "additions": 50,
      "deletions": 42,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fab6939b01da06e1b5f423a8c7f72160b0a1e35d/sim/common/syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fab6939b01da06e1b5f423a8c7f72160b0a1e35d/sim/common/syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/syscall.c?ref=fab6939b01da06e1b5f423a8c7f72160b0a1e35d",
      "patch": "@@ -141,16 +141,14 @@ cb_syscall (host_callback *cb, CB_SYSCALL *sc)\n \n   switch (cb_target_to_host_syscall (cb, sc->func))\n     {\n-#if 0 /* FIXME: wip */\n     case CB_SYS_argvlen :\n       {\n \t/* Compute how much space is required to store the argv,envp\n \t   strings so that the program can allocate the space and then\n \t   call SYS_argv to fetch the values.  */\n-\tint addr_size = cb->addr_size;\n-\tint argc,envc,arglen,envlen;\n-\tconst char **argv = cb->init_argv;\n-\tconst char **envp = cb->init_envp;\n+\tint argc, envc, arglen, envlen;\n+\tchar **argv = cb->argv;\n+\tchar **envp = cb->envp;\n \n \targc = arglen = 0;\n \tif (argv)\n@@ -164,7 +162,7 @@ cb_syscall (host_callback *cb, CB_SYSCALL *sc)\n \t    for ( ; envp[envc]; ++envc)\n \t      envlen += strlen (envp[envc]) + 1;\n \t  }\n-\tresult = arglen + envlen;\n+\tresult = arglen + 1 + envlen + 1;\n \tbreak;\n       }\n \n@@ -174,63 +172,73 @@ cb_syscall (host_callback *cb, CB_SYSCALL *sc)\n \tTADDR tbuf = sc->arg1;\n \t/* Buffer size.  */\n \tint bufsize = sc->arg2;\n+\tint written = 0;\n \t/* Q is the target address of where all the strings go.  */\n \tTADDR q;\n-\tint word_size = cb->word_size;\n-\tint i,argc,envc,len;\n-\tconst char **argv = cb->init_argv;\n-\tconst char **envp = cb->init_envp;\n+\tint i, argc, envc, len, ret;\n+\tchar **argv = cb->argv;\n+\tchar **envp = cb->envp;\n+\n+\tresult = -1;\n \n \targc = 0;\n \tif (argv)\n \t  {\n \t    for ( ; argv[argc]; ++argc)\n \t      {\n-\t\tint len = strlen (argv[argc]);\n-\t\tint written = (*sc->write_mem) (cb, sc, tbuf, argv[argc], len + 1);\n-\t\tif (written != len)\n-\t\t  {\n-\t\t    result = -1;\n-\t\t    errcode = EINVAL;\n-\t\t    goto FinishSyscall;\n-\t\t  }\n-\t\ttbuf = len + 1;\n+\t\tlen = strlen (argv[argc]) + 1;\n+\t\tif (written + len > bufsize)\n+\t\t  goto efault;\n+\n+\t\tret = (*sc->write_mem) (cb, sc, tbuf + written, argv[argc],\n+\t\t\t\t\tlen);\n+\t\tif (ret != len)\n+\t\t  goto einval;\n+\n+\t\twritten += ret;\n \t      }\n \t  }\n-\tif ((*sc->write_mem) (cb, sc, tbuf, \"\", 1) != 1)\n-\t  {\n-\t    result = -1;\n-\t    errcode = EINVAL;\n-\t    goto FinishSyscall;\n-\t  }\n-\ttbuf++;\n+\t/* Double NUL bytes indicates end of strings.  */\n+\tif (written >= bufsize)\n+\t  goto efault;\n+\tif ((*sc->write_mem) (cb, sc, tbuf + written, \"\", 1) != 1)\n+\t  goto einval;\n+\t++written;\n+\n \tenvc = 0;\n \tif (envp)\n \t  {\n \t    for ( ; envp[envc]; ++envc)\n \t      {\n-\t\tint len = strlen (envp[envc]);\n-\t\tint written = (*sc->write_mem) (cb, sc, tbuf, envp[envc], len + 1);\n-\t\tif (written != len)\n-\t\t  {\n-\t\t    result = -1;\n-\t\t    errcode = EINVAL;\n-\t\t    goto FinishSyscall;\n-\t\t  }\n-\t\ttbuf = len + 1;\n+\t\tlen = strlen (envp[envc]) + 1;\n+\t\tif (written + len > bufsize)\n+\t\t  goto efault;\n+\n+\t\tret = (*sc->write_mem) (cb, sc, tbuf + written, envp[envc],\n+\t\t\t\t\tlen);\n+\t\tif (ret != len)\n+\t\t  goto einval;\n+\t\twritten += ret;\n \t      }\n \t  }\n-\tif ((*sc->write_mem) (cb, sc, tbuf, \"\", 1) != 1)\n-\t  {\n-\t    result = -1;\n-\t    errcode = EINVAL;\n-\t    goto FinishSyscall;\n-\t  }\n+\t/* Double NUL bytes indicates end of strings.  */\n+\tif (written >= bufsize)\n+\t  goto efault;\n+\tif ((*sc->write_mem) (cb, sc, tbuf + written, \"\", 1) != 1)\n+\t  goto einval;\n+\n \tresult = argc;\n \tsc->result2 = envc;\n \tbreak;\n+\n+ efault:\n+\terrcode = EFAULT;\n+\tgoto FinishSyscall;\n+\n+ einval:\n+\terrcode = EINVAL;\n+\tgoto FinishSyscall;\n       }\n-#endif /* wip */\n \n     case CB_SYS_exit :\n       /* Caller must catch and handle; see sim_syscall as an example.  */"
    }
  ]
}