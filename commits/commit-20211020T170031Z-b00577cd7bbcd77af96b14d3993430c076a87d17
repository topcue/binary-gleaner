{
  "sha": "b00577cd7bbcd77af96b14d3993430c076a87d17",
  "node_id": "C_kwDOANOeidoAKGIwMDU3N2NkN2JiY2Q3N2FmOTZiMTRkMzk5MzQzMGMwNzZhODdkMTc",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-10-02T22:40:00Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-10-20T17:00:31Z"
    },
    "message": "Use unique_xmalloc_ptr in solib_catchpoint\n\nThis changes struct solib_catchpoint to use a unique_xmalloc_ptr,\nremoving a bit of manual memory management.",
    "tree": {
      "sha": "3269188f4dd5403443aa15b1b828a53b682099a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3269188f4dd5403443aa15b1b828a53b682099a7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b00577cd7bbcd77af96b14d3993430c076a87d17",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b00577cd7bbcd77af96b14d3993430c076a87d17",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b00577cd7bbcd77af96b14d3993430c076a87d17",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b00577cd7bbcd77af96b14d3993430c076a87d17/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d81986879bbb05407e17e4788c52195897011c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d81986879bbb05407e17e4788c52195897011c0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d81986879bbb05407e17e4788c52195897011c0"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 7,
    "deletions": 12
  },
  "files": [
    {
      "sha": "7a9541836c9b3801fe53a4b518aca262597b1a4d",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b00577cd7bbcd77af96b14d3993430c076a87d17/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b00577cd7bbcd77af96b14d3993430c076a87d17/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=b00577cd7bbcd77af96b14d3993430c076a87d17",
      "patch": "@@ -7973,22 +7973,15 @@ static struct breakpoint_ops catch_vfork_breakpoint_ops;\n \n struct solib_catchpoint : public breakpoint\n {\n-  ~solib_catchpoint () override;\n-\n   /* True for \"catch load\", false for \"catch unload\".  */\n   bool is_load;\n \n   /* Regular expression to match, if any.  COMPILED is only valid when\n      REGEX is non-NULL.  */\n-  char *regex;\n+  gdb::unique_xmalloc_ptr<char> regex;\n   std::unique_ptr<compiled_regex> compiled;\n };\n \n-solib_catchpoint::~solib_catchpoint ()\n-{\n-  xfree (this->regex);\n-}\n-\n static int\n insert_catch_solib (struct bp_location *ignore)\n {\n@@ -8104,14 +8097,16 @@ print_one_catch_solib (struct breakpoint *b, struct bp_location **locs)\n   if (self->is_load)\n     {\n       if (self->regex)\n-\tmsg = string_printf (_(\"load of library matching %s\"), self->regex);\n+\tmsg = string_printf (_(\"load of library matching %s\"),\n+\t\t\t     self->regex.get ());\n       else\n \tmsg = _(\"load of library\");\n     }\n   else\n     {\n       if (self->regex)\n-\tmsg = string_printf (_(\"unload of library matching %s\"), self->regex);\n+\tmsg = string_printf (_(\"unload of library matching %s\"),\n+\t\t\t     self->regex.get ());\n       else\n \tmsg = _(\"unload of library\");\n     }\n@@ -8139,7 +8134,7 @@ print_recreate_catch_solib (struct breakpoint *b, struct ui_file *fp)\n \t\t      b->disposition == disp_del ? \"tcatch\" : \"catch\",\n \t\t      self->is_load ? \"load\" : \"unload\");\n   if (self->regex)\n-    fprintf_unfiltered (fp, \" %s\", self->regex);\n+    fprintf_unfiltered (fp, \" %s\", self->regex.get ());\n   fprintf_unfiltered (fp, \"\\n\");\n }\n \n@@ -8162,7 +8157,7 @@ add_solib_catchpoint (const char *arg, bool is_load, bool is_temp, bool enabled)\n     {\n       c->compiled.reset (new compiled_regex (arg, REG_NOSUB,\n \t\t\t\t\t     _(\"Invalid regexp\")));\n-      c->regex = xstrdup (arg);\n+      c->regex = make_unique_xstrdup (arg);\n     }\n \n   c->is_load = is_load;"
    }
  ]
}