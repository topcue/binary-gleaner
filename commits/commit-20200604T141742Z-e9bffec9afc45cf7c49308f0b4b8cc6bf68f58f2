{
  "sha": "e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTliZmZlYzlhZmM0NWNmN2M0OTMwOGYwYjRiOGNjNmJmNjhmNThmMg==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-06-04T14:15:53Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-06-04T14:17:42Z"
    },
    "message": "opcodes: discriminate endianness and insn-endianness in CGEN ports\n\nThe CGEN support code in opcodes accesses instruction contents using a\ncouple of functions defined in cgen-opc.c: cgen_get_insn_value and\ncgen_put_insn_value.  These functions use the \"instruction endianness\"\nin the CPU description to order the read/written bytes.\n\nThe process of writing an instruction to the object file is:\n\n  a) cgen_put_insn_value        ;; Writes out the opcodes.\n  b) ARCH_cgen_insert_operand\n       insert_normal\n         insert_1\n           cgen_put_insn_value  ;; Writes out the bytes of the\n                                ;; operand.\n\nLikewise, the process of reading an instruction from the object file\nis:\n\n  a) cgen_get_insn_value        ;; Reads the opcodes.\n  b) ARCH_cgen_extract_operand\n       extract_normal\n         extract_1\n           cgen_get_insn_value  ;; Reads in the bytes of the\n                                ;; operand.\n\nAs can be seen above, cgen_{get,put}_insn_value are used to both\nprocess the instruction opcodes (the constant fields conforming the\nbase instruction) and also the values of the instruction operands,\nsuch as immediates.\n\nThis is problematic for architectures in which the endianness of\ninstructions is different to the endianness of data.  An example is\nBPF, where instructions are always encoded big-endian but the data may\nbe either big or little.\n\nThis patch changes the cgen_{get,put}_insn_value functions in order to\nget an extra argument with the endianness to use, and adapts the\nexistin callers to these functions in order to provide cd->endian or\ncd->insn_endian, whatever appropriate.  Callers like extract_1 and\ninsert_1 pass cd->endian (since they are reading/writing operand\nvalues) while callers reading/writing the base instruction pass\ncd->insn_endian instead.\n\nA few little adjustments have been needed in some existing CGEN based\nports:\n* The BPF assembler uses cgen_put_insn_value.  It has been adapted to\n  pass the new endian argument.\n* The mep port has code in mep.opc that uses cgen_{get,put}_insn_value.\n  It has been adapted to pass the new endianargument.  Ditto for a\n  call in the assembler.\n\nTested with --enable-targets=all.\nRegested in all supported targets.\nNo regressions.\n\ninclude/ChangeLog:\n\n2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* opcode/cgen.h: Get an `endian' argument in both\n\tcgen_get_insn_value and cgen_put_insn_value.\n\nopcodes/ChangeLog:\n\n2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* cgen-opc.c (cgen_get_insn_value): Get an `endian' argument.\n\t(cgen_put_insn_value): Likewise.\n\t(cgen_lookup_insn): Pass endianness to cgen_{get,put}_insn_value.\n\t* cgen-dis.in (print_insn): Likewise.\n\t* cgen-ibld.in (insert_1): Likewise.\n\t(insert_1): Likewise.\n\t(insert_insn_normal): Likewise.\n\t(extract_1): Likewise.\n\t* bpf-dis.c: Regenerate.\n\t* bpf-ibld.c: Likewise.\n\t* bpf-ibld.c: Likewise.\n\t* cgen-dis.in: Likewise.\n\t* cgen-ibld.in: Likewise.\n\t* cgen-opc.c: Likewise.\n\t* epiphany-dis.c: Likewise.\n\t* epiphany-ibld.c: Likewise.\n\t* fr30-dis.c: Likewise.\n\t* fr30-ibld.c: Likewise.\n\t* frv-dis.c: Likewise.\n\t* frv-ibld.c: Likewise.\n\t* ip2k-dis.c: Likewise.\n\t* ip2k-ibld.c: Likewise.\n\t* iq2000-dis.c: Likewise.\n\t* iq2000-ibld.c: Likewise.\n\t* lm32-dis.c: Likewise.\n\t* lm32-ibld.c: Likewise.\n\t* m32c-dis.c: Likewise.\n\t* m32c-ibld.c: Likewise.\n\t* m32r-dis.c: Likewise.\n\t* m32r-ibld.c: Likewise.\n\t* mep-dis.c: Likewise.\n\t* mep-ibld.c: Likewise.\n\t* mt-dis.c: Likewise.\n\t* mt-ibld.c: Likewise.\n\t* or1k-dis.c: Likewise.\n\t* or1k-ibld.c: Likewise.\n\t* xc16x-dis.c: Likewise.\n\t* xc16x-ibld.c: Likewise.\n\t* xstormy16-dis.c: Likewise.\n\t* xstormy16-ibld.c: Likewise.\n\ngas/ChangeLog:\n\n2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* cgen.c (gas_cgen_finish_insn): Pass the endianness to\n\tcgen_put_insn_value.\n\t(gas_cgen_md_apply_fix): Likewise.\n\t(gas_cgen_md_apply_fix): Likewise.\n\t* config/tc-bpf.c (md_apply_fix): Pass data endianness to\n\tcgen_put_insn_value.\n\t* config/tc-mep.c (mep_check_ivc2_scheduling): Pass endianness to\n\tcgen_put_insn_value.\n\ncpu/ChangeLog:\n\n2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* mep.opc (print_slot_insn): Pass the insn endianness to\n\tcgen_get_insn_value.",
    "tree": {
      "sha": "9c098c794ab1b2a96fb18ccf298e23daef9f0b8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c098c794ab1b2a96fb18ccf298e23daef9f0b8d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3db6d07be467fe86f5b4185a8fc7bec49380c1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3db6d07be467fe86f5b4185a8fc7bec49380c1f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b3db6d07be467fe86f5b4185a8fc7bec49380c1f"
    }
  ],
  "stats": {
    "total": 284,
    "additions": 178,
    "deletions": 106
  },
  "files": [
    {
      "sha": "41ff18123423a9e1f0ca7413f03dd5df4ed2556b",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* mep.opc (print_slot_insn): Pass the insn endianness to\n+\tcgen_get_insn_value.\n+\n 2020-05-28  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \t    David Faust <david.faust@oracle.com>\n "
    },
    {
      "sha": "5a4c93dc3abed96daf209ba7de076ac746903782",
      "filename": "cpu/mep.opc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/cpu/mep.opc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/cpu/mep.opc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/mep.opc?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1271,7 +1271,7 @@ print_slot_insn (CGEN_CPU_DESC cd,\n   CGEN_INSN_INT insn_value;\n   CGEN_EXTRACT_INFO ex_info;\n \n-  insn_value = cgen_get_insn_value (cd, buf, 32);\n+  insn_value = cgen_get_insn_value (cd, buf, 32, cd->insn_endian);\n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call\n      read_insn, since the incoming buffer is already read (and possibly"
    },
    {
      "sha": "bb917ccc70e4da384d9832d5f2a258e8ee8e0d85",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1,3 +1,14 @@\n+2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* cgen.c (gas_cgen_finish_insn): Pass the endianness to\n+\tcgen_put_insn_value.\n+\t(gas_cgen_md_apply_fix): Likewise.\n+\t(gas_cgen_md_apply_fix): Likewise.\n+\t* config/tc-bpf.c (md_apply_fix): Pass data endianness to\n+\tcgen_put_insn_value.\n+\t* config/tc-mep.c (mep_check_ivc2_scheduling): Pass endianness to\n+\tcgen_put_insn_value.\n+\n 2020-06-04  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/config/default.exp: Remove global directive outside"
    },
    {
      "sha": "8d1867b731147811228185e86f1b802d34b35dca",
      "filename": "gas/cgen.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/cgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/cgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/cgen.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -621,7 +621,8 @@ gas_cgen_finish_insn (const CGEN_INSN *insn, CGEN_INSN_BYTES_PTR buf,\n   /* If we're recording insns as numbers (rather than a string of bytes),\n      target byte order handling is deferred until now.  */\n #if CGEN_INT_INSN_P\n-  cgen_put_insn_value (gas_cgen_cpu_desc, (unsigned char *) f, length, *buf);\n+  cgen_put_insn_value (gas_cgen_cpu_desc, (unsigned char *) f, length, *buf,\n+                       gas_cgen_cpu_desc->insn_endian);\n #else\n   memcpy (f, buf, byte_len);\n #endif\n@@ -906,13 +907,15 @@ gas_cgen_md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  {\n \t    CGEN_INSN_INT insn_value =\n \t      cgen_get_insn_value (cd, (unsigned char *) where,\n-\t\t\t\t   CGEN_INSN_BITSIZE (insn));\n+\t\t\t\t   CGEN_INSN_BITSIZE (insn),\n+                                   cd->insn_endian);\n \n \t    /* ??? 0 is passed for `pc'.  */\n \t    errmsg = CGEN_CPU_INSERT_OPERAND (cd) (cd, opindex, fields,\n \t\t\t\t\t\t   &insn_value, (bfd_vma) 0);\n \t    cgen_put_insn_value (cd, (unsigned char *) where,\n-\t\t\t\t CGEN_INSN_BITSIZE (insn), insn_value);\n+\t\t\t\t CGEN_INSN_BITSIZE (insn), insn_value,\n+                                 cd->insn_endian);\n \t  }\n #else\n \t  /* ??? 0 is passed for `pc'.  */"
    },
    {
      "sha": "7c7d22e477604ba907eb9b18059b2fcc79fd9a59",
      "filename": "gas/config/tc-bpf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/config/tc-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/config/tc-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-bpf.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -324,7 +324,8 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n              this code is executed only once per instruction.  */\n           where = fixP->fx_frag->fr_literal + fixP->fx_where;\n           cgen_put_insn_value (gas_cgen_cpu_desc, (unsigned char *) where + 1, 8,\n-                               target_big_endian ? 0x01 : 0x10);\n+                               target_big_endian ? 0x01 : 0x10,\n+                               gas_cgen_cpu_desc->endian);\n           /* Fallthrough.  */\n         case BPF_OPERAND_DISP16:\n           /* The PC-relative displacement fields in jump instructions"
    },
    {
      "sha": "6b52841fa9dacd799cb174a9fe021258007a95af",
      "filename": "gas/config/tc-mep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/config/tc-mep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/gas/config/tc-mep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mep.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1111,7 +1111,7 @@ mep_check_ivc2_scheduling (void)\n \n #if CGEN_INT_INSN_P\n       cgen_put_insn_value (gas_cgen_cpu_desc, (unsigned char *) temp, 32,\n-\t\t\t   m->buffer[0]);\n+\t\t\t   m->buffer[0], gas_cgen_cpu_desc->insn_endian);\n #else\n       memcpy (temp, m->buffer, byte_len);\n #endif"
    },
    {
      "sha": "e0bef674381d30cbf66006dd15ee2e548b3ab62f",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* opcode/cgen.h: Get an `endian' argument in both\n+\tcgen_get_insn_value and cgen_put_insn_value.\n+\n 2020-06-04  Jose E. Marchesi  <jemarch@gnu.org>\n \n \t* opcode/cgen.h (enum cgen_cpu_open_arg): New value"
    },
    {
      "sha": "cae279541fd4a04b69bf13c9497be41192e33f8f",
      "filename": "include/opcode/cgen.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/include/opcode/cgen.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/include/opcode/cgen.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/cgen.h?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1463,9 +1463,9 @@ extern const CGEN_INSN * cgen_lookup_get_insn_operands\n /* Cover fns to bfd_get/set.  */\n \n extern CGEN_INSN_INT cgen_get_insn_value\n-  (CGEN_CPU_DESC, unsigned char *, int);\n+  (CGEN_CPU_DESC, unsigned char *, int, int);\n extern void cgen_put_insn_value\n-  (CGEN_CPU_DESC, unsigned char *, int, CGEN_INSN_INT);\n+  (CGEN_CPU_DESC, unsigned char *, int, CGEN_INSN_INT, int);\n \n extern CGEN_INSN_INT cgen_get_base_insn_value\n   (CGEN_CPU_DESC, unsigned char *, int);"
    },
    {
      "sha": "39df27efd71c372608f460aa26d086ca127908d7",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1,3 +1,46 @@\n+2020-06-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* cgen-opc.c (cgen_get_insn_value): Get an `endian' argument.\n+\t(cgen_put_insn_value): Likewise.\n+\t(cgen_lookup_insn): Pass endianness to cgen_{get,put}_insn_value.\n+\t* cgen-dis.in (print_insn): Likewise.\n+\t* cgen-ibld.in (insert_1): Likewise.\n+\t(insert_1): Likewise.\n+\t(insert_insn_normal): Likewise.\n+\t(extract_1): Likewise.\n+\t* bpf-dis.c: Regenerate.\n+\t* bpf-ibld.c: Likewise.\n+\t* bpf-ibld.c: Likewise.\n+\t* cgen-dis.in: Likewise.\n+\t* cgen-ibld.in: Likewise.\n+\t* cgen-opc.c: Likewise.\n+\t* epiphany-dis.c: Likewise.\n+\t* epiphany-ibld.c: Likewise.\n+\t* fr30-dis.c: Likewise.\n+\t* fr30-ibld.c: Likewise.\n+\t* frv-dis.c: Likewise.\n+\t* frv-ibld.c: Likewise.\n+\t* ip2k-dis.c: Likewise.\n+\t* ip2k-ibld.c: Likewise.\n+\t* iq2000-dis.c: Likewise.\n+\t* iq2000-ibld.c: Likewise.\n+\t* lm32-dis.c: Likewise.\n+\t* lm32-ibld.c: Likewise.\n+\t* m32c-dis.c: Likewise.\n+\t* m32c-ibld.c: Likewise.\n+\t* m32r-dis.c: Likewise.\n+\t* m32r-ibld.c: Likewise.\n+\t* mep-dis.c: Likewise.\n+\t* mep-ibld.c: Likewise.\n+\t* mt-dis.c: Likewise.\n+\t* mt-ibld.c: Likewise.\n+\t* or1k-dis.c: Likewise.\n+\t* or1k-ibld.c: Likewise.\n+\t* xc16x-dis.c: Likewise.\n+\t* xc16x-ibld.c: Likewise.\n+\t* xstormy16-dis.c: Likewise.\n+\t* xstormy16-ibld.c: Likewise.\n+\n 2020-06-04  Jose E. Marchesi  <jemarch@gnu.org>\n \n \t* cgen-dis.in (cpu_desc_list): New field `insn_endian'."
    },
    {
      "sha": "4d01112d25f7fdfae61c82309de83ddf0e0b3b0b",
      "filename": "opcodes/bpf-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/bpf-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/bpf-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -376,7 +376,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "392dcebdd27ae9374643f73aaed5c0787adc5a2b",
      "filename": "opcodes/bpf-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/bpf-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/bpf-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "2d5feebdb82e2e3bf9cbc83f36ab7d522b7075df",
      "filename": "opcodes/cgen-dis.in",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-dis.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-dis.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cgen-dis.in?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -210,7 +210,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "ae9d20d6f45a2a2b5072217aa4c51e284e743a48",
      "filename": "opcodes/cgen-ibld.in",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-ibld.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-ibld.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cgen-ibld.in?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -87,7 +87,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -97,7 +97,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -268,8 +268,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -386,7 +386,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "18f9aae9712cb6517ddc034e7b9743632fd6d634",
      "filename": "opcodes/cgen-opc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/cgen-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cgen-opc.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -357,9 +357,10 @@ cgen_macro_insn_count (CGEN_CPU_DESC cd)\n /* Cover function to read and properly byteswap an insn value.  */\n \n CGEN_INSN_INT\n-cgen_get_insn_value (CGEN_CPU_DESC cd, unsigned char *buf, int length)\n+cgen_get_insn_value (CGEN_CPU_DESC cd, unsigned char *buf, int length,\n+                     int endian)\n {\n-  int big_p = (cd->insn_endian == CGEN_ENDIAN_BIG);\n+  int big_p = (endian == CGEN_ENDIAN_BIG);\n   int insn_chunk_bitsize = cd->insn_chunk_bitsize;\n   CGEN_INSN_INT value = 0;\n \n@@ -385,7 +386,7 @@ cgen_get_insn_value (CGEN_CPU_DESC cd, unsigned char *buf, int length)\n     }\n   else\n     {\n-      value = bfd_get_bits (buf, length, cd->insn_endian == CGEN_ENDIAN_BIG);\n+      value = bfd_get_bits (buf, length, endian == CGEN_ENDIAN_BIG);\n     }\n \n   return value;\n@@ -397,9 +398,10 @@ void\n cgen_put_insn_value (CGEN_CPU_DESC cd,\n \t\t     unsigned char *buf,\n \t\t     int length,\n-\t\t     CGEN_INSN_INT value)\n+\t\t     CGEN_INSN_INT value,\n+                     int endian)\n {\n-  int big_p = (cd->insn_endian == CGEN_ENDIAN_BIG);\n+  int big_p = (endian == CGEN_ENDIAN_BIG);\n   int insn_chunk_bitsize = cd->insn_chunk_bitsize;\n \n   if (insn_chunk_bitsize != 0 && insn_chunk_bitsize < length)\n@@ -459,15 +461,17 @@ cgen_lookup_insn (CGEN_CPU_DESC cd,\n     {\n       info = NULL;\n       insn_bytes_value = (unsigned char *) xmalloc (cd->max_insn_bitsize / 8);\n-      cgen_put_insn_value (cd, insn_bytes_value, length, insn_int_value);\n+      cgen_put_insn_value (cd, insn_bytes_value, length, insn_int_value,\n+                           cd->insn_endian);\n     }\n   else\n     {\n       info = &ex_info;\n       ex_info.dis_info = NULL;\n       ex_info.insn_bytes = insn_bytes_value;\n       ex_info.valid = -1;\n-      insn_int_value = cgen_get_insn_value (cd, insn_bytes_value, length);\n+      insn_int_value = cgen_get_insn_value (cd, insn_bytes_value, length,\n+                                            cd->insn_endian);\n     }\n \n   if (!insn)"
    },
    {
      "sha": "83f8d7969ee880506ff801f346d390c05b94db84",
      "filename": "opcodes/epiphany-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/epiphany-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/epiphany-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/epiphany-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -451,7 +451,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "4a974edccdac3bfe5ace1ffef6dd797680338b42",
      "filename": "opcodes/epiphany-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/epiphany-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/epiphany-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/epiphany-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "ed89926cef1dd1aa528b8b5b079b4b880aa4e2f5",
      "filename": "opcodes/fr30-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/fr30-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/fr30-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/fr30-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -472,7 +472,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "6816154ab277fd484b461fe69eb9873f7bdfff82",
      "filename": "opcodes/fr30-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/fr30-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/fr30-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/fr30-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "48b33596d00f147b21cd22c7b4c705c1a6df4b84",
      "filename": "opcodes/frv-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/frv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/frv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/frv-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -569,7 +569,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "43bccbac59136b42999535fc46fd8edd43331ebe",
      "filename": "opcodes/frv-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/frv-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/frv-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/frv-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "6cc08ba9d4fea13049af262a1012dd25d190da34",
      "filename": "opcodes/ip2k-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ip2k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ip2k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ip2k-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -461,7 +461,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "605d0bde04e50df510769c62f752217b4b3ff08e",
      "filename": "opcodes/ip2k-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ip2k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/ip2k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ip2k-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "fbe70c02b4bdcb4869399dc89e1295e6c501326a",
      "filename": "opcodes/iq2000-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/iq2000-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/iq2000-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/iq2000-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -362,7 +362,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "2a87c709aff71cd0badacd39a2cf7fe1029df9f2",
      "filename": "opcodes/iq2000-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/iq2000-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/iq2000-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/iq2000-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "e66ad06ba4c3959499e3cc031c4f5c86b3f3589a",
      "filename": "opcodes/lm32-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/lm32-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/lm32-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/lm32-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -320,7 +320,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "2b0efdaa3f73521b698d9eb48e45e78a2e0b11ac",
      "filename": "opcodes/lm32-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/lm32-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/lm32-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/lm32-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "19135fa0b20acac30e90fd35a57e6b411502d057",
      "filename": "opcodes/m32c-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32c-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32c-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32c-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -1064,7 +1064,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "6ad4da967da56711f3fa00bedc90f1c9f886219e",
      "filename": "opcodes/m32c-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32c-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32c-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32c-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "e15d3c3b94cca10ac2ea0f4b773f606e6cb6151a",
      "filename": "opcodes/m32r-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32r-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32r-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32r-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -452,7 +452,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "559f47135fae9b1347f170d4a91e7589db5b0a19",
      "filename": "opcodes/m32r-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32r-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/m32r-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32r-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "1292d830cbdeada6c5ba21887a9f4ed8e0d4c1ee",
      "filename": "opcodes/mep-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mep-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mep-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mep-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -467,7 +467,7 @@ print_slot_insn (CGEN_CPU_DESC cd,\n   CGEN_INSN_INT insn_value;\n   CGEN_EXTRACT_INFO ex_info;\n \n-  insn_value = cgen_get_insn_value (cd, buf, 32);\n+  insn_value = cgen_get_insn_value (cd, buf, 32, cd->insn_endian);\n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call\n      read_insn, since the incoming buffer is already read (and possibly\n@@ -1360,7 +1360,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "66a30e1b4565057b5dae2c649f0ea6bfb5a66fc2",
      "filename": "opcodes/mep-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mep-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mep-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mep-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "b0358e34e255d13fd8759f7d898b7fb123b4a303",
      "filename": "opcodes/mt-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mt-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mt-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mt-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -463,7 +463,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "683b76b2b482466646199e4a3b818bfe5823ca4d",
      "filename": "opcodes/mt-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mt-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/mt-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mt-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "87ff2064884e1155e112337686e019ce2c3ac0f4",
      "filename": "opcodes/or1k-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/or1k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/or1k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -347,7 +347,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "7b89260bf53fd3aa72543a80f09db8140fa79459",
      "filename": "opcodes/or1k-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/or1k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/or1k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "d4c24f033dfa095ab366297de455ac51ada23a32",
      "filename": "opcodes/xc16x-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xc16x-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xc16x-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xc16x-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -593,7 +593,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "b2802fecb6998a936b601952cdc392a30d85ac33",
      "filename": "opcodes/xc16x-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xc16x-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xc16x-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xc16x-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    },
    {
      "sha": "c2723167fa14f7dd7acd301b7c72334c6b8ad928",
      "filename": "opcodes/xstormy16-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xstormy16-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xstormy16-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xstormy16-dis.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -341,7 +341,7 @@ print_insn (CGEN_CPU_DESC cd,\n   /* Extract base part of instruction, just in case CGEN_DIS_* uses it. */\n   basesize = cd->base_insn_bitsize < buflen * 8 ?\n                                      cd->base_insn_bitsize : buflen * 8;\n-  insn_value = cgen_get_insn_value (cd, buf, basesize);\n+  insn_value = cgen_get_insn_value (cd, buf, basesize, cd->insn_endian);\n \n \n   /* Fill in ex_info fields like read_insn would.  Don't actually call"
    },
    {
      "sha": "eaffbeef90d7cdd652972a7d845782f100d4d542",
      "filename": "opcodes/xstormy16-ibld.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xstormy16-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2/opcodes/xstormy16-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xstormy16-ibld.c?ref=e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "patch": "@@ -88,7 +88,7 @@ insert_1 (CGEN_CPU_DESC cd,\n   unsigned long x,mask;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n   mask = (((1L << (length - 1)) - 1) << 1) | 1;\n@@ -98,7 +98,7 @@ insert_1 (CGEN_CPU_DESC cd,\n     shift = (word_length - (start + length));\n   x = (x & ~(mask << shift)) | ((value & mask) << shift);\n \n-  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x);\n+  cgen_put_insn_value (cd, bufp, word_length, (bfd_vma) x, cd->endian);\n }\n \n #endif /* ! CGEN_INT_INSN_P */\n@@ -269,8 +269,8 @@ insert_insn_normal (CGEN_CPU_DESC cd,\n #else\n \n   cgen_put_insn_value (cd, buffer, min ((unsigned) cd->base_insn_bitsize,\n-\t\t\t\t\t(unsigned) CGEN_FIELDS_BITSIZE (fields)),\n-\t\t       value);\n+                                        (unsigned) CGEN_FIELDS_BITSIZE (fields)),\n+\t\t       value, cd->insn_endian);\n \n #endif /* ! CGEN_INT_INSN_P */\n \n@@ -387,7 +387,7 @@ extract_1 (CGEN_CPU_DESC cd,\n   unsigned long x;\n   int shift;\n \n-  x = cgen_get_insn_value (cd, bufp, word_length);\n+  x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;"
    }
  ]
}