{
  "sha": "c9debfb97e052c32cf0308157cae529ce2059f48",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzlkZWJmYjk3ZTA1MmMzMmNmMDMwODE1N2NhZTUyOWNlMjA1OWY0OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-01T10:46:54Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-17T08:25:09Z"
    },
    "message": "gdb: Convert language la_get_symbol_name_matcher field to a method\n\nThis commit changes the language_data::la_get_symbol_name_matcher\nfunction pointer member variable into a member function of\nlanguage_defn.\n\nThere should be no user visible changes after this commit.\n\nBefore this commit access to the la_get_symbol_name_matcher function\npointer was through the get_symbol_name_matcher function, which looked\nsomething like this (is pseudo-code):\n\n  <return-type>\n  get_symbol_name_matcher (language_defn *lang, <other args>)\n  {\n    if (current_language == ada)\n      current_language->la_get_symbol_name_matcher (<other args>);\n    else\n      lang->la_get_symbol_name_matcher (<other args>);\n  }\n\nIn this commit I moved the get_symbol_name_matcher as a non-virtual\nfunction in the language_defn base class, I then add a new virtual\nmethod that is only used from within get_symbol_name_matcher, this can\nthen be overridden by specific languages as needed.  So we now have:\n\n  class language_defn\n  {\n    <return-type> get_symbol_name_matcher (<args>)\n    {\n      if (current_language == ada)\n        return current_language->get_symbol_name_matcher_inner (<args>);\n      else\n        return this->get_symbol_name_matcher_inner (<args>);\n    }\n\n    virtual <return-type> get_symbol_name_matcher_inner (<args>)\n    {\n        ....\n    }\n  }\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_get_symbol_name_matcher): Update header comment.\n\t(ada_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t(language_defn::get_symbol_name_matcher_inner): New member\n\tfunction.\n\t* c-lang.c (c_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t(cplus_language_data): Likewise.\n\t(cplus_language::get_symbol_name_matcher_inner): New member\n\tfunction.\n\t(asm_language_data): Delete la_get_symbol_name_matcher initializer.\n\t(minimal_language_data): Likewise.\n\t* cp-support.h (cp_get_symbol_name_matcher): Update header comment.\n\t* d-lang.c (d_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t* dictionary.c (iter_match_first_hashed): Update call to\n\tget_symbol_name_matcher.\n\t(iter_match_next_hashed): Likewise.\n\t(iter_match_next_linear): Likewise.\n\t* dwarf2/read.c (dw2_expand_symtabs_matching_symbol): Likewise.\n\t* f-lang.c (f_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t(f_language::get_symbol_name_matcher_inner): New member function.\n\t* go-lang.c (go_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t* language.c (default_symbol_name_matcher): Update header comment,\n\tmake static.\n\t(language_defn::get_symbol_name_matcher): New definition.\n\t(language_defn::get_symbol_name_matcher_inner): Likewise.\n\t(get_symbol_name_matcher): Delete.\n\t(unknown_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Delete la_get_symbol_name_matcher\n\tfield.\n\t(language_defn::get_symbol_name_matcher): New member function.\n\t(language_defn::get_symbol_name_matcher_inner): Likewise.\n\t(default_symbol_name_matcher): Delete declaration.\n\t* linespec.c (find_methods): Update call to\n\tget_symbol_name_matcher.\n\t* m2-lang.c (m2_language_data): Delete la_get_symbol_name_matcher\n\tinitializer.\n\t* minsyms.c (lookup_minimal_symbol): Update call to\n\tget_symbol_name_matcher.\n\t(iterate_over_minimal_symbols): Likewise.\n\t* objc-lang.c (objc_language_data): Delete\n\tla_get_symbol_name_matcher initializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t* psymtab.c (psymbol_name_matches): Update call to\n\tget_symbol_name_matcher.\n\t* rust-lang.c (rust_language_data): Delete\n\tla_get_symbol_name_matcher initializer.\n\t* symtab.c (symbol_matches_search_name): Update call to\n\tget_symbol_name_matcher.\n\t(compare_symbol_name): Likewise.",
    "tree": {
      "sha": "b1aa4df0a0b049c766e6b29eac377655ed77adbd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b1aa4df0a0b049c766e6b29eac377655ed77adbd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9debfb97e052c32cf0308157cae529ce2059f48",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9debfb97e052c32cf0308157cae529ce2059f48",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9debfb97e052c32cf0308157cae529ce2059f48",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9debfb97e052c32cf0308157cae529ce2059f48/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a49ad8c522a1ce83645d477bf6ced574c3bf651",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a49ad8c522a1ce83645d477bf6ced574c3bf651",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a49ad8c522a1ce83645d477bf6ced574c3bf651"
    }
  ],
  "stats": {
    "total": 220,
    "additions": 151,
    "deletions": 69
  },
  "files": [
    {
      "sha": "0cb660fa812d09de33d2ef317322a9afd52cf787",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -1,3 +1,62 @@\n+2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_get_symbol_name_matcher): Update header comment.\n+\t(ada_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t(language_defn::get_symbol_name_matcher_inner): New member\n+\tfunction.\n+\t* c-lang.c (c_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t(cplus_language_data): Likewise.\n+\t(cplus_language::get_symbol_name_matcher_inner): New member\n+\tfunction.\n+\t(asm_language_data): Delete la_get_symbol_name_matcher initializer.\n+\t(minimal_language_data): Likewise.\n+\t* cp-support.h (cp_get_symbol_name_matcher): Update header comment.\n+\t* d-lang.c (d_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t* dictionary.c (iter_match_first_hashed): Update call to\n+\tget_symbol_name_matcher.\n+\t(iter_match_next_hashed): Likewise.\n+\t(iter_match_next_linear): Likewise.\n+\t* dwarf2/read.c (dw2_expand_symtabs_matching_symbol): Likewise.\n+\t* f-lang.c (f_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t(f_language::get_symbol_name_matcher_inner): New member function.\n+\t* go-lang.c (go_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t* language.c (default_symbol_name_matcher): Update header comment,\n+\tmake static.\n+\t(language_defn::get_symbol_name_matcher): New definition.\n+\t(language_defn::get_symbol_name_matcher_inner): Likewise.\n+\t(get_symbol_name_matcher): Delete.\n+\t(unknown_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Delete la_get_symbol_name_matcher\n+\tfield.\n+\t(language_defn::get_symbol_name_matcher): New member function.\n+\t(language_defn::get_symbol_name_matcher_inner): Likewise.\n+\t(default_symbol_name_matcher): Delete declaration.\n+\t* linespec.c (find_methods): Update call to\n+\tget_symbol_name_matcher.\n+\t* m2-lang.c (m2_language_data): Delete la_get_symbol_name_matcher\n+\tinitializer.\n+\t* minsyms.c (lookup_minimal_symbol): Update call to\n+\tget_symbol_name_matcher.\n+\t(iterate_over_minimal_symbols): Likewise.\n+\t* objc-lang.c (objc_language_data): Delete\n+\tla_get_symbol_name_matcher initializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t* psymtab.c (psymbol_name_matches): Update call to\n+\tget_symbol_name_matcher.\n+\t* rust-lang.c (rust_language_data): Delete\n+\tla_get_symbol_name_matcher initializer.\n+\t* symtab.c (symbol_matches_search_name): Update call to\n+\tget_symbol_name_matcher.\n+\t(compare_symbol_name): Likewise.\n+\n 2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_compute_program"
    },
    {
      "sha": "c91597e6406607ac45d3ec40fd3ef4c57d2b05fa",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -13862,7 +13862,7 @@ literal_symbol_name_matcher (const char *symbol_search_name,\n     return false;\n }\n \n-/* Implement the \"la_get_symbol_name_matcher\" language_defn method for\n+/* Implement the \"get_symbol_name_matcher\" language_defn method for\n    Ada.  */\n \n static symbol_name_matcher_ftype *\n@@ -13920,7 +13920,6 @@ extern const struct language_data ada_language_data =\n   ada_get_gdb_completer_word_break_characters,\n   ada_collect_symbol_completion_matches,\n   ada_watch_location_expression,\n-  ada_get_symbol_name_matcher,\t/* la_get_symbol_name_matcher */\n   &ada_varobj_ops,\n   ada_is_string_type,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -14105,6 +14104,15 @@ class ada_language : public language_defn\n   {\n     ada_print_type (type, varstring, stream, show, level, flags);\n   }\n+\n+protected:\n+  /* See language.h.  */\n+\n+  symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const override\n+  {\n+    return ada_get_symbol_name_matcher (lookup_name);\n+  }\n };\n \n /* Single instance of the Ada language class.  */"
    },
    {
      "sha": "8edab0779e81fb65c7ed27c81510fb02d0f3b627",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -917,7 +917,6 @@ extern const struct language_data c_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &c_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1032,7 +1031,6 @@ extern const struct language_data cplus_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  cp_get_symbol_name_matcher,\n   &cplus_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1184,6 +1182,16 @@ class cplus_language : public language_defn\n   {\n     return cp_class_name_from_physname (physname);\n   }\n+\n+protected:\n+\n+  /* See language.h.  */\n+\n+  symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const override\n+  {\n+    return cp_get_symbol_name_matcher (lookup_name);\n+  }\n };\n \n /* The single instance of the C++ language class.  */\n@@ -1225,7 +1233,6 @@ extern const struct language_data asm_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1295,7 +1302,6 @@ extern const struct language_data minimal_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "d031ad9a096b3c9e588002d4fc34ae8263224d79",
      "filename": "gdb/cp-support.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/cp-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/cp-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.h?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -127,8 +127,7 @@ extern struct type *cp_lookup_rtti_type (const char *name,\n    \"function\" or \"bar::function\" in all namespaces is possible.  */\n extern unsigned int cp_search_name_hash (const char *search_name);\n \n-/* Implement the \"la_get_symbol_name_matcher\" language_defn method for\n-   C++.  */\n+/* Implement the \"get_symbol_name_matcher\" language_defn method for C++.  */\n extern symbol_name_matcher_ftype *cp_get_symbol_name_matcher\n   (const lookup_name_info &lookup_name);\n "
    },
    {
      "sha": "4842d4b9d6923e77703c479a4494e89da7c9d1cb",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -160,7 +160,6 @@ extern const struct language_data d_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "c94a49ee3737467e60275980eaa671ee7713b30a",
      "filename": "gdb/dictionary.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/dictionary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/dictionary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dictionary.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -584,7 +584,7 @@ iter_match_first_hashed (const struct dictionary *dict,\n   unsigned int hash_index = (name.search_name_hash (lang->la_language)\n \t\t\t     % DICT_HASHED_NBUCKETS (dict));\n   symbol_name_matcher_ftype *matches_name\n-    = get_symbol_name_matcher (lang, name);\n+    = lang->get_symbol_name_matcher (name);\n   struct symbol *sym;\n \n   DICT_ITERATOR_DICT (iterator) = dict;\n@@ -612,7 +612,7 @@ iter_match_next_hashed (const lookup_name_info &name,\n {\n   const language_defn *lang = DICT_LANGUAGE (DICT_ITERATOR_DICT (iterator));\n   symbol_name_matcher_ftype *matches_name\n-    = get_symbol_name_matcher (lang, name);\n+    = lang->get_symbol_name_matcher (name);\n   struct symbol *next;\n \n   for (next = DICT_ITERATOR_CURRENT (iterator)->hash_next;\n@@ -828,7 +828,7 @@ iter_match_next_linear (const lookup_name_info &name,\n   const struct dictionary *dict = DICT_ITERATOR_DICT (iterator);\n   const language_defn *lang = DICT_LANGUAGE (dict);\n   symbol_name_matcher_ftype *matches_name\n-    = get_symbol_name_matcher (lang, name);\n+    = lang->get_symbol_name_matcher (name);\n \n   int i, nsyms = DICT_LINEAR_NSYMS (dict);\n   struct symbol *sym, *retval = NULL;"
    },
    {
      "sha": "34915be8da7abb9f74998a4c6ad03a9a3c6ab52f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -4097,7 +4097,7 @@ dw2_expand_symtabs_matching_symbol\n \n       const language_defn *lang = language_def (lang_e);\n       symbol_name_matcher_ftype *name_matcher\n-\t= get_symbol_name_matcher (lang, lookup_name_without_params);\n+\t= lang->get_symbol_name_matcher (lookup_name_without_params);\n \n       name_and_matcher key {\n          name_matcher,"
    },
    {
      "sha": "42e6c988f3d96d3fd79f8ddfe1ab6a6dba8c0ec6",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -620,7 +620,6 @@ extern const struct language_data f_language_data =\n   f_word_break_characters,\n   f_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  cp_get_symbol_name_matcher,\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   f_is_string_type_p,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -699,6 +698,16 @@ class f_language : public language_defn\n   {\n     f_print_type (type, varstring, stream, show, level, flags);\n   }\n+\n+protected:\n+\n+  /* See language.h.  */\n+\n+  symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const override\n+  {\n+    return cp_get_symbol_name_matcher (lookup_name);\n+  }\n };\n \n /* Single instance of the Fortran language class.  */"
    },
    {
      "sha": "661cabbe54cd0adb88cc0b26b40857fea03e63eb",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -545,7 +545,6 @@ extern const struct language_data go_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   go_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "363481bc9d50feadb1ecd6714a1a3f1fecbd7f90",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 28,
      "deletions": 22,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -622,9 +622,10 @@ language_defn::print_array_index (struct type *index_type, LONGEST index,\n   fprintf_filtered (stream, \"] = \");\n }\n \n-/* See language.h.  */\n+/* The default implementation of the get_symbol_name_matcher_inner method\n+   from the language_defn class.  Matches with strncmp_iw.  */\n \n-bool\n+static bool\n default_symbol_name_matcher (const char *symbol_search_name,\n \t\t\t     const lookup_name_info &lookup_name,\n \t\t\t     completion_match_result *comp_match_res)\n@@ -649,6 +650,31 @@ default_symbol_name_matcher (const char *symbol_search_name,\n \n /* See language.h.  */\n \n+symbol_name_matcher_ftype *\n+language_defn::get_symbol_name_matcher\n+\t(const lookup_name_info &lookup_name) const\n+{\n+  /* If currently in Ada mode, and the lookup name is wrapped in\n+     '<...>', hijack all symbol name comparisons using the Ada\n+     matcher, which handles the verbatim matching.  */\n+  if (current_language->la_language == language_ada\n+      && lookup_name.ada ().verbatim_p ())\n+    return current_language->get_symbol_name_matcher_inner (lookup_name);\n+\n+  return this->get_symbol_name_matcher_inner (lookup_name);\n+}\n+\n+/* See language.h.  */\n+\n+symbol_name_matcher_ftype *\n+language_defn::get_symbol_name_matcher_inner\n+\t(const lookup_name_info &lookup_name) const\n+{\n+  return default_symbol_name_matcher;\n+}\n+\n+/* See language.h.  */\n+\n bool\n default_is_string_type_p (struct type *type)\n {\n@@ -661,24 +687,6 @@ default_is_string_type_p (struct type *type)\n   return (type->code ()  == TYPE_CODE_STRING);\n }\n \n-/* See language.h.  */\n-\n-symbol_name_matcher_ftype *\n-get_symbol_name_matcher (const language_defn *lang,\n-\t\t\t const lookup_name_info &lookup_name)\n-{\n-  /* If currently in Ada mode, and the lookup name is wrapped in\n-     '<...>', hijack all symbol name comparisons using the Ada\n-     matcher, which handles the verbatim matching.  */\n-  if (current_language->la_language == language_ada\n-      && lookup_name.ada ().verbatim_p ())\n-    return current_language->la_get_symbol_name_matcher (lookup_name);\n-\n-  if (lang->la_get_symbol_name_matcher != nullptr)\n-    return lang->la_get_symbol_name_matcher (lookup_name);\n-  return default_symbol_name_matcher;\n-}\n-\n /* Define the language that is no language.  */\n \n static int\n@@ -774,7 +782,6 @@ extern const struct language_data unknown_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -848,7 +855,6 @@ extern const struct language_data auto_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "7e5837fdef37a908c93fb0a015031bf08f0b9f4c",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 22,
      "deletions": 20,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -338,19 +338,6 @@ struct language_data\n     gdb::unique_xmalloc_ptr<char> (*la_watch_location_expression)\n          (struct type *type, CORE_ADDR addr);\n \n-    /* Return a pointer to the function that should be used to match a\n-       symbol name against LOOKUP_NAME, according to this language's\n-       rules.  The matching algorithm depends on LOOKUP_NAME.  For\n-       example, on Ada, the matching algorithm depends on the symbol\n-       name (wild/full/verbatim matching), and on whether we're doing\n-       a normal lookup or a completion match lookup.\n-\n-       This field may be NULL, in which case\n-       default_symbol_name_matcher is used to perform the\n-       matching.  */\n-    symbol_name_matcher_ftype *(*la_get_symbol_name_matcher)\n-      (const lookup_name_info &);\n-\n     /* Various operations on varobj.  */\n     const struct lang_varobj_ops *la_varobj_ops;\n \n@@ -443,6 +430,20 @@ struct language_defn : language_data\n     return ::iterate_over_symbols (block, name, domain, callback);\n   }\n \n+  /* Return a pointer to the function that should be used to match a\n+     symbol name against LOOKUP_NAME, according to this language's\n+     rules.  The matching algorithm depends on LOOKUP_NAME.  For\n+     example, on Ada, the matching algorithm depends on the symbol\n+     name (wild/full/verbatim matching), and on whether we're doing\n+     a normal lookup or a completion match lookup.\n+\n+     As Ada wants to capture symbol matching for all languages in some\n+     cases, then this method is a non-overridable interface.  Languages\n+     should override GET_SYMBOL_NAME_MATCHER_INNER if they need to.  */\n+\n+  symbol_name_matcher_ftype *get_symbol_name_matcher\n+\t(const lookup_name_info &lookup_name) const;\n+\n   /* If this language allows compilation from the gdb command line, then\n      this method will return an instance of struct gcc_context appropriate\n      to the language.  If compilation for this language is generally\n@@ -530,6 +531,14 @@ struct language_defn : language_data\n \n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n+\n+protected:\n+\n+  /* This is the overridable part of the GET_SYMBOL_NAME_MATCHER method.\n+     See that method for a description of the arguments.  */\n+\n+  virtual symbol_name_matcher_ftype *get_symbol_name_matcher_inner\n+\t  (const lookup_name_info &lookup_name) const;\n };\n \n /* Pointer to the language_defn for our current language.  This pointer\n@@ -698,13 +707,6 @@ void c_get_string (struct value *value,\n \t\t   int *length, struct type **char_type,\n \t\t   const char **charset);\n \n-/* The default implementation of la_symbol_name_matcher.  Matches with\n-   strncmp_iw.  */\n-extern bool default_symbol_name_matcher\n-  (const char *symbol_search_name,\n-   const lookup_name_info &lookup_name,\n-   completion_match_result *comp_match_res);\n-\n /* Get LANG's symbol_name_matcher method for LOOKUP_NAME.  Returns\n    default_symbol_name_matcher if not set.  LANG is used as a hint;\n    the function may ignore it depending on the current language and"
    },
    {
      "sha": "4a634e3aff98e3240d2eb0486e16a68f9729f08c",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -1232,7 +1232,7 @@ find_methods (struct type *t, enum language t_lang, const char *name,\n       int method_counter;\n       lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n       symbol_name_matcher_ftype *symbol_name_compare\n-\t= get_symbol_name_matcher (language_def (t_lang), lookup_name);\n+\t= language_def (t_lang)->get_symbol_name_matcher (lookup_name);\n \n       t = check_typedef (t);\n "
    },
    {
      "sha": "9245ebbeeae9cc2606ed3b97415f414dddc0be2b",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -379,7 +379,6 @@ extern const struct language_data m2_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   m2_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "f4a2544eb1901ecd9162ff2427c35458710102be",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -363,8 +363,8 @@ lookup_minimal_symbol (const char *name, const char *sfile,\n \t\t       % MINIMAL_SYMBOL_HASH_SIZE);\n \n \t\t  symbol_name_matcher_ftype *match\n-\t\t    = get_symbol_name_matcher (language_def (lang),\n-\t\t\t\t\t       lookup_name);\n+\t\t    = language_def (lang)->get_symbol_name_matcher\n+\t\t\t\t\t\t\t(lookup_name);\n \t\t  struct minimal_symbol **msymbol_demangled_hash\n \t\t    = objfile->per_bfd->msymbol_demangled_hash;\n \n@@ -507,7 +507,7 @@ iterate_over_minimal_symbols\n       enum language lang = (enum language) liter;\n       const language_defn *lang_def = language_def (lang);\n       symbol_name_matcher_ftype *name_match\n-\t= get_symbol_name_matcher (lang_def, lookup_name);\n+\t= lang_def->get_symbol_name_matcher (lookup_name);\n \n       unsigned int hash\n \t= lookup_name.search_name_hash (lang) % MINIMAL_SYMBOL_HASH_SIZE;"
    },
    {
      "sha": "9a77f6cb96d8b8d3b503e00ca2491a5f85be11e5",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -354,7 +354,6 @@ extern const struct language_data objc_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "377c550d5a68c9c3b00dcd514115b37c283c80b9",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -1033,7 +1033,6 @@ extern const struct language_data opencl_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "189617afc06da60b5d5178919e3ea3e49ee5198e",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -410,7 +410,6 @@ extern const struct language_data pascal_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   c_watch_location_expression,\n-  NULL,\t\t\t\t/* la_compare_symbol_for_completion */\n   &default_varobj_ops,\n   pascal_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "47e31aab61e09d810639d1f9ee146e42952a74db",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -557,7 +557,7 @@ psymbol_name_matches (partial_symbol *psym,\n {\n   const language_defn *lang = language_def (psym->ginfo.language ());\n   symbol_name_matcher_ftype *name_match\n-    = get_symbol_name_matcher (lang, lookup_name);\n+    = lang->get_symbol_name_matcher (lookup_name);\n   return name_match (psym->ginfo.search_name (), lookup_name, NULL);\n }\n "
    },
    {
      "sha": "3f187bdea50579eef530c0bb0d5a026eb387eb36",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -2065,7 +2065,6 @@ extern const struct language_data rust_language_data =\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n   rust_watch_location_expression,\n-  NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   &default_varobj_ops,\n   rust_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "ec0d94b87dd71f4888a5e1bf4d4ffc29a83699d8",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9debfb97e052c32cf0308157cae529ce2059f48/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=c9debfb97e052c32cf0308157cae529ce2059f48",
      "patch": "@@ -1016,7 +1016,7 @@ symbol_matches_search_name (const struct general_symbol_info *gsymbol,\n \t\t\t    const lookup_name_info &name)\n {\n   symbol_name_matcher_ftype *name_match\n-    = get_symbol_name_matcher (language_def (gsymbol->language ()), name);\n+    = language_def (gsymbol->language ())->get_symbol_name_matcher (name);\n   return name_match (gsymbol->search_name (), name, NULL);\n }\n \n@@ -5258,7 +5258,7 @@ compare_symbol_name (const char *symbol_name, language symbol_language,\n   const language_defn *lang = language_def (symbol_language);\n \n   symbol_name_matcher_ftype *name_match\n-    = get_symbol_name_matcher (lang, lookup_name);\n+    = lang->get_symbol_name_matcher (lookup_name);\n \n   return name_match (symbol_name, lookup_name, &match_res);\n }"
    }
  ]
}