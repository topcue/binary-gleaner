{
  "sha": "93878f471745364756b9bad753c5052614fbcd7e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTM4NzhmNDcxNzQ1MzY0NzU2YjliYWQ3NTNjNTA1MjYxNGZiY2Q3ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-08T20:35:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-25T14:29:44Z"
    },
    "message": "Allow out-of-order reads of CIEs\n\nCurrently gdb has an assertion that requires CIEs to be read in the\norder in which they appear in the debug info:\n\n   gdb_assert (n < 1\n               || cie_table->entries[n - 1]->cie_pointer < cie->cie_pointer);\n\nThis assertion ensures that the table will be sorted, which is\nimportant because it is later searched using bsearch.\n\nHowever, a customer provided an executable that causes this assertion\nto trigger.  This executable causes decode_frame_entry_1 to call\ndecode_frame_entry to find the CIE, resulting in an out-of-order read.\n\nI don't know a good way to construct a reproducer, but this can happen\nif the FDE appears before its CIE.  See\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=16563\n\nThis patch fixes the problem by storing CIEs in an unordered map.  The\nCIE table is discarded after the frame section is parsed, so this\nseemed both simple and straightforward.\n\ngdb/ChangeLog\n2019-10-25  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2-frame.c (dwarf2_cie_table): Now a typedef.\n\t(bsearch_cie_cmp, add_cie): Remove.\n\t(find_cie): Reimplement.\n\t(decode_frame_entry_1, decode_frame_entry): Change type.  Update.\n\t(dwarf2_build_frame_info): Update.\n\nChange-Id: I4a99597fa4b1398a9d105b683a36d992d506485c",
    "tree": {
      "sha": "f5a973353f040fb4dad40b80c5225eb24c9a5c23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f5a973353f040fb4dad40b80c5225eb24c9a5c23"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93878f471745364756b9bad753c5052614fbcd7e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93878f471745364756b9bad753c5052614fbcd7e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93878f471745364756b9bad753c5052614fbcd7e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93878f471745364756b9bad753c5052614fbcd7e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52c64cf72d40aace2d2fedca32e5c0373cd9a484",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52c64cf72d40aace2d2fedca32e5c0373cd9a484",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52c64cf72d40aace2d2fedca32e5c0373cd9a484"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 25,
    "deletions": 75
  },
  "files": [
    {
      "sha": "84fb9aa822b1986489d51fe419e50806c265fff6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93878f471745364756b9bad753c5052614fbcd7e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93878f471745364756b9bad753c5052614fbcd7e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93878f471745364756b9bad753c5052614fbcd7e",
      "patch": "@@ -1,3 +1,11 @@\n+2019-10-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2-frame.c (dwarf2_cie_table): Now a typedef.\n+\t(bsearch_cie_cmp, add_cie): Remove.\n+\t(find_cie): Reimplement.\n+\t(decode_frame_entry_1, decode_frame_entry): Change type.  Update.\n+\t(dwarf2_build_frame_info): Update.\n+\n 2019-10-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gdb/25126"
    },
    {
      "sha": "f8c6d5dd6e25cf3d08ca6552810c29c3096afac3",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 17,
      "deletions": 75,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93878f471745364756b9bad753c5052614fbcd7e/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93878f471745364756b9bad753c5052614fbcd7e/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=93878f471745364756b9bad753c5052614fbcd7e",
      "patch": "@@ -43,6 +43,7 @@\n #include \"gdbsupport/selftest.h\"\n #include \"selftest-arch.h\"\n #endif\n+#include <unordered_map>\n \n #include <algorithm>\n \n@@ -100,11 +101,9 @@ struct dwarf2_cie\n   unsigned char segment_size;\n };\n \n-struct dwarf2_cie_table\n-{\n-  int num_entries;\n-  struct dwarf2_cie **entries;\n-};\n+/* The CIE table is used to find CIEs during parsing, but then\n+   discarded.  It maps from the CIE's offset to the CIE.  */\n+typedef std::unordered_map<ULONGEST, dwarf2_cie *> dwarf2_cie_table;\n \n /* Frame Description Entry (FDE).  */\n \n@@ -1643,55 +1642,16 @@ read_encoded_value (struct comp_unit *unit, gdb_byte encoding,\n }\n \f\n \n-static int\n-bsearch_cie_cmp (const void *key, const void *element)\n-{\n-  ULONGEST cie_pointer = *(ULONGEST *) key;\n-  struct dwarf2_cie *cie = *(struct dwarf2_cie **) element;\n-\n-  if (cie_pointer == cie->cie_pointer)\n-    return 0;\n-\n-  return (cie_pointer < cie->cie_pointer) ? -1 : 1;\n-}\n-\n /* Find CIE with the given CIE_POINTER in CIE_TABLE.  */\n static struct dwarf2_cie *\n-find_cie (struct dwarf2_cie_table *cie_table, ULONGEST cie_pointer)\n+find_cie (const dwarf2_cie_table &cie_table, ULONGEST cie_pointer)\n {\n-  struct dwarf2_cie **p_cie;\n-\n-  /* The C standard (ISO/IEC 9899:TC2) requires the BASE argument to\n-     bsearch be non-NULL.  */\n-  if (cie_table->entries == NULL)\n-    {\n-      gdb_assert (cie_table->num_entries == 0);\n-      return NULL;\n-    }\n-\n-  p_cie = ((struct dwarf2_cie **)\n-\t   bsearch (&cie_pointer, cie_table->entries, cie_table->num_entries,\n-\t\t    sizeof (cie_table->entries[0]), bsearch_cie_cmp));\n-  if (p_cie != NULL)\n-    return *p_cie;\n+  auto iter = cie_table.find (cie_pointer);\n+  if (iter != cie_table.end ())\n+    return iter->second;\n   return NULL;\n }\n \n-/* Add a pointer to new CIE to the CIE_TABLE, allocating space for it.  */\n-static void\n-add_cie (struct dwarf2_cie_table *cie_table, struct dwarf2_cie *cie)\n-{\n-  const int n = cie_table->num_entries;\n-\n-  gdb_assert (n < 1\n-              || cie_table->entries[n - 1]->cie_pointer < cie->cie_pointer);\n-\n-  cie_table->entries\n-    = XRESIZEVEC (struct dwarf2_cie *, cie_table->entries, n + 1);\n-  cie_table->entries[n] = cie;\n-  cie_table->num_entries = n + 1;\n-}\n-\n static int\n bsearch_fde_cmp (const void *key, const void *element)\n {\n@@ -1780,7 +1740,7 @@ enum eh_frame_type\n static const gdb_byte *decode_frame_entry (struct comp_unit *unit,\n \t\t\t\t\t   const gdb_byte *start,\n \t\t\t\t\t   int eh_frame_p,\n-\t\t\t\t\t   struct dwarf2_cie_table *cie_table,\n+\t\t\t\t\t   dwarf2_cie_table &cie_table,\n \t\t\t\t\t   struct dwarf2_fde_table *fde_table,\n \t\t\t\t\t   enum eh_frame_type entry_type);\n \n@@ -1790,7 +1750,7 @@ static const gdb_byte *decode_frame_entry (struct comp_unit *unit,\n static const gdb_byte *\n decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n \t\t      int eh_frame_p,\n-                      struct dwarf2_cie_table *cie_table,\n+                      dwarf2_cie_table &cie_table,\n                       struct dwarf2_fde_table *fde_table,\n                       enum eh_frame_type entry_type)\n {\n@@ -2009,7 +1969,7 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n       cie->end = end;\n       cie->unit = unit;\n \n-      add_cie (cie_table, cie);\n+      cie_table[cie->cie_pointer] = cie;\n     }\n   else\n     {\n@@ -2092,7 +2052,7 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n static const gdb_byte *\n decode_frame_entry (struct comp_unit *unit, const gdb_byte *start,\n \t\t    int eh_frame_p,\n-                    struct dwarf2_cie_table *cie_table,\n+\t\t    dwarf2_cie_table &cie_table,\n                     struct dwarf2_fde_table *fde_table,\n                     enum eh_frame_type entry_type)\n {\n@@ -2206,13 +2166,10 @@ dwarf2_build_frame_info (struct objfile *objfile)\n {\n   struct comp_unit *unit;\n   const gdb_byte *frame_ptr;\n-  struct dwarf2_cie_table cie_table;\n+  dwarf2_cie_table cie_table;\n   struct dwarf2_fde_table fde_table;\n   struct dwarf2_fde_table *fde_table2;\n \n-  cie_table.num_entries = 0;\n-  cie_table.entries = NULL;\n-\n   fde_table.num_entries = 0;\n   fde_table.entries = NULL;\n \n@@ -2254,7 +2211,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t      frame_ptr = unit->dwarf_frame_buffer;\n \t      while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n \t\tframe_ptr = decode_frame_entry (unit, frame_ptr, 1,\n-\t\t\t\t\t\t&cie_table, &fde_table,\n+\t\t\t\t\t\tcie_table, &fde_table,\n \t\t\t\t\t\tEH_CIE_OR_FDE_TYPE_ID);\n \t    }\n \n@@ -2269,16 +2226,10 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t\t  fde_table.entries = NULL;\n \t\t  fde_table.num_entries = 0;\n \t\t}\n-\t      /* The cie_table is discarded by the next if.  */\n+\t      /* The cie_table is discarded below.  */\n \t    }\n \n-          if (cie_table.num_entries != 0)\n-            {\n-              /* Reinit cie_table: debug_frame has different CIEs.  */\n-              xfree (cie_table.entries);\n-              cie_table.num_entries = 0;\n-              cie_table.entries = NULL;\n-            }\n+\t  cie_table.clear ();\n         }\n     }\n \n@@ -2295,7 +2246,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t  frame_ptr = unit->dwarf_frame_buffer;\n \t  while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n \t    frame_ptr = decode_frame_entry (unit, frame_ptr, 0,\n-\t\t\t\t\t    &cie_table, &fde_table,\n+\t\t\t\t\t    cie_table, &fde_table,\n \t\t\t\t\t    EH_CIE_OR_FDE_TYPE_ID);\n \t}\n       catch (const gdb_exception_error &e)\n@@ -2319,18 +2270,9 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t\t}\n \t    }\n \t  fde_table.num_entries = num_old_fde_entries;\n-\t  /* The cie_table is discarded by the next if.  */\n \t}\n     }\n \n-  /* Discard the cie_table, it is no longer needed.  */\n-  if (cie_table.num_entries != 0)\n-    {\n-      xfree (cie_table.entries);\n-      cie_table.entries = NULL;   /* Paranoia.  */\n-      cie_table.num_entries = 0;  /* Paranoia.  */\n-    }\n-\n   /* Copy fde_table to obstack: it is needed at runtime.  */\n   fde_table2 = XOBNEW (&objfile->objfile_obstack, struct dwarf2_fde_table);\n "
    }
  ]
}