{
  "sha": "5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWU3OWI3YmI2OWM3OTdjM2NhNDAxY2ZhMGY3YTYxNmViMmUzZWZlOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:29:47Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:21Z"
    },
    "message": "gdb/m32r: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* m32r-tdep.c (m32r_unwind_sp): Delete.\n\t(m32r_unwind_pc): Delete.\n\t(m32r_dummy_id): Delete.\n\t(m32r_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "d9f640d446f9f0762754ea50acdababb470d4c67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d9f640d446f9f0762754ea50acdababb470d4c67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89b268d8233e11acdfbc5af196166aacc1440ff3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89b268d8233e11acdfbc5af196166aacc1440ff3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89b268d8233e11acdfbc5af196166aacc1440ff3"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 8,
    "deletions": 37
  },
  "files": [
    {
      "sha": "70009440b63a083988137d7456d071502846866c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* m32r-tdep.c (m32r_unwind_sp): Delete.\n+\t(m32r_unwind_pc): Delete.\n+\t(m32r_dummy_id): Delete.\n+\t(m32r_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* m32c-tdep.c (m32c_unwind_pc): Delete."
    },
    {
      "sha": "a10558d59be2fbea7d4339ecba64206417b77f6a",
      "filename": "gdb/m32r-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 37,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8/gdb/m32r-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8/gdb/m32r-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32r-tdep.c?ref=5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
      "patch": "@@ -648,13 +648,6 @@ m32r_frame_unwind_cache (struct frame_info *this_frame,\n   return info;\n }\n \n-static CORE_ADDR\n-m32r_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, M32R_SP_REGNUM);\n-}\n-\n-\n static CORE_ADDR\n m32r_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t\t      struct regcache *regcache, CORE_ADDR bp_addr, int nargs,\n@@ -798,14 +791,6 @@ m32r_return_value (struct gdbarch *gdbarch, struct value *function,\n     }\n }\n \n-\n-\n-static CORE_ADDR\n-m32r_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, M32R_PC_REGNUM);\n-}\n-\n /* Given a GDB frame, determine the address of the calling function's\n    frame.  This will be used to create a new GDB frame struct.  */\n \n@@ -872,18 +857,6 @@ static const struct frame_base m32r_frame_base = {\n   m32r_frame_base_address\n };\n \n-/* Assuming THIS_FRAME is a dummy, return the frame ID of that dummy\n-   frame.  The frame ID's base needs to match the TOS value saved by\n-   save_dummy_frame_tos(), and the PC match the dummy frame's breakpoint.  */\n-\n-static struct frame_id\n-m32r_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  CORE_ADDR sp = get_frame_register_unsigned (this_frame, M32R_SP_REGNUM);\n-  return frame_id_build (sp, get_frame_pc (this_frame));\n-}\n-\n-\n static gdbarch_init_ftype m32r_gdbarch_init;\n \n static struct gdbarch *\n@@ -904,8 +877,6 @@ m32r_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_wchar_bit (gdbarch, 16);\n   set_gdbarch_wchar_signed (gdbarch, 0);\n \n-  set_gdbarch_unwind_sp (gdbarch, m32r_unwind_sp);\n-\n   set_gdbarch_num_regs (gdbarch, M32R_NUM_REGS);\n   set_gdbarch_pc_regnum (gdbarch, M32R_PC_REGNUM);\n   set_gdbarch_sp_regnum (gdbarch, M32R_SP_REGNUM);\n@@ -928,14 +899,6 @@ m32r_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   frame_base_set_default (gdbarch, &m32r_frame_base);\n \n-  /* Methods for saving / extracting a dummy frame's ID.  The ID's\n-     stack address must match the SP value returned by\n-     PUSH_DUMMY_CALL, and saved by generic_save_dummy_frame_tos.  */\n-  set_gdbarch_dummy_id (gdbarch, m32r_dummy_id);\n-\n-  /* Return the unwound PC value.  */\n-  set_gdbarch_unwind_pc (gdbarch, m32r_unwind_pc);\n-\n   /* Hook in ABI-specific overrides, if they have been registered.  */\n   gdbarch_init_osabi (info, gdbarch);\n "
    }
  ]
}