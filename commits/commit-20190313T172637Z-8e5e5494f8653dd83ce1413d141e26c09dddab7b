{
  "sha": "8e5e5494f8653dd83ce1413d141e26c09dddab7b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGU1ZTU0OTRmODY1M2RkODNjZTE0MTNkMTQxZTI2YzA5ZGRkYWI3Yg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-03-13T17:25:43Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-13T17:26:37Z"
    },
    "message": "Factor out mi_ui_out instantiation logic\n\nWhen re-reviewing this [1] I noticed that there were two spots encoding\nthe logic of instantiating an mi_ui_out object based on the interpreter\nname (\"mi\", \"mi1\", \"mi2\" or \"mi3\"):\n\n - mi_interp::init\n - mi_load_progress\n\nBoth encode the logic to choose what the default version is when the\ninterpreter name is \"mi\".  I had forgotten the one in mi_load_progress.\n\nTherefore, I propose extracting that logic to a single function.  I\nstarted to add a new overload of mi_out_new, then realized the current\nmi_out_new wasn't very useful, being just a thing wrapper around \"new\nmi_ui_out\".  So I ended up with just an mi_out_new function taking the\ninterp name as parameter.\n\nI ran the gdb.mi tests, and verified manually the behavior (including\nthe load command).\n\n[1] https://sourceware.org/ml/gdb-patches/2019-01/msg00427.html\n\ngdb/ChangeLog:\n\n\t* mi/mi-out.h (mi_out_new): Change parameter to const char *.\n\t* mi/mi-out.c (mi_out_new): Change parameter to const char *,\n\tinstantiate mi_ui_out based on interpreter name.\n\t* mi/mi-interp.c (mi_interp::init): Use the new mi_out_new.\n\t* mi/mi-main.c (mi_load_progress): Likewise.",
    "tree": {
      "sha": "273ab6f0a666474856f34ff1e0d6e617dd4506e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/273ab6f0a666474856f34ff1e0d6e617dd4506e7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e5e5494f8653dd83ce1413d141e26c09dddab7b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e5e5494f8653dd83ce1413d141e26c09dddab7b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e5e5494f8653dd83ce1413d141e26c09dddab7b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e5e5494f8653dd83ce1413d141e26c09dddab7b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1dbade7441b9f32d6ba9aa1d44da5f28c44282fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1dbade7441b9f32d6ba9aa1d44da5f28c44282fa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1dbade7441b9f32d6ba9aa1d44da5f28c44282fa"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 35,
    "deletions": 31
  },
  "files": [
    {
      "sha": "c2cb13c97a174b99a3b1734f593097fabe2f9457",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8e5e5494f8653dd83ce1413d141e26c09dddab7b",
      "patch": "@@ -1,3 +1,11 @@\n+2019-03-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* mi/mi-out.h (mi_out_new): Change parameter to const char *.\n+\t* mi/mi-out.c (mi_out_new): Change parameter to const char *,\n+\tinstantiate mi_ui_out based on interpreter name.\n+\t* mi/mi-interp.c (mi_interp::init): Use the new mi_out_new.\n+\t* mi/mi-main.c (mi_load_progress): Likewise.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* NEWS: Combine separate \"New targets\" sections for 8.3."
    },
    {
      "sha": "f17e09ff04f5cf2733320b0109986a59161535e5",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=8e5e5494f8653dd83ce1413d141e26c09dddab7b",
      "patch": "@@ -114,7 +114,6 @@ void\n mi_interp::init (bool top_level)\n {\n   mi_interp *mi = this;\n-  int mi_version;\n \n   /* Store the current output channel, so that we can create a console\n      channel that encapsulates and prefixes all gdb_output-type bits\n@@ -128,21 +127,8 @@ mi_interp::init (bool top_level)\n   mi->log = mi->err;\n   mi->targ = new mi_console_file (mi->raw_stdout, \"@\", '\"');\n   mi->event_channel = new mi_console_file (mi->raw_stdout, \"=\", 0);\n-\n-  /* INTERP_MI selects the most recent released version.  \"mi2\" was\n-     released as part of GDB 6.0.  */\n-  if (strcmp (name (), INTERP_MI) == 0)\n-    mi_version = 2;\n-  else if (strcmp (name (), INTERP_MI1) == 0)\n-    mi_version = 1;\n-  else if (strcmp (name (), INTERP_MI2) == 0)\n-    mi_version = 2;\n-  else if (strcmp (name (), INTERP_MI3) == 0)\n-    mi_version = 3;\n-  else\n-    gdb_assert_not_reached (\"unhandled MI version\");\n-\n-  mi->mi_uiout = mi_out_new (mi_version);\n+  mi->mi_uiout = mi_out_new (name ());\n+  gdb_assert (mi->mi_uiout != nullptr);\n   mi->cli_uiout = cli_out_new (mi->out);\n \n   if (top_level)"
    },
    {
      "sha": "f4e5e48bc221cbd872537d20f7528f6c7b2ace88",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=8e5e5494f8653dd83ce1413d141e26c09dddab7b",
      "patch": "@@ -2173,16 +2173,8 @@ mi_load_progress (const char *section_name,\n      which means uiout may not be correct.  Fix it for the duration\n      of this function.  */\n \n-  std::unique_ptr<ui_out> uiout;\n-\n-  if (current_interp_named_p (INTERP_MI)\n-      || current_interp_named_p (INTERP_MI2))\n-    uiout.reset (mi_out_new (2));\n-  else if (current_interp_named_p (INTERP_MI1))\n-    uiout.reset (mi_out_new (1));\n-  else if (current_interp_named_p (INTERP_MI3))\n-    uiout.reset (mi_out_new (3));\n-  else\n+  std::unique_ptr<ui_out> uiout (mi_out_new (current_interpreter ()->name ()));\n+  if (uiout == nullptr)\n     return;\n \n   scoped_restore save_uiout"
    },
    {
      "sha": "4f8c9bff8e58f57ce1971c3686613ac9728bf43b",
      "filename": "gdb/mi/mi-out.c",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.c?ref=8e5e5494f8653dd83ce1413d141e26c09dddab7b",
      "patch": "@@ -20,10 +20,14 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n-#include \"ui-out.h\"\n #include \"mi-out.h\"\n+\n #include <vector>\n \n+#include \"interps.h\"\n+#include \"ui-out.h\"\n+#include \"utils.h\"\n+\n /* Mark beginning of a table.  */\n \n void\n@@ -288,12 +292,21 @@ mi_ui_out::~mi_ui_out ()\n {\n }\n \n-/* Initialize private members at startup.  */\n+/* See mi/mi-out.h.  */\n \n mi_ui_out *\n-mi_out_new (int mi_version)\n+mi_out_new (const char *mi_version)\n {\n-  return new mi_ui_out (mi_version);\n+  if (streq (mi_version, INTERP_MI3))\n+    return new mi_ui_out (3);\n+\n+  if (streq (mi_version, INTERP_MI2) || streq (mi_version, INTERP_MI))\n+    return new mi_ui_out (2);\n+\n+  if (streq (mi_version, INTERP_MI1))\n+    return new mi_ui_out (1);\n+\n+  return nullptr;\n }\n \n /* Helper function to return the given UIOUT as an mi_ui_out.  It is an error"
    },
    {
      "sha": "82f77592da841944c97ff77d85c8c18ce1426483",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5e5494f8653dd83ce1413d141e26c09dddab7b/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=8e5e5494f8653dd83ce1413d141e26c09dddab7b",
      "patch": "@@ -90,7 +90,12 @@ class mi_ui_out : public ui_out\n   std::vector<ui_file *> m_streams;\n };\n \n-mi_ui_out *mi_out_new (int mi_version);\n+/* Create an MI ui-out object with MI version MI_VERSION, which should be equal\n+   to one of the INTERP_MI* constants (see interps.h).\n+\n+   Return nullptr if an invalid version is provided.  */\n+mi_ui_out *mi_out_new (const char *mi_version);\n+\n int mi_version (ui_out *uiout);\n void mi_out_put (ui_out *uiout, struct ui_file *stream);\n void mi_out_rewind (ui_out *uiout);"
    }
  ]
}