{
  "sha": "240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjQwZWRlZjYyZjBjYjVjNmNiM2RjNmRhOWUzNWJkOGY4YWY2OWUwMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:58:37Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:58:37Z"
    },
    "message": "gdb: remove iterate_over_breakpoints function\n\nNow that we have range functions that let us use ranged for loops, we\ncan remove iterate_over_breakpoints in favor of those, which are easier\nto read and write.  This requires exposing the declaration of\nall_breakpoints and all_breakpoints_safe in breakpoint.h, as well as the\nsupporting types.\n\nChange some users of iterate_over_breakpoints to use all_breakpoints,\nwhen they don't need to delete the breakpoint, and all_breakpoints_safe\notherwise.\n\ngdb/ChangeLog:\n\n\t* breakpoint.h (iterate_over_breakpoints): Remove.  Update\n\tcallers to use all_breakpoints or all_breakpoints_safe.\n\t(breakpoint_range, all_breakpoints, breakpoint_safe_range,\n\tall_breakpoints_safe): Move here.\n\t* breakpoint.c (all_breakpoints, all_breakpoints_safe): Make\n\tnon-static.\n\t(iterate_over_breakpoints): Remove.\n\t* python/py-finishbreakpoint.c (bpfinishpy_detect_out_scope_cb):\n\tReturn void.\n\t* python/py-breakpoint.c (build_bp_list): Add comment, reverse\n\treturn value logic.\n\t* guile/scm-breakpoint.c (bpscm_build_bp_list): Return void.\n\nChange-Id: Idde764a1f577de0423e4f2444a7d5cdb01ba5e48",
    "tree": {
      "sha": "9ca7198bcd8aae2d843b9eaa4599a6cb9cebeb07",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ca7198bcd8aae2d843b9eaa4599a6cb9cebeb07"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0d9a2704073d93b413dfa80fbb29f206ecb3762",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0d9a2704073d93b413dfa80fbb29f206ecb3762",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0d9a2704073d93b413dfa80fbb29f206ecb3762"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 65,
    "deletions": 77
  },
  "files": [
    {
      "sha": "7bca8f086f7fa2c319f6e2cff087c5d864a7c518",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -1,3 +1,18 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* breakpoint.h (iterate_over_breakpoints): Remove.  Update\n+\tcallers to use all_breakpoints or all_breakpoints_safe.\n+\t(breakpoint_range, all_breakpoints, breakpoint_safe_range,\n+\tall_breakpoints_safe): Move here.\n+\t* breakpoint.c (all_breakpoints, all_breakpoints_safe): Make\n+\tnon-static.\n+\t(iterate_over_breakpoints): Remove.\n+\t* python/py-finishbreakpoint.c (bpfinishpy_detect_out_scope_cb):\n+\tReturn void.\n+\t* python/py-breakpoint.c (build_bp_list): Add comment, reverse\n+\treturn value logic.\n+\t* guile/scm-breakpoint.c (bpscm_build_bp_list): Return void.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* breakpoint.c (get_first_locp_gte_addr): Remove."
    },
    {
      "sha": "401367d37402ff3ff1105d6e18c4e366c2379cad",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 24,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -493,27 +493,17 @@ bool target_exact_watchpoints = false;\n \n static struct breakpoint *breakpoint_chain;\n \n-/* Breakpoint linked list range.  */\n-\n-using breakpoint_range = next_adapter<breakpoint, breakpoint_iterator>;\n-\n-/* Return a range to iterate over all breakpoints.  */\n+/* See breakpoint.h.  */\n \n-static breakpoint_range\n+breakpoint_range\n all_breakpoints ()\n {\n   return breakpoint_range (breakpoint_chain);\n }\n \n-/* Breakpoint linked list range, safe against deletion of the current\n-   breakpoint while iterating.  */\n-\n-using breakpoint_safe_range = basic_safe_range<breakpoint_range>;\n-\n-/* Return a range to iterate over all breakpoints.  This range is safe against\n-   deletion of the current breakpoint while iterating.  */\n+/* See breakpoint.h.  */\n \n-static breakpoint_safe_range\n+breakpoint_safe_range\n all_breakpoints_safe ()\n {\n   return breakpoint_safe_range (all_breakpoints ());\n@@ -15191,16 +15181,6 @@ add_catch_command (const char *name, const char *docstring,\n   set_cmd_completer (command, completer);\n }\n \n-struct breakpoint *\n-iterate_over_breakpoints (gdb::function_view<bool (breakpoint *)> callback)\n-{\n-  for (breakpoint *b : all_breakpoints_safe ())\n-    if (callback (b))\n-      return b;\n-\n-  return NULL;\n-}\n-\n /* Zero if any of the breakpoint's locations could be a location where\n    functions have been inlined, nonzero otherwise.  */\n "
    },
    {
      "sha": "ffe042459eef9773c84b8f073e13df9fc9342707",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 19,
      "deletions": 11,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -31,6 +31,7 @@\n #include \"gdbsupport/filtered-iterator.h\"\n #include \"gdbsupport/function-view.h\"\n #include \"gdbsupport/refcounted-object.h\"\n+#include \"gdbsupport/safe-iterator.h\"\n #include \"cli/cli-script.h\"\n \n struct block;\n@@ -1711,21 +1712,28 @@ class scoped_rbreak_breakpoints\n   DISABLE_COPY_AND_ASSIGN (scoped_rbreak_breakpoints);\n };\n \n-/* Breakpoint iterator function.\n-\n-   Calls a callback function once for each breakpoint, so long as the\n-   callback function returns false.  If the callback function returns\n-   true, the iteration will end and the current breakpoint will be\n-   returned.  This can be useful for implementing a search for a\n-   breakpoint with arbitrary attributes, or for applying an operation\n-   to every breakpoint.  */\n-extern struct breakpoint *iterate_over_breakpoints\n-  (gdb::function_view<bool (breakpoint *)>);\n-\n /* Breakpoint linked list iterator.  */\n \n using breakpoint_iterator = next_iterator<breakpoint>;\n \n+/* Breakpoint linked list range.  */\n+\n+using breakpoint_range = next_adapter<breakpoint, breakpoint_iterator>;\n+\n+/* Return a range to iterate over all breakpoints.  */\n+\n+breakpoint_range all_breakpoints ();\n+\n+/* Breakpoint linked list range, safe against deletion of the current\n+   breakpoint while iterating.  */\n+\n+using breakpoint_safe_range = basic_safe_range<breakpoint_range>;\n+\n+/* Return a range to iterate over all breakpoints.  This range is safe against\n+   deletion of the current breakpoint while iterating.  */\n+\n+breakpoint_safe_range all_breakpoints_safe ();\n+\n /* Breakpoint filter to only keep tracepoints.  */\n \n struct tracepoint_filter"
    },
    {
      "sha": "68a6937974929d4a25a431a34069e5b39a2a0aa1",
      "filename": "gdb/dummy-frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/dummy-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/dummy-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dummy-frame.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -166,10 +166,9 @@ pop_dummy_frame (struct dummy_frame **dummy_ptr)\n \n   restore_infcall_suspend_state (dummy->caller_state);\n \n-  iterate_over_breakpoints ([dummy] (breakpoint* bp)\n-    {\n-      return pop_dummy_frame_bpt (bp, dummy);\n-    });\n+  for (breakpoint *bp : all_breakpoints_safe ())\n+    if (pop_dummy_frame_bpt (bp, dummy))\n+      break;\n \n   /* restore_infcall_control_state frees inf_state,\n      all that remains is to pop *dummy_ptr.  */"
    },
    {
      "sha": "4ff197e48a45374b0a070cb5e62689bf047e69b1",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -508,7 +508,7 @@ gdbscm_delete_breakpoint_x (SCM self)\n \n /* iterate_over_breakpoints function for gdbscm_breakpoints.  */\n \n-static bool\n+static void\n bpscm_build_bp_list (struct breakpoint *bp, SCM *list)\n {\n   breakpoint_smob *bp_smob = bp->scm_bp_object;\n@@ -535,8 +535,6 @@ bpscm_build_bp_list (struct breakpoint *bp, SCM *list)\n \n   if (bp_smob != NULL)\n     *list = scm_cons (bp_smob->containing_scm, *list);\n-\n-  return false;\n }\n \n /* (breakpoints) -> list\n@@ -547,10 +545,8 @@ gdbscm_breakpoints (void)\n {\n   SCM list = SCM_EOL;\n \n-  iterate_over_breakpoints ([&] (breakpoint *bp)\n-    {\n-      return bpscm_build_bp_list(bp, &list);\n-    });\n+  for (breakpoint *bp : all_breakpoints ())\n+    bpscm_build_bp_list (bp, &list);\n \n   return scm_reverse_x (list, SCM_EOL);\n }"
    },
    {
      "sha": "a2ce4cdd06fd7ab3cf42a3bd6d2b00e907b8d127",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 16,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -898,25 +898,24 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n   return 0;\n }\n \n-\f\n+/* Append to LIST the breakpoint Python object associated to B.\n+\n+   Return true on success.  Return false on failure, with the Python error\n+   indicator set.  */\n \n static bool\n build_bp_list (struct breakpoint *b, PyObject *list)\n {\n   PyObject *bp = (PyObject *) b->py_bp_object;\n-  int iserr = 0;\n \n   /* Not all breakpoints will have a companion Python object.\n      Only breakpoints that were created via bppy_new, or\n      breakpoints that were created externally and are tracked by\n      the Python Scripting API.  */\n-  if (bp)\n-    iserr = PyList_Append (list, bp);\n-\n-  if (iserr == -1)\n+  if (bp == nullptr)\n     return true;\n \n-  return false;\n+  return PyList_Append (list, bp) == 0;\n }\n \n /* Static function to return a tuple holding all breakpoints.  */\n@@ -931,15 +930,11 @@ gdbpy_breakpoints (PyObject *self, PyObject *args)\n   if (list == NULL)\n     return NULL;\n \n-  /* If iterate_over_breakpoints returns non NULL it signals an error\n-     condition.  In that case abandon building the list and return\n-     NULL.  */\n-  auto callback = [&] (breakpoint *bp)\n-    {\n-      return build_bp_list(bp, list.get ());\n-    };\n-  if (iterate_over_breakpoints (callback) != NULL)\n-    return NULL;\n+  /* If build_bp_list returns false, it signals an error condition.  In that\n+     case abandon building the list and return nullptr.  */\n+  for (breakpoint *bp : all_breakpoints ())\n+    if (!build_bp_list (bp, list.get ()))\n+      return nullptr;\n \n   return PyList_AsTuple (list.get ());\n }"
    },
    {
      "sha": "1d8373d807edbbf1df9538e88f56ddad96dff9fc",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -342,7 +342,7 @@ bpfinishpy_out_of_scope (struct finish_breakpoint_object *bpfinish_obj)\n /* Callback for `bpfinishpy_detect_out_scope'.  Triggers Python's\n    `B->out_of_scope' function if B is a FinishBreakpoint out of its scope.  */\n \n-static bool\n+static void\n bpfinishpy_detect_out_scope_cb (struct breakpoint *b,\n \t\t\t\tstruct breakpoint *bp_stopped)\n {\n@@ -372,8 +372,6 @@ bpfinishpy_detect_out_scope_cb (struct breakpoint *b,\n \t    }\n \t}\n     }\n-\n-  return 0;\n }\n \n /* Attached to `stop' notifications, check if the execution has run\n@@ -384,11 +382,8 @@ bpfinishpy_handle_stop (struct bpstats *bs, int print_frame)\n {\n   gdbpy_enter enter_py (get_current_arch (), current_language);\n \n-  iterate_over_breakpoints ([&] (breakpoint *bp)\n-    {\n-      return bpfinishpy_detect_out_scope_cb\n-\t(bp, bs == NULL ? NULL : bs->breakpoint_at);\n-    });\n+  for (breakpoint *bp : all_breakpoints_safe ())\n+    bpfinishpy_detect_out_scope_cb (bp, bs == NULL ? NULL : bs->breakpoint_at);\n }\n \n /* Attached to `exit' notifications, triggers all the necessary out of\n@@ -399,10 +394,8 @@ bpfinishpy_handle_exit (struct inferior *inf)\n {\n   gdbpy_enter enter_py (target_gdbarch (), current_language);\n \n-  iterate_over_breakpoints ([&] (breakpoint *bp)\n-    {\n-      return bpfinishpy_detect_out_scope_cb (bp, nullptr);\n-    });\n+  for (breakpoint *bp : all_breakpoints_safe ())\n+    bpfinishpy_detect_out_scope_cb (bp, nullptr);\n }\n \n /* Initialize the Python finish breakpoint code.  */"
    },
    {
      "sha": "a8a7d1171dc6e4b39f88f364d59231b97cfa10bc",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -2059,7 +2059,8 @@ svr4_update_solib_event_breakpoint (struct breakpoint *b)\n static void\n svr4_update_solib_event_breakpoints (void)\n {\n-  iterate_over_breakpoints (svr4_update_solib_event_breakpoint);\n+  for (breakpoint *bp : all_breakpoints_safe ())\n+    svr4_update_solib_event_breakpoint (bp);\n }\n \n /* Create and register solib event breakpoints.  PROBES is an array"
    },
    {
      "sha": "afd51e95980c7db7ec8d56b8bb0a1672b0b8f1e6",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=240edef62f0cb5c6cb3dc6da9e35bd8f8af69e01",
      "patch": "@@ -457,7 +457,7 @@ tui_source_window_base::update_breakpoint_info\n \t do with it.  Identify enable/disabled breakpoints as well as\n \t those that we already hit.  */\n       tui_bp_flags mode = 0;\n-      iterate_over_breakpoints ([&] (breakpoint *bp) -> bool\n+      for (breakpoint *bp : all_breakpoints ())\n \t{\n \t  if (bp == being_deleted)\n \t    return false;\n@@ -479,7 +479,8 @@ tui_source_window_base::update_breakpoint_info\n \t\t}\n \t    }\n \t  return false;\n-\t});\n+\t}\n+\n       if (line->break_mode != mode)\n \t{\n \t  line->break_mode = mode;"
    }
  ]
}