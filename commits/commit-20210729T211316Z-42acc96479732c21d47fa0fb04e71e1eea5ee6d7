{
  "sha": "42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDJhY2M5NjQ3OTczMmMyMWQ0N2ZhMGZiMDRlNzFlMWVlYTVlZTZkNw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-29T20:16:29Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-29T21:13:16Z"
    },
    "message": "obsd-nat: Various fixes for fork following.\n\n- Don't use #ifdef's on ptrace ops.  obsd-nat.h didn't include\n  <sys/ptrace.h>, so the virtual methods weren't always overridden\n  causing the fork following to not work.  In addition, the thread and\n  fork code is intertwined in ::wait and and the lack of #ifdef's\n  there already assumed both were present.  Finally, both of these\n  ptrace ops have been present in OpenBSD for at least 10 years.\n\n- Move duplicated code to enable PTRACE_FORK event reporting to a\n  single function and invoke it on new child processes reported via\n  PTRACE_FORK.\n\n- Don't return early from PTRACE_FORK handling, but instead reset\n  wptid to the correct ptid if the child reports its event before the\n  parent.  This allows the ptid fixup code to add thread IDs if the\n  first event for a process is a PTRACE_FORK event.  This also\n  properly returns ptid's with thread IDs when reporting PTRACE_FORK\n  events.\n\n- Handle detach_fork by skipping the PT_DETACH.",
    "tree": {
      "sha": "fc71e716eb6ed039c6a9caa29fe965747b7212f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc71e716eb6ed039c6a9caa29fe965747b7212f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42acc96479732c21d47fa0fb04e71e1eea5ee6d7/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 25,
    "deletions": 30
  },
  "files": [
    {
      "sha": "854fc9c1c9483ff85735597d28e8f13ba145b5cb",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 25,
      "deletions": 28,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42acc96479732c21d47fa0fb04e71e1eea5ee6d7/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42acc96479732c21d47fa0fb04e71e1eea5ee6d7/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
      "patch": "@@ -33,8 +33,6 @@\n    that maps userland threads directly onto kernel threads in a 1:1\n    fashion.  */\n \n-#ifdef PT_GET_THREAD_FIRST\n-\n std::string\n obsd_nat_target::pid_to_str (ptid_t ptid)\n {\n@@ -72,6 +70,21 @@ obsd_nat_target::update_thread_list ()\n     }\n }\n \n+/* Enable additional event reporting on a new or existing process.  */\n+\n+static void\n+obsd_enable_proc_events (pid_t pid)\n+{\n+  ptrace_event_t pe;\n+\n+  /* Set the initial event mask.  */\n+  memset (&pe, 0, sizeof pe);\n+  pe.pe_set_event |= PTRACE_FORK;\n+  if (ptrace (PT_SET_EVENT_MASK, pid,\n+\t      (PTRACE_TYPE_ARG3)&pe, sizeof pe) == -1)\n+    perror_with_name ((\"ptrace\"));\n+}\n+\n ptid_t\n obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t       target_wait_flags options)\n@@ -85,6 +98,8 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n       if (ptrace (PT_GET_PROCESS_STATE, pid, (caddr_t)&pe, sizeof pe) == -1)\n \tperror_with_name ((\"ptrace\"));\n \n+      wptid = ptid_t (pid, pe.pe_tid, 0);\n+\n       switch (pe.pe_report_event)\n \t{\n \tcase PTRACE_FORK:\n@@ -105,13 +120,15 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t  if (find_inferior_pid (this, fpid) != nullptr)\n \t    {\n \t      ourstatus->value.related_pid = ptid_t (pe.pe_other_pid);\n-\t      return ptid_t (fpid);\n+\t      wptid = ptid_t (fpid, pe.pe_tid, 0);\n \t    }\n \n-\t  return ptid_t (pid);\n+\t  obsd_enable_proc_events (ourstatus->value.related_pid.pid ());\n+\t  break;\n \t}\n \n-      wptid = ptid_t (pid, pe.pe_tid, 0);\n+      /* Ensure the ptid is updated with an LWP id on the first stop\n+         of a process.  */\n       if (!in_thread_list (this, wptid))\n \t{\n \t  if (in_thread_list (this, ptid_t (pid)))\n@@ -123,34 +140,16 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n   return wptid;\n }\n \n-#endif /* PT_GET_THREAD_FIRST */\n-\n-#ifdef PT_GET_PROCESS_STATE\n-\n void\n obsd_nat_target::post_attach (int pid)\n {\n-  ptrace_event_t pe;\n-\n-  /* Set the initial event mask.  */\n-  memset (&pe, 0, sizeof pe);\n-  pe.pe_set_event |= PTRACE_FORK;\n-  if (ptrace (PT_SET_EVENT_MASK, pid,\n-\t      (PTRACE_TYPE_ARG3)&pe, sizeof pe) == -1)\n-    perror_with_name ((\"ptrace\"));\n+  obsd_enable_proc_events (pid);\n }\n \n void\n obsd_nat_target::post_startup_inferior (ptid_t pid)\n {\n-  ptrace_event_t pe;\n-\n-  /* Set the initial event mask.  */\n-  memset (&pe, 0, sizeof pe);\n-  pe.pe_set_event |= PTRACE_FORK;\n-  if (ptrace (PT_SET_EVENT_MASK, pid.pid (),\n-\t      (PTRACE_TYPE_ARG3)&pe, sizeof pe) == -1)\n-    perror_with_name ((\"ptrace\"));\n+  obsd_enable_proc_events (pid.pid ());\n }\n \n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n@@ -160,7 +159,7 @@ void\n obsd_nat_target::follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n \t\t\t      bool follow_child, bool detach_fork)\n {\n-  if (!follow_child)\n+  if (!follow_child && detach_fork)\n     {\n       /* Breakpoints have already been detached from the child by\n \t infrun.c.  */\n@@ -181,5 +180,3 @@ obsd_nat_target::remove_fork_catchpoint (int pid)\n {\n   return 0;\n }\n-\n-#endif /* PT_GET_PROCESS_STATE */"
    },
    {
      "sha": "43a793e0a317e725f6767e32ac2c7f0b72955876",
      "filename": "gdb/obsd-nat.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42acc96479732c21d47fa0fb04e71e1eea5ee6d7/gdb/obsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42acc96479732c21d47fa0fb04e71e1eea5ee6d7/gdb/obsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.h?ref=42acc96479732c21d47fa0fb04e71e1eea5ee6d7",
      "patch": "@@ -29,7 +29,6 @@ class obsd_nat_target : public inf_ptrace_target\n   void update_thread_list () override;\n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n-#ifdef PT_GET_PROCESS_STATE\n   void follow_fork (ptid_t, target_waitkind, bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n@@ -39,7 +38,6 @@ class obsd_nat_target : public inf_ptrace_target\n   void post_startup_inferior (ptid_t) override;\n \n   void post_attach (int) override;\n-#endif\n };\n \n #endif /* obsd-nat.h */"
    }
  ]
}