{
  "sha": "14f62a099a0287c858ac7f4882e88736c11ed1cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTRmNjJhMDk5YTAyODdjODU4YWM3ZjQ4ODJlODg3MzZjMTFlZDFjYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-20T15:22:46Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-20T15:22:46Z"
    },
    "message": "Ignore system_error in thread startup\n\nlibstdc++ might change so that it always implements std::thread, but\nthen have thread startup simply fail.  This is being discussed here:\n\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-November/558736.html\n\nThis patch pre-emptively changes gdb to handle this scenario.  It\nseemed fine to me to ignore all system errors at thread startup, so\nthat is what this does.\n\ngdbsupport/ChangeLog\n2020-11-20  Tom Tromey  <tromey@adacore.com>\n\n\t* thread-pool.cc (thread_pool::set_thread_count): Ignore system\n\terrors.",
    "tree": {
      "sha": "4fd1595ed9c281e91572785ba651dd85430dd0eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4fd1595ed9c281e91572785ba651dd85430dd0eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14f62a099a0287c858ac7f4882e88736c11ed1cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14f62a099a0287c858ac7f4882e88736c11ed1cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14f62a099a0287c858ac7f4882e88736c11ed1cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14f62a099a0287c858ac7f4882e88736c11ed1cc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d37f01307db492370a260e3ef9aee10b363fec2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d37f01307db492370a260e3ef9aee10b363fec2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d37f01307db492370a260e3ef9aee10b363fec2"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 19,
    "deletions": 2
  },
  "files": [
    {
      "sha": "d1e46a3dca8eb7a34b4bf6d0963ca04f3b3b43d6",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14f62a099a0287c858ac7f4882e88736c11ed1cc/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14f62a099a0287c858ac7f4882e88736c11ed1cc/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=14f62a099a0287c858ac7f4882e88736c11ed1cc",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-20  Tom Tromey  <tromey@adacore.com>\n+\n+\t* thread-pool.cc (thread_pool::set_thread_count): Ignore system\n+\terrors.\n+\n 2020-11-10  Tom Tromey  <tromey@adacore.com>\n \n \tPR build/26848:"
    },
    {
      "sha": "06586f7da0304b39b13ff1cdcb22c497ad01c551",
      "filename": "gdbsupport/thread-pool.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14f62a099a0287c858ac7f4882e88736c11ed1cc/gdbsupport/thread-pool.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14f62a099a0287c858ac7f4882e88736c11ed1cc/gdbsupport/thread-pool.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/thread-pool.cc?ref=14f62a099a0287c858ac7f4882e88736c11ed1cc",
      "patch": "@@ -25,6 +25,7 @@\n #include \"gdbsupport/alt-stack.h\"\n #include \"gdbsupport/block-signals.h\"\n #include <algorithm>\n+#include <system_error>\n \n /* On the off chance that we have the pthread library on a Windows\n    host, but std::thread is not using it, avoid calling\n@@ -102,8 +103,19 @@ thread_pool::set_thread_count (size_t num_threads)\n       block_signals blocker;\n       for (size_t i = m_thread_count; i < num_threads; ++i)\n \t{\n-\t  std::thread thread (&thread_pool::thread_function, this);\n-\t  thread.detach ();\n+\t  try\n+\t    {\n+\t      std::thread thread (&thread_pool::thread_function, this);\n+\t      thread.detach ();\n+\t    }\n+\t  catch (const std::system_error &)\n+\t    {\n+\t      /* libstdc++ may not implement std::thread, and will\n+\t\t throw an exception on use.  It seems fine to ignore\n+\t\t this, and any other sort of startup failure here.  */\n+\t      num_threads = i;\n+\t      break;\n+\t    }\n \t}\n     }\n   /* If the new size is smaller, terminate some existing threads.  */"
    }
  ]
}