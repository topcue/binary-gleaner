{
  "sha": "eb19308f2d09675dd936960c15603ae749e0f837",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWIxOTMwOGYyZDA5Njc1ZGQ5MzY5NjBjMTU2MDNhZTc0OWUwZjgzNw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-28T08:53:00Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-28T08:53:00Z"
    },
    "message": "x86: honor signedness of PC-relative relocations\n\nPR gas/27763\n\nWhile the comment in output_jump() was basically correct prior to the\nintroduction of 64-bit mode, both that and the not-JMP-like behavior of\nXBEGIN require adjustments: Branches with 32-bit displacement do not\nwrap at 4G in 64-bit mode, and XBEGIN with 16-bit operand size doesn't\nwrap at 64k. Similarly %rip-relative addressing doesn't wrap at 4G.\n\nThe new testcase points out that for PE/COFF object_64bit didn't get\nset so far, preventing in particular the check at the end of\nmd_convert_frag() to take effect.\n\nFor Mach-O the new testcase fails (bogusly), in that only the first two\nof the expected errors get raised. Since for Mach-O many testcases\nalready fail, and since an x86_64-darwin target can't even be configured\nfor, I didn't think I need to bother.\n\nNote that there are further issues in this area, in particular for\nbranches with operand size overrides. Such branches, which truncate\n%rip / %eip, can't be correctly expressed with ordinary PC-relative\nrelocations. It's not really clear what to do with them - perhaps the\nbest we can do is to carry through all associated relocations, leaving\nit to the linker (or even loader) to decide (once the final address\nlayout is known). Same perhaps goes for relocations associated with\n32-bit addressing in 64-bit mode.",
    "tree": {
      "sha": "5fba813ce356228e4f3dac2fdcb0963008e002b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5fba813ce356228e4f3dac2fdcb0963008e002b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb19308f2d09675dd936960c15603ae749e0f837",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb19308f2d09675dd936960c15603ae749e0f837",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb19308f2d09675dd936960c15603ae749e0f837",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb19308f2d09675dd936960c15603ae749e0f837/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6c356992b46da85a3eae0e901538c9d9855508ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c356992b46da85a3eae0e901538c9d9855508ed",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6c356992b46da85a3eae0e901538c9d9855508ed"
    }
  ],
  "stats": {
    "total": 229,
    "additions": 211,
    "deletions": 18
  },
  "files": [
    {
      "sha": "5d341e8004e9f622dcd099ba285475ffec1f38a0",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -1,3 +1,22 @@\n+2021-04-28  Jan Beulich  <jbeulich@suse.com>\n+            H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR gas/27763\n+\t* config/tc-i386.c (output_jump): Also mark 2-byte relocs as\n+\tsigned for XBEGIN. Also mark 4-byte relocs as signed for 64-bit.\n+\t(output_disp): Also mark 4-byte relocs as signed for 64-bit.\n+\t(md_estimate_size_before_relax): Move local variable fixP. Set\n+\tit from fix_new() return values. Mark 4-byte relocs as signed\n+\tfor 64-bit.\n+\t* testsuite/gas/i386/pcrel64.s, testsuite/gas/i386/pcrel64.l,\n+\t* testsuite/gas/i386/x86-64-rip-2.s,\n+\t* testsuite/gas/i386/x86-64-rip-2.d,\n+\t* testsuite/gas/i386/x86-64-rip-inval-1.s,\n+\t* testsuite/gas/i386/x86-64-rip-inval-1.l,\n+\t* testsuite/gas/i386/x86-64-rip-inval-2.s,\n+\t* testsuite/gas/i386/x86-64-rip-inval-2.l: New.\n+\t* testsuite/gas/i386/i386.exp: Run new tests.\n+\n 2021-04-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/tc-i386.c (optimize_encoding): Add () to silence GCC 5."
    },
    {
      "sha": "bd2da65bece4ff1bdc6721d63193f334bfbc4734",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 46,
      "deletions": 18,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -8929,11 +8929,26 @@ output_jump (void)\n   fixP = fix_new_exp (frag_now, p - frag_now->fr_literal, size,\n \t\t      i.op[0].disps, 1, jump_reloc);\n \n-  /* All jumps handled here are signed, but don't use a signed limit\n-     check for 32 and 16 bit jumps as we want to allow wrap around at\n-     4G and 64k respectively.  */\n-  if (size == 1)\n-    fixP->fx_signed = 1;\n+  /* All jumps handled here are signed, but don't unconditionally use a\n+     signed limit check for 32 and 16 bit jumps as we want to allow wrap\n+     around at 4G (outside of 64-bit mode) and 64k (except for XBEGIN)\n+     respectively.  */\n+  switch (size)\n+    {\n+    case 1:\n+      fixP->fx_signed = 1;\n+      break;\n+\n+    case 2:\n+      if (i.tm.base_opcode == 0xc7f8)\n+\tfixP->fx_signed = 1;\n+      break;\n+\n+    case 4:\n+      if (flag_code == CODE_64BIT)\n+\tfixP->fx_signed = 1;\n+      break;\n+    }\n }\n \n static void\n@@ -10022,6 +10037,11 @@ output_disp (fragS *insn_start_frag, offsetT insn_start_off)\n \t      fixP = fix_new_exp (frag_now, p - frag_now->fr_literal,\n \t\t\t\t  size, i.op[n].disps, pcrel,\n \t\t\t\t  reloc_type);\n+\n+\t      if (flag_code == CODE_64BIT && size == 4 && pcrel\n+\t\t  && !i.prefix[ADDR_PREFIX])\n+\t\tfixP->fx_signed = 1;\n+\n \t      /* Check for \"call/jmp *mem\", \"mov mem, %reg\",\n \t\t \"test %reg, mem\" and \"binop mem, %reg\" where binop\n \t\t is one of adc, add, and, cmp, or, sbb, sub, xor\n@@ -12257,6 +12277,7 @@ md_estimate_size_before_relax (fragS *fragP, segT segment)\n       enum bfd_reloc_code_real reloc_type;\n       unsigned char *opcode;\n       int old_fr_fix;\n+      fixS *fixP = NULL;\n \n       if (fragP->fr_var != NO_RELOC)\n \treloc_type = (enum bfd_reloc_code_real) fragP->fr_var;\n@@ -12278,10 +12299,10 @@ md_estimate_size_before_relax (fragS *fragP, segT segment)\n \t  /* Make jmp (0xeb) a (d)word displacement jump.  */\n \t  opcode[0] = 0xe9;\n \t  fragP->fr_fix += size;\n-\t  fix_new (fragP, old_fr_fix, size,\n-\t\t   fragP->fr_symbol,\n-\t\t   fragP->fr_offset, 1,\n-\t\t   reloc_type);\n+\t  fixP = fix_new (fragP, old_fr_fix, size,\n+\t\t\t  fragP->fr_symbol,\n+\t\t\t  fragP->fr_offset, 1,\n+\t\t\t  reloc_type);\n \t  break;\n \n \tcase COND_JUMP86:\n@@ -12308,8 +12329,6 @@ md_estimate_size_before_relax (fragS *fragP, segT segment)\n \tcase COND_JUMP:\n \t  if (no_cond_jump_promotion && fragP->fr_var == NO_RELOC)\n \t    {\n-\t      fixS *fixP;\n-\n \t      fragP->fr_fix += 1;\n \t      fixP = fix_new (fragP, old_fr_fix, 1,\n \t\t\t      fragP->fr_symbol,\n@@ -12325,16 +12344,23 @@ md_estimate_size_before_relax (fragS *fragP, segT segment)\n \t  opcode[0] = TWO_BYTE_OPCODE_ESCAPE;\n \t  /* We've added an opcode byte.  */\n \t  fragP->fr_fix += 1 + size;\n-\t  fix_new (fragP, old_fr_fix + 1, size,\n-\t\t   fragP->fr_symbol,\n-\t\t   fragP->fr_offset, 1,\n-\t\t   reloc_type);\n+\t  fixP = fix_new (fragP, old_fr_fix + 1, size,\n+\t\t\t  fragP->fr_symbol,\n+\t\t\t  fragP->fr_offset, 1,\n+\t\t\t  reloc_type);\n \t  break;\n \n \tdefault:\n \t  BAD_CASE (fragP->fr_subtype);\n \t  break;\n \t}\n+\n+      /* All jumps handled here are signed, but don't unconditionally use a\n+\t signed limit check for 32 and 16 bit jumps as we want to allow wrap\n+\t around at 4G (outside of 64-bit mode) and 64k.  */\n+      if (size == 4 && flag_code == CODE_64BIT)\n+\tfixP->fx_signed = 1;\n+\n       frag_wane (fragP);\n       return fragP->fr_fix - old_fr_fix;\n     }\n@@ -13966,9 +13992,11 @@ i386_target_format (void)\n # if defined (TE_PE) || defined (TE_PEP)\n     case bfd_target_coff_flavour:\n       if (flag_code == CODE_64BIT)\n-\treturn use_big_obj ? \"pe-bigobj-x86-64\" : \"pe-x86-64\";\n-      else\n-\treturn use_big_obj ? \"pe-bigobj-i386\" : \"pe-i386\";\n+\t{\n+\t  object_64bit = 1;\n+\t  return use_big_obj ? \"pe-bigobj-x86-64\" : \"pe-x86-64\";\n+\t}\n+      return use_big_obj ? \"pe-bigobj-i386\" : \"pe-i386\";\n # elif defined (TE_GO32)\n     case bfd_target_coff_flavour:\n       return \"coff-go32\";"
    },
    {
      "sha": "1846c980e75b5f4b8cf4d8ce28f6e8fc429d143e",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -760,8 +760,12 @@ if [gas_64_check] then {\n     } else {\n       run_dump_test \"x86-64-w64-pcrel\"\n     }\n+    run_list_test \"pcrel64\" \"-al\"\n     run_dump_test \"x86-64-rip\"\n     run_dump_test \"x86-64-rip-intel\"\n+    run_dump_test \"x86-64-rip-2\"\n+    run_list_test \"x86-64-rip-inval-1\" \"-al\"\n+    run_list_test \"x86-64-rip-inval-2\" \"-al\"\n     run_dump_test \"x86-64-stack\"\n     run_dump_test \"x86-64-stack-intel\"\n     run_dump_test \"x86-64-stack-suffix\""
    },
    {
      "sha": "7c2fc64fdf5ac3dedf4e0ada056b036f6fe2f686",
      "filename": "gas/testsuite/gas/i386/pcrel64.l",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/pcrel64.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/pcrel64.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/pcrel64.l?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,54 @@\n+.*: Assembler messages:\n+.*:16: Error: .*\n+.*:17: Error: .*\n+.*:13: Error: .*\n+.*:15: Error: .*\n+.*:18: Error: .*\n+.*:19: Error: .*\n+.*:20: Error: .*\n+GAS LISTING .*\n+\n+\n+[ \t]*[0-9]+[ \t]+\\.text\n+[ \t]*[0-9]+[ \t]+\\.code64\n+[ \t]*[0-9]+[ \t]+pcrel:\n+[ \t]*[0-9]+ \\?\\?\\?\\? E8..8000[ \t]+call\ttarget\n+[ \t]*[0-9]+[ \t]+00\n+[ \t]*[0-9]+ \\?\\?\\?\\? E9..8000[ \t]+jmp\ttarget\n+[ \t]*[0-9]+[ \t]+00\n+[ \t]*[0-9]+ \\?\\?\\?\\? 0F84..80[ \t]+jz\ttarget\n+[ \t]*[0-9]+[ \t]+0000\n+[ \t]*[0-9]+ \\?\\?\\?\\? C7F8..80[ \t]+xbegin\ttarget\n+[ \t]*[0-9]+[ \t]+0000\n+[ \t]*[0-9]+ \\?\\?\\?\\? 8B05..80[ \t]+mov\ttarget\\(%rip\\), %eax\n+[ \t]*[0-9]+[ \t]+0000\n+[ \t]*[0-9]+ \\?\\?\\?\\? 678B05..[ \t]+mov\ttarget\\(%eip\\), %eax\n+[ \t]*[0-9]+[ \t]+800000\n+[ \t]*[0-9]+ \\?\\?\\?\\? 48C7C0..[ \t]+mov\t\\$target-., %rax\n+[ \t]*[0-9]+[ \t]+800000\n+[ \t]*[0-9]+ \\?\\?\\?\\? B8..8000[ \t]+mov\t\\$target-., %eax\n+[ \t]*[0-9]+[ \t]+00\n+[ \t]*[0-9]+[ \t]*\n+[ \t]*[0-9]+ \\?\\?\\?\\? 66C7F8..[ \t]+data16 xbegin target\n+[ \t]*[0-9]+[ \t]+80\n+[ \t]*[0-9]+[ \t]*\n+[ \t]*[0-9]+ \\?\\?\\?\\? E8...000[ \t]+call\ttarget\\+0x7ffff000\n+[ \t]*[0-9]+[ \t]+80\n+[ \t]*[0-9]+ \\?\\?\\?\\? E9000000[ \t]+jmp\ttarget\\+0x7ffff000\n+[ \t]*[0-9]+[ \t]+00\n+[ \t]*[0-9]+ \\?\\?\\?\\? 0F840000[ \t]+jz\ttarget\\+0x7ffff000\n+[ \t]*[0-9]+[ \t]+0000\n+[ \t]*[0-9]+ \\?\\?\\?\\? C7F8...0[ \t]+xbegin\ttarget\\+0x7ffff000\n+[ \t]*[0-9]+[ \t]+0080\n+[ \t]*[0-9]+ \\?\\?\\?\\? 8B05...0[ \t]+mov\ttarget\\+0x7ffff000\\(%rip\\), %eax\n+[ \t]*[0-9]+[ \t]+0080\n+[ \t]*[0-9]+ \\?\\?\\?\\? 48C7C0..[ \t]+mov\t\\$target\\+0x7ffff000-., %rax\n+[ \t]*[0-9]+[ \t]+.00080\n+[ \t]*[0-9]+[ \t]*\n+[ \t]*[0-9]+ \\?\\?\\?\\? 678B05..[ \t]+mov\ttarget\\+0x7ffff000\\(%eip\\), %eax\n+[ \t]*[0-9]+[ \t]+.00080\n+[ \t]*[0-9]+ \\?\\?\\?\\? B8...000[ \t]+mov\t\\$target\\+0x7ffff000-., %eax\n+[ \t]*[0-9]+[ \t]+80\n+[ \t]*[0-9]+[ \t]*\n+[ \t]*[0-9]+ \\?\\?\\?\\? CCCCCCCC[ \t]+\\.fill 0x8000, 1, 0xcc\n+#pass"
    },
    {
      "sha": "831ee40bee3a7161366dee5783c9b51ef4351148",
      "filename": "gas/testsuite/gas/i386/pcrel64.s",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/pcrel64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/pcrel64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/pcrel64.s?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,27 @@\n+\t.text\n+\t.code64\n+pcrel:\n+\tcall\ttarget\n+\tjmp\ttarget\n+\tjz\ttarget\n+\txbegin\ttarget\n+\tmov\ttarget(%rip), %eax\n+\tmov\ttarget(%eip), %eax\n+\tmov\t$target-., %rax\n+\tmov\t$target-., %eax\n+\n+\tdata16 xbegin target\n+\n+\tcall\ttarget+0x7ffff000\n+\tjmp\ttarget+0x7ffff000\n+\tjz\ttarget+0x7ffff000\n+\txbegin\ttarget+0x7ffff000\n+\tmov\ttarget+0x7ffff000(%rip), %eax\n+\tmov\t$target+0x7ffff000-., %rax\n+\n+\tmov\ttarget+0x7ffff000(%eip), %eax\n+\tmov\t$target+0x7ffff000-., %eax\n+\n+\t.fill 0x8000, 1, 0xcc\n+target:\n+\tret"
    },
    {
      "sha": "bf9ca3997b06eb2654c84e1b8d6cef4de7fcd9d0",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-2.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-2.d?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,21 @@\n+#as: -J\n+#objdump: -drw --syms\n+#name: x86-64 rip addressing 2\n+\n+.*: +file format .*\n+\n+SYMBOL TABLE:\n+0000000000000000 l       .text\t0000000000000000 _start\n+0000000080000006 l       .text\t0000000000000000 test1\n+ffffffff8000000e l       .text\t0000000000000000 test2\n+00000000f000000e l       .text\t0000000000000000 test3\n+ffffffff1000000e l       .text\t0000000000000000 test4\n+\n+\n+\n+Disassembly of section .text:\n+\n+0000000000000000 <_start>:\n+ +0:\t48 8b 05 ff ff ff 7f \tmov    0x7fffffff\\(%rip\\),%rax        # 80000006 <test1>\n+ +7:\t48 8b 05 00 00 00 80 \tmov    -0x80000000\\(%rip\\),%rax        # ffffffff8000000e <test2>\n+#pass"
    },
    {
      "sha": "5ce80e8bb7ac67be04013b846b8493362a74fff5",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-2.s",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-2.s?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,10 @@\n+\t.text\n+_start:\n+\tmovq test1(%rip), %rax\n+\t.set test1, . + 0x7fffffff\n+\n+\tmovq test2(%rip), %rax\n+\t.set test2, . - 0x80000000\n+\n+\t.set test3, . + 0xf0000000\n+\t.set test4, . - 0xf0000000"
    },
    {
      "sha": "d40099eddd6212fd37dcece596976015e3e2c579",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-inval-1.l",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-inval-1.l?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,11 @@\n+.*: Assembler messages:\n+.*:3: Error:.* (0x)?ffffffff7fffffff .*\n+GAS LISTING .*\n+\n+\n+[ \t]*1[ \t]+\\.text\n+[ \t]*2[ \t]+_start:\n+[ \t]*3[ \t]+\\?\\?\\?\\? 488B05FF \t\tmovq test1\\(%rip\\), %rax\n+[ \t]*3[ \t]+FFFF7F\n+[ \t]*4[ \t]+\\.set test1, \\. - 0x80000001\n+#pass"
    },
    {
      "sha": "a0e783e59eded9dd150d3fdf1d4d1da2070f52dd",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-inval-1.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-inval-1.s?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,4 @@\n+\t.text\n+_start:\n+\tmovq test1(%rip), %rax\n+\t.set test1, . - 0x80000001"
    },
    {
      "sha": "e724393ef57193fd7a1905da113683c610d9b9fc",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-inval-2.l",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-inval-2.l?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,11 @@\n+.*: Assembler messages:\n+.*:3: Error:.* (0x)?0*80000000 .*\n+GAS LISTING .*\n+\n+\n+[ \t]*1[ \t]+\\.text\n+[ \t]*2[ \t]+_start:\n+[ \t]*3[ \t]+\\?\\?\\?\\? 488B0500 \t\tmovq test1\\(%rip\\), %rax\n+[ \t]*3[ \t]+000080\n+[ \t]*4[ \t]+\\.set test1, \\. \\+ 0x80000000\n+#pass"
    },
    {
      "sha": "9bdc703cf22eafc50d527f2b64fafb76096aa986",
      "filename": "gas/testsuite/gas/i386/x86-64-rip-inval-2.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb19308f2d09675dd936960c15603ae749e0f837/gas/testsuite/gas/i386/x86-64-rip-inval-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-rip-inval-2.s?ref=eb19308f2d09675dd936960c15603ae749e0f837",
      "patch": "@@ -0,0 +1,4 @@\n+\t.text\n+_start:\n+\tmovq test1(%rip), %rax\n+\t.set test1, . + 0x80000000"
    }
  ]
}