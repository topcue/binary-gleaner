{
  "sha": "ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NiOGQ3ZTgxOTRiODQ4YTZjNGFhNDMyNzI1NDBlZWMwZjRmMjFmMg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T11:27:31Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T14:12:43Z"
    },
    "message": "AArch64: Tidy up aarch64_gdbarch_init\n\nMove the lookup_by_info to the top of the function to avoid unnecessarily\ncreating a new feature when the gdbarch already exists.\n\nAdd some additional cleanups that have no functional effect.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_gdbarch_init): Move gdbarch lookup.",
    "tree": {
      "sha": "d26bfcaf7170881f539beb99ac3ad5d5d840870a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d26bfcaf7170881f539beb99ac3ad5d5d840870a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32c36c3ce94becbf0b8e1adad6ff28aa9d5e0b66",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32c36c3ce94becbf0b8e1adad6ff28aa9d5e0b66",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32c36c3ce94becbf0b8e1adad6ff28aa9d5e0b66"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 30,
    "deletions": 42
  },
  "files": [
    {
      "sha": "02e8feaca73df32359f9da969206f1c08ff59624",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_gdbarch_init): Move gdbarch lookup.\n+\n 2019-04-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2read.c (dwarf2_init_complex_target_type): Handle complex"
    },
    {
      "sha": "ea3f5ec5427233a6861b8c95f0672598c6844a90",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 26,
      "deletions": 42,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccb8d7e8194b848a6c4aa43272540eec0f4f21f2/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=ccb8d7e8194b848a6c4aa43272540eec0f4f21f2",
      "patch": "@@ -3192,36 +3192,37 @@ aarch64_cannot_store_register (struct gdbarch *gdbarch, int regnum)\n static struct gdbarch *\n aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n {\n-  struct gdbarch_tdep *tdep;\n-  struct gdbarch *gdbarch;\n-  struct gdbarch_list *best_arch;\n-  struct tdesc_arch_data *tdesc_data = NULL;\n-  const struct target_desc *tdesc = info.target_desc;\n-  int i;\n-  int valid_p = 1;\n-  const struct tdesc_feature *feature_core;\n-  const struct tdesc_feature *feature_fpu;\n-  const struct tdesc_feature *feature_sve;\n+  const struct tdesc_feature *feature_core, *feature_fpu, *feature_sve;\n   const struct tdesc_feature *feature_pauth;\n-  int num_regs = 0;\n-  int num_pseudo_regs = 0;\n-  int first_pauth_regnum = -1;\n-  int pauth_ra_state_offset = -1;\n+  bool valid_p = true;\n+  int i, num_regs = 0, num_pseudo_regs = 0;\n+  int first_pauth_regnum = -1, pauth_ra_state_offset = -1;\n+\n+  /* If there is already a candidate, use it.  */\n+  for (gdbarch_list *best_arch = gdbarch_list_lookup_by_info (arches, &info);\n+       best_arch != nullptr;\n+       best_arch = gdbarch_list_lookup_by_info (best_arch->next, &info))\n+    {\n+      struct gdbarch_tdep *tdep = gdbarch_tdep (best_arch->gdbarch);\n+      if (tdep)\n+\treturn best_arch->gdbarch;\n+    }\n \n   /* Ensure we always have a target description.  */\n+  const struct target_desc *tdesc = info.target_desc;\n   if (!tdesc_has_registers (tdesc))\n     tdesc = aarch64_read_description (0, false);\n   gdb_assert (tdesc);\n \n-  feature_core = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.core\");\n+  feature_core = tdesc_find_feature (tdesc,\"org.gnu.gdb.aarch64.core\");\n   feature_fpu = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.fpu\");\n   feature_sve = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.sve\");\n   feature_pauth = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.pauth\");\n \n-  if (feature_core == NULL)\n-    return NULL;\n+  if (feature_core == nullptr)\n+    return nullptr;\n \n-  tdesc_data = tdesc_data_alloc ();\n+  struct tdesc_arch_data *tdesc_data = tdesc_data_alloc ();\n \n   /* Validate the description provides the mandatory core R registers\n      and allocate their numbers.  */\n@@ -3233,9 +3234,9 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   num_regs = AARCH64_X0_REGNUM + i;\n \n   /* Add the V registers.  */\n-  if (feature_fpu != NULL)\n+  if (feature_fpu != nullptr)\n     {\n-      if (feature_sve != NULL)\n+      if (feature_sve != nullptr)\n \terror (_(\"Program contains both fpu and SVE features.\"));\n \n       /* Validate the description provides the mandatory V registers\n@@ -3249,7 +3250,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n     }\n \n   /* Add the SVE registers.  */\n-  if (feature_sve != NULL)\n+  if (feature_sve != nullptr)\n     {\n       /* Validate the description provides the mandatory SVE registers\n \t and allocate their numbers.  */\n@@ -3262,7 +3263,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n       num_pseudo_regs += 32;\t/* add the Vn register pseudos.  */\n     }\n \n-  if (feature_fpu != NULL || feature_sve != NULL)\n+  if (feature_fpu != nullptr || feature_sve != nullptr)\n     {\n       num_pseudo_regs += 32;\t/* add the Qn scalar register pseudos */\n       num_pseudo_regs += 32;\t/* add the Dn scalar register pseudos */\n@@ -3290,30 +3291,14 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   if (!valid_p)\n     {\n       tdesc_data_cleanup (tdesc_data);\n-      return NULL;\n+      return nullptr;\n     }\n \n   /* AArch64 code is always little-endian.  */\n   info.byte_order_for_code = BFD_ENDIAN_LITTLE;\n \n-  /* If there is already a candidate, use it.  */\n-  for (best_arch = gdbarch_list_lookup_by_info (arches, &info);\n-       best_arch != NULL;\n-       best_arch = gdbarch_list_lookup_by_info (best_arch->next, &info))\n-    {\n-      /* Found a match.  */\n-      break;\n-    }\n-\n-  if (best_arch != NULL)\n-    {\n-      if (tdesc_data != NULL)\n-\ttdesc_data_cleanup (tdesc_data);\n-      return best_arch->gdbarch;\n-    }\n-\n-  tdep = XCNEW (struct gdbarch_tdep);\n-  gdbarch = gdbarch_alloc (&info, tdep);\n+  struct gdbarch_tdep *tdep = XCNEW (struct gdbarch_tdep);\n+  struct gdbarch *gdbarch = gdbarch_alloc (&info, tdep);\n \n   /* This should be low enough for everything.  */\n   tdep->lowest_pc = 0x20;\n@@ -3324,7 +3309,6 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   tdep->pauth_ra_state_regnum = (feature_pauth == NULL) ? -1\n \t\t\t\t: pauth_ra_state_offset + num_regs;\n \n-\n   set_gdbarch_push_dummy_call (gdbarch, aarch64_push_dummy_call);\n   set_gdbarch_frame_align (gdbarch, aarch64_frame_align);\n "
    }
  ]
}