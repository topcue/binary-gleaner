{
  "sha": "6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmMwOTQ2ZDBkMjhkNzg3YjE2NmNhZTNjMmViYzJjYjMwOWM0ZjVhMg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-02-12T15:20:56Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-02-12T15:20:56Z"
    },
    "message": "x86: correct VFPCLASSP{S,D} operand size handling\n\nWith AVX512VL disabled (e.g. when writing code for the Knights family\nof processors) these insns aren't ambiguous when used with a memory\nsource, and hence should be accepted without suffix or operand size\nspecifier. When AVX512VL is enabled, to be consistent with this as\nwell as other ambiguous operand size handling it would seem better to\njust warn about the ambiguity in AT&T mode, and still default to 512-bit\noperands (on the assumption that the code may have been written without\nAVX512VL in mind yet), but it was requested to leave AT&T syntax mode\nalone here.",
    "tree": {
      "sha": "6a01cbf5a6b3755e26b6d68fcddb99214f00b6dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a01cbf5a6b3755e26b6d68fcddb99214f00b6dd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ddb56fe60054be3463ba30dde8d6c41d641dee01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ddb56fe60054be3463ba30dde8d6c41d641dee01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ddb56fe60054be3463ba30dde8d6c41d641dee01"
    }
  ],
  "stats": {
    "total": 146,
    "additions": 137,
    "deletions": 9
  },
  "files": [
    {
      "sha": "cf1266a33ec3fed93bc3f4a04f2aea9cbbc268ac",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -1,3 +1,14 @@\n+2020-02-12  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (avx512): New (at file scope), moved from\n+\t(check_VecOperands): ... here.\n+\t(process_suffix): Add [XYZ]MMword operand size handling.\n+\t* testsuite/gas/i386/avx512dq-inval.s: Add VFPCLASS tests.\n+\t* testsuite/gas/i386/noavx512-2.s: Add Intel syntax VFPCLASS\n+\ttests.\n+\t* testsuite/gas/i386/avx512dq-inval.l,\n+\ttestsuite/gas/i386/noavx512-2.l: Adjust expectations.\n+\n 2020-02-12  Jan Beulich  <jbeulich@suse.com>\n \n \tPR gas/24546"
    },
    {
      "sha": "680016ae457b2ce3ef8824830be89688ba4d1d02",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 60,
      "deletions": 3,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -1840,6 +1840,8 @@ cpu_flags_and_not (i386_cpu_flags x, i386_cpu_flags y)\n   return x;\n }\n \n+static const i386_cpu_flags avx512 = CPU_ANY_AVX512F_FLAGS;\n+\n #define CPU_FLAGS_ARCH_MATCH\t\t0x1\n #define CPU_FLAGS_64BIT_MATCH\t\t0x2\n \n@@ -5369,7 +5371,6 @@ check_VecOperands (const insn_template *t)\n {\n   unsigned int op;\n   i386_cpu_flags cpu;\n-  static const i386_cpu_flags avx512 = CPU_ANY_AVX512F_FLAGS;\n \n   /* Templates allowing for ZMMword as well as YMMword and/or XMMword for\n      any one operand are implicity requiring AVX512VL support if the actual\n@@ -6445,7 +6446,7 @@ process_suffix (void)\n       /* Accept FLDENV et al without suffix.  */\n       && (i.tm.opcode_modifier.no_ssuf || i.tm.opcode_modifier.floatmf))\n     {\n-      unsigned int suffixes;\n+      unsigned int suffixes, evex = 0;\n \n       suffixes = !i.tm.opcode_modifier.no_bsuf;\n       if (!i.tm.opcode_modifier.no_wsuf)\n@@ -6459,7 +6460,61 @@ process_suffix (void)\n       if (flag_code == CODE_64BIT && !i.tm.opcode_modifier.no_qsuf)\n \tsuffixes |= 1 << 5;\n \n-      /* Are multiple suffixes allowed?  */\n+      /* For [XYZ]MMWORD operands inspect operand sizes.  While generally\n+\t also suitable for AT&T syntax mode, it was requested that this be\n+\t restricted to just Intel syntax.  */\n+      if (intel_syntax)\n+\t{\n+\t  i386_cpu_flags cpu = cpu_flags_and (i.tm.cpu_flags, avx512);\n+\n+\t  if (!cpu_flags_all_zero (&cpu) && !i.broadcast)\n+\t    {\n+\t      unsigned int op;\n+\n+\t      for (op = 0; op < i.tm.operands; ++op)\n+\t\t{\n+\t\t  if (!cpu_arch_flags.bitfield.cpuavx512vl)\n+\t\t    {\n+\t\t      if (i.tm.operand_types[op].bitfield.ymmword)\n+\t\t\ti.tm.operand_types[op].bitfield.xmmword = 0;\n+\t\t      if (i.tm.operand_types[op].bitfield.zmmword)\n+\t\t\ti.tm.operand_types[op].bitfield.ymmword = 0;\n+\t\t      if (!i.tm.opcode_modifier.evex\n+\t\t\t  || i.tm.opcode_modifier.evex == EVEXDYN)\n+\t\t\ti.tm.opcode_modifier.evex = EVEX512;\n+\t\t    }\n+\n+\t\t  if (i.tm.operand_types[op].bitfield.xmmword\n+\t\t      + i.tm.operand_types[op].bitfield.ymmword\n+\t\t      + i.tm.operand_types[op].bitfield.zmmword < 2)\n+\t\t    continue;\n+\n+\t\t  /* Any properly sized operand disambiguates the insn.  */\n+\t\t  if (i.types[op].bitfield.xmmword\n+\t\t      || i.types[op].bitfield.ymmword\n+\t\t      || i.types[op].bitfield.zmmword)\n+\t\t    {\n+\t\t      suffixes &= ~(7 << 6);\n+\t\t      evex = 0;\n+\t\t      break;\n+\t\t    }\n+\n+\t\t  if ((i.flags[op] & Operand_Mem)\n+\t\t      && i.tm.operand_types[op].bitfield.unspecified)\n+\t\t    {\n+\t\t      if (i.tm.operand_types[op].bitfield.xmmword)\n+\t\t\tsuffixes |= 1 << 6;\n+\t\t      if (i.tm.operand_types[op].bitfield.ymmword)\n+\t\t\tsuffixes |= 1 << 7;\n+\t\t      if (i.tm.operand_types[op].bitfield.zmmword)\n+\t\t\tsuffixes |= 1 << 8;\n+\t\t      evex = EVEX512;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+\n+      /* Are multiple suffixes / operand sizes allowed?  */\n       if (suffixes & (suffixes - 1))\n \t{\n \t  if (intel_syntax\n@@ -6485,6 +6540,8 @@ process_suffix (void)\n \n \t  if (i.tm.opcode_modifier.floatmf)\n \t    i.suffix = SHORT_MNEM_SUFFIX;\n+\t  else if (evex)\n+\t    i.tm.opcode_modifier.evex = evex;\n \t  else if (flag_code == CODE_16BIT)\n \t    i.suffix = WORD_MNEM_SUFFIX;\n \t  else if (!i.tm.opcode_modifier.no_lsuf)"
    },
    {
      "sha": "e8a02745d50466bee5f96f98be6e07e9ca4dc8fe",
      "filename": "gas/testsuite/gas/i386/avx512dq-inval.l",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/avx512dq-inval.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/avx512dq-inval.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/avx512dq-inval.l?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -11,3 +11,7 @@\n .*:[0-9]*: Error:.* `vpinsrq' .*\n .*:[0-9]*: Error:.* `vpinsrq' .*\n .*:[0-9]*: Error:.* `vpinsrq' .*\n+.*:[0-9]*: Error:.* `vfpclasspd'\n+.*:[0-9]*: Error:.* `vfpclassps'\n+.*:[0-9]*: Error:.* `vfpclasspd'\n+.*:[0-9]*: Error:.* `vfpclassps'"
    },
    {
      "sha": "facc5f3dd9e4536e8af49c496234457fda69ad00",
      "filename": "gas/testsuite/gas/i386/avx512dq-inval.s",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/avx512dq-inval.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/avx512dq-inval.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/avx512dq-inval.s?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -1,4 +1,4 @@\n-# Check AVX512DQ instructions not to be accepted outside of 64-bit mode\n+# Check AVX512DQ instructions not to be accepted (in part only outside of 64-bit mode)\n \n \t.text\n _start:\n@@ -20,3 +20,10 @@ _start:\n \t       vpinsrq\txmm0, xmm0, qword ptr [eax], 0\n \t{evex} vpinsrq\txmm0, xmm0, qword ptr [eax], 0\n \n+\tvfpclasspd\tk0, [eax], 0\n+\tvfpclassps\tk0, [eax], 0\n+\n+\t.att_syntax prefix\n+\n+\tvfpclasspd\t$0, (%eax), %k0\n+\tvfpclassps\t$0, (%eax), %k0"
    },
    {
      "sha": "56d1aaafaece2f1d8eb88e01e36477c098614d18",
      "filename": "gas/testsuite/gas/i386/noavx512-2.l",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/noavx512-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/noavx512-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/noavx512-2.l?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -101,5 +101,10 @@ GAS LISTING .*\n [ \t]*50[ \t]+F5\n [ \t]*51[ \t]+\\?\\?\\?\\? 660F58F4 \t\taddpd %xmm4, %xmm6\n [ \t]*52[ \t]+\n-[ \t]*53[ \t]+\\?\\?\\?\\? 0F1F00   \t\t\\.p2align 4\n+[ \t]*[1-9][0-9]*[ \t]+\\.intel_syntax noprefix\n+[ \t]*[1-9][0-9]*[ \t]+\\?\\?\\?\\? 62F3FD48 \t\tvfpclasspd k0, \\[eax], 0\n+[ \t]*[1-9][0-9]*[ \t]+660000\n+[ \t]*[1-9][0-9]*[ \t]+\\?\\?\\?\\? 62F37D48 \t\tvfpclassps k0, \\[eax], 0\n+[ \t]*[1-9][0-9]*[ \t]+660000\n+[ \t]*[1-9][0-9]*[ \t]+\n #pass"
    },
    {
      "sha": "437dc045a9f0ed377c98506849d4f6f48bd87698",
      "filename": "gas/testsuite/gas/i386/noavx512-2.s",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/noavx512-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/gas/testsuite/gas/i386/noavx512-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/noavx512-2.s?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -50,4 +50,8 @@\n \tpabsb %xmm5, %xmm6\n \taddpd %xmm4, %xmm6\n \n+\t.intel_syntax noprefix\n+\tvfpclasspd k0, [eax], 0\n+\tvfpclassps k0, [eax], 0\n+\n \t.p2align 4"
    },
    {
      "sha": "ad10bf1cb509ddac8840716501074c7fa52bc2a4",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-12  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-opc.tbl (vfpclasspd, vfpclassps): Add Intel sytax form\n+\twith Unspecified, making the present one AT&T syntax only.\n+\t* i386-tbl.h: Re-generate.\n+\n 2020-02-12  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.tbl (jmp): Fold CpuNo64 and Amd64 direct variants."
    },
    {
      "sha": "30ac416022bb80e1e0aad677f11619544cc1b86a",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -4515,12 +4515,14 @@ vextracti64x2, 3, 0x6639, None, 1, CpuAVX512DQ, Modrm|MaskingMorZ|VexOpcode=2|Ve\n vinsertf64x2, 4, 0x6618, None, 1, CpuAVX512DQ, Modrm|Masking=3|VexOpcode=2|VexVVVV=1|VexW=2|Disp8MemShift=4|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|Unspecified|BaseIndex, RegYMM|RegZMM, RegYMM|RegZMM }\n vinserti64x2, 4, 0x6638, None, 1, CpuAVX512DQ, Modrm|Masking=3|VexOpcode=2|VexVVVV=1|VexW=2|Disp8MemShift=4|CheckRegSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|Unspecified|BaseIndex, RegYMM|RegZMM, RegYMM|RegZMM }\n \n-vfpclasspd, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|RegYMM|RegZMM|Qword|BaseIndex, RegMask }\n+vfpclasspd, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|ATTSyntax, { Imm8, RegXMM|RegYMM|RegZMM|Qword|BaseIndex, RegMask }\n+vfpclasspd, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IntelSyntax, { Imm8, RegXMM|RegYMM|RegZMM|Qword|Unspecified|BaseIndex, RegMask }\n vfpclasspdz, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|EVex=1|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8MemShift=6|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegZMM|Qword|Unspecified|BaseIndex, RegMask }\n vfpclasspdx, 3, 0x6666, None, 1, CpuAVX512DQ|CpuAVX512VL, Modrm|EVex=2|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8MemShift=4|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|Qword|Unspecified|BaseIndex, RegMask }\n vfpclasspdy, 3, 0x6666, None, 1, CpuAVX512DQ|CpuAVX512VL, Modrm|EVex=3|Masking=2|VexOpcode=2|VexW=2|Broadcast|Disp8MemShift=5|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegYMM|Qword|Unspecified|BaseIndex, RegMask }\n \n-vfpclassps, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|RegYMM|RegZMM|Dword|BaseIndex, RegMask }\n+vfpclassps, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|ATTSyntax, { Imm8, RegXMM|RegYMM|RegZMM|Dword|BaseIndex, RegMask }\n+vfpclassps, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8ShiftVL|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IntelSyntax, { Imm8, RegXMM|RegYMM|RegZMM|Dword|Unspecified|BaseIndex, RegMask }\n vfpclasspsz, 3, 0x6666, None, 1, CpuAVX512DQ, Modrm|EVex=1|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8MemShift=6|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegZMM|Dword|Unspecified|BaseIndex, RegMask }\n vfpclasspsx, 3, 0x6666, None, 1, CpuAVX512DQ|CpuAVX512VL, Modrm|EVex=2|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8MemShift=4|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|Dword|Unspecified|BaseIndex, RegMask }\n vfpclasspsy, 3, 0x6666, None, 1, CpuAVX512DQ|CpuAVX512VL, Modrm|EVex=3|Masking=2|VexOpcode=2|VexW=1|Broadcast|Disp8MemShift=5|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegYMM|Dword|Unspecified|BaseIndex, RegMask }"
    },
    {
      "sha": "6a990569978b7866e2881f6f8080d336a471de53",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 34,
      "deletions": 2,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=6c0946d0d28d787b166cae3c2ebc2cb309c4f5a2",
      "patch": "@@ -56801,13 +56801,29 @@ const insn_template i386_optab[] =\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n     { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,\n-      0, 0, 0, 0, 0, 2, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0 },\n+      0, 0, 0, 0, 0, 2, 4, 0, 0, 7, 0, 0, 0, 0, 1, 0, 0 },\n     { { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0 } },\n       { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1,\n \t  0, 1, 1, 1, 0, 0 } },\n       { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0 } } } },\n+  { \"vfpclasspd\", 0x6666, None, 1, 3,\n+    { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,\n+      0, 0, 0, 0, 0, 2, 4, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0 },\n+    { { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t  0, 0, 0, 0, 0, 0 } },\n+      { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1,\n+\t  0, 1, 1, 1, 1, 0 } },\n+      { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t  0, 0, 0, 0, 0, 0 } } } },\n   { \"vfpclasspdz\", 0x6666, None, 1, 3,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n@@ -56865,13 +56881,29 @@ const insn_template i386_optab[] =\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n     { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,\n-      0, 0, 0, 0, 0, 2, 3, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0 },\n+      0, 0, 0, 0, 0, 2, 3, 0, 0, 7, 0, 0, 0, 0, 1, 0, 0 },\n     { { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0 } },\n       { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0,\n \t  0, 1, 1, 1, 0, 0 } },\n       { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n \t  0, 0, 0, 0, 0, 0 } } } },\n+  { \"vfpclassps\", 0x6666, None, 1, 3,\n+    { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },\n+    { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,\n+      0, 0, 0, 0, 0, 2, 3, 0, 0, 7, 0, 0, 0, 0, 0, 1, 0 },\n+    { { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t  0, 0, 0, 0, 0, 0 } },\n+      { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0,\n+\t  0, 1, 1, 1, 1, 0 } },\n+      { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t  0, 0, 0, 0, 0, 0 } } } },\n   { \"vfpclasspsz\", 0x6666, None, 1, 3,\n     { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,"
    }
  ]
}