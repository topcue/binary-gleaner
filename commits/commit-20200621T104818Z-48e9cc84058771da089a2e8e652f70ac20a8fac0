{
  "sha": "48e9cc84058771da089a2e8e652f70ac20a8fac0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDhlOWNjODQwNTg3NzFkYTA4OWEyZThlNjUyZjcwYWMyMGE4ZmFjMA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-05-23T12:54:31Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-06-21T10:48:18Z"
    },
    "message": "Ensure 'exec-file has changed' check has priority over 'exec-file-mismatch' check\n\nFollowing the implementation of exec-file-mismatch based on build-id,\nan attach to a process that runs a modified exec-file was triggering\nthe exec-file-mismatch handling, giving a warning such as:\n  warning: Mismatch between current exec-file /bd/home/philippe/gdb/git/build_termours/gdb/testsuite/outputs/gdb.base/attach/attach\n  and automatically determined exec-file /bd/home/philippe/gdb/git/build_termours/gdb/testsuite/outputs/gdb.base/attach/attach\n  exec-file-mismatch handling is currently \"ask\"\nas the build-ids differ when an exec-file is recompiled.\n\nThis patch ensures that the exec-file-mismatch check is done with an up to date\nbuild-id.  With this, exec-file-mismatch check will only trigger when the\nPID file really differs from the (build-id refreshed) current exec-file.\nNote that the additional check does not (yet) reload the symbols if\nthe exec-file is changed: this reload will happen later if needed.\n\ngdb/ChangeLog\n2020-06-21  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* exec.c (validate_exec_file): Ensure the build-id is up to\n\tdate by calling reopen_exec_file (that checks file timestamp\n\tto decide to re-read the file).\n\ngdb/testsuite/ChangeLog\n\n2020-06-21  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* gdb.base/attach.exp: Test priority of 'exec-file' changed\n\tover 'exec-file-mismatch'.\n\t* gdb.base/attach.c: Mark should_exit volatile.\n\t* gdb.base/attach2.c: Likewise.  Add a comment explaining\n\twhy the sleep cannot be big.\n\t* gdb.base/attach3.c: New file.",
    "tree": {
      "sha": "ab910f5040d0a5df7b43afa317c31cc9f0bcd5b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab910f5040d0a5df7b43afa317c31cc9f0bcd5b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/48e9cc84058771da089a2e8e652f70ac20a8fac0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48e9cc84058771da089a2e8e652f70ac20a8fac0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/48e9cc84058771da089a2e8e652f70ac20a8fac0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48e9cc84058771da089a2e8e652f70ac20a8fac0/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "160f8a8f32f5566077e4a4b13943bc7c70bc5da2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/160f8a8f32f5566077e4a4b13943bc7c70bc5da2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/160f8a8f32f5566077e4a4b13943bc7c70bc5da2"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 104,
    "deletions": 4
  },
  "files": [
    {
      "sha": "d03aae63ce8609f7ab6870dc1f4c0fdd0af001a0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-21  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* exec.c (validate_exec_file): Ensure the build-id is up to\n+\tdate by calling reopen_exec_file (that checks file timestamp\n+\tto decide to re-read the file).\n+\n 2020-06-18  Pedro Alves  <palves@redhat.com>\n \n \tPR gdb/25412"
    },
    {
      "sha": "fa770c6f02099bfe3d2d9a2190c7826d70a10027",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -256,6 +256,14 @@ validate_exec_file (int from_tty)\n \n   /* Try validating via build-id, if available.  This is the most\n      reliable check.  */\n+\n+  /* In case current_exec_file was changed, reopen_exec_file ensures\n+     an up to date build_id (will do nothing if the file timestamp\n+     did not change).  If exec file changed, reopen_exec_file has\n+     allocated another file name, so get_exec_file again.  */\n+  reopen_exec_file ();\n+  current_exec_file = get_exec_file (0);\n+\n   const bfd_build_id *exec_file_build_id = build_id_bfd_get (exec_bfd);\n   if (exec_file_build_id != nullptr)\n     {"
    },
    {
      "sha": "5d64783df5dbfd0c5ac70ff88c1773d9ba05dee6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* gdb.base/attach.exp: Test priority of 'exec-file' changed\n+\tover 'exec-file-mismatch'.\n+\t* gdb.base/attach.c: Mark should_exit volatile.\n+\t* gdb.base/attach2.c: Likewise.  Add a comment explaining\n+\twhy the sleep cannot be big.\n+\t* gdb.base/attach3.c: New file.\n+\n 2020-06-20  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gdb.mi/mi-sym-info.exp: Adjust filename patterns to make directory"
    },
    {
      "sha": "b3c5498401271b08ec7ba7afe210aad1df5aeaba",
      "filename": "gdb/testsuite/gdb.base/attach.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach.c?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -8,7 +8,7 @@\n #include <unistd.h>\n \n int  bidule = 0;\n-int  should_exit = 0;\n+volatile int  should_exit = 0;\n \n int main ()\n {"
    },
    {
      "sha": "ab2d3185762b920330f3b444d1f483f1f3b8f862",
      "filename": "gdb/testsuite/gdb.base/attach.exp",
      "status": "modified",
      "additions": 52,
      "deletions": 2,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach.exp?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -17,12 +17,13 @@ if {![can_spawn_for_attach]} {\n     return 0\n }\n \n-standard_testfile attach.c attach2.c\n+standard_testfile attach.c attach2.c attach3.c\n set binfile2 ${binfile}2\n+set binfile3 ${binfile}3\n set escapedbinfile  [string_to_regexp $binfile]\n \n #execute_anywhere \"rm -f ${binfile} ${binfile2}\"\n-remote_exec build \"rm -f ${binfile} ${binfile2}\"\n+remote_exec build \"rm -f ${binfile} ${binfile2} ${binfile3}\"\n # For debugging this test\n #\n #log_user 1\n@@ -41,6 +42,13 @@ if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile2}\" \"${binfile2}\" executable {d\n     return -1\n }\n \n+# Build the third file, used to check attach when the exec-file has changed.\n+\n+if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile3}\" \"${binfile3}\" executable {debug}] != \"\" } {\n+    untested \"failed to compile attach exec-file changed test\"\n+    return -1\n+}\n+\n if [get_compiler_info] {\n     return -1\n }\n@@ -515,6 +523,7 @@ proc_with_prefix do_attach_exec_mismatch_handling_tests {} {\n     global gdb_prompt\n     global binfile\n     global binfile2\n+    global binfile3\n \n     clean_restart $binfile\n \n@@ -577,10 +586,51 @@ proc_with_prefix do_attach_exec_mismatch_handling_tests {} {\n     # Detach the process.\n     gdb_test \"detach\" \"Detaching from program: .* detached\\\\\\]\" \"$test detach attach\"\n \n+    # Test that the 'exec-file' changed is checked before exec-file-mismatch.\n+    set test \"mismatch exec-file changed has priority\"\n+    gdb_test_no_output \"set exec-file-mismatch ask\"\n+    gdb_test_multiple \"attach $testpid\" \"$test attach1 again, initial exec-file\" {\n+\t-re \"Attaching to program.*exec-file-mismatch handling is currently \\\"ask\\\".*Load new symbol table from .*attach\\\".*\\(y or n\\)\" {\n+\t    gdb_test \"y\" \"Reading symbols from .*attach.*\" $gdb_test_name\n+\t}\n+    }\n+    \n+\n+    gdb_test \"detach\" \"Detaching from program: .* detached\\\\\\]\" \"$test detach attach initial exec-file\"\n+\n+    # Change the exec-file and attach to a new process using the changed file.\n+    remote_exec build \"mv ${binfile} ${binfile}.initial\"\n+    remote_exec build \"mv ${binfile3} ${binfile}\"\n+    # Ensure GDB detects ${binfile} has changed when checking timestamp.\n+    sleep 1\n+    remote_exec build \"touch ${binfile}\"\n+    set test_spawn_id3 [spawn_wait_for_attach $binfile]\n+    set testpid3 [spawn_id_get_pid $test_spawn_id3]\n+\n+    gdb_test \"attach $testpid3\" \"Attaching to program.*attach' has changed; re-reading symbols.*\" \\\n+\t\"$test attach1 again, after changing exec-file\"\n+    gdb_test \"detach\" \"Detaching from program: .* detached\\\\\\]\" \"$test detach after attach changed exec-file\"\n+\n+    # Now, test the situation when current exec-file has changed\n+    # and we attach to a pid using another file.\n+    # Ensure GDB detects ${binfile} has changed when checking timestamp.\n+    sleep 1\n+    remote_exec build \"touch ${binfile}\"\n+\n+    gdb_test_multiple \"attach $testpid2\" \"$test attach2\" {\n+\t-re \"Attaching to program.*exec-file-mismatch handling is currently \\\"ask\\\".*Load new symbol table from .*attach2\\\".*\\(y or n\\)\" {\n+\t    gdb_test \"y\" \"Reading symbols from .*attach2.*\" $gdb_test_name\n+\t}\n+    }\n+\n+    # Restore initial build situation.\n+    remote_exec build \"mv ${binfile} ${binfile3}\"\n+    remote_exec build \"mv ${binfile}.initial ${binfile}\"\n \n     # Don't leave a process around\n     kill_wait_spawned_process $test_spawn_id\n     kill_wait_spawned_process $test_spawn_id2\n+    kill_wait_spawned_process $test_spawn_id3\n }\n \n do_attach_tests"
    },
    {
      "sha": "d070d933b08b20149ce5499508146a05399a67b8",
      "filename": "gdb/testsuite/gdb.base/attach2.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach2.c?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -9,12 +9,14 @@\n #include <unistd.h>\n \n float  bidule = 0.0;\n-int  should_exit = 0;\n+volatile int  should_exit = 0;\n \n int main ()\n {\n   int  local_i = 0;\n \n+  /* Cannot sleep a very long time, as attach.exp assumes the\n+     process will exit before the standard GDB timeout.  */\n   sleep( 10 ); /* System call causes register fetch to fail */\n                /* This is a known HPUX \"feature\"            */\n   while (! should_exit)"
    },
    {
      "sha": "09a6d886df901a2c84f71df7875d471b4a6ab2f1",
      "filename": "gdb/testsuite/gdb.base/attach3.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach3.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48e9cc84058771da089a2e8e652f70ac20a8fac0/gdb/testsuite/gdb.base/attach3.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/attach3.c?ref=48e9cc84058771da089a2e8e652f70ac20a8fac0",
      "patch": "@@ -0,0 +1,25 @@\n+/* This program is intended to be started outside of gdb, and then\n+   attached to by gdb.  Thus, it simply spins in a loop.  The loop\n+   is exited when & if the variable 'should_exit' is non-zero.  (It\n+   is initialized to zero in this program, so the loop will never\n+   exit unless/until gdb sets the variable to non-zero.)\n+   */\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+double  bidule = 0.0;\n+volatile int  should_exit = 0;\n+\n+int main ()\n+{\n+  int  local_i = 0;\n+\n+  sleep( 60 ); /* System call causes register fetch to fail */\n+               /* This is a known HPUX \"feature\"            */\n+  while (! should_exit)\n+    {\n+      local_i++;\n+    }\n+  return (0);\n+}"
    }
  ]
}