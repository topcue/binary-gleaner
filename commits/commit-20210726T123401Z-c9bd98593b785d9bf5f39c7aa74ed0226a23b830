{
  "sha": "c9bd98593b785d9bf5f39c7aa74ed0226a23b830",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzliZDk4NTkzYjc4NWQ5YmY1ZjM5YzdhYTc0ZWQwMjI2YTIzYjgzMA==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2021-07-16T14:49:15Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2021-07-26T12:34:01Z"
    },
    "message": "gdb: Fix numerical field extraction for target description \"flags\"\n\nThe \"val_print_type_code_flags ()\" function is responsible for\nextraction of fields for \"flags\" data type.  These data types are\nused when describing a custom register type in a target description\nXML.  The logic used for the extraction though is not sound:\n\n    unsigned field_len = TYPE_FIELD_BITSIZE (type, field);\n    ULONGEST field_val\n      = val >> (TYPE_FIELD_BITPOS (type, field) - field_len + 1);\n\nTYPE_FIELD_BITSIZE: The bit length of the field to be extracted.\nTYPE_FIELD_BITPOS:  The starting position of the field; 0 is LSB.\nval:                The register value.\n\nImagine you have a field that starts at position 1 and its length\nis 4 bits.  According to the third line of the code snippet the\nshifting right would become \"val >> -2\", or \"val >> 0xfff...fe\"\nto be precise.  That will result in a \"field_val\" of 0.\n\nThe correct extraction should be:\n\n    ULONGEST field_val = val >> TYPE_FIELD_BITPOS (type, field);\n\nThe rest of the algorithm that masks out the higher bits is OK.\n\nCo-Authored-By: Simon Marchi <simon.marchi@efficios.com>",
    "tree": {
      "sha": "290b6b9add1408d1855454b00415462698ce9f53",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/290b6b9add1408d1855454b00415462698ce9f53"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9bd98593b785d9bf5f39c7aa74ed0226a23b830",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9bd98593b785d9bf5f39c7aa74ed0226a23b830",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9bd98593b785d9bf5f39c7aa74ed0226a23b830",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9bd98593b785d9bf5f39c7aa74ed0226a23b830/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "0264bf6fe3028a89c9a6a7b49c489831eb33f506",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0264bf6fe3028a89c9a6a7b49c489831eb33f506",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0264bf6fe3028a89c9a6a7b49c489831eb33f506"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 34,
    "deletions": 2
  },
  "files": [
    {
      "sha": "324055da93f6922b6cf2a326d2e9d823d2741500",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 34,
      "deletions": 2,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9bd98593b785d9bf5f39c7aa74ed0226a23b830/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9bd98593b785d9bf5f39c7aa74ed0226a23b830/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=c9bd98593b785d9bf5f39c7aa74ed0226a23b830",
      "patch": "@@ -43,6 +43,8 @@\n #include \"c-lang.h\"\n #include \"cp-abi.h\"\n #include \"inferior.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"selftest-arch.h\"\n \n /* Maximum number of wchars returned from wchar_iterate.  */\n #define MAX_WCHARS 4\n@@ -1221,8 +1223,7 @@ val_print_type_code_flags (struct type *type, struct value *original_value,\n \t  else\n \t    {\n \t      unsigned field_len = TYPE_FIELD_BITSIZE (type, field);\n-\t      ULONGEST field_val\n-\t\t= val >> (TYPE_FIELD_BITPOS (type, field) - field_len + 1);\n+\t      ULONGEST field_val = val >> TYPE_FIELD_BITPOS (type, field);\n \n \t      if (field_len < sizeof (ULONGEST) * TARGET_CHAR_BIT)\n \t\tfield_val &= ((ULONGEST) 1 << field_len) - 1;\n@@ -3137,10 +3138,41 @@ make_value_print_options_def_group (value_print_options *opts)\n   return {{value_print_option_defs}, opts};\n }\n \n+#if GDB_SELF_TEST\n+\n+/* Test printing of TYPE_CODE_FLAGS values.  */\n+\n+static void\n+test_print_flags (gdbarch *arch)\n+{\n+  type *flags_type = arch_flags_type (arch, \"test_type\", 32);\n+  type *field_type = builtin_type (arch)->builtin_uint32;\n+\n+  /* Value:  1010 1010\n+     Fields: CCCB BAAA */\n+  append_flags_type_field (flags_type, 0, 3, field_type, \"A\");\n+  append_flags_type_field (flags_type, 3, 2, field_type, \"B\");\n+  append_flags_type_field (flags_type, 5, 3, field_type, \"C\");\n+\n+  value *val = allocate_value (flags_type);\n+  gdb_byte *contents = value_contents_writeable (val);\n+  store_unsigned_integer (contents, 4, gdbarch_byte_order (arch), 0xaa);\n+\n+  string_file out;\n+  val_print_type_code_flags (flags_type, val, 0, &out);\n+  SELF_CHECK (out.string () == \"[ A=2 B=1 C=5 ]\");\n+}\n+\n+#endif\n+\n void _initialize_valprint ();\n void\n _initialize_valprint ()\n {\n+#if GDB_SELF_TEST\n+  selftests::register_test_foreach_arch (\"print-flags\", test_print_flags);\n+#endif\n+\n   cmd_list_element *cmd;\n \n   cmd_list_element *set_print_cmd"
    }
  ]
}