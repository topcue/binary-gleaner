{
  "sha": "45f47c3a25d7574d21b9f451efce38c06256f591",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDVmNDdjM2EyNWQ3NTc0ZDIxYjlmNDUxZWZjZTM4YzA2MjU2ZjU5MQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-21T15:39:51Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-21T20:10:02Z"
    },
    "message": "gdb: Ensure that !(a < a) is true in sort_cmp on obj_section objects\n\nAfter the switch to use std::sort, if GDB is compiled with the\n-D_GLIBCXX_DEBUG=1 flag then we see an error when using sort_cmp (in\nobjfiles.c) to sort obj_section objects.\n\nThe problem is that std::sort checks that the condition !(a < a)\nholds, and currently this is not true.  GDB's sort_cmp is really\ndesigned to sort lists in which no obj_section repeats, however, there\nis some code in place to try and ensure we get a stable sort order if\nthere is a bug in GDB, unfortunately this code fails the above check.\n\nBy reordering some of the checks inside sort_cmp, it is pretty easy to\nensure that the !(a < a) condition holds.\n\nI've not bothered to make this condition check optimal, like I said\nthis code is only in place to ensure that we get stable results if GDB\ngoes wrong, so I've made the smallest change needed to get the correct\nbehaviour.\n\nAfter this commit I see no regressions when running GDB compiled with\n-D_GLIBCXX_DEBUG=1.\n\ngdb/ChangeLog:\n\n\t* objfiles.c (sort_cmp): Ensure that !(a < a) holds true.\n\nChange-Id: I4b1e3e1640865104c0896cbb6c3fdbbc04d9645b",
    "tree": {
      "sha": "f47a79abfe8ae237dfbcd9624d51724f37c4d271",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f47a79abfe8ae237dfbcd9624d51724f37c4d271"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/45f47c3a25d7574d21b9f451efce38c06256f591",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45f47c3a25d7574d21b9f451efce38c06256f591",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/45f47c3a25d7574d21b9f451efce38c06256f591",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45f47c3a25d7574d21b9f451efce38c06256f591/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e5f3c0e3b83239b4b73fa76f28513a4a56fe50ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5f3c0e3b83239b4b73fa76f28513a4a56fe50ce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e5f3c0e3b83239b4b73fa76f28513a4a56fe50ce"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 14,
    "deletions": 6
  },
  "files": [
    {
      "sha": "41ee329fc157ef547662893164c107dc88f05409",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/45f47c3a25d7574d21b9f451efce38c06256f591/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/45f47c3a25d7574d21b9f451efce38c06256f591/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=45f47c3a25d7574d21b9f451efce38c06256f591",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* objfiles.c (sort_cmp): Ensure that !(a < a) holds true.\n+\n 2019-10-21  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.h (tui_exec_info_content): Remove typedef."
    },
    {
      "sha": "b5bc09f41eafc7f335567d6d8cfc4348dc0af82e",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/45f47c3a25d7574d21b9f451efce38c06256f591/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/45f47c3a25d7574d21b9f451efce38c06256f591/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=45f47c3a25d7574d21b9f451efce38c06256f591",
      "patch": "@@ -1044,19 +1044,23 @@ sort_cmp (const struct obj_section *sect1, const obj_section *sect2)\n \t doesn't happen at all).  If you discover that significant time is\n \t spent in the loops below, do 'set complaints 100' and examine the\n \t resulting complaints.  */\n-\n       if (objfile1 == objfile2)\n \t{\n-\t  /* Both sections came from the same objfile.  We are really confused.\n-\t     Sort on sequence order of sections within the objfile.  */\n+\t  /* Both sections came from the same objfile.  We are really\n+\t     confused.  Sort on sequence order of sections within the\n+\t     objfile.  The order of checks is important here, if we find a\n+\t     match on SECT2 first then either SECT2 is before SECT1, or,\n+\t     SECT2 == SECT1, in both cases we should return false.  The\n+\t     second case shouldn't occur during normal use, but std::sort\n+\t     does check that '!(a < a)' when compiled in debug mode.  */\n \n \t  const struct obj_section *osect;\n \n \t  ALL_OBJFILE_OSECTIONS (objfile1, osect)\n-\t    if (osect == sect1)\n-\t      return true;\n-\t    else if (osect == sect2)\n+\t    if (osect == sect2)\n \t      return false;\n+\t    else if (osect == sect1)\n+\t      return true;\n \n \t  /* We should have found one of the sections before getting here.  */\n \t  gdb_assert_not_reached (\"section not found\");"
    }
  ]
}