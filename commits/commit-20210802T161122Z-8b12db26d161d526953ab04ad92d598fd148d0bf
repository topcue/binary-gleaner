{
  "sha": "8b12db26d161d526953ab04ad92d598fd148d0bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGIxMmRiMjZkMTYxZDUyNjk1M2FiMDRhZDkyZDU5OGZkMTQ4ZDBiZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-07-01T17:15:41Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-02T16:11:22Z"
    },
    "message": "Refactor Ada resolution\n\nIn a subsequent patch, it will be convenient if an Ada expression\noperation can supply its own replacement object.  This patch refactors\nAda expression resolution to make this possible.",
    "tree": {
      "sha": "ee45b36636816b1bc09518ca86d9fa16291fe15d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ee45b36636816b1bc09518ca86d9fa16291fe15d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8b12db26d161d526953ab04ad92d598fd148d0bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b12db26d161d526953ab04ad92d598fd148d0bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8b12db26d161d526953ab04ad92d598fd148d0bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b12db26d161d526953ab04ad92d598fd148d0bf/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd4583499fda437680e974b2729a2873a08f656b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd4583499fda437680e974b2729a2873a08f656b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd4583499fda437680e974b2729a2873a08f656b"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 42,
    "deletions": 10
  },
  "files": [
    {
      "sha": "e600ec224e5c2e1d47393d488003e1d82db08e97",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=8b12db26d161d526953ab04ad92d598fd148d0bf",
      "patch": "@@ -95,6 +95,24 @@ struct ada_resolvable\n \t\t\tbool parse_completion,\n \t\t\tinnermost_block_tracker *tracker,\n \t\t\tstruct type *context_type) = 0;\n+\n+  /* Possibly replace this object with some other expression object.\n+     This is like 'resolve', but can return a replacement.\n+\n+     The default implementation calls 'resolve' and wraps this object\n+     in a function call if that call returns true.  OWNER is a\n+     reference to the unique pointer that owns the 'this'; it can be\n+     'move'd from to construct the replacement.\n+\n+     This should either return a new object, or OWNER -- never\n+     nullptr.  */\n+\n+  virtual operation_up replace (operation_up &&owner,\n+\t\t\t\tstruct expression *exp,\n+\t\t\t\tbool deprocedure_p,\n+\t\t\t\tbool parse_completion,\n+\t\t\t\tinnermost_block_tracker *tracker,\n+\t\t\t\tstruct type *context_type);\n };\n \n /* In Ada, some generic operations must be wrapped with a handler that"
    },
    {
      "sha": "afa085ec50f9bfa237a958ac403807bf47898e3f",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=8b12db26d161d526953ab04ad92d598fd148d0bf",
      "patch": "@@ -119,16 +119,13 @@ resolve (operation_up &&op, bool deprocedure_p, struct type *context_type)\n {\n   operation_up result = std::move (op);\n   ada_resolvable *res = dynamic_cast<ada_resolvable *> (result.get ());\n-  if (res != nullptr\n-      && res->resolve (pstate->expout.get (),\n-\t\t       deprocedure_p,\n-\t\t       pstate->parse_completion,\n-\t\t       pstate->block_tracker,\n-\t\t       context_type))\n-    result\n-      = make_operation<ada_funcall_operation> (std::move (result),\n-\t\t\t\t\t       std::vector<operation_up> ());\n-\n+  if (res != nullptr)\n+    return res->replace (std::move (result),\n+\t\t\t pstate->expout.get (),\n+\t\t\t deprocedure_p,\n+\t\t\t pstate->parse_completion,\n+\t\t\t pstate->block_tracker,\n+\t\t\t context_type);\n   return result;\n }\n "
    },
    {
      "sha": "a435543861c24fc9d73218053e6130f71a38ea73",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b12db26d161d526953ab04ad92d598fd148d0bf/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=8b12db26d161d526953ab04ad92d598fd148d0bf",
      "patch": "@@ -10097,6 +10097,23 @@ ada_binop_exp (struct type *expect_type,\n namespace expr\n {\n \n+/* See ada-exp.h.  */\n+\n+operation_up\n+ada_resolvable::replace (operation_up &&owner,\n+\t\t\t struct expression *exp,\n+\t\t\t bool deprocedure_p,\n+\t\t\t bool parse_completion,\n+\t\t\t innermost_block_tracker *tracker,\n+\t\t\t struct type *context_type)\n+{\n+  if (resolve (exp, deprocedure_p, parse_completion, tracker, context_type))\n+    return (make_operation<ada_funcall_operation>\n+\t    (std::move (owner),\n+\t     std::vector<operation_up> ()));\n+  return std::move (owner);\n+}\n+\n value *\n ada_wrapped_operation::evaluate (struct type *expect_type,\n \t\t\t\t struct expression *exp,"
    }
  ]
}