{
  "sha": "a15a5258b5b422645faca888c1279f249903512e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTE1YTUyNThiNWI0MjI2NDVmYWNhODg4YzEyNzlmMjQ5OTAzNTEyZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-16T16:50:03Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-19T10:15:04Z"
    },
    "message": "gdb: update command completion for watch, awatch, and rwatch\n\nSwitch over to using new option processing mechanism for watch,\nawatch, and rwatch commands.  Add command completion function.\n\nThis means that expression completion now works correctly when the\n-location flag is used.  So previously:\n\n  (gdb) watch var.<TAB><TAB>\n  .... list fields of var ....\n\nBut,\n\n  (gdb) watch -location var.<TAB><TAB>\n  .... list all symbols ....\n\nAfter this commit only the fields of 'var' are listed even when\n'-location' is passed.\n\nAnother benefit of this change is that '-location' will now complete.\n\nOne thing to note is that previous these commands accepted both\n'-location' or '-l' (these being synonyms).  The new option scheme\ndoesn't really allow for official short form flags, however, it does\nallow for non-ambiguous sub-strings to be used.  What this means is\nthat currently (as these commands only have the '-location' flag) the\nuser can still use '-l', so there's no change there.\n\nThe interactive help text for these commands now emphasises\n'-location' as the real option, but does mention that '-l' can also be\nused.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (struct watch_options): New struct.\n\t(watch_option_defs): New static global.\n\t(make_watch_options_def_group): New function.\n\t(watch_maybe_just_location): Convert option parsing.\n\t(watch_command_completer): New function.\n\t(_initialize_breakpoint): Build help text using options mechanism.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/completion.exp: Add new completion tests.",
    "tree": {
      "sha": "0c5a1b562fb89e7c3ed0768a90465e62778a3645",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c5a1b562fb89e7c3ed0768a90465e62778a3645"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a15a5258b5b422645faca888c1279f249903512e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a15a5258b5b422645faca888c1279f249903512e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a15a5258b5b422645faca888c1279f249903512e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a15a5258b5b422645faca888c1279f249903512e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e362716fc7df641de0405dbef16a52be5dea2d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e362716fc7df641de0405dbef16a52be5dea2d1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e362716fc7df641de0405dbef16a52be5dea2d1"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 123,
    "deletions": 31
  },
  "files": [
    {
      "sha": "afff5d5ee8abed08b8f6b0ed56030f6d607996eb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a15a5258b5b422645faca888c1279f249903512e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a15a5258b5b422645faca888c1279f249903512e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a15a5258b5b422645faca888c1279f249903512e",
      "patch": "@@ -1,3 +1,12 @@\n+2020-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* breakpoint.c (struct watch_options): New struct.\n+\t(watch_option_defs): New static global.\n+\t(make_watch_options_def_group): New function.\n+\t(watch_maybe_just_location): Convert option parsing.\n+\t(watch_command_completer): New function.\n+\t(_initialize_breakpoint): Build help text using options mechanism.\n+\n 2020-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* breakpoint.c (update_watchpoint): Pass 'false' not '0'."
    },
    {
      "sha": "27324a0c08deab4c5509fcf0084508e78560dc9a",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 99,
      "deletions": 31,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a15a5258b5b422645faca888c1279f249903512e/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a15a5258b5b422645faca888c1279f249903512e/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=a15a5258b5b422645faca888c1279f249903512e",
      "patch": "@@ -11082,20 +11082,74 @@ watch_command_wrapper (const char *arg, int from_tty, bool internal)\n   watch_command_1 (arg, hw_write, from_tty, 0, internal);\n }\n \n+/* Options for the watch, awatch, and rwatch commands.  */\n+\n+struct watch_options\n+{\n+  /* For -location.  */\n+  bool location = false;\n+};\n+\n+/* Definitions of options for the \"watch\", \"awatch\", and \"rwatch\" commands.\n+\n+   Historically GDB always accepted both '-location' and '-l' flags for\n+   these commands (both flags being synonyms).  When converting to the\n+   newer option scheme only '-location' is added here.  That's fine (for\n+   backward compatibility) as any non-ambiguous prefix of a flag will be\n+   accepted, so '-l', '-loc', are now all accepted.\n+\n+   What this means is that, if in the future, we add any new flag here\n+   that starts with '-l' then this will break backward compatibility, so\n+   please, don't do that!  */\n+\n+static const gdb::option::option_def watch_option_defs[] = {\n+  gdb::option::flag_option_def<watch_options> {\n+    \"location\",\n+    [] (watch_options *opt) { return &opt->location; },\n+    N_(\"\\\n+This evaluates EXPRESSION and watches the memory to which is refers.\\n\\\n+-l can be used as a short form of -location.\"),\n+  },\n+};\n+\n+/* Returns the option group used by 'watch', 'awatch', and 'rwatch'\n+   commands.  */\n+\n+static gdb::option::option_def_group\n+make_watch_options_def_group (watch_options *opts)\n+{\n+  return {{watch_option_defs}, opts};\n+}\n+\n /* A helper function that looks for the \"-location\" argument and then\n    calls watch_command_1.  */\n \n static void\n watch_maybe_just_location (const char *arg, int accessflag, int from_tty)\n {\n-  bool just_location = false;\n+  watch_options opts;\n+  auto grp = make_watch_options_def_group (&opts);\n+  gdb::option::process_options\n+    (&arg, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, grp);\n+  if (arg != nullptr && *arg == '\\0')\n+    arg = nullptr;\n+\n+  watch_command_1 (arg, accessflag, from_tty, opts.location, false);\n+}\n \n-  if (arg\n-      && (check_for_argument (&arg, \"-location\", sizeof (\"-location\") - 1)\n-\t  || check_for_argument (&arg, \"-l\", sizeof (\"-l\") - 1)))\n-    just_location = true;\n+/* Command completion for 'watch', 'awatch', and 'rwatch' commands.   */\n+static void\n+watch_command_completer (struct cmd_list_element *ignore,\n+\t\t\t completion_tracker &tracker,\n+\t\t\t const char *text, const char * /*word*/)\n+{\n+  const auto group = make_watch_options_def_group (nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, group))\n+    return;\n \n-  watch_command_1 (arg, accessflag, from_tty, just_location, false);\n+  const char *word = advance_to_expression_complete_word_point (tracker, text);\n+  expression_completer (ignore, tracker, text, word);\n }\n \n static void\n@@ -15914,32 +15968,46 @@ If REGEX is given, only stop for libraries matching the regular expression.\"),\n \t\t     CATCH_PERMANENT,\n \t\t     CATCH_TEMPORARY);\n \n-  c = add_com (\"watch\", class_breakpoint, watch_command, _(\"\\\n-Set a watchpoint for an expression.\\n\\\n-Usage: watch [-l|-location] EXPRESSION\\n\\\n-A watchpoint stops execution of your program whenever the value of\\n\\\n-an expression changes.\\n\\\n-If -l or -location is given, this evaluates EXPRESSION and watches\\n\\\n-the memory to which it refers.\"));\n-  set_cmd_completer (c, expression_completer);\n-\n-  c = add_com (\"rwatch\", class_breakpoint, rwatch_command, _(\"\\\n-Set a read watchpoint for an expression.\\n\\\n-Usage: rwatch [-l|-location] EXPRESSION\\n\\\n-A watchpoint stops execution of your program whenever the value of\\n\\\n-an expression is read.\\n\\\n-If -l or -location is given, this evaluates EXPRESSION and watches\\n\\\n-the memory to which it refers.\"));\n-  set_cmd_completer (c, expression_completer);\n-\n-  c = add_com (\"awatch\", class_breakpoint, awatch_command, _(\"\\\n-Set a watchpoint for an expression.\\n\\\n-Usage: awatch [-l|-location] EXPRESSION\\n\\\n+  const auto opts = make_watch_options_def_group (nullptr);\n+\n+  static const std::string watch_help = gdb::option::build_help (_(\"\\\n+Set a watchpoint for EXPRESSION.\\n\\\n+Usage: watch [-location] EXPRESSION\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\n\\\n+\\n\\\n A watchpoint stops execution of your program whenever the value of\\n\\\n-an expression is either read or written.\\n\\\n-If -l or -location is given, this evaluates EXPRESSION and watches\\n\\\n-the memory to which it refers.\"));\n-  set_cmd_completer (c, expression_completer);\n+an expression changes.\"), opts);\n+  c = add_com (\"watch\", class_breakpoint, watch_command,\n+\t       watch_help.c_str ());\n+  set_cmd_completer_handle_brkchars (c, watch_command_completer);\n+\n+  static const std::string rwatch_help = gdb::option::build_help (_(\"\\\n+Set a read watchpoint for EXPRESSION.\\n\\\n+Usage: rwatch [-location] EXPRESSION\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\n\\\n+\\n\\\n+A read watchpoint stops execution of your program whenever the value of\\n\\\n+an expression is read.\"), opts);\n+  c = add_com (\"rwatch\", class_breakpoint, rwatch_command,\n+\t       rwatch_help.c_str ());\n+  set_cmd_completer_handle_brkchars (c, watch_command_completer);\n+\n+  static const std::string awatch_help = gdb::option::build_help (_(\"\\\n+Set an access watchpoint for EXPRESSION.\\n\\\n+Usage: awatch [-location] EXPRESSION\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\n\\\n+\\n\\\n+An access watchpoint stops execution of your program whenever the value\\n\\\n+of an expression is either read or written.\"), opts);\n+  c = add_com (\"awatch\", class_breakpoint, awatch_command,\n+\t       awatch_help.c_str ());\n+  set_cmd_completer_handle_brkchars (c, watch_command_completer);\n \n   add_info (\"watchpoints\", info_watchpoints_command, _(\"\\\n Status of specified watchpoints (all watchpoints if no argument).\"));"
    },
    {
      "sha": "7b01010520b31b99d10b00a0e399d0a4591e31d6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a15a5258b5b422645faca888c1279f249903512e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a15a5258b5b422645faca888c1279f249903512e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a15a5258b5b422645faca888c1279f249903512e",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/completion.exp: Add new completion tests.\n+\n 2020-11-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.mi/mi-nonstop-exit.exp: Enable non-stop through GDBFLAGS."
    },
    {
      "sha": "1c5d03b217c53603178d4685553a01d8569fffe4",
      "filename": "gdb/testsuite/gdb.base/completion.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a15a5258b5b422645faca888c1279f249903512e/gdb/testsuite/gdb.base/completion.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a15a5258b5b422645faca888c1279f249903512e/gdb/testsuite/gdb.base/completion.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/completion.exp?ref=a15a5258b5b422645faca888c1279f249903512e",
      "patch": "@@ -951,3 +951,14 @@ test_gdb_complete_multiple \"p -array on -- /d some_union_global.\" \\\n \t\"f1\"\n \t\"f2\"\n     }\n+\n+# Check the watch commands can all complete, with and without flags.\n+foreach_with_prefix cmd { \"watch\" \"awatch\" \"rwatch\" } {\n+    foreach_with_prefix opt { \"\" \"-l\" \"-location\" } {\n+\ttest_gdb_complete_multiple \"${cmd} ${opt} some_union_global.\" \\\n+\t    \"\" \"f\" {\n+\t\t\"f1\"\n+\t\t\"f2\"\n+\t    }\n+    }\n+}"
    }
  ]
}