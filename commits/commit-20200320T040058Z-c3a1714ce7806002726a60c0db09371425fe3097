{
  "sha": "c3a1714ce7806002726a60c0db09371425fe3097",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzNhMTcxNGNlNzgwNjAwMjcyNmE2MGMwZGIwOTM3MTQyNWZlMzA5Nw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-20T04:00:19Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-20T04:00:58Z"
    },
    "message": "plugin: Use LDPT_ADD_SYMBOLS_V2 to get symbol type\n\nSince LTO plugin may generate more than one ltrans.o file from one input\nIR object as LTO wrapper ignores -flto-partition=none:\n\nlto-wrapper.c:608:\n\n   604          /* Drop arguments that we want to take from the link line.  */\n   605          case OPT_flto_:\n   606          case OPT_flto:\n   607          case OPT_flto_partition_:\n   608            continue;\n\nthe LTO wrapper approach is not only slow but also unreliable.  Since\nthe LTO plugin API has been extended to add LDPT_ADD_SYMBOLS_V2 with\nsymbol type and section kind, we can use LDPT_ADD_SYMBOLS_V2 to get\nsymbol type, instead of invoking the LTO wrapper.\n\n\tPR binutils/25640\n\t* plugin.c (plugin_list_entry): Add has_symbol_type.\n\t(add_symbols_v2): New function.\n\t(bfd_plugin_open_input): Don't invoke LTO wrapper if LTO plugin\n\tprovides symbol type.\n\t(try_load_plugin): Add LDPT_ADD_SYMBOLS_V2.\n\t(bfd_plugin_canonicalize_symtab): Use LTO plugin symbol type if\n\tavailable.",
    "tree": {
      "sha": "99377ebd529a95e5f653d10d02e48af905d1e3ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/99377ebd529a95e5f653d10d02e48af905d1e3ea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3a1714ce7806002726a60c0db09371425fe3097",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3a1714ce7806002726a60c0db09371425fe3097",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3a1714ce7806002726a60c0db09371425fe3097",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3a1714ce7806002726a60c0db09371425fe3097/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c02d66610b3b79f6fb5052e8890969bc7185b7be"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 63,
    "deletions": 14
  },
  "files": [
    {
      "sha": "47ae881c2536ed1df8d56fe390c46d75afaa64da",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3a1714ce7806002726a60c0db09371425fe3097/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3a1714ce7806002726a60c0db09371425fe3097/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c3a1714ce7806002726a60c0db09371425fe3097",
      "patch": "@@ -1,3 +1,14 @@\n+2020-03-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25640\n+\t* plugin.c (plugin_list_entry): Add has_symbol_type.\n+\t(add_symbols_v2): New function.\n+\t(bfd_plugin_open_input): Don't invoke LTO wrapper if LTO plugin\n+\tprovides symbol type.\n+\t(try_load_plugin): Add LDPT_ADD_SYMBOLS_V2.\n+\t(bfd_plugin_canonicalize_symtab): Use LTO plugin symbol type if\n+\tavailable.\n+\n 2020-03-20  Alan Modra  <amodra@gmail.com>\n \n \t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Ensure size is large"
    },
    {
      "sha": "13549d24e7ef15ee295b80aa8742c7f02deb524d",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 52,
      "deletions": 14,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3a1714ce7806002726a60c0db09371425fe3097/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3a1714ce7806002726a60c0db09371425fe3097/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=c3a1714ce7806002726a60c0db09371425fe3097",
      "patch": "@@ -136,6 +136,7 @@ struct plugin_list_entry\n   asymbol **real_syms;\n   int lto_nsyms;\n   const struct ld_plugin_symbol *lto_syms;\n+  bfd_boolean has_symbol_type;\n \n   struct plugin_list_entry *next;\n \n@@ -503,6 +504,14 @@ add_symbols (void * handle,\n   return LDPS_OK;\n }\n \n+static enum ld_plugin_status\n+add_symbols_v2 (void *handle, int nsyms,\n+\t\tconst struct ld_plugin_symbol *syms)\n+{\n+  current_plugin->has_symbol_type = TRUE;\n+  return add_symbols (handle, nsyms, syms);\n+}\n+\n int\n bfd_plugin_open_input (bfd *ibfd, struct ld_plugin_input_file *file)\n {\n@@ -560,7 +569,8 @@ try_claim (bfd *abfd)\n       current_plugin->claim_file (&file, &claimed);\n       if (claimed)\n \t{\n-\t  if (current_plugin->all_symbols_read)\n+\t  if (current_plugin->all_symbols_read\n+\t      && !current_plugin->has_symbol_type)\n \t    {\n \t      struct plugin_data_struct *plugin_data\n \t\t= abfd->tdata.plugin_data;\n@@ -602,7 +612,7 @@ try_load_plugin (const char *pname,\n \t\t bfd *abfd, bfd_boolean build_list_p)\n {\n   void *plugin_handle;\n-  struct ld_plugin_tv tv[12];\n+  struct ld_plugin_tv tv[13];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n@@ -665,6 +675,10 @@ try_load_plugin (const char *pname,\n   tv[i].tv_tag = LDPT_ADD_SYMBOLS;\n   tv[i].tv_u.tv_add_symbols = add_symbols;\n \n+  ++i;\n+  tv[i].tv_tag = LDPT_ADD_SYMBOLS_V2;\n+  tv[i].tv_u.tv_add_symbols = add_symbols_v2;\n+\n   if (get_lto_wrapper (plugin_list_iter))\n     {\n       ++i;\n@@ -977,9 +991,15 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n   struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;\n   long nsyms = plugin_data->nsyms;\n   const struct ld_plugin_symbol *syms = plugin_data->syms;\n-  static asection fake_section\n-    = BFD_FAKE_SECTION (fake_section, NULL, \"plug\", 0,\n+  static asection fake_text_section\n+    = BFD_FAKE_SECTION (fake_text_section, NULL, \"plug\", 0,\n \t\t\tSEC_ALLOC | SEC_LOAD | SEC_CODE | SEC_HAS_CONTENTS);\n+  static asection fake_data_section\n+    = BFD_FAKE_SECTION (fake_data_section, NULL, \"plug\", 0,\n+\t\t\tSEC_ALLOC | SEC_LOAD | SEC_DATA | SEC_HAS_CONTENTS);\n+  static asection fake_bss_section\n+    = BFD_FAKE_SECTION (fake_bss_section, NULL, \"plug\", 0,\n+\t\t\tSEC_ALLOC);\n   static asection fake_common_section\n     = BFD_FAKE_SECTION (fake_common_section, NULL, \"plug\", 0, SEC_IS_COMMON);\n   int i, j;\n@@ -1014,16 +1034,34 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n \t  break;\n \tcase LDPK_DEF:\n \tcase LDPK_WEAKDEF:\n-\t  s->section = &fake_section;\n-\t  if (real_nsyms)\n-\t    /* Use real LTO symbols if possible.  */\n-\t    for (j = 0; j < real_nsyms; j++)\n-\t      if (real_syms[j]->name\n-\t\t  && strcmp (syms[i].name, real_syms[j]->name) == 0)\n-\t\t{\n-\t\t  s->section = real_syms[j]->section;\n-\t\t  break;\n-\t\t}\n+\t  if (current_plugin->has_symbol_type)\n+\t    switch (syms[i].symbol_type)\n+\t      {\n+\t      case LDST_UNKNOWN:\n+\t\t/* What is the best fake section for LDST_UNKNOWN?  */\n+\t      case LDST_FUNCTION:\n+\t\ts->section = &fake_text_section;\n+\t\tbreak;\n+\t      case LDST_VARIABLE:\n+\t\tif (syms[i].section_kind == LDSSK_BSS)\n+\t\t  s->section = &fake_bss_section;\n+\t\telse\n+\t\t  s->section = &fake_data_section;\n+\t\tbreak;\n+\t      }\n+\t  else\n+\t    {\n+\t      s->section = &fake_text_section;\n+\t      if (real_nsyms)\n+\t\t/* Use real LTO symbols if possible.  */\n+\t\tfor (j = 0; j < real_nsyms; j++)\n+\t\t  if (real_syms[j]->name\n+\t\t      && strcmp (syms[i].name, real_syms[j]->name) == 0)\n+\t\t    {\n+\t\t      s->section = real_syms[j]->section;\n+\t\t      break;\n+\t\t    }\n+\t    }\n \t  break;\n \tdefault:\n \t  BFD_ASSERT (0);"
    }
  ]
}