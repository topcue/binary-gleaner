{
  "sha": "273dadf2c20b93ef579367c42c255fcf4a3a2522",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjczZGFkZjJjMjBiOTNlZjU3OTM2N2M0MmMyNTVmY2Y0YTNhMjUyMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-28T04:33:35Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-13T00:46:53Z"
    },
    "message": "gdb: optimize check for resumed threads with pending wait status in maybe_set_commit_resumed_all_targets\n\nConsider a test case where many threads (thousands) keep hitting a\nbreakpoint whose condition evaluates to false.\nmaybe_set_commit_resumed_all_targets is called at each handled event,\nwhen the scoped_disable_commit_resumed object in fetch_inferior_event is\nreset_and_commit-ed.  One particularly expensive check in there is\nwhether the target has at least one resumed thread with a pending wait\nstatus (in which case, we don't want to commit the resumed threads, as\nwe want to consume this status first).  It is currently implemented as\nwalking all threads of the target.\n\nSince we now maintain a per-target list of resumed threads with pending\nstatus, we can do this check efficiently, by checking whether that list\nis empty or not.\n\nAdd the process_stratum_target::has_resumed_with_pending_wait_status\nmethod for this, and use it in maybe_set_commit_resumed_all_targets.\n\nChange-Id: Ia1595baa1b358338f94fc3cb3af7f27092dad5b6",
    "tree": {
      "sha": "d1870ed8113000565dc093003a46b7bc4182175c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1870ed8113000565dc093003a46b7bc4182175c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/273dadf2c20b93ef579367c42c255fcf4a3a2522",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/273dadf2c20b93ef579367c42c255fcf4a3a2522",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/273dadf2c20b93ef579367c42c255fcf4a3a2522",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/273dadf2c20b93ef579367c42c255fcf4a3a2522/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a66f72981979a1bda60805b8554e0c78c4a39a21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a66f72981979a1bda60805b8554e0c78c4a39a21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a66f72981979a1bda60805b8554e0c78c4a39a21"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 6,
    "deletions": 9
  },
  "files": [
    {
      "sha": "bec8e83e1936ab2a22e71665175e30e25f30c28c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/273dadf2c20b93ef579367c42c255fcf4a3a2522/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/273dadf2c20b93ef579367c42c255fcf4a3a2522/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=273dadf2c20b93ef579367c42c255fcf4a3a2522",
      "patch": "@@ -2800,15 +2800,7 @@ maybe_set_commit_resumed_all_targets ()\n \t status to report, handle it before requiring the target to\n \t commit its resumed threads: handling the status might lead to\n \t resuming more threads.  */\n-      bool has_thread_with_pending_status = false;\n-      for (thread_info *thread : all_non_exited_threads (proc_target))\n-\tif (thread->resumed () && thread->has_pending_waitstatus ())\n-\t  {\n-\t    has_thread_with_pending_status = true;\n-\t    break;\n-\t  }\n-\n-      if (has_thread_with_pending_status)\n+      if (proc_target->has_resumed_with_pending_wait_status ())\n \t{\n \t  infrun_debug_printf (\"not requesting commit-resumed for target %s, a\"\n \t\t\t       \" thread has a pending waitstatus\","
    },
    {
      "sha": "6bd8bc37b5ec1aa1faf979334dd578a9e6c5316d",
      "filename": "gdb/process-stratum-target.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/273dadf2c20b93ef579367c42c255fcf4a3a2522/gdb/process-stratum-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/273dadf2c20b93ef579367c42c255fcf4a3a2522/gdb/process-stratum-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/process-stratum-target.h?ref=273dadf2c20b93ef579367c42c255fcf4a3a2522",
      "patch": "@@ -88,6 +88,11 @@ class process_stratum_target : public target_ops\n      target's \"resumed with pending wait status\" list.  */\n   void maybe_remove_resumed_with_pending_wait_status (thread_info *thread);\n \n+  /* Return true if this target has at least one resumed thread with a pending\n+     wait status.  */\n+  bool has_resumed_with_pending_wait_status () const\n+  { return !m_resumed_with_pending_wait_status.empty (); }\n+\n   /* The connection number.  Visible in \"info connections\".  */\n   int connection_number = 0;\n "
    }
  ]
}