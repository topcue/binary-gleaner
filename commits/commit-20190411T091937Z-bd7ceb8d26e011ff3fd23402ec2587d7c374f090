{
  "sha": "bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ3Y2ViOGQyNmUwMTFmZjNmZDIzNDAyZWMyNTg3ZDdjMzc0ZjA5MA==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-04-11T09:19:37Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-04-11T09:19:37Z"
    },
    "message": "[BINUTILS, AArch64, 2/2] Update Store Allocation Tag instructions\n\nThis patch updates the Store allocation tags instructions in\nArmv8.5-A Memory Tagging Extension. This is part of the changes\nthat have been introduced recently in the 00bet10 release\n\nAll of these instructions have an updated register operand (Xt -> <Xt|SP>)\n\n- STG <Xt|SP>, [<Xn|SP>, #<simm>]\n- STG <Xt|SP>, [<Xn|SP>, #<simm>]!\n- STG <Xt|SP>, [<Xn|SP>], #<simm>\n- STZG <Xt|SP>, [<Xn|SP>, #<simm>]\n- STZG <Xt|SP>, [<Xn|SP>, #<simm>]!\n- STZG <Xt|SP>, [<Xn|SP>], #<simm>\n- ST2G <Xt|SP>, [<Xn|SP>, #<simm>]\n- ST2G <Xt|SP>, [<Xn|SP>, #<simm>]!\n- ST2G <Xt|SP>, [<Xn|SP>], #<simm>\n- STZ2G <Xt|SP>, [<Xn|SP>, #<simm>]\n- STZ2G <Xt|SP>, [<Xn|SP>, #<simm>]!\n- STZ2G <Xt|SP>, [<Xn|SP>], #<simm>\n\nIn order to accept <Rt|SP> a new operand type Rt_SP is introduced which has\nthe same field as FLD_Rt but follows other semantics of Rn_SP.\n\n*** gas/ChangeLog ***\n\n2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-aarch64.c (process_omitted_operand): Add case for\n\tAARCH64_OPND_Rt_SP.\n\t(parse_operands): Likewise.\n\t* testsuite/gas/aarch64/armv8_5-a-memtag.d: Update tests.\n\t* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.\n\t* testsuite/gas/aarch64/illegal-memtag.l: Likewise.\n\t* testsuite/gas/aarch64/illegal-memtag.s: Likewise.\n\n*** include/ChangeLog ***\n\n2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n\n\t* opcode/aarch64.h (enum aarch64_opnd): Add AARCH64_OPND_Rt_SP.\n\n*** opcodes/ChangeLog ***\n\n2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n\n\t* aarch64-opc.c (aarch64_print_operand): Add case for\n\tAARCH64_OPND_Rt_SP.\n\t(verify_constraints): Likewise.\n\t* aarch64-tbl.h (QL_LDST_AT): Update to add SP qualifier.\n\t(struct aarch64_opcode): Update stg, stzg, st2g, stz2g instructions\n\tto accept Rt|SP as first operand.\n\t(AARCH64_OPERANDS): Add new Rt_SP.\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.",
    "tree": {
      "sha": "c840dda3b050e9fdb75bdfd334eb121796c24f5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c840dda3b050e9fdb75bdfd334eb121796c24f5d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e54010f1aeb050cb9d65862a0afe9095a7a85f27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e54010f1aeb050cb9d65862a0afe9095a7a85f27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e54010f1aeb050cb9d65862a0afe9095a7a85f27"
    }
  ],
  "stats": {
    "total": 434,
    "additions": 236,
    "deletions": 198
  },
  "files": [
    {
      "sha": "253f1cff403928683fc407444dcf9de7d7258953",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-aarch64.c (process_omitted_operand): Add case for\n+\tAARCH64_OPND_Rt_SP.\n+\t(parse_operands): Likewise.\n+\t* testsuite/gas/aarch64/armv8_5-a-memtag.d: Update tests.\n+\t* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.\n+\t* testsuite/gas/aarch64/illegal-memtag.l: Likewise.\n+\t* testsuite/gas/aarch64/illegal-memtag.s: Likewise.\n+\n 2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n \n \t* testsuite/gas/aarch64/armv8_5-a-memtag.d: New tests for ldgm and stgm."
    },
    {
      "sha": "0f03a28d94bc9a073ba1a9be0d9bbcaa787825a3",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -5135,6 +5135,7 @@ process_omitted_operand (enum aarch64_opnd type, const aarch64_opcode *opcode,\n     case AARCH64_OPND_Rm:\n     case AARCH64_OPND_Rt:\n     case AARCH64_OPND_Rt2:\n+    case AARCH64_OPND_Rt_SP:\n     case AARCH64_OPND_Rs:\n     case AARCH64_OPND_Ra:\n     case AARCH64_OPND_Rt_SYS:\n@@ -5511,6 +5512,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \n \tcase AARCH64_OPND_Rd_SP:\n \tcase AARCH64_OPND_Rn_SP:\n+\tcase AARCH64_OPND_Rt_SP:\n \tcase AARCH64_OPND_SVE_Rn_SP:\n \tcase AARCH64_OPND_Rm_SP:\n \t  po_int_reg_or_fail (REG_TYPE_R_SP);"
    },
    {
      "sha": "37981bc14d3f567e53ee38bf547649afdb205928",
      "filename": "gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -57,64 +57,64 @@ Disassembly of section \\.text:\n .*:\tbadf001f \tcmpp\tx0, sp\n .*:\td9200800 \tstg\tx0, \\[x0\\]\n .*:\td9200b60 \tstg\tx0, \\[x27\\]\n-.*:\td920081f \tstg\txzr, \\[x0\\]\n+.*:\td920081f \tstg\tsp, \\[x0\\]\n .*:\td93fb81b \tstg\tx27, \\[x0, #-80\\]\n .*:\td9200c00 \tstg\tx0, \\[x0, #0\\]!\n-.*:\td9200c1f \tstg\txzr, \\[x0, #0\\]!\n+.*:\td9200c1f \tstg\tsp, \\[x0, #0\\]!\n .*:\td920ac1b \tstg\tx27, \\[x0, #160\\]!\n .*:\td9200400 \tstg\tx0, \\[x0\\], #0\n-.*:\td920041f \tstg\txzr, \\[x0\\], #0\n+.*:\td920041f \tstg\tsp, \\[x0\\], #0\n .*:\td93a641b \tstg\tx27, \\[x0\\], #-1440\n .*:\td92ffbe0 \tstg\tx0, \\[sp, #4080\\]\n-.*:\td92ffbff \tstg\txzr, \\[sp, #4080\\]\n+.*:\td92ffbff \tstg\tsp, \\[sp, #4080\\]\n .*:\td9300bfb \tstg\tx27, \\[sp, #-4096\\]\n .*:\td92fffe0 \tstg\tx0, \\[sp, #4080\\]!\n-.*:\td93007ff \tstg\txzr, \\[sp\\], #-4096\n+.*:\td93007ff \tstg\tsp, \\[sp\\], #-4096\n .*:\td9600800 \tstzg\tx0, \\[x0\\]\n .*:\td9600b60 \tstzg\tx0, \\[x27\\]\n-.*:\td960081f \tstzg\txzr, \\[x0\\]\n+.*:\td960081f \tstzg\tsp, \\[x0\\]\n .*:\td97fb81b \tstzg\tx27, \\[x0, #-80\\]\n .*:\td9600c00 \tstzg\tx0, \\[x0, #0\\]!\n-.*:\td9600c1f \tstzg\txzr, \\[x0, #0\\]!\n+.*:\td9600c1f \tstzg\tsp, \\[x0, #0\\]!\n .*:\td960ac1b \tstzg\tx27, \\[x0, #160\\]!\n .*:\td9600400 \tstzg\tx0, \\[x0\\], #0\n-.*:\td960041f \tstzg\txzr, \\[x0\\], #0\n+.*:\td960041f \tstzg\tsp, \\[x0\\], #0\n .*:\td97a641b \tstzg\tx27, \\[x0\\], #-1440\n .*:\td96ffbe0 \tstzg\tx0, \\[sp, #4080\\]\n-.*:\td96ffbff \tstzg\txzr, \\[sp, #4080\\]\n+.*:\td96ffbff \tstzg\tsp, \\[sp, #4080\\]\n .*:\td9700bfb \tstzg\tx27, \\[sp, #-4096\\]\n .*:\td96fffe0 \tstzg\tx0, \\[sp, #4080\\]!\n-.*:\td97007ff \tstzg\txzr, \\[sp\\], #-4096\n+.*:\td97007ff \tstzg\tsp, \\[sp\\], #-4096\n .*:\td9a00800 \tst2g\tx0, \\[x0\\]\n .*:\td9a00b60 \tst2g\tx0, \\[x27\\]\n-.*:\td9a0081f \tst2g\txzr, \\[x0\\]\n+.*:\td9a0081f \tst2g\tsp, \\[x0\\]\n .*:\td9bfb81b \tst2g\tx27, \\[x0, #-80\\]\n .*:\td9a00c00 \tst2g\tx0, \\[x0, #0\\]!\n-.*:\td9a00c1f \tst2g\txzr, \\[x0, #0\\]!\n+.*:\td9a00c1f \tst2g\tsp, \\[x0, #0\\]!\n .*:\td9a0ac1b \tst2g\tx27, \\[x0, #160\\]!\n .*:\td9a00400 \tst2g\tx0, \\[x0\\], #0\n-.*:\td9a0041f \tst2g\txzr, \\[x0\\], #0\n+.*:\td9a0041f \tst2g\tsp, \\[x0\\], #0\n .*:\td9ba641b \tst2g\tx27, \\[x0\\], #-1440\n .*:\td9affbe0 \tst2g\tx0, \\[sp, #4080\\]\n-.*:\td9affbff \tst2g\txzr, \\[sp, #4080\\]\n+.*:\td9affbff \tst2g\tsp, \\[sp, #4080\\]\n .*:\td9b00bfb \tst2g\tx27, \\[sp, #-4096\\]\n .*:\td9afffe0 \tst2g\tx0, \\[sp, #4080\\]!\n-.*:\td9b007ff \tst2g\txzr, \\[sp\\], #-4096\n+.*:\td9b007ff \tst2g\tsp, \\[sp\\], #-4096\n .*:\td9e00800 \tstz2g\tx0, \\[x0\\]\n .*:\td9e00b60 \tstz2g\tx0, \\[x27\\]\n-.*:\td9e0081f \tstz2g\txzr, \\[x0\\]\n+.*:\td9e0081f \tstz2g\tsp, \\[x0\\]\n .*:\td9ffb81b \tstz2g\tx27, \\[x0, #-80\\]\n .*:\td9e00c00 \tstz2g\tx0, \\[x0, #0\\]!\n-.*:\td9e00c1f \tstz2g\txzr, \\[x0, #0\\]!\n+.*:\td9e00c1f \tstz2g\tsp, \\[x0, #0\\]!\n .*:\td9e0ac1b \tstz2g\tx27, \\[x0, #160\\]!\n .*:\td9e00400 \tstz2g\tx0, \\[x0\\], #0\n-.*:\td9e0041f \tstz2g\txzr, \\[x0\\], #0\n+.*:\td9e0041f \tstz2g\tsp, \\[x0\\], #0\n .*:\td9fa641b \tstz2g\tx27, \\[x0\\], #-1440\n .*:\td9effbe0 \tstz2g\tx0, \\[sp, #4080\\]\n-.*:\td9effbff \tstz2g\txzr, \\[sp, #4080\\]\n+.*:\td9effbff \tstz2g\tsp, \\[sp, #4080\\]\n .*:\td9f00bfb \tstz2g\tx27, \\[sp, #-4096\\]\n .*:\td9efffe0 \tstz2g\tx0, \\[sp, #4080\\]!\n-.*:\td9f007ff \tstz2g\txzr, \\[sp\\], #-4096\n+.*:\td9f007ff \tstz2g\tsp, \\[sp\\], #-4096\n .*:\t69000000 \tstgp\tx0, x0, \\[x0\\]\n .*:\t69006c00 \tstgp\tx0, x27, \\[x0\\]\n .*:\t6900001b \tstgp\tx27, x0, \\[x0\\]"
    },
    {
      "sha": "bd01d73b00a0c4398f45415df74840edeb8ac4fb",
      "filename": "gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -19,19 +19,19 @@ func:\n \t.macro expand_stg op\n \t\\op x0, [x0, #0]\n \t\\op x0, [x27, #0]\n-\t\\op xzr, [x0, #0]\n+\t\\op sp, [x0, #0]\n \t\\op x27, [x0, #-80]\n \t\\op x0, [x0, #0]!\n-\t\\op xzr, [x0, #0]!\n+\t\\op sp, [x0, #0]!\n \t\\op x27, [x0, #160]!\n \t\\op x0, [x0], #0\n-\t\\op xzr, [x0], #0\n+\t\\op sp, [x0], #0\n \t\\op x27, [x0], #-1440\n \t\\op x0, [sp, #4080]\n-\t\\op xzr, [sp, #4080]\n+\t\\op sp, [sp, #4080]\n \t\\op x27, [sp, #-4096]\n \t\\op x0, [sp, #4080]!\n-\t\\op xzr, [sp], #-4096\n+\t\\op sp, [sp], #-4096\n \t.endm\n \n \t.macro expand_ldg_bulk op"
    },
    {
      "sha": "67ec2831a52c3c14cd23b3c239a0a534cef250fd",
      "filename": "gas/testsuite/gas/aarch64/illegal-memtag.l",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/illegal-memtag.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/illegal-memtag.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-memtag.l?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -38,10 +38,10 @@\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `st2g x2,\\[xzr,#0\\]!'\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stzg x2,\\[xzr\\],#0'\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stz2g x2,\\[xzr,#0\\]'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stg sp,\\[x2,#0\\]'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `st2g sp,\\[x2,#0\\]!'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stzg sp,\\[x2\\],#0'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stz2g sp,\\[x2,#0\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stg xzr,\\[x2,#0\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `st2g xzr,\\[x2,#0\\]!'\n+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stzg xzr,\\[x2\\],#0'\n+[^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `stz2g xzr,\\[x2,#0\\]'\n [^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stgp sp,x2,\\[x3\\]'\n [^:]*:[0-9]+: Error: operand 2 must be an integer register -- `stgp x1,sp,\\[x3\\]'\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 3 -- `stgp x0,x0,\\[xzr\\]'"
    },
    {
      "sha": "aa574f40f41fd10e5d138df3e38fb7512b93d764",
      "filename": "gas/testsuite/gas/aarch64/illegal-memtag.s",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/illegal-memtag.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/gas/testsuite/gas/aarch64/illegal-memtag.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-memtag.s?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -51,10 +51,10 @@ func:\n \tst2g x2, [xzr, #0]!\n \tstzg x2, [xzr], #0\n \tstz2g x2, [xzr, #0]\n-\tstg sp, [x2, #0]\n-\tst2g sp, [x2, #0]!\n-\tstzg sp, [x2], #0\n-\tstz2g sp, [x2, #0]\n+\tstg xzr, [x2, #0]\n+\tst2g xzr, [x2, #0]!\n+\tstzg xzr, [x2], #0\n+\tstz2g xzr, [x2, #0]\n \tstgp sp, x2, [x3]\n \tstgp x1, sp, [x3]\n \tstgp x0, x0, [xzr]"
    },
    {
      "sha": "b0c92cf981925a55fab053c9b7682c1906948ae5",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): Add AARCH64_OPND_Rt_SP.\n+\n 2019-04-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elf/common.h (GNU_PROPERTY_X86_ISA_1_AVX512_BF16): New."
    },
    {
      "sha": "5dc5fb750a234928c7b41d771c27c8b32ac49bcb",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -184,6 +184,7 @@ enum aarch64_opnd\n   AARCH64_OPND_Rm,\t/* Integer register as source.  */\n   AARCH64_OPND_Rt,\t/* Integer register used in ld/st instructions.  */\n   AARCH64_OPND_Rt2,\t/* Integer register used in ld/st pair instructions.  */\n+  AARCH64_OPND_Rt_SP,\t/* Integer Rt or SP used in STG instructions.  */\n   AARCH64_OPND_Rs,\t/* Integer register used in ld/st exclusive.  */\n   AARCH64_OPND_Ra,\t/* Integer register used in ddp_3src instructions.  */\n   AARCH64_OPND_Rt_SYS,\t/* Integer register used in system instructions.  */"
    },
    {
      "sha": "a04c4defb46b639eb25b7d8ba0cc683d94b1dbab",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -1,3 +1,16 @@\n+2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* aarch64-opc.c (aarch64_print_operand): Add case for\n+\tAARCH64_OPND_Rt_SP.\n+\t(verify_constraints): Likewise.\n+\t* aarch64-tbl.h (QL_LDST_AT): Update to add SP qualifier.\n+\t(struct aarch64_opcode): Update stg, stzg, st2g, stz2g instructions\n+\tto accept Rt|SP as first operand.\n+\t(AARCH64_OPERANDS): Add new Rt_SP.\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\n 2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n \n \t* aarch64-asm-2.c: Regenerated."
    },
    {
      "sha": "f361556cb6a1af427aab4c67d442d729fa5a2b07",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 77,
      "deletions": 76,
      "changes": 153,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -613,11 +613,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 9:\n     case 10:\n     case 11:\n-    case 15:\n+    case 12:\n     case 16:\n     case 17:\n     case 18:\n-    case 20:\n+    case 19:\n     case 21:\n     case 22:\n     case 23:\n@@ -627,7 +627,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 27:\n     case 28:\n     case 29:\n-    case 159:\n+    case 30:\n     case 160:\n     case 161:\n     case 162:\n@@ -637,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 166:\n     case 167:\n     case 168:\n-    case 181:\n+    case 169:\n     case 182:\n     case 183:\n     case 184:\n@@ -646,34 +646,34 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 193:\n-    case 196:\n+    case 190:\n+    case 194:\n+    case 197:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n-    case 13:\n-      return aarch64_ins_reg_extended (self, info, code, inst, errors);\n     case 14:\n+      return aarch64_ins_reg_extended (self, info, code, inst, errors);\n+    case 15:\n       return aarch64_ins_reg_shifted (self, info, code, inst, errors);\n-    case 19:\n+    case 20:\n       return aarch64_ins_ft (self, info, code, inst, errors);\n-    case 30:\n     case 31:\n     case 32:\n     case 33:\n-    case 198:\n-      return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 34:\n-      return aarch64_ins_reglist (self, info, code, inst, errors);\n+    case 199:\n+      return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n-      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);\n+      return aarch64_ins_reglist (self, info, code, inst, errors);\n     case 36:\n-      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);\n+      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);\n     case 37:\n-      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);\n+      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);\n     case 38:\n+      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);\n     case 39:\n     case 40:\n     case 41:\n-    case 51:\n+    case 42:\n     case 52:\n     case 53:\n     case 54:\n@@ -689,104 +689,104 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 64:\n     case 65:\n     case 66:\n-    case 78:\n+    case 67:\n     case 79:\n     case 80:\n     case 81:\n-    case 156:\n-    case 158:\n-    case 173:\n+    case 82:\n+    case 157:\n+    case 159:\n     case 174:\n     case 175:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n+    case 181:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n-    case 42:\n     case 43:\n-      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);\n     case 44:\n+      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);\n     case 45:\n     case 46:\n+    case 47:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n-    case 50:\n-    case 147:\n+    case 51:\n+    case 148:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n-    case 67:\n-    case 154:\n-      return aarch64_ins_limm (self, info, code, inst, errors);\n     case 68:\n-      return aarch64_ins_aimm (self, info, code, inst, errors);\n+    case 155:\n+      return aarch64_ins_limm (self, info, code, inst, errors);\n     case 69:\n-      return aarch64_ins_imm_half (self, info, code, inst, errors);\n+      return aarch64_ins_aimm (self, info, code, inst, errors);\n     case 70:\n+      return aarch64_ins_imm_half (self, info, code, inst, errors);\n+    case 71:\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n-    case 72:\n     case 73:\n-    case 152:\n-      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 74:\n-    case 151:\n-      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n+    case 153:\n+      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n+    case 152:\n+      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n+    case 77:\n       return aarch64_ins_cond (self, info, code, inst, errors);\n-    case 82:\n-    case 91:\n-      return aarch64_ins_addr_simple (self, info, code, inst, errors);\n     case 83:\n-      return aarch64_ins_addr_regoff (self, info, code, inst, errors);\n+    case 92:\n+      return aarch64_ins_addr_simple (self, info, code, inst, errors);\n     case 84:\n+      return aarch64_ins_addr_regoff (self, info, code, inst, errors);\n     case 85:\n     case 86:\n-    case 88:\n-    case 90:\n-      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n     case 87:\n-      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n     case 89:\n+    case 91:\n+      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n+    case 88:\n+      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n+    case 90:\n       return aarch64_ins_addr_uimm12 (self, info, code, inst, errors);\n-    case 92:\n-      return aarch64_ins_addr_offset (self, info, code, inst, errors);\n     case 93:\n-      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);\n+      return aarch64_ins_addr_offset (self, info, code, inst, errors);\n     case 94:\n-      return aarch64_ins_sysreg (self, info, code, inst, errors);\n+      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);\n     case 95:\n-      return aarch64_ins_pstatefield (self, info, code, inst, errors);\n+      return aarch64_ins_sysreg (self, info, code, inst, errors);\n     case 96:\n+      return aarch64_ins_pstatefield (self, info, code, inst, errors);\n     case 97:\n     case 98:\n     case 99:\n     case 100:\n-      return aarch64_ins_sysins_op (self, info, code, inst, errors);\n     case 101:\n+      return aarch64_ins_sysins_op (self, info, code, inst, errors);\n     case 102:\n-      return aarch64_ins_barrier (self, info, code, inst, errors);\n     case 103:\n-      return aarch64_ins_prfop (self, info, code, inst, errors);\n+      return aarch64_ins_barrier (self, info, code, inst, errors);\n     case 104:\n+      return aarch64_ins_prfop (self, info, code, inst, errors);\n     case 105:\n-      return aarch64_ins_hint (self, info, code, inst, errors);\n     case 106:\n-      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n+      return aarch64_ins_hint (self, info, code, inst, errors);\n     case 107:\n+      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 108:\n     case 109:\n     case 110:\n-      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 111:\n-      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 112:\n-      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 113:\n+      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 114:\n     case 115:\n     case 116:\n-      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 117:\n+      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 118:\n     case 119:\n     case 120:\n@@ -799,57 +799,58 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 127:\n     case 128:\n     case 129:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 130:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 131:\n     case 132:\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 138:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 139:\n     case 140:\n     case 141:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 142:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 143:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 144:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 145:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 146:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 147:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 148:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 150:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 151:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 153:\n+    case 154:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 155:\n+    case 156:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 157:\n+    case 158:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 169:\n     case 170:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 171:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 172:\n+    case 173:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 190:\n     case 191:\n     case 192:\n+    case 193:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 194:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 195:\n-    case 197:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 196:\n+    case 198:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "b47473de001bb2e1d2e61e59b890fa1ca37c88f0",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 81,
      "deletions": 80,
      "changes": 161,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -20027,14 +20027,14 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 5:\n     case 6:\n     case 7:\n-    case 9:\n+    case 8:\n     case 10:\n     case 11:\n-    case 15:\n+    case 12:\n     case 16:\n     case 17:\n     case 18:\n-    case 20:\n+    case 19:\n     case 21:\n     case 22:\n     case 23:\n@@ -20044,7 +20044,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 27:\n     case 28:\n     case 29:\n-    case 159:\n+    case 30:\n     case 160:\n     case 161:\n     case 162:\n@@ -20054,7 +20054,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 166:\n     case 167:\n     case 168:\n-    case 181:\n+    case 169:\n     case 182:\n     case 183:\n     case 184:\n@@ -20063,38 +20063,38 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 193:\n-    case 196:\n+    case 190:\n+    case 194:\n+    case 197:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n-    case 8:\n+    case 9:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n-    case 12:\n-      return aarch64_ext_regno_pair (self, info, code, inst, errors);\n     case 13:\n-      return aarch64_ext_reg_extended (self, info, code, inst, errors);\n+      return aarch64_ext_regno_pair (self, info, code, inst, errors);\n     case 14:\n+      return aarch64_ext_reg_extended (self, info, code, inst, errors);\n+    case 15:\n       return aarch64_ext_reg_shifted (self, info, code, inst, errors);\n-    case 19:\n+    case 20:\n       return aarch64_ext_ft (self, info, code, inst, errors);\n-    case 30:\n     case 31:\n     case 32:\n     case 33:\n-    case 198:\n-      return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 34:\n-      return aarch64_ext_reglist (self, info, code, inst, errors);\n+    case 199:\n+      return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 35:\n-      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);\n+      return aarch64_ext_reglist (self, info, code, inst, errors);\n     case 36:\n-      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);\n+      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);\n     case 37:\n-      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);\n+      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);\n     case 38:\n+      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);\n     case 39:\n     case 40:\n     case 41:\n-    case 51:\n+    case 42:\n     case 52:\n     case 53:\n     case 54:\n@@ -20110,107 +20110,107 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 64:\n     case 65:\n     case 66:\n-    case 77:\n+    case 67:\n     case 78:\n     case 79:\n     case 80:\n     case 81:\n-    case 156:\n-    case 158:\n-    case 173:\n+    case 82:\n+    case 157:\n+    case 159:\n     case 174:\n     case 175:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n+    case 181:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n-    case 42:\n     case 43:\n-      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);\n     case 44:\n+      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);\n     case 45:\n     case 46:\n-      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);\n     case 47:\n+      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);\n+    case 48:\n       return aarch64_ext_shll_imm (self, info, code, inst, errors);\n-    case 50:\n-    case 147:\n+    case 51:\n+    case 148:\n       return aarch64_ext_fpimm (self, info, code, inst, errors);\n-    case 67:\n-    case 154:\n-      return aarch64_ext_limm (self, info, code, inst, errors);\n     case 68:\n-      return aarch64_ext_aimm (self, info, code, inst, errors);\n+    case 155:\n+      return aarch64_ext_limm (self, info, code, inst, errors);\n     case 69:\n-      return aarch64_ext_imm_half (self, info, code, inst, errors);\n+      return aarch64_ext_aimm (self, info, code, inst, errors);\n     case 70:\n+      return aarch64_ext_imm_half (self, info, code, inst, errors);\n+    case 71:\n       return aarch64_ext_fbits (self, info, code, inst, errors);\n-    case 72:\n     case 73:\n-    case 152:\n-      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 74:\n-    case 151:\n-      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n+    case 153:\n+      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n+    case 152:\n+      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n+    case 77:\n       return aarch64_ext_cond (self, info, code, inst, errors);\n-    case 82:\n-    case 91:\n-      return aarch64_ext_addr_simple (self, info, code, inst, errors);\n     case 83:\n-      return aarch64_ext_addr_regoff (self, info, code, inst, errors);\n+    case 92:\n+      return aarch64_ext_addr_simple (self, info, code, inst, errors);\n     case 84:\n+      return aarch64_ext_addr_regoff (self, info, code, inst, errors);\n     case 85:\n     case 86:\n-    case 88:\n-    case 90:\n-      return aarch64_ext_addr_simm (self, info, code, inst, errors);\n     case 87:\n-      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);\n     case 89:\n+    case 91:\n+      return aarch64_ext_addr_simm (self, info, code, inst, errors);\n+    case 88:\n+      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);\n+    case 90:\n       return aarch64_ext_addr_uimm12 (self, info, code, inst, errors);\n-    case 92:\n-      return aarch64_ext_addr_offset (self, info, code, inst, errors);\n     case 93:\n-      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);\n+      return aarch64_ext_addr_offset (self, info, code, inst, errors);\n     case 94:\n-      return aarch64_ext_sysreg (self, info, code, inst, errors);\n+      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);\n     case 95:\n-      return aarch64_ext_pstatefield (self, info, code, inst, errors);\n+      return aarch64_ext_sysreg (self, info, code, inst, errors);\n     case 96:\n+      return aarch64_ext_pstatefield (self, info, code, inst, errors);\n     case 97:\n     case 98:\n     case 99:\n     case 100:\n-      return aarch64_ext_sysins_op (self, info, code, inst, errors);\n     case 101:\n+      return aarch64_ext_sysins_op (self, info, code, inst, errors);\n     case 102:\n-      return aarch64_ext_barrier (self, info, code, inst, errors);\n     case 103:\n-      return aarch64_ext_prfop (self, info, code, inst, errors);\n+      return aarch64_ext_barrier (self, info, code, inst, errors);\n     case 104:\n+      return aarch64_ext_prfop (self, info, code, inst, errors);\n     case 105:\n-      return aarch64_ext_hint (self, info, code, inst, errors);\n     case 106:\n-      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);\n+      return aarch64_ext_hint (self, info, code, inst, errors);\n     case 107:\n+      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 108:\n     case 109:\n     case 110:\n-      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 111:\n-      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 112:\n-      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 113:\n+      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 114:\n     case 115:\n     case 116:\n-      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 117:\n+      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 118:\n     case 119:\n     case 120:\n@@ -20223,57 +20223,58 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 127:\n     case 128:\n     case 129:\n-      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 130:\n+      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 131:\n     case 132:\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n-      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 138:\n+      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 139:\n     case 140:\n     case 141:\n-      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 142:\n-      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 143:\n-      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 144:\n-      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 145:\n-      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 146:\n+      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+    case 147:\n       return aarch64_ext_sve_asimm (self, info, code, inst, errors);\n-    case 148:\n-      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 150:\n+      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+    case 151:\n       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);\n-    case 153:\n+    case 154:\n       return aarch64_ext_inv_limm (self, info, code, inst, errors);\n-    case 155:\n+    case 156:\n       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);\n-    case 157:\n+    case 158:\n       return aarch64_ext_sve_scale (self, info, code, inst, errors);\n-    case 169:\n     case 170:\n-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 171:\n+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 172:\n+    case 173:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 190:\n     case 191:\n     case 192:\n+    case 193:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 194:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 195:\n-    case 197:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 196:\n+    case 198:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "6902136e147e00d33317b5de963a2fb5784d6984",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -30,6 +30,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_INT_REG, \"Rm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rm}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt2}, \"an integer register\"},\n+  {AARCH64_OPND_CLASS_INT_REG, \"Rt_SP\", OPD_F_MAYBE_SP | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer or stack pointer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rs\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rs}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Ra\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Ra}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt_SYS\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer register\"},"
    },
    {
      "sha": "277fa7bf84f7c95372417c6fa6c580a1b1ec0cef",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -3156,6 +3156,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \n     case AARCH64_OPND_Rd_SP:\n     case AARCH64_OPND_Rn_SP:\n+    case AARCH64_OPND_Rt_SP:\n     case AARCH64_OPND_SVE_Rn_SP:\n     case AARCH64_OPND_Rm_SP:\n       assert (opnd->qualifier == AARCH64_OPND_QLF_W\n@@ -4928,6 +4929,7 @@ verify_constraints (const struct aarch64_inst *inst,\n \t\t  case AARCH64_OPND_Rn:\n \t\t  case AARCH64_OPND_Rm:\n \t\t  case AARCH64_OPND_Rn_SP:\n+\t\t  case AARCH64_OPND_Rt_SP:\n \t\t  case AARCH64_OPND_Rm_SP:\n \t\t    if (inst_op.reg.regno == blk_dest.reg.regno)\n \t\t      {"
    },
    {
      "sha": "1eaccca5ec506796cd11049ba718f88127d844e7",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd7ceb8d26e011ff3fd23402ec2587d7c374f090/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=bd7ceb8d26e011ff3fd23402ec2587d7c374f090",
      "patch": "@@ -125,10 +125,11 @@\n   QLF1(X),\t\t\t\\\n }\n \n-/* e.g. STG Xt, [<Xn|SP>, #<imm9>].  */\n+/* e.g. STG <Xt|SP>, [<Xn|SP>, #<imm9>].  */\n #define QL_LDST_AT\t\t\\\n {\t\t\t\t\\\n   QLF2(X, imm_tag),\t\t\\\n+  QLF2(SP, imm_tag),\t\t\\\n }\n \n /* e.g. RBIT <Wd>, <Wn>.  */\n@@ -3239,14 +3240,14 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   CORE_INSN (\"ldr\", 0xb8400400, 0xbfe00400, ldst_imm9, 0, OP2 (Rt, ADDR_SIMM9), QL_LDST_R, F_GPRSIZE_IN_Q),\n   CORE_INSN (\"ldrsw\", 0xb8800400, 0xffe00400, ldst_imm9, 0, OP2 (Rt, ADDR_SIMM9), QL_LDST_X32, 0),\n   /* Load/store Allocation Tag instructions.  */\n-  MEMTAG_INSN (\"stg\",  0xd9200800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"stzg\", 0xd9600800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"st2g\", 0xd9a00800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"stz2g\",0xd9e00800, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"stg\",  0xd9200400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"stzg\", 0xd9600400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"st2g\", 0xd9a00400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n-  MEMTAG_INSN (\"stz2g\",0xd9e00400, 0xffe00400, ldst_imm9, OP2 (Rt, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stg\",  0xd9200800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stzg\", 0xd9600800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"st2g\", 0xd9a00800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stz2g\",0xd9e00800, 0xffe00c00, ldst_unscaled, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stg\",  0xd9200400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stzg\", 0xd9600400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"st2g\", 0xd9a00400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n+  MEMTAG_INSN (\"stz2g\",0xd9e00400, 0xffe00400, ldst_imm9, OP2 (Rt_SP, ADDR_SIMM13), QL_LDST_AT, 0),\n   /* Load/store register (unsigned immediate).  */\n   CORE_INSN (\"strb\", 0x39000000, 0xffc00000, ldst_pos, OP_STRB_POS, OP2 (Rt, ADDR_UIMM12), QL_LDST_W8, 0),\n   CORE_INSN (\"ldrb\", 0x39400000, 0xffc00000, ldst_pos, OP_LDRB_POS, OP2 (Rt, ADDR_UIMM12), QL_LDST_W8, 0),\n@@ -4520,6 +4521,8 @@ struct aarch64_opcode aarch64_opcode_table[] =\n     Y(INT_REG, regno, \"Rm\", 0, F(FLD_Rm), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Rt\", 0, F(FLD_Rt), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Rt2\", 0, F(FLD_Rt2), \"an integer register\")\t\\\n+    Y(INT_REG, regno, \"Rt_SP\", OPD_F_MAYBE_SP, F(FLD_Rt),\t\t\\\n+      \"an integer or stack pointer register\")\t\t\t\t\\\n     Y(INT_REG, regno, \"Rs\", 0, F(FLD_Rs), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Ra\", 0, F(FLD_Ra), \"an integer register\")\t\\\n     X(INT_REG, ins_regno, ext_regrt_sysins, \"Rt_SYS\", 0, F(FLD_Rt),\t\\"
    }
  ]
}