{
  "sha": "10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTBjYTRiMDQyZDE1Y2QwNzI3MzAwY2YzZjVhOWYxMWFjOGQ2YWJmZg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-14T12:00:22Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-14T12:00:34Z"
    },
    "message": "readelf: Consolidate --syms --use-dynamic with --dyn-syms\n\nWhen reconstructing dynamic symbol table from the PT_DYNAMIC segment,\ncompute dynamic symbol table size from hash table.  For DT_HASH, the\nnumber of dynamic symbol table entries equals the number of chains.\nFor DT_GNU_HASH/DT_MIPS_XHASH, only defined symbols with non-STB_LOCAL\nindings are in hash table.  Since DT_GNU_HASH/DT_MIPS_XHASH place all\nsymbols with STB_LOCAL binding before symbols with other bindings and\nall undefined symbols defined ones in dynamic symbol table, the highest\nsymbol index in DT_GNU_HASH/DT_MIPS_XHASH is the highest dynamic symbol\ntable index.\n\nRewrite print_dynamic_symbol to dump dynamic symbol table for --dyn-syms\nand --syms --use-dynamic.\n\nbinutils/\n\n\tPR binutils/25707\n\t* readelf.c (nbuckets): New.\n\t(nchains): Likewise.\n\t(buckets): Likewise.\n\t(chains): Likewise.\n\t(ngnubuckets): Likewise.\n\t(gnubuckets): Likewise.\n\t(gnuchains): Likewise.\n\t(mipsxlat): Likewise.\n\t(ngnuchains): Likewise.\n\t(gnusymidx): Likewise.\n\t(VALID_SYMBOL_NAME): Likewise.\n\t(VALID_DYNAMIC_NAME): Use it.\n\t(get_dynamic_data): Moved before process_dynamic_section.\n\t(get_num_dynamic_syms): New function.\n\t(process_dynamic_section): Use DT_SYMTAB, DT_SYMENT, DT_HASH,\n\tDT_GNU_HASH and DT_MIPS_XHASH to reconstruct dynamic symbol\n\ttable.  Use DT_STRTAB and DT_STRSZ to reconstruct dynamic string\n\ttable.\n\t(get_symbol_index_type): Don't print \"bad section index\" when\n\tthere is no section header.\n\t(print_dynamic_symbol): Rewrite.\n\t(process_symbol_table): Call print_dynamic_symbol to dump dynamic\n\tsymbol table.\n\nld/\n\n\tPR binutils/25707\n\t* testsuite/ld-arm/armthumb-lib.sym: Updated.\n\t* testsuite/ld-arm/farcall-mixed-app.sym: Likewise.\n\t* testsuite/ld-arm/farcall-mixed-app2.sym: Likewise.\n\t* testsuite/ld-arm/fdpic-main-m.sym: Likewise.\n\t* testsuite/ld-arm/fdpic-main.sym: Likewise.\n\t* testsuite/ld-arm/fdpic-shared-m.sym: Likewise.\n\t* testsuite/ld-arm/fdpic-shared.sym: Likewise.\n\t* testsuite/ld-arm/mixed-app.sym: Likewise.\n\t* testsuite/ld-arm/mixed-lib.sym: Likewise.\n\t* testsuite/ld-arm/preempt-app.sym: Likewise.\n\t* testsuite/ld-elf/hash.d: Likewise.\n\t* testsuite/ld-elf/pr13195.d: Likewise.\n\t* testsuite/ld-elfvsb/hidden2.d: Likewise.\n\t* testsuite/ld-mips-elf/hash2.d: Likewise.",
    "tree": {
      "sha": "e77a3dcf4134f8bc808afffc0e8afcdaa0d8d510",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e77a3dcf4134f8bc808afffc0e8afcdaa0d8d510"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "21b0982c778bf20de6fc42e7ae7735055cdd35c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21b0982c778bf20de6fc42e7ae7735055cdd35c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/21b0982c778bf20de6fc42e7ae7735055cdd35c5"
    }
  ],
  "stats": {
    "total": 1402,
    "additions": 729,
    "deletions": 673
  },
  "files": [
    {
      "sha": "c5d0355c189160e0ccd0334385c3f758f9587234",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,3 +1,30 @@\n+2020-04-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25707\n+\t* readelf.c (nbuckets): New.\n+\t(nchains): Likewise.\n+\t(buckets): Likewise.\n+\t(chains): Likewise.\n+\t(ngnubuckets): Likewise.\n+\t(gnubuckets): Likewise.\n+\t(gnuchains): Likewise.\n+\t(mipsxlat): Likewise.\n+\t(ngnuchains): Likewise.\n+\t(gnusymidx): Likewise.\n+\t(VALID_SYMBOL_NAME): Likewise.\n+\t(VALID_DYNAMIC_NAME): Use it.\n+\t(get_dynamic_data): Moved before process_dynamic_section.\n+\t(get_num_dynamic_syms): New function.\n+\t(process_dynamic_section): Use DT_SYMTAB, DT_SYMENT, DT_HASH,\n+\tDT_GNU_HASH and DT_MIPS_XHASH to reconstruct dynamic symbol\n+\ttable.  Use DT_STRTAB and DT_STRSZ to reconstruct dynamic string\n+\ttable.\n+\t(get_symbol_index_type): Don't print \"bad section index\" when\n+\tthere is no section header.\n+\t(print_dynamic_symbol): Rewrite.\n+\t(process_symbol_table): Call print_dynamic_symbol to dump dynamic\n+\tsymbol table.\n+\n 2020-04-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Don't"
    },
    {
      "sha": "cd456b02900154dc3968428875b73fbe3c4947c1",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 526,
      "deletions": 525,
      "changes": 1051,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -226,6 +226,16 @@ static size_t dynamic_nent;\n static char * dynamic_strings;\n static unsigned long dynamic_strings_length;\n static unsigned long num_dynamic_syms;\n+static bfd_size_type nbuckets;\n+static bfd_size_type nchains;\n+static bfd_vma *buckets;\n+static bfd_vma *chains;\n+static bfd_vma ngnubuckets;\n+static bfd_vma *gnubuckets;\n+static bfd_vma *gnuchains;\n+static bfd_vma *mipsxlat;\n+static bfd_size_type ngnuchains;\n+static bfd_vma gnusymidx;\n static Elf_Internal_Sym * dynamic_symbols;\n static Elf_Internal_Syminfo * dynamic_syminfo;\n static unsigned long dynamic_syminfo_offset;\n@@ -325,7 +335,10 @@ static const char * get_symbol_version_string\n   (is_32bit_elf ? get_32bit_elf_symbols (file, section, sym_count)\t\\\n    : get_64bit_elf_symbols (file, section, sym_count))\n \n-#define VALID_DYNAMIC_NAME(offset)\t((dynamic_strings != NULL) && (offset < dynamic_strings_length))\n+#define VALID_SYMBOL_NAME(strtab, strtab_size, offset) \\\n+   (strtab != NULL && offset < strtab_size)\n+#define VALID_DYNAMIC_NAME(offset) \\\n+  VALID_SYMBOL_NAME (dynamic_strings, dynamic_strings_length, offset)\n /* GET_DYNAMIC_NAME asssumes that VALID_DYNAMIC_NAME has\n    already been called and verified that the string exists.  */\n #define GET_DYNAMIC_NAME(offset)\t(dynamic_strings + offset)\n@@ -9865,6 +9878,320 @@ print_dynamic_flags (bfd_vma flags)\n   puts (\"\");\n }\n \n+static bfd_vma *\n+get_dynamic_data (Filedata * filedata, bfd_size_type number, unsigned int ent_size)\n+{\n+  unsigned char * e_data;\n+  bfd_vma * i_data;\n+\n+  /* If the size_t type is smaller than the bfd_size_type, eg because\n+     you are building a 32-bit tool on a 64-bit host, then make sure\n+     that when (number) is cast to (size_t) no information is lost.  */\n+  if (sizeof (size_t) < sizeof (bfd_size_type)\n+      && (bfd_size_type) ((size_t) number) != number)\n+    {\n+      error (_(\"Size truncation prevents reading %s elements of size %u\\n\"),\n+\t     bfd_vmatoa (\"u\", number), ent_size);\n+      return NULL;\n+    }\n+\n+  /* Be kind to memory checkers (eg valgrind, address sanitizer) by not\n+     attempting to allocate memory when the read is bound to fail.  */\n+  if (ent_size * number > filedata->file_size)\n+    {\n+      error (_(\"Invalid number of dynamic entries: %s\\n\"),\n+\t     bfd_vmatoa (\"u\", number));\n+      return NULL;\n+    }\n+\n+  e_data = (unsigned char *) cmalloc ((size_t) number, ent_size);\n+  if (e_data == NULL)\n+    {\n+      error (_(\"Out of memory reading %s dynamic entries\\n\"),\n+\t     bfd_vmatoa (\"u\", number));\n+      return NULL;\n+    }\n+\n+  if (fread (e_data, ent_size, (size_t) number, filedata->handle) != number)\n+    {\n+      error (_(\"Unable to read in %s bytes of dynamic data\\n\"),\n+\t     bfd_vmatoa (\"u\", number * ent_size));\n+      free (e_data);\n+      return NULL;\n+    }\n+\n+  i_data = (bfd_vma *) cmalloc ((size_t) number, sizeof (*i_data));\n+  if (i_data == NULL)\n+    {\n+      error (_(\"Out of memory allocating space for %s dynamic entries\\n\"),\n+\t     bfd_vmatoa (\"u\", number));\n+      free (e_data);\n+      return NULL;\n+    }\n+\n+  while (number--)\n+    i_data[number] = byte_get (e_data + number * ent_size, ent_size);\n+\n+  free (e_data);\n+\n+  return i_data;\n+}\n+\n+static unsigned long\n+get_num_dynamic_syms (Filedata * filedata)\n+{\n+  unsigned long num_of_syms = 0;\n+\n+  if (!do_histogram && (!do_using_dynamic || do_dyn_syms))\n+    return num_of_syms;\n+\n+  if (dynamic_info[DT_HASH])\n+    {\n+      unsigned char nb[8];\n+      unsigned char nc[8];\n+      unsigned int hash_ent_size = 4;\n+\n+      if ((filedata->file_header.e_machine == EM_ALPHA\n+\t   || filedata->file_header.e_machine == EM_S390\n+\t   || filedata->file_header.e_machine == EM_S390_OLD)\n+\t  && filedata->file_header.e_ident[EI_CLASS] == ELFCLASS64)\n+\thash_ent_size = 8;\n+\n+      if (fseek (filedata->handle,\n+\t\t (archive_file_offset\n+\t\t  + offset_from_vma (filedata, dynamic_info[DT_HASH],\n+\t\t\t\t     sizeof nb + sizeof nc)),\n+\t\t SEEK_SET))\n+\t{\n+\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t  goto no_hash;\n+\t}\n+\n+      if (fread (nb, hash_ent_size, 1, filedata->handle) != 1)\n+\t{\n+\t  error (_(\"Failed to read in number of buckets\\n\"));\n+\t  goto no_hash;\n+\t}\n+\n+      if (fread (nc, hash_ent_size, 1, filedata->handle) != 1)\n+\t{\n+\t  error (_(\"Failed to read in number of chains\\n\"));\n+\t  goto no_hash;\n+\t}\n+\n+      nbuckets = byte_get (nb, hash_ent_size);\n+      nchains = byte_get (nc, hash_ent_size);\n+      num_of_syms = nchains;\n+\n+      buckets = get_dynamic_data (filedata, nbuckets, hash_ent_size);\n+      chains  = get_dynamic_data (filedata, nchains, hash_ent_size);\n+\n+  no_hash:\n+      if (num_of_syms == 0)\n+\t{\n+\t  if (buckets)\n+\t    {\n+\t      free (buckets);\n+\t      buckets = NULL;\n+\t    }\n+\t  if (chains)\n+\t    {\n+\t      free (chains);\n+\t      buckets = NULL;\n+\t    }\n+\t  nbuckets = 0;\n+\t}\n+    }\n+\n+  if (dynamic_info_DT_GNU_HASH)\n+    {\n+      unsigned char nb[16];\n+      bfd_vma i, maxchain = 0xffffffff, bitmaskwords;\n+      bfd_vma buckets_vma;\n+      unsigned long hn;\n+      bfd_boolean gnu_hash_error = FALSE;\n+\n+      if (fseek (filedata->handle,\n+\t\t (archive_file_offset\n+\t\t  + offset_from_vma (filedata, dynamic_info_DT_GNU_HASH,\n+\t\t\t\t     sizeof nb)),\n+\t\t SEEK_SET))\n+\t{\n+\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      if (fread (nb, 16, 1, filedata->handle) != 1)\n+\t{\n+\t  error (_(\"Failed to read in number of buckets\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      ngnubuckets = byte_get (nb, 4);\n+      gnusymidx = byte_get (nb + 4, 4);\n+      bitmaskwords = byte_get (nb + 8, 4);\n+      buckets_vma = dynamic_info_DT_GNU_HASH + 16;\n+      if (is_32bit_elf)\n+\tbuckets_vma += bitmaskwords * 4;\n+      else\n+\tbuckets_vma += bitmaskwords * 8;\n+\n+      if (fseek (filedata->handle,\n+\t\t (archive_file_offset\n+\t\t  + offset_from_vma (filedata, buckets_vma, 4)),\n+\t\t SEEK_SET))\n+\t{\n+\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      gnubuckets = get_dynamic_data (filedata, ngnubuckets, 4);\n+\n+      if (gnubuckets == NULL)\n+\t{\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      for (i = 0; i < ngnubuckets; i++)\n+\tif (gnubuckets[i] != 0)\n+\t  {\n+\t    if (gnubuckets[i] < gnusymidx)\n+\t      {\n+\t\tgnu_hash_error = TRUE;\n+\t\treturn FALSE;\n+\t      }\n+\n+\t    if (maxchain == 0xffffffff || gnubuckets[i] > maxchain)\n+\t      maxchain = gnubuckets[i];\n+\t  }\n+\n+      if (maxchain == 0xffffffff)\n+\t{\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      maxchain -= gnusymidx;\n+\n+      if (fseek (filedata->handle,\n+\t\t (archive_file_offset\n+\t\t  + offset_from_vma (filedata, buckets_vma\n+\t\t\t\t\t   + 4 * (ngnubuckets + maxchain), 4)),\n+\t\t SEEK_SET))\n+\t{\n+\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      do\n+\t{\n+\t  if (fread (nb, 4, 1, filedata->handle) != 1)\n+\t    {\n+\t      error (_(\"Failed to determine last chain length\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t      goto no_gnu_hash;\n+\t    }\n+\n+\t  if (maxchain + 1 == 0)\n+\t    {\n+\t      gnu_hash_error = TRUE;\n+\t      goto no_gnu_hash;\n+\t    }\n+\n+\t  ++maxchain;\n+\t}\n+      while ((byte_get (nb, 4) & 1) == 0);\n+\n+      if (fseek (filedata->handle,\n+\t\t (archive_file_offset\n+\t\t  + offset_from_vma (filedata, buckets_vma + 4 * ngnubuckets, 4)),\n+\t\t SEEK_SET))\n+\t{\n+\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      gnuchains = get_dynamic_data (filedata, maxchain, 4);\n+      ngnuchains = maxchain;\n+\n+      if (gnuchains == NULL)\n+\t{\n+\t  gnu_hash_error = TRUE;\n+\t  goto no_gnu_hash;\n+\t}\n+\n+      if (dynamic_info_DT_MIPS_XHASH)\n+\t{\n+\t  if (fseek (filedata->handle,\n+\t\t     (archive_file_offset\n+\t\t      + offset_from_vma (filedata, (buckets_vma\n+\t\t\t\t\t\t    + 4 * (ngnubuckets\n+\t\t\t\t\t\t\t   + maxchain)), 4)),\n+\t\t     SEEK_SET))\n+\t    {\n+\t      error (_(\"Unable to seek to start of dynamic information\\n\"));\n+\t      gnu_hash_error = TRUE;\n+\t      goto no_gnu_hash;\n+\t    }\n+\n+\t  mipsxlat = get_dynamic_data (filedata, maxchain, 4);\n+\t}\n+\n+      for (hn = 0; hn < ngnubuckets; ++hn)\n+\tif (gnubuckets[hn] != 0)\n+\t  {\n+\t    bfd_vma si = gnubuckets[hn];\n+\t    bfd_vma off = si - gnusymidx;\n+\n+\t    do\n+\t      {\n+\t\tif (dynamic_info_DT_MIPS_XHASH)\n+\t\t  {\n+\t\t    if (mipsxlat[off] >= num_of_syms)\n+\t\t      num_of_syms = mipsxlat[off] + 1;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    if (si >= num_of_syms)\n+\t\t      num_of_syms = si + 1;\n+\t\t  }\n+\t\tsi++;\n+\t      }\n+\t    while (off < ngnuchains && (gnuchains[off++] & 1) == 0);\n+\t  }\n+\n+  no_gnu_hash:\n+      if (gnu_hash_error)\n+\t{\n+\t  if (mipsxlat)\n+\t    {\n+\t      free (mipsxlat);\n+\t      mipsxlat = NULL;\n+\t    }\n+\t  if (gnuchains)\n+\t    {\n+\t      free (gnuchains);\n+\t      gnuchains = NULL;\n+\t    }\n+\t  if (gnubuckets)\n+\t    {\n+\t      free (gnubuckets);\n+\t      gnubuckets = NULL;\n+\t    }\n+\t  ngnubuckets = 0;\n+\t  ngnuchains = 0;\n+\t}\n+    }\n+\n+  return num_of_syms;\n+}\n+\n /* Parse and display the contents of the dynamic section.  */\n \n static bfd_boolean\n@@ -9892,103 +10219,117 @@ process_dynamic_section (Filedata * filedata)\n     }\n \n   /* Find the appropriate symbol table.  */\n-  if (dynamic_symbols == NULL)\n+  if (dynamic_symbols == NULL || do_histogram)\n     {\n       for (entry = dynamic_section;\n \t   entry < dynamic_section + dynamic_nent;\n \t   ++entry)\n-\t{\n-\t  Elf_Internal_Shdr section;\n+\tif (entry->d_tag == DT_SYMTAB)\n+\t  dynamic_info[DT_SYMTAB] = entry->d_un.d_val;\n+\telse if (entry->d_tag == DT_SYMENT)\n+\t  dynamic_info[DT_SYMENT] = entry->d_un.d_val;\n+\telse if (entry->d_tag == DT_HASH)\n+\t  dynamic_info[DT_HASH] = entry->d_un.d_val;\n+\telse if (entry->d_tag == DT_GNU_HASH)\n+\t  dynamic_info_DT_GNU_HASH = entry->d_un.d_val;\n+\telse if ((filedata->file_header.e_machine == EM_MIPS\n+\t\t  || filedata->file_header.e_machine == EM_MIPS_RS3_LE)\n+\t\t && entry->d_tag == DT_MIPS_XHASH)\n+\t  {\n+\t    dynamic_info_DT_MIPS_XHASH = entry->d_un.d_val;\n+\t    dynamic_info_DT_GNU_HASH = entry->d_un.d_val;\n+\t  }\n \n-\t  if (entry->d_tag != DT_SYMTAB)\n-\t    continue;\n+      if (dynamic_info[DT_SYMTAB] && dynamic_info[DT_SYMENT])\n+\t{\n+\t  Elf_Internal_Phdr *seg;\n+\t    bfd_vma vma = dynamic_info[DT_SYMTAB];\n \n-\t  dynamic_info[DT_SYMTAB] = entry->d_un.d_val;\n+\t    if (! get_program_headers (filedata))\n+\t      {\n+\t\terror (_(\"Cannot interpret virtual addresses without program headers.\\n\"));\n+\t\treturn FALSE;\n+\t      }\n \n-\t  /* Since we do not know how big the symbol table is,\n-\t     we default to reading in the entire file (!) and\n-\t     processing that.  This is overkill, I know, but it\n-\t     should work.  */\n-\t  section.sh_offset = offset_from_vma (filedata, entry->d_un.d_val, 0);\n-\t  if ((bfd_size_type) section.sh_offset > filedata->file_size)\n-\t    {\n-\t      /* See PR 21379 for a reproducer.  */\n-\t      error (_(\"Invalid DT_SYMTAB entry: %lx\\n\"),\n-\t\t     (long) section.sh_offset);\n-\t      return FALSE;\n-\t    }\n+\t    for (seg = filedata->program_headers;\n+\t\t seg < filedata->program_headers + filedata->file_header.e_phnum;\n+\t\t ++seg)\n+\t      {\n+\t\tunsigned long num_of_syms;\n \n-\t  if (archive_file_offset != 0)\n-\t    section.sh_size = archive_file_size - section.sh_offset;\n-\t  else\n-\t    section.sh_size = filedata->file_size - section.sh_offset;\n+\t\tif (seg->p_type != PT_LOAD)\n+\t\t  continue;\n \n-\t  if (is_32bit_elf)\n-\t    section.sh_entsize = sizeof (Elf32_External_Sym);\n-\t  else\n-\t    section.sh_entsize = sizeof (Elf64_External_Sym);\n-\t  section.sh_name = filedata->string_table_length;\n+\t\tif ((seg->p_offset + seg->p_filesz)\n+\t\t    > filedata->file_size)\n+\t\t  {\n+\t\t    /* See PR 21379 for a reproducer.  */\n+\t\t    error (_(\"Invalid PT_LOAD entry\\n\"));\n+\t\t    return FALSE;\n+\t\t  }\n \n-\t  if (dynamic_symbols != NULL)\n-\t    {\n-\t      error (_(\"Multiple dynamic symbol table sections found\\n\"));\n-\t      free (dynamic_symbols);\n-\t    }\n-\t  dynamic_symbols = GET_ELF_SYMBOLS (filedata, &section, & num_dynamic_syms);\n-\t  if (num_dynamic_syms < 1)\n-\t    {\n-\t      error (_(\"Unable to determine the number of symbols to load\\n\"));\n-\t      continue;\n-\t    }\n-\t}\n-    }\n+\t\tif (vma >= (seg->p_vaddr & -seg->p_align)\n+\t\t    && vma <= seg->p_vaddr + seg->p_filesz\n+\t\t    && (num_of_syms = get_num_dynamic_syms (filedata)))\n+\t\t  {\n+\t\t    /* Since we do not know how big the symbol table is,\n+\t\t       we default to reading in up to the end of PT_LOAD\n+\t\t       segment and processing that.  This is overkill, I\n+\t\t       know, but it should work.  */\n+\t\t    Elf_Internal_Shdr section;\n+\t\t    section.sh_offset = (vma - seg->p_vaddr\n+\t\t\t\t\t + seg->p_offset);\n+\t\t    section.sh_size = (num_of_syms\n+\t\t\t\t       * dynamic_info[DT_SYMENT]);\n+\t\t    section.sh_entsize = dynamic_info[DT_SYMENT];\n+\t\t    section.sh_name = filedata->string_table_length;\n+\t\t    dynamic_symbols = GET_ELF_SYMBOLS (filedata,\n+\t\t\t\t\t\t       &section,\n+\t\t\t\t\t\t       & num_dynamic_syms);\n+\t\t    if (dynamic_symbols == NULL\n+\t\t\t|| num_dynamic_syms != num_of_syms)\n+\t\t      {\n+\t\t\terror (_(\"Corrupt DT_SYMTAB dynamic entry\\n\"));\n+\t\t\treturn FALSE;\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n \n   /* Similarly find a string table.  */\n   if (dynamic_strings == NULL)\n-    {\n-      for (entry = dynamic_section;\n-\t   entry < dynamic_section + dynamic_nent;\n-\t   ++entry)\n-\t{\n-\t  unsigned long offset;\n-\t  long str_tab_len;\n-\n-\t  if (entry->d_tag != DT_STRTAB)\n-\t    continue;\n-\n+    for (entry = dynamic_section;\n+\t entry < dynamic_section + dynamic_nent;\n+\t ++entry)\n+      {\n+\tif (entry->d_tag == DT_STRTAB)\n \t  dynamic_info[DT_STRTAB] = entry->d_un.d_val;\n \n-\t  /* Since we do not know how big the string table is,\n-\t     we default to reading in the entire file (!) and\n-\t     processing that.  This is overkill, I know, but it\n-\t     should work.  */\n-\n-\t  offset = offset_from_vma (filedata, entry->d_un.d_val, 0);\n-\n-\t  if (archive_file_offset != 0)\n-\t    str_tab_len = archive_file_size - offset;\n-\t  else\n-\t    str_tab_len = filedata->file_size - offset;\n-\n-\t  if (str_tab_len < 1)\n-\t    {\n-\t      error\n-\t\t(_(\"Unable to determine the length of the dynamic string table\\n\"));\n-\t      continue;\n-\t    }\n+\tif (entry->d_tag == DT_STRSZ)\n+\t  dynamic_info[DT_STRSZ] = entry->d_un.d_val;\n \n-\t  if (dynamic_strings != NULL)\n-\t    {\n-\t      error (_(\"Multiple dynamic string tables found\\n\"));\n-\t      free (dynamic_strings);\n-\t    }\n+\tif (dynamic_info[DT_STRTAB] && dynamic_info[DT_STRSZ])\n+\t  {\n+\t    unsigned long offset;\n+\t    bfd_size_type str_tab_len = dynamic_info[DT_STRSZ];\n+\n+\t    offset = offset_from_vma (filedata,\n+\t\t\t\t      dynamic_info[DT_STRTAB],\n+\t\t\t\t      str_tab_len);\n+\t    dynamic_strings = (char *) get_data (NULL, filedata, offset, 1,\n+\t\t\t\t\t\t str_tab_len,\n+\t\t\t\t\t\t _(\"dynamic string table\"));\n+\t    if (dynamic_strings == NULL)\n+\t      {\n+\t\terror (_(\"Corrupt DT_STRTAB dynamic entry\\n\"));\n+\t\tbreak;\n+\t      }\n \n-\t  dynamic_strings = (char *) get_data (NULL, filedata, offset, 1,\n-                                               str_tab_len,\n-                                               _(\"dynamic string table\"));\n-\t  dynamic_strings_length = dynamic_strings == NULL ? 0 : str_tab_len;\n-\t}\n-    }\n+\t    dynamic_strings_length = str_tab_len;\n+\t    break;\n+\t  }\n+      }\n \n   /* And find the syminfo section if available.  */\n   if (dynamic_syminfo == NULL)\n@@ -11410,143 +11751,36 @@ get_symbol_index_type (Filedata * filedata, unsigned int type)\n     default:\n       if (type == SHN_IA_64_ANSI_COMMON\n \t  && filedata->file_header.e_machine == EM_IA_64\n-\t  && filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_HPUX)\n-\treturn \"ANSI_COM\";\n-      else if ((filedata->file_header.e_machine == EM_X86_64\n-\t\t|| filedata->file_header.e_machine == EM_L1OM\n-\t\t|| filedata->file_header.e_machine == EM_K1OM)\n-\t       && type == SHN_X86_64_LCOMMON)\n-\treturn \"LARGE_COM\";\n-      else if ((type == SHN_MIPS_SCOMMON\n-\t\t&& filedata->file_header.e_machine == EM_MIPS)\n-\t       || (type == SHN_TIC6X_SCOMMON\n-\t\t   && filedata->file_header.e_machine == EM_TI_C6000))\n-\treturn \"SCOM\";\n-      else if (type == SHN_MIPS_SUNDEFINED\n-\t       && filedata->file_header.e_machine == EM_MIPS)\n-\treturn \"SUND\";\n-      else if (type >= SHN_LOPROC && type <= SHN_HIPROC)\n-\tsprintf (buff, \"PRC[0x%04x]\", type & 0xffff);\n-      else if (type >= SHN_LOOS && type <= SHN_HIOS)\n-\tsprintf (buff, \"OS [0x%04x]\", type & 0xffff);\n-      else if (type >= SHN_LORESERVE)\n-\tsprintf (buff, \"RSV[0x%04x]\", type & 0xffff);\n-      else if (type >= filedata->file_header.e_shnum)\n-\tsprintf (buff, _(\"bad section index[%3d]\"), type);\n-      else\n-\tsprintf (buff, \"%3d\", type);\n-      break;\n-    }\n-\n-  return buff;\n-}\n-\n-static bfd_vma *\n-get_dynamic_data (Filedata * filedata, bfd_size_type number, unsigned int ent_size)\n-{\n-  unsigned char * e_data;\n-  bfd_vma * i_data;\n-\n-  /* If the size_t type is smaller than the bfd_size_type, eg because\n-     you are building a 32-bit tool on a 64-bit host, then make sure\n-     that when (number) is cast to (size_t) no information is lost.  */\n-  if (sizeof (size_t) < sizeof (bfd_size_type)\n-      && (bfd_size_type) ((size_t) number) != number)\n-    {\n-      error (_(\"Size truncation prevents reading %s elements of size %u\\n\"),\n-\t     bfd_vmatoa (\"u\", number), ent_size);\n-      return NULL;\n-    }\n-\n-  /* Be kind to memory checkers (eg valgrind, address sanitizer) by not\n-     attempting to allocate memory when the read is bound to fail.  */\n-  if (ent_size * number > filedata->file_size)\n-    {\n-      error (_(\"Invalid number of dynamic entries: %s\\n\"),\n-\t     bfd_vmatoa (\"u\", number));\n-      return NULL;\n-    }\n-\n-  e_data = (unsigned char *) cmalloc ((size_t) number, ent_size);\n-  if (e_data == NULL)\n-    {\n-      error (_(\"Out of memory reading %s dynamic entries\\n\"),\n-\t     bfd_vmatoa (\"u\", number));\n-      return NULL;\n-    }\n-\n-  if (fread (e_data, ent_size, (size_t) number, filedata->handle) != number)\n-    {\n-      error (_(\"Unable to read in %s bytes of dynamic data\\n\"),\n-\t     bfd_vmatoa (\"u\", number * ent_size));\n-      free (e_data);\n-      return NULL;\n-    }\n-\n-  i_data = (bfd_vma *) cmalloc ((size_t) number, sizeof (*i_data));\n-  if (i_data == NULL)\n-    {\n-      error (_(\"Out of memory allocating space for %s dynamic entries\\n\"),\n-\t     bfd_vmatoa (\"u\", number));\n-      free (e_data);\n-      return NULL;\n-    }\n-\n-  while (number--)\n-    i_data[number] = byte_get (e_data + number * ent_size, ent_size);\n-\n-  free (e_data);\n-\n-  return i_data;\n-}\n-\n-static void\n-print_dynamic_symbol (Filedata * filedata, bfd_vma si, unsigned long hn)\n-{\n-  Elf_Internal_Sym * psym;\n-  int n;\n-\n-  n = print_vma (si, DEC_5);\n-  if (n < 5)\n-    fputs (&\"     \"[n], stdout);\n-  printf (\" %3lu: \", hn);\n-\n-  if (dynamic_symbols == NULL || si >= num_dynamic_syms)\n-    {\n-      printf (_(\"<No info available for dynamic symbol number %lu>\\n\"),\n-\t      (unsigned long) si);\n-      return;\n-    }\n-\n-  psym = dynamic_symbols + si;\n-  print_vma (psym->st_value, LONG_HEX);\n-  putchar (' ');\n-  print_vma (psym->st_size, DEC_5);\n-\n-  printf (\" %-7s\", get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)));\n-  printf (\" %-6s\",  get_symbol_binding (filedata, ELF_ST_BIND (psym->st_info)));\n-\n-  if (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_SOLARIS)\n-    printf (\" %-7s\",  get_solaris_symbol_visibility (psym->st_other));\n-  else\n-    {\n-      unsigned int vis = ELF_ST_VISIBILITY (psym->st_other);\n-\n-      printf (\" %-7s\",  get_symbol_visibility (vis));\n-      /* Check to see if any other bits in the st_other field are set.\n-\t Note - displaying this information disrupts the layout of the\n-\t table being generated, but for the moment this case is very\n-\t rare.  */\n-      if (psym->st_other ^ vis)\n-\tprintf (\" [%s] \", get_symbol_other (filedata, psym->st_other ^ vis));\n+\t  && filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_HPUX)\n+\treturn \"ANSI_COM\";\n+      else if ((filedata->file_header.e_machine == EM_X86_64\n+\t\t|| filedata->file_header.e_machine == EM_L1OM\n+\t\t|| filedata->file_header.e_machine == EM_K1OM)\n+\t       && type == SHN_X86_64_LCOMMON)\n+\treturn \"LARGE_COM\";\n+      else if ((type == SHN_MIPS_SCOMMON\n+\t\t&& filedata->file_header.e_machine == EM_MIPS)\n+\t       || (type == SHN_TIC6X_SCOMMON\n+\t\t   && filedata->file_header.e_machine == EM_TI_C6000))\n+\treturn \"SCOM\";\n+      else if (type == SHN_MIPS_SUNDEFINED\n+\t       && filedata->file_header.e_machine == EM_MIPS)\n+\treturn \"SUND\";\n+      else if (type >= SHN_LOPROC && type <= SHN_HIPROC)\n+\tsprintf (buff, \"PRC[0x%04x]\", type & 0xffff);\n+      else if (type >= SHN_LOOS && type <= SHN_HIOS)\n+\tsprintf (buff, \"OS [0x%04x]\", type & 0xffff);\n+      else if (type >= SHN_LORESERVE)\n+\tsprintf (buff, \"RSV[0x%04x]\", type & 0xffff);\n+      else if (filedata->file_header.e_shnum != 0\n+\t       && type >= filedata->file_header.e_shnum)\n+\tsprintf (buff, _(\"bad section index[%3d]\"), type);\n+      else\n+\tsprintf (buff, \"%3d\", type);\n+      break;\n     }\n \n-  printf (\" %3.3s \", get_symbol_index_type (filedata, psym->st_shndx));\n-  if (VALID_DYNAMIC_NAME (psym->st_name))\n-    print_symbol (25, GET_DYNAMIC_NAME (psym->st_name));\n-  else\n-    printf (_(\" <corrupt: %14ld>\"), psym->st_name);\n-  putchar ('\\n');\n+  return buff;\n }\n \n static const char *\n@@ -11722,278 +11956,98 @@ get_symbol_version_string (Filedata *                   filedata,\n   return NULL;\n }\n \n-/* Dump the symbol table.  */\n-static bfd_boolean\n-process_symbol_table (Filedata * filedata)\n+static void\n+print_dynamic_symbol (Filedata *filedata, unsigned long si,\n+\t\t      Elf_Internal_Sym *symtab,\n+\t\t      Elf_Internal_Shdr *section,\n+\t\t      char *strtab, size_t strtab_size)\n {\n-  Elf_Internal_Shdr * section;\n-  bfd_size_type nbuckets = 0;\n-  bfd_size_type nchains = 0;\n-  bfd_vma * buckets = NULL;\n-  bfd_vma * chains = NULL;\n-  bfd_vma ngnubuckets = 0;\n-  bfd_vma * gnubuckets = NULL;\n-  bfd_vma * gnuchains = NULL;\n-  bfd_vma * mipsxlat = NULL;\n-  bfd_vma gnusymidx = 0;\n-  bfd_size_type ngnuchains = 0;\n-\n-  if (!do_syms && !do_dyn_syms && !do_histogram)\n-    return TRUE;\n+  const char *version_string;\n+  enum versioned_symbol_info sym_info;\n+  unsigned short vna_other;\n+  Elf_Internal_Sym *psym = symtab + si;\n \n-  if (dynamic_info[DT_HASH]\n-      && (do_histogram\n-\t  || (do_using_dynamic\n-\t      && !do_dyn_syms\n-\t      && dynamic_strings != NULL)))\n+  printf (\"%6ld: \", si);\n+  print_vma (psym->st_value, LONG_HEX);\n+  putchar (' ');\n+  print_vma (psym->st_size, DEC_5);\n+  printf (\" %-7s\", get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)));\n+  printf (\" %-6s\", get_symbol_binding (filedata, ELF_ST_BIND (psym->st_info)));\n+  if (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_SOLARIS)\n+    printf (\" %-7s\",  get_solaris_symbol_visibility (psym->st_other));\n+  else\n     {\n-      unsigned char nb[8];\n-      unsigned char nc[8];\n-      unsigned int hash_ent_size = 4;\n-\n-      if ((filedata->file_header.e_machine == EM_ALPHA\n-\t   || filedata->file_header.e_machine == EM_S390\n-\t   || filedata->file_header.e_machine == EM_S390_OLD)\n-\t  && filedata->file_header.e_ident[EI_CLASS] == ELFCLASS64)\n-\thash_ent_size = 8;\n-\n-      if (fseek (filedata->handle,\n-\t\t (archive_file_offset\n-\t\t  + offset_from_vma (filedata, dynamic_info[DT_HASH],\n-\t\t\t\t     sizeof nb + sizeof nc)),\n-\t\t SEEK_SET))\n-\t{\n-\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t  goto no_hash;\n-\t}\n-\n-      if (fread (nb, hash_ent_size, 1, filedata->handle) != 1)\n-\t{\n-\t  error (_(\"Failed to read in number of buckets\\n\"));\n-\t  goto no_hash;\n-\t}\n-\n-      if (fread (nc, hash_ent_size, 1, filedata->handle) != 1)\n-\t{\n-\t  error (_(\"Failed to read in number of chains\\n\"));\n-\t  goto no_hash;\n-\t}\n-\n-      nbuckets = byte_get (nb, hash_ent_size);\n-      nchains  = byte_get (nc, hash_ent_size);\n-\n-      buckets = get_dynamic_data (filedata, nbuckets, hash_ent_size);\n-      chains  = get_dynamic_data (filedata, nchains, hash_ent_size);\n+      unsigned int vis = ELF_ST_VISIBILITY (psym->st_other);\n \n-      if (buckets == NULL || chains == NULL)\n-\t{\n-\tno_hash:\n-\t  free (buckets);\n-\t  free (chains);\n-\t  buckets = NULL;\n-\t  chains = NULL;\n-\t  nbuckets = 0;\n-\t  nchains = 0;\n-\t  if (do_using_dynamic)\n-\t    goto err_out;\n-\t}\n+      printf (\" %-7s\", get_symbol_visibility (vis));\n+      /* Check to see if any other bits in the st_other field are set.\n+\t Note - displaying this information disrupts the layout of the\n+\t table being generated, but for the moment this case is very rare.  */\n+      if (psym->st_other ^ vis)\n+\tprintf (\" [%s] \", get_symbol_other (filedata, psym->st_other ^ vis));\n     }\n-\n-  if (dynamic_info_DT_GNU_HASH\n-      && (do_histogram\n-\t  || (do_using_dynamic\n-\t      && !do_dyn_syms\n-\t      && dynamic_strings != NULL)))\n-    {\n-      unsigned char nb[16];\n-      bfd_vma i, maxchain = 0xffffffff, bitmaskwords;\n-      bfd_vma buckets_vma;\n-\n-      if (fseek (filedata->handle,\n-\t\t (archive_file_offset\n-\t\t  + offset_from_vma (filedata, dynamic_info_DT_GNU_HASH,\n-\t\t\t\t     sizeof nb)),\n-\t\t SEEK_SET))\n-\t{\n-\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t  goto no_gnu_hash;\n-\t}\n-\n-      if (fread (nb, 16, 1, filedata->handle) != 1)\n-\t{\n-\t  error (_(\"Failed to read in number of buckets\\n\"));\n-\t  goto no_gnu_hash;\n-\t}\n-\n-      ngnubuckets = byte_get (nb, 4);\n-      gnusymidx = byte_get (nb + 4, 4);\n-      bitmaskwords = byte_get (nb + 8, 4);\n-      buckets_vma = dynamic_info_DT_GNU_HASH + 16;\n-      if (is_32bit_elf)\n-\tbuckets_vma += bitmaskwords * 4;\n+  printf (\" %4s \", get_symbol_index_type (filedata, psym->st_shndx));\n+  print_symbol (25, VALID_SYMBOL_NAME (strtab, strtab_size,\n+\t\t\t\t       psym->st_name)\n+\t\t? strtab + psym->st_name : _(\"<corrupt>\"));\n+\n+  version_string\n+    = get_symbol_version_string (filedata,\n+\t\t\t\t (section == NULL\n+\t\t\t\t  || section->sh_type == SHT_DYNSYM),\n+\t\t\t\t strtab, strtab_size, si,\n+\t\t\t\t psym, &sym_info, &vna_other);\n+  if (version_string)\n+    {\n+      if (sym_info == symbol_undefined)\n+\tprintf (\"@%s (%d)\", version_string, vna_other);\n       else\n-\tbuckets_vma += bitmaskwords * 8;\n-\n-      if (fseek (filedata->handle,\n-\t\t (archive_file_offset\n-\t\t  + offset_from_vma (filedata, buckets_vma, 4)),\n-\t\t SEEK_SET))\n-\t{\n-\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t  goto no_gnu_hash;\n-\t}\n-\n-      gnubuckets = get_dynamic_data (filedata, ngnubuckets, 4);\n-\n-      if (gnubuckets == NULL)\n-\tgoto no_gnu_hash;\n-\n-      for (i = 0; i < ngnubuckets; i++)\n-\tif (gnubuckets[i] != 0)\n-\t  {\n-\t    if (gnubuckets[i] < gnusymidx)\n-\t      goto err_out;\n-\n-\t    if (maxchain == 0xffffffff || gnubuckets[i] > maxchain)\n-\t      maxchain = gnubuckets[i];\n-\t  }\n-\n-      if (maxchain == 0xffffffff)\n-\tgoto no_gnu_hash;\n-\n-      maxchain -= gnusymidx;\n-\n-      if (fseek (filedata->handle,\n-\t\t (archive_file_offset\n-\t\t  + offset_from_vma (filedata, buckets_vma\n-\t\t\t\t\t   + 4 * (ngnubuckets + maxchain), 4)),\n-\t\t SEEK_SET))\n-\t{\n-\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t  goto no_gnu_hash;\n-\t}\n-\n-      do\n-\t{\n-\t  if (fread (nb, 4, 1, filedata->handle) != 1)\n-\t    {\n-\t      error (_(\"Failed to determine last chain length\\n\"));\n-\t      goto no_gnu_hash;\n-\t    }\n-\n-\t  if (maxchain + 1 == 0)\n-\t    goto no_gnu_hash;\n-\n-\t  ++maxchain;\n-\t}\n-      while ((byte_get (nb, 4) & 1) == 0);\n-\n-      if (fseek (filedata->handle,\n-\t\t (archive_file_offset\n-\t\t  + offset_from_vma (filedata, buckets_vma + 4 * ngnubuckets, 4)),\n-\t\t SEEK_SET))\n-\t{\n-\t  error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t  goto no_gnu_hash;\n-\t}\n+\tprintf (sym_info == symbol_hidden ? \"@%s\" : \"@@%s\",\n+\t\tversion_string);\n+    }\n \n-      gnuchains = get_dynamic_data (filedata, maxchain, 4);\n-      ngnuchains = maxchain;\n+  putchar ('\\n');\n \n-      if (gnuchains == NULL)\n-\tgoto no_gnu_hash;\n+  if (ELF_ST_BIND (psym->st_info) == STB_LOCAL\n+      && section != NULL\n+      && si >= section->sh_info\n+      /* Irix 5 and 6 MIPS binaries are known to ignore this requirement.  */\n+      && filedata->file_header.e_machine != EM_MIPS\n+      /* Solaris binaries have been found to violate this requirement as\n+\t well.  Not sure if this is a bug or an ABI requirement.  */\n+      && filedata->file_header.e_ident[EI_OSABI] != ELFOSABI_SOLARIS)\n+    warn (_(\"local symbol %lu found at index >= %s's sh_info value of %u\\n\"),\n+\t  si, printable_section_name (filedata, section), section->sh_info);\n+}\n \n-      if (dynamic_info_DT_MIPS_XHASH)\n-\t{\n-\t  if (fseek (filedata->handle,\n-\t\t     (archive_file_offset\n-\t\t      + offset_from_vma (filedata, (buckets_vma\n-\t\t\t\t\t\t    + 4 * (ngnubuckets\n-\t\t\t\t\t\t\t   + maxchain)), 4)),\n-\t\t     SEEK_SET))\n-\t    {\n-\t      error (_(\"Unable to seek to start of dynamic information\\n\"));\n-\t      goto no_gnu_hash;\n-\t    }\n+/* Dump the symbol table.  */\n+static bfd_boolean\n+process_symbol_table (Filedata * filedata)\n+{\n+  Elf_Internal_Shdr * section;\n \n-\t  mipsxlat = get_dynamic_data (filedata, maxchain, 4);\n-\t  if (mipsxlat == NULL)\n-\t    {\n-\t    no_gnu_hash:\n-\t      free (gnuchains);\n-\t      gnuchains = NULL;\n-\t      free (gnubuckets);\n-\t      gnubuckets = NULL;\n-\t      ngnubuckets = 0;\n-\t      if (do_using_dynamic)\n-\t\tgoto err_out;\n-\t    }\n-\t}\n-    }\n+  if (!do_syms && !do_dyn_syms && !do_histogram)\n+    return TRUE;\n \n   if ((dynamic_info[DT_HASH] || dynamic_info_DT_GNU_HASH)\n       && do_syms\n       && do_using_dynamic\n       && dynamic_strings != NULL\n       && dynamic_symbols != NULL)\n     {\n-      unsigned long hn;\n-\n-      if (dynamic_info[DT_HASH])\n-\t{\n-\t  bfd_vma si;\n-\t  char *visited;\n-\n-\t  printf (_(\"\\nSymbol table for image:\\n\"));\n-\t  if (is_32bit_elf)\n-\t    printf (_(\"  Num Buc:    Value  Size   Type   Bind Vis      Ndx Name\\n\"));\n-\t  else\n-\t    printf (_(\"  Num Buc:    Value          Size   Type   Bind Vis      Ndx Name\\n\"));\n-\n-\t  visited = xcmalloc (nchains, 1);\n-\t  memset (visited, 0, nchains);\n-\t  for (hn = 0; hn < nbuckets; hn++)\n-\t    {\n-\t      for (si = buckets[hn]; si > 0; si = chains[si])\n-\t\t{\n-\t\t  print_dynamic_symbol (filedata, si, hn);\n-\t\t  if (si >= nchains || visited[si])\n-\t\t    {\n-\t\t      error (_(\"histogram chain is corrupt\\n\"));\n-\t\t      break;\n-\t\t    }\n-\t\t  visited[si] = 1;\n-\t\t}\n-\t    }\n-\t  free (visited);\n-\t}\n+      unsigned long si;\n \n-      if (dynamic_info_DT_GNU_HASH)\n-\t{\n-\t  printf (_(\"\\nSymbol table of `%s' for image:\\n\"),\n-\t\t  GNU_HASH_SECTION_NAME);\n-\t  if (is_32bit_elf)\n-\t    printf (_(\"  Num Buc:    Value  Size   Type   Bind Vis      Ndx Name\\n\"));\n-\t  else\n-\t    printf (_(\"  Num Buc:    Value          Size   Type   Bind Vis      Ndx Name\\n\"));\n-\n-\t  for (hn = 0; hn < ngnubuckets; ++hn)\n-\t    if (gnubuckets[hn] != 0)\n-\t      {\n-\t\tbfd_vma si = gnubuckets[hn];\n-\t\tbfd_vma off = si - gnusymidx;\n+      printf (ngettext (\"\\nSymbol table for image contains %lu entry:\\n\",\n+\t\t\t\"\\nSymbol table for image contains %lu entries:\\n\",\n+\t\t\tnum_dynamic_syms), num_dynamic_syms);\n+      if (is_32bit_elf)\n+\tprintf (_(\"   Num:    Value  Size Type    Bind   Vis      Ndx Name\\n\"));\n+      else\n+\tprintf (_(\"   Num:    Value          Size Type    Bind   Vis      Ndx Name\\n\"));\n \n-\t\tdo\n-\t\t  {\n-\t\t    if (dynamic_info_DT_MIPS_XHASH)\n-\t\t      print_dynamic_symbol (filedata, mipsxlat[off], hn);\n-\t\t    else\n-\t\t      print_dynamic_symbol (filedata, si, hn);\n-\t\t    si++;\n-\t\t  }\n-\t\twhile (off < ngnuchains && (gnuchains[off++] & 1) == 0);\n-\t      }\n-\t}\n+      for (si = 0; si < num_dynamic_syms; si++)\n+\tprint_dynamic_symbol (filedata, si, dynamic_symbols, NULL,\n+\t\t\t      dynamic_strings, dynamic_strings_length);\n     }\n   else if ((do_dyn_syms || (do_syms && !do_using_dynamic))\n \t   && filedata->section_headers != NULL)\n@@ -12007,7 +12061,6 @@ process_symbol_table (Filedata * filedata)\n \t  char * strtab = NULL;\n \t  unsigned long int strtab_size = 0;\n \t  Elf_Internal_Sym * symtab;\n-\t  Elf_Internal_Sym * psym;\n \t  unsigned long si, num_syms;\n \n \t  if ((section->sh_type != SHT_SYMTAB\n@@ -12056,61 +12109,9 @@ process_symbol_table (Filedata * filedata)\n \t      strtab_size = strtab != NULL ? string_sec->sh_size : 0;\n \t    }\n \n-\t  for (si = 0, psym = symtab; si < num_syms; si++, psym++)\n-\t    {\n-\t      const char *version_string;\n-\t      enum versioned_symbol_info sym_info;\n-\t      unsigned short vna_other;\n-\n-\t      printf (\"%6ld: \", si);\n-\t      print_vma (psym->st_value, LONG_HEX);\n-\t      putchar (' ');\n-\t      print_vma (psym->st_size, DEC_5);\n-\t      printf (\" %-7s\", get_symbol_type (filedata, ELF_ST_TYPE (psym->st_info)));\n-\t      printf (\" %-6s\", get_symbol_binding (filedata, ELF_ST_BIND (psym->st_info)));\n-\t      if (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_SOLARIS)\n-\t\tprintf (\" %-7s\",  get_solaris_symbol_visibility (psym->st_other));\n-\t      else\n-\t\t{\n-\t\t  unsigned int vis = ELF_ST_VISIBILITY (psym->st_other);\n-\n-\t\t  printf (\" %-7s\", get_symbol_visibility (vis));\n-\t\t  /* Check to see if any other bits in the st_other field are set.\n-\t\t     Note - displaying this information disrupts the layout of the\n-\t\t     table being generated, but for the moment this case is very rare.  */\n-\t\t  if (psym->st_other ^ vis)\n-\t\t    printf (\" [%s] \", get_symbol_other (filedata, psym->st_other ^ vis));\n-\t\t}\n-\t      printf (\" %4s \", get_symbol_index_type (filedata, psym->st_shndx));\n-\t      print_symbol (25, psym->st_name < strtab_size\n-\t\t\t    ? strtab + psym->st_name : _(\"<corrupt>\"));\n-\n-\t      version_string\n-\t\t= get_symbol_version_string (filedata,\n-\t\t\t\t\t     section->sh_type == SHT_DYNSYM,\n-\t\t\t\t\t     strtab, strtab_size, si,\n-\t\t\t\t\t     psym, &sym_info, &vna_other);\n-\t      if (version_string)\n-\t\t{\n-\t\t  if (sym_info == symbol_undefined)\n-\t\t    printf (\"@%s (%d)\", version_string, vna_other);\n-\t\t  else\n-\t\t    printf (sym_info == symbol_hidden ? \"@%s\" : \"@@%s\",\n-\t\t\t    version_string);\n-\t\t}\n-\n-\t      putchar ('\\n');\n-\n-\t      if (ELF_ST_BIND (psym->st_info) == STB_LOCAL\n-\t\t  && si >= section->sh_info\n-\t\t  /* Irix 5 and 6 MIPS binaries are known to ignore this requirement.  */\n-\t\t  && filedata->file_header.e_machine != EM_MIPS\n-\t\t  /* Solaris binaries have been found to violate this requirement as\n-\t\t     well.  Not sure if this is a bug or an ABI requirement.  */\n-\t\t  && filedata->file_header.e_ident[EI_OSABI] != ELFOSABI_SOLARIS)\n-\t\twarn (_(\"local symbol %lu found at index >= %s's sh_info value of %u\\n\"),\n-\t\t      si, printable_section_name (filedata, section), section->sh_info);\n-\t    }\n+\t  for (si = 0; si < num_syms; si++)\n+\t    print_dynamic_symbol (filedata, si, symtab, section,\n+\t\t\t\t  strtab, strtab_size);\n \n \t  free (symtab);\n \t  if (strtab != filedata->string_table)"
    },
    {
      "sha": "62c0e0d927ba5cc9f9fd0f35ce1c9664a5c34991",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,3 +1,21 @@\n+2020-04-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25707\n+\t* testsuite/ld-arm/armthumb-lib.sym: Updated.\n+\t* testsuite/ld-arm/farcall-mixed-app.sym: Likewise.\n+\t* testsuite/ld-arm/farcall-mixed-app2.sym: Likewise.\n+\t* testsuite/ld-arm/fdpic-main-m.sym: Likewise.\n+\t* testsuite/ld-arm/fdpic-main.sym: Likewise.\n+\t* testsuite/ld-arm/fdpic-shared-m.sym: Likewise.\n+\t* testsuite/ld-arm/fdpic-shared.sym: Likewise.\n+\t* testsuite/ld-arm/mixed-app.sym: Likewise.\n+\t* testsuite/ld-arm/mixed-lib.sym: Likewise.\n+\t* testsuite/ld-arm/preempt-app.sym: Likewise.\n+\t* testsuite/ld-elf/hash.d: Likewise.\n+\t* testsuite/ld-elf/pr13195.d: Likewise.\n+\t* testsuite/ld-elfvsb/hidden2.d: Likewise.\n+\t* testsuite/ld-mips-elf/hash2.d: Likewise.\n+\n 2020-04-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* testsuite/ld-shared/shared.exp: Remove dangling comments."
    },
    {
      "sha": "7119e351fcf901518bda53ab247bcdf10851604c",
      "filename": "ld/testsuite/ld-arm/armthumb-lib.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/armthumb-lib.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/armthumb-lib.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/armthumb-lib.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +9 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n- +.. +..: .......0 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n- +.. +..: 00000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND app_func2\n- +.. +..: .......[048c] +2 +FUNC +GLOBAL +DEFAULT +6 lib_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n+ +..: +.......[048c] +2 +FUNC +GLOBAL +DEFAULT +6 lib_func2\n+ +..: +.......0 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n+ +..: +00000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +9 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start"
    },
    {
      "sha": "febf1fedaf1188ffd986e1b58463161ff51d92d3",
      "filename": "ld/testsuite/ld-arm/farcall-mixed-app.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/farcall-mixed-app.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/farcall-mixed-app.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/farcall-mixed-app.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n- +.. +..: .......0 +0 +FUNC +GLOBAL +DEFAULT +14 app_func2\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n+ +..: +.......0 +0 +FUNC +GLOBAL +DEFAULT +14 app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start"
    },
    {
      "sha": "97cccf0e354001785fda261d7c9a36b54ddcd2e1",
      "filename": "ld/testsuite/ld-arm/farcall-mixed-app2.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/farcall-mixed-app2.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/farcall-mixed-app2.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/farcall-mixed-app2.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n- +.. +..: .......0 +0 +FUNC +GLOBAL +DEFAULT +15 app_func2\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n+ +..: +.......0 +0 +FUNC +GLOBAL +DEFAULT +15 app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start"
    },
    {
      "sha": "6e655d67c1e0be0a79e3f8b367eb416ecd5f0e30",
      "filename": "ld/testsuite/ld-arm/fdpic-main-m.sym",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-main-m.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-main-m.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/fdpic-main-m.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,14 +1,15 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _edata\n- +.. +..: ........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _end\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __bss_end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT + 9 __ROFIXUP_LIST__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT + 9 __ROFIXUP_END__\n- +.. +..: ........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _bss_end__\n+Symbol table for image contains 12 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n+ +..: +........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func1\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __ROFIXUP_END__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __ROFIXUP_LIST__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __end__\n+ +..: +........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _end"
    },
    {
      "sha": "6e655d67c1e0be0a79e3f8b367eb416ecd5f0e30",
      "filename": "ld/testsuite/ld-arm/fdpic-main.sym",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-main.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-main.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/fdpic-main.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,14 +1,15 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _edata\n- +.. +..: ........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _end\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __bss_end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT + 9 __ROFIXUP_LIST__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT + 9 __ROFIXUP_END__\n- +.. +..: ........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _bss_end__\n+Symbol table for image contains 12 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n+ +..: +........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func1\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __ROFIXUP_END__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __ROFIXUP_LIST__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 __end__\n+ +..: +........ +0 +FUNC +GLOBAL +DEFAULT +UND my_shared_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +13 _end"
    },
    {
      "sha": "801eaa779ac7d8f6fd8688937dd98ba5c1929fc7",
      "filename": "ld/testsuite/ld-arm/fdpic-shared-m.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-shared-m.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-shared-m.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/fdpic-shared-m.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _edata\n- +.. +..: ........   +12 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func2\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_start__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _end\n- +.. +..: ........    +6 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func3\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_end__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __end__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +7 __ROFIXUP_LIST__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_start\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +7 __ROFIXUP_END__\n- +.. +..: ........    +2 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func1\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n+ +..: +........ +2 +FUNC +GLOBAL +DEFAULT +6 my_shared_func1\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n+ +..: +........ +6 +FUNC +GLOBAL +DEFAULT +6 my_shared_func3\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +7 __ROFIXUP_END__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +7 __ROFIXUP_LIST__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n+ +..: +........ +12 +FUNC +GLOBAL +DEFAULT +6 my_shared_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end"
    },
    {
      "sha": "e11fbdd6b0461b15747155e245393d70c843ffb3",
      "filename": "ld/testsuite/ld-arm/fdpic-shared.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-shared.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/fdpic-shared.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/fdpic-shared.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _edata\n- +.. +..: ........   +20 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func2\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_start__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _end\n- +.. +..: ........    +8 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func3\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_end__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __end__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +7 __ROFIXUP_LIST__\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 __bss_start\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +7 __ROFIXUP_END__\n- +.. +..: ........    +4 +FUNC    +GLOBAL +DEFAULT  +6 my_shared_func1\n- +.. +..: ........    +0 +NOTYPE  +GLOBAL +DEFAULT  +9 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n+ +..: +........ +4 +FUNC +GLOBAL +DEFAULT +6 my_shared_func1\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n+ +..: +........ +8 +FUNC +GLOBAL +DEFAULT +6 my_shared_func3\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +7 __ROFIXUP_END__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +7 __ROFIXUP_LIST__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n+ +..: +........ +20 +FUNC +GLOBAL +DEFAULT +6 my_shared_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end"
    },
    {
      "sha": "c249f4d7760c26b3dccbe944dbef25179ec008a5",
      "filename": "ld/testsuite/ld-arm/mixed-app.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/mixed-app.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/mixed-app.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/mixed-app.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n- +.. +..: .......0 +0 +FUNC +GLOBAL +DEFAULT +8 app_func2\n- +.. +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start__\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func2\n+ +..: 0*[^0]*.* +0 +FUNC +GLOBAL +DEFAULT +UND lib_func1\n+ +..: +.......0 +0 +FUNC +GLOBAL +DEFAULT +8 app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +12 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +12 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +11 __data_start"
    },
    {
      "sha": "f14aeed501d4906ecef227454ae053989eb87e65",
      "filename": "ld/testsuite/ld-arm/mixed-lib.sym",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/mixed-lib.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/mixed-lib.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/mixed-lib.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,15 +1,16 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +9 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n- +.. +..: .......0 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n- +.. +..: 00000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND app_func2\n- +.. +..: .......1 +2 +FUNC +GLOBAL +DEFAULT +6 lib_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+Symbol table for image contains 13 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start__\n+ +..: +.......1 +2 +FUNC +GLOBAL +DEFAULT +6 lib_func2\n+ +..: +.......0 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n+ +..: +00000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +9 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start"
    },
    {
      "sha": "31c01cc897576a666c36b3486448da20e94dd66f",
      "filename": "ld/testsuite/ld-arm/preempt-app.sym",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/preempt-app.sym",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-arm/preempt-app.sym",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/preempt-app.sym?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -1,14 +1,15 @@\n \n-Symbol table for image:\n- +Num +Buc: +Value +Size +Type +Bind +Vis +Ndx +Name\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_start__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 _end\n- +.. +..: ........ +4 +OBJECT +GLOBAL +DEFAULT +10 data_obj\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_end__\n- +.. +..: .......1 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __end__\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_start\n- +.. +..: .......0 +0 +FUNC +GLOBAL +DEFAULT +6 app_func2\n- +.. +..: ........ +0 +NOTYPE +GLOBAL +DEFAULT +10 _bss_end__\n+Symbol table for image contains 12 entries:\n+ +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n+ +..: +00000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 _bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_start__\n+ +..: +.......1 +20 +FUNC +GLOBAL +DEFAULT +6 lib_func1\n+ +..: +.......0 +0 +FUNC +GLOBAL +DEFAULT +6 app_func2\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_end__\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __bss_start\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 __end__\n+ +..: +........ +4 +OBJECT +GLOBAL +DEFAULT +10 data_obj\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 _edata\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +10 _end\n+ +..: +........ +0 +NOTYPE +GLOBAL +DEFAULT +9 __data_start"
    },
    {
      "sha": "61d84e44a6e4a90330ebc71f061dc05576134523",
      "filename": "ld/testsuite/ld-elf/hash.d",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elf/hash.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elf/hash.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/hash.d?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -10,11 +10,11 @@\n #...\n  +0x[0-9a-z]+ +\\(GNU_HASH\\) +0x[0-9a-z]+\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] _start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] _start\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] main\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] main\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] start\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] __start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +NOTYPE +GLOBAL +DEFAULT +[1-9] __start\n #..."
    },
    {
      "sha": "c22de0e6ce24a23f73a0e65842a71ed61995e7dc",
      "filename": "ld/testsuite/ld-elf/pr13195.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elf/pr13195.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elf/pr13195.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr13195.d?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -5,5 +5,5 @@\n # generic linker targets don't support --gc-sections, nor do a bunch of others\n \n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +[1-9]+ foo\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +[1-9]+ foo@@VERS_2.0\n #pass"
    },
    {
      "sha": "5d299746f5687646351761454e5dc65721b2469b",
      "filename": "ld/testsuite/ld-elfvsb/hidden2.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elfvsb/hidden2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-elfvsb/hidden2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elfvsb/hidden2.d?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -3,7 +3,7 @@\n #readelf: -Ds\n # It is also ok to remove this symbol, but we currently make it local.\n \n-Symbol table for image:\n+Symbol table for image contains [0-9]+ entries:\n #...\n-[ \t]*[0-9]+ +[0-9]+: [0-9a-fA-F]* +0 +OBJECT +LOCAL +DEFAULT .* foo\n+[ \t]*[0-9]+: [0-9a-fA-F]* +0 +OBJECT +LOCAL +DEFAULT .* foo\n #pass"
    },
    {
      "sha": "aec48e106c67bf2e27ecd29045eb019e9d8f8f56",
      "filename": "ld/testsuite/ld-mips-elf/hash2.d",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-mips-elf/hash2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10ca4b042d15cd0727300cf3f5a9f11ac8d6abff/ld/testsuite/ld-mips-elf/hash2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-mips-elf/hash2.d?ref=10ca4b042d15cd0727300cf3f5a9f11ac8d6abff",
      "patch": "@@ -6,11 +6,11 @@\n #...\n  +0x[0-9a-z]+ +\\(MIPS_XHASH\\) +0x[0-9a-z]+\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC) _start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC\\[[0x[0-9a-f]+\\]) __start\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC) main\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC\\[[0x[0-9a-f]+\\]) _start\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC) start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC\\[[0x[0-9a-f]+\\]) main\n #...\n- +[0-9]+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC) __start\n+ +[0-9]+: +[0-9a-f]+ +[0-9]+ +FUNC +GLOBAL +DEFAULT +([1-9]|PRC\\[[0x[0-9a-f]+\\]) start\n #..."
    }
  ]
}