{
  "sha": "f37b21b481a7804a13c5806098c19b6119288ba4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjM3YjIxYjQ4MWE3ODA0YTEzYzU4MDYwOThjMTliNjExOTI4OGJhNA==",
  "commit": {
    "author": {
      "name": "Roland McGrath",
      "email": "mcgrathr@google.com",
      "date": "2020-06-23T19:01:24Z"
    },
    "committer": {
      "name": "Roland McGrath",
      "email": "mcgrathr@google.com",
      "date": "2020-06-23T19:01:24Z"
    },
    "message": "PR 22843: ld, gold: Add --dependency-file option.\n\ngold/\n\t* options.h (class General_options): Add --dependency-file option.\n\t* fileread.cc (File_read::files_read): New static variable.\n\t(File_read::open): Add the file to the files_read list.\n\t(File_read::record_file_read): New static member function.\n\t(File_read::write_dependency_file): New static member function.\n\t* fileread.h (class File_read): Declare them.\n\t* layout.cc (Layout::read_layout_from_file): Call record_file_read.\n\t(Close_task_runner::run): Call write_dependency_file if\n\t--dependency-file was passed.\n\nld/\n\t* NEWS: Note --dependency-file.\n\t* ld.texi (Options): Document --dependency-file.\n\t* ldlex.h (enum option_values): Add OPTION_DEPENDENCY_FILE.\n\t* ld.h (ld_config_type): New member dependency_file.\n\t* lexsup.c (ld_options, parse_args): Parse --dependency-file.\n\t* ldmain.c (struct dependency_file): New type.\n\t(dependency_files, dependency_files_tail): New static variables.\n\t(track_dependency_files): New function.\n\t(write_dependency_file): New function.\n\t(main): Call it when --dependency-file was passed.\n\t* ldfile.c (ldfile_try_open_bfd): Call track_dependency_files.\n\t(ldfile_open_command_file_1): Likewise.\n\t* ldelf.c (ldelf_try_needed): Likewise.\n\t* pe-dll.c (pe_implied_import_dll): Likewise.",
    "tree": {
      "sha": "3949b039081a31a28f9c9c227c7810e13ea2f25a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3949b039081a31a28f9c9c227c7810e13ea2f25a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f37b21b481a7804a13c5806098c19b6119288ba4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37b21b481a7804a13c5806098c19b6119288ba4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f37b21b481a7804a13c5806098c19b6119288ba4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37b21b481a7804a13c5806098c19b6119288ba4/comments",
  "author": {
    "login": "frobtech",
    "id": 972096,
    "node_id": "MDQ6VXNlcjk3MjA5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/972096?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frobtech",
    "html_url": "https://github.com/frobtech",
    "followers_url": "https://api.github.com/users/frobtech/followers",
    "following_url": "https://api.github.com/users/frobtech/following{/other_user}",
    "gists_url": "https://api.github.com/users/frobtech/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frobtech/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frobtech/subscriptions",
    "organizations_url": "https://api.github.com/users/frobtech/orgs",
    "repos_url": "https://api.github.com/users/frobtech/repos",
    "events_url": "https://api.github.com/users/frobtech/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frobtech/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "frobtech",
    "id": 972096,
    "node_id": "MDQ6VXNlcjk3MjA5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/972096?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frobtech",
    "html_url": "https://github.com/frobtech",
    "followers_url": "https://api.github.com/users/frobtech/followers",
    "following_url": "https://api.github.com/users/frobtech/following{/other_user}",
    "gists_url": "https://api.github.com/users/frobtech/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frobtech/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frobtech/subscriptions",
    "organizations_url": "https://api.github.com/users/frobtech/orgs",
    "repos_url": "https://api.github.com/users/frobtech/repos",
    "events_url": "https://api.github.com/users/frobtech/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frobtech/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "236ef0346d88efffd1ca1da1a5d80724cb145660",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/236ef0346d88efffd1ca1da1a5d80724cb145660",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/236ef0346d88efffd1ca1da1a5d80724cb145660"
    }
  ],
  "stats": {
    "total": 290,
    "additions": 230,
    "deletions": 60
  },
  "files": [
    {
      "sha": "4d524d7f5acf4a037581210797da793f21ea2fd4",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -1,3 +1,16 @@\n+2020-06-23  Roland McGrath  <mcgrathr@google.com>\n+\n+\tPR 22843\n+\t* options.h (class General_options): Add --dependency-file option.\n+\t* fileread.cc (File_read::files_read): New static variable.\n+\t(File_read::open): Add the file to the files_read list.\n+\t(File_read::record_file_read): New static member function.\n+\t(File_read::write_dependency_file): New static member function.\n+\t* fileread.h (class File_read): Declare them.\n+\t* layout.cc (Layout::read_layout_from_file): Call record_file_read.\n+\t(Close_task_runner::run): Call write_dependency_file if\n+\t--dependency-file was passed.\n+\n 2020-06-18  Fangrui Song  <i@maskray.me>\n \n \tPR gold/26039"
    },
    {
      "sha": "f5ca719360d68dee9a851556d76831fb6c637fa2",
      "filename": "gold/fileread.cc",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/gold/fileread.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/gold/fileread.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/fileread.cc?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -124,6 +124,7 @@ static Initialize_lock file_counts_initialize_lock(&file_counts_lock);\n unsigned long long File_read::total_mapped_bytes;\n unsigned long long File_read::current_mapped_bytes;\n unsigned long long File_read::maximum_mapped_bytes;\n+std::vector<std::string> File_read::files_read;\n \n // Class File_read::View.\n \n@@ -211,6 +212,8 @@ File_read::open(const Task* task, const std::string& name)\n       gold_debug(DEBUG_FILES, \"Attempt to open %s succeeded\",\n \t\t this->name_.c_str());\n       this->token_.add_writer(task);\n+      Hold_optional_lock hl(file_counts_lock);\n+      record_file_read(this->name_);\n     }\n \n   return this->descriptor_ >= 0;\n@@ -1138,4 +1141,31 @@ Input_file::open_binary(const Task* task, const std::string& name)\n \t\t\t  binary_to_elf.converted_size());\n }\n \n+void\n+File_read::record_file_read(const std::string& name)\n+{\n+  File_read::files_read.push_back(name);\n+}\n+\n+void\n+File_read::write_dependency_file(const char* dependency_file_name,\n+\t\t\t\t const char* output_file_name)\n+{\n+  FILE *depfile = fopen(dependency_file_name, \"w\");\n+\n+  fprintf(depfile, \"%s:\", output_file_name);\n+  for (std::vector<std::string>::const_iterator it = files_read.begin();\n+       it != files_read.end();\n+       ++it)\n+    fprintf(depfile, \" \\\\\\n  %s\", it->c_str());\n+  fprintf(depfile, \"\\n\");\n+\n+  for (std::vector<std::string>::const_iterator it = files_read.begin();\n+       it != files_read.end();\n+       ++it)\n+    fprintf(depfile, \"\\n%s:\\n\", it->c_str());\n+\n+  fclose(depfile);\n+}\n+\n } // End namespace gold."
    },
    {
      "sha": "2120135dea0c8fbd3463c5b5abfd72d90db061a7",
      "filename": "gold/fileread.h",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/gold/fileread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/gold/fileread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/fileread.h?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -207,14 +207,23 @@ class File_read\n   static void\n   print_stats();\n \n+  // Write the dependency file listing all files read.\n+  static void\n+  write_dependency_file(const char* dependency_file_name,\n+\t\t\tconst char* output_file_name);\n+\n+  // Record that a file was read.  File_read::open does this.\n+  static void\n+  record_file_read(const std::string& name);\n+\n   // Return the open file descriptor (for plugins).\n   int\n   descriptor()\n   {\n     this->reopen_descriptor();\n     return this->descriptor_;\n   }\n-  \n+\n   // Return the file last modification time.  Calls gold_fatal if the stat\n   // system call failed.\n   Timespec\n@@ -247,6 +256,9 @@ class File_read\n   // --stats.\n   static unsigned long long maximum_mapped_bytes;\n \n+  // Set of names of all files read.\n+  static std::vector<std::string> files_read;\n+\n   // A view into the file.\n   class View\n   {"
    },
    {
      "sha": "13e533aaf21393ac1717beab1aaeb73dc18f666f",
      "filename": "gold/layout.cc",
      "status": "modified",
      "additions": 38,
      "deletions": 32,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/gold/layout.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/gold/layout.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/layout.cc?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -1183,11 +1183,11 @@ Layout::layout(Sized_relobj_file<size, big_endian>* object, unsigned int shndx,\n       // All \".text.unlikely.*\" sections can be moved to a unique\n       // segment with --text-unlikely-segment option.\n       bool text_unlikely_segment\n-          = (parameters->options().text_unlikely_segment()\n-             && is_prefix_of(\".text.unlikely\",\n-                             object->section_name(shndx).c_str()));\n+\t  = (parameters->options().text_unlikely_segment()\n+\t     && is_prefix_of(\".text.unlikely\",\n+\t\t\t     object->section_name(shndx).c_str()));\n       if (text_unlikely_segment)\n-        {\n+\t{\n \t  elfcpp::Elf_Xword flags\n \t    = this->get_output_section_flags(shdr.get_sh_flags());\n \n@@ -1196,11 +1196,11 @@ Layout::layout(Sized_relobj_file<size, big_endian>* object, unsigned int shndx,\n \t\t\t\t\t\t    &name_key);\n \t  os = this->get_output_section(os_name, name_key, sh_type, flags,\n \t\t\t\t\tORDER_INVALID, false);\n-          // Map this output section to a unique segment.  This is done to\n-          // separate \"text\" that is not likely to be executed from \"text\"\n-          // that is likely executed.\n+\t  // Map this output section to a unique segment.  This is done to\n+\t  // separate \"text\" that is not likely to be executed from \"text\"\n+\t  // that is likely executed.\n \t  os->set_is_unique_segment();\n-        }\n+\t}\n       else\n \t{\n \t  // Plugins can choose to place one or more subsets of sections in\n@@ -1221,19 +1221,19 @@ Layout::layout(Sized_relobj_file<size, big_endian>* object, unsigned int shndx,\n \t      // We know the name of the output section, directly call\n \t      // get_output_section here by-passing choose_output_section.\n \t      elfcpp::Elf_Xword flags\n-\t        = this->get_output_section_flags(shdr.get_sh_flags());\n+\t\t= this->get_output_section_flags(shdr.get_sh_flags());\n \n \t      const char* os_name = it->second->name;\n \t      Stringpool::Key name_key;\n \t      os_name = this->namepool_.add(os_name, true, &name_key);\n \t      os = this->get_output_section(os_name, name_key, sh_type, flags,\n \t\t\t\t\tORDER_INVALID, false);\n \t      if (!os->is_unique_segment())\n-\t        {\n-\t          os->set_is_unique_segment();\n-\t          os->set_extra_segment_flags(it->second->flags);\n-\t          os->set_segment_alignment(it->second->align);\n-\t        }\n+\t\t{\n+\t\t  os->set_is_unique_segment();\n+\t\t  os->set_extra_segment_flags(it->second->flags);\n+\t\t  os->set_segment_alignment(it->second->align);\n+\t\t}\n \t    }\n \t  }\n       if (os == NULL)\n@@ -2268,53 +2268,53 @@ Layout::layout_gnu_property(unsigned int note_type,\n       const int size = parameters->target().get_size();\n       const bool is_big_endian = parameters->target().is_big_endian();\n       if (size == 32)\n-        {\n-          if (is_big_endian)\n-            {\n+\t{\n+\t  if (is_big_endian)\n+\t    {\n #ifdef HAVE_TARGET_32_BIG\n \t      parameters->sized_target<32, true>()->\n \t\t  record_gnu_property(note_type, pr_type, pr_datasz, pr_data,\n \t\t\t\t      object);\n #else\n \t      gold_unreachable();\n #endif\n-            }\n-          else\n-            {\n+\t    }\n+\t  else\n+\t    {\n #ifdef HAVE_TARGET_32_LITTLE\n \t      parameters->sized_target<32, false>()->\n \t\t  record_gnu_property(note_type, pr_type, pr_datasz, pr_data,\n \t\t\t\t      object);\n #else\n \t      gold_unreachable();\n #endif\n-            }\n-        }\n+\t    }\n+\t}\n       else if (size == 64)\n-        {\n-          if (is_big_endian)\n-            {\n+\t{\n+\t  if (is_big_endian)\n+\t    {\n #ifdef HAVE_TARGET_64_BIG\n \t      parameters->sized_target<64, true>()->\n \t\t  record_gnu_property(note_type, pr_type, pr_datasz, pr_data,\n \t\t\t\t      object);\n #else\n \t      gold_unreachable();\n #endif\n-            }\n-          else\n-            {\n+\t    }\n+\t  else\n+\t    {\n #ifdef HAVE_TARGET_64_LITTLE\n \t      parameters->sized_target<64, false>()->\n \t\t  record_gnu_property(note_type, pr_type, pr_datasz, pr_data,\n \t\t\t\t      object);\n #else\n \t      gold_unreachable();\n #endif\n-            }\n-        }\n+\t    }\n+\t}\n       else\n-        gold_unreachable();\n+\tgold_unreachable();\n       return;\n     }\n \n@@ -2922,6 +2922,8 @@ Layout::read_layout_from_file()\n     gold_fatal(_(\"unable to open --section-ordering-file file %s: %s\"),\n \t       filename, strerror(errno));\n \n+  File_read::record_file_read(filename);\n+\n   std::getline(in, line);   // this chops off the trailing \\n, if any\n   unsigned int position = 1;\n   this->set_section_ordering_specified();\n@@ -3299,7 +3301,7 @@ Layout::create_gnu_properties_note()\n       write_sized_value(datasz, 4, p + 4, is_big_endian);\n       memcpy(p + 8, prop->second.pr_data, datasz);\n       if (aligned_datasz > datasz)\n-        memset(p + 8 + datasz, 0, aligned_datasz - datasz);\n+\tmemset(p + 8 + datasz, 0, aligned_datasz - datasz);\n       p += 8 + aligned_datasz;\n     }\n   Output_section_data* posd = new Output_data_const(desc, descsz, 4);\n@@ -6156,6 +6158,10 @@ Close_task_runner::run(Workqueue*, const Task*)\n   if (this->options_->oformat_enum() != General_options::OBJECT_FORMAT_ELF)\n     this->layout_->write_binary(this->of_);\n \n+  if (this->options_->dependency_file())\n+    File_read::write_dependency_file(this->options_->dependency_file(),\n+\t\t\t\t     this->options_->output_file_name());\n+\n   this->of_->close();\n }\n "
    },
    {
      "sha": "3c8d25a6628206188260b1272be464c6f0b036f7",
      "filename": "gold/options.h",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/gold/options.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/gold/options.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/options.h?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -472,7 +472,7 @@ struct Struct_special : public Struct_var\n   options::String_set::const_iterator\t\t\t\t\t  \\\n   varname__##_end() const\t\t\t\t\t\t  \\\n   { return this->varname__##_.value.end(); }                              \\\n-                                                                          \\\n+\t\t\t\t\t\t\t\t\t  \\\n   options::String_set::size_type                                          \\\n   varname__##_size() const                                                \\\n   { return this->varname__##_.value.size(); }                             \\\n@@ -800,6 +800,10 @@ class General_options\n \t      N_(\"Do not demangle C++ symbols in log messages\"),\n \t      NULL);\n \n+  DEFINE_string(dependency_file, options::TWO_DASHES, '\\0', NULL,\n+\t\tN_(\"Write a dependency file listing all files read\"),\n+\t\tN_(\"FILE\"));\n+\n   DEFINE_bool(detect_odr_violations, options::TWO_DASHES, '\\0', false,\n \t      N_(\"Look for violations of the C++ One Definition Rule\"),\n \t      N_(\"Do not look for violations of the C++ One Definition Rule\"));\n@@ -1501,10 +1505,10 @@ class General_options\n   DEFINE_uint64(stack_size, options::DASH_Z, '\\0', 0,\n \t\tN_(\"Set PT_GNU_STACK segment p_memsz to SIZE\"), N_(\"SIZE\"));\n   DEFINE_enum(start_stop_visibility, options::DASH_Z, '\\0', \"protected\",\n-              N_(\"ELF symbol visibility for synthesized \"\n-                 \"__start_* and __stop_* symbols\"),\n-              (\"[default,internal,hidden,protected]\"),\n-              {\"default\", \"internal\", \"hidden\", \"protected\"});\n+\t      N_(\"ELF symbol visibility for synthesized \"\n+\t\t \"__start_* and __stop_* symbols\"),\n+\t      (\"[default,internal,hidden,protected]\"),\n+\t      {\"default\", \"internal\", \"hidden\", \"protected\"});\n   DEFINE_bool(text, options::DASH_Z, '\\0', false,\n \t      N_(\"Do not permit relocations in read-only segments\"),\n \t      N_(\"Permit relocations in read-only segments\"));"
    },
    {
      "sha": "791795661a0ca14d3a55d165ae4d119dc899b98a",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -1,3 +1,21 @@\n+2020-06-23  Roland McGrath  <mcgrathr@google.com>\n+\n+\tPR 22843\n+\t* NEWS: Note --dependency-file.\n+\t* ld.texi (Options): Document --dependency-file.\n+\t* ldlex.h (enum option_values): Add OPTION_DEPENDENCY_FILE.\n+\t* ld.h (ld_config_type): New member dependency_file.\n+\t* lexsup.c (ld_options, parse_args): Parse --dependency-file.\n+\t* ldmain.c (struct dependency_file): New type.\n+\t(dependency_files, dependency_files_tail): New static variables.\n+\t(track_dependency_files): New function.\n+\t(write_dependency_file): New function.\n+\t(main): Call it when --dependency-file was passed.\n+\t* ldfile.c (ldfile_try_open_bfd): Call track_dependency_files.\n+\t(ldfile_open_command_file_1): Likewise.\n+\t* ldelf.c (ldelf_try_needed): Likewise.\n+\t* pe-dll.c (pe_implied_import_dll): Likewise.\n+\n 2020-06-23  Alan Modra  <amodra@gmail.com>\n \n \tPR 26150"
    },
    {
      "sha": "4dd4f3c7528b9b0cd36c7bb220bb8014f0689294",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -28,6 +28,10 @@\n * Add ELF linker command-line option `-z start-stop-visibility=...' to control\n   the visibility of synthetic `__start_SECNAME` and `__stop_SECNAME` symbols.\n \n+* Add command-line option --dependency-file to write a Make-style dependency\n+  file listing the input files consulted by the linker, like the files written\n+  by the compiler's -M -MP options.\n+\n Changes in 2.34:\n \n * The ld check for \"PHDR segment not covered by LOAD segment\" is more"
    },
    {
      "sha": "1790dc81a66b61f1da393e054191045ece97516e",
      "filename": "ld/ld.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ld.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ld.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.h?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -286,6 +286,8 @@ typedef struct\n   char *map_filename;\n   FILE *map_file;\n \n+  char *dependency_file;\n+\n   unsigned int split_by_reloc;\n   bfd_size_type split_by_file;\n "
    },
    {
      "sha": "40b042de9b958690bf806e578b4e7f1f0a171687",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -893,6 +893,21 @@ Use @var{output} as the name for the program produced by @command{ld}; if this\n option is not specified, the name @file{a.out} is used by default.  The\n script command @code{OUTPUT} can also specify the output file name.\n \n+@kindex --dependency-file=@var{depfile}\n+@cindex dependency file\n+@item --dependency-file=@var{depfile}\n+Write a @dfn{dependency file} to @var{depfile}.  This file contains a rule\n+suitable for @code{make} describing the output file and all the input files\n+that were read to produce it.  The output is similar to the compiler's\n+output with @samp{-M -MP} (@pxref{Preprocessor Options,, Options\n+Controlling the Preprocessor, gcc.info, Using the GNU Compiler\n+Collection}).  Note that there is no option like the compiler's @samp{-MM},\n+to exclude ``system files'' (which is not a well-specified concept in the\n+linker, unlike ``system headers'' in the compiler).  So the output from\n+@samp{--dependency-file} is always specific to the exact state of the\n+installation where it was produced, and should not be copied into\n+distributed makefiles without careful editing.\n+\n @kindex -O @var{level}\n @cindex generating optimized output\n @item -O @var{level}"
    },
    {
      "sha": "6fa09cfe6f15f82d0f6c08d5197e213d69d0acca",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -262,6 +262,8 @@ ldelf_try_needed (struct dt_needed *needed, int force, int is_linux)\n       return FALSE;\n     }\n \n+  track_dependency_files (name);\n+\n   /* Linker needs to decompress sections.  */\n   abfd->flags |= BFD_DECOMPRESS;\n \n@@ -1065,7 +1067,7 @@ ldelf_after_open (int use_libpath, int native, int is_linux, int is_freebsd,\n \t}\n       return;\n     }\n-  \n+\n   if (!link_info.traditional_format)\n     {\n       bfd *elfbfd = NULL;"
    },
    {
      "sha": "e39170b5d94d53b491f3536f80e9ed85ed533140",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -142,6 +142,8 @@ ldfile_try_open_bfd (const char *attempt,\n       return FALSE;\n     }\n \n+  track_dependency_files (attempt);\n+\n   /* Linker needs to decompress sections.  */\n   entry->the_bfd->flags |= BFD_DECOMPRESS;\n \n@@ -416,21 +418,21 @@ ldfile_open_file (lang_input_statement_type *entry)\n       bfd_boolean found = FALSE;\n \n       /* If extra_search_path is set, entry->filename is a relative path.\n-         Search the directory of the current linker script before searching\n-         other paths. */\n+\t Search the directory of the current linker script before searching\n+\t other paths. */\n       if (entry->extra_search_path)\n-        {\n-          char *path = concat (entry->extra_search_path, slash, entry->filename,\n-                               (const char *)0);\n-          if (ldfile_try_open_bfd (path, entry))\n-            {\n-              entry->filename = path;\n-              entry->flags.search_dirs = FALSE;\n-              return;\n-            }\n+\t{\n+\t  char *path = concat (entry->extra_search_path, slash, entry->filename,\n+\t\t\t       (const char *)0);\n+\t  if (ldfile_try_open_bfd (path, entry))\n+\t    {\n+\t      entry->filename = path;\n+\t      entry->flags.search_dirs = FALSE;\n+\t      return;\n+\t    }\n \n \t  free (path);\n-        }\n+\t}\n \n       /* Try to open <filename><suffix> or lib<filename><suffix>.a.  */\n       for (arch = search_arch_head; arch != NULL; arch = arch->next)\n@@ -675,6 +677,8 @@ ldfile_open_command_file_1 (const char *name, enum script_open_style open_how)\n       return;\n     }\n \n+  track_dependency_files (name);\n+\n   lex_push_file (ldlex_input_stack, name, sysrooted);\n \n   lineno = 1;"
    },
    {
      "sha": "5ea083ebeb302f7fb82c86b7f7c381a5d553edf3",
      "filename": "ld/ldlex.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldlex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldlex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.h?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -154,6 +154,7 @@ enum option_values\n   OPTION_NO_PRINT_MAP_DISCARDED,\n   OPTION_NON_CONTIGUOUS_REGIONS,\n   OPTION_NON_CONTIGUOUS_REGIONS_WARNINGS,\n+  OPTION_DEPENDENCY_FILE,\n };\n \n /* The initial parser states.  */"
    },
    {
      "sha": "08be9030cb57e3835b6ba88b259caf5e7460e873",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 51,
      "deletions": 1,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -160,6 +160,53 @@ static bfd_error_handler_type default_bfd_error_handler;\n \n struct bfd_link_info link_info;\n \f\n+struct dependency_file\n+{\n+  struct dependency_file *next;\n+  char *name;\n+};\n+\n+static struct dependency_file *dependency_files, *dependency_files_tail;\n+\n+void\n+track_dependency_files (const char *filename)\n+{\n+  struct dependency_file *dep\n+    = (struct dependency_file *) xmalloc (sizeof (*dep));\n+  dep->name = xstrdup (filename);\n+  dep->next = NULL;\n+  if (dependency_files == NULL)\n+    dependency_files = dep;\n+  else\n+    dependency_files_tail->next = dep;\n+  dependency_files_tail = dep;\n+}\n+\n+static void\n+write_dependency_file (void)\n+{\n+  FILE *out;\n+  struct dependency_file *dep;\n+\n+  out = fopen (config.dependency_file, FOPEN_WT);\n+  if (out == NULL)\n+    {\n+      einfo (_(\"%F%P: cannot open dependency file %s: %E\\n\"),\n+\t     config.dependency_file);\n+    }\n+\n+  fprintf (out, \"%s:\", output_filename);\n+\n+  for (dep = dependency_files; dep != NULL; dep = dep->next)\n+    fprintf (out, \" \\\\\\n  %s\", dep->name);\n+\n+  fprintf (out, \"\\n\");\n+  for (dep = dependency_files; dep != NULL; dep = dep->next)\n+    fprintf (out, \"\\n%s:\\n\", dep->name);\n+\n+  fclose (out);\n+}\n+\f\n static void\n ld_cleanup (void)\n {\n@@ -239,7 +286,7 @@ main (int argc, char **argv)\n       /* is_sysrooted_pathname() relies on no trailing dirsep.  */\n       if (ld_canon_sysroot_len > 0\n \t  && IS_DIR_SEPARATOR (ld_canon_sysroot [ld_canon_sysroot_len - 1]))\n-        ld_canon_sysroot [--ld_canon_sysroot_len] = '\\0';\n+\tld_canon_sysroot [--ld_canon_sysroot_len] = '\\0';\n     }\n   else\n     ld_canon_sysroot_len = -1;\n@@ -481,6 +528,9 @@ main (int argc, char **argv)\n   ldexp_finish ();\n   lang_finish ();\n \n+  if (config.dependency_file != NULL)\n+    write_dependency_file ();\n+\n   /* Even if we're producing relocatable output, some non-fatal errors should\n      be reported in the exit status.  (What non-fatal errors, if any, do we\n      want to ignore for relocatable output?)  */"
    },
    {
      "sha": "ac7db5720d5729d95577fc97008fe95ba7fe5d1e",
      "filename": "ld/ldmain.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldmain.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/ldmain.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.h?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -58,5 +58,6 @@ extern void add_ysym (const char *);\n extern void add_wrap (const char *);\n extern void add_ignoresym (struct bfd_link_info *, const char *);\n extern void add_keepsyms_file (const char *);\n+extern void track_dependency_files (const char *);\n \n #endif"
    },
    {
      "sha": "48c6eca99fd47e49f9538bdd49bb3ff13e8a4f5b",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -111,6 +111,8 @@ static const struct ld_option ld_options[] =\n     'c', N_(\"FILE\"), N_(\"Read MRI format linker script\"), TWO_DASHES },\n   { {\"dc\", no_argument, NULL, 'd'},\n     'd', NULL, N_(\"Force common symbols to be defined\"), ONE_DASH },\n+  { {\"dependency-file\", required_argument, NULL, OPTION_DEPENDENCY_FILE},\n+    '\\0', N_(\"FILE\"), N_(\"Write dependency file\"), TWO_DASHES },\n   { {\"dp\", no_argument, NULL, 'd'},\n     '\\0', NULL, NULL, ONE_DASH },\n   { {\"force-group-allocation\", no_argument, NULL,\n@@ -1441,7 +1443,7 @@ parse_args (unsigned argc, char **argv)\n \t      = lang_new_vers_pattern (NULL, xstrdup (optarg), NULL,\n \t\t\t\t       FALSE);\n \t    lang_append_dynamic_list (&export_list, expr);\n-          }\n+\t  }\n \t  break;\n \tcase OPTION_EXPORT_DYNAMIC_SYMBOL_LIST:\n \t  /* This option indicates a small script that only specifies\n@@ -1631,6 +1633,10 @@ parse_args (unsigned argc, char **argv)\n \tcase OPTION_PRINT_MAP_DISCARDED:\n \t  config.print_map_discarded = TRUE;\n \t  break;\n+\n+\tcase OPTION_DEPENDENCY_FILE:\n+\t  config.dependency_file = optarg;\n+\t  break;\n \t}\n     }\n \n@@ -1906,14 +1912,14 @@ elf_shlib_list_options (FILE *file)\n     }\n   fprintf (file, _(\"\\\n   -P AUDITLIB, --depaudit=AUDITLIB\\n\" \"\\\n-                              Specify a library to use for auditing dependencies\\n\"));\n+\t\t\t      Specify a library to use for auditing dependencies\\n\"));\n   fprintf (file, _(\"\\\n   -z combreloc                Merge dynamic relocs into one section and sort\\n\"));\n   fprintf (file, _(\"\\\n   -z nocombreloc              Don't merge dynamic relocs into one section\\n\"));\n   fprintf (file, _(\"\\\n   -z global                   Make symbols in DSO available for subsequently\\n\\\n-                               loaded objects\\n\"));\n+\t\t\t       loaded objects\\n\"));\n   fprintf (file, _(\"\\\n   -z initfirst                Mark DSO to be initialized first at runtime\\n\"));\n   fprintf (file, _(\"\\\n@@ -1936,7 +1942,7 @@ elf_shlib_list_options (FILE *file)\n   -z now                      Mark object non-lazy runtime binding\\n\"));\n   fprintf (file, _(\"\\\n   -z origin                   Mark object requiring immediate $ORIGIN\\n\\\n-                                processing at runtime\\n\"));\n+\t\t\t\tprocessing at runtime\\n\"));\n #if DEFAULT_LD_Z_RELRO\n   fprintf (file, _(\"\\\n   -z relro                    Create RELRO program header (default)\\n\"));\n@@ -1994,13 +2000,13 @@ elf_static_list_options (FILE *file)\n   --build-id[=STYLE]          Generate build ID note\\n\"));\n   fprintf (file, _(\"\\\n   --compress-debug-sections=[none|zlib|zlib-gnu|zlib-gabi]\\n\\\n-                              Compress DWARF debug sections using zlib\\n\"));\n+\t\t\t      Compress DWARF debug sections using zlib\\n\"));\n #ifdef DEFAULT_FLAG_COMPRESS_DEBUG\n   fprintf (file, _(\"\\\n-                               Default: zlib-gabi\\n\"));\n+\t\t\t       Default: zlib-gabi\\n\"));\n #else\n   fprintf (file, _(\"\\\n-                               Default: none\\n\"));\n+\t\t\t       Default: none\\n\"));\n #endif\n   fprintf (file, _(\"\\\n   -z common-page-size=SIZE    Set common page size to SIZE\\n\"));\n@@ -2025,7 +2031,7 @@ elf_plt_unwind_list_options (FILE *file)\n   --ld-generated-unwind-info  Generate exception handling info for PLT\\n\"));\n   fprintf (file, _(\"\\\n   --no-ld-generated-unwind-info\\n\\\n-                              Don't generate exception handling info for PLT\\n\"));\n+\t\t\t      Don't generate exception handling info for PLT\\n\"));\n }\n \n static void"
    },
    {
      "sha": "3e8fe1be9b3071e59fa8f8250ea73509d1f44093",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b21b481a7804a13c5806098c19b6119288ba4/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b21b481a7804a13c5806098c19b6119288ba4/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=f37b21b481a7804a13c5806098c19b6119288ba4",
      "patch": "@@ -3344,6 +3344,8 @@ pe_implied_import_dll (const char *filename)\n       return FALSE;\n     }\n \n+  track_dependency_files (filename);\n+\n   /* PEI dlls seem to be bfd_objects.  */\n   if (!bfd_check_format (dll, bfd_object))\n     {"
    }
  ]
}