{
  "sha": "e7b430724d89288f06926999811c71400e0d1531",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTdiNDMwNzI0ZDg5Mjg4ZjA2OTI2OTk5ODExYzcxNDAwZTBkMTUzMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-13T20:08:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-22T19:09:30Z"
    },
    "message": "gdb: don't print escape characters when a style is disabled\n\nWhile working on another patch I noticed that if I disable a single\nstyle with, for example:\n\n  set style filename background none\n  set style filename foreground none\n  set style filename intensity normal\n\nThen in some places escape characters are still injected into the\noutput stream.  This is a bit of an edge case, and I can't think when\nthis would actually cause problems, but it still felt like a bit of an\nannoyance.\n\nOne place where this does impact is in testing, where it becomes\nharder to write tight test patterns if it is not obvious when GDB will\ndecide to inject escape sequences.\n\nIt's especially annoying because depending on how something is printed\nthen GDB might, or might not, add escape characters.  So this would\nnot add escape characters if the filename style was disabled:\n\n  fprintf_filtered (file, \"%ps\",\n                    styled_string (file_name_style.style (),\n                                   \"This is a test\"));\n\nBut this would add escape characters:\n\n  fprintf_styled (file, file_name_style.style (),\n                  \"%s\", \"This is a test\");\n\nI tracked this down to some calls to set_output_style in utils.c.\nCurrently some calls to set_output_style (in utils.c) are guarded like\nthis:\n\n  if (!STYLE.is_default ())\n    set_output_style (stream, STYLE);\n\nBut some calls are not.  It is the calls that are NOT guarded that\ncause the extra escape sequences to be emitted.\n\nMy initial proposal to resolve this issue was simply to ensure that\nall calls to set_output_style were guarded.  The patch I posted for\nthis can be found here:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-January/175096.html\n\nThe feedback on this proposal was that it might be better to guard\nagainst the escape sequences being emitted at a later lever, right\ndown at emit_style_escape.\n\nSo this is what this version does.  In emit_style_escape we already\ntrack the currently applied style, so if the style we are being asked\nto switch to is the same as the currently applied style then no escape\nsequence needs to be emitted.\n\nMaking this change immediately exposed some issues in\nfputs_maybe_filtered related to line wrapping.  The best place to start\nto understand what's going on with the styling and wrapping is look at\nthe test:\n\n  gdb.base/style.exp: all styles enabled: frame when width=20\n\nIf you run this test and then examine the output in an editor so the\nescape sequences can be seen you'll see the duplicate escape sequences\nthat are emitted before this patch, the compare to after this patch\nyou'll see the set of escape sequences should be the minimum required.\n\nIn order to test these changes I have rewritten the gdb.base/style.exp\ntest script.  The core of the script is now run multiple times.  The\nfirst time the test is run things are as they were before, all styles\nare on.\n\nAfter that the test is rerun multiple times.  Each time through a\nsingle style is disabled using the 3 explicit set calls listed above.\nI then repeat all the tests, however, I arrange so that the patterns\nfor the disabled style now require no escape sequences.\n\ngdb/ChangeLog:\n\n\t* utils.c (emit_style_escape): Only emit an escape sequence if the\n\trequested style is different than the current applied style.\n\t(fputs_maybe_filtered): Adjust the juggling of the wrap_style, and\n\tcurrent applied_style.\n\t(fputs_styled): Remove is_default check.\n\t(fputs_styled_unfiltered): Likewise.\n\t(vfprintf_styled_no_gdbfmt): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/style.exp (limited_style): New proc.\n\t(clean_restart_and_disable): New proc.\n\t(run_style_tests): New proc.  Most of the old tests from this file\n\tare now in this proc.\n\t(test_startup_version_string): New proc.  Reamining test from the\n\told file is in this proc.",
    "tree": {
      "sha": "0b6c2927cdf4a03b062f2975c49e54d7e42b1a06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0b6c2927cdf4a03b062f2975c49e54d7e42b1a06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e7b430724d89288f06926999811c71400e0d1531",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7b430724d89288f06926999811c71400e0d1531",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e7b430724d89288f06926999811c71400e0d1531",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7b430724d89288f06926999811c71400e0d1531/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8c4766d31456946a2a42239bccc789af3eaa1b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8c4766d31456946a2a42239bccc789af3eaa1b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8c4766d31456946a2a42239bccc789af3eaa1b9"
    }
  ],
  "stats": {
    "total": 523,
    "additions": 315,
    "deletions": 208
  },
  "files": [
    {
      "sha": "18368305715f8ea1e74aee177ca8df0139597c69",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7b430724d89288f06926999811c71400e0d1531/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7b430724d89288f06926999811c71400e0d1531/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e7b430724d89288f06926999811c71400e0d1531",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* utils.c (emit_style_escape): Only emit an escape sequence if the\n+\trequested style is different than the current applied style.\n+\t(fputs_maybe_filtered): Adjust the juggling of the wrap_style, and\n+\tcurrent applied_style.\n+\t(fputs_styled): Remove is_default check.\n+\t(fputs_styled_unfiltered): Likewise.\n+\t(vfprintf_styled_no_gdbfmt): Likewise.\n+\n 2021-01-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* remote.h (remote_debug_printf): New."
    },
    {
      "sha": "6537bba41b3c86e6ee1f7685aed5e42b5cef8529",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7b430724d89288f06926999811c71400e0d1531/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7b430724d89288f06926999811c71400e0d1531/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e7b430724d89288f06926999811c71400e0d1531",
      "patch": "@@ -1,3 +1,12 @@\n+2021-01-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/style.exp (limited_style): New proc.\n+\t(clean_restart_and_disable): New proc.\n+\t(run_style_tests): New proc.  Most of the old tests from this file\n+\tare now in this proc.\n+\t(test_startup_version_string): New proc.  Reamining test from the\n+\told file is in this proc.\n+\n 2021-01-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* lib/range-stepping-support.exp (exec_cmd_expect_vCont_count):"
    },
    {
      "sha": "08cd63546bd3f7df54c4dfd078717cae5078c229",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 259,
      "deletions": 172,
      "changes": 431,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7b430724d89288f06926999811c71400e0d1531/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7b430724d89288f06926999811c71400e0d1531/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=e7b430724d89288f06926999811c71400e0d1531",
      "patch": "@@ -17,203 +17,290 @@\n \n standard_testfile\n \n-save_vars { env(TERM) } {\n-    # We need an ANSI-capable terminal to get the output.\n-    setenv TERM ansi\n-\n-    set test_macros 0\n-    set options debug\n-    get_compiler_info\n-    if { [test_compiler_info \"gcc-*\"] || [test_compiler_info \"clang-*\"] } {\n-\tlappend options additional_flags=-g3\n-\tset test_macros 1\n-    }\n+# Compile the test executable.\n+set test_macros 0\n+set options debug\n+get_compiler_info\n+if { [test_compiler_info \"gcc-*\"] || [test_compiler_info \"clang-*\"] } {\n+    lappend options additional_flags=-g3\n+    set test_macros 1\n+}\n \n-    if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile \\\n-\t     $options]} {\n-\treturn -1\n-    }\n+if {[build_executable \"failed to build\" $testfile $srcfile $options]} {\n+    return -1\n+}\n \n-    set readnow [readnow]\n+# The tests in this file are run multiple times with GDB's styles\n+# disabled one at a time.  This variable is the style that is\n+# currently disabled.\n+set currently_disabled_style \"\"\n \n-    if {![runto_main]} {\n-\tfail \"style tests failed\"\n-\treturn\n+# A wrapper around the 'style' function found in gdb-utils.exp,\n+# filter out requests for the disabled style.\n+proc limited_style { str style } {\n+    global currently_disabled_style\n+\n+    if { $style != $currently_disabled_style } {\n+\treturn [style $str $style]\n     }\n \n-    # Check that the source highlighter has not stripped away the leading\n-    # newlines.\n-    set main_line [gdb_get_line_number \"break here\"]\n-    gdb_test \"list $main_line,$main_line\" \"return.*some_called_function.*\"\n+    return $str\n+}\n \n-    gdb_test_no_output \"set style enabled off\"\n+# A wrapper around 'clean_restart' from gdb.exp, this performs the\n+# normal clean_restart, but then disables the currently disabled\n+# style.\n+proc clean_restart_and_disable { args } {\n+    global currently_disabled_style\n \n-    set argv \"\"\n-    gdb_test_multiple \"frame\" \"frame without styling\" {\n-\t-re -wrap \"main \\\\(argc=.*, (argv=$hex)\\\\).*style\\\\.c:\\[0-9\\].*\" {\n-\t    set argv $expect_out(1,string)\n-\t    pass $gdb_test_name\n-\t}\n-    }\n+    eval \"clean_restart $args\"\n \n-    gdb_test_no_output \"set style enabled on\"\n+    if { $currently_disabled_style != \"\" } {\n+\tset st $currently_disabled_style\n+\tgdb_test_no_output \"set style $st background none\" \"\"\n+\tgdb_test_no_output \"set style $st foreground none\" \"\"\n+\tgdb_test_no_output \"set style $st intensity normal\" \"\"\n+    }\n+}\n \n-    set main_expr [style main function]\n-    set base_file_expr [style \".*style\\\\.c\" file]\n-    set file_expr \"$base_file_expr:\\[0-9\\]\"\n-    set arg_expr [style \"arg.\" variable]\n+# The core of this test script.  Run some tests of different aspects\n+# of GDB's styling.\n+#\n+# Within this proc always use LIMITED_STYLE instead of STYLE, and\n+# CLEAN_RESTART_AND_DISABLE instead of CLEAN_RESTART, this ensures\n+# that the test operates as expected as styles are disabled.\n+proc run_style_tests { } {\n+    global testfile srcfile hex binfile test_macros\n+    global currently_disabled_style decimal hex\n+\n+    save_vars { env(TERM) } {\n+\t# We need an ANSI-capable terminal to get the output.\n+\tsetenv TERM ansi\n+\n+\t# Restart GDB with the correct TERM variable setting, this\n+\t# means that GDB will enable styling.\n+\tclean_restart_and_disable ${binfile}\n+\n+\tset readnow [readnow]\n+\n+\tif {![runto_main]} {\n+\t    fail \"style tests failed\"\n+\t    return\n+\t}\n \n-    gdb_test \"frame\" \\\n-\t\"$main_expr.*$arg_expr.*$arg_expr.*$file_expr.*\"\n-    gdb_test \"info breakpoints\" \"$main_expr at $file_expr.*\"\n+\t# Check that the source highlighter has not stripped away the\n+\t# leading newlines.\n+\tset main_line [gdb_get_line_number \"break here\"]\n+\tgdb_test \"list $main_line,$main_line\" \"return.*some_called_function.*\"\n \n-    gdb_test_no_output \"set style sources off\"\n-    gdb_test \"frame\" \\\n-\t\"\\r\\n\\[^\\033\\]*break here.*\" \\\n-\t\"frame without sources styling\"\n-    gdb_test_no_output \"set style sources on\"\n+\tgdb_test_no_output \"set style enabled off\"\n \n-    gdb_test \"break -q main\" \"file $base_file_expr.*\"\n+\tset argv \"\"\n+\tgdb_test_multiple \"frame\" \"frame without styling\" {\n+\t    -re -wrap \"main \\\\(argc=.*, (argv=$hex)\\\\).*style\\\\.c:\\[0-9\\].*\" {\n+\t\tset argv $expect_out(1,string)\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}\n \n-    gdb_test \"print &main\" \" = .* [style $hex address] <$main_expr>\"\n+\tgdb_test_no_output \"set style enabled on\"\n \n-    # Regression test for a bug where line-wrapping would occur at the\n-    # wrong spot with styling.  There were different bugs at different\n-    # widths, so try two.\n-    foreach width {20 30} {\n-\tset argv_len [string length $argv]\n-\tif { $argv_len == 0 } {\n-\t    continue\n-\t}\n+\tset main_expr [limited_style main function]\n+\tset base_file_expr [limited_style \".*style\\\\.c\" file]\n+\tset file_expr \"$base_file_expr:\\[0-9\\]+\"\n+\tset arg_expr [limited_style \"arg.\" variable]\n \n-\t# There was also a bug where the styling could be wrong in the\n-\t# line listing; this is why the words from the source code are\n-\t# spelled out in the final result line of the test.\n-\tset re1_styled \\\n+\tgdb_test \"frame\" \\\n \t    [multi_line \\\n-\t\t \"#0 *$main_expr.*$arg_expr.*\" \\\n-\t\t \".*$arg_expr.*\" \\\n-\t\t \".* at .*$file_expr.*\" \\\n-\t\t \"\\[0-9\\]+.*return.* break here .*\"]\n-\tset re2_styled \\\n-\t    [multi_line \\\n-\t\t \"#0 *$main_expr.*$arg_expr.*\" \\\n-\t\t \".*$arg_expr.* at .*$file_expr.*\" \\\n-\t\t \"\\[0-9\\]+.*return.* break here .*\"]\n-\n-\t# The length of the line containing argv containing:\n-\t# - 4 leading spaces\n-\t# - argv string\n-\t# - closing parenthesis\n-\tset line_len [expr 4 + $argv_len + 1]\n-\n-\tif { $line_len > $width } {\n-\t    # At on the next line.\n-\t    set re_styled $re1_styled\n-\t} else {\n-\t    # At on the same line as argv.\n-\t    set re_styled $re2_styled\n+\t\t \"#0\\\\s+$main_expr\\\\s+\\\\($arg_expr=$decimal,\\\\s+$arg_expr=$hex\\\\)\\\\s+at\\\\s+$file_expr\" \\\n+\t\t \"\\[0-9\\]+\\\\s+.*return.* break here .*\"]\n+\tgdb_test \"info breakpoints\" \"$main_expr at $file_expr.*\"\n+\n+\tgdb_test_no_output \"set style sources off\"\n+\tgdb_test \"frame\" \\\n+\t    \"\\r\\n\\[^\\033\\]*break here.*\" \\\n+\t    \"frame without sources styling\"\n+\tgdb_test_no_output \"set style sources on\"\n+\n+\tgdb_test \"break -q main\" \"file $base_file_expr.*\"\n+\n+\tgdb_test \"print &main\" \" = .* [limited_style $hex address] <$main_expr>\"\n+\n+\t# Regression test for a bug where line-wrapping would occur at\n+\t# the wrong spot with styling.  There were different bugs at\n+\t# different widths, so try two.\n+\tforeach width {20 30} {\n+\t    set argv_len [string length $argv]\n+\t    if { $argv_len == 0 } {\n+\t\tcontinue\n+\t    }\n+\n+\t    # There was also a bug where the styling could be wrong in\n+\t    # the line listing; this is why the words from the source\n+\t    # code are spelled out in the final result line of the\n+\t    # test.\n+\t    set re1_styled \\\n+\t\t[multi_line \\\n+\t\t     \"#0\\\\s+$main_expr\\\\s+\\\\($arg_expr=$decimal,\\\\s+\" \\\n+\t\t     \"\\\\s+$arg_expr=$hex\\\\)\" \\\n+\t\t     \"\\\\s+at\\\\s+$file_expr\" \\\n+\t\t     \"\\[0-9\\]+\\\\s+.*return.* break here .*\"]\n+\t    set re2_styled \\\n+\t\t[multi_line \\\n+\t\t     \"#0\\\\s+$main_expr\\\\s+\\\\($arg_expr=.*\" \\\n+\t\t     \"\\\\s+$arg_expr=$hex\\\\)\\\\s+at\\\\s+$file_expr\" \\\n+\t\t     \"\\[0-9\\]+\\\\s+.*return.* break here .*\"]\n+\n+\t    # The length of the line containing argv containing:\n+\t    # - 4 leading spaces\n+\t    # - argv string\n+\t    # - closing parenthesis\n+\t    set line_len [expr 4 + $argv_len + 1]\n+\n+\t    if { $line_len > $width } {\n+\t\t# At on the next line.\n+\t\tset re_styled $re1_styled\n+\t    } else {\n+\t\t# At on the same line as argv.\n+\t\tset re_styled $re2_styled\n+\t    }\n+\n+\t    gdb_test_no_output \"set width $width\"\n+\t    gdb_test \"frame\" $re_styled \"frame when width=$width\"\n \t}\n \n-\tgdb_test_no_output \"set width $width\"\n-\tgdb_test \"frame\" $re_styled \"frame when width=$width\"\n-    }\n-\n-    # Reset width back to 0.\n-    gdb_test_no_output \"set width 0\"\n+\t# Reset width back to 0.\n+\tgdb_test_no_output \"set width 0\" \"\"\n \n-    if {$test_macros} {\n-\tset macro_line [gdb_get_line_number \"\\#define SOME_MACRO\"]\n-\tgdb_test \"info macro SOME_MACRO\" \\\n-\t    \"Defined at $base_file_expr:$macro_line\\r\\n#define SOME_MACRO 23\"\n-    }\n+\tif {$test_macros} {\n+\t    set macro_line [gdb_get_line_number \"\\#define SOME_MACRO\"]\n+\t    gdb_test \"info macro SOME_MACRO\" \\\n+\t\t\"Defined at $base_file_expr:$macro_line\\r\\n#define SOME_MACRO 23\"\n+\t}\n \n-    set main [style main function]\n-    set func [style some_called_function function]\n-    # Somewhere should see the call to the function.\n-    gdb_test \"disassemble main\" \\\n-\t[concat \"Dump of assembler code for function $main:.*\" \\\n-\t     \"[style $hex address].*$func.*\"]\n+\tgdb_test_no_output \"set width 0\"\n+\n+\tset main [limited_style main function]\n+\tset func [limited_style some_called_function function]\n+\t# Somewhere should see the call to the function.\n+\tgdb_test \"disassemble main\" \\\n+\t    [concat \"Dump of assembler code for function $main:.*\" \\\n+\t\t \"[limited_style $hex address].*$func.*\"]\n+\n+\tset ifield [limited_style int_field variable]\n+\tset sfield [limited_style string_field variable]\n+\tset efield [limited_style e_field variable]\n+\tset evalue [limited_style VALUE_TWO variable]\n+\tgdb_test \"print struct_value\" \\\n+\t    \"\\{$ifield = 23,.*$sfield = .*,.*$efield = $evalue.*\"\n+\n+\tset address_style_expr [limited_style \".*\\\".*address.*\\\".*style.*\" address]\n+\tset color \"blue\"\n+\tif { $currently_disabled_style == \"address\" } {\n+\t    set color \"none\"\n+\t}\n+\tgdb_test \"show style address foreground\" \\\n+\t    \"The ${address_style_expr} foreground color is: ${color}\" \\\n+\t    \"style name and style word styled using its own style in show style\"\n \n-    set ifield [style int_field variable]\n-    set sfield [style string_field variable]\n-    set efield [style e_field variable]\n-    set evalue [style VALUE_TWO variable]\n-    gdb_test \"print struct_value\" \\\n-\t\"\\{$ifield = 23,.*$sfield = .*,.*$efield = $evalue.*\"\n+\tset aliases_expr [limited_style \".*aliases.*\" title]\n+\tset breakpoints_expr [limited_style \".*breakpoints.*\" title]\n+\tgdb_test \"help\" \\\n+\t    [multi_line \\\n+\t\t \"List of classes of commands:\" \\\n+\t\t \"\" \\\n+\t\t \"${aliases_expr} -- User-defined aliases of other commands\\.\" \\\n+\t\t \"${breakpoints_expr} -- Making program stop at certain points\\.\" \\\n+\t\t \".*\" \\\n+\t\t] \\\n+\t    \"help classes of commands styled with title\"\n+\n+\tset taas_expr  [limited_style \".*taas.*\" title]\n+\tset tfaas_expr  [limited_style \".*tfaas.*\" title]\n+\tset cut_for_thre_expr [limited_style \"cut for 'thre\" highlight]\n+\tgdb_test \"apropos -v cut for 'thre\" \\\n+\t    [multi_line \\\n+\t\t \"\" \\\n+\t\t \"${taas_expr}\" \\\n+\t\t \"Apply a command to all .*\" \\\n+\t\t \"Usage:.*\" \\\n+\t\t \"short${cut_for_thre_expr}ad apply.*\" \\\n+\t\t \"\" \\\n+\t\t \"${tfaas_expr}\" \\\n+\t\t \"Apply a command to all .*\" \\\n+\t\t \"Usage:.*\" \\\n+\t\t \"short${cut_for_thre_expr}ad apply.*\" \\\n+\t\t]\n+\n+\tclean_restart_and_disable\n+\n+\tset quoted [string_to_regexp $binfile]\n+\tset pass_re \"Reading symbols from [limited_style $quoted file]\\.\\.\\.\"\n+\tif { $readnow } {\n+\t    set pass_re \\\n+\t\t[multi_line \\\n+\t\t     $pass_re \\\n+\t\t     \"Expanding full symbols from [limited_style $quoted file]\\.\\.\\.\"]\n+\t}\n+\tgdb_test \"file $binfile\" \\\n+\t    $pass_re \\\n+\t    \"filename is styled when loading symbol file\" \\\n+\t    \"Are you sure you want to change the file.*\" \\\n+\t    \"y\"\n+\n+\tgdb_test \"pwd\" \"Working directory [limited_style .*? file].*\"\n+\n+\tgdb_test_no_output \"set print repeat 3\"\n+\tgdb_test \"print {0,0,0,0,0,0,0,0}\" \\\n+\t    \" = \\\\{0 [limited_style {<repeats.*8.*times>} metadata]\\\\}\"\n+\n+\tgdb_test \"show logging file\" \\\n+\t    \"The current logfile is \\\"[limited_style .*? file]\\\"\\\\..*\"\n+\n+\t# Check warnings are styled by setting a rubbish data\n+\t# directory.\n+\tgdb_test \"set data-directory Makefile\" \\\n+\t    \"warning: [limited_style .*? file] is not a directory\\\\..*\"\n+\tgdb_test \"show data-directory\" \\\n+\t    \"GDB's data directory is \\\"[limited_style .*? file]\\\"\\\\..*\"\n+\n+\t# Check that deprecation styles command names.\n+\tgdb_test_no_output \"maintenance deprecate p \\\"new_p\\\"\" \\\n+\t    \"maintenance deprecate p \\\"new_p\\\" /1/\"\n+\tgdb_test \"p 5\" \\\n+\t    \"Warning: '[limited_style p title]', an alias for the command '[limited_style print title]', is deprecated.*Use '[limited_style new_p title]'.*\" \\\n+\t    \"p deprecated warning, with replacement\"\n+    }\n+}\n \n+# A separate test from the above as the styled text this checks can't\n+# currently be disabled (the text is printed too early in GDB's\n+# startup process).\n+proc test_startup_version_string { } {\n     gdb_exit\n     gdb_spawn\n \n+    # Deliberate use of base STYLE proc here as the style of the\n+    # startup version string can't (currently) be controlled.\n     set vers [style \"GNU gdb.*\" \"35;1\"]\n-    gdb_test \"\" \"${vers}.*\" \\\n-\t\"version is styled\"\n-\n-    set address_style_expr [style \".*\\\".*address.*\\\".*style.*\" address]\n-    gdb_test \"show style address foreground\" \\\n-\t\"The ${address_style_expr} foreground color is: blue\" \\\n-\t\"style name and style word styled using its own style in show style\"\n-\n-    set aliases_expr [style \".*aliases.*\" title]\n-    set breakpoints_expr [style \".*breakpoints.*\" title]\n-    gdb_test \"help\" \\\n-\t[multi_line \\\n-\t     \"List of classes of commands:\" \\\n-\t     \"\" \\\n-\t     \"${aliases_expr} -- User-defined aliases of other commands\\.\" \\\n-\t     \"${breakpoints_expr} -- Making program stop at certain points\\.\" \\\n-\t     \".*\" \\\n-\t    ] \\\n-\t\"help classes of commands styled with title\"\n-\n-    set taas_expr  [style \".*taas.*\" title]\n-    set tfaas_expr  [style \".*tfaas.*\" title]\n-    set cut_for_thre_expr [style \"cut for 'thre\" highlight]\n-    gdb_test \"apropos -v cut for 'thre\" \\\n-\t[multi_line \\\n-\t     \"\" \\\n-\t     \"${taas_expr}\" \\\n-\t     \"Apply a command to all .*\" \\\n-\t     \"Usage:.*\" \\\n-\t     \"short${cut_for_thre_expr}ad apply.*\" \\\n-\t     \"\" \\\n-\t     \"${tfaas_expr}\" \\\n-\t     \"Apply a command to all .*\" \\\n-\t     \"Usage:.*\" \\\n-\t     \"short${cut_for_thre_expr}ad apply.*\" \\\n-\t    ]\n-\n-    set quoted [string_to_regexp $binfile]\n-    set pass_re \"Reading symbols from [style $quoted file]\\.\\.\\.\"\n-    if { $readnow } {\n-\tset pass_re \\\n-\t    [multi_line \\\n-\t\t $pass_re \\\n-\t\t \"Expanding full symbols from [style $quoted file]\\.\\.\\.\"]\n+    gdb_test \"\" \"${vers}.*\" \"version is styled at startup\"\n+}\n+\n+\n+# Run tests with all styles in their default state.\n+with_test_prefix \"all styles enabled\" {\n+    run_style_tests\n+}\n+\n+# Now, for each style in turn.  Disable that style only and run the\n+# test again.  Things in that style should NOT now be styled.\n+foreach style { title file function highlight variable \\\n+\t\t    address metadata } {\n+    set currently_disabled_style $style\n+    with_test_prefix \"disable style $style\" {\n+\trun_style_tests\n     }\n-    gdb_test \"file $binfile\" \\\n-\t$pass_re \\\n-\t\"filename is styled when loading symbol file\"\n-\n-    gdb_test \"pwd\" \"Working directory [style .*? file].*\"\n-\n-    gdb_test_no_output \"set print repeat 3\"\n-    gdb_test \"print {0,0,0,0,0,0,0,0}\" \\\n-\t\" = \\\\{0 [style {<repeats.*8.*times>} metadata]\\\\}\"\n-\n-    gdb_test \"show logging file\" \\\n-\t\"The current logfile is \\\"[style .*? file]\\\"\\\\..*\"\n-\n-    # Check warnings are styled by setting a rubbish data directory.\n-    gdb_test \"set data-directory Makefile\" \\\n-\t\"warning: [style .*? file] is not a directory\\\\..*\"\n-    gdb_test \"show data-directory\" \\\n-\t\"GDB's data directory is \\\"[style .*? file]\\\"\\\\..*\"\n-\n-    # Check that deprecation styles command names.\n-    gdb_test_no_output \"maintenance deprecate p \\\"new_p\\\"\" \\\n-\t\"maintenance deprecate p \\\"new_p\\\" /1/\"\n-    gdb_test \"p 5\" \\\n-\t\"Warning: '[style p title]', an alias for the command '[style print title]', is deprecated.*Use '[style new_p title]'.*\" \\\n-\t\"p deprecated warning, with replacement\"\n }\n+\n+# Finally, check the styling of the version string during startup.\n+test_startup_version_string"
    },
    {
      "sha": "b9f8997ec80c7d27ab56f8358c6df76b79286283",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 37,
      "deletions": 36,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7b430724d89288f06926999811c71400e0d1531/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7b430724d89288f06926999811c71400e0d1531/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=e7b430724d89288f06926999811c71400e0d1531",
      "patch": "@@ -1426,12 +1426,15 @@ static void\n emit_style_escape (const ui_file_style &style,\n \t\t   struct ui_file *stream = nullptr)\n {\n-  applied_style = style;\n+  if (applied_style != style)\n+    {\n+      applied_style = style;\n \n-  if (stream == nullptr)\n-    wrap_buffer.append (style.to_ansi ());\n-  else\n-    stream->puts (style.to_ansi ().c_str ());\n+      if (stream == nullptr)\n+\twrap_buffer.append (style.to_ansi ());\n+      else\n+\tstream->puts (style.to_ansi ().c_str ());\n+    }\n }\n \n /* Set the current output style.  This will affect future uses of the\n@@ -1800,14 +1803,20 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t prompt is given; and to avoid emitting style\n \t\t sequences in the middle of a run of text, we track\n \t\t this as well.  */\n-\t      ui_file_style save_style;\n+\t      ui_file_style save_style = applied_style;\n \t      bool did_paginate = false;\n \n \t      chars_printed = 0;\n \t      lines_printed++;\n \t      if (wrap_column)\n \t\t{\n-\t\t  save_style = wrap_style;\n+\t\t  /* We are about to insert a newline at an historic\n+\t\t     location in the WRAP_BUFFER.  Before we do we want to\n+\t\t     restore the default style.  To know if we actually\n+\t\t     need to insert an escape sequence we must restore the\n+\t\t     current applied style to how it was at the WRAP_COLUMN\n+\t\t     location.  */\n+\t\t  applied_style = wrap_style;\n \t\t  if (stream->can_emit_style_escape ())\n \t\t    emit_style_escape (ui_file_style (), stream);\n \t\t  /* If we aren't actually wrapping, don't output\n@@ -1822,10 +1831,7 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t  stream->puts (\"\\n\");\n \t\t}\n \t      else\n-\t\t{\n-\t\t  save_style = applied_style;\n-\t\t  flush_wrap_buffer (stream);\n-\t\t}\n+\t\tflush_wrap_buffer (stream);\n \n \t      /* Possible new page.  Note that\n \t\t PAGINATION_DISABLED_FOR_COMMAND might be set during\n@@ -1841,8 +1847,19 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t      if (wrap_column)\n \t\t{\n \t\t  stream->puts (wrap_indent);\n+\n+\t\t  /* Having finished inserting the wrapping we should\n+\t\t     restore the style as it was at the WRAP_COLUMN.  */\n \t\t  if (stream->can_emit_style_escape ())\n-\t\t    emit_style_escape (save_style, stream);\n+\t\t    emit_style_escape (wrap_style, stream);\n+\n+\t\t  /* The WRAP_BUFFER will still contain content, and that\n+\t\t     content might set some alternative style.  Restore\n+\t\t     APPLIED_STYLE as it was before we started wrapping,\n+\t\t     this reflects the current style for the last character\n+\t\t     in WRAP_BUFFER.  */\n+\t\t  applied_style = save_style;\n+\n \t\t  /* FIXME, this strlen is what prevents wrap_indent from\n \t\t     containing tabs.  However, if we recurse to print it\n \t\t     and count its chars, we risk trouble if wrap_indent is\n@@ -1895,16 +1912,9 @@ void\n fputs_styled (const char *linebuffer, const ui_file_style &style,\n \t      struct ui_file *stream)\n {\n-  /* This just makes it so we emit somewhat fewer escape\n-     sequences.  */\n-  if (style.is_default ())\n-    fputs_maybe_filtered (linebuffer, stream, 1);\n-  else\n-    {\n-      set_output_style (stream, style);\n-      fputs_maybe_filtered (linebuffer, stream, 1);\n-      set_output_style (stream, ui_file_style ());\n-    }\n+  set_output_style (stream, style);\n+  fputs_maybe_filtered (linebuffer, stream, 1);\n+  set_output_style (stream, ui_file_style ());\n }\n \n /* See utils.h.  */\n@@ -1913,16 +1923,9 @@ void\n fputs_styled_unfiltered (const char *linebuffer, const ui_file_style &style,\n \t\t\t struct ui_file *stream)\n {\n-  /* This just makes it so we emit somewhat fewer escape\n-     sequences.  */\n-  if (style.is_default ())\n-    fputs_maybe_filtered (linebuffer, stream, 0);\n-  else\n-    {\n-      set_output_style (stream, style);\n-      fputs_maybe_filtered (linebuffer, stream, 0);\n-      set_output_style (stream, ui_file_style ());\n-    }\n+  set_output_style (stream, style);\n+  fputs_maybe_filtered (linebuffer, stream, 0);\n+  set_output_style (stream, ui_file_style ());\n }\n \n /* See utils.h.  */\n@@ -2222,11 +2225,9 @@ vfprintf_styled_no_gdbfmt (struct ui_file *stream, const ui_file_style &style,\n   std::string str = string_vprintf (format, args);\n   if (!str.empty ())\n     {\n-      if (!style.is_default ())\n-\tset_output_style (stream, style);\n+      set_output_style (stream, style);\n       fputs_maybe_filtered (str.c_str (), stream, filter);\n-      if (!style.is_default ())\n-\tset_output_style (stream, ui_file_style ());\n+      set_output_style (stream, ui_file_style ());\n     }\n }\n "
    }
  ]
}