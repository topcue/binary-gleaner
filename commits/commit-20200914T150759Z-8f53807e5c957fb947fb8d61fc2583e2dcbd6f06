{
  "sha": "8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGY1MzgwN2U1Yzk1N2ZiOTQ3ZmI4ZDYxZmMyNTgzZTJkY2JkNmYwNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:59Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:59Z"
    },
    "message": "gdb: add type::target_is_stub / type::set_target_is_stub\n\nAdd the `target_is_stub` and `set_target_is_stub` methods on `struct\ntype`, in order to remove the `TYPE_TARGET_STUB` macro.  In this patch,\nthe macro is changed to use the getter, so all the call sites of the\nmacro that are used as a setter are changed to use the setter method\ndirectly.  The next patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <target_is_stub, set_target_is_stub>:\n\tNew methods.\n\t(TYPE_TARGET_STUB): Use type::is_stub, change all write call\n\tsites to use type::set_target_is_stub.\n\nChange-Id: I9c71a89adc7ae8d018db9ee156f41c623be0484a",
    "tree": {
      "sha": "649228e0a30a2999240fd9de4691f72a259dc536",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/649228e0a30a2999240fd9de4691f72a259dc536"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e46d3488de137cd5a01377513ff49e32595456af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e46d3488de137cd5a01377513ff49e32595456af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e46d3488de137cd5a01377513ff49e32595456af"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 34,
    "deletions": 16
  },
  "files": [
    {
      "sha": "644d70038d014ea77ab5f1e07ed690fcd8d908f3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <target_is_stub, set_target_is_stub>:\n+\tNew methods.\n+\t(TYPE_TARGET_STUB): Use type::is_stub, change all write call\n+\tsites to use type::set_target_is_stub.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_STUB): Remove, replace all"
    },
    {
      "sha": "81490baecc1f0db01c7281037fa9585455d4809a",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -776,7 +776,7 @@ read_array_type (struct ctf_context *ccp, ctf_id_t tid)\n     {\n       range_type->bounds ()->high.set_undefined ();\n       TYPE_LENGTH (type) = 0;\n-      TYPE_TARGET_STUB (type) = 1;\n+      type->set_target_is_stub (true);\n     }\n   else\n     TYPE_LENGTH (type) = ctf_type_size (fp, tid);\n@@ -876,7 +876,8 @@ read_typedef_type (struct ctf_context *ccp, ctf_id_t tid,\n     TYPE_TARGET_TYPE (this_type) = target_type;\n   else\n     TYPE_TARGET_TYPE (this_type) = NULL;\n-  TYPE_TARGET_STUB (this_type) = TYPE_TARGET_TYPE (this_type) ? 1 : 0;\n+\n+  this_type->set_target_is_stub (TYPE_TARGET_TYPE (this_type) != nullptr);\n \n   return set_tid_type (objfile, tid, this_type);\n }"
    },
    {
      "sha": "5f02acc01cb9c083b6dfa5f171fc79c27045d259",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -17795,7 +17795,7 @@ read_typedef (struct die_info *die, struct dwarf2_cu *cu)\n \n   name = dwarf2_full_name (NULL, die, cu);\n   this_type = init_type (objfile, TYPE_CODE_TYPEDEF, 0, name);\n-  TYPE_TARGET_STUB (this_type) = 1;\n+  this_type->set_target_is_stub (true);\n   set_die_type (die, this_type, cu);\n   target_type = die_type (die, cu);\n   if (target_type != this_type)"
    },
    {
      "sha": "a462e4d4ee2fc83c7703b21033318a75e2a86aa7",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -1643,14 +1643,14 @@ fbsd_get_siginfo_type (struct gdbarch *gdbarch)\n   pid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n \t\t\tTYPE_LENGTH (int32_type) * TARGET_CHAR_BIT, \"__pid_t\");\n   TYPE_TARGET_TYPE (pid_type) = int32_type;\n-  TYPE_TARGET_STUB (pid_type) = 1;\n+  pid_type->set_target_is_stub (true);\n \n   /* __uid_t */\n   uid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n \t\t\tTYPE_LENGTH (uint32_type) * TARGET_CHAR_BIT,\n \t\t\t\"__uid_t\");\n   TYPE_TARGET_TYPE (uid_type) = uint32_type;\n-  TYPE_TARGET_STUB (uid_type) = 1;\n+  pid_type->set_target_is_stub (true);\n \n   /* _reason */\n   reason_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);"
    },
    {
      "sha": "6dc073fb5ae015a8007d6e3a80f0906120d9ac48",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -935,7 +935,7 @@ create_range_type (struct type *result_type, struct type *index_type,\n   result_type->set_code (TYPE_CODE_RANGE);\n   TYPE_TARGET_TYPE (result_type) = index_type;\n   if (index_type->is_stub ())\n-    TYPE_TARGET_STUB (result_type) = 1;\n+    result_type->set_target_is_stub (true);\n   else\n     TYPE_LENGTH (result_type) = TYPE_LENGTH (check_typedef (index_type));\n \n@@ -1307,7 +1307,7 @@ create_array_type_with_stride (struct type *result_type,\n \n   /* TYPE_TARGET_STUB will take care of zero length arrays.  */\n   if (TYPE_LENGTH (result_type) == 0)\n-    TYPE_TARGET_STUB (result_type) = 1;\n+    result_type->set_target_is_stub (true);\n \n   return result_type;\n }\n@@ -2875,11 +2875,11 @@ check_typedef (struct type *type)\n       else if (type->code () == TYPE_CODE_RANGE)\n \t{\n \t  TYPE_LENGTH (type) = TYPE_LENGTH (target_type);\n-\t  TYPE_TARGET_STUB (type) = 0;\n+\t  type->set_target_is_stub (false);\n \t}\n       else if (type->code () == TYPE_CODE_ARRAY\n \t       && update_static_array_size (type))\n-\tTYPE_TARGET_STUB (type) = 0;\n+\ttype->set_target_is_stub (false);\n     }\n \n   type = make_qualified_type (type, instance_flags, NULL);"
    },
    {
      "sha": "c6c25183609c294c3c4cd568f56531f27f656caa",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -222,7 +222,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    based on the TYPE_LENGTH of the target type.  Also, set for\n    TYPE_CODE_TYPEDEF.  */\n \n-#define TYPE_TARGET_STUB(t)\t(TYPE_MAIN_TYPE (t)->flag_target_stub)\n+#define TYPE_TARGET_STUB(t)\t((t)->target_is_stub ())\n \n /* * This is a function type which appears to have a prototype.  We\n    need this for function calls in order to tell us if it's necessary\n@@ -841,7 +841,7 @@ struct main_type\n   unsigned int m_flag_unsigned : 1;\n   unsigned int m_flag_nosign : 1;\n   unsigned int m_flag_stub : 1;\n-  unsigned int flag_target_stub : 1;\n+  unsigned int m_flag_target_stub : 1;\n   unsigned int flag_prototyped : 1;\n   unsigned int flag_varargs : 1;\n   unsigned int flag_vector : 1;\n@@ -1092,6 +1092,16 @@ struct type\n     this->main_type->m_flag_stub = is_stub;\n   }\n \n+  bool target_is_stub () const\n+  {\n+    return this->main_type->m_flag_target_stub;\n+  }\n+\n+  void set_target_is_stub (bool target_is_stub)\n+  {\n+    this->main_type->m_flag_target_stub = target_is_stub;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "a0d954a620626d695007dc3607225305ed3128bc",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -266,20 +266,20 @@ linux_get_siginfo_type_with_fields (struct gdbarch *gdbarch,\n   pid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n \t\t\tTYPE_LENGTH (int_type) * TARGET_CHAR_BIT, \"__pid_t\");\n   TYPE_TARGET_TYPE (pid_type) = int_type;\n-  TYPE_TARGET_STUB (pid_type) = 1;\n+  pid_type->set_target_is_stub (true);\n \n   /* __uid_t */\n   uid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n \t\t\tTYPE_LENGTH (uint_type) * TARGET_CHAR_BIT, \"__uid_t\");\n   TYPE_TARGET_TYPE (uid_type) = uint_type;\n-  TYPE_TARGET_STUB (uid_type) = 1;\n+  uid_type->set_target_is_stub (true);\n \n   /* __clock_t */\n   clock_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n \t\t\t  TYPE_LENGTH (long_type) * TARGET_CHAR_BIT,\n \t\t\t  \"__clock_t\");\n   TYPE_TARGET_TYPE (clock_type) = long_type;\n-  TYPE_TARGET_STUB (clock_type) = 1;\n+  clock_type->set_target_is_stub (true);\n \n   /* _sifields */\n   sifields_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);"
    },
    {
      "sha": "f68f4efdafac8bc99ae0b6b8ac90e228c94c9f8e",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -1866,7 +1866,7 @@ upgrade_type (int fd, struct type **tpp, int tq, union aux_ext *ax, int bigend,\n \n       /* TYPE_TARGET_STUB now takes care of the zero TYPE_LENGTH problem.  */\n       if (TYPE_LENGTH (*tpp) == 0)\n-\tTYPE_TARGET_STUB (t) = 1;\n+\tt->set_target_is_stub (true);\n \n       *tpp = t;\n       return 4 + off;"
    },
    {
      "sha": "752612f14e8249de0583a74e193f1a0680bb2907",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f53807e5c957fb947fb8d61fc2583e2dcbd6f06/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=8f53807e5c957fb947fb8d61fc2583e2dcbd6f06",
      "patch": "@@ -1716,7 +1716,7 @@ read_type (const char **pp, struct objfile *objfile)\n \t  }\n \telse\n \t  {\n-\t    TYPE_TARGET_STUB (type) = 1;\n+\t    type->set_target_is_stub (true);\n \t    TYPE_TARGET_TYPE (type) = xtype;\n \t  }\n       }"
    }
  ]
}