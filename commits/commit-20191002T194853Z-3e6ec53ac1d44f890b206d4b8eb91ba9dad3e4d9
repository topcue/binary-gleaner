{
  "sha": "3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2U2ZWM1M2FjMWQ0NGY4OTBiMjA2ZDRiOGViOTFiYTlkYWQzZTRkOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-01T19:50:54Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-02T19:48:53Z"
    },
    "message": "Convert boolean globals in server.c to bool\n\nConverts the int globals to bool.\n\ngdb/gdbserver/ChangeLog:\n\n2019-10-02  Christian Biesinger  <cbiesinger@google.com>\n\n\t* server.c (server_waiting): Change to bool.\n\t(extended_protocol): Likewise.\n\t(response_needed): Likewise.\n\t(exit_requested): Likewise.\n\t(run_once): Likewise.\n\t(report_no_resumed): Likewise.\n\t(non_stop): Likewise.\n\t(disable_packet_vCont): Likewise.\n\t(disable_packet_Tthread): Likewise.\n\t(disable_packet_qC): Likewise.\n\t(disable_packet_qfThreadInfo): Likewise.\n\t(handle_general_set): Update.\n\t(handle_detach): Update.\n\t(handle_monitor_command): Update.\n\t(handle_query): Update.\n\t(captured_main): Update.\n\t(process_serial_event): Update.\n\t* server.h (server_waiting): Change to bool.\n\t(disable_packet_vCont): Likewise.\n\t(disable_packet_Tthread): Likewise.\n\t(disable_packet_qC): Likewise.\n\t(disable_packet_qfThreadInfo): Likewise.\n\t(run_once): Likewise.\n\t(non_stop): Likewise.\n\t* target.c (target_stop_and_wait): Update.",
    "tree": {
      "sha": "a4364939afd65de6e34ff32ed286ead47ee3367f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4364939afd65de6e34ff32ed286ead47ee3367f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "80fd2826411c1033ec403658c5f3187bf9c1740a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80fd2826411c1033ec403658c5f3187bf9c1740a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/80fd2826411c1033ec403658c5f3187bf9c1740a"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 67,
    "deletions": 39
  },
  "files": [
    {
      "sha": "1b67a282fcf5b3ca74de5da4839ca1c395382994",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
      "patch": "@@ -1,3 +1,31 @@\n+2019-10-02  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* server.c (server_waiting): Change to bool.\n+\t(extended_protocol): Likewise.\n+\t(response_needed): Likewise.\n+\t(exit_requested): Likewise.\n+\t(run_once): Likewise.\n+\t(report_no_resumed): Likewise.\n+\t(non_stop): Likewise.\n+\t(disable_packet_vCont): Likewise.\n+\t(disable_packet_Tthread): Likewise.\n+\t(disable_packet_qC): Likewise.\n+\t(disable_packet_qfThreadInfo): Likewise.\n+\t(handle_general_set): Update.\n+\t(handle_detach): Update.\n+\t(handle_monitor_command): Update.\n+\t(handle_query): Update.\n+\t(captured_main): Update.\n+\t(process_serial_event): Update.\n+\t* server.h (server_waiting): Change to bool.\n+\t(disable_packet_vCont): Likewise.\n+\t(disable_packet_Tthread): Likewise.\n+\t(disable_packet_qC): Likewise.\n+\t(disable_packet_qfThreadInfo): Likewise.\n+\t(run_once): Likewise.\n+\t(non_stop): Likewise.\n+\t* target.c (target_stop_and_wait): Update.\n+\n 2019-10-02  Tom Tromey  <tromey@adacore.com>\n \n \t* Makefile.in (SFILES): Add common-inferior.c."
    },
    {
      "sha": "0bfff04fd765bd505bfce30539b0d02bab7fbea9",
      "filename": "gdb/gdbserver/server.c",
      "status": "modified",
      "additions": 30,
      "deletions": 30,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/server.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/server.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.c?ref=3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
      "patch": "@@ -67,19 +67,19 @@ char *current_directory;\n \n static gdb_environ our_environ;\n \n-int server_waiting;\n+bool server_waiting;\n \n-static int extended_protocol;\n-static int response_needed;\n-static int exit_requested;\n+static bool extended_protocol;\n+static bool response_needed;\n+static bool exit_requested;\n \n /* --once: Exit after the first connection has closed.  */\n-int run_once;\n+bool run_once;\n \n /* Whether to report TARGET_WAITKING_NO_RESUMED events.  */\n-static int report_no_resumed;\n+static bool report_no_resumed;\n \n-int non_stop;\n+bool non_stop;\n \n static struct {\n   /* Set the PROGRAM_PATH.  Here we adjust the path of the provided\n@@ -123,10 +123,10 @@ unsigned long signal_pid;\n /* Set if you want to disable optional thread related packets support\n    in gdbserver, for the sake of testing GDB against stubs that don't\n    support them.  */\n-int disable_packet_vCont;\n-int disable_packet_Tthread;\n-int disable_packet_qC;\n-int disable_packet_qfThreadInfo;\n+bool disable_packet_vCont;\n+bool disable_packet_Tthread;\n+bool disable_packet_qC;\n+bool disable_packet_qfThreadInfo;\n \n static unsigned char *mem_buf;\n \n@@ -744,7 +744,7 @@ handle_general_set (char *own_buf)\n \t  return;\n \t}\n \n-      non_stop = req;\n+      non_stop = (req != 0);\n \n       if (remote_debug)\n \tdebug_printf (\"[%s mode enabled]\\n\", req_str);\n@@ -1231,7 +1231,7 @@ handle_detach (char *own_buf)\n \t  if (debug_threads)\n \t    debug_printf (\"Forcing non-stop mode\\n\");\n \n-\t  non_stop = 1;\n+\t  non_stop = true;\n \t  start_non_stop (1);\n \t}\n \n@@ -1400,7 +1400,7 @@ handle_monitor_command (char *mon, char *own_buf)\n   else if (strcmp (mon, \"help\") == 0)\n     monitor_show_help ();\n   else if (strcmp (mon, \"exit\") == 0)\n-    exit_requested = 1;\n+    exit_requested = true;\n   else\n     {\n       monitor_output (\"Unknown monitor command.\\n\\n\");\n@@ -2331,7 +2331,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t\t{\n \t\t  /* GDB supports and wants TARGET_WAITKIND_NO_RESUMED\n \t\t     events.  */\n-\t\t  report_no_resumed = 1;\n+\t\t  report_no_resumed = true;\n \t\t}\n \t      else\n \t\t{\n@@ -3639,19 +3639,19 @@ captured_main (int argc, char *argv[])\n \t       tok = strtok (NULL, \",\"))\n \t    {\n \t      if (strcmp (\"vCont\", tok) == 0)\n-\t\tdisable_packet_vCont = 1;\n+\t\tdisable_packet_vCont = true;\n \t      else if (strcmp (\"Tthread\", tok) == 0)\n-\t\tdisable_packet_Tthread = 1;\n+\t\tdisable_packet_Tthread = true;\n \t      else if (strcmp (\"qC\", tok) == 0)\n-\t\tdisable_packet_qC = 1;\n+\t\tdisable_packet_qC = true;\n \t      else if (strcmp (\"qfThreadInfo\", tok) == 0)\n-\t\tdisable_packet_qfThreadInfo = 1;\n+\t\tdisable_packet_qfThreadInfo = true;\n \t      else if (strcmp (\"threads\", tok) == 0)\n \t\t{\n-\t\t  disable_packet_vCont = 1;\n-\t\t  disable_packet_Tthread = 1;\n-\t\t  disable_packet_qC = 1;\n-\t\t  disable_packet_qfThreadInfo = 1;\n+\t\t  disable_packet_vCont = true;\n+\t\t  disable_packet_Tthread = true;\n+\t\t  disable_packet_qC = true;\n+\t\t  disable_packet_qfThreadInfo = true;\n \t\t}\n \t      else\n \t\t{\n@@ -3679,7 +3679,7 @@ captured_main (int argc, char *argv[])\n       else if (strcmp (*next_arg, \"--no-startup-with-shell\") == 0)\n \tstartup_with_shell = false;\n       else if (strcmp (*next_arg, \"--once\") == 0)\n-\trun_once = 1;\n+\trun_once = true;\n       else if (strcmp (*next_arg, \"--selftest\") == 0)\n \tselftest = true;\n       else if (startswith (*next_arg, \"--selftest=\"))\n@@ -4010,15 +4010,15 @@ process_serial_event (void)\n \n   disable_async_io ();\n \n-  response_needed = 0;\n+  response_needed = false;\n   packet_len = getpkt (cs.own_buf);\n   if (packet_len <= 0)\n     {\n       remote_close ();\n       /* Force an event loop break.  */\n       return -1;\n     }\n-  response_needed = 1;\n+  response_needed = true;\n \n   char ch = cs.own_buf[0];\n   switch (ch)\n@@ -4033,7 +4033,7 @@ process_serial_event (void)\n       handle_detach (cs.own_buf);\n       break;\n     case '!':\n-      extended_protocol = 1;\n+      extended_protocol = true;\n       write_ok (cs.own_buf);\n       break;\n     case '?':\n@@ -4248,7 +4248,7 @@ process_serial_event (void)\n \tbreak;\n       }\n     case 'k':\n-      response_needed = 0;\n+      response_needed = false;\n       if (!target_running ())\n \t/* The packet we received doesn't make sense - but we can't\n \t   reply to it, either.  */\n@@ -4287,7 +4287,7 @@ process_serial_event (void)\n       }\n       break;\n     case 'R':\n-      response_needed = 0;\n+      response_needed = false;\n \n       /* Restarting the inferior is only supported in the extended\n \t protocol.  */\n@@ -4348,7 +4348,7 @@ process_serial_event (void)\n   else\n     putpkt (cs.own_buf);\n \n-  response_needed = 0;\n+  response_needed = false;\n \n   if (exit_requested)\n     return -1;"
    },
    {
      "sha": "e01c4f146edb6aeab1ff23dfe018f00546e8f8e5",
      "filename": "gdb/gdbserver/server.h",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/server.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/server.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/server.h?ref=3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
      "patch": "@@ -68,15 +68,15 @@ void initialize_low ();\n \n /* Public variables in server.c */\n \n-extern int server_waiting;\n+extern bool server_waiting;\n \n-extern int disable_packet_vCont;\n-extern int disable_packet_Tthread;\n-extern int disable_packet_qC;\n-extern int disable_packet_qfThreadInfo;\n+extern bool disable_packet_vCont;\n+extern bool disable_packet_Tthread;\n+extern bool disable_packet_qC;\n+extern bool disable_packet_qfThreadInfo;\n \n-extern int run_once;\n-extern int non_stop;\n+extern bool run_once;\n+extern bool non_stop;\n \n #if USE_WIN32API\n #include <winsock2.h>"
    },
    {
      "sha": "9018118a060615dad0a4ff21e393de19470e5520",
      "filename": "gdb/gdbserver/target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9/gdb/gdbserver/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/target.c?ref=3e6ec53ac1d44f890b206d4b8eb91ba9dad3e4d9",
      "patch": "@@ -205,15 +205,15 @@ void\n target_stop_and_wait (ptid_t ptid)\n {\n   struct target_waitstatus status;\n-  int was_non_stop = non_stop;\n+  bool was_non_stop = non_stop;\n   struct thread_resume resume_info;\n \n   resume_info.thread = ptid;\n   resume_info.kind = resume_stop;\n   resume_info.sig = GDB_SIGNAL_0;\n   (*the_target->resume) (&resume_info, 1);\n \n-  non_stop = 1;\n+  non_stop = true;\n   mywait (ptid, &status, 0, 0);\n   non_stop = was_non_stop;\n }"
    }
  ]
}