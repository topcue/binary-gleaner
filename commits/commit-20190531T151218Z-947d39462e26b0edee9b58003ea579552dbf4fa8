{
  "sha": "947d39462e26b0edee9b58003ea579552dbf4fa8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQ3ZDM5NDYyZTI2YjBlZGVlOWI1ODAwM2VhNTc5NTUyZGJmNGZhOA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-04-20T12:14:23Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-05-31T15:12:18Z"
    },
    "message": "Implement | (pipe) command.\n\nThe pipe command allows to run a GDB command, and pipe its output\nto a shell command:\n  (gdb) help pipe\n  Send the output of a gdb command to a shell command.\n  Usage: | [COMMAND] | SHELL_COMMAND\n  Usage: | -d DELIM COMMAND DELIM SHELL_COMMAND\n  Usage: pipe [COMMAND] | SHELL_COMMAND\n  Usage: pipe -d DELIM COMMAND DELIM SHELL_COMMAND\n\n  Executes COMMAND and sends its output to SHELL_COMMAND.\n\n  The -d option indicates to use the string DELIM to separate COMMAND\n  from SHELL_COMMAND, in alternative to |.  This is useful in\n  case COMMAND contains a | character.\n\n  With no COMMAND, repeat the last executed command\n  and send its output to SHELL_COMMAND.\n  (gdb)\n\nFor example:\n  (gdb) pipe print some_data_structure | grep -B3 -A3 something\n\nThe pipe character is defined as an alias for pipe command, so that\nthe above can be typed as:\n  (gdb) | print some_data_structure | grep -B3 -A3 something\n\nIf no GDB COMMAND is given, then the previous command is relaunched,\nand its output is sent to the given SHELL_COMMAND.\n\nThis also defines convenience vars $_shell_exitcode and $_shell_exitsignal\nto record the exit code and exit signal of the last shell command\nlaunched by GDB e.g. by \"shell\", \"pipe\", ...\n\ngdb/ChangeLog\n2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* cli/cli-cmds.c (pipe_command): New function.\n\t(_initialize_cli_cmds): Call add_com for pipe_command.\n\tDefine | as an alias for pipe.\n\t(exit_status_set_internal_vars): New function.\n\t(shell_escape): Call exit_status_set_internal_vars.\n\tcli/cli-decode.c (find_command_name_length): Recognize | as\n\ta single character command.",
    "tree": {
      "sha": "b9852eb9de8f1b0df7dee3f140c239a6f87cfe75",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b9852eb9de8f1b0df7dee3f140c239a6f87cfe75"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/947d39462e26b0edee9b58003ea579552dbf4fa8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/947d39462e26b0edee9b58003ea579552dbf4fa8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/947d39462e26b0edee9b58003ea579552dbf4fa8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/947d39462e26b0edee9b58003ea579552dbf4fa8/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b8fd091888383703f5d708c597c496d7b9e47a21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8fd091888383703f5d708c597c496d7b9e47a21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b8fd091888383703f5d708c597c496d7b9e47a21"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 116,
    "deletions": 2
  },
  "files": [
    {
      "sha": "01dd51ec8f5da6c3401e062a7983effd4283fdbf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=947d39462e26b0edee9b58003ea579552dbf4fa8",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* cli/cli-cmds.c (pipe_command): New function.\n+\t(_initialize_cli_cmds): Call add_com for pipe_command.\n+\tDefine | as an alias for pipe.\n+\t(exit_status_set_internal_vars): New function.\n+\t(shell_escape): Call exit_status_set_internal_vars.\n+\tcli/cli-decode.c (find_command_name_length): Recognize | as\n+\ta single character command.\n+\n 2019-05-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* gdbcmd.h (execute_command_to_ui_file): New declaration."
    },
    {
      "sha": "bb2b04ddd866ab669e1d15cd6c9aacc939cc5089",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=947d39462e26b0edee9b58003ea579552dbf4fa8",
      "patch": "@@ -24,6 +24,7 @@\n #include \"completer.h\"\n #include \"target.h\"\t/* For baud_rate, remote_debug and remote_timeout.  */\n #include \"common/gdb_wait.h\"\t/* For shell escape implementation.  */\n+#include \"gdbcmd.h\"\n #include \"gdb_regex.h\"\t/* Used by apropos_command.  */\n #include \"gdb_vfork.h\"\n #include \"linespec.h\"\n@@ -41,6 +42,7 @@\n #include \"block.h\"\n \n #include \"ui-out.h\"\n+#include \"interps.h\"\n \n #include \"top.h\"\n #include \"cli/cli-decode.h\"\n@@ -668,6 +670,25 @@ echo_command (const char *text, int from_tty)\n   gdb_flush (gdb_stdout);\n }\n \n+/* Sets the last launched shell command convenience variables based on\n+   EXIT_STATUS.  */\n+\n+static void\n+exit_status_set_internal_vars (int exit_status)\n+{\n+  struct internalvar *var_code = lookup_internalvar (\"_shell_exitcode\");\n+  struct internalvar *var_signal = lookup_internalvar (\"_shell_exitsignal\");\n+\n+  clear_internalvar (var_code);\n+  clear_internalvar (var_signal);\n+  if (WIFEXITED (exit_status))\n+    set_internalvar_integer (var_code, WEXITSTATUS (exit_status));\n+  else if (WIFSIGNALED (exit_status))\n+    set_internalvar_integer (var_signal, WTERMSIG (exit_status));\n+  else\n+    warning (_(\"unexpected shell command exit status %d\\n\"), exit_status);\n+}\n+\n static void\n shell_escape (const char *arg, int from_tty)\n {\n@@ -689,6 +710,7 @@ shell_escape (const char *arg, int from_tty)\n   /* Make sure to return to the directory GDB thinks it is, in case\n      the shell command we just ran changed it.  */\n   chdir (current_directory);\n+  exit_status_set_internal_vars (rc);\n #endif\n #else /* Can fork.  */\n   int status, pid;\n@@ -716,6 +738,7 @@ shell_escape (const char *arg, int from_tty)\n     waitpid (pid, &status, 0);\n   else\n     error (_(\"Fork failed\"));\n+  exit_status_set_internal_vars (status);\n #endif /* Can fork.  */\n }\n \n@@ -827,6 +850,70 @@ edit_command (const char *arg, int from_tty)\n   xfree (p);\n }\n \n+/* Implementation of the \"pipe\" command.  */\n+\n+static void\n+pipe_command (const char *arg, int from_tty)\n+{\n+  std::string delim (\"|\");\n+\n+  if (arg != nullptr && check_for_argument (&arg, \"-d\", 2))\n+    {\n+      delim = extract_arg (&arg);\n+      if (delim.empty ())\n+\terror (_(\"Missing delimiter DELIM after -d\"));\n+    }\n+\n+  const char *command = arg;\n+  if (command == nullptr)\n+    error (_(\"Missing COMMAND\"));\n+\n+  arg = strstr (arg, delim.c_str ());\n+\n+  if (arg == nullptr)\n+    error (_(\"Missing delimiter before SHELL_COMMAND\"));\n+\n+  std::string gdb_cmd (command, arg - command);\n+\n+  arg += delim.length (); /* Skip the delimiter.  */\n+\n+  if (gdb_cmd.empty ())\n+    {\n+      repeat_previous ();\n+      gdb_cmd = skip_spaces (get_saved_command_line ());\n+      if (gdb_cmd.empty ())\n+\terror (_(\"No previous command to relaunch\"));\n+    }\n+\n+  const char *shell_command = skip_spaces (arg);\n+  if (*shell_command == '\\0')\n+    error (_(\"Missing SHELL_COMMAND\"));\n+\n+  FILE *to_shell_command = popen (shell_command, \"w\");\n+\n+  if (to_shell_command == nullptr)\n+    error (_(\"Error launching \\\"%s\\\"\"), shell_command);\n+\n+  try\n+    {\n+      stdio_file pipe_file (to_shell_command);\n+\n+      execute_command_to_ui_file (&pipe_file, gdb_cmd.c_str (), from_tty);\n+    }\n+  catch (...)\n+    {\n+      pclose (to_shell_command);\n+      throw;\n+    }\n+\n+  int exit_status = pclose (to_shell_command);\n+\n+  if (exit_status < 0)\n+    error (_(\"shell command \\\"%s\\\" failed: %s\"), shell_command,\n+           safe_strerror (errno));\n+  exit_status_set_internal_vars (exit_status);\n+}\n+\n static void\n list_command (const char *arg, int from_tty)\n {\n@@ -1818,6 +1905,23 @@ Uses EDITOR environment variable contents as editor (or ex as default).\"));\n \n   c->completer = location_completer;\n \n+  c = add_com (\"pipe\", class_support, pipe_command, _(\"\\\n+Send the output of a gdb command to a shell command.\\n\\\n+Usage: | [COMMAND] | SHELL_COMMAND\\n\\\n+Usage: | -d DELIM COMMAND DELIM SHELL_COMMAND\\n\\\n+Usage: pipe [COMMAND] | SHELL_COMMAND\\n\\\n+Usage: pipe -d DELIM COMMAND DELIM SHELL_COMMAND\\n\\\n+\\n\\\n+Executes COMMAND and sends its output to SHELL_COMMAND.\\n\\\n+\\n\\\n+The -d option indicates to use the string DELIM to separate COMMAND\\n\\\n+from SHELL_COMMAND, in alternative to |.  This is useful in\\n\\\n+case COMMAND contains a | character.\\n\\\n+\\n\\\n+With no COMMAND, repeat the last executed command\\n\\\n+and send its output to SHELL_COMMAND.\"));\n+  add_com_alias (\"|\", \"pipe\", class_support, 0);\n+\n   add_com (\"list\", class_files, list_command, _(\"\\\n List specified function or line.\\n\\\n With no argument, lists ten more lines after or around previous listing.\\n\\"
    },
    {
      "sha": "e3076f263c3edc7e9b283fbc14edfd3ca75ddd28",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/947d39462e26b0edee9b58003ea579552dbf4fa8/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=947d39462e26b0edee9b58003ea579552dbf4fa8",
      "patch": "@@ -1311,9 +1311,9 @@ find_command_name_length (const char *text)\n      Note that this is larger than the character set allowed when\n      creating user-defined commands.  */\n \n-  /* Recognize '!' as a single character command so that, e.g., \"!ls\"\n+  /* Recognize the single character commands so that, e.g., \"!ls\"\n      works as expected.  */\n-  if (*p == '!')\n+  if (*p == '!' || *p == '|')\n     return 1;\n \n   while (isalnum (*p) || *p == '-' || *p == '_'"
    }
  ]
}