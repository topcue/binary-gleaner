{
  "sha": "7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2ZiZDVmNGUyYzE0M2JiZTI4NzE1NjA4Y2EwMGUyZTkzYTdkN2ZkNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-17T12:51:11Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-18T00:04:16Z"
    },
    "message": "Remove some static buffers\n\nFixes possible overflow of a static buffer for powerpc with translated\nmessages, and on v850 when symbol names are large.\n\n\t* archive.c (_bfd_ar_spacepad, _bfd_ar_sizepad): Use auto buf.\n\t* coff-mcore.c (coff_mcore_relocate_section): Likewise.\n\t* elf32-ppc.c (ppc_elf_unhandled_reloc): Use asprintf in place\n\tof fixed size and possibly too small buf for translated message.\n\t* elf64-ppc.c (ppc64_elf_unhandled_reloc): Likewise.\n\t* elf32-v850.c (v850_elf_check_relocs): Likewise.\n\t* ecoff.c (ecoff_type_to_string): Pass in return string buff rather\n\tthan using static buffer2.  Delete dead code.  Remove unnecessary\n\tparentheses.\n\t(_bfd_ecoff_print_symbol): Pass auto buff to ecoff_type_to_string.\n\t* elf32-rx.c (describe_flags): Pass in return string buf rather\n\tthan using static buf.\n\t(rx_elf_merge_private_bfd_data): Pass buf to describe_flags.\n\t(rx_elf_print_private_bfd_data): Likewise.\n\t* mach-o.c (cpusubtype): Pass in return string buffer rather than\n\tusing static buffer.\n\t(bfd_mach_o_bfd_print_private_bfd_data): Pass buff to cpusubtype.\n\t* opncls.c (separate_debug_file_exists): Make buffer an auto var.\n\t(bfd_fill_in_gnu_debuglink_section): Likewise.\n\t* peXXigen.c (rsrc_resource_name): Pass in return string buffer\n\trather than using static buffer.\n\t(rsrc_sort_entries): Pass buff to rsrc_resource_name.\n\t* vms-alpha.c (_bfd_vms_write_emh): Pass tbuf to get_vms_time_string.\n\t* vms-misc.c (get_vms_time_string): Pass in return string tbuf\n\trather than using static tbuf.\n\t* vms.h (get_vms_time_string): Update prototype.",
    "tree": {
      "sha": "f6bc1211e0cdaecc93850eae7a46b305632c0035",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f6bc1211e0cdaecc93850eae7a46b305632c0035"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd38246a45dc199ce32b50878670bbbdf7e27ad5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd38246a45dc199ce32b50878670bbbdf7e27ad5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd38246a45dc199ce32b50878670bbbdf7e27ad5"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 94,
    "deletions": 51
  },
  "files": [
    {
      "sha": "6b09a4435465444749d382dfa4b85f27a646a68c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -1,3 +1,32 @@\n+2020-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* archive.c (_bfd_ar_spacepad, _bfd_ar_sizepad): Use auto buf.\n+\t* coff-mcore.c (coff_mcore_relocate_section): Likewise.\n+\t* elf32-ppc.c (ppc_elf_unhandled_reloc): Use asprintf in place\n+\tof fixed size and possibly too small buf for translated message.\n+\t* elf64-ppc.c (ppc64_elf_unhandled_reloc): Likewise.\n+\t* elf32-v850.c (v850_elf_check_relocs): Likewise.\n+\t* ecoff.c (ecoff_type_to_string): Pass in return string buff rather\n+\tthan using static buffer2.  Delete dead code.  Remove unnecessary\n+\tparentheses.\n+\t(_bfd_ecoff_print_symbol): Pass auto buff to ecoff_type_to_string.\n+\t* elf32-rx.c (describe_flags): Pass in return string buf rather\n+\tthan using static buf.\n+\t(rx_elf_merge_private_bfd_data): Pass buf to describe_flags.\n+\t(rx_elf_print_private_bfd_data): Likewise.\n+\t* mach-o.c (cpusubtype): Pass in return string buffer rather than\n+\tusing static buffer.\n+\t(bfd_mach_o_bfd_print_private_bfd_data): Pass buff to cpusubtype.\n+\t* opncls.c (separate_debug_file_exists): Make buffer an auto var.\n+\t(bfd_fill_in_gnu_debuglink_section): Likewise.\n+\t* peXXigen.c (rsrc_resource_name): Pass in return string buffer\n+\trather than using static buffer.\n+\t(rsrc_sort_entries): Pass buff to rsrc_resource_name.\n+\t* vms-alpha.c (_bfd_vms_write_emh): Pass tbuf to get_vms_time_string.\n+\t* vms-misc.c (get_vms_time_string): Pass in return string tbuf\n+\trather than using static tbuf.\n+\t* vms.h (get_vms_time_string): Update prototype.\n+\n 2020-12-18  Alan Modra  <amodra@gmail.com>\n \n \t* coff-z80.c (bfd_howto_type): Make typedef const."
    },
    {
      "sha": "10e1423b82b0958ad928b9fde54a6061e166b03d",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -172,7 +172,7 @@ struct ar_cache\n void\n _bfd_ar_spacepad (char *p, size_t n, const char *fmt, long val)\n {\n-  static char buf[20];\n+  char buf[20];\n   size_t len;\n \n   snprintf (buf, sizeof (buf), fmt, val);\n@@ -189,7 +189,7 @@ _bfd_ar_spacepad (char *p, size_t n, const char *fmt, long val)\n bfd_boolean\n _bfd_ar_sizepad (char *p, size_t n, bfd_size_type size)\n {\n-  static char buf[21];\n+  char buf[21];\n   size_t len;\n \n   snprintf (buf, sizeof (buf), \"%-10\" BFD_VMA_FMT \"u\", size);"
    },
    {
      "sha": "e5005dc3b868d930c0d2e18aa3b988a5c4ffdc31",
      "filename": "bfd/coff-mcore.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/coff-mcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/coff-mcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-mcore.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -392,6 +392,7 @@ coff_mcore_relocate_section (bfd * output_bfd,\n       reloc_howto_type *\t     howto = NULL;\n       struct coff_link_hash_entry *  h;\n       const char *\t\t     my_name;\n+      char buf[SYMNMLEN + 1];\n \n       symndx = rel->r_symndx;\n       loc = contents + rel->r_vaddr - input_section->vma;\n@@ -436,8 +437,6 @@ coff_mcore_relocate_section (bfd * output_bfd,\n \t\tmy_name = obj_coff_strings (input_bfd) + sym->_n._n_n._n_offset;\n \t      else\n \t\t{\n-\t\t  static char buf [SYMNMLEN + 1];\n-\n \t\t  strncpy (buf, sym->_n._n_name, SYMNMLEN);\n \t\t  buf[SYMNMLEN] = '\\0';\n \t\t  my_name = buf;"
    },
    {
      "sha": "798e37a5e30b79db7045dedbacb2365303ffdb02",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 20,
      "deletions": 16,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -1056,7 +1056,7 @@ ecoff_emit_aggregate (bfd *abfd,\n /* Convert the type information to string format.  */\n \n static char *\n-ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n+ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx, char *buff)\n {\n   union aux_ext *aux_ptr;\n   int bigendian;\n@@ -1071,9 +1071,8 @@ ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n   unsigned int basic_type;\n   int i;\n   char buffer1[1024];\n-  static char buffer2[1024];\n   char *p1 = buffer1;\n-  char *p2 = buffer2;\n+  char *p2 = buff;\n   RNDXR rndx;\n \n   aux_ptr = ecoff_data (abfd)->debug_info.external_aux + fdr->iauxBase;\n@@ -1239,7 +1238,7 @@ ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n       break;\n     }\n \n-  p1 += strlen (buffer1);\n+  p1 += strlen (p1);\n \n   /* If this is a bitfield, get the bitsize.  */\n   if (u.ti.fBitfield)\n@@ -1248,7 +1247,6 @@ ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n \n       bitsize = AUX_GET_WIDTH (bigendian, &aux_ptr[indx++]);\n       sprintf (p1, \" : %d\", bitsize);\n-      p1 += strlen (buffer1);\n     }\n \n   /* Deal with any qualifiers.  */\n@@ -1332,7 +1330,7 @@ ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n \t\t\t       (long) (qualifiers[j].stride));\n \n \t\t    else\n-\t\t      sprintf (p2, \" {%ld bits}\", (long) (qualifiers[j].stride));\n+\t\t      sprintf (p2, \" {%ld bits}\", (long) qualifiers[j].stride);\n \n \t\t    p2 += strlen (p2);\n \t\t    strcpy (p2, \"] of \");\n@@ -1345,7 +1343,7 @@ ecoff_type_to_string (bfd *abfd, FDR *fdr, unsigned int indx)\n     }\n \n   strcpy (p2, buffer1);\n-  return buffer2;\n+  return buff;\n }\n \n /* Return information about ECOFF symbol SYMBOL in RET.  */\n@@ -1514,13 +1512,16 @@ _bfd_ecoff_print_symbol (bfd *abfd,\n \t\tif (ECOFF_IS_STAB (&ecoff_ext.asym))\n \t\t  ;\n \t\telse if (ecoffsymbol (symbol)->local)\n-\t\t  /* xgettext:c-format */\n-\t\t  fprintf (file, _(\"\\n      End+1 symbol: %-7ld   Type:  %s\"),\n-\t\t\t   ((long)\n-\t\t\t    (AUX_GET_ISYM (bigendian,\n-\t\t\t\t\t   &aux_base[ecoff_ext.asym.index])\n-\t\t\t     + sym_base)),\n-\t\t\t   ecoff_type_to_string (abfd, fdr, indx + 1));\n+\t\t  {\n+\t\t    char buff[1024];\n+\t\t    /* xgettext:c-format */\n+\t\t    fprintf (file, _(\"\\n      End+1 symbol: %-7ld   Type:  %s\"),\n+\t\t\t     ((long)\n+\t\t\t      (AUX_GET_ISYM (bigendian,\n+\t\t\t\t\t     &aux_base[ecoff_ext.asym.index])\n+\t\t\t       + sym_base)),\n+\t\t\t     ecoff_type_to_string (abfd, fdr, indx + 1, buff));\n+\t\t  }\n \t\telse\n \t\t  fprintf (file, _(\"\\n      Local symbol: %ld\"),\n \t\t\t   ((long) indx\n@@ -1546,8 +1547,11 @@ _bfd_ecoff_print_symbol (bfd *abfd,\n \n \t      default:\n \t\tif (! ECOFF_IS_STAB (&ecoff_ext.asym))\n-\t\t  fprintf (file, _(\"\\n      Type: %s\"),\n-\t\t\t   ecoff_type_to_string (abfd, fdr, indx));\n+\t\t  {\n+\t\t    char buff[1024];\n+\t\t    fprintf (file, _(\"\\n      Type: %s\"),\n+\t\t\t     ecoff_type_to_string (abfd, fdr, indx, buff));\n+\t\t  }\n \t\tbreak;\n \t      }\n \t  }"
    },
    {
      "sha": "77964946deaecd90f3c67f422aa49db2c3c5f038",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -985,10 +985,12 @@ ppc_elf_unhandled_reloc (bfd *abfd,\n \n   if (error_message != NULL)\n     {\n-      static char buf[60];\n-      sprintf (buf, _(\"generic linker can't handle %s\"),\n-\t       reloc_entry->howto->name);\n-      *error_message = buf;\n+      static char *message;\n+      free (message);\n+      if (asprintf (&message, _(\"generic linker can't handle %s\"),\n+\t\t    reloc_entry->howto->name) < 0)\n+\tmessage = NULL;\n+      *error_message = message;\n     }\n   return bfd_reloc_dangerous;\n }"
    },
    {
      "sha": "cd239bf8d3cd2d88a452cec5559af1d6b4ef748d",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -3086,10 +3086,8 @@ bfd_elf32_rx_set_target_flags (bfd_boolean user_no_warn_mismatch,\n    Returns a static pointer.  */\n \n static const char *\n-describe_flags (flagword flags)\n+describe_flags (flagword flags, char *buf)\n {\n-  static char buf [128];\n-\n   buf[0] = 0;\n \n   if (flags & E_FLAG_RX_64BIT_DOUBLES)\n@@ -3170,13 +3168,15 @@ rx_elf_merge_private_bfd_data (bfd * ibfd, struct bfd_link_info *info)\n \t    }\n \t  else\n \t    {\n+\t      char buf[128];\n+\n \t      _bfd_error_handler (_(\"there is a conflict merging the\"\n \t\t\t\t    \" ELF header flags from %pB\"),\n \t\t\t\t  ibfd);\n \t      _bfd_error_handler (_(\"  the input  file's flags: %s\"),\n-\t\t\t\t  describe_flags (new_flags));\n+\t\t\t\t  describe_flags (new_flags, buf));\n \t      _bfd_error_handler (_(\"  the output file's flags: %s\"),\n-\t\t\t\t  describe_flags (old_flags));\n+\t\t\t\t  describe_flags (old_flags, buf));\n \t      error = TRUE;\n \t    }\n \t}\n@@ -3195,6 +3195,7 @@ rx_elf_print_private_bfd_data (bfd * abfd, void * ptr)\n {\n   FILE * file = (FILE *) ptr;\n   flagword flags;\n+  char buf[128];\n \n   BFD_ASSERT (abfd != NULL && ptr != NULL);\n \n@@ -3204,7 +3205,7 @@ rx_elf_print_private_bfd_data (bfd * abfd, void * ptr)\n   flags = elf_elfheader (abfd)->e_flags;\n   fprintf (file, _(\"private flags = 0x%lx:\"), (long) flags);\n \n-  fprintf (file, \"%s\", describe_flags (flags));\n+  fprintf (file, \"%s\", describe_flags (flags, buf));\n   return TRUE;\n }\n "
    },
    {
      "sha": "c3507707e774139aae3cb0fe3a130ee654c1c5a5",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -144,7 +144,7 @@ v850_elf_check_relocs (bfd *abfd,\n \t\t  && (h->other & V850_OTHER_ERROR) == 0)\n \t\t{\n \t\t  const char * msg;\n-\t\t  static char  buff[200]; /* XXX */\n+\t\t  char *buff;\n \n \t\t  switch (h->other & V850_OTHER_MASK)\n \t\t    {\n@@ -165,10 +165,14 @@ v850_elf_check_relocs (bfd *abfd,\n \t\t      break;\n \t\t    }\n \n-\t\t  sprintf (buff, msg, h->root.root.string);\n-\t\t  info->callbacks->warning (info, buff, h->root.root.string,\n+\t\t  if (asprintf (&buff, msg, h->root.root.string) < 0)\n+\t\t    buff = NULL;\n+\t\t  else\n+\t\t    msg = buff;\n+\t\t  info->callbacks->warning (info, msg, h->root.root.string,\n \t\t\t\t\t    abfd, h->root.u.def.section,\n \t\t\t\t\t    (bfd_vma) 0);\n+\t\t  free (buff);\n \n \t\t  bfd_set_error (bfd_error_bad_value);\n \t\t  h->other |= V850_OTHER_ERROR;"
    },
    {
      "sha": "4f15c8bcea3916425f458c4bbe612ca6e8ffa6f2",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -1715,10 +1715,12 @@ ppc64_elf_unhandled_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \n   if (error_message != NULL)\n     {\n-      static char buf[60];\n-      sprintf (buf, \"generic linker can't handle %s\",\n-\t       reloc_entry->howto->name);\n-      *error_message = buf;\n+      static char *message;\n+      free (message);\n+      if (asprintf (&message, _(\"generic linker can't handle %s\"),\n+\t\t    reloc_entry->howto->name) < 0)\n+\tmessage = NULL;\n+      *error_message = message;\n     }\n   return bfd_reloc_dangerous;\n }"
    },
    {
      "sha": "25ae21dbe00cea982939d8567cad859c4b23a2aa",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -618,10 +618,8 @@ cputype (unsigned long value)\n }\n \n static const char *\n-cpusubtype (unsigned long cpu_type, unsigned long cpu_subtype)\n+cpusubtype (unsigned long cpu_type, unsigned long cpu_subtype, char *buffer)\n {\n-  static char buffer[128];\n-\n   buffer[0] = 0;\n   switch (cpu_subtype & BFD_MACH_O_CPU_SUBTYPE_MASK)\n     {\n@@ -695,13 +693,14 @@ bfd_mach_o_bfd_print_private_bfd_data (bfd *abfd, void *ptr)\n {\n   FILE * file = (FILE *) ptr;\n   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);\n+  char buff[128];\n \n   fprintf (file, _(\" MACH-O header:\\n\"));\n   fprintf (file, _(\"   magic:      %#lx\\n\"), (long) mdata->header.magic);\n   fprintf (file, _(\"   cputype:    %#lx (%s)\\n\"), (long) mdata->header.cputype,\n \t   cputype (mdata->header.cputype));\n   fprintf (file, _(\"   cpusubtype: %#lx%s\\n\"), (long) mdata->header.cpusubtype,\n-\t   cpusubtype (mdata->header.cputype, mdata->header.cpusubtype));\n+\t   cpusubtype (mdata->header.cputype, mdata->header.cpusubtype, buff));\n   fprintf (file, _(\"   filetype:   %#lx\\n\"), (long) mdata->header.filetype);\n   fprintf (file, _(\"   ncmds:      %#lx\\n\"), (long) mdata->header.ncmds);\n   fprintf (file, _(\"   sizeocmds:  %#lx\\n\"), (long) mdata->header.sizeofcmds);"
    },
    {
      "sha": "df0bf129fef1428857342d0a9956be5719ba1cd2",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -1347,7 +1347,7 @@ DESCRIPTION\n static bfd_boolean\n separate_debug_file_exists (const char *name, void *crc32_p)\n {\n-  static unsigned char buffer [8 * 1024];\n+  unsigned char buffer[8 * 1024];\n   unsigned long file_crc = 0;\n   FILE *f;\n   bfd_size_type count;\n@@ -1765,7 +1765,7 @@ bfd_fill_in_gnu_debuglink_section (bfd *abfd,\n   char * contents;\n   bfd_size_type crc_offset;\n   FILE * handle;\n-  static unsigned char buffer[8 * 1024];\n+  unsigned char buffer[8 * 1024];\n   size_t count;\n   size_t filelen;\n "
    },
    {
      "sha": "b5ccb18f03e738a486d1c38db877734e6861acef",
      "filename": "bfd/peXXigen.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/peXXigen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/peXXigen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peXXigen.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -3681,9 +3681,8 @@ rsrc_print_name (char * buffer, rsrc_string string)\n }\n \n static const char *\n-rsrc_resource_name (rsrc_entry * entry, rsrc_directory * dir)\n+rsrc_resource_name (rsrc_entry *entry, rsrc_directory *dir, char *buffer)\n {\n-  static char buffer [256];\n   bfd_boolean is_string = FALSE;\n \n   buffer[0] = 0;\n@@ -4015,8 +4014,12 @@ rsrc_sort_entries (rsrc_dir_chain *  chain,\n \t\t\t  || dir->entry->parent->entry == NULL)\n \t\t\t_bfd_error_handler (_(\".rsrc merge failure: duplicate leaf\"));\n \t\t      else\n-\t\t\t_bfd_error_handler (_(\".rsrc merge failure: duplicate leaf: %s\"),\n-\t\t\t\t\t    rsrc_resource_name (entry, dir));\n+\t\t\t{\n+\t\t\t  char buff[256];\n+\n+\t\t\t  _bfd_error_handler (_(\".rsrc merge failure: duplicate leaf: %s\"),\n+\t\t\t\t\t      rsrc_resource_name (entry, dir, buff));\n+\t\t\t}\n \t\t      bfd_set_error (bfd_error_file_truncated);\n \t\t      return;\n \t\t    }"
    },
    {
      "sha": "4fb2945c655ddbc2db35bfff3ce7fce6ae1c0a9e",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -2927,6 +2927,7 @@ static void\n _bfd_vms_write_emh (bfd *abfd)\n {\n   struct vms_rec_wr *recwr = &PRIV (recwr);\n+  unsigned char tbuf[18];\n \n   _bfd_vms_output_alignment (recwr, 2);\n \n@@ -2949,7 +2950,7 @@ _bfd_vms_write_emh (bfd *abfd)\n     _bfd_vms_output_counted (recwr, \"NONAME\");\n \n   _bfd_vms_output_counted (recwr, BFD_VERSION_STRING);\n-  _bfd_vms_output_dump (recwr, get_vms_time_string (), EMH_DATE_LENGTH);\n+  _bfd_vms_output_dump (recwr, get_vms_time_string (tbuf), EMH_DATE_LENGTH);\n   _bfd_vms_output_fill (recwr, 0, EMH_DATE_LENGTH);\n   _bfd_vms_output_end (abfd, recwr);\n }"
    },
    {
      "sha": "bc806ca994968b8e4183b305cab33872a60dea68",
      "filename": "bfd/vms-misc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms-misc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms-misc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-misc.c?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -456,9 +456,8 @@ _bfd_vms_convert_to_var_unix_filename (const char *unix_filename)\n    stolen from obj-vms.c.  */\n \n unsigned char *\n-get_vms_time_string (void)\n+get_vms_time_string (unsigned char *tbuf)\n {\n-  static unsigned char tbuf[18];\n #ifndef VMS\n   char *pnt;\n   time_t timeb;"
    },
    {
      "sha": "d9726b46af0a328289fe455b6409ce7362b5313e",
      "filename": "bfd/vms.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4/bfd/vms.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms.h?ref=7fbd5f4e2c143bbe28715608ca00e2e93a7d7fd4",
      "patch": "@@ -111,7 +111,7 @@ extern void _bfd_hexdump   (int, unsigned char *, int, int);\n #endif\n \n extern char * vms_get_module_name (const char *, bfd_boolean);\n-extern unsigned char *get_vms_time_string (void);\n+extern unsigned char *get_vms_time_string (unsigned char *);\n extern time_t vms_time_to_time_t (unsigned int hi, unsigned int lo);\n extern time_t vms_rawtime_to_time_t (unsigned char *);\n extern void vms_time_t_to_vms_time (time_t ut, unsigned int *hi, unsigned int *lo);"
    }
  ]
}