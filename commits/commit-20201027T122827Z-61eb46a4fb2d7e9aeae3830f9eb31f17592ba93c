{
  "sha": "61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjFlYjQ2YTRmYjJkN2U5YWVhZTM4MzBmOWViMzFmMTc1OTJiYTkzYw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-10-27T12:28:27Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-10-27T12:28:27Z"
    },
    "message": "[gdb/symtab] Use early continue in find_pc_sect_compunit_symtab\n\nFunction find_pc_sect_compunit_symtab contains a loop:\n...\n  for (compunit_symtab *cust : obj_file->compunits ())\n    {\n      ...\n      if (...)\n        {\n          /* Lots of code.  */\n        }\n    }\n...\n\nReduce indentation level and improve readability by using early continue.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-10-27  Tom de Vries  <tdevries@suse.de>\n\n\t* symtab.c (find_pc_sect_compunit_symtab): Use early continue.",
    "tree": {
      "sha": "f44483355a3f162358cafe4236a58e2d208fe123",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f44483355a3f162358cafe4236a58e2d208fe123"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "733d554a4625db4ffb89b7a20e1cf27ab071ef4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/733d554a4625db4ffb89b7a20e1cf27ab071ef4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/733d554a4625db4ffb89b7a20e1cf27ab071ef4d"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 54,
    "deletions": 44
  },
  "files": [
    {
      "sha": "ba071d597d8c225eb0f99c2b918fe00491976938",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
      "patch": "@@ -1,3 +1,7 @@\n+2020-10-27  Tom de Vries  <tdevries@suse.de>\n+\n+\t* symtab.c (find_pc_sect_compunit_symtab): Use early continue.\n+\n 2020-10-27  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* breakpoint.h (set_breakpoint_condition): Add a new bool parameter."
    },
    {
      "sha": "eda33a7eb4f2e6b895571c82d5fb907d64fae947",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 50,
      "deletions": 44,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=61eb46a4fb2d7e9aeae3830f9eb31f17592ba93c",
      "patch": "@@ -2883,7 +2883,7 @@ struct compunit_symtab *\n find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n {\n   struct compunit_symtab *best_cust = NULL;\n-  CORE_ADDR distance = 0;\n+  CORE_ADDR best_cust_range = 0;\n   struct bound_minimal_symbol msymbol;\n \n   /* If we know that this is not a text address, return failure.  This is\n@@ -2914,56 +2914,62 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n     {\n       for (compunit_symtab *cust : obj_file->compunits ())\n \t{\n-\t  const struct block *b;\n-\t  const struct blockvector *bv;\n+\t  const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t  const struct block *global_block\n+\t    = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n+\t  CORE_ADDR start = BLOCK_START (global_block);\n+\t  CORE_ADDR end = BLOCK_END (global_block);\n+\t  bool in_range_p = start <= pc && pc < end;\n+\t  if (!in_range_p)\n+\t    continue;\n \n-\t  bv = COMPUNIT_BLOCKVECTOR (cust);\n-\t  b = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n+\t  CORE_ADDR range = end - start;\n+\t  if (best_cust != nullptr\n+\t      && range >= best_cust_range)\n+\t    /* Cust doesn't have a smaller range than best_cust, skip it.  */\n+\t    continue;\n+\t\n+\t  /* For an objfile that has its functions reordered,\n+\t     find_pc_psymtab will find the proper partial symbol table\n+\t     and we simply return its corresponding symtab.  */\n+\t  /* In order to better support objfiles that contain both\n+\t     stabs and coff debugging info, we continue on if a psymtab\n+\t     can't be found.  */\n+\t  if ((obj_file->flags & OBJF_REORDERED) && obj_file->sf)\n+\t    {\n+\t      struct compunit_symtab *result;\n+\n+\t      result\n+\t\t= obj_file->sf->qf->find_pc_sect_compunit_symtab (obj_file,\n+\t\t\t\t\t\t\t\t  msymbol,\n+\t\t\t\t\t\t\t\t  pc,\n+\t\t\t\t\t\t\t\t  section,\n+\t\t\t\t\t\t\t\t  0);\n+\t      if (result != NULL)\n+\t\treturn result;\n+\t    }\n \n-\t  if (BLOCK_START (b) <= pc\n-\t      && BLOCK_END (b) > pc\n-\t      && (distance == 0\n-\t\t  || BLOCK_END (b) - BLOCK_START (b) < distance))\n+\t  if (section != 0)\n \t    {\n-\t      /* For an objfile that has its functions reordered,\n-\t\t find_pc_psymtab will find the proper partial symbol table\n-\t\t and we simply return its corresponding symtab.  */\n-\t      /* In order to better support objfiles that contain both\n-\t\t stabs and coff debugging info, we continue on if a psymtab\n-\t\t can't be found.  */\n-\t      if ((obj_file->flags & OBJF_REORDERED) && obj_file->sf)\n+\t      struct symbol *sym = NULL;\n+\t      struct block_iterator iter;\n+\n+\t      ALL_BLOCK_SYMBOLS (global_block, iter, sym)\n \t\t{\n-\t\t  struct compunit_symtab *result;\n-\n-\t\t  result\n-\t\t    = obj_file->sf->qf->find_pc_sect_compunit_symtab (obj_file,\n-\t\t\t\t\t\t\t\t      msymbol,\n-\t\t\t\t\t\t\t\t      pc,\n-\t\t\t\t\t\t\t\t      section,\n-\t\t\t\t\t\t\t\t      0);\n-\t\t  if (result != NULL)\n-\t\t    return result;\n+\t\t  fixup_symbol_section (sym, obj_file);\n+\t\t  if (matching_obj_sections (SYMBOL_OBJ_SECTION (obj_file,\n+\t\t\t\t\t\t\t\t sym),\n+\t\t\t\t\t     section))\n+\t\t    break;\n \t\t}\n-\t      if (section != 0)\n-\t\t{\n-\t\t  struct block_iterator iter;\n-\t\t  struct symbol *sym = NULL;\n-\n-\t\t  ALL_BLOCK_SYMBOLS (b, iter, sym)\n-\t\t    {\n-\t\t      fixup_symbol_section (sym, obj_file);\n-\t\t      if (matching_obj_sections (SYMBOL_OBJ_SECTION (obj_file,\n-\t\t\t\t\t\t\t\t     sym),\n-\t\t\t\t\t\t section))\n-\t\t\tbreak;\n-\t\t    }\n-\t\t  if (sym == NULL)\n-\t\t    continue;\t\t/* No symbol in this symtab matches\n+\t      if (sym == NULL)\n+\t\tcontinue;\t\t/* No symbol in this symtab matches\n \t\t\t\t\t   section.  */\n-\t\t}\n-\t      distance = BLOCK_END (b) - BLOCK_START (b);\n-\t      best_cust = cust;\n \t    }\n+\n+\t  /* Cust is best found sofar, save it.  */\n+\t  best_cust = cust;\n+\t  best_cust_range = range;\n \t}\n     }\n "
    }
  ]
}