{
  "sha": "dd69bf7a78a489783c397f2552eeb7999defcb6a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ2OWJmN2E3OGE0ODk3ODNjMzk3ZjI1NTJlZWI3OTk5ZGVmY2I2YQ==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-11-17T18:37:39Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-03-12T05:56:51Z"
    },
    "message": "Avoid infinite recursion in find_pc_sect_line\n\nA patch somewhat like this patch has been in Fedora GDB for well over\na decade.  The Fedora patch was written by Jan Kratochvil.  The Fedora\nversion prints a warning and attempts to continue.  This version will\nerror out, fatally.  An earlier version of this patch was more like\nthe Fedora version than this one.  Simon Marchi recommended use of an\nassertion to test for the infinite recursion; I decided to use an\nexplicit test (with an \"if\" statement) along with a call to\ninternal_error() if the condition is met.  This way, I could include\na plea to file a bug report.\n\nIt was motivated by a customer reported bug (back in 2006!) which\nshowed infinite mutual recursion between find_pc_sect_line and\nfind_pc_line.  Here is a portion of the backtrace from the bug report:\n\n    (gdb) bt\n    #0  0x00000000004450a4 in lookup_minimal_symbol_by_pc_section (\n\tpc=251700325328, section=0x570f500) at gdb/minsyms.c:484\n    #1  0x00000000004bbfb2 in find_pc_sect_line (pc=251700325328,\n\tsection=0x570f500, notcurrent=0) at gdb/symtab.c:2057\n    #2  0x00000000004bc480 in find_pc_line (pc=251700325328, notcurrent=0)\n\tat gdb/symtab.c:2232\n    #3  0x00000000004bc1ff in find_pc_sect_line (pc=251700325328,\n\tsection=0x570f500, notcurrent=0) at gdb/symtab.c:2081\n\n    ...   (lots and lots of the same two functions with the same parameters)\n\n    #1070 0x00000000004bc480 in find_pc_line (pc=251700325328, notcurrent=0)\n\tat gdb/symtab.c:2232\n    #1071 0x00000000004bc1ff in find_pc_sect_line (pc=251700325328,\n\tsection=0x570f500, notcurrent=0) at gdb/symtab.c:2081\n    #1072 0x00000000004bc480 in find_pc_line (pc=251700325328, notcurrent=0)\n\tat gdb/symtab.c:2232\n    #1073 0x00000000004bc1ff in find_pc_sect_line (pc=251700325328,\n\tsection=0x570f500, notcurrent=0) at gdb/symtab.c:2081\n    #1074 0x00000000004bc480 in find_pc_line (pc=251700325328, notcurrent=0)\n\tat gdb/symtab.c:2232\n    #1075 0x00000000004bc1ff in find_pc_sect_line (pc=251696794399,\n\tsection=0x59b0df8, notcurrent=0) at gdb/symtab.c:2081\n    #1076 0x00000000004bc480 in find_pc_line (pc=251696794399, notcurrent=0)\n\tat gdb/symtab.c:2232\n    #1077 0x000000000055550e in find_frame_sal (frame=0xb3f3e0, sal=0x7fff1d1a8200)\n\tat gdb/frame.c:1392\n    #1078 0x00000000004d86fd in set_current_sal_from_frame (frame=0x1648, center=1)\n\tat gdb/stack.c:379\n    #1079 0x00000000004cf137 in normal_stop () at gdb/infrun.c:3147\n    ...\n\nThe test case was a large application.  Attempts were made to make a\nsmall(er) test case, but those attempts were not successful.\nTherefore, I cannot provide a new test for this patch.\n\nThat said, we ought to guard against recursively calling\nfind_pc_sect_line (via find_pc_line) with the identical PC value that\nit had been called with.  Should this happen, infinite recursion (as\nshown in the above backtrace) is the result.  This patch prevents\nthat from happening.\n\nIf this should happens, there is a bug somewhere, perhaps in GDB, perhaps\nin some other part of the toolchain or a library.  We error out fatally\nwith a message briefly describing the condition along with a plea to file\na bug report.\n\nI spent some time looking at the surrounding code and commentary which\nhandle the case of PC being in a stub/trampoline.  It first appeared\nin the public GDB repository in April, 1999.  The ChangeLog entry for\nthis commit is from 1998-12-31.  The relevant portion is:\n\n\t(find_pc_sect_line): Return correct information if pc is in import\n\tor export stub (trampoline).\n\nWhat's remarkable about the overall ChangeLog entry is that it's over\n2500+ lines long!  I believe that this was part of the infamous \"HP\nmerge\" (in which insufficient due diligence was given in accepting\na large batch of changes from an outside source).  In the years that\nfollowed, much of this code was either significantly revised or\noutright removed.\n\nFor this particular case, I'm grateful that extensive comments were\nprovided by \"RT\".  (I haven't been able to figure out who RT is/was.)\nI've decided against attempting to revise this stub/trampoline handling\ncode any further than adding Jan's test which prevents an obvious case\nof infinite recursion.\n\nI've tested on Fedora 31, x86-64.  I see no regressions.  I've also\nsearched the logfile for the new message, but as expected, no message\nwas found (which is good).\n\ngdb/ChangeLog:\n\n\t* symtab.c (find_pc_sect_line): Add check which prevents infinite\n\trecursion.\n\nChange-Id: I595470be6ab5f61ca7e4e9e70c61a252c0deaeaa",
    "tree": {
      "sha": "001629ea40c15bd1cae21a695e0835ed2b2b5175",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/001629ea40c15bd1cae21a695e0835ed2b2b5175"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd69bf7a78a489783c397f2552eeb7999defcb6a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd69bf7a78a489783c397f2552eeb7999defcb6a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd69bf7a78a489783c397f2552eeb7999defcb6a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd69bf7a78a489783c397f2552eeb7999defcb6a/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "038b97fcd75a338a515fe7def5db142e6952ca7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/038b97fcd75a338a515fe7def5db142e6952ca7c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/038b97fcd75a338a515fe7def5db142e6952ca7c"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 16,
    "deletions": 1
  },
  "files": [
    {
      "sha": "f6bd31cb4c749b7c3cd3502af76a20d2b7ec2242",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd69bf7a78a489783c397f2552eeb7999defcb6a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd69bf7a78a489783c397f2552eeb7999defcb6a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dd69bf7a78a489783c397f2552eeb7999defcb6a",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-11  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* symtab.c (find_pc_sect_line): Add check which prevents infinite\n+\trecursion.\n+\t\n 2020-03-11  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* configure: Re-generate."
    },
    {
      "sha": "aa415a9399938a44992d00c48bd88361eac68d01",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd69bf7a78a489783c397f2552eeb7999defcb6a/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd69bf7a78a489783c397f2552eeb7999defcb6a/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=dd69bf7a78a489783c397f2552eeb7999defcb6a",
      "patch": "@@ -3158,7 +3158,17 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n \t  ;\n \t/* fall through */\n \telse\n-\t  return find_pc_line (BMSYMBOL_VALUE_ADDRESS (mfunsym), 0);\n+\t  {\n+\t    /* Detect an obvious case of infinite recursion.  If this\n+\t       should occur, we'd like to know about it, so error out,\n+\t       fatally.  */\n+\t    if (BMSYMBOL_VALUE_ADDRESS (mfunsym) == pc)\n+\t      internal_error (__FILE__, __LINE__,\n+\t        _(\"Infinite recursion detected in find_pc_sect_line;\"\n+\t\t  \"please file a bug report\"));\n+\n+\t    return find_pc_line (BMSYMBOL_VALUE_ADDRESS (mfunsym), 0);\n+\t  }\n       }\n \n   symtab_and_line val;"
    }
  ]
}