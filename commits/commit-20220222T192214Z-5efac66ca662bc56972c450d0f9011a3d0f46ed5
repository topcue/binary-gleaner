{
  "sha": "5efac66ca662bc56972c450d0f9011a3d0f46ed5",
  "node_id": "C_kwDOANOeidoAKDVlZmFjNjZjYTY2MmJjNTY5NzJjNDUwZDBmOTAxMWEzZDBmNDZlZDU",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "message": "fbsd-nat: Include ptrace operation in error messages.",
    "tree": {
      "sha": "e0d56f795f6e04ed453621bb1c9da08d1add286a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e0d56f795f6e04ed453621bb1c9da08d1add286a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5efac66ca662bc56972c450d0f9011a3d0f46ed5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5efac66ca662bc56972c450d0f9011a3d0f46ed5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5efac66ca662bc56972c450d0f9011a3d0f46ed5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5efac66ca662bc56972c450d0f9011a3d0f46ed5/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9385df2a5818f08bd13b17e503fdb5e2011093c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9385df2a5818f08bd13b17e503fdb5e2011093c0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9385df2a5818f08bd13b17e503fdb5e2011093c0"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 18,
    "deletions": 16
  },
  "files": [
    {
      "sha": "18c2750945e631b0d7be1e65c58c7c53f79a6b8a",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5efac66ca662bc56972c450d0f9011a3d0f46ed5/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5efac66ca662bc56972c450d0f9011a3d0f46ed5/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=5efac66ca662bc56972c450d0f9011a3d0f46ed5",
      "patch": "@@ -821,7 +821,7 @@ fbsd_nat_target::thread_name (struct thread_info *thr)\n   if (!fbsd_fetch_kinfo_proc (pid, &kp))\n     perror_with_name (_(\"Failed to fetch process information\"));\n   if (ptrace (PT_LWPINFO, lwp, (caddr_t) &pl, sizeof pl) == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_LWPINFO)\"));\n   if (strcmp (kp.ki_comm, pl.pl_tdname) == 0)\n     return NULL;\n   xsnprintf (buf, sizeof buf, \"%s\", pl.pl_tdname);\n@@ -850,22 +850,22 @@ fbsd_enable_proc_events (pid_t pid)\n \n   if (ptrace (PT_GET_EVENT_MASK, pid, (PTRACE_TYPE_ARG3)&events,\n \t      sizeof (events)) == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_GET_EVENT_MASK)\"));\n   events |= PTRACE_FORK | PTRACE_LWP;\n #ifdef PTRACE_VFORK\n   events |= PTRACE_VFORK;\n #endif\n   if (ptrace (PT_SET_EVENT_MASK, pid, (PTRACE_TYPE_ARG3)&events,\n \t      sizeof (events)) == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_SET_EVENT_MASK)\"));\n #else\n #ifdef TDP_RFPPWAIT\n   if (ptrace (PT_FOLLOW_FORK, pid, (PTRACE_TYPE_ARG3)0, 1) == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_FOLLOW_FORK)\"));\n #endif\n #ifdef PT_LWP_EVENTS\n   if (ptrace (PT_LWP_EVENTS, pid, (PTRACE_TYPE_ARG3)0, 1) == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_LWP_EVENTS)\"));\n #endif\n #endif\n }\n@@ -884,13 +884,13 @@ fbsd_add_threads (fbsd_nat_target *target, pid_t pid)\n   gdb_assert (!in_thread_list (target, ptid_t (pid)));\n   nlwps = ptrace (PT_GETNUMLWPS, pid, NULL, 0);\n   if (nlwps == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_GETNUMLWPS)\"));\n \n   gdb::unique_xmalloc_ptr<lwpid_t[]> lwps (XCNEWVEC (lwpid_t, nlwps));\n \n   nlwps = ptrace (PT_GETLWPLIST, pid, (caddr_t) lwps.get (), nlwps);\n   if (nlwps == -1)\n-    perror_with_name ((\"ptrace\"));\n+    perror_with_name ((\"ptrace (PT_GETLWPLIST)\"));\n \n   for (i = 0; i < nlwps; i++)\n     {\n@@ -904,7 +904,7 @@ fbsd_add_threads (fbsd_nat_target *target, pid_t pid)\n \t  /* Don't add exited threads.  Note that this is only called\n \t     when attaching to a multi-threaded process.  */\n \t  if (ptrace (PT_LWPINFO, lwps[i], (caddr_t) &pl, sizeof pl) == -1)\n-\t    perror_with_name ((\"ptrace\"));\n+\t    perror_with_name ((\"ptrace (PT_LWPINFO)\"));\n \t  if (pl.pl_flags & PL_FLAG_EXITED)\n \t    continue;\n #endif\n@@ -1179,7 +1179,9 @@ fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n \t    request = PT_SUSPEND;\n \n \t  if (ptrace (request, tp->ptid.lwp (), NULL, 0) == -1)\n-\t    perror_with_name ((\"ptrace\"));\n+\t    perror_with_name (request == PT_RESUME ?\n+\t\t\t      (\"ptrace (PT_RESUME)\") :\n+\t\t\t      (\"ptrace (PT_SUSPEND)\"));\n \t}\n     }\n   else\n@@ -1188,7 +1190,7 @@ fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n \t until the process is continued however).  */\n       for (thread_info *tp : all_non_exited_threads (this, ptid))\n \tif (ptrace (PT_RESUME, tp->ptid.lwp (), NULL, 0) == -1)\n-\t  perror_with_name ((\"ptrace\"));\n+\t  perror_with_name ((\"ptrace (PT_RESUME)\"));\n       ptid = inferior_ptid;\n     }\n \n@@ -1218,7 +1220,7 @@ fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n   if (step)\n     {\n       if (ptrace (PT_SETSTEP, get_ptrace_pid (ptid), NULL, 0) == -1)\n-\tperror_with_name ((\"ptrace\"));\n+\tperror_with_name ((\"ptrace (PT_SETSTEP)\"));\n       step = 0;\n     }\n   ptid = ptid_t (ptid.pid ());\n@@ -1306,7 +1308,7 @@ fbsd_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n \n \t  pid = wptid.pid ();\n \t  if (ptrace (PT_LWPINFO, pid, (caddr_t) &pl, sizeof pl) == -1)\n-\t    perror_with_name ((\"ptrace\"));\n+\t    perror_with_name ((\"ptrace (PT_LWPINFO)\"));\n \n \t  wptid = ptid_t (pid, pl.pl_lwpid);\n \n@@ -1338,7 +1340,7 @@ fbsd_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t  delete_thread (thr);\n \t\t}\n \t      if (ptrace (PT_CONTINUE, pid, (caddr_t) 1, 0) == -1)\n-\t\tperror_with_name ((\"ptrace\"));\n+\t\tperror_with_name ((\"ptrace (PT_CONTINUE)\"));\n \t      continue;\n \t    }\n #endif\n@@ -1401,7 +1403,7 @@ fbsd_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t  gdb_assert (pid == child);\n \n \t\t  if (ptrace (PT_LWPINFO, child, (caddr_t)&pl, sizeof pl) == -1)\n-\t\t    perror_with_name ((\"ptrace\"));\n+\t\t    perror_with_name ((\"ptrace (PT_LWPINFO)\"));\n \n \t\t  gdb_assert (pl.pl_flags & PL_FLAG_CHILD);\n \t\t  child_ptid = ptid_t (child, pl.pl_lwpid);\n@@ -1490,7 +1492,7 @@ fbsd_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t and once system call stops are enabled on a process\n \t\t it stops for all system call entries and exits.  */\n \t      if (ptrace (PT_CONTINUE, pid, (caddr_t) 1, 0) == -1)\n-\t\tperror_with_name ((\"ptrace\"));\n+\t\tperror_with_name ((\"ptrace (PT_CONTINUE)\"));\n \t      continue;\n \t    }\n \t}\n@@ -1637,7 +1639,7 @@ fbsd_nat_target::follow_fork (inferior *child_inf, ptid_t child_ptid,\n \t infrun.c.  */\n \n       if (ptrace (PT_DETACH, child_pid, (PTRACE_TYPE_ARG3)1, 0) == -1)\n-\tperror_with_name ((\"ptrace\"));\n+\tperror_with_name ((\"ptrace (PT_DETACH)\"));\n \n #ifndef PTRACE_VFORK\n       if (fork_kind () == TARGET_WAITKIND_VFORKED)"
    }
  ]
}