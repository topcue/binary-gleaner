{
  "sha": "fc3c199facd60cc2facbfeee3e541e6aa6410f52",
  "node_id": "C_kwDOANOeidoAKGZjM2MxOTlmYWNkNjBjYzJmYWNiZmVlZTNlNTQxZTZhYTY0MTBmNTI",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2022-02-02T10:17:24Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-02-05T00:37:26Z"
    },
    "message": "sim: Add partial support for IEEE 754-2008\n\n2022-02-01  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n\nsim/common/ChangeLog:\n\t* sim-fpu.c (sim_fpu_minmax_nan): New.\n\t(sim_fpu_max): Add variant behaviour for IEEE 754-2008.\n\t(sim_fpu_min): Likewise.\n\t(sim_fpu_is_un, sim_fpu_is_or): New.\n\t(sim_fpu_un, sim_fpu_or): New.\n\t(sim_fpu_is_ieee754_2008, sim_fpu_is_ieee754_1985): New.\n\t(sim_fpu_set_mode): New.\n\t(sim_fpu_classify): New.\n\t* sim-fpu.h (sim_fpu_minmax_nan): New declaration.\n\t(sim_fpu_un, sim_fpu_or): New declarations.\n\t(sim_fpu_is_un, sim_fpu_is_or): New declarations.\n\t(sim_fpu_mode): New enum.\n\t[sim_fpu_state](current_mode): New field.\n\t(sim_fpu_current_mode): New define.\n\t(sim_fpu_is_ieee754_2008): New declaration.\n\t(sim_fpu_is_ieee754_1985): New declaration.\n\t(sim_fpu_set_mode): New declaration.\n\t(sim_fpu_classify): New declaration.",
    "tree": {
      "sha": "cad3fd3cd57d890ca4d61500778caeccb3f3e683",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cad3fd3cd57d890ca4d61500778caeccb3f3e683"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fc3c199facd60cc2facbfeee3e541e6aa6410f52",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3c199facd60cc2facbfeee3e541e6aa6410f52",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fc3c199facd60cc2facbfeee3e541e6aa6410f52",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3c199facd60cc2facbfeee3e541e6aa6410f52/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 131,
    "deletions": 5
  },
  "files": [
    {
      "sha": "ccaff9c766187aa4fd1b4c3176e4bd13d26e3b77",
      "filename": "sim/common/sim-fpu.c",
      "status": "modified",
      "additions": 106,
      "deletions": 4,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc3c199facd60cc2facbfeee3e541e6aa6410f52/sim/common/sim-fpu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc3c199facd60cc2facbfeee3e541e6aa6410f52/sim/common/sim-fpu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.c?ref=fc3c199facd60cc2facbfeee3e541e6aa6410f52",
      "patch": "@@ -1005,6 +1005,30 @@ sim_fpu_op_nan (sim_fpu *f, const sim_fpu *l, const sim_fpu *r)\n   return 0;\n }\n \n+/* NaN handling specific to min/max operations.  */\n+\n+INLINE_SIM_FPU (int)\n+sim_fpu_minmax_nan (sim_fpu *f, const sim_fpu *l, const sim_fpu *r)\n+{\n+  if (sim_fpu_is_snan (l)\n+      || sim_fpu_is_snan (r)\n+      || sim_fpu_is_ieee754_1985 ())\n+    return sim_fpu_op_nan (f, l, r);\n+  else\n+    /* if sim_fpu_is_ieee754_2008()\n+       && ((sim_fpu_is_qnan (l) || sim_fpu_is_qnan (r)))  */\n+    {\n+      /* In IEEE754-2008:\n+\t \"minNum/maxNum is ... the canonicalized number if one\n+\t operand is a number and the other a quiet NaN.\"  */\n+      if (sim_fpu_is_qnan (l))\n+\t*f = *r;\n+      else /* if (sim_fpu_is_qnan (r))  */\n+\t*f = *l;\n+      return 0;\n+    }\n+}\n+\n /* Arithmetic ops */\n \n INLINE_SIM_FPU (int)\n@@ -1553,7 +1577,7 @@ sim_fpu_max (sim_fpu *f,\n \t     const sim_fpu *r)\n {\n   if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n-    return sim_fpu_op_nan (f, l, r);\n+    return sim_fpu_minmax_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)\n@@ -1616,7 +1640,7 @@ sim_fpu_min (sim_fpu *f,\n \t     const sim_fpu *r)\n {\n   if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n-    return sim_fpu_op_nan (f, l, r);\n+    return sim_fpu_minmax_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)\n@@ -1677,7 +1701,7 @@ INLINE_SIM_FPU (int)\n sim_fpu_neg (sim_fpu *f,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (r))\n+  if (sim_fpu_is_ieee754_1985 () && sim_fpu_is_snan (r))\n     {\n       *f = *r;\n       f->class = sim_fpu_class_qnan;\n@@ -1700,7 +1724,7 @@ sim_fpu_abs (sim_fpu *f,\n {\n   *f = *r;\n   f->sign = 0;\n-  if (sim_fpu_is_snan (r))\n+  if (sim_fpu_is_ieee754_1985 () && sim_fpu_is_snan (r))\n     {\n       f->class = sim_fpu_class_qnan;\n       return sim_fpu_status_invalid_snan;\n@@ -2255,6 +2279,21 @@ sim_fpu_is_gt (const sim_fpu *l, const sim_fpu *r)\n   return is;\n }\n \n+INLINE_SIM_FPU (int)\n+sim_fpu_is_un (const sim_fpu *l, const sim_fpu *r)\n+{\n+  int is;\n+  sim_fpu_un (&is, l, r);\n+  return is;\n+}\n+\n+INLINE_SIM_FPU (int)\n+sim_fpu_is_or (const sim_fpu *l, const sim_fpu *r)\n+{\n+  int is;\n+  sim_fpu_or (&is, l, r);\n+  return is;\n+}\n \n /* Compare operators */\n \n@@ -2378,12 +2417,57 @@ sim_fpu_gt (int *is,\n   return sim_fpu_lt (is, r, l);\n }\n \n+INLINE_SIM_FPU (int)\n+sim_fpu_un (int *is, const sim_fpu *l, const sim_fpu *r)\n+{\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+   {\n+    *is = 1;\n+    return 0;\n+   }\n+\n+  *is = 0;\n+  return 0;\n+}\n+\n+INLINE_SIM_FPU (int)\n+sim_fpu_or (int *is, const sim_fpu *l, const sim_fpu *r)\n+{\n+  sim_fpu_un (is, l, r);\n+\n+  /* Invert result.  */\n+  *is = !*is;\n+  return 0;\n+}\n+\n+INLINE_SIM_FPU(int)\n+sim_fpu_classify (const sim_fpu *f)\n+{\n+  switch (f->class)\n+    {\n+    case sim_fpu_class_snan: return SIM_FPU_IS_SNAN;\n+    case sim_fpu_class_qnan: return SIM_FPU_IS_QNAN;\n+    case sim_fpu_class_infinity:\n+      return f->sign ? SIM_FPU_IS_NINF : SIM_FPU_IS_PINF;\n+    case sim_fpu_class_zero:\n+      return f->sign ? SIM_FPU_IS_NZERO : SIM_FPU_IS_PZERO;\n+    case sim_fpu_class_number:\n+      return f->sign ? SIM_FPU_IS_NNUMBER : SIM_FPU_IS_PNUMBER;\n+    case sim_fpu_class_denorm:\n+      return f->sign ? SIM_FPU_IS_NDENORM : SIM_FPU_IS_PDENORM;\n+    default:\n+      fprintf (stderr, \"Bad switch\\n\");\n+      abort ();\n+    }\n+  return 0;\n+}\n \n /* A number of useful constants */\n \n #if EXTERN_SIM_FPU_P\n sim_fpu_state _sim_fpu = {\n   .quiet_nan_inverted = false,\n+  .current_mode = sim_fpu_ieee754_1985,\n };\n \n const sim_fpu sim_fpu_zero = {\n@@ -2406,6 +2490,24 @@ const sim_fpu sim_fpu_max64 = {\n };\n #endif\n \n+/* Specification swapping behaviour */\n+INLINE_SIM_FPU (bool)\n+sim_fpu_is_ieee754_1985 (void)\n+{\n+  return (sim_fpu_current_mode == sim_fpu_ieee754_1985);\n+}\n+\n+INLINE_SIM_FPU (bool)\n+sim_fpu_is_ieee754_2008 (void)\n+{\n+  return (sim_fpu_current_mode == sim_fpu_ieee754_2008);\n+}\n+\n+INLINE_SIM_FPU (void)\n+sim_fpu_set_mode (const sim_fpu_mode m)\n+{\n+  sim_fpu_current_mode = m;\n+}\n \n /* For debugging */\n "
    },
    {
      "sha": "a20b28614918498b300baa251e99a5f3211f36bf",
      "filename": "sim/common/sim-fpu.h",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc3c199facd60cc2facbfeee3e541e6aa6410f52/sim/common/sim-fpu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc3c199facd60cc2facbfeee3e541e6aa6410f52/sim/common/sim-fpu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.h?ref=fc3c199facd60cc2facbfeee3e541e6aa6410f52",
      "patch": "@@ -163,8 +163,15 @@ typedef enum\n \n    FIXME: This state is global, but should be moved to SIM_CPU.  */\n \n+typedef enum\n+{\n+  sim_fpu_ieee754_1985,\n+  sim_fpu_ieee754_2008,\n+} sim_fpu_mode;\n+\n typedef struct _sim_fpu_state {\n   bool quiet_nan_inverted; /* Toggle quiet NaN semantics.  */\n+  sim_fpu_mode current_mode;\n } sim_fpu_state;\n \n \n@@ -268,6 +275,8 @@ INLINE_SIM_FPU (int) sim_fpu_sqrt (sim_fpu *f,\n \n INLINE_SIM_FPU (int) sim_fpu_op_nan (sim_fpu *f,\n \t\t\t\t     const sim_fpu *l, const sim_fpu *r);\n+INLINE_SIM_FPU (int) sim_fpu_minmax_nan (sim_fpu *f,\n+\t\t\t\t\t const sim_fpu *l, const sim_fpu *r);\n \n \n \n@@ -318,7 +327,8 @@ INLINE_SIM_FPU (double) sim_fpu_2d (const sim_fpu *d);\n /* INLINE_SIM_FPU (void) sim_fpu_f2 (sim_fpu *f, float s); */\n INLINE_SIM_FPU (void) sim_fpu_d2 (sim_fpu *f, double d);\n \n-\n+/* IEEE754-2008 classifiction function.  */\n+INLINE_SIM_FPU (int) sim_fpu_classify (const sim_fpu *f);\n \n /* Specific number classes.\n \n@@ -367,7 +377,20 @@ INLINE_SIM_FPU (int) sim_fpu_is_ne (const sim_fpu *l, const sim_fpu *r);\n INLINE_SIM_FPU (int) sim_fpu_is_ge (const sim_fpu *l, const sim_fpu *r);\n INLINE_SIM_FPU (int) sim_fpu_is_gt (const sim_fpu *l, const sim_fpu *r);\n \n+/* Unordered/ordered comparison operators.  */\n+\n+INLINE_SIM_FPU (int) sim_fpu_un (int *is, const sim_fpu *l, const sim_fpu *r);\n+INLINE_SIM_FPU (int) sim_fpu_or (int *is, const sim_fpu *l, const sim_fpu *r);\n+\n+INLINE_SIM_FPU (int) sim_fpu_is_un (const sim_fpu *l, const sim_fpu *r);\n+INLINE_SIM_FPU (int) sim_fpu_is_or (const sim_fpu *l, const sim_fpu *r);\n+\n+/* Changes the behaviour of the library to IEEE754-2008 or IEEE754-1985.\n+   The default for the library is IEEE754-1985.  */\n \n+INLINE_SIM_FPU (bool) sim_fpu_is_ieee754_1985 (void);\n+INLINE_SIM_FPU (bool) sim_fpu_is_ieee754_2008 (void);\n+INLINE_SIM_FPU (void) sim_fpu_set_mode (const sim_fpu_mode m);\n \n /* General number class and comparison operators.\n \n@@ -411,6 +434,7 @@ extern sim_fpu_state _sim_fpu;\n    between pre-R6 and R6 MIPS cores.  */\n \n #define sim_fpu_quiet_nan_inverted _sim_fpu.quiet_nan_inverted\n+#define sim_fpu_current_mode _sim_fpu.current_mode\n \n /* A number of useful constants.  */\n "
    }
  ]
}