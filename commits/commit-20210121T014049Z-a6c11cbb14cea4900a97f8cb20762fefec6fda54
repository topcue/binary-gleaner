{
  "sha": "a6c11cbb14cea4900a97f8cb20762fefec6fda54",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTZjMTFjYmIxNGNlYTQ5MDBhOTdmOGNiMjA3NjJmZWZlYzZmZGE1NA==",
  "commit": {
    "author": {
      "name": "Joel Sherrill",
      "email": "joel@rtems.org",
      "date": "2021-01-21T01:38:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-21T01:40:49Z"
    },
    "message": "gdb/remote.c: address conflicting enum and method name\n\nWhen building with gcc 4.8, we get:\n\n      CXX    remote.o\n    cc1plus: warning: command line option '-Wmissing-prototypes' is valid for C/ObjC but not for C++ [enabled by default]\n    /home/smarchi/src/binutils-gdb/gdb/remote.c:1157:38: error: 'resume_state' is not a class, namespace, or enumeration\n       enum resume_state m_resume_state = resume_state::NOT_RESUMED;\n                                          ^\n\nIt looks like gcc 4.8 doesn't like that there is an enum class named\nresume_state as well as a method.  Since it's an easy fix, rename the method to\nget_remote_state to avoid the clash.\n\ngdb/ChangeLog:\n\n\tPR gdb/27219\n\t* remote.c (struct remote_thread_info) <resume_state>: Rename\n\tto...\n\t<get_resume_state>: ... this.\n\t(remote_target::resume): Adjust.\n\t(remote_target::commit_resume): Adjust.\n\t(remote_target::select_thread_for_ambiguous_stop_reply): Adjust.\n\nChange-Id: Ib86c877a4c75ee671d69c27ed06cb8f57bc087db",
    "tree": {
      "sha": "e922ae4e7863ee3551904d36c66f6c940fa6618e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e922ae4e7863ee3551904d36c66f6c940fa6618e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a6c11cbb14cea4900a97f8cb20762fefec6fda54",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6c11cbb14cea4900a97f8cb20762fefec6fda54",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a6c11cbb14cea4900a97f8cb20762fefec6fda54",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6c11cbb14cea4900a97f8cb20762fefec6fda54/comments",
  "author": null,
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f0781f389fd7d3dea6959a7817f4c9f16eccd9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f0781f389fd7d3dea6959a7817f4c9f16eccd9c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f0781f389fd7d3dea6959a7817f4c9f16eccd9c"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 15,
    "deletions": 5
  },
  "files": [
    {
      "sha": "4c686a95edaf46332923e6209da4129619c017e7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6c11cbb14cea4900a97f8cb20762fefec6fda54/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6c11cbb14cea4900a97f8cb20762fefec6fda54/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a6c11cbb14cea4900a97f8cb20762fefec6fda54",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-20  Joel Sherrill  <joel@rtems.org>\n+\n+\tPR gdb/27219\n+\t* remote.c (struct remote_thread_info) <resume_state>: Rename\n+\tto...\n+\t<get_resume_state>: ... this.\n+\t(remote_target::resume): Adjust.\n+\t(remote_target::commit_resume): Adjust.\n+\t(remote_target::select_thread_for_ambiguous_stop_reply): Adjust.\n+\n 2021-01-20  Sergio Durigan Junior  <sergiodj@sergiodj.net>\n \t    Tom Tromey <tom@tromey.com>\n "
    },
    {
      "sha": "5daabf236b7ed261a4887bdf035db3f9fd3bd69a",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6c11cbb14cea4900a97f8cb20762fefec6fda54/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6c11cbb14cea4900a97f8cb20762fefec6fda54/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=a6c11cbb14cea4900a97f8cb20762fefec6fda54",
      "patch": "@@ -1104,7 +1104,7 @@ struct remote_thread_info : public private_thread_info\n   CORE_ADDR watch_data_address = 0;\n \n   /* Get the thread's resume state.  */\n-  enum resume_state resume_state () const\n+  enum resume_state get_resume_state () const\n   {\n     return m_resume_state;\n   }\n@@ -6393,7 +6393,7 @@ remote_target::resume (ptid_t ptid, int step, enum gdb_signal siggnal)\n \n       /* We don't expect the core to ask to resume an already resumed (from\n          its point of view) thread.  */\n-      gdb_assert (remote_thr->resume_state () == resume_state::NOT_RESUMED);\n+      gdb_assert (remote_thr->get_resume_state () == resume_state::NOT_RESUMED);\n \n       remote_thr->set_resumed_pending_vcont (step, siggnal);\n       return;\n@@ -6645,7 +6645,7 @@ remote_target::commit_resume ()\n \n       /* If a thread of a process is not meant to be resumed, then we\n \t can't wildcard that process.  */\n-      if (priv->resume_state () == resume_state::NOT_RESUMED)\n+      if (priv->get_resume_state () == resume_state::NOT_RESUMED)\n \t{\n \t  get_remote_inferior (tp->inf)->may_wildcard_vcont = false;\n \n@@ -6677,7 +6677,7 @@ remote_target::commit_resume ()\n       /* If the thread was previously vCont-resumed, no need to send a specific\n \t action for it.  If we didn't receive a resume request for it, don't\n \t send an action for it either.  */\n-      if (remote_thr->resume_state () != resume_state::RESUMED_PENDING_VCONT)\n+      if (remote_thr->get_resume_state () != resume_state::RESUMED_PENDING_VCONT)\n \tcontinue;\n \n       gdb_assert (!thread_is_in_step_over_chain (tp));\n@@ -7803,7 +7803,7 @@ remote_target::select_thread_for_ambiguous_stop_reply\n     {\n       remote_thread_info *remote_thr = get_remote_thread_info (thr);\n \n-      if (remote_thr->resume_state () != resume_state::RESUMED)\n+      if (remote_thr->get_resume_state () != resume_state::RESUMED)\n \tcontinue;\n \n       if (first_resumed_thread == nullptr)"
    }
  ]
}