{
  "sha": "a42d7dd873b1fc989b25c2fc793d6d084c6af907",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTQyZDdkZDg3M2IxZmM5ODliMjVjMmZjNzkzZDZkMDg0YzZhZjkwNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:37Z"
    },
    "message": "Remove symfile_objfile macro\n\nThis removes the symfile_objfile macro, in favor of just spelling out\nthe member access.\n\ngdb/ChangeLog\n2020-10-29  Tom Tromey  <tom@tromey.com>\n\n\t* windows-tdep.c (windows_solib_create_inferior_hook): Update.\n\t* target.c (info_target_command): Update.\n\t* symfile.c (syms_from_objfile_1, finish_new_objfile)\n\t(symbol_file_clear, reread_symbols): Update.\n\t* symfile-mem.c (add_symbol_file_from_memory_command): Update.\n\t* stabsread.c (scan_file_globals): Update.\n\t* solib.c (update_solib_list): Update.\n\t* solib-svr4.c (elf_locate_base, open_symbol_file_object)\n\t(svr4_fetch_objfile_link_map, enable_break)\n\t(svr4_relocate_main_executable)\n\t(svr4_iterate_over_objfiles_in_search_order): Update.\n\t* solib-frv.c (lm_base, enable_break)\n\t(frv_relocate_main_executable): Update.\n\t(main_got, frv_fdpic_find_canonical_descriptor): Update.\n\t(frv_fetch_objfile_link_map): Update.\n\t* solib-dsbt.c (lm_base, dsbt_relocate_main_executable): Update.\n\t* solib-darwin.c (darwin_solib_create_inferior_hook): Update.\n\t* solib-aix.c (solib_aix_solib_create_inferior_hook): Update.\n\t* remote.c (remote_target::get_offsets): Update.\n\t(remote_target::start_remote)\n\t(extended_remote_target::post_attach): Update.\n\t* objfiles.c (entry_point_address_query): Update.\n\t* nto-procfs.c (nto_procfs_target::create_inferior): Update.\n\t* minsyms.c (get_symbol_leading_char): Update.\n\t* frame.c (inside_main_func): Update.\n\t* progspace.h (symfile_objfile): Remove macro.",
    "tree": {
      "sha": "fc03e49cfc9d6225dfdca489d27035e9af08ffa4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc03e49cfc9d6225dfdca489d27035e9af08ffa4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a42d7dd873b1fc989b25c2fc793d6d084c6af907",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a42d7dd873b1fc989b25c2fc793d6d084c6af907",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a42d7dd873b1fc989b25c2fc793d6d084c6af907",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a42d7dd873b1fc989b25c2fc793d6d084c6af907/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19f6550ebbc922f88026c5c7ebeb04019d47cac2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19f6550ebbc922f88026c5c7ebeb04019d47cac2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19f6550ebbc922f88026c5c7ebeb04019d47cac2"
    }
  ],
  "stats": {
    "total": 203,
    "additions": 124,
    "deletions": 79
  },
  "files": [
    {
      "sha": "c074b4fdbf3254f1f86109ad8a7853707fa3022f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -1,3 +1,32 @@\n+2020-10-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* windows-tdep.c (windows_solib_create_inferior_hook): Update.\n+\t* target.c (info_target_command): Update.\n+\t* symfile.c (syms_from_objfile_1, finish_new_objfile)\n+\t(symbol_file_clear, reread_symbols): Update.\n+\t* symfile-mem.c (add_symbol_file_from_memory_command): Update.\n+\t* stabsread.c (scan_file_globals): Update.\n+\t* solib.c (update_solib_list): Update.\n+\t* solib-svr4.c (elf_locate_base, open_symbol_file_object)\n+\t(svr4_fetch_objfile_link_map, enable_break)\n+\t(svr4_relocate_main_executable)\n+\t(svr4_iterate_over_objfiles_in_search_order): Update.\n+\t* solib-frv.c (lm_base, enable_break)\n+\t(frv_relocate_main_executable): Update.\n+\t(main_got, frv_fdpic_find_canonical_descriptor): Update.\n+\t(frv_fetch_objfile_link_map): Update.\n+\t* solib-dsbt.c (lm_base, dsbt_relocate_main_executable): Update.\n+\t* solib-darwin.c (darwin_solib_create_inferior_hook): Update.\n+\t* solib-aix.c (solib_aix_solib_create_inferior_hook): Update.\n+\t* remote.c (remote_target::get_offsets): Update.\n+\t(remote_target::start_remote)\n+\t(extended_remote_target::post_attach): Update.\n+\t* objfiles.c (entry_point_address_query): Update.\n+\t* nto-procfs.c (nto_procfs_target::create_inferior): Update.\n+\t* minsyms.c (get_symbol_leading_char): Update.\n+\t* frame.c (inside_main_func): Update.\n+\t* progspace.h (symfile_objfile): Remove macro.\n+\n 2020-10-29  Tom Tromey  <tom@tromey.com>\n \n \t* exec.c (exec_file_attach): Update."
    },
    {
      "sha": "15168fb4315924a5536e01f3eb25a76f6dbffb91",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -2292,13 +2292,14 @@ frame_debug_got_null_frame (struct frame_info *this_frame,\n static bool\n inside_main_func (frame_info *this_frame)\n {\n-  if (symfile_objfile == nullptr)\n+  if (current_program_space->symfile_object_file == nullptr)\n     return false;\n \n   CORE_ADDR sym_addr;\n   const char *name = main_name ();\n   bound_minimal_symbol msymbol\n-    = lookup_minimal_symbol (name, NULL, symfile_objfile);\n+    = lookup_minimal_symbol (name, NULL,\n+\t\t\t     current_program_space->symfile_object_file);\n   if (msymbol.minsym == nullptr)\n     {\n       /* In some language (for example Fortran) there will be no minimal"
    },
    {
      "sha": "0dec18d21ab9fc353fb1751536ab3d202d65fee8",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -1008,8 +1008,12 @@ get_symbol_leading_char (bfd *abfd)\n {\n   if (abfd != NULL)\n     return bfd_get_symbol_leading_char (abfd);\n-  if (symfile_objfile != NULL && symfile_objfile->obfd != NULL)\n-    return bfd_get_symbol_leading_char (symfile_objfile->obfd);\n+  if (current_program_space->symfile_object_file != NULL)\n+    {\n+      objfile *objf = current_program_space->symfile_object_file;\n+      if (objf->obfd != NULL)\n+\treturn bfd_get_symbol_leading_char (objf->obfd);\n+    }\n   return 0;\n }\n "
    },
    {
      "sha": "366ef38fdd9416d4872fc88e4205944e413ba53e",
      "filename": "gdb/nto-procfs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/nto-procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/nto-procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nto-procfs.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -1323,7 +1323,8 @@ nto_procfs_target::create_inferior (const char *exec_file,\n   target_terminal::init ();\n \n   if (current_program_space->exec_bfd () != NULL\n-      || (symfile_objfile != NULL && symfile_objfile->obfd != NULL))\n+      || (current_program_space->symfile_object_file != NULL\n+\t  && current_program_space->symfile_object_file->obfd != NULL))\n     solib_create_inferior_hook (0);\n }\n "
    },
    {
      "sha": "b322c6b2b9aa3830d74a933c8d0c7e570f61ee58",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -373,12 +373,12 @@ objfile::objfile (bfd *abfd, const char *name, objfile_flags flags_)\n int\n entry_point_address_query (CORE_ADDR *entry_p)\n {\n-  if (symfile_objfile == NULL || !symfile_objfile->per_bfd->ei.entry_point_p)\n+  objfile *objf = current_program_space->symfile_object_file;\n+  if (objf == NULL || !objf->per_bfd->ei.entry_point_p)\n     return 0;\n \n-  int idx = symfile_objfile->per_bfd->ei.the_bfd_section_index;\n-  *entry_p = (symfile_objfile->per_bfd->ei.entry_point\n-\t      + symfile_objfile->section_offsets[idx]);\n+  int idx = objf->per_bfd->ei.the_bfd_section_index;\n+  *entry_p = objf->per_bfd->ei.entry_point + objf->section_offsets[idx];\n \n   return 1;\n }"
    },
    {
      "sha": "e719cee57d094df040b63d826894f3a49439509d",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -372,11 +372,6 @@ struct address_space\n   REGISTRY_FIELDS;\n };\n \n-/* The object file that the main symbol table was loaded from (e.g. the\n-   argument to the \"symbol-file\" or \"file\" command).  */\n-\n-#define symfile_objfile current_program_space->symfile_object_file\n-\n /* The list of all program spaces.  There's always at least one.  */\n extern std::vector<struct program_space *>program_spaces;\n "
    },
    {
      "sha": "b75d9a975b3a2ea57e2401c3f0daaa77a80c6aaa",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 12,
      "deletions": 11,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -4107,7 +4107,7 @@ remote_target::get_offsets ()\n   int lose, num_segments = 0, do_sections, do_segments;\n   CORE_ADDR text_addr, data_addr, bss_addr, segments[2];\n \n-  if (symfile_objfile == NULL)\n+  if (current_program_space->symfile_object_file == NULL)\n     return;\n \n   putpkt (\"qOffsets\");\n@@ -4183,10 +4183,10 @@ remote_target::get_offsets ()\n   else if (*ptr != '\\0')\n     warning (_(\"Target reported unsupported offsets: %s\"), buf);\n \n-  section_offsets offs = symfile_objfile->section_offsets;\n+  objfile *objf = current_program_space->symfile_object_file;\n+  section_offsets offs = objf->section_offsets;\n \n-  symfile_segment_data_up data\n-    = get_symfile_segment_data (symfile_objfile->obfd);\n+  symfile_segment_data_up data = get_symfile_segment_data (objf->obfd);\n   do_segments = (data != NULL);\n   do_sections = num_segments == 0;\n \n@@ -4221,7 +4221,7 @@ remote_target::get_offsets ()\n \n   if (do_segments)\n     {\n-      int ret = symfile_map_offsets_to_segments (symfile_objfile->obfd,\n+      int ret = symfile_map_offsets_to_segments (objf->obfd,\n \t\t\t\t\t\t data.get (), offs,\n \t\t\t\t\t\t num_segments, segments);\n \n@@ -4235,18 +4235,18 @@ remote_target::get_offsets ()\n \n   if (do_sections)\n     {\n-      offs[SECT_OFF_TEXT (symfile_objfile)] = text_addr;\n+      offs[SECT_OFF_TEXT (objf)] = text_addr;\n \n       /* This is a temporary kludge to force data and bss to use the\n \t same offsets because that's what nlmconv does now.  The real\n \t solution requires changes to the stub and remote.c that I\n \t don't have time to do right now.  */\n \n-      offs[SECT_OFF_DATA (symfile_objfile)] = data_addr;\n-      offs[SECT_OFF_BSS (symfile_objfile)] = data_addr;\n+      offs[SECT_OFF_DATA (objf)] = data_addr;\n+      offs[SECT_OFF_BSS (objf)] = data_addr;\n     }\n \n-  objfile_relocate (symfile_objfile, offs);\n+  objfile_relocate (objf, offs);\n }\n \n /* Send interrupt_sequence to remote target.  */\n@@ -4846,7 +4846,8 @@ remote_target::start_remote (int from_tty, int extended_p)\n   /* If we connected to a live target, do some additional setup.  */\n   if (target_has_execution ())\n     {\n-      if (symfile_objfile) \t/* No use without a symbol-file.  */\n+      /* No use without a symbol-file.  */\n+      if (current_program_space->symfile_object_file)\n \tremote_check_symbols ();\n     }\n \n@@ -5983,7 +5984,7 @@ extended_remote_target::post_attach (int pid)\n      binary is not using shared libraries, the vsyscall page is not\n      present (on Linux) and the binary itself hadn't changed since the\n      debugging process was started.  */\n-  if (symfile_objfile != NULL)\n+  if (current_program_space->symfile_object_file != NULL)\n     remote_check_symbols();\n }\n "
    },
    {
      "sha": "0897d067c40d6543ff8b91e9d147091a863146f6",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -462,12 +462,13 @@ solib_aix_solib_create_inferior_hook (int from_tty)\n     }\n \n   lm_info_aix &exec_info = (*library_list)[0];\n-  if (symfile_objfile != NULL)\n+  if (current_program_space->symfile_object_file != NULL)\n     {\n-      section_offsets offsets\n-\t= solib_aix_get_section_offsets (symfile_objfile, &exec_info);\n+      objfile *objf = current_program_space->symfile_object_file;\n+      section_offsets offsets = solib_aix_get_section_offsets (objf,\n+\t\t\t\t\t\t\t       &exec_info);\n \n-      objfile_relocate (symfile_objfile, offsets);\n+      objfile_relocate (objf, offsets);\n     }\n }\n "
    },
    {
      "sha": "172b1e20829c9cd044ccea1d7515554433129cd8",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -539,7 +539,7 @@ darwin_solib_create_inferior_hook (int from_tty)\n       load_addr = darwin_read_exec_load_addr_at_init (info);\n     }\n \n-  if (load_addr != 0 && symfile_objfile != NULL)\n+  if (load_addr != 0 && current_program_space->symfile_object_file != NULL)\n     {\n       CORE_ADDR vmaddr;\n \n@@ -548,7 +548,8 @@ darwin_solib_create_inferior_hook (int from_tty)\n \n       /* Relocate.  */\n       if (vmaddr != load_addr)\n-\tobjfile_rebase (symfile_objfile, load_addr - vmaddr);\n+\tobjfile_rebase (current_program_space->symfile_object_file,\n+\t\t\tload_addr - vmaddr);\n     }\n \n   /* Set solib notifier (to reload list of shared libraries).  */"
    },
    {
      "sha": "c3ce167d61779093df525bb4664cdce76e4480bc",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -552,7 +552,7 @@ lm_base (void)\n     return info->lm_base_cache;\n \n   got_sym = lookup_minimal_symbol (\"_GLOBAL_OFFSET_TABLE_\", NULL,\n-\t\t\t\t   symfile_objfile);\n+\t\t\t\t   current_program_space->symfile_object_file);\n \n   if (got_sym.minsym != 0)\n     {\n@@ -909,21 +909,22 @@ dsbt_relocate_main_executable (void)\n   info->main_executable_lm_info = new lm_info_dsbt;\n   info->main_executable_lm_info->map = ldm;\n \n-  section_offsets new_offsets (symfile_objfile->section_offsets.size ());\n+  objfile *objf = current_program_space->symfile_object_file;\n+  section_offsets new_offsets (objf->section_offsets.size ());\n   changed = 0;\n \n-  ALL_OBJFILE_OSECTIONS (symfile_objfile, osect)\n+  ALL_OBJFILE_OSECTIONS (objf, osect)\n     {\n       CORE_ADDR orig_addr, addr, offset;\n       int osect_idx;\n       int seg;\n \n-      osect_idx = osect - symfile_objfile->sections;\n+      osect_idx = osect - objf->sections;\n \n       /* Current address of section.  */\n       addr = obj_section_addr (osect);\n       /* Offset from where this section started.  */\n-      offset = symfile_objfile->section_offsets[osect_idx];\n+      offset = objf->section_offsets[osect_idx];\n       /* Original address prior to any past relocations.  */\n       orig_addr = addr - offset;\n \n@@ -943,10 +944,10 @@ dsbt_relocate_main_executable (void)\n     }\n \n   if (changed)\n-    objfile_relocate (symfile_objfile, new_offsets);\n+    objfile_relocate (objf, new_offsets);\n \n-  /* Now that symfile_objfile has been relocated, we can compute the\n-     GOT value and stash it away.  */\n+  /* Now that OBJF has been relocated, we can compute the GOT value\n+     and stash it away.  */\n }\n \n /* When gdb starts up the inferior, it nurses it along (through the"
    },
    {
      "sha": "6c9ab1757b27f4c753cfca64dc144f8bfb51a7e1",
      "filename": "gdb/solib-frv.c",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-frv.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -287,7 +287,7 @@ lm_base (void)\n     return lm_base_cache;\n \n   got_sym = lookup_minimal_symbol (\"_GLOBAL_OFFSET_TABLE_\", NULL,\n-                                   symfile_objfile);\n+                                   current_program_space->symfile_object_file);\n   if (got_sym.minsym == 0)\n     {\n       if (solib_frv_debug)\n@@ -717,7 +717,7 @@ enable_break (void)\n   asection *interp_sect;\n   CORE_ADDR entry_point;\n \n-  if (symfile_objfile == NULL)\n+  if (current_program_space->symfile_object_file == NULL)\n     {\n       if (solib_frv_debug)\n \tfprintf_unfiltered (gdb_stdlog,\n@@ -784,21 +784,22 @@ frv_relocate_main_executable (void)\n   main_executable_lm_info = new lm_info_frv;\n   main_executable_lm_info->map = ldm;\n \n-  section_offsets new_offsets (symfile_objfile->section_offsets.size ());\n+  objfile *objf = current_program_space->symfile_object_file;\n+  section_offsets new_offsets (objf->section_offsets.size ());\n   changed = 0;\n \n-  ALL_OBJFILE_OSECTIONS (symfile_objfile, osect)\n+  ALL_OBJFILE_OSECTIONS (objf, osect)\n     {\n       CORE_ADDR orig_addr, addr, offset;\n       int osect_idx;\n       int seg;\n       \n-      osect_idx = osect - symfile_objfile->sections;\n+      osect_idx = osect - objf->sections;\n \n       /* Current address of section.  */\n       addr = obj_section_addr (osect);\n       /* Offset from where this section started.  */\n-      offset = symfile_objfile->section_offsets[osect_idx];\n+      offset = objf->section_offsets[osect_idx];\n       /* Original address prior to any past relocations.  */\n       orig_addr = addr - offset;\n \n@@ -818,10 +819,10 @@ frv_relocate_main_executable (void)\n     }\n \n   if (changed)\n-    objfile_relocate (symfile_objfile, new_offsets);\n+    objfile_relocate (objf, new_offsets);\n \n-  /* Now that symfile_objfile has been relocated, we can compute the\n-     GOT value and stash it away.  */\n+  /* Now that OBJF has been relocated, we can compute the GOT value\n+     and stash it away.  */\n   main_executable_lm_info->got_value = main_got ();\n }\n \n@@ -894,8 +895,8 @@ main_got (void)\n {\n   struct bound_minimal_symbol got_sym;\n \n-  got_sym = lookup_minimal_symbol (\"_GLOBAL_OFFSET_TABLE_\",\n-\t\t\t\t   NULL, symfile_objfile);\n+  objfile *objf = current_program_space->symfile_object_file;\n+  got_sym = lookup_minimal_symbol (\"_GLOBAL_OFFSET_TABLE_\", NULL, objf);\n   if (got_sym.minsym == 0)\n     return 0;\n \n@@ -955,8 +956,9 @@ frv_fdpic_find_canonical_descriptor (CORE_ADDR entry_point)\n     name = sym->linkage_name ();\n \n   /* Check the main executable.  */\n+  objfile *objf = current_program_space->symfile_object_file;\n   addr = find_canonical_descriptor_in_load_object\n-           (entry_point, got_value, name, symfile_objfile->obfd,\n+           (entry_point, got_value, name, objf->obfd,\n \t    main_executable_lm_info);\n \n   /* If descriptor not found via main executable, check each load object\n@@ -1110,7 +1112,7 @@ frv_fetch_objfile_link_map (struct objfile *objfile)\n     solib_add (0, 0, 1);\n \n   /* frv_current_sos() will set main_lm_addr for the main executable.  */\n-  if (objfile == symfile_objfile)\n+  if (objfile == current_program_space->symfile_object_file)\n     return main_lm_addr;\n \n   /* The other link map addresses may be found by examining the list"
    },
    {
      "sha": "cd49cb572c87f03a4f3d8232b8b4a410f85ef120",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -806,7 +806,8 @@ elf_locate_base (void)\n \n   /* This may be a static executable.  Look for the symbol\n      conventionally named _r_debug, as a last resort.  */\n-  msymbol = lookup_minimal_symbol (\"_r_debug\", NULL, symfile_objfile);\n+  msymbol = lookup_minimal_symbol (\"_r_debug\", NULL,\n+\t\t\t\t   current_program_space->symfile_object_file);\n   if (msymbol.minsym != NULL)\n     return BMSYMBOL_VALUE_ADDRESS (msymbol);\n \n@@ -971,7 +972,7 @@ open_symbol_file_object (int from_tty)\n   if (from_tty)\n     add_flags |= SYMFILE_VERBOSE;\n \n-  if (symfile_objfile)\n+  if (current_program_space->symfile_object_file)\n     if (!query (_(\"Attempt to reload symbols from process? \")))\n       return 0;\n \n@@ -1544,7 +1545,7 @@ svr4_fetch_objfile_link_map (struct objfile *objfile)\n     solib_add (NULL, 0, auto_solib_add);\n \n   /* svr4_current_sos() will set main_lm_addr for the main executable.  */\n-  if (objfile == symfile_objfile)\n+  if (objfile == current_program_space->symfile_object_file)\n     return info->main_lm_addr;\n \n   /* If OBJFILE is a separate debug object file, look for the\n@@ -2465,9 +2466,10 @@ enable_break (struct svr4_info *info, int from_tty)\n   /* Scan through the lists of symbols, trying to look up the symbol and\n      set a breakpoint there.  Terminate loop when we/if we succeed.  */\n \n+  objfile *objf = current_program_space->symfile_object_file;\n   for (bkpt_namep = solib_break_names; *bkpt_namep != NULL; bkpt_namep++)\n     {\n-      msymbol = lookup_minimal_symbol (*bkpt_namep, NULL, symfile_objfile);\n+      msymbol = lookup_minimal_symbol (*bkpt_namep, NULL, objf);\n       if ((msymbol.minsym != NULL)\n \t  && (BMSYMBOL_VALUE_ADDRESS (msymbol) != 0))\n \t{\n@@ -2485,7 +2487,7 @@ enable_break (struct svr4_info *info, int from_tty)\n     {\n       for (bkpt_namep = bkpt_names; *bkpt_namep != NULL; bkpt_namep++)\n \t{\n-\t  msymbol = lookup_minimal_symbol (*bkpt_namep, NULL, symfile_objfile);\n+\t  msymbol = lookup_minimal_symbol (*bkpt_namep, NULL, objf);\n \t  if ((msymbol.minsym != NULL)\n \t      && (BMSYMBOL_VALUE_ADDRESS (msymbol) != 0))\n \t    {\n@@ -2981,11 +2983,12 @@ svr4_relocate_main_executable (void)\n   /* Even DISPLACEMENT 0 is a valid new difference of in-memory vs. in-file\n      addresses.  */\n \n-  if (symfile_objfile)\n+  objfile *objf = current_program_space->symfile_object_file;\n+  if (objf)\n     {\n-      section_offsets new_offsets (symfile_objfile->section_offsets.size (),\n+      section_offsets new_offsets (objf->section_offsets.size (),\n \t\t\t\t   displacement);\n-      objfile_relocate (symfile_objfile, new_offsets);\n+      objfile_relocate (objf, new_offsets);\n     }\n   else if (current_program_space->exec_bfd ())\n     {\n@@ -3246,7 +3249,7 @@ svr4_iterate_over_objfiles_in_search_order\n       if (current_objfile->separate_debug_objfile_backlink != nullptr)\n         current_objfile = current_objfile->separate_debug_objfile_backlink;\n \n-      if (current_objfile == symfile_objfile)\n+      if (current_objfile == current_program_space->symfile_object_file)\n \tabfd = current_program_space->exec_bfd ();\n       else\n \tabfd = current_objfile->obfd;"
    },
    {
      "sha": "9df4eca888a20f64021943362adf710aee06736f",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -729,7 +729,8 @@ update_solib_list (int from_tty)\n       /* If we are attaching to a running process for which we\n \t have not opened a symbol file, we may be able to get its\n \t symbols now!  */\n-      if (inf->attach_flag && symfile_objfile == NULL)\n+      if (inf->attach_flag\n+\t  && current_program_space->symfile_object_file == NULL)\n \t{\n \t  try\n \t    {"
    },
    {
      "sha": "9fa51885cfc155b048a8c1dfb23590d8b649a878",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -4518,8 +4518,9 @@ scan_file_globals (struct objfile *objfile)\n      If we are scanning the symbols for a shared library, try to resolve\n      them from the minimal symbols of the main executable first.  */\n \n-  if (symfile_objfile && objfile != symfile_objfile)\n-    resolve_objfile = symfile_objfile;\n+  if (current_program_space->symfile_object_file\n+      && objfile != current_program_space->symfile_object_file)\n+    resolve_objfile = current_program_space->symfile_object_file;\n   else\n     resolve_objfile = objfile;\n "
    },
    {
      "sha": "916c37cb9f8805723e06505d6c979736c08a77ca",
      "filename": "gdb/symfile-mem.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/symfile-mem.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/symfile-mem.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-mem.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -143,8 +143,8 @@ add_symbol_file_from_memory_command (const char *args, int from_tty)\n   addr = parse_and_eval_address (args);\n \n   /* We need some representative bfd to know the target we are looking at.  */\n-  if (symfile_objfile != NULL)\n-    templ = symfile_objfile->obfd;\n+  if (current_program_space->symfile_object_file != NULL)\n+    templ = current_program_space->symfile_object_file->obfd;\n   else\n     templ = current_program_space->exec_bfd ();\n   if (templ == NULL)"
    },
    {
      "sha": "493411fa417b95052189e43747292aa1e117b0d7",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -929,10 +929,10 @@ syms_from_objfile_1 (struct objfile *objfile,\n \n       /* Since no error yet, throw away the old symbol table.  */\n \n-      if (symfile_objfile != NULL)\n+      if (current_program_space->symfile_object_file != NULL)\n \t{\n-\t  symfile_objfile->unlink ();\n-\t  gdb_assert (symfile_objfile == NULL);\n+\t  current_program_space->symfile_object_file->unlink ();\n+\t  gdb_assert (current_program_space->symfile_object_file == NULL);\n \t}\n \n       /* Currently we keep symbols from the add-symbol-file command.\n@@ -995,7 +995,7 @@ finish_new_objfile (struct objfile *objfile, symfile_add_flags add_flags)\n   if (add_flags & SYMFILE_MAINLINE)\n     {\n       /* OK, make it the \"real\" symbol file.  */\n-      symfile_objfile = objfile;\n+      current_program_space->symfile_object_file = objfile;\n \n       clear_symtab_users (add_flags);\n     }\n@@ -1216,9 +1216,9 @@ symbol_file_clear (int from_tty)\n {\n   if ((have_full_symbols () || have_partial_symbols ())\n       && from_tty\n-      && (symfile_objfile\n+      && (current_program_space->symfile_object_file\n \t  ? !query (_(\"Discard symbol table from `%s'? \"),\n-\t\t    objfile_name (symfile_objfile))\n+\t\t    objfile_name (current_program_space->symfile_object_file))\n \t  : !query (_(\"Discard symbol table? \"))))\n     error (_(\"Not confirmed.\"));\n \n@@ -1230,7 +1230,7 @@ symbol_file_clear (int from_tty)\n \n   clear_symtab_users (0);\n \n-  gdb_assert (symfile_objfile == NULL);\n+  gdb_assert (current_program_space->symfile_object_file == NULL);\n   if (from_tty)\n     printf_filtered (_(\"No symbol file now.\\n\"));\n }\n@@ -2555,7 +2555,7 @@ reread_symbols (void)\n \t  /* What the hell is sym_new_init for, anyway?  The concept of\n \t     distinguishing between the main file and additional files\n \t     in this way seems rather dubious.  */\n-\t  if (objfile == symfile_objfile)\n+\t  if (objfile == current_program_space->symfile_object_file)\n \t    {\n \t      (*objfile->sf->sym_new_init) (objfile);\n \t    }"
    },
    {
      "sha": "0063589259a7503d35f40ca9a74dca39fbd688bf",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -1828,9 +1828,12 @@ info_target_command (const char *args, int from_tty)\n {\n   int has_all_mem = 0;\n \n-  if (symfile_objfile != NULL)\n-    printf_unfiltered (_(\"Symbols from \\\"%s\\\".\\n\"),\n-\t\t       objfile_name (symfile_objfile));\n+  if (current_program_space->symfile_object_file != NULL)\n+    {\n+      objfile *objf = current_program_space->symfile_object_file;\n+      printf_unfiltered (_(\"Symbols from \\\"%s\\\".\\n\"),\n+\t\t\t objfile_name (objf));\n+    }\n \n   for (target_ops *t = current_top_target (); t != NULL; t = t->beneath ())\n     {"
    },
    {
      "sha": "50858f5c65a66480dcbb5122559b881d991049d1",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42d7dd873b1fc989b25c2fc793d6d084c6af907/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=a42d7dd873b1fc989b25c2fc793d6d084c6af907",
      "patch": "@@ -912,12 +912,13 @@ windows_solib_create_inferior_hook (int from_tty)\n     }\n \n   /* Rebase executable if the base address changed because of ASLR.  */\n-  if (symfile_objfile != nullptr && exec_base != 0)\n+  if (current_program_space->symfile_object_file != nullptr && exec_base != 0)\n     {\n       CORE_ADDR vmaddr\n \t= pe_data (current_program_space->exec_bfd ())->pe_opthdr.ImageBase;\n       if (vmaddr != exec_base)\n-\tobjfile_rebase (symfile_objfile, exec_base - vmaddr);\n+\tobjfile_rebase (current_program_space->symfile_object_file,\n+\t\t\texec_base - vmaddr);\n     }\n }\n "
    }
  ]
}