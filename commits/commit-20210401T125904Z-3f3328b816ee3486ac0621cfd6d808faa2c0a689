{
  "sha": "3f3328b816ee3486ac0621cfd6d808faa2c0a689",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2YzMzI4YjgxNmVlMzQ4NmFjMDYyMWNmZDZkODA4ZmFhMmMwYTY4OQ==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-03-18T14:16:54Z"
    },
    "committer": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-04-01T12:59:04Z"
    },
    "message": "Use startswith more for strncmp function calls.\n\nbfd/ChangeLog:\n\n\t* elf-bfd.h (bfd_section_is_ctf): Use startswith function.\n\t* elf.c (_bfd_elf_make_section_from_shdr): Likewise.\n\t(elf_get_reloc_section): Likewise.\n\t* elf32-arc.c (elf_arc_size_dynamic_sections): Likewise.\n\t* elf32-m32r.c (m32r_elf_section_flags): Likewise.\n\t* elf32-microblaze.c (microblaze_elf_size_dynamic_sections): Likewise.\n\t* elf32-nds32.c (nds32_elf_size_dynamic_sections): Likewise.\n\t(nds32_elf_relocate_section): Likewise.\n\t(nds32_elf_action_discarded): Likewise.\n\t(nds32_elf_check_relocs): Likewise.\n\t(nds32_elf_section_flags): Likewise.\n\t* elf32-or1k.c (or1k_elf_check_relocs): Likewise.\n\t* elf32-ppc.c (ppc_elf_section_from_shdr): Likewise.\n\t* elf32-rx.c (rx_table_find): Likewise.\n\t(rx_table_map): Likewise.\n\t* elf32-spu.c (spu_elf_backend_symbol_processing): Likewise.\n\t(spu_elf_find_overlays): Likewise.\n\t(needs_ovl_stub): Likewise.\n\t(allocate_spuear_stubs): Likewise.\n\t(build_spuear_stubs): Likewise.\n\t(mark_overlay_section): Likewise.\n\t(spu_elf_auto_overlay): Likewise.\n\t(spu_elf_output_symbol_hook): Likewise.\n\t* elf32-tilepro.c (tilepro_elf_size_dynamic_sections): Likewise.\n\t* elf32-xtensa.c (xtensa_property_section_name): Likewise.\n\t* elf64-ppc.c (ppc64_elf_section_flags): Likewise.\n\t(ppc64_elf_relocate_section): Likewise.\n\t* elflink.c (resolve_section): Likewise.\n\t(UNARY_OP): Likewise.\n\t(BINARY_OP_HEAD): Likewise.\n\t(elf_link_input_bfd): Likewise.\n\t* elfnn-riscv.c (riscv_elf_size_dynamic_sections): Likewise.\n\t* elfxx-riscv.c (riscv_parse_subset): Likewise.\n\t* elfxx-tilegx.c (tilegx_elf_size_dynamic_sections): Likewise.\n\t* opncls.c (get_build_id): Likewise.\n\nbinutils/ChangeLog:\n\n\t* dllwrap.c: Use startswith function.\n\t* objcopy.c (is_dwo_section): Likewise.\n\t(handle_remove_section_option): Likewise.\n\t(copy_main): Likewise.\n\t* objdump.c (is_significant_symbol_name): Likewise.",
    "tree": {
      "sha": "5323d7ff39635e28d62c26a7e13e705ccfafe757",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5323d7ff39635e28d62c26a7e13e705ccfafe757"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f3328b816ee3486ac0621cfd6d808faa2c0a689",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f3328b816ee3486ac0621cfd6d808faa2c0a689",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f3328b816ee3486ac0621cfd6d808faa2c0a689",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f3328b816ee3486ac0621cfd6d808faa2c0a689/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "24d127aa9f26445709dbd53e14e2ab636a449888",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24d127aa9f26445709dbd53e14e2ab636a449888",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/24d127aa9f26445709dbd53e14e2ab636a449888"
    }
  ],
  "stats": {
    "total": 190,
    "additions": 117,
    "deletions": 73
  },
  "files": [
    {
      "sha": "aa62c92213acd3c181efce99286f68abff490e31",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1,3 +1,41 @@\n+2021-04-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* elf-bfd.h (bfd_section_is_ctf): Use startswith function.\n+\t* elf.c (_bfd_elf_make_section_from_shdr): Likewise.\n+\t(elf_get_reloc_section): Likewise.\n+\t* elf32-arc.c (elf_arc_size_dynamic_sections): Likewise.\n+\t* elf32-m32r.c (m32r_elf_section_flags): Likewise.\n+\t* elf32-microblaze.c (microblaze_elf_size_dynamic_sections): Likewise.\n+\t* elf32-nds32.c (nds32_elf_size_dynamic_sections): Likewise.\n+\t(nds32_elf_relocate_section): Likewise.\n+\t(nds32_elf_action_discarded): Likewise.\n+\t(nds32_elf_check_relocs): Likewise.\n+\t(nds32_elf_section_flags): Likewise.\n+\t* elf32-or1k.c (or1k_elf_check_relocs): Likewise.\n+\t* elf32-ppc.c (ppc_elf_section_from_shdr): Likewise.\n+\t* elf32-rx.c (rx_table_find): Likewise.\n+\t(rx_table_map): Likewise.\n+\t* elf32-spu.c (spu_elf_backend_symbol_processing): Likewise.\n+\t(spu_elf_find_overlays): Likewise.\n+\t(needs_ovl_stub): Likewise.\n+\t(allocate_spuear_stubs): Likewise.\n+\t(build_spuear_stubs): Likewise.\n+\t(mark_overlay_section): Likewise.\n+\t(spu_elf_auto_overlay): Likewise.\n+\t(spu_elf_output_symbol_hook): Likewise.\n+\t* elf32-tilepro.c (tilepro_elf_size_dynamic_sections): Likewise.\n+\t* elf32-xtensa.c (xtensa_property_section_name): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_section_flags): Likewise.\n+\t(ppc64_elf_relocate_section): Likewise.\n+\t* elflink.c (resolve_section): Likewise.\n+\t(UNARY_OP): Likewise.\n+\t(BINARY_OP_HEAD): Likewise.\n+\t(elf_link_input_bfd): Likewise.\n+\t* elfnn-riscv.c (riscv_elf_size_dynamic_sections): Likewise.\n+\t* elfxx-riscv.c (riscv_parse_subset): Likewise.\n+\t* elfxx-tilegx.c (tilegx_elf_size_dynamic_sections): Likewise.\n+\t* opncls.c (get_build_id): Likewise.\n+\n 2021-03-31  Alan Modra  <amodra@gmail.com>\n \n \tPR 27671"
    },
    {
      "sha": "296b80ad95228e4934afa280ba60da531f9801da",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -3093,7 +3093,7 @@ static inline bool\n bfd_section_is_ctf (const asection *sec)\n {\n   const char *name = bfd_section_name (sec);\n-  return strncmp (name, \".ctf\", 4) == 0 && (name[4] == 0 || name[4] == '.');\n+  return startswith (name, \".ctf\") && (name[4] == 0 || name[4] == '.');\n }\n \n #ifdef __cplusplus"
    },
    {
      "sha": "276fa14c0dda8288ee477ae3a9b538f2c5261db6",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1084,19 +1084,19 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n \t not any sort of flag.  Their SEC_ALLOC bits are cleared.  */\n       if (name [0] == '.')\n \t{\n-\t  if (strncmp (name, \".debug\", 6) == 0\n-\t      || strncmp (name, \".gnu.debuglto_.debug_\", 21) == 0\n-\t      || strncmp (name, \".gnu.linkonce.wi.\", 17) == 0\n-\t      || strncmp (name, \".zdebug\", 7) == 0)\n+\t  if (startswith (name, \".debug\")\n+\t      || startswith (name, \".gnu.debuglto_.debug_\")\n+\t      || startswith (name, \".gnu.linkonce.wi.\")\n+\t      || startswith (name, \".zdebug\"))\n \t    flags |= SEC_DEBUGGING | SEC_ELF_OCTETS;\n-\t  else if (strncmp (name, GNU_BUILD_ATTRS_SECTION_NAME, 21) == 0\n-\t\t   || strncmp (name, \".note.gnu\", 9) == 0)\n+\t  else if (startswith (name, GNU_BUILD_ATTRS_SECTION_NAME)\n+\t\t   || startswith (name, \".note.gnu\"))\n \t    {\n \t      flags |= SEC_ELF_OCTETS;\n \t      opb = 1;\n \t    }\n-\t  else if (strncmp (name, \".line\", 5) == 0\n-\t\t   || strncmp (name, \".stab\", 5) == 0\n+\t  else if (startswith (name, \".line\")\n+\t\t   || startswith (name, \".stab\")\n \t\t   || strcmp (name, \".gdb_index\") == 0)\n \t    flags |= SEC_DEBUGGING;\n \t}\n@@ -1277,8 +1277,7 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n \n   /* GCC uses .gnu.lto_.lto.<some_hash> as a LTO bytecode information\n      section.  */\n-  const char *lto_section_name = \".gnu.lto_.lto.\";\n-  if (strncmp (name, lto_section_name, strlen (lto_section_name)) == 0)\n+  if (startswith (name, \".gnu.lto_.lto.\"))\n     {\n       struct lto_section lsection;\n       if (bfd_get_section_contents (abfd, newsect, &lsection, 0,\n@@ -3677,7 +3676,7 @@ elf_get_reloc_section (asection *reloc_sec)\n \n   /* We look up the section the relocs apply to by name.  */\n   name = reloc_sec->name;\n-  if (strncmp (name, \".rel\", 4) != 0)\n+  if (!startswith (name, \".rel\"))\n     return NULL;\n   name += 4;\n   if (type == SHT_RELA && *name++ != 'a')"
    },
    {
      "sha": "11a1388acd6b59669f7ae46c1ab1a1e01f4146e7",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -2759,7 +2759,7 @@ elf_arc_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t{\n \t  /* Strip this section if we don't need it.  */\n \t}\n-      else if (strncmp (s->name, \".rela\", 5) == 0)\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->srelplt)\n \t    relocs_exist = true;"
    },
    {
      "sha": "6a732585f5f42bcd9926182e1ab7a8edafde9d77",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -3615,8 +3615,8 @@ m32r_elf_section_flags (const Elf_Internal_Shdr *hdr)\n {\n   const char *name = hdr->bfd_section->name;\n \n-  if (strncmp (name, \".sbss\", 5) == 0\n-      || strncmp (name, \".sdata\", 6) == 0)\n+  if (startswith (name, \".sbss\")\n+      || startswith (name, \".sdata\"))\n     hdr->bfd_section->flags |= SEC_SMALL_DATA;\n \n   return true;"
    },
    {
      "sha": "d9c0d93a01a60e2c462a50e1269966760c989360",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -3050,7 +3050,7 @@ microblaze_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (strncmp (name, \".rela\", 5) == 0)\n+      if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size == 0)\n \t    {"
    },
    {
      "sha": "5eb029524df201af777c28a3732b0161168b5f8b",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -4439,7 +4439,7 @@ nds32_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t{\n \t  got_size += s->size;\n \t}\n-      else if (strncmp (bfd_section_name (s), \".rela\", 5) == 0)\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != elf_hash_table (info)->srelplt)\n \t    relocs = true;\n@@ -5426,7 +5426,7 @@ nds32_elf_relocate_section (bfd *\t\t   output_bfd ATTRIBUTE_UNUSED,\n \t\t  if (name == NULL)\n \t\t    return false;\n \n-\t\t  BFD_ASSERT (strncmp (name, \".rela\", 5) == 0\n+\t\t  BFD_ASSERT (startswith (name, \".rela\")\n \t\t\t      && strcmp (bfd_section_name (input_section),\n \t\t\t\t\t name + 5) == 0);\n \n@@ -6870,8 +6870,7 @@ static unsigned int\n nds32_elf_action_discarded (asection *sec)\n {\n \n-  if (strncmp\n-      (\".gcc_except_table\", sec->name, sizeof (\".gcc_except_table\") - 1) == 0)\n+  if (startswith (sec->name, \".gcc_except_table\"))\n     return 0;\n \n   return _bfd_elf_default_action_discarded (sec);\n@@ -7239,7 +7238,7 @@ nds32_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t  if (name == NULL)\n \t\t    return false;\n \n-\t\t  BFD_ASSERT (strncmp (name, \".rela\", 5) == 0\n+\t\t  BFD_ASSERT (startswith (name, \".rela\")\n \t\t\t      && strcmp (bfd_section_name (sec),\n \t\t\t\t\t name + 5) == 0);\n \n@@ -12450,8 +12449,8 @@ nds32_elf_section_flags (const Elf_Internal_Shdr *hdr)\n {\n   const char *name = hdr->bfd_section->name;\n \n-  if (strncmp (name, \".sbss\", 5) == 0\n-      || strncmp (name, \".sdata\", 6) == 0)\n+  if (startswith (name, \".sbss\")\n+      || startswith (name, \".sdata\"))\n     hdr->bfd_section->flags |= SEC_SMALL_DATA;\n \n   return true;"
    },
    {
      "sha": "013deb406f89ed347b28d61ab9df230ed7726f6a",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -2110,7 +2110,7 @@ or1k_elf_check_relocs (bfd *abfd,\n \t\t    if (name == NULL)\n \t\t      return false;\n \n-\t\t    if (strncmp (name, \".rela\", 5) != 0\n+\t\t    if (!startswith (name, \".rela\")\n \t\t\t|| strcmp (bfd_section_name (sec), name + 5) != 0)\n \t\t      {\n \t\t\t_bfd_error_handler"
    },
    {
      "sha": "d6ed501245cd537a4ddb2137c6163cf827bf6a50",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1338,10 +1338,10 @@ ppc_elf_section_from_shdr (bfd *abfd,\n   if (hdr->sh_type == SHT_ORDERED)\n     flags |= SEC_SORT_ENTRIES;\n \n-  if (strncmp (name, \".PPC.EMB\", 8) == 0)\n+  if (startswith (name, \".PPC.EMB\"))\n     name += 8;\n-  if (strncmp (name, \".sbss\", 5) == 0\n-      || strncmp (name, \".sdata\", 6) == 0)\n+  if (startswith (name, \".sbss\")\n+      || startswith (name, \".sdata\"))\n     flags |= SEC_SMALL_DATA;\n \n   return (flags == 0"
    },
    {
      "sha": "771863590d5a39f2923df7a0292eefa82bdd0325",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -557,7 +557,7 @@ rx_elf_relocate_section\n \t  name = h->root.root.string;\n \t}\n \n-      if (strncmp (name, \"$tableentry$default$\", 20) == 0)\n+      if (startswith (name, \"$tableentry$default$\"))\n \t{\n \t  bfd_vma entry_vma;\n \t  int idx;\n@@ -3759,7 +3759,7 @@ rx_table_find (struct bfd_hash_entry *vent, void *vinfo)\n   sec = ent->u.def.section;\n   abfd = sec->owner;\n \n-  if (strncmp (name, \"$tablestart$\", 12))\n+  if (!startswith (name, \"$tablestart$\"))\n     return true;\n \n   sec->flags |= SEC_KEEP;\n@@ -3895,7 +3895,7 @@ rx_table_map (struct bfd_hash_entry *vent, void *vinfo)\n \n   name = ent->root.string;\n \n-  if (strncmp (name, \"$tablestart$\", 12))\n+  if (!startswith (name, \"$tablestart$\"))\n     return true;\n \n   tname = name + 12;"
    },
    {
      "sha": "c3ce2c16d8063ccc6f008e910adc1fe0ac9b983f",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -307,7 +307,7 @@ spu_elf_backend_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED, asymbol *sym)\n {\n   if (sym->name != NULL\n       && sym->section != bfd_abs_section_ptr\n-      && strncmp (sym->name, \"_EAR_\", 5) == 0)\n+      && startswith (sym->name, \"_EAR_\"))\n     sym->flags |= BSF_KEEP;\n }\n \n@@ -725,7 +725,7 @@ spu_elf_find_overlays (struct bfd_link_info *info)\n \t     an overlay, in the sense that it might be loaded in\n \t     by the overlay manager, but rather the initial\n \t     section contents for the overlay buffer.  */\n-\t  if (strncmp (s->name, \".ovl.init\", 9) != 0)\n+\t  if (!startswith (s->name, \".ovl.init\"))\n \t    {\n \t      num_buf = ((s->vma - vma_start) >> htab->line_size_log2) + 1;\n \t      set_id = (num_buf == prev_buf)? set_id + 1 : 0;\n@@ -785,7 +785,7 @@ spu_elf_find_overlays (struct bfd_link_info *info)\n \t      if (spu_elf_section_data (s0)->u.o.ovl_index == 0)\n \t\t{\n \t\t  ++num_buf;\n-\t\t  if (strncmp (s0->name, \".ovl.init\", 9) != 0)\n+\t\t  if (!startswith (s0->name, \".ovl.init\"))\n \t\t    {\n \t\t      alloc_sec[ovl_index] = s0;\n \t\t      spu_elf_section_data (s0)->u.o.ovl_index = ++ovl_index;\n@@ -794,7 +794,7 @@ spu_elf_find_overlays (struct bfd_link_info *info)\n \t\t  else\n \t\t    ovl_end = s->vma + s->size;\n \t\t}\n-\t      if (strncmp (s->name, \".ovl.init\", 9) != 0)\n+\t      if (!startswith (s->name, \".ovl.init\"))\n \t\t{\n \t\t  alloc_sec[ovl_index] = s;\n \t\t  spu_elf_section_data (s)->u.o.ovl_index = ++ovl_index;\n@@ -970,7 +970,7 @@ needs_ovl_stub (struct elf_link_hash_entry *h,\n       /* setjmp always goes via an overlay stub, because then the return\n \t and hence the longjmp goes via __ovly_return.  That magically\n \t makes setjmp/longjmp between overlays work.  */\n-      if (strncmp (h->root.root.string, \"setjmp\", 6) == 0\n+      if (startswith (h->root.root.string, \"setjmp\")\n \t  && (h->root.root.string[6] == '\\0' || h->root.root.string[6] == '@'))\n \tret = call_ovl_stub;\n     }\n@@ -1496,7 +1496,7 @@ allocate_spuear_stubs (struct elf_link_hash_entry *h, void *inf)\n   if ((h->root.type == bfd_link_hash_defined\n        || h->root.type == bfd_link_hash_defweak)\n       && h->def_regular\n-      && strncmp (h->root.root.string, \"_SPUEAR_\", 8) == 0\n+      && startswith (h->root.root.string, \"_SPUEAR_\")\n       && (sym_sec = h->root.u.def.section) != NULL\n       && sym_sec->output_section != bfd_abs_section_ptr\n       && spu_elf_section_data (sym_sec->output_section) != NULL\n@@ -1521,7 +1521,7 @@ build_spuear_stubs (struct elf_link_hash_entry *h, void *inf)\n   if ((h->root.type == bfd_link_hash_defined\n        || h->root.type == bfd_link_hash_defweak)\n       && h->def_regular\n-      && strncmp (h->root.root.string, \"_SPUEAR_\", 8) == 0\n+      && startswith (h->root.root.string, \"_SPUEAR_\")\n       && (sym_sec = h->root.u.def.section) != NULL\n       && sym_sec->output_section != bfd_abs_section_ptr\n       && spu_elf_section_data (sym_sec->output_section) != NULL\n@@ -3455,7 +3455,7 @@ mark_overlay_section (struct function_info *fun,\n   if (!fun->sec->linker_mark\n       && (htab->params->ovly_flavour != ovly_soft_icache\n \t  || htab->params->non_ia_text\n-\t  || strncmp (fun->sec->name, \".text.ia.\", 9) == 0\n+\t  || startswith (fun->sec->name, \".text.ia.\")\n \t  || strcmp (fun->sec->name, \".init\") == 0\n \t  || strcmp (fun->sec->name, \".fini\") == 0))\n     {\n@@ -3483,7 +3483,7 @@ mark_overlay_section (struct function_info *fun,\n \t\treturn false;\n \t      memcpy (name, \".rodata\", sizeof (\".rodata\"));\n \t    }\n-\t  else if (strncmp (fun->sec->name, \".text.\", 6) == 0)\n+\t  else if (startswith (fun->sec->name, \".text.\"))\n \t    {\n \t      size_t len = strlen (fun->sec->name);\n \t      name = bfd_malloc (len + 3);\n@@ -3492,7 +3492,7 @@ mark_overlay_section (struct function_info *fun,\n \t      memcpy (name, \".rodata\", sizeof (\".rodata\"));\n \t      memcpy (name + 7, fun->sec->name + 5, len - 4);\n \t    }\n-\t  else if (strncmp (fun->sec->name, \".gnu.linkonce.t.\", 16) == 0)\n+\t  else if (startswith (fun->sec->name, \".gnu.linkonce.t.\"))\n \t    {\n \t      size_t len = strlen (fun->sec->name) + 1;\n \t      name = bfd_malloc (len);\n@@ -3583,7 +3583,7 @@ mark_overlay_section (struct function_info *fun,\n      a stack!  Also, don't mark .ovl.init as an overlay.  */\n   if (fun->lo + fun->sec->output_offset + fun->sec->output_section->vma\n       == info->output_bfd->start_address\n-      || strncmp (fun->sec->output_section->name, \".ovl.init\", 9) == 0)\n+      || startswith (fun->sec->output_section->name, \".ovl.init\"))\n     {\n       fun->sec->linker_mark = 0;\n       if (fun->rodata != NULL)\n@@ -4317,7 +4317,7 @@ spu_elf_auto_overlay (struct bfd_link_info *info)\n \t  }\n \telse if ((sec->flags & (SEC_ALLOC | SEC_LOAD)) == (SEC_ALLOC | SEC_LOAD)\n \t\t && sec->output_section->owner == info->output_bfd\n-\t\t && strncmp (sec->output_section->name, \".ovl.init\", 9) == 0)\n+\t\t && startswith (sec->output_section->name, \".ovl.init\"))\n \t  fixed_size -= sec->size;\n       if (count != old_count)\n \tbfd_arr[bfd_count++] = ibfd;\n@@ -5156,7 +5156,7 @@ spu_elf_output_symbol_hook (struct bfd_link_info *info,\n       && (h->root.type == bfd_link_hash_defined\n \t  || h->root.type == bfd_link_hash_defweak)\n       && h->def_regular\n-      && strncmp (h->root.root.string, \"_SPUEAR_\", 8) == 0)\n+      && startswith (h->root.root.string, \"_SPUEAR_\"))\n     {\n       struct got_entry *g;\n "
    },
    {
      "sha": "b0ed70647938abe6beeedda00adb8fa91fe7cf33",
      "filename": "bfd/elf32-tilepro.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-tilepro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-tilepro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tilepro.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -2332,7 +2332,7 @@ tilepro_elf_size_dynamic_sections (bfd *output_bfd,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (strncmp (s->name, \".rela\", 5) == 0)\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "c1781c7a7d77755283d888d7649d05e52a727819",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -11260,7 +11260,7 @@ xtensa_property_section_name (asection *sec, const char *base_name,\n \tsuffix = 0;\n       prop_sec_name = xtensa_add_names (base_name, suffix);\n     }\n-  else if (strncmp (sec->name, \".gnu.linkonce.\", linkonce_len) == 0)\n+  else if (startswith (sec->name, \".gnu.linkonce.\"))\n     {\n       char *linkonce_kind = 0;\n "
    },
    {
      "sha": "c306954dacb7240a97bd20cb0bb6aacd07e1e8d8",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -2042,8 +2042,8 @@ ppc64_elf_section_flags (const Elf_Internal_Shdr *hdr)\n {\n   const char *name = hdr->bfd_section->name;\n \n-  if (strncmp (name, \".sbss\", 5) == 0\n-      || strncmp (name, \".sdata\", 6) == 0)\n+  if (startswith (name, \".sbss\")\n+      || startswith (name, \".sdata\"))\n     hdr->bfd_section->flags |= SEC_SMALL_DATA;\n \n   return true;\n@@ -15873,7 +15873,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  if (*name == '.')\n \t\t    ++name;\n \n-\t\t  if (strncmp (name, \"__libc_start_main\", 17) == 0\n+\t\t  if (startswith (name, \"__libc_start_main\")\n \t\t      && (name[17] == 0 || name[17] == '@'))\n \t\t    {\n \t\t      /* Allow crt1 branch to go via a toc adjusting"
    },
    {
      "sha": "f8d6313168003ba58a08b46bc645e5bfd50f22a4",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -8719,7 +8719,7 @@ resolve_section (const char *name,\n \n       if (strncmp (curr->name, name, len) == 0)\n \t{\n-\t  if (strncmp (\".end\", name + len, 4) == 0)\n+\t  if (startswith (name + len, \".end\"))\n \t    {\n \t      *result = (curr->vma\n \t\t\t + curr->size / bfd_octets_per_byte (abfd, curr));\n@@ -8832,7 +8832,7 @@ eval_symbol (bfd_vma *result,\n       /* All that remains are operators.  */\n \n #define UNARY_OP(op)\t\t\t\t\t\t\\\n-  if (strncmp (sym, #op, strlen (#op)) == 0)\t\t\t\\\n+  if (startswith (sym, #op))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       sym += strlen (#op);\t\t\t\t\t\\\n       if (*sym == ':')\t\t\t\t\t\t\\\n@@ -8849,7 +8849,7 @@ eval_symbol (bfd_vma *result,\n     }\n \n #define BINARY_OP_HEAD(op)\t\t\t\t\t\\\n-  if (strncmp (sym, #op, strlen (#op)) == 0)\t\t\t\\\n+  if (startswith (sym, #op))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       sym += strlen (#op);\t\t\t\t\t\\\n       if (*sym == ':')\t\t\t\t\t\t\\\n@@ -11196,10 +11196,10 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \t  /* We need to reverse-copy input .ctors/.dtors sections if\n \t     they are placed in .init_array/.finit_array for output.  */\n \t  if (o->size > address_size\n-\t      && ((strncmp (o->name, \".ctors\", 6) == 0\n+\t      && ((startswith (o->name, \".ctors\")\n \t\t   && strcmp (o->output_section->name,\n \t\t\t      \".init_array\") == 0)\n-\t\t  || (strncmp (o->name, \".dtors\", 6) == 0\n+\t\t  || (startswith (o->name, \".dtors\")\n \t\t      && strcmp (o->output_section->name,\n \t\t\t\t \".fini_array\") == 0))\n \t      && (o->name[6] == 0 || o->name[6] == '.'))"
    },
    {
      "sha": "b5be929ad1d387d40d43cba8699b18428625e8e5",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1515,7 +1515,7 @@ riscv_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (strncmp (s->name, \".rela\", 5) == 0)\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "f6a2509d521513a1d096ace5789d4795d34209b7",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1802,12 +1802,12 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n     }\n \n   p = arch;\n-  if (strncmp (p, \"rv32\", 4) == 0)\n+  if (startswith (p, \"rv32\"))\n     {\n       *rps->xlen = 32;\n       p += 4;\n     }\n-  else if (strncmp (p, \"rv64\", 4) == 0)\n+  else if (startswith (p, \"rv64\"))\n     {\n       *rps->xlen = 64;\n       p += 4;"
    },
    {
      "sha": "a517831a07c8009e9cbf465622533fa2deed9333",
      "filename": "bfd/elfxx-tilegx.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfxx-tilegx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/elfxx-tilegx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-tilegx.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -2578,7 +2578,7 @@ tilegx_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (strncmp (s->name, \".rela\", 5) == 0)\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "74df4c2f5183cc82570165b2bdc731decd8b1b33",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1904,7 +1904,7 @@ get_build_id (bfd *abfd)\n   if (inote.descsz <= 0\n       || inote.type != NT_GNU_BUILD_ID\n       || inote.namesz != 4 /* sizeof \"GNU\"  */\n-      || strncmp (inote.namedata, \"GNU\", 4) != 0\n+      || !startswith (inote.namedata, \"GNU\")\n       || inote.descsz > 0x7ffffffe\n       || size < (12 + BFD_ALIGN (inote.namesz, 4) + inote.descsz))\n     {"
    },
    {
      "sha": "1ffbdf8fc72e71fcaa2a572fd9c0330e06c469c2",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* dllwrap.c: Use startswith function.\n+\t* objcopy.c (is_dwo_section): Likewise.\n+\t(handle_remove_section_option): Likewise.\n+\t(copy_main): Likewise.\n+\t* objdump.c (is_significant_symbol_name): Likewise.\n+\n 2021-04-01  Martin Liska  <mliska@suse.cz>\n \n \t* dwarf.c (display_debug_lines_raw): Replace const_strneq with"
    },
    {
      "sha": "bc7104de004b9858faf7d7d440f4ee13def1dd89",
      "filename": "binutils/dllwrap.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/dllwrap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/dllwrap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dllwrap.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -840,11 +840,11 @@ Creating one, but that may not be what you want\"));\n   else\n     which_target = UNKNOWN_TARGET;\n \n-  if (! strncmp (target, \"arm\", 3))\n+  if (startswith (target, \"arm\"))\n     which_cpu = ARM_CPU;\n-  else if (!strncmp (target, \"x86_64\", 6)\n-\t   || !strncmp (target, \"athlon64\", 8)\n-\t   || !strncmp (target, \"amd64\", 5))\n+  else if (startswith (target, \"x86_64\")\n+\t   || startswith (target, \"athlon64\")\n+\t   || startswith (target, \"amd64\"))\n     which_cpu = X64_CPU;\n   else if (target[0] == 'i' && (target[1] >= '3' && target[1] <= '6')\n \t   && target[2] == '8' && target[3] == '6')"
    },
    {
      "sha": "6622adc5e7c3aca75bb492a06bda19d76c6d6c01",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -1285,7 +1285,7 @@ is_dwo_section (bfd *abfd ATTRIBUTE_UNUSED, asection *sec)\n   if (len < 5)\n     return false;\n \n-  return strncmp (name + len - 4, \".dwo\", 4) == 0;\n+  return startswith (name + len - 4, \".dwo\");\n }\n \n /* Return TRUE if section SEC is in the update list.  */\n@@ -4261,7 +4261,7 @@ static void\n handle_remove_section_option (const char *section_pattern)\n {\n   find_section_list (section_pattern, true, SECTION_CONTEXT_REMOVE);\n-  if (strncmp (section_pattern, \".rel\", 4) == 0)\n+  if (startswith (section_pattern, \".rel\"))\n     {\n       section_pattern += 4;\n       if (*section_pattern == 'a')\n@@ -5875,15 +5875,15 @@ copy_main (int argc, char *argv[])\n \n   /* Convert input EFI target to PEI target.  */\n   if (input_target != NULL\n-      && strncmp (input_target, \"efi-\", 4) == 0)\n+      && startswith (input_target, \"efi-\"))\n     {\n       char *efi;\n \n       efi = xstrdup (output_target + 4);\n-      if (strncmp (efi, \"bsdrv-\", 6) == 0\n-\t  || strncmp (efi, \"rtdrv-\", 6) == 0)\n+      if (startswith (efi, \"bsdrv-\")\n+\t  || startswith (efi, \"rtdrv-\"))\n \tefi += 2;\n-      else if (strncmp (efi, \"app-\", 4) != 0)\n+      else if (!startswith (efi, \"app-\"))\n \tfatal (_(\"unknown input EFI target: %s\"), input_target);\n \n       input_target = efi;\n@@ -5892,23 +5892,23 @@ copy_main (int argc, char *argv[])\n \n   /* Convert output EFI target to PEI target.  */\n   if (output_target != NULL\n-      && strncmp (output_target, \"efi-\", 4) == 0)\n+      && startswith (output_target, \"efi-\"))\n     {\n       char *efi;\n \n       efi = xstrdup (output_target + 4);\n-      if (strncmp (efi, \"app-\", 4) == 0)\n+      if (startswith (efi, \"app-\"))\n \t{\n \t  if (pe_subsystem == -1)\n \t    pe_subsystem = IMAGE_SUBSYSTEM_EFI_APPLICATION;\n \t}\n-      else if (strncmp (efi, \"bsdrv-\", 6) == 0)\n+      else if (startswith (efi, \"bsdrv-\"))\n \t{\n \t  if (pe_subsystem == -1)\n \t    pe_subsystem = IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER;\n \t  efi += 2;\n \t}\n-      else if (strncmp (efi, \"rtdrv-\", 6) == 0)\n+      else if (startswith (efi, \"rtdrv-\"))\n \t{\n \t  if (pe_subsystem == -1)\n \t    pe_subsystem = IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER;"
    },
    {
      "sha": "cbbec81c026a16d041aeed12d5b9a813cc4ff77a",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f3328b816ee3486ac0621cfd6d808faa2c0a689/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=3f3328b816ee3486ac0621cfd6d808faa2c0a689",
      "patch": "@@ -821,7 +821,7 @@ slurp_dynamic_symtab (bfd *abfd)\n static bool\n is_significant_symbol_name (const char * name)\n {\n-  return strncmp (name, \".plt\", 4) == 0 || strcmp (name, \".got\") == 0;\n+  return startswith (name, \".plt\") || startswith (name, \".got\");\n }\n \n /* Filter out (in place) symbols that are useless for disassembly."
    }
  ]
}