{
  "sha": "5844b4657aa2b9eb52aecc5a6338324032fb6eae",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTg0NGI0NjU3YWEyYjllYjUyYWVjYzVhNjMzODMyNDAzMmZiNmVhZQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-20T11:33:07Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-20T11:33:07Z"
    },
    "message": "Fix compile time warnings about the possibility of using uninitialised fields in the Elf_Internal_Chdr structure when building readelf.\n\n\t* readelf.c (get_compression_header): Add ATTRIBUTE_WARN_UNUSED_RESULT.\n\t(process_section_headers): Check the return value from\n\tget_compression_header.\n\t(dump_section_as_strings): Likewise.\n\t(dump_section_as_bytes): Likewise.\n\t(load_specific_debug_section): Likewise.",
    "tree": {
      "sha": "0c7808d2a31d5adb511061c1f9ba9844e0020473",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c7808d2a31d5adb511061c1f9ba9844e0020473"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5844b4657aa2b9eb52aecc5a6338324032fb6eae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5844b4657aa2b9eb52aecc5a6338324032fb6eae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5844b4657aa2b9eb52aecc5a6338324032fb6eae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5844b4657aa2b9eb52aecc5a6338324032fb6eae/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d98c46092341c1373d960d0a66ca502d5b7ee7f"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 34,
    "deletions": 9
  },
  "files": [
    {
      "sha": "de41d8d66660e9f0f2d955b7c3ede5e421242148",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5844b4657aa2b9eb52aecc5a6338324032fb6eae/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5844b4657aa2b9eb52aecc5a6338324032fb6eae/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5844b4657aa2b9eb52aecc5a6338324032fb6eae",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-20  Nick Clifton  <nickc@redhat.com>\n+\n+\t* readelf.c (get_compression_header): Add ATTRIBUTE_WARN_UNUSED_RESULT.\n+\t(process_section_headers): Check the return value from\n+\tget_compression_header.\n+\t(dump_section_as_strings): Likewise.\n+\t(dump_section_as_bytes): Likewise.\n+\t(load_specific_debug_section): Likewise.\n+\n 2020-03-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* ar.c (main): Update bfd_plugin_set_program_name call."
    },
    {
      "sha": "61f06176835db28e7c089ae90a40bb40401dc0fb",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 25,
      "deletions": 9,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5844b4657aa2b9eb52aecc5a6338324032fb6eae/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5844b4657aa2b9eb52aecc5a6338324032fb6eae/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=5844b4657aa2b9eb52aecc5a6338324032fb6eae",
      "patch": "@@ -6076,7 +6076,7 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n   return buff;\n }\n \n-static unsigned int\n+static unsigned int ATTRIBUTE_WARN_UNUSED_RESULT\n get_compression_header (Elf_Internal_Chdr *chdr, unsigned char *buf, bfd_size_type size)\n {\n   if (is_32bit_elf)\n@@ -6728,15 +6728,18 @@ process_section_headers (Filedata * filedata)\n \t\t{\n \t\t  Elf_Internal_Chdr chdr;\n \n-\t\t  (void) get_compression_header (&chdr, buf, sizeof (buf));\n-\n-\t\t  if (chdr.ch_type == ELFCOMPRESS_ZLIB)\n-\t\t    printf (\"       ZLIB, \");\n+\t\t  if (get_compression_header (&chdr, buf, sizeof (buf)) == 0)\n+\t\t    printf (_(\"       [<corrupt>]\\n\"));\n \t\t  else\n-\t\t    printf (_(\"       [<unknown>: 0x%x], \"),\n-\t\t\t    chdr.ch_type);\n-\t\t  print_vma (chdr.ch_size, LONG_HEX);\n-\t\t  printf (\", %lu\\n\", (unsigned long) chdr.ch_addralign);\n+\t\t    {\n+\t\t      if (chdr.ch_type == ELFCOMPRESS_ZLIB)\n+\t\t\tprintf (\"       ZLIB, \");\n+\t\t      else\n+\t\t\tprintf (_(\"       [<unknown>: 0x%x], \"),\n+\t\t\t\tchdr.ch_type);\n+\t\t      print_vma (chdr.ch_size, LONG_HEX);\n+\t\t      printf (\", %lu\\n\", (unsigned long) chdr.ch_addralign);\n+\t\t    }\n \t\t}\n \t    }\n \t}\n@@ -13692,6 +13695,10 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n \t  unsigned int compression_header_size\n \t    = get_compression_header (& chdr, (unsigned char *) start,\n \t\t\t\t      num_bytes);\n+\t  if (compression_header_size == 0)\n+\t    /* An error message will have already been generated\n+\t       by get_compression_header.  */\n+\t    goto error_out;\n \n \t  if (chdr.ch_type != ELFCOMPRESS_ZLIB)\n \t    {\n@@ -13904,6 +13911,11 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n \t  unsigned int compression_header_size\n \t    = get_compression_header (& chdr, start, section_size);\n \n+\t  if (compression_header_size == 0)\n+\t    /* An error message will have already been generated\n+\t       by get_compression_header.  */\n+\t    goto error_out;\n+\n \t  if (chdr.ch_type != ELFCOMPRESS_ZLIB)\n \t    {\n \t      warn (_(\"section '%s' has unsupported compress type: %d\\n\"),\n@@ -14237,6 +14249,10 @@ load_specific_debug_section (enum dwarf_section_display_enum  debug,\n \t    }\n \n \t  compression_header_size = get_compression_header (&chdr, start, size);\n+\t  if (compression_header_size == 0)\n+\t    /* An error message will have already been generated\n+\t       by get_compression_header.  */\n+\t    return FALSE;\n \n \t  if (chdr.ch_type != ELFCOMPRESS_ZLIB)\n \t    {"
    }
  ]
}