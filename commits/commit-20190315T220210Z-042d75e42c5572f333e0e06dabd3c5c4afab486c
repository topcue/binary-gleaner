{
  "sha": "042d75e42c5572f333e0e06dabd3c5c4afab486c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQyZDc1ZTQyYzU1NzJmMzMzZTBlMDZkYWJkM2M1YzRhZmFiNDg2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-02T19:29:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-15T22:02:10Z"
    },
    "message": "Allocate minimal symbols with malloc\n\nCurrently, minimal symbols are allocated on the per-BFD obstack.\nHowever, it is also possible for multiple symbol readers to create\nminimal symbols for a given objfile.  In this case, the minimal\nsymbols will be reallocated on the obstack, leading to some waste of\nstorage.\n\nThis is a memory leak, but I think it won't be caught by tools like\nvalgrind, because valgrind doesn't know about obstacks.\n\nThis patch fixes the problem by using malloc to allocate the storage\nfor minimal symbols.\n\ngdb/ChangeLog\n2019-03-15  Tom Tromey  <tom@tromey.com>\n\n\t* objfiles.h (struct objfile_per_bfd_storage) <msymbols>: Now a\n\tunique_xmalloc_ptr.\n\t(objfile::msymbols_range::begin, objfile::msymbols_range::end):\n\tUpdate.\n\t* minsyms.c (lookup_minimal_symbol_by_pc_section)\n\t(build_minimal_symbol_hash_tables)\n\t(minimal_symbol_reader::install): Update.",
    "tree": {
      "sha": "32f8606eabd734669d29684d828893393fe29b51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/32f8606eabd734669d29684d828893393fe29b51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/042d75e42c5572f333e0e06dabd3c5c4afab486c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/042d75e42c5572f333e0e06dabd3c5c4afab486c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/042d75e42c5572f333e0e06dabd3c5c4afab486c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/042d75e42c5572f333e0e06dabd3c5c4afab486c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "db92718b541158d4782dbc9f48401c20f2bbad6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db92718b541158d4782dbc9f48401c20f2bbad6d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/db92718b541158d4782dbc9f48401c20f2bbad6d"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 26,
    "deletions": 19
  },
  "files": [
    {
      "sha": "581a4c6a5a92c5875753dbd9ccd6c632983bd910",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=042d75e42c5572f333e0e06dabd3c5c4afab486c",
      "patch": "@@ -1,3 +1,13 @@\n+2019-03-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* objfiles.h (struct objfile_per_bfd_storage) <msymbols>: Now a\n+\tunique_xmalloc_ptr.\n+\t(objfile::msymbols_range::begin, objfile::msymbols_range::end):\n+\tUpdate.\n+\t* minsyms.c (lookup_minimal_symbol_by_pc_section)\n+\t(build_minimal_symbol_hash_tables)\n+\t(minimal_symbol_reader::install): Update.\n+\n 2019-03-15  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (create_demangled_names_hash): Update."
    },
    {
      "sha": "88ff2593493e56a63ff820a22791564a9138ee2f",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=042d75e42c5572f333e0e06dabd3c5c4afab486c",
      "patch": "@@ -742,7 +742,7 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n \t{\n \t  int best_zero_sized = -1;\n \n-          msymbol = objfile->per_bfd->msymbols;\n+          msymbol = objfile->per_bfd->msymbols.get ();\n \t  lo = 0;\n \t  hi = objfile->per_bfd->minimal_symbol_count - 1;\n \n@@ -1298,7 +1298,7 @@ build_minimal_symbol_hash_tables (struct objfile *objfile)\n \n   /* Now, (re)insert the actual entries.  */\n   for ((i = objfile->per_bfd->minimal_symbol_count,\n-\tmsym = objfile->per_bfd->msymbols);\n+\tmsym = objfile->per_bfd->msymbols.get ());\n        i > 0;\n        i--, msym++)\n     {\n@@ -1363,14 +1363,16 @@ minimal_symbol_reader::install ()\n       alloc_count = m_msym_count + m_objfile->per_bfd->minimal_symbol_count;\n       obstack_blank (&m_objfile->per_bfd->storage_obstack,\n \t\t     alloc_count * sizeof (struct minimal_symbol));\n-      msymbols = (struct minimal_symbol *)\n-\tobstack_base (&m_objfile->per_bfd->storage_obstack);\n+      gdb::unique_xmalloc_ptr<minimal_symbol>\n+\tmsym_holder (XNEWVEC (minimal_symbol, alloc_count));\n+      msymbols = msym_holder.get ();\n \n       /* Copy in the existing minimal symbols, if there are any.  */\n \n       if (m_objfile->per_bfd->minimal_symbol_count)\n-\tmemcpy ((char *) msymbols, (char *) m_objfile->per_bfd->msymbols,\n-\t    m_objfile->per_bfd->minimal_symbol_count * sizeof (struct minimal_symbol));\n+\tmemcpy (msymbols, m_objfile->per_bfd->msymbols.get (),\n+\t\tm_objfile->per_bfd->minimal_symbol_count\n+\t\t* sizeof (struct minimal_symbol));\n \n       /* Walk through the list of minimal symbol bunches, adding each symbol\n          to the new contiguous array of symbols.  Note that we start with the\n@@ -1396,19 +1398,16 @@ minimal_symbol_reader::install ()\n          no longer using.  */\n \n       mcount = compact_minimal_symbols (msymbols, mcount, m_objfile);\n-\n-      ssize_t shrink_bytes\n-\t= (mcount + 1 - alloc_count) * sizeof (struct minimal_symbol);\n-      obstack_blank_fast (&m_objfile->per_bfd->storage_obstack, shrink_bytes);\n-      msymbols = (struct minimal_symbol *)\n-\tobstack_finish (&m_objfile->per_bfd->storage_obstack);\n+      msym_holder.reset (XRESIZEVEC (struct minimal_symbol,\n+\t\t\t\t     msym_holder.release (),\n+\t\t\t\t     mcount));\n \n       /* Attach the minimal symbol table to the specified objfile.\n          The strings themselves are also located in the storage_obstack\n          of this objfile.  */\n \n       m_objfile->per_bfd->minimal_symbol_count = mcount;\n-      m_objfile->per_bfd->msymbols = msymbols;\n+      m_objfile->per_bfd->msymbols = std::move (msym_holder);\n \n       /* Now build the hash tables; we can't do this incrementally\n          at an earlier point since we weren't finished with the obstack"
    },
    {
      "sha": "b07ddfdfa503b7b53bd812f8732815b5f928de26",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/042d75e42c5572f333e0e06dabd3c5c4afab486c/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=042d75e42c5572f333e0e06dabd3c5c4afab486c",
      "patch": "@@ -282,11 +282,9 @@ struct objfile_per_bfd_storage\n      name and a zero value for the address.  This makes it easy to walk\n      through the array when passed a pointer to somewhere in the middle\n      of it.  There is also a count of the number of symbols, which does\n-     not include the terminating null symbol.  The array itself, as well\n-     as all the data that it points to, should be allocated on the\n-     objfile_obstack for this file.  */\n+     not include the terminating null symbol.  */\n \n-  minimal_symbol *msymbols = NULL;\n+  gdb::unique_xmalloc_ptr<minimal_symbol> msymbols;\n   int minimal_symbol_count = 0;\n \n   /* The number of minimal symbols read, before any minimal symbol\n@@ -375,13 +373,13 @@ struct objfile\n \n     minimal_symbol_iterator begin () const\n     {\n-      return minimal_symbol_iterator (m_objfile->per_bfd->msymbols);\n+      return minimal_symbol_iterator (m_objfile->per_bfd->msymbols.get ());\n     }\n \n     minimal_symbol_iterator end () const\n     {\n       return minimal_symbol_iterator\n-\t(m_objfile->per_bfd->msymbols\n+\t(m_objfile->per_bfd->msymbols.get ()\n \t + m_objfile->per_bfd->minimal_symbol_count);\n     }\n "
    }
  ]
}