{
  "sha": "8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGE2ZmIzZjliYjUxMDVlNThmNjgwMGRlOTA4OWE0YmRiMGNjMGNkNg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-08T06:37:47Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-08T06:37:47Z"
    },
    "message": "x86: restrict use of register aliases\n\nRegister aliases (created e.g. via .set) check their target register at\nthe time of creation of the alias. While this makes sense, it's not\nenough: The underlying register must also be \"visible\" at the time of\nuse. Wrong use of such aliases would lead to internal errors in e.g.\nadd_prefix() or build_modrm_byte().\n\nSplit the checking part of parse_real_register() into a new helper\nfunction and use it also from the latter part of parse_register() (at\nthe same time replacing a minor open coded part of it).\n\nSince parse_register() returning NULL already has a meaning, a fake new\n\"bad register\" indicator gets added, which all callers need to check\nfor.",
    "tree": {
      "sha": "b4be5b526c1cb1048b525fa880b8315b643f34a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b4be5b526c1cb1048b525fa880b8315b643f34a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "334a017304f03fdc77a2d8893396ed9bfa40382f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/334a017304f03fdc77a2d8893396ed9bfa40382f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/334a017304f03fdc77a2d8893396ed9bfa40382f"
    }
  ],
  "stats": {
    "total": 220,
    "additions": 154,
    "deletions": 66
  },
  "files": [
    {
      "sha": "d244ab4c574c740e0fb87c90211db4670b9d0bce",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -1,3 +1,16 @@\n+2020-06-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (bad_reg): New.\n+\t(check_VecOperations, i386_att_operand, i386_parse_name): Check\n+\tfor it.\n+\t(check_register): New, broken out from ...\n+\t(parse_real_register): ... here. Call it.\n+\t(parse_register): Call it, and error upon failure.\n+\t* testsuite/gas/i386/equ-bad.s, testsuite/gas/i386/equ-bad.l,\n+\ttestsuite/gas/i386/x86-64-equ-bad.s,\n+\ttestsuite/gas/i386/x86-64-equ-bad.l: New.\n+\t* testsuite/gas/i386/i386.exp: Run new tests.\n+\n 2020-06-06  Alan Modra  <amodra@gmail.com>\n \n \t* config/tc-ppc.c (md_show_usage): Mention -mpower10 and -mpwr10."
    },
    {
      "sha": "e34ff8568d464ec4d6dbc775e827e54c5cf09529",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 95,
      "deletions": 65,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -210,6 +210,10 @@ static unsigned int x86_used_note = DEFAULT_X86_USED_NOTE;\n \n static const char *default_arch = DEFAULT_ARCH;\n \n+/* parse_register() returns this when a register alias cannot be used.  */\n+static const reg_entry bad_reg = { \"<bad>\", OPERAND_TYPE_NONE, 0, 0,\n+\t\t\t\t   { Dw2Inval, Dw2Inval } };\n+\n /* This struct describes rounding control and SAE in the instruction.  */\n struct RC_Operation\n {\n@@ -10176,6 +10180,9 @@ check_VecOperations (char *op_string, char *op_end)\n \t  /* Check masking operation.  */\n \t  else if ((mask = parse_register (op_string, &end_op)) != NULL)\n \t    {\n+\t      if (mask == &bad_reg)\n+\t\treturn NULL;\n+\n \t      /* k0 can't be used for write mask.  */\n \t      if (mask->reg_type.bitfield.class != RegMask || !mask->reg_num)\n \t\t{\n@@ -11035,6 +11042,9 @@ i386_att_operand (char *operand_string)\n     {\n       i386_operand_type temp;\n \n+      if (r == &bad_reg)\n+\treturn 0;\n+\n       /* Check for a segment override by searching for ':' after a\n \t segment register.  */\n       op_string = end_op;\n@@ -11211,6 +11221,8 @@ i386_att_operand (char *operand_string)\n \n \t      if (i.base_reg)\n \t\t{\n+\t\t  if (i.base_reg == &bad_reg)\n+\t\t    return 0;\n \t\t  base_string = end_op;\n \t\t  if (is_space_char (*base_string))\n \t\t    ++base_string;\n@@ -11226,6 +11238,8 @@ i386_att_operand (char *operand_string)\n \t\t  if ((i.index_reg = parse_register (base_string, &end_op))\n \t\t      != NULL)\n \t\t    {\n+\t\t      if (i.index_reg == &bad_reg)\n+\t\t\treturn 0;\n \t\t      base_string = end_op;\n \t\t      if (is_space_char (*base_string))\n \t\t\t++base_string;\n@@ -12331,6 +12345,73 @@ output_invalid (int c)\n   return output_invalid_buf;\n }\n \n+/* Verify that @r can be used in the current context.  */\n+\n+static bfd_boolean check_register (const reg_entry *r)\n+{\n+  if (allow_pseudo_reg)\n+    return TRUE;\n+\n+  if (operand_type_all_zero (&r->reg_type))\n+    return FALSE;\n+\n+  if ((r->reg_type.bitfield.dword\n+       || (r->reg_type.bitfield.class == SReg && r->reg_num > 3)\n+       || r->reg_type.bitfield.class == RegCR\n+       || r->reg_type.bitfield.class == RegDR\n+       || r->reg_type.bitfield.class == RegTR)\n+      && !cpu_arch_flags.bitfield.cpui386)\n+    return FALSE;\n+\n+  if (r->reg_type.bitfield.class == RegMMX && !cpu_arch_flags.bitfield.cpummx)\n+    return FALSE;\n+\n+  if (!cpu_arch_flags.bitfield.cpuavx512f)\n+    {\n+      if (r->reg_type.bitfield.zmmword\n+\t  || r->reg_type.bitfield.class == RegMask)\n+\treturn FALSE;\n+\n+      if (!cpu_arch_flags.bitfield.cpuavx)\n+\t{\n+\t  if (r->reg_type.bitfield.ymmword)\n+\t    return FALSE;\n+\n+\t  if (!cpu_arch_flags.bitfield.cpusse && r->reg_type.bitfield.xmmword)\n+\t    return FALSE;\n+\t}\n+    }\n+\n+  if (r->reg_type.bitfield.class == RegBND && !cpu_arch_flags.bitfield.cpumpx)\n+    return FALSE;\n+\n+  /* Don't allow fake index register unless allow_index_reg isn't 0. */\n+  if (!allow_index_reg && r->reg_num == RegIZ)\n+    return FALSE;\n+\n+  /* Upper 16 vector registers are only available with VREX in 64bit\n+     mode, and require EVEX encoding.  */\n+  if (r->reg_flags & RegVRex)\n+    {\n+      if (!cpu_arch_flags.bitfield.cpuavx512f\n+\t  || flag_code != CODE_64BIT)\n+\treturn FALSE;\n+\n+      i.vec_encoding = vex_encoding_evex;\n+    }\n+\n+  if (((r->reg_flags & (RegRex64 | RegRex)) || r->reg_type.bitfield.qword)\n+      && (!cpu_arch_flags.bitfield.cpulm || r->reg_type.bitfield.class != RegCR)\n+      && flag_code != CODE_64BIT)\n+    return FALSE;\n+\n+  if (r->reg_type.bitfield.class == SReg && r->reg_num == RegFlat\n+      && !intel_syntax)\n+    return FALSE;\n+\n+  return TRUE;\n+}\n+\n /* REG_STRING starts *before* REGISTER_PREFIX.  */\n \n static const reg_entry *\n@@ -12400,67 +12481,7 @@ parse_real_register (char *reg_string, char **end_op)\n \t}\n     }\n \n-  if (r == NULL || allow_pseudo_reg)\n-    return r;\n-\n-  if (operand_type_all_zero (&r->reg_type))\n-    return (const reg_entry *) NULL;\n-\n-  if ((r->reg_type.bitfield.dword\n-       || (r->reg_type.bitfield.class == SReg && r->reg_num > 3)\n-       || r->reg_type.bitfield.class == RegCR\n-       || r->reg_type.bitfield.class == RegDR\n-       || r->reg_type.bitfield.class == RegTR)\n-      && !cpu_arch_flags.bitfield.cpui386)\n-    return (const reg_entry *) NULL;\n-\n-  if (r->reg_type.bitfield.class == RegMMX && !cpu_arch_flags.bitfield.cpummx)\n-    return (const reg_entry *) NULL;\n-\n-  if (!cpu_arch_flags.bitfield.cpuavx512f)\n-    {\n-      if (r->reg_type.bitfield.zmmword\n-\t  || r->reg_type.bitfield.class == RegMask)\n-\treturn (const reg_entry *) NULL;\n-\n-      if (!cpu_arch_flags.bitfield.cpuavx)\n-\t{\n-\t  if (r->reg_type.bitfield.ymmword)\n-\t    return (const reg_entry *) NULL;\n-\n-\t  if (!cpu_arch_flags.bitfield.cpusse && r->reg_type.bitfield.xmmword)\n-\t    return (const reg_entry *) NULL;\n-\t}\n-    }\n-\n-  if (r->reg_type.bitfield.class == RegBND && !cpu_arch_flags.bitfield.cpumpx)\n-    return (const reg_entry *) NULL;\n-\n-  /* Don't allow fake index register unless allow_index_reg isn't 0. */\n-  if (!allow_index_reg && r->reg_num == RegIZ)\n-    return (const reg_entry *) NULL;\n-\n-  /* Upper 16 vector registers are only available with VREX in 64bit\n-     mode, and require EVEX encoding.  */\n-  if (r->reg_flags & RegVRex)\n-    {\n-      if (!cpu_arch_flags.bitfield.cpuavx512f\n-\t  || flag_code != CODE_64BIT)\n-\treturn (const reg_entry *) NULL;\n-\n-      i.vec_encoding = vex_encoding_evex;\n-    }\n-\n-  if (((r->reg_flags & (RegRex64 | RegRex)) || r->reg_type.bitfield.qword)\n-      && (!cpu_arch_flags.bitfield.cpulm || r->reg_type.bitfield.class != RegCR)\n-      && flag_code != CODE_64BIT)\n-    return (const reg_entry *) NULL;\n-\n-  if (r->reg_type.bitfield.class == SReg && r->reg_num == RegFlat\n-      && !intel_syntax)\n-    return (const reg_entry *) NULL;\n-\n-  return r;\n+  return r && check_register (r) ? r : NULL;\n }\n \n /* REG_STRING starts *before* REGISTER_PREFIX.  */\n@@ -12491,8 +12512,12 @@ parse_register (char *reg_string, char **end_op)\n \t  know (e->X_add_number >= 0\n \t\t&& (valueT) e->X_add_number < i386_regtab_size);\n \t  r = i386_regtab + e->X_add_number;\n-\t  if ((r->reg_flags & RegVRex))\n-\t    i.vec_encoding = vex_encoding_evex;\n+\t  if (!check_register (r))\n+\t    {\n+\t      as_bad (_(\"register '%s%s' cannot be used here\"),\n+\t\t      register_prefix, r->reg_name);\n+\t      r = &bad_reg;\n+\t    }\n \t  *end_op = input_line_pointer;\n \t}\n       *input_line_pointer = c;\n@@ -12513,8 +12538,13 @@ i386_parse_name (char *name, expressionS *e, char *nextcharP)\n     {\n       *nextcharP = *input_line_pointer;\n       *input_line_pointer = 0;\n-      e->X_op = O_register;\n-      e->X_add_number = r - i386_regtab;\n+      if (r != &bad_reg)\n+\t{\n+\t  e->X_op = O_register;\n+\t  e->X_add_number = r - i386_regtab;\n+\t}\n+      else\n+\t  e->X_op = O_illegal;\n       return 1;\n     }\n   input_line_pointer = end;"
    },
    {
      "sha": "47cda1afc1d674daae5f08dd5d085ac8a70e9b81",
      "filename": "gas/testsuite/gas/i386/equ-bad.l",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/equ-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/equ-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/equ-bad.l?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -0,0 +1,3 @@\n+.*: Assembler messages:\n+.*:8: Error: .*%ebx.*\n+.*:9: Error: .*%ebx.*"
    },
    {
      "sha": "ca79b26f794bafdc7c18b5a31d139185e373cafd",
      "filename": "gas/testsuite/gas/i386/equ-bad.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/equ-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/equ-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/equ-bad.s?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -0,0 +1,9 @@\n+\t.text\n+\t.arch generic32\n+equ:\n+\t.set\txBX, %ebx\n+\n+\t.code16\n+\t.arch i286\n+\tinc\txBX\n+\tincb\t(xBX)"
    },
    {
      "sha": "86dc1e4bd4ce5935c44a11dfae18c10be30cee4b",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -91,6 +91,7 @@ if [expr ([istarget \"i*86-*-*\"] ||  [istarget \"x86_64-*-*\"]) && [gas_32_check]]\n     run_list_test \"suffix-bad\"\n     run_dump_test \"immed32\"\n     run_dump_test \"equ\"\n+    run_list_test \"equ-bad\"\n     run_dump_test \"divide\"\n     run_dump_test \"padlock\"\n     run_dump_test \"crx\"\n@@ -924,6 +925,7 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n     run_dump_test \"x86-64-prefetchwt1-intel\"\n     run_dump_test \"x86-64-se1\"\n     run_dump_test \"x86-64-equ\"\n+    run_list_test \"x86-64-equ-bad\"\n     run_dump_test \"x86-64-avx512f_vl-intel\"\n     run_dump_test \"x86-64-avx512f_vl-opts-intel\"\n     run_dump_test \"x86-64-avx512f_vl-opts\""
    },
    {
      "sha": "cf44d05eaddd84d5ff399ef26e2053e342e8373c",
      "filename": "gas/testsuite/gas/i386/x86-64-equ-bad.l",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/x86-64-equ-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/x86-64-equ-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-equ-bad.l?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -0,0 +1,8 @@\n+.*: Assembler messages:\n+.*:11: Error: .*'%xmm18'.*\n+.*:13: Error: .*'%dil'.*\n+.*:14: Error: .*'%rdi'.*\n+.*:15: Error: .*'%r8'.*\n+.*:16: Error: .*'%r9d'.*\n+.*:18: Error: .*'%r8'.*\n+.*:19: Error: .*'%r9d'.*"
    },
    {
      "sha": "483a1cf040323a9acad8878c357286bd8ac7cd16",
      "filename": "gas/testsuite/gas/i386/x86-64-equ-bad.s",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/x86-64-equ-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/gas/testsuite/gas/i386/x86-64-equ-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-equ-bad.s?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -0,0 +1,19 @@\n+\t.text\n+\t.code64\n+equ:\n+\t.set R18, %xmm18\n+\t.set lDI, %dil\n+\t.set xDI, %rdi\n+\t.set x8, %r8\n+\t.set x9, %r9d\n+\n+\t.code32\n+\tvmovaps %xmm0, R18\n+\n+\tinc\tlDI\n+\tincl\t(xDI)\n+\tinc\tx8\n+\tinc\tx9\n+\n+\tshlx\tx8, x8, x8\n+\tshlx\tx9, x9, x9"
    },
    {
      "sha": "d405787a05934f6803058a1a1c43d175b146a1a1",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -1,3 +1,7 @@\n+2020-06-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-opc.h (reg_entry): Const-qualify reg_name field.\n+\n 2020-06-06  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-dis.c (ppc_opts): Accept -mpwr10/-Mpwr10."
    },
    {
      "sha": "55726c1a7a712bc4d446d04e202373b76e57d70d",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=8a6fb3f9bb5105e58f6800de9089a4bdb0cc0cd6",
      "patch": "@@ -906,7 +906,7 @@ extern const insn_template i386_optab[];\n /* these are for register name --> number & type hash lookup */\n typedef struct\n {\n-  char *reg_name;\n+  const char *reg_name;\n   i386_operand_type reg_type;\n   unsigned char reg_flags;\n #define RegRex\t    0x1  /* Extended register.  */"
    }
  ]
}