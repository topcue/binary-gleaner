{
  "sha": "f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjg3MmZkYmI1YjgzZjM5ZjM1OWJjMWNkMDE2ZGNjMDQ1NmNiMGMwYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T20:38:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T22:06:54Z"
    },
    "message": "gdb/s12z: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_unwind_pc, and\ngdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* s12z-tdep.c (s12z_unwind_pc): Delete.\n\t(s12z_unwind_sp): Delete.\n\t(s12z_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "9da4dc27fbbe31dab8f55c1863821871ef5542fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9da4dc27fbbe31dab8f55c1863821871ef5542fc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b614e6f3f820fe08d407b57821456f672d4d1a6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b614e6f3f820fe08d407b57821456f672d4d1a6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b614e6f3f820fe08d407b57821456f672d4d1a6f"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 7,
    "deletions": 18
  },
  "files": [
    {
      "sha": "5c40683d3f69474743345943010a37e401241a4b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* s12z-tdep.c (s12z_unwind_pc): Delete.\n+\t(s12z_unwind_sp): Delete.\n+\t(s12z_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* rl78-tdep.c (rl78_unwind_sp): Delete."
    },
    {
      "sha": "cef92d87743de5d9fa4a64d107933032da573427",
      "filename": "gdb/s12z-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 18,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a/gdb/s12z-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a/gdb/s12z-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s12z-tdep.c?ref=f872fdbb5b83f39f359bc1cd016dcc0456cb0c0a",
      "patch": "@@ -95,20 +95,6 @@ s12z_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n   return pc;\n }\n \n-/* Implement the unwind_pc gdbarch method.  */\n-static CORE_ADDR\n-s12z_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, REG_P);\n-}\n-\n-/* Implement the unwind_sp gdbarch method.  */\n-static CORE_ADDR\n-s12z_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, REG_S);\n-}\n-\n static struct type *\n s12z_register_type (struct gdbarch *gdbarch, int reg_nr)\n {\n@@ -581,10 +567,6 @@ s12z_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   set_gdbarch_register_type (gdbarch, s12z_register_type);\n \n-  /* Functions to access frame data.  */\n-  set_gdbarch_unwind_pc (gdbarch, s12z_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, s12z_unwind_sp);\n-\n   frame_unwind_append_unwinder (gdbarch, &s12z_frame_unwind);\n   /* Currently, the only known producer for this archtecture, produces buggy\n      dwarf CFI.   So don't append a dwarf unwinder until the situation is"
    }
  ]
}