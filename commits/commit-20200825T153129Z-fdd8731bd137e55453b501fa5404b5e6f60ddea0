{
  "sha": "fdd8731bd137e55453b501fa5404b5e6f60ddea0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmRkODczMWJkMTM3ZTU1NDUzYjUwMWZhNTQwNGI1ZTZmNjBkZGVhMA==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-07-09T15:44:01Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-08-25T15:31:29Z"
    },
    "message": "arc: Add hardware loop detection\n\nFor ARC there are registers that are not part of a required set in XML\ntarget descriptions by default, but are almost always present on ARC\ntargets and are universally exposed by the ptrace interface.  Hardware\nloop registers being one of them.\n\nLP_START and LP_END auxiliary registers are hardware loop start and end.\nFormally, they are optional, but it is hard to find an ARC configuration\nthat doesn't have them.  They are always present in processors that can\nrun GNU/Linux.  GDB needs to know about those registers to implement\nproper software single stepping, since they affect  what instruction\nwill be next.\n\nThis commit adds the code to check for the existance of \"lp_start\" and\n\"lp_end\" in XML target descriptions. If they exist, then the function\nreports that the target supports hardware loops.\n\ngdb/ChangeLog:\n\n\t* arc-tdep.c (arc_check_for_hardware_loop): New.\n\t* arc-tdep.h (gdbarch_tdep): New field has_hw_loops.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Synopsys ARC): Document LP_START, LP_END and BTA.",
    "tree": {
      "sha": "561a2381ea1468e6c1c4f838eef1447323eb9cfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/561a2381ea1468e6c1c4f838eef1447323eb9cfd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fdd8731bd137e55453b501fa5404b5e6f60ddea0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdd8731bd137e55453b501fa5404b5e6f60ddea0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fdd8731bd137e55453b501fa5404b5e6f60ddea0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdd8731bd137e55453b501fa5404b5e6f60ddea0/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "22459524998c672dc66fd0039d9f795dd6c7cbf9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22459524998c672dc66fd0039d9f795dd6c7cbf9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22459524998c672dc66fd0039d9f795dd6c7cbf9"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 56,
    "deletions": 6
  },
  "files": [
    {
      "sha": "2e97cdc061c5b49441a373c441a9dc59bb9a39ab",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* arc-tdep.c (arc_check_for_hardware_loop): New.\n+\t* arc-tdep.h (gdbarch_tdep): New field has_hw_loops.\n+\n 2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arc-tdep.h: Include \"gdbarch.h\"."
    },
    {
      "sha": "8b4e2857fb98d1d3b75f84dbf5e38ccbac237614",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 35,
      "deletions": 4,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "patch": "@@ -2041,6 +2041,35 @@ arc_check_tdesc_feature (struct tdesc_arch_data *tdesc_data,\n   return true;\n }\n \n+/* Check for the existance of \"lp_start\" and \"lp_end\" in target description.\n+   If both are present, assume there is hardware loop support in the target.\n+   This can be improved by looking into \"lpc_size\" field of \"isa_config\"\n+   auxiliary register.  */\n+\n+static bool\n+arc_check_for_hw_loops (const struct target_desc *tdesc,\n+\t\t\tstruct tdesc_arch_data *data)\n+{\n+  const auto feature_aux = tdesc_find_feature (tdesc, ARC_AUX_FEATURE_NAME);\n+  const auto aux_regset = determine_aux_reg_feature_set ();\n+\n+  if (feature_aux == nullptr)\n+    return false;\n+\n+  bool hw_loop_p = false;\n+  const auto lp_start_name =\n+    aux_regset->registers[ARC_LP_START_REGNUM - ARC_FIRST_AUX_REGNUM].names[0];\n+  const auto lp_end_name =\n+    aux_regset->registers[ARC_LP_END_REGNUM - ARC_FIRST_AUX_REGNUM].names[0];\n+\n+  hw_loop_p = tdesc_numbered_register (feature_aux, data,\n+\t\t\t\t       ARC_LP_START_REGNUM, lp_start_name);\n+  hw_loop_p &= tdesc_numbered_register (feature_aux, data,\n+\t\t\t\t       ARC_LP_END_REGNUM, lp_end_name);\n+\n+  return hw_loop_p;\n+}\n+\n /* Initialize target description for the ARC.\n \n    Returns true if input TDESC was valid and in this case it will assign TDESC\n@@ -2163,13 +2192,15 @@ arc_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n     debug_printf (\"arc: Architecture initialization.\\n\");\n \n   if (!arc_tdesc_init (info, &tdesc, &tdesc_data))\n-    return NULL;\n+    return nullptr;\n \n   /* Allocate the ARC-private target-dependent information structure, and the\n      GDB target-independent information structure.  */\n-  struct gdbarch_tdep *tdep = XCNEW (struct gdbarch_tdep);\n+  gdb::unique_xmalloc_ptr<struct gdbarch_tdep> tdep\n+    (XCNEW (struct gdbarch_tdep));\n   tdep->jb_pc = -1; /* No longjmp support by default.  */\n-  struct gdbarch *gdbarch = gdbarch_alloc (&info, tdep);\n+  tdep->has_hw_loops = arc_check_for_hw_loops (tdesc, tdesc_data);\n+  struct gdbarch *gdbarch = gdbarch_alloc (&info, tdep.release ());\n \n   /* Data types.  */\n   set_gdbarch_short_bit (gdbarch, 16);\n@@ -2250,7 +2281,7 @@ arc_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n      It can override functions set earlier.  */\n   gdbarch_init_osabi (info, gdbarch);\n \n-  if (tdep->jb_pc >= 0)\n+  if (gdbarch_tdep (gdbarch)->jb_pc >= 0)\n     set_gdbarch_get_longjmp_target (gdbarch, arc_get_longjmp_target);\n \n   /* Disassembler options.  Enforce CPU if it was specified in XML target"
    },
    {
      "sha": "e752348a2626c31bcb110e13099f55cafc3e0195",
      "filename": "gdb/arc-tdep.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/arc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/arc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.h?ref=fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "patch": "@@ -111,6 +111,9 @@ struct gdbarch_tdep\n   /* Offset to PC value in jump buffer.  If this is negative, longjmp\n      support will be disabled.  */\n   int jb_pc;\n+\n+  /* Whether target has hardware (aka zero-delay) loops.  */\n+  bool has_hw_loops;\n };\n \n /* Utility functions used by other ARC-specific modules.  */"
    },
    {
      "sha": "badf7ae10b5f8838ee8fa3c95a12f0c2d6815f09",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* gdb.texinfo (Synopsys ARC): Document LP_START, LP_END and BTA.\n+\n 2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* gdb.texinfo (Synopsys ARC): Update the documentation for ARC"
    },
    {
      "sha": "77c5d895053286e0905e746c1d561e6938856f1f",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdd8731bd137e55453b501fa5404b5e6f60ddea0/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "patch": "@@ -45298,8 +45298,15 @@ Extension core registers @samp{r32} through @samp{r59} are optional and their\n existence depends on the configuration.  When debugging GNU/Linux applications,\n i.e.@: user space debugging, these core registers are not available.\n \n-The @samp{org.gnu.gdb.arc.aux} feature is required for all ARC targets.  It\n-should at least contain @samp{pc} and @samp{status32} registers.\n+The @samp{org.gnu.gdb.arc.aux} feature is required for all ARC targets.  Here\n+is the list of registers pertinent to this feature:\n+\n+@itemize @minus\n+@item\n+mandatory: @samp{pc} and @samp{status32}.\n+@item\n+optional: @samp{lp_start}, @samp{lp_end}, and @samp{bta}.\n+@end itemize\n \n @node ARM Features\n @subsection ARM Features"
    }
  ]
}