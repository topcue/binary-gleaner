{
  "sha": "3953519365a38f7cb31c00b150bd8e56caf8b314",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk1MzUxOTM2NWEzOGY3Y2IzMWMwMGIxNTBiZDhlNTZjYWY4YjMxNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-20T21:34:30Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-20T21:34:44Z"
    },
    "message": "gdb: make gdbarch predicates return bool\n\ngdbarch predicates (functions suffixed _p to check whether a gdbarch\nimplements a given method) currently return int.  Make them return bool.\nThere is no expected behavior change.\n\ngdb/ChangeLog:\n\n\t* gdbarch.sh: Make generated predicates return bool.\n\t* gdbarch.c: Re-generate.\n\t* gdbarch.h: Re-generate.\n\nChange-Id: Ie7ebc1acae62df83da9085ba69327fca551c5a30",
    "tree": {
      "sha": "2a7f252a3588f93d7a276fa9ac81f10bdaee0211",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a7f252a3588f93d7a276fa9ac81f10bdaee0211"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3953519365a38f7cb31c00b150bd8e56caf8b314",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3953519365a38f7cb31c00b150bd8e56caf8b314",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3953519365a38f7cb31c00b150bd8e56caf8b314",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3953519365a38f7cb31c00b150bd8e56caf8b314/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ad523d014ca6baddbf84196e8a8a7a4335c1d03c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad523d014ca6baddbf84196e8a8a7a4335c1d03c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ad523d014ca6baddbf84196e8a8a7a4335c1d03c"
    }
  ],
  "stats": {
    "total": 254,
    "additions": 130,
    "deletions": 124
  },
  "files": [
    {
      "sha": "bc50f0eac4e47e554edd1d8617a1d79f3de68a45",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3953519365a38f7cb31c00b150bd8e56caf8b314",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-20  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbarch.sh: Make generated predicates return bool.\n+\t* gdbarch.c: Re-generate.\n+\t* gdbarch.h: Re-generate.\n+\n 2020-10-20  Tom Tromey  <tom@tromey.com>\n \n \t* varobj-iter.h (struct varobj_item): Remove typedef."
    },
    {
      "sha": "664aa9cdbff2019b4142e1eb5feb0e628f100993",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 61,
      "deletions": 61,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=3953519365a38f7cb31c00b150bd8e56caf8b314",
      "patch": "@@ -1920,7 +1920,7 @@ set_gdbarch_char_signed (struct gdbarch *gdbarch,\n   gdbarch->char_signed = char_signed;\n }\n \n-int\n+bool\n gdbarch_read_pc_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -1944,7 +1944,7 @@ set_gdbarch_read_pc (struct gdbarch *gdbarch,\n   gdbarch->read_pc = read_pc;\n }\n \n-int\n+bool\n gdbarch_write_pc_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -1985,7 +1985,7 @@ set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch,\n   gdbarch->virtual_frame_pointer = virtual_frame_pointer;\n }\n \n-int\n+bool\n gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2009,7 +2009,7 @@ set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch,\n   gdbarch->pseudo_register_read = pseudo_register_read;\n }\n \n-int\n+bool\n gdbarch_pseudo_register_read_value_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2033,7 +2033,7 @@ set_gdbarch_pseudo_register_read_value (struct gdbarch *gdbarch,\n   gdbarch->pseudo_register_read_value = pseudo_register_read_value;\n }\n \n-int\n+bool\n gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2092,7 +2092,7 @@ set_gdbarch_num_pseudo_regs (struct gdbarch *gdbarch,\n   gdbarch->num_pseudo_regs = num_pseudo_regs;\n }\n \n-int\n+bool\n gdbarch_ax_pseudo_register_collect_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2116,7 +2116,7 @@ set_gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch,\n   gdbarch->ax_pseudo_register_collect = ax_pseudo_register_collect;\n }\n \n-int\n+bool\n gdbarch_ax_pseudo_register_push_stack_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2140,7 +2140,7 @@ set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch,\n   gdbarch->ax_pseudo_register_push_stack = ax_pseudo_register_push_stack;\n }\n \n-int\n+bool\n gdbarch_report_signal_info_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2317,7 +2317,7 @@ set_gdbarch_register_name (struct gdbarch *gdbarch,\n   gdbarch->register_name = register_name;\n }\n \n-int\n+bool\n gdbarch_register_type_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2375,7 +2375,7 @@ set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch,\n   gdbarch->deprecated_fp_regnum = deprecated_fp_regnum;\n }\n \n-int\n+bool\n gdbarch_push_dummy_call_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2416,7 +2416,7 @@ set_gdbarch_call_dummy_location (struct gdbarch *gdbarch,\n   gdbarch->call_dummy_location = call_dummy_location;\n }\n \n-int\n+bool\n gdbarch_push_dummy_code_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2491,7 +2491,7 @@ set_gdbarch_print_float_info (struct gdbarch *gdbarch,\n   gdbarch->print_float_info = print_float_info;\n }\n \n-int\n+bool\n gdbarch_print_vector_info_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2566,7 +2566,7 @@ set_gdbarch_cannot_store_register (struct gdbarch *gdbarch,\n   gdbarch->cannot_store_register = cannot_store_register;\n }\n \n-int\n+bool\n gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2708,7 +2708,7 @@ set_gdbarch_address_to_pointer (struct gdbarch *gdbarch,\n   gdbarch->address_to_pointer = address_to_pointer;\n }\n \n-int\n+bool\n gdbarch_integer_to_address_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2732,7 +2732,7 @@ set_gdbarch_integer_to_address (struct gdbarch *gdbarch,\n   gdbarch->integer_to_address = integer_to_address;\n }\n \n-int\n+bool\n gdbarch_return_value_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2790,7 +2790,7 @@ set_gdbarch_skip_prologue (struct gdbarch *gdbarch,\n   gdbarch->skip_prologue = skip_prologue;\n }\n \n-int\n+bool\n gdbarch_skip_main_prologue_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2814,7 +2814,7 @@ set_gdbarch_skip_main_prologue (struct gdbarch *gdbarch,\n   gdbarch->skip_main_prologue = skip_main_prologue;\n }\n \n-int\n+bool\n gdbarch_skip_entrypoint_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -2923,7 +2923,7 @@ set_gdbarch_breakpoint_kind_from_current_state (struct gdbarch *gdbarch,\n   gdbarch->breakpoint_kind_from_current_state = breakpoint_kind_from_current_state;\n }\n \n-int\n+bool\n gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3032,7 +3032,7 @@ set_gdbarch_remote_register_number (struct gdbarch *gdbarch,\n   gdbarch->remote_register_number = remote_register_number;\n }\n \n-int\n+bool\n gdbarch_fetch_tls_load_module_address_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3056,7 +3056,7 @@ set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch,\n   gdbarch->fetch_tls_load_module_address = fetch_tls_load_module_address;\n }\n \n-int\n+bool\n gdbarch_get_thread_local_address_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3131,7 +3131,7 @@ set_gdbarch_unwind_sp (struct gdbarch *gdbarch,\n   gdbarch->unwind_sp = unwind_sp;\n }\n \n-int\n+bool\n gdbarch_frame_num_args_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3155,7 +3155,7 @@ set_gdbarch_frame_num_args (struct gdbarch *gdbarch,\n   gdbarch->frame_num_args = frame_num_args;\n }\n \n-int\n+bool\n gdbarch_frame_align_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3263,7 +3263,7 @@ set_gdbarch_significant_addr_bit (struct gdbarch *gdbarch,\n   gdbarch->significant_addr_bit = significant_addr_bit;\n }\n \n-int\n+bool\n gdbarch_software_single_step_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3287,7 +3287,7 @@ set_gdbarch_software_single_step (struct gdbarch *gdbarch,\n   gdbarch->software_single_step = software_single_step;\n }\n \n-int\n+bool\n gdbarch_single_step_through_delay_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3413,7 +3413,7 @@ set_gdbarch_stack_frame_destroyed_p (struct gdbarch *gdbarch,\n   gdbarch->stack_frame_destroyed_p = stack_frame_destroyed_p;\n }\n \n-int\n+bool\n gdbarch_elf_make_msymbol_special_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3539,7 +3539,7 @@ set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch,\n   gdbarch->have_nonsteppable_watchpoint = have_nonsteppable_watchpoint;\n }\n \n-int\n+bool\n gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3563,7 +3563,7 @@ set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch,\n   gdbarch->address_class_type_flags = address_class_type_flags;\n }\n \n-int\n+bool\n gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3604,7 +3604,7 @@ set_gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch,\n   gdbarch->execute_dwarf_cfa_vendor_op = execute_dwarf_cfa_vendor_op;\n }\n \n-int\n+bool\n gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3645,7 +3645,7 @@ set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch,\n   gdbarch->register_reggroup_p = register_reggroup_p;\n }\n \n-int\n+bool\n gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3669,7 +3669,7 @@ set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch,\n   gdbarch->fetch_pointer_argument = fetch_pointer_argument;\n }\n \n-int\n+bool\n gdbarch_iterate_over_regset_sections_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3693,7 +3693,7 @@ set_gdbarch_iterate_over_regset_sections (struct gdbarch *gdbarch,\n   gdbarch->iterate_over_regset_sections = iterate_over_regset_sections;\n }\n \n-int\n+bool\n gdbarch_make_corefile_notes_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3717,7 +3717,7 @@ set_gdbarch_make_corefile_notes (struct gdbarch *gdbarch,\n   gdbarch->make_corefile_notes = make_corefile_notes;\n }\n \n-int\n+bool\n gdbarch_find_memory_regions_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3741,7 +3741,7 @@ set_gdbarch_find_memory_regions (struct gdbarch *gdbarch,\n   gdbarch->find_memory_regions = find_memory_regions;\n }\n \n-int\n+bool\n gdbarch_core_xfer_shared_libraries_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3765,7 +3765,7 @@ set_gdbarch_core_xfer_shared_libraries (struct gdbarch *gdbarch,\n   gdbarch->core_xfer_shared_libraries = core_xfer_shared_libraries;\n }\n \n-int\n+bool\n gdbarch_core_xfer_shared_libraries_aix_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3789,7 +3789,7 @@ set_gdbarch_core_xfer_shared_libraries_aix (struct gdbarch *gdbarch,\n   gdbarch->core_xfer_shared_libraries_aix = core_xfer_shared_libraries_aix;\n }\n \n-int\n+bool\n gdbarch_core_pid_to_str_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3813,7 +3813,7 @@ set_gdbarch_core_pid_to_str (struct gdbarch *gdbarch,\n   gdbarch->core_pid_to_str = core_pid_to_str;\n }\n \n-int\n+bool\n gdbarch_core_thread_name_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3837,7 +3837,7 @@ set_gdbarch_core_thread_name (struct gdbarch *gdbarch,\n   gdbarch->core_thread_name = core_thread_name;\n }\n \n-int\n+bool\n gdbarch_core_xfer_siginfo_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3861,7 +3861,7 @@ set_gdbarch_core_xfer_siginfo (struct gdbarch *gdbarch,\n   gdbarch->core_xfer_siginfo = core_xfer_siginfo;\n }\n \n-int\n+bool\n gdbarch_gcore_bfd_target_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3937,7 +3937,7 @@ set_gdbarch_skip_permanent_breakpoint (struct gdbarch *gdbarch,\n   gdbarch->skip_permanent_breakpoint = skip_permanent_breakpoint;\n }\n \n-int\n+bool\n gdbarch_max_insn_length_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -3962,7 +3962,7 @@ set_gdbarch_max_insn_length (struct gdbarch *gdbarch,\n   gdbarch->max_insn_length = max_insn_length;\n }\n \n-int\n+bool\n gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4003,7 +4003,7 @@ set_gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch,\n   gdbarch->displaced_step_hw_singlestep = displaced_step_hw_singlestep;\n }\n \n-int\n+bool\n gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4045,7 +4045,7 @@ set_gdbarch_displaced_step_location (struct gdbarch *gdbarch,\n   gdbarch->displaced_step_location = displaced_step_location;\n }\n \n-int\n+bool\n gdbarch_relocate_instruction_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4070,7 +4070,7 @@ set_gdbarch_relocate_instruction (struct gdbarch *gdbarch,\n   gdbarch->relocate_instruction = relocate_instruction;\n }\n \n-int\n+bool\n gdbarch_overlay_update_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4094,7 +4094,7 @@ set_gdbarch_overlay_update (struct gdbarch *gdbarch,\n   gdbarch->overlay_update = overlay_update;\n }\n \n-int\n+bool\n gdbarch_core_read_description_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4135,7 +4135,7 @@ set_gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch,\n   gdbarch->sofun_address_maybe_missing = sofun_address_maybe_missing;\n }\n \n-int\n+bool\n gdbarch_process_record_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4159,7 +4159,7 @@ set_gdbarch_process_record (struct gdbarch *gdbarch,\n   gdbarch->process_record = process_record;\n }\n \n-int\n+bool\n gdbarch_process_record_signal_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4183,7 +4183,7 @@ set_gdbarch_process_record_signal (struct gdbarch *gdbarch,\n   gdbarch->process_record_signal = process_record_signal;\n }\n \n-int\n+bool\n gdbarch_gdb_signal_from_target_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4207,7 +4207,7 @@ set_gdbarch_gdb_signal_from_target (struct gdbarch *gdbarch,\n   gdbarch->gdb_signal_from_target = gdb_signal_from_target;\n }\n \n-int\n+bool\n gdbarch_gdb_signal_to_target_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4231,7 +4231,7 @@ set_gdbarch_gdb_signal_to_target (struct gdbarch *gdbarch,\n   gdbarch->gdb_signal_to_target = gdb_signal_to_target;\n }\n \n-int\n+bool\n gdbarch_get_siginfo_type_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4255,7 +4255,7 @@ set_gdbarch_get_siginfo_type (struct gdbarch *gdbarch,\n   gdbarch->get_siginfo_type = get_siginfo_type;\n }\n \n-int\n+bool\n gdbarch_record_special_symbol_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4279,7 +4279,7 @@ set_gdbarch_record_special_symbol (struct gdbarch *gdbarch,\n   gdbarch->record_special_symbol = record_special_symbol;\n }\n \n-int\n+bool\n gdbarch_get_syscall_number_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4473,7 +4473,7 @@ set_gdbarch_stap_gdb_register_suffix (struct gdbarch *gdbarch,\n   gdbarch->stap_gdb_register_suffix = stap_gdb_register_suffix;\n }\n \n-int\n+bool\n gdbarch_stap_is_single_operand_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4497,7 +4497,7 @@ set_gdbarch_stap_is_single_operand (struct gdbarch *gdbarch,\n   gdbarch->stap_is_single_operand = stap_is_single_operand;\n }\n \n-int\n+bool\n gdbarch_stap_parse_special_token_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4521,7 +4521,7 @@ set_gdbarch_stap_parse_special_token (struct gdbarch *gdbarch,\n   gdbarch->stap_parse_special_token = stap_parse_special_token;\n }\n \n-int\n+bool\n gdbarch_stap_adjust_register_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4545,7 +4545,7 @@ set_gdbarch_stap_adjust_register (struct gdbarch *gdbarch,\n   gdbarch->stap_adjust_register = stap_adjust_register;\n }\n \n-int\n+bool\n gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4569,7 +4569,7 @@ set_gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n   gdbarch->dtrace_parse_probe_argument = dtrace_parse_probe_argument;\n }\n \n-int\n+bool\n gdbarch_dtrace_probe_is_enabled_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4593,7 +4593,7 @@ set_gdbarch_dtrace_probe_is_enabled (struct gdbarch *gdbarch,\n   gdbarch->dtrace_probe_is_enabled = dtrace_probe_is_enabled;\n }\n \n-int\n+bool\n gdbarch_dtrace_enable_probe_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4617,7 +4617,7 @@ set_gdbarch_dtrace_enable_probe (struct gdbarch *gdbarch,\n   gdbarch->dtrace_enable_probe = dtrace_enable_probe;\n }\n \n-int\n+bool\n gdbarch_dtrace_disable_probe_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4810,7 +4810,7 @@ set_gdbarch_gen_return_address (struct gdbarch *gdbarch,\n   gdbarch->gen_return_address = gen_return_address;\n }\n \n-int\n+bool\n gdbarch_info_proc_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4834,7 +4834,7 @@ set_gdbarch_info_proc (struct gdbarch *gdbarch,\n   gdbarch->info_proc = info_proc;\n }\n \n-int\n+bool\n gdbarch_core_info_proc_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);\n@@ -4960,7 +4960,7 @@ set_gdbarch_program_breakpoint_here_p (struct gdbarch *gdbarch,\n   gdbarch->program_breakpoint_here_p = program_breakpoint_here_p;\n }\n \n-int\n+bool\n gdbarch_auxv_parse_p (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);"
    },
    {
      "sha": "a12374875da33a1860935ed034f0da0970ad280a",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 61,
      "deletions": 61,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=3953519365a38f7cb31c00b150bd8e56caf8b314",
      "patch": "@@ -254,13 +254,13 @@ extern void set_gdbarch_dwarf2_addr_size (struct gdbarch *gdbarch, int dwarf2_ad\n extern int gdbarch_char_signed (struct gdbarch *gdbarch);\n extern void set_gdbarch_char_signed (struct gdbarch *gdbarch, int char_signed);\n \n-extern int gdbarch_read_pc_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_read_pc_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_read_pc_ftype) (readable_regcache *regcache);\n extern CORE_ADDR gdbarch_read_pc (struct gdbarch *gdbarch, readable_regcache *regcache);\n extern void set_gdbarch_read_pc (struct gdbarch *gdbarch, gdbarch_read_pc_ftype *read_pc);\n \n-extern int gdbarch_write_pc_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_write_pc_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_write_pc_ftype) (struct regcache *regcache, CORE_ADDR val);\n extern void gdbarch_write_pc (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR val);\n@@ -274,7 +274,7 @@ typedef void (gdbarch_virtual_frame_pointer_ftype) (struct gdbarch *gdbarch, COR\n extern void gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, CORE_ADDR pc, int *frame_regnum, LONGEST *frame_offset);\n extern void set_gdbarch_virtual_frame_pointer (struct gdbarch *gdbarch, gdbarch_virtual_frame_pointer_ftype *virtual_frame_pointer);\n \n-extern int gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_pseudo_register_read_p (struct gdbarch *gdbarch);\n \n typedef enum register_status (gdbarch_pseudo_register_read_ftype) (struct gdbarch *gdbarch, readable_regcache *regcache, int cookednum, gdb_byte *buf);\n extern enum register_status gdbarch_pseudo_register_read (struct gdbarch *gdbarch, readable_regcache *regcache, int cookednum, gdb_byte *buf);\n@@ -285,13 +285,13 @@ extern void set_gdbarch_pseudo_register_read (struct gdbarch *gdbarch, gdbarch_p\n    as appropriate.  If this is defined, then pseudo_register_read will\n    never be called. */\n \n-extern int gdbarch_pseudo_register_read_value_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_pseudo_register_read_value_p (struct gdbarch *gdbarch);\n \n typedef struct value * (gdbarch_pseudo_register_read_value_ftype) (struct gdbarch *gdbarch, readable_regcache *regcache, int cookednum);\n extern struct value * gdbarch_pseudo_register_read_value (struct gdbarch *gdbarch, readable_regcache *regcache, int cookednum);\n extern void set_gdbarch_pseudo_register_read_value (struct gdbarch *gdbarch, gdbarch_pseudo_register_read_value_ftype *pseudo_register_read_value);\n \n-extern int gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_pseudo_register_write_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_pseudo_register_write_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const gdb_byte *buf);\n extern void gdbarch_pseudo_register_write (struct gdbarch *gdbarch, struct regcache *regcache, int cookednum, const gdb_byte *buf);\n@@ -311,7 +311,7 @@ extern void set_gdbarch_num_pseudo_regs (struct gdbarch *gdbarch, int num_pseudo\n /* Assemble agent expression bytecode to collect pseudo-register REG.\n    Return -1 if something goes wrong, 0 otherwise. */\n \n-extern int gdbarch_ax_pseudo_register_collect_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_ax_pseudo_register_collect_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_ax_pseudo_register_collect_ftype) (struct gdbarch *gdbarch, struct agent_expr *ax, int reg);\n extern int gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch, struct agent_expr *ax, int reg);\n@@ -321,7 +321,7 @@ extern void set_gdbarch_ax_pseudo_register_collect (struct gdbarch *gdbarch, gdb\n    REG on the interpreter stack.\n    Return -1 if something goes wrong, 0 otherwise. */\n \n-extern int gdbarch_ax_pseudo_register_push_stack_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_ax_pseudo_register_push_stack_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_ax_pseudo_register_push_stack_ftype) (struct gdbarch *gdbarch, struct agent_expr *ax, int reg);\n extern int gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch, struct agent_expr *ax, int reg);\n@@ -331,7 +331,7 @@ extern void set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch,\n    signals.\n    UIOUT is the output stream where the handler will place information. */\n \n-extern int gdbarch_report_signal_info_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_report_signal_info_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_report_signal_info_ftype) (struct gdbarch *gdbarch, struct ui_out *uiout, enum gdb_signal siggnal);\n extern void gdbarch_report_signal_info (struct gdbarch *gdbarch, struct ui_out *uiout, enum gdb_signal siggnal);\n@@ -387,7 +387,7 @@ extern void set_gdbarch_register_name (struct gdbarch *gdbarch, gdbarch_register\n    the register cache should call this function directly; others should\n    use \"register_type\". */\n \n-extern int gdbarch_register_type_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_register_type_p (struct gdbarch *gdbarch);\n \n typedef struct type * (gdbarch_register_type_ftype) (struct gdbarch *gdbarch, int reg_nr);\n extern struct type * gdbarch_register_type (struct gdbarch *gdbarch, int reg_nr);\n@@ -412,7 +412,7 @@ extern void set_gdbarch_dummy_id (struct gdbarch *gdbarch, gdbarch_dummy_id_ftyp\n extern int gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch);\n extern void set_gdbarch_deprecated_fp_regnum (struct gdbarch *gdbarch, int deprecated_fp_regnum);\n \n-extern int gdbarch_push_dummy_call_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_push_dummy_call_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_push_dummy_call_ftype) (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, function_call_return_method return_method, CORE_ADDR struct_addr);\n extern CORE_ADDR gdbarch_push_dummy_call (struct gdbarch *gdbarch, struct value *function, struct regcache *regcache, CORE_ADDR bp_addr, int nargs, struct value **args, CORE_ADDR sp, function_call_return_method return_method, CORE_ADDR struct_addr);\n@@ -421,7 +421,7 @@ extern void set_gdbarch_push_dummy_call (struct gdbarch *gdbarch, gdbarch_push_d\n extern int gdbarch_call_dummy_location (struct gdbarch *gdbarch);\n extern void set_gdbarch_call_dummy_location (struct gdbarch *gdbarch, int call_dummy_location);\n \n-extern int gdbarch_push_dummy_code_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_push_dummy_code_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_push_dummy_code_ftype) (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr, struct regcache *regcache);\n extern CORE_ADDR gdbarch_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr, struct value **args, int nargs, struct type *value_type, CORE_ADDR *real_pc, CORE_ADDR *bp_addr, struct regcache *regcache);\n@@ -441,7 +441,7 @@ typedef void (gdbarch_print_float_info_ftype) (struct gdbarch *gdbarch, struct u\n extern void gdbarch_print_float_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);\n extern void set_gdbarch_print_float_info (struct gdbarch *gdbarch, gdbarch_print_float_info_ftype *print_float_info);\n \n-extern int gdbarch_print_vector_info_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_print_vector_info_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_print_vector_info_ftype) (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);\n extern void gdbarch_print_vector_info (struct gdbarch *gdbarch, struct ui_file *file, struct frame_info *frame, const char *args);\n@@ -467,7 +467,7 @@ extern void set_gdbarch_cannot_store_register (struct gdbarch *gdbarch, gdbarch_\n   \n    FRAME corresponds to the longjmp frame. */\n \n-extern int gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_get_longjmp_target_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_get_longjmp_target_ftype) (struct frame_info *frame, CORE_ADDR *pc);\n extern int gdbarch_get_longjmp_target (struct gdbarch *gdbarch, struct frame_info *frame, CORE_ADDR *pc);\n@@ -505,7 +505,7 @@ typedef void (gdbarch_address_to_pointer_ftype) (struct gdbarch *gdbarch, struct\n extern void gdbarch_address_to_pointer (struct gdbarch *gdbarch, struct type *type, gdb_byte *buf, CORE_ADDR addr);\n extern void set_gdbarch_address_to_pointer (struct gdbarch *gdbarch, gdbarch_address_to_pointer_ftype *address_to_pointer);\n \n-extern int gdbarch_integer_to_address_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_integer_to_address_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_integer_to_address_ftype) (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf);\n extern CORE_ADDR gdbarch_integer_to_address (struct gdbarch *gdbarch, struct type *type, const gdb_byte *buf);\n@@ -522,7 +522,7 @@ extern void set_gdbarch_integer_to_address (struct gdbarch *gdbarch, gdbarch_int\n    to force the value returned by a function (see the \"return\" command\n    for instance). */\n \n-extern int gdbarch_return_value_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_return_value_p (struct gdbarch *gdbarch);\n \n typedef enum return_value_convention (gdbarch_return_value_ftype) (struct gdbarch *gdbarch, struct value *function, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf);\n extern enum return_value_convention gdbarch_return_value (struct gdbarch *gdbarch, struct value *function, struct type *valtype, struct regcache *regcache, gdb_byte *readbuf, const gdb_byte *writebuf);\n@@ -542,7 +542,7 @@ typedef CORE_ADDR (gdbarch_skip_prologue_ftype) (struct gdbarch *gdbarch, CORE_A\n extern CORE_ADDR gdbarch_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR ip);\n extern void set_gdbarch_skip_prologue (struct gdbarch *gdbarch, gdbarch_skip_prologue_ftype *skip_prologue);\n \n-extern int gdbarch_skip_main_prologue_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_skip_main_prologue_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_skip_main_prologue_ftype) (struct gdbarch *gdbarch, CORE_ADDR ip);\n extern CORE_ADDR gdbarch_skip_main_prologue (struct gdbarch *gdbarch, CORE_ADDR ip);\n@@ -560,7 +560,7 @@ extern void set_gdbarch_skip_main_prologue (struct gdbarch *gdbarch, gdbarch_ski\n    by GDB common code even when debugging optimized code, where skip_prologue\n    is not used. */\n \n-extern int gdbarch_skip_entrypoint_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_skip_entrypoint_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_skip_entrypoint_ftype) (struct gdbarch *gdbarch, CORE_ADDR ip);\n extern CORE_ADDR gdbarch_skip_entrypoint (struct gdbarch *gdbarch, CORE_ADDR ip);\n@@ -596,7 +596,7 @@ typedef int (gdbarch_breakpoint_kind_from_current_state_ftype) (struct gdbarch *\n extern int gdbarch_breakpoint_kind_from_current_state (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR *pcptr);\n extern void set_gdbarch_breakpoint_kind_from_current_state (struct gdbarch *gdbarch, gdbarch_breakpoint_kind_from_current_state_ftype *breakpoint_kind_from_current_state);\n \n-extern int gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_adjust_breakpoint_address_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_adjust_breakpoint_address_ftype) (struct gdbarch *gdbarch, CORE_ADDR bpaddr);\n extern CORE_ADDR gdbarch_adjust_breakpoint_address (struct gdbarch *gdbarch, CORE_ADDR bpaddr);\n@@ -633,7 +633,7 @@ extern void set_gdbarch_remote_register_number (struct gdbarch *gdbarch, gdbarch\n \n /* Fetch the target specific address used to represent a load module. */\n \n-extern int gdbarch_fetch_tls_load_module_address_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_fetch_tls_load_module_address_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_fetch_tls_load_module_address_ftype) (struct objfile *objfile);\n extern CORE_ADDR gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, struct objfile *objfile);\n@@ -645,7 +645,7 @@ extern void set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch,\n    been allocated yet, this function may throw an error.  LM_ADDR may\n    be zero for statically linked multithreaded inferiors. */\n \n-extern int gdbarch_get_thread_local_address_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_get_thread_local_address_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_get_thread_local_address_ftype) (struct gdbarch *gdbarch, ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset);\n extern CORE_ADDR gdbarch_get_thread_local_address (struct gdbarch *gdbarch, ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset);\n@@ -665,13 +665,13 @@ extern void set_gdbarch_unwind_sp (struct gdbarch *gdbarch, gdbarch_unwind_sp_ft\n /* DEPRECATED_FRAME_LOCALS_ADDRESS as been replaced by the per-frame\n    frame-base.  Enable frame-base before frame-unwind. */\n \n-extern int gdbarch_frame_num_args_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_frame_num_args_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_frame_num_args_ftype) (struct frame_info *frame);\n extern int gdbarch_frame_num_args (struct gdbarch *gdbarch, struct frame_info *frame);\n extern void set_gdbarch_frame_num_args (struct gdbarch *gdbarch, gdbarch_frame_num_args_ftype *frame_num_args);\n \n-extern int gdbarch_frame_align_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_frame_align_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_frame_align_ftype) (struct gdbarch *gdbarch, CORE_ADDR address);\n extern CORE_ADDR gdbarch_frame_align (struct gdbarch *gdbarch, CORE_ADDR address);\n@@ -726,7 +726,7 @@ extern void set_gdbarch_significant_addr_bit (struct gdbarch *gdbarch, int signi\n    the condition is true, so that we ensure forward progress when stepping\n    past a conditional branch to self. */\n \n-extern int gdbarch_software_single_step_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_software_single_step_p (struct gdbarch *gdbarch);\n \n typedef std::vector<CORE_ADDR> (gdbarch_software_single_step_ftype) (struct regcache *regcache);\n extern std::vector<CORE_ADDR> gdbarch_software_single_step (struct gdbarch *gdbarch, struct regcache *regcache);\n@@ -735,7 +735,7 @@ extern void set_gdbarch_software_single_step (struct gdbarch *gdbarch, gdbarch_s\n /* Return non-zero if the processor is executing a delay slot and a\n    further single-step is needed before the instruction finishes. */\n \n-extern int gdbarch_single_step_through_delay_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_single_step_through_delay_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_single_step_through_delay_ftype) (struct gdbarch *gdbarch, struct frame_info *frame);\n extern int gdbarch_single_step_through_delay (struct gdbarch *gdbarch, struct frame_info *frame);\n@@ -794,7 +794,7 @@ extern void set_gdbarch_stack_frame_destroyed_p (struct gdbarch *gdbarch, gdbarc\n    that they can be treated in the appropriate manner in the processing of\n    the main symbol table and DWARF-2 records. */\n \n-extern int gdbarch_elf_make_msymbol_special_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_elf_make_msymbol_special_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_elf_make_msymbol_special_ftype) (asymbol *sym, struct minimal_symbol *msym);\n extern void gdbarch_elf_make_msymbol_special (struct gdbarch *gdbarch, asymbol *sym, struct minimal_symbol *msym);\n@@ -852,13 +852,13 @@ extern void set_gdbarch_cannot_step_breakpoint (struct gdbarch *gdbarch, int can\n extern int gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch);\n extern void set_gdbarch_have_nonsteppable_watchpoint (struct gdbarch *gdbarch, int have_nonsteppable_watchpoint);\n \n-extern int gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_address_class_type_flags_p (struct gdbarch *gdbarch);\n \n typedef type_instance_flags (gdbarch_address_class_type_flags_ftype) (int byte_size, int dwarf2_addr_class);\n extern type_instance_flags gdbarch_address_class_type_flags (struct gdbarch *gdbarch, int byte_size, int dwarf2_addr_class);\n extern void set_gdbarch_address_class_type_flags (struct gdbarch *gdbarch, gdbarch_address_class_type_flags_ftype *address_class_type_flags);\n \n-extern int gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_address_class_type_flags_to_name_p (struct gdbarch *gdbarch);\n \n typedef const char * (gdbarch_address_class_type_flags_to_name_ftype) (struct gdbarch *gdbarch, type_instance_flags type_flags);\n extern const char * gdbarch_address_class_type_flags_to_name (struct gdbarch *gdbarch, type_instance_flags type_flags);\n@@ -875,7 +875,7 @@ extern void set_gdbarch_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gd\n    This function should return true if the address class was recognized and\n    type_flags was set, false otherwise. */\n \n-extern int gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_address_class_name_to_type_flags_p (struct gdbarch *gdbarch);\n \n typedef bool (gdbarch_address_class_name_to_type_flags_ftype) (struct gdbarch *gdbarch, const char *name, type_instance_flags *type_flags_ptr);\n extern bool gdbarch_address_class_name_to_type_flags (struct gdbarch *gdbarch, const char *name, type_instance_flags *type_flags_ptr);\n@@ -889,7 +889,7 @@ extern void set_gdbarch_register_reggroup_p (struct gdbarch *gdbarch, gdbarch_re\n \n /* Fetch the pointer to the ith function argument. */\n \n-extern int gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_fetch_pointer_argument_p (struct gdbarch *gdbarch);\n \n typedef CORE_ADDR (gdbarch_fetch_pointer_argument_ftype) (struct frame_info *frame, int argi, struct type *type);\n extern CORE_ADDR gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, struct frame_info *frame, int argi, struct type *type);\n@@ -902,23 +902,23 @@ extern void set_gdbarch_fetch_pointer_argument (struct gdbarch *gdbarch, gdbarch\n    values.  Otherwise it should enumerate all supported register note\n    sections. */\n \n-extern int gdbarch_iterate_over_regset_sections_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_iterate_over_regset_sections_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_iterate_over_regset_sections_ftype) (struct gdbarch *gdbarch, iterate_over_regset_sections_cb *cb, void *cb_data, const struct regcache *regcache);\n extern void gdbarch_iterate_over_regset_sections (struct gdbarch *gdbarch, iterate_over_regset_sections_cb *cb, void *cb_data, const struct regcache *regcache);\n extern void set_gdbarch_iterate_over_regset_sections (struct gdbarch *gdbarch, gdbarch_iterate_over_regset_sections_ftype *iterate_over_regset_sections);\n \n /* Create core file notes */\n \n-extern int gdbarch_make_corefile_notes_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_make_corefile_notes_p (struct gdbarch *gdbarch);\n \n typedef char * (gdbarch_make_corefile_notes_ftype) (struct gdbarch *gdbarch, bfd *obfd, int *note_size);\n extern char * gdbarch_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size);\n extern void set_gdbarch_make_corefile_notes (struct gdbarch *gdbarch, gdbarch_make_corefile_notes_ftype *make_corefile_notes);\n \n /* Find core file memory regions */\n \n-extern int gdbarch_find_memory_regions_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_find_memory_regions_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_find_memory_regions_ftype) (struct gdbarch *gdbarch, find_memory_region_ftype func, void *data);\n extern int gdbarch_find_memory_regions (struct gdbarch *gdbarch, find_memory_region_ftype func, void *data);\n@@ -929,7 +929,7 @@ extern void set_gdbarch_find_memory_regions (struct gdbarch *gdbarch, gdbarch_fi\n    (zero indicates failure).\n    failed, otherwise, return the red length of READBUF. */\n \n-extern int gdbarch_core_xfer_shared_libraries_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_xfer_shared_libraries_p (struct gdbarch *gdbarch);\n \n typedef ULONGEST (gdbarch_core_xfer_shared_libraries_ftype) (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n extern ULONGEST gdbarch_core_xfer_shared_libraries (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n@@ -939,23 +939,23 @@ extern void set_gdbarch_core_xfer_shared_libraries (struct gdbarch *gdbarch, gdb\n    libraries list from core file into buffer READBUF with length LEN.\n    Return the number of bytes read (zero indicates failure). */\n \n-extern int gdbarch_core_xfer_shared_libraries_aix_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_xfer_shared_libraries_aix_p (struct gdbarch *gdbarch);\n \n typedef ULONGEST (gdbarch_core_xfer_shared_libraries_aix_ftype) (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n extern ULONGEST gdbarch_core_xfer_shared_libraries_aix (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n extern void set_gdbarch_core_xfer_shared_libraries_aix (struct gdbarch *gdbarch, gdbarch_core_xfer_shared_libraries_aix_ftype *core_xfer_shared_libraries_aix);\n \n /* How the core target converts a PTID from a core file to a string. */\n \n-extern int gdbarch_core_pid_to_str_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_pid_to_str_p (struct gdbarch *gdbarch);\n \n typedef std::string (gdbarch_core_pid_to_str_ftype) (struct gdbarch *gdbarch, ptid_t ptid);\n extern std::string gdbarch_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid);\n extern void set_gdbarch_core_pid_to_str (struct gdbarch *gdbarch, gdbarch_core_pid_to_str_ftype *core_pid_to_str);\n \n /* How the core target extracts the name of a thread from a core file. */\n \n-extern int gdbarch_core_thread_name_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_thread_name_p (struct gdbarch *gdbarch);\n \n typedef const char * (gdbarch_core_thread_name_ftype) (struct gdbarch *gdbarch, struct thread_info *thr);\n extern const char * gdbarch_core_thread_name (struct gdbarch *gdbarch, struct thread_info *thr);\n@@ -965,15 +965,15 @@ extern void set_gdbarch_core_thread_name (struct gdbarch *gdbarch, gdbarch_core_\n    from core file into buffer READBUF with length LEN.  Return the number\n    of bytes read (zero indicates EOF, a negative value indicates failure). */\n \n-extern int gdbarch_core_xfer_siginfo_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_xfer_siginfo_p (struct gdbarch *gdbarch);\n \n typedef LONGEST (gdbarch_core_xfer_siginfo_ftype) (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n extern LONGEST gdbarch_core_xfer_siginfo (struct gdbarch *gdbarch, gdb_byte *readbuf, ULONGEST offset, ULONGEST len);\n extern void set_gdbarch_core_xfer_siginfo (struct gdbarch *gdbarch, gdbarch_core_xfer_siginfo_ftype *core_xfer_siginfo);\n \n /* BFD target to use when generating a core file. */\n \n-extern int gdbarch_gcore_bfd_target_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_gcore_bfd_target_p (struct gdbarch *gdbarch);\n \n extern const char * gdbarch_gcore_bfd_target (struct gdbarch *gdbarch);\n extern void set_gdbarch_gcore_bfd_target (struct gdbarch *gdbarch, const char * gcore_bfd_target);\n@@ -999,7 +999,7 @@ extern void set_gdbarch_skip_permanent_breakpoint (struct gdbarch *gdbarch, gdba\n \n /* The maximum length of an instruction on this architecture in bytes. */\n \n-extern int gdbarch_max_insn_length_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_max_insn_length_p (struct gdbarch *gdbarch);\n \n extern ULONGEST gdbarch_max_insn_length (struct gdbarch *gdbarch);\n extern void set_gdbarch_max_insn_length (struct gdbarch *gdbarch, ULONGEST max_insn_length);\n@@ -1028,7 +1028,7 @@ extern void set_gdbarch_max_insn_length (struct gdbarch *gdbarch, ULONGEST max_i\n    core falls back to stepping past the instruction in-line instead in\n    that case. */\n \n-extern int gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch);\n \n typedef displaced_step_closure_up (gdbarch_displaced_step_copy_insn_ftype) (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n extern displaced_step_closure_up gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n@@ -1065,7 +1065,7 @@ extern void set_gdbarch_displaced_step_hw_singlestep (struct gdbarch *gdbarch, g\n    For a general explanation of displaced stepping and how GDB uses it,\n    see the comments in infrun.c. */\n \n-extern int gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_displaced_step_fixup_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_displaced_step_fixup_ftype) (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n extern void gdbarch_displaced_step_fixup (struct gdbarch *gdbarch, struct displaced_step_closure *closure, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n@@ -1095,21 +1095,21 @@ extern void set_gdbarch_displaced_step_location (struct gdbarch *gdbarch, gdbarc\n    relative branches, and other PC-relative instructions need the\n    offset adjusted; etc. */\n \n-extern int gdbarch_relocate_instruction_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_relocate_instruction_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_relocate_instruction_ftype) (struct gdbarch *gdbarch, CORE_ADDR *to, CORE_ADDR from);\n extern void gdbarch_relocate_instruction (struct gdbarch *gdbarch, CORE_ADDR *to, CORE_ADDR from);\n extern void set_gdbarch_relocate_instruction (struct gdbarch *gdbarch, gdbarch_relocate_instruction_ftype *relocate_instruction);\n \n /* Refresh overlay mapped state for section OSECT. */\n \n-extern int gdbarch_overlay_update_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_overlay_update_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_overlay_update_ftype) (struct obj_section *osect);\n extern void gdbarch_overlay_update (struct gdbarch *gdbarch, struct obj_section *osect);\n extern void set_gdbarch_overlay_update (struct gdbarch *gdbarch, gdbarch_overlay_update_ftype *overlay_update);\n \n-extern int gdbarch_core_read_description_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_read_description_p (struct gdbarch *gdbarch);\n \n typedef const struct target_desc * (gdbarch_core_read_description_ftype) (struct gdbarch *gdbarch, struct target_ops *target, bfd *abfd);\n extern const struct target_desc * gdbarch_core_read_description (struct gdbarch *gdbarch, struct target_ops *target, bfd *abfd);\n@@ -1125,7 +1125,7 @@ extern void set_gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch, in\n    the instruction executes, along with their current values.\n    Return -1 if something goes wrong, 0 otherwise. */\n \n-extern int gdbarch_process_record_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_process_record_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_process_record_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR addr);\n extern int gdbarch_process_record (struct gdbarch *gdbarch, struct regcache *regcache, CORE_ADDR addr);\n@@ -1134,7 +1134,7 @@ extern void set_gdbarch_process_record (struct gdbarch *gdbarch, gdbarch_process\n /* Save process state after a signal.\n    Return -1 if something goes wrong, 0 otherwise. */\n \n-extern int gdbarch_process_record_signal_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_process_record_signal_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_process_record_signal_ftype) (struct gdbarch *gdbarch, struct regcache *regcache, enum gdb_signal signal);\n extern int gdbarch_process_record_signal (struct gdbarch *gdbarch, struct regcache *regcache, enum gdb_signal signal);\n@@ -1148,7 +1148,7 @@ extern void set_gdbarch_process_record_signal (struct gdbarch *gdbarch, gdbarch_\n    \"Live\" targets hide the translation behind the target interface\n    (target_wait, target_resume, etc.). */\n \n-extern int gdbarch_gdb_signal_from_target_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_gdb_signal_from_target_p (struct gdbarch *gdbarch);\n \n typedef enum gdb_signal (gdbarch_gdb_signal_from_target_ftype) (struct gdbarch *gdbarch, int signo);\n extern enum gdb_signal gdbarch_gdb_signal_from_target (struct gdbarch *gdbarch, int signo);\n@@ -1162,7 +1162,7 @@ extern void set_gdbarch_gdb_signal_from_target (struct gdbarch *gdbarch, gdbarch\n    Return the target signal number if found, or -1 if the GDB internal\n    signal number is invalid. */\n \n-extern int gdbarch_gdb_signal_to_target_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_gdb_signal_to_target_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_gdb_signal_to_target_ftype) (struct gdbarch *gdbarch, enum gdb_signal signal);\n extern int gdbarch_gdb_signal_to_target (struct gdbarch *gdbarch, enum gdb_signal signal);\n@@ -1172,15 +1172,15 @@ extern void set_gdbarch_gdb_signal_to_target (struct gdbarch *gdbarch, gdbarch_g\n   \n    Return a type suitable to inspect extra signal information. */\n \n-extern int gdbarch_get_siginfo_type_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_get_siginfo_type_p (struct gdbarch *gdbarch);\n \n typedef struct type * (gdbarch_get_siginfo_type_ftype) (struct gdbarch *gdbarch);\n extern struct type * gdbarch_get_siginfo_type (struct gdbarch *gdbarch);\n extern void set_gdbarch_get_siginfo_type (struct gdbarch *gdbarch, gdbarch_get_siginfo_type_ftype *get_siginfo_type);\n \n /* Record architecture-specific information from the symbol table. */\n \n-extern int gdbarch_record_special_symbol_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_record_special_symbol_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_record_special_symbol_ftype) (struct gdbarch *gdbarch, struct objfile *objfile, asymbol *sym);\n extern void gdbarch_record_special_symbol (struct gdbarch *gdbarch, struct objfile *objfile, asymbol *sym);\n@@ -1189,7 +1189,7 @@ extern void set_gdbarch_record_special_symbol (struct gdbarch *gdbarch, gdbarch_\n /* Function for the 'catch syscall' feature.\n    Get architecture-specific system calls information from registers. */\n \n-extern int gdbarch_get_syscall_number_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_get_syscall_number_p (struct gdbarch *gdbarch);\n \n typedef LONGEST (gdbarch_get_syscall_number_ftype) (struct gdbarch *gdbarch, thread_info *thread);\n extern LONGEST gdbarch_get_syscall_number (struct gdbarch *gdbarch, thread_info *thread);\n@@ -1296,7 +1296,7 @@ extern void set_gdbarch_stap_gdb_register_suffix (struct gdbarch *gdbarch, const\n    as much info as you can from the string, i.e., if you have to match\n    something like `(%', do not match just the `('. */\n \n-extern int gdbarch_stap_is_single_operand_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_stap_is_single_operand_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_stap_is_single_operand_ftype) (struct gdbarch *gdbarch, const char *s);\n extern int gdbarch_stap_is_single_operand (struct gdbarch *gdbarch, const char *s);\n@@ -1324,7 +1324,7 @@ extern void set_gdbarch_stap_is_single_operand (struct gdbarch *gdbarch, gdbarch\n    zero means that the special parser is deferring the parsing to the generic\n    parser), and should advance the buffer pointer (p->arg). */\n \n-extern int gdbarch_stap_parse_special_token_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_stap_parse_special_token_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_stap_parse_special_token_ftype) (struct gdbarch *gdbarch, struct stap_parse_info *p);\n extern int gdbarch_stap_parse_special_token (struct gdbarch *gdbarch, struct stap_parse_info *p);\n@@ -1354,7 +1354,7 @@ extern void set_gdbarch_stap_parse_special_token (struct gdbarch *gdbarch, gdbar\n   \n    The rationale for this can be found at PR breakpoints/24541. */\n \n-extern int gdbarch_stap_adjust_register_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_stap_adjust_register_p (struct gdbarch *gdbarch);\n \n typedef std::string (gdbarch_stap_adjust_register_ftype) (struct gdbarch *gdbarch, struct stap_parse_info *p, const std::string &regname, int regnum);\n extern std::string gdbarch_stap_adjust_register (struct gdbarch *gdbarch, struct stap_parse_info *p, const std::string &regname, int regnum);\n@@ -1364,7 +1364,7 @@ extern void set_gdbarch_stap_adjust_register (struct gdbarch *gdbarch, gdbarch_s\n    The expression to compute the NARTGth+1 argument to a DTrace USDT probe.\n    NARG must be >= 0. */\n \n-extern int gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_dtrace_parse_probe_argument_ftype) (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n extern void gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n@@ -1373,23 +1373,23 @@ extern void set_gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, gd\n /* True if the given ADDR does not contain the instruction sequence\n    corresponding to a disabled DTrace is-enabled probe. */\n \n-extern int gdbarch_dtrace_probe_is_enabled_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_dtrace_probe_is_enabled_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_dtrace_probe_is_enabled_ftype) (struct gdbarch *gdbarch, CORE_ADDR addr);\n extern int gdbarch_dtrace_probe_is_enabled (struct gdbarch *gdbarch, CORE_ADDR addr);\n extern void set_gdbarch_dtrace_probe_is_enabled (struct gdbarch *gdbarch, gdbarch_dtrace_probe_is_enabled_ftype *dtrace_probe_is_enabled);\n \n /* Enable a DTrace is-enabled probe at ADDR. */\n \n-extern int gdbarch_dtrace_enable_probe_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_dtrace_enable_probe_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_dtrace_enable_probe_ftype) (struct gdbarch *gdbarch, CORE_ADDR addr);\n extern void gdbarch_dtrace_enable_probe (struct gdbarch *gdbarch, CORE_ADDR addr);\n extern void set_gdbarch_dtrace_enable_probe (struct gdbarch *gdbarch, gdbarch_dtrace_enable_probe_ftype *dtrace_enable_probe);\n \n /* Disable a DTrace is-enabled probe at ADDR. */\n \n-extern int gdbarch_dtrace_disable_probe_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_dtrace_disable_probe_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_dtrace_disable_probe_ftype) (struct gdbarch *gdbarch, CORE_ADDR addr);\n extern void gdbarch_dtrace_disable_probe (struct gdbarch *gdbarch, CORE_ADDR addr);\n@@ -1474,7 +1474,7 @@ extern void set_gdbarch_gen_return_address (struct gdbarch *gdbarch, gdbarch_gen\n \n /* Implement the \"info proc\" command. */\n \n-extern int gdbarch_info_proc_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_info_proc_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_info_proc_ftype) (struct gdbarch *gdbarch, const char *args, enum info_proc_what what);\n extern void gdbarch_info_proc (struct gdbarch *gdbarch, const char *args, enum info_proc_what what);\n@@ -1484,7 +1484,7 @@ extern void set_gdbarch_info_proc (struct gdbarch *gdbarch, gdbarch_info_proc_ft\n    are two \"info_proc\"-like methods on gdbarch -- one for core files,\n    one for live targets. */\n \n-extern int gdbarch_core_info_proc_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_core_info_proc_p (struct gdbarch *gdbarch);\n \n typedef void (gdbarch_core_info_proc_ftype) (struct gdbarch *gdbarch, const char *args, enum info_proc_what what);\n extern void gdbarch_core_info_proc (struct gdbarch *gdbarch, const char *args, enum info_proc_what what);\n@@ -1543,7 +1543,7 @@ extern void set_gdbarch_program_breakpoint_here_p (struct gdbarch *gdbarch, gdba\n    Return -1 if there is insufficient buffer for a whole entry.\n    Return 1 if an entry was read into *TYPEP and *VALP. */\n \n-extern int gdbarch_auxv_parse_p (struct gdbarch *gdbarch);\n+extern bool gdbarch_auxv_parse_p (struct gdbarch *gdbarch);\n \n typedef int (gdbarch_auxv_parse_ftype) (struct gdbarch *gdbarch, gdb_byte **readptr, gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp);\n extern int gdbarch_auxv_parse (struct gdbarch *gdbarch, gdb_byte **readptr, gdb_byte *endptr, CORE_ADDR *typep, CORE_ADDR *valp);"
    },
    {
      "sha": "5fe37e0abc0942edc1035960d06d8914edfd5dc2",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3953519365a38f7cb31c00b150bd8e56caf8b314/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=3953519365a38f7cb31c00b150bd8e56caf8b314",
      "patch": "@@ -1388,7 +1388,7 @@ do\n     if class_is_predicate_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"extern int gdbarch_%s_p (struct gdbarch *gdbarch);\\n\" \"$function\"\n+\tprintf \"extern bool gdbarch_%s_p (struct gdbarch *gdbarch);\\n\" \"$function\"\n     fi\n     if class_is_variable_p\n     then\n@@ -2063,7 +2063,7 @@ do\n     if class_is_predicate_p\n     then\n \tprintf \"\\n\"\n-\tprintf \"int\\n\"\n+\tprintf \"bool\\n\"\n \tprintf \"gdbarch_%s_p (struct gdbarch *gdbarch)\\n\" \"$function\"\n \tprintf \"{\\n\"\n         printf \"  gdb_assert (gdbarch != NULL);\\n\""
    }
  ]
}