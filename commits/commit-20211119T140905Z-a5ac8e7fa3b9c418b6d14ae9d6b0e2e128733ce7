{
  "sha": "a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
  "node_id": "C_kwDOANOeidoAKGE1YWM4ZTdmYTNiOWM0MThiNmQxNGFlOWQ2YjBlMmUxMjg3MzNjZTc",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-19T14:09:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-19T14:09:05Z"
    },
    "message": "[gdb/testsuite] Fix 64-bit dwarf test-cases with -m32\n\nWhen running test-case gdb.dwarf2/loc-sec-offset.exp with target board -m32,\nI run into:\n...\nbuiltin_spawn -ignore SIGHUP gcc -fno-stack-protector -m32 \\\n  -fdiagnostics-color=never -c -o loc-sec-offset-dw641.o \\\n  loc-sec-offset-dw64.S^M\nas: loc-sec-offset-dw641.o: unsupported relocation type: 0x1^M\nloc-sec-offset-dw64.S: Assembler messages:^M\nloc-sec-offset-dw64.S:29: Error: cannot represent relocation type \\\n  BFD_RELOC_64^M\n...\n\nLooking at line 29, we have:\n...\n        .8byte        .Labbrev1_begin   /* Abbrevs */\n...\n\nIt would be nice if the assembler could handle this somehow.  But I guess\nit's not unreasonable that an assembler for a 32-bit architecture will object\nto handling 64-bit labels.\n\nInstead, work around this in the dwarf assembler by emitting:\n...\n        .4byte        .Labbrev1_begin   /* Abbrevs (lsw) */\n        .4byte        0                 /* Abbrevs (msw) */\n...\n\nTested on x86_64-linux with target board unix/-m32.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28383",
    "tree": {
      "sha": "7f8dfa58bcbe392198356bde1f02a104d83ace91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7f8dfa58bcbe392198356bde1f02a104d83ace91"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e5843d87c4050bf1109921481fb29e1c470827f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e5843d87c4050bf1109921481fb29e1c470827f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e5843d87c4050bf1109921481fb29e1c470827f"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 58,
    "deletions": 9
  },
  "files": [
    {
      "sha": "7dd82b8a3816a0737c345809c84e10e234da38cf",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 9,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
      "patch": "@@ -580,7 +580,7 @@ namespace eval Dwarf {\n \t    DW_FORM_GNU_strp_alt -\n \t    DW_FORM_sec_offset {\n \t\tvariable _cu_offset_size\n-\t\t_op .${_cu_offset_size}byte $value\n+\t\t_op_offset $_cu_offset_size $value\n \t    }\n \n \t    DW_FORM_ref1 -\n@@ -645,7 +645,7 @@ namespace eval Dwarf {\n \t\t    }\n \t\t}\n \n-\t\t_op .${_cu_offset_size}byte $_strings($value) \"strp: $value\"\n+\t\t_op_offset $_cu_offset_size $_strings($value) \"strp: $value\"\n \t    }\n \n \t    SPECIAL_expr {\n@@ -971,6 +971,28 @@ namespace eval Dwarf {\n \t_emit $text\n     }\n \n+    proc _op_offset { size offset {comment \"\"} } {\n+\tif { $size == 4 } {\n+\t    _op .4byte $offset $comment\n+\t} elseif { $size == 8 } {\n+\t    if {[is_64_target]} {\n+\t\t_op .8byte $offset $comment\n+\t    } else {\n+\t\t# This allows us to emit 64-bit dwarf for\n+\t\t# 32-bit targets.\n+\t\tif { [target_endianness] == \"little\" } {\n+\t\t    _op .4byte $offset \"$comment (lsw)\"\n+\t\t    _op .4byte 0 \"$comment (msw)\"\n+\t\t} else {\n+\t\t    _op .4byte 0 \"$comment (msw)\"\n+\t\t    _op .4byte $offset \"$comment (lsw)\"\n+\t\t}\n+\t    }\n+\t} else {\n+\t    error \"Don't know how to handle offset size $size\"\n+\t}\n+    }\n+\n     proc _compute_label {name} {\n \treturn \".L${name}\"\n     }\n@@ -1185,7 +1207,7 @@ namespace eval Dwarf {\n \t\t    if { $dwarf_version == 2 } {\n \t\t\t_op .${addr_size}byte $argvec(label)\n \t\t    } else {\n-\t\t\t_op .${offset_size}byte $argvec(label)\n+\t\t\t_op_offset $offset_size $argvec(label)\n \t\t    }\n \t\t    _op .sleb128 $argvec(offset)\n \t\t}\n@@ -1197,7 +1219,7 @@ namespace eval Dwarf {\n \t\t    if { $dwarf_version == 2 } {\n \t\t\t_op .${addr_size}byte $argvec(label)\n \t\t    } else {\n-\t\t\t_op .${offset_size}byte $argvec(label)\n+\t\t\t_op_offset $offset_size $argvec(label)\n \t\t    }\n \t\t}\n \n@@ -1344,9 +1366,9 @@ namespace eval Dwarf {\n \tif { $_cu_version == 5 } {\n \t    _op .byte 0x1 \"DW_UT_compile\"\n \t    _op .byte $_cu_addr_size \"Pointer size\"\n-\t    _op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n+\t    _op_offset $_cu_offset_size $my_abbrevs Abbrevs\n \t} else {\n-\t    _op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n+\t    _op_offset $_cu_offset_size $my_abbrevs Abbrevs\n \t    _op .byte $_cu_addr_size \"Pointer size\"\n \t}\n \n@@ -1440,7 +1462,7 @@ namespace eval Dwarf {\n \t}\n \tdefine_label $start_label\n \t_op .2byte $_cu_version Version\n-\t_op .${_cu_offset_size}byte $my_abbrevs Abbrevs\n+\t_op_offset $_cu_offset_size $my_abbrevs Abbrevs\n \t_op .byte $_cu_addr_size \"Pointer size\"\n \t_op .8byte $signature Signature\n \tif { $type_label != \"\" } {\n@@ -1666,7 +1688,9 @@ namespace eval Dwarf {\n \tif { ${with-offset-array} } {\n \t    for {set list_idx 0} {$list_idx < $_debug_rnglists_list_count} {incr list_idx} {\n \t\tset list_label [_compute_list_label $list_idx]\n-\t\t_op .${_debug_rnglists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t\t_op_offset $_debug_rnglists_offset_size \\\n+\t\t    \"$list_label - $post_header_label\" \\\n+\t\t    \"offset of list $list_idx\"\n \t    }\n \t}\n \n@@ -1852,7 +1876,9 @@ namespace eval Dwarf {\n \tif { ${with-offset-array} } {\n \t    for {set list_idx 0} {$list_idx < $_debug_loclists_list_count} {incr list_idx} {\n \t\tset list_label [_compute_list_label $list_idx]\n-\t\t_op .${_debug_loclists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t\t_op_offset $_debug_loclists_offset_size \\\n+\t\t    \"$list_label - $post_header_label\" \\\n+\t\t    \"offset of list $list_idx\"\n \t    }\n \t}\n "
    },
    {
      "sha": "deb1b8f213842882c7600ce08f65598ae3b3c418",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=a5ac8e7fa3b9c418b6d14ae9d6b0e2e128733ce7",
      "patch": "@@ -7085,6 +7085,29 @@ proc get_endianness { } {\n     return \"little\"\n }\n \n+# Get the target's default endianness and return it.\n+gdb_caching_proc target_endianness {\n+    global gdb_prompt\n+\n+    set me \"target_endianness\"\n+\n+    set src { int main() { return 0; } }\n+    if {![gdb_simple_compile $me $src executable]} {\n+        return 0\n+    }\n+\n+    clean_restart $obj\n+    if ![runto_main] {\n+        return 0\n+    }\n+    set res [get_endianness]\n+\n+    gdb_exit\n+    remote_file build delete $obj\n+\n+    return $res\n+}\n+\n # ROOT and FULL are file names.  Returns the relative path from ROOT\n # to FULL.  Note that FULL must be in a subdirectory of ROOT.\n # For example, given ROOT = /usr/bin and FULL = /usr/bin/ls, this"
    }
  ]
}