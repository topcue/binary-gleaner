{
  "sha": "86775fab42c7d6646722ee0404c4987b769a9dfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODY3NzVmYWI0MmM3ZDY2NDY3MjJlZTA0MDRjNDk4N2I3NjlhOWRmZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-06T13:40:22Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-06T20:58:06Z"
    },
    "message": "gdb: fix debug expression dumping of function call expressions\n\nIn commit:\n\n  commit 6d81691950f8c4be4a49a85a672255c140e82468\n  CommitDate: Sat Sep 19 09:44:58 2020 +0100\n\n    gdb/fortran: Move Fortran expression handling into f-lang.c\n\nA bug was introduced that broke GDB's ability to perform debug dumps\nof expressions containing function calls.  For example this would no\nlonger work:\n\n  (gdb) set debug expression 1\n  (gdb) print call_me (&val)\n  Dump of expression @ 0x4eced60, before conversion to prefix form:\n  \tLanguage c, 12 elements, 16 bytes each.\n  \tIndex                Opcode         Hex Value  String Value\n  \t    0          OP_VAR_VALUE  40  (...............\n  \t    1          OP_M2_STRING  79862864  P...............\n  \t    2   unknown opcode: 224  79862240  ................\n  \t    3          OP_VAR_VALUE  40  (...............\n  \t    4          OP_VAR_VALUE  40  (...............\n  \t    5         OP_RUST_ARRAY  79861600  `...............\n  \t    6     UNOP_PREDECREMENT  79861312  @...............\n  \t    7          OP_VAR_VALUE  40  (...............\n  \t    8             UNOP_ADDR  61  =...............\n  \t    9            OP_FUNCALL  46  ................\n  \t   10             BINOP_ADD  1  ................\n  \t   11            OP_FUNCALL  46  ................\n  Dump of expression @ 0x4eced60, after conversion to prefix form:\n  Expression: `call_me (&main::val, VAL(Aborted (core dumped)\n\nThe situation was even worse for Fortran function calls, or array\nindexes, which both make use of the same expression opcode.\n\nThe problem was that in a couple of places the index into the\nexpression array was handled incorrectly causing GDB to interpret\nelements incorrectly.  These issues are fixed in this commit.\n\nThere are already some tests to check GDB when 'set debug expression\n1' is set, these can be found in gdb.*/debug-expr.exp.  Unfortunately\nthe cases above were not covered.\n\nIn this commit I have cleaned up all of the debug-expr.exp files a\nlittle, there was a helper function that had clearly been copied into\neach file, this is now moved into lib/gdb.exp.\n\nI've added a gdb.fortran/debug-expr.exp test file, and extended\ngdb.base/debug-expr.exp to cover the function call case.\n\ngdb/ChangeLog:\n\n\t* expprint.c (print_subexp_funcall): Increment expression position\n\tafter reading argument count.\n\t* f-lang.c (print_subexp_f): Skip over opcode before calling\n\tcommon function.\n\t(dump_subexp_body_f): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/debug-expr.c: Add extra function to allow for an\n\tadditional test.\n\t* gdb.base/debug-expr.exp (test_debug_expr): Delete, replace calls\n\tto this proc with gdb_test_debug_expr.  Add an extra test.\n\t* gdb.cp/debug-expr.exp (test_debug_expr): Delete, replace calls\n\tto this proc with gdb_test_debug_expr, give the tests names\n\t* gdb.dlang/debug-expr.exp (test_debug_expr): Delete, replace\n\tcalls to this proc with gdb_test_debug_expr, give the tests names\n\t* gdb.fortran/debug-expr.exp: New file.\n\t* gdb.fortran/debug-expr.f90: New file.\n\t* lib/gdb.exp (gdb_test_debug_expr): New proc.",
    "tree": {
      "sha": "e72b1d594451834908de34b212001eca4f499f42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e72b1d594451834908de34b212001eca4f499f42"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/86775fab42c7d6646722ee0404c4987b769a9dfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86775fab42c7d6646722ee0404c4987b769a9dfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/86775fab42c7d6646722ee0404c4987b769a9dfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86775fab42c7d6646722ee0404c4987b769a9dfe/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1945bd4520d2964e7d022b9171bf6bb58d8e90a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1945bd4520d2964e7d022b9171bf6bb58d8e90a"
    }
  ],
  "stats": {
    "total": 215,
    "additions": 160,
    "deletions": 55
  },
  "files": [
    {
      "sha": "67a151b5c96024e9bf47d470a3f7a3ca3d73795b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* expprint.c (print_subexp_funcall): Increment expression position\n+\tafter reading argument count.\n+\t* f-lang.c (print_subexp_f): Skip over opcode before calling\n+\tcommon function.\n+\t(dump_subexp_body_f): Likewise.\n+\n 2020-11-06  Romain Geissler  <romain.geissler@amadeus.com>\n \n \tPR python/26832"
    },
    {
      "sha": "29e6237ab4d8f8780c79a3175fff1a3bd9bd8096",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -60,8 +60,8 @@ void\n print_subexp_funcall (struct expression *exp, int *pos,\n \t\t      struct ui_file *stream)\n {\n-  (*pos) += 2;\n   unsigned nargs = longest_to_int (exp->elts[*pos].longconst);\n+  (*pos) += 2;\n   print_subexp (exp, pos, stream, PREC_SUFFIX);\n   fputs_filtered (\" (\", stream);\n   for (unsigned tem = 0; tem < nargs; tem++)"
    },
    {
      "sha": "b775fae2e794c44bc7e88a4ed560da0ad1a32a4f",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -614,6 +614,7 @@ print_subexp_f (struct expression *exp, int *pos,\n       return;\n \n     case OP_F77_UNDETERMINED_ARGLIST:\n+      (*pos)++;\n       print_subexp_funcall (exp, pos, stream);\n       return;\n     }\n@@ -660,7 +661,7 @@ dump_subexp_body_f (struct expression *exp,\n       break;\n \n     case OP_F77_UNDETERMINED_ARGLIST:\n-      return dump_subexp_body_funcall (exp, stream, elt);\n+      return dump_subexp_body_funcall (exp, stream, elt + 1);\n     }\n \n   elt += oplen;"
    },
    {
      "sha": "d3e81a2f08d3753eec20e6ed7214f15e7847bdf5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -1,3 +1,17 @@\n+2020-11-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/debug-expr.c: Add extra function to allow for an\n+\tadditional test.\n+\t* gdb.base/debug-expr.exp (test_debug_expr): Delete, replace calls\n+\tto this proc with gdb_test_debug_expr.  Add an extra test.\n+\t* gdb.cp/debug-expr.exp (test_debug_expr): Delete, replace calls\n+\tto this proc with gdb_test_debug_expr, give the tests names\n+\t* gdb.dlang/debug-expr.exp (test_debug_expr): Delete, replace\n+\tcalls to this proc with gdb_test_debug_expr, give the tests names\n+\t* gdb.fortran/debug-expr.exp: New file.\n+\t* gdb.fortran/debug-expr.f90: New file.\n+\t* lib/gdb.exp (gdb_test_debug_expr): New proc.\n+\n 2020-11-06  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* lib/dwarf.exp (ranges): Handle \"base\" and \"range\" as"
    },
    {
      "sha": "f7c3dbc5b8e19c674da95022039b24b3463a72ee",
      "filename": "gdb/testsuite/gdb.base/debug-expr.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.base/debug-expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.base/debug-expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/debug-expr.c?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -1,7 +1,15 @@\n char array[4];\n \n+int\n+call_me (int *arg)\n+{\n+  return (*arg) - 1;\n+}\n+\n+int val = 1;\n+\n int\n main ()\n {\n-  return 0;\n+  return call_me (&val);\n }"
    },
    {
      "sha": "b0318bcd94615c0f93fbc2e2869d33116c98e08c",
      "filename": "gdb/testsuite/gdb.base/debug-expr.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 18,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.base/debug-expr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.base/debug-expr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/debug-expr.exp?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -33,32 +33,22 @@ if ![runto_main] {\n     return -1\n }\n \n-# Test whether the expression debug machinery accepts the expression.\n-\n-proc test_debug_expr { cmd output } {\n-    global gdb_prompt\n-\n-    gdb_test_multiple $cmd \"\" {\n-\t-re \".*Invalid expression.*\\r\\n$gdb_prompt $\" {\n-\t    fail $cmd\n-\t}\n-\t-re \".*\\[\\r\\n\\]$output\\r\\n$gdb_prompt $\" {\n-\t    pass $cmd\n-\t}\n-    }\n-}\n-\n for { set i 0 } { $i < 4 } { incr i } {\n     gdb_test_no_output \"set variable array\\[$i\\] = $i\"\n }\n \n gdb_test_no_output \"set debug expression 1\"\n \n # This caused gdb to segfault.\n-test_debug_expr \"print /x {char\\[4\\]} array\" \\\n+gdb_test_debug_expr \"print /x {char\\[4\\]} array\" \\\n     \"\\[$\\]$decimal = \\\\{0x0, 0x1, 0x2, 0x3\\\\}\"\n \n # This caused gdb to output garbage and possibly segfault\n-gdb_test \"print \\\"hello\\\"\" \\\n-    \".*OP_STRING\\[^\\r\\n\\]*Language-specific string type: 0.*\\[\\r\\n\\]\\\\$$decimal = \\\"hello\\\"\\[\\r\\n\\].*\" \\\n+gdb_test_debug_expr \"print \\\"hello\\\"\" \\\n+    \".*OP_STRING\\[^\\r\\n\\]*Language-specific string type: 0.*\\[\\r\\n\\]\\\\$$decimal = \\\"hello\\\"\" \\\n     \"string evaluation with debug expr\"\n+\n+# An expression using a function call.\n+gdb_test_debug_expr \"print call_me ( &val )\" \\\n+    \".*OP_FUNCALL\\[^\\r\\n\\]*Number of args: 1.*\\[\\r\\n\\]\\\\$$decimal = 0.*\" \\\n+    \"function call expression\""
    },
    {
      "sha": "77462c5b3f24bbba680e9a8d811b8c965341a669",
      "filename": "gdb/testsuite/gdb.cp/debug-expr.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 18,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.cp/debug-expr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.cp/debug-expr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/debug-expr.exp?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -21,23 +21,11 @@ gdb_start\n gdb_test_no_output \"set language c++\"\n gdb_test_no_output \"set debug expression 1\"\n \n-# Test whether the expression debug machinery accepts the expression.\n-\n-proc test_debug_expr { cmd output } {\n-    global gdb_prompt\n-\n-    gdb_test_multiple $cmd \"\" {\n-\t-re \".*Invalid expression.*\\r\\n$gdb_prompt $\" {\n-\t    fail $cmd\n-\t}\n-\t-re \".*\\[\\r\\n\\]$output\\r\\n$gdb_prompt $\" {\n-\t    pass $cmd\n-\t}\n-    }\n-}\n-\n set void_star_zero_regex \"\\[$\\]$decimal = \\\\(void \\[*\\]\\\\) 0x0\"\n \n-test_debug_expr \"print static_cast<void*>(0)\" \"$void_star_zero_regex\"\n-test_debug_expr \"print reinterpret_cast<void*>(0)\" \"$void_star_zero_regex\"\n-test_debug_expr \"print dynamic_cast<void*>(0)\" \"$void_star_zero_regex\"\n+gdb_test_debug_expr \"print static_cast<void*>(0)\" \\\n+    \"$void_star_zero_regex\" \"static_cast of zero to void*\"\n+gdb_test_debug_expr \"print reinterpret_cast<void*>(0)\" \\\n+    \"$void_star_zero_regex\" \"reinterpret_cast of zero to void*\"\n+gdb_test_debug_expr \"print dynamic_cast<void*>(0)\" \\\n+    \"$void_star_zero_regex\" \"dynamic_cast of zero to void*\""
    },
    {
      "sha": "6b8ad0cb09f5e470fe34f72734eeeb3a26d3a55a",
      "filename": "gdb/testsuite/gdb.dlang/debug-expr.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 16,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.dlang/debug-expr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.dlang/debug-expr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dlang/debug-expr.exp?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -21,20 +21,7 @@ gdb_start\n gdb_test_no_output \"set language d\"\n gdb_test_no_output \"set debug expression 1\"\n \n-# Test whether the expression debug machinery accepts the expression.\n-\n-proc test_debug_expr { cmd output } {\n-    global gdb_prompt\n-\n-    gdb_test_multiple $cmd \"\" {\n-\t-re \".*Invalid expression.*\\r\\n$gdb_prompt $\" {\n-\t    fail $cmd\n-\t}\n-\t-re \".*\\[\\r\\n\\]$output\\r\\n$gdb_prompt $\" {\n-\t    pass $cmd\n-\t}\n-    }\n-}\n-\n # This caused gdb to segfault.\n-test_debug_expr \"print *(int*)(0)\" \"Cannot access memory at address 0x0\"\n+gdb_test_debug_expr \"print *(int*)(0)\" \\\n+    \"Cannot access memory at address 0x0\" \\\n+    \"dereference a null pointer\""
    },
    {
      "sha": "19df7bdecbcab3b0d3b54e468636077807137e59",
      "filename": "gdb/testsuite/gdb.fortran/debug-expr.exp",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.fortran/debug-expr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.fortran/debug-expr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/debug-expr.exp?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -0,0 +1,43 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"set debug expr 1\" on Fortran expressions.\n+\n+if { [skip_fortran_tests] } { return -1 }\n+\n+# Test relies on checking gdb debug output. Do not run if gdb debug is\n+# enabled as any debug will be redirected to the log.\n+if [gdb_debug_enabled] {\n+    untested \"debug is enabled\"\n+    return 0\n+}\n+\n+standard_testfile .f90\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    fail \"run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break Here\"]\n+gdb_continue_to_breakpoint \"Break Here\"\n+\n+gdb_test_no_output \"set debug expression 1\"\n+gdb_test_debug_expr \"print obj%three(1)%two(1)%one(1)%i\" \"\\\\\\$$decimal = 1\""
    },
    {
      "sha": "8071f1b8d189febc11b6e74d8772f41e15502ddb",
      "filename": "gdb/testsuite/gdb.fortran/debug-expr.f90",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.fortran/debug-expr.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/gdb.fortran/debug-expr.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/debug-expr.f90?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -0,0 +1,38 @@\n+! Copyright 2020 Free Software Foundation, Inc.\n+\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+program main\n+  type data_item\n+     integer(kind=4) i, j, k\n+  end type data_item\n+\n+  type level_one\n+     type(data_item) :: one(3)\n+  end type level_one\n+\n+  type level_two\n+     type(level_one) :: two(3)\n+  end type level_two\n+\n+  type level_three\n+     type(level_two) :: three(3)\n+  end type level_three\n+\n+  type (level_three) obj\n+\n+  obj%three(1)%two(1)%one(1)%i = 1\n+\n+  print *, obj ! Break Here\n+end program"
    },
    {
      "sha": "55154db6a50e843b4ec7d314117fc478de43563e",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86775fab42c7d6646722ee0404c4987b769a9dfe/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=86775fab42c7d6646722ee0404c4987b769a9dfe",
      "patch": "@@ -1656,6 +1656,34 @@ proc gdb_test_stdio {command inferior_pattern {gdb_pattern \"\"} {message \"\"}} {\n     return $res\n }\n \n+# Wrapper around gdb_test_multiple to be used when testing expression\n+# evaluation while 'set debug expression 1' is in effect.\n+# Looks for some patterns that indicates the expression was rejected.\n+#\n+# CMD is the command to execute, which should include an expression\n+# that GDB will need to parse.\n+#\n+# OUTPUT is the expected output pattern.\n+#\n+# TESTNAME is the name to be used for the test, defaults to CMD if not\n+# given.\n+proc gdb_test_debug_expr { cmd output {testname \"\" }} {\n+    global gdb_prompt\n+\n+    if { ${testname} == \"\" } {\n+\tset testname $cmd\n+    }\n+\n+    gdb_test_multiple $cmd $testname {\n+\t-re \".*Invalid expression.*\\r\\n$gdb_prompt $\" {\n+\t    fail $gdb_test_name\n+\t}\n+\t-re \".*\\[\\r\\n\\]$output\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+}\n+\n # get_print_expr_at_depths EXP OUTPUTS\n #\n # Used for testing 'set print max-depth'.  Prints the expression EXP"
    }
  ]
}