{
  "sha": "9fe3819e83a442f1bd563000120121e5518f7d53",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWZlMzgxOWU4M2E0NDJmMWJkNTYzMDAwMTIwMTIxZTU1MThmN2Q1Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-30T20:10:41Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-31T13:55:31Z"
    },
    "message": "gdb: remove breakpoint_find_if\n\nRemove breakpoint_find_if, replace its sole usage with using\nall_breakpoints directly instead.  At the same time, change return\ntypes to use bool.\n\nChange-Id: I9ec392236b4804b362d16ab563330b9c07311106",
    "tree": {
      "sha": "460f1bcd0c4c163581170e926f48e15b01d12d66",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/460f1bcd0c4c163581170e926f48e15b01d12d66"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9fe3819e83a442f1bd563000120121e5518f7d53",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fe3819e83a442f1bd563000120121e5518f7d53",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9fe3819e83a442f1bd563000120121e5518f7d53",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fe3819e83a442f1bd563000120121e5518f7d53/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "88ae41e17980533927f98339bcb40015522f06c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88ae41e17980533927f98339bcb40015522f06c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/88ae41e17980533927f98339bcb40015522f06c4"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 15,
    "deletions": 44
  },
  "files": [
    {
      "sha": "32736f024ad2f4f74dac2eeb6c587e35efb3447d",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=9fe3819e83a442f1bd563000120121e5518f7d53",
      "patch": "@@ -486,15 +486,12 @@ catch_syscall_enabled (void)\n   return inf_data->total_syscalls_count != 0;\n }\n \n-/* Helper function for catching_syscall_number.  If B is a syscall\n-   catchpoint for SYSCALL_NUMBER, return 1 (which will make\n-   'breakpoint_find_if' return).  Otherwise, return 0.  */\n+/* Helper function for catching_syscall_number.  return true if B is a syscall\n+   catchpoint for SYSCALL_NUMBER, else false.  */\n \n-static int\n-catching_syscall_number_1 (struct breakpoint *b,\n-\t\t\t   void *data)\n+static bool\n+catching_syscall_number_1 (struct breakpoint *b, int syscall_number)\n {\n-  int syscall_number = (int) (uintptr_t) data;\n \n   if (is_syscall_catchpoint_enabled (b))\n     {\n@@ -504,22 +501,23 @@ catching_syscall_number_1 (struct breakpoint *b,\n \t{\n \t  for (int iter : c->syscalls_to_be_caught)\n \t    if (syscall_number == iter)\n-\t      return 1;\n+\t      return true;\n \t}\n       else\n-\treturn 1;\n+\treturn true;\n     }\n \n-  return 0;\n+  return false;\n }\n \n-int\n+bool\n catching_syscall_number (int syscall_number)\n {\n-  struct breakpoint *b = breakpoint_find_if (catching_syscall_number_1,\n-\t\t\t\t\t (void *) (uintptr_t) syscall_number);\n+  for (breakpoint *b : all_breakpoints ())\n+    if (catching_syscall_number_1 (b, syscall_number))\n+      return true;\n \n-  return b != NULL;\n+  return false;\n }\n \n /* Complete syscall names.  Used by \"catch syscall\".  */"
    },
    {
      "sha": "f6c9683aecf1c1c6e5009d091616a22a52e24cd3",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=9fe3819e83a442f1bd563000120121e5518f7d53",
      "patch": "@@ -627,19 +627,6 @@ static struct cmd_list_element *breakpoint_set_cmdlist;\n static struct cmd_list_element *breakpoint_show_cmdlist;\n struct cmd_list_element *save_cmdlist;\n \n-/* See declaration at breakpoint.h.  */\n-\n-struct breakpoint *\n-breakpoint_find_if (int (*func) (struct breakpoint *b, void *d),\n-\t\t    void *user_data)\n-{\n-  for (breakpoint *b : all_breakpoints ())\n-    if (func (b, user_data) != 0)\n-      return b;\n-\n-  return nullptr;\n-}\n-\n /* Return whether a breakpoint is an active enabled breakpoint.  */\n static int\n breakpoint_enabled (struct breakpoint *b)"
    },
    {
      "sha": "2b15622f98d250c665414d29d5c96e86c5f6ae0a",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=9fe3819e83a442f1bd563000120121e5518f7d53",
      "patch": "@@ -885,20 +885,6 @@ struct watchpoint : public breakpoint\n   CORE_ADDR hw_wp_mask;\n };\n \n-/* Given a function FUNC (struct breakpoint *B, void *DATA) and\n-   USER_DATA, call FUNC for every known breakpoint passing USER_DATA\n-   as argument.\n-\n-   If FUNC returns 1, the loop stops and the current\n-   'struct breakpoint' being processed is returned.  If FUNC returns\n-   zero, the loop continues.\n-\n-   This function returns either a 'struct breakpoint' pointer or NULL.\n-   It was based on BFD's bfd_sections_find_if function.  */\n-\n-extern struct breakpoint *breakpoint_find_if\n-  (int (*func) (struct breakpoint *b, void *d), void *user_data);\n-\n /* Return true if BPT is either a software breakpoint or a hardware\n    breakpoint.  */\n \n@@ -1678,8 +1664,8 @@ extern int catch_syscall_enabled (void);\n \n /* Checks if we are catching syscalls with the specific\n    syscall_number.  Used for \"filtering\" the catchpoints.\n-   Returns 0 if not, greater than 0 if we are.  */\n-extern int catching_syscall_number (int syscall_number);\n+   Returns false if not, true if we are.  */\n+extern bool catching_syscall_number (int syscall_number);\n \n /* Return a tracepoint with the given number if found.  */\n extern struct tracepoint *get_tracepoint (int num);"
    },
    {
      "sha": "694bbe665f4bc829285827c4ecaa6d237742914d",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fe3819e83a442f1bd563000120121e5518f7d53/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=9fe3819e83a442f1bd563000120121e5518f7d53",
      "patch": "@@ -4458,7 +4458,7 @@ handle_syscall_event (struct execution_control_state *ecs)\n   ecs->event_thread->set_stop_pc (regcache_read_pc (regcache));\n \n   if (catch_syscall_enabled () > 0\n-      && catching_syscall_number (syscall_number) > 0)\n+      && catching_syscall_number (syscall_number))\n     {\n       infrun_debug_printf (\"syscall number=%d\", syscall_number);\n "
    }
  ]
}