{
  "sha": "9221725d1f6e3f5dd0c0143ee750460619c582f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTIyMTcyNWQxZjZlM2Y1ZGQwYzAxNDNlZTc1MDQ2MDYxOWM1ODJmMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-23T14:20:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-23T15:20:48Z"
    },
    "message": "PR26150, Assertion when asm() defines global symbols, -flto and --start-group\n\nIf an archive map contains symbols that aren't actually defined by the\nindexed element for any reason, then loading that element will leave\nthe symbol undefined (or common).  This leads to the possibility of\nthe element being loaded again should the archive be searched again\ndue to the action of --start-group/--end-group.  The testcase\ntriggering this problem was an archive containing fat lto objects,\nwith the archive map incorrectly created by ar rather than gcc-ar.\n\n\tPR 26150\n\t* ldlang.c (ldlang_add_file): Assert that we aren't adding the\n\tcurrent end of link.next list again too.\n\t* ldmain.c (add_archive_element): Don't load archive elements\n\tagain that have already been loaded.",
    "tree": {
      "sha": "d3c8991309aa4961a98a10489063eb6bc70ef8d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d3c8991309aa4961a98a10489063eb6bc70ef8d9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9221725d1f6e3f5dd0c0143ee750460619c582f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9221725d1f6e3f5dd0c0143ee750460619c582f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9221725d1f6e3f5dd0c0143ee750460619c582f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9221725d1f6e3f5dd0c0143ee750460619c582f2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39f381cb80463bd814da549a927bee4643d4ceac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39f381cb80463bd814da549a927bee4643d4ceac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39f381cb80463bd814da549a927bee4643d4ceac"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 27,
    "deletions": 5
  },
  "files": [
    {
      "sha": "a2e3f62e9e76d59496636e58c83fee6035bc82ed",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=9221725d1f6e3f5dd0c0143ee750460619c582f2",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-23  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26150\n+\t* ldlang.c (ldlang_add_file): Assert that we aren't adding the\n+\tcurrent end of link.next list again too.\n+\t* ldmain.c (add_archive_element): Don't load archive elements\n+\tagain that have already been loaded.\n+\n 2020-06-23  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-elf/shared.exp (pr14170): Clear xfail for"
    },
    {
      "sha": "38ed83a274b34138eff369f7d6282bda14c7c907",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=9221725d1f6e3f5dd0c0143ee750460619c582f2",
      "patch": "@@ -7266,7 +7266,8 @@ ldlang_add_file (lang_input_statement_type *entry)\n \n   /* The BFD linker needs to have a list of all input BFDs involved in\n      a link.  */\n-  ASSERT (entry->the_bfd->link.next == NULL);\n+  ASSERT (link_info.input_bfds_tail != &entry->the_bfd->link.next\n+\t  && entry->the_bfd->link.next == NULL);\n   ASSERT (entry->the_bfd != link_info.output_bfd);\n \n   *link_info.input_bfds_tail = entry->the_bfd;"
    },
    {
      "sha": "94a745ec31592175d9b10ae924df53879c59bcef",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9221725d1f6e3f5dd0c0143ee750460619c582f2/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=9221725d1f6e3f5dd0c0143ee750460619c582f2",
      "patch": "@@ -822,10 +822,6 @@ add_archive_element (struct bfd_link_info *info,\n   input->local_sym_name = bfd_get_filename (abfd);\n   input->the_bfd = abfd;\n \n-  parent = bfd_usrdata (abfd->my_archive);\n-  if (parent != NULL && !parent->flags.reload)\n-    parent->next = input;\n-\n   /* Save the original data for trace files/tries below, as plugins\n      (if enabled) may possibly alter it to point to a replacement\n      BFD, but we still want to output the original BFD filename.  */\n@@ -853,6 +849,23 @@ add_archive_element (struct bfd_link_info *info,\n     }\n #endif /* BFD_SUPPORTS_PLUGINS */\n \n+  if (link_info.input_bfds_tail == &input->the_bfd->link.next\n+      || input->the_bfd->link.next != NULL)\n+    {\n+      /* We have already loaded this element, and are attempting to\n+\t load it again.  This can happen when the archive map doesn't\n+\t match actual symbols defined by the element.  */\n+      free (input);\n+      bfd_set_error (bfd_error_malformed_archive);\n+      return FALSE;\n+    }\n+\n+  /* Set the file_chain pointer of archives to the last element loaded\n+     from the archive.  See ldlang.c:find_rescan_insertion.  */\n+  parent = bfd_usrdata (abfd->my_archive);\n+  if (parent != NULL && !parent->flags.reload)\n+    parent->next = input;\n+\n   ldlang_add_file (input);\n \n   if (config.map_file != NULL)"
    }
  ]
}