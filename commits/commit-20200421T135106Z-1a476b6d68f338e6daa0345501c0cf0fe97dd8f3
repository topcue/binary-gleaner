{
  "sha": "1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWE0NzZiNmQ2OGYzMzhlNmRhYTAzNDU1MDFjMGNmMGZlOTdkZDhmMw==",
  "commit": {
    "author": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2020-03-18T09:53:41Z"
    },
    "committer": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2020-04-21T13:51:06Z"
    },
    "message": "gdb, btrace: forward fetch_registers for unknown threads\n\nIn the record-btrace target, while replaying, we can only provide the PC\nregister.  The btrace state is stored in the thread_info.  So, when trying\nto determine whether we are currently replaying, GDB calls\nfind_thread_ptid() to obtain the thread_info.  It also asserts that we do\nhave a thread_info.\n\nFor new threads, libthread-db may fetch registers before the thread is\nknown to GDB.  In this case, find_thread_ptid() returns nullptr and the\nassertion fails.\n\nForward the fetch_registers request to the target beneath in that case.\n\ngdb/ChangeLog:\n\n2020-03-19  Markus Metzger  <markus.t.metzger@intel.com>\n\n\t* record-btrace.c (record_btrace_target::fetch_registers): Forward\n\trequest if we do not have a thread_info.\n\ngdb/testsuite/ChangeLog:\n\n2020-03-19  Markus Metzger  <markus.t.metzger@intel.com>\n\n\t* gdb.btrace/enable-new-thread.c: New test.\n\t* gdb.btrace/enable-new-thread.exp: New file.",
    "tree": {
      "sha": "f9e909c6d92dfbd11943892ccb24458b680251ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f9e909c6d92dfbd11943892ccb24458b680251ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/comments",
  "author": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4778a5f87d253399083565b4919816f541ebe414",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4778a5f87d253399083565b4919816f541ebe414",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4778a5f87d253399083565b4919816f541ebe414"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 111,
    "deletions": 3
  },
  "files": [
    {
      "sha": "c761d498b7f37aa46a0070d8da863a4d0554cd14",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-21  Markus Metzger  <markus.t.metzger@intel.com>\n+\n+\t* record-btrace.c (record_btrace_target::fetch_registers): Forward\n+\trequest if we do not have a thread_info.\n+\n 2020-04-21  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/25471"
    },
    {
      "sha": "9b04d060149c41edbf0d5c030d1a05d96da00bce",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
      "patch": "@@ -1532,11 +1532,16 @@ record_btrace_target::remove_breakpoint (struct gdbarch *gdbarch,\n void\n record_btrace_target::fetch_registers (struct regcache *regcache, int regno)\n {\n+  btrace_insn_iterator *replay = nullptr;\n+\n+  /* Thread-db may ask for a thread's registers before GDB knows about the\n+     thread.  We forward the request to the target beneath in this\n+     case.  */\n   thread_info *tp = find_thread_ptid (regcache->target (), regcache->ptid ());\n-  gdb_assert (tp != NULL);\n+  if (tp != nullptr)\n+    replay =  tp->btrace.replay;\n \n-  btrace_insn_iterator *replay = tp->btrace.replay;\n-  if (replay != NULL && !record_btrace_generating_corefile)\n+  if (replay != nullptr && !record_btrace_generating_corefile)\n     {\n       const struct btrace_insn *insn;\n       struct gdbarch *gdbarch;"
    },
    {
      "sha": "09ad4cd3d237f749765e598b62ff90fa1fafdbad",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-21  Markus Metzger  <markus.t.metzger@intel.com>\n+\n+\t* gdb.btrace/enable-new-thread.c: New test.\n+\t* gdb.btrace/enable-new-thread.exp: New file.\n+\n 2020-04-21  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/25471"
    },
    {
      "sha": "d4dc240e31467e08270aab8e5c85610d61f70778",
      "filename": "gdb/testsuite/gdb.btrace/enable-new-thread.c",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/gdb.btrace/enable-new-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/gdb.btrace/enable-new-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.btrace/enable-new-thread.c?ref=1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
      "patch": "@@ -0,0 +1,36 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+static void *\n+test (void *arg)\n+{\n+  return arg; /* bp.1 */\n+}\n+\n+int\n+main (void)\n+{\n+  pthread_t th;\n+\n+  pthread_create (&th, NULL, test, NULL);\n+  pthread_join (th, NULL);\n+\n+  return 0;\n+}"
    },
    {
      "sha": "e8b17ad0ba278251ab00a129a31888adb6382a45",
      "filename": "gdb/testsuite/gdb.btrace/enable-new-thread.exp",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/gdb.btrace/enable-new-thread.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a476b6d68f338e6daa0345501c0cf0fe97dd8f3/gdb/testsuite/gdb.btrace/enable-new-thread.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.btrace/enable-new-thread.exp?ref=1a476b6d68f338e6daa0345501c0cf0fe97dd8f3",
      "patch": "@@ -0,0 +1,57 @@\n+# This testcase is part of GDB, the GNU debugger.\n+#\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that new threads of recorded inferiors also get recorded.\n+\n+if { [skip_btrace_tests] } {\n+    unsupported \"target does not support record-btrace\"\n+    return -1\n+}\n+\n+standard_testfile\n+if [prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug pthreads}] {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    untested \"failed to run to main\"\n+    return -1\n+}\n+\n+# Record the main thread.  Recording will automatically be enabled for the\n+# other thread.\n+gdb_test \"record btrace\"\n+\n+gdb_breakpoint [gdb_get_line_number \"bp.1\" $srcfile]\n+gdb_continue_to_breakpoint \"cont to bp.1\" \".*/\\\\* bp\\.1 \\\\*/.*\"\n+\n+proc check_thread_recorded { num } {\n+    global decimal\n+\n+    with_test_prefix \"thread $num\" {\n+\tgdb_test \"thread $num\" \"Switching to thread $num.*\"\n+\n+\tgdb_test \"info record\" [multi_line \\\n+\t    \"Active record target: record-btrace\" \\\n+\t    \".*\" \\\n+\t    \"Recorded $decimal instructions in $decimal functions \\[^\\\\\\r\\\\\\n\\]*\" \\\n+       ]\n+    }\n+}\n+\n+check_thread_recorded 1\n+check_thread_recorded 2"
    }
  ]
}