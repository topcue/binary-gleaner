{
  "sha": "36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzY5ODNhOTNiYjMzOGI3Y2RkNmY3ZDZmOWY5MWRjOWNlOTgxNWI0ZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-10T01:00:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-10T07:46:16Z"
    },
    "message": "lang_input_statement_type next pointers\n\n\"next\" and \"next_real_file\" in lang_input_statement_type always point\nto another lang_input_statement_type, so it makes sense for these to\nnot be the generic lang_statement_union_type.  This patch also updates\na number of variables in ldlang.c for the same reason, and modifies\nlang_statement_append to reduce the need for casts.\n\n\t* ldlang.h (lang_input_statement_type): Make next\n\tand next_real_file a lang_input_statement_type pointer.\n\t(lang_statement_append): Delete prototype.\n\t(LANG_FOR_EACH_INPUT_STATEMENT): Update for lang_input_statement_type\n\tchange.\n\t* ldmain.c (add_archive_element): Likewise.\n\t* ldlang.c: Likewise throughout.\n\t(lang_statement_append): Make static.  Make element and field\n\tvoid pointers.  Remove casts in calls.\n\t(lang_check): Use a lang_input_statement_type pointer for \"file\".\n\t(find_rescan_insertion): Similarly for \"iter\" and return value.\n\t(lang_process): Similarly for \"insert\", \"iter\" and \"temp\".\n\t* emultempl/spuelf.em (embedded_spu_file): Likewise.\n\t* emultempl/aix.em (gld${EMULATION_NAME}_before_allocation): Expand\n\tlang_statment_append call.",
    "tree": {
      "sha": "226f938cd59f78af1aa427f65c1e5678bd9ea141",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/226f938cd59f78af1aa427f65c1e5678bd9ea141"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8be90e963138c88d7648c1eb2146e45f048d616e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8be90e963138c88d7648c1eb2146e45f048d616e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8be90e963138c88d7648c1eb2146e45f048d616e"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 67,
    "deletions": 56
  },
  "files": [
    {
      "sha": "d4cb36d5dd951535bd82d9fbf209a6ab2bd5de99",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -1,3 +1,21 @@\n+2019-08-10  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldlang.h (lang_input_statement_type): Make next\n+\tand next_real_file a lang_input_statement_type pointer.\n+\t(lang_statement_append): Delete prototype.\n+\t(LANG_FOR_EACH_INPUT_STATEMENT): Update for lang_input_statement_type\n+\tchange.\n+\t* ldmain.c (add_archive_element): Likewise.\n+\t* ldlang.c: Likewise throughout.\n+\t(lang_statement_append): Make static.  Make element and field\n+\tvoid pointers.  Remove casts in calls.\n+\t(lang_check): Use a lang_input_statement_type pointer for \"file\".\n+\t(find_rescan_insertion): Similarly for \"iter\" and return value.\n+\t(lang_process): Similarly for \"insert\", \"iter\" and \"temp\".\n+\t* emultempl/spuelf.em (embedded_spu_file): Likewise.\n+\t* emultempl/aix.em (gld${EMULATION_NAME}_before_allocation): Expand\n+\tlang_statment_append call.\n+\n 2019-08-09  Mihailo Stojanovic  <mihailo.stojanovic@rt-rk.com>\n \n \t* emulparams/elf32bmip.sh: Add .MIPS.xhash section."
    },
    {
      "sha": "8151a9d5e93bf0db5d40fc22a43076f8c14508ec",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -945,9 +945,8 @@ gld${EMULATION_NAME}_before_allocation (void)\n       else\n \t{\n \t  is->header.next = NULL;\n-\t  lang_statement_append (&os->children,\n-\t\t\t\t (lang_statement_union_type *) is,\n-\t\t\t\t &is->header.next);\n+\t  *os->children.tail = (lang_statement_union_type *) is;\n+\t  os->children.tail = &is->header.next;\n \t}\n     }\n "
    },
    {
      "sha": "5ddf41c54912423db8dcddb04a499dc2e7276912",
      "filename": "ld/emultempl/spuelf.em",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/emultempl/spuelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/emultempl/spuelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/spuelf.em?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -512,9 +512,9 @@ embedded_spu_file (lang_input_statement_type *entry, const char *flags)\n     return FALSE;\n   close (fd);\n \n-  for (search = (lang_input_statement_type *) input_file_chain.head;\n+  for (search = &input_file_chain.head->input_statement;\n        search != NULL;\n-       search = (lang_input_statement_type *) search->next_real_file)\n+       search = search->next_real_file)\n     if (search->filename != NULL)\n       {\n \tconst char *infile = base_name (search->filename);\n@@ -575,7 +575,7 @@ embedded_spu_file (lang_input_statement_type *entry, const char *flags)\n   new_ent->header.next = entry->header.next;\n   entry->header.next = new_ent;\n   new_ent->input_statement.next_real_file = entry->next_real_file;\n-  entry->next_real_file = new_ent;\n+  entry->next_real_file = &new_ent->input_statement;\n \n   /* Ensure bfd sections are excluded from the output.  */\n   bfd_section_list_clear (entry->the_bfd);"
    },
    {
      "sha": "3ec534e1fc191be0710e7f7249e5c086b64d11c7",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 40,
      "deletions": 43,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -1026,6 +1026,15 @@ lang_list_init (lang_statement_list_type *list)\n   list->tail = &list->head;\n }\n \n+static void\n+lang_statement_append (lang_statement_list_type *list,\n+\t\t       void *element,\n+\t\t       void *field)\n+{\n+  *(list->tail) = element;\n+  list->tail = field;\n+}\n+\n void\n push_stat_ptr (lang_statement_list_type *new_ptr)\n {\n@@ -1142,9 +1151,7 @@ new_afile (const char *name,\n       FAIL ();\n     }\n \n-  lang_statement_append (&input_file_chain,\n-\t\t\t (lang_statement_union_type *) p,\n-\t\t\t &p->next_real_file);\n+  lang_statement_append (&input_file_chain, p, &p->next_real_file);\n   return p;\n }\n \n@@ -1234,9 +1241,7 @@ output_section_statement_newfunc (struct bfd_hash_entry *entry,\n      address, so we store the pointer in a variable and cast that\n      instead.  */\n   nextp = &ret->s.output_section_statement.next;\n-  lang_statement_append (&lang_os_list,\n-\t\t\t &ret->s,\n-\t\t\t (lang_statement_union_type **) nextp);\n+  lang_statement_append (&lang_os_list, &ret->s, nextp);\n   return &ret->root;\n }\n \n@@ -2843,9 +2848,9 @@ lookup_name (const char *name)\n {\n   lang_input_statement_type *search;\n \n-  for (search = (lang_input_statement_type *) input_file_chain.head;\n+  for (search = &input_file_chain.head->input_statement;\n        search != NULL;\n-       search = (lang_input_statement_type *) search->next_real_file)\n+       search = search->next_real_file)\n     {\n       /* Use the local_sym_name as the name of the file that has\n \t already been loaded as filename might have been transformed\n@@ -6522,18 +6527,20 @@ ignore_bfd_errors (const char *fmt ATTRIBUTE_UNUSED,\n static void\n lang_check (void)\n {\n-  lang_statement_union_type *file;\n+  lang_input_statement_type *file;\n   bfd *input_bfd;\n   const bfd_arch_info_type *compatible;\n \n-  for (file = file_chain.head; file != NULL; file = file->input_statement.next)\n+  for (file = &file_chain.head->input_statement;\n+       file != NULL;\n+       file = file->next)\n     {\n #ifdef ENABLE_PLUGINS\n       /* Don't check format of files claimed by plugin.  */\n-      if (file->input_statement.flags.claimed)\n+      if (file->flags.claimed)\n \tcontinue;\n #endif /* ENABLE_PLUGINS */\n-      input_bfd = file->input_statement.the_bfd;\n+      input_bfd = file->the_bfd;\n       compatible\n \t= bfd_arch_get_compatible (input_bfd, link_info.output_bfd,\n \t\t\t\t   command_line.accept_unknown_input_arch);\n@@ -6868,7 +6875,7 @@ lang_for_each_input_file (void (*func) (lang_input_statement_type *))\n \n   for (f = &input_file_chain.head->input_statement;\n        f != NULL;\n-       f = &f->next_real_file->input_statement)\n+       f = f->next_real_file)\n     func (f);\n }\n \n@@ -6888,9 +6895,7 @@ lang_for_each_file (void (*func) (lang_input_statement_type *))\n void\n ldlang_add_file (lang_input_statement_type *entry)\n {\n-  lang_statement_append (&file_chain,\n-\t\t\t (lang_statement_union_type *) entry,\n-\t\t\t &entry->next);\n+  lang_statement_append (&file_chain, entry, &entry->next);\n \n   /* The BFD linker needs to have a list of all input BFDs involved in\n      a link.  */\n@@ -7232,7 +7237,7 @@ find_replacements_insert_point (bfd_boolean *before)\n   lastobject = &input_file_chain.head->input_statement;\n   for (claim1 = &file_chain.head->input_statement;\n        claim1 != NULL;\n-       claim1 = &claim1->next->input_statement)\n+       claim1 = claim1->next)\n     {\n       if (claim1->flags.claimed)\n \t{\n@@ -7253,14 +7258,14 @@ find_replacements_insert_point (bfd_boolean *before)\n /* Find where to insert ADD, an archive element or shared library\n    added during a rescan.  */\n \n-static lang_statement_union_type **\n+static lang_input_statement_type **\n find_rescan_insertion (lang_input_statement_type *add)\n {\n   bfd *add_bfd = add->the_bfd;\n   lang_input_statement_type *f;\n   lang_input_statement_type *last_loaded = NULL;\n   lang_input_statement_type *before = NULL;\n-  lang_statement_union_type **iter = NULL;\n+  lang_input_statement_type **iter = NULL;\n \n   if (add_bfd->my_archive != NULL)\n     add_bfd = add_bfd->my_archive;\n@@ -7274,23 +7279,23 @@ find_rescan_insertion (lang_input_statement_type *add)\n      then their input_statement->next points at it.  */\n   for (f = &input_file_chain.head->input_statement;\n        f != NULL;\n-       f = &f->next_real_file->input_statement)\n+       f = f->next_real_file)\n     {\n       if (f->the_bfd == add_bfd)\n \t{\n \t  before = last_loaded;\n \t  if (f->next != NULL)\n-\t    return &f->next->input_statement.next;\n+\t    return &f->next->next;\n \t}\n       if (f->the_bfd != NULL && f->next != NULL)\n \tlast_loaded = f;\n     }\n \n   for (iter = before ? &before->next : &file_chain.head->input_statement.next;\n        *iter != NULL;\n-       iter = &(*iter)->input_statement.next)\n-    if (!(*iter)->input_statement.flags.claim_archive\n-\t&& (*iter)->input_statement.the_bfd->my_archive == NULL)\n+       iter = &(*iter)->next)\n+    if (!(*iter)->flags.claim_archive\n+\t&& (*iter)->the_bfd->my_archive == NULL)\n       break;\n \n   return iter;\n@@ -7496,7 +7501,7 @@ lang_process (void)\n \t  if (before)\n \t    {\n \t      prev = find_next_input_statement (prev);\n-\t      if (*prev != plugin_insert->next_real_file)\n+\t      if (*prev != (void *) plugin_insert->next_real_file)\n \t\t{\n \t\t  /* Huh?  We didn't find the expected input statement.  */\n \t\t  ASSERT (0);\n@@ -7506,12 +7511,13 @@ lang_process (void)\n \t  lang_list_insert_after (stat_ptr, &added, prev);\n \t  /* Likewise for the file chains.  */\n \t  lang_list_insert_after (&input_file_chain, &inputfiles,\n-\t\t\t\t  &plugin_insert->next_real_file);\n+\t\t\t\t  (void *) &plugin_insert->next_real_file);\n \t  /* We must be careful when relinking file_chain; we may need to\n \t     insert the new files at the head of the list if the insert\n \t     point chosen is the dummy first input file.  */\n \t  if (plugin_insert->filename)\n-\t    lang_list_insert_after (&file_chain, &files, &plugin_insert->next);\n+\t    lang_list_insert_after (&file_chain, &files,\n+\t\t\t\t    (void *) &plugin_insert->next);\n \t  else\n \t    lang_list_insert_after (&file_chain, &files, &file_chain.head);\n \n@@ -7522,27 +7528,27 @@ lang_process (void)\n \t  lang_list_remove_tail (&file_chain, &files);\n \t  while (files.head != NULL)\n \t    {\n-\t      lang_statement_union_type **insert;\n-\t      lang_statement_union_type **iter, *temp;\n+\t      lang_input_statement_type **insert;\n+\t      lang_input_statement_type **iter, *temp;\n \t      bfd *my_arch;\n \n \t      insert = find_rescan_insertion (&files.head->input_statement);\n \t      /* All elements from an archive can be added at once.  */\n \t      iter = &files.head->input_statement.next;\n \t      my_arch = files.head->input_statement.the_bfd->my_archive;\n \t      if (my_arch != NULL)\n-\t\tfor (; *iter != NULL; iter = &(*iter)->input_statement.next)\n-\t\t  if ((*iter)->input_statement.the_bfd->my_archive != my_arch)\n+\t\tfor (; *iter != NULL; iter = &(*iter)->next)\n+\t\t  if ((*iter)->the_bfd->my_archive != my_arch)\n \t\t    break;\n \t      temp = *insert;\n-\t      *insert = files.head;\n-\t      files.head = *iter;\n+\t      *insert = &files.head->input_statement;\n+\t      files.head = (lang_statement_union_type *) *iter;\n \t      *iter = temp;\n \t      if (my_arch != NULL)\n \t\t{\n \t\t  lang_input_statement_type *parent = my_arch->usrdata;\n \t\t  if (parent != NULL)\n-\t\t    parent->next = (lang_statement_union_type *)\n+\t\t    parent->next = (lang_input_statement_type *)\n \t\t      ((char *) iter\n \t\t       - offsetof (lang_input_statement_type, next));\n \t\t}\n@@ -7954,15 +7960,6 @@ lang_leave_output_section_statement (fill_type *fill, const char *memspec,\n   pop_stat_ptr ();\n }\n \n-void\n-lang_statement_append (lang_statement_list_type *list,\n-\t\t       lang_statement_union_type *element,\n-\t\t       lang_statement_union_type **field)\n-{\n-  *(list->tail) = element;\n-  list->tail = field;\n-}\n-\n /* Set the output format type.  -oformat overrides scripts.  */\n \n void"
    },
    {
      "sha": "6d5fe738f4fb608b508951f7d765d1000f4bc294",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -309,10 +309,10 @@ typedef struct lang_input_statement_struct\n   struct flag_info *section_flag_list;\n \n   /* Next pointer for file_chain statement list.  */\n-  union lang_statement_union *next;\n+  struct lang_input_statement_struct *next;\n \n   /* Next pointer for input_file_chain statement list.  */\n-  union lang_statement_union *next_real_file;\n+  struct lang_input_statement_struct *next_real_file;\n \n   const char *target;\n \n@@ -567,9 +567,6 @@ extern void lang_float\n extern void lang_leave_output_section_statement\n   (fill_type *, const char *, lang_output_section_phdr_list *,\n    const char *);\n-extern void lang_statement_append\n-  (lang_statement_list_type *, lang_statement_union_type *,\n-   lang_statement_union_type **);\n extern void lang_for_each_input_file\n   (void (*dothis) (lang_input_statement_type *));\n extern void lang_for_each_file\n@@ -585,7 +582,7 @@ extern asection *section_for_dot\n   lang_input_statement_type *statement;\t\t\t\t\t\\\n   for (statement = &file_chain.head->input_statement;\t\t\t\\\n        statement != NULL;\t\t\t\t\t\t\\\n-       statement = &statement->next->input_statement)\n+       statement = statement->next)\n \n #define lang_output_section_find(NAME) \\\n   lang_output_section_statement_lookup (NAME, 0, FALSE)"
    },
    {
      "sha": "e24194ef87d8a51ba6ff7467df380be962a7c1b0",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=36983a93bb338b7cdd6f7d6f9f91dc9ce9815b4e",
      "patch": "@@ -818,7 +818,7 @@ add_archive_element (struct bfd_link_info *info,\n \n   parent = abfd->my_archive->usrdata;\n   if (parent != NULL && !parent->flags.reload)\n-    parent->next = (lang_statement_union_type *) input;\n+    parent->next = input;\n \n   /* Save the original data for trace files/tries below, as plugins\n      (if enabled) may possibly alter it to point to a replacement"
    }
  ]
}