{
  "sha": "e11145903f25b7ac91dd12e6330df3faec0a3f1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTExMTQ1OTAzZjI1YjdhYzkxZGQxMmU2MzMwZGYzZmFlYzBhM2YxYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:45Z"
    },
    "message": "Switch objfile to hold a list of psymbol readers\n\nThis changes objfile::qf to be a forward_list, and then updates all\nthe uses to iterate over the list.  Note that there is still only ever\na single element in the list; this is handled by clearing the list\nwhenever an object is added.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_build_psymtabs): Update.\n\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n\t* symfile-debug.c (objfile::has_partial_symbols)\n\t(objfile::find_last_source_symtab)\n\t(objfile::forget_cached_source_info)\n\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n\t(objfile::print_stats, objfile::dump)\n\t(objfile::expand_symtabs_for_function)\n\t(objfile::expand_all_symtabs)\n\t(objfile::expand_symtabs_with_fullname)\n\t(objfile::map_matching_symbols)\n\t(objfile::expand_symtabs_matching)\n\t(objfile::find_pc_sect_compunit_symtab)\n\t(objfile::map_symbol_filenames)\n\t(objfile::find_compunit_symtab_by_address)\n\t(objfile::lookup_global_symbol_language)\n\t(objfile::require_partial_symbols): Update.\n\t* psymtab.c (maintenance_print_psymbols)\n\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n\t* objfiles.h (struct objfile) <qf>: Now a forward_list.\n\t* objfiles.c (objfile_relocate1): Update.\n\t* elfread.c (elf_symfile_read): Update.",
    "tree": {
      "sha": "921a7ace0f6baf95a09d3063413050f213b947f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/921a7ace0f6baf95a09d3063413050f213b947f1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e11145903f25b7ac91dd12e6330df3faec0a3f1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11145903f25b7ac91dd12e6330df3faec0a3f1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e11145903f25b7ac91dd12e6330df3faec0a3f1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11145903f25b7ac91dd12e6330df3faec0a3f1b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de909f0b765dbe6223292c2d05e97631136df42b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de909f0b765dbe6223292c2d05e97631136df42b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de909f0b765dbe6223292c2d05e97631136df42b"
    }
  ],
  "stats": {
    "total": 599,
    "additions": 337,
    "deletions": 262
  },
  "files": [
    {
      "sha": "e87cb76e8251de9ee99eb388df9ffcb422caa15f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -1,3 +1,28 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_build_psymtabs): Update.\n+\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n+\t* symfile-debug.c (objfile::has_partial_symbols)\n+\t(objfile::find_last_source_symtab)\n+\t(objfile::forget_cached_source_info)\n+\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n+\t(objfile::print_stats, objfile::dump)\n+\t(objfile::expand_symtabs_for_function)\n+\t(objfile::expand_all_symtabs)\n+\t(objfile::expand_symtabs_with_fullname)\n+\t(objfile::map_matching_symbols)\n+\t(objfile::expand_symtabs_matching)\n+\t(objfile::find_pc_sect_compunit_symtab)\n+\t(objfile::map_symbol_filenames)\n+\t(objfile::find_compunit_symtab_by_address)\n+\t(objfile::lookup_global_symbol_language)\n+\t(objfile::require_partial_symbols): Update.\n+\t* psymtab.c (maintenance_print_psymbols)\n+\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n+\t* objfiles.h (struct objfile) <qf>: Now a forward_list.\n+\t* objfiles.c (objfile_relocate1): Update.\n+\t* elfread.c (elf_symfile_read): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* objfiles.h (struct objfile) <psymtabs>: Remove method."
    },
    {
      "sha": "94538484fd79db61d8f71fc1b305491aadbdaa47",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -6131,7 +6131,7 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n       /* This is a temporary hack to ensure that the objfile and 'qf'\n \t psymtabs are identical.  */\n       psymbol_functions *psf\n-\t= dynamic_cast<psymbol_functions *> (objfile->qf.get ());\n+\t= dynamic_cast<psymbol_functions *> (objfile->qf.front ().get ());\n       gdb_assert (psf != nullptr);\n       psf->set_partial_symtabs (per_bfd->partial_symtabs);\n       per_objfile->resize_symtabs ();"
    },
    {
      "sha": "1cf9b2addc4e5d9abdddf07086283534051ce999",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -1287,10 +1287,12 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t  switch (index_kind)\n \t    {\n \t    case dw_index_kind::GDB_INDEX:\n-\t      objfile->qf = make_dwarf_gdb_index ();\n+\t      objfile->qf.clear ();\n+\t      objfile->qf.push_front (make_dwarf_gdb_index ());\n \t      break;\n \t    case dw_index_kind::DEBUG_NAMES:\n-\t      objfile->qf = make_dwarf_debug_names ();\n+\t      objfile->qf.clear ();\n+\t      objfile->qf.push_front (make_dwarf_debug_names ());\n \t      break;\n \t    }\n \t}\n@@ -1300,7 +1302,8 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t     partial symbols, because OBJF_PSYMTABS_READ has not been\n \t     set, and so our lazy reader function will still be called\n \t     when needed.  */\n-\t  objfile->qf.reset\n+\t  objfile->qf.clear ();\n+\t  objfile->qf.emplace_front\n \t    (new lazy_dwarf_reader (objfile->partial_symtabs));\n \t}\n     }"
    },
    {
      "sha": "ed51c31c8b915d4a9c72bc4a120a29473625d526",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -703,8 +703,8 @@ objfile_relocate1 (struct objfile *objfile,\n   }\n \n   /* Notify the quick symbol object.  */\n-  if (objfile->qf)\n-    objfile->qf->relocated ();\n+  for (const auto &iter : objfile->qf)\n+    iter->relocated ();\n \n   /* Relocate isolated symbols.  */\n   {"
    },
    {
      "sha": "2f566709eb213fab24d95a82af02e673947af953",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -38,6 +38,7 @@\n #include \"gdbsupport/refcounted-object.h\"\n #include \"jit.h\"\n #include \"quick-symbol.h\"\n+#include <forward_list>\n \n struct htab;\n struct objfile_data;\n@@ -668,7 +669,7 @@ struct objfile\n \n   /* The \"quick\" (aka partial) symbol functions for this symbol\n      reader.  */\n-  quick_symbol_functions_up qf;\n+  std::forward_list<quick_symbol_functions_up> qf;\n \n   /* Per objfile data-pointers required by other GDB modules.  */\n "
    },
    {
      "sha": "785eda04c9ea6f95ca7ed2b93a6a7b4876680000",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 211,
      "deletions": 201,
      "changes": 412,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -1810,49 +1810,25 @@ maintenance_print_psymbols (const char *args, int from_tty)\n       if (!print_for_objfile)\n \tcontinue;\n \n-      psymbol_functions *psf\n-\t= dynamic_cast<psymbol_functions *> (objfile->qf.get ());\n-      if (psf == nullptr)\n-\tcontinue;\n-\n-      psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n-\n-      if (address_arg != NULL)\n+      for (const auto &iter : objfile->qf)\n \t{\n-\t  struct bound_minimal_symbol msymbol = { NULL, NULL };\n+\t  psymbol_functions *psf\n+\t    = dynamic_cast<psymbol_functions *> (iter.get ());\n+\t  if (psf == nullptr)\n+\t    continue;\n \n-\t  /* We don't assume each pc has a unique objfile (this is for\n-\t     debugging).  */\n-\t  struct partial_symtab *ps\n-\t    = psf->find_pc_sect_psymtab (objfile, pc, section, msymbol);\n-\t  if (ps != NULL)\n-\t    {\n-\t      if (!printed_objfile_header)\n-\t\t{\n-\t\t  outfile->printf (\"\\nPartial symtabs for objfile %s\\n\",\n-\t\t\t\t  objfile_name (objfile));\n-\t\t  printed_objfile_header = 1;\n-\t\t}\n-\t      dump_psymtab (objfile, ps, outfile);\n-\t      dump_psymtab_addrmap (objfile, partial_symtabs, ps, outfile);\n-\t      found = 1;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  for (partial_symtab *ps : psf->require_partial_symbols (objfile))\n+\t  psymtab_storage *partial_symtabs\n+\t    = psf->get_partial_symtabs ().get ();\n+\n+\t  if (address_arg != NULL)\n \t    {\n-\t      int print_for_source = 0;\n+\t      struct bound_minimal_symbol msymbol = { NULL, NULL };\n \n-\t      QUIT;\n-\t      if (source_arg != NULL)\n-\t\t{\n-\t\t  print_for_source\n-\t\t    = compare_filenames_for_search (ps->filename, source_arg);\n-\t\t  found = 1;\n-\t\t}\n-\t      if (source_arg == NULL\n-\t\t  || print_for_source)\n+\t      /* We don't assume each pc has a unique objfile (this is for\n+\t\t debugging).  */\n+\t      struct partial_symtab *ps\n+\t\t= psf->find_pc_sect_psymtab (objfile, pc, section, msymbol);\n+\t      if (ps != NULL)\n \t\t{\n \t\t  if (!printed_objfile_header)\n \t\t    {\n@@ -1861,20 +1837,48 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \t\t      printed_objfile_header = 1;\n \t\t    }\n \t\t  dump_psymtab (objfile, ps, outfile);\n-\t\t  dump_psymtab_addrmap (objfile, partial_symtabs, ps,\n-\t\t\t\t\toutfile);\n+\t\t  dump_psymtab_addrmap (objfile, partial_symtabs, ps, outfile);\n+\t\t  found = 1;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      for (partial_symtab *ps : psf->require_partial_symbols (objfile))\n+\t\t{\n+\t\t  int print_for_source = 0;\n+\n+\t\t  QUIT;\n+\t\t  if (source_arg != NULL)\n+\t\t    {\n+\t\t      print_for_source\n+\t\t\t= compare_filenames_for_search (ps->filename, source_arg);\n+\t\t      found = 1;\n+\t\t    }\n+\t\t  if (source_arg == NULL\n+\t\t      || print_for_source)\n+\t\t    {\n+\t\t      if (!printed_objfile_header)\n+\t\t\t{\n+\t\t\t  outfile->printf (\"\\nPartial symtabs for objfile %s\\n\",\n+\t\t\t\t\t   objfile_name (objfile));\n+\t\t\t  printed_objfile_header = 1;\n+\t\t\t}\n+\t\t      dump_psymtab (objfile, ps, outfile);\n+\t\t      dump_psymtab_addrmap (objfile, partial_symtabs, ps,\n+\t\t\t\t\t    outfile);\n+\t\t    }\n \t\t}\n \t    }\n-\t}\n \n-      /* If we're printing all the objfile's symbols dump the full addrmap.  */\n+\t  /* If we're printing all the objfile's symbols dump the full addrmap.  */\n \n-      if (address_arg == NULL\n-\t  && source_arg == NULL\n-\t  && partial_symtabs->psymtabs_addrmap != NULL)\n-\t{\n-\t  outfile->puts (\"\\n\");\n-\t  dump_psymtab_addrmap (objfile, partial_symtabs, NULL, outfile);\n+\t  if (address_arg == NULL\n+\t      && source_arg == NULL\n+\t      && partial_symtabs->psymtabs_addrmap != NULL)\n+\t    {\n+\t      outfile->puts (\"\\n\");\n+\t      dump_psymtab_addrmap (objfile, partial_symtabs, NULL, outfile);\n+\t    }\n \t}\n     }\n \n@@ -1904,91 +1908,94 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t   actually find a symtab whose name matches.  */\n \tint printed_objfile_start = 0;\n \n-\tpsymbol_functions *psf\n-\t  = dynamic_cast<psymbol_functions *> (objfile->qf.get ());\n-\tif (psf == nullptr)\n-\t  continue;\n-\tfor (partial_symtab *psymtab : psf->require_partial_symbols (objfile))\n+\tfor (const auto &iter : objfile->qf)\n \t  {\n-\t    QUIT;\n-\n-\t    if (! regexp\n-\t\t|| re_exec (psymtab->filename))\n+\t    psymbol_functions *psf\n+\t      = dynamic_cast<psymbol_functions *> (iter.get ());\n+\t    if (psf == nullptr)\n+\t      continue;\n+\t    for (partial_symtab *psymtab : psf->require_partial_symbols (objfile))\n \t      {\n-\t\tif (! printed_objfile_start)\n-\t\t  {\n-\t\t    printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t    wrap_here (\"  \");\n-\t\t    printf_filtered (\"((struct objfile *) %s)\\n\",\n-\t\t\t\t     host_address_to_string (objfile));\n-\t\t    printed_objfile_start = 1;\n-\t\t  }\n+\t\tQUIT;\n \n-\t\tprintf_filtered (\"  { psymtab %s \", psymtab->filename);\n-\t\twrap_here (\"    \");\n-\t\tprintf_filtered (\"((struct partial_symtab *) %s)\\n\",\n-\t\t\t\t host_address_to_string (psymtab));\n-\n-\t\tprintf_filtered (\"    readin %s\\n\",\n-\t\t\t\t psymtab->readin_p (objfile) ? \"yes\" : \"no\");\n-\t\tprintf_filtered (\"    fullname %s\\n\",\n-\t\t\t\t psymtab->fullname\n-\t\t\t\t ? psymtab->fullname : \"(null)\");\n-\t\tprintf_filtered (\"    text addresses \");\n-\t\tfputs_filtered (paddress (gdbarch,\n-\t\t\t\t\t  psymtab->text_low (objfile)),\n-\t\t\t\tgdb_stdout);\n-\t\tprintf_filtered (\" -- \");\n-\t\tfputs_filtered (paddress (gdbarch,\n-\t\t\t\t\t  psymtab->text_high (objfile)),\n-\t\t\t\tgdb_stdout);\n-\t\tprintf_filtered (\"\\n\");\n-\t\tprintf_filtered (\"    psymtabs_addrmap_supported %s\\n\",\n-\t\t\t\t (psymtab->psymtabs_addrmap_supported\n-\t\t\t\t  ? \"yes\" : \"no\"));\n-\t\tprintf_filtered (\"    globals \");\n-\t\tif (!psymtab->global_psymbols.empty ())\n-\t\t  printf_filtered\n-\t\t    (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t     host_address_to_string (psymtab->global_psymbols.data ()),\n-\t\t     (int) psymtab->global_psymbols.size ());\n-\t\telse\n-\t\t  printf_filtered (\"(none)\\n\");\n-\t\tprintf_filtered (\"    statics \");\n-\t\tif (!psymtab->static_psymbols.empty ())\n-\t\t  printf_filtered\n-\t\t    (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t     host_address_to_string (psymtab->static_psymbols.data ()),\n-\t\t     (int) psymtab->static_psymbols.size ());\n-\t\telse\n-\t\t  printf_filtered (\"(none)\\n\");\n-\t\tif (psymtab->user)\n-\t\t  printf_filtered (\"    user %s \"\n-\t\t\t\t   \"((struct partial_symtab *) %s)\\n\",\n-\t\t\t\t   psymtab->user->filename,\n-\t\t\t\t   host_address_to_string (psymtab->user));\n-\t\tprintf_filtered (\"    dependencies \");\n-\t\tif (psymtab->number_of_dependencies)\n+\t\tif (! regexp\n+\t\t    || re_exec (psymtab->filename))\n \t\t  {\n-\t\t    int i;\n+\t\t    if (! printed_objfile_start)\n+\t\t      {\n+\t\t\tprintf_filtered (\"{ objfile %s \", objfile_name (objfile));\n+\t\t\twrap_here (\"  \");\n+\t\t\tprintf_filtered (\"((struct objfile *) %s)\\n\",\n+\t\t\t\t\t host_address_to_string (objfile));\n+\t\t\tprinted_objfile_start = 1;\n+\t\t      }\n \n-\t\t    printf_filtered (\"{\\n\");\n-\t\t    for (i = 0; i < psymtab->number_of_dependencies; i++)\n+\t\t    printf_filtered (\"  { psymtab %s \", psymtab->filename);\n+\t\t    wrap_here (\"    \");\n+\t\t    printf_filtered (\"((struct partial_symtab *) %s)\\n\",\n+\t\t\t\t     host_address_to_string (psymtab));\n+\n+\t\t    printf_filtered (\"    readin %s\\n\",\n+\t\t\t\t     psymtab->readin_p (objfile) ? \"yes\" : \"no\");\n+\t\t    printf_filtered (\"    fullname %s\\n\",\n+\t\t\t\t     psymtab->fullname\n+\t\t\t\t     ? psymtab->fullname : \"(null)\");\n+\t\t    printf_filtered (\"    text addresses \");\n+\t\t    fputs_filtered (paddress (gdbarch,\n+\t\t\t\t\t      psymtab->text_low (objfile)),\n+\t\t\t\t    gdb_stdout);\n+\t\t    printf_filtered (\" -- \");\n+\t\t    fputs_filtered (paddress (gdbarch,\n+\t\t\t\t\t      psymtab->text_high (objfile)),\n+\t\t\t\t    gdb_stdout);\n+\t\t    printf_filtered (\"\\n\");\n+\t\t    printf_filtered (\"    psymtabs_addrmap_supported %s\\n\",\n+\t\t\t\t     (psymtab->psymtabs_addrmap_supported\n+\t\t\t\t      ? \"yes\" : \"no\"));\n+\t\t    printf_filtered (\"    globals \");\n+\t\t    if (!psymtab->global_psymbols.empty ())\n+\t\t      printf_filtered\n+\t\t\t(\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t\t host_address_to_string (psymtab->global_psymbols.data ()),\n+\t\t\t (int) psymtab->global_psymbols.size ());\n+\t\t    else\n+\t\t      printf_filtered (\"(none)\\n\");\n+\t\t    printf_filtered (\"    statics \");\n+\t\t    if (!psymtab->static_psymbols.empty ())\n+\t\t      printf_filtered\n+\t\t\t(\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t\t host_address_to_string (psymtab->static_psymbols.data ()),\n+\t\t\t (int) psymtab->static_psymbols.size ());\n+\t\t    else\n+\t\t      printf_filtered (\"(none)\\n\");\n+\t\t    if (psymtab->user)\n+\t\t      printf_filtered (\"    user %s \"\n+\t\t\t\t       \"((struct partial_symtab *) %s)\\n\",\n+\t\t\t\t       psymtab->user->filename,\n+\t\t\t\t       host_address_to_string (psymtab->user));\n+\t\t    printf_filtered (\"    dependencies \");\n+\t\t    if (psymtab->number_of_dependencies)\n \t\t      {\n-\t\t\tstruct partial_symtab *dep = psymtab->dependencies[i];\n-\n-\t\t\t/* Note the string concatenation there --- no\n-\t\t\t   comma.  */\n-\t\t\tprintf_filtered (\"      psymtab %s \"\n-\t\t\t\t\t \"((struct partial_symtab *) %s)\\n\",\n-\t\t\t\t\t dep->filename,\n-\t\t\t\t\t host_address_to_string (dep));\n+\t\t\tint i;\n+\n+\t\t\tprintf_filtered (\"{\\n\");\n+\t\t\tfor (i = 0; i < psymtab->number_of_dependencies; i++)\n+\t\t\t  {\n+\t\t\t    struct partial_symtab *dep = psymtab->dependencies[i];\n+\n+\t\t\t    /* Note the string concatenation there --- no\n+\t\t\t       comma.  */\n+\t\t\t    printf_filtered (\"      psymtab %s \"\n+\t\t\t\t\t     \"((struct partial_symtab *) %s)\\n\",\n+\t\t\t\t\t     dep->filename,\n+\t\t\t\t\t     host_address_to_string (dep));\n+\t\t\t  }\n+\t\t\tprintf_filtered (\"    }\\n\");\n \t\t      }\n-\t\t    printf_filtered (\"    }\\n\");\n+\t\t    else\n+\t\t      printf_filtered (\"(none)\\n\");\n+\t\t    printf_filtered (\"  }\\n\");\n \t\t  }\n-\t\telse\n-\t\t  printf_filtered (\"(none)\\n\");\n-\t\tprintf_filtered (\"  }\\n\");\n \t      }\n \t  }\n \n@@ -2009,93 +2016,96 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      psymbol_functions *psf\n-\t= dynamic_cast<psymbol_functions *> (objfile->qf.get ());\n-      if (psf == nullptr)\n-\tcontinue;\n-\n-      for (partial_symtab *ps : psf->require_partial_symbols (objfile))\n+      for (const auto &iter : objfile->qf)\n \t{\n-\t  struct gdbarch *gdbarch = objfile->arch ();\n-\n-\t  /* We don't call psymtab_to_symtab here because that may cause symtab\n-\t     expansion.  When debugging a problem it helps if checkers leave\n-\t     things unchanged.  */\n-\t  cust = ps->get_compunit_symtab (objfile);\n+\t  psymbol_functions *psf\n+\t    = dynamic_cast<psymbol_functions *> (iter.get ());\n+\t  if (psf == nullptr)\n+\t    continue;\n \n-\t  /* First do some checks that don't require the associated symtab.  */\n-\t  if (ps->text_high (objfile) < ps->text_low (objfile))\n+\t  for (partial_symtab *ps : psf->require_partial_symbols (objfile))\n \t    {\n-\t      printf_filtered (\"Psymtab \");\n-\t      puts_filtered (ps->filename);\n-\t      printf_filtered (\" covers bad range \");\n-\t      fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\" - \");\n-\t      fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\"\\n\");\n-\t      continue;\n-\t    }\n+\t      struct gdbarch *gdbarch = objfile->arch ();\n \n-\t  /* Now do checks requiring the associated symtab.  */\n-\t  if (cust == NULL)\n-\t    continue;\n-\t  bv = COMPUNIT_BLOCKVECTOR (cust);\n-\t  b = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n-\t  for (partial_symbol *psym : ps->static_psymbols)\n-\t    {\n-\t      /* Skip symbols for inlined functions without address.  These may\n-\t\t or may not have a match in the full symtab.  */\n-\t      if (psym->aclass == LOC_BLOCK\n-\t\t  && psym->ginfo.value.address == 0)\n-\t\tcontinue;\n+\t      /* We don't call psymtab_to_symtab here because that may cause symtab\n+\t\t expansion.  When debugging a problem it helps if checkers leave\n+\t\t things unchanged.  */\n+\t      cust = ps->get_compunit_symtab (objfile);\n \n-\t      sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n-\t\t\t\t\t symbol_name_match_type::SEARCH_NAME,\n-\t\t\t\t\t psym->domain);\n-\t      if (!sym)\n+\t      /* First do some checks that don't require the associated symtab.  */\n+\t      if (ps->text_high (objfile) < ps->text_low (objfile))\n \t\t{\n-\t\t  printf_filtered (\"Static symbol `\");\n-\t\t  puts_filtered (psym->ginfo.linkage_name ());\n-\t\t  printf_filtered (\"' only found in \");\n+\t\t  printf_filtered (\"Psymtab \");\n \t\t  puts_filtered (ps->filename);\n-\t\t  printf_filtered (\" psymtab\\n\");\n+\t\t  printf_filtered (\" covers bad range \");\n+\t\t  fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n+\t\t\t\t  gdb_stdout);\n+\t\t  printf_filtered (\" - \");\n+\t\t  fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n+\t\t\t\t  gdb_stdout);\n+\t\t  printf_filtered (\"\\n\");\n+\t\t  continue;\n \t\t}\n-\t    }\n-\t  b = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n-\t  for (partial_symbol *psym : ps->global_psymbols)\n-\t    {\n-\t      sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n-\t\t\t\t\t symbol_name_match_type::SEARCH_NAME,\n-\t\t\t\t\t psym->domain);\n-\t      if (!sym)\n+\n+\t      /* Now do checks requiring the associated symtab.  */\n+\t      if (cust == NULL)\n+\t\tcontinue;\n+\t      bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t      b = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n+\t      for (partial_symbol *psym : ps->static_psymbols)\n+\t\t{\n+\t\t  /* Skip symbols for inlined functions without address.  These may\n+\t\t     or may not have a match in the full symtab.  */\n+\t\t  if (psym->aclass == LOC_BLOCK\n+\t\t      && psym->ginfo.value.address == 0)\n+\t\t    continue;\n+\n+\t\t  sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n+\t\t\t\t\t     symbol_name_match_type::SEARCH_NAME,\n+\t\t\t\t\t     psym->domain);\n+\t\t  if (!sym)\n+\t\t    {\n+\t\t      printf_filtered (\"Static symbol `\");\n+\t\t      puts_filtered (psym->ginfo.linkage_name ());\n+\t\t      printf_filtered (\"' only found in \");\n+\t\t      puts_filtered (ps->filename);\n+\t\t      printf_filtered (\" psymtab\\n\");\n+\t\t    }\n+\t\t}\n+\t      b = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n+\t      for (partial_symbol *psym : ps->global_psymbols)\n+\t\t{\n+\t\t  sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n+\t\t\t\t\t     symbol_name_match_type::SEARCH_NAME,\n+\t\t\t\t\t     psym->domain);\n+\t\t  if (!sym)\n+\t\t    {\n+\t\t      printf_filtered (\"Global symbol `\");\n+\t\t      puts_filtered (psym->ginfo.linkage_name ());\n+\t\t      printf_filtered (\"' only found in \");\n+\t\t      puts_filtered (ps->filename);\n+\t\t      printf_filtered (\" psymtab\\n\");\n+\t\t    }\n+\t\t}\n+\t      if (ps->raw_text_high () != 0\n+\t\t  && (ps->text_low (objfile) < BLOCK_START (b)\n+\t\t      || ps->text_high (objfile) > BLOCK_END (b)))\n \t\t{\n-\t\t  printf_filtered (\"Global symbol `\");\n-\t\t  puts_filtered (psym->ginfo.linkage_name ());\n-\t\t  printf_filtered (\"' only found in \");\n+\t\t  printf_filtered (\"Psymtab \");\n \t\t  puts_filtered (ps->filename);\n-\t\t  printf_filtered (\" psymtab\\n\");\n+\t\t  printf_filtered (\" covers \");\n+\t\t  fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n+\t\t\t\t  gdb_stdout);\n+\t\t  printf_filtered (\" - \");\n+\t\t  fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n+\t\t\t\t  gdb_stdout);\n+\t\t  printf_filtered (\" but symtab covers only \");\n+\t\t  fputs_filtered (paddress (gdbarch, BLOCK_START (b)), gdb_stdout);\n+\t\t  printf_filtered (\" - \");\n+\t\t  fputs_filtered (paddress (gdbarch, BLOCK_END (b)), gdb_stdout);\n+\t\t  printf_filtered (\"\\n\");\n \t\t}\n \t    }\n-\t  if (ps->raw_text_high () != 0\n-\t      && (ps->text_low (objfile) < BLOCK_START (b)\n-\t\t  || ps->text_high (objfile) > BLOCK_END (b)))\n-\t    {\n-\t      printf_filtered (\"Psymtab \");\n-\t      puts_filtered (ps->filename);\n-\t      printf_filtered (\" covers \");\n-\t      fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\" - \");\n-\t      fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n-\t\t\t      gdb_stdout);\n-\t      printf_filtered (\" but symtab covers only \");\n-\t      fputs_filtered (paddress (gdbarch, BLOCK_START (b)), gdb_stdout);\n-\t      printf_filtered (\" - \");\n-\t      fputs_filtered (paddress (gdbarch, BLOCK_END (b)), gdb_stdout);\n-\t      printf_filtered (\"\\n\");\n-\t    }\n \t}\n     }\n }"
    },
    {
      "sha": "3daede88292164515ec5ffaa7f9c420781ea0847",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 85,
      "deletions": 52,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -80,12 +80,16 @@ objfile::has_partial_symbols ()\n      them, then that is an indication that they are in fact available.  Without\n      this function the symbols may have been already read in but they also may\n      not be present in this objfile.  */\n-  if ((flags & OBJF_PSYMTABS_READ) == 0\n-      && qf != nullptr\n-      && qf->can_lazily_read_symbols ())\n-    retval = true;\n-  else if (qf != nullptr)\n-    retval = qf->has_symbols (this);\n+  for (const auto &iter : qf)\n+    {\n+      if ((flags & OBJF_PSYMTABS_READ) == 0\n+\t  && iter->can_lazily_read_symbols ())\n+\tretval = true;\n+      else\n+\tretval = iter->has_symbols (this);\n+      if (retval)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->has_symbols (%s) = %d\\n\",\n@@ -103,8 +107,12 @@ objfile::find_last_source_symtab ()\n     fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (qf != nullptr)\n-    retval = qf->find_last_source_symtab (this);\n+  for (const auto &iter : qf)\n+    {\n+      retval = iter->find_last_source_symtab (this);\n+      if (retval != nullptr)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (...) = %s\\n\",\n@@ -120,8 +128,8 @@ objfile::forget_cached_source_info ()\n     fprintf_filtered (gdb_stdlog, \"qf->forget_cached_source_info (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (qf != nullptr)\n-    qf->forget_cached_source_info (this);\n+  for (const auto &iter : qf)\n+    iter->forget_cached_source_info (this);\n }\n \n bool\n@@ -138,9 +146,13 @@ objfile::map_symtabs_matching_filename\n \t\t      host_address_to_string (&callback));\n \n   bool retval = false;\n-  if (qf != nullptr)\n-    retval = (qf->map_symtabs_matching_filename\n-\t      (this, name, real_path, callback));\n+  for (const auto &iter : qf)\n+    {\n+      retval = (iter->map_symtabs_matching_filename\n+\t\t(this, name, real_path, callback));\n+      if (retval)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n@@ -161,8 +173,12 @@ objfile::lookup_symbol (block_enum kind, const char *name, domain_enum domain)\n \t\t      objfile_debug_name (this), kind, name,\n \t\t      domain_name (domain));\n \n-  if (qf != nullptr)\n-    retval = qf->lookup_symbol (this, kind, name, domain);\n+  for (const auto &iter : qf)\n+    {\n+      retval = iter->lookup_symbol (this, kind, name, domain);\n+      if (retval != nullptr)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog, \"qf->lookup_symbol (...) = %s\\n\",\n@@ -180,8 +196,8 @@ objfile::print_stats (bool print_bcache)\n     fprintf_filtered (gdb_stdlog, \"qf->print_stats (%s, %d)\\n\",\n \t\t      objfile_debug_name (this), print_bcache);\n \n-  if (qf != nullptr)\n-    qf->print_stats (this, print_bcache);\n+  for (const auto &iter : qf)\n+    iter->print_stats (this, print_bcache);\n }\n \n void\n@@ -191,8 +207,8 @@ objfile::dump ()\n     fprintf_filtered (gdb_stdlog, \"qf->dump (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (qf != nullptr)\n-    qf->dump (this);\n+  for (const auto &iter : qf)\n+    iter->dump (this);\n }\n \n void\n@@ -203,8 +219,8 @@ objfile::expand_symtabs_for_function (const char *func_name)\n \t\t      \"qf->expand_symtabs_for_function (%s, \\\"%s\\\")\\n\",\n \t\t      objfile_debug_name (this), func_name);\n \n-  if (qf != nullptr)\n-    qf->expand_symtabs_for_function (this, func_name);\n+  for (const auto &iter : qf)\n+    iter->expand_symtabs_for_function (this, func_name);\n }\n \n void\n@@ -214,8 +230,8 @@ objfile::expand_all_symtabs ()\n     fprintf_filtered (gdb_stdlog, \"qf->expand_all_symtabs (%s)\\n\",\n \t\t      objfile_debug_name (this));\n \n-  if (qf != nullptr)\n-    qf->expand_all_symtabs (this);\n+  for (const auto &iter : qf)\n+    iter->expand_all_symtabs (this);\n }\n \n void\n@@ -226,8 +242,8 @@ objfile::expand_symtabs_with_fullname (const char *fullname)\n \t\t      \"qf->expand_symtabs_with_fullname (%s, \\\"%s\\\")\\n\",\n \t\t      objfile_debug_name (this), fullname);\n \n-  if (qf != nullptr)\n-    qf->expand_symtabs_with_fullname (this, fullname);\n+  for (const auto &iter : qf)\n+    iter->expand_symtabs_with_fullname (this, fullname);\n }\n \n void\n@@ -244,9 +260,9 @@ objfile::map_matching_symbols\n \t\t      domain_name (domain), global,\n \t\t      host_address_to_string (ordered_compare));\n \n-  if (qf != nullptr)\n-    qf->map_matching_symbols (this, name, domain, global,\n-\t\t\t      callback, ordered_compare);\n+  for (const auto &iter : qf)\n+    iter->map_matching_symbols (this, name, domain, global,\n+\t\t\t\tcallback, ordered_compare);\n }\n \n void\n@@ -266,9 +282,9 @@ objfile::expand_symtabs_matching\n \t\t      host_address_to_string (&expansion_notify),\n \t\t      search_domain_name (kind));\n \n-  if (qf != nullptr)\n-    qf->expand_symtabs_matching (this, file_matcher, lookup_name,\n-\t\t\t\t symbol_matcher, expansion_notify, kind);\n+  for (const auto &iter : qf)\n+    iter->expand_symtabs_matching (this, file_matcher, lookup_name,\n+\t\t\t\t   symbol_matcher, expansion_notify, kind);\n }\n \n struct compunit_symtab *\n@@ -288,9 +304,13 @@ objfile::find_pc_sect_compunit_symtab (struct bound_minimal_symbol msymbol,\n \t\t      host_address_to_string (section),\n \t\t      warn_if_readin);\n \n-  if (qf != nullptr)\n-    retval = qf->find_pc_sect_compunit_symtab (this, msymbol, pc, section,\n-\t\t\t\t\t       warn_if_readin);\n+  for (const auto &iter : qf)\n+    {\n+      retval = iter->find_pc_sect_compunit_symtab (this, msymbol, pc, section,\n+\t\t\t\t\t\t   warn_if_readin);\n+      if (retval != nullptr)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n@@ -314,8 +334,8 @@ objfile::map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n \t\t      host_address_to_string (data),\n \t\t      need_fullname);\n \n-  if (qf != nullptr)\n-    qf->map_symbol_filenames (this, fun, data, need_fullname);\n+  for (const auto &iter : qf)\n+    iter->map_symbol_filenames (this, fun, data, need_fullname);\n }\n \n struct compunit_symtab *\n@@ -328,8 +348,12 @@ objfile::find_compunit_symtab_by_address (CORE_ADDR address)\n \t\t      hex_string (address));\n \n   struct compunit_symtab *result = NULL;\n-  if (qf != nullptr)\n-    result = qf->find_compunit_symtab_by_address (this, address);\n+  for (const auto &iter : qf)\n+    {\n+      result = iter->find_compunit_symtab_by_address (this, address);\n+      if (result != nullptr)\n+\tbreak;\n+    }\n \n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n@@ -347,12 +371,15 @@ objfile::lookup_global_symbol_language (const char *name,\n \t\t\t\t\tbool *symbol_found_p)\n {\n   enum language result = language_unknown;\n+  *symbol_found_p = false;\n \n-  if (qf != nullptr)\n-    result = qf->lookup_global_symbol_language (this, name, domain,\n-\t\t\t\t\t\tsymbol_found_p);\n-  else\n-    *symbol_found_p = false;\n+  for (const auto &iter : qf)\n+    {\n+      result = iter->lookup_global_symbol_language (this, name, domain,\n+\t\t\t\t\t\t    symbol_found_p);\n+      if (*symbol_found_p)\n+\tbreak;\n+    }\n \n   return result;\n }\n@@ -364,17 +391,23 @@ objfile::require_partial_symbols (bool verbose)\n     {\n       flags |= OBJF_PSYMTABS_READ;\n \n-      if (qf->can_lazily_read_symbols ())\n+      bool printed = false;\n+      for (const auto &iter : qf)\n \t{\n-\t  if (verbose)\n-\t    printf_filtered (_(\"Reading symbols from %s...\\n\"),\n-\t\t\t     objfile_name (this));\n-\t  qf->read_partial_symbols (this);\n-\n-\t  if (verbose && !objfile_has_symbols (this))\n-\t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n-\t\t\t     objfile_name (this));\n+\t  if (iter->can_lazily_read_symbols ())\n+\t    {\n+\t      if (verbose && !printed)\n+\t\t{\n+\t\t  printf_filtered (_(\"Reading symbols from %s...\\n\"),\n+\t\t\t\t   objfile_name (this));\n+\t\t  printed = true;\n+\t\t}\n+\t      iter->read_partial_symbols (this);\n+\t    }\n \t}\n+      if (printed && !objfile_has_symbols (this))\n+\tprintf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n+\t\t\t objfile_name (this));\n     }\n }\n "
    },
    {
      "sha": "244565f8f473099ba38311ca9f57b7b6cea0334b",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11145903f25b7ac91dd12e6330df3faec0a3f1b/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "patch": "@@ -903,7 +903,8 @@ syms_from_objfile_1 (struct objfile *objfile,\n \n   objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n   objfile->reset_psymtabs ();\n-  objfile->qf = make_psymbol_functions (objfile->partial_symtabs);\n+  objfile->qf.clear ();\n+  objfile->qf.push_front (make_psymbol_functions (objfile->partial_symtabs));\n \n   if (objfile->sf == NULL)\n     {\n@@ -2553,7 +2554,9 @@ reread_symbols (void)\n \t     start over.  PR symtab/15885  */\n \t  objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n \t  objfile->reset_psymtabs ();\n-\t  objfile->qf = make_psymbol_functions (objfile->partial_symtabs);\n+\t  objfile->qf.clear ();\n+\t  objfile->qf.push_front\n+\t    (make_psymbol_functions (objfile->partial_symtabs));\n \n \t  build_objfile_section_table (objfile);\n "
    }
  ]
}