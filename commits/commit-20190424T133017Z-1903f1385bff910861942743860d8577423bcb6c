{
  "sha": "1903f1385bff910861942743860d8577423bcb6c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTkwM2YxMzg1YmZmOTEwODYxOTQyNzQzODYwZDg1Nzc0MjNiY2I2Yw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-24T01:56:51Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-24T13:30:17Z"
    },
    "message": "resolve_symbol_value vs. .loc view resolution\n\nIn most cases we don't want expression symbols, such as that created\nfor an expression like \"symbol + (1f - .)\", resolved down to a\nconstant.  Instead we'd like to leave the expression as \"symbol +\nconstant\" once the \"1f - .\" part has been resolved, and let the\nbackend decide whether \"symbol\" can be reduced further.\n\nHowever, that doesn't work when trying to resolve .loc view symbols\nearly.  We get expression symbols left as an O_symbol expression\npointing at an absolute symbol, and marked as sy_flags.sy_resolved.\nThat wouldn't really be a problem, but when one of those expression\nsymbols is used in further .loc view expressions, its value is taken\nas zero.\n\nThis patch fixes the symbol value mistake, and stops creation of\nO_symbol expression symbols pointing to absolute symbols.  Either of\nthese fixes would cure the .loc view usage.\n\n\tPR 24444\n\t* symbols.c (resolve_symbol_value): When handling symbols\n\tmarked as sy_flags.resolved, return correct value for the\n\tcase of expression symbols left as an O_symbol expression.\n\tMerge O_symbol code handling undefined and common symbols with\n\tcode handling special cases of expression symbols.  Use\n\tseg_left to test for undefined and common symbols.  Don't\n\tleave an O_symbol expression when X_add_symbol resolves to\n\tthe absolute_section.  Init final_val later.\n\t* testsuite/gas/mmix/basep-7.d: Adjust expected output.",
    "tree": {
      "sha": "64da109ffb42c711b2c37b4dc24f37ccbe19c876",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/64da109ffb42c711b2c37b4dc24f37ccbe19c876"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1903f1385bff910861942743860d8577423bcb6c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1903f1385bff910861942743860d8577423bcb6c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1903f1385bff910861942743860d8577423bcb6c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1903f1385bff910861942743860d8577423bcb6c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a679f24ecc00ff7df02c5e6e4804fc9f19cbe595",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a679f24ecc00ff7df02c5e6e4804fc9f19cbe595",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a679f24ecc00ff7df02c5e6e4804fc9f19cbe595"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 35,
    "deletions": 29
  },
  "files": [
    {
      "sha": "eeabe0ccaed2d4c68f3cc0f16c90885ca2c8af24",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1903f1385bff910861942743860d8577423bcb6c/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1903f1385bff910861942743860d8577423bcb6c/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1903f1385bff910861942743860d8577423bcb6c",
      "patch": "@@ -1,3 +1,16 @@\n+2019-04-24  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24444\n+\t* symbols.c (resolve_symbol_value): When handling symbols\n+\tmarked as sy_flags.resolved, return correct value for the\n+\tcase of expression symbols left as an O_symbol expression.\n+\tMerge O_symbol code handling undefined and common symbols with\n+\tcode handling special cases of expression symbols.  Use\n+\tseg_left to test for undefined and common symbols.  Don't\n+\tleave an O_symbol expression when X_add_symbol resolves to\n+\tthe absolute_section.  Init final_val later.\n+\t* testsuite/gas/mmix/basep-7.d: Adjust expected output.\n+\n 2019-04-24  John Darrington <john@darrington.wattle.id.au>\n \n \t* testsuite/gas/s12z/bit-manip-invalid.s: Extend test for BSET"
    },
    {
      "sha": "97867954fdd309cd5085320ed7b66d359bf88e86",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 19,
      "deletions": 24,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1903f1385bff910861942743860d8577423bcb6c/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1903f1385bff910861942743860d8577423bcb6c/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=1903f1385bff910861942743860d8577423bcb6c",
      "patch": "@@ -1221,7 +1221,7 @@ valueT\n resolve_symbol_value (symbolS *symp)\n {\n   int resolved;\n-  valueT final_val = 0;\n+  valueT final_val;\n   segT final_seg;\n \n   if (LOCAL_SYMBOL_CHECK (symp))\n@@ -1245,10 +1245,18 @@ resolve_symbol_value (symbolS *symp)\n \n   if (symp->sy_flags.sy_resolved)\n     {\n+      final_val = 0;\n+      while (symp->sy_value.X_op == O_symbol\n+\t     && symp->sy_value.X_add_symbol->sy_flags.sy_resolved)\n+\t{\n+\t  final_val += symp->sy_value.X_add_number;\n+\t  symp = symp->sy_value.X_add_symbol;\n+\t}\n       if (symp->sy_value.X_op == O_constant)\n-\treturn (valueT) symp->sy_value.X_add_number;\n+\tfinal_val += symp->sy_value.X_add_number;\n       else\n-\treturn 0;\n+\tfinal_val = 0;\n+      return final_val;\n     }\n \n   resolved = 0;\n@@ -1305,6 +1313,7 @@ resolve_symbol_value (symbolS *symp)\n \t  resolved = 1;\n \t}\n \n+      final_val = 0;\n       final_seg = undefined_section;\n       goto exit_dont_set_value;\n     }\n@@ -1392,11 +1401,16 @@ resolve_symbol_value (symbolS *symp)\n \t     relocation to detect this case, and convert the\n \t     relocation to be against the symbol to which this symbol\n \t     is equated.  */\n-\t  if (! S_IS_DEFINED (add_symbol)\n+\t  if (seg_left == undefined_section\n+\t      || bfd_is_com_section (seg_left)\n #if defined (OBJ_COFF) && defined (TE_PE)\n \t      || S_IS_WEAK (add_symbol)\n #endif\n-\t      || S_IS_COMMON (add_symbol))\n+\t      || (finalize_syms\n+\t\t  && ((final_seg == expr_section\n+\t\t       && seg_left != expr_section\n+\t\t       && seg_left != absolute_section)\n+\t\t      || symbol_shadow_p (symp))))\n \t    {\n \t      if (finalize_syms)\n \t\t{\n@@ -1407,25 +1421,6 @@ resolve_symbol_value (symbolS *symp)\n \t\t  symp->sy_value.X_op_symbol = add_symbol;\n \t\t}\n \t      final_seg = seg_left;\n-\t      final_val = 0;\n-\t      resolved = symbol_resolved_p (add_symbol);\n-\t      symp->sy_flags.sy_resolving = 0;\n-\t      goto exit_dont_set_value;\n-\t    }\n-\t  else if (finalize_syms\n-\t\t   && ((final_seg == expr_section && seg_left != expr_section)\n-\t\t       || symbol_shadow_p (symp)))\n-\t    {\n-\t      /* If the symbol is an expression symbol, do similarly\n-\t\t as for undefined and common syms above.  Handles\n-\t\t \"sym +/- expr\" where \"expr\" cannot be evaluated\n-\t\t immediately, and we want relocations to be against\n-\t\t \"sym\", eg. because it is weak.  */\n-\t      symp->sy_value.X_op = O_symbol;\n-\t      symp->sy_value.X_add_symbol = add_symbol;\n-\t      symp->sy_value.X_add_number = final_val;\n-\t      symp->sy_value.X_op_symbol = add_symbol;\n-\t      final_seg = seg_left;\n \t      final_val += symp->sy_frag->fr_address + left;\n \t      resolved = symbol_resolved_p (add_symbol);\n \t      symp->sy_flags.sy_resolving = 0;"
    },
    {
      "sha": "8aa7d00c9ae36024a19d400b56fa5e23fc439937",
      "filename": "gas/testsuite/gas/mmix/basep-7.d",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1903f1385bff910861942743860d8577423bcb6c/gas/testsuite/gas/mmix/basep-7.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1903f1385bff910861942743860d8577423bcb6c/gas/testsuite/gas/mmix/basep-7.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/mmix/basep-7.d?ref=1903f1385bff910861942743860d8577423bcb6c",
      "patch": "@@ -3,8 +3,6 @@\n #objdump: -drt\n \n # The -linker-allocated-gregs option validates omissions of GREG.\n-# Note the inconsequence in relocs regarding forward and backward\n-# references (not specific to this functionality); they may change.\n \n .*:     file format elf64-mmix\n \n@@ -27,8 +25,8 @@ Disassembly of section \\.text:\n    8:\t23300000 \taddu \\$48,\\$0,0\n \t\t\ta: R_MMIX_BASE_PLUS_OFFSET\t\\*ABS\\*\\+0x86\n    c:\t8d2b0000 \tldo \\$43,\\$0,0\n-\t\t\te: R_MMIX_BASE_PLUS_OFFSET\tc\\+0x2\n+\t\t\te: R_MMIX_BASE_PLUS_OFFSET\t\\*ABS\\*\\+0x4a\n   10:\t232f0000 \taddu \\$47,\\$0,0\n-\t\t\t12: R_MMIX_BASE_PLUS_OFFSET\td\\+0xd4\n+\t\t\t12: R_MMIX_BASE_PLUS_OFFSET\t\\*ABS\\*\\+0xd7\n   14:\t23300000 \taddu \\$48,\\$0,0\n-\t\t\t16: R_MMIX_BASE_PLUS_OFFSET\tc\\+0x15\n+\t\t\t16: R_MMIX_BASE_PLUS_OFFSET\t\\*ABS\\*\\+0x5d"
    }
  ]
}