{
  "sha": "94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTRjZGU1NmFiMzgzNDhiOTAxYmIxZjk2YzY0YmRkOGNmYWE1NzhmZQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-11-12T12:22:18Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-11-12T12:22:18Z"
    },
    "message": "m32r sim: Add prototypes for functions that pass/return DI values\n\n\t* m32r-sim.h (m32rbf_h_accum_get_handler): Always provide a\n\tprototype for this function.\n\t(m32rbf_h_accum_set_handler): Likewise.\n\t(m32r2f_h_accums_get_handler): Prototype.\n\t(m32r2f_h_accums_set_handler): Prototype.",
    "tree": {
      "sha": "6131e34f1d058219cf82a34ca184229a99cf8c40",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6131e34f1d058219cf82a34ca184229a99cf8c40"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94cde56ab38348b901bb1f96c64bdd8cfaa578fe/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bcb78b47614ed252226da1a688558a17d8a99ce8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bcb78b47614ed252226da1a688558a17d8a99ce8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bcb78b47614ed252226da1a688558a17d8a99ce8"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 18,
    "deletions": 1
  },
  "files": [
    {
      "sha": "698dbad919b61641591911c9ee7dbfd2f06215d1",
      "filename": "sim/m32r/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94cde56ab38348b901bb1f96c64bdd8cfaa578fe/sim/m32r/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94cde56ab38348b901bb1f96c64bdd8cfaa578fe/sim/m32r/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/ChangeLog?ref=94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-12  Nick Clifton  <nickc@redhat.com>\n+\n+\t* m32r-sim.h (m32rbf_h_accum_get_handler): Always provide a\n+\tprototype for this function.\n+\t(m32rbf_h_accum_set_handler): Likewise.\n+\t(m32r2f_h_accums_get_handler): Prototype.\n+\t(m32r2f_h_accums_set_handler): Prototype.\n+\n 2020-09-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* m32r.c (m32rbf_register_size): New function."
    },
    {
      "sha": "6f9f4610c045b857599084218c9b51309db5e077",
      "filename": "sim/m32r/m32r-sim.h",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94cde56ab38348b901bb1f96c64bdd8cfaa578fe/sim/m32r/m32r-sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94cde56ab38348b901bb1f96c64bdd8cfaa578fe/sim/m32r/m32r-sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/m32r-sim.h?ref=94cde56ab38348b901bb1f96c64bdd8cfaa578fe",
      "patch": "@@ -61,10 +61,19 @@ extern void m32rbf_h_psw_set_handler (SIM_CPU *, UQI);\n   XCONCAT2 (WANT_CPU,_h_psw_set_handler) (current_cpu, (val))\n #endif\n \n-#ifndef  GET_H_ACCUM\n+/* FIXME: These prototypes are necessary because the cgen generated\n+   cpu.h, cpux.h and cpu2.h headers do not provide them, and functions\n+   which take or return parameters that are larger than an int must be\n+   prototyed in order for them to work correctly.\n+\n+   The correct solution is to fix the code in cgen/sim.scm to generate\n+   prototypes for each of the functions it generates.  */\n extern DI   m32rbf_h_accum_get_handler (SIM_CPU *);\n extern void m32rbf_h_accum_set_handler (SIM_CPU *, DI);\n+extern DI   m32r2f_h_accums_get_handler (SIM_CPU *, UINT);\n+extern void m32r2f_h_accums_set_handler (SIM_CPU *, UINT, DI);\n \n+#ifndef  GET_H_ACCUM\n #define GET_H_ACCUM() \\\n   XCONCAT2 (WANT_CPU,_h_accum_get_handler) (current_cpu)\n #define SET_H_ACCUM(val) \\"
    }
  ]
}