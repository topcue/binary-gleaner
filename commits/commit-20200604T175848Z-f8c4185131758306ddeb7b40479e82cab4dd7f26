{
  "sha": "f8c4185131758306ddeb7b40479e82cab4dd7f26",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjhjNDE4NTEzMTc1ODMwNmRkZWI3YjQwNDc5ZTgyY2FiNGRkN2YyNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-04T17:56:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-06-04T17:58:48Z"
    },
    "message": "gdb: really share partial symtabs when using .gdb_index or .debug_names\n\nFix/follow-up to commit 17ee85fc2a (\"Share DWARF partial symtabs\").\n\nIn the non-index case, where GDB builds partial symbols from scratch,\ntwo objfiles around the same BFD correctly share partial symtabs.  The\nfirst objfile, which has to do all the work, saves a reference to the\ncreated partial symtabs in the shared per_bfd object (at the end of\ndwarf2_build_psymtabs).  The second objfile, when it reaches\ndwarf2_build_psymtabs, sees that there are already partial symtabs built\nfor this BFD and just uses it.\n\nHowever, that commit missed implementing the same sharing for cases\nwhere GDB uses .gdb_index or .debug_names to build the partial symtabs.\n\nThis patch fixes it by having the first objfile to use the BFD set\nper_bfd->partial_symtabs at the end of dwarf2_read_gdb_index /\ndwarf2_read_debug_names.  For the subsequent objfiles using that BFD,\nthe partial symtabs are then picked up in dwarf2_initialize_objfile.\n\nThis patch adds a test that mimics how the issue was originally\ntriggered:\n\n  1. Load the test file twice, such that the second objfile re-uses the\n     per_bfd object created for the first objfile.\n  2. Run to some point where in the backtrace there is a frame for a\n     function that's in a CU that's not yet read in.\n  3. Check that this frame's information is complete in the \"backtrace\"\n     output.\n\nStep 2 requires an address -> symbol lookup which uses the addrmap at\nobjfile->partial_symtabs->psymtabs_addrmap.  If the\nobjfile->partial_symtabs link is not properly setup (as is the case\nbefore this patch), the symbol for that frame won't be found and we'll\nget a frame with incomplete information.\n\nThe test fails without the fix when using boards \"cc-with-gdb-index\" and\n\"cc-with-debug-names\".\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (dwarf2_read_gdb_index): Save partial_symtabs in\n\tthe per_bfd object.\n\t(dwarf2_read_debug_names): Likewise.\n\t(dwarf2_initialize_objfile): Use partial_symtabs from per_bfd\n\tobject when re-using a per_bfd object with an index.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/share-psymtabs-bt.exp: New file.\n\t* gdb.dwarf2/share-psymtabs-bt.c: New file.\n\t* gdb.dwarf2/share-psymtabs-bt-2.c: New file.\n\nChange-Id: Ibb26210e2dfc03b80ba9fa56b875ba4cc58c0352",
    "tree": {
      "sha": "89cd25ab29ed03533340572e9506d9f79e0b6bdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/89cd25ab29ed03533340572e9506d9f79e0b6bdf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f8c4185131758306ddeb7b40479e82cab4dd7f26",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8c4185131758306ddeb7b40479e82cab4dd7f26",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f8c4185131758306ddeb7b40479e82cab4dd7f26",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8c4185131758306ddeb7b40479e82cab4dd7f26/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "add5f777decf9257f46c98dc2aacedb52a3d65e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/add5f777decf9257f46c98dc2aacedb52a3d65e6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/add5f777decf9257f46c98dc2aacedb52a3d65e6"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 152,
    "deletions": 22
  },
  "files": [
    {
      "sha": "f1430ad1eedda99b8ec93d071881d0e5c80a940c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (dwarf2_read_gdb_index): Save partial_symtabs in\n+\tthe per_bfd object.\n+\t(dwarf2_read_debug_names): Likewise.\n+\t(dwarf2_initialize_objfile): Use partial_symtabs from per_bfd\n+\tobject when re-using a per_bfd object with an index.\n+\n 2020-06-03  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/26046"
    },
    {
      "sha": "477c382b81b56bb172e0b55c81b186c6dd28235d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 34,
      "deletions": 22,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -3068,9 +3068,10 @@ dwarf2_read_gdb_index\n   offset_type cu_list_elements, types_list_elements, dwz_list_elements = 0;\n   struct dwz_file *dwz;\n   struct objfile *objfile = per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n \n   gdb::array_view<const gdb_byte> main_index_contents\n-    = get_gdb_index_contents (objfile, per_objfile->per_bfd);\n+    = get_gdb_index_contents (objfile, per_bfd);\n \n   if (main_index_contents.empty ())\n     return 0;\n@@ -3089,7 +3090,7 @@ dwarf2_read_gdb_index\n \n   /* If there is a .dwz file, read it so we can get its CU list as\n      well.  */\n-  dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+  dwz = dwarf2_get_dwz_file (per_bfd);\n   if (dwz != NULL)\n     {\n       struct mapped_index dwz_map;\n@@ -3114,29 +3115,33 @@ dwarf2_read_gdb_index\n \t}\n     }\n \n-  create_cus_from_index (per_objfile->per_bfd, cu_list, cu_list_elements,\n-\t\t\t dwz_list, dwz_list_elements);\n+  create_cus_from_index (per_bfd, cu_list, cu_list_elements, dwz_list,\n+\t\t\t dwz_list_elements);\n \n   if (types_list_elements)\n     {\n       /* We can only handle a single .debug_types when we have an\n \t index.  */\n-      if (per_objfile->per_bfd->types.size () != 1)\n+      if (per_bfd->types.size () != 1)\n \treturn 0;\n \n-      dwarf2_section_info *section = &per_objfile->per_bfd->types[0];\n+      dwarf2_section_info *section = &per_bfd->types[0];\n \n-      create_signatured_type_table_from_index (per_objfile->per_bfd,\n-\t\t\t\t\t       section, types_list,\n+      create_signatured_type_table_from_index (per_bfd, section, types_list,\n \t\t\t\t\t       types_list_elements);\n     }\n \n   create_addrmap_from_index (per_objfile, map.get ());\n \n-  per_objfile->per_bfd->index_table = std::move (map);\n-  per_objfile->per_bfd->using_index = 1;\n-  per_objfile->per_bfd->quick_file_names_table =\n-    create_quick_file_names_table (per_objfile->per_bfd->all_comp_units.size ());\n+  per_bfd->index_table = std::move (map);\n+  per_bfd->using_index = 1;\n+  per_bfd->quick_file_names_table =\n+    create_quick_file_names_table (per_bfd->all_comp_units.size ());\n+\n+  /* Save partial symtabs in the per_bfd object, for the benefit of subsequent\n+     objfiles using the same BFD.  */\n+  gdb_assert (per_bfd->partial_symtabs == nullptr);\n+  per_bfd->partial_symtabs = objfile->partial_symtabs;\n \n   return 1;\n }\n@@ -5205,6 +5210,7 @@ dwarf2_read_debug_names (dwarf2_per_objfile *per_objfile)\n   std::unique_ptr<mapped_debug_names> map (new mapped_debug_names);\n   mapped_debug_names dwz_map;\n   struct objfile *objfile = per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n \n   if (!read_debug_names_from_section (objfile, objfile_name (objfile),\n \t\t\t\t      &per_objfile->per_bfd->debug_names, *map))\n@@ -5216,7 +5222,7 @@ dwarf2_read_debug_names (dwarf2_per_objfile *per_objfile)\n \n   /* If there is a .dwz file, read it so we can get its CU list as\n      well.  */\n-  dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n+  dwz_file *dwz = dwarf2_get_dwz_file (per_bfd);\n   if (dwz != NULL)\n     {\n       if (!read_debug_names_from_section (objfile,\n@@ -5229,29 +5235,33 @@ dwarf2_read_debug_names (dwarf2_per_objfile *per_objfile)\n \t}\n     }\n \n-  create_cus_from_debug_names (per_objfile->per_bfd, *map, dwz_map);\n+  create_cus_from_debug_names (per_bfd, *map, dwz_map);\n \n   if (map->tu_count != 0)\n     {\n       /* We can only handle a single .debug_types when we have an\n \t index.  */\n-      if (per_objfile->per_bfd->types.size () != 1)\n+      if (per_bfd->types.size () != 1)\n \treturn false;\n \n-      dwarf2_section_info *section = &per_objfile->per_bfd->types[0];\n+      dwarf2_section_info *section = &per_bfd->types[0];\n \n       create_signatured_type_table_from_debug_names\n-\t(per_objfile, *map, section, &per_objfile->per_bfd->abbrev);\n+\t(per_objfile, *map, section, &per_bfd->abbrev);\n     }\n \n-  create_addrmap_from_aranges (per_objfile,\n-\t\t\t       &per_objfile->per_bfd->debug_aranges);\n+  create_addrmap_from_aranges (per_objfile, &per_bfd->debug_aranges);\n \n-  per_objfile->per_bfd->debug_names_table = std::move (map);\n-  per_objfile->per_bfd->using_index = 1;\n-  per_objfile->per_bfd->quick_file_names_table =\n+  per_bfd->debug_names_table = std::move (map);\n+  per_bfd->using_index = 1;\n+  per_bfd->quick_file_names_table =\n     create_quick_file_names_table (per_objfile->per_bfd->all_comp_units.size ());\n \n+  /* Save partial symtabs in the per_bfd object, for the benefit of subsequent\n+     objfiles using the same BFD.  */\n+  gdb_assert (per_bfd->partial_symtabs == nullptr);\n+  per_bfd->partial_symtabs = objfile->partial_symtabs;\n+\n   return true;\n }\n \n@@ -5972,6 +5982,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n   if (per_bfd->debug_names_table != nullptr)\n     {\n       *index_kind = dw_index_kind::DEBUG_NAMES;\n+      per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n       return true;\n     }\n@@ -5981,6 +5992,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n   if (per_bfd->index_table != nullptr)\n     {\n       *index_kind = dw_index_kind::GDB_INDEX;\n+      per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n       return true;\n     }"
    },
    {
      "sha": "2a7779b449020c280d624bb0650ced71d8f61fdf",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.dwarf2/share-psymtabs-bt.exp: New file.\n+\t* gdb.dwarf2/share-psymtabs-bt.c: New file.\n+\t* gdb.dwarf2/share-psymtabs-bt-2.c: New file.\n+\n 2020-06-04  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (gdb_file_cmd): Avoid path names in error messages."
    },
    {
      "sha": "c713eb22693c16584faf522249c9faff81d9ef9f",
      "filename": "gdb/testsuite/gdb.base/share-psymtabs-bt-2.c",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/share-psymtabs-bt-2.c?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -0,0 +1,24 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+void bar (int x);\n+\n+void\n+foo (int x)\n+{\n+  bar (x);\n+}"
    },
    {
      "sha": "97ad3457905b6d1330ba1afee43a5c436f3834a7",
      "filename": "gdb/testsuite/gdb.base/share-psymtabs-bt.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/share-psymtabs-bt.c?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -0,0 +1,29 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+void\n+bar (int x)\n+{}\n+\n+void foo (int x);\n+\n+int\n+main (void)\n+{\n+  foo (12345);\n+  return 0;\n+}"
    },
    {
      "sha": "b9b62d91e60e8520d38329fed75ae080d992c71a",
      "filename": "gdb/testsuite/gdb.base/share-psymtabs-bt.exp",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8c4185131758306ddeb7b40479e82cab4dd7f26/gdb/testsuite/gdb.base/share-psymtabs-bt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/share-psymtabs-bt.exp?ref=f8c4185131758306ddeb7b40479e82cab4dd7f26",
      "patch": "@@ -0,0 +1,51 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that a backtrace is shown correctly for an objfile that uses partial\n+# symtabs created by another objfile sharing the same BFD.\n+#\n+# It mimics how a bug with psymtab sharing was initially found:\n+#\n+#  1. Load the test file twice, such that the second objfile re-uses the\n+#     per_bfd object created for the first objfile.\n+#  2. Run to some point where in the backtrace there is a frame for a\n+#     function that's in a CU that's not yet read in.\n+#  3. Check that this frame's information is complete in the \"backtrace\"\n+#     output.\n+\n+standard_testfile .c share-psymtabs-bt-2.c\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile \"$srcfile $srcfile2\" \\\n+         {debug}] } {\n+    untested \"failed to compile\"\n+    return -1\n+}\n+\n+# Load $binfile a second time.  The second created objfile will re-use the\n+# partial symtabs created by the first one.\n+if { [gdb_file_cmd $binfile] != 0 } {\n+    fail \"file command failed\"\n+    return -1\n+}\n+\n+gdb_breakpoint \"bar\"\n+if { ![runto \"bar\"] } {\n+    fail \"failed to run to bar\"\n+    return -1\n+}\n+\n+# A buggy GDB would fail to find the full symbol associated to this frame's\n+# address, so would just show \"foo ()\" (from the minimal symbol).\n+gdb_test \"bt\" \"foo \\\\(x=12345\\\\).*\""
    }
  ]
}