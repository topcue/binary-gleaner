{
  "sha": "c489f8c6e61e0b60a4108e10be3681885b253864",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQ4OWY4YzZlNjFlMGI2MGE0MTA4ZTEwYmUzNjgxODg1YjI1Mzg2NA==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-09-02T17:13:19Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-09-10T13:37:52Z"
    },
    "message": "Add gdb/nat common functions for listing threads\n\nAdd netbsd_nat::netbsd_thread_lister a generic thread lister, used\ninternally in netbsd-nat.c, copied from gdb/nbsd-nat.c.\n\nAdd public extern functions for listing threads:\n * netbsd_nat::thread_alive\n * netbsd_nat::thread_name\n * netbsd_nat::for_each_thread\n\ngdb/ChangeLog:\n\n\t* netbsd-nat.h: Include \"gdbsupport/function-view.h\".\n\t* (netbsd_nat::thread_alive, netbsd_nat::thread_name)\n\t(netbsd_nat::for_each_thread): Add.\n\t* netbsd-nat.c: Include \"gdbsupport/common-defs.h\" and\n\t\"gdbsupport/common-debug.h\".\n\t* (netbsd_nat::netbsd_thread_lister)\n\t(netbsd_nat::thread_alive, netbsd_nat::thread_name)\n\t(netbsd_nat::for_each_thread): Add.",
    "tree": {
      "sha": "169e55e7e0732430f0eaa5097ece3016d43aca35",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/169e55e7e0732430f0eaa5097ece3016d43aca35"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c489f8c6e61e0b60a4108e10be3681885b253864",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c489f8c6e61e0b60a4108e10be3681885b253864",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c489f8c6e61e0b60a4108e10be3681885b253864",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c489f8c6e61e0b60a4108e10be3681885b253864/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "330662f68490e09efad94fba603f09e1746941b3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/330662f68490e09efad94fba603f09e1746941b3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/330662f68490e09efad94fba603f09e1746941b3"
    }
  ],
  "stats": {
    "total": 156,
    "additions": 156,
    "deletions": 0
  },
  "files": [
    {
      "sha": "21f30e4b297e8f83d7a5ff1193c5e7577eeb4568",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c489f8c6e61e0b60a4108e10be3681885b253864",
      "patch": "@@ -1,3 +1,14 @@\n+2020-09-10  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* netbsd-nat.h: Include \"gdbsupport/function-view.h\".\n+\t* (netbsd_nat::thread_alive, netbsd_nat::thread_name)\n+\t(netbsd_nat::for_each_thread): Add.\n+\t* netbsd-nat.c: Include \"gdbsupport/common-defs.h\" and\n+\t\"gdbsupport/common-debug.h\".\n+\t* (netbsd_nat::netbsd_thread_lister)\n+\t(netbsd_nat::thread_alive, netbsd_nat::thread_name)\n+\t(netbsd_nat::for_each_thread): Add.\n+\n 2020-09-10  Kamil Rytarowski  <n54@gmx.com>\n \n \t* netbsd-nat.h: Include <unistd.h>."
    },
    {
      "sha": "3f8b8b8eeab3acfe5dc1b9ff76f8f4ea81ef3542",
      "filename": "gdb/nat/netbsd-nat.c",
      "status": "modified",
      "additions": 125,
      "deletions": 0,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/nat/netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/nat/netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/netbsd-nat.c?ref=c489f8c6e61e0b60a4108e10be3681885b253864",
      "patch": "@@ -17,11 +17,17 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#include \"gdbsupport/common-defs.h\"\n #include \"nat/netbsd-nat.h\"\n+#include \"gdbsupport/common-debug.h\"\n \n #include <sys/types.h>\n #include <sys/sysctl.h>\n \n+#include <cstring>\n+\n+#include \"gdbsupport/function-view.h\"\n+\n namespace netbsd_nat\n {\n \n@@ -38,4 +44,123 @@ pid_to_exec_file (pid_t pid)\n   return buf;\n }\n \n+/* Generic thread (LWP) lister within a specified PID.  The CALLBACK\n+   parameters is a C++ function that is called for each detected thread.\n+   When the CALLBACK function returns true, the iteration is interrupted.\n+\n+   This function assumes internally that the queried process is stopped\n+   and the number of threads does not change between two sysctl () calls.  */\n+\n+static bool\n+netbsd_thread_lister (const pid_t pid,\n+\t\t      gdb::function_view<bool (const struct kinfo_lwp *)>\n+\t\t      callback)\n+{\n+  int mib[5] = {CTL_KERN, KERN_LWP, pid, sizeof (struct kinfo_lwp), 0};\n+  size_t size;\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n+    perror_with_name ((\"sysctl\"));\n+\n+  mib[4] = size / sizeof (size_t);\n+\n+  gdb::unique_xmalloc_ptr<struct kinfo_lwp[]> kl\n+    ((struct kinfo_lwp *) xcalloc (size, 1));\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), kl.get (), &size, NULL, 0) == -1\n+      || size == 0)\n+    perror_with_name ((\"sysctl\"));\n+\n+  for (size_t i = 0; i < size / sizeof (struct kinfo_lwp); i++)\n+    {\n+      struct kinfo_lwp *l = &kl[i];\n+\n+      /* Return true if the specified thread is alive.  */\n+      auto lwp_alive\n+\t= [] (struct kinfo_lwp *lwp)\n+\t  {\n+\t    switch (lwp->l_stat)\n+\t      {\n+\t      case LSSLEEP:\n+\t      case LSRUN:\n+\t      case LSONPROC:\n+\t      case LSSTOP:\n+\t      case LSSUSPENDED:\n+\t\treturn true;\n+\t      default:\n+\t\treturn false;\n+\t      }\n+\t  };\n+\n+      /* Ignore embryonic or demised threads.  */\n+      if (!lwp_alive (l))\n+\tcontinue;\n+\n+      if (callback (l))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* See netbsd-nat.h.  */\n+\n+bool\n+thread_alive (ptid_t ptid)\n+{\n+  pid_t pid = ptid.pid ();\n+  lwpid_t lwp = ptid.lwp ();\n+\n+  auto fn\n+    = [=] (const struct kinfo_lwp *kl)\n+      {\n+        return kl->l_lid == lwp;\n+      };\n+\n+  return netbsd_thread_lister (pid, fn);\n+}\n+\n+/* See netbsd-nat.h.  */\n+\n+const char *\n+thread_name (ptid_t ptid)\n+{\n+  pid_t pid = ptid.pid ();\n+  lwpid_t lwp = ptid.lwp ();\n+\n+  static char buf[KI_LNAMELEN] = {};\n+\n+  auto fn\n+    = [=] (const struct kinfo_lwp *kl)\n+      {\n+\tif (kl->l_lid == lwp)\n+\t  {\n+\t    xsnprintf (buf, sizeof buf, \"%s\", kl->l_name);\n+\t    return true;\n+\t  }\n+\treturn false;\n+      };\n+\n+  if (netbsd_thread_lister (pid, fn))\n+    return buf;\n+  else\n+    return NULL;\n+}\n+\n+/* See netbsd-nat.h.  */\n+\n+void\n+for_each_thread (pid_t pid, gdb::function_view<void (ptid_t)> callback)\n+{\n+  auto fn\n+    = [=, &callback] (const struct kinfo_lwp *kl)\n+      {\n+\tptid_t ptid = ptid_t (pid, kl->l_lid, 0);\n+\tcallback (ptid);\n+\treturn false;\n+      };\n+\n+  netbsd_thread_lister (pid, fn);\n+}\n+\n }"
    },
    {
      "sha": "3f2650f5cada24ace1e912d1425e2bcf48ba03c6",
      "filename": "gdb/nat/netbsd-nat.h",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/nat/netbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c489f8c6e61e0b60a4108e10be3681885b253864/gdb/nat/netbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/netbsd-nat.h?ref=c489f8c6e61e0b60a4108e10be3681885b253864",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef NAT_NETBSD_NAT_H\n #define NAT_NETBSD_NAT_H\n \n+#include \"gdbsupport/function-view.h\"\n+\n #include <unistd.h>\n \n namespace netbsd_nat\n@@ -30,6 +32,24 @@ namespace netbsd_nat\n \n extern const char *pid_to_exec_file (pid_t pid);\n \n+/* Return true if PTID is still active in the inferior.  */\n+\n+extern bool thread_alive (ptid_t ptid);\n+\n+/* Return the name assigned to a thread by an application.  Returns\n+   the string in a static buffer.\n+\n+   This function assumes internally that the queried process is stopped.  */\n+\n+extern const char *thread_name (ptid_t ptid);\n+\n+/* A generic thread lister within a specific PID.  The CALLBACK parameter\n+   is a C++ function that is called for each detected thread.\n+\n+   This function assumes internally that the queried process is stopped.  */\n+\n+extern void for_each_thread (pid_t pid,\n+\t\t\t     gdb::function_view<void (ptid_t)> callback);\n }\n \n #endif"
    }
  ]
}