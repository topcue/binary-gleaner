{
  "sha": "02e12e3806bc60f66e3c446c4dfa9c06a400e604",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDJlMTJlMzgwNmJjNjBmNjZlM2M0NDZjNGRmYTljMDZhNDAwZTYwNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-03T02:12:32Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-06T16:39:33Z"
    },
    "message": "Use std::vector in type stacks\n\nThis removes the use of VEC from parse.c and, at the same time,\nremoves some related cleanups from c-exp.y.\n\ngdb/ChangeLog\n2019-01-06  Tom Tromey  <tom@tromey.com>\n\n\t* parser-defs.h (type_ptr): Remove typedef.  Don't declare VEC.\n\t(union type_stack_elt) <typelist_val>: Now a pointer to\n\tstd::vector.\n\t(type_stack_cleanup): Don't declare.\n\t(push_typelist): Update.\n\t* parse.c (pop_typelist): Return a std::vector.\n\t(push_typelist): Take a std::vector.\n\t(follow_types): Update.  Do not free args.\n\t(type_stack_cleanup): Remove.\n\t* c-exp.y (struct c_parse_state): New.\n\t(cpstate): New global.\n\t(type_aggregate_p, exp, ptr_operator, parameter_typelist)\n\t(nonempty_typelist): Update.\n\t(func_mod): Create a new vector.\n\t(c_parse): Create a c_parse_state.\n\t(check_parameter_typelist): Do not delete params.\n\t(function_method): Update.  Do not delete type_list.",
    "tree": {
      "sha": "480e7eca926f9945bcd9d7c199b7df57271ddde1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/480e7eca926f9945bcd9d7c199b7df57271ddde1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/02e12e3806bc60f66e3c446c4dfa9c06a400e604",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02e12e3806bc60f66e3c446c4dfa9c06a400e604",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/02e12e3806bc60f66e3c446c4dfa9c06a400e604",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02e12e3806bc60f66e3c446c4dfa9c06a400e604/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f097f5ad808bd535236a65077f40e9d082a4ec0b"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 68,
    "deletions": 51
  },
  "files": [
    {
      "sha": "6ca534a0d24e94ad64fb54ca126e03bb86bb539b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=02e12e3806bc60f66e3c446c4dfa9c06a400e604",
      "patch": "@@ -1,3 +1,23 @@\n+2019-01-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* parser-defs.h (type_ptr): Remove typedef.  Don't declare VEC.\n+\t(union type_stack_elt) <typelist_val>: Now a pointer to\n+\tstd::vector.\n+\t(type_stack_cleanup): Don't declare.\n+\t(push_typelist): Update.\n+\t* parse.c (pop_typelist): Return a std::vector.\n+\t(push_typelist): Take a std::vector.\n+\t(follow_types): Update.  Do not free args.\n+\t(type_stack_cleanup): Remove.\n+\t* c-exp.y (struct c_parse_state): New.\n+\t(cpstate): New global.\n+\t(type_aggregate_p, exp, ptr_operator, parameter_typelist)\n+\t(nonempty_typelist): Update.\n+\t(func_mod): Create a new vector.\n+\t(c_parse): Create a c_parse_state.\n+\t(check_parameter_typelist): Do not delete params.\n+\t(function_method): Update.  Do not delete type_list.\n+\n 2019-01-06  Tom Tromey  <tom@tromey.com>\n \n \tPR gdb/28155:"
    },
    {
      "sha": "54eb38935bdc30c90d49c7d9a2519396be23c12a",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 40,
      "deletions": 26,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=02e12e3806bc60f66e3c446c4dfa9c06a400e604",
      "patch": "@@ -66,6 +66,20 @@\n \n static struct parser_state *pstate = NULL;\n \n+/* Data that must be held for the duration of a parse.  */\n+\n+struct c_parse_state\n+{\n+  /* These are used to hold type lists and type stacks that are\n+     allocated during the parse.  */\n+  std::vector<std::unique_ptr<std::vector<struct type *>>> type_lists;\n+  std::vector<std::unique_ptr<struct type_stack>> type_stacks;\n+};\n+\n+/* This is set and cleared in c_parse.  */\n+\n+static struct c_parse_state *cpstate;\n+\n int yyparse (void);\n \n static int yylex (void);\n@@ -101,7 +115,7 @@ static int type_aggregate_p (struct type *);\n     enum exp_opcode opcode;\n \n     struct stoken_vector svec;\n-    VEC (type_ptr) *tvec;\n+    std::vector<struct type *> *tvec;\n \n     struct type_stack *type_stack;\n \n@@ -114,7 +128,7 @@ static int parse_number (struct parser_state *par_state,\n \t\t\t const char *, int, int, YYSTYPE *);\n static struct stoken operator_stoken (const char *);\n static struct stoken typename_stoken (const char *);\n-static void check_parameter_typelist (VEC (type_ptr) *);\n+static void check_parameter_typelist (std::vector<struct type *> *);\n static void write_destructor_name (struct parser_state *par_state,\n \t\t\t\t   struct stoken);\n \n@@ -552,10 +566,9 @@ arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n \t;\n \n function_method:       exp '(' parameter_typelist ')' const_or_volatile\n-\t\t\t{ int i;\n-\t\t\t  VEC (type_ptr) *type_list = $3;\n-\t\t\t  struct type *type_elt;\n-\t\t\t  LONGEST len = VEC_length (type_ptr, type_list);\n+\t\t\t{\n+\t\t\t  std::vector<struct type *> *type_list = $3;\n+\t\t\t  LONGEST len = type_list->size ();\n \n \t\t\t  write_exp_elt_opcode (pstate, TYPE_INSTANCE);\n \t\t\t  /* Save the const/volatile qualifiers as\n@@ -564,13 +577,10 @@ function_method:       exp '(' parameter_typelist ')' const_or_volatile\n \t\t\t  write_exp_elt_longcst (pstate,\n \t\t\t\t\t\t follow_type_instance_flags ());\n \t\t\t  write_exp_elt_longcst (pstate, len);\n-\t\t\t  for (i = 0;\n-\t\t\t       VEC_iterate (type_ptr, type_list, i, type_elt);\n-\t\t\t       ++i)\n+\t\t\t  for (type *type_elt : *type_list)\n \t\t\t    write_exp_elt_type (pstate, type_elt);\n \t\t\t  write_exp_elt_longcst(pstate, len);\n \t\t\t  write_exp_elt_opcode (pstate, TYPE_INSTANCE);\n-\t\t\t  VEC_free (type_ptr, type_list);\n \t\t\t}\n \t;\n \n@@ -1157,9 +1167,7 @@ ptr_operator:\n ptr_operator_ts: ptr_operator\n \t\t\t{\n \t\t\t  $$ = get_type_stack ();\n-\t\t\t  /* This cleanup is eventually run by\n-\t\t\t     c_parse.  */\n-\t\t\t  make_cleanup (type_stack_cleanup, $$);\n+\t\t\t  cpstate->type_stacks.emplace_back ($$);\n \t\t\t}\n \t;\n \n@@ -1209,7 +1217,10 @@ array_mod:\t'[' ']'\n \t;\n \n func_mod:\t'(' ')'\n-\t\t\t{ $$ = NULL; }\n+\t\t\t{\n+\t\t\t  $$ = new std::vector<struct type *>;\n+\t\t\t  cpstate->type_lists.emplace_back ($$);\n+\t\t\t}\n \t|\t'(' parameter_typelist ')'\n \t\t\t{ $$ = $2; }\n \t;\n@@ -1471,7 +1482,7 @@ parameter_typelist:\n \t\t\t{ check_parameter_typelist ($1); }\n \t|\tnonempty_typelist ',' DOTDOTDOT\n \t\t\t{\n-\t\t\t  VEC_safe_push (type_ptr, $1, NULL);\n+\t\t\t  $1->push_back (NULL);\n \t\t\t  check_parameter_typelist ($1);\n \t\t\t  $$ = $1;\n \t\t\t}\n@@ -1480,13 +1491,16 @@ parameter_typelist:\n nonempty_typelist\n \t:\ttype\n \t\t{\n-\t\t  VEC (type_ptr) *typelist = NULL;\n-\t\t  VEC_safe_push (type_ptr, typelist, $1);\n+\t\t  std::vector<struct type *> *typelist\n+\t\t    = new std::vector<struct type *>;\n+\t\t  cpstate->type_lists.emplace_back (typelist);\n+\n+\t\t  typelist->push_back ($1);\n \t\t  $$ = typelist;\n \t\t}\n \t|\tnonempty_typelist ',' type\n \t\t{\n-\t\t  VEC_safe_push (type_ptr, $1, $3);\n+\t\t  $1->push_back ($3);\n \t\t  $$ = $1;\n \t\t}\n \t;\n@@ -1758,30 +1772,27 @@ type_aggregate_p (struct type *type)\n /* Validate a parameter typelist.  */\n \n static void\n-check_parameter_typelist (VEC (type_ptr) *params)\n+check_parameter_typelist (std::vector<struct type *> *params)\n {\n   struct type *type;\n   int ix;\n \n-  for (ix = 0; VEC_iterate (type_ptr, params, ix, type); ++ix)\n+  for (ix = 0; ix < params->size (); ++ix)\n     {\n+      type = (*params)[ix];\n       if (type != NULL && TYPE_CODE (check_typedef (type)) == TYPE_CODE_VOID)\n \t{\n \t  if (ix == 0)\n \t    {\n-\t      if (VEC_length (type_ptr, params) == 1)\n+\t      if (params->size () == 1)\n \t\t{\n \t\t  /* Ok.  */\n \t\t  break;\n \t\t}\n-\t      VEC_free (type_ptr, params);\n \t      error (_(\"parameter types following 'void'\"));\n \t    }\n \t  else\n-\t    {\n-\t      VEC_free (type_ptr, params);\n-\t      error (_(\"'void' invalid as parameter type\"));\n-\t    }\n+\t    error (_(\"'void' invalid as parameter type\"));\n \t}\n     }\n }\n@@ -3276,6 +3287,9 @@ c_parse (struct parser_state *par_state)\n   gdb_assert (par_state != NULL);\n   pstate = par_state;\n \n+  c_parse_state cstate;\n+  scoped_restore cstate_restore = make_scoped_restore (&cpstate, &cstate);\n+\n   gdb::unique_xmalloc_ptr<struct macro_scope> macro_scope;\n \n   if (expression_context_block)"
    },
    {
      "sha": "e7168acf7ab339e9381b13483c2ecdb31e329c24",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 6,
      "deletions": 18,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=02e12e3806bc60f66e3c446c4dfa9c06a400e604",
      "patch": "@@ -1457,7 +1457,7 @@ pop_type_int (void)\n \n /* Pop a type list element from the global type stack.  */\n \n-static VEC (type_ptr) *\n+static std::vector<struct type *> *\n pop_typelist (void)\n {\n   gdb_assert (!type_stack.elements.empty ());\n@@ -1501,7 +1501,7 @@ push_type_stack (struct type_stack *stack)\n \n /* Copy the global type stack into a newly allocated type stack and\n    return it.  The global stack is cleared.  The returned type stack\n-   must be freed with type_stack_cleanup.  */\n+   must be freed with delete.  */\n \n struct type_stack *\n get_type_stack (void)\n@@ -1511,22 +1511,12 @@ get_type_stack (void)\n   return result;\n }\n \n-/* A cleanup function that destroys a single type stack.  */\n-\n-void\n-type_stack_cleanup (void *arg)\n-{\n-  struct type_stack *stack = (struct type_stack *) arg;\n-\n-  delete stack;\n-}\n-\n /* Push a function type with arguments onto the global type stack.\n    LIST holds the argument types.  If the final item in LIST is NULL,\n    then the function will be varargs.  */\n \n void\n-push_typelist (VEC (type_ptr) *list)\n+push_typelist (std::vector<struct type *> *list)\n {\n   type_stack_elt elt;\n   elt.typelist_val = list;\n@@ -1655,14 +1645,12 @@ follow_types (struct type *follow_type)\n \n       case tp_function_with_arguments:\n \t{\n-\t  VEC (type_ptr) *args = pop_typelist ();\n+\t  std::vector<struct type *> *args = pop_typelist ();\n \n \t  follow_type\n \t    = lookup_function_type_with_arguments (follow_type,\n-\t\t\t\t\t\t   VEC_length (type_ptr, args),\n-\t\t\t\t\t\t   VEC_address (type_ptr,\n-\t\t\t\t\t\t\t\targs));\n-\t  VEC_free (type_ptr, args);\n+\t\t\t\t\t\t   args->size (),\n+\t\t\t\t\t\t   args->data ());\n \t}\n \tbreak;\n "
    },
    {
      "sha": "5b38477895ab5decf4ce7dec7c3c768b89d9f18e",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02e12e3806bc60f66e3c446c4dfa9c06a400e604/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=02e12e3806bc60f66e3c446c4dfa9c06a400e604",
      "patch": "@@ -200,9 +200,6 @@ struct objc_class_str\n     int theclass;\n   };\n \n-typedef struct type *type_ptr;\n-DEF_VEC_P (type_ptr);\n-\n /* For parsing of complicated types.\n    An array should be preceded in the list by the size of the array.  */\n enum type_pieces\n@@ -225,7 +222,7 @@ union type_stack_elt\n     enum type_pieces piece;\n     int int_val;\n     struct type_stack *stack_val;\n-    VEC (type_ptr) *typelist_val;\n+    std::vector<struct type *> *typelist_val;\n   };\n \n /* The type stack is an instance of this structure.  */\n@@ -303,9 +300,7 @@ extern struct type_stack *append_type_stack (struct type_stack *to,\n \n extern void push_type_stack (struct type_stack *stack);\n \n-extern void type_stack_cleanup (void *arg);\n-\n-extern void push_typelist (VEC (type_ptr) *typelist);\n+extern void push_typelist (std::vector<struct type *> *typelist);\n \n extern int dump_subexp (struct expression *, struct ui_file *, int);\n "
    }
  ]
}