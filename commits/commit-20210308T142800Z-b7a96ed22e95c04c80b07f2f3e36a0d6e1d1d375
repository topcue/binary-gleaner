{
  "sha": "b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjdhOTZlZDIyZTk1YzA0YzgwYjA3ZjJmM2UzNmEwZDZlMWQxZDM3NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:00Z"
    },
    "message": "Split out eval_op_member\n\nThis splits STRUCTOP_MEMBER into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_member): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "4749c0e1f9a67147de50464bb0689150e0c2f940",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4749c0e1f9a67147de50464bb0689150e0c2f940"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb461aa39e52cbbe722136bdbb9625bf993f59f0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb461aa39e52cbbe722136bdbb9625bf993f59f0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb461aa39e52cbbe722136bdbb9625bf993f59f0"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 49,
    "deletions": 32
  },
  "files": [
    {
      "sha": "a0a98b99cb97311af194477bc6fdf215f669f3db",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_member): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_op_structop_ptr): New function."
    },
    {
      "sha": "d609b737a59ce9bb1ad14e77bc90c1954756a54a",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 44,
      "deletions": 32,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=b7a96ed22e95c04c80b07f2f3e36a0d6e1d1d375",
      "patch": "@@ -1413,6 +1413,49 @@ eval_op_structop_ptr (struct type *expect_type, struct expression *exp,\n   return arg3;\n }\n \n+/* A helper function for STRUCTOP_MEMBER.  */\n+\n+static struct value *\n+eval_op_member (struct type *expect_type, struct expression *exp,\n+\t\tenum noside noside,\n+\t\tstruct value *arg1, struct value *arg2)\n+{\n+  long mem_offset;\n+\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  struct value *arg3;\n+  struct type *type = check_typedef (value_type (arg2));\n+  switch (type->code ())\n+    {\n+    case TYPE_CODE_METHODPTR:\n+      if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+\treturn value_zero (TYPE_TARGET_TYPE (type), not_lval);\n+      else\n+\t{\n+\t  arg2 = cplus_method_ptr_to_value (&arg1, arg2);\n+\t  gdb_assert (value_type (arg2)->code () == TYPE_CODE_PTR);\n+\t  return value_ind (arg2);\n+\t}\n+\n+    case TYPE_CODE_MEMBERPTR:\n+      /* Now, convert these values to an address.  */\n+      arg1 = value_cast_pointers (lookup_pointer_type (TYPE_SELF_TYPE (type)),\n+\t\t\t\t  arg1, 1);\n+\n+      mem_offset = value_as_long (arg2);\n+\n+      arg3 = value_from_pointer (lookup_pointer_type (TYPE_TARGET_TYPE (type)),\n+\t\t\t\t value_as_long (arg1) + mem_offset);\n+      return value_ind (arg3);\n+\n+    default:\n+      error (_(\"non-pointer-to-member value used \"\n+\t       \"in pointer-to-member construct\"));\n+    }\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -1428,7 +1471,6 @@ evaluate_subexp_standard (struct type *expect_type,\n   int nargs;\n   struct value **argvec;\n   int ix;\n-  long mem_offset;\n   struct type **arg_types;\n \n   pc = (*pos)++;\n@@ -2023,37 +2065,7 @@ evaluate_subexp_standard (struct type *expect_type,\n \n       arg2 = evaluate_subexp (nullptr, exp, pos, noside);\n \n-      if (noside == EVAL_SKIP)\n-\treturn eval_skip_value (exp);\n-\n-      type = check_typedef (value_type (arg2));\n-      switch (type->code ())\n-\t{\n-\tcase TYPE_CODE_METHODPTR:\n-\t  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t    return value_zero (TYPE_TARGET_TYPE (type), not_lval);\n-\t  else\n-\t    {\n-\t      arg2 = cplus_method_ptr_to_value (&arg1, arg2);\n-\t      gdb_assert (value_type (arg2)->code () == TYPE_CODE_PTR);\n-\t      return value_ind (arg2);\n-\t    }\n-\n-\tcase TYPE_CODE_MEMBERPTR:\n-\t  /* Now, convert these values to an address.  */\n-\t  arg1 = value_cast_pointers (lookup_pointer_type (TYPE_SELF_TYPE (type)),\n-\t\t\t\t      arg1, 1);\n-\n-\t  mem_offset = value_as_long (arg2);\n-\n-\t  arg3 = value_from_pointer (lookup_pointer_type (TYPE_TARGET_TYPE (type)),\n-\t\t\t\t     value_as_long (arg1) + mem_offset);\n-\t  return value_ind (arg3);\n-\n-\tdefault:\n-\t  error (_(\"non-pointer-to-member value used \"\n-\t\t   \"in pointer-to-member construct\"));\n-\t}\n+      return eval_op_member (expect_type, exp, noside, arg1, arg2);\n \n     case TYPE_INSTANCE:\n       {"
    }
  ]
}