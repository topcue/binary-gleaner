{
  "sha": "5ce032bdfc60a8f44f6307b2297384c852100f95",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWNlMDMyYmRmYzYwYThmNDRmNjMwN2IyMjk3Mzg0Yzg1MjEwMGY5NQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-04-19T09:39:47Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-04-19T09:39:47Z"
    },
    "message": "RX Assembler: Ensure that the internal limit on the number of relaxation iterations is not larger that the external limit.\n\n\tPR 24464\n\t* config/tc-rx.h (md_relax_frag): Pass the max_iterations variable\n\tto the relaxation function.\n\t* config/tc-rx.c (rx_relax_frag): Add new parameter - the maximum\n\tnumber of iterations.  Make sure that our internal iteration limit\n\tdoes not exceed this external iteration limit.",
    "tree": {
      "sha": "caba4efd415ea2d34cef2332481458b8b8f377db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/caba4efd415ea2d34cef2332481458b8b8f377db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ce032bdfc60a8f44f6307b2297384c852100f95",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ce032bdfc60a8f44f6307b2297384c852100f95",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ce032bdfc60a8f44f6307b2297384c852100f95",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ce032bdfc60a8f44f6307b2297384c852100f95/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fce9773608d45757dfb26ef7783f37d432ae9a88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fce9773608d45757dfb26ef7783f37d432ae9a88",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fce9773608d45757dfb26ef7783f37d432ae9a88"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 31,
    "deletions": 8
  },
  "files": [
    {
      "sha": "d49ec4d9278dff465880ac263d4226e13e627e69",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5ce032bdfc60a8f44f6307b2297384c852100f95",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-19  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24464\n+\t* config/tc-rx.h (md_relax_frag): Pass the max_iterations variable\n+\tto the relaxation function.\n+\t* config/tc-rx.c (rx_relax_frag): Add new parameter - the maximum\n+\tnumber of iterations.  Make sure that our internal iteration limit\n+\tdoes not exceed this external iteration limit.\n+\n 2019-04-18  Matthew Fortune  <matthew.fortune@mips.com>\n \n \t* config/tc-mips.c (match_non_zero_reg_operand): Update"
    },
    {
      "sha": "6b19f2f397152860d8423fb80fce7f1453060f1e",
      "filename": "gas/config/tc-rx.c",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/config/tc-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/config/tc-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-rx.c?ref=5ce032bdfc60a8f44f6307b2297384c852100f95",
      "patch": "@@ -740,8 +740,8 @@ typedef struct rx_bytesT\n   int n_relax;\n   int link_relax;\n   fixS *link_relax_fixP;\n-  char times_grown;\n-  char times_shrank;\n+  unsigned long times_grown;\n+  unsigned long times_shrank;\n } rx_bytesT;\n \n static rx_bytesT rx_bytes;\n@@ -1558,7 +1558,7 @@ rx_next_opcode (fragS *fragP)\n    fr_subtype to calculate the difference.  */\n \n int\n-rx_relax_frag (segT segment ATTRIBUTE_UNUSED, fragS * fragP, long stretch)\n+rx_relax_frag (segT segment ATTRIBUTE_UNUSED, fragS * fragP, long stretch, unsigned long max_iterations)\n {\n   addressT addr0, sym_addr;\n   addressT mypc;\n@@ -1755,9 +1755,16 @@ rx_relax_frag (segT segment ATTRIBUTE_UNUSED, fragS * fragP, long stretch)\n   /* This prevents infinite loops in align-heavy sources.  */\n   if (newsize < oldsize)\n     {\n-      if (fragP->tc_frag_data->times_shrank > 10\n-         && fragP->tc_frag_data->times_grown > 10)\n-       newsize = oldsize;\n+      /* Make sure that our iteration limit is no bigger than the one being\n+\t used inside write.c:relax_segment().  Otherwise we can end up\n+\t iterating for too long, and triggering a fatal error there.  See\n+\t PR 24464 for more details.  */\n+      unsigned long limit = max_iterations > 10 ? 10 : max_iterations;\n+\n+      if (fragP->tc_frag_data->times_shrank > limit\n+\t  && fragP->tc_frag_data->times_grown > limit)\n+\tnewsize = oldsize;\n+\n       if (fragP->tc_frag_data->times_shrank < 20)\n        fragP->tc_frag_data->times_shrank ++;\n     }"
    },
    {
      "sha": "69302e565b7ecf7fc6978b56a1fa121dac0c16c5",
      "filename": "gas/config/tc-rx.h",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/config/tc-rx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ce032bdfc60a8f44f6307b2297384c852100f95/gas/config/tc-rx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-rx.h?ref=5ce032bdfc60a8f44f6307b2297384c852100f95",
      "patch": "@@ -54,8 +54,15 @@ extern int target_big_endian;\n #define md_end rx_md_end\n extern void rx_md_end (void);\n \n-#define md_relax_frag rx_relax_frag\n-extern int rx_relax_frag (segT, fragS *, long);\n+/* Note - the definition of MD_RELAX_FRAG here includes a reference to the\n+   MAX_ITERATIONS variable which is defined locally in write.c:relax_segment()\n+   but which is not normally passed to target specific relaxing code.  This\n+   reference is needed however as the number of iterations of the RX relaxing\n+   code needs to be constrained by the maximum number of iterations allowed\n+   by relax_segment().  See PR 24464 for more details.  */\n+#define md_relax_frag(SEG, FRAGP, STRETCH) \\\n+  rx_relax_frag ((SEG), (FRAGP), (STRETCH), max_iterations)\n+extern int rx_relax_frag (segT, fragS *, long, unsigned long);\n \n #define TC_FRAG_TYPE struct rx_bytesT *\n #define TC_FRAG_INIT(fragp, max_bytes) rx_frag_init (fragp)"
    }
  ]
}