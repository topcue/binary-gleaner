{
  "sha": "55e3926e79937da55da3eaad3b15b4c099071976",
  "node_id": "C_kwDOANOeidoAKDU1ZTM5MjZlNzk5MzdkYTU1ZGEzZWFhZDNiMTViNGMwOTkwNzE5NzY",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-05T23:24:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-06T00:54:29Z"
    },
    "message": "PR28401, invalid section name lookup\n\nThe PR28401 testcase has a section named \"\", ie. an empty string.\nThis results in some silly behaviour in load_debug_section, and\ndump_dwarf_section.  Fix that.  Note that this patch doesn't correct\nthe main complaint in PR28401, \"failed to allocate\", since malloc\nfailures on sections having huge bogus sizes are to be expected.  We\ncan't safely catch all such cases by comparing with file size, for\nexample, where sections contain compressed data.\n\n\tPR 28401\n\t* objdump.c (load_debug_section): Don't attempt to retrieve\n\tempty name sections.\n\t(dump_dwarf_section): Likewise.",
    "tree": {
      "sha": "74d5010cece6e8cb4cde5c92d70acc0c090ba6ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/74d5010cece6e8cb4cde5c92d70acc0c090ba6ef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55e3926e79937da55da3eaad3b15b4c099071976",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55e3926e79937da55da3eaad3b15b4c099071976",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55e3926e79937da55da3eaad3b15b4c099071976",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55e3926e79937da55da3eaad3b15b4c099071976/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79fa3c401c650521ff771f86810597dd3d3bf75c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79fa3c401c650521ff771f86810597dd3d3bf75c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79fa3c401c650521ff771f86810597dd3d3bf75c"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 17,
    "deletions": 13
  },
  "files": [
    {
      "sha": "fdffb8d5263ddf6befc50ccd40ef3e5072aec979",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55e3926e79937da55da3eaad3b15b4c099071976/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55e3926e79937da55da3eaad3b15b4c099071976/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=55e3926e79937da55da3eaad3b15b4c099071976",
      "patch": "@@ -3711,6 +3711,7 @@ load_debug_section (enum dwarf_section_display_enum debug, void *file)\n   struct dwarf_section *section = &debug_displays [debug].section;\n   bfd *abfd = (bfd *) file;\n   asection *sec;\n+  const char *name;\n \n   /* If it is already loaded, do nothing.  */\n   if (section->start != NULL)\n@@ -3719,24 +3720,24 @@ load_debug_section (enum dwarf_section_display_enum debug, void *file)\n \treturn true;\n     }\n   /* Locate the debug section.  */\n-  sec = bfd_get_section_by_name (abfd, section->uncompressed_name);\n-  if (sec != NULL)\n-    section->name = section->uncompressed_name;\n-  else\n+  name = section->uncompressed_name;\n+  sec = bfd_get_section_by_name (abfd, name);\n+  if (sec == NULL)\n     {\n-      sec = bfd_get_section_by_name (abfd, section->compressed_name);\n-      if (sec != NULL)\n-        section->name = section->compressed_name;\n-      else\n-\t{\n-\t  sec = bfd_get_section_by_name (abfd, section->xcoff_name);\n-\t  if (sec != NULL)\n-\t    section->name = section->xcoff_name;\n-\t}\n+      name = section->compressed_name;\n+      if (*name)\n+\tsec = bfd_get_section_by_name (abfd, name);\n+    }\n+  if (sec == NULL)\n+    {\n+      name = section->xcoff_name;\n+      if (*name)\n+\tsec = bfd_get_section_by_name (abfd, name);\n     }\n   if (sec == NULL)\n     return false;\n \n+  section->name = name;\n   return load_specific_debug_section (debug, sec, file);\n }\n \n@@ -3809,6 +3810,9 @@ dump_dwarf_section (bfd *abfd, asection *section,\n   const char *match;\n   int i;\n \n+  if (*name == 0)\n+    return;\n+\n   if (startswith (name, \".gnu.linkonce.wi.\"))\n     match = \".debug_info\";\n   else"
    }
  ]
}