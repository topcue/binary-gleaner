{
  "sha": "a9aabc23efcc810e4b1999a735ea82d409cafbe7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTlhYWJjMjNlZmNjODEwZTRiMTk5OWE3MzVlYTgyZDQwOWNhZmJlNw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:18:06Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:18:06Z"
    },
    "message": "x86-64: special case LEA when determining signedness of displacement\n\nLEA behavior without a 64-bit destination is independent of address size\n- in particular LEA with 32-bit addressing and 64-bit destination is the\nsame as LEA with 64-bit addressing and 32-bit destination. IOW checking\nmerely i.prefix[ADDR_PREFIX] is insufficient. This also means wrong\nrelocation types (R_X86_64_32S when R_X86_64_32 is needed) were used so\nfar in such cases.\n\nNote that in one case in build_modrm_byte() the 64-bit check came too\nearly altogether, and hence gets dropped in favor of the one included in\nthe new helper. This is benign to non-64-bit code from all I can tell,\nbut the failure to clear disp16 could have been a latent problem.",
    "tree": {
      "sha": "9aa375261f8a1d8360ea4b3ebef0fd5106e4849d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9aa375261f8a1d8360ea4b3ebef0fd5106e4849d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9aabc23efcc810e4b1999a735ea82d409cafbe7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9aabc23efcc810e4b1999a735ea82d409cafbe7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9aabc23efcc810e4b1999a735ea82d409cafbe7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9aabc23efcc810e4b1999a735ea82d409cafbe7/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cce08655c696b771538e325065166ae8fdb7ff46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cce08655c696b771538e325065166ae8fdb7ff46",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cce08655c696b771538e325065166ae8fdb7ff46"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 24,
    "deletions": 8
  },
  "files": [
    {
      "sha": "7fe07770b61a6815c2d4bc8825f9126d4db75d5a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9aabc23efcc810e4b1999a735ea82d409cafbe7/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9aabc23efcc810e4b1999a735ea82d409cafbe7/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a9aabc23efcc810e4b1999a735ea82d409cafbe7",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (want_disp32): New.\n+\t(md_assemble): Use it.\n+\t(optimize_disp): Likewise.\n+\t(build_modrm_byte): Likewise.\n+\n 2021-04-23  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (i386_finalize_displacement): Move Disp32S"
    },
    {
      "sha": "dc1ee881a203075b6283ae88ab248a8bd66de659",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9aabc23efcc810e4b1999a735ea82d409cafbe7/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9aabc23efcc810e4b1999a735ea82d409cafbe7/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=a9aabc23efcc810e4b1999a735ea82d409cafbe7",
      "patch": "@@ -3555,6 +3555,16 @@ tc_i386_fix_adjustable (fixS *fixP ATTRIBUTE_UNUSED)\n   return 1;\n }\n \n+static INLINE bool\n+want_disp32 (const insn_template *t)\n+{\n+  return flag_code != CODE_64BIT\n+\t || i.prefix[ADDR_PREFIX]\n+\t || (t->base_opcode == 0x8d\n+\t     && t->opcode_modifier.opcodespace == SPACE_BASE\n+\t     && !i.types[1].bitfield.qword);\n+}\n+\n static int\n intel_float_operand (const char *mnemonic)\n {\n@@ -4740,7 +4750,7 @@ md_assemble (char *line)\n   if (i.imm_operands)\n     optimize_imm ();\n \n-  if (i.disp_operands && flag_code == CODE_64BIT && !i.prefix[ADDR_PREFIX])\n+  if (i.disp_operands && !want_disp32 (current_templates->start))\n     {\n       for (j = 0; j < i.operands; ++j)\n \t{\n@@ -5748,7 +5758,7 @@ optimize_disp (void)\n #ifdef BFD64\n \t    else if (flag_code == CODE_64BIT)\n \t      {\n-\t\tif (i.prefix[ADDR_PREFIX]\n+\t\tif (want_disp32 (current_templates->start)\n \t\t    && fits_in_unsigned_long (op_disp))\n \t\t  i.types[op].bitfield.disp32 = 1;\n \n@@ -8108,7 +8118,7 @@ build_modrm_byte (void)\n \t\t  i.types[op].bitfield.disp8 = 0;\n \t\t  i.types[op].bitfield.disp16 = 0;\n \t\t  i.types[op].bitfield.disp64 = 0;\n-\t\t  if (flag_code != CODE_64BIT || i.prefix[ADDR_PREFIX])\n+\t\t  if (want_disp32 (&i.tm))\n \t\t    {\n \t\t      /* Must be 32 bit */\n \t\t      i.types[op].bitfield.disp32 = 1;\n@@ -8159,7 +8169,7 @@ build_modrm_byte (void)\n \t\t      i.rm.regmem = ESCAPE_TO_TWO_BYTE_ADDRESSING;\n \t\t      i.sib.base = NO_BASE_REGISTER;\n \t\t      i.sib.index = NO_INDEX_REGISTER;\n-\t\t      newdisp = (!i.prefix[ADDR_PREFIX] ? disp32s : disp32);\n+\t\t      newdisp = (want_disp32(&i.tm) ? disp32 : disp32s);\n \t\t    }\n \t\t  else if ((flag_code == CODE_16BIT)\n \t\t\t   ^ (i.prefix[ADDR_PREFIX] != 0))\n@@ -8188,7 +8198,7 @@ build_modrm_byte (void)\n \t\t  i.types[op].bitfield.disp8 = 0;\n \t\t  i.types[op].bitfield.disp16 = 0;\n \t\t  i.types[op].bitfield.disp64 = 0;\n-\t\t  if (flag_code != CODE_64BIT || i.prefix[ADDR_PREFIX])\n+\t\t  if (want_disp32 (&i.tm))\n \t\t    {\n \t\t      /* Must be 32 bit */\n \t\t      i.types[op].bitfield.disp32 = 1;\n@@ -8263,12 +8273,11 @@ build_modrm_byte (void)\n \t    }\n \t  else /* i.base_reg and 32/64 bit mode  */\n \t    {\n-\t      if (flag_code == CODE_64BIT\n-\t\t  && operand_type_check (i.types[op], disp))\n+\t      if (operand_type_check (i.types[op], disp))\n \t\t{\n \t\t  i.types[op].bitfield.disp16 = 0;\n \t\t  i.types[op].bitfield.disp64 = 0;\n-\t\t  if (i.prefix[ADDR_PREFIX] == 0)\n+\t\t  if (!want_disp32 (&i.tm))\n \t\t    {\n \t\t      i.types[op].bitfield.disp32 = 0;\n \t\t      i.types[op].bitfield.disp32s = 1;"
    }
  ]
}