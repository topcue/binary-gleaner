{
  "sha": "c6d3683661a7623a306667915abba4d4695616d7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzZkMzY4MzY2MWE3NjIzYTMwNjY2NzkxNWFiYmE0ZDQ2OTU2MTZkNw==",
  "commit": {
    "author": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T15:48:14Z"
    },
    "committer": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T15:48:14Z"
    },
    "message": "Use fork instead of vfork on Solaris\n\nThe gdb.mi/mi-exec-run.exp test never completed/timed out on Solaris for\nquite some time:\n\nFAIL: gdb.mi/mi-exec-run.exp: inferior-tty=main: mi=main: force-fail=1: run failure detected (timeout)\n\nThis is for gdb trying to exec mi-exec-run.nox, a copy of mi-exec-run\nwith execute permissions removed.\n\nThe process tree at this point looks like this:\n\n          21254 /vol/gcc/bin/expect -- /vol/gcc/share/dejagnu/runtest.exp GDB_PARALLEL=yes --outdir=outputs/gdb.mi/mi-exec-run-vfork gdb.mi/mi-exec-run.exp\n            21300 <defunct>\n            21281 <defunct>\n            21294 $obj/gdb/testsuite/../../gdb/gdb -nw -nx -data-directory $obj/gdb/testsuite/../data-directory -i=mi\n              21297 $obj/gdb/testsuite/../../gdb/gdb -nw -nx -data-directory $obj/gdb/testsuite/../data-directory -i=mi\n\nThe parent gdb hangs here:\n\n21294:  $obj/gdb/testsuite/../../gdb/gdb -nw\n------------  lwp# 1 / thread# 1  ---------------\n 0000000000000000 SYS#0    ()\n 0000000000daeccd procfs_target::create_inferior(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char**, int) () + 97 (procfs.c:2853)\n 0000000000ca63a7 run_command_1(char const*, int, run_how) () + 349 (basic_string.h:187)\n 0000000000ca6516 start_command(char const*, int) () + 26 (infcmd.c:584)\n 0000000000b3ca8e do_const_cfunc(cmd_list_element*, char const*, int) () + f (cli-decode.c:96)\n 0000000000b3ed77 cmd_func(cmd_list_element*, char const*, int) () + 32 (cli-decode.c:2113)\n 0000000000f2d219 execute_command(char const*, int) () + 455 (top.c:657)\n 0000000000d4ad77 mi_execute_cli_command(char const*, int, char const*) () + 242 (basic_string.h:187)\n 0000000000d4ae80 mi_cmd_exec_run(char const*, char**, int) () + ba (mi-main.c:473)\n\nwith these process flags\n\n21294:\t$obj/gdb/testsuite/../../gdb/gdb -nw\n\tdata model = _LP64  flags = VFORKP|ORPHAN|MSACCT|MSFORK\n\tsigpend = 0x00004103,0x00000000,0x00000000\n /1:\tflags = 0\n\tsigmask = 0xffbffeff,0xffffffff,0x000000ff\n\tcursig = SIGKILL\n /2:\tflags = DETACH|STOPPED|ASLEEP  lwp_park(0x0,0x0,0x0)\n\twhy = PR_SUSPENDED\n\tsigmask = 0x000a2002,0x00000000,0x00000000\n[...]\n\nwhile the child sits at\n\n21297:  $obj/gdb/testsuite/../../gdb/gdb -nw\n 00007fffbf078a0b execve   (7fffbffff756, 7fffbfffec58, 7fffbfffec90, 0)\n 00007fffbef84cf6 execvpex () + f6\n 00007fffbef84f45 execvp () + 15\n 0000000000d60a44 fork_inferior(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char**, void (*)(), gdb::function_view<void (int)>, void (*)(), char const*, void (*)(char const*, char* const*, char* const*)) () + 47f (fork-inferior.c:423)\n 0000000000daeccd procfs_target::create_inferior(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char**, int) () + 97 (procfs.c:2853)\n 0000000000ca63a7 run_command_1(char const*, int, run_how) () + 349 (basic_string.h:187)\n 0000000000ca6516 start_command(char const*, int) () + 26 (infcmd.c:584)\n 0000000000b3ca8e do_const_cfunc(cmd_list_element*, char const*, int) () + f (cli-decode.c:96)\n 0000000000b3ed77 cmd_func(cmd_list_element*, char const*, int) () + 32 (cli-decode.c:2113)\n 0000000000f2d219 execute_command(char const*, int) () + 455 (top.c:657)\n 0000000000d4ad77 mi_execute_cli_command(char const*, int, char const*) () + 242 (basic_string.h:187)\n 0000000000d4ae80 mi_cmd_exec_run(char const*, char**, int) () + ba (mi-main.c:473)\n\nwith\n\n21297:\t$obj/gdb/testsuite/../../gdb/gdb -nw\n\tdata model = _LP64  flags = MSACCT|MSFORK\n\texitset  = 0x00000000 0x04000000 0x00000000 0x00000000\n\t           0x00000000 0x00000000 0x00000000 0x00000000\n /1:\tflags = STOPPED|ISTOP  execve(0x7fffbffff756,0x7fffbfffec58,0x7fffbfffec90,0x0)\n\twhy = PR_SYSEXIT  what = execve\n\nWe have a deadlock here: the execve in the child cannot return until the\nparent has handled the PR_SYSEXIT while the parent cannot run with a\nvfork'ed child as documented in proc(4):\n\n       The child of a vfork(2) borrows the  parent's  address  space.  When  a\n       vfork(2) is executed by a traced process, all watched areas established\n       for the parent are suspended until the child terminates or performs  an\n       exec(2).  Any  watched areas established independently in the child are\n       cancelled when the parent resumes  after  the  child's  termination  or\n       exec(2).  PCWATCH  fails  with  EBUSY  if  applied  to  the parent of a\n       vfork(2) before the child has terminated or performed an  exec(2).  The\n       PR_VFORKP  flag  is  set  in  the  pstatus  structure for such a parent\n       process.\n\nIn that situation, the parent cannot be killed even with SIGKILL (as\nruntest will attempt once the timeout occurs; the pending signal can be\nseen in the pflags output above), so the whole test hangs until one\nmanually kills the child process.\n\nFortunately, there's an easy way out: when using fork instead of vfork,\nthe problem doesn't occur, and this is what the current patch does: it\ncalls fork_inferior with a dummy pre_trace_fun arg.\n\nTested on amd64-pc-solaris2.11 and sparcv9-sun-solaris2.11.\n\n\t* procfs.c (procfs_pre_trace): New function.\n\t(procfs_target::create_inferior): Pass it to fork_inferior.",
    "tree": {
      "sha": "c94dc38ec5d9fc2bdb3db3fbcebd742fd34eab9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c94dc38ec5d9fc2bdb3db3fbcebd742fd34eab9f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c6d3683661a7623a306667915abba4d4695616d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d3683661a7623a306667915abba4d4695616d7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c6d3683661a7623a306667915abba4d4695616d7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d3683661a7623a306667915abba4d4695616d7/comments",
  "author": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a7e6196bb886ff17d0c87650b6f458d5366122ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7e6196bb886ff17d0c87650b6f458d5366122ac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a7e6196bb886ff17d0c87650b6f458d5366122ac"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 13,
    "deletions": 1
  },
  "files": [
    {
      "sha": "982f23a315770cd48702cbdd826c36bb9bc54746",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d3683661a7623a306667915abba4d4695616d7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d3683661a7623a306667915abba4d4695616d7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c6d3683661a7623a306667915abba4d4695616d7",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* procfs.c (procfs_pre_trace): New function.\n+\t(procfs_target::create_inferior): Pass it to fork_inferior.\n+\n 2020-06-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.tgt <sparc-*-linux*> (gdb_target_obs): Remove"
    },
    {
      "sha": "d3085a20fce23e9538a0328fd0b12958e2ae370b",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c6d3683661a7623a306667915abba4d4695616d7/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c6d3683661a7623a306667915abba4d4695616d7/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=c6d3683661a7623a306667915abba4d4695616d7",
      "patch": "@@ -2759,6 +2759,13 @@ procfs_set_exec_trap (void)\n   /*destroy_procinfo (pi);*/\n }\n \n+/* Dummy function to be sure fork_inferior uses fork(2) and not vfork(2).\n+   This avoids a possible deadlock gdb and its vfork'ed child.  */\n+static void\n+procfs_pre_trace (void)\n+{\n+}\n+\n /* This function is called BEFORE gdb forks the inferior process.  Its\n    only real responsibility is to set things up for the fork, and tell\n    GDB which two functions to call after the fork (one for the parent,\n@@ -2851,7 +2858,7 @@ procfs_target::create_inferior (const char *exec_file,\n     push_target (this);\n \n   pid = fork_inferior (exec_file, allargs, env, procfs_set_exec_trap,\n-\t\t       NULL, NULL, shell_file, NULL);\n+\t\t       NULL, procfs_pre_trace, shell_file, NULL);\n \n   /* We have something that executes now.  We'll be running through\n      the shell at this point (if startup-with-shell is true), but the"
    }
  ]
}