{
  "sha": "1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTkxNGUyNjQ4MmI2ZDYwYTBhOWZkN2ZiOTgxY2ExY2U1ZTc1OTE5Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T13:31:37Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-02T13:31:53Z"
    },
    "message": "-Bsymbolic is not for PIEs\n\nDespite PR19615, it doesn't make sense to use -Bsymbolic with PIEs.\nDynamic symbols in an executable won't be overridden anyway.\n\n\t* ld.texi (-Bsymbolic, -Bsymbolic-functions): Don't mention PIEs.\n\t* ld.h (symbolic_enum, dynamic_list_enum),\n\t(args_type <symbolic, dynamic_list>): Move to..\n\t* lexsup.c (parse_args): ..here, using auto vars opt_symbolic\n\tand opt_dynamic_list rather than command_line fields.  Only\n\tact on -Bsymbolic and -Bsymbolic-functions for shared library\n\toutput.  Free dynamic_list.",
    "tree": {
      "sha": "dfbbe903bab03e19c622007e6cc98329b2dd6c2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dfbbe903bab03e19c622007e6cc98329b2dd6c2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df07e2c772dab40d268dc44c78bb087c4b75b3c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df07e2c772dab40d268dc44c78bb087c4b75b3c6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df07e2c772dab40d268dc44c78bb087c4b75b3c6"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 68,
    "deletions": 72
  },
  "files": [
    {
      "sha": "8e5ae31b2594923b5a2c37574020e096697915c2",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
      "patch": "@@ -1,3 +1,13 @@\n+2019-10-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* ld.texi (-Bsymbolic, -Bsymbolic-functions): Don't mention PIEs.\n+\t* ld.h (symbolic_enum, dynamic_list_enum),\n+\t(args_type <symbolic, dynamic_list>): Move to..\n+\t* lexsup.c (parse_args): ..here, using auto vars opt_symbolic\n+\tand opt_dynamic_list rather than command_line fields.  Only\n+\tact on -Bsymbolic and -Bsymbolic-functions for shared library\n+\toutput.  Free dynamic_list.\n+\n 2019-09-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 24262"
    },
    {
      "sha": "5243346f374cdfc9cd84ba5c11e2144b4078b453",
      "filename": "ld/ld.h",
      "status": "modified",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ld.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ld.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.h?ref=1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
      "patch": "@@ -119,20 +119,6 @@ struct wildcard_list\n \n enum endian_enum { ENDIAN_UNSET = 0, ENDIAN_BIG, ENDIAN_LITTLE };\n \n-enum symbolic_enum\n-{\n-  symbolic_unset = 0,\n-  symbolic,\n-  symbolic_functions,\n-};\n-\n-enum dynamic_list_enum\n-{\n-  dynamic_list_unset = 0,\n-  dynamic_list_data,\n-  dynamic_list\n-};\n-\n typedef struct\n {\n   /* 1 => assign space to common symbols even if `relocatable_output'.  */\n@@ -183,13 +169,6 @@ typedef struct\n   /* Big or little endian as set on command line.  */\n   enum endian_enum endian;\n \n-  /* -Bsymbolic and -Bsymbolic-functions, as set on command line.  */\n-  enum symbolic_enum symbolic;\n-\n-  /* --dynamic-list, --dynamic-list-cpp-new, --dynamic-list-cpp-typeinfo\n-     and --dynamic-list FILE, as set on command line.  */\n-  enum dynamic_list_enum dynamic_list;\n-\n   /* Name of runtime interpreter to invoke.  */\n   char *interpreter;\n "
    },
    {
      "sha": "3b2d05411f45e7d84ae8f11970783e086b4cecdd",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
      "patch": "@@ -1436,21 +1436,15 @@ libraries.\n When creating a shared library, bind references to global symbols to the\n definition within the shared library, if any.  Normally, it is possible\n for a program linked against a shared library to override the definition\n-within the shared library.  This option can also be used with the\n-@option{--export-dynamic} option, when creating a position independent\n-executable, to bind references to global symbols to the definition within\n-the executable.  This option is only meaningful on ELF platforms which\n-support shared libraries and position independent executables.\n+within the shared library.  This option is only meaningful on ELF\n+platforms which support shared libraries.\n \n @kindex -Bsymbolic-functions\n @item -Bsymbolic-functions\n When creating a shared library, bind references to global function\n symbols to the definition within the shared library, if any.\n-This option can also be used with the @option{--export-dynamic} option,\n-when creating a position independent executable, to bind references\n-to global function symbols to the definition within the executable.\n This option is only meaningful on ELF platforms which support shared\n-libraries and position independent executables.\n+libraries.\n \n @kindex --dynamic-list=@var{dynamic-list-file}\n @item --dynamic-list=@var{dynamic-list-file}"
    },
    {
      "sha": "f91549697e24dc43174059314990fea0a138910b",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 55,
      "deletions": 42,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1914e26482b6d60a0a9fd7fb981ca1ce5e75919b/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=1914e26482b6d60a0a9fd7fb981ca1ce5e75919b",
      "patch": "@@ -565,6 +565,18 @@ parse_args (unsigned argc, char **argv)\n   struct option *really_longopts;\n   int last_optind;\n   enum report_method how_to_report_unresolved_symbols = RM_GENERATE_ERROR;\n+  enum symbolic_enum\n+  {\n+    symbolic_unset = 0,\n+    symbolic,\n+    symbolic_functions,\n+  } opt_symbolic = symbolic_unset;\n+  enum dynamic_list_enum\n+  {\n+    dynamic_list_unset = 0,\n+    dynamic_list_data,\n+    dynamic_list\n+  } opt_dynamic_list = dynamic_list_unset;\n \n   shortopts = (char *) xmalloc (OPTION_COUNT * 3 + 2);\n   longopts = (struct option *)\n@@ -1233,10 +1245,10 @@ parse_args (unsigned argc, char **argv)\n \t  config.stats = TRUE;\n \t  break;\n \tcase OPTION_SYMBOLIC:\n-\t  command_line.symbolic = symbolic;\n+\t  opt_symbolic = symbolic;\n \t  break;\n \tcase OPTION_SYMBOLIC_FUNCTIONS:\n-\t  command_line.symbolic = symbolic_functions;\n+\t  opt_symbolic = symbolic_functions;\n \t  break;\n \tcase 't':\n \t  ++trace_files;\n@@ -1381,23 +1393,23 @@ parse_args (unsigned argc, char **argv)\n \t  command_line.version_exports_section = optarg;\n \t  break;\n \tcase OPTION_DYNAMIC_LIST_DATA:\n-\t  command_line.dynamic_list = dynamic_list_data;\n-\t  if (command_line.symbolic == symbolic)\n-\t    command_line.symbolic = symbolic_unset;\n+\t  opt_dynamic_list = dynamic_list_data;\n+\t  if (opt_symbolic == symbolic)\n+\t    opt_symbolic = symbolic_unset;\n \t  break;\n \tcase OPTION_DYNAMIC_LIST_CPP_TYPEINFO:\n \t  lang_append_dynamic_list_cpp_typeinfo ();\n-\t  if (command_line.dynamic_list != dynamic_list_data)\n-\t    command_line.dynamic_list = dynamic_list;\n-\t  if (command_line.symbolic == symbolic)\n-\t    command_line.symbolic = symbolic_unset;\n+\t  if (opt_dynamic_list != dynamic_list_data)\n+\t    opt_dynamic_list = dynamic_list;\n+\t  if (opt_symbolic == symbolic)\n+\t    opt_symbolic = symbolic_unset;\n \t  break;\n \tcase OPTION_DYNAMIC_LIST_CPP_NEW:\n \t  lang_append_dynamic_list_cpp_new ();\n-\t  if (command_line.dynamic_list != dynamic_list_data)\n-\t    command_line.dynamic_list = dynamic_list;\n-\t  if (command_line.symbolic == symbolic)\n-\t    command_line.symbolic = symbolic_unset;\n+\t  if (opt_dynamic_list != dynamic_list_data)\n+\t    opt_dynamic_list = dynamic_list;\n+\t  if (opt_symbolic == symbolic)\n+\t    opt_symbolic = symbolic_unset;\n \t  break;\n \tcase OPTION_DYNAMIC_LIST:\n \t  /* This option indicates a small script that only specifies\n@@ -1412,10 +1424,10 @@ parse_args (unsigned argc, char **argv)\n \t    parser_input = input_dynamic_list;\n \t    yyparse ();\n \t  }\n-\t  if (command_line.dynamic_list != dynamic_list_data)\n-\t    command_line.dynamic_list = dynamic_list;\n-\t  if (command_line.symbolic == symbolic)\n-\t    command_line.symbolic = symbolic_unset;\n+\t  if (opt_dynamic_list != dynamic_list_data)\n+\t    opt_dynamic_list = dynamic_list;\n+\t  if (opt_symbolic == symbolic)\n+\t    opt_symbolic = symbolic_unset;\n \t  break;\n \tcase OPTION_WARN_COMMON:\n \t  config.warn_common = TRUE;\n@@ -1625,32 +1637,33 @@ parse_args (unsigned argc, char **argv)\n       && command_line.check_section_addresses < 0)\n     command_line.check_section_addresses = 0;\n \n-  /* We may have -Bsymbolic, -Bsymbolic-functions, --dynamic-list-data,\n-     --dynamic-list-cpp-new, --dynamic-list-cpp-typeinfo and\n-     --dynamic-list FILE.  -Bsymbolic and -Bsymbolic-functions are\n-     for PIC outputs.  -Bsymbolic overrides all others and vice versa.  */\n-  switch (command_line.symbolic)\n-    {\n-    case symbolic_unset:\n-      break;\n-    case symbolic:\n-      /* -Bsymbolic is for PIC output only.  */\n-      if (bfd_link_pic (&link_info))\n-\t{\n-\t  link_info.symbolic = TRUE;\n-\t  /* Should we free the unused memory?  */\n-\t  link_info.dynamic_list = NULL;\n-\t  command_line.dynamic_list = dynamic_list_unset;\n-\t}\n-      break;\n-    case symbolic_functions:\n-      /* -Bsymbolic-functions is for PIC output only.  */\n-      if (bfd_link_pic (&link_info))\n-\tcommand_line.dynamic_list = dynamic_list_data;\n-      break;\n-    }\n+  /* -Bsymbolic and -Bsymbols-functions are for shared library output.  */\n+  if (bfd_link_dll (&link_info))\n+    switch (opt_symbolic)\n+      {\n+      case symbolic_unset:\n+\tbreak;\n+      case symbolic:\n+\tlink_info.symbolic = TRUE;\n+\tif (link_info.dynamic_list)\n+\t  {\n+\t    struct bfd_elf_version_expr *ent, *next;\n+\t    for (ent = link_info.dynamic_list->head.list; ent; ent = next)\n+\t      {\n+\t\tnext = ent->next;\n+\t\tfree (ent);\n+\t      }\n+\t    free (link_info.dynamic_list);\n+\t    link_info.dynamic_list = NULL;\n+\t  }\n+\topt_dynamic_list = dynamic_list_unset;\n+\tbreak;\n+      case symbolic_functions:\n+\topt_dynamic_list = dynamic_list_data;\n+\tbreak;\n+      }\n \n-  switch (command_line.dynamic_list)\n+  switch (opt_dynamic_list)\n     {\n     case dynamic_list_unset:\n       break;"
    }
  ]
}