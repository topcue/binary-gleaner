{
  "sha": "184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
  "node_id": "C_kwDOANOeidoAKDE4NGVhMmY3MzE2YzU0ZGQ1ZTBmYTg0ZjFmZTA3YTIyMmU4ZmI0NGM",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-16T19:06:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-23T15:30:54Z"
    },
    "message": "Remove defaulted 'tid' parameter to ptid_t constructor\n\nI wanted to find, and potentially modify, all the spots where the\n'tid' parameter to the ptid_t constructor was used.  So, I temporarily\nremoved this parameter and then rebuilt.\n\nIn order to make it simpler to search through the \"real\" (nonzero)\nuses of this parameter, something I knew I'd have to do multiple\ntimes, I removed any \", 0\" from constructor calls.\n\nCo-Authored-By: John Baldwin <jhb@FreeBSD.org>",
    "tree": {
      "sha": "cb5f9fe2478d4c3e2233b7a575933c024fcbcb96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb5f9fe2478d4c3e2233b7a575933c024fcbcb96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "334381ea466c4735fe533a9864991b862c094b60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/334381ea466c4735fe533a9864991b862c094b60",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/334381ea466c4735fe533a9864991b862c094b60"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 32,
    "deletions": 33
  },
  "files": [
    {
      "sha": "181d3447100be43b68b60b69db1985b7b34f0aa9",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -890,7 +890,7 @@ fbsd_add_threads (fbsd_nat_target *target, pid_t pid)\n \n   for (i = 0; i < nlwps; i++)\n     {\n-      ptid_t ptid = ptid_t (pid, lwps[i], 0);\n+      ptid_t ptid = ptid_t (pid, lwps[i]);\n \n       if (!in_thread_list (target, ptid))\n \t{\n@@ -1191,7 +1191,7 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t  if (ptrace (PT_LWPINFO, pid, (caddr_t) &pl, sizeof pl) == -1)\n \t    perror_with_name ((\"ptrace\"));\n \n-\t  wptid = ptid_t (pid, pl.pl_lwpid, 0);\n+\t  wptid = ptid_t (pid, pl.pl_lwpid);\n \n \t  if (debug_fbsd_nat)\n \t    {\n@@ -1287,7 +1287,7 @@ fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t    perror_with_name ((\"ptrace\"));\n \n \t\t  gdb_assert (pl.pl_flags & PL_FLAG_CHILD);\n-\t\t  child_ptid = ptid_t (child, pl.pl_lwpid, 0);\n+\t\t  child_ptid = ptid_t (child, pl.pl_lwpid);\n \t\t}\n \n \t      /* Enable additional events on the child process.  */"
    },
    {
      "sha": "83a124b38ef0df9adbc2329afa7792f931d4d898",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -41,7 +41,7 @@\n struct fork_info\n {\n   explicit fork_info (pid_t pid)\n-    : ptid (pid, pid, 0)\n+    : ptid (pid, pid)\n   {\n   }\n "
    },
    {
      "sha": "0492cc02439b6fdbbd290284931123c9cf87984d",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -929,7 +929,7 @@ find_lwp_pid (ptid_t ptid)\n   else\n     lwp = ptid.pid ();\n \n-  dummy.ptid = ptid_t (0, lwp, 0);\n+  dummy.ptid = ptid_t (0, lwp);\n   lp = (struct lwp_info *) htab_find (lwp_lwpid_htab, &dummy);\n   return lp;\n }\n@@ -1176,8 +1176,7 @@ linux_nat_target::attach (const char *args, int from_tty)\n   /* The ptrace base target adds the main thread with (pid,0,0)\n      format.  Decorate it with lwp info.  */\n   ptid = ptid_t (inferior_ptid.pid (),\n-\t\t inferior_ptid.pid (),\n-\t\t 0);\n+\t\t inferior_ptid.pid ());\n   thread_change_ptid (linux_target, inferior_ptid, ptid);\n \n   /* Add the initial process as the first LWP to the list.  */\n@@ -1901,7 +1900,7 @@ linux_handle_extended_wait (struct lwp_info *lp, int status)\n \t\t\t    _(\"wait returned unexpected status 0x%x\"), status);\n \t}\n \n-      ourstatus->value.related_pid = ptid_t (new_pid, new_pid, 0);\n+      ourstatus->value.related_pid = ptid_t (new_pid, new_pid);\n \n       if (event == PTRACE_EVENT_FORK || event == PTRACE_EVENT_VFORK)\n \t{\n@@ -1924,7 +1923,7 @@ linux_handle_extended_wait (struct lwp_info *lp, int status)\n \n \t  /* This won't actually modify the breakpoint list, but will\n \t     physically remove the breakpoints from the child.  */\n-\t  detach_breakpoints (ptid_t (new_pid, new_pid, 0));\n+\t  detach_breakpoints (ptid_t (new_pid, new_pid));\n \n \t  /* Retain child fork in ptrace (stopped) state.  */\n \t  if (!find_fork_pid (new_pid))\n@@ -1952,7 +1951,7 @@ linux_handle_extended_wait (struct lwp_info *lp, int status)\n \t  linux_nat_debug_printf\n \t    (\"Got clone event from LWP %d, new child is LWP %ld\", pid, new_pid);\n \n-\t  new_lp = add_lwp (ptid_t (lp->ptid.pid (), new_pid, 0));\n+\t  new_lp = add_lwp (ptid_t (lp->ptid.pid (), new_pid));\n \t  new_lp->stopped = 1;\n \t  new_lp->resumed = 1;\n \n@@ -2840,7 +2839,7 @@ linux_nat_filter_event (int lwpid, int status)\n       /* A multi-thread exec after we had seen the leader exiting.  */\n       linux_nat_debug_printf (\"Re-adding thread group leader LWP %d.\", lwpid);\n \n-      lp = add_lwp (ptid_t (lwpid, lwpid, 0));\n+      lp = add_lwp (ptid_t (lwpid, lwpid));\n       lp->stopped = 1;\n       lp->resumed = 1;\n       add_thread (linux_target, lp->ptid);\n@@ -4101,7 +4100,7 @@ linux_nat_target::static_tracepoint_markers_by_strid (const char *strid)\n   int pid = inferior_ptid.pid ();\n   std::vector<static_tracepoint_marker> markers;\n   const char *p = s;\n-  ptid_t ptid = ptid_t (pid, 0, 0);\n+  ptid_t ptid = ptid_t (pid, 0);\n   static_tracepoint_marker marker;\n \n   /* Pause all */"
    },
    {
      "sha": "3929589dbb3b0c6498447c4e2df25965dec94977",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -687,7 +687,7 @@ check_thread_db_callback (const td_thrhandle_t *th, void *arg)\n      calls are made, we just assume they were; future changes\n      to how GDB accesses TLS could result in this passing\n      without exercising the calls it's supposed to.  */\n-  ptid_t ptid = ptid_t (tdb_testinfo->info->pid, ti.ti_lid, 0);\n+  ptid_t ptid = ptid_t (tdb_testinfo->info->pid, ti.ti_lid);\n   thread_info *thread_info = find_thread_ptid (linux_target, ptid);\n   if (thread_info != NULL && thread_info->priv != NULL)\n     {\n@@ -1842,7 +1842,7 @@ ptid_t\n thread_db_target::get_ada_task_ptid (long lwp, long thread)\n {\n   /* NPTL uses a 1:1 model, so the LWP id suffices.  */\n-  return ptid_t (inferior_ptid.pid (), lwp, 0);\n+  return ptid_t (inferior_ptid.pid (), lwp);\n }\n \n void"
    },
    {
      "sha": "9746d1210fe465aa94b9f7275ae447f6d68f1527",
      "filename": "gdb/nat/linux-osdata.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/nat/linux-osdata.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/nat/linux-osdata.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-osdata.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -266,7 +266,7 @@ get_cores_used_by_process (PID_T pid, int *cores, const int num_cores)\n \n \t  sscanf (dp->d_name, \"%lld\", &tid);\n \t  core = linux_common_core_of_thread (ptid_t ((pid_t) pid,\n-\t\t\t\t\t\t      (pid_t) tid, 0));\n+\t\t\t\t\t\t      (pid_t) tid));\n \n \t  if (core >= 0 && core < num_cores)\n \t    {\n@@ -521,7 +521,7 @@ linux_xfer_osdata_threads (struct buffer *buffer)\n \t\t\tcontinue;\n \n \t\t      tid = atoi (dp2->d_name);\n-\t\t      core = linux_common_core_of_thread (ptid_t (pid, tid, 0));\n+\t\t      core = linux_common_core_of_thread (ptid_t (pid, tid));\n \n \t\t      buffer_xml_printf\n \t\t\t(buffer,"
    },
    {
      "sha": "76e62fc9c445a1e3f3b9c52499262bc7e4918c80",
      "filename": "gdb/nat/linux-procfs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/nat/linux-procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/nat/linux-procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-procfs.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -308,7 +308,7 @@ linux_proc_attach_tgid_threads (pid_t pid,\n \t  lwp = strtoul (dp->d_name, NULL, 10);\n \t  if (lwp != 0)\n \t    {\n-\t      ptid_t ptid = ptid_t (pid, lwp, 0);\n+\t      ptid_t ptid = ptid_t (pid, lwp);\n \n \t      if (attach_lwp (ptid))\n \t\tnew_threads_found = 1;"
    },
    {
      "sha": "634af466790f6d3931005c8a03e2009ec317e32e",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -251,7 +251,7 @@ ravenscar_thread_target::get_base_thread_from_ravenscar_task (ptid_t ptid)\n     return ptid;\n \n   base_cpu = get_thread_base_cpu (ptid);\n-  return ptid_t (ptid.pid (), base_cpu, 0);\n+  return ptid_t (ptid.pid (), base_cpu);\n }\n \n /* Fetch the ravenscar running thread from target memory, make sure"
    },
    {
      "sha": "49ed209921172f383e4cc7d6cdb62c9519dc7cc6",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -3101,7 +3101,7 @@ read_ptid (const char *buf, const char **obuf)\n       pp = unpack_varlen_hex (p + 1, &tid);\n       if (obuf)\n \t*obuf = pp;\n-      return ptid_t (pid, tid, 0);\n+      return ptid_t (pid, tid);\n     }\n \n   /* No multi-process.  Just a tid.  */\n@@ -3126,7 +3126,7 @@ read_ptid (const char *buf, const char **obuf)\n \n   if (obuf)\n     *obuf = pp;\n-  return ptid_t (pid, tid, 0);\n+  return ptid_t (pid, tid);\n }\n \n static int\n@@ -4138,7 +4138,7 @@ remote_target::static_tracepoint_markers_by_strid (const char *strid)\n ptid_t\n remote_target::get_ada_task_ptid (long lwp, long thread)\n {\n-  return ptid_t (inferior_ptid.pid (), lwp, 0);\n+  return ptid_t (inferior_ptid.pid (), lwp);\n }\n \f\n \n@@ -6242,7 +6242,7 @@ remote_target::append_resumption (char *p, char *endp,\n       ptid_t nptid;\n \n       /* All (-1) threads of process.  */\n-      nptid = ptid_t (ptid.pid (), -1, 0);\n+      nptid = ptid_t (ptid.pid (), -1);\n \n       p += xsnprintf (p, endp - p, \":\");\n       p = write_ptid (p, endp, nptid);\n@@ -6959,7 +6959,7 @@ remote_target::remote_stop_ns (ptid_t ptid)\n \n       if (ptid.is_pid ())\n \t  /* All (-1) threads of process.  */\n-\tnptid = ptid_t (ptid.pid (), -1, 0);\n+\tnptid = ptid_t (ptid.pid (), -1);\n       else\n \t{\n \t  /* Small optimization: if we already have a stop reply for"
    },
    {
      "sha": "d27a2169029511302d764d71104a5013820a3b25",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -491,7 +491,7 @@ linux_process_target::handle_extended_wait (lwp_info **orig_event_lwp,\n \t  struct lwp_info *child_lwp;\n \t  struct thread_info *child_thr;\n \n-\t  ptid = ptid_t (new_pid, new_pid, 0);\n+\t  ptid = ptid_t (new_pid, new_pid);\n \n \t  if (debug_threads)\n \t    {\n@@ -597,7 +597,7 @@ linux_process_target::handle_extended_wait (lwp_info **orig_event_lwp,\n \t\t      \"from LWP %ld, new child is LWP %ld\\n\",\n \t\t      lwpid_of (event_thr), new_pid);\n \n-      ptid = ptid_t (pid_of (event_thr), new_pid, 0);\n+      ptid = ptid_t (pid_of (event_thr), new_pid);\n       new_lwp = add_lwp (ptid);\n \n       /* Either we're going to immediately resume the new thread\n@@ -974,7 +974,7 @@ linux_process_target::create_inferior (const char *program,\n \n   add_linux_process (pid, 0);\n \n-  ptid = ptid_t (pid, pid, 0);\n+  ptid = ptid_t (pid, pid);\n   new_lwp = add_lwp (ptid);\n   new_lwp->must_set_ptrace_flags = 1;\n \n@@ -1139,7 +1139,7 @@ linux_process_target::attach (unsigned long pid)\n {\n   struct process_info *proc;\n   struct thread_info *initial_thread;\n-  ptid_t ptid = ptid_t (pid, pid, 0);\n+  ptid_t ptid = ptid_t (pid, pid);\n   int err;\n \n   proc = add_linux_process (pid, 1);\n@@ -1157,7 +1157,7 @@ linux_process_target::attach (unsigned long pid)\n \n   /* Don't ignore the initial SIGSTOP if we just attached to this\n      process.  It will be collected by wait shortly.  */\n-  initial_thread = find_thread_ptid (ptid_t (pid, pid, 0));\n+  initial_thread = find_thread_ptid (ptid_t (pid, pid));\n   initial_thread->last_resume_kind = resume_stop;\n \n   /* We must attach to every LWP.  If /proc is mounted, use that to\n@@ -2272,7 +2272,7 @@ linux_process_target::filter_event (int lwpid, int wstat)\n \t\t\t\"after exec.\\n\", lwpid);\n \t}\n \n-      child_ptid = ptid_t (lwpid, lwpid, 0);\n+      child_ptid = ptid_t (lwpid, lwpid);\n       child = add_lwp (child_ptid);\n       child->stopped = 1;\n       current_thread = child->thread;"
    },
    {
      "sha": "b79c2aae4989e47b76bc5e84cc08152da7b2e6ab",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -581,7 +581,7 @@ read_ptid (const char *buf, const char **obuf)\n \n       if (obuf)\n \t*obuf = pp;\n-      return ptid_t (pid, tid, 0);\n+      return ptid_t (pid, tid);\n     }\n \n   /* No multi-process.  Just a tid.  */\n@@ -594,7 +594,7 @@ read_ptid (const char *buf, const char **obuf)\n \n   if (obuf)\n     *obuf = pp;\n-  return ptid_t (pid, tid, 0);\n+  return ptid_t (pid, tid);\n }\n \n /* Write COUNT bytes in BUF to the client."
    },
    {
      "sha": "9a70cdf4671cfb124c0c8aafe59ab2126f43f51f",
      "filename": "gdbserver/thread-db.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/thread-db.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbserver/thread-db.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/thread-db.cc?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -214,7 +214,7 @@ attach_thread (const td_thrhandle_t *th_p, td_thrinfo_t *ti_p)\n {\n   struct process_info *proc = current_process ();\n   int pid = pid_of (proc);\n-  ptid_t ptid = ptid_t (pid, ti_p->ti_lid, 0);\n+  ptid_t ptid = ptid_t (pid, ti_p->ti_lid);\n   struct lwp_info *lwp;\n   int err;\n "
    },
    {
      "sha": "7a2c64684dd4d6e8c01eeafc1e9df45bc691051e",
      "filename": "gdbsupport/agent.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbsupport/agent.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c/gdbsupport/agent.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/agent.cc?ref=184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "patch": "@@ -190,7 +190,7 @@ agent_run_command (int pid, const char *cmd, int len)\n {\n   int fd;\n   int tid = agent_get_helper_thread_id ();\n-  ptid_t ptid = ptid_t (pid, tid, 0);\n+  ptid_t ptid = ptid_t (pid, tid);\n \n   int ret = target_write_memory (ipa_sym_addrs.addr_cmd_buf,\n \t\t\t\t (gdb_byte *) cmd, len);"
    }
  ]
}