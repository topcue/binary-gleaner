{
  "sha": "aa3cfbda2f2af71044949b5692ce51cafb023d13",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWEzY2ZiZGEyZjJhZjcxMDQ0OTQ5YjU2OTJjZTUxY2FmYjAyM2QxMw==",
  "commit": {
    "author": {
      "name": "Richard Bunt",
      "email": "richard.bunt@arm.com",
      "date": "2019-03-06T08:23:00Z"
    },
    "committer": {
      "name": "Richard Bunt",
      "email": "richard.bunt@arm.com",
      "date": "2019-03-06T08:24:12Z"
    },
    "message": "Fortran function calls with arguments\n\nPrior to this patch, calling functions on the inferior with arguments and\nthen using these arguments within a function resulted in an invalid\nmemory access. This is because Fortran arguments are typically passed as\npointers to values.\n\nIt is possible to call Fortran functions, but memory must be allocated in\nthe inferior, so a pointer can be passed to the function, and the\nlanguage must be set to C to enable C-style casting. This is cumbersome\nand not a pleasant debug experience.\n\nThis patch implements the GNU Fortran argument passing conventions with\ncaveats. Firstly, it does not handle the VALUE attribute as there is\ninsufficient DWARF information to determine when this is the case.\nSecondly, functions with optional parameters can only be called with all\nparameters present. Both these cases are marked as KFAILS in the test.\n\nSince the GNU Fortran argument passing convention has been implemented,\nthere is no guarantee that this patch will work correctly, in all cases,\nwith other compilers.\n\nDespite these limitations, this patch improves the ease with which\nfunctions can be called in many cases, without taking away the existing\napproach of calling with the language set to C.\n\nRegression tested on x86_64, aarch64 and POWER9 with GCC 7.3.0.\nRegression tested with Ada on x86_64.\nRegression tested with native-extended-gdbserver target board.\n\ngdb/ChangeLog:\n\n\t* eval.c (evaluate_subexp_standard): Call Fortran argument\n\twrapping logic.\n\t* f-lang.c (struct value): A value which can be passed into a\n\tFortran function call.\n\t(fortran_argument_convert): Wrap Fortran arguments in a pointer\n\twhere appropriate.\n\t(struct type): Value ready for a Fortran function call.\n\t(fortran_preserve_arg_pointer): Undo check_typedef, the pointer\n\tis needed.\n\t* f-lang.h (fortran_argument_convert): Declaration.\n\t(fortran_preserve_arg_pointer): Declaration.\n\t* infcall.c (value_arg_coerce): Call Fortran argument logic.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/function-calls.exp: New file.\n\t* gdb.fortran/function-calls.f90: New test.",
    "tree": {
      "sha": "1cba99e017e03ebdd44207d76fb7d23f0e179fcd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1cba99e017e03ebdd44207d76fb7d23f0e179fcd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa3cfbda2f2af71044949b5692ce51cafb023d13",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa3cfbda2f2af71044949b5692ce51cafb023d13",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa3cfbda2f2af71044949b5692ce51cafb023d13",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa3cfbda2f2af71044949b5692ce51cafb023d13/comments",
  "author": {
    "login": "RichardABunt",
    "id": 84915683,
    "node_id": "MDQ6VXNlcjg0OTE1Njgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/84915683?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RichardABunt",
    "html_url": "https://github.com/RichardABunt",
    "followers_url": "https://api.github.com/users/RichardABunt/followers",
    "following_url": "https://api.github.com/users/RichardABunt/following{/other_user}",
    "gists_url": "https://api.github.com/users/RichardABunt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RichardABunt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RichardABunt/subscriptions",
    "organizations_url": "https://api.github.com/users/RichardABunt/orgs",
    "repos_url": "https://api.github.com/users/RichardABunt/repos",
    "events_url": "https://api.github.com/users/RichardABunt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RichardABunt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "RichardABunt",
    "id": 84915683,
    "node_id": "MDQ6VXNlcjg0OTE1Njgz",
    "avatar_url": "https://avatars.githubusercontent.com/u/84915683?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RichardABunt",
    "html_url": "https://github.com/RichardABunt",
    "followers_url": "https://api.github.com/users/RichardABunt/followers",
    "following_url": "https://api.github.com/users/RichardABunt/following{/other_user}",
    "gists_url": "https://api.github.com/users/RichardABunt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RichardABunt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RichardABunt/subscriptions",
    "organizations_url": "https://api.github.com/users/RichardABunt/orgs",
    "repos_url": "https://api.github.com/users/RichardABunt/repos",
    "events_url": "https://api.github.com/users/RichardABunt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RichardABunt/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2d0d5fc6f085dedd7988b29e58fdc4dc2081472e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d0d5fc6f085dedd7988b29e58fdc4dc2081472e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2d0d5fc6f085dedd7988b29e58fdc4dc2081472e"
    }
  ],
  "stats": {
    "total": 460,
    "additions": 457,
    "deletions": 3
  },
  "files": [
    {
      "sha": "906af75bbcf470d052b4ecf04590f34dcff723c3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -1,3 +1,20 @@\n+2019-03-06  Richard Bunt  <richard.bunt@arm.com>\n+\tDirk Schubert  <dirk.schubert@arm.com>\n+\tChris January  <chris.january@arm.com>\n+\n+\t* eval.c (evaluate_subexp_standard): Call Fortran argument\n+\twrapping logic.\n+\t* f-lang.c (struct value): A value which can be passed into a\n+\tFortran function call.\n+\t(fortran_argument_convert): Wrap Fortran arguments in a pointer\n+\twhere appropriate.\n+\t(struct type): Value ready for a Fortran function call.\n+\t(fortran_preserve_arg_pointer): Undo check_typedef, the pointer\n+\tis needed.\n+\t* f-lang.h (fortran_argument_convert): Declaration.\n+\t(fortran_preserve_arg_pointer): Declaration.\n+\t* infcall.c (value_arg_coerce): Call Fortran argument logic.\n+\n 2019-03-05  Tom Tromey  <tromey@adacore.com>\n \n \t* python/py-prettyprint.c (print_string_repr): Remove #if."
    },
    {
      "sha": "0c0cf7f6ac7afda36358a094c6ea4fa3cb83d6b5",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -1987,7 +1987,20 @@ evaluate_subexp_standard (struct type *expect_type,\n \t  argvec[0] = arg1;\n \t  tem = 1;\n \t  for (; tem <= nargs; tem++)\n-\t    argvec[tem] = evaluate_subexp_with_coercion (exp, pos, noside);\n+\t    {\n+\t      argvec[tem] = evaluate_subexp_with_coercion (exp, pos, noside);\n+\t      /* Arguments in Fortran are passed by address.  Coerce the\n+\t\t arguments here rather than in value_arg_coerce as otherwise\n+\t\t the call to malloc to place the non-lvalue parameters in\n+\t\t target memory is hit by this Fortran specific logic.  This\n+\t\t results in malloc being called with a pointer to an integer\n+\t\t followed by an attempt to malloc the arguments to malloc in\n+\t\t target memory.  Infinite recursion ensues.  */\n+\t      bool is_artificial =\n+\t\tTYPE_FIELD_ARTIFICIAL (value_type (arg1), tem - 1);\n+\t      argvec[tem] = fortran_argument_convert (argvec[tem],\n+\t\t\t\t\t\t      is_artificial);\n+\t    }\n \t  argvec[tem] = 0;\t/* signal end of arglist */\n \t  if (noside == EVAL_SKIP)\n \t    return eval_skip_value (exp);"
    },
    {
      "sha": "6eb9b230eb7131fae4450369d400b1636596582a",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -27,6 +27,7 @@\n #include \"parser-defs.h\"\n #include \"language.h\"\n #include \"varobj.h\"\n+#include \"gdbcore.h\"\n #include \"f-lang.h\"\n #include \"valprint.h\"\n #include \"value.h\"\n@@ -371,3 +372,40 @@ _initialize_f_language (void)\n {\n   f_type_data = gdbarch_data_register_post_init (build_fortran_types);\n }\n+\n+/* See f-lang.h.  */\n+\n+struct value *\n+fortran_argument_convert (struct value *value, bool is_artificial)\n+{\n+  if (!is_artificial)\n+    {\n+      /* If the value is not in the inferior e.g. registers values,\n+\t convenience variables and user input.  */\n+      if (VALUE_LVAL (value) != lval_memory)\n+\t{\n+\t  struct type *type = value_type (value);\n+\t  const int length = TYPE_LENGTH (type);\n+\t  const CORE_ADDR addr\n+\t    = value_as_long (value_allocate_space_in_inferior (length));\n+\t  write_memory (addr, value_contents (value), length);\n+\t  struct value *val\n+\t    = value_from_contents_and_address (type, value_contents (value),\n+\t\t\t\t\t       addr);\n+\t  return value_addr (val);\n+\t}\n+      else\n+\treturn value_addr (value); /* Program variables, e.g. arrays.  */\n+    }\n+    return value;\n+}\n+\n+/* See f-lang.h.  */\n+\n+struct type *\n+fortran_preserve_arg_pointer (struct value *arg, struct type *type)\n+{\n+  if (TYPE_CODE (value_type (arg)) == TYPE_CODE_PTR)\n+    return value_type (arg);\n+  return type;\n+}"
    },
    {
      "sha": "5afafb1a051716700c9c4fb73c128afb09333fa7",
      "filename": "gdb/f-lang.h",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/f-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/f-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.h?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -82,4 +82,37 @@ struct builtin_f_type\n /* Return the Fortran type table for the specified architecture.  */\n extern const struct builtin_f_type *builtin_f_type (struct gdbarch *gdbarch);\n \n+/* Ensures that function argument VALUE is in the appropriate form to\n+   pass to a Fortran function.  Returns a possibly new value that should\n+   be used instead of VALUE.\n+\n+   When IS_ARTIFICIAL is true this indicates an artificial argument,\n+   e.g. hidden string lengths which the GNU Fortran argument passing\n+   convention specifies as being passed by value.\n+\n+   When IS_ARTIFICIAL is false, the argument is passed by pointer.  If the\n+   value is already in target memory then return a value that is a pointer\n+   to VALUE.  If VALUE is not in memory (e.g. an integer literal), allocate\n+   space in the target, copy VALUE in, and return a pointer to the in\n+   memory copy.  */\n+\n+extern struct value *fortran_argument_convert (struct value *value,\n+\t\t\t\t\t       bool is_artificial);\n+\n+/* Ensures that function argument TYPE is appropriate to inform the debugger\n+   that ARG should be passed as a pointer.  Returns the potentially updated\n+   argument type.\n+\n+   If ARG is of type pointer then the type of ARG is returned, otherwise\n+   TYPE is returned untouched.\n+\n+   This function exists to augment the types of Fortran function call\n+   parameters to be pointers to the reported value, when the corresponding ARG\n+   has also been wrapped in a pointer (by fortran_argument_convert).  This\n+   informs the debugger that these arguments should be passed as a pointer\n+   rather than as the pointed to type.  */\n+\n+extern struct type *fortran_preserve_arg_pointer (struct value *arg,\n+\t\t\t\t\t\t  struct type *type);\n+\n #endif /* F_LANG_H */"
    },
    {
      "sha": "0deb37da962de9a644955c8bc15d4c034b2593ae",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -33,6 +33,7 @@\n #include \"command.h\"\n #include \"dummy-frame.h\"\n #include \"ada-lang.h\"\n+#include \"f-lang.h\"\n #include \"gdbthread.h\"\n #include \"event-top.h\"\n #include \"observable.h\"\n@@ -130,7 +131,7 @@ show_unwind_on_terminating_exception_p (struct ui_file *file, int from_tty,\n }\n \n /* Perform the standard coercions that are specified\n-   for arguments to be passed to C or Ada functions.\n+   for arguments to be passed to C, Ada or Fortran functions.\n \n    If PARAM_TYPE is non-NULL, it is the expected parameter type.\n    IS_PROTOTYPED is non-zero if the function declaration is prototyped.\n@@ -146,9 +147,11 @@ value_arg_coerce (struct gdbarch *gdbarch, struct value *arg,\n   struct type *type\n     = param_type ? check_typedef (param_type) : arg_type;\n \n-  /* Perform any Ada-specific coercion first.  */\n+  /* Perform any Ada- and Fortran-specific coercion first.  */\n   if (current_language->la_language == language_ada)\n     arg = ada_convert_actual (arg, type);\n+  else if (current_language->la_language == language_fortran)\n+    type = fortran_preserve_arg_pointer (arg, type);\n \n   /* Force the value to the target if we will need its address.  At\n      this point, we could allocate arguments on the stack instead of"
    },
    {
      "sha": "5f2100b340a0b51d2ba80cfb9d322f4ad8adc2b8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-06  Richard Bunt  <richard.bunt@arm.com>\n+\n+\t* gdb.fortran/function-calls.exp: New file.\n+\t* gdb.fortran/function-calls.f90: New test.\n+\n 2019-03-04  Richard Bunt  <richard.bunt@arm.com>\n \n \t* gdb.fortran/short-circuit-argument-list.exp: Remove reliance"
    },
    {
      "sha": "9db889a230ee31d02a7a638dc828da5b174a8477",
      "filename": "gdb/testsuite/gdb.fortran/function-calls.exp",
      "status": "added",
      "additions": 103,
      "deletions": 0,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/gdb.fortran/function-calls.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/gdb.fortran/function-calls.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/function-calls.exp?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -0,0 +1,103 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Exercise passing and returning arguments in Fortran. This test case\n+# is based on the GNU Fortran Argument passing conventions.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} {debug f90}]} {\n+    return -1\n+}\n+\n+if {![runto [gdb_get_line_number \"post_init\"]]} then {\n+    perror \"couldn't run to breakpoint post_init\"\n+    continue\n+}\n+\n+# Use inspired by gdb.base/callfuncs.exp.\n+gdb_test_no_output \"set unwindonsignal on\"\n+\n+# Baseline: function and subroutine call with no arguments.\n+gdb_test \"p no_arg()\" \" = .TRUE.\"\n+gdb_test_no_output \"call no_arg_subroutine()\"\n+\n+# Argument class: literal, inferior variable, convenience variable,\n+# function call return value, function.\n+# Paragraph 3: Variables are passed by reference.\n+gdb_test \"p one_arg(.TRUE.)\" \" = .TRUE.\"\n+gdb_test \"p one_arg(untrue)\" \" = .FALSE.\"\n+gdb_test_no_output \"set \\$var = .FALSE.\"\n+gdb_test \"p one_arg(\\$var)\" \" = .FALSE.\"\n+gdb_test \"p one_arg(one_arg(.TRUE.))\" \" = .TRUE.\"\n+gdb_test \"p one_arg(one_arg(.FALSE.))\" \" = .FALSE.\"\n+gdb_test_no_output \"call run(no_arg_subroutine)\"\n+\n+# Return: constant.\n+gdb_test \"p return_constant()\" \" = 17\"\n+# Return derived type and call a function in a module.\n+gdb_test \"p derived_types_and_module_calls::build_cart(7,8)\" \\\n+\t \" = \\\\\\( x = 7, y = 8 \\\\\\)\"\n+\n+# Two hidden arguments. 1. returned string and 2. string length.\n+# Paragraph 1.\n+gdb_test \"p return_string(returned_string_debugger, 40)\" \"\"\n+gdb_test \"p returned_string_debugger\" \"'returned in hidden first argument       '\"\n+\n+# Argument type: real(kind=4), complex, array, pointer, derived type,\n+# derived type with allocatable, nested derived type.\n+# Paragraph 4: pointer.\n+gdb_test \"p pointer_function(int_pointer)\" \" = 87\"\n+# Paragraph 4: array.\n+gdb_test \"call array_function(integer_array)\" \" = 17\"\n+gdb_test \"p derived_types_and_module_calls::pass_cart(c)\" \\\n+\t \" = \\\\\\( x = 2, y = 4 \\\\\\)\"\n+# Allocatable elements in a derived type. Technical report ISO/IEC 15581.\n+gdb_test \"p derived_types_and_module_calls::pass_cart_nd(c_nd)\" \" = 4\"\n+gdb_test \"p derived_types_and_module_calls::pass_nested_cart(nested_c)\" \\\n+\t  \"= \\\\\\( d = \\\\\\( x = 1, y = 2 \\\\\\), z = 3 \\\\\\)\"\n+# Result within some tolerance.\n+gdb_test \"p real4_argument(real4)\" \" = 3.${decimal}\"\n+\n+# Paragraph 2. Complex argument and return.\n+gdb_test \"p complex_argument(fft)\" \" = \\\\\\(2.${decimal},3.${decimal}\\\\\\)\"\n+\n+# Function with optional arguments.\n+# Paragraph 10: Option reference arguments.\n+gdb_test \"p sum_some(1,2,3)\" \" = 6\"\n+\n+# There is currently no mechanism to call a function without all\n+# optional parameters present.\n+setup_kfail \"gdb/24147\" *-*-*\n+gdb_test \"p sum_some(1,2)\" \" = 3\"\n+\n+# Paragraph 10: optional value arguments. There is insufficient DWARF\n+# information to reliably make this case work.\n+setup_kfail \"gdb/24305\" *-*-*\n+gdb_test \"p one_arg_value(10)\" \" = 10\"\n+\n+# DW_AT_artificial formal parameters must be passed manually. This\n+# assert will fail if the length of the string is wrapped in a pointer.\n+# Paragraph 7: Character type.\n+gdb_test \"p hidden_string_length('arbitrary string', 16)\" \" = 16\"\n+\n+# Several arguments.\n+gdb_test \"p several_arguments(2, 3, 5)\" \" = 10\"\n+gdb_test \"p mix_of_scalar_arguments(5, .TRUE., 3.5)\" \" = 9\"\n+\n+# Calling other functions: Recursive call.\n+gdb_test \"p fibonacci(6)\" \" = 8\""
    },
    {
      "sha": "d7bcd71cfa84c7be5b7c90d163e5db27b9c51638",
      "filename": "gdb/testsuite/gdb.fortran/function-calls.f90",
      "status": "added",
      "additions": 242,
      "deletions": 0,
      "changes": 242,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/gdb.fortran/function-calls.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3cfbda2f2af71044949b5692ce51cafb023d13/gdb/testsuite/gdb.fortran/function-calls.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/function-calls.f90?ref=aa3cfbda2f2af71044949b5692ce51cafb023d13",
      "patch": "@@ -0,0 +1,242 @@\n+! Copyright 2019 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+! Source code for function-calls.exp.\n+\n+subroutine no_arg_subroutine()\n+end subroutine\n+\n+logical function no_arg()\n+    no_arg = .TRUE.\n+end function\n+\n+subroutine run(a)\n+    external :: a\n+    call a()\n+end subroutine\n+\n+logical function one_arg(x)\n+    logical, intent(in) :: x\n+    one_arg = x\n+end function\n+\n+integer(kind=4) function one_arg_value(x)\n+    integer(kind=4), value :: x\n+    one_arg_value = x\n+end function\n+\n+integer(kind=4) function several_arguments(a, b, c)\n+    integer(kind=4), intent(in) :: a\n+    integer(kind=4), intent(in) :: b\n+    integer(kind=4), intent(in) :: c\n+    several_arguments = a + b + c\n+end function\n+\n+integer(kind=4) function mix_of_scalar_arguments(a, b, c)\n+    integer(kind=4), intent(in) :: a\n+    logical(kind=4), intent(in) :: b\n+    real(kind=8), intent(in) :: c\n+    mix_of_scalar_arguments = a + floor(c)\n+    if (b) then\n+        mix_of_scalar_arguments=mix_of_scalar_arguments+1\n+    end if\n+end function\n+\n+real(kind=4) function real4_argument(a)\n+    real(kind=4), intent(in) :: a\n+    real4_argument = a\n+end function\n+\n+integer(kind=4) function return_constant()\n+    return_constant = 17\n+end function\n+\n+character(40) function return_string()\n+    return_string='returned in hidden first argument'\n+end function\n+\n+recursive function fibonacci(n) result(item)\n+    integer(kind=4) :: item\n+    integer(kind=4), intent(in) :: n\n+    select case (n)\n+        case (0:1)\n+            item = n\n+        case default\n+            item = fibonacci(n-1) + fibonacci(n-2)\n+    end select\n+end function\n+\n+complex function complex_argument(a)\n+    complex, intent(in) :: a\n+    complex_argument = a\n+end function\n+\n+integer(kind=4) function array_function(a)\n+    integer(kind=4), dimension(11) :: a\n+    array_function = a(ubound(a, 1, 4))\n+end function\n+\n+integer(kind=4) function pointer_function(int_pointer)\n+    integer, pointer :: int_pointer\n+    pointer_function = int_pointer\n+end function\n+\n+integer(kind=4) function hidden_string_length(string)\n+  character*(*) :: string\n+  hidden_string_length = len(string)\n+end function\n+\n+integer(kind=4) function sum_some(a, b, c)\n+    integer :: a, b\n+    integer, optional :: c\n+    sum_some = a + b\n+    if (present(c)) then\n+        sum_some = sum_some + c\n+    end if\n+end function\n+\n+module derived_types_and_module_calls\n+    type cart\n+        integer :: x\n+        integer :: y\n+    end type\n+    type cart_nd\n+        integer :: x\n+        integer, allocatable :: d(:)\n+    end type\n+    type nested_cart_3d\n+        type(cart) :: d\n+        integer :: z\n+    end type\n+contains\n+    type(cart) function pass_cart(c)\n+        type(cart) :: c\n+        pass_cart = c\n+    end function\n+    integer(kind=4) function pass_cart_nd(c)\n+        type(cart_nd) :: c\n+        pass_cart_nd = ubound(c%d,1,4)\n+    end function\n+    type(nested_cart_3d) function pass_nested_cart(c)\n+        type(nested_cart_3d) :: c\n+        pass_nested_cart = c\n+    end function\n+    type(cart) function build_cart(x,y)\n+        integer :: x, y\n+        build_cart%x = x\n+        build_cart%y = y\n+    end function\n+end module\n+\n+program function_calls\n+    use derived_types_and_module_calls\n+    implicit none\n+    interface\n+        logical function no_arg()\n+        end function\n+        logical function one_arg(x)\n+            logical, intent(in) :: x\n+        end function\n+        integer(kind=4) function pointer_function(int_pointer)\n+            integer, pointer :: int_pointer\n+        end function\n+        integer(kind=4) function several_arguments(a, b, c)\n+            integer(kind=4), intent(in) :: a\n+            integer(kind=4), intent(in) :: b\n+            integer(kind=4), intent(in) :: c\n+        end function\n+        complex function complex_argument(a)\n+            complex, intent(in) :: a\n+        end function\n+            real(kind=4) function real4_argument(a)\n+            real(kind=4), intent(in) :: a\n+        end function\n+        integer(kind=4) function return_constant()\n+        end function\n+        character(40) function return_string()\n+        end function\n+        integer(kind=4) function one_arg_value(x)\n+            integer(kind=4), value :: x\n+        end function\n+        integer(kind=4) function sum_some(a, b, c)\n+            integer :: a, b\n+            integer, optional :: c\n+        end function\n+        integer(kind=4) function mix_of_scalar_arguments(a, b, c)\n+            integer(kind=4), intent(in) :: a\n+            logical(kind=4), intent(in) :: b\n+            real(kind=8), intent(in) :: c\n+        end function\n+        integer(kind=4) function array_function(a)\n+            integer(kind=4), dimension(11) :: a\n+        end function\n+        integer(kind=4) function hidden_string_length(string)\n+            character*(*) :: string\n+        end function\n+    end interface\n+    logical :: untrue, no_arg_return\n+    complex :: fft, fft_result\n+    integer(kind=4), dimension (11) :: integer_array\n+    real(kind=8) :: real8\n+    real(kind=4) :: real4\n+    integer, pointer :: int_pointer\n+    integer, target :: pointee, several_arguments_return\n+    integer(kind=4) :: integer_return\n+    type(cart) :: c, cout\n+    type(cart_nd) :: c_nd\n+    type(nested_cart_3d) :: nested_c\n+    character(40) :: returned_string, returned_string_debugger\n+    real8 = 3.00\n+    real4 = 9.3\n+    integer_array = 17\n+    fft = cmplx(2.1, 3.3)\n+    print *, fft\n+    untrue = .FALSE.\n+    int_pointer => pointee\n+    pointee = 87\n+    c%x = 2\n+    c%y = 4\n+    c_nd%x = 4\n+    allocate(c_nd%d(4))\n+    c_nd%d = 6\n+    nested_c%z = 3\n+    nested_c%d%x = 1\n+    nested_c%d%y = 2\n+    ! Use everything so it is not elided by the compiler.\n+    call no_arg_subroutine()\n+    no_arg_return = no_arg() .AND. one_arg(.FALSE.)\n+    several_arguments_return = several_arguments(1,2,3) + return_constant()\n+    integer_return = array_function(integer_array)\n+    integer_return = mix_of_scalar_arguments(2, untrue, real8)\n+    real4 = real4_argument(3.4)\n+    integer_return = pointer_function(int_pointer)\n+    c = pass_cart(c)\n+    integer_return = pass_cart_nd(c_nd)\n+    nested_c = pass_nested_cart(nested_c)\n+    integer_return = hidden_string_length('string of implicit length')\n+    call run(no_arg_subroutine)\n+    integer_return = one_arg_value(10)\n+    integer_return = sum_some(1,2,3)\n+    returned_string = return_string()\n+    cout = build_cart(4,5)\n+    fft_result = complex_argument(fft)\n+    print *, cout\n+    print *, several_arguments_return\n+    print *, fft_result\n+    print *, real4\n+    print *, integer_return\n+    print *, returned_string_debugger\n+    deallocate(c_nd%d) ! post_init\n+end program"
    }
  ]
}