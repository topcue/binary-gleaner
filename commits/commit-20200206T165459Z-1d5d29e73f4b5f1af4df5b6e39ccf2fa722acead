{
  "sha": "1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWQ1ZDI5ZTczZjRiNWYxYWY0ZGY1YjZlMzljY2YyZmE3MjJhY2VhZA==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-02-06T15:20:37Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-02-06T16:54:59Z"
    },
    "message": "gdb: Catch exceptions if the source file is not found\n\nThe source_cache::ensure method may throw an exception through\nthe invocation of source_cache::get_plain_source_lines. This\nhappens when the source file is not found. The expected behaviour\nof \"ensure\" is only returning \"true\" or \"false\" according to the\ndocumentation in the header file.\n\nSo far, if gdb is in source layout and a file is missing, you see\nsome outputs like below:\n\n ,---------------------------------------------.\n | test.c file is loaded in the source window. |\n |                                             |\n | int main()                                  |\n | ...                                         |\n |---------------------------------------------|\n | Remote debugging using :1234                |\n | __start () at /path/to/crt0.S:141           |\n | /path/to/crt0.S: No such file or directory. |\n | (gdb) p/x $pc                               |\n | $1 = 0x124                                  |\n | (gdb) n                                     |\n | /path/to/crt0.S: No such file or directory. |\n | (gdb) p/x $pc                               |\n | $2 = 0x128                                  |\n | (gdb) [pressing arrow-down key]             |\n | (gdb) terminate called after throwing an    |\n |       instance of 'gdb_exception_error'     |\n `---------------------------------------------'\nOther issues have been encountered as well [1].\n\nThe patch from Pedro [2] which is about preventing exceptions\nfrom crossing the \"readline\" mitigates the situation by not\ncausing gdb crash, but still there are lots of errors printed:\n\n ,---------------------------------------------.\n | test.c file is loaded in the source window. |\n |                                             |\n | int main()                                  |\n | ...                                         |\n |---------------------------------------------|\n | Remote debugging using :1234                |\n | __start () at /path/to/crt0.S:141           |\n | /path/to/crt0.S: No such file or directory. |\n | (gdb) [pressing arrow-down key]             |\n | /path/to/crt0.S: No such file or directory. |\n | (gdb) [pressing arrow-down key]             |\n | /path/to/crt0.S: No such file or directory. |\n | (gdb) [pressing arrow-up key]               |\n | /path/to/crt0.S: No such file or directory. |\n `---------------------------------------------'\n\nWith the changes of this patch, the behavior is like:\n ,---------------------------------------------.\n | initially, source window is empty because   |\n | crt0.S is not found and according to the    |\n | program counter that is the piece of code   |\n | being executed.                             |\n |                                             |\n | later, when we break at main (see commands  |\n | below), this window will be filled with the |\n | the contents of test.c file.                |\n |---------------------------------------------|\n | Remote debugging using :1234                |\n | __start () at /path/to/crt0.S:141           |\n | (gdb) p/x $pc                               |\n | $1 = 0x124                                  |\n | (gdb) n                                     |\n | (gdb) p/x $pc                               |\n | $2 = 0x128                                  |\n | (gdb) b main                                |\n | Breakpoint 1 at 0x334: file test.c, line 8. |\n | (gdb) cont                                  |\n | Continuing.                                 |\n | Breakpoint 1, main () at hello.c:8          |\n | (gdb) n                                     |\n | (gdb)                                       |\n `---------------------------------------------'\n\nThere is no crash and the error message is completely\ngone. Maybe it is good practice that the error is\nshown inside the source window.\n\nI tested this change against gdb.base/list-missing-source.exp\nand there was no regression.\n\n[1]\nIt has also been observed in the past that the register\nvalues are not transferred from qemu's gdb stub, see:\nhttps://github.com/foss-for-synopsys-dwc-arc-processors/toolchain/issues/226\n\n[2]\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=2f267673f0fdee9287e6d404ecd4f2d29da0d2f2\n\ngdb/ChangeLog:\n\n\t* source-cache.c (source_cache::ensure): Surround\n\tget_plain_source_lines with a try/catch.\n\t(source_cache::get_line_charpos): Get rid of try/catch\n\tand only check for the return value of \"ensure\".\n\t* tui/tui-source.c (tui_source_window::set_contents):\n\tSimplify \"nlines\" calculation.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.tui/tui-missing-src.exp: Add the \"missing source\n\tfile\" test for the TUI.",
    "tree": {
      "sha": "dd6a33aef30b025d59e9acc7cddcf8ca7dad9ba1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dd6a33aef30b025d59e9acc7cddcf8ca7dad9ba1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b0999b9b4574371f4b7682d0ccf5f7dbf1702262",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0999b9b4574371f4b7682d0ccf5f7dbf1702262",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b0999b9b4574371f4b7682d0ccf5f7dbf1702262"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 133,
    "deletions": 19
  },
  "files": [
    {
      "sha": "59648e6a2526e959984c14179c915bee156d652a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-06  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* source-cache.c (source_cache::ensure): Surround\n+\tget_plain_source_lines with a try/catch.\n+\t(source_cache::get_line_charpos): Get rid of try/catch\n+\tand only check for the return value of \"ensure\".\n+\t* tui/tui-source.c (tui_source_window::set_contents):\n+\tSimplify \"nlines\" calculation.\n+\n 2020-02-06  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."
    },
    {
      "sha": "9196e3a19e3f60fcdab1225bd306e6a594f7bf7e",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 21,
      "deletions": 18,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "patch": "@@ -176,7 +176,16 @@ source_cache::ensure (struct symtab *s)\n \t}\n     }\n \n-  std::string contents = get_plain_source_lines (s, fullname);\n+  std::string contents;\n+  try\n+    {\n+      contents = get_plain_source_lines (s, fullname);\n+    }\n+  catch (const gdb_exception_error &e)\n+    {\n+      /* If 's' is not found, an exception is thrown.  */\n+      return false;\n+    }\n \n   if (source_styling && gdb_stdout->can_emit_style_escape ())\n     {\n@@ -241,26 +250,20 @@ bool\n source_cache::get_line_charpos (struct symtab *s,\n \t\t\t\tconst std::vector<off_t> **offsets)\n {\n-  try\n-    {\n-      std::string fullname = symtab_to_fullname (s);\n-\n-      auto iter = m_offset_cache.find (fullname);\n-      if (iter == m_offset_cache.end ())\n-\t{\n-\t  ensure (s);\n-\t  iter = m_offset_cache.find (fullname);\n-\t  /* cache_source_text ensured this was entered.  */\n-\t  gdb_assert (iter != m_offset_cache.end ());\n-\t}\n+  std::string fullname = symtab_to_fullname (s);\n \n-      *offsets = &iter->second;\n-      return true;\n-    }\n-  catch (const gdb_exception_error &e)\n+  auto iter = m_offset_cache.find (fullname);\n+  if (iter == m_offset_cache.end ())\n     {\n-      return false;\n+      if (!ensure (s))\n+\treturn false;\n+      iter = m_offset_cache.find (fullname);\n+      /* cache_source_text ensured this was entered.  */\n+      gdb_assert (iter != m_offset_cache.end ());\n     }\n+\n+  *offsets = &iter->second;\n+  return true;\n }\n \n /* A helper function that extracts the desired source lines from TEXT,"
    },
    {
      "sha": "685994a19a7aea53261385f3cd2109850785660f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* gdb.tui/tui-missing-src.exp: Add the \"missing source\n+\tfile\" test for the TUI.\n+\n 2020-02-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.server/multi-ui-errors.exp: Give a test a real name to avoid"
    },
    {
      "sha": "2d9a851bec199f2e09ad635726ac0b73050cf119",
      "filename": "gdb/testsuite/gdb.tui/tui-missing-src.exp",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/testsuite/gdb.tui/tui-missing-src.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/testsuite/gdb.tui/tui-missing-src.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.tui/tui-missing-src.exp?ref=1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "patch": "@@ -0,0 +1,97 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test checks if gdb can handle missing source files gracefully.\n+# Testing steps are:\n+# 1. Have a main() in main.c that calls an external function f2().\n+# 2. Have f2() implemented in f2.c.\n+# 3. Build the two files into one executable.\n+# 4. Remove main.c.\n+# 5. Open the executable inside gdb while having gdb in source layout.\n+#    No source is found for the moment.\n+# 6. After a little bit of playing, we enter f2() and now the source\n+#    layout must show the contents of f2.c.\n+# 7. Going back to main() shall result in no contents again.\n+\n+load_lib \"tuiterm.exp\"\n+\n+standard_testfile\n+\n+set mainfile [standard_output_file main.c]\n+set f2file   [standard_output_file f2.c]\n+set srcfiles [list $mainfile $f2file]\n+\n+# Step 1: Write the main.c file into the output directory.\n+# This file will be removed after compilation.\n+set fd [open \"$mainfile\" w]\n+puts $fd {\n+extern int f2(int);\n+int\n+main ()\n+{\n+  int a = 4;\n+  a = f2(a);\n+  return a - a;\n+}\n+}\n+close $fd\n+\n+# Step 2: Write the f2.c file into the output directory.\n+set fd [open \"$f2file\" w]\n+puts $fd {\n+int\n+f2 (int x)\n+{\n+  x <<= 1;\n+  return x+5;\n+}\n+}\n+close $fd\n+\n+# Step 3: Compile the source files.\n+if  { [gdb_compile \"${srcfiles}\" \"${binfile}\" \\\n+\t   executable {debug additional_flags=-O0}] != \"\" } {\n+    untested \"failed to compile\"\n+    return -1\n+}\n+\n+# Step 4: Remove the main.c file.\n+file delete $mainfile\n+\n+# Step 5: Load the executable into GDB.\n+# There shall be no source content.\n+Term::clean_restart 24 80 $testfile\n+if {![Term::enter_tui]} {\n+    unsupported \"TUI not supported\"\n+}\n+# There must exist a source layout with the size 80x15 and\n+# there should be nothing in it.\n+Term::check_box_contents \"check source box is empty\" \\\n+    0 0 80 15 \"No Source Available\"\n+\n+# Step 6: Go to main and after one next, enter f2().\n+Term::command \"set pagination off\"\n+Term::command \"start\"\n+Term::command \"next\"\n+Term::command \"step\"\n+Term::check_contents \"checking if inside f2 ()\" \"f2 \\\\(x=4\\\\)\"\n+Term::check_box_contents \"f2.c must be displayed in source window\" \\\n+    0 0 80 15 \"return x\\\\+5\"\n+\n+# Step 7: Back in main\n+Term::command \"finish\"\n+Term::check_box_contents \"check source box is empty after return\" \\\n+    0 0 80 15 \"No Source Available\"\n+Term::check_contents \"Back in main\" \"Value returned is .* 13\""
    },
    {
      "sha": "3c7a8e10008c84a8bbef531c35345f6350eff8ce",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "patch": "@@ -55,7 +55,7 @@ tui_source_window::set_contents (struct gdbarch *arch,\n   line_width = width - TUI_EXECINFO_SIZE - 1;\n   /* Take hilite (window border) into account, when\n      calculating the number of lines.  */\n-  nlines = (line_no + (height - 2)) - line_no;\n+  nlines = height - 2;\n \n   std::string srclines;\n   const std::vector<off_t> *offsets;"
    }
  ]
}