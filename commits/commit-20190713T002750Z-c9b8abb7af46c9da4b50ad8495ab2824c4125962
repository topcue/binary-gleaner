{
  "sha": "c9b8abb7af46c9da4b50ad8495ab2824c4125962",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzliOGFiYjdhZjQ2YzlkYTRiNTBhZDg0OTVhYjI4MjRjNDEyNTk2Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-26T12:38:54Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-13T00:27:50Z"
    },
    "message": "[GOLD] PowerPC got reloc optimisation\n\nNote that gold won't remove unused GOT entries, in contrast to ld.bfd\nwhich will.\n\n\t* powerpc.cc (Powerpc_relobj::make_got_relative): New function.\n\t(relative_value_is_known): New functions.\n\t(Target_powerpc::Relocate::relocate): Edit code using\n\tGOT16_HA, GOT16_LO_DS, and GOT_PCREL34 relocs.",
    "tree": {
      "sha": "94518846635db5adaf8ee371f2bc22e9f892e4fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/94518846635db5adaf8ee371f2bc22e9f892e4fa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9b8abb7af46c9da4b50ad8495ab2824c4125962",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9b8abb7af46c9da4b50ad8495ab2824c4125962",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9b8abb7af46c9da4b50ad8495ab2824c4125962",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9b8abb7af46c9da4b50ad8495ab2824c4125962/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e4dff7651becba48d805e39655138f7f6ca30485",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4dff7651becba48d805e39655138f7f6ca30485",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e4dff7651becba48d805e39655138f7f6ca30485"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 104,
    "deletions": 11
  },
  "files": [
    {
      "sha": "01fc7bb0f11816d7cc3b4f458b296122d66f08f9",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b8abb7af46c9da4b50ad8495ab2824c4125962/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b8abb7af46c9da4b50ad8495ab2824c4125962/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=c9b8abb7af46c9da4b50ad8495ab2824c4125962",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (Powerpc_relobj::make_got_relative): New function.\n+\t(relative_value_is_known): New functions.\n+\t(Target_powerpc::Relocate::relocate): Edit code using\n+\tGOT16_HA, GOT16_LO_DS, and GOT_PCREL34 relocs.\n+\n 2019-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.cc (Target_powerpc): Add powerxx_stubs_ and accessor"
    },
    {
      "sha": "3748f116c1632e69c757e9626f1b1fbf47976d04",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 97,
      "deletions": 11,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b8abb7af46c9da4b50ad8495ab2824c4125962/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b8abb7af46c9da4b50ad8495ab2824c4125962/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=c9b8abb7af46c9da4b50ad8495ab2824c4125962",
      "patch": "@@ -249,6 +249,12 @@ class Powerpc_relobj : public Sized_relobj_file<size, big_endian>\n   make_toc_relative(Target_powerpc<size, big_endian>* target,\n \t\t    Address* value);\n \n+  bool\n+  make_got_relative(Target_powerpc<size, big_endian>* target,\n+\t\t    const Symbol_value<size>* psymval,\n+\t\t    Address addend,\n+\t\t    Address* value);\n+\n   // Perform the Sized_relobj_file method, then set up opd info from\n   // .opd relocs.\n   void\n@@ -2387,6 +2393,25 @@ Powerpc_relobj<size, big_endian>::make_toc_relative(\n   return true;\n }\n \n+template<int size, bool big_endian>\n+bool\n+Powerpc_relobj<size, big_endian>::make_got_relative(\n+    Target_powerpc<size, big_endian>* target,\n+    const Symbol_value<size>* psymval,\n+    Address addend,\n+    Address* value)\n+{\n+  Address addr = psymval->value(this, addend);\n+  Address got_base = (target->got_section()->output_section()->address()\n+\t\t      + this->toc_base_offset());\n+  addr -= got_base;\n+  if (addr + 0x80008000 > 0xffffffff)\n+    return false;\n+\n+  *value = addr;\n+  return true;\n+}\n+\n // Perform the Sized_relobj_file method, then set up opd info from\n // .opd relocs.\n \n@@ -9660,6 +9685,37 @@ Target_powerpc<size, big_endian>::symval_for_branch(\n   return true;\n }\n \n+template<int size>\n+static bool\n+relative_value_is_known(const Sized_symbol<size>* gsym)\n+{\n+  if (gsym->type() == elfcpp::STT_GNU_IFUNC)\n+    return false;\n+\n+  if (gsym->is_from_dynobj()\n+      || gsym->is_undefined()\n+      || gsym->is_preemptible())\n+    return false;\n+\n+  if (gsym->is_absolute())\n+    return !parameters->options().output_is_position_independent();\n+\n+  return true;\n+}\n+\n+template<int size>\n+static bool\n+relative_value_is_known(const Symbol_value<size>* psymval)\n+{\n+  if (psymval->is_ifunc_symbol())\n+    return false;\n+\n+  bool is_ordinary;\n+  unsigned int shndx = psymval->input_shndx(&is_ordinary);\n+\n+  return is_ordinary && shndx != elfcpp::SHN_UNDEF;\n+}\n+\n // Perform a relocation.\n \n template<int size, bool big_endian>\n@@ -10446,7 +10502,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       break;\n     }\n \n-  if (size == 64)\n+  if (size == 64\n+      && (gsym\n+\t  ? relative_value_is_known(gsym)\n+\t  : relative_value_is_known(psymval)))\n     {\n       switch (r_type)\n \t{\n@@ -10460,12 +10519,6 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t  // and\n \t  //     addis ra,r2,0; addi rb,ra,x@toc@l;\n \t  // to  nop;           addi rb,r2,x@toc;\n-\t  // FIXME: the @got sequence shown above is not yet\n-\t  // optimized.  Note that gcc as of 2017-01-07 doesn't use\n-\t  // the ELF @got relocs except for TLS, instead using the\n-\t  // PowerOpen variant of a compiler managed GOT (called TOC).\n-\t  // The PowerOpen TOC sequence equivalent to the first\n-\t  // example is optimized.\n \tcase elfcpp::R_POWERPC_GOT_TLSLD16_HA:\n \tcase elfcpp::R_POWERPC_GOT_TLSGD16_HA:\n \tcase elfcpp::R_POWERPC_GOT_TPREL16_HA:\n@@ -10476,8 +10529,12 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n \t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n-\t      if (r_type == elfcpp::R_PPC64_TOC16_HA\n-\t\t  && object->make_toc_relative(target, &value))\n+\t      if ((r_type == elfcpp::R_PPC64_TOC16_HA\n+\t\t   && object->make_toc_relative(target, &value))\n+\t\t  || (r_type == elfcpp::R_POWERPC_GOT16_HA\n+\t\t      && object->make_got_relative(target, psymval,\n+\t\t\t\t\t\t   rela.get_r_addend(),\n+\t\t\t\t\t\t   &value)))\n \t\t{\n \t\t  gold_assert((insn & ((0x3f << 26) | 0x1f << 16))\n \t\t\t      == ((15u << 26) | (2 << 16)));\n@@ -10505,8 +10562,12 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n \t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n \t      bool changed = false;\n-\t      if (r_type == elfcpp::R_PPC64_TOC16_LO_DS\n-\t\t  && object->make_toc_relative(target, &value))\n+\t      if ((r_type == elfcpp::R_PPC64_TOC16_LO_DS\n+\t\t   && object->make_toc_relative(target, &value))\n+\t\t  || (r_type == elfcpp::R_PPC64_GOT16_LO_DS\n+\t\t      && object->make_got_relative(target, psymval,\n+\t\t\t\t\t\t   rela.get_r_addend(),\n+\t\t\t\t\t\t   &value)))\n \t\t{\n \t\t  gold_assert ((insn & (0x3f << 26)) == 58u << 26 /* ld */);\n \t\t  insn ^= (14u << 26) ^ (58u << 26);\n@@ -10534,6 +10595,31 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t    }\n \t  break;\n \n+\tcase elfcpp::R_PPC64_GOT_PCREL34:\n+\t  if (parameters->options().toc_optimize())\n+\t    {\n+\t      Insn* iview = reinterpret_cast<Insn*>(view);\n+\t      uint64_t insn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t      insn <<= 32;\n+\t      insn |= elfcpp::Swap<32, big_endian>::readval(iview + 1);\n+\t      if ((insn & ((-1ULL << 50) | (63ULL << 26)))\n+\t\t   != ((1ULL << 58) | (1ULL << 52) | (57ULL << 26) /* pld */))\n+\t\tbreak;\n+\n+\t      Address relval = psymval->value(object, rela.get_r_addend());\n+\t      relval -= address;\n+\t      if (relval + (1ULL << 33) < 1ULL << 34)\n+\t\t{\n+\t\t  value = relval;\n+\t\t  // Replace with paddi\n+\t\t  insn += (2ULL << 56) + (14ULL << 26) - (57ULL << 26);\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn >> 32);\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n+\t\t\t\t\t\t\t insn & 0xffffffff);\n+\t\t}\n+\t    }\n+\t  break;\n+\n \tcase elfcpp::R_POWERPC_TPREL16_HA:\n \t  if (parameters->options().tls_optimize() && value + 0x8000 < 0x10000)\n \t    {"
    }
  ]
}