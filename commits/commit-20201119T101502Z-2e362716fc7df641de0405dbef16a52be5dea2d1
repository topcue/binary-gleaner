{
  "sha": "2e362716fc7df641de0405dbef16a52be5dea2d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmUzNjI3MTZmYzdkZjY0MWRlMDQwNWRiZWYxNmE1MmJlNWRlYTJkMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-16T16:12:44Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-19T10:15:02Z"
    },
    "message": "gdb: convert some function arguments from int to bool\n\nA little int to bool conversion around the 'watch' type commands.\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (update_watchpoint): Pass 'false' not '0'.\n\t(watch_command_1): Update parameter types.  Convert locals to\n\tbool.\n\t(watch_command_wrapper): Change parameter type.\n\t(watch_maybe_just_location): Change locals to bool.\n\t(rwatch_command_wrapper): Update parameter type.\n\t(awatch_command_wrapper): Update parameter type.\n\t* breakpoint.h (watch_command_wrapper): Change parameter type.\n\t(rwatch_command_wrapper): Update parameter type.\n\t(awatch_command_wrapper): Update parameter type.\n\t* eval.c (fetch_subexp_value): Change parameter type.\n\t* ppc-linux-nat.c (ppc_linux_nat_target::check_condition): Pass\n\t'false' not '0'.\n\t* value.h (fetch_subexp_value): Change parameter type in\n\tdeclaration.",
    "tree": {
      "sha": "9370c58983eb351f7f4fe725208f69fcd55d656c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9370c58983eb351f7f4fe725208f69fcd55d656c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2e362716fc7df641de0405dbef16a52be5dea2d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e362716fc7df641de0405dbef16a52be5dea2d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2e362716fc7df641de0405dbef16a52be5dea2d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e362716fc7df641de0405dbef16a52be5dea2d1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3ff61f8155f296633f96206c926b545b97053b3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3ff61f8155f296633f96206c926b545b97053b3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b3ff61f8155f296633f96206c926b545b97053b3"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 39,
    "deletions": 21
  },
  "files": [
    {
      "sha": "a56208ce44352c0a0cf11c20eaddd74e9b65a1d3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -1,3 +1,21 @@\n+2020-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* breakpoint.c (update_watchpoint): Pass 'false' not '0'.\n+\t(watch_command_1): Update parameter types.  Convert locals to\n+\tbool.\n+\t(watch_command_wrapper): Change parameter type.\n+\t(watch_maybe_just_location): Change locals to bool.\n+\t(rwatch_command_wrapper): Update parameter type.\n+\t(awatch_command_wrapper): Update parameter type.\n+\t* breakpoint.h (watch_command_wrapper): Change parameter type.\n+\t(rwatch_command_wrapper): Update parameter type.\n+\t(awatch_command_wrapper): Update parameter type.\n+\t* eval.c (fetch_subexp_value): Change parameter type.\n+\t* ppc-linux-nat.c (ppc_linux_nat_target::check_condition): Pass\n+\t'false' not '0'.\n+\t* value.h (fetch_subexp_value): Change parameter type in\n+\tdeclaration.\n+\n 2020-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* printcmd.c (skip_over_slash_fmt): Make use of skip_to_space and"
    },
    {
      "sha": "a4ae8b2d8c9b99735898f70357108858d24ebd47",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -1905,7 +1905,7 @@ update_watchpoint (struct watchpoint *b, int reparse)\n       struct value *v, *result;\n       struct program_space *frame_pspace;\n \n-      fetch_subexp_value (b->exp.get (), &pc, &v, &result, &val_chain, 0);\n+      fetch_subexp_value (b->exp.get (), &pc, &v, &result, &val_chain, false);\n \n       /* Avoid setting b->val if it's already set.  The meaning of\n \t b->val is 'the last value' user saw, and we should update\n@@ -4969,7 +4969,7 @@ watchpoint_check (bpstat bs)\n \treturn WP_VALUE_CHANGED;\n \n       mark = value_mark ();\n-      fetch_subexp_value (b->exp.get (), &pc, &new_val, NULL, NULL, 0);\n+      fetch_subexp_value (b->exp.get (), &pc, &new_val, NULL, NULL, false);\n \n       if (b->val_bitsize != 0)\n \tnew_val = extract_bitfield_from_watchpoint_value (b, new_val);\n@@ -10676,7 +10676,7 @@ is_masked_watchpoint (const struct breakpoint *b)\n \t\thw_access: watch access (read or write) */\n static void\n watch_command_1 (const char *arg, int accessflag, int from_tty,\n-\t\t int just_location, int internal)\n+\t\t bool just_location, bool internal)\n {\n   struct breakpoint *scope_breakpoint = NULL;\n   const struct block *exp_valid_block = NULL, *cond_exp_valid_block = NULL;\n@@ -10693,7 +10693,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n   int pc = 0;\n   /* Flag to indicate whether we are going to use masks for\n      the hardware watchpoint.  */\n-  int use_mask = 0;\n+  bool use_mask = false;\n   CORE_ADDR mask = 0;\n \n   /* Make sure that we actually have parameters to parse.  */\n@@ -10760,7 +10760,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n \t      if (use_mask)\n \t\terror(_(\"You can specify only one mask.\"));\n \n-\t      use_mask = just_location = 1;\n+\t      use_mask = just_location = true;\n \n \t      mark = value_mark ();\n \t      mask_value = parse_to_comma_and_eval (&value_start);\n@@ -11077,7 +11077,7 @@ can_use_hardware_watchpoint (const std::vector<value_ref_ptr> &vals)\n }\n \n void\n-watch_command_wrapper (const char *arg, int from_tty, int internal)\n+watch_command_wrapper (const char *arg, int from_tty, bool internal)\n {\n   watch_command_1 (arg, hw_write, from_tty, 0, internal);\n }\n@@ -11088,14 +11088,14 @@ watch_command_wrapper (const char *arg, int from_tty, int internal)\n static void\n watch_maybe_just_location (const char *arg, int accessflag, int from_tty)\n {\n-  int just_location = 0;\n+  bool just_location = false;\n \n   if (arg\n       && (check_for_argument (&arg, \"-location\", sizeof (\"-location\") - 1)\n \t  || check_for_argument (&arg, \"-l\", sizeof (\"-l\") - 1)))\n-    just_location = 1;\n+    just_location = true;\n \n-  watch_command_1 (arg, accessflag, from_tty, just_location, 0);\n+  watch_command_1 (arg, accessflag, from_tty, just_location, false);\n }\n \n static void\n@@ -11105,7 +11105,7 @@ watch_command (const char *arg, int from_tty)\n }\n \n void\n-rwatch_command_wrapper (const char *arg, int from_tty, int internal)\n+rwatch_command_wrapper (const char *arg, int from_tty, bool internal)\n {\n   watch_command_1 (arg, hw_read, from_tty, 0, internal);\n }\n@@ -11117,7 +11117,7 @@ rwatch_command (const char *arg, int from_tty)\n }\n \n void\n-awatch_command_wrapper (const char *arg, int from_tty, int internal)\n+awatch_command_wrapper (const char *arg, int from_tty, bool internal)\n {\n   watch_command_1 (arg, hw_access, from_tty, 0, internal);\n }"
    },
    {
      "sha": "4a65dd2dd4397629deb9142dd0e268ae30eb6d27",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -1300,9 +1300,9 @@ const char *bpdisp_text (enum bpdisp disp);\n \n extern void break_command (const char *, int);\n \n-extern void watch_command_wrapper (const char *, int, int);\n-extern void awatch_command_wrapper (const char *, int, int);\n-extern void rwatch_command_wrapper (const char *, int, int);\n+extern void watch_command_wrapper (const char *, int, bool);\n+extern void awatch_command_wrapper (const char *, int, bool);\n+extern void rwatch_command_wrapper (const char *, int, bool);\n extern void tbreak_command (const char *, int);\n \n extern struct breakpoint_ops base_breakpoint_ops;"
    },
    {
      "sha": "2626ee6d8765ff07a4cbdb8b94c0e3a257171ed8",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -183,7 +183,7 @@ void\n fetch_subexp_value (struct expression *exp, int *pc, struct value **valp,\n \t\t    struct value **resultp,\n \t\t    std::vector<value_ref_ptr> *val_chain,\n-\t\t    int preserve_errors)\n+\t\t    bool preserve_errors)\n {\n   struct value *mark, *new_mark, *result;\n "
    },
    {
      "sha": "ed311a6ba33824b30e9d07450142379504d95004",
      "filename": "gdb/mi/mi-cmd-break.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/mi/mi-cmd-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/mi/mi-cmd-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-break.c?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -463,13 +463,13 @@ mi_cmd_break_watch (const char *command, char **argv, int argc)\n   switch (type)\n     {\n     case REG_WP:\n-      watch_command_wrapper (expr, FROM_TTY, 0);\n+      watch_command_wrapper (expr, FROM_TTY, false);\n       break;\n     case READ_WP:\n-      rwatch_command_wrapper (expr, FROM_TTY, 0);\n+      rwatch_command_wrapper (expr, FROM_TTY, false);\n       break;\n     case ACCESS_WP:\n-      awatch_command_wrapper (expr, FROM_TTY, 0);\n+      awatch_command_wrapper (expr, FROM_TTY, false);\n       break;\n     default:\n       error (_(\"-break-watch: Unknown watchpoint type.\"));"
    },
    {
      "sha": "095ed577a09cf71e7d112e3d7bc7274bb194a820",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -2484,13 +2484,13 @@ ppc_linux_nat_target::check_condition (CORE_ADDR watch_addr,\n   if (cond->elts[0].opcode != BINOP_EQUAL)\n     return 0;\n \n-  fetch_subexp_value (cond, &pc, &left_val, NULL, &left_chain, 0);\n+  fetch_subexp_value (cond, &pc, &left_val, NULL, &left_chain, false);\n   num_accesses_left = num_memory_accesses (left_chain);\n \n   if (left_val == NULL || num_accesses_left < 0)\n     return 0;\n \n-  fetch_subexp_value (cond, &pc, &right_val, NULL, &right_chain, 0);\n+  fetch_subexp_value (cond, &pc, &right_val, NULL, &right_chain, false);\n   num_accesses_right = num_memory_accesses (right_chain);\n \n   if (right_val == NULL || num_accesses_right < 0)"
    },
    {
      "sha": "2bd1999dc8f5711c70da340257f70daa12189ab3",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e362716fc7df641de0405dbef16a52be5dea2d1/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=2e362716fc7df641de0405dbef16a52be5dea2d1",
      "patch": "@@ -928,7 +928,7 @@ extern value *eval_skip_value (expression *exp);\n extern void fetch_subexp_value (struct expression *exp, int *pc,\n \t\t\t\tstruct value **valp, struct value **resultp,\n \t\t\t\tstd::vector<value_ref_ptr> *val_chain,\n-\t\t\t\tint preserve_errors);\n+\t\t\t\tbool preserve_errors);\n \n extern const char *extract_field_op (struct expression *exp, int *subexp);\n "
    }
  ]
}