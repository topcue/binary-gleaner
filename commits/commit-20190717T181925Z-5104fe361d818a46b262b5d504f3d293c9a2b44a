{
  "sha": "5104fe361d818a46b262b5d504f3d293c9a2b44a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTEwNGZlMzYxZDgxOGE0NmIyNjJiNWQ1MDRmM2QyOTNjOWEyYjQ0YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-02T23:07:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-17T18:19:25Z"
    },
    "message": "Move source window common to code to tui-winsource.[ch]\n\nLike the previous rearranging patches, this moves the source and\ndisassembly window base class code to tui-winsource.[ch].  The\nexecution info window is also moved, because it is associated with\nthis base class.\n\ngdb/ChangeLog\n2019-07-17  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (struct tui_exec_info_window)\n\t(struct tui_source_window_base): Move from tui-data.h.\n\t* tui/tui-winsource.c: Move many method definitions from\n\telsewhere.  Remove \"structuring\" comments.\n\t* tui/tui-wingeneral.c (tui_source_window_base::make_visible)\n\t(tui_source_window_base::refresh_window): Move to\n\ttui-winsource.c.\n\t* tui/tui-win.c (tui_source_window_base::refresh_all)\n\t(tui_source_window_base::update_tab_width)\n\t(tui_source_window_base::set_new_height)\n\t(tui_source_window_base::do_make_visible_with_new_height): Move to\n\ttui-winsource.c.\n\t* tui/tui-source.h: Update.\n\t* tui/tui-source.c (tui_source_window_base::reset): Move to\n\ttui-winsource.c.\n\t* tui/tui-disasm.h: Update.\n\t* tui/tui-data.h (struct tui_exec_info_window): Move to\n\ttui-winsource.h.\n\t(struct tui_source_window_base): Likewise.\n\t* tui/tui-data.c (tui_source_window_base::clear_detail)\n\t(tui_source_window_base, ~tui_source_window_base): Move to\n\ttui-winsource.c.",
    "tree": {
      "sha": "2e6677c74b037797ea5da459cc3f1a0d0099305b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e6677c74b037797ea5da459cc3f1a0d0099305b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5104fe361d818a46b262b5d504f3d293c9a2b44a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5104fe361d818a46b262b5d504f3d293c9a2b44a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5104fe361d818a46b262b5d504f3d293c9a2b44a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5104fe361d818a46b262b5d504f3d293c9a2b44a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "daa15dde7202d948da694bdfe0df9e5294c7ee9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/daa15dde7202d948da694bdfe0df9e5294c7ee9a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/daa15dde7202d948da694bdfe0df9e5294c7ee9a"
    }
  ],
  "stats": {
    "total": 489,
    "additions": 256,
    "deletions": 233
  },
  "files": [
    {
      "sha": "77a9f9e86eb02c535487da65306c9d9e4b1b5b67",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -1,3 +1,28 @@\n+2019-07-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (struct tui_exec_info_window)\n+\t(struct tui_source_window_base): Move from tui-data.h.\n+\t* tui/tui-winsource.c: Move many method definitions from\n+\telsewhere.  Remove \"structuring\" comments.\n+\t* tui/tui-wingeneral.c (tui_source_window_base::make_visible)\n+\t(tui_source_window_base::refresh_window): Move to\n+\ttui-winsource.c.\n+\t* tui/tui-win.c (tui_source_window_base::refresh_all)\n+\t(tui_source_window_base::update_tab_width)\n+\t(tui_source_window_base::set_new_height)\n+\t(tui_source_window_base::do_make_visible_with_new_height): Move to\n+\ttui-winsource.c.\n+\t* tui/tui-source.h: Update.\n+\t* tui/tui-source.c (tui_source_window_base::reset): Move to\n+\ttui-winsource.c.\n+\t* tui/tui-disasm.h: Update.\n+\t* tui/tui-data.h (struct tui_exec_info_window): Move to\n+\ttui-winsource.h.\n+\t(struct tui_source_window_base): Likewise.\n+\t* tui/tui-data.c (tui_source_window_base::clear_detail)\n+\t(tui_source_window_base, ~tui_source_window_base): Move to\n+\ttui-winsource.c.\n+\n 2019-07-17  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (tui_resize_all)"
    },
    {
      "sha": "2748230700c97ba21e0fecc33cb9e059ed555fb4",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 1,
      "deletions": 26,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -24,6 +24,7 @@\n #include \"tui/tui.h\"\n #include \"tui/tui-data.h\"\n #include \"tui/tui-wingeneral.h\"\n+#include \"tui/tui-winsource.h\"\n #include \"gdb_curses.h\"\n \n /****************************\n@@ -139,17 +140,6 @@ tui_add_to_source_windows (struct tui_source_window_base *win_info)\n     source_windows.push_back (win_info);\n }\n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::clear_detail ()\n-{\n-  gdbarch = NULL;\n-  start_line_or_addr.loa = LOA_ADDRESS;\n-  start_line_or_addr.u.addr = 0;\n-  horizontal_offset = 0;\n-}\n-\n /* Accessor for the locator win info.  Answers a pointer to the static\n    locator win info struct.  */\n struct tui_locator_window *\n@@ -313,23 +303,8 @@ tui_win_info::tui_win_info (enum tui_win_type type)\n {\n }\n \n-tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n-  : tui_win_info (type),\n-    execution_info (new tui_exec_info_window ())\n-{\n-  gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n-  start_line_or_addr.loa = LOA_ADDRESS;\n-  start_line_or_addr.u.addr = 0;\n-}\n-\n tui_gen_win_info::~tui_gen_win_info ()\n {\n   tui_delete_win (handle);\n   xfree (title);\n }\n-\n-tui_source_window_base::~tui_source_window_base ()\n-{\n-  xfree (fullname);\n-  delete execution_info;\n-}  "
    },
    {
      "sha": "214f728befe02219780a07343cc90ac754174641",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 84,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -27,6 +27,7 @@\n #include \"observable.h\"\n \n struct tui_cmd_window;\n+struct tui_source_window_base;\n struct tui_source_window;\n \n /* This is a point definition.  */\n@@ -203,34 +204,6 @@ struct tui_source_element\n \n typedef char tui_exec_info_content[TUI_EXECINFO_SIZE];\n \n-/* Execution info window class.  */\n-\n-struct tui_exec_info_window : public tui_gen_win_info\n-{\n-  tui_exec_info_window ()\n-    : tui_gen_win_info (EXEC_INFO_WIN)\n-  {\n-  }\n-\n-  ~tui_exec_info_window () override\n-  {\n-    xfree (m_content);\n-  }\n-\n-  /* Get or allocate contents.  */\n-  tui_exec_info_content *maybe_allocate_content (int n_elements);\n-\n-  /* Return the contents.  */\n-  const tui_exec_info_content *get_content () const\n-  {\n-    return m_content;\n-  }\n-\n-private:\n-\n-  tui_exec_info_content *m_content = nullptr;\n-};\n-\n /* Locator window class.  */\n \n struct tui_locator_window : public tui_gen_win_info\n@@ -334,62 +307,6 @@ struct tui_win_info : public tui_gen_win_info\n   bool is_highlighted = false;\n };\n \n-/* The base class for all source-like windows, namely the source and\n-   disassembly windows.  */\n-\n-struct tui_source_window_base : public tui_win_info\n-{\n-protected:\n-  explicit tui_source_window_base (enum tui_win_type type);\n-  ~tui_source_window_base () override;\n-  DISABLE_COPY_AND_ASSIGN (tui_source_window_base);\n-\n-  void do_scroll_horizontal (int num_to_scroll) override;\n-  void do_make_visible_with_new_height () override;\n-\n-public:\n-\n-  void clear_detail () override;\n-\n-  void make_visible (bool visible) override;\n-  void refresh_window () override;\n-  void refresh_all () override;\n-\n-  /* Refill the source window's source cache and update it.  If this\n-     is a disassembly window, then just update it.  */\n-  void refill ();\n-\n-  /* Set the location of the execution point.  */\n-  void set_is_exec_point_at (struct tui_line_or_address l);\n-\n-  void set_new_height (int height) override;\n-\n-  void update_tab_width () override;\n-\n-  /* Return true if the location LOC corresponds to the line number\n-     LINE_NO in this source window; false otherwise.  */\n-  virtual bool location_matches_p (struct bp_location *loc, int line_no) = 0;\n-\n-  void reset (int height, int width,\n-\t      int origin_x, int origin_y) override;\n-\n-  /* Does the locator belong to this window?  */\n-  bool m_has_locator = false;\n-  /* Execution information window.  */\n-  struct tui_exec_info_window *execution_info;\n-  /* Used for horizontal scroll.  */\n-  int horizontal_offset = 0;\n-  struct tui_line_or_address start_line_or_addr;\n-\n-  /* It is the resolved form as returned by symtab_to_fullname.  */\n-  char *fullname = nullptr;\n-\n-  /* Architecture associated with code at this location.  */\n-  struct gdbarch *gdbarch = nullptr;\n-\n-  std::vector<tui_source_element> content;\n-};\n-\n extern int tui_win_is_auxiliary (enum tui_win_type win_type);\n \n "
    },
    {
      "sha": "19672a74df11ba78b23f5bfc09558e34d1fd5be2",
      "filename": "gdb/tui/tui-disasm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.h?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -24,6 +24,7 @@\n \n #include \"tui/tui.h\"\n #include \"tui/tui-data.h\"\n+#include \"tui-winsource.h\"\n \n /* A TUI disassembly window.  */\n "
    },
    {
      "sha": "f0bac24bfea4d6b5837cee4603ab605bc97567e1",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -291,12 +291,3 @@ tui_source_window::location_matches_p (struct bp_location *loc, int line_no)\n \t  && filename_cmp (fullname,\n \t\t\t   symtab_to_fullname (loc->symtab)) == 0);\n }\n-\n-void\n-tui_source_window_base::reset (int height, int width,\n-\t\t\t       int origin_x, int origin_y)\n-{\n-  tui_gen_win_info::reset (height, width - 3,\n-\t\t\t   origin_x + 3, origin_y);\n-  execution_info->reset (height, 3, origin_x, origin_y);\n-}"
    },
    {
      "sha": "49d79aba6295b56cf4dfeea86da7705a258398c2",
      "filename": "gdb/tui/tui-source.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.h?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -23,6 +23,7 @@\n #define TUI_TUI_SOURCE_H\n \n #include \"tui/tui-data.h\"\n+#include \"tui-winsource.h\"\n \n struct symtab;\n \n@@ -40,6 +41,8 @@ struct tui_source_window : public tui_source_window_base\n     return SRC_NAME;\n   }\n \n+  /* Return true if the location LOC corresponds to the line number\n+     LINE_NO in this source window; false otherwise.  */\n   bool location_matches_p (struct bp_location *loc, int line_no) override;\n \n   bool showing_source_p (const char *filename) const;"
    },
    {
      "sha": "1e02c42dbd135da5fcdc61cc53a0716cb44252af",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 0,
      "deletions": 90,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -498,17 +498,6 @@ tui_win_info::right_scroll (int num_to_scroll)\n }\n \n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::refresh_all ()\n-{\n-  tui_show_source_content (this);\n-  tui_check_and_display_highlight_if_needed (this);\n-  tui_erase_exec_info_content (this);\n-  tui_update_exec_info (this);\n-}\n-\n void\n tui_refresh_all_win (void)\n {\n@@ -899,19 +888,6 @@ unsigned int tui_tab_width = DEFAULT_TAB_LEN;\n \n static unsigned int internal_tab_width = DEFAULT_TAB_LEN;\n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::update_tab_width ()\n-{\n-  /* We don't really change the height of any windows, but\n-     calling these 2 functions causes a complete regeneration\n-     and redisplay of the window's contents, which will take\n-     the new tab width into account.  */\n-  make_invisible_and_set_new_height (height);\n-  make_visible_with_new_height ();\n-}\n-\n /* After the tab width is set, call this to update the relevant\n    windows.  */\n \n@@ -1215,28 +1191,6 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n }\n \n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::set_new_height (int height)\n-{\n-  execution_info->make_visible (false);\n-  execution_info->height = height;\n-  execution_info->origin.y = origin.y;\n-  if (height > 1)\n-    execution_info->viewport_height = height - 1;\n-  else\n-    execution_info->viewport_height = height;\n-  execution_info->viewport_height--;\n-\n-  if (m_has_locator)\n-    {\n-      tui_locator_window *gen_win_info = tui_locator_win_info_ptr ();\n-      gen_win_info->make_visible (false);\n-      gen_win_info->origin.y = origin.y + height;\n-    }\n-}\n-\n /* See tui-data.h.  */\n \n void\n@@ -1268,50 +1222,6 @@ tui_win_info::make_visible_with_new_height ()\n \n /* See tui-data.h.  */\n \n-void\n-tui_source_window_base::do_make_visible_with_new_height ()\n-{\n-  execution_info->make_visible (true);\n-  if (!content.empty ())\n-    {\n-      struct tui_line_or_address line_or_addr;\n-      struct symtab_and_line cursal\n-\t= get_current_source_symtab_and_line ();\n-\n-      line_or_addr = start_line_or_addr;\n-      tui_update_source_window (this, gdbarch,\n-\t\t\t\tcursal.symtab, line_or_addr, TRUE);\n-    }\n-  else if (deprecated_safe_get_selected_frame () != NULL)\n-    {\n-      struct tui_line_or_address line;\n-      struct symtab_and_line cursal\n-\t= get_current_source_symtab_and_line ();\n-      struct frame_info *frame = deprecated_safe_get_selected_frame ();\n-      struct gdbarch *gdbarch = get_frame_arch (frame);\n-\n-      struct symtab *s = find_pc_line_symtab (get_frame_pc (frame));\n-      if (type == SRC_WIN)\n-\t{\n-\t  line.loa = LOA_LINE;\n-\t  line.u.line_no = cursal.line;\n-\t}\n-      else\n-\t{\n-\t  line.loa = LOA_ADDRESS;\n-\t  find_line_pc (s, cursal.line, &line.u.addr);\n-\t}\n-      tui_update_source_window (this, gdbarch, s, line, TRUE);\n-    }\n-  if (m_has_locator)\n-    {\n-      tui_locator_win_info_ptr ()->make_visible (true);\n-      tui_show_locator_content ();\n-    }\n-}\n-\n-/* See tui-data.h.  */\n-\n int\n tui_win_info::max_height () const\n {"
    },
    {
      "sha": "a2e48865761a7482477f1d37379ff029166a56a7",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 0,
      "deletions": 18,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -166,15 +166,6 @@ tui_gen_win_info::make_visible (bool visible)\n     }\n }\n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::make_visible (bool visible)\n-{\n-  execution_info->make_visible (visible);\n-  tui_win_info::make_visible (visible);\n-}\n-\n /* Makes all windows invisible (except the command and locator\n    windows).  */\n static void\n@@ -196,15 +187,6 @@ tui_make_all_invisible (void)\n   make_all_visible (false);\n }\n \n-/* See tui-data.h.  */\n-\n-void\n-tui_source_window_base::refresh_window ()\n-{\n-  execution_info->refresh_window ();\n-  tui_win_info::refresh_window ();\n-}\n-\n /* Function to refresh all the windows currently displayed.  */\n \n void"
    },
    {
      "sha": "71147da2f916bdcbdf8d1d87b8bf17be660be26b",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 144,
      "deletions": 5,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -300,6 +300,150 @@ tui_show_source_content (struct tui_source_window_base *win_info)\n \n /* See tui-data.h.  */\n \n+void\n+tui_source_window_base::clear_detail ()\n+{\n+  gdbarch = NULL;\n+  start_line_or_addr.loa = LOA_ADDRESS;\n+  start_line_or_addr.u.addr = 0;\n+  horizontal_offset = 0;\n+}\n+\n+tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n+  : tui_win_info (type),\n+    execution_info (new tui_exec_info_window ())\n+{\n+  gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n+  start_line_or_addr.loa = LOA_ADDRESS;\n+  start_line_or_addr.u.addr = 0;\n+}\n+\n+\n+tui_source_window_base::~tui_source_window_base ()\n+{\n+  xfree (fullname);\n+  delete execution_info;\n+}  \n+\n+void\n+tui_source_window_base::reset (int height, int width,\n+\t\t\t       int origin_x, int origin_y)\n+{\n+  tui_gen_win_info::reset (height, width - 3,\n+\t\t\t   origin_x + 3, origin_y);\n+  execution_info->reset (height, 3, origin_x, origin_y);\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::refresh_all ()\n+{\n+  tui_show_source_content (this);\n+  tui_check_and_display_highlight_if_needed (this);\n+  tui_erase_exec_info_content (this);\n+  tui_update_exec_info (this);\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::update_tab_width ()\n+{\n+  /* We don't really change the height of any windows, but\n+     calling these 2 functions causes a complete regeneration\n+     and redisplay of the window's contents, which will take\n+     the new tab width into account.  */\n+  make_invisible_and_set_new_height (height);\n+  make_visible_with_new_height ();\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::set_new_height (int height)\n+{\n+  execution_info->make_visible (false);\n+  execution_info->height = height;\n+  execution_info->origin.y = origin.y;\n+  if (height > 1)\n+    execution_info->viewport_height = height - 1;\n+  else\n+    execution_info->viewport_height = height;\n+  execution_info->viewport_height--;\n+\n+  if (m_has_locator)\n+    {\n+      tui_locator_window *gen_win_info = tui_locator_win_info_ptr ();\n+      gen_win_info->make_visible (false);\n+      gen_win_info->origin.y = origin.y + height;\n+    }\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::do_make_visible_with_new_height ()\n+{\n+  execution_info->make_visible (true);\n+  if (!content.empty ())\n+    {\n+      struct tui_line_or_address line_or_addr;\n+      struct symtab_and_line cursal\n+\t= get_current_source_symtab_and_line ();\n+\n+      line_or_addr = start_line_or_addr;\n+      tui_update_source_window (this, gdbarch,\n+\t\t\t\tcursal.symtab, line_or_addr, TRUE);\n+    }\n+  else if (deprecated_safe_get_selected_frame () != NULL)\n+    {\n+      struct tui_line_or_address line;\n+      struct symtab_and_line cursal\n+\t= get_current_source_symtab_and_line ();\n+      struct frame_info *frame = deprecated_safe_get_selected_frame ();\n+      struct gdbarch *gdbarch = get_frame_arch (frame);\n+\n+      struct symtab *s = find_pc_line_symtab (get_frame_pc (frame));\n+      if (type == SRC_WIN)\n+\t{\n+\t  line.loa = LOA_LINE;\n+\t  line.u.line_no = cursal.line;\n+\t}\n+      else\n+\t{\n+\t  line.loa = LOA_ADDRESS;\n+\t  find_line_pc (s, cursal.line, &line.u.addr);\n+\t}\n+      tui_update_source_window (this, gdbarch, s, line, TRUE);\n+    }\n+  if (m_has_locator)\n+    {\n+      tui_locator_win_info_ptr ()->make_visible (true);\n+      tui_show_locator_content ();\n+    }\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::make_visible (bool visible)\n+{\n+  execution_info->make_visible (visible);\n+  tui_win_info::make_visible (visible);\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::refresh_window ()\n+{\n+  execution_info->refresh_window ();\n+  tui_win_info::refresh_window ();\n+}\n+\n+/* See tui-data.h.  */\n+\n void\n tui_source_window_base::refill ()\n {\n@@ -616,8 +760,3 @@ tui_addr_is_displayed (CORE_ADDR addr,\n \n   return is_displayed;\n }\n-\n-\n-/*****************************************\n-** STATIC LOCAL FUNCTIONS               **\n-******************************************/"
    },
    {
      "sha": "ec44d1d2c022939b5308d384bfbf29ce5fd2048f",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 81,
      "deletions": 1,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5104fe361d818a46b262b5d504f3d293c9a2b44a/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=5104fe361d818a46b262b5d504f3d293c9a2b44a",
      "patch": "@@ -24,7 +24,87 @@\n \n #include \"tui/tui-data.h\"\n \n-struct tui_win_info;\n+/* Execution info window class.  */\n+\n+struct tui_exec_info_window : public tui_gen_win_info\n+{\n+  tui_exec_info_window ()\n+    : tui_gen_win_info (EXEC_INFO_WIN)\n+  {\n+  }\n+\n+  ~tui_exec_info_window () override\n+  {\n+    xfree (m_content);\n+  }\n+\n+  /* Get or allocate contents.  */\n+  tui_exec_info_content *maybe_allocate_content (int n_elements);\n+\n+  /* Return the contents.  */\n+  const tui_exec_info_content *get_content () const\n+  {\n+    return m_content;\n+  }\n+\n+private:\n+\n+  tui_exec_info_content *m_content = nullptr;\n+};\n+\n+/* The base class for all source-like windows, namely the source and\n+   disassembly windows.  */\n+\n+struct tui_source_window_base : public tui_win_info\n+{\n+protected:\n+  explicit tui_source_window_base (enum tui_win_type type);\n+  ~tui_source_window_base () override;\n+  DISABLE_COPY_AND_ASSIGN (tui_source_window_base);\n+\n+  void do_scroll_horizontal (int num_to_scroll) override;\n+  void do_make_visible_with_new_height () override;\n+\n+public:\n+\n+  void clear_detail () override;\n+\n+  void make_visible (bool visible) override;\n+  void refresh_window () override;\n+  void refresh_all () override;\n+\n+  /* Refill the source window's source cache and update it.  If this\n+     is a disassembly window, then just update it.  */\n+  void refill ();\n+\n+  /* Set the location of the execution point.  */\n+  void set_is_exec_point_at (struct tui_line_or_address l);\n+\n+  void set_new_height (int height) override;\n+\n+  void update_tab_width () override;\n+\n+  virtual bool location_matches_p (struct bp_location *loc, int line_no) = 0;\n+\n+  void reset (int height, int width,\n+\t      int origin_x, int origin_y) override;\n+\n+  /* Does the locator belong to this window?  */\n+  bool m_has_locator = false;\n+  /* Execution information window.  */\n+  struct tui_exec_info_window *execution_info;\n+  /* Used for horizontal scroll.  */\n+  int horizontal_offset = 0;\n+  struct tui_line_or_address start_line_or_addr;\n+\n+  /* It is the resolved form as returned by symtab_to_fullname.  */\n+  char *fullname = nullptr;\n+\n+  /* Architecture associated with code at this location.  */\n+  struct gdbarch *gdbarch = nullptr;\n+\n+  std::vector<tui_source_element> content;\n+};\n \n /* Update the execution windows to show the active breakpoints.  This\n    is called whenever a breakpoint is inserted, removed or has its"
    }
  ]
}