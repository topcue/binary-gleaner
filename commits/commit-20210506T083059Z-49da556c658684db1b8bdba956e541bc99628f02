{
  "sha": "49da556c658684db1b8bdba956e541bc99628f02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDlkYTU1NmM2NTg2ODRkYjFiOGJkYmE5NTZlNTQxYmM5OTYyOGYwMg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-05-06T08:30:58Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-05-06T08:30:59Z"
    },
    "message": "libctf, include: support an alternative encoding for nonrepresentable types\n\nBefore now, types that could not be encoded in CTF were represented as\nreferences to type ID 0, which does not itself appear in the\ndictionary. This choice is annoying in several ways, principally that it\nforces generators and consumers of CTF to grow special cases for types\nthat are referenced in valid dicts but don't appear.\n\nAllow an alternative representation (which will become the only\nrepresentation in format v4) whereby nonrepresentable types are encoded\nas actual types with kind CTF_K_UNKNOWN (an already-existing kind\ntheoretically but not in practice used for padding, with value 0).\nThis is backward-compatible, because CTF_K_UNKNOWN was not used anywhere\nbefore now: it was used in old-format function symtypetabs, but these\nwere never emitted by any compiler and the code to handle them in libctf\nlikely never worked and was removed last year, in favour of new-format\nsymtypetabs that contain only type IDs, not type kinds.\n\nIn order to link this type, we need an API addition to let us add types\nof unknown kind to the dict: we let them optionally have names so that\nGCC can emit many different unknown types and those types with identical\nnames will be deduplicated together.  There are also small tweaks to the\ndeduplicator to actually dedup such types, to let opening of dicts with\nunknown types with names work, to return the ECTF_NONREPRESENTABLE error\non resolution of such types (like ID 0), and to print their names as\nsomething useful but not a valid C identifier, mostly for the sake of\nthe dumper.\n\nTests added in the next commit.\n\ninclude/ChangeLog\n2021-05-06  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf.h (CTF_K_UNKNOWN): Document that it can be used for\n\tnonrepresentable types, not just padding.\n\t* ctf-api.h (ctf_add_unknown): New.\n\nlibctf/ChangeLog\n2021-05-06  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-open.c (init_types): Unknown types may have names.\n\t* ctf-types.c (ctf_type_resolve): CTF_K_UNKNOWN is as\n\tnon-representable as type ID 0.\n\t(ctf_type_aname): Print unknown types.\n\t* ctf-dedup.c (ctf_dedup_hash_type): Do not early-exit for\n\tCTF_K_UNKNOWN types: they have real hash values now.\n\t(ctf_dedup_rwalk_one_output_mapping): Treat CTF_K_UNKNOWN types\n\tlike other types with no referents: call the callback and do not\n\tskip them.\n\t(ctf_dedup_emit_type): Emit via...\n\t* ctf-create.c (ctf_add_unknown): ... this new function.\n\t* libctf.ver (LIBCTF_1.2): Add it.",
    "tree": {
      "sha": "a116f7a2004adbeb9f597dfa0397c2a969460853",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a116f7a2004adbeb9f597dfa0397c2a969460853"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/49da556c658684db1b8bdba956e541bc99628f02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49da556c658684db1b8bdba956e541bc99628f02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/49da556c658684db1b8bdba956e541bc99628f02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49da556c658684db1b8bdba956e541bc99628f02/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "15091ded14ec08bd3f3a686d420c6009e1d2c518",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15091ded14ec08bd3f3a686d420c6009e1d2c518",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/15091ded14ec08bd3f3a686d420c6009e1d2c518"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 78,
    "deletions": 11
  },
  "files": [
    {
      "sha": "aed37fd563a9e644402250f487b79ecdae2e4e28",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-06  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf.h (CTF_K_UNKNOWN): Document that it can be used for\n+\tnonrepresentable types, not just padding.\n+\t* ctf-api.h (ctf_add_unknown): New.\n+\n 2021-04-22  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* coff/internal.h (union internal_auxent):"
    },
    {
      "sha": "fa8f2cd5b684b7238b65c9a1cf2b9ed289347cfd",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -491,6 +491,7 @@ extern ctf_id_t ctf_add_struct_sized (ctf_dict_t *, uint32_t, const char *,\n \t\t\t\t      size_t);\n extern ctf_id_t ctf_add_union_sized (ctf_dict_t *, uint32_t, const char *,\n \t\t\t\t     size_t);\n+extern ctf_id_t ctf_add_unknown (ctf_dict_t *, uint32_t, const char *);\n extern ctf_id_t ctf_add_volatile (ctf_dict_t *, uint32_t, ctf_id_t);\n \n extern int ctf_add_enumerator (ctf_dict_t *, ctf_id_t, const char *, int);"
    },
    {
      "sha": "fa31c46983d3baaa9b3128eccffdd1f34c0892fc",
      "filename": "include/ctf.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/include/ctf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/include/ctf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf.h?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -405,7 +405,8 @@ union\n    CTF_INFO_VLEN() will extract the number of elements in the list, and\n    the type of each element is shown in the comments below. */\n \n-#define CTF_K_UNKNOWN\t0\t/* Unknown type (used for padding).  */\n+#define CTF_K_UNKNOWN\t0\t/* Unknown type (used for padding and\n+\t\t\t\t   unrepresentable types).  */\n #define CTF_K_INTEGER\t1\t/* Variant data is CTF_INT_DATA (see below).  */\n #define CTF_K_FLOAT\t2\t/* Variant data is CTF_FP_DATA (see below).  */\n #define CTF_K_POINTER\t3\t/* ctt_type is referenced type.  */"
    },
    {
      "sha": "51ecc85f75a7d953c742e0f610efbfcd3af89549",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -1,3 +1,18 @@\n+2021-05-06  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-open.c (init_types): Unknown types may have names.\n+\t* ctf-types.c (ctf_type_resolve): CTF_K_UNKNOWN is as\n+\tnon-representable as type ID 0.\n+\t(ctf_type_aname): Print unknown types.\n+\t* ctf-dedup.c (ctf_dedup_hash_type): Do not early-exit for\n+\tCTF_K_UNKNOWN types: they have real hash values now.\n+\t(ctf_dedup_rwalk_one_output_mapping): Treat CTF_K_UNKNOWN types\n+\tlike other types with no referents: call the callback and do not\n+\tskip them.\n+\t(ctf_dedup_emit_type): Emit via...\n+\t* ctf-create.c (ctf_add_unknown): ... this new function.\n+\t* libctf.ver (LIBCTF_1.2): Add it.\n+\n 2021-03-25  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac: Check for dlsym, not dlopen."
    },
    {
      "sha": "956cca8473e4f93d2719be76c86fb5db7dd8bcee",
      "filename": "libctf/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/NEWS?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -10,6 +10,9 @@ Changes in 2.37:\n    symbol number is known, like in object files and dynamic dicts created by\n    ctf_create.\n \n+** libctf supports compilers that encode unrepresentable types via a special\n+   kind (CTF_K_UNKNOWN) as well as via type ID 0.\n+\n * Bugfixes\n \n ** Avoid duplicating or losing types of data object symbols when"
    },
    {
      "sha": "2d232d40037bed09e3a030cdfc5295bab07c7d0b",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -965,6 +965,39 @@ ctf_add_forward (ctf_dict_t *fp, uint32_t flag, const char *name,\n   return type;\n }\n \n+ctf_id_t\n+ctf_add_unknown (ctf_dict_t *fp, uint32_t flag, const char *name)\n+{\n+  ctf_dtdef_t *dtd;\n+  ctf_id_t type = 0;\n+\n+  /* If a type is already defined with this name, error (if not CTF_K_UNKNOWN)\n+     or just return it.  */\n+\n+  if (name != NULL && name[0] != '\\0' && flag == CTF_ADD_ROOT\n+      && (type = ctf_lookup_by_rawname (fp, CTF_K_UNKNOWN, name)))\n+    {\n+      if (ctf_type_kind (fp, type) == CTF_K_UNKNOWN)\n+\treturn type;\n+      else\n+\t{\n+\t  ctf_err_warn (fp, 1, ECTF_CONFLICT,\n+\t\t\t_(\"ctf_add_unknown: cannot add unknown type \"\n+\t\t\t  \"named %s: type of this name already defined\"),\n+\t\t\tname ? name : _(\"(unnamed type)\"));\n+\t  return (ctf_set_errno (fp, ECTF_CONFLICT));\n+\t}\n+    }\n+\n+  if ((type = ctf_add_generic (fp, flag, name, CTF_K_UNKNOWN, 0, &dtd)) == CTF_ERR)\n+    return CTF_ERR;\t\t/* errno is set for us.  */\n+\n+  dtd->dtd_data.ctt_info = CTF_TYPE_INFO (CTF_K_UNKNOWN, flag, 0);\n+  dtd->dtd_data.ctt_type = 0;\n+\n+  return type;\n+}\n+\n ctf_id_t\n ctf_add_typedef (ctf_dict_t *fp, uint32_t flag, const char *name,\n \t\t ctf_id_t ref)"
    },
    {
      "sha": "649a76a91b62a55d5ac86214fd5651f3664bfea1",
      "filename": "libctf/ctf-dedup.c",
      "status": "modified",
      "additions": 5,
      "deletions": 9,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-dedup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-dedup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dedup.c?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -1064,10 +1064,6 @@ ctf_dedup_hash_type (ctf_dict_t *fp, ctf_dict_t *input,\n   if (tp->ctt_name == 0 || !name || name[0] == '\\0')\n     name = NULL;\n \n-  /* Treat the unknown kind just like the unimplemented type.  */\n-  if (kind == CTF_K_UNKNOWN)\n-    return \"00000000000000000000\";\n-\n   /* Decorate the name appropriately for the namespace it appears in: forwards\n      appear in the namespace of their referent.  */\n \n@@ -2075,8 +2071,6 @@ ctf_dedup_rwalk_one_output_mapping (ctf_dict_t *output,\n   switch (ctf_type_kind_unsliced (fp, type))\n     {\n     case CTF_K_UNKNOWN:\n-      /* Just skip things of unknown kind.  */\n-      return 0;\n     case CTF_K_FORWARD:\n     case CTF_K_INTEGER:\n     case CTF_K_FLOAT:\n@@ -2702,9 +2696,11 @@ ctf_dedup_emit_type (const char *hval, ctf_dict_t *output, ctf_dict_t **inputs,\n   switch (kind)\n     {\n     case CTF_K_UNKNOWN:\n-      /* These are types that CTF cannot encode, marked as such by the compile.\n-\t We intentionally do not re-emit these.  */\n-      new_type = 0;\n+      /* These are types that CTF cannot encode, marked as such by the\n+\t compiler.  */\n+      errtype = _(\"unknown type\");\n+      if ((new_type = ctf_add_unknown (target, isroot, name)) == CTF_ERR)\n+\tgoto err_target;\n       break;\n     case CTF_K_FORWARD:\n       /* This will do nothing if the type to which this forwards already exists,"
    },
    {
      "sha": "1c69dc83102d95e8bb612efdc547b34a160084a2",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -756,7 +756,8 @@ init_types (ctf_dict_t *fp, ctf_header_t *cth)\n     return ENOMEM;\n \n   if ((fp->ctf_names.ctn_readonly\n-       = ctf_hash_create (pop[CTF_K_INTEGER] +\n+       = ctf_hash_create (pop[CTF_K_UNKNOWN] +\n+\t\t\t  pop[CTF_K_INTEGER] +\n \t\t\t  pop[CTF_K_FLOAT] +\n \t\t\t  pop[CTF_K_FUNCTION] +\n \t\t\t  pop[CTF_K_TYPEDEF] +\n@@ -800,6 +801,7 @@ init_types (ctf_dict_t *fp, ctf_header_t *cth)\n \n       switch (kind)\n \t{\n+\tcase CTF_K_UNKNOWN:\n \tcase CTF_K_INTEGER:\n \tcase CTF_K_FLOAT:\n \t  /* Names are reused by bit-fields, which are differentiated by their"
    },
    {
      "sha": "243de9348d3ec01c68faa50f8b797b84611c7663",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -579,6 +579,8 @@ ctf_type_resolve (ctf_dict_t *fp, ctf_id_t type)\n \t  prev = type;\n \t  type = tp->ctt_type;\n \t  break;\n+\tcase CTF_K_UNKNOWN:\n+\t  return (ctf_set_errno (ofp, ECTF_NONREPRESENTABLE));\n \tdefault:\n \t  return type;\n \t}\n@@ -808,6 +810,13 @@ ctf_type_aname (ctf_dict_t *fp, ctf_id_t type)\n \t    case CTF_K_RESTRICT:\n \t      ctf_decl_sprintf (&cd, \"restrict\");\n \t      break;\n+\t    case CTF_K_UNKNOWN:\n+\t      if (name[0] == '\\0')\n+\t\tctf_decl_sprintf (&cd, _(\"(nonrepresentable type)\"));\n+\t      else\n+\t\tctf_decl_sprintf (&cd, _(\"(nonrepresentable type %s)\"),\n+\t\t\t\t  name);\n+\t      break;\n \t    }\n \n \t  k = cdp->cd_kind;"
    },
    {
      "sha": "0b182f37228de0b340327fd04550452b41472a4b",
      "filename": "libctf/libctf.ver",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49da556c658684db1b8bdba956e541bc99628f02/libctf/libctf.ver",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49da556c658684db1b8bdba956e541bc99628f02/libctf/libctf.ver",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/libctf.ver?ref=49da556c658684db1b8bdba956e541bc99628f02",
      "patch": "@@ -201,4 +201,5 @@ LIBCTF_1.2 {\n     global:\n \tctf_lookup_by_symbol_name;\n \tctf_arc_lookup_symbol_name;\n+\tctf_add_unknown;\n } LIBCTF_1.1;"
    }
  ]
}