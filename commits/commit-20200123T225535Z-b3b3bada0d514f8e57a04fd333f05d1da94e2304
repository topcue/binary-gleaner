{
  "sha": "b3b3bada0d514f8e57a04fd333f05d1da94e2304",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjNiM2JhZGEwZDUxNGY4ZTU3YTA0ZmQzMzNmMDVkMWRhOTRlMjMwNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-01-23T22:55:35Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-23T22:55:35Z"
    },
    "message": "gdb: introduce objfile text_section_offset and data_section_offset methods\n\nThe pattern\n\n  objfile->section_offsets[SECT_OFF_TEXT (objfile)]\n\n... appears very often, to get the offset of the text section of an\nobjfile.  I thought it would be more readable to write it as:\n\n  objfile->text_section_offset ()\n\n... so I added this method and used it where possible.  I also added\ndata_section_offset, although it is not used as much.\n\ngdb/ChangeLog:\n\n\t* objfiles.h (ALL_OBJFILE_OSECTIONS): Move up.\n\t(SECT_OFF_DATA): Likewise.\n\t(SECT_OFF_RODATA): Likewise.\n\t(SECT_OFF_TEXT): Likewise.\n\t(SECT_OFF_BSS): Likewise.\n\t(struct objfile) <text_section_offset, data_section_offset>: New\n\tmethods.\n\t* amd64-windows-tdep.c (amd64_windows_find_unwind_info): Use\n\tobjfile::text_section_offset.\n\t* coff-pe-read.c (add_pe_forwarded_sym): Likewise.\n\t* coffread.c (coff_symtab_read): Likewise.\n\t(enter_linenos): Likewise.\n\t(process_coff_symbol): Likewise.\n\t* ctfread.c (get_objfile_text_range): Likewise.\n\t* dtrace-probe.c (dtrace_probe::get_relocated_address):\n\tUse objfile::data_section_offset.\n\t* dwarf2-frame.c (execute_cfa_program): Use\n\tobjfile::text_section_offset.\n\t(dwarf2_frame_find_fde): Likewise.\n\t* dwarf2read.c (create_addrmap_from_index): Likewise.\n\t(create_addrmap_from_aranges): Likewise.\n\t(dw2_find_pc_sect_compunit_symtab): Likewise.\n\t(process_psymtab_comp_unit_reader): Likewise.\n\t(add_partial_symbol): Likewise.\n\t(add_partial_subprogram): Likewise.\n\t(process_full_comp_unit): Likewise.\n\t(read_file_scope): Likewise.\n\t(read_func_scope): Likewise.\n\t(read_lexical_block_scope): Likewise.\n\t(read_call_site_scope): Likewise.\n\t(dwarf2_rnglists_process): Likewise.\n\t(dwarf2_ranges_process): Likewise.\n\t(dwarf2_ranges_read): Likewise.\n\t(dwarf_decode_lines_1): Likewise.\n\t(new_symbol): Likewise.\n\t(dwarf2_fetch_die_loc_sect_off): Likewise.\n\t(dwarf2_per_cu_text_offset): Likewise.\n\t* hppa-bsd-tdep.c (hppabsd_find_global_pointer): Likewise.\n\t* hppa-tdep.c (read_unwind_info): Likewise.\n\t* ia64-tdep.c (ia64_find_unwind_table): Likewise.\n\t* psympriv.h (struct partial_symtab): Likewise.\n\t* psymtab.c (find_pc_sect_psymtab): Likewise.\n\t* solib-svr4.c (enable_break): Likewise.\n\t* stap-probe.c (relocate_address): Use\n\tobjfile::data_section_offset.\n\t* xcoffread.c (enter_line_range): Use\n\tobjfile::text_section_offset.\n\t(read_xcoff_symtab): Likewise.",
    "tree": {
      "sha": "fb20ef8071ffa1e058668d0f823d38da07381c70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb20ef8071ffa1e058668d0f823d38da07381c70"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b3b3bada0d514f8e57a04fd333f05d1da94e2304",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3b3bada0d514f8e57a04fd333f05d1da94e2304",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b3b3bada0d514f8e57a04fd333f05d1da94e2304",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3b3bada0d514f8e57a04fd333f05d1da94e2304/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ab53f3826242df0f051f9a6fa4b2926687205025",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab53f3826242df0f051f9a6fa4b2926687205025",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ab53f3826242df0f051f9a6fa4b2926687205025"
    }
  ],
  "stats": {
    "total": 217,
    "additions": 135,
    "deletions": 82
  },
  "files": [
    {
      "sha": "f0bbaae7799269c455580f561344e6be59e6a4aa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -1,3 +1,54 @@\n+2020-01-23  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* objfiles.h (ALL_OBJFILE_OSECTIONS): Move up.\n+\t(SECT_OFF_DATA): Likewise.\n+\t(SECT_OFF_RODATA): Likewise.\n+\t(SECT_OFF_TEXT): Likewise.\n+\t(SECT_OFF_BSS): Likewise.\n+\t(struct objfile) <text_section_offset, data_section_offset>: New\n+\tmethods.\n+\t* amd64-windows-tdep.c (amd64_windows_find_unwind_info): Use\n+\tobjfile::text_section_offset.\n+\t* coff-pe-read.c (add_pe_forwarded_sym): Likewise.\n+\t* coffread.c (coff_symtab_read): Likewise.\n+\t(enter_linenos): Likewise.\n+\t(process_coff_symbol): Likewise.\n+\t* ctfread.c (get_objfile_text_range): Likewise.\n+\t* dtrace-probe.c (dtrace_probe::get_relocated_address):\n+\tUse objfile::data_section_offset.\n+\t* dwarf2-frame.c (execute_cfa_program): Use\n+\tobjfile::text_section_offset.\n+\t(dwarf2_frame_find_fde): Likewise.\n+\t* dwarf2read.c (create_addrmap_from_index): Likewise.\n+\t(create_addrmap_from_aranges): Likewise.\n+\t(dw2_find_pc_sect_compunit_symtab): Likewise.\n+\t(process_psymtab_comp_unit_reader): Likewise.\n+\t(add_partial_symbol): Likewise.\n+\t(add_partial_subprogram): Likewise.\n+\t(process_full_comp_unit): Likewise.\n+\t(read_file_scope): Likewise.\n+\t(read_func_scope): Likewise.\n+\t(read_lexical_block_scope): Likewise.\n+\t(read_call_site_scope): Likewise.\n+\t(dwarf2_rnglists_process): Likewise.\n+\t(dwarf2_ranges_process): Likewise.\n+\t(dwarf2_ranges_read): Likewise.\n+\t(dwarf_decode_lines_1): Likewise.\n+\t(new_symbol): Likewise.\n+\t(dwarf2_fetch_die_loc_sect_off): Likewise.\n+\t(dwarf2_per_cu_text_offset): Likewise.\n+\t* hppa-bsd-tdep.c (hppabsd_find_global_pointer): Likewise.\n+\t* hppa-tdep.c (read_unwind_info): Likewise.\n+\t* ia64-tdep.c (ia64_find_unwind_table): Likewise.\n+\t* psympriv.h (struct partial_symtab): Likewise.\n+\t* psymtab.c (find_pc_sect_psymtab): Likewise.\n+\t* solib-svr4.c (enable_break): Likewise.\n+\t* stap-probe.c (relocate_address): Use\n+\tobjfile::data_section_offset.\n+\t* xcoffread.c (enter_line_range): Use\n+\tobjfile::text_section_offset.\n+\t(read_xcoff_symtab): Likewise.\n+\n 2020-01-23  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* darwin-nat.c (darwin_nat_target::wait_1): Move `inf`"
    },
    {
      "sha": "d4d79682dd187a9dc37f46d187a2dcbf548210e9",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -953,8 +953,7 @@ amd64_windows_find_unwind_info (struct gdbarch *gdbarch, CORE_ADDR pc,\n   pe = pe_data (sec->objfile->obfd);\n   dir = &pe->pe_opthdr.DataDirectory[PE_EXCEPTION_TABLE];\n \n-  base = (pe->pe_opthdr.ImageBase\n-\t  + objfile->section_offsets[SECT_OFF_TEXT (objfile)]);\n+  base = pe->pe_opthdr.ImageBase + objfile->text_section_offset ();\n   *image_base = base;\n \n   /* Find the entry."
    },
    {
      "sha": "3ecfb3d06134418225a20efb3b0900bc5f0548ac",
      "filename": "gdb/coff-pe-read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/coff-pe-read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/coff-pe-read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coff-pe-read.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -266,7 +266,7 @@ add_pe_forwarded_sym (minimal_symbol_reader &reader,\n      really be relocated properly, but nevertheless we make a stab at\n      it, choosing an approach consistent with the history of this\n      code.  */\n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   reader.record_with_info (qualified_name.c_str (), vma - baseaddr, msymtype,\n \t\t\t   section);"
    },
    {
      "sha": "b682755bbba7d6d458122900da109255de098250",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -920,7 +920,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\t  if (in_source_file)\n \t\t    complete_symtab (filestring,\n \t\t\t\t     (cs->c_value\n-\t\t\t\t      + objfile->section_offsets[SECT_OFF_TEXT (objfile)]),\n+\t\t\t\t      + objfile->text_section_offset ()),\n \t\t\t\t     main_aux.x_scn.x_scnlen);\n \t\t  in_source_file = 0;\n \t\t}\n@@ -1113,7 +1113,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\t\t    NULL, cstk.start_addr,\n \t\t\t    fcn_cs_saved.c_value\n \t\t\t    + fcn_aux_saved.x_sym.x_misc.x_fsize\n-\t\t\t    + objfile->section_offsets[SECT_OFF_TEXT (objfile)]);\n+\t\t\t    + objfile->text_section_offset ());\n \t      within_function = 0;\n \t    }\n \t  break;\n@@ -1122,7 +1122,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t  if (strcmp (cs->c_name, \".bb\") == 0)\n \t    {\n \t      tmpaddr = cs->c_value;\n-\t      tmpaddr += objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+\t      tmpaddr += objfile->text_section_offset ();\n \t      push_context (++depth, tmpaddr);\n \t    }\n \t  else if (strcmp (cs->c_name, \".eb\") == 0)\n@@ -1145,9 +1145,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\t}\n \t      if (*get_local_symbols () && !outermost_context_p ())\n \t\t{\n-\t\t  tmpaddr\n-\t\t    = (cs->c_value\n-\t\t       + objfile->section_offsets[SECT_OFF_TEXT (objfile)]);\n+\t\t  tmpaddr = cs->c_value + objfile->text_section_offset ();\n \t\t  /* Make a block for the local symbols within.  */\n \t\t  finish_block (0, cstk.old_blocks, NULL,\n \t\t\t\tcstk.start_addr, tmpaddr);\n@@ -1439,7 +1437,7 @@ enter_linenos (long file_offset, int first_line,\n       if (L_LNNO32 (&lptr) && L_LNNO32 (&lptr) <= last_line)\n \t{\n \t  CORE_ADDR addr = lptr.l_addr.l_paddr;\n-\t  addr += objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+\t  addr += objfile->text_section_offset ();\n \t  record_line (get_current_subfile (),\n \t\t       first_line + L_LNNO32 (&lptr),\n \t\t       gdbarch_addr_bits_remove (gdbarch, addr));\n@@ -1574,7 +1572,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \n   if (ISFCN (cs->c_type))\n     {\n-      SYMBOL_VALUE (sym) += objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+      SYMBOL_VALUE (sym) += objfile->text_section_offset ();\n       SYMBOL_TYPE (sym) =\n \tlookup_function_type (decode_function_type (cs, cs->c_type,\n \t\t\t\t\t\t    aux, objfile));"
    },
    {
      "sha": "f3c067ee0b3255f037b25068d8af9f1c723c2358",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -1165,7 +1165,7 @@ get_objfile_text_range (struct objfile *of, int *tsize)\n \n   codes = bfd_get_section_by_name (abfd, \".text\");\n   *tsize = codes ? bfd_section_size (codes) : 0;\n-  return of->section_offsets[SECT_OFF_TEXT (of)];\n+  return of->text_section_offset ();\n }\n \n /* Start a symtab for OBJFILE in CTF format.  */"
    },
    {
      "sha": "daa5dcc1e98f1be661ad589157695686b31e0d64",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -685,8 +685,7 @@ dtrace_probe::is_enabled () const\n CORE_ADDR\n dtrace_probe::get_relocated_address (struct objfile *objfile)\n {\n-  return (this->get_address ()\n-\t  + objfile->section_offsets[SECT_OFF_DATA (objfile)]);\n+  return this->get_address () + objfile->data_section_offset ();\n }\n \n /* Implementation of the get_argument_count method.  */"
    },
    {
      "sha": "40eb7f564321d05ec63956cab4331c2fcb3337ab",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -384,7 +384,7 @@ execute_cfa_program (struct dwarf2_fde *fde, const gdb_byte *insn_ptr,\n \t\t\t\t\t   fde->cie->ptr_size, insn_ptr,\n \t\t\t\t\t   &bytes_read, fde->initial_location);\n \t      /* Apply the objfile offset for relocatable objects.  */\n-\t      fs->pc += fde->cie->unit->objfile->section_offsets[SECT_OFF_TEXT (fde->cie->unit->objfile)];\n+\t      fs->pc += fde->cie->unit->objfile->text_section_offset ();\n \t      insn_ptr += bytes_read;\n \t      break;\n \n@@ -1686,7 +1686,7 @@ dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n \tcontinue;\n \n       gdb_assert (!objfile->section_offsets.empty ());\n-      offset = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+      offset = objfile->text_section_offset ();\n \n       gdb_assert (fde_table->num_entries > 0);\n       if (*pc < offset + fde_table->entries[0]->initial_location)"
    },
    {
      "sha": "a494db790a4de976780f9cef667d3f76432d8911",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 20,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -3213,7 +3213,7 @@ create_addrmap_from_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   iter = index->address_table.data ();\n   end = iter + index->address_table.size ();\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   while (iter < end)\n     {\n@@ -3259,7 +3259,7 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *abfd = objfile->obfd;\n   struct gdbarch *gdbarch = get_objfile_arch (objfile);\n-  const CORE_ADDR baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  const CORE_ADDR baseaddr = objfile->text_section_offset ();\n \n   auto_obstack temp_obstack;\n   addrmap *mutable_map = addrmap_create_mutable (&temp_obstack);\n@@ -5281,7 +5281,7 @@ dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n   if (!objfile->partial_symtabs->psymtabs_addrmap)\n     return NULL;\n \n-  CORE_ADDR baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  CORE_ADDR baseaddr = objfile->text_section_offset ();\n   data = (struct dwarf2_per_cu_data *) addrmap_find\n     (objfile->partial_symtabs->psymtabs_addrmap, pc - baseaddr);\n   if (!data)\n@@ -8076,7 +8076,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   /* This must be done before calling dwarf2_build_include_psymtabs.  */\n   pst->dirname = dwarf2_string_attr (comp_unit_die, DW_AT_comp_dir, cu);\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   dwarf2_find_base_address (comp_unit_die, cu);\n \n@@ -8954,7 +8954,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n   const char *actual_name = NULL;\n   CORE_ADDR baseaddr;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   gdb::unique_xmalloc_ptr<char> built_actual_name\n     = partial_die_full_name (pdi, cu);\n@@ -9197,7 +9197,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t      CORE_ADDR this_highpc;\n \t      CORE_ADDR this_lowpc;\n \n-\t      baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+\t      baseaddr = objfile->text_section_offset ();\n \t      this_lowpc\n \t\t= (gdbarch_adjust_dwarf2_addr (gdbarch,\n \t\t\t\t\t       pdi->lowpc + baseaddr)\n@@ -10399,7 +10399,7 @@ process_full_comp_unit (struct dwarf2_per_cu_data *per_cu,\n   struct block *static_block;\n   CORE_ADDR addr;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   /* Clear the list here in case something was left over.  */\n   cu->method_list.clear ();\n@@ -11601,7 +11601,7 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n   CORE_ADDR baseaddr;\n \n   prepare_one_comp_unit (cu, die, cu->language);\n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   get_scope_pc_bounds (die, &lowpc, &highpc, cu);\n \n@@ -13704,7 +13704,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t}\n     }\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   name = dwarf2_name (die, cu);\n \n@@ -13883,7 +13883,7 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n   struct die_info *child_die;\n   CORE_ADDR baseaddr;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   /* Ignore blocks with missing or invalid low and high pc attributes.  */\n   /* ??? Perhaps consider discontiguous blocks defined by DW_AT_ranges\n@@ -13957,7 +13957,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n   int nparams;\n   struct die_info *child_die;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   attr = dwarf2_attr (die, DW_AT_call_return_pc, cu);\n   if (attr == NULL)\n@@ -14354,7 +14354,7 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n     }\n   buffer = dwarf2_per_objfile->rnglists.buffer + offset;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   while (1)\n     {\n@@ -14522,7 +14522,7 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n     }\n   buffer = dwarf2_per_objfile->ranges.buffer + offset;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   while (1)\n     {\n@@ -14600,7 +14600,7 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n   struct gdbarch *gdbarch = get_objfile_arch (objfile);\n-  const CORE_ADDR baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  const CORE_ADDR baseaddr = objfile->text_section_offset ();\n   int low_set = 0;\n   CORE_ADDR low = 0;\n   CORE_ADDR high = 0;\n@@ -21425,7 +21425,7 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n      the line number program).  */\n   bool record_lines_p = !decode_for_pst_p;\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   line_ptr = lh->statement_program_start;\n   line_end = lh->statement_program_end;\n@@ -21853,7 +21853,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \n   int inlined_func = (die->tag == DW_TAG_inlined_subroutine);\n \n-  baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  baseaddr = objfile->text_section_offset ();\n \n   name = dwarf2_name (die, cu);\n   if (name)\n@@ -23651,7 +23651,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n \t  != dwarf2_per_objfile->abstract_to_concrete.end ()))\n     {\n       CORE_ADDR pc = (*get_frame_pc) (baton);\n-      CORE_ADDR baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+      CORE_ADDR baseaddr = objfile->text_section_offset ();\n       struct gdbarch *gdbarch = get_objfile_arch (objfile);\n \n       for (const auto &cand_off\n@@ -25659,9 +25659,7 @@ dwarf2_per_cu_ref_addr_size (struct dwarf2_per_cu_data *per_cu)\n CORE_ADDR\n dwarf2_per_cu_text_offset (struct dwarf2_per_cu_data *per_cu)\n {\n-  struct objfile *objfile = per_cu->dwarf2_per_objfile->objfile;\n-\n-  return objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  return per_cu->dwarf2_per_objfile->objfile->text_section_offset ();\n }\n \n /* Return a type that is a generic pointer type, the size of which matches"
    },
    {
      "sha": "3994167a3ad9ce58535227928af3aa75a6cd99a6",
      "filename": "gdb/hppa-bsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/hppa-bsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/hppa-bsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-bsd-tdep.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -87,7 +87,7 @@ hppabsd_find_global_pointer (struct gdbarch *gdbarch, struct value *function)\n \t\t     we have to do it ourselves.  */\n \t\t  pltgot = extract_unsigned_integer (buf, sizeof buf,\n \t\t\t\t\t\t     byte_order);\n-\t\t  pltgot += sec->objfile->section_offsets[SECT_OFF_TEXT (sec->objfile)];\n+\t\t  pltgot += sec->objfile->text_section_offset ();\n \n \t\t  return pltgot;\n \t\t}"
    },
    {
      "sha": "3730a73af2a0cab5e67b9ee2e3d9c929d98a6e44",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -357,7 +357,7 @@ read_unwind_info (struct objfile *objfile)\n   struct hppa_unwind_info *ui;\n   struct hppa_objfile_private *obj_private;\n \n-  text_offset = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  text_offset = objfile->text_section_offset ();\n   ui = (struct hppa_unwind_info *) obstack_alloc (&objfile->objfile_obstack,\n \t\t\t\t\t   sizeof (struct hppa_unwind_info));\n "
    },
    {
      "sha": "db02882bbe367c13cab27d7fc8957696a7fd9bef",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -2713,7 +2713,7 @@ ia64_find_unwind_table (struct objfile *objfile, unw_word_t ip,\n   ehdr = elf_tdata (bfd)->elf_header;\n   phdr = elf_tdata (bfd)->phdr;\n \n-  load_base = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+  load_base = objfile->text_section_offset ();\n \n   for (i = 0; i < ehdr->e_phnum; ++i)\n     {"
    },
    {
      "sha": "b71a8a9edb8e199ec4492a790b49165bf99b0383",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 40,
      "deletions": 32,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -155,6 +155,37 @@ struct obj_section\n    + bfd_section_size ((s)->the_bfd_section)\t\t\t\t\\\n    + obj_section_offset (s))\n \n+#define ALL_OBJFILE_OSECTIONS(objfile, osect)\t\\\n+  for (osect = objfile->sections; osect < objfile->sections_end; osect++) \\\n+    if (osect->the_bfd_section == NULL)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\t/* Nothing.  */\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\n+\n+#define SECT_OFF_DATA(objfile) \\\n+     ((objfile->sect_index_data == -1) \\\n+      ? (internal_error (__FILE__, __LINE__, \\\n+\t\t\t _(\"sect_index_data not initialized\")), -1)\t\\\n+      : objfile->sect_index_data)\n+\n+#define SECT_OFF_RODATA(objfile) \\\n+     ((objfile->sect_index_rodata == -1) \\\n+      ? (internal_error (__FILE__, __LINE__, \\\n+\t\t\t _(\"sect_index_rodata not initialized\")), -1)\t\\\n+      : objfile->sect_index_rodata)\n+\n+#define SECT_OFF_TEXT(objfile) \\\n+     ((objfile->sect_index_text == -1) \\\n+      ? (internal_error (__FILE__, __LINE__, \\\n+\t\t\t _(\"sect_index_text not initialized\")), -1)\t\\\n+      : objfile->sect_index_text)\n+\n+/* Sometimes the .bss section is missing from the objfile, so we don't\n+   want to die here.  Let the users of SECT_OFF_BSS deal with an\n+   uninitialized section index.  */\n+#define SECT_OFF_BSS(objfile) (objfile)->sect_index_bss\n+\n /* The \"objstats\" structure provides a place for gdb to record some\n    interesting information about its internal state at runtime, on a\n    per objfile basis, such as information about the number of symbols\n@@ -492,6 +523,15 @@ struct objfile\n     return separate_debug_range (this);\n   }\n \n+  CORE_ADDR text_section_offset () const\n+  {\n+    return section_offsets[SECT_OFF_TEXT (this)];\n+  }\n+\n+  CORE_ADDR data_section_offset () const\n+  {\n+    return section_offsets[SECT_OFF_DATA (this)];\n+  }\n \n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n@@ -737,38 +777,6 @@ extern void default_iterate_over_objfiles_in_search_order\n   (struct gdbarch *gdbarch,\n    iterate_over_objfiles_in_search_order_cb_ftype *cb,\n    void *cb_data, struct objfile *current_objfile);\n-\f\n-\n-#define ALL_OBJFILE_OSECTIONS(objfile, osect)\t\\\n-  for (osect = objfile->sections; osect < objfile->sections_end; osect++) \\\n-    if (osect->the_bfd_section == NULL)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t/* Nothing.  */\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\n-\n-#define SECT_OFF_DATA(objfile) \\\n-     ((objfile->sect_index_data == -1) \\\n-      ? (internal_error (__FILE__, __LINE__, \\\n-\t\t\t _(\"sect_index_data not initialized\")), -1)\t\\\n-      : objfile->sect_index_data)\n-\n-#define SECT_OFF_RODATA(objfile) \\\n-     ((objfile->sect_index_rodata == -1) \\\n-      ? (internal_error (__FILE__, __LINE__, \\\n-\t\t\t _(\"sect_index_rodata not initialized\")), -1)\t\\\n-      : objfile->sect_index_rodata)\n-\n-#define SECT_OFF_TEXT(objfile) \\\n-     ((objfile->sect_index_text == -1) \\\n-      ? (internal_error (__FILE__, __LINE__, \\\n-\t\t\t _(\"sect_index_text not initialized\")), -1)\t\\\n-      : objfile->sect_index_text)\n-\n-/* Sometimes the .bss section is missing from the objfile, so we don't\n-   want to die here.  Let the users of SECT_OFF_BSS deal with an\n-   uninitialized section index.  */\n-#define SECT_OFF_BSS(objfile) (objfile)->sect_index_bss\n \n /* Reset the per-BFD storage area on OBJ.  */\n "
    },
    {
      "sha": "be03465992de58613e9f922a9038c6b53aa550fc",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -119,13 +119,13 @@ struct partial_symtab\n   /* Return the relocated low text address of this partial_symtab.  */\n   CORE_ADDR text_low (struct objfile *objfile) const\n   {\n-    return m_text_low + objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+    return m_text_low + objfile->text_section_offset ();\n   }\n \n   /* Return the relocated high text address of this partial_symtab.  */\n   CORE_ADDR text_high (struct objfile *objfile) const\n   {\n-    return m_text_high + objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+    return m_text_high + objfile->text_section_offset ();\n   }\n \n   /* Set the low text address of this partial_symtab.  */"
    },
    {
      "sha": "18580f500b58025f870f074e2afa905764228d54",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -316,7 +316,7 @@ find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n   if (objfile->partial_symtabs->psymtabs != NULL\n       && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n     {\n-      CORE_ADDR baseaddr = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+      CORE_ADDR baseaddr = objfile->text_section_offset ();\n \n       struct partial_symtab *pst\n \t= ((struct partial_symtab *)"
    },
    {
      "sha": "38c832f8f5a141acbcd724d60008e3c71d71e747",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -2273,7 +2273,7 @@ enable_break (struct svr4_info *info, int from_tty)\n \t  CORE_ADDR load_addr;\n \n \t  tmp_bfd = os->objfile->obfd;\n-\t  load_addr = os->objfile->section_offsets[SECT_OFF_TEXT (os->objfile)];\n+\t  load_addr = os->objfile->text_section_offset ();\n \n \t  interp_sect = bfd_get_section_by_name (tmp_bfd, \".text\");\n \t  if (interp_sect)"
    },
    {
      "sha": "1a5ba5a1b3e090575ff1d45ea94dbe19e9728b2e",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -1290,7 +1290,7 @@ stap_probe::parse_arguments (struct gdbarch *gdbarch)\n static CORE_ADDR\n relocate_address (CORE_ADDR address, struct objfile *objfile)\n {\n-  return address + objfile->section_offsets[SECT_OFF_DATA (objfile)];\n+  return address + objfile->data_section_offset ();\n }\n \n /* Implementation of the get_relocated_address method.  */"
    },
    {
      "sha": "66ace43051a8dd26d694e22da022fa66ec9fe0f9",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3b3bada0d514f8e57a04fd333f05d1da94e2304/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=b3b3bada0d514f8e57a04fd333f05d1da94e2304",
      "patch": "@@ -865,7 +865,7 @@ enter_line_range (struct subfile *subfile, unsigned beginoffset,\n       addr = (int_lnno.l_lnno\n \t      ? int_lnno.l_addr.l_paddr\n \t      : read_symbol_nvalue (int_lnno.l_addr.l_symndx));\n-      addr += objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+      addr += objfile->text_section_offset ();\n \n       if (addr < startaddr || (endaddr && addr >= endaddr))\n \treturn;\n@@ -1233,7 +1233,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t\t\t}\n \n \t\t      file_start_addr =\n-\t\t\tcs->c_value + objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+\t\t\tcs->c_value + objfile->text_section_offset ();\n \t\t      file_end_addr = file_start_addr + CSECT_LEN (&main_aux);\n \n \t\t      if (cs->c_name && (cs->c_name[0] == '.' || cs->c_name[0] == '@'))\n@@ -1355,7 +1355,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \tcase C_FCN:\n \t  if (strcmp (cs->c_name, \".bf\") == 0)\n \t    {\n-\t      CORE_ADDR off = objfile->section_offsets[SECT_OFF_TEXT (objfile)];\n+\t      CORE_ADDR off = objfile->text_section_offset ();\n \n \t      bfd_coff_swap_aux_in (abfd, raw_auxptr, cs->c_type, cs->c_sclass,\n \t\t\t\t    0, cs->c_naux, &main_aux);\n@@ -1399,7 +1399,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t\t\t    NULL, cstk.start_addr,\n \t\t\t    (fcn_cs_saved.c_value\n \t\t\t     + fcn_aux_saved.x_sym.x_misc.x_fsize\n-\t\t\t     + objfile->section_offsets[SECT_OFF_TEXT (objfile)]));\n+\t\t\t     + objfile->text_section_offset ()));\n \t      within_function = 0;\n \t    }\n \t  break;\n@@ -1466,7 +1466,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t      depth++;\n \t      newobj = push_context (depth,\n \t\t\t\t  (cs->c_value\n-\t\t\t\t   + objfile->section_offsets[SECT_OFF_TEXT (objfile)]));\n+\t\t\t\t   + objfile->text_section_offset ()));\n \t    }\n \t  else if (strcmp (cs->c_name, \".eb\") == 0)\n \t    {\n@@ -1488,7 +1488,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t\t\t\tcstk.old_blocks, NULL,\n \t\t\t\tcstk.start_addr,\n \t\t\t\t(cs->c_value\n-\t\t\t\t + objfile->section_offsets[SECT_OFF_TEXT (objfile)]));\n+\t\t\t\t + objfile->text_section_offset ()));\n \t\t}\n \t      *get_local_symbols () = cstk.locals;\n \t    }"
    }
  ]
}