{
  "sha": "d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDc4NzBmNjMwNGNjNjJiZDNhMzBlYmM5Yzk4ZGNlZmYyYmI1MGZiYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-15T05:59:47Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-15T06:06:53Z"
    },
    "message": "display_debug_names\n\n\t* dwarf.c (display_debug_names): Complain when header length is\n\ttoo small.  Avoid pointer UB.  Sanity check augmentation string,\n\tCU table, TU table and foreign TU table sizes.",
    "tree": {
      "sha": "15fb0c82762c027e51b247fc23fd569628f02515",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15fb0c82762c027e51b247fc23fd569628f02515"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5897a389841a67317309213b95bb503d43fbf16c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5897a389841a67317309213b95bb503d43fbf16c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5897a389841a67317309213b95bb503d43fbf16c"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 35,
    "deletions": 15
  },
  "files": [
    {
      "sha": "d3c6a390dc3a339d1975d5161010729b015a043b",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (display_debug_names): Complain when header length is\n+\ttoo small.  Avoid pointer UB.  Sanity check augmentation string,\n+\tCU table, TU table and foreign TU table sizes.\n+\n 2021-05-15  Alan Modra  <amodra@gmail.com>\n \n \t* dwarf.c (display_debug_frames): Delete initial_length_size."
    },
    {
      "sha": "d06dd4bbbf9c261dece603c7460f741204a21ae8",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 29,
      "deletions": 15,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=d7870f6304cc62bd3a30ebc9c98dceff2bb50fbb",
      "patch": "@@ -9571,12 +9571,12 @@ display_debug_names (struct dwarf_section *section, void *file)\n       unsigned int offset_size;\n       uint16_t dwarf_version, padding;\n       uint32_t comp_unit_count, local_type_unit_count, foreign_type_unit_count;\n-      uint32_t bucket_count, name_count, abbrev_table_size;\n+      uint64_t bucket_count, name_count, abbrev_table_size;\n       uint32_t augmentation_string_size;\n       unsigned int i;\n-      unsigned long sec_off;\n       bool augmentation_printable;\n       const char *augmentation_string;\n+      size_t total;\n \n       unit_start = hdrptr;\n \n@@ -9591,18 +9591,18 @@ display_debug_names (struct dwarf_section *section, void *file)\n \t}\n       else\n \toffset_size = 4;\n-      unit_end = hdrptr + unit_length;\n \n-      sec_off = hdrptr - section->start;\n-      if (sec_off + unit_length < sec_off\n-\t  || sec_off + unit_length > section->size)\n+      if (unit_length > (size_t) (section_end - hdrptr)\n+\t  || unit_length < 2 + 2 + 4 * 7)\n \t{\n+\ttoo_short:\n \t  warn (_(\"Debug info is corrupted, %s header at %#lx has length %s\\n\"),\n \t\tsection->name,\n \t\t(unsigned long) (unit_start - section->start),\n \t\tdwarf_vmatoa (\"x\", unit_length));\n \t  return 0;\n \t}\n+      unit_end = hdrptr + unit_length;\n \n       /* Get and check the version number.  */\n       SAFE_BYTE_GET_AND_INC (dwarf_version, hdrptr, 2, unit_end);\n@@ -9640,6 +9640,8 @@ display_debug_names (struct dwarf_section *section, void *file)\n \t\taugmentation_string_size);\n \t  augmentation_string_size += (-augmentation_string_size) & 3;\n \t}\n+      if (augmentation_string_size > (size_t) (unit_end - hdrptr))\n+\tgoto too_short;\n \n       printf (_(\"Augmentation string:\"));\n \n@@ -9669,6 +9671,9 @@ display_debug_names (struct dwarf_section *section, void *file)\n       putchar ('\\n');\n \n       printf (_(\"CU table:\\n\"));\n+      if (_mul_overflow (comp_unit_count, offset_size, &total)\n+\t  || total > (size_t) (unit_end - hdrptr))\n+\tgoto too_short;\n       for (i = 0; i < comp_unit_count; i++)\n \t{\n \t  uint64_t cu_offset;\n@@ -9679,6 +9684,9 @@ display_debug_names (struct dwarf_section *section, void *file)\n       putchar ('\\n');\n \n       printf (_(\"TU table:\\n\"));\n+      if (_mul_overflow (local_type_unit_count, offset_size, &total)\n+\t  || total > (size_t) (unit_end - hdrptr))\n+\tgoto too_short;\n       for (i = 0; i < local_type_unit_count; i++)\n \t{\n \t  uint64_t tu_offset;\n@@ -9689,6 +9697,9 @@ display_debug_names (struct dwarf_section *section, void *file)\n       putchar ('\\n');\n \n       printf (_(\"Foreign TU table:\\n\"));\n+      if (_mul_overflow (foreign_type_unit_count, 8, &total)\n+\t  || total > (size_t) (unit_end - hdrptr))\n+\tgoto too_short;\n       for (i = 0; i < foreign_type_unit_count; i++)\n \t{\n \t  uint64_t signature;\n@@ -9700,6 +9711,18 @@ display_debug_names (struct dwarf_section *section, void *file)\n \t}\n       putchar ('\\n');\n \n+      uint64_t xtra = (bucket_count * sizeof (uint32_t)\n+\t\t       + name_count * (sizeof (uint32_t) + 2 * offset_size)\n+\t\t       + abbrev_table_size);\n+      if (xtra > (size_t) (unit_end - hdrptr))\n+\t{\n+\t  warn (_(\"Entry pool offset (0x%lx) exceeds unit size 0x%lx \"\n+\t\t  \"for unit 0x%lx in the debug_names\\n\"),\n+\t\t(long) xtra,\n+\t\t(long) (unit_end - unit_start),\n+\t\t(long) (unit_start - section->start));\n+\t  return 0;\n+\t}\n       const uint32_t *const hash_table_buckets = (uint32_t *) hdrptr;\n       hdrptr += bucket_count * sizeof (uint32_t);\n       const uint32_t *const hash_table_hashes = (uint32_t *) hdrptr;\n@@ -9712,15 +9735,6 @@ display_debug_names (struct dwarf_section *section, void *file)\n       hdrptr += abbrev_table_size;\n       const unsigned char *const abbrev_table_end = hdrptr;\n       unsigned char *const entry_pool = hdrptr;\n-      if (hdrptr > unit_end)\n-\t{\n-\t  warn (_(\"Entry pool offset (0x%lx) exceeds unit size 0x%lx \"\n-\t\t  \"for unit 0x%lx in the debug_names\\n\"),\n-\t\t(long) (hdrptr - section->start),\n-\t\t(long) (unit_end - section->start),\n-\t\t(long) (unit_start - section->start));\n-\t  return 0;\n-\t}\n \n       size_t buckets_filled = 0;\n       size_t bucketi;"
    }
  ]
}