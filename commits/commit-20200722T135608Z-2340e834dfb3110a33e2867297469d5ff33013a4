{
  "sha": "2340e834dfb3110a33e2867297469d5ff33013a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjM0MGU4MzRkZmIzMTEwYTMzZTI4NjcyOTc0NjlkNWZmMzMwMTNhNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-22T13:56:08Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:08Z"
    },
    "message": "gdb/jit: apply minor cleanup and modernization\n\ngdb/ChangeLog:\n2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n\t    Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* jit.c (jit_read_descriptor): Define the descriptor address once,\n\tuse twice.\n\t(jit_breakpoint_deleted): Move the declaration of the loop variable\n\t`iter` into the loop header.\n\t(jit_breakpoint_re_set_internal): Move the declaration of the local\n\tvariable `objf_data` to the first point of definition.\n\t(jit_event_handler): Move the declaration of local variables\n\t`code_entry`, `entry_addr`, and `objf` to their first point of use.\n\tRename `objf` to `jited`.",
    "tree": {
      "sha": "e2c704f308b18475097d7013055efdbf04f35e08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e2c704f308b18475097d7013055efdbf04f35e08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2340e834dfb3110a33e2867297469d5ff33013a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2340e834dfb3110a33e2867297469d5ff33013a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2340e834dfb3110a33e2867297469d5ff33013a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2340e834dfb3110a33e2867297469d5ff33013a4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c1072906f1e55711e5f6010c209a472fda80cf97",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1072906f1e55711e5f6010c209a472fda80cf97",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c1072906f1e55711e5f6010c209a472fda80cf97"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 40,
    "deletions": 26
  },
  "files": [
    {
      "sha": "77fee925b14d75312bdf51743242961853de894a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2340e834dfb3110a33e2867297469d5ff33013a4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2340e834dfb3110a33e2867297469d5ff33013a4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2340e834dfb3110a33e2867297469d5ff33013a4",
      "patch": "@@ -1,3 +1,16 @@\n+2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\t    Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* jit.c (jit_read_descriptor): Define the descriptor address once,\n+\tuse twice.\n+\t(jit_breakpoint_deleted): Move the declaration of the loop variable\n+\t`iter` into the loop header.\n+\t(jit_breakpoint_re_set_internal): Move the declaration of the local\n+\tvariable `objf_data` to the first point of definition.\n+\t(jit_event_handler): Move the declaration of local variables\n+\t`code_entry`, `entry_addr`, and `objf` to their first point of use.\n+\tRename `objf` to `jited`.\n+\n 2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.h (struct jiter_objfile_data) <jiter_objfile_data, objfile>:"
    },
    {
      "sha": "4fe2acc2f944043ee9b5d34206bf971d36839717",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 27,
      "deletions": 26,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2340e834dfb3110a33e2867297469d5ff33013a4/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2340e834dfb3110a33e2867297469d5ff33013a4/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=2340e834dfb3110a33e2867297469d5ff33013a4",
      "patch": "@@ -289,11 +289,12 @@ jit_read_descriptor (gdbarch *gdbarch,\n   jiter_objfile_data *objf_data = jiter->jiter_data.get ();\n   gdb_assert (objf_data != nullptr);\n \n+  CORE_ADDR addr = MSYMBOL_VALUE_ADDRESS (jiter, objf_data->descriptor);\n+\n   if (jit_debug)\n     fprintf_unfiltered (gdb_stdlog,\n \t\t\t\"jit_read_descriptor, descriptor_addr = %s\\n\",\n-\t\t\tpaddress (gdbarch, MSYMBOL_VALUE_ADDRESS (jiter,\n-\t\t\t\t\t\t\t\t  objf_data->descriptor)));\n+\t\t\tpaddress (gdbarch, addr));\n \n   /* Figure out how big the descriptor is on the remote and how to read it.  */\n   ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n@@ -302,9 +303,7 @@ jit_read_descriptor (gdbarch *gdbarch,\n   desc_buf = (gdb_byte *) alloca (desc_size);\n \n   /* Read the descriptor.  */\n-  err = target_read_memory (MSYMBOL_VALUE_ADDRESS (jiter,\n-\t\t\t\t\t\t   objf_data->descriptor),\n-\t\t\t    desc_buf, desc_size);\n+  err = target_read_memory (addr, desc_buf, desc_size);\n   if (err)\n     {\n       printf_unfiltered (_(\"Unable to read JIT descriptor from \"\n@@ -867,12 +866,10 @@ jit_find_objf_with_entry_addr (CORE_ADDR entry_addr)\n static void\n jit_breakpoint_deleted (struct breakpoint *b)\n {\n-  struct bp_location *iter;\n-\n   if (b->type != bp_jit_event)\n     return;\n \n-  for (iter = b->loc; iter != NULL; iter = iter->next)\n+  for (bp_location *iter = b->loc; iter != nullptr; iter = iter->next)\n     {\n       for (objfile *objf : iter->pspace->objfiles ())\n \t{\n@@ -894,8 +891,6 @@ jit_breakpoint_deleted (struct breakpoint *b)\n static void\n jit_breakpoint_re_set_internal (struct gdbarch *gdbarch, program_space *pspace)\n {\n-  jiter_objfile_data *objf_data;\n-\n   for (objfile *the_objfile : pspace->objfiles ())\n     {\n       /* Lookup the registration symbol.  If it is missing, then we\n@@ -912,7 +907,8 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch, program_space *pspace)\n \t  || BMSYMBOL_VALUE_ADDRESS (desc_symbol) == 0)\n \tcontinue;\n \n-      objf_data = get_jiter_objfile_data (reg_symbol.objfile);\n+      jiter_objfile_data *objf_data\n+\t= get_jiter_objfile_data (reg_symbol.objfile);\n       objf_data->register_code = reg_symbol.minsym;\n       objf_data->descriptor = desc_symbol.minsym;\n \n@@ -1265,9 +1261,6 @@ void\n jit_event_handler (gdbarch *gdbarch, objfile *jiter)\n {\n   struct jit_descriptor descriptor;\n-  struct jit_code_entry code_entry;\n-  CORE_ADDR entry_addr;\n-  struct objfile *objf;\n \n   /* If we get a JIT breakpoint event for this objfile, it is necessarily a\n      JITer.  */\n@@ -1276,27 +1269,35 @@ jit_event_handler (gdbarch *gdbarch, objfile *jiter)\n   /* Read the descriptor from remote memory.  */\n   if (!jit_read_descriptor (gdbarch, &descriptor, jiter))\n     return;\n-  entry_addr = descriptor.relevant_entry;\n+  CORE_ADDR entry_addr = descriptor.relevant_entry;\n \n   /* Do the corresponding action.  */\n   switch (descriptor.action_flag)\n     {\n     case JIT_NOACTION:\n       break;\n+\n     case JIT_REGISTER:\n-      jit_read_code_entry (gdbarch, entry_addr, &code_entry);\n-      jit_register_code (gdbarch, entry_addr, &code_entry);\n-      break;\n+      {\n+\tjit_code_entry code_entry;\n+\tjit_read_code_entry (gdbarch, entry_addr, &code_entry);\n+\tjit_register_code (gdbarch, entry_addr, &code_entry);\n+\tbreak;\n+      }\n+\n     case JIT_UNREGISTER:\n-      objf = jit_find_objf_with_entry_addr (entry_addr);\n-      if (objf == NULL)\n-\tprintf_unfiltered (_(\"Unable to find JITed code \"\n-\t\t\t     \"entry at address: %s\\n\"),\n-\t\t\t   paddress (gdbarch, entry_addr));\n-      else\n-\tobjf->unlink ();\n+      {\n+\tobjfile *jited = jit_find_objf_with_entry_addr (entry_addr);\n+\tif (jited == nullptr)\n+\t  printf_unfiltered (_(\"Unable to find JITed code \"\n+\t\t\t       \"entry at address: %s\\n\"),\n+\t\t\t     paddress (gdbarch, entry_addr));\n+\telse\n+\t  jited->unlink ();\n+\n+\tbreak;\n+      }\n \n-      break;\n     default:\n       error (_(\"Unknown action_flag value in JIT descriptor!\"));\n       break;"
    }
  ]
}