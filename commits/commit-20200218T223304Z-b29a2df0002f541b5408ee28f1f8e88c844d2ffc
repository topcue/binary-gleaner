{
  "sha": "b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI5YTJkZjAwMDJmNTQxYjU0MDhlZTI4ZjFmOGU4OGM4NDRkMmZmYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:30:21Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:33:04Z"
    },
    "message": "gdb: print unknown part of flag enum in hex\n\nWhen we print the \"unknown\" part of a flag enum, it is printed in\ndecimal.  I think it would be more useful if it was printed in hex, as\nit helps to determine which bits are set more than a decimal value.\n\ngdb/ChangeLog:\n\n\t* valprint.c (generic_val_print_enum_1): Print unknown part of\n\tflag enum in hex.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/printcmds.exp (test_print_enums): Expect hex values\n\tfor \"unknown\".",
    "tree": {
      "sha": "14577b1a137631205d628533cd922b8d58d7cf76",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/14577b1a137631205d628533cd922b8d58d7cf76"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6740f0cc3bd1530e4aeefe856d9cfe5c0ba2098a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6740f0cc3bd1530e4aeefe856d9cfe5c0ba2098a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6740f0cc3bd1530e4aeefe856d9cfe5c0ba2098a"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 14,
    "deletions": 4
  },
  "files": [
    {
      "sha": "cc47e2d07472fc98abc8252e9c3f697a02035680",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* valprint.c (generic_val_print_enum_1): Print unknown part of\n+\tflag enum in hex.\n+\n 2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c (update_enumeration_type_from_children): Allow"
    },
    {
      "sha": "087714b0729627b6d81b7b1a3c48d69228e3af6b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/printcmds.exp (test_print_enums): Expect hex values\n+\tfor \"unknown\".\n+\n 2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.base/printcmds.c (enum flag_enum): Add FE_TWO_LEGACY"
    },
    {
      "sha": "d6f5c75650bfa3cc7de4a0c6d6438838fb665a66",
      "filename": "gdb/testsuite/gdb.base/printcmds.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/testsuite/gdb.base/printcmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/testsuite/gdb.base/printcmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.exp?ref=b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "patch": "@@ -743,10 +743,10 @@ proc test_print_enums {} {\n     gdb_test \"print (enum flag_enum) 0x0\" [string_to_regexp \" = FE_NONE\"]\n \n     # Print a flag enum with value 0, where no enumerator has value 0.\n-    gdb_test \"print flag_enum_without_zero\" [string_to_regexp \" = (unknown: 0)\"]\n+    gdb_test \"print flag_enum_without_zero\" [string_to_regexp \" = (unknown: 0x0)\"]\n \n     # Print a flag enum with unknown bits set.\n-    gdb_test \"print (enum flag_enum) 0xf1\" [string_to_regexp \" = (FE_ONE | unknown: 240)\"]\n+    gdb_test \"print (enum flag_enum) 0xf1\" [string_to_regexp \" = (FE_ONE | unknown: 0xf0)\"]\n \n     # Test printing an enum not considered a \"flag enum\" (because one of its\n     # enumerators has multiple bits set)."
    },
    {
      "sha": "67049e74b369cfad42fc9ef05e539c0bd08d046b",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b29a2df0002f541b5408ee28f1f8e88c844d2ffc/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=b29a2df0002f541b5408ee28f1f8e88c844d2ffc",
      "patch": "@@ -660,8 +660,8 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t{\n \t  if (!first)\n \t    fputs_filtered (\" | \", stream);\n-\t  fputs_filtered (\"unknown: \", stream);\n-\t  print_longest (stream, 'd', 0, val);\n+\t  fputs_filtered (\"unknown: 0x\", stream);\n+\t  print_longest (stream, 'x', 0, val);\n \t}\n \n       fputs_filtered (\")\", stream);"
    }
  ]
}