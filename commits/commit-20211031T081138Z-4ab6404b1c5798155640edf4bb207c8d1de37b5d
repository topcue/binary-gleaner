{
  "sha": "4ab6404b1c5798155640edf4bb207c8d1de37b5d",
  "node_id": "C_kwDOANOeidoAKDRhYjY0MDRiMWM1Nzk4MTU1NjQwZWRmNGJiMjA3YzhkMWRlMzdiNWQ",
  "commit": {
    "author": {
      "name": "Orgad Shaneh",
      "email": "orgads@gmail.com",
      "date": "2021-10-29T06:42:15Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-10-31T08:11:38Z"
    },
    "message": "sim: erc32: fix signedness compatibility and redefinition warnings",
    "tree": {
      "sha": "b8eea26be95ff413f199ba86630d2368adff9669",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8eea26be95ff413f199ba86630d2368adff9669"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4ab6404b1c5798155640edf4bb207c8d1de37b5d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ab6404b1c5798155640edf4bb207c8d1de37b5d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4ab6404b1c5798155640edf4bb207c8d1de37b5d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ab6404b1c5798155640edf4bb207c8d1de37b5d/comments",
  "author": {
    "login": "orgads",
    "id": 1246544,
    "node_id": "MDQ6VXNlcjEyNDY1NDQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1246544?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/orgads",
    "html_url": "https://github.com/orgads",
    "followers_url": "https://api.github.com/users/orgads/followers",
    "following_url": "https://api.github.com/users/orgads/following{/other_user}",
    "gists_url": "https://api.github.com/users/orgads/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/orgads/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/orgads/subscriptions",
    "organizations_url": "https://api.github.com/users/orgads/orgs",
    "repos_url": "https://api.github.com/users/orgads/repos",
    "events_url": "https://api.github.com/users/orgads/events{/privacy}",
    "received_events_url": "https://api.github.com/users/orgads/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "65dcce8f793757be996377b5a15453b4bdf5f87b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/65dcce8f793757be996377b5a15453b4bdf5f87b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/65dcce8f793757be996377b5a15453b4bdf5f87b"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 27,
    "deletions": 25
  },
  "files": [
    {
      "sha": "68136e46c303d2170ab3c8db7503c1a070f3cdeb",
      "filename": "sim/erc32/erc32.c",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/erc32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/erc32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/erc32.c?ref=4ab6404b1c5798155640edf4bb207c8d1de37b5d",
      "patch": "@@ -292,8 +292,7 @@ static uint32\tgpt_counter_read (void);\n static void\tgpt_scaler_set (uint32 val);\n static void\tgpt_reload_set (uint32 val);\n static void\ttimer_ctrl (uint32 val);\n-static unsigned char *\n-\t\tget_mem_ptr (uint32 addr, uint32 size);\n+static void *\tget_mem_ptr (uint32 addr, uint32 size);\n static void\tstore_bytes (unsigned char *mem, uint32 waddr,\n \t\t\tuint32 *data, int sz, int32 *ws);\n \n@@ -1541,7 +1540,7 @@ store_bytes (unsigned char *mem, uint32 waddr, uint32 *data, int32 sz,\n /* Memory emulation */\n \n int\n-memory_iread (uint32 addr, uint32 *data, int32 *ws)\n+memory_iread (uint32 addr, uint32 *data, uint32 *ws)\n {\n     uint32          asi;\n     if ((addr >= mem_ramstart) && (addr < (mem_ramstart + mem_ramsz))) {\n@@ -1566,7 +1565,7 @@ memory_iread (uint32 addr, uint32 *data, int32 *ws)\n }\n \n int\n-memory_read(int32 asi, uint32 addr, uint32 *data, int32 sz, int32 *ws)\n+memory_read(int32 asi, uint32 addr, void *data, int32 sz, int32 *ws)\n {\n     int32           mexc;\n \n@@ -1607,7 +1606,7 @@ memory_read(int32 asi, uint32 addr, uint32 *data, int32 sz, int32 *ws)\n \t} else if ((addr >= 0x10000000) && \n \t\t   (addr < (0x10000000 + (512 << (mec_iocr & 0x0f)))) &&\n \t\t   (mec_iocr & 0x10))  {\n-\t    *data = erareg;\n+\t    memcpy (data, &erareg, 4);\n \t    return 0;\n \t}\n \t\n@@ -1739,7 +1738,7 @@ memory_write(int32 asi, uint32 addr, uint32 *data, int32 sz, int32 *ws)\n     return 1;\n }\n \n-static unsigned char  *\n+static void  *\n get_mem_ptr(uint32 addr, uint32 size)\n {\n     if ((addr + size) < ROM_SZ) {\n@@ -1755,27 +1754,27 @@ get_mem_ptr(uint32 addr, uint32 size)\n     }\n #endif\n \n-    return (char *) -1;\n+    return (void *) -1;\n }\n \n int\n-sis_memory_write(uint32 addr, const unsigned char *data, uint32 length)\n+sis_memory_write(uint32 addr, const void *data, uint32 length)\n {\n-    char           *mem;\n+    void           *mem;\n \n-    if ((mem = get_mem_ptr(addr, length)) == ((char *) -1))\n+    if ((mem = get_mem_ptr(addr, length)) == ((void *) -1))\n \treturn 0;\n \n     memcpy(mem, data, length);\n     return length;\n }\n \n int\n-sis_memory_read(uint32 addr, char *data, uint32 length)\n+sis_memory_read(uint32 addr, void *data, uint32 length)\n {\n     char           *mem;\n \n-    if ((mem = get_mem_ptr(addr, length)) == ((char *) -1))\n+    if ((mem = get_mem_ptr(addr, length)) == ((void *) -1))\n \treturn 0;\n \n     memcpy(data, mem, length);"
    },
    {
      "sha": "1858813f000ea7536222c0eb6283a51445348f37",
      "filename": "sim/erc32/exec.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/exec.c?ref=4ab6404b1c5798155640edf4bb207c8d1de37b5d",
      "patch": "@@ -395,11 +395,11 @@ dispatch_instruction(struct pstate *sregs)\n \n     uint32          cwp, op, op2, op3, asi, rd, cond, rs1,\n                     rs2;\n-    uint32          ldep, icc;\n-    int32           operand1, operand2, *rdd, result, eicc,\n+    uint32          ldep, icc, data, *rdd;\n+    int32           operand1, operand2, result, eicc,\n                     new_cwp;\n-    int32           pc, npc, data, address, ws, mexc, fcc;\n-    int32\t    ddata[2];\n+    int32           pc, npc, address, ws, mexc, fcc;\n+    uint32\t    ddata[2];\n \n     sregs->ninst++;\n     cwp = ((sregs->psr & PSR_CWP) << 4);\n@@ -1096,7 +1096,7 @@ dispatch_instruction(struct pstate *sregs)\n \t\t    break;\n \t\t}\n \t\tsregs->psr = (sregs->psr & 0xff000000) |\n-\t\t\t(rs1 ^ operand2) & 0x00f03fff;\n+\t\t\t((rs1 ^ operand2) & 0x00f03fff);\n \t\tbreak;\n \t    case WRWIM:\n \t\tif (!(sregs->psr & PSR_S)) {\n@@ -1528,7 +1528,7 @@ dispatch_instruction(struct pstate *sregs)\n \t\tif (sregs->frd == rd)\n \t\t    sregs->fhold += (sregs->ftime - ebase.simtime);\n \t    }\n-\t    mexc = memory_write(asi, address, &sregs->fsi[rd], 2, &ws);\n+\t    mexc = memory_write(asi, address, (uint32 *)&sregs->fsi[rd], 2, &ws);\n \t    sregs->hold += ws;\n \t    if (mexc) {\n \t\tsregs->trap = TRAP_DEXC;\n@@ -1548,7 +1548,7 @@ dispatch_instruction(struct pstate *sregs)\n \t\tif ((sregs->frd == rd) || (sregs->frd + 1 == rd))\n \t\t    sregs->fhold += (sregs->ftime - ebase.simtime);\n \t    }\n-\t    mexc = memory_write(asi, address, &sregs->fsi[rd], 3, &ws);\n+\t    mexc = memory_write(asi, address, (uint32 *)&sregs->fsi[rd], 3, &ws);\n \t    sregs->hold += ws;\n \t    sregs->icnt = T_STD;\n #ifdef STAT"
    },
    {
      "sha": "d168a31b2cd74598341b15a93b3b9fb5a8f60e28",
      "filename": "sim/erc32/func.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/func.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/func.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/func.c?ref=4ab6404b1c5798155640edf4bb207c8d1de37b5d",
      "patch": "@@ -139,7 +139,7 @@ set_regi(struct pstate *sregs, int32 reg, uint32 rval)\n }\n \n void\n-get_regi(struct pstate * sregs, int32 reg, char *buf)\n+get_regi(struct pstate * sregs, int32 reg, unsigned char *buf)\n {\n     uint32          cwp;\n     uint32          rval = 0;\n@@ -996,7 +996,9 @@ sys_halt(void)\n #include \"libiberty.h\"\n #include \"bfd.h\"\n \n+#ifndef min\n #define min(A, B) (((A) < (B)) ? (A) : (B))\n+#endif\n #define LOAD_ADDRESS 0\n \n int"
    },
    {
      "sha": "98cb9ccc33dc6a54a0811a32b26ac95cdae79fc1",
      "filename": "sim/erc32/sis.h",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/sis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab6404b1c5798155640edf4bb207c8d1de37b5d/sim/erc32/sis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/erc32/sis.h?ref=4ab6404b1c5798155640edf4bb207c8d1de37b5d",
      "patch": "@@ -164,21 +164,22 @@ extern void\tsim_halt (void);\n extern void\texit_sim (void);\n extern void\tinit_stdio (void);\n extern void\trestore_stdio (void);\n-extern int\tmemory_iread (uint32 addr, uint32 *data, int32 *ws);\n-extern int\tmemory_read (int32 asi, uint32 addr, uint32 *data,\n+extern int\tmemory_iread (uint32 addr, uint32 *data, uint32 *ws);\n+extern int\tmemory_read (int32 asi, uint32 addr, void *data,\n \t\t\t     int32 sz, int32 *ws);\n extern int\tmemory_write (int32 asi, uint32 addr, uint32 *data,\n \t\t\t      int32 sz, int32 *ws);\n extern int\tsis_memory_write (uint32 addr,\n-\t\t\t\t  const unsigned char *data, uint32 length);\n-extern int\tsis_memory_read (uint32 addr, char *data,\n+\t\t\t\t  const void *data, uint32 length);\n+extern int\tsis_memory_read (uint32 addr, void *data,\n \t\t\t\t uint32 length);\n+extern void\tboot_init (void);\n \n /* func.c */\n extern struct pstate  sregs;\n extern void\tset_regi (struct pstate *sregs, int32 reg,\n \t\t\t  uint32 rval);\n-extern void\tget_regi (struct pstate *sregs, int32 reg, char *buf);\n+extern void\tget_regi (struct pstate *sregs, int32 reg, unsigned char *buf);\n extern int\texec_cmd (struct pstate *sregs, const char *cmd);\n extern void\treset_stat (struct pstate  *sregs);\n extern void\tshow_stat (struct pstate  *sregs);"
    }
  ]
}