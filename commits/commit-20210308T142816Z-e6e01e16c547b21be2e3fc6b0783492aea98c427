{
  "sha": "e6e01e16c547b21be2e3fc6b0783492aea98c427",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTZlMDFlMTZjNTQ3YjIxYmUyZTNmYzZiMDc4MzQ5MmFlYTk4YzQyNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:16Z"
    },
    "message": "Introduce internalvar_operation\n\nThis adds class internalvar_operation, which implements\nOP_INTERNALVAR.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class internalvar_operation): New.\n\t* ax-gdb.c (internalvar_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "8c2fb58588c9f9bcd0d8a3f70693de97ea3d6041",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8c2fb58588c9f9bcd0d8a3f70693de97ea3d6041"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6e01e16c547b21be2e3fc6b0783492aea98c427",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e01e16c547b21be2e3fc6b0783492aea98c427",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6e01e16c547b21be2e3fc6b0783492aea98c427",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e01e16c547b21be2e3fc6b0783492aea98c427/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e6985c5e45ef0693005e21a25d847baf0f93c965",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6985c5e45ef0693005e21a25d847baf0f93c965",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e6985c5e45ef0693005e21a25d847baf0f93c965"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 62,
    "deletions": 0
  },
  "files": [
    {
      "sha": "05f67b855b70d8d2fb09e078da80de0898744342",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e6e01e16c547b21be2e3fc6b0783492aea98c427",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class internalvar_operation): New.\n+\t* ax-gdb.c (internalvar_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class bool_operation): New."
    },
    {
      "sha": "e25e2942475c13d24ca75abd6862533f072db8ab",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=e6e01e16c547b21be2e3fc6b0783492aea98c427",
      "patch": "@@ -2365,6 +2365,31 @@ register_operation::do_generate_ax (struct expression *exp,\n   value->type = register_type (ax->gdbarch, reg);\n }\n \n+void\n+internalvar_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t       struct agent_expr *ax,\n+\t\t\t\t       struct axs_value *value,\n+\t\t\t\t       struct type *cast_type)\n+{\n+  struct internalvar *var = std::get<0> (m_storage);\n+  const char *name = internalvar_name (var);\n+  struct trace_state_variable *tsv;\n+\n+  tsv = find_trace_state_variable (name);\n+  if (tsv)\n+    {\n+      ax_tsv (ax, aop_getv, tsv->number);\n+      if (ax->tracing)\n+\tax_tsv (ax, aop_tracev, tsv->number);\n+      /* Trace state variables are always 64-bit integers.  */\n+      value->kind = axs_rvalue;\n+      value->type = builtin_type (ax->gdbarch)->builtin_long_long;\n+    }\n+  else if (! compile_internalvar_to_ax (var, ax, value))\n+    error (_(\"$%s is not a trace state variable; GDB agent \"\n+\t     \"expressions cannot use convenience variables.\"), name);\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "d143815a25958cd6ca9be514269498f2d8f0d2e5",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6e01e16c547b21be2e3fc6b0783492aea98c427/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=e6e01e16c547b21be2e3fc6b0783492aea98c427",
      "patch": "@@ -649,6 +649,38 @@ class bool_operation\n   { return true; }\n };\n \n+class internalvar_operation\n+  : public tuple_holding_operation<internalvar *>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return value_of_internalvar (exp->gdbarch,\n+\t\t\t\t std::get<0> (m_storage));\n+  }\n+\n+  internalvar *get_internalvar () const\n+  {\n+    return std::get<0> (m_storage);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_INTERNALVAR; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}