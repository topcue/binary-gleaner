{
  "sha": "5663e321848545857a690f30a780187e3366bd2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTY2M2UzMjE4NDg1NDU4NTdhNjkwZjMwYTc4MDE4N2UzMzY2YmQyZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2018-08-29T04:52:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-24T00:57:49Z"
    },
    "message": "PowerPC relocations for prefix insns\n\ninclude/\n\t* elf/ppc64.h (R_PPC64_PLTSEQ_NOTOC, R_PPC64_PLTCALL_NOTOC),\n\t(R_PPC64_PCREL_OPT, R_PPC64_D34, R_PPC64_D34_LO, R_PPC64_D34_HI30),\n\t(R_PPC64_D34_HA30, R_PPC64_PCREL34, R_PPC64_GOT_PCREL34),\n\t(R_PPC64_PLT_PCREL34, R_PPC64_PLT_PCREL34_NOTOC),\n\t(R_PPC64_ADDR16_HIGHER34, R_PPC64_ADDR16_HIGHERA34),\n\t(R_PPC64_ADDR16_HIGHEST34, R_PPC64_ADDR16_HIGHESTA34),\n\t(R_PPC64_REL16_HIGHER34, R_PPC64_REL16_HIGHERA34),\n\t(R_PPC64_REL16_HIGHEST34, R_PPC64_REL16_HIGHESTA34),\n\t(R_PPC64_D28, R_PPC64_PCREL28): Define.\nbfd/\n\t* reloc.c (BFD_RELOC_PPC64_D34, BFD_RELOC_PPC64_D34_LO),\n\t(BFD_RELOC_PPC64_D34_HI30, BFD_RELOC_PPC64_D34_HA30),\n\t(BFD_RELOC_PPC64_PCREL34, BFD_RELOC_PPC64_GOT_PCREL34),\n\t(BFD_RELOC_PPC64_PLT_PCREL34),\n\t(BFD_RELOC_PPC64_ADDR16_HIGHER34, BFD_RELOC_PPC64_ADDR16_HIGHERA34),\n\t(BFD_RELOC_PPC64_ADDR16_HIGHEST34, BFD_RELOC_PPC64_ADDR16_HIGHESTA34),\n\t(BFD_RELOC_PPC64_REL16_HIGHER34, BFD_RELOC_PPC64_REL16_HIGHERA34),\n\t(BFD_RELOC_PPC64_REL16_HIGHEST34, BFD_RELOC_PPC64_REL16_HIGHESTA34),\n\t(BFD_RELOC_PPC64_D28, BFD_RELOC_PPC64_PCREL28): New reloc enums.\n\t* elf64-ppc.c (PNOP): Define.\n\t(ppc64_elf_howto_raw): Add reloc howtos for new relocations.\n\t(ppc64_elf_reloc_type_lookup): Translate new bfd reloc numbers.\n\t(ppc64_elf_ha_reloc): Adjust addend for highera34 and highesta34\n\trelocs.\n\t(ppc64_elf_prefix_reloc): New function.\n\t(struct ppc_link_hash_table): Add notoc_plt.\n\t(is_branch_reloc): Add R_PPC64_PLTCALL_NOTOC.\n\t(is_plt_seq_reloc): Add R_PPC64_PLT_PCREL34,\n\tR_PPC64_PLT_PCREL34_NOTOC, and R_PPC64_PLTSEQ_NOTOC.\n\t(ppc64_elf_check_relocs): Handle pcrel got and plt relocs.  Set\n\thas_pltcall for section on seeing R_PPC64_PLTCALL_NOTOC.  Handle\n\tpossible need for dynamic relocs on non-pcrel powerxx relocs.\n\t(dec_dynrel_count): Handle non-pcrel powerxx relocs.\n\t(ppc64_elf_inline_plt): Handle R_PPC64_PLTCALL_NOTOC.\n\t(toc_adjusting_stub_needed): Likewise.\n\t(ppc64_elf_tls_optimize): Handle R_PPC64_PLTSEQ_NOTOC.\n\t(ppc64_elf_relocate_section): Handle new powerxx relocs.\n\t* bfd-in2.h: Regenerate.\n\t* libbfd.h: Regenerate.\ngas/\n\t* config/tc-ppc.c (ppc_elf_suffix): Support @pcrel, @got@pcrel,\n\t@plt@pcrel, @higher34, @highera34, @highest34, and @highesta34.\n\t(fixup_size): Handle new powerxx relocs.\n\t(md_assemble): Warn for @pcrel on non-prefix insns.\n\tAccept @l, @h and @ha on prefix insns, and infer reloc without\n\tany @ suffix.  Translate powerxx relocs to suit DQ and DS field\n\tinstructions.  Include operand tests as well as opcode test to\n\ttranslate BFD_RELOC_HI16_S to BFD_RELOC_PPC_16DX_HA.\n\t(ppc_fix_adjustable): Return false for pcrel GOT and PLT relocs.\n\t(md_apply_fix): Handle new powerxx relocs.\n\t* config/tc-ppc.h (TC_FORCE_RELOCATION_SUB_LOCAL): Accept\n\tBFD_RELOC_PPC64_ADDR16_HIGHER34, BFD_RELOC_PPC64_ADDR16_HIGHERA34,\n\tBFD_RELOC_PPC64_ADDR16_HIGHEST34, BFD_RELOC_PPC64_ADDR16_HIGHESTA34,\n\tBFD_RELOC_PPC64_D34, and BFD_RELOC_PPC64_D28.\n\t* testsuite/gas/ppc/prefix-reloc.d,\n\t* testsuite/gas/ppc/prefix-reloc.s: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.",
    "tree": {
      "sha": "c9b730b7593a41e9927039f6fa277610b468d260",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c9b730b7593a41e9927039f6fa277610b468d260"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5663e321848545857a690f30a780187e3366bd2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5663e321848545857a690f30a780187e3366bd2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5663e321848545857a690f30a780187e3366bd2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5663e321848545857a690f30a780187e3366bd2d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8acf14351c818d956babe50e61711740f378c941",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8acf14351c818d956babe50e61711740f378c941",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8acf14351c818d956babe50e61711740f378c941"
    }
  ],
  "stats": {
    "total": 786,
    "additions": 722,
    "deletions": 64
  },
  "files": [
    {
      "sha": "9091df029420dce727c53fa5a31ae0af0dd76d97",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -1,3 +1,35 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* reloc.c (BFD_RELOC_PPC64_D34, BFD_RELOC_PPC64_D34_LO),\n+\t(BFD_RELOC_PPC64_D34_HI30, BFD_RELOC_PPC64_D34_HA30),\n+\t(BFD_RELOC_PPC64_PCREL34, BFD_RELOC_PPC64_GOT_PCREL34),\n+\t(BFD_RELOC_PPC64_PLT_PCREL34),\n+\t(BFD_RELOC_PPC64_ADDR16_HIGHER34, BFD_RELOC_PPC64_ADDR16_HIGHERA34),\n+\t(BFD_RELOC_PPC64_ADDR16_HIGHEST34, BFD_RELOC_PPC64_ADDR16_HIGHESTA34),\n+\t(BFD_RELOC_PPC64_REL16_HIGHER34, BFD_RELOC_PPC64_REL16_HIGHERA34),\n+\t(BFD_RELOC_PPC64_REL16_HIGHEST34, BFD_RELOC_PPC64_REL16_HIGHESTA34),\n+\t(BFD_RELOC_PPC64_D28, BFD_RELOC_PPC64_PCREL28): New reloc enums.\n+\t* elf64-ppc.c (PNOP): Define.\n+\t(ppc64_elf_howto_raw): Add reloc howtos for new relocations.\n+\t(ppc64_elf_reloc_type_lookup): Translate new bfd reloc numbers.\n+\t(ppc64_elf_ha_reloc): Adjust addend for highera34 and highesta34\n+\trelocs.\n+\t(ppc64_elf_prefix_reloc): New function.\n+\t(struct ppc_link_hash_table): Add notoc_plt.\n+\t(is_branch_reloc): Add R_PPC64_PLTCALL_NOTOC.\n+\t(is_plt_seq_reloc): Add R_PPC64_PLT_PCREL34,\n+\tR_PPC64_PLT_PCREL34_NOTOC, and R_PPC64_PLTSEQ_NOTOC.\n+\t(ppc64_elf_check_relocs): Handle pcrel got and plt relocs.  Set\n+\thas_pltcall for section on seeing R_PPC64_PLTCALL_NOTOC.  Handle\n+\tpossible need for dynamic relocs on non-pcrel powerxx relocs.\n+\t(dec_dynrel_count): Handle non-pcrel powerxx relocs.\n+\t(ppc64_elf_inline_plt): Handle R_PPC64_PLTCALL_NOTOC.\n+\t(toc_adjusting_stub_needed): Likewise.\n+\t(ppc64_elf_tls_optimize): Handle R_PPC64_PLTSEQ_NOTOC.\n+\t(ppc64_elf_relocate_section): Handle new powerxx relocs.\n+\t* bfd-in2.h: Regenerate.\n+\t* libbfd.h: Regenerate.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config.bfd (targ_cpu): Process bpf-*-none only if BFD64."
    },
    {
      "sha": "450c7b7fb18ba45354ca80ffae08b067474bfd49",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -3498,6 +3498,23 @@ instruction.  */\n   BFD_RELOC_PPC64_ADDR64_LOCAL,\n   BFD_RELOC_PPC64_ENTRY,\n   BFD_RELOC_PPC64_REL24_NOTOC,\n+  BFD_RELOC_PPC64_D34,\n+  BFD_RELOC_PPC64_D34_LO,\n+  BFD_RELOC_PPC64_D34_HI30,\n+  BFD_RELOC_PPC64_D34_HA30,\n+  BFD_RELOC_PPC64_PCREL34,\n+  BFD_RELOC_PPC64_GOT_PCREL34,\n+  BFD_RELOC_PPC64_PLT_PCREL34,\n+  BFD_RELOC_PPC64_ADDR16_HIGHER34,\n+  BFD_RELOC_PPC64_ADDR16_HIGHERA34,\n+  BFD_RELOC_PPC64_ADDR16_HIGHEST34,\n+  BFD_RELOC_PPC64_ADDR16_HIGHESTA34,\n+  BFD_RELOC_PPC64_REL16_HIGHER34,\n+  BFD_RELOC_PPC64_REL16_HIGHERA34,\n+  BFD_RELOC_PPC64_REL16_HIGHEST34,\n+  BFD_RELOC_PPC64_REL16_HIGHESTA34,\n+  BFD_RELOC_PPC64_D28,\n+  BFD_RELOC_PPC64_PCREL28,\n \n /* PowerPC and PowerPC64 thread-local storage relocations.  */\n   BFD_RELOC_PPC_TLS,"
    },
    {
      "sha": "ad47bed372dd0ffaa203a3f8a9866514d6a007f3",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 368,
      "deletions": 41,
      "changes": 409,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -51,6 +51,8 @@ static bfd_reloc_status_type ppc64_elf_toc_ha_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n static bfd_reloc_status_type ppc64_elf_toc64_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n+static bfd_reloc_status_type ppc64_elf_prefix_reloc\n+  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n static bfd_reloc_status_type ppc64_elf_unhandled_reloc\n   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n static bfd_vma opd_entry_value\n@@ -197,6 +199,7 @@ static bfd_vma opd_entry_value\n #define SLDI_R12_R12_32\t0x799c07c6\t/* sldi  %r12,%r12,32     */\n #define LDX_R12_R11_R12 0x7d8b602a\t/* ldx   %r12,%r11,%r12   */\n #define ADD_R12_R11_R12 0x7d8b6214\t/* add   %r12,%r11,%r12   */\n+#define PNOP\t\t0x0700000000000000ULL\n \n /* __glink_PLTresolve stub instructions.  We enter with the index in R0.  */\n #define GLINK_PLTRESOLVE_SIZE(htab)\t\t\t\\\n@@ -878,6 +881,69 @@ static reloc_howto_type ppc64_elf_howto_raw[] =\n   HOW (R_PPC64_ADDR64_LOCAL, 4, 64, 0xffffffffffffffffULL, 0, FALSE, dont,\n        bfd_elf_generic_reloc),\n \n+  HOW (R_PPC64_PLTSEQ_NOTOC, 2, 32, 0, 0, FALSE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_PLTCALL_NOTOC, 2, 32, 0, 0, FALSE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_PCREL_OPT, 2, 32, 0, 0, FALSE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_D34, 4, 34, 0x3ffff0000ffffULL, 0, FALSE, signed,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_D34_LO, 4, 34, 0x3ffff0000ffffULL, 0, FALSE, dont,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_D34_HI30, 4, 34, 0x3ffff0000ffffULL, 34, FALSE, dont,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_D34_HA30, 4, 34, 0x3ffff0000ffffULL, 34, FALSE, dont,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_GOT_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_PLT_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_PLT_PCREL34_NOTOC, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_ADDR16_HIGHER34, 1, 16, 0xffff, 34, FALSE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_ADDR16_HIGHERA34, 1, 16, 0xffff, 34, FALSE, dont,\n+       ppc64_elf_ha_reloc),\n+\n+  HOW (R_PPC64_ADDR16_HIGHEST34, 1, 16, 0xffff, 50, FALSE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_ADDR16_HIGHESTA34, 1, 16, 0xffff, 50, FALSE, dont,\n+       ppc64_elf_ha_reloc),\n+\n+  HOW (R_PPC64_REL16_HIGHER34, 1, 16, 0xffff, 34, TRUE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_REL16_HIGHERA34, 1, 16, 0xffff, 34, TRUE, dont,\n+       ppc64_elf_ha_reloc),\n+\n+  HOW (R_PPC64_REL16_HIGHEST34, 1, 16, 0xffff, 50, TRUE, dont,\n+       bfd_elf_generic_reloc),\n+\n+  HOW (R_PPC64_REL16_HIGHESTA34, 1, 16, 0xffff, 50, TRUE, dont,\n+       ppc64_elf_ha_reloc),\n+\n+  HOW (R_PPC64_D28, 4, 28, 0xfff0000ffffULL, 0, FALSE, signed,\n+       ppc64_elf_prefix_reloc),\n+\n+  HOW (R_PPC64_PCREL28, 4, 28, 0xfff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_prefix_reloc),\n+\n   /* GNU extension to record C++ vtable hierarchy.  */\n   HOW (R_PPC64_GNU_VTINHERIT, 0, 0, 0, 0, FALSE, dont,\n        NULL),\n@@ -1167,6 +1233,40 @@ ppc64_elf_reloc_type_lookup (bfd *abfd,\n       break;\n     case BFD_RELOC_PPC64_ADDR64_LOCAL:\t\tr = R_PPC64_ADDR64_LOCAL;\n       break;\n+    case BFD_RELOC_PPC64_D34:\t\t\tr = R_PPC64_D34;\n+      break;\n+    case BFD_RELOC_PPC64_D34_LO:\t\tr = R_PPC64_D34_LO;\n+      break;\n+    case BFD_RELOC_PPC64_D34_HI30:\t\tr = R_PPC64_D34_HI30;\n+      break;\n+    case BFD_RELOC_PPC64_D34_HA30:\t\tr = R_PPC64_D34_HA30;\n+      break;\n+    case BFD_RELOC_PPC64_PCREL34:\t\tr = R_PPC64_PCREL34;\n+      break;\n+    case BFD_RELOC_PPC64_GOT_PCREL34:\t\tr = R_PPC64_GOT_PCREL34;\n+      break;\n+    case BFD_RELOC_PPC64_PLT_PCREL34:\t\tr = R_PPC64_PLT_PCREL34;\n+      break;\n+    case BFD_RELOC_PPC64_ADDR16_HIGHER34:\tr = R_PPC64_ADDR16_HIGHER34;\n+      break;\n+    case BFD_RELOC_PPC64_ADDR16_HIGHERA34:\tr = R_PPC64_ADDR16_HIGHERA34;\n+      break;\n+    case BFD_RELOC_PPC64_ADDR16_HIGHEST34:\tr = R_PPC64_ADDR16_HIGHEST34;\n+      break;\n+    case BFD_RELOC_PPC64_ADDR16_HIGHESTA34:\tr = R_PPC64_ADDR16_HIGHESTA34;\n+      break;\n+    case BFD_RELOC_PPC64_REL16_HIGHER34:\tr = R_PPC64_REL16_HIGHER34;\n+      break;\n+    case BFD_RELOC_PPC64_REL16_HIGHERA34:\tr = R_PPC64_REL16_HIGHERA34;\n+      break;\n+    case BFD_RELOC_PPC64_REL16_HIGHEST34:\tr = R_PPC64_REL16_HIGHEST34;\n+      break;\n+    case BFD_RELOC_PPC64_REL16_HIGHESTA34:\tr = R_PPC64_REL16_HIGHESTA34;\n+      break;\n+    case BFD_RELOC_PPC64_D28:\t\t\tr = R_PPC64_D28;\n+      break;\n+    case BFD_RELOC_PPC64_PCREL28:\t\tr = R_PPC64_PCREL28;\n+      break;\n     case BFD_RELOC_VTABLE_INHERIT:\t\tr = R_PPC64_GNU_VTINHERIT;\n       break;\n     case BFD_RELOC_VTABLE_ENTRY:\t\tr = R_PPC64_GNU_VTENTRY;\n@@ -1243,11 +1343,17 @@ ppc64_elf_ha_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n-  /* Adjust the addend for sign extension of the low 16 bits.\n-     We won't actually be using the low 16 bits, so trashing them\n+  /* Adjust the addend for sign extension of the low 16 (or 34) bits.\n+     We won't actually be using the low bits, so trashing them\n      doesn't matter.  */\n-  reloc_entry->addend += 0x8000;\n   r_type = reloc_entry->howto->type;\n+  if (r_type == R_PPC64_ADDR16_HIGHERA34\n+      || r_type == R_PPC64_ADDR16_HIGHESTA34\n+      || r_type == R_PPC64_REL16_HIGHERA34\n+      || r_type == R_PPC64_REL16_HIGHESTA34)\n+    reloc_entry->addend += 1ULL << 33;\n+  else\n+    reloc_entry->addend += 1U << 15;\n   if (r_type != R_PPC64_REL16DX_HA)\n     return bfd_reloc_continue;\n \n@@ -1492,6 +1598,48 @@ ppc64_elf_toc64_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n   return bfd_reloc_ok;\n }\n \n+static bfd_reloc_status_type\n+ppc64_elf_prefix_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n+\t\t\tvoid *data, asection *input_section,\n+\t\t\tbfd *output_bfd, char **error_message)\n+{\n+  uint64_t insn;\n+  bfd_vma targ;\n+\n+  if (output_bfd != NULL)\n+    return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n+\t\t\t\t  input_section, output_bfd, error_message);\n+\n+  insn = bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address);\n+  insn <<= 32;\n+  insn |= bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address + 4);\n+\n+  targ = (symbol->section->output_section->vma\n+\t  + symbol->section->output_offset\n+\t  + reloc_entry->addend);\n+  if (!bfd_is_com_section (symbol->section))\n+    targ += symbol->value;\n+  if (reloc_entry->howto->type == R_PPC64_D34_HA30)\n+    targ += 1ULL << 33;\n+  if (reloc_entry->howto->pc_relative)\n+    {\n+      bfd_vma from = (reloc_entry->address\n+\t\t      + input_section->output_offset\n+\t\t      + input_section->output_section->vma);\n+      targ -=from;\n+    }\n+  targ >>= reloc_entry->howto->rightshift;\n+  insn &= ~reloc_entry->howto->dst_mask;\n+  insn |= ((targ << 16) | (targ & 0xffff)) & reloc_entry->howto->dst_mask;\n+  bfd_put_32 (abfd, insn >> 32, (bfd_byte *) data + reloc_entry->address);\n+  bfd_put_32 (abfd, insn, (bfd_byte *) data + reloc_entry->address + 4);\n+  if (reloc_entry->howto->complain_on_overflow == complain_overflow_signed\n+      && (targ + (1ULL << (reloc_entry->howto->bitsize - 1))\n+\t  >= 1ULL << reloc_entry->howto->bitsize))\n+    return bfd_reloc_overflow;\n+  return bfd_reloc_ok;\n+}\n+\n static bfd_reloc_status_type\n ppc64_elf_unhandled_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t\t   void *data, asection *input_section,\n@@ -2981,6 +3129,9 @@ struct ppc_link_hash_table\n   /* Whether plt calls for ELFv2 localentry:0 funcs have been optimized.  */\n   unsigned int has_plt_localentry0:1;\n \n+  /* Whether calls are made via the PLT from NOTOC functions.  */\n+  unsigned int notoc_plt:1;\n+\n   /* Incremented every time we size stubs.  */\n   unsigned int stub_iteration;\n \n@@ -4235,7 +4386,8 @@ is_branch_reloc (enum elf_ppc64_reloc_type r_type)\n \t  || r_type == R_PPC64_ADDR14\n \t  || r_type == R_PPC64_ADDR14_BRTAKEN\n \t  || r_type == R_PPC64_ADDR14_BRNTAKEN\n-\t  || r_type == R_PPC64_PLTCALL);\n+\t  || r_type == R_PPC64_PLTCALL\n+\t  || r_type == R_PPC64_PLTCALL_NOTOC);\n }\n \n /* Relocs on inline plt call sequence insns prior to the call.  */\n@@ -4247,7 +4399,10 @@ is_plt_seq_reloc (enum elf_ppc64_reloc_type r_type)\n \t  || r_type == R_PPC64_PLT16_HI\n \t  || r_type == R_PPC64_PLT16_LO\n \t  || r_type == R_PPC64_PLT16_LO_DS\n-\t  || r_type == R_PPC64_PLTSEQ);\n+\t  || r_type == R_PPC64_PLT_PCREL34\n+\t  || r_type == R_PPC64_PLT_PCREL34_NOTOC\n+\t  || r_type == R_PPC64_PLTSEQ\n+\t  || r_type == R_PPC64_PLTSEQ_NOTOC);\n }\n \n /* Look through the relocs for a section during the first phase, and\n@@ -4302,6 +4457,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       int tls_type;\n       struct _ppc64_elf_section_data *ppc64_sec;\n       struct plt_entry **ifunc, **plt_list;\n+      bfd_vma sym_addend;\n \n       r_symndx = ELF64_R_SYM (rel->r_info);\n       if (r_symndx < symtab_hdr->sh_info)\n@@ -4317,6 +4473,24 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n       tls_type = 0;\n       ifunc = NULL;\n+      r_type = ELF64_R_TYPE (rel->r_info);\n+      switch (r_type)\n+\t{\n+\tdefault:\n+\t  /* Somewhat foolishly, because the ABIs don't specifically\n+\t     allow it, ppc64 gas and ld support GOT and PLT relocs\n+\t     with non-zero addends where the addend results in\n+\t     sym+addend being stored in the GOT or PLT entry.  This\n+\t     can't be supported for pcrel relocs because the addend is\n+\t     used to specify the pcrel offset.  */\n+\t  sym_addend = rel->r_addend;\n+\t  break;\n+\tcase R_PPC64_GOT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34_NOTOC:\n+\t  sym_addend = 0;\n+\t  break;\n+\t}\n       if (h != NULL)\n \t{\n \t  if (h->type == STT_GNU_IFUNC)\n@@ -4335,14 +4509,13 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  if (ELF_ST_TYPE (isym->st_info) == STT_GNU_IFUNC)\n \t    {\n \t      ifunc = update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\t     rel->r_addend,\n+\t\t\t\t\t     sym_addend,\n \t\t\t\t\t     NON_GOT | PLT_IFUNC);\n \t      if (ifunc == NULL)\n \t\treturn FALSE;\n \t    }\n \t}\n \n-      r_type = ELF64_R_TYPE (rel->r_info);\n       switch (r_type)\n \t{\n \tcase R_PPC64_TLSGD:\n@@ -4353,7 +4526,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    ((struct ppc_link_hash_entry *) h)->tls_mask |= TLS_TLS | TLS_MARK;\n \t  else\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\trel->r_addend,\n+\t\t\t\t\tsym_addend,\n \t\t\t\t\tNON_GOT | TLS_TLS | TLS_MARK))\n \t      return FALSE;\n \t  sec->has_tls_reloc = 1;\n@@ -4401,6 +4574,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT16:\n \tcase R_PPC64_GOT16_HI:\n \tcase R_PPC64_GOT16_LO:\n+\tcase R_PPC64_GOT_PCREL34:\n \tdogot:\n \t  /* This symbol requires a global offset table entry.  */\n \t  sec->has_toc_reloc = 1;\n@@ -4426,7 +4600,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t      eh = (struct ppc_link_hash_entry *) h;\n \t      for (ent = eh->elf.got.glist; ent != NULL; ent = ent->next)\n-\t\tif (ent->addend == rel->r_addend\n+\t\tif (ent->addend == sym_addend\n \t\t    && ent->owner == abfd\n \t\t    && ent->tls_type == tls_type)\n \t\t  break;\n@@ -4437,7 +4611,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t  if (ent == NULL)\n \t\t    return FALSE;\n \t\t  ent->next = eh->elf.got.glist;\n-\t\t  ent->addend = rel->r_addend;\n+\t\t  ent->addend = sym_addend;\n \t\t  ent->owner = abfd;\n \t\t  ent->tls_type = tls_type;\n \t\t  ent->is_indirect = FALSE;\n@@ -4450,14 +4624,14 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  else\n \t    /* This is a global offset table entry for a local symbol.  */\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\trel->r_addend, tls_type))\n+\t\t\t\t\tsym_addend, tls_type))\n \t      return FALSE;\n \n \t  /* We may also need a plt entry if the symbol turns out to be\n \t     an ifunc.  */\n \t  if (h != NULL && !bfd_link_pic (info) && abiversion (abfd) != 1)\n \t    {\n-\t      if (!update_plt_info (abfd, &h->plt.plist, rel->r_addend))\n+\t      if (!update_plt_info (abfd, &h->plt.plist, sym_addend))\n \t\treturn FALSE;\n \t    }\n \t  break;\n@@ -4466,6 +4640,8 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_PLT16_HI:\n \tcase R_PPC64_PLT16_LO:\n \tcase R_PPC64_PLT16_LO_DS:\n+\tcase R_PPC64_PLT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_PLT32:\n \tcase R_PPC64_PLT64:\n \t  /* This symbol requires a procedure linkage table entry.  */\n@@ -4481,9 +4657,9 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  if (plt_list == NULL)\n \t    plt_list = update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\t      rel->r_addend,\n+\t\t\t\t\t      sym_addend,\n \t\t\t\t\t      NON_GOT | PLT_KEEP);\n-\t  if (!update_plt_info (abfd, plt_list, rel->r_addend))\n+\t  if (!update_plt_info (abfd, plt_list, sym_addend))\n \t    return FALSE;\n \t  break;\n \n@@ -4521,6 +4697,10 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_REL16_HIGHERA:\n \tcase R_PPC64_REL16_HIGHEST:\n \tcase R_PPC64_REL16_HIGHESTA:\n+\tcase R_PPC64_REL16_HIGHER34:\n+\tcase R_PPC64_REL16_HIGHERA34:\n+\tcase R_PPC64_REL16_HIGHEST34:\n+\tcase R_PPC64_REL16_HIGHESTA34:\n \tcase R_PPC64_REL16DX_HA:\n \t  break;\n \n@@ -4603,6 +4783,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  goto rel24;\n \n \tcase R_PPC64_PLTCALL:\n+\tcase R_PPC64_PLTCALL_NOTOC:\n \t  ppc64_elf_section_data (sec)->has_pltcall = 1;\n \t  /* Fall through.  */\n \n@@ -4636,7 +4817,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  /* We may need a .plt entry if the function this reloc\n \t     refers to is in a shared lib.  */\n \t  if (plt_list\n-\t      && !update_plt_info (abfd, plt_list, rel->r_addend))\n+\t      && !update_plt_info (abfd, plt_list, sym_addend))\n \t    return FALSE;\n \t  break;\n \n@@ -4680,7 +4861,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  else\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\trel->r_addend, tls_type))\n+\t\t\t\t\tsym_addend, tls_type))\n \t      return FALSE;\n \n \t  ppc64_sec = ppc64_elf_section_data (sec);\n@@ -4702,7 +4883,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  BFD_ASSERT (rel->r_offset % 8 == 0);\n \t  ppc64_sec->u.toc.symndx[rel->r_offset / 8] = r_symndx;\n-\t  ppc64_sec->u.toc.add[rel->r_offset / 8] = rel->r_addend;\n+\t  ppc64_sec->u.toc.add[rel->r_offset / 8] = sym_addend;\n \n \t  /* Mark the second slot of a GD or LD entry.\n \t     -1 to indicate GD and -2 to indicate LD.  */\n@@ -4750,12 +4931,21 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_ADDR16_HIGHESTA:\n \tcase R_PPC64_ADDR16_LO:\n \tcase R_PPC64_ADDR16_LO_DS:\n+\tcase R_PPC64_D34:\n+\tcase R_PPC64_D34_LO:\n+\tcase R_PPC64_D34_HI30:\n+\tcase R_PPC64_D34_HA30:\n+\tcase R_PPC64_ADDR16_HIGHER34:\n+\tcase R_PPC64_ADDR16_HIGHERA34:\n+\tcase R_PPC64_ADDR16_HIGHEST34:\n+\tcase R_PPC64_ADDR16_HIGHESTA34:\n+\tcase R_PPC64_D28:\n \t  if (h != NULL && !bfd_link_pic (info) && abiversion (abfd) != 1\n \t      && rel->r_addend == 0)\n \t    {\n \t      /* We may need a .plt entry if this reloc refers to a\n \t\t function in a shared lib.  */\n-\t      if (!update_plt_info (abfd, &h->plt.plist, rel->r_addend))\n+\t      if (!update_plt_info (abfd, &h->plt.plist, 0))\n \t\treturn FALSE;\n \t      h->pointer_equality_needed = 1;\n \t    }\n@@ -6562,6 +6752,15 @@ dec_dynrel_count (bfd_vma r_info,\n     case R_PPC64_UADDR32:\n     case R_PPC64_UADDR64:\n     case R_PPC64_TOC:\n+    case R_PPC64_D34:\n+    case R_PPC64_D34_LO:\n+    case R_PPC64_D34_HI30:\n+    case R_PPC64_D34_HA30:\n+    case R_PPC64_ADDR16_HIGHER34:\n+    case R_PPC64_ADDR16_HIGHERA34:\n+    case R_PPC64_ADDR16_HIGHEST34:\n+    case R_PPC64_ADDR16_HIGHESTA34:\n+    case R_PPC64_D28:\n       break;\n     }\n \n@@ -7167,7 +7366,8 @@ ppc64_elf_inline_plt (struct bfd_link_info *info)\n \t\tunsigned char *tls_maskp;\n \n \t\tr_type = ELF64_R_TYPE (rel->r_info);\n-\t\tif (r_type != R_PPC64_PLTCALL)\n+\t\tif (r_type != R_PPC64_PLTCALL\n+\t\t    && r_type != R_PPC64_PLTCALL_NOTOC)\n \t\t  continue;\n \n \t\tr_symndx = ELF64_R_SYM (rel->r_info);\n@@ -7195,7 +7395,11 @@ ppc64_elf_inline_plt (struct bfd_link_info *info)\n \t\t    from = (rel->r_offset\n \t\t\t    + sec->output_offset\n \t\t\t    + sec->output_section->vma);\n-\t\t    if (to - from + limit < 2 * limit)\n+\t\t    if (to - from + limit < 2 * limit\n+\t\t\t&& !(r_type == R_PPC64_PLTCALL_NOTOC\n+\t\t\t     && (((h ? h->other : sym->st_other)\n+\t\t\t\t  & STO_PPC64_LOCAL_MASK)\n+\t\t\t\t != 1 << STO_PPC64_LOCAL_BIT)))\n \t\t      *tls_maskp &= ~PLT_KEEP;\n \t\t  }\n \t      }\n@@ -7574,7 +7778,9 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t\t{\n \t\t\t  if (pass != 0\n \t\t\t      && (ELF64_R_TYPE (rel[1].r_info)\n-\t\t\t\t  != R_PPC64_PLTSEQ))\n+\t\t\t\t  != R_PPC64_PLTSEQ)\n+\t\t\t      && (ELF64_R_TYPE (rel[1].r_info)\n+\t\t\t\t  != R_PPC64_PLTSEQ_NOTOC))\n \t\t\t    {\n \t\t\t      r_symndx = ELF64_R_SYM (rel[1].r_info);\n \t\t\t      if (!get_sym_h (&h, NULL, NULL, NULL, &locsyms,\n@@ -11631,7 +11837,8 @@ toc_adjusting_stub_needed (struct bfd_link_info *info, asection *isec)\n \t      && r_type != R_PPC64_REL14\n \t      && r_type != R_PPC64_REL14_BRTAKEN\n \t      && r_type != R_PPC64_REL14_BRNTAKEN\n-\t      && r_type != R_PPC64_PLTCALL)\n+\t      && r_type != R_PPC64_PLTCALL\n+\t      && r_type != R_PPC64_PLTCALL_NOTOC)\n \t    continue;\n \n \t  r_symndx = ELF64_R_SYM (rel->r_info);\n@@ -14030,10 +14237,14 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      unsigned int insn2;\n \t      bfd_vma offset = rel->r_offset;\n+\t      enum elf_ppc64_reloc_type r_type1 = ELF64_R_TYPE (rel[1].r_info);\n \n-\t      if (is_plt_seq_reloc (ELF64_R_TYPE (rel[1].r_info)))\n+\t      if (is_plt_seq_reloc (r_type1))\n \t\t{\n \t\t  bfd_put_32 (output_bfd, NOP, contents + offset);\n+\t\t  if (r_type1 == R_PPC64_PLT_PCREL34\n+\t\t      || r_type1 == R_PPC64_PLT_PCREL34_NOTOC)\n+\t\t    bfd_put_32 (output_bfd, NOP, contents + offset + 4);\n \t\t  rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n \t\t  break;\n \t\t}\n@@ -14075,10 +14286,14 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      unsigned int insn2;\n \t      bfd_vma offset = rel->r_offset;\n+\t      enum elf_ppc64_reloc_type r_type1 = ELF64_R_TYPE (rel[1].r_info);\n \n-\t      if (is_plt_seq_reloc (ELF64_R_TYPE (rel[1].r_info)))\n+\t      if (is_plt_seq_reloc (r_type1))\n \t\t{\n \t\t  bfd_put_32 (output_bfd, NOP, contents + offset);\n+\t\t  if (r_type1 == R_PPC64_PLT_PCREL34\n+\t\t      || r_type1 == R_PPC64_PLT_PCREL34_NOTOC)\n+\t\t    bfd_put_32 (output_bfd, NOP, contents + offset + 4);\n \t\t  rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n \t\t  break;\n \t\t}\n@@ -14279,6 +14494,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_REL24:\n \tcase R_PPC64_REL24_NOTOC:\n \tcase R_PPC64_PLTCALL:\n+\tcase R_PPC64_PLTCALL_NOTOC:\n \t  /* Calls to functions with a different TOC, such as calls to\n \t     shared objects, need to alter the TOC pointer.  This is\n \t     done using a linkage stub.  A REL24 branching to these\n@@ -14292,7 +14508,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    fdh = ppc_follow_link (h->oh);\n \t  stub_entry = ppc_get_stub_entry (input_section, sec, fdh, &orig_rel,\n \t\t\t\t\t   htab);\n-\t  if (r_type == R_PPC64_PLTCALL\n+\t  if ((r_type == R_PPC64_PLTCALL\n+\t       || r_type == R_PPC64_PLTCALL_NOTOC)\n \t      && stub_entry != NULL\n \t      && stub_entry->stub_type >= ppc_stub_plt_call\n \t      && stub_entry->stub_type <= ppc_stub_plt_call_both)\n@@ -14522,6 +14739,11 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t|| stub_entry->stub_type == ppc_stub_plt_call_both)\n \t\t       && r_type == R_PPC64_REL24_NOTOC)\n \t\trelocation += 4;\n+\n+\t      if (r_type == R_PPC64_REL24_NOTOC\n+\t\t  && (stub_entry->stub_type == ppc_stub_plt_call_notoc\n+\t\t      || stub_entry->stub_type == ppc_stub_plt_call_both))\n+\t\thtab->notoc_plt = 1;\n \t    }\n \n \t  if (insn != 0)\n@@ -14665,6 +14887,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_GOT16_HA:\n \tcase R_PPC64_GOT16_DS:\n \tcase R_PPC64_GOT16_LO_DS:\n+\tcase R_PPC64_GOT_PCREL34:\n \tdogot:\n \t  {\n \t    /* Relocation is to the entry for this symbol in the global\n@@ -14674,6 +14897,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    bfd_vma off;\n \t    unsigned long indx = 0;\n \t    struct got_entry *ent;\n+\t    bfd_vma sym_addend = orig_rel.r_addend;\n+\n+\t    if (r_type == R_PPC64_GOT_PCREL34)\n+\t      sym_addend = 0;\n \n \t    if (tls_type == (TLS_TLS | TLS_LD)\n \t\t&& (h == NULL\n@@ -14707,7 +14934,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  }\n \n \t\tfor (; ent != NULL; ent = ent->next)\n-\t\t  if (ent->addend == orig_rel.r_addend\n+\t\t  if (ent->addend == sym_addend\n \t\t      && ent->owner == input_bfd\n \t\t      && ent->tls_type == tls_type)\n \t\t    break;\n@@ -14764,7 +14991,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t    outrel.r_offset = (got->output_section->vma\n \t\t\t\t       + got->output_offset\n \t\t\t\t       + off);\n-\t\t    outrel.r_addend = addend;\n+\t\t    outrel.r_addend = sym_addend;\n \t\t    if (tls_type & (TLS_LD | TLS_GD))\n \t\t      {\n \t\t\toutrel.r_addend = 0;\n@@ -14777,7 +15004,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t    bfd_elf64_swap_reloca_out (output_bfd,\n \t\t\t\t\t\t       &outrel, loc);\n \t\t\t    outrel.r_offset += 8;\n-\t\t\t    outrel.r_addend = addend;\n+\t\t\t    outrel.r_addend = sym_addend;\n \t\t\t    outrel.r_info\n \t\t\t      = ELF64_R_INFO (indx, R_PPC64_DTPREL64);\n \t\t\t  }\n@@ -14823,7 +15050,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t   emitting a reloc.  */\n \t\telse\n \t\t  {\n-\t\t    relocation += addend;\n+\t\t    relocation += sym_addend;\n \t\t    if (tls_type != 0)\n \t\t      {\n \t\t\tif (htab->elf.tls_sec == NULL)\n@@ -14854,18 +15081,23 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      abort ();\n \n \t    relocation = got->output_section->vma + got->output_offset + off;\n-\t    addend = -(TOCstart + htab->sec_info[input_section->id].toc_off);\n+\t    if (r_type != R_PPC64_GOT_PCREL34)\n+\t      addend = -(TOCstart + htab->sec_info[input_section->id].toc_off);\n \t  }\n \t  break;\n \n \tcase R_PPC64_PLT16_HA:\n \tcase R_PPC64_PLT16_HI:\n \tcase R_PPC64_PLT16_LO:\n \tcase R_PPC64_PLT16_LO_DS:\n+\tcase R_PPC64_PLT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_PLT32:\n \tcase R_PPC64_PLT64:\n \tcase R_PPC64_PLTSEQ:\n+\tcase R_PPC64_PLTSEQ_NOTOC:\n \tcase R_PPC64_PLTCALL:\n+\tcase R_PPC64_PLTCALL_NOTOC:\n \t  /* Relocation is to the entry for this symbol in the\n \t     procedure linkage table.  */\n \t  unresolved_reloc = TRUE;\n@@ -14882,10 +15114,15 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    if (plt_list)\n \t      {\n \t\tstruct plt_entry *ent;\n+\t\tbfd_vma sym_addend = orig_rel.r_addend;\n+\n+\t\tif (r_type == R_PPC64_PLT_PCREL34\n+\t\t    || r_type == R_PPC64_PLT_PCREL34_NOTOC)\n+\t\t  sym_addend = 0;\n \n \t\tfor (ent = *plt_list; ent != NULL; ent = ent->next)\n \t\t  if (ent->plt.offset != (bfd_vma) -1\n-\t\t      && ent->addend == orig_rel.r_addend)\n+\t\t      && ent->addend == sym_addend)\n \t\t    {\n \t\t      asection *plt;\n \t\t      bfd_vma got;\n@@ -14914,7 +15151,9 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t\t + htab->sec_info[input_section->id].toc_off);\n \t\t\t  relocation -= got;\n \t\t\t}\n-\t\t      addend = 0;\n+\t\t      if (r_type != R_PPC64_PLT_PCREL34\n+\t\t\t  && r_type != R_PPC64_PLT_PCREL34_NOTOC)\n+\t\t\taddend = 0;\n \t\t      unresolved_reloc = FALSE;\n \t\t      break;\n \t\t    }\n@@ -14969,14 +15208,18 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_REL16_HIGHERA:\n \tcase R_PPC64_REL16_HIGHEST:\n \tcase R_PPC64_REL16_HIGHESTA:\n+\tcase R_PPC64_REL16_HIGHER34:\n+\tcase R_PPC64_REL16_HIGHERA34:\n+\tcase R_PPC64_REL16_HIGHEST34:\n+\tcase R_PPC64_REL16_HIGHESTA34:\n \tcase R_PPC64_REL16DX_HA:\n-\t  break;\n-\n \tcase R_PPC64_REL14:\n \tcase R_PPC64_REL14_BRNTAKEN:\n \tcase R_PPC64_REL14_BRTAKEN:\n \tcase R_PPC64_REL24:\n \tcase R_PPC64_REL24_NOTOC:\n+\tcase R_PPC64_PCREL34:\n+\tcase R_PPC64_PCREL28:\n \t  break;\n \n \tcase R_PPC64_TPREL16:\n@@ -15071,12 +15314,21 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_ADDR16_HIGHESTA:\n \tcase R_PPC64_ADDR16_LO:\n \tcase R_PPC64_ADDR16_LO_DS:\n+\tcase R_PPC64_ADDR16_HIGHER34:\n+\tcase R_PPC64_ADDR16_HIGHERA34:\n+\tcase R_PPC64_ADDR16_HIGHEST34:\n+\tcase R_PPC64_ADDR16_HIGHESTA34:\n \tcase R_PPC64_ADDR24:\n \tcase R_PPC64_ADDR32:\n \tcase R_PPC64_ADDR64:\n \tcase R_PPC64_UADDR16:\n \tcase R_PPC64_UADDR32:\n \tcase R_PPC64_UADDR64:\n+\tcase R_PPC64_D34:\n+\tcase R_PPC64_D34_LO:\n+\tcase R_PPC64_D34_HI30:\n+\tcase R_PPC64_D34_HA30:\n+\tcase R_PPC64_D28:\n \tdodyn:\n \t  if ((input_section->flags & SEC_ALLOC) == 0)\n \t    break;\n@@ -15328,6 +15580,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t     insn.  */\n \t  break;\n \n+\tcase R_PPC64_PLTCALL_NOTOC:\n+\t  if (!unresolved_reloc)\n+\t    htab->notoc_plt = 1;\n+\t  /* Fall through.  */\n \tcase R_PPC64_PLTCALL:\n \t  if (unresolved_reloc)\n \t    {\n@@ -15336,12 +15592,14 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      insn = bfd_get_32 (input_bfd, p);\n \t      insn &= 1;\n \t      bfd_put_32 (input_bfd, B_DOT | insn, p);\n-\t      bfd_put_32 (input_bfd, NOP, p + 4);\n+\t      if (r_type == R_PPC64_PLTCALL)\n+\t\tbfd_put_32 (input_bfd, NOP, p + 4);\n \t      unresolved_reloc = save_unresolved_reloc;\n \t      r_type = R_PPC64_REL24;\n \t    }\n \t  break;\n \n+\tcase R_PPC64_PLTSEQ_NOTOC:\n \tcase R_PPC64_PLTSEQ:\n \t  if (unresolved_reloc)\n \t    {\n@@ -15350,6 +15608,21 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n+\tcase R_PPC64_PLT_PCREL34_NOTOC:\n+\t  if (!unresolved_reloc)\n+\t    htab->notoc_plt = 1;\n+\t  /* Fall through.  */\n+\tcase R_PPC64_PLT_PCREL34:\n+\t  if (unresolved_reloc)\n+\t    {\n+\t      bfd_byte *p = contents + rel->r_offset;\n+\t      bfd_put_32 (input_bfd, PNOP >> 32, p);\n+\t      bfd_put_32 (input_bfd, PNOP, p + 4);\n+\t      unresolved_reloc = FALSE;\n+\t      goto copy_reloc;\n+\t    }\n+\t  break;\n+\n \tcase R_PPC64_PLT16_HA:\n \t  if (unresolved_reloc)\n \t    {\n@@ -15488,6 +15761,15 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t  addend += 0x8000;\n \t  break;\n \n+\tcase R_PPC64_D34_HA30:\n+\tcase R_PPC64_ADDR16_HIGHERA34:\n+\tcase R_PPC64_ADDR16_HIGHESTA34:\n+\tcase R_PPC64_REL16_HIGHERA34:\n+\tcase R_PPC64_REL16_HIGHESTA34:\n+\t  if (sec != NULL)\n+\t    addend += 1ULL << 33;\n+\t  break;\n+\n \tcase R_PPC64_ADDR16_DS:\n \tcase R_PPC64_ADDR16_LO_DS:\n \tcase R_PPC64_GOT16_DS:\n@@ -15583,9 +15865,50 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t}\n \n-      if (r_type == R_PPC64_REL16DX_HA)\n+      switch (r_type)\n \t{\n-\t  /* Split field reloc isn't handled by _bfd_final_link_relocate.  */\n+\t  /* Split field relocs aren't handled by _bfd_final_link_relocate.  */\n+\tcase R_PPC64_D34:\n+\tcase R_PPC64_D34_LO:\n+\tcase R_PPC64_D34_HI30:\n+\tcase R_PPC64_D34_HA30:\n+\tcase R_PPC64_PCREL34:\n+\tcase R_PPC64_GOT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34:\n+\tcase R_PPC64_PLT_PCREL34_NOTOC:\n+\tcase R_PPC64_D28:\n+\tcase R_PPC64_PCREL28:\n+\t  if (rel->r_offset + 8 > input_section->size)\n+\t    r = bfd_reloc_outofrange;\n+\t  else\n+\t    {\n+\t      uint64_t pinsn;\n+\n+\t      relocation += addend;\n+\t      if (howto->pc_relative)\n+\t\trelocation -= (rel->r_offset\n+\t\t\t       + input_section->output_offset\n+\t\t\t       + input_section->output_section->vma);\n+\t      relocation >>= howto->rightshift;\n+\n+\t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + rel->r_offset + 4);\n+\n+\t      pinsn &= ~howto->dst_mask;\n+\t      pinsn |= (((relocation << 16) | (relocation & 0xffff))\n+\t\t\t& howto->dst_mask);\n+\t      bfd_put_32 (input_bfd, pinsn >> 32, contents + rel->r_offset);\n+\t      bfd_put_32 (input_bfd, pinsn, contents + rel->r_offset + 4);\n+\t      r = bfd_reloc_ok;\n+\t      if (howto->complain_on_overflow == complain_overflow_signed\n+\t\t  && (relocation + (1ULL << (howto->bitsize - 1))\n+\t\t      >= 1ULL << howto->bitsize))\n+\t\tr = bfd_reloc_overflow;\n+\t    }\n+\t  break;\n+\n+\tcase R_PPC64_REL16DX_HA:\n \t  if (rel->r_offset + 4 > input_section->size)\n \t    r = bfd_reloc_outofrange;\n \t  else\n@@ -15603,10 +15926,13 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      if (relocation + 0x8000 > 0xffff)\n \t\tr = bfd_reloc_overflow;\n \t    }\n+\t  break;\n+\n+\tdefault:\n+\t  r = _bfd_final_link_relocate (howto, input_bfd, input_section,\n+\t\t\t\t\tcontents, rel->r_offset,\n+\t\t\t\t\trelocation, addend);\n \t}\n-      else\n-\tr = _bfd_final_link_relocate (howto, input_bfd, input_section, contents,\n-\t\t\t\t      rel->r_offset, relocation, addend);\n \n       if (r != bfd_reloc_ok)\n \t{\n@@ -15884,7 +16210,8 @@ ppc64_elf_finish_dynamic_sections (bfd *output_bfd,\n \t      break;\n \n \t    case DT_PPC64_OPT:\n-\t      if (htab->do_multi_toc && htab->multi_toc_needed)\n+\t      if ((htab->do_multi_toc && htab->multi_toc_needed)\n+\t\t  || htab->notoc_plt)\n \t\tdyn.d_un.d_val |= PPC64_OPT_MULTI_TOC;\n \t      if (htab->has_plt_localentry0)\n \t\tdyn.d_un.d_val |= PPC64_OPT_LOCALENTRY;"
    },
    {
      "sha": "ff6e0eaef4449cdb0b2c97050297c16cc78e4936",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -1476,6 +1476,23 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_PPC64_ADDR64_LOCAL\",\n   \"BFD_RELOC_PPC64_ENTRY\",\n   \"BFD_RELOC_PPC64_REL24_NOTOC\",\n+  \"BFD_RELOC_PPC64_D34\",\n+  \"BFD_RELOC_PPC64_D34_LO\",\n+  \"BFD_RELOC_PPC64_D34_HI30\",\n+  \"BFD_RELOC_PPC64_D34_HA30\",\n+  \"BFD_RELOC_PPC64_PCREL34\",\n+  \"BFD_RELOC_PPC64_GOT_PCREL34\",\n+  \"BFD_RELOC_PPC64_PLT_PCREL34\",\n+  \"BFD_RELOC_PPC64_ADDR16_HIGHER34\",\n+  \"BFD_RELOC_PPC64_ADDR16_HIGHERA34\",\n+  \"BFD_RELOC_PPC64_ADDR16_HIGHEST34\",\n+  \"BFD_RELOC_PPC64_ADDR16_HIGHESTA34\",\n+  \"BFD_RELOC_PPC64_REL16_HIGHER34\",\n+  \"BFD_RELOC_PPC64_REL16_HIGHERA34\",\n+  \"BFD_RELOC_PPC64_REL16_HIGHEST34\",\n+  \"BFD_RELOC_PPC64_REL16_HIGHESTA34\",\n+  \"BFD_RELOC_PPC64_D28\",\n+  \"BFD_RELOC_PPC64_PCREL28\",\n   \"BFD_RELOC_PPC_TLS\",\n   \"BFD_RELOC_PPC_TLSGD\",\n   \"BFD_RELOC_PPC_TLSLD\","
    },
    {
      "sha": "266e775fa4eeeae81f90f4558c86b985cc658280",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -2878,6 +2878,40 @@ ENUMX\n   BFD_RELOC_PPC64_ENTRY\n ENUMX\n   BFD_RELOC_PPC64_REL24_NOTOC\n+ENUMX\n+  BFD_RELOC_PPC64_D34\n+ENUMX\n+  BFD_RELOC_PPC64_D34_LO\n+ENUMX\n+  BFD_RELOC_PPC64_D34_HI30\n+ENUMX\n+  BFD_RELOC_PPC64_D34_HA30\n+ENUMX\n+  BFD_RELOC_PPC64_PCREL34\n+ENUMX\n+  BFD_RELOC_PPC64_GOT_PCREL34\n+ENUMX\n+  BFD_RELOC_PPC64_PLT_PCREL34\n+ENUMX\n+  BFD_RELOC_PPC64_ADDR16_HIGHER34\n+ENUMX\n+  BFD_RELOC_PPC64_ADDR16_HIGHERA34\n+ENUMX\n+  BFD_RELOC_PPC64_ADDR16_HIGHEST34\n+ENUMX\n+  BFD_RELOC_PPC64_ADDR16_HIGHESTA34\n+ENUMX\n+  BFD_RELOC_PPC64_REL16_HIGHER34\n+ENUMX\n+  BFD_RELOC_PPC64_REL16_HIGHERA34\n+ENUMX\n+  BFD_RELOC_PPC64_REL16_HIGHEST34\n+ENUMX\n+  BFD_RELOC_PPC64_REL16_HIGHESTA34\n+ENUMX\n+  BFD_RELOC_PPC64_D28\n+ENUMX\n+  BFD_RELOC_PPC64_PCREL28\n ENUMDOC\n   Power(rs6000) and PowerPC relocations.\n "
    },
    {
      "sha": "1caa4785dac937f6a3f8b9ca19b5348b4a9e253e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -1,3 +1,23 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (ppc_elf_suffix): Support @pcrel, @got@pcrel,\n+\t@plt@pcrel, @higher34, @highera34, @highest34, and @highesta34.\n+\t(fixup_size): Handle new powerxx relocs.\n+\t(md_assemble): Warn for @pcrel on non-prefix insns.\n+\tAccept @l, @h and @ha on prefix insns, and infer reloc without\n+\tany @ suffix.  Translate powerxx relocs to suit DQ and DS field\n+\tinstructions.  Include operand tests as well as opcode test to\n+\ttranslate BFD_RELOC_HI16_S to BFD_RELOC_PPC_16DX_HA.\n+\t(ppc_fix_adjustable): Return false for pcrel GOT and PLT relocs.\n+\t(md_apply_fix): Handle new powerxx relocs.\n+\t* config/tc-ppc.h (TC_FORCE_RELOCATION_SUB_LOCAL): Accept\n+\tBFD_RELOC_PPC64_ADDR16_HIGHER34, BFD_RELOC_PPC64_ADDR16_HIGHERA34,\n+\tBFD_RELOC_PPC64_ADDR16_HIGHEST34, BFD_RELOC_PPC64_ADDR16_HIGHESTA34,\n+\tBFD_RELOC_PPC64_D34, and BFD_RELOC_PPC64_D28.\n+\t* testsuite/gas/ppc/prefix-reloc.d,\n+\t* testsuite/gas/ppc/prefix-reloc.s: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n 2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n \t    Alan Modra  <amodra@gmail.com>\n "
    },
    {
      "sha": "64ff149b215a53af06224c4a2c93ccbe64e02a21",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 142,
      "deletions": 22,
      "changes": 164,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -2151,6 +2151,13 @@ ppc_elf_suffix (char **str_p, expressionS *exp_p)\n     MAP64 (\"tprel@highest\",\tBFD_RELOC_PPC64_TPREL16_HIGHEST),\n     MAP64 (\"tprel@highesta\",\tBFD_RELOC_PPC64_TPREL16_HIGHESTA),\n     MAP64 (\"notoc\",\t\tBFD_RELOC_PPC64_REL24_NOTOC),\n+    MAP64 (\"pcrel\",\t\tBFD_RELOC_PPC64_PCREL34),\n+    MAP64 (\"got@pcrel\",\t\tBFD_RELOC_PPC64_GOT_PCREL34),\n+    MAP64 (\"plt@pcrel\",\t\tBFD_RELOC_PPC64_PLT_PCREL34),\n+    MAP64 (\"higher34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHER34),\n+    MAP64 (\"highera34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHERA34),\n+    MAP64 (\"highest34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHEST34),\n+    MAP64 (\"highesta34\",\tBFD_RELOC_PPC64_ADDR16_HIGHESTA34),\n     { (char *) 0, 0, 0, 0,\tBFD_RELOC_NONE }\n   };\n \n@@ -2931,6 +2938,10 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC64_ADDR16_DS:\n     case BFD_RELOC_PPC64_ADDR16_HIGH:\n     case BFD_RELOC_PPC64_ADDR16_HIGHA:\n+    case BFD_RELOC_PPC64_ADDR16_HIGHER34:\n+    case BFD_RELOC_PPC64_ADDR16_HIGHERA34:\n+    case BFD_RELOC_PPC64_ADDR16_HIGHEST34:\n+    case BFD_RELOC_PPC64_ADDR16_HIGHESTA34:\n     case BFD_RELOC_PPC64_ADDR16_LO_DS:\n     case BFD_RELOC_PPC64_DTPREL16_DS:\n     case BFD_RELOC_PPC64_DTPREL16_HIGH:\n@@ -3018,9 +3029,13 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC64_REL16_HIGH:\n     case BFD_RELOC_PPC64_REL16_HIGHA:\n     case BFD_RELOC_PPC64_REL16_HIGHER:\n+    case BFD_RELOC_PPC64_REL16_HIGHER34:\n     case BFD_RELOC_PPC64_REL16_HIGHERA:\n+    case BFD_RELOC_PPC64_REL16_HIGHERA34:\n     case BFD_RELOC_PPC64_REL16_HIGHEST:\n+    case BFD_RELOC_PPC64_REL16_HIGHEST34:\n     case BFD_RELOC_PPC64_REL16_HIGHESTA:\n+    case BFD_RELOC_PPC64_REL16_HIGHESTA34:\n #ifdef OBJ_XCOFF\n     case BFD_RELOC_PPC_B16:\n #endif\n@@ -3100,12 +3115,21 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_64:\n     case BFD_RELOC_64_PLTOFF:\n     case BFD_RELOC_PPC64_ADDR64_LOCAL:\n+    case BFD_RELOC_PPC64_D28:\n+    case BFD_RELOC_PPC64_D34:\n+    case BFD_RELOC_PPC64_D34_LO:\n+    case BFD_RELOC_PPC64_D34_HI30:\n+    case BFD_RELOC_PPC64_D34_HA30:\n     case BFD_RELOC_PPC64_TOC:\n       size = 8;\n       break;\n \n     case BFD_RELOC_64_PCREL:\n     case BFD_RELOC_64_PLT_PCREL:\n+    case BFD_RELOC_PPC64_GOT_PCREL34:\n+    case BFD_RELOC_PPC64_PCREL28:\n+    case BFD_RELOC_PPC64_PCREL34:\n+    case BFD_RELOC_PPC64_PLT_PCREL34:\n       size = 8;\n       pcrel = TRUE;\n       break;\n@@ -3665,24 +3689,47 @@ md_assemble (char *str)\n \t\t  reloc = BFD_RELOC_PPC_TPREL16;\n \t\t  break;\n \n-\t\tcase BFD_RELOC_LO16:\n-\t\t  if ((operand->bitm | 0xf) != 0xffff\n-\t\t      || operand->shift != 0\n+\t\tcase BFD_RELOC_PPC64_PCREL34:\n+\t\t  if (operand->bitm == 0xfffffffULL)\n+\t\t    {\n+\t\t      reloc = BFD_RELOC_PPC64_PCREL28;\n+\t\t      break;\n+\t\t    }\n+\t\t  /* Fall through.  */\n+\t\tcase BFD_RELOC_PPC64_GOT_PCREL34:\n+\t\tcase BFD_RELOC_PPC64_PLT_PCREL34:\n+\t\t  if (operand->bitm != 0x3ffffffffULL\n \t\t      || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n+\t\t    as_warn (_(\"%s unsupported on this instruction\"), \"@pcrel\");\n+\t\t  break;\n+\n+\t\tcase BFD_RELOC_LO16:\n+\t\t  if (operand->bitm == 0x3ffffffffULL\n+\t\t      && (operand->flags & PPC_OPERAND_NEGATIVE) == 0)\n+\t\t    reloc = BFD_RELOC_PPC64_D34_LO;\n+\t\t  else if ((operand->bitm | 0xf) != 0xffff\n+\t\t\t   || operand->shift != 0\n+\t\t\t   || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n \t\t    as_warn (_(\"%s unsupported on this instruction\"), \"@l\");\n \t\t  break;\n \n \t\tcase BFD_RELOC_HI16:\n-\t\t  if (operand->bitm != 0xffff\n-\t\t      || operand->shift != 0\n-\t\t      || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n+\t\t  if (operand->bitm == 0x3ffffffffULL\n+\t\t      && (operand->flags & PPC_OPERAND_NEGATIVE) == 0)\n+\t\t    reloc = BFD_RELOC_PPC64_D34_HI30;\n+\t\t  else if (operand->bitm != 0xffff\n+\t\t\t   || operand->shift != 0\n+\t\t\t   || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n \t\t    as_warn (_(\"%s unsupported on this instruction\"), \"@h\");\n \t\t  break;\n \n \t\tcase BFD_RELOC_HI16_S:\n-\t\t  if (operand->bitm == 0xffff\n-\t\t      && operand->shift == (int) PPC_OPSHIFT_INV\n-\t\t      && opcode->opcode == (19 << 26) + (2 << 1))\n+\t\t  if (operand->bitm == 0x3ffffffffULL\n+\t\t      && (operand->flags & PPC_OPERAND_NEGATIVE) == 0)\n+\t\t    reloc = BFD_RELOC_PPC64_D34_HA30;\n+\t\t  else if (operand->bitm == 0xffff\n+\t\t\t   && operand->shift == (int) PPC_OPSHIFT_INV\n+\t\t\t   && opcode->opcode == (19 << 26) + (2 << 1))\n \t\t    /* addpcis.  */\n \t\t    reloc = BFD_RELOC_PPC_16DX_HA;\n \t\t  else if (operand->bitm != 0xffff\n@@ -3738,6 +3785,10 @@ md_assemble (char *str)\n \t\t}\n #endif\n \t    }\n+\t  else if (operand->bitm == 0x3ffffffffULL)\n+\t    reloc = BFD_RELOC_PPC64_D34;\n+\t  else if (operand->bitm == 0xfffffffULL)\n+\t    reloc = BFD_RELOC_PPC64_D28;\n \n \t  /* For the absolute forms of branches, convert the PC\n \t     relative form back into the absolute.  */\n@@ -3787,53 +3838,69 @@ md_assemble (char *str)\n \t\tcase BFD_RELOC_16:\n \t\t  reloc = BFD_RELOC_PPC64_ADDR16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_LO16:\n \t\t  reloc = BFD_RELOC_PPC64_ADDR16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_16_GOTOFF:\n \t\t  reloc = BFD_RELOC_PPC64_GOT16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_LO16_GOTOFF:\n \t\t  reloc = BFD_RELOC_PPC64_GOT16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_LO16_PLTOFF:\n \t\t  reloc = BFD_RELOC_PPC64_PLT16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_16_BASEREL:\n \t\t  reloc = BFD_RELOC_PPC64_SECTOFF_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_LO16_BASEREL:\n \t\t  reloc = BFD_RELOC_PPC64_SECTOFF_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_TOC16:\n \t\t  reloc = BFD_RELOC_PPC64_TOC16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC64_TOC16_LO:\n \t\t  reloc = BFD_RELOC_PPC64_TOC16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC64_PLTGOT16:\n \t\t  reloc = BFD_RELOC_PPC64_PLTGOT16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC64_PLTGOT16_LO:\n \t\t  reloc = BFD_RELOC_PPC64_PLTGOT16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_DTPREL16:\n \t\t  reloc = BFD_RELOC_PPC64_DTPREL16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_DTPREL16_LO:\n \t\t  reloc = BFD_RELOC_PPC64_DTPREL16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_TPREL16:\n \t\t  reloc = BFD_RELOC_PPC64_TPREL16_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_TPREL16_LO:\n \t\t  reloc = BFD_RELOC_PPC64_TPREL16_LO_DS;\n \t\t  break;\n+\n \t\tcase BFD_RELOC_PPC_GOT_DTPREL16:\n \t\tcase BFD_RELOC_PPC_GOT_DTPREL16_LO:\n \t\tcase BFD_RELOC_PPC_GOT_TPREL16:\n \t\tcase BFD_RELOC_PPC_GOT_TPREL16_LO:\n \t\t  break;\n+\n \t\tdefault:\n \t\t  as_bad (_(\"unsupported relocation for DS offset field\"));\n \t\t  break;\n@@ -6903,6 +6970,7 @@ ppc_fix_adjustable (fixS *fix)\n \t  && fix->fx_r_type != BFD_RELOC_PPC64_GOT16_LO_DS\n \t  && fix->fx_r_type != BFD_RELOC_16_GOT_PCREL\n \t  && fix->fx_r_type != BFD_RELOC_32_GOTOFF\n+\t  && fix->fx_r_type != BFD_RELOC_PPC64_GOT_PCREL34\n \t  && fix->fx_r_type != BFD_RELOC_24_PLT_PCREL\n \t  && fix->fx_r_type != BFD_RELOC_32_PLTOFF\n \t  && fix->fx_r_type != BFD_RELOC_32_PLT_PCREL\n@@ -6912,6 +6980,7 @@ ppc_fix_adjustable (fixS *fix)\n \t  && fix->fx_r_type != BFD_RELOC_64_PLTOFF\n \t  && fix->fx_r_type != BFD_RELOC_64_PLT_PCREL\n \t  && fix->fx_r_type != BFD_RELOC_PPC64_PLT16_LO_DS\n+\t  && fix->fx_r_type != BFD_RELOC_PPC64_PLT_PCREL34\n \t  && fix->fx_r_type != BFD_RELOC_PPC64_PLTGOT16\n \t  && fix->fx_r_type != BFD_RELOC_PPC64_PLTGOT16_LO\n \t  && fix->fx_r_type != BFD_RELOC_PPC64_PLTGOT16_HI\n@@ -7120,10 +7189,34 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \t  fixP->fx_r_type = BFD_RELOC_PPC64_REL16_HIGHESTA;\n \t  break;\n \n+\tcase BFD_RELOC_PPC64_ADDR16_HIGHER34:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_REL16_HIGHER34;\n+\t  break;\n+\n+\tcase BFD_RELOC_PPC64_ADDR16_HIGHERA34:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_REL16_HIGHERA34;\n+\t  break;\n+\n+\tcase BFD_RELOC_PPC64_ADDR16_HIGHEST34:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_REL16_HIGHEST34;\n+\t  break;\n+\n+\tcase BFD_RELOC_PPC64_ADDR16_HIGHESTA34:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_REL16_HIGHESTA34;\n+\t  break;\n+\n \tcase BFD_RELOC_PPC_16DX_HA:\n \t  fixP->fx_r_type = BFD_RELOC_PPC_REL16DX_HA;\n \t  break;\n \n+\tcase BFD_RELOC_PPC64_D34:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_PCREL34;\n+\t  break;\n+\n+\tcase BFD_RELOC_PPC64_D28:\n+\t  fixP->fx_r_type = BFD_RELOC_PPC64_PCREL28;\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -7370,6 +7463,8 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \tcase BFD_RELOC_PPC_VLE_SDAREL_HI16D:\n \tcase BFD_RELOC_PPC_VLE_SDAREL_HA16A:\n \tcase BFD_RELOC_PPC_VLE_SDAREL_HA16D:\n+\tcase BFD_RELOC_PPC64_GOT_PCREL34:\n+\tcase BFD_RELOC_PPC64_PLT_PCREL34:\n \t  gas_assert (fixP->fx_addsy != NULL);\n \t  /* Fallthru */\n \n@@ -7421,44 +7516,69 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n #else\n #define APPLY_RELOC 1\n #endif\n+      /* We need to call the insert function even when fieldval is\n+\t zero if the insert function would translate that zero to a\n+\t bit pattern other than all zeros.  */\n       if ((fieldval != 0 && APPLY_RELOC) || operand->insert != NULL)\n \t{\n-\t  unsigned long insn;\n+\t  uint64_t insn;\n \t  unsigned char *where;\n \n \t  /* Fetch the instruction, insert the fully resolved operand\n \t     value, and stuff the instruction back again.  */\n \t  where = (unsigned char *) fixP->fx_frag->fr_literal + fixP->fx_where;\n \t  if (target_big_endian)\n \t    {\n-\t      if (fixP->fx_size == 4)\n-\t\tinsn = bfd_getb32 (where);\n-\t      else\n+\t      if (fixP->fx_size < 4)\n \t\tinsn = bfd_getb16 (where);\n+\t      else\n+\t\t{\n+\t\t  insn = bfd_getb32 (where);\n+\t\t  if (fixP->fx_size > 4)\n+\t\t    insn = insn << 32 | bfd_getb32 (where + 4);\n+\t\t}\n \t    }\n \t  else\n \t    {\n-\t      if (fixP->fx_size == 4)\n-\t\tinsn = bfd_getl32 (where);\n-\t      else\n+\t      if (fixP->fx_size < 4)\n \t\tinsn = bfd_getl16 (where);\n+\t      else\n+\t\t{\n+\t\t  insn = bfd_getl32 (where);\n+\t\t  if (fixP->fx_size > 4)\n+\t\t    insn = insn << 32 | bfd_getl32 (where + 4);\n+\t\t}\n \t    }\n \t  insn = ppc_insert_operand (insn, operand, fieldval,\n \t\t\t\t     fixP->tc_fix_data.ppc_cpu,\n \t\t\t\t     fixP->fx_file, fixP->fx_line);\n \t  if (target_big_endian)\n \t    {\n-\t      if (fixP->fx_size == 4)\n-\t\tbfd_putb32 (insn, where);\n-\t      else\n+\t      if (fixP->fx_size < 4)\n \t\tbfd_putb16 (insn, where);\n+\t      else\n+\t\t{\n+\t\t  if (fixP->fx_size > 4)\n+\t\t    {\n+\t\t      bfd_putb32 (insn, where + 4);\n+\t\t      insn >>= 32;\n+\t\t    }\n+\t\t  bfd_putb32 (insn, where);\n+\t\t}\n \t    }\n \t  else\n \t    {\n-\t      if (fixP->fx_size == 4)\n-\t\tbfd_putl32 (insn, where);\n-\t      else\n+\t      if (fixP->fx_size < 4)\n \t\tbfd_putl16 (insn, where);\n+\t      else\n+\t\t{\n+\t\t  if (fixP->fx_size > 4)\n+\t\t    {\n+\t\t      bfd_putl32 (insn, where + 4);\n+\t\t      insn >>= 32;\n+\t\t    }\n+\t\t  bfd_putl32 (insn, where);\n+\t\t}\n \t    }\n \t}\n "
    },
    {
      "sha": "9de5c08441b5bd36768ecf5bc1ec9fc38299ad05",
      "filename": "gas/config/tc-ppc.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/config/tc-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/config/tc-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.h?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -273,7 +273,13 @@ extern int ppc_force_relocation (struct fix *);\n      || (FIX)->fx_r_type == BFD_RELOC_PPC64_HIGHER_S\t\t\\\n      || (FIX)->fx_r_type == BFD_RELOC_PPC64_HIGHEST\t\t\\\n      || (FIX)->fx_r_type == BFD_RELOC_PPC64_HIGHEST_S\t\t\\\n-     || (FIX)->fx_r_type == BFD_RELOC_PPC_16DX_HA))\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_ADDR16_HIGHER34\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_ADDR16_HIGHERA34\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_ADDR16_HIGHEST34\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_ADDR16_HIGHESTA34\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC_16DX_HA\t\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_D34\t\t\t\\\n+     || (FIX)->fx_r_type == BFD_RELOC_PPC64_D28))\n #endif\n \n #define TC_VALIDATE_FIX_SUB(FIX, SEG) 0"
    },
    {
      "sha": "1660d530f0a06911f3148477ae8a67f18defec51",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -116,3 +116,4 @@ run_dump_test \"htm\"\n run_dump_test \"titan\"\n run_dump_test \"prefix-align\"\n run_dump_test \"prefix-pcrel\"\n+run_dump_test \"prefix-reloc\""
    },
    {
      "sha": "9f554ac388d5a5f1e0c363ab90e89968968313f1",
      "filename": "gas/testsuite/gas/ppc/prefix-reloc.d",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/prefix-reloc.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/prefix-reloc.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-reloc.d?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -0,0 +1,35 @@\n+#as: -a64 -mfuture\n+#objdump: -dr -Mfuture\n+#name: Prefix insn relocations\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+   0:\t(00 00 00 06|06 00 00 00) \tpli     r9,0\n+   4:\t(00 00 20 39|39 20 00 00) \n+\t\t\t0: R_PPC64_D34_HA30\text\n+   8:\t(46 17 29 79|79 29 17 46) \trldicr  r9,r9,34,29\n+   c:\t(00 00 00 06|06 00 00 00) \tpaddi   r9,r9,0\n+  10:\t(00 00 29 39|39 29 00 00) \n+\t\t\tc: R_PPC64_D34_LO\text\n+  14:\t(00 00 10 04|04 10 00 00) \tpld     r3,0\n+  18:\t(00 00 60 e4|e4 60 00 00) \n+\t\t\t14: R_PPC64_PCREL34\text\n+  1c:\t(00 00 10 04|04 10 00 00) \tpld     r4,0\n+  20:\t(00 00 80 e4|e4 80 00 00) \n+\t\t\t1c: R_PPC64_GOT_PCREL34\text\n+  24:\t(00 00 10 04|04 10 00 00) \tpld     r5,0\n+  28:\t(00 00 a0 e4|e4 a0 00 00) \n+\t\t\t24: R_PPC64_PLT_PCREL34\text\n+  2c:\t(00 00 10 04|04 10 00 00) \tpld     r6,0\n+  30:\t(00 00 c0 e4|e4 c0 00 00) \n+\t\t\t2c: R_PPC64_PCREL34\text\n+  34:\t(00 00 00 04|04 00 00 00) \tpld     r7,0\\(0\\)\n+  38:\t(00 00 e0 e4|e4 e0 00 00) \n+\t\t\t34: R_PPC64_D34\text\n+  3c:\t(00 00 00 60|60 00 00 00) \tnop\n+  40:\t(00 00 10 04|04 10 00 00) \tpld     r8,0\n+  44:\t(00 00 00 e5|e5 00 00 00) \n+\t\t\t40: R_PPC64_PCREL34\text"
    },
    {
      "sha": "a2f23075dbbb3eed7ffe002eb0f27f8573733687",
      "filename": "gas/testsuite/gas/ppc/prefix-reloc.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/prefix-reloc.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/gas/testsuite/gas/ppc/prefix-reloc.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-reloc.s?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -0,0 +1,13 @@\n+ .text\n+ pli 9,ext@ha\n+ sldi 9,9,34\n+ paddi 9,9,ext@l\n+ pld 3,ext@pcrel\n+ pld 4,ext@got@pcrel\n+ pld 5,ext@plt@pcrel\n+0: pld 6,ext-0b(0),1\n+ pld 7,ext(0),0\n+# The following insn will need an alignment nop, testing the behaviour\n+# of \"dot\" in the expression.  Don't stupidly edit this file and lose\n+# the nop.\n+ pld 8,ext-.(0),1"
    },
    {
      "sha": "2e8408402fbe98d7efdb921f197806bf66581a7f",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -1,3 +1,15 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf/ppc64.h (R_PPC64_PLTSEQ_NOTOC, R_PPC64_PLTCALL_NOTOC),\n+\t(R_PPC64_PCREL_OPT, R_PPC64_D34, R_PPC64_D34_LO, R_PPC64_D34_HI30),\n+\t(R_PPC64_D34_HA30, R_PPC64_PCREL34, R_PPC64_GOT_PCREL34),\n+\t(R_PPC64_PLT_PCREL34, R_PPC64_PLT_PCREL34_NOTOC),\n+\t(R_PPC64_ADDR16_HIGHER34, R_PPC64_ADDR16_HIGHERA34),\n+\t(R_PPC64_ADDR16_HIGHEST34, R_PPC64_ADDR16_HIGHESTA34),\n+\t(R_PPC64_REL16_HIGHER34, R_PPC64_REL16_HIGHERA34),\n+\t(R_PPC64_REL16_HIGHEST34, R_PPC64_REL16_HIGHESTA34),\n+\t(R_PPC64_D28, R_PPC64_PCREL28): Define.\n+\n 2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n \t    Alan Modra  <amodra@gmail.com>\n "
    },
    {
      "sha": "e90c7fd2efc2532f751f8d11cf56131b09a38ebd",
      "filename": "include/elf/ppc64.h",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5663e321848545857a690f30a780187e3366bd2d/include/elf/ppc64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5663e321848545857a690f30a780187e3366bd2d/include/elf/ppc64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/ppc64.h?ref=5663e321848545857a690f30a780187e3366bd2d",
      "patch": "@@ -158,6 +158,30 @@ START_RELOC_NUMBERS (elf_ppc64_reloc_type)\n   RELOC_NUMBER (R_PPC64_PLTSEQ,\t\t   119)\n   RELOC_NUMBER (R_PPC64_PLTCALL,\t   120)\n \n+/* Powerxx support.  */\n+  RELOC_NUMBER (R_PPC64_PLTSEQ_NOTOC,\t   121)\n+  RELOC_NUMBER (R_PPC64_PLTCALL_NOTOC,\t   122)\n+  RELOC_NUMBER (R_PPC64_PCREL_OPT,\t   123)\n+\n+  RELOC_NUMBER (R_PPC64_D34,\t\t   128)\n+  RELOC_NUMBER (R_PPC64_D34_LO,\t\t   129)\n+  RELOC_NUMBER (R_PPC64_D34_HI30,\t   130)\n+  RELOC_NUMBER (R_PPC64_D34_HA30,\t   131)\n+  RELOC_NUMBER (R_PPC64_PCREL34,\t   132)\n+  RELOC_NUMBER (R_PPC64_GOT_PCREL34,\t   133)\n+  RELOC_NUMBER (R_PPC64_PLT_PCREL34,\t   134)\n+  RELOC_NUMBER (R_PPC64_PLT_PCREL34_NOTOC, 135)\n+  RELOC_NUMBER (R_PPC64_ADDR16_HIGHER34,   136)\n+  RELOC_NUMBER (R_PPC64_ADDR16_HIGHERA34,  137)\n+  RELOC_NUMBER (R_PPC64_ADDR16_HIGHEST34,  138)\n+  RELOC_NUMBER (R_PPC64_ADDR16_HIGHESTA34, 139)\n+  RELOC_NUMBER (R_PPC64_REL16_HIGHER34,    140)\n+  RELOC_NUMBER (R_PPC64_REL16_HIGHERA34,   141)\n+  RELOC_NUMBER (R_PPC64_REL16_HIGHEST34,   142)\n+  RELOC_NUMBER (R_PPC64_REL16_HIGHESTA34,  143)\n+  RELOC_NUMBER (R_PPC64_D28,\t\t   144)\n+  RELOC_NUMBER (R_PPC64_PCREL28,\t   145)\n+\n #ifndef RELOC_MACROS_GEN_FUNC\n /* Relocation only used internally by gas or ld.  If you need to use\n    these reloc numbers, you can change them to some other unused value"
    }
  ]
}