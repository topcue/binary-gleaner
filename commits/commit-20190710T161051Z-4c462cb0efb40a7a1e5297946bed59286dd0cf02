{
  "sha": "4c462cb0efb40a7a1e5297946bed59286dd0cf02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGM0NjJjYjBlZmI0MGE3YTFlNTI5Nzk0NmJlZDU5Mjg2ZGQwY2YwMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-07-10T16:10:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-07-10T16:10:51Z"
    },
    "message": "Make some bpstat functions use bool\n\nChange return type to bool and adjust function comments.\n\ngdb/ChangeLog:\n\n\t* breakpoint.h (bpstat_explains_signal, bpstat_causes_stop,\n\tbpstat_should_step): Return bool, adjust comments.\n\t* breakpoint.c (bpstat_explains_signal, bpstat_causes_stop,\n\tbpstat_should_step): Likewise.",
    "tree": {
      "sha": "1beed7f99b455b599c6c5322b904cc7f66edd435",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1beed7f99b455b599c6c5322b904cc7f66edd435"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c462cb0efb40a7a1e5297946bed59286dd0cf02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c462cb0efb40a7a1e5297946bed59286dd0cf02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c462cb0efb40a7a1e5297946bed59286dd0cf02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c462cb0efb40a7a1e5297946bed59286dd0cf02/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89abbcc26d891425678b8b463bc1fa81273fb54c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89abbcc26d891425678b8b463bc1fa81273fb54c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89abbcc26d891425678b8b463bc1fa81273fb54c"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 27,
    "deletions": 20
  },
  "files": [
    {
      "sha": "598d0924a2479115eae79c6c2f85d3fea0d1974f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4c462cb0efb40a7a1e5297946bed59286dd0cf02",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-10  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* breakpoint.h (bpstat_explains_signal, bpstat_causes_stop,\n+\tbpstat_should_step): Return bool, adjust comments.\n+\t* breakpoint.c (bpstat_explains_signal, bpstat_causes_stop,\n+\tbpstat_should_step): Likewise.\n+\n 2019-07-10  Alan Hayward  <alan.hayward@arm.com>\n \n \t* features/Makefile: Use feature target descriptions for Arm."
    },
    {
      "sha": "fc0d72e2407aab778365bab8335d91a489821af2",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=4c462cb0efb40a7a1e5297946bed59286dd0cf02",
      "patch": "@@ -4231,7 +4231,7 @@ bpstat_find_breakpoint (bpstat bsp, struct breakpoint *breakpoint)\n \n /* See breakpoint.h.  */\n \n-int\n+bool\n bpstat_explains_signal (bpstat bsp, enum gdb_signal sig)\n {\n   for (; bsp != NULL; bsp = bsp->next)\n@@ -4241,17 +4241,17 @@ bpstat_explains_signal (bpstat bsp, enum gdb_signal sig)\n \t  /* A moribund location can never explain a signal other than\n \t     GDB_SIGNAL_TRAP.  */\n \t  if (sig == GDB_SIGNAL_TRAP)\n-\t    return 1;\n+\t    return true;\n \t}\n       else\n \t{\n \t  if (bsp->breakpoint_at->ops->explains_signal (bsp->breakpoint_at,\n \t\t\t\t\t\t\tsig))\n-\t    return 1;\n+\t    return true;\n \t}\n     }\n \n-  return 0;\n+  return false;\n }\n \n /* Put in *NUM the breakpoint number of the first breakpoint we are\n@@ -5687,29 +5687,29 @@ bpstat_run_callbacks (bpstat bs_head)\n     }\n }\n \n-/* Nonzero if we should step constantly (e.g. watchpoints on machines\n-   without hardware support).  This isn't related to a specific bpstat,\n-   just to things like whether watchpoints are set.  */\n+/* See breakpoint.h.  */\n \n-int\n-bpstat_should_step (void)\n+bool\n+bpstat_should_step ()\n {\n   struct breakpoint *b;\n \n   ALL_BREAKPOINTS (b)\n     if (breakpoint_enabled (b) && b->type == bp_watchpoint && b->loc != NULL)\n-      return 1;\n-  return 0;\n+      return true;\n+  return false;\n }\n \n-int\n+/* See breakpoint.h.  */\n+\n+bool\n bpstat_causes_stop (bpstat bs)\n {\n   for (; bs != NULL; bs = bs->next)\n     if (bs->stop)\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n \f"
    },
    {
      "sha": "dfe7d158beb0dd68a86f2cfb7d7c20aba934194d",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c462cb0efb40a7a1e5297946bed59286dd0cf02/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=4c462cb0efb40a7a1e5297946bed59286dd0cf02",
      "patch": "@@ -1061,18 +1061,18 @@ extern void bpstat_run_callbacks (bpstat bs_head);\n /* Find the bpstat associated with a breakpoint.  NULL otherwise.  */\n bpstat bpstat_find_breakpoint (bpstat, struct breakpoint *);\n \n-/* Nonzero if a signal that we got in target_wait() was due to\n+/* True if a signal that we got in target_wait() was due to\n    circumstances explained by the bpstat; the signal is therefore not\n    random.  */\n-extern int bpstat_explains_signal (bpstat, enum gdb_signal);\n+extern bool bpstat_explains_signal (bpstat, enum gdb_signal);\n \n-/* Nonzero is this bpstat causes a stop.  */\n-extern int bpstat_causes_stop (bpstat);\n+/* True if this bpstat causes a stop.  */\n+extern bool bpstat_causes_stop (bpstat);\n \n-/* Nonzero if we should step constantly (e.g. watchpoints on machines\n+/* True if we should step constantly (e.g. watchpoints on machines\n    without hardware support).  This isn't related to a specific bpstat,\n    just to things like whether watchpoints are set.  */\n-extern int bpstat_should_step (void);\n+extern bool bpstat_should_step ();\n \n /* Print a message indicating what happened.  Returns nonzero to\n    say that only the source line should be printed after this (zero"
    }
  ]
}