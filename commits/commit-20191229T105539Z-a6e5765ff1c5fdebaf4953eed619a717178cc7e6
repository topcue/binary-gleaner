{
  "sha": "a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTZlNTc2NWZmMWM1ZmRlYmFmNDk1M2VlZDYxOWE3MTcxNzhjYzdlNg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T02:11:12Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T10:55:39Z"
    },
    "message": "PR15350, Fix compressed debug sections for PE targets\n\n\tPR 15350\n\t* bfd.c (bfd_update_compression_header): Write zlib header for\n\tformats other than ELF too.",
    "tree": {
      "sha": "168261734dfa6a6f1e32b0adcf7bd1344e611f7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/168261734dfa6a6f1e32b0adcf7bd1344e611f7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6e5765ff1c5fdebaf4953eed619a717178cc7e6/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "25d8195c020adf3f8ffc6c811df3d8cbbc09a4bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25d8195c020adf3f8ffc6c811df3d8cbbc09a4bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/25d8195c020adf3f8ffc6c811df3d8cbbc09a4bd"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 48,
    "deletions": 43
  },
  "files": [
    {
      "sha": "af2ddfa5e0cfe181c03c089b230a962e69f8e259",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6e5765ff1c5fdebaf4953eed619a717178cc7e6/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6e5765ff1c5fdebaf4953eed619a717178cc7e6/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-29  Hannes Domani  <ssbssa@yahoo.de>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\tPR 15350\n+\t* bfd.c (bfd_update_compression_header): Write zlib header for\n+\tformats other than ELF too.\n+\n 2019-12-26  Alan Modra  <amodra@gmail.com>\n \n \t* som.c (setup_sections): Don't overflow space_strings_size.  Use"
    },
    {
      "sha": "b6821fa20f607f5dd815629627d266bab28e10eb",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 41,
      "deletions": 43,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6e5765ff1c5fdebaf4953eed619a717178cc7e6/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6e5765ff1c5fdebaf4953eed619a717178cc7e6/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=a6e5765ff1c5fdebaf4953eed619a717178cc7e6",
      "patch": "@@ -2540,59 +2540,57 @@ void\n bfd_update_compression_header (bfd *abfd, bfd_byte *contents,\n \t\t\t       asection *sec)\n {\n-  if ((abfd->flags & BFD_COMPRESS) != 0)\n+  if ((abfd->flags & BFD_COMPRESS) == 0)\n+    abort ();\n+\n+  switch (bfd_get_flavour (abfd))\n     {\n-      if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)\n+    case bfd_target_elf_flavour:\n+      if ((abfd->flags & BFD_COMPRESS_GABI) != 0)\n \t{\n-\t  if ((abfd->flags & BFD_COMPRESS_GABI) != 0)\n-\t    {\n-\t      const struct elf_backend_data *bed\n-\t\t= get_elf_backend_data (abfd);\n+\t  const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n \n-\t      /* Set the SHF_COMPRESSED bit.  */\n-\t      elf_section_flags (sec) |= SHF_COMPRESSED;\n+\t  /* Set the SHF_COMPRESSED bit.  */\n+\t  elf_section_flags (sec) |= SHF_COMPRESSED;\n \n-\t      if (bed->s->elfclass == ELFCLASS32)\n-\t\t{\n-\t\t  Elf32_External_Chdr *echdr\n-\t\t    = (Elf32_External_Chdr *) contents;\n-\t\t  bfd_put_32 (abfd, ELFCOMPRESS_ZLIB, &echdr->ch_type);\n-\t\t  bfd_put_32 (abfd, sec->size, &echdr->ch_size);\n-\t\t  bfd_put_32 (abfd, 1 << sec->alignment_power,\n-\t\t\t      &echdr->ch_addralign);\n-\t\t  /* bfd_log2 (alignof (Elf32_Chdr)) */\n-\t\t  bfd_set_section_alignment (sec, 2);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  Elf64_External_Chdr *echdr\n-\t\t    = (Elf64_External_Chdr *) contents;\n-\t\t  bfd_put_32 (abfd, ELFCOMPRESS_ZLIB, &echdr->ch_type);\n-\t\t  bfd_put_32 (abfd, 0, &echdr->ch_reserved);\n-\t\t  bfd_put_64 (abfd, sec->size, &echdr->ch_size);\n-\t\t  bfd_put_64 (abfd, 1 << sec->alignment_power,\n-\t\t\t      &echdr->ch_addralign);\n-\t\t  /* bfd_log2 (alignof (Elf64_Chdr)) */\n-\t\t  bfd_set_section_alignment (sec, 3);\n-\t\t}\n+\t  if (bed->s->elfclass == ELFCLASS32)\n+\t    {\n+\t      Elf32_External_Chdr *echdr = (Elf32_External_Chdr *) contents;\n+\t      bfd_put_32 (abfd, ELFCOMPRESS_ZLIB, &echdr->ch_type);\n+\t      bfd_put_32 (abfd, sec->size, &echdr->ch_size);\n+\t      bfd_put_32 (abfd, 1 << sec->alignment_power,\n+\t\t\t  &echdr->ch_addralign);\n+\t      /* bfd_log2 (alignof (Elf32_Chdr)) */\n+\t      bfd_set_section_alignment (sec, 2);\n \t    }\n \t  else\n \t    {\n-\t      /* Clear the SHF_COMPRESSED bit.  */\n-\t      elf_section_flags (sec) &= ~SHF_COMPRESSED;\n-\n-\t      /* Write the zlib header.  It should be \"ZLIB\" followed by\n-\t\t the uncompressed section size, 8 bytes in big-endian\n-\t\t order.  */\n-\t      memcpy (contents, \"ZLIB\", 4);\n-\t      bfd_putb64 (sec->size, contents + 4);\n-\t      /* No way to keep the original alignment, just use 1 always. */\n-\t      bfd_set_section_alignment (sec, 0);\n+\t      Elf64_External_Chdr *echdr = (Elf64_External_Chdr *) contents;\n+\t      bfd_put_32 (abfd, ELFCOMPRESS_ZLIB, &echdr->ch_type);\n+\t      bfd_put_32 (abfd, 0, &echdr->ch_reserved);\n+\t      bfd_put_64 (abfd, sec->size, &echdr->ch_size);\n+\t      bfd_put_64 (abfd, 1 << sec->alignment_power,\n+\t\t\t  &echdr->ch_addralign);\n+\t      /* bfd_log2 (alignof (Elf64_Chdr)) */\n+\t      bfd_set_section_alignment (sec, 3);\n \t    }\n+\t  break;\n \t}\n+\n+      /* Clear the SHF_COMPRESSED bit.  */\n+      elf_section_flags (sec) &= ~SHF_COMPRESSED;\n+      /* Fall through.  */\n+\n+    default:\n+      /* Write the zlib header.  It should be \"ZLIB\" followed by\n+\t the uncompressed section size, 8 bytes in big-endian\n+\t order.  */\n+      memcpy (contents, \"ZLIB\", 4);\n+      bfd_putb64 (sec->size, contents + 4);\n+      /* No way to keep the original alignment, just use 1 always. */\n+      bfd_set_section_alignment (sec, 0);\n+      break;\n     }\n-  else\n-    abort ();\n }\n \n /*"
    }
  ]
}