{
  "sha": "43d5901dedc7d0eefd7b677f555a4cbf470ee455",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDNkNTkwMWRlZGM3ZDBlZWZkN2I2NzdmNTU1YTRjYmY0NzBlZTQ1NQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-22T11:13:11Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-28T09:27:54Z"
    },
    "message": "gdb/python: make more use of RegisterDescriptors\n\nThis commit unifies all of the Python register lookup code (used by\nFrame.read_register, PendingFrame.read_register, and\ngdb.UnwindInfo.add_saved_register), and adds support for using a\ngdb.RegisterDescriptor for register lookup.\n\nCurrently the register unwind code (PendingFrame and UnwindInfo) allow\nregisters to be looked up either by name, or by GDB's internal\nnumber.  I suspect the number was added for performance reasons, when\nunwinding we don't want to repeatedly map from name to number for\nevery unwind.  However, this kind-of sucks, it means Python scripts\ncould include GDB's internal register numbers, and if we ever change\nthis numbering in the future users scripts will break in unexpected\nways.\n\nMeanwhile, the Frame.read_register method only supports accessing\nregisters using a string, the register name.\n\nThis commit unifies all of the register to register-number lookup code\nin our Python bindings, and adds a third choice into the mix, the use\nof gdb.RegisterDescriptor.\n\nThe register descriptors can be looked up by name, but once looked up,\nthey contain GDB's register number, and so provide all of the\nperformance benefits of using a register number directly.  However, as\nthey are looked up by name we are no longer tightly binding the Python\nAPI to GDB's internal numbering scheme.\n\nAs we may already have scripts in the wild that are using the register\nnumbers directly I have kept support for this in the API, but I have\nlisted this method last in the manual, and I have tried to stress that\nthis is NOT a good method to use and that users should use either a\nstring or register descriptor approach.\n\nAfter this commit all existing Python code should function as before,\nbut users now have new options for how to identify registers.\n\ngdb/ChangeLog:\n\n\t* python/py-frame.c: Remove 'user-regs.h' include.\n\t(frapy_read_register): Rewrite to make use of\n\tgdbpy_parse_register_id.\n\t* python/py-registers.c (gdbpy_parse_register_id): New function,\n\tmoved here from python/py-unwind.c.  Updated the return type, and\n\talso accepts register descriptor objects.\n\t* python/py-unwind.c: Remove 'user-regs.h' include.\n\t(pyuw_parse_register_id): Moved to python/py-registers.c.\n\t(unwind_infopy_add_saved_register): Update to use\n\tgdbpy_parse_register_id.\n\t(pending_framepy_read_register): Likewise.\n\t* python/python-internal.h (gdbpy_parse_register_id): Declare.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-unwind.py: Update to make use of a register\n\tdescriptor.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Unwinding Frames in Python): Update descriptions\n\tfor PendingFrame.read_register and\n\tgdb.UnwindInfo.add_saved_register.\n\t(Frames In Python): Update description of Frame.read_register.",
    "tree": {
      "sha": "3de8979071da95938c825d591c4ced4ca321cccc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3de8979071da95938c825d591c4ced4ca321cccc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/43d5901dedc7d0eefd7b677f555a4cbf470ee455",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43d5901dedc7d0eefd7b677f555a4cbf470ee455",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/43d5901dedc7d0eefd7b677f555a4cbf470ee455",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43d5901dedc7d0eefd7b677f555a4cbf470ee455/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14fa8fb3073dfdb8736ccf6bde6572d8b226c4cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14fa8fb3073dfdb8736ccf6bde6572d8b226c4cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14fa8fb3073dfdb8736ccf6bde6572d8b226c4cf"
    }
  ],
  "stats": {
    "total": 210,
    "additions": 153,
    "deletions": 57
  },
  "files": [
    {
      "sha": "234dc2407864a73bec9dae65e4aedf79c50d764b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -1,3 +1,18 @@\n+2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-frame.c: Remove 'user-regs.h' include.\n+\t(frapy_read_register): Rewrite to make use of\n+\tgdbpy_parse_register_id.\n+\t* python/py-registers.c (gdbpy_parse_register_id): New function,\n+\tmoved here from python/py-unwind.c.  Updated the return type, and\n+\talso accepts register descriptor objects.\n+\t* python/py-unwind.c: Remove 'user-regs.h' include.\n+\t(pyuw_parse_register_id): Moved to python/py-registers.c.\n+\t(unwind_infopy_add_saved_register): Update to use\n+\tgdbpy_parse_register_id.\n+\t(pending_framepy_read_register): Likewise.\n+\t* python/python-internal.h (gdbpy_parse_register_id): Declare.\n+\n 2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-registers.c: Add 'user-regs.h' include."
    },
    {
      "sha": "76a2d9e724a58c47e19913c6f59a0722b9bb94d3",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Unwinding Frames in Python): Update descriptions\n+\tfor PendingFrame.read_register and\n+\tgdb.UnwindInfo.add_saved_register.\n+\t(Frames In Python): Update description of Frame.read_register.\n+\n 2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texi (Registers In Python): Document new find function."
    },
    {
      "sha": "9bb9f3c2a6b74a299f77027b57978cf853f1545d",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 30,
      "deletions": 12,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -2458,12 +2458,11 @@ provides a method to read frame's registers:\n \n @defun PendingFrame.read_register (reg)\n This method returns the contents of the register @var{reg} in the\n-frame as a @code{gdb.Value} object.  @var{reg} can be either a\n-register number or a register name; the values are platform-specific.\n-They are usually found in the corresponding\n-@file{@var{platform}-tdep.h} file in the @value{GDBN} source tree.  If\n-@var{reg} does not name a register for the current architecture, this\n-method will throw an exception.\n+frame as a @code{gdb.Value} object.  For a description of the\n+acceptable values of @var{reg} see\n+@ref{gdbpy_frame_read_register,,Frame.read_register}.  If @var{reg}\n+does not name a register for the current architecture, this method\n+will throw an exception.\n \n Note that this method will always return a @code{gdb.Value} for a\n valid register name.  This does not mean that the value will be valid.\n@@ -2532,8 +2531,8 @@ create a @code{gdb.UnwindInfo} instance.  Use the following method to\n specify caller registers that have been saved in this frame:\n \n @defun gdb.UnwindInfo.add_saved_register (reg, value)\n-@var{reg} identifies the register.  It can be a number or a name, just\n-as for the @code{PendingFrame.read_register} method above.\n+@var{reg} identifies the register, for a description of the acceptable\n+values see @ref{gdbpy_frame_read_register,,Frame.read_register}.\n @var{value} is a register value (a @code{gdb.Value} object).\n @end defun\n \n@@ -4687,10 +4686,29 @@ Return the frame's symtab and line object.\n \n @anchor{gdbpy_frame_read_register}\n @defun Frame.read_register (register)\n-Return the value of @var{register} in this frame.  The @var{register}\n-argument must be a string (e.g., @code{'sp'} or @code{'rax'}).\n-Returns a @code{Gdb.Value} object.  Throws an exception if @var{register}\n-does not exist.\n+Return the value of @var{register} in this frame.  Returns a\n+@code{Gdb.Value} object.  Throws an exception if @var{register} does\n+not exist.  The @var{register} argument must be one of the following:\n+@enumerate\n+@item\n+A string that is the name of a valid register (e.g., @code{'sp'} or\n+@code{'rax'}).\n+@item\n+A @code{gdb.RegisterDescriptor} object (@pxref{Registers In Python}).\n+@item\n+A @value{GDBN} internal, platform specific number.  Using these\n+numbers is supported for historic reasons, but is not recommended as\n+future changes to @value{GDBN} could change the mapping between\n+numbers and the registers they represent, breaking any Python code\n+that uses the platform-specific numbers.  The numbers are usually\n+found in the corresponding @file{@var{platform}-tdep.h} file in the\n+@value{GDBN} source tree.\n+@end enumerate\n+Using a string to access registers will be slightly slower than the\n+other two methods as @value{GDBN} must look up the mapping between\n+name and internal register number.  If performance is critical\n+consider looking up and caching a @code{gdb.RegisterDescriptor}\n+object.\n @end defun\n \n @defun Frame.read_var (variable @r{[}, block@r{]})"
    },
    {
      "sha": "e121afb222da46092eb9d7652458d69a5f19817f",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -27,7 +27,6 @@\n #include \"python-internal.h\"\n #include \"symfile.h\"\n #include \"objfiles.h\"\n-#include \"user-regs.h\"\n \n typedef struct {\n   PyObject_HEAD\n@@ -242,27 +241,30 @@ frapy_pc (PyObject *self, PyObject *args)\n static PyObject *\n frapy_read_register (PyObject *self, PyObject *args)\n {\n-  const char *regnum_str;\n+  PyObject *pyo_reg_id;\n   struct value *val = NULL;\n \n-  if (!PyArg_ParseTuple (args, \"s\", &regnum_str))\n+  if (!PyArg_UnpackTuple (args, \"read_register\", 1, 1, &pyo_reg_id))\n     return NULL;\n-\n   try\n     {\n       struct frame_info *frame;\n       int regnum;\n \n       FRAPY_REQUIRE_VALID (self, frame);\n \n-      regnum = user_reg_map_name_to_regnum (get_frame_arch (frame),\n-                                            regnum_str,\n-                                            strlen (regnum_str));\n-      if (regnum >= 0)\n-        val = value_of_register (regnum, frame);\n+      if (!gdbpy_parse_register_id (get_frame_arch (frame), pyo_reg_id,\n+\t\t\t\t    &regnum))\n+\t{\n+\t  PyErr_SetString (PyExc_ValueError, \"Bad register\");\n+\t  return NULL;\n+\t}\n+\n+      gdb_assert (regnum >= 0);\n+      val = value_of_register (regnum, frame);\n \n       if (val == NULL)\n-        PyErr_SetString (PyExc_ValueError, _(\"Unknown register.\"));\n+        PyErr_SetString (PyExc_ValueError, _(\"Can't read register.\"));\n     }\n   catch (const gdb_exception &except)\n     {"
    },
    {
      "sha": "516d43d7116fd10abeaaf5491198d9439d860432",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -370,6 +370,59 @@ register_descriptor_iter_find (PyObject *self, PyObject *args, PyObject *kw)\n   Py_RETURN_NONE;\n }\n \n+/* See python-internal.h.  */\n+\n+bool\n+gdbpy_parse_register_id (struct gdbarch *gdbarch, PyObject *pyo_reg_id,\n+\t\t\t int *reg_num)\n+{\n+  gdb_assert (pyo_reg_id != NULL);\n+\n+  /* The register could be a string, its name.  */\n+  if (gdbpy_is_string (pyo_reg_id))\n+    {\n+      gdb::unique_xmalloc_ptr<char> reg_name (gdbpy_obj_to_string (pyo_reg_id));\n+\n+      if (reg_name != NULL)\n+\t{\n+\t  *reg_num = user_reg_map_name_to_regnum (gdbarch, reg_name.get (),\n+\t\t\t\t\t\t  strlen (reg_name.get ()));\n+\t  return *reg_num >= 0;\n+\t}\n+    }\n+  /* The register could be its internal GDB register number.  */\n+  else if (PyInt_Check (pyo_reg_id))\n+    {\n+      long value;\n+      if (gdb_py_int_as_long (pyo_reg_id, &value) && (int) value == value)\n+        {\n+\t  if (user_reg_map_regnum_to_name (gdbarch, value) != NULL)\n+\t    {\n+\t      *reg_num = (int) value;\n+\t      return true;\n+\t    }\n+        }\n+    }\n+  /* The register could be a gdb.RegisterDescriptor object.  */\n+  else if (PyObject_IsInstance (pyo_reg_id,\n+\t\t\t   (PyObject *) &register_descriptor_object_type))\n+    {\n+      register_descriptor_object *reg\n+\t= (register_descriptor_object *) pyo_reg_id;\n+      if (reg->gdbarch == gdbarch)\n+\t{\n+\t  *reg_num = reg->regnum;\n+\t  return true;\n+\t}\n+      else\n+\tPyErr_SetString (PyExc_ValueError,\n+\t\t\t _(\"Invalid Architecture in RegisterDescriptor\"));\n+    }\n+\n+  gdb_assert (PyErr_Occurred ());\n+  return false;\n+}\n+\n /* Initializes the new Python classes from this file in the gdb module.  */\n \n int"
    },
    {
      "sha": "55d6a310c93573e66d92802f434f86b4fc33ce9e",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 2,
      "deletions": 34,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -27,7 +27,6 @@\n #include \"python-internal.h\"\n #include \"regcache.h\"\n #include \"valprint.h\"\n-#include \"user-regs.h\"\n \n #define TRACE_PY_UNWIND(level, args...) if (pyuw_debug >= level)  \\\n   { fprintf_unfiltered (gdb_stdlog, args); }\n@@ -101,37 +100,6 @@ static unsigned int pyuw_debug = 0;\n \n static struct gdbarch_data *pyuw_gdbarch_data;\n \n-/* Parses register id, which can be either a number or a name.\n-   Returns 1 on success, 0 otherwise.  */\n-\n-static int\n-pyuw_parse_register_id (struct gdbarch *gdbarch, PyObject *pyo_reg_id,\n-                        int *reg_num)\n-{\n-  if (pyo_reg_id == NULL)\n-    return 0;\n-  if (gdbpy_is_string (pyo_reg_id))\n-    {\n-      gdb::unique_xmalloc_ptr<char> reg_name (gdbpy_obj_to_string (pyo_reg_id));\n-\n-      if (reg_name == NULL)\n-        return 0;\n-      *reg_num = user_reg_map_name_to_regnum (gdbarch, reg_name.get (),\n-                                              strlen (reg_name.get ()));\n-      return *reg_num >= 0;\n-    }\n-  else if (PyInt_Check (pyo_reg_id))\n-    {\n-      long value;\n-      if (gdb_py_int_as_long (pyo_reg_id, &value) && (int) value == value)\n-        {\n-          *reg_num = (int) value;\n-          return user_reg_map_regnum_to_name (gdbarch, *reg_num) != NULL;\n-        }\n-    }\n-  return 0;\n-}\n-\n /* Convert gdb.Value instance to inferior's pointer.  Return 1 on success,\n    0 on failure.  */\n \n@@ -275,7 +243,7 @@ unwind_infopy_add_saved_register (PyObject *self, PyObject *args)\n   if (!PyArg_UnpackTuple (args, \"previous_frame_register\", 2, 2,\n                           &pyo_reg_id, &pyo_reg_value))\n     return NULL;\n-  if (!pyuw_parse_register_id (pending_frame->gdbarch, pyo_reg_id, &regnum))\n+  if (!gdbpy_parse_register_id (pending_frame->gdbarch, pyo_reg_id, &regnum))\n     {\n       PyErr_SetString (PyExc_ValueError, \"Bad register\");\n       return NULL;\n@@ -376,7 +344,7 @@ pending_framepy_read_register (PyObject *self, PyObject *args)\n     }\n   if (!PyArg_UnpackTuple (args, \"read_register\", 1, 1, &pyo_reg_id))\n     return NULL;\n-  if (!pyuw_parse_register_id (pending_frame->gdbarch, pyo_reg_id, &regnum))\n+  if (!gdbpy_parse_register_id (pending_frame->gdbarch, pyo_reg_id, &regnum))\n     {\n       PyErr_SetString (PyExc_ValueError, \"Bad register\");\n       return NULL;"
    },
    {
      "sha": "6874543441bf548b4d9be9c7b77c659162fb41a9",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -776,4 +776,23 @@ struct Py_buffer_deleter\n /* A unique_ptr specialization for Py_buffer.  */\n typedef std::unique_ptr<Py_buffer, Py_buffer_deleter> Py_buffer_up;\n \n+/* Parse a register number from PYO_REG_ID and place the register number\n+   into *REG_NUM.  The register is a register for GDBARCH.\n+\n+   If a register is parsed successfully then *REG_NUM will have been\n+   updated, and true is returned.  Otherwise the contents of *REG_NUM are\n+   undefined, and false is returned.\n+\n+   The PYO_REG_ID object can be a string, the name of the register.  This\n+   is the slowest approach as GDB has to map the name to a number for each\n+   call.  Alternatively PYO_REG_ID can be an internal GDB register\n+   number.  This is quick but should not be encouraged as this means\n+   Python scripts are now dependent on GDB's internal register numbering.\n+   Final PYO_REG_ID can be a gdb.RegisterDescriptor object, these objects\n+   can be looked up by name once, and then cache the register number so\n+   should be as quick as using a register number.  */\n+\n+extern bool gdbpy_parse_register_id (struct gdbarch *gdbarch,\n+\t\t\t\t     PyObject *pyo_reg_id, int *reg_num);\n+\n #endif /* PYTHON_PYTHON_INTERNAL_H */"
    },
    {
      "sha": "5ae258820e64f745eb3750f9f293cf2798384777",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-unwind.py: Update to make use of a register\n+\tdescriptor.\n+\n 2020-07-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-arch-reg-names.exp: Add additional tests."
    },
    {
      "sha": "59602d69028293f3433d462a82eb1f21eda885d2",
      "filename": "gdb/testsuite/gdb.python/py-unwind.py",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/testsuite/gdb.python/py-unwind.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43d5901dedc7d0eefd7b677f555a4cbf470ee455/gdb/testsuite/gdb.python/py-unwind.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-unwind.py?ref=43d5901dedc7d0eefd7b677f555a4cbf470ee455",
      "patch": "@@ -33,12 +33,19 @@ def pc(self):\n class TestUnwinder(Unwinder):\n     AMD64_RBP = 6\n     AMD64_RSP = 7\n-    AMD64_RIP = 16\n+    AMD64_RIP = None\n \n     def __init__(self):\n         Unwinder.__init__(self, \"test unwinder\")\n         self.char_ptr_t = gdb.lookup_type(\"unsigned char\").pointer()\n         self.char_ptr_ptr_t = self.char_ptr_t.pointer()\n+        self._last_arch = None\n+\n+    # Update the register descriptor AMD64_RIP based on ARCH.\n+    def _update_register_descriptors (self, arch):\n+        if (self._last_arch != arch):\n+            TestUnwinder.AMD64_RIP = arch.registers ().find (\"rip\")\n+            self._last_arch = arch\n \n     def _read_word(self, address):\n         return address.cast(self.char_ptr_ptr_t).dereference()\n@@ -77,6 +84,8 @@ def __call__(self, pending_frame):\n         if (inf_arch != frame_arch):\n             raise gdb.GdbError (\"architecture mismatch\")\n \n+        self._update_register_descriptors (frame_arch)\n+\n         try:\n             # NOTE: the registers in Unwinder API can be referenced\n             # either by name or by number. The code below uses both"
    }
  ]
}