{
  "sha": "12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTJlN2MzNWVjM2MwOTc5M2VkOTYxM2NkZjY5NmI5ZjBmNGRkODZlYw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:58:42Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:58:42Z"
    },
    "message": "infcall: refactor 'call_function_by_hand_dummy'\n\nExtract out the code region that reserves stack space to a separate\nfunction.\n\nFix the comment of 'call_function_by_hand_dummy' to remove reference\nto the NARGS argument that was removed in commit (e71585ffe2e \"Use\ngdb:array_view in call_function_by_hand & friends\").\n\ngdb/ChangeLog:\n2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* infcall.c (call_function_by_hand_dummy): Fix the function\n\tcomment.  And extract out a code section into...\n\t(reserve_stack_space): ...this new function.\n\nChange-Id: I8938ef4134aff68a0a21724aaa2406bfe453438a",
    "tree": {
      "sha": "b0f8fee493a95e6556b0f4ba301199bf4753edec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b0f8fee493a95e6556b0f4ba301199bf4753edec"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "37055cada860277ee53b61bb8fd57293fdfa840b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37055cada860277ee53b61bb8fd57293fdfa840b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/37055cada860277ee53b61bb8fd57293fdfa840b"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 45,
    "deletions": 25
  },
  "files": [
    {
      "sha": "a976d8f9a712e8d3c15ee52f653e4dc9ae7a001b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* infcall.c (call_function_by_hand_dummy): Fix the function\n+\tcomment.  And extract out a code section into...\n+\t(reserve_stack_space): ...this new function.\n+\n 2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* infcall.c (value_arg_coerce): Remove an unused parameter."
    },
    {
      "sha": "583f0deef0e903536ed03a73f77e0cd97a48e504",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 39,
      "deletions": 25,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=12e7c35ec3c09793ed9613cdf696b9f0f4dd86ec",
      "patch": "@@ -668,6 +668,42 @@ run_inferior_call (struct call_thread_fsm *sm,\n   return caught_error;\n }\n \n+/* Reserve space on the stack for a value of the given type.\n+   Return the address of the allocated space.\n+   Make certain that the value is correctly aligned.\n+   The SP argument is modified.  */\n+\n+static CORE_ADDR\n+reserve_stack_space (const type *values_type, CORE_ADDR &sp)\n+{\n+  struct frame_info *frame = get_current_frame ();\n+  struct gdbarch *gdbarch = get_frame_arch (frame);\n+  CORE_ADDR addr = 0;\n+\n+  if (gdbarch_inner_than (gdbarch, 1, 2))\n+    {\n+      /* Stack grows downward.  Align STRUCT_ADDR and SP after\n+\t making space.  */\n+      sp -= TYPE_LENGTH (values_type);\n+      if (gdbarch_frame_align_p (gdbarch))\n+\tsp = gdbarch_frame_align (gdbarch, sp);\n+      addr = sp;\n+    }\n+  else\n+    {\n+      /* Stack grows upward.  Align the frame, allocate space, and\n+\t then again, re-align the frame???  */\n+      if (gdbarch_frame_align_p (gdbarch))\n+\tsp = gdbarch_frame_align (gdbarch, sp);\n+      addr = sp;\n+      sp += TYPE_LENGTH (values_type);\n+      if (gdbarch_frame_align_p (gdbarch))\n+\tsp = gdbarch_frame_align (gdbarch, sp);\n+    }\n+\n+  return addr;\n+}\n+\n /* See infcall.h.  */\n \n struct value *\n@@ -689,7 +725,7 @@ call_function_by_hand (struct value *function,\n    making dummy frames be different from normal frames, consider that.  */\n \n /* Perform a function call in the inferior.\n-   ARGS is a vector of values of arguments (NARGS of them).\n+   ARGS is a vector of values of arguments.\n    FUNCTION is a value, the function to be called.\n    Returns a value representing what the function returned.\n    May fail to return, if a breakpoint or signal is hit\n@@ -989,8 +1025,7 @@ call_function_by_hand_dummy (struct value *function,\n     }\n \n   /* Reserve space for the return structure to be written on the\n-     stack, if necessary.  Make certain that the value is correctly\n-     aligned.\n+     stack, if necessary.\n \n      While evaluating expressions, we reserve space on the stack for\n      return values of class type even if the language ABI and the target\n@@ -1005,28 +1040,7 @@ call_function_by_hand_dummy (struct value *function,\n \n   if (return_method != return_method_normal\n       || (stack_temporaries && class_or_union_p (values_type)))\n-    {\n-      if (gdbarch_inner_than (gdbarch, 1, 2))\n-\t{\n-\t  /* Stack grows downward.  Align STRUCT_ADDR and SP after\n-             making space for the return value.  */\n-\t  sp -= TYPE_LENGTH (values_type);\n-\t  if (gdbarch_frame_align_p (gdbarch))\n-\t    sp = gdbarch_frame_align (gdbarch, sp);\n-\t  struct_addr = sp;\n-\t}\n-      else\n-\t{\n-\t  /* Stack grows upward.  Align the frame, allocate space, and\n-             then again, re-align the frame???  */\n-\t  if (gdbarch_frame_align_p (gdbarch))\n-\t    sp = gdbarch_frame_align (gdbarch, sp);\n-\t  struct_addr = sp;\n-\t  sp += TYPE_LENGTH (values_type);\n-\t  if (gdbarch_frame_align_p (gdbarch))\n-\t    sp = gdbarch_frame_align (gdbarch, sp);\n-\t}\n-    }\n+    struct_addr = reserve_stack_space (values_type, sp);\n \n   std::vector<struct value *> new_args;\n   if (return_method == return_method_hidden_param)"
    }
  ]
}