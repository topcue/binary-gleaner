{
  "sha": "aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWFiMmMyN2Q5ZjAxZDY2N2YxYjMzNTZmYmNhMmQ5MzFiZmE2YzU5OQ==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:56:12Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:56:12Z"
    },
    "message": "[binutils][arm] BFloat16 enablement [4/X]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions) to binutils.\n\nThis patch introduces BFloat16 instructions to the arm backend.\nThe following BFloat16 instructions are added: vdot, vfma{l/t},\nvmmla, vfmal{t/b}, vcvt, vcvt{t/b}.\n\ngas/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-arm.c (arm_archs): Add armv8.6-a option.\n\t(cpu_arch_ver): Add TAG_CPU_ARCH_V8 tag for Armv8.6-a.\n\t* doc/c-arm.texi (-march): New armv8.6-a arch.\n\t* config/tc-arm.c (arm_ext_bf16): New feature set.\n\t(enum neon_el_type): Add NT_bfloat value.\n\t(B_MNEM_vfmat, B_MNEM_vfmab): New bfloat16 encoder\n\thelpers.\n\t(BAD_BF16): New message.\n\t(parse_neon_type): Add bf16 type specifier.\n\t(enum neon_type_mask): Add N_BF16 type.\n\t(type_chk_of_el_type): Account for NT_bfloat.\n\t(el_type_of_type_chk): Account for N_BF16.\n\t(neon_three_args): Split out from neon_three_same.\n\t(neon_three_same): Part split out into neon_three_args.\n\t(CVT_FLAVOUR_VAR): Add bf16_f32 cvt flavour.\n\t(do_neon_cvt_1): Account for vcvt.bf16.f32.\n\t(do_bfloat_vmla): New.\n\t(do_mve_vfma): New function to deal with the mnemonic clash between the BF16\n\tvfmat and the MVE vfma in a VPT block with a 't'rue condition.\n\t(do_neon_cvttb_1): Account for vcvt{t,b}.bf16.f32.\n\t(do_vdot): New\n\t(do_vmmla): New\n\t(insns): Add vdot and vmmla mnemonics.\n\t(arm_extensions): Add \"bf16\" extension.\n\t* doc/c-arm.texi: Document \"bf16\" extension.\n\t* testsuite/gas/arm/attr-march-armv8_6-a.d: New test.\n\t* testsuite/gas/arm/bfloat16-bad.d: New test.\n\t* testsuite/gas/arm/bfloat16-bad.l: New test.\n\t* testsuite/gas/arm/bfloat16-bad.s: New test.\n\t* testsuite/gas/arm/bfloat16-cmdline-bad-2.d: New test.\n\t* testsuite/gas/arm/bfloat16-cmdline-bad-3.d: New test.\n\t* testsuite/gas/arm/bfloat16-cmdline-bad.d: New test.\n\t* testsuite/gas/arm/bfloat16-neon.s: New test.\n\t* testsuite/gas/arm/bfloat16-non-neon.s: New test.\n\t* testsuite/gas/arm/bfloat16-thumb-bad.d: New test.\n\t* testsuite/gas/arm/bfloat16-thumb-bad.l: New test.\n\t* testsuite/gas/arm/bfloat16-thumb.d: New test.\n\t* testsuite/gas/arm/bfloat16-vfp.d: New test.\n\t* testsuite/gas/arm/bfloat16.d: New test.\n\t* testsuite/gas/arm/bfloat16.s: New test.\n\ninclude/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/arm.h (ARM_EXT2_V8_6A, ARM_AEXT2_V8_6A,\n\tARM_ARCH_V8_6A): New.\n\t* opcode/arm.h (ARM_EXT2_BF16): New feature macro.\n\t(ARM_AEXT2_V8_6A): Include above macro in definition.\n\nopcodes/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* arm-dis.c (select_arm_features): Update bfd_march_arm_8 with\n\tArmv8.6-A.\n\t(coprocessor_opcodes): Add bfloat16 vcvt{t,b}.\n\t(neon_opcodes): Add bfloat SIMD instructions.\n\t(print_insn_coprocessor): Add new control character %b to print\n\tcondition code without checking cp_num.\n\t(print_insn_neon): Account for BFloat16 instructions that have no\n\tspecial top-byte handling.\n\nRegression tested on arm-none-eabi.\n\nIs it ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "c777eac1b5c3bd0cb9d658f4f4f33386c97c2973",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c777eac1b5c3bd0cb9d658f4f4f33386c97c2973"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "33593eafc92b6376a71bef49f5cebd6e09abd283",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33593eafc92b6376a71bef49f5cebd6e09abd283",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/33593eafc92b6376a71bef49f5cebd6e09abd283"
    }
  ],
  "stats": {
    "total": 892,
    "additions": 863,
    "deletions": 29
  },
  "files": [
    {
      "sha": "57ee5cd1795316c1beda2c03e166b966feeb4649",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -1,3 +1,47 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-arm.c (arm_archs): Add armv8.6-a option.\n+\t(cpu_arch_ver): Add TAG_CPU_ARCH_V8 tag for Armv8.6-a.\n+\t* doc/c-arm.texi (-march): New armv8.6-a arch.\n+\t* config/tc-arm.c (arm_ext_bf16): New feature set.\n+\t(enum neon_el_type): Add NT_bfloat value.\n+\t(B_MNEM_vfmat, B_MNEM_vfmab): New bfloat16 encoder\n+\thelpers.\n+\t(BAD_BF16): New message.\n+\t(parse_neon_type): Add bf16 type specifier.\n+\t(enum neon_type_mask): Add N_BF16 type.\n+\t(type_chk_of_el_type): Account for NT_bfloat.\n+\t(el_type_of_type_chk): Account for N_BF16.\n+\t(neon_three_args): Split out from neon_three_same.\n+\t(neon_three_same): Part split out into neon_three_args.\n+\t(CVT_FLAVOUR_VAR): Add bf16_f32 cvt flavour.\n+\t(do_neon_cvt_1): Account for vcvt.bf16.f32.\n+\t(do_bfloat_vmla): New.\n+\t(do_mve_vfma): New function to deal with the mnemonic clash between the BF16\n+\tvfmat and the MVE vfma in a VPT block with a 't'rue condition.\n+\t(do_neon_cvttb_1): Account for vcvt{t,b}.bf16.f32.\n+\t(do_vdot): New\n+\t(do_vmmla): New\n+\t(insns): Add vdot and vmmla mnemonics.\n+\t(arm_extensions): Add \"bf16\" extension.\n+\t* doc/c-arm.texi: Document \"bf16\" extension.\n+\t* testsuite/gas/arm/attr-march-armv8_6-a.d: New test.\n+\t* testsuite/gas/arm/bfloat16-bad.d: New test.\n+\t* testsuite/gas/arm/bfloat16-bad.l: New test.\n+\t* testsuite/gas/arm/bfloat16-bad.s: New test.\n+\t* testsuite/gas/arm/bfloat16-cmdline-bad-2.d: New test.\n+\t* testsuite/gas/arm/bfloat16-cmdline-bad-3.d: New test.\n+\t* testsuite/gas/arm/bfloat16-cmdline-bad.d: New test.\n+\t* testsuite/gas/arm/bfloat16-neon.s: New test.\n+\t* testsuite/gas/arm/bfloat16-non-neon.s: New test.\n+\t* testsuite/gas/arm/bfloat16-thumb-bad.d: New test.\n+\t* testsuite/gas/arm/bfloat16-thumb-bad.l: New test.\n+\t* testsuite/gas/arm/bfloat16-thumb.d: New test.\n+\t* testsuite/gas/arm/bfloat16-vfp.d: New test.\n+\t* testsuite/gas/arm/bfloat16.d: New test.\n+\t* testsuite/gas/arm/bfloat16.s: New test.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "8436b32b04fde832bc1b58b1ae506e7463abb718",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 217,
      "deletions": 24,
      "changes": 241,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -275,6 +275,8 @@ static const arm_feature_set arm_ext_sb =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_SB);\n static const arm_feature_set arm_ext_predres =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_PREDRES);\n+static const arm_feature_set arm_ext_bf16 =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16);\n \n static const arm_feature_set arm_arch_any = ARM_ANY;\n #ifdef OBJ_ELF\n@@ -447,6 +449,7 @@ enum neon_el_type\n   NT_float,\n   NT_poly,\n   NT_signed,\n+  NT_bfloat,\n   NT_unsigned\n };\n \n@@ -894,6 +897,7 @@ struct asm_opcode\n \t_(\"cannot use writeback with PC-relative addressing\")\n #define BAD_RANGE\t_(\"branch out of range\")\n #define BAD_FP16\t_(\"selected processor does not support fp16 instruction\")\n+#define BAD_BF16\t_(\"selected processor does not support bf16 instruction\")\n #define UNPRED_REG(R)\t_(\"using \" R \" results in unpredictable behaviour\")\n #define THUMB1_RELOC_ONLY  _(\"relocation valid in thumb1 code only\")\n #define MVE_NOT_IT\t_(\"Warning: instruction is UNPREDICTABLE in an IT \" \\\n@@ -1469,6 +1473,28 @@ parse_neon_type (struct neon_type *type, char **str)\n \t  thissize = 64;\n \t  ptr++;\n \t  goto done;\n+\tcase 'b':\n+\t  thistype = NT_bfloat;\n+\t  switch (TOLOWER (*(++ptr)))\n+\t    {\n+\t    case 'f':\n+\t      ptr += 1;\n+\t      thissize = strtoul (ptr, &ptr, 10);\n+\t      if (thissize != 16)\n+\t\t{\n+\t\t  as_bad (_(\"bad size %d in type specifier\"), thissize);\n+\t\t  return FAIL;\n+\t\t}\n+\t      goto done;\n+\t    case '0': case '1': case '2': case '3': case '4':\n+\t    case '5': case '6': case '7': case '8': case '9':\n+\t    case ' ': case '.':\n+\t      as_bad (_(\"unexpected type character `b' -- did you mean `bf'?\"));\n+\t      return FAIL;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  break;\n \tdefault:\n \t  as_bad (_(\"unexpected character `%c' in type specifier\"), *ptr);\n \t  return FAIL;\n@@ -14506,6 +14532,10 @@ do_mve_scalar_shift (void)\n #define M_MNEM_vqrshrunt    0xfe801fc0\n #define M_MNEM_vqrshrunb    0xfe800fc0\n \n+/* Bfloat16 instruction encoder helpers.  */\n+#define B_MNEM_vfmat 0xfc300850\n+#define B_MNEM_vfmab 0xfc300810\n+\n /* Neon instruction encoder helpers.  */\n \n /* Encodings for the different types for various Neon opcodes.  */\n@@ -14851,6 +14881,7 @@ enum neon_type_mask\n   N_F32  = 0x0080000,\n   N_F64  = 0x0100000,\n   N_P64\t = 0x0200000,\n+  N_BF16 = 0x0400000,\n   N_KEY  = 0x1000000, /* Key element (main type specifier).  */\n   N_EQK  = 0x2000000, /* Given operand has the same type & size as the key.  */\n   N_VFP  = 0x4000000, /* VFP mode: operand size must match register width.  */\n@@ -15149,6 +15180,10 @@ type_chk_of_el_type (enum neon_el_type type, unsigned size)\n \t}\n       break;\n \n+    case NT_bfloat:\n+      if (size == 16) return N_BF16;\n+      break;\n+\n     default: ;\n     }\n \n@@ -15167,7 +15202,8 @@ el_type_of_type_chk (enum neon_el_type *type, unsigned *size,\n \n   if ((mask & (N_S8 | N_U8 | N_I8 | N_8 | N_P8)) != 0)\n     *size = 8;\n-  else if ((mask & (N_S16 | N_U16 | N_I16 | N_16 | N_F16 | N_P16)) != 0)\n+  else if ((mask & (N_S16 | N_U16 | N_I16 | N_16 | N_F16 | N_P16 | N_BF16))\n+\t   != 0)\n     *size = 16;\n   else if ((mask & (N_S32 | N_U32 | N_I32 | N_32 | N_F32)) != 0)\n     *size = 32;\n@@ -15188,6 +15224,8 @@ el_type_of_type_chk (enum neon_el_type *type, unsigned *size,\n     *type = NT_poly;\n   else if ((mask & (N_F_ALL)) != 0)\n     *type = NT_float;\n+  else if ((mask & (N_BF16)) != 0)\n+    *type = NT_bfloat;\n   else\n     return FAIL;\n \n@@ -16624,6 +16662,20 @@ mve_encode_rrqq (unsigned U, unsigned size)\n   inst.is_neon = 1;\n }\n \n+/* Helper function for neon_three_same handling the operands.  */\n+static void\n+neon_three_args (int isquad)\n+{\n+  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+  inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n+  inst.instruction |= LOW4 (inst.operands[2].reg);\n+  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+  inst.instruction |= (isquad != 0) << 6;\n+  inst.is_neon = 1;\n+}\n+\n /* Encode insns with bit pattern:\n \n   |28/24|23|22 |21 20|19 16|15 12|11    8|7|6|5|4|3  0|\n@@ -16635,13 +16687,7 @@ mve_encode_rrqq (unsigned U, unsigned size)\n static void\n neon_three_same (int isquad, int ubit, int size)\n {\n-  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n-  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n-  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n-  inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n-  inst.instruction |= LOW4 (inst.operands[2].reg);\n-  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n-  inst.instruction |= (isquad != 0) << 6;\n+  neon_three_args (isquad);\n   inst.instruction |= (ubit != 0) << 24;\n   if (size != -1)\n     inst.instruction |= neon_logbits (size) << 20;\n@@ -17783,6 +17829,44 @@ do_neon_mac_maybe_scalar (void)\n     }\n }\n \n+static void\n+do_bfloat_vfma (void)\n+{\n+  constraint (!mark_feature_used (&fpu_neon_ext_armv8), _(BAD_FPU));\n+  constraint (!mark_feature_used (&arm_ext_bf16), _(BAD_BF16));\n+  enum neon_shape rs;\n+  int t_bit = 0;\n+\n+  if (inst.instruction != B_MNEM_vfmab)\n+  {\n+      t_bit = 1;\n+      inst.instruction = B_MNEM_vfmat;\n+  }\n+\n+  if (inst.operands[2].isscalar)\n+    {\n+      rs = neon_select_shape (NS_QQS, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_BF16 | N_KEY);\n+\n+      inst.instruction |= (1 << 25);\n+      int index = inst.operands[2].reg & 0xf;\n+      constraint (!(index < 4), _(\"index must be in the range 0 to 3\"));\n+      inst.operands[2].reg >>= 4;\n+      constraint (!(inst.operands[2].reg < 8),\n+\t\t  _(\"indexed register must be less than 8\"));\n+      neon_three_args (t_bit);\n+      inst.instruction |= ((index & 1) << 3);\n+      inst.instruction |= ((index & 2) << 4);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_QQQ, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_BF16 | N_KEY);\n+      neon_three_args (t_bit);\n+    }\n+\n+}\n+\n static void\n do_neon_fmac (void)\n {\n@@ -17801,6 +17885,7 @@ do_neon_fmac (void)\n \n       if (rs == NS_QQR)\n \t{\n+\n \t  if (inst.operands[2].reg == REG_SP)\n \t    as_tsktsk (MVE_BAD_SP);\n \t  else if (inst.operands[2].reg == REG_PC)\n@@ -17825,6 +17910,24 @@ do_neon_fmac (void)\n   neon_dyadic_misc (NT_untyped, N_IF_32, 0);\n }\n \n+static void\n+do_mve_vfma (void)\n+{\n+  if (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_bf16) &&\n+      inst.cond == COND_ALWAYS)\n+    {\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n+      inst.instruction = N_MNEM_vfma;\n+      inst.pred_insn_type = INSIDE_VPT_INSN;\n+      inst.cond = 0xf;\n+      return do_neon_fmac();\n+    }\n+  else\n+    {\n+      do_bfloat_vfma();\n+    }\n+}\n+\n static void\n do_neon_tst (void)\n {\n@@ -18654,6 +18757,7 @@ do_neon_shll (void)\n   CVT_VAR (f16_u32, N_F16 | N_KEY, N_U32, N_VFP, \"fultos\", \"fuitos\", NULL)    \\\n   CVT_VAR (u32_f16, N_U32, N_F16 | N_KEY, N_VFP, \"ftouls\", \"ftouis\", \"ftouizs\")\\\n   CVT_VAR (s32_f16, N_S32, N_F16 | N_KEY, N_VFP, \"ftosls\", \"ftosis\", \"ftosizs\")\\\n+  CVT_VAR (bf16_f32, N_BF16, N_F32, whole_reg,   NULL, NULL, NULL)\t      \\\n   /* VFP instructions.  */\t\t\t\t\t\t      \\\n   CVT_VAR (f32_f64, N_F32, N_F64, N_VFP,       NULL,     \"fcvtsd\", NULL)      \\\n   CVT_VAR (f64_f32, N_F64, N_F32, N_VFP,       NULL,     \"fcvtds\", NULL)      \\\n@@ -19121,8 +19225,21 @@ do_neon_cvt_1 (enum neon_cvt_mode mode)\n \t  }\n \n       if (rs == NS_DQ)\n-\tinst.instruction = 0x3b60600;\n+\t{\n+\t  if (flavour == neon_cvt_flavour_bf16_f32)\n+\t    {\n+\t      if (vfp_or_neon_is_neon (NEON_CHECK_ARCH8) == FAIL)\n+\t\treturn;\n+\t      constraint (!mark_feature_used (&arm_ext_bf16), _(BAD_BF16));\n+\t      /* VCVT.bf16.f32.  */\n+\t      inst.instruction = 0x11b60640;\n+\t    }\n+\t  else\n+\t    /* VCVT.f16.f32.  */\n+\t    inst.instruction = 0x3b60600;\n+\t}\n       else\n+\t/* VCVT.f32.f16.  */\n \tinst.instruction = 0x3b60700;\n \n       inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n@@ -19272,6 +19389,14 @@ do_neon_cvttb_1 (bfd_boolean t)\n       inst.error = NULL;\n       do_neon_cvttb_2 (t, /*to=*/FALSE, /*is_double=*/TRUE);\n     }\n+  else if (neon_check_type (2, rs, N_BF16 | N_VFP, N_F32).type != NT_invtype)\n+    {\n+      constraint (!mark_feature_used (&arm_ext_bf16), _(BAD_BF16));\n+      inst.error = NULL;\n+      inst.instruction |= (1 << 8);\n+      inst.instruction &= ~(1 << 9);\n+      do_neon_cvttb_2 (t, /*to=*/TRUE, /*is_double=*/FALSE);\n+    }\n   else\n     return;\n }\n@@ -19523,16 +19648,6 @@ do_neon_fmac_maybe_scalar_long (int subtype)\n      0x2.  */\n   int size = -1;\n \n-  if (inst.cond != COND_ALWAYS)\n-    as_warn (_(\"vfmal/vfmsl with FP16 type cannot be conditional, the \"\n-\t       \"behaviour is UNPREDICTABLE\"));\n-\n-  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_fp16_fml),\n-\t      _(BAD_FP16));\n-\n-  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8),\n-\t      _(BAD_FPU));\n-\n   /* vfmal/vfmsl are in three-same D/Q register format or the third operand can\n      be a scalar index register.  */\n   if (inst.operands[2].isscalar)\n@@ -19551,7 +19666,16 @@ do_neon_fmac_maybe_scalar_long (int subtype)\n       rs = neon_select_shape (NS_DHH, NS_QDD, NS_NULL);\n     }\n \n-  neon_check_type (3, rs, N_EQK, N_EQK, N_KEY | N_F16);\n+\n+  if (inst.cond != COND_ALWAYS)\n+    as_warn (_(\"vfmal/vfmsl with FP16 type cannot be conditional, the \"\n+\t       \"behaviour is UNPREDICTABLE\"));\n+\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, arm_ext_fp16_fml),\n+\t      _(BAD_FP16));\n+\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_armv8),\n+\t      _(BAD_FPU));\n \n   /* \"opcode\" from template has included \"ubit\", so simply pass 0 here.  Also,\n      the \"S\" bit in size field has been reused to differentiate vfmal and vfmsl,\n@@ -21501,6 +21625,46 @@ do_vjcvt (void)\n   do_vfp_cond_or_thumb ();\n }\n \n+static void\n+do_vdot (void)\n+{\n+  enum neon_shape rs;\n+  constraint (!mark_feature_used (&fpu_neon_ext_armv8), _(BAD_FPU));\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+  if (inst.operands[2].isscalar)\n+    {\n+      rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_BF16 | N_KEY);\n+\n+      inst.instruction |= (1 << 25);\n+      int index = inst.operands[2].reg & 0xf;\n+      constraint ((index != 1 && index != 0), _(\"index must be 0 or 1\"));\n+      inst.operands[2].reg >>= 4;\n+      constraint (!(inst.operands[2].reg < 16),\n+\t\t  _(\"indexed register must be less than 16\"));\n+      neon_three_args (rs == NS_QQS);\n+      inst.instruction |= (index << 5);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_BF16 | N_KEY);\n+      neon_three_args (rs == NS_QQQ);\n+    }\n+}\n+\n+static void\n+do_vmmla (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQ, NS_NULL);\n+  neon_check_type (3, rs, N_EQK, N_EQK, N_BF16 | N_KEY);\n+\n+  constraint (!mark_feature_used (&fpu_neon_ext_armv8), _(BAD_FPU));\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+\n+  neon_three_args (1);\n+}\n+\n \f\n /* Overall per-instruction processing.\t*/\n \n@@ -24846,8 +25010,8 @@ static const struct asm_opcode insns[] =\n  NCE (vins,      eb00ac0,       2, (RVS, RVS), neon_movhf),\n \n  /* New backported fma/fms instructions optional in v8.2.  */\n- NCE (vfmal, 810, 3, (RNDQ, RNSD, RNSD_RNSC), neon_vfmal),\n- NCE (vfmsl, 810, 3, (RNDQ, RNSD, RNSD_RNSC), neon_vfmsl),\n+ NUF (vfmsl, 810, 3, (RNDQ, RNSD, RNSD_RNSC), neon_vfmsl),\n+ NUF (vfmal, 810, 3, (RNDQ, RNSD, RNSD_RNSC), neon_vfmal),\n \n #undef  THUMB_VARIANT\n #define THUMB_VARIANT  & fpu_neon_ext_v1\n@@ -25097,10 +25261,11 @@ static const struct asm_opcode insns[] =\n #define ARM_VARIANT    & fpu_vfp_ext_fma\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT  & fpu_vfp_ext_fma\n- /* Mnemonics shared by Neon, VFP and MVE.  These are included in the\n+ /* Mnemonics shared by Neon, VFP, MVE and BF16.  These are included in the\n     VFP FMA variant; NEON and VFP FMA always includes the NEON\n     FMA instructions.  */\n  mnCEF(vfma,     _vfma,    3, (RNSDQMQ, oRNSDQMQ, RNSDQMQR), neon_fmac),\n+ TUF (\"vfmat\",    c300850,    fc300850,  3, (RNSDQMQ, oRNSDQMQ, RNSDQ_RNSC_MQ_RR), mve_vfma, mve_vfma),\n  mnCEF(vfms,     _vfms,    3, (RNSDQMQ, oRNSDQMQ, RNSDQMQ),  neon_fmac),\n \n  /* ffmas/ffmad/ffmss/ffmsd are dummy mnemonics to satisfy gas;\n@@ -25773,6 +25938,24 @@ static const struct asm_opcode insns[] =\n #define\tTHUMB_VARIANT & arm_ext_v6t2_v8m\n  MNUF (vcadd, 0, 4, (RNDQMQ, RNDQMQ, RNDQMQ, EXPi), vcadd),\n  MNUF (vcmla, 0, 4, (RNDQMQ, RNDQMQ, RNDQMQ_RNSC, EXPi), vcmla),\n+\n+#undef\tARM_VARIANT\n+#define ARM_VARIANT &arm_ext_bf16\n+#undef\tTHUMB_VARIANT\n+#define\tTHUMB_VARIANT &arm_ext_bf16\n+ TUF (\"vdot\", c000d00, fc000d00, 3, (RNDQ, RNDQ, RNDQ_RNSC), vdot, vdot),\n+ TUF (\"vmmla\", c000c40, fc000c40, 3, (RNQ, RNQ, RNQ), vmmla, vmmla),\n+ TUF (\"vfmab\", c300810, fc300810, 3, (RNDQ, RNDQ, RNDQ_RNSC), bfloat_vfma, bfloat_vfma),\n+\n+#undef\tARM_VARIANT\n+#define ARM_VARIANT &arm_ext_i8mm\n+#undef\tTHUMB_VARIANT\n+#define\tTHUMB_VARIANT &arm_ext_i8mm\n+ TUF (\"vsmmla\", c200c40, fc200c40, 3, (RNQ, RNQ, RNQ), vsmmla, vsmmla),\n+ TUF (\"vummla\", c200c50, fc200c50, 3, (RNQ, RNQ, RNQ), vummla, vummla),\n+ TUF (\"vusmmla\", ca00c40, fca00c40, 3, (RNQ, RNQ, RNQ), vummla, vummla),\n+ TUF (\"vusdot\", c800d00, fc800d00, 3, (RNDQ, RNDQ, RNDQ_RNSC), vusdot, vusdot),\n+ TUF (\"vsudot\", c800d10, fc800d10, 3, (RNDQ, RNDQ, RNSC), vsudot, vsudot),\n };\n #undef ARM_VARIANT\n #undef THUMB_VARIANT\n@@ -30937,6 +31120,11 @@ static const struct arm_ext_table armv85a_ext_table[] =\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n+static const struct arm_ext_table armv86a_ext_table[] =\n+{\n+  { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n+};\n+\n static const struct arm_ext_table armv8m_main_ext_table[] =\n {\n   ARM_EXT (\"dsp\", ARM_FEATURE_CORE_LOW (ARM_EXT_V5ExP | ARM_EXT_V6_DSP),\n@@ -31042,6 +31230,7 @@ static const struct arm_arch_option_table arm_archs[] =\n   ARM_ARCH_OPT2 (\"armv8-r\",\t  ARM_ARCH_V8R,\t\tFPU_ARCH_VFP, armv8r),\n   ARM_ARCH_OPT2 (\"armv8.4-a\",\t  ARM_ARCH_V8_4A,\tFPU_ARCH_VFP, armv84a),\n   ARM_ARCH_OPT2 (\"armv8.5-a\",\t  ARM_ARCH_V8_5A,\tFPU_ARCH_VFP, armv85a),\n+  ARM_ARCH_OPT2 (\"armv8.6-a\",\t  ARM_ARCH_V8_6A,\tFPU_ARCH_VFP, armv86a),\n   ARM_ARCH_OPT (\"xscale\",\t  ARM_ARCH_XSCALE,\tFPU_ARCH_VFP),\n   ARM_ARCH_OPT (\"iwmmxt\",\t  ARM_ARCH_IWMMXT,\tFPU_ARCH_VFP),\n   ARM_ARCH_OPT (\"iwmmxt2\",\t  ARM_ARCH_IWMMXT2,\tFPU_ARCH_VFP),\n@@ -31072,6 +31261,9 @@ struct arm_option_extension_value_table\n    use the context sensitive approach using arm_ext_table's.  */\n static const struct arm_option_extension_value_table arm_extensions[] =\n {\n+  ARM_EXT_OPT (\"bf16\",  ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+\t\t\tARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+\t\t\tARM_ARCH_V8_2A),\n   ARM_EXT_OPT (\"crc\",  ARCH_CRC_ARMV8, ARM_FEATURE_COPROC (CRC_EXT_ARMV8),\n \t\t\t ARM_FEATURE_CORE_LOW (ARM_EXT_V8)),\n   ARM_EXT_OPT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8,\n@@ -31823,7 +32015,8 @@ static const cpu_arch_ver_table cpu_arch_ver[] =\n     {TAG_CPU_ARCH_V8,\t      ARM_ARCH_V8_4A},\n     {TAG_CPU_ARCH_V8,\t      ARM_ARCH_V8_5A},\n     {TAG_CPU_ARCH_V8_1M_MAIN, ARM_ARCH_V8_1M_MAIN},\n-    {-1,\t\t      ARM_ARCH_NONE}\n+    {TAG_CPU_ARCH_V8,\t    ARM_ARCH_V8_6A},\n+    {-1,\t\t    ARM_ARCH_NONE}\n };\n \n /* Set an attribute if it has not already been set by the user.  */"
    },
    {
      "sha": "8afee70120f122e3724b27a71443d03b7c2ad719",
      "filename": "gas/doc/c-arm.texi",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/doc/c-arm.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/doc/c-arm.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-arm.texi?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -180,6 +180,7 @@ been added, again in ascending alphabetical order.  For example,\n \n \n The following extensions are currently supported:\n+@code{bf16} (BFloat16 extensions for v8.6-A architecture),\n @code{crc}\n @code{crypto} (Cryptography Extensions for v8-A architecture, implies @code{fp+simd}),\n @code{dotprod} (Dot Product Extensions for v8.2-A architecture, implies @code{fp+simd}),\n@@ -254,6 +255,7 @@ names are recognized:\n @code{armv8-m.base},\n @code{armv8-m.main},\n @code{armv8.1-m.main},\n+@code{armv8.6-a},\n @code{iwmmxt},\n @code{iwmmxt2}\n and"
    },
    {
      "sha": "73bcbaf35e8096da24b31dd676ec5b62794f3a90",
      "filename": "gas/testsuite/gas/arm/attr-march-armv8_6-a.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/attr-march-armv8_6-a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/attr-march-armv8_6-a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/attr-march-armv8_6-a.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,17 @@\n+# name: attributes for -march=armv8.6-a\n+# source: blank.s\n+# as: -march=armv8.6-a\n+# readelf: -A\n+# This test is only valid on EABI based ports.\n+# target: *-*-*eabi* *-*-nacl*\n+\n+Attribute Section: aeabi\n+File Attributes\n+  Tag_CPU_name: \"8.6-A\"\n+  Tag_CPU_arch: v8\n+  Tag_CPU_arch_profile: Application\n+  Tag_ARM_ISA_use: Yes\n+  Tag_THUMB_ISA_use: Thumb-2\n+  Tag_Advanced_SIMD_arch: NEON for ARMv8.1\n+  Tag_MPextension_use: Allowed\n+  Tag_Virtualization_use: TrustZone and Virtualization Extensions"
    },
    {
      "sha": "95f266dd324675e4a96a14e64d239f1ebdc2708c",
      "filename": "gas/testsuite/gas/arm/bfloat16-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-bad.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Bfloat 16 failure cases\n+#source: bfloat16-bad.s\n+#as: -mno-warn-deprecated -march=armv8.6-a+simd\n+#error_output: bfloat16-bad.l"
    },
    {
      "sha": "242e538b53d136284f54761b709bc4d82263ed19",
      "filename": "gas/testsuite/gas/arm/bfloat16-bad.l",
      "status": "added",
      "additions": 112,
      "deletions": 0,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-bad.l?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,112 @@\n+[^ :]+: Assembler messages:\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vdot.b16 d0,d0,d0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vmmla q0.b16,q0,q0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vdot.bf32 d0,d0,d0\\[1\\]'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vdot d0.bf32,d0,d0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vdot d0.bf32,d0.bf16,d0.bf16'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vdotne d0,d0,d0'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vdotne d0,d0,d0\\[1\\]'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vmmlane q0,q0,q0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmatne.bf16 q0,d0,d0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmatne.bf16 q0,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vfmabne.bf16 q0,d0,d0'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vfmabne.bf16 q0,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vcvtne.bf16.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d32,d0,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d32,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d0,d32'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d32,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 16 -- `vdot d0,d0,d16\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vcvtne.bf16.f32 d32,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q16,q0,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q16,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q0,q16'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q16,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q16,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q16,q0,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q16,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q0,q16'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab.bf16 q16,d0,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab.bf16 q16,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab.bf16 q0,q32,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab.bf16 q0,q32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 8 -- `vfmab.bf16 q0,q0,d8\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat.bf16 q16,d0,d0'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat.bf16 q16,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat.bf16 q0,q32,d0'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat.bf16 q0,q32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 8 -- `vfmat.bf16 q0,q0,d8\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vcvt.bf16.f32 d0,q16'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot q0,q0,d5'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot q0,d5,q0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot d5,q0,q0'\n+[^ :]+:[0-9]+: Error: only D registers may be indexed -- `vdot q0,d5,q0\\[0\\]'\n+[^ :]+:[0-9]+: Error: only D registers may be indexed -- `vdot d5,q0,q0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q0,d5'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,d5,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla d5,q0,q0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmab.bf16 d0,q0,d0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmab.bf16 d0,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmat.bf16 d0,q0,d0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmat.bf16 d0,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand size must match register width\n+[^ :]+:[0-9]+: Error: invalid neon suffix for non neon instruction\n+[^ :]+:[0-9]+: Error: index must be 0 or 1 -- `vdot q0,q0,d0\\[2\\]'\n+[^ :]+:[0-9]+: Error: index must be in the range 0 to 3 -- `vfmab.bf16 q0,d0,d0\\[4\\]'\n+[^ :]+:[0-9]+: Error: index must be in the range 0 to 3 -- `vfmat.bf16 q0,d0,d0\\[4\\]'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtb.b16.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtb.bf32.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb s0.b16,s0.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb s0.bf32,s0.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtb s0.f32,s0.bf16'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtt.b16.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtt.bf32.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt s0.b16,s0.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt s0.bf32,s0.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtt s0.f32,s0.bf16'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvt.b16.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvt.bf32.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvt d0.b16,q0.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvt d0.bf32,q0.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvt d0.f32,q0.bf16'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `vcvtt.bf16.f32 s0,s0,#0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vcvtt.bf16.f32 s0,s0,#1'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtt.bf16.f32 d0,s0'\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt.bf16.f32 s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtt.bf16.f32 s0,s0,s0,s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtt.bf16.f32 s0,s0,s0'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtt.bf16.f32 s0,s32'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtt.bf16.f32 s32,s32'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `vcvtb.bf16.f32 s0,s0,#0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vcvtb.bf16.f32 s0,s0,#1'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtb.bf16.f32 d0,s0'\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb.bf16.f32 s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtb.bf16.f32 s0,s0,s0,s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtb.bf16.f32 s0,s0,s0'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtb.bf16.f32 s0,s32'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtb.bf16.f32 s32,s32'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vcvtne.bf16.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vdotne.bf16 d0,d20,d11'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vdotne.bf16 d0,d20,d11\\[1\\]'\n+[^ :]+:[0-9]+: Error: instruction cannot be conditional -- `vmmlane.bf16 q0,q0,q0'\n+[^ :]+:[0-9]+: Error: IT falling in the range of a previous IT block -- `ittt ne'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdot.bf16 d0,d20,d11'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdot.bf16 d0,d20,d11\\[1\\]'"
    },
    {
      "sha": "f6db1ffe37b7cf493319564d7df66e8841aac97d",
      "filename": "gas/testsuite/gas/arm/bfloat16-bad.s",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-bad.s?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,119 @@\n+.syntax unified\n+\n+// Test warnings about type specifier being incorrect.\n+vdot.b16  d0, d0, d0\n+vmmla  q0.b16, q0, q0\n+vdot.bf32 d0, d0, d0[1]\n+vdot d0.bf32, d0, d0\n+vdot d0.bf32, d0.bf16, d0.bf16\n+\n+// Test conditions are not allowed in ARM.\n+vdotne d0, d0, d0\n+vdotne d0, d0, d0[1]\n+vmmlane q0, q0, q0\n+vfmatne.bf16 q0, d0, d0\n+vfmatne.bf16 q0, d0, d0[0]\n+vfmabne.bf16 q0, d0, d0\n+vfmabne.bf16 q0, d0, d0[0]\n+vcvtne.bf16.f32 d0, q0\n+\n+// d register out of range\n+vdot d32, d0, d0\n+vdot d0, d32, d0\n+vdot d0, d0, d32\n+vdot d32, d0, d0[0]\n+vdot d0, d32, d0[0]\n+vdot d0, d0, d16[0]\n+vcvtne.bf16.f32 d32, q0\n+\n+// q register out of range\n+vdot q16, q0, q0\n+vdot q0, q16, q0\n+vdot q0, q0, q16\n+vdot q16, q0, d0[0]\n+vdot q0, q16, d0[0]\n+vmmla q16, q0, q0\n+vmmla q0, q16, q0\n+vmmla q0, q0, q16\n+vfmab.bf16 q16, d0, d0\n+vfmab.bf16 q16, d0, d0[0]\n+vfmab.bf16 q0, q32, d0\n+vfmab.bf16 q0, q32, d0[0]\n+vfmab.bf16 q0, q0, d8[0]\n+vfmat.bf16 q16, d0, d0\n+vfmat.bf16 q16, d0, d0[0]\n+vfmat.bf16 q0, q32, d0\n+vfmat.bf16 q0, q32, d0[0]\n+vfmat.bf16 q0, q0, d8[0]\n+vcvt.bf16.f32 d0, q16\n+\n+// Incorrect set of arguments\n+vdot q0, q0, d5\n+vdot q0, d5, q0\n+vdot d5, q0, q0\n+vdot q0, d5, q0[0]\n+vdot d5, q0, q0[0]\n+vmmla q0, q0, d5\n+vmmla q0, d5, q0\n+vmmla d5, q0, q0\n+vfmab.bf16 d0, q0, d0\n+vfmab.bf16 d0, q0, d0[0]\n+vfmat.bf16 d0, q0, d0\n+vfmat.bf16 d0, q0, d0[0]\n+vcvt.bf16.f32 q0, d0\n+\n+// vdot index out of range\n+vdot q0, q0, d0[2]\n+\n+// vfma<bt> index out of range\n+vfmab.bf16 q0, d0, d0[4]\n+vfmat.bf16 q0, d0, d0[4]\n+\n+// Non neon encodings (this file gets assembled more than once but with\n+// different flags, providing different error messages each time).\n+\n+// Type specifier warnings\n+.macro conversion_type_specifier_check insn, dest, source\n+\\insn\\().b16.f32 \\dest, \\source\n+\\insn\\().bf32.f32 \\dest, \\source\n+\\insn \\dest\\().b16, \\source\\().f32\n+\\insn \\dest\\().bf32, \\source\\().f32\n+\\insn \\dest\\().f32, \\source\\().bf16\n+.endm\n+\n+conversion_type_specifier_check vcvtb, s0, s0\n+conversion_type_specifier_check vcvtt, s0, s0\n+conversion_type_specifier_check vcvt, d0, q0\n+\n+// Conditions allowed (and checked in the \"Valid\" source file).\n+\n+// Incorrect set of operands & registers out of range\n+.macro bad_args insn\n+\\insn\\().bf16.f32 s0, s0, #0\n+\\insn\\().bf16.f32 s0, s0, #1\n+\\insn\\().bf16.f32 d0, s0\n+\\insn\\().bf16.f32 s0\n+\\insn\\().bf16.f32 s0, s0, s0, s0\n+\\insn\\().bf16.f32 s0, s0, s0\n+\\insn\\().bf16.f32 s0, s32\n+\\insn\\().bf16.f32 s32, s32\n+.endm\n+bad_args vcvtt\n+bad_args vcvtb\n+\n+// Allowed in thumb mode but not allowed in arm mode.\n+it ne\n+vcvtne.bf16.f32 d0, q0\n+\n+// Ensure these instructions are not allowed to have a conditional suffix.\n+ittt ne\n+vdotne.bf16 d0, d20, d11\n+vdotne.bf16 d0, d20, d11[1]\n+vmmlane.bf16 q0, q0, q0\n+\n+// Ensure we are warned these instructions are UNPREDICTABLE in an IT block in\n+// thumb.\n+ittt ne\n+vdot.bf16 d0, d20, d11\n+vdot.bf16 d0, d20, d11[1]\n+vmmla.bf16 q0, q0, q0"
    },
    {
      "sha": "d13b864ab83a62c6083abe5b9280581a4fe92d29",
      "filename": "gas/testsuite/gas/arm/bfloat16-cmdline-bad-2.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-cmdline-bad-2.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Bfloat 16 bad processor\n+#source: bfloat16-non-neon.s\n+#as: -mno-warn-deprecated -march=armv8.5-a+simd\n+#error: .*Error: selected processor does not support bf16 instruction.*"
    },
    {
      "sha": "5dfdeb4d6ccc6575e357835e10dcb2638c03de35",
      "filename": "gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Bfloat 16 bad extension\n+#source: bfloat16-non-neon.s\n+#as: -mno-warn-deprecated -march=armv8.1-a+bf16\n+#error: .*Error: extension does not apply to the base architecture.*"
    },
    {
      "sha": "34b8a963f817e17a03cd59a2f1f4509a446bf1ca",
      "filename": "gas/testsuite/gas/arm/bfloat16-cmdline-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-cmdline-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-cmdline-bad.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Bfloat 16 bad FPU\n+#source: bfloat16-neon.s\n+#as: -mno-warn-deprecated -mfpu=vfpxd -march=armv8.6-a\n+#error: .*Error: selected FPU does not support instruction.*\n+"
    },
    {
      "sha": "6f422650cde2e74f5c5948d3ea1a1690a62e2a60",
      "filename": "gas/testsuite/gas/arm/bfloat16-neon.s",
      "status": "added",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-neon.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-neon.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-neon.s?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,53 @@\n+.syntax unified\n+// Check argument encoding by having different arguments.\n+// We use 20 and 11 since their binary encoding is 10100 and 01011\n+// respectively which ensures that we distinguish between the D/M/N bit\n+// encoding the first or last bit of the argument.\n+// q registers are encoded as double their actual number.\n+vdot.bf16 d0, d20, d11\n+vdot d11.bf16, d0.bf16, d20.bf16\n+\n+.macro conversion_type_specifier_check insn, dest, source\n+\\insn\\().bf16.f32 \\dest, \\source\n+\\insn \\dest\\().bf16, \\source\\().f32\n+\\insn \\dest\\().bf16, \\source\\().f32\n+.endm\n+conversion_type_specifier_check vcvtt,s0,s0\n+conversion_type_specifier_check vcvtb,s0,s0\n+conversion_type_specifier_check vcvt,d0,q0\n+\n+\n+// Here we follow the same encoding sequence as above.\n+// Since the 'M' bit encodes the index and the last register is encoded in 4\n+// bits that argument has a different number.\n+vdot.bf16 d11, d0, d4[1]\n+vdot d0.bf16, d20.bf16, d11.bf16[0]\n+\n+// vmmla only works on q registers.\n+// These registers are encoded as double the number given in the mnemonic.\n+// Hence we choose different numbers to ensure a similar bit pattern as above.\n+// 10 & 5 produce the bit patterns 10100 & 01010\n+vmmla.bf16 q10, q5, q0\n+vmmla q5.bf16, q0.bf16, q10.bf16\n+\n+vfmat.bf16 q10, q11, q0\n+vfmat.bf16 q10, q11, d0[3]\n+vfmat.bf16 q10, q11, d0[0]\n+\n+vfmab.bf16 q10, q11, q0\n+vfmab.bf16 q10, q11, d0[3]\n+vfmab.bf16 q10, q11, d0[0]\n+\n+// vcvt\n+// - no condition allowed in arm\n+// - no condition allowed in thumb outside IT block\n+// - Condition *allowed* in thumb in IT block\n+// - different encoding between thumb and arm\n+vcvt.bf16.f32 d20, q5\n+vcvt.bf16.f32 d11, q10\n+\n+// Only works for thumb mode.\n+.ifdef COMPILING_FOR_THUMB\n+it ne\n+vcvtne.bf16.f32 d0, q0\n+.endif"
    },
    {
      "sha": "95e3c3b4a11d7fd7b3f12624cf7753f62f7164f3",
      "filename": "gas/testsuite/gas/arm/bfloat16-non-neon.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-non-neon.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-non-neon.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-non-neon.s?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,9 @@\n+.syntax unified\n+vcvtb.bf16.f32 s20, s11\n+it ne\n+vcvtbne.bf16.f32 s11, s20\n+vcvtbal.bf16.f32 s0, s0\n+vcvtt.bf16.f32 s20, s11\n+it ne\n+vcvttne.bf16.f32 s11, s20\n+vcvttal.bf16.f32 s0, s0"
    },
    {
      "sha": "8322cf0343564197af1e64d3a5830d3e53ea9638",
      "filename": "gas/testsuite/gas/arm/bfloat16-thumb-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-thumb-bad.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Bfloat 16 Thumb failure cases\n+#source: bfloat16-bad.s\n+#as: -mno-warn-deprecated -mthumb -march=armv8.6-a+simd\n+#error_output: bfloat16-thumb-bad.l"
    },
    {
      "sha": "adfcf6fe71ea030a80d14d3acce2f8d8d2b1098e",
      "filename": "gas/testsuite/gas/arm/bfloat16-thumb-bad.l",
      "status": "added",
      "additions": 112,
      "deletions": 0,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-thumb-bad.l?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,112 @@\n+[^ :]+: Assembler messages:\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vdot\\.b16 d0,d0,d0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vmmla q0\\.b16,q0,q0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vdot\\.bf32 d0,d0,d0\\[1\\]'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vdot d0\\.bf32,d0,d0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vdot d0\\.bf32,d0\\.bf16,d0\\.bf16'\n+[^ :]+:[0-9]+: Error: operand types can't be inferred -- `vdotne d0,d0,d0'\n+[^ :]+:[0-9]+: Error: operand types can't be inferred -- `vdotne d0,d0,d0\\[1\\]'\n+[^ :]+:[0-9]+: Error: operand types can't be inferred -- `vmmlane q0,q0,q0'\n+[^ :]+:[0-9]+: Error: thumb conditional instruction should be in IT block -- `vfmatne\\.bf16 q0,d0,d0'\n+[^ :]+:[0-9]+: Error: thumb conditional instruction should be in IT block -- `vfmatne\\.bf16 q0,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: thumb conditional instruction should be in IT block -- `vfmabne\\.bf16 q0,d0,d0'\n+[^ :]+:[0-9]+: Error: thumb conditional instruction should be in IT block -- `vfmabne\\.bf16 q0,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: thumb conditional instruction should be in IT block -- `vcvtne\\.bf16\\.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d32,d0,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d32,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d0,d32'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d32,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot d0,d32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 16 -- `vdot d0,d0,d16\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vcvtne\\.bf16\\.f32 d32,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q16,q0,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q16,q0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q0,q16'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q16,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vdot q0,q16,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q16,q0,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q16,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q0,q16'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab\\.bf16 q16,d0,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab\\.bf16 q16,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab\\.bf16 q0,q32,d0'\n+[^ :]+:[0-9]+: Error: Neon double or quad precision register expected -- `vfmab\\.bf16 q0,q32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 8 -- `vfmab\\.bf16 q0,q0,d8\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat\\.bf16 q16,d0,d0'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat\\.bf16 q16,d0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat\\.bf16 q0,q32,d0'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vfmat\\.bf16 q0,q32,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: indexed register must be less than 8 -- `vfmat\\.bf16 q0,q0,d8\\[0\\]'\n+[^ :]+:[0-9]+: Error: VFP single, double or Neon quad precision register expected -- `vcvt\\.bf16\\.f32 d0,q16'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot q0,q0,d5'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot q0,d5,q0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vdot d5,q0,q0'\n+[^ :]+:[0-9]+: Error: only D registers may be indexed -- `vdot q0,d5,q0\\[0\\]'\n+[^ :]+:[0-9]+: Error: only D registers may be indexed -- `vdot d5,q0,q0\\[0\\]'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,q0,d5'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla q0,d5,q0'\n+[^ :]+:[0-9]+: Error: Neon quad precision register expected -- `vmmla d5,q0,q0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmab\\.bf16 d0,q0,d0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmab\\.bf16 d0,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmat\\.bf16 d0,q0,d0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vfmat\\.bf16 d0,q0,d0\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand size must match register width\n+[^ :]+:[0-9]+: Error: invalid neon suffix for non neon instruction\n+[^ :]+:[0-9]+: Error: index must be 0 or 1 -- `vdot q0,q0,d0\\[2\\]'\n+[^ :]+:[0-9]+: Error: index must be in the range 0 to 3 -- `vfmab\\.bf16 q0,d0,d0\\[4\\]'\n+[^ :]+:[0-9]+: Error: index must be in the range 0 to 3 -- `vfmat\\.bf16 q0,d0,d0\\[4\\]'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtb\\.b16\\.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtb\\.bf32\\.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb s0\\.b16,s0\\.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb s0\\.bf32,s0\\.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtb s0\\.f32,s0\\.bf16'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtt\\.b16\\.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvtt\\.bf32\\.f32 s0,s0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt s0\\.b16,s0\\.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt s0\\.bf32,s0\\.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtt s0\\.f32,s0\\.bf16'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad instruction `vcvt\\.b16\\.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad instruction `vcvt\\.bf32\\.f32 d0,q0'\n+[^ :]+:[0-9]+: Error: unexpected type character `b' -- did you mean `bf'\\?\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvt d0\\.b16,q0\\.f32'\n+[^ :]+:[0-9]+: Error: bad size 32 in type specifier\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvt d0\\.bf32,q0\\.f32'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvt d0\\.f32,q0\\.bf16'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `vcvtt\\.bf16\\.f32 s0,s0,#0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vcvtt\\.bf16\\.f32 s0,s0,#1'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtt\\.bf16\\.f32 d0,s0'\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtt\\.bf16\\.f32 s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtt\\.bf16\\.f32 s0,s0,s0,s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtt\\.bf16\\.f32 s0,s0,s0'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtt\\.bf16\\.f32 s0,s32'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtt\\.bf16\\.f32 s32,s32'\n+[^ :]+:[0-9]+: Error: immediate value out of range -- `vcvtb\\.bf16\\.f32 s0,s0,#0'\n+[^ :]+:[0-9]+: Error: invalid instruction shape -- `vcvtb\\.bf16\\.f32 s0,s0,#1'\n+[^ :]+:[0-9]+: Error: bad type in SIMD instruction -- `vcvtb\\.bf16\\.f32 d0,s0'\n+[^ :]+:[0-9]+: Error: bad arguments to instruction -- `vcvtb\\.bf16\\.f32 s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtb\\.bf16\\.f32 s0,s0,s0,s0'\n+[^ :]+:[0-9]+: Error: constant expression required -- `vcvtb\\.bf16\\.f32 s0,s0,s0'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtb\\.bf16\\.f32 s0,s32'\n+[^ :]+:[0-9]+: Error: VFP single or double precision register expected -- `vcvtb\\.bf16\\.f32 s32,s32'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdotne\\.bf16 d0,d20,d11'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdotne\\.bf16 d0,d20,d11\\[1\\]'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vmmlane\\.bf16 q0,q0,q0'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdot\\.bf16 d0,d20,d11'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vdot\\.bf16 d0,d20,d11\\[1\\]'\n+[^ :]+:[0-9]+: Error: instruction not allowed in IT block -- `vmmla\\.bf16 q0,q0,q0'\n+"
    },
    {
      "sha": "cf70d1619a5b6f6adebb13042d75b8057e9498bd",
      "filename": "gas/testsuite/gas/arm/bfloat16-thumb.d",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-thumb.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-thumb.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,44 @@\n+#name: Bfloat 16 extension Thumb\n+#source: bfloat16.s\n+#as: -mno-warn-deprecated --defsym COMPILING_FOR_THUMB=1 -mthumb -march=armv8.6-a+simd -I$srcdir/$subdir\n+#objdump: -dr --show-raw-insn\n+#skip: *-*-pe *-*-wince\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+\n+00000000 <\\.text>:\n+ *[0-9a-f]+:\tfc04 0d8b \tvdot\\.bf16\td0, d20, d11\n+ *[0-9a-f]+:\tfc00 bd24 \tvdot\\.bf16\td11, d0, d20\n+ *[0-9a-f]+:\teeb3 09c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 09c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 09c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 0940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 0940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 0940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\tffb6 0640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tffb6 0640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tffb6 0640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tfe00 bd24 \tvdot\\.bf16\td11, d0, d4\\[1\\]\n+ *[0-9a-f]+:\tfe04 0d8b \tvdot\\.bf16\td0, d20, d11\\[0\\]\n+ *[0-9a-f]+:\tfc4a 4c40 \tvmmla\\.bf16\tq10, q5, q0\n+ *[0-9a-f]+:\tfc00 ac64 \tvmmla\\.bf16\tq5, q0, q10\n+ *[0-9a-f]+:\tfc76 48d0 \tvfmat\\.bf16\tq10, q11, q0\n+ *[0-9a-f]+:\tfe76 48f8 \tvfmat\\.bf16\tq10, q11, d0\\[3\\]\n+ *[0-9a-f]+:\tfe76 48d0 \tvfmat\\.bf16\tq10, q11, d0\\[0\\]\n+ *[0-9a-f]+:\tfc76 4890 \tvfmab\\.bf16\tq10, q11, q0\n+ *[0-9a-f]+:\tfe76 48b8 \tvfmab\\.bf16\tq10, q11, d0\\[3\\]\n+ *[0-9a-f]+:\tfe76 4890 \tvfmab\\.bf16\tq10, q11, d0\\[0\\]\n+ *[0-9a-f]+:\tfff6 464a \tvcvt\\.bf16\\.f32\td20, q5\n+ *[0-9a-f]+:\tffb6 b664 \tvcvt\\.bf16\\.f32\td11, q10\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\tffb6 0640 \tvcvtne\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\teeb3 a965 \tvcvtb\\.bf16\\.f32\ts20, s11\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\teef3 594a \tvcvtbne\\.bf16\\.f32\ts11, s20\n+ *[0-9a-f]+:\teeb3 0940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3 a9e5 \tvcvtt\\.bf16\\.f32\ts20, s11\n+ *[0-9a-f]+:\tbf18      \tit\tne\n+ *[0-9a-f]+:\teef3 59ca \tvcvttne\\.bf16\\.f32\ts11, s20\n+ *[0-9a-f]+:\teeb3 09c0 \tvcvtt\\.bf16\\.f32\ts0, s0"
    },
    {
      "sha": "487aa88e6ba62c275ae210b8fe52d3de45b6d709",
      "filename": "gas/testsuite/gas/arm/bfloat16-vfp.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-vfp.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16-vfp.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-vfp.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,16 @@\n+#name: Bfloat 16 VFP\n+#source: bfloat16-non-neon.s\n+#as: -mno-warn-deprecated -mfpu=vfpxd -march=armv8.6-a -I$srcdir/$subdir\n+#objdump: -dr --show-raw-insn\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+\n+00000000 <.text>:\n+ *[0-9a-f]*:\teeb3a965 \tvcvtb.bf16.f32\ts20, s11\n+ *[0-9a-f]*:\t1ef3594a \tvcvtbne.bf16.f32\ts11, s20\n+ *[0-9a-f]*:\teeb30940 \tvcvtb.bf16.f32\ts0, s0\n+ *[0-9a-f]*:\teeb3a9e5 \tvcvtt.bf16.f32\ts20, s11\n+ *[0-9a-f]*:\t1ef359ca \tvcvttne.bf16.f32\ts11, s20\n+ *[0-9a-f]*:\teeb309c0 \tvcvtt.bf16.f32\ts0, s0"
    },
    {
      "sha": "b76c17faba6801ec5e07481af205c57efe0ef28b",
      "filename": "gas/testsuite/gas/arm/bfloat16.d",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16.d?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,39 @@\n+#name: Bfloat 16 extension\n+#source: bfloat16.s\n+#as: -mno-warn-deprecated -march=armv8.6-a+simd -I$srcdir/$subdir\n+#objdump: -dr --show-raw-insn\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+00000000 <.text>:\n+ *[0-9a-f]+:\tfc040d8b \tvdot\\.bf16\td0, d20, d11\n+ *[0-9a-f]+:\tfc00bd24 \tvdot\\.bf16\td11, d0, d20\n+ *[0-9a-f]+:\teeb309c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb309c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb309c0 \tvcvtt\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb30940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb30940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb30940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\tf3b60640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tf3b60640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tf3b60640 \tvcvt\\.bf16\\.f32\td0, q0\n+ *[0-9a-f]+:\tfe00bd24 \tvdot\\.bf16\td11, d0, d4\\[1\\]\n+ *[0-9a-f]+:\tfe040d8b \tvdot\\.bf16\td0, d20, d11\\[0\\]\n+ *[0-9a-f]+:\tfc4a4c40 \tvmmla\\.bf16\tq10, q5, q0\n+ *[0-9a-f]+:\tfc00ac64 \tvmmla\\.bf16\tq5, q0, q10\n+ *[0-9a-f]*:\tfc7648d0 \tvfmat\\.bf16\tq10, q11, q0\n+ *[0-9a-f]*:\tfe7648f8 \tvfmat\\.bf16\tq10, q11, d0\\[3\\]\n+ *[0-9a-f]*:\tfe7648d0 \tvfmat\\.bf16\tq10, q11, d0\\[0\\]\n+ *[0-9a-f]*:\tfc764890 \tvfmab\\.bf16\tq10, q11, q0\n+ *[0-9a-f]*:\tfe7648b8 \tvfmab\\.bf16\tq10, q11, d0\\[3\\]\n+ *[0-9a-f]*:\tfe764890 \tvfmab\\.bf16\tq10, q11, d0\\[0\\]\n+ *[0-9a-f]+:\tf3f6464a \tvcvt\\.bf16\\.f32\td20, q5\n+ *[0-9a-f]+:\tf3b6b664 \tvcvt\\.bf16\\.f32\td11, q10\n+ *[0-9a-f]+:\teeb3a965 \tvcvtb\\.bf16\\.f32\ts20, s11\n+ *[0-9a-f]+:\t1ef3594a \tvcvtbne\\.bf16\\.f32\ts11, s20\n+ *[0-9a-f]+:\teeb30940 \tvcvtb\\.bf16\\.f32\ts0, s0\n+ *[0-9a-f]+:\teeb3a9e5 \tvcvtt\\.bf16\\.f32\ts20, s11\n+ *[0-9a-f]+:\t1ef359ca \tvcvttne\\.bf16\\.f32\ts11, s20\n+ *[0-9a-f]+:\teeb309c0 \tvcvtt\\.bf16\\.f32\ts0, s0"
    },
    {
      "sha": "6016ed2eb060d5339bd948b9226b861416fe629e",
      "filename": "gas/testsuite/gas/arm/bfloat16.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/gas/testsuite/gas/arm/bfloat16.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16.s?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -0,0 +1,2 @@\n+.include \"bfloat16-neon.s\"\n+.include \"bfloat16-non-neon.s\""
    },
    {
      "sha": "930d931cd2081060b04e25349536395305d4c201",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/arm.h (ARM_EXT2_V8_6A, ARM_AEXT2_V8_6A,\n+\tARM_ARCH_V8_6A): New.\n+\t* opcode/arm.h (ARM_EXT2_BF16): New feature macro.\n+\t(ARM_AEXT2_V8_6A): Include above macro in definition.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "7aea4d6e56805731d8d91f9a908c1cca332f3ab9",
      "filename": "include/opcode/arm.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/include/opcode/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/include/opcode/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arm.h?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -73,6 +73,8 @@\n #define ARM_EXT2_SB\t     0x00002000\t/* Speculation Barrier instruction.  */\n #define ARM_EXT2_PREDRES     0x00004000\t/* Prediction Restriction insns.     */\n #define ARM_EXT2_V8_1M_MAIN  0x00008000 /* ARMv8.1-M Mainline.\t\t     */\n+#define ARM_EXT2_V8_6A\t     0x00010000\t/* ARM V8.6A.\t\t\t     */\n+#define ARM_EXT2_BF16\t     0x00020000 /* ARMv8 bfloat16.\t\t     */\n \n /* Co-processor space extensions.  */\n #define ARM_CEXT_XSCALE\t     0x00000001\t/* Allow MIA etc.\t \t   */\n@@ -169,6 +171,7 @@\n \t\t\t\t\t   | ARM_EXT2_V8_4A)\n #define ARM_AEXT2_V8_5A\t(ARM_AEXT2_V8_4A   | ARM_EXT2_V8_5A | ARM_EXT2_SB     \\\n \t\t\t\t\t   | ARM_EXT2_PREDRES)\n+#define ARM_AEXT2_V8_6A\t(ARM_AEXT2_V8_5A   | ARM_EXT2_V8_6A | ARM_EXT2_BF16)\n #define ARM_AEXT_V8M_BASE\t(ARM_AEXT_V6SM\t    | ARM_EXT_DIV)\n #define ARM_AEXT_V8M_MAIN\t ARM_AEXT_V7M\n #define ARM_AEXT_V8M_MAIN_DSP\t ARM_AEXT_V7EM\n@@ -352,6 +355,9 @@\n #define ARM_ARCH_V8_5A\t ARM_FEATURE (ARM_AEXT_V8A, ARM_AEXT2_V8_5A,\t   \\\n \t\t\t\t      CRC_EXT_ARMV8 | FPU_NEON_EXT_RDMA\t   \\\n \t\t\t\t\t\t    | FPU_NEON_EXT_DOTPROD)\n+#define ARM_ARCH_V8_6A\t ARM_FEATURE (ARM_AEXT_V8A, ARM_AEXT2_V8_6A,\t   \\\n+\t\t\t\t      CRC_EXT_ARMV8 | FPU_NEON_EXT_RDMA\t   \\\n+\t\t\t\t\t\t    | FPU_NEON_EXT_DOTPROD)\n #define ARM_ARCH_V8M_BASE      ARM_FEATURE_CORE (ARM_AEXT_V8M_BASE,\t   \\\n \t\t\t\t\t\t ARM_AEXT2_V8M_BASE)\n #define ARM_ARCH_V8M_MAIN      ARM_FEATURE_CORE (ARM_AEXT_V8M_MAIN,\t   \\"
    },
    {
      "sha": "3cf6b463bc6677135fba69579a1f5f951d286c05",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -1,3 +1,15 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* arm-dis.c (select_arm_features): Update bfd_march_arm_8 with\n+\tArmv8.6-A.\n+\t(coprocessor_opcodes): Add bfloat16 vcvt{t,b}.\n+\t(neon_opcodes): Add bfloat SIMD instructions.\n+\t(print_insn_coprocessor): Add new control character %b to print\n+\tcondition code without checking cp_num.\n+\t(print_insn_neon): Account for BFloat16 instructions that have no\n+\tspecial top-byte handling.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "50ae9576561477a7c6e50628ffb20e005d9e9e59",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 30,
      "deletions": 5,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aab2c27d9f01d667f1b3356fbca2d931bfa6c599/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "patch": "@@ -396,6 +396,7 @@ struct opcode16\n    %%\t\t\t%\n \n    %c\t\t\tprint condition code (always bits 28-31 in ARM mode)\n+   %b\t\t\tprint condition code allowing cp_num == 9\n    %q\t\t\tprint shifter argument\n    %u\t\t\tprint condition code (unconditional in ARM mode,\n                           UNPREDICTABLE if not AL in Thumb)\n@@ -1207,11 +1208,15 @@ static const struct sopcode32 coprocessor_opcodes[] =\n   {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_3A),\n     0xfea00800, 0xffa00f10, \"vcmla%c.f32\\t%12-15,22V, %16-19,7V, %0-3,5D[0], #%20?21%20?780\"},\n \n+  /* BFloat16 instructions.  */\n+  {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0x0eb30940, 0x0fbf0f50, \"vcvt%7?tb%b.bf16.f32\\t%y1, %y0\"},\n+\n   /* Dot Product instructions in the space of coprocessor 13.  */\n   {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_DOTPROD),\n     0xfc200d00, 0xffb00f00, \"v%4?usdot.%4?us8\\t%12-15,22V, %16-19,7V, %0-3,5V\"},\n   {ANY, ARM_FEATURE_COPROC (FPU_NEON_EXT_DOTPROD),\n-    0xfe000d00, 0xff000f00, \"v%4?usdot.%4?us8\\t%12-15,22V, %16-19,7V, %0-3D[%5?10]\"},\n+    0xfe200d00, 0xff200f00, \"v%4?usdot.%4?us8\\t%12-15,22V, %16-19,7V, %0-3D[%5?10]\"},\n \n   /* ARMv8.2 FMAC Long instructions in the space of coprocessor 8.  */\n   {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_FP16_INST | ARM_EXT2_V8_2A),\n@@ -1452,6 +1457,20 @@ static const struct opcode32 neon_opcodes[] =\n   {ARM_FEATURE_CORE_HIGH (ARM_EXT2_FP16_INST),\n     0xf2300c10, 0xffb00f10, \"vfms%c.f16\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n \n+  /* BFloat16 instructions.  */\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xfc000d00, 0xffb00f10, \"vdot.bf16\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xfe000d00, 0xffb00f10, \"vdot.bf16\\t%12-15,22R, %16-19,7R, d%0-3d[%5d]\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xfc000c40, 0xffb00f50, \"vmmla.bf16\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xf3b60640, 0xffbf0fd0, \"vcvt%c.bf16.f32\\t%12-15,22D, %0-3,5Q\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xfc300810, 0xffb00f10, \"vfma%6?tb.bf16\\t%12-15,22Q, %16-19,7Q, %0-3,5Q\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n+    0xfe300810, 0xffb00f10, \"vfma%6?tb.bf16\\t%12-15,22Q, %16-19,7Q, %0-2D[%3,5d]\"},\n+\n   /* Two registers, miscellaneous.  */\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_ARMV8),\n     0xf3ba0400, 0xffbf0c10, \"vrint%7-9?p?m?zaxn%u.f32\\t%12-15,22R, %0-3,5R\"},\n@@ -8159,6 +8178,8 @@ print_insn_coprocessor_1 (const struct sopcode32 *opcodes,\n \t\t  if (cond != COND_UNCOND && cp_num == 9)\n \t\t    is_unpredictable = TRUE;\n \n+\t\t  /* Fall through.  */\n+\t\tcase 'b':\n \t\t  func (stream, \"%s\", arm_conditional[cond]);\n \t\t  break;\n \n@@ -8772,6 +8793,10 @@ print_insn_neon (struct disassemble_info *info, long given, bfd_boolean thumb)\n \t}\n       else if ((given & 0xff000000) == 0xf9000000)\n \tgiven ^= 0xf9000000 ^ 0xf4000000;\n+      /* BFloat16 neon instructions without special top byte handling.  */\n+      else if ((given & 0xff000000) == 0xfe000000\n+\t       || (given & 0xff000000) == 0xfc000000)\n+\t;\n       /* vdup is also a valid neon instruction.  */\n       else if ((given & 0xff910f5f) != 0xee800b10)\n \treturn FALSE;\n@@ -11625,11 +11650,11 @@ select_arm_features (unsigned long mach,\n     case bfd_mach_arm_7EM:\t ARM_SET_FEATURES (ARM_ARCH_V7EM); break;\n     case bfd_mach_arm_8:\n \t{\n-\t  /* Add bits for extensions that Armv8.5-A recognizes.  */\n-\t  arm_feature_set armv8_5_ext_fset\n+\t  /* Add bits for extensions that Armv8.6-A recognizes.  */\n+\t  arm_feature_set armv8_6_ext_fset\n \t    = ARM_FEATURE_CORE_HIGH (ARM_EXT2_FP16_INST);\n-\t  ARM_SET_FEATURES (ARM_ARCH_V8_5A);\n-\t  ARM_MERGE_FEATURE_SETS (arch_fset, arch_fset, armv8_5_ext_fset);\n+\t  ARM_SET_FEATURES (ARM_ARCH_V8_6A);\n+\t  ARM_MERGE_FEATURE_SETS (arch_fset, arch_fset, armv8_6_ext_fset);\n \t  break;\n \t}\n     case bfd_mach_arm_8R:\t ARM_SET_FEATURES (ARM_ARCH_V8R); break;"
    }
  ]
}