{
  "sha": "14095eb32673d88b8495769e95e1db8393ed2a3a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTQwOTVlYjMyNjczZDg4Yjg0OTU3NjllOTVlMWRiODM5M2VkMmEzYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:14:03Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:57Z"
    },
    "message": "Add dwarf2_per_objfile parameters to dwarf2_fetch_* functions\n\nThis allows removing dwarf2_per_cu_data references.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n\tdwarf2_fetch_die_type_sect_off): Add dwarf2_per_objfile\n\tparameter.\n\t* dwarf2/read.c (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n\tdwarf2_fetch_die_type_sect_off): Add dwarf2_per_objfile\n\tparameter.\n\t* dwarf2/loc.c (indirect_synthetic_pointer, per_cu_dwarf_call,\n\tsect_variable_value): Add dwarf2_per_objfile parameter.\n\t(class dwarf_evaluate_loc_desc) <dwarf_call,\n\tdwarf_variable_value>: Update.\n\t(fetch_const_value_from_synthetic_pointer): Add\n\tdwarf2_per_objfile parameter.\n\t(fetch_const_value_from_synthetic_pointer): Update.\n\t(coerced_pieced_ref): Update.\n\t(class symbol_needs_eval_context) <dwarf_call,\n\tdwarf_variable_value>: Update.\n\t(dwarf2_compile_expr_to_ax): Update.\n\nChange-Id: I07cf1806380633d0572304cea049a1fa5e9ea67f",
    "tree": {
      "sha": "9c96c3bb6fd512377755f4ee755c9f79f6955777",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c96c3bb6fd512377755f4ee755c9f79f6955777"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14095eb32673d88b8495769e95e1db8393ed2a3a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14095eb32673d88b8495769e95e1db8393ed2a3a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14095eb32673d88b8495769e95e1db8393ed2a3a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14095eb32673d88b8495769e95e1db8393ed2a3a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3c3cd3d4d7c7e05aa48b87c4ab11bac12a2caf7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c3cd3d4d7c7e05aa48b87c4ab11bac12a2caf7c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3c3cd3d4d7c7e05aa48b87c4ab11bac12a2caf7c"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 65,
    "deletions": 27
  },
  "files": [
    {
      "sha": "cf21973191b77d262b461112adae0d1e50d73c85",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=14095eb32673d88b8495769e95e1db8393ed2a3a",
      "patch": "@@ -1,3 +1,25 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n+\tdwarf2_fetch_die_type_sect_off): Add dwarf2_per_objfile\n+\tparameter.\n+\t* dwarf2/read.c (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n+\tdwarf2_fetch_die_type_sect_off): Add dwarf2_per_objfile\n+\tparameter.\n+\t* dwarf2/loc.c (indirect_synthetic_pointer, per_cu_dwarf_call,\n+\tsect_variable_value): Add dwarf2_per_objfile parameter.\n+\t(class dwarf_evaluate_loc_desc) <dwarf_call,\n+\tdwarf_variable_value>: Update.\n+\t(fetch_const_value_from_synthetic_pointer): Add\n+\tdwarf2_per_objfile parameter.\n+\t(fetch_const_value_from_synthetic_pointer): Update.\n+\t(coerced_pieced_ref): Update.\n+\t(class symbol_needs_eval_context) <dwarf_call,\n+\tdwarf_variable_value>: Update.\n+\t(dwarf2_compile_expr_to_ax): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/loc.c (allocate_piece_closure): Add dwarf2_per_objfile"
    },
    {
      "sha": "0d6e8ab6ba435dd282bf2dcd20a3ef839218a03c",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 27,
      "deletions": 19,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=14095eb32673d88b8495769e95e1db8393ed2a3a",
      "patch": "@@ -63,7 +63,8 @@ static struct call_site_parameter *dwarf_expr_reg_to_entry_parameter\n \n static struct value *indirect_synthetic_pointer\n   (sect_offset die, LONGEST byte_offset,\n-   struct dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile,\n    struct frame_info *frame,\n    struct type *type, bool resolve_abstract_p = false);\n \n@@ -581,11 +582,11 @@ get_frame_pc_for_per_cu_dwarf_call (void *baton)\n \n static void\n per_cu_dwarf_call (struct dwarf_expr_context *ctx, cu_offset die_offset,\n-\t\t   struct dwarf2_per_cu_data *per_cu)\n+\t\t   dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile)\n {\n   struct dwarf2_locexpr_baton block;\n \n-  block = dwarf2_fetch_die_loc_cu_off (die_offset, per_cu,\n+  block = dwarf2_fetch_die_loc_cu_off (die_offset, per_cu, per_objfile,\n \t\t\t\t       get_frame_pc_for_per_cu_dwarf_call,\n \t\t\t\t       ctx);\n \n@@ -601,9 +602,11 @@ per_cu_dwarf_call (struct dwarf_expr_context *ctx, cu_offset die_offset,\n \n static struct value *\n sect_variable_value (struct dwarf_expr_context *ctx, sect_offset sect_off,\n-\t\t     struct dwarf2_per_cu_data *per_cu)\n+\t\t     dwarf2_per_cu_data *per_cu,\n+\t\t     dwarf2_per_objfile *per_objfile)\n {\n-  struct type *die_type = dwarf2_fetch_die_type_sect_off (sect_off, per_cu);\n+  struct type *die_type\n+    = dwarf2_fetch_die_type_sect_off (sect_off, per_cu, per_objfile);\n \n   if (die_type == NULL)\n     error (_(\"Bad DW_OP_GNU_variable_value DIE.\"));\n@@ -616,7 +619,8 @@ sect_variable_value (struct dwarf_expr_context *ctx, sect_offset sect_off,\n \n   struct type *type = lookup_pointer_type (die_type);\n   struct frame_info *frame = get_selected_frame (_(\"No frame selected.\"));\n-  return indirect_synthetic_pointer (sect_off, 0, per_cu, frame, type, true);\n+  return indirect_synthetic_pointer (sect_off, 0, per_cu, per_objfile, frame,\n+\t\t\t\t     type, true);\n }\n \n class dwarf_evaluate_loc_desc : public dwarf_expr_context\n@@ -660,15 +664,15 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \n   void dwarf_call (cu_offset die_offset) override\n   {\n-    per_cu_dwarf_call (this, die_offset, per_cu);\n+    per_cu_dwarf_call (this, die_offset, per_cu, per_objfile);\n   }\n \n   /* Helper interface of sect_variable_value for\n      dwarf2_evaluate_loc_desc.  */\n \n   struct value *dwarf_variable_value (sect_offset sect_off) override\n   {\n-    return sect_variable_value (this, sect_off, per_cu);\n+    return sect_variable_value (this, sect_off, per_cu, per_objfile);\n   }\n \n   struct type *get_base_type (cu_offset die_offset, int size) override\n@@ -1963,15 +1967,17 @@ get_frame_address_in_block_wrapper (void *baton)\n \n static struct value *\n fetch_const_value_from_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n-\t\t\t\t\t  struct dwarf2_per_cu_data *per_cu,\n+\t\t\t\t\t  dwarf2_per_cu_data *per_cu,\n+\t\t\t\t\t  dwarf2_per_objfile *per_objfile,\n \t\t\t\t\t  struct type *type)\n {\n   struct value *result = NULL;\n   const gdb_byte *bytes;\n   LONGEST len;\n \n   auto_obstack temp_obstack;\n-  bytes = dwarf2_fetch_constant_bytes (die, per_cu, &temp_obstack, &len);\n+  bytes = dwarf2_fetch_constant_bytes (die, per_cu, per_objfile,\n+\t\t\t\t       &temp_obstack, &len);\n \n   if (bytes != NULL)\n     {\n@@ -1994,18 +2000,20 @@ fetch_const_value_from_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n \n static struct value *\n indirect_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n-\t\t\t    struct dwarf2_per_cu_data *per_cu,\n+\t\t\t    dwarf2_per_cu_data *per_cu,\n+\t\t\t    dwarf2_per_objfile *per_objfile,\n \t\t\t    struct frame_info *frame, struct type *type,\n \t\t\t    bool resolve_abstract_p)\n {\n   /* Fetch the location expression of the DIE we're pointing to.  */\n   struct dwarf2_locexpr_baton baton\n-    = dwarf2_fetch_die_loc_sect_off (die, per_cu,\n+    = dwarf2_fetch_die_loc_sect_off (die, per_cu, per_objfile,\n \t\t\t\t     get_frame_address_in_block_wrapper, frame,\n \t\t\t\t     resolve_abstract_p);\n \n   /* Get type of pointed-to DIE.  */\n-  struct type *orig_type = dwarf2_fetch_die_type_sect_off (die, per_cu);\n+  struct type *orig_type = dwarf2_fetch_die_type_sect_off (die, per_cu,\n+\t\t\t\t\t\t\t   per_objfile);\n   if (orig_type == NULL)\n     invalid_synthetic_pointer ();\n \n@@ -2019,7 +2027,7 @@ indirect_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n \t\t\t\t\t  byte_offset);\n   else\n     return fetch_const_value_from_synthetic_pointer (die, byte_offset, per_cu,\n-\t\t\t\t\t\t     type);\n+\t\t\t\t\t\t     per_objfile, type);\n }\n \n /* An implementation of an lval_funcs method to indirect through a\n@@ -2096,7 +2104,7 @@ indirect_pieced_value (struct value *value)\n \n   return indirect_synthetic_pointer (piece->v.ptr.die_sect_off,\n \t\t\t\t     byte_offset, c->per_cu,\n-\t\t\t\t     frame, type);\n+\t\t\t\t     c->per_objfile, frame, type);\n }\n \n /* Implementation of the coerce_ref method of lval_funcs for synthetic C++\n@@ -2123,7 +2131,7 @@ coerce_pieced_ref (const struct value *value)\n       return indirect_synthetic_pointer\n \t(closure->pieces[0].v.ptr.die_sect_off,\n \t closure->pieces[0].v.ptr.offset,\n-\t closure->per_cu, frame, type);\n+\t closure->per_cu, closure->per_objfile, frame, type);\n     }\n   else\n     {\n@@ -2752,15 +2760,15 @@ class symbol_needs_eval_context : public dwarf_expr_context\n \n   void dwarf_call (cu_offset die_offset) override\n   {\n-    per_cu_dwarf_call (this, die_offset, per_cu);\n+    per_cu_dwarf_call (this, die_offset, per_cu, per_objfile);\n   }\n \n   /* Helper interface of sect_variable_value for\n      dwarf2_loc_desc_get_symbol_read_needs.  */\n \n   struct value *dwarf_variable_value (sect_offset sect_off) override\n   {\n-    return sect_variable_value (this, sect_off, per_cu);\n+    return sect_variable_value (this, sect_off, per_cu, per_objfile);\n   }\n \n   /* DW_OP_entry_value accesses require a caller, therefore a\n@@ -3589,7 +3597,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t    op_ptr += size;\n \n \t    cu_offset cuoffset = (cu_offset) uoffset;\n-\t    block = dwarf2_fetch_die_loc_cu_off (cuoffset, per_cu,\n+\t    block = dwarf2_fetch_die_loc_cu_off (cuoffset, per_cu, per_objfile,\n \t\t\t\t\t\t get_ax_pc, expr);\n \n \t    /* DW_OP_call_ref is currently not supported.  */"
    },
    {
      "sha": "260fb54ce863043d4e65943ba4601e38436d648b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=14095eb32673d88b8495769e95e1db8393ed2a3a",
      "patch": "@@ -22299,14 +22299,14 @@ follow_die_ref (struct die_info *src_die, const struct attribute *attr,\n struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n \t\t\t       dwarf2_per_cu_data *per_cu,\n+\t\t\t       dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t       CORE_ADDR (*get_frame_pc) (void *baton),\n \t\t\t       void *baton, bool resolve_abstract_p)\n {\n   struct dwarf2_cu *cu;\n   struct die_info *die;\n   struct attribute *attr;\n   struct dwarf2_locexpr_baton retval;\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n \n   if (per_cu->cu == NULL)\n@@ -22403,12 +22403,14 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_cu_off (cu_offset offset_in_cu,\n \t\t\t     dwarf2_per_cu_data *per_cu,\n+\t\t\t     dwarf2_per_objfile *per_objfile,\n \t\t\t     CORE_ADDR (*get_frame_pc) (void *baton),\n \t\t\t     void *baton)\n {\n   sect_offset sect_off = per_cu->sect_off + to_underlying (offset_in_cu);\n \n-  return dwarf2_fetch_die_loc_sect_off (sect_off, per_cu, get_frame_pc, baton);\n+  return dwarf2_fetch_die_loc_sect_off (sect_off, per_cu, per_objfile,\n+\t\t\t\t\tget_frame_pc, baton);\n }\n \n /* Write a constant of a given type as target-ordered bytes into\n@@ -22435,6 +22437,7 @@ write_constant_as_bytes (struct obstack *obstack,\n const gdb_byte *\n dwarf2_fetch_constant_bytes (sect_offset sect_off,\n \t\t\t     dwarf2_per_cu_data *per_cu,\n+\t\t\t     dwarf2_per_objfile *per_objfile,\n \t\t\t     obstack *obstack,\n \t\t\t     LONGEST *len)\n {\n@@ -22445,10 +22448,10 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n   struct type *type;\n   LONGEST value;\n   enum bfd_endian byte_order;\n-  struct objfile *objfile = per_cu->dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n \n   if (per_cu->cu == NULL)\n-    load_cu (per_cu, per_cu->dwarf2_per_objfile, false);\n+    load_cu (per_cu, per_objfile, false);\n   cu = per_cu->cu;\n   if (cu == NULL)\n     {\n@@ -22564,13 +22567,14 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n \n struct type *\n dwarf2_fetch_die_type_sect_off (sect_offset sect_off,\n-\t\t\t\tdwarf2_per_cu_data *per_cu)\n+\t\t\t\tdwarf2_per_cu_data *per_cu,\n+\t\t\t\tdwarf2_per_objfile *per_objfile)\n {\n   struct dwarf2_cu *cu;\n   struct die_info *die;\n \n   if (per_cu->cu == NULL)\n-    load_cu (per_cu, per_cu->dwarf2_per_objfile, false);\n+    load_cu (per_cu, per_objfile, false);\n   cu = per_cu->cu;\n   if (!cu)\n     return NULL;"
    },
    {
      "sha": "c6d236b47785b68607371fa2b6bb8d7a4aef0dd3",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14095eb32673d88b8495769e95e1db8393ed2a3a/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=14095eb32673d88b8495769e95e1db8393ed2a3a",
      "patch": "@@ -589,6 +589,7 @@ CORE_ADDR dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n \n struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_sect_off\n   (sect_offset sect_off, dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile,\n    CORE_ADDR (*get_frame_pc) (void *baton),\n    void *baton, bool resolve_abstract_p = false);\n \n@@ -597,6 +598,7 @@ struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_sect_off\n \n struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_cu_off\n   (cu_offset offset_in_cu, dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile,\n    CORE_ADDR (*get_frame_pc) (void *baton),\n    void *baton);\n \n@@ -606,14 +608,16 @@ struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_cu_off\n    does not have a DW_AT_const_value, return NULL.  */\n \n extern const gdb_byte *dwarf2_fetch_constant_bytes\n-  (sect_offset sect_off, dwarf2_per_cu_data *per_cu, obstack *obstack,\n+  (sect_offset sect_off, dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile, obstack *obstack,\n    LONGEST *len);\n \n /* Return the type of the die at SECT_OFF in PER_CU.  Return NULL if no\n    valid type for this die is found.  */\n \n struct type *dwarf2_fetch_die_type_sect_off\n-  (sect_offset sect_off, dwarf2_per_cu_data *per_cu);\n+  (sect_offset sect_off, dwarf2_per_cu_data *per_cu,\n+   dwarf2_per_objfile *per_objfile);\n \n /* When non-zero, dump line number entries as they are read in.  */\n extern unsigned int dwarf_line_debug;"
    }
  ]
}