{
  "sha": "a39fdb411d43824b27d886bab42cada62a9fe431",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTM5ZmRiNDExZDQzODI0YjI3ZDg4NmJhYjQyY2FkYTYyYTlmZTQzMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:25Z"
    },
    "message": "Change two more functions to be methods on die_info\n\nThis changes lookup_addr_base and lookup_ranges_base to be methods on\ndie_info.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/die.h (struct die_info) <addr_base, ranges_base>: New\n\tmethods.\n\t* dwarf2/read.c (lookup_addr_base): Move to die.h.\n\t(lookup_ranges_base): Likewise.\n\t(read_cutu_die_from_dwo, read_full_die_1): Update.",
    "tree": {
      "sha": "5a245a46377ce009e26ec4ed2dd7b8c6aced5d4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a245a46377ce009e26ec4ed2dd7b8c6aced5d4b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a39fdb411d43824b27d886bab42cada62a9fe431",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a39fdb411d43824b27d886bab42cada62a9fe431",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a39fdb411d43824b27d886bab42cada62a9fe431",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a39fdb411d43824b27d886bab42cada62a9fe431/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "436c571c6afc8c5affe36327ab363b98ec9adb2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/436c571c6afc8c5affe36327ab363b98ec9adb2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/436c571c6afc8c5affe36327ab363b98ec9adb2d"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 37,
    "deletions": 31
  },
  "files": [
    {
      "sha": "b8190a1381ed789194b16984c3bc4c1fa00e024f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a39fdb411d43824b27d886bab42cada62a9fe431",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/die.h (struct die_info) <addr_base, ranges_base>: New\n+\tmethods.\n+\t* dwarf2/read.c (lookup_addr_base): Move to die.h.\n+\t(lookup_ranges_base): Likewise.\n+\t(read_cutu_die_from_dwo, read_full_die_1): Update.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_import_statement, read_file_scope)"
    },
    {
      "sha": "c3586645bd60eb37031ebea4e6c7ef7826702ea8",
      "filename": "gdb/dwarf2/die.h",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/dwarf2/die.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/dwarf2/die.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/die.h?ref=a39fdb411d43824b27d886bab42cada62a9fe431",
      "patch": "@@ -33,6 +33,32 @@ struct die_info\n     return NULL;\n   }\n \n+  /* Return the address base of the compile unit, which, if exists, is\n+     stored either at the attribute DW_AT_GNU_addr_base, or\n+     DW_AT_addr_base.  */\n+  gdb::optional<ULONGEST> addr_base ()\n+  {\n+    struct attribute *attr = this->attr (DW_AT_addr_base);\n+    if (attr == nullptr)\n+      attr = this->attr (DW_AT_GNU_addr_base);\n+    if (attr == nullptr)\n+      return gdb::optional<ULONGEST> ();\n+    return DW_UNSND (attr);\n+  }\n+\n+  /* Return range lists base of the compile unit, which, if exists, is\n+     stored either at the attribute DW_AT_rnglists_base or\n+     DW_AT_GNU_ranges_base.  */\n+  ULONGEST ranges_base ()\n+  {\n+    struct attribute *attr = this->attr (DW_AT_rnglists_base);\n+    if (attr == nullptr)\n+      attr = this->attr (DW_AT_GNU_ranges_base);\n+    if (attr == nullptr)\n+      return 0;\n+    return DW_UNSND (attr);\n+  }\n+\n \n   /* DWARF-2 tag for this DIE.  */\n   ENUM_BITFIELD(dwarf_tag) tag : 16;"
    },
    {
      "sha": "64e92ff92fea6dca0f998209826a6ca42db8fbf9",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 31,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a39fdb411d43824b27d886bab42cada62a9fe431/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=a39fdb411d43824b27d886bab42cada62a9fe431",
      "patch": "@@ -6386,34 +6386,6 @@ lookup_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n     }\n }\n \n-/* Return the address base of the compile unit, which, if exists, is stored\n-   either at the attribute DW_AT_GNU_addr_base, or DW_AT_addr_base.  */\n-static gdb::optional<ULONGEST>\n-lookup_addr_base (struct die_info *comp_unit_die)\n-{\n-  struct attribute *attr;\n-  attr = comp_unit_die->attr (DW_AT_addr_base);\n-  if (attr == nullptr)\n-    attr = comp_unit_die->attr (DW_AT_GNU_addr_base);\n-  if (attr == nullptr)\n-    return gdb::optional<ULONGEST> ();\n-  return DW_UNSND (attr);\n-}\n-\n-/* Return range lists base of the compile unit, which, if exists, is stored\n-   either at the attribute DW_AT_rnglists_base or DW_AT_GNU_ranges_base.  */\n-static ULONGEST\n-lookup_ranges_base (struct die_info *comp_unit_die)\n-{\n-  struct attribute *attr;\n-  attr = comp_unit_die->attr (DW_AT_rnglists_base);\n-  if (attr == nullptr)\n-    attr = comp_unit_die->attr (DW_AT_GNU_ranges_base);\n-  if (attr == nullptr)\n-    return 0;\n-  return DW_UNSND (attr);\n-}\n-\n /* Low level DIE reading support.  */\n \n /* Initialize a die_reader_specs struct from a dwarf2_cu struct.  */\n@@ -6502,12 +6474,12 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n       ranges = dwarf2_attr (stub_comp_unit_die, DW_AT_ranges, cu);\n       comp_dir = dwarf2_attr (stub_comp_unit_die, DW_AT_comp_dir, cu);\n \n-      cu->addr_base = lookup_addr_base (stub_comp_unit_die);\n+      cu->addr_base = stub_comp_unit_die->addr_base ();\n \n       /* There should be a DW_AT_rnglists_base (DW_AT_GNU_ranges_base) attribute\n \t here (if needed). We need the value before we can process\n \t DW_AT_ranges.  */\n-      cu->ranges_base = lookup_ranges_base (stub_comp_unit_die);\n+      cu->ranges_base = stub_comp_unit_die->ranges_base ();\n     }\n   else if (stub_comp_dir != NULL)\n     {\n@@ -17538,7 +17510,7 @@ read_full_die_1 (const struct die_reader_specs *reader,\n   if (attr != nullptr)\n     cu->str_offsets_base = DW_UNSND (attr);\n \n-  auto maybe_addr_base = lookup_addr_base(die);\n+  auto maybe_addr_base = die->addr_base ();\n   if (maybe_addr_base.has_value ())\n     cu->addr_base = *maybe_addr_base;\n   for (int index : indexes_that_need_reprocess)"
    }
  ]
}