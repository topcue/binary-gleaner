{
  "sha": "0b8dbf3f1c359e26b25ce0e48634c83befd60994",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI4ZGJmM2YxYzM1OWUyNmIyNWNlMGU0ODYzNGM4M2JlZmQ2MDk5NA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-15T21:58:08Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-19T00:37:21Z"
    },
    "message": "gdb/testsuite: Merge whatis.exp and ctf-whatis.exp\n\nThe recently added gdb.base/ctf-whatis.exp test is a slightly modified\nversion of gdb.base/whatis.exp, with a few tests removed, and the\nsource compiled with different compiler options.  This patch merges\nthe two tests together into a single test script.\n\nI tested using a version of GCC with CTF support added.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/ctf-whatis.c: Delete.\n\t* gdb.base/ctf-whatis.exp: Delete.\n\t* gdb.base/whatis.exp: Rewrite to compile as both dwarf and ctf.\n\nChange-Id: I09e11c70f197b79d2b1e0ae8c86a21c622be6c51",
    "tree": {
      "sha": "90485c1384767b0c1c8557aa9d9147c5631c5ed7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/90485c1384767b0c1c8557aa9d9147c5631c5ed7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b8dbf3f1c359e26b25ce0e48634c83befd60994",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b8dbf3f1c359e26b25ce0e48634c83befd60994",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b8dbf3f1c359e26b25ce0e48634c83befd60994",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b8dbf3f1c359e26b25ce0e48634c83befd60994/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f833b7a7da710991d4b91b0e994abd1eef9a7d77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f833b7a7da710991d4b91b0e994abd1eef9a7d77",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f833b7a7da710991d4b91b0e994abd1eef9a7d77"
    }
  ],
  "stats": {
    "total": 1611,
    "additions": 469,
    "deletions": 1142
  },
  "files": [
    {
      "sha": "806389c956c580664cc56111f19fd63f672024c9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b8dbf3f1c359e26b25ce0e48634c83befd60994/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b8dbf3f1c359e26b25ce0e48634c83befd60994/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0b8dbf3f1c359e26b25ce0e48634c83befd60994",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/ctf-whatis.c: Delete.\n+\t* gdb.base/ctf-whatis.exp: Delete.\n+\t* gdb.base/whatis.exp: Rewrite to compile as both dwarf and ctf.\n+\n 2019-11-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/ctf-cvexpr.exp: Delete."
    },
    {
      "sha": "548dcbb7afde0ee401b28a161b41496d59ba2532",
      "filename": "gdb/testsuite/gdb.base/ctf-whatis.c",
      "status": "removed",
      "additions": 0,
      "deletions": 282,
      "changes": 282,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f833b7a7da710991d4b91b0e994abd1eef9a7d77/gdb/testsuite/gdb.base/ctf-whatis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f833b7a7da710991d4b91b0e994abd1eef9a7d77/gdb/testsuite/gdb.base/ctf-whatis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ctf-whatis.c?ref=f833b7a7da710991d4b91b0e994abd1eef9a7d77",
      "patch": "@@ -1,282 +0,0 @@\n-/* This test program is part of GDB, the GNU debugger.\n-\n-   Copyright 2019 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-/*\n- *\tTest file with lots of different types, for testing the\n- *\t\"whatis\" command on CTF data. It's derived from whatis.c.\n- */\n- \n-/*\n- *\tFirst the basic C types.\n- */\n-\n-char\t\tv_char;\n-signed char\tv_signed_char;\n-unsigned char\tv_unsigned_char;\n-\n-short\t\tv_short;\n-signed short\tv_signed_short;\n-unsigned short\tv_unsigned_short;\n-\n-int\t\tv_int;\n-signed int\tv_signed_int;\n-unsigned int\tv_unsigned_int;\n-\n-long\t\tv_long;\n-signed long\tv_signed_long;\n-unsigned long\tv_unsigned_long;\n-\n-#ifndef NO_LONG_LONG\n-long long\t\tv_long_long;\n-signed long long\tv_signed_long_long;\n-unsigned long long\tv_unsigned_long_long;\n-#endif\n-\n-float\t\tv_float;\n-double\t\tv_double;\n-\n-/*\n- *\tNow some derived types, which are arrays, functions-returning,\n- *\tpointers, structures, unions, and enumerations.\n- */\n-\n-/**** arrays *******/\n-\n-char\t\tv_char_array[2];\n-signed char\tv_signed_char_array[2];\n-unsigned char\tv_unsigned_char_array[2];\n-\n-short\t\tv_short_array[2];\n-signed short\tv_signed_short_array[2];\n-unsigned short\tv_unsigned_short_array[2];\n-\n-int\t\tv_int_array[2];\n-signed int\tv_signed_int_array[2];\n-unsigned int\tv_unsigned_int_array[2];\n-\n-long\t\tv_long_array[2];\n-signed long\tv_signed_long_array[2];\n-unsigned long\tv_unsigned_long_array[2];\n-\n-#ifndef NO_LONG_LONG\n-long long\t\tv_long_long_array[2];\n-signed long long\tv_signed_long_long_array[2];\n-unsigned long long\tv_unsigned_long_long_array[2];\n-#endif\n-\n-float\t\tv_float_array[2];\n-double\t\tv_double_array[2];\n-\n-/**** pointers *******/\n-\n-/* Make sure they still print as pointer to foo even there is a typedef\n-   for that type.  Test this not just for char *, which might be\n-   a special case kludge in GDB (Unix system include files like to define\n-   caddr_t), but for a variety of types.  */\n-typedef char *char_addr;\n-char_addr a_char_addr;\n-typedef unsigned short *ushort_addr;\n-ushort_addr a_ushort_addr;\n-typedef signed long *slong_addr;\n-slong_addr a_slong_addr;\n-#ifndef NO_LONG_LONG\n-typedef signed long long *slong_long_addr;\n-slong_long_addr a_slong_long_addr;\n-#endif\n-\n-char\t\t*v_char_pointer;\n-signed char\t*v_signed_char_pointer;\n-unsigned char\t*v_unsigned_char_pointer;\n-\n-short\t\t*v_short_pointer;\n-signed short\t*v_signed_short_pointer;\n-unsigned short\t*v_unsigned_short_pointer;\n-\n-int\t\t*v_int_pointer;\n-signed int\t*v_signed_int_pointer;\n-unsigned int\t*v_unsigned_int_pointer;\n-\n-long\t\t*v_long_pointer;\n-signed long\t*v_signed_long_pointer;\n-unsigned long\t*v_unsigned_long_pointer;\n-\n-#ifndef NO_LONG_LONG\n-long long\t\t*v_long_long_pointer;\n-signed long long\t*v_signed_long_long_pointer;\n-unsigned long long\t*v_unsigned_long_long_pointer;\n-#endif\n-\n-float\t\t*v_float_pointer;\n-double\t\t*v_double_pointer;\n-\n-/**** structs *******/\n-\n-struct t_struct {\n-    char\tv_char_member;\n-    short\tv_short_member;\n-    int\t\tv_int_member;\n-    long\tv_long_member;\n-#ifndef NO_LONG_LONG\n-    long long\tv_long_long_member;\n-#endif\n-    float\tv_float_member;\n-    double\tv_double_member;\n-} v_struct1, *v_struct_ptr1;\n-\n-struct {\n-    char\tv_char_member;\n-    short\tv_short_member;\n-    int\t\tv_int_member;\n-    long\tv_long_member;\n-#ifndef NO_LONG_LONG\n-    long long\tv_long_long_member;\n-#endif\n-    float\tv_float_member;\n-    double\tv_double_member;\n-} v_struct2, *v_struct_ptr2;\n-\n-/**** unions *******/\n-\n-union t_union {\n-    char\tv_char_member;\n-    short\tv_short_member;\n-    int\t\tv_int_member;\n-    long\tv_long_member;\n-#ifndef NO_LONG_LONG\n-    long long\tv_long_long_member;\n-#endif\n-    float\tv_float_member;\n-    double\tv_double_member;\n-} v_union, *v_union_ptr;\n-\n-union {\n-    char\tv_char_member;\n-    short\tv_short_member;\n-    int\t\tv_int_member;\n-    long\tv_long_member;\n-#ifndef NO_LONG_LONG\n-    long long\tv_long_long_member;\n-#endif\n-    float\tv_float_member;\n-    double\tv_double_member;\n-} v_union2, *v_union_ptr2;\n-\n-/**** Some misc more complicated things *******/\n-\n-struct outer_struct {\n-\tint outer_int;\n-\tstruct inner_struct {\n-\t\tint inner_int;\n-\t\tlong inner_long;\n-\t}inner_struct_instance;\n-\tunion inner_union {\n-\t\tint inner_union_int;\n-\t\tlong inner_union_long;\n-\t}inner_union_instance;\n-\tlong outer_long;\n-} nested_su;\n-\n-/***********/\n-\n-int main ()\n-{\n-  /* Some linkers (e.g. on AIX) remove unreferenced variables,\n-     so make sure to reference them. */\n-  v_char = 0;\n-  v_signed_char = 1;\n-  v_unsigned_char = 2;\n-\n-  v_short = 3;\n-  v_signed_short = 4;\n-  v_unsigned_short = 5;\n-\n-  v_int = 6;\n-  v_signed_int = 7;\n-  v_unsigned_int = 8;\n-\n-  v_long = 9;\n-  v_signed_long = 10;\n-  v_unsigned_long = 11;\n-\n-#ifndef NO_LONG_LONG\n-  v_long_long = 12;\n-  v_signed_long_long = 13;\n-  v_unsigned_long_long = 14;\n-#endif\n-\n-  v_float = 100.0;\n-  v_double = 200.0;\n-\n-\n-  v_char_array[0] = v_char;\n-  v_signed_char_array[0] = v_signed_char;\n-  v_unsigned_char_array[0] = v_unsigned_char;\n-\n-  v_short_array[0] = v_short;\n-  v_signed_short_array[0] = v_signed_short;\n-  v_unsigned_short_array[0] = v_unsigned_short;\n-\n-  v_int_array[0] = v_int;\n-  v_signed_int_array[0] = v_signed_int;\n-  v_unsigned_int_array[0] = v_unsigned_int;\n-\n-  v_long_array[0] = v_long;\n-  v_signed_long_array[0] = v_signed_long;\n-  v_unsigned_long_array[0] = v_unsigned_long;\n-\n-#ifndef NO_LONG_LONG\n-  v_long_long_array[0] = v_long_long;\n-  v_signed_long_long_array[0] = v_signed_long_long;\n-  v_unsigned_long_long_array[0] = v_unsigned_long_long;\n-#endif\n-\n-  v_float_array[0] = v_float;\n-  v_double_array[0] = v_double;\n-\n-  v_char_pointer = &v_char;\n-  v_signed_char_pointer = &v_signed_char;\n-  v_unsigned_char_pointer = &v_unsigned_char;\n-\n-  v_short_pointer = &v_short;\n-  v_signed_short_pointer = &v_signed_short;\n-  v_unsigned_short_pointer = &v_unsigned_short;\n-\n-  v_int_pointer = &v_int;\n-  v_signed_int_pointer = &v_signed_int;\n-  v_unsigned_int_pointer = &v_unsigned_int;\n-\n-  v_long_pointer = &v_long;\n-  v_signed_long_pointer = &v_signed_long;\n-  v_unsigned_long_pointer = &v_unsigned_long;\n-\n-#ifndef NO_LONG_LONG\n-  v_long_long_pointer = &v_long_long;\n-  v_signed_long_long_pointer = &v_signed_long_long;\n-  v_unsigned_long_long_pointer = &v_unsigned_long_long;\n-#endif\n-\n-  v_float_pointer = &v_float;\n-  v_double_pointer = &v_double;\n-\n-  v_union2.v_short_member = v_union.v_short_member;\n-\n-  v_struct1.v_char_member = 0;\n-  v_struct2.v_char_member = 0;\n-\n-  nested_su.outer_int = 0;\n-  return 0;\n-}"
    },
    {
      "sha": "626aecb87814fc7229b8594ed51931592a22a14d",
      "filename": "gdb/testsuite/gdb.base/ctf-whatis.exp",
      "status": "removed",
      "additions": 0,
      "deletions": 414,
      "changes": 414,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f833b7a7da710991d4b91b0e994abd1eef9a7d77/gdb/testsuite/gdb.base/ctf-whatis.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f833b7a7da710991d4b91b0e994abd1eef9a7d77/gdb/testsuite/gdb.base/ctf-whatis.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ctf-whatis.exp?ref=f833b7a7da710991d4b91b0e994abd1eef9a7d77",
      "patch": "@@ -1,414 +0,0 @@\n-# Copyright 2019 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-# This file is a subset of whatis.exp written by Rob Savoye. (rob@cygnus.com)\n-\n-if [skip_ctf_tests] {\n-    unsupported \"no ctf debug format support\"\n-    return 0\n-}\n-\n-standard_testfile .c\n-\n-# Using `-gt` generates full-fledged CTF debug information.\n-set opts \"additional_flags=-gt\"\n-if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n-          [list $srcfile] [list $opts nowarnings]] } {\n-    return 0\n-}\n-\n-# Create and source the file that provides information about the compiler\n-# used to compile the test case.\n-if [get_compiler_info] {\n-    return -1\n-}\n-\n-# Start with a fresh gdb.\n-\n-clean_restart $binfile\n-\n-# Define a procedure to set up an xfail for all targets that put out a\n-# `long' type as an `int' type.\n-# Sun cc has this problem.\n-# It was said that COFF targets can not distinguish int from long either.\n-\n-proc setup_xfail_on_long_vs_int {} {\n-    global gcc_compiled\n-\n-    if {!$gcc_compiled} {\n-\tsetup_xfail \"*-sun-sunos4*\" \"i*86-sequent-bsd*\"\n-    }\n-}\n-\n-#\n-# Test whatis command with basic C types\n-#\n-# The name printed now (as of 23 May 1993) is whatever name the compiler\n-# uses in the stabs.  So we need to deal with names both from gcc and\n-# native compilers.\n-#\n-\n-gdb_test \"whatis v_char\" \\\n-    \"type = (unsigned char|char)\" \\\n-    \"whatis char\"\n-\n-gdb_test \"whatis v_signed_char\" \\\n-    \"type = (signed char|char)\" \\\n-    \"whatis signed char\"\n-\n-gdb_test \"whatis v_unsigned_char\" \\\n-    \"type = unsigned char\" \\\n-    \"whatis unsigned char\"\n-\n-gdb_test \"whatis v_short\" \\\n-    \"type = (short|short int)\" \\\n-    \"whatis short\"\n-\n-gdb_test \"whatis v_signed_short\" \\\n-    \"type = (short|short int|signed short|signed short int)\" \\\n-    \"whatis signed short\"\n-\n-gdb_test \"whatis v_unsigned_short\" \\\n-    \"type = (unsigned short|short unsigned int)\" \\\n-    \"whatis unsigned short\"\n-\n-gdb_test \"whatis v_int\" \\\n-    \"type = int\" \\\n-    \"whatis int\"\n-\n-gdb_test \"whatis v_signed_int\" \\\n-    \"type = (signed |)int\" \\\n-    \"whatis signed int\"\n-\n-gdb_test \"whatis v_unsigned_int\" \\\n-    \"type = unsigned int\" \\\n-    \"whatis unsigned int\"\n-\n-setup_xfail_on_long_vs_int\n-# AIX xlc gets this wrong and unsigned long right.  Go figure.\n-if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n-gdb_test \"whatis v_long\" \\\n-    \"type = (long|long int)\" \\\n-    \"whatis long\"\n-\n-setup_xfail_on_long_vs_int\n-# AIX xlc gets this wrong and unsigned long right.  Go figure.\n-if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n-gdb_test \"whatis v_signed_long\" \\\n-    \"type = (signed |)(long|long int)\" \\\n-    \"whatis signed long\"\n-\n-setup_xfail_on_long_vs_int\n-gdb_test \"whatis v_unsigned_long\" \\\n-    \"type = (unsigned long|long unsigned int)\" \\\n-    \"whatis unsigned long\"\n-\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_unsigned_long_long\" \\\n-\t\"type = (unsigned long long|long long unsigned int)\" \\\n-\t\"whatis unsigned long long\"\n-}\n-\n-gdb_test \"whatis v_float\" \\\n-    \"type = float\" \\\n-    \"whatis float\"\n-\n-gdb_test \"whatis v_double\" \\\n-    \"type = double\" \\\n-    \"whatis double\"\n-\n-\n-# test whatis command with arrays\n-#\n-# We already tested whether char prints as \"char\", so here we accept\n-# \"unsigned char\", \"signed char\", and other perversions.  No need for more\n-# than one xfail for the same thing.\n-gdb_test \"whatis v_char_array\" \\\n-    \"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n-    \"whatis char array\"\n-\n-gdb_test \"whatis v_signed_char_array\" \\\n-    \"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed char array\"\n-\n-gdb_test \"whatis v_unsigned_char_array\" \\\n-    \"type = unsigned char \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned char array\"\n-\n-gdb_test \"whatis v_short_array\" \\\n-    \"type = (short|short int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis short array\"\n-\n-gdb_test \"whatis v_signed_short_array\" \\\n-    \"type = (signed |)(short|short int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed short array\"\n-\n-gdb_test \"whatis v_unsigned_short_array\" \\\n-    \"type = (unsigned short|short unsigned int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned short array\"\n-\n-gdb_test \"whatis v_int_array\" \\\n-    \"type = int \\\\\\[2\\\\\\]\" \\\n-    \"whatis int array\"\n-\n-gdb_test \"whatis v_signed_int_array\" \\\n-    \"type = (signed |)int \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed int array\"\n-\n-gdb_test \"whatis v_unsigned_int_array\" \\\n-    \"type = unsigned int \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned int array\"\n-\n-# We already tested whether long prints as long, so here we accept int\n-# No need for more than one xfail for the same thing.\n-gdb_test \"whatis v_long_array\" \\\n-    \"type = (int|long|long int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis long array\"\n-\n-gdb_test \"whatis v_signed_long_array\" \\\n-    \"type = (signed |)(int|long|long int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed long array\"\n-\n-gdb_test \"whatis v_unsigned_long_array\" \\\n-    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned long array\"\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_unsigned_long_long_array\" \\\n-\t\"type = (unsigned long long|long long unsigned int) \\\\\\[2\\\\\\]\" \\\n-\t\"whatis unsigned long array\"\n-}\n-\n-gdb_test \"whatis v_float_array\" \\\n-    \"type = float \\\\\\[2\\\\\\]\" \\\n-    \"whatis float array\"\n-\n-gdb_test \"whatis v_double_array\" \\\n-    \"type = double \\\\\\[2\\\\\\]\" \\\n-    \"whatis double array\"\n-\n-\n-# test whatis command with pointers\n-#\n-# We already tested whether char prints as char, so accept various perversions\n-# here.  We especially want to make sure we test that it doesn't print as\n-# caddr_t.\n-gdb_test \"whatis v_char_pointer\" \\\n-    \"type = (unsigned |signed |)char \\\\*\" \\\n-    \"whatis char pointer\"\n-\n-gdb_test \"whatis v_signed_char_pointer\" \\\n-    \"type = (unsigned |signed |)char \\\\*\" \\\n-    \"whatis signed char pointer\"\n-\n-gdb_test \"whatis v_unsigned_char_pointer\" \\\n-    \"type = unsigned char \\\\*\" \\\n-    \"whatis unsigned char pointer\"\n-\n-gdb_test \"whatis v_short_pointer\" \\\n-    \"type = (short|short int) \\\\*\" \\\n-    \"whatis short pointer\"\n-\n-gdb_test \"whatis v_signed_short_pointer\" \\\n-    \"type = (signed |)(short|short int) \\\\*\" \\\n-    \"whatis signed short pointer\"\n-\n-gdb_test \"whatis v_unsigned_short_pointer\" \\\n-    \"type = (unsigned short|short unsigned int) \\\\*\" \\\n-    \"whatis unsigned short pointer\"\n-\n-gdb_test \"whatis v_int_pointer\" \\\n-    \"type = int \\\\*\" \\\n-    \"whatis int pointer\"\n-\n-gdb_test \"whatis v_signed_int_pointer\" \\\n-    \"type = (signed |)int \\\\*\" \\\n-    \"whatis signed int pointer\"\n-\n-gdb_test \"whatis v_unsigned_int_pointer\" \\\n-    \"type = unsigned int \\\\*\" \\\n-    \"whatis unsigned int pointer\"\n-\n-# We already tested whether long prints as long, so here we accept int\n-gdb_test \"whatis v_long_pointer\" \\\n-    \"type = (long|int|long int) \\\\*\" \\\n-    \"whatis long pointer\"\n-\n-gdb_test \"whatis v_signed_long_pointer\" \\\n-    \"type = (signed |)(long|int|long int) \\\\*\" \\\n-    \"whatis signed long pointer\"\n-\n-gdb_test \"whatis v_unsigned_long_pointer\" \\\n-    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\*\" \\\n-    \"whatis unsigned long pointer\"\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_long_long_pointer\" \\\n-\t\"type = long long(| int) \\\\*\" \\\n-\t\"whatis long long pointer\"\n-\n-    gdb_test \"whatis v_signed_long_long_pointer\" \\\n-\t\"type = (signed |)long long(| int) \\\\*\" \\\n-\t\"whatis signed long long pointer\"\n-\n-    gdb_test \"whatis v_unsigned_long_long_pointer\" \\\n-\t\"type = (unsigned long long|long long unsigned int) \\\\*\" \\\n-\t\"whatis unsigned long long pointer\"\n-}\n-\n-gdb_test \"whatis v_float_pointer\" \\\n-    \"type = float \\\\*\" \\\n-    \"whatis float pointer\"\n-\n-gdb_test \"whatis v_double_pointer\" \\\n-    \"type = double \\\\*\" \\\n-    \"whatis double pointer\"\n-\n-\n-# test whatis command with structure types\n-\n-# First with a type argument, with both \"set print object\" set to \"on\"\n-# and \"off\", ending with \"off\" for the following tests.\n-foreach_with_prefix print_object {\"on\" \"off\"} {\n-    gdb_test_no_output \"set print object $print_object\"\n-\n-    gdb_test \"whatis struct t_struct\" \\\n-\t\"type = struct t_struct\" \\\n-\t\"whatis named structure using type name\"\n-\n-    gdb_test \"whatis struct t_struct *\" \\\n-\t\"type = struct t_struct \\\\*\" \\\n-\t\"whatis named structure using type name and pointer\"\n-\n-    gdb_test \"whatis struct t_struct &\" \\\n-\t\"type = struct t_struct &\" \\\n-\t\"whatis named structure using type name and reference\"\n-}\n-\n-# Now with an expression argument.\n-\n-gdb_test \"whatis v_struct_ptr1\" \\\n-    \"type = struct t_struct \\\\*\"\n-\n-gdb_test \"whatis &v_struct_ptr1\" \\\n-    \"type = struct t_struct \\\\*\\\\*\"\n-\n-gdb_test \"whatis v_struct_ptr1->v_char_member\" \\\n-    \"type = char\"\n-\n-gdb_test \"whatis v_struct_ptr2->v_char_member\" \\\n-    \"type = char\"\n-\n-gdb_test \"whatis &(v_struct_ptr1->v_char_member)\" \\\n-    \"type = char \\\\*\"\n-\n-gdb_test \"whatis &(v_struct_ptr2->v_char_member)\" \\\n-    \"type = char \\\\*\"\n-\n-# test whatis command with union types\n-\n-gdb_test \"whatis union t_union\" \\\n-    \"type = union t_union\" \\\n-    \"whatis named union using type name\"\n-\n-gdb_test \"whatis v_union_ptr\" \\\n-    \"type = union t_union \\\\*\"\n-\n-gdb_test \"whatis &v_union_ptr\" \\\n-    \"type = union t_union \\\\*\\\\*\"\n-\n-gdb_test \"whatis v_union_ptr->v_char_member\" \\\n-    \"type = char\"\n-\n-gdb_test \"whatis v_union_ptr2->v_char_member\" \\\n-    \"type = char\"\n-\n-gdb_test \"whatis &(v_union_ptr->v_char_member)\" \\\n-    \"type = char \\\\*\"\n-\n-gdb_test \"whatis &(v_union_ptr2->v_char_member)\" \\\n-    \"type = char \\\\*\"\n-\n-# test whatis command with nested struct and union\n-gdb_test \"whatis nested_su\" \\\n-    \"type = struct outer_struct\" \\\n-    \"whatis outer structure\"\n-\n-gdb_test \"whatis nested_su.outer_int\" \\\n-    \"type = int\" \\\n-    \"whatis outer structure member\"\n-\n-gdb_test \"whatis nested_su.inner_struct_instance\" \\\n-    \"type = struct inner_struct\" \\\n-    \"whatis inner structure\"\n-\n-gdb_test \"whatis nested_su.inner_struct_instance.inner_int\" \\\n-    \"type = int\" \\\n-    \"whatis inner structure member\"\n-\n-gdb_test \"whatis nested_su.inner_union_instance\" \\\n-    \"type = union inner_union\" \\\n-    \"whatis inner union\"\n-\n-gdb_test \"whatis nested_su.inner_union_instance.inner_union_int\" \\\n-    \"type = int\" \\\n-    \"whatis inner union member\"\n-\n-# Using stabs we will mark these functions as prototyped.  This\n-# is harmless but causes an extra VOID to be printed.\n-set void \"(void|)\"\n-\n-# Regression tests for PR 9514.\n-\n-gdb_test \"whatis void (**)()\" \\\n-  \"type = void \\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to pointer to pointer to function\"\n-\n-gdb_test \"whatis void (** const)()\" \\\n-  \"type = void \\\\(\\\\*\\\\* const\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to const pointer to pointer to function\"\n-\n-gdb_test \"whatis void (* const *)()\" \\\n-  \"type = void \\\\(\\\\* const \\\\*\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to pointer to const pointer to function\"\n-\n-gdb_test \"whatis int *(*)()\" \\\n-    \"type = int \\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\" \\\n-    \"whatis applied to pointer to function returning pointer to int\"\n-\n-gdb_test \"whatis int *(**)()\" \\\n-    \"type = int \\\\*\\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n-    \"whatis applied to pointer to pointer to function returning pointer to int\"\n-\n-gdb_test \"whatis char (*(*)())\\[23\\]\" \\\n-    \"type = char \\\\(\\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\\\\)\\\\\\[23\\\\\\]\" \\\n-    \"whatis applied to pointer to function returning pointer to array\"\n-\n-gdb_test \"whatis int (*)(int, int)\" \\\n-    \"type = int \\\\(\\\\*\\\\)\\\\(int, int\\\\)\" \\\n-    \"whatis applied to pointer to function taking int,int and returning int\"\n-\n-gdb_test \"whatis int (*)(const int *, ...)\" \\\n-    \"type = int \\\\(\\\\*\\\\)\\\\(const int \\\\*, \\\\.\\\\.\\\\.\\\\)\" \\\n-    \"whatis applied to pointer to function taking const int ptr and varargs and returning int\"\n-\n-gdb_test \"whatis int (*)(void, int, int)\" \\\n-    \"parameter types following 'void'\" \\\n-    \"whatis applied to function with types trailing 'void'\"\n-\n-gdb_test \"whatis int (*)(int, void, int)\" \\\n-    \"'void' invalid as parameter type\" \\\n-    \"whatis applied to function with 'void' parameter type\""
    },
    {
      "sha": "1ef606e931f14a1adf63fffb5d0a16370cca02ba",
      "filename": "gdb/testsuite/gdb.base/whatis.exp",
      "status": "modified",
      "additions": 463,
      "deletions": 446,
      "changes": 909,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b8dbf3f1c359e26b25ce0e48634c83befd60994/gdb/testsuite/gdb.base/whatis.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b8dbf3f1c359e26b25ce0e48634c83befd60994/gdb/testsuite/gdb.base/whatis.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/whatis.exp?ref=0b8dbf3f1c359e26b25ce0e48634c83befd60994",
      "patch": "@@ -27,21 +27,6 @@ if [target_info exists no_long_long] {\n \n standard_testfile .c\n \n-if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable $exec_opts] != \"\" } {\n-     untested \"failed to compile\"\n-     return -1\n-}\n-\n-# Create and source the file that provides information about the compiler\n-# used to compile the test case.\n-if [get_compiler_info] {\n-    return -1\n-}\n-\n-# Start with a fresh gdb.\n-\n-clean_restart $binfile\n-\n # Define a procedure to set up an xfail for all targets that put out a\n # `long' type as an `int' type.\n # Sun cc has this problem.\n@@ -55,531 +40,563 @@ proc setup_xfail_on_long_vs_int {} {\n     }\n }\n \n-#\n-# Test whatis command with basic C types\n-#\n-# The name printed now (as of 23 May 1993) is whatever name the compiler\n-# uses in the stabs.  So we need to deal with names both from gcc and\n-# native compilers.\n-#\n+# Compile the test using OPTIONS into a sub-directory DIR, and then\n+# run the test.\n+proc do_test {dir options} {\n+    global srcfile testfile gcc_compiled\n \n-gdb_test \"whatis v_char\" \\\n-    \"type = (unsigned char|char)\" \\\n-    \"whatis char\"\n-\n-gdb_test \"whatis v_signed_char\" \\\n-    \"type = (signed char|char)\" \\\n-    \"whatis signed char\"\n-\n-gdb_test \"whatis v_unsigned_char\" \\\n-    \"type = unsigned char\" \\\n-    \"whatis unsigned char\"\n-\n-gdb_test \"whatis v_short\" \\\n-    \"type = (short|short int)\" \\\n-    \"whatis short\"\n-\n-gdb_test \"whatis v_signed_short\" \\\n-    \"type = (short|short int|signed short|signed short int)\" \\\n-    \"whatis signed short\"\n-\n-gdb_test \"whatis v_unsigned_short\" \\\n-    \"type = (unsigned short|short unsigned int)\" \\\n-    \"whatis unsigned short\" \n-\n-gdb_test \"whatis v_int\" \\\n-    \"type = int\" \\\n-    \"whatis int\"\n-\n-gdb_test \"whatis v_signed_int\" \\\n-    \"type = (signed |)int\" \\\n-    \"whatis signed int\"\n-\n-gdb_test \"whatis v_unsigned_int\" \\\n-    \"type = unsigned int\" \\\n-    \"whatis unsigned int\"\n-\n-setup_xfail_on_long_vs_int\n-# AIX xlc gets this wrong and unsigned long right.  Go figure.\n-if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n-gdb_test \"whatis v_long\" \\\n-    \"type = (long|long int)\" \\\n-    \"whatis long\"\n-\n-setup_xfail_on_long_vs_int\n-# AIX xlc gets this wrong and unsigned long right.  Go figure.\n-if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n-gdb_test \"whatis v_signed_long\" \\\n-    \"type = (signed |)(long|long int)\" \\\n-    \"whatis signed long\"\n-\n-setup_xfail_on_long_vs_int\n-gdb_test \"whatis v_unsigned_long\" \\\n-    \"type = (unsigned long|long unsigned int)\" \\\n-    \"whatis unsigned long\"\n-\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_unsigned_long_long\" \\\n-\t\"type = (unsigned long long|long long unsigned int)\" \\\n-\t\"whatis unsigned long long\"\n-}\n+    set binfile [standard_output_file ${dir}/${testfile}]\n+    if { [prepare_for_testing \"failed to prepare\" ${binfile} \\\n+\t      [list $srcfile] $options] } {\n+\treturn 0\n+    }\n \n-gdb_test \"whatis v_float\" \\\n-    \"type = float\" \\\n-    \"whatis float\"\n+    clean_restart ${binfile}\n+\n+    #\n+    # Test whatis command with basic C types\n+    #\n+    # The name printed now (as of 23 May 1993) is whatever name the compiler\n+    # uses in the stabs.  So we need to deal with names both from gcc and\n+    # native compilers.\n+    #\n+\n+    gdb_test \"whatis v_char\" \\\n+\t\"type = (unsigned char|char)\" \\\n+\t\"whatis char\"\n+\n+    gdb_test \"whatis v_signed_char\" \\\n+\t\"type = (signed char|char)\" \\\n+\t\"whatis signed char\"\n+\n+    gdb_test \"whatis v_unsigned_char\" \\\n+\t\"type = unsigned char\" \\\n+\t\"whatis unsigned char\"\n+\n+    gdb_test \"whatis v_short\" \\\n+\t\"type = (short|short int)\" \\\n+\t\"whatis short\"\n+\n+    gdb_test \"whatis v_signed_short\" \\\n+\t\"type = (short|short int|signed short|signed short int)\" \\\n+\t\"whatis signed short\"\n+\n+    gdb_test \"whatis v_unsigned_short\" \\\n+\t\"type = (unsigned short|short unsigned int)\" \\\n+\t\"whatis unsigned short\"\n+\n+    gdb_test \"whatis v_int\" \\\n+\t\"type = int\" \\\n+\t\"whatis int\"\n+\n+    gdb_test \"whatis v_signed_int\" \\\n+\t\"type = (signed |)int\" \\\n+\t\"whatis signed int\"\n+\n+    gdb_test \"whatis v_unsigned_int\" \\\n+\t\"type = unsigned int\" \\\n+\t\"whatis unsigned int\"\n+\n+    setup_xfail_on_long_vs_int\n+    # AIX xlc gets this wrong and unsigned long right.  Go figure.\n+    if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n+    gdb_test \"whatis v_long\" \\\n+\t\"type = (long|long int)\" \\\n+\t\"whatis long\"\n+\n+    setup_xfail_on_long_vs_int\n+    # AIX xlc gets this wrong and unsigned long right.  Go figure.\n+    if {!$gcc_compiled} then {setup_xfail \"rs6000-*-aix*\"}\n+    gdb_test \"whatis v_signed_long\" \\\n+\t\"type = (signed |)(long|long int)\" \\\n+\t\"whatis signed long\"\n+\n+    setup_xfail_on_long_vs_int\n+    gdb_test \"whatis v_unsigned_long\" \\\n+\t\"type = (unsigned long|long unsigned int)\" \\\n+\t\"whatis unsigned long\"\n+\n+\n+    if ![target_info exists no_long_long] {\n+\tgdb_test \"whatis v_unsigned_long_long\" \\\n+\t    \"type = (unsigned long long|long long unsigned int)\" \\\n+\t    \"whatis unsigned long long\"\n+    }\n \n-gdb_test \"whatis v_double\" \\\n-    \"type = double\" \\\n-    \"whatis double\"\n+    gdb_test \"whatis v_float\" \\\n+\t\"type = float\" \\\n+\t\"whatis float\"\n \n+    gdb_test \"whatis v_double\" \\\n+\t\"type = double\" \\\n+\t\"whatis double\"\n \n-# test whatis command with arrays\n-#\n-# We already tested whether char prints as \"char\", so here we accept\n-# \"unsigned char\", \"signed char\", and other perversions.  No need for more\n-# than one xfail for the same thing.\n-gdb_test \"whatis v_char_array\" \\\n-    \"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n-    \"whatis char array\"\n-\n-gdb_test \"whatis v_signed_char_array\" \\\n-    \"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed char array\"\n-\n-gdb_test \"whatis v_unsigned_char_array\" \\\n-    \"type = unsigned char \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned char array\"\n-\n-gdb_test \"whatis v_short_array\" \\\n-    \"type = (short|short int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis short array\"\n-\n-gdb_test \"whatis v_signed_short_array\" \\\n-    \"type = (signed |)(short|short int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed short array\"\n-\n-gdb_test \"whatis v_unsigned_short_array\" \\\n-    \"type = (unsigned short|short unsigned int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned short array\"\n-\n-gdb_test \"whatis v_int_array\" \\\n-    \"type = int \\\\\\[2\\\\\\]\" \\\n-    \"whatis int array\"\n-\n-gdb_test \"whatis v_signed_int_array\" \\\n-    \"type = (signed |)int \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed int array\"\n-\n-gdb_test \"whatis v_unsigned_int_array\" \\\n-    \"type = unsigned int \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned int array\"\n-\n-# We already tested whether long prints as long, so here we accept int\n-# No need for more than one xfail for the same thing.\n-gdb_test \"whatis v_long_array\" \\\n-    \"type = (int|long|long int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis long array\"\n-\n-gdb_test \"whatis v_signed_long_array\" \\\n-    \"type = (signed |)(int|long|long int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis signed long array\"\n-\n-gdb_test \"whatis v_unsigned_long_array\" \\\n-    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\\\[2\\\\\\]\" \\\n-    \"whatis unsigned long array\"\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_unsigned_long_long_array\" \\\n-\t\"type = (unsigned long long|long long unsigned int) \\\\\\[2\\\\\\]\" \\\n-\t\"whatis unsigned long array\"\n-}\n \n-gdb_test \"whatis v_float_array\" \\\n-    \"type = float \\\\\\[2\\\\\\]\" \\\n-    \"whatis float array\"\n+    # test whatis command with arrays\n+    #\n+    # We already tested whether char prints as \"char\", so here we accept\n+    # \"unsigned char\", \"signed char\", and other perversions.  No need for more\n+    # than one xfail for the same thing.\n+    gdb_test \"whatis v_char_array\" \\\n+\t\"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n+\t\"whatis char array\"\n \n-gdb_test \"whatis v_double_array\" \\\n-    \"type = double \\\\\\[2\\\\\\]\" \\\n-    \"whatis double array\"\n+    gdb_test \"whatis v_signed_char_array\" \\\n+\t\"type = (signed |unsigned |)char \\\\\\[2\\\\\\]\" \\\n+\t\"whatis signed char array\"\n \n+    gdb_test \"whatis v_unsigned_char_array\" \\\n+\t\"type = unsigned char \\\\\\[2\\\\\\]\" \\\n+\t\"whatis unsigned char array\"\n \n-# test whatis command with pointers\n-#\n-# We already tested whether char prints as char, so accept various perversions\n-# here.  We especially want to make sure we test that it doesn't print as\n-# caddr_t.\n-gdb_test \"whatis v_char_pointer\" \\\n-    \"type = (unsigned |signed |)char \\\\*\" \\\n-    \"whatis char pointer\"\n-\n-gdb_test \"whatis v_signed_char_pointer\" \\\n-    \"type = (unsigned |signed |)char \\\\*\" \\\n-    \"whatis signed char pointer\"\n-\n-gdb_test \"whatis v_unsigned_char_pointer\" \\\n-    \"type = unsigned char \\\\*\" \\\n-    \"whatis unsigned char pointer\"\n-\n-gdb_test \"whatis v_short_pointer\" \\\n-    \"type = (short|short int) \\\\*\" \\\n-    \"whatis short pointer\"\n-\n-gdb_test \"whatis v_signed_short_pointer\" \\\n-    \"type = (signed |)(short|short int) \\\\*\" \\\n-    \"whatis signed short pointer\"\n-\n-gdb_test \"whatis v_unsigned_short_pointer\" \\\n-    \"type = (unsigned short|short unsigned int) \\\\*\" \\\n-    \"whatis unsigned short pointer\"\n-\n-gdb_test \"whatis v_int_pointer\" \\\n-    \"type = int \\\\*\" \\\n-    \"whatis int pointer\"\n-\n-gdb_test \"whatis v_signed_int_pointer\" \\\n-    \"type = (signed |)int \\\\*\" \\\n-    \"whatis signed int pointer\"\n-\n-gdb_test \"whatis v_unsigned_int_pointer\" \\\n-    \"type = unsigned int \\\\*\" \\\n-    \"whatis unsigned int pointer\"\n-\n-# We already tested whether long prints as long, so here we accept int\n-gdb_test \"whatis v_long_pointer\" \\\n-    \"type = (long|int|long int) \\\\*\" \\\n-    \"whatis long pointer\"\n-\n-gdb_test \"whatis v_signed_long_pointer\" \\\n-    \"type = (signed |)(long|int|long int) \\\\*\" \\\n-    \"whatis signed long pointer\"\n-\n-gdb_test \"whatis v_unsigned_long_pointer\" \\\n-    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\*\" \\\n-    \"whatis unsigned long pointer\"\n-\n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_long_long_pointer\" \\\n-\t\"type = long long(| int) \\\\*\" \\\n-\t\"whatis long long pointer\"\n-\n-    gdb_test \"whatis v_signed_long_long_pointer\" \\\n-\t\"type = (signed |)long long(| int) \\\\*\" \\\n-\t\"whatis signed long long pointer\"\n-\n-    gdb_test \"whatis v_unsigned_long_long_pointer\" \\\n-\t\"type = (unsigned long long|long long unsigned int) \\\\*\" \\\n-\t\"whatis unsigned long long pointer\"\n-}\n+    gdb_test \"whatis v_short_array\" \\\n+\t\"type = (short|short int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis short array\"\n \n-gdb_test \"whatis v_float_pointer\" \\\n-    \"type = float \\\\*\" \\\n-    \"whatis float pointer\"\n+    gdb_test \"whatis v_signed_short_array\" \\\n+\t\"type = (signed |)(short|short int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis signed short array\"\n \n-gdb_test \"whatis v_double_pointer\" \\\n-    \"type = double \\\\*\" \\\n-    \"whatis double pointer\"\n+    gdb_test \"whatis v_unsigned_short_array\" \\\n+\t\"type = (unsigned short|short unsigned int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis unsigned short array\"\n \n+    gdb_test \"whatis v_int_array\" \\\n+\t\"type = int \\\\\\[2\\\\\\]\" \\\n+\t\"whatis int array\"\n \n-# test whatis command with structure types\n+    gdb_test \"whatis v_signed_int_array\" \\\n+\t\"type = (signed |)int \\\\\\[2\\\\\\]\" \\\n+\t\"whatis signed int array\"\n \n-# First with a type argument, with both \"set print object\" set to \"on\"\n-# and \"off\", ending with \"off\" for the following tests.\n-foreach_with_prefix print_object {\"on\" \"off\"} {\n-    gdb_test_no_output \"set print object $print_object\"\n+    gdb_test \"whatis v_unsigned_int_array\" \\\n+\t\"type = unsigned int \\\\\\[2\\\\\\]\" \\\n+\t\"whatis unsigned int array\"\n \n-    gdb_test \"whatis struct t_struct\" \\\n-\t\"type = struct t_struct\" \\\n-\t\"whatis named structure using type name\"\n+    # We already tested whether long prints as long, so here we accept int\n+    # No need for more than one xfail for the same thing.\n+    gdb_test \"whatis v_long_array\" \\\n+\t\"type = (int|long|long int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis long array\"\n \n-    gdb_test \"whatis struct t_struct *\" \\\n-\t\"type = struct t_struct \\\\*\" \\\n-\t\"whatis named structure using type name and pointer\"\n+    gdb_test \"whatis v_signed_long_array\" \\\n+\t\"type = (signed |)(int|long|long int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis signed long array\"\n \n-    gdb_test \"whatis struct t_struct &\" \\\n-\t\"type = struct t_struct &\" \\\n-\t\"whatis named structure using type name and reference\"\n-}\n+    gdb_test \"whatis v_unsigned_long_array\" \\\n+\t\"type = (unsigned (int|long|long int)|long unsigned int) \\\\\\[2\\\\\\]\" \\\n+\t\"whatis unsigned long array\"\n \n-# Now with an expression argument.\n+    if ![target_info exists no_long_long] {\n+\tgdb_test \"whatis v_unsigned_long_long_array\" \\\n+\t    \"type = (unsigned long long|long long unsigned int) \\\\\\[2\\\\\\]\" \\\n+\t    \"whatis unsigned long long array\"\n+    }\n \n-gdb_test \"whatis v_struct1\" \\\n-    \"type = struct t_struct\" \\\n-    \"whatis named structure\"\n+    gdb_test \"whatis v_float_array\" \\\n+\t\"type = float \\\\\\[2\\\\\\]\" \\\n+\t\"whatis float array\"\n+\n+    gdb_test \"whatis v_double_array\" \\\n+\t\"type = double \\\\\\[2\\\\\\]\" \\\n+\t\"whatis double array\"\n+\n+    # test whatis command with pointers\n+    #\n+    # We already tested whether char prints as char, so accept various perversions\n+    # here.  We especially want to make sure we test that it doesn't print as\n+    # caddr_t.\n+    gdb_test \"whatis v_char_pointer\" \\\n+\t\"type = (unsigned |signed |)char \\\\*\" \\\n+\t\"whatis char pointer\"\n+\n+    gdb_test \"whatis v_signed_char_pointer\" \\\n+\t\"type = (unsigned |signed |)char \\\\*\" \\\n+\t\"whatis signed char pointer\"\n+\n+    gdb_test \"whatis v_unsigned_char_pointer\" \\\n+\t\"type = unsigned char \\\\*\" \\\n+\t\"whatis unsigned char pointer\"\n+\n+    gdb_test \"whatis v_short_pointer\" \\\n+\t\"type = (short|short int) \\\\*\" \\\n+\t\"whatis short pointer\"\n+\n+    gdb_test \"whatis v_signed_short_pointer\" \\\n+\t\"type = (signed |)(short|short int) \\\\*\" \\\n+\t\"whatis signed short pointer\"\n+\n+    gdb_test \"whatis v_unsigned_short_pointer\" \\\n+\t\"type = (unsigned short|short unsigned int) \\\\*\" \\\n+\t\"whatis unsigned short pointer\"\n+\n+    gdb_test \"whatis v_int_pointer\" \\\n+\t\"type = int \\\\*\" \\\n+\t\"whatis int pointer\"\n+\n+    gdb_test \"whatis v_signed_int_pointer\" \\\n+\t\"type = (signed |)int \\\\*\" \\\n+\t\"whatis signed int pointer\"\n+\n+    gdb_test \"whatis v_unsigned_int_pointer\" \\\n+\t\"type = unsigned int \\\\*\" \\\n+\t\"whatis unsigned int pointer\"\n+\n+    # We already tested whether long prints as long, so here we accept int\n+    gdb_test \"whatis v_long_pointer\" \\\n+\t\"type = (long|int|long int) \\\\*\" \\\n+\t\"whatis long pointer\"\n+\n+    gdb_test \"whatis v_signed_long_pointer\" \\\n+\t\"type = (signed |)(long|int|long int) \\\\*\" \\\n+\t\"whatis signed long pointer\"\n+\n+    gdb_test \"whatis v_unsigned_long_pointer\" \\\n+\t\"type = (unsigned (int|long|long int)|long unsigned int) \\\\*\" \\\n+\t\"whatis unsigned long pointer\"\n+\n+    if ![target_info exists no_long_long] {\n+\tgdb_test \"whatis v_long_long_pointer\" \\\n+\t    \"type = long long(| int) \\\\*\" \\\n+\t    \"whatis long long pointer\"\n+\n+\tgdb_test \"whatis v_signed_long_long_pointer\" \\\n+\t    \"type = (signed |)long long(| int) \\\\*\" \\\n+\t    \"whatis signed long long pointer\"\n+\n+\tgdb_test \"whatis v_unsigned_long_long_pointer\" \\\n+\t    \"type = (unsigned long long|long long unsigned int) \\\\*\" \\\n+\t    \"whatis unsigned long long pointer\"\n+    }\n \n-gdb_test \"whatis v_struct2\" \\\n-    \"type = struct \\{\\.\\.\\.\\}\" \\\n-    \"whatis unnamed structure\"\n+    gdb_test \"whatis v_float_pointer\" \\\n+\t\"type = float \\\\*\" \\\n+\t\"whatis float pointer\"\n \n-gdb_test \"whatis &v_struct1\" \\\n-    \"type = struct t_struct \\\\*\"\n+    gdb_test \"whatis v_double_pointer\" \\\n+\t\"type = double \\\\*\" \\\n+\t\"whatis double pointer\"\n \n-gdb_test \"whatis &v_struct2\" \\\n-    \"type = struct {\\\\.\\\\.\\\\.} \\\\*\"\n \n-gdb_test \"whatis v_struct_ptr1\" \\\n-    \"type = struct t_struct \\\\*\"\n+    # test whatis command with structure types\n \n-gdb_test \"whatis v_struct_ptr2\" \\\n-    \"type = struct {\\\\.\\\\.\\\\.} \\\\*\"\n+    # First with a type argument, with both \"set print object\" set to \"on\"\n+    # and \"off\", ending with \"off\" for the following tests.\n+    foreach_with_prefix print_object {\"on\" \"off\"} {\n+\tgdb_test_no_output \"set print object $print_object\"\n \n-gdb_test \"whatis &v_struct_ptr1\" \\\n-    \"type = struct t_struct \\\\*\\\\*\"\n+\tgdb_test \"whatis struct t_struct\" \\\n+\t    \"type = struct t_struct\" \\\n+\t    \"whatis named structure using type name\"\n \n-gdb_test \"whatis &v_struct_ptr2\" \\\n-    \"type = struct {\\\\.\\\\.\\\\.} \\\\*\\\\*\"\n+\tgdb_test \"whatis struct t_struct *\" \\\n+\t    \"type = struct t_struct \\\\*\" \\\n+\t    \"whatis named structure using type name and pointer\"\n \n-gdb_test \"whatis v_struct1.v_char_member\" \\\n-    \"type = char\"\n+\tgdb_test \"whatis struct t_struct &\" \\\n+\t    \"type = struct t_struct &\" \\\n+\t    \"whatis named structure using type name and reference\"\n+    }\n \n-gdb_test \"whatis v_struct2.v_char_member\" \\\n-    \"type = char\"\n+    # Now with an expression argument.\n \n-gdb_test \"whatis v_struct_ptr1->v_char_member\" \\\n-    \"type = char\"\n+    gdb_test \"whatis v_struct1\" \\\n+\t\"type = struct t_struct\" \\\n+\t\"whatis named structure\"\n \n-gdb_test \"whatis v_struct_ptr2->v_char_member\" \\\n-    \"type = char\"\n+    gdb_test \"whatis v_struct2\" \\\n+\t\"type = struct \\{\\.\\.\\.\\}\" \\\n+\t\"whatis unnamed structure\"\n \n-gdb_test \"whatis &(v_struct1.v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis &v_struct1\" \\\n+\t\"type = struct t_struct \\\\*\"\n \n-gdb_test \"whatis &(v_struct2.v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis &v_struct2\" \\\n+\t\"type = struct {\\\\.\\\\.\\\\.} \\\\*\"\n \n-gdb_test \"whatis &(v_struct_ptr1->v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis v_struct_ptr1\" \\\n+\t\"type = struct t_struct \\\\*\"\n \n-gdb_test \"whatis &(v_struct_ptr2->v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis v_struct_ptr2\" \\\n+\t\"type = struct {\\\\.\\\\.\\\\.} \\\\*\"\n \n-# test whatis command with union types\n-gdb_test \"whatis v_union\" \\\n-    \"type = union t_union\" \\\n-    \"whatis named union\"\n+    gdb_test \"whatis &v_struct_ptr1\" \\\n+\t\"type = struct t_struct \\\\*\\\\*\"\n \n-gdb_test \"whatis union t_union\" \\\n-    \"type = union t_union\" \\\n-    \"whatis named union using type name\"\n+    gdb_test \"whatis &v_struct_ptr2\" \\\n+\t\"type = struct {\\\\.\\\\.\\\\.} \\\\*\\\\*\"\n \n-gdb_test \"whatis v_union2\" \\\n-    \"type = union \\{\\.\\.\\.\\}\" \\\n-    \"whatis unnamed union\"\n+    gdb_test \"whatis v_struct1.v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis &v_union\" \\\n-    \"type = union t_union \\\\*\"\n+    gdb_test \"whatis v_struct2.v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis &v_union2\" \\\n-    \"type = union {\\\\.\\\\.\\\\.} \\\\*\"\n+    gdb_test \"whatis v_struct_ptr1->v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_union_ptr\" \\\n-    \"type = union t_union \\\\*\"\n+    gdb_test \"whatis v_struct_ptr2->v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_union_ptr2\" \\\n-    \"type = union {\\\\.\\\\.\\\\.} \\\\*\"\n+    gdb_test \"whatis &(v_struct1.v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis &v_union_ptr\" \\\n-    \"type = union t_union \\\\*\\\\*\"\n+    gdb_test \"whatis &(v_struct2.v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis &v_union_ptr2\" \\\n-    \"type = union {\\\\.\\\\.\\\\.} \\\\*\\\\*\"\n+    gdb_test \"whatis &(v_struct_ptr1->v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_union.v_char_member\" \\\n-    \"type = char\"\n+    gdb_test \"whatis &(v_struct_ptr2->v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_union2.v_char_member\" \\\n-    \"type = char\"\n+    # test whatis command with union types\n+    gdb_test \"whatis v_union\" \\\n+\t\"type = union t_union\" \\\n+\t\"whatis named union\"\n \n-gdb_test \"whatis v_union_ptr->v_char_member\" \\\n-    \"type = char\"\n+    gdb_test \"whatis union t_union\" \\\n+\t\"type = union t_union\" \\\n+\t\"whatis named union using type name\"\n \n-gdb_test \"whatis v_union_ptr2->v_char_member\" \\\n-    \"type = char\"\n+    gdb_test \"whatis v_union2\" \\\n+\t\"type = union \\{\\.\\.\\.\\}\" \\\n+\t\"whatis unnamed union\"\n \n-gdb_test \"whatis &(v_union.v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis &v_union\" \\\n+\t\"type = union t_union \\\\*\"\n \n-gdb_test \"whatis &(v_union2.v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis &v_union2\" \\\n+\t\"type = union {\\\\.\\\\.\\\\.} \\\\*\"\n \n-gdb_test \"whatis &(v_union_ptr->v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis v_union_ptr\" \\\n+\t\"type = union t_union \\\\*\"\n \n-gdb_test \"whatis &(v_union_ptr2->v_char_member)\" \\\n-    \"type = char \\\\*\"\n+    gdb_test \"whatis v_union_ptr2\" \\\n+\t\"type = union {\\\\.\\\\.\\\\.} \\\\*\"\n \n+    gdb_test \"whatis &v_union_ptr\" \\\n+\t\"type = union t_union \\\\*\\\\*\"\n \n-# Using stabs we will mark these functions as prototyped.  This\n-# is harmless but causes an extra VOID to be printed.\n-set void \"(void|)\"\n+    gdb_test \"whatis &v_union_ptr2\" \\\n+\t\"type = union {\\\\.\\\\.\\\\.} \\\\*\\\\*\"\n \n-# test whatis command with functions return type\n-gdb_test \"whatis v_char_func\" \\\n-    \"type = (signed |unsigned |)char \\\\($void\\\\)\" \\\n-    \"whatis char function\"\n+    gdb_test \"whatis v_union.v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_signed_char_func\" \\\n-    \"type = (signed |unsigned |)char \\\\($void\\\\)\" \\\n-    \"whatis signed char function\"\n+    gdb_test \"whatis v_union2.v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_unsigned_char_func\" \\\n-    \"type = unsigned char \\\\($void\\\\)\"\t\\\n-    \"whatis unsigned char function\"\n+    gdb_test \"whatis v_union_ptr->v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_short_func\" \\\n-    \"type = short (int |)\\\\($void\\\\)\" \\\n-    \"whatis short function\"\n+    gdb_test \"whatis v_union_ptr2->v_char_member\" \\\n+\t\"type = char\"\n \n-gdb_test \"whatis v_signed_short_func\" \\\n-    \"type = (signed |)short (int |)\\\\($void\\\\)\" \\\n-    \"whatis signed short function\"\n+    gdb_test \"whatis &(v_union.v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_unsigned_short_func\" \\\n-    \"type = (unsigned short|short unsigned int) \\\\($void\\\\)\" \\\n-    \"whatis unsigned short function\"\n+    gdb_test \"whatis &(v_union2.v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_int_func\" \\\n-    \"type = int \\\\($void\\\\)\" \\\n-    \"whatis int function\"\n+    gdb_test \"whatis &(v_union_ptr->v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_signed_int_func\" \\\n-    \"type = (signed |)int \\\\($void\\\\)\" \\\n-    \"whatis signed int function\"\n+    gdb_test \"whatis &(v_union_ptr2->v_char_member)\" \\\n+\t\"type = char \\\\*\"\n \n-gdb_test \"whatis v_unsigned_int_func\" \\\n-    \"type = unsigned int \\\\($void\\\\)\" \\\n-    \"whatis unsigned int function\"\n+    if { $dir == \"dwarf\" } {\n+\t# Using stabs we will mark these functions as prototyped.  This\n+\t# is harmless but causes an extra VOID to be printed.\n+\tset void \"(void|)\"\n \n-gdb_test \"whatis v_long_func\" \\\n-    \"type = (long|int|long int) \\\\($void\\\\)\" \\\n-    \"whatis long function\"\n+\t# test whatis command with functions return type\n+\tgdb_test \"whatis v_char_func\" \\\n+\t    \"type = (signed |unsigned |)char \\\\($void\\\\)\" \\\n+\t    \"whatis char function\"\n \n-gdb_test \"whatis v_signed_long_func\" \\\n-    \"type = (signed |)(int|long|long int) \\\\($void\\\\)\" \\\n-    \"whatis signed long function\"\n+\tgdb_test \"whatis v_signed_char_func\" \\\n+\t    \"type = (signed |unsigned |)char \\\\($void\\\\)\" \\\n+\t    \"whatis signed char function\"\n \n-gdb_test \"whatis v_unsigned_long_func\" \\\n-    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\($void\\\\)\" \\\n-    \"whatis unsigned long function\"\n+\tgdb_test \"whatis v_unsigned_char_func\" \\\n+\t    \"type = unsigned char \\\\($void\\\\)\"\t\\\n+\t    \"whatis unsigned char function\"\n \n-if ![target_info exists no_long_long] {\n-    gdb_test \"whatis v_long_long_func\" \\\n-\t\"type = long long(| int) \\\\($void\\\\)\" \\\n-\t\"whatis long long function\"\n+\tgdb_test \"whatis v_short_func\" \\\n+\t    \"type = short (int |)\\\\($void\\\\)\" \\\n+\t    \"whatis short function\"\n \n-    gdb_test \"whatis v_signed_long_long_func\" \\\n-\t\"type = (signed |)long long(| int) \\\\($void\\\\)\" \\\n-\t\"whatis signed long long function\"\n+\tgdb_test \"whatis v_signed_short_func\" \\\n+\t    \"type = (signed |)short (int |)\\\\($void\\\\)\" \\\n+\t    \"whatis signed short function\"\n \n-    gdb_test \"whatis v_unsigned_long_long_func\" \\\n-\t\"type = (unsigned long long(| int)|long long unsigned int) \\\\($void\\\\)\" \\\n-\t\"whatis unsigned long long function\"\n-}\n+\tgdb_test \"whatis v_unsigned_short_func\" \\\n+\t    \"type = (unsigned short|short unsigned int) \\\\($void\\\\)\" \\\n+\t    \"whatis unsigned short function\"\n \n-# Sun /bin/cc calls this a function returning double.\n-if {!$gcc_compiled} then {setup_xfail \"*-sun-sunos4*\"}\n-gdb_test \"whatis v_float_func\" \\\n-    \"type = float \\\\($void\\\\)\" \\\n-    \"whatis float function\"\n+\tgdb_test \"whatis v_int_func\" \\\n+\t    \"type = int \\\\($void\\\\)\" \\\n+\t    \"whatis int function\"\n \n-gdb_test \"whatis v_double_func\" \\\n-    \"type = double \\\\($void\\\\)\" \\\n-    \"whatis double function\" \\\n+\tgdb_test \"whatis v_signed_int_func\" \\\n+\t    \"type = (signed |)int \\\\($void\\\\)\" \\\n+\t    \"whatis signed int function\"\n \n+\tgdb_test \"whatis v_unsigned_int_func\" \\\n+\t    \"type = unsigned int \\\\($void\\\\)\" \\\n+\t    \"whatis unsigned int function\"\n \n-# test whatis command with some misc complicated types\n-gdb_test \"whatis s_link\" \\\n-    \"type = struct link \\\\*\" \\\n-    \"whatis complicated structure\"\n+\tgdb_test \"whatis v_long_func\" \\\n+\t    \"type = (long|int|long int) \\\\($void\\\\)\" \\\n+\t    \"whatis long function\"\n \n-gdb_test \"whatis u_link\" \\\n-    \"type = union tu_link\" \\\n-    \"whatis complicated union\"\n+\tgdb_test \"whatis v_signed_long_func\" \\\n+\t    \"type = (signed |)(int|long|long int) \\\\($void\\\\)\" \\\n+\t    \"whatis signed long function\"\n \n+\tgdb_test \"whatis v_unsigned_long_func\" \\\n+\t    \"type = (unsigned (int|long|long int)|long unsigned int) \\\\($void\\\\)\" \\\n+\t    \"whatis unsigned long function\"\n \n-# test whatis command with enumerations\n-gdb_test \"whatis clunker\" \\\n-    \"type = enum cars\" \\\n-    \"whatis enumeration\"\n+\tif ![target_info exists no_long_long] {\n+\t    gdb_test \"whatis v_long_long_func\" \\\n+\t\t\"type = long long(| int) \\\\($void\\\\)\" \\\n+\t\t\"whatis long long function\"\n \n-gdb_test \"whatis enum cars\" \\\n-    \"type = enum cars\" \\\n-    \"whatis enumeration using type name\"\n+\t    gdb_test \"whatis v_signed_long_long_func\" \\\n+\t\t\"type = (signed |)long long(| int) \\\\($void\\\\)\" \\\n+\t\t\"whatis signed long long function\"\n \n+\t    gdb_test \"whatis v_unsigned_long_long_func\" \\\n+\t\t\"type = (unsigned long long(| int)|long long unsigned int) \\\\($void\\\\)\" \\\n+\t\t\"whatis unsigned long long function\"\n+\t}\n \n-# test whatis command with nested struct and union\n-gdb_test \"whatis nested_su\" \\\n-    \"type = struct outer_struct\" \\\n-    \"whatis outer structure\"\n+\t# Sun /bin/cc calls this a function returning double.\n+\tif {!$gcc_compiled} then {setup_xfail \"*-sun-sunos4*\"}\n+\tgdb_test \"whatis v_float_func\" \\\n+\t    \"type = float \\\\($void\\\\)\" \\\n+\t    \"whatis float function\"\n \n-gdb_test \"whatis nested_su.outer_int\" \\\n-    \"type = int\" \\\n-    \"whatis outer structure member\"\n+\tgdb_test \"whatis v_double_func\" \\\n+\t    \"type = double \\\\($void\\\\)\" \\\n+\t    \"whatis double function\" \\\n+\t}\n \n-gdb_test \"whatis nested_su.inner_struct_instance\" \\\n-    \"type = struct inner_struct\" \\\n-    \"whatis inner structure\"\n+    # test whatis command with some misc complicated types\n+    gdb_test \"whatis s_link\" \\\n+\t\"type = struct link \\\\*\" \\\n+\t\"whatis complicated structure\"\n \n-gdb_test \"whatis nested_su.inner_struct_instance.inner_int\" \\\n-    \"type = int\" \\\n-    \"whatis inner structure member\"\n+    gdb_test \"whatis u_link\" \\\n+\t\"type = union tu_link\" \\\n+\t\"whatis complicated union\"\n \n-gdb_test \"whatis nested_su.inner_union_instance\" \\\n-    \"type = union inner_union\" \\\n-    \"whatis inner union\"\n \n-gdb_test \"whatis nested_su.inner_union_instance.inner_union_int\" \\\n-    \"type = int\" \\\n-    \"whatis inner union member\"\n+    # test whatis command with enumerations\n+    gdb_test \"whatis clunker\" \\\n+\t\"type = enum cars\" \\\n+\t\"whatis enumeration\"\n \n-# test whatis command with typedefs\n+    gdb_test \"whatis enum cars\" \\\n+\t\"type = enum cars\" \\\n+\t\"whatis enumeration using type name\"\n+\n+\n+    # test whatis command with nested struct and union\n+    gdb_test \"whatis nested_su\" \\\n+\t\"type = struct outer_struct\" \\\n+\t\"whatis outer structure\"\n \n-gdb_test \"whatis char_addr\" \\\n-    \"type = char \\\\*\" \\\n-    \"whatis using typedef type name\"\n+    gdb_test \"whatis nested_su.outer_int\" \\\n+\t\"type = int\" \\\n+\t\"whatis outer structure member\"\n \n-gdb_test \"whatis a_char_addr\" \\\n-    \"type = char_addr\" \\\n-    \"whatis applied to variable defined by typedef\"\n+    gdb_test \"whatis nested_su.inner_struct_instance\" \\\n+\t\"type = struct inner_struct\" \\\n+\t\"whatis inner structure\"\n \n-# Regression tests for PR 9514.\n+    gdb_test \"whatis nested_su.inner_struct_instance.inner_int\" \\\n+\t\"type = int\" \\\n+\t\"whatis inner structure member\"\n \n-gdb_test \"whatis void (**)()\" \\\n-  \"type = void \\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to pointer to pointer to function\"\n+    gdb_test \"whatis nested_su.inner_union_instance\" \\\n+\t\"type = union inner_union\" \\\n+\t\"whatis inner union\"\n+\n+    gdb_test \"whatis nested_su.inner_union_instance.inner_union_int\" \\\n+\t\"type = int\" \\\n+\t\"whatis inner union member\"\n+\n+    # test whatis command with typedefs\n+\n+    gdb_test \"whatis char_addr\" \\\n+\t\"type = char \\\\*\" \\\n+\t\"whatis using typedef type name\"\n+\n+    if { $dir == \"dwarf\" } {\n+\tgdb_test \"whatis a_char_addr\" \\\n+\t    \"type = char_addr\" \\\n+\t    \"whatis applied to variable defined by typedef\"\n+    }\n \n-gdb_test \"whatis void (** const)()\" \\\n-  \"type = void \\\\(\\\\*\\\\* const\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to const pointer to pointer to function\"\n+    # Regression tests for PR 9514.\n \n-gdb_test \"whatis void (* const *)()\" \\\n-  \"type = void \\\\(\\\\* const \\\\*\\\\)\\\\(\\\\)\" \\\n-  \"whatis applied to pointer to const pointer to function\"\n+    gdb_test \"whatis void (**)()\" \\\n+\t\"type = void \\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n+\t\"whatis applied to pointer to pointer to function\"\n \n-gdb_test \"whatis int *(*)()\" \\\n-    \"type = int \\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\" \\\n-    \"whatis applied to pointer to function returning pointer to int\"\n+    gdb_test \"whatis void (** const)()\" \\\n+\t\"type = void \\\\(\\\\*\\\\* const\\\\)\\\\(\\\\)\" \\\n+\t\"whatis applied to const pointer to pointer to function\"\n \n-gdb_test \"whatis int *(**)()\" \\\n-    \"type = int \\\\*\\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n-    \"whatis applied to pointer to pointer to function returning pointer to int\"\n+    gdb_test \"whatis void (* const *)()\" \\\n+\t\"type = void \\\\(\\\\* const \\\\*\\\\)\\\\(\\\\)\" \\\n+\t\"whatis applied to pointer to const pointer to function\"\n \n-gdb_test \"whatis char (*(*)())\\[23\\]\" \\\n-    \"type = char \\\\(\\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\\\\)\\\\\\[23\\\\\\]\" \\\n-    \"whatis applied to pointer to function returning pointer to array\"\n+    gdb_test \"whatis int *(*)()\" \\\n+\t\"type = int \\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\" \\\n+\t\"whatis applied to pointer to function returning pointer to int\"\n \n-gdb_test \"whatis int (*)(int, int)\" \\\n-    \"type = int \\\\(\\\\*\\\\)\\\\(int, int\\\\)\" \\\n-    \"whatis applied to pointer to function taking int,int and returning int\"\n+    gdb_test \"whatis int *(**)()\" \\\n+\t\"type = int \\\\*\\\\(\\\\*\\\\*\\\\)\\\\(\\\\)\" \\\n+\t\"whatis applied to pointer to pointer to function returning pointer to int\"\n \n-gdb_test \"whatis int (*)(const int *, ...)\" \\\n-    \"type = int \\\\(\\\\*\\\\)\\\\(const int \\\\*, \\\\.\\\\.\\\\.\\\\)\" \\\n-    \"whatis applied to pointer to function taking const int ptr and varargs and returning int\"\n+    gdb_test \"whatis char (*(*)())\\[23\\]\" \\\n+\t\"type = char \\\\(\\\\*\\\\(\\\\*\\\\)\\\\(\\\\)\\\\)\\\\\\[23\\\\\\]\" \\\n+\t\"whatis applied to pointer to function returning pointer to array\"\n \n-gdb_test \"whatis int (*)(void, int, int)\" \\\n-    \"parameter types following 'void'\" \\\n-    \"whatis applied to function with types trailing 'void'\"\n+    gdb_test \"whatis int (*)(int, int)\" \\\n+\t\"type = int \\\\(\\\\*\\\\)\\\\(int, int\\\\)\" \\\n+\t\"whatis applied to pointer to function taking int,int and returning int\"\n \n-gdb_test \"whatis int (*)(int, void, int)\" \\\n-    \"'void' invalid as parameter type\" \\\n-    \"whatis applied to function with 'void' parameter type\"\n+    gdb_test \"whatis int (*)(const int *, ...)\" \\\n+\t\"type = int \\\\(\\\\*\\\\)\\\\(const int \\\\*, \\\\.\\\\.\\\\.\\\\)\" \\\n+\t\"whatis applied to pointer to function taking const int ptr and varargs and returning int\"\n+\n+    gdb_test \"whatis int (*)(void, int, int)\" \\\n+\t\"parameter types following 'void'\" \\\n+\t\"whatis applied to function with types trailing 'void'\"\n+\n+    gdb_test \"whatis int (*)(int, void, int)\" \\\n+\t\"'void' invalid as parameter type\" \\\n+\t\"whatis applied to function with 'void' parameter type\"\n+}\n+\n+# Build up the set of debug formats for which we will run this test.\n+set specs { {dwarf {debug}} }\n+if ![skip_ctf_tests] {\n+    lappend specs {ctf {\"additional_flags=-gt\"}}\n+}\n+\n+# Setup and run the test for each debug format.\n+foreach testspec $specs {\n+    set prefix [lindex $testspec 0]\n+    set opts [lindex $testspec 1]\n+\n+    with_test_prefix $prefix {\n+\tremote_exec host \"mkdir -p [standard_output_file ${prefix}]\"\n+\tdo_test $prefix $opts\n+    }\n+}"
    }
  ]
}