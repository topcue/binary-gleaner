{
  "sha": "f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjA5ZGIzODA5NDJkMTM5M2U2ZjYwZDFlY2FhN2Q0YjZlZGZhYWVjZg==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-17T16:57:14Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-19T21:20:03Z"
    },
    "message": "Disable get_ptrace_pid for NetBSD\n\nUnlike most other Operating Systems, NetBSD tracks both pid and lwp.\nThe process id on NetBSD is stored always in the pid field of ptid.\n\ngdb/ChangeLog:\n\n\t* inf-ptrace.h: Disable get_ptrace_pid on NetBSD.\n\t* inf-ptrace.c: Likewise.\n\t* (gdb_ptrace): Add.\n\t* (inf_ptrace_target::resume): Update.\n\t* (inf_ptrace_target::xfer_partial): Likewise.\n\t* (inf_ptrace_peek_poke): Change argument `pid' to `ptid'.\n\t* (inf_ptrace_peek_poke): Update.",
    "tree": {
      "sha": "15e0087100237625a2314205923be04213c83f9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15e0087100237625a2314205923be04213c83f9f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f3a08f77787cfe1b9edb7b5ab82ce7a2d527c8cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3a08f77787cfe1b9edb7b5ab82ce7a2d527c8cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f3a08f77787cfe1b9edb7b5ab82ce7a2d527c8cf"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 44,
    "deletions": 19
  },
  "files": [
    {
      "sha": "c98b1609312acf0e79fefb94da1a6d04108e3d7f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
      "patch": "@@ -3,6 +3,15 @@\n \t* nat/aarch64-sve-linux-ptrace.c (aarch64_sve_set_vq): If vg is not\n \tvalid, fetch vg value from ptrace.\n \n+2020-03-19  Kamil Rytarowski  <n54@gmx.com>\n+\t* inf-ptrace.h: Disable get_ptrace_pid on NetBSD.\n+\t* inf-ptrace.c: Likewise.\n+\t* (gdb_ptrace): Add.\n+\t* (inf_ptrace_target::resume): Update.\n+\t* (inf_ptrace_target::xfer_partial): Likewise.\n+\t* (inf_ptrace_peek_poke): Change argument `pid' to `ptid'.\n+\t* (inf_ptrace_peek_poke): Update.\n+\n 2020-03-19  Kamil Rytarowski  <n54@gmx.com>\n \n \t* x86-bsd-nat.c (gdb_ptrace): New."
    },
    {
      "sha": "a6a77ef9d31a9e47a35bdde25000deea3206d804",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 29,
      "deletions": 18,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
      "patch": "@@ -37,6 +37,18 @@\n \n \f\n \n+static PTRACE_TYPE_RET\n+gdb_ptrace (PTRACE_TYPE_ARG1 request, ptid_t ptid, PTRACE_TYPE_ARG3 addr,\n+\t    PTRACE_TYPE_ARG4 data)\n+{\n+#ifdef __NetBSD__\n+  return ptrace (request, ptid.pid (), addr, data);\n+#else\n+  pid_t pid = get_ptrace_pid (ptid);\n+  return ptrace (request, pid, addr, data);\n+#endif\n+}\n+\n /* A unique_ptr helper to unpush a target.  */\n \n struct target_unpusher\n@@ -313,8 +325,9 @@ inf_ptrace_target::kill ()\n   target_mourn_inferior (inferior_ptid);\n }\n \n-/* Return which PID to pass to ptrace in order to observe/control the\n-   tracee identified by PTID.  */\n+#ifndef __NetBSD__\n+\n+/* See inf-ptrace.h.  */\n \n pid_t\n get_ptrace_pid (ptid_t ptid)\n@@ -328,6 +341,7 @@ get_ptrace_pid (ptid_t ptid)\n     pid = ptid.pid ();\n   return pid;\n }\n+#endif\n \n /* Resume execution of thread PTID, or all threads if PTID is -1.  If\n    STEP is nonzero, single-step it.  If SIGNAL is nonzero, give it\n@@ -336,15 +350,12 @@ get_ptrace_pid (ptid_t ptid)\n void\n inf_ptrace_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n {\n-  pid_t pid;\n-  int request;\n+  PTRACE_TYPE_ARG1 request;\n \n   if (minus_one_ptid == ptid)\n     /* Resume all threads.  Traditionally ptrace() only supports\n        single-threaded processes, so simply resume the inferior.  */\n-    pid = inferior_ptid.pid ();\n-  else\n-    pid = get_ptrace_pid (ptid);\n+    ptid = ptid_t (inferior_ptid.pid ());\n \n   if (catch_syscall_enabled () > 0)\n     request = PT_SYSCALL;\n@@ -365,7 +376,7 @@ inf_ptrace_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n      where it was.  If GDB wanted it to start some other way, we have\n      already written a new program counter value to the child.  */\n   errno = 0;\n-  ptrace (request, pid, (PTRACE_TYPE_ARG3)1, gdb_signal_to_host (signal));\n+  gdb_ptrace (request, ptid, (PTRACE_TYPE_ARG3)1, gdb_signal_to_host (signal));\n   if (errno != 0)\n     perror_with_name ((\"ptrace\"));\n }\n@@ -460,7 +471,7 @@ inf_ptrace_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n    be non-null.  Return the number of transferred bytes.  */\n \n static ULONGEST\n-inf_ptrace_peek_poke (pid_t pid, gdb_byte *readbuf,\n+inf_ptrace_peek_poke (ptid_t ptid, gdb_byte *readbuf,\n \t\t      const gdb_byte *writebuf,\n \t\t      ULONGEST addr, ULONGEST len)\n {\n@@ -491,8 +502,8 @@ inf_ptrace_peek_poke (pid_t pid, gdb_byte *readbuf,\n       if (readbuf != NULL || chunk < sizeof (PTRACE_TYPE_RET))\n \t{\n \t  errno = 0;\n-\t  buf.word = ptrace (PT_READ_I, pid,\n-\t\t\t     (PTRACE_TYPE_ARG3)(uintptr_t) addr, 0);\n+\t  buf.word = gdb_ptrace (PT_READ_I, ptid,\n+\t\t\t\t (PTRACE_TYPE_ARG3)(uintptr_t) addr, 0);\n \t  if (errno != 0)\n \t    break;\n \t  if (readbuf != NULL)\n@@ -502,15 +513,15 @@ inf_ptrace_peek_poke (pid_t pid, gdb_byte *readbuf,\n \t{\n \t  memcpy (buf.byte + skip, writebuf + n, chunk);\n \t  errno = 0;\n-\t  ptrace (PT_WRITE_D, pid, (PTRACE_TYPE_ARG3)(uintptr_t) addr,\n+\t  gdb_ptrace (PT_WRITE_D, ptid, (PTRACE_TYPE_ARG3)(uintptr_t) addr,\n \t\t  buf.word);\n \t  if (errno != 0)\n \t    {\n \t      /* Using the appropriate one (I or D) is necessary for\n \t\t Gould NP1, at least.  */\n \t      errno = 0;\n-\t      ptrace (PT_WRITE_I, pid, (PTRACE_TYPE_ARG3)(uintptr_t) addr,\n-\t\t      buf.word);\n+\t      gdb_ptrace (PT_WRITE_I, ptid, (PTRACE_TYPE_ARG3)(uintptr_t) addr,\n+\t\t\t  buf.word);\n \t      if (errno != 0)\n \t\tbreak;\n \t    }\n@@ -528,7 +539,7 @@ inf_ptrace_target::xfer_partial (enum target_object object,\n \t\t\t\t const gdb_byte *writebuf,\n \t\t\t\t ULONGEST offset, ULONGEST len, ULONGEST *xfered_len)\n {\n-  pid_t pid = get_ptrace_pid (inferior_ptid);\n+  ptid_t ptid = inferior_ptid;\n \n   switch (object)\n     {\n@@ -552,7 +563,7 @@ inf_ptrace_target::xfer_partial (enum target_object object,\n \tpiod.piod_len = len;\n \n \terrno = 0;\n-\tif (ptrace (PT_IO, pid, (caddr_t)&piod, 0) == 0)\n+\tif (gdb_ptrace (PT_IO, ptid, (caddr_t)&piod, 0) == 0)\n \t  {\n \t    /* Return the actual number of bytes read or written.  */\n \t    *xfered_len = piod.piod_len;\n@@ -565,7 +576,7 @@ inf_ptrace_target::xfer_partial (enum target_object object,\n \t  return TARGET_XFER_EOF;\n       }\n #endif\n-      *xfered_len = inf_ptrace_peek_poke (pid, readbuf, writebuf,\n+      *xfered_len = inf_ptrace_peek_poke (ptid, readbuf, writebuf,\n \t\t\t\t\t  offset, len);\n       return *xfered_len != 0 ? TARGET_XFER_OK : TARGET_XFER_EOF;\n \n@@ -588,7 +599,7 @@ inf_ptrace_target::xfer_partial (enum target_object object,\n \tpiod.piod_len = len;\n \n \terrno = 0;\n-\tif (ptrace (PT_IO, pid, (caddr_t)&piod, 0) == 0)\n+\tif (gdb_ptrace (PT_IO, ptid, (caddr_t)&piod, 0) == 0)\n \t  {\n \t    /* Return the actual number of bytes read or written.  */\n \t    *xfered_len = piod.piod_len;"
    },
    {
      "sha": "dea82d005e35adeda4bcf4b82c348b0fbe48d9a8",
      "filename": "gdb/inf-ptrace.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/inf-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f09db380942d1393e6f60d1ecaa7d4b6edfaaecf/gdb/inf-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.h?ref=f09db380942d1393e6f60d1ecaa7d4b6edfaaecf",
      "patch": "@@ -78,9 +78,14 @@ struct inf_ptrace_target : public inf_child_target\n   void detach_success (inferior *inf);\n };\n \n+#ifndef __NetBSD__\n /* Return which PID to pass to ptrace in order to observe/control the\n-   tracee identified by PTID.  */\n+   tracee identified by PTID.\n+\n+   Unlike most other Operating Systems, NetBSD tracks both pid and lwp\n+   and avoids this function.  */\n \n extern pid_t get_ptrace_pid (ptid_t);\n+#endif\n \n #endif"
    }
  ]
}