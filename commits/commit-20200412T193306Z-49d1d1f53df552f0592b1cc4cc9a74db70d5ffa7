{
  "sha": "49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDlkMWQxZjUzZGY1NTJmMDU5MmIxY2M0Y2M5YTc0ZGI3MGQ1ZmZhNw==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-12T19:09:48Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-12T19:33:06Z"
    },
    "message": "Implement \"info proc cmdline\" for NetBSD\n\nAdd nbsd_pid_to_cmdline() to query the program command line.\n\ngdb/ChangeLog:\n\n        * nbsd-nat.c (nbsd_pid_to_cmdline): Add.\n        (nbsd_nat_target::info_proc): Add do_cmdline.",
    "tree": {
      "sha": "00e8d6449239504dd1781e6e82a8be5e10abf18c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/00e8d6449239504dd1781e6e82a8be5e10abf18c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4848d2a7b63d6001051f39d50ca965cb4210951",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4848d2a7b63d6001051f39d50ca965cb4210951",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4848d2a7b63d6001051f39d50ca965cb4210951"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 44,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6fd38361d3cb9548bc1f084a0782a78b0f7028b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-12  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.c (nbsd_pid_to_cmdline): Add.\n+        (nbsd_nat_target::info_proc): Add do_cmdline.\n+\n 2020-04-12  Kamil Rytarowski  <n54@gmx.com>\n \n \t* nbsd-nat.c (nbsd_pid_to_cwd): Add."
    },
    {
      "sha": "fa49ac26c9bfa4ede635163c053041b902b8b4c0",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=49d1d1f53df552f0592b1cc4cc9a74db70d5ffa7",
      "patch": "@@ -58,6 +58,33 @@ nbsd_pid_to_cwd (int pid)\n   return buf;\n }\n \n+/* Return the command line for the process identified by PID.  */\n+\n+static gdb::unique_xmalloc_ptr<char[]>\n+nbsd_pid_to_cmdline (int pid)\n+{\n+  int mib[4] = {CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV};\n+\n+  size_t size = 0;\n+  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n+    return nullptr;\n+\n+  gdb::unique_xmalloc_ptr<char[]> args (XNEWVAR (char, size));\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), args.get (), &size, NULL, 0) == -1\n+      || size == 0)\n+    return nullptr;\n+\n+  /* Arguments are returned as a flattened string with NUL separators.\n+     Join the arguments with spaces to form a single string.  */\n+  for (size_t i = 0; i < size - 1; i++)\n+    if (args[i] == '\\0')\n+      args[i] = ' ';\n+  args[size - 1] = '\\0';\n+\n+  return args;\n+}\n+\n /* Generic thread (LWP) lister within a specified process.  The callback\n    parameters is a C++ function that is called for each detected thread.  */\n \n@@ -313,6 +340,7 @@ bool\n nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n {\n   pid_t pid;\n+  bool do_cmdline = false;\n   bool do_cwd = false;\n   bool do_exe = false;\n   bool do_mappings = false;\n@@ -322,6 +350,9 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n     case IP_MAPPINGS:\n       do_mappings = true;\n       break;\n+    case IP_CMDLINE:\n+      do_cmdline = true;\n+      break;\n     case IP_EXE:\n       do_exe = true;\n       break;\n@@ -346,6 +377,14 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n \n   printf_filtered (_(\"process %d\\n\"), pid);\n \n+  if (do_cmdline)\n+    {\n+      gdb::unique_xmalloc_ptr<char[]> cmdline = nbsd_pid_to_cmdline (pid);\n+      if (cmdline != nullptr)\n+\tprintf_filtered (\"cmdline = '%s'\\n\", cmdline.get ());\n+      else\n+\twarning (_(\"unable to fetch command line\"));\n+    }\n   if (do_cwd)\n     {\n       std::string cwd = nbsd_pid_to_cwd (pid);"
    }
  ]
}