{
  "sha": "46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDZmMmMyMmVhYmIzZDJiMTNlZDU2ZjUyOGE0ZjQ1ZGM1ZThmM2EzMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-03T13:59:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-07-06T11:10:52Z"
    },
    "message": "Update gdb performance testsuite to be compatible with Python 3.8\n\nRunning \"make check-perf\" on a system with Python 3.8 (e.g., Ubuntu\n20.04) runs into this Python problem:\n\n  Traceback (most recent call last):\n    File \"<string>\", line 1, in <module>\n    File \"/home/pedro/rocm/gdb/src/gdb/testsuite/gdb.perf/lib/perftest/perftest.py\", line 65, in run\n      self.execute_test()\n    File \"<string>\", line 35, in execute_test\n    File \"/home/pedro/rocm/gdb/src/gdb/testsuite/gdb.perf/lib/perftest/measure.py\", line 45, in measure\n      m.start(id)\n    File \"/home/pedro/rocm/gdb/src/gdb/testsuite/gdb.perf/lib/perftest/measure.py\", line 102, in start\n      self.start_time = time.clock()\n  AttributeError: module 'time' has no attribute 'clock'\n  Error while executing Python code.\n  (gdb) FAIL: gdb.perf/single-step.exp: python SingleStep(1000).run()\n\n... many times over.\n\nThe problem is that the testsuite is using time.clock(), deprecated in\nPython 3.3 and finaly removed in Python 3.8.  The guidelines say to\nuse time.perf_counter() or time.process_time() instead depending on\nrequirements.  Looking at the current description of those functions,\nat:\n\n   https://docs.python.org/3.10/library/time.html\n\nwe have:\n\n   time.perf_counter() -> float\n\n       Return the value (in fractional seconds) of a performance\n       counter, i.e. a clock with the highest available resolution to\n       measure a short duration. It does include time elapsed during\n       sleep and is system-wide. (...)\n\n   time.process_time() -> float\n\n       Return the value (in fractional seconds) of the sum of the\n       system and user CPU time of the current process. It does not\n       include time elapsed during sleep. It is process-wide by\n       definition. (...)\n\nI'm thinking that it's just best to record both instead of picking\none.  So this patch replaces the MeasurementCpuTime measurement class\nwith two new classes -- MeasurementPerfCounter and\nMeasurementProcessTime.  Correspondingly, this changes the reports in\ntestsuite/perftest.log -- we have two new \"perf_counter\" and\n\"process_time\" measurements and the \"cpu_time\" measurement is gone.  I\ndon't suppose breaking backward compatibility here is a big problem.\nI suspect no one is really tracking long term performance using the\nperf testsuite today.  And if they are, it shouldn't be hard to adjust.\n\nFor backward compatility, with Python < 3.3, both perf_counter and\nprocess_time use the old time.clock.\n\ngdb/testsuite/ChangeLog:\nyyyy-mm-dd  Qingchuan Shi  <qingchuan.shi@amd.com>\n\t    Pedro Alves  <pedro@palves.net>\n\n\t* gdb.perf/lib/perftest/perftest.py: Import sys.\n\t(time.perf_counter, time.process_time): Map to time.clock on\n\tPython < 3.3.\n\t(MeasurementCpuTime): Delete, replaced by...\n\t(MeasurementPerfCounter, MeasurementProcessTime): .. these two new\n\tclasses.\n\t* gdb.perf/lib/perftest/perftest.py: Import MeasurementPerfCounter\n\tand MeasurementProcessTime instead of MeasurementCpuTime.\n\t(TestCaseWithBasicMeasurements): Use MeasurementPerfCounter and\n\tMeasurementProcessTime instead of MeasurementCpuTime.\n\nCo-authored-by: Qingchuan Shi <qingchuan.shi@amd.com>\n\nChange-Id: Ia850c05d5ce57d2dada70ba5b0061f566444aa2b",
    "tree": {
      "sha": "21c21d9facaf9f035297e5d7a6c538e2411686cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21c21d9facaf9f035297e5d7a6c538e2411686cf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3e837844a32374a5d787a11ed5e54a856d4d4b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3e837844a32374a5d787a11ed5e54a856d4d4b0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3e837844a32374a5d787a11ed5e54a856d4d4b0"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 40,
    "deletions": 16
  },
  "files": [
    {
      "sha": "9810458fdb6c92683ea6d7c919720f47d6e77e42",
      "filename": "gdb/testsuite/gdb.perf/lib/perftest/measure.py",
      "status": "modified",
      "additions": 36,
      "deletions": 14,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32/gdb/testsuite/gdb.perf/lib/perftest/measure.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32/gdb/testsuite/gdb.perf/lib/perftest/measure.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.perf/lib/perftest/measure.py?ref=46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
      "patch": "@@ -16,6 +16,13 @@\n import time\n import os\n import gc\n+import sys\n+\n+# time.perf_counter() and time.process_time() were added in Python\n+# 3.3, time.clock() was removed in Python 3.8.\n+if sys.version_info < (3, 3, 0):\n+    time.perf_counter = time.clock\n+    time.process_time = time.clock\n \n \n class Measure(object):\n@@ -85,28 +92,43 @@ def report(self, reporter, name):\n         self.result.report(reporter, name + \" \" + self.name)\n \n \n-class MeasurementCpuTime(Measurement):\n-    \"\"\"Measurement on CPU time.\"\"\"\n+class MeasurementPerfCounter(Measurement):\n+    \"\"\"Measurement on performance counter.\"\"\"\n+\n+    # Measures time in fractional seconds, using a performance\n+    # counter, i.e. a clock with the highest available resolution to\n+    # measure a short duration.  It includes time elapsed during sleep\n+    # and is system-wide.\n+\n+    def __init__(self, result):\n+        super(MeasurementPerfCounter, self).__init__(\"perf_counter\", result)\n+        self.start_time = 0\n+\n+    def start(self, id):\n+        self.start_time = time.perf_counter()\n+\n+    def stop(self, id):\n+        perf_counter = time.perf_counter() - self.start_time\n+        self.result.record(id, perf_counter)\n+\n+\n+class MeasurementProcessTime(Measurement):\n+    \"\"\"Measurement on process time.\"\"\"\n \n-    # On UNIX, time.clock() measures the amount of CPU time that has\n-    # been used by the current process.  On Windows it will measure\n-    # wall-clock seconds elapsed since the first call to the function.\n-    # Something other than time.clock() should be used to measure CPU\n-    # time on Windows.\n+    # Measures the sum of the system and user CPU time of the current\n+    # process.  Does not include time elapsed during sleep.  It is\n+    # process-wide by definition.\n \n     def __init__(self, result):\n-        super(MeasurementCpuTime, self).__init__(\"cpu_time\", result)\n+        super(MeasurementProcessTime, self).__init__(\"process_time\", result)\n         self.start_time = 0\n \n     def start(self, id):\n-        self.start_time = time.clock()\n+        self.start_time = time.process_time()\n \n     def stop(self, id):\n-        if os.name == \"nt\":\n-            cpu_time = 0\n-        else:\n-            cpu_time = time.clock() - self.start_time\n-        self.result.record(id, cpu_time)\n+        process_time = time.process_time() - self.start_time\n+        self.result.record(id, process_time)\n \n \n class MeasurementWallTime(Measurement):"
    },
    {
      "sha": "202ba3f71bc2ec49952a4c977ef550a84b3ad21b",
      "filename": "gdb/testsuite/gdb.perf/lib/perftest/perftest.py",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32/gdb/testsuite/gdb.perf/lib/perftest/perftest.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32/gdb/testsuite/gdb.perf/lib/perftest/perftest.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.perf/lib/perftest/perftest.py?ref=46f2c22eabb3d2b13ed56f528a4f45dc5e8f3a32",
      "patch": "@@ -18,7 +18,8 @@\n import perftest.testresult as testresult\n import perftest.reporter as reporter\n from perftest.measure import Measure\n-from perftest.measure import MeasurementCpuTime\n+from perftest.measure import MeasurementPerfCounter\n+from perftest.measure import MeasurementProcessTime\n from perftest.measure import MeasurementWallTime\n from perftest.measure import MeasurementVmSize\n \n@@ -72,7 +73,8 @@ class TestCaseWithBasicMeasurements(TestCase):\n     def __init__(self, name):\n         result_factory = testresult.SingleStatisticResultFactory()\n         measurements = [\n-            MeasurementCpuTime(result_factory.create_result()),\n+            MeasurementPerfCounter(result_factory.create_result()),\n+            MeasurementProcessTime(result_factory.create_result()),\n             MeasurementWallTime(result_factory.create_result()),\n             MeasurementVmSize(result_factory.create_result()),\n         ]"
    }
  ]
}