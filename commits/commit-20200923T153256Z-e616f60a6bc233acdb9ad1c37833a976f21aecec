{
  "sha": "e616f60a6bc233acdb9ad1c37833a976f21aecec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTYxNmY2MGE2YmMyMzNhY2RiOWFkMWMzNzgzM2E5NzZmMjFhZWNlYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:56Z"
    },
    "message": "Transfer module ownership to do_module_cleanup\n\nThis changes the do_module_cleanup structure to simply hold on to the\nmodule itself.  This lets us remove most members from\ndo_module_cleanup.\n\ngdb/ChangeLog\n2020-09-23  Tom Tromey  <tom@tromey.com>\n\n\t* compile/compile-object-run.c (struct do_module_cleanup): Add\n\tparameters to constructor.  Update destructor.\n\t<source_file, scope, scope_data, out_value_type, out_value_addr,\n\tmunmap_list_head, objfile_name_string>: Remove.\n\t<module>: New member.\n\t(do_module_cleanup): Update.\n\t(compile_object_run): Update.",
    "tree": {
      "sha": "c3e1f6866374fdf973167ef34ee18b88dacd31da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c3e1f6866374fdf973167ef34ee18b88dacd31da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e616f60a6bc233acdb9ad1c37833a976f21aecec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e616f60a6bc233acdb9ad1c37833a976f21aecec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e616f60a6bc233acdb9ad1c37833a976f21aecec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e616f60a6bc233acdb9ad1c37833a976f21aecec/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e947a8482ac8ea529869c15b6949e4f19272c747",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e947a8482ac8ea529869c15b6949e4f19272c747",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e947a8482ac8ea529869c15b6949e4f19272c747"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 38,
    "deletions": 42
  },
  "files": [
    {
      "sha": "ce72b109d6752c7412844922b9bf5725d2173e8d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e616f60a6bc233acdb9ad1c37833a976f21aecec/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e616f60a6bc233acdb9ad1c37833a976f21aecec/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e616f60a6bc233acdb9ad1c37833a976f21aecec",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* compile/compile-object-run.c (struct do_module_cleanup): Add\n+\tparameters to constructor.  Update destructor.\n+\t<source_file, scope, scope_data, out_value_type, out_value_addr,\n+\tmunmap_list_head, objfile_name_string>: Remove.\n+\t<module>: New member.\n+\t(do_module_cleanup): Update.\n+\t(compile_object_run): Update.\n+\n 2020-09-23  Tom Tromey  <tom@tromey.com>\n \n \t* compile/compile.c (eval_compile_command): Update."
    },
    {
      "sha": "b43e0b6df7c312aca01763cd547cad11a848d8cd",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 28,
      "deletions": 42,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e616f60a6bc233acdb9ad1c37833a976f21aecec/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e616f60a6bc233acdb9ad1c37833a976f21aecec/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=e616f60a6bc233acdb9ad1c37833a976f21aecec",
      "patch": "@@ -32,13 +32,16 @@\n \n struct do_module_cleanup\n {\n-  do_module_cleanup () = default;\n+  do_module_cleanup (int *ptr, compile_module_up &&mod)\n+    : executedp (ptr),\n+      module (std::move (mod))\n+  {\n+  }\n \n   ~do_module_cleanup ()\n   {\n-    delete munmap_list_head;\n-    xfree (source_file);\n-    xfree (objfile_name_string);\n+    delete module->munmap_list_head;\n+    xfree (module->source_file);\n   }\n \n   DISABLE_COPY_AND_ASSIGN (do_module_cleanup);\n@@ -47,22 +50,8 @@ struct do_module_cleanup\n      The pointer may be NULL.  */\n   int *executedp;\n \n-  /* .c file OBJFILE was built from.  It needs to be xfree-d.  */\n-  char *source_file = nullptr;\n-\n-  /* Copy from struct compile_module.  */\n-  enum compile_i_scope_types scope;\n-  void *scope_data;\n-\n-  /* Copy from struct compile_module.  */\n-  struct type *out_value_type;\n-  CORE_ADDR out_value_addr;\n-\n-  /* Copy from struct compile_module.  */\n-  struct munmap_list *munmap_list_head = nullptr;\n-\n-  /* objfile_name of our objfile.  */\n-  char *objfile_name_string = nullptr;\n+  /* The compile module.  */\n+  compile_module_up module;\n };\n \n /* Cleanup everything after the inferior function dummy frame gets\n@@ -80,22 +69,29 @@ do_module_cleanup (void *arg, int registers_valid)\n \n       /* This code cannot be in compile_object_run as OUT_VALUE_TYPE\n \t no longer exists there.  */\n-      if (data->scope == COMPILE_I_PRINT_ADDRESS_SCOPE\n-\t  || data->scope == COMPILE_I_PRINT_VALUE_SCOPE)\n+      if (data->module->scope == COMPILE_I_PRINT_ADDRESS_SCOPE\n+\t  || data->module->scope == COMPILE_I_PRINT_VALUE_SCOPE)\n \t{\n \t  struct value *addr_value;\n-\t  struct type *ptr_type = lookup_pointer_type (data->out_value_type);\n+\t  struct type *ptr_type\n+\t    = lookup_pointer_type (data->module->out_value_type);\n \n-\t  addr_value = value_from_pointer (ptr_type, data->out_value_addr);\n+\t  addr_value = value_from_pointer (ptr_type,\n+\t\t\t\t\t   data->module->out_value_addr);\n \n \t  /* SCOPE_DATA would be stale unless EXECUTEDP != NULL.  */\n-\t  compile_print_value (value_ind (addr_value), data->scope_data);\n+\t  compile_print_value (value_ind (addr_value),\n+\t\t\t       data->module->scope_data);\n \t}\n     }\n \n+  /* We have to make a copy of the name so that we can unlink the\n+     underlying file -- removing the objfile will cause the name to be\n+     freed, so we can't simply keep a reference to it.  */\n+  std::string objfile_name_s = objfile_name (data->module->objfile);\n   for (objfile *objfile : current_program_space->objfiles ())\n     if ((objfile->flags & OBJF_USERLOADED) == 0\n-        && (strcmp (objfile_name (objfile), data->objfile_name_string) == 0))\n+\t&& objfile_name_s == objfile_name (objfile))\n       {\n \tobjfile->unlink ();\n \n@@ -106,10 +102,10 @@ do_module_cleanup (void *arg, int registers_valid)\n       }\n \n   /* Delete the .c file.  */\n-  unlink (data->source_file);\n+  unlink (data->module->source_file);\n \n   /* Delete the .o file.  */\n-  unlink (data->objfile_name_string);\n+  unlink (objfile_name_s.c_str ());\n \n   delete data;\n }\n@@ -135,23 +131,12 @@ compile_object_run (compile_module_up &&module)\n {\n   struct value *func_val;\n   struct do_module_cleanup *data;\n-  const char *objfile_name_s = objfile_name (module->objfile);\n   int dtor_found, executed = 0;\n   struct symbol *func_sym = module->func_sym;\n   CORE_ADDR regs_addr = module->regs_addr;\n   struct objfile *objfile = module->objfile;\n \n-  data = new struct do_module_cleanup;\n-  data->executedp = &executed;\n-  data->source_file = xstrdup (module->source_file);\n-  data->objfile_name_string = xstrdup (objfile_name_s);\n-  data->scope = module->scope;\n-  data->scope_data = module->scope_data;\n-  data->out_value_type = module->out_value_type;\n-  data->out_value_addr = module->out_value_addr;\n-  data->munmap_list_head = module->munmap_list_head;\n-\n-  xfree (module->source_file);\n+  data = new struct do_module_cleanup (&executed, std::move (module));\n \n   try\n     {\n@@ -178,9 +163,10 @@ compile_object_run (compile_module_up &&module)\n \t}\n       if (func_type->num_fields () >= 2)\n \t{\n-\t  gdb_assert (data->out_value_addr != 0);\n+\t  gdb_assert (data->module->out_value_addr != 0);\n \t  vargs[current_arg] = value_from_pointer\n-\t       (func_type->field (current_arg).type (), data->out_value_addr);\n+\t       (func_type->field (current_arg).type (),\n+\t\tdata->module->out_value_addr);\n \t  ++current_arg;\n \t}\n       gdb_assert (current_arg == func_type->num_fields ());"
    }
  ]
}