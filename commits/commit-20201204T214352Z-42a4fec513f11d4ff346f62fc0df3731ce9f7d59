{
  "sha": "42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDJhNGZlYzUxM2YxMWQ0ZmYzNDZmNjJmYzBkZjM3MzFjZTlmN2Q1OQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:52Z"
    },
    "message": "gdb: add inferior_execd observable\n\nI want to add another action (clearing displaced stepping state) that\nhappens when an inferior execs.  I think it would be cleaner to have an\nobserver for this event, rather than have infrun know about each other\nsub-component.\n\nReplace the calls to solib_create_inferior_hook and\njit_inferior_created_hook in follow_exec by observers.\n\ngdb/ChangeLog:\n\n\t* observable.h (inferior_execd): Declare new observable.\n\t* observable.c (inferior_execd): Declare new observable.\n\t* infrun.c (follow_exec): Notify inferior_execd observer.\n\t* jit.c (jit_inferior_created_hook): Make static.\n\t(_initialize_jit): Register inferior_execd observer.\n\t* jit.h (jit_inferior_created_hook): Remove declaration.\n\t* solib.c (_initialize_solib): Register inferior_execd observer.\n\nChange-Id: I000cce00094e23baa67df693d912646b6ae38e44",
    "tree": {
      "sha": "9f7c10404b81c3a7186f3b1552e7114af4922c1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f7c10404b81c3a7186f3b1552e7114af4922c1d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aafdfb4eddc3c58be24fe50a1e6543a4b9c8cbac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aafdfb4eddc3c58be24fe50a1e6543a4b9c8cbac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aafdfb4eddc3c58be24fe50a1e6543a4b9c8cbac"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 26,
    "deletions": 12
  },
  "files": [
    {
      "sha": "d7bfae85345bf07f5931b913035d6bff4e1d58a5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* observable.h (inferior_execd): Declare new observable.\n+\t* observable.c (inferior_execd): Declare new observable.\n+\t* infrun.c (follow_exec): Notify inferior_execd observer.\n+\t* jit.c (jit_inferior_created_hook): Make static.\n+\t(_initialize_jit): Register inferior_execd observer.\n+\t* jit.h (jit_inferior_created_hook): Remove declaration.\n+\t* solib.c (_initialize_solib): Register inferior_execd observer.\n+\n 2020-12-04  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/27003"
    },
    {
      "sha": "473a0fb85420c43196a2b68a8d042f2d8a1ba27c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -1222,9 +1222,7 @@ follow_exec (ptid_t ptid, const char *exec_file_target)\n      registers.  */\n   target_find_description ();\n \n-  solib_create_inferior_hook (0);\n-\n-  jit_inferior_created_hook (inf);\n+  gdb::observers::inferior_execd.notify (inf);\n \n   breakpoint_re_set ();\n "
    },
    {
      "sha": "9deeed7ab597adf607b039d2e6da12a4fcaaf591",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -49,6 +49,7 @@ static const char jit_break_name[] = \"__jit_debug_register_code\";\n \n static const char jit_descriptor_name[] = \"__jit_debug_descriptor\";\n \n+static void jit_inferior_created_hook (inferior *inf);\n static void jit_inferior_exit_hook (struct inferior *inf);\n \n /* An unwinder is registered for every gdbarch.  This key is used to\n@@ -1230,9 +1231,12 @@ jit_inferior_init (inferior *inf)\n     }\n }\n \n-/* See jit.h.  */\n+/* Looks for the descriptor and registration symbols and breakpoints\n+   the registration function.  If it finds both, it registers all the\n+   already JITed code.  If it has already found the symbols, then it\n+   doesn't try again.  */\n \n-void\n+static void\n jit_inferior_created_hook (inferior *inf)\n {\n   jit_inferior_init (inf);\n@@ -1337,6 +1341,7 @@ _initialize_jit ()\n \t\t\t     &setdebuglist, &showdebuglist);\n \n   gdb::observers::inferior_created.attach (jit_inferior_created_hook);\n+  gdb::observers::inferior_execd.attach (jit_inferior_created_hook);\n   gdb::observers::inferior_exit.attach (jit_inferior_exit_hook);\n   gdb::observers::breakpoint_deleted.attach (jit_breakpoint_deleted);\n "
    },
    {
      "sha": "969380607337e6d50a96fa6bfa42275b62e4bbbb",
      "filename": "gdb/jit.h",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/jit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/jit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.h?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -103,13 +103,6 @@ struct jited_objfile_data\n   CORE_ADDR addr;\n };\n \n-/* Looks for the descriptor and registration symbols and breakpoints\n-   the registration function.  If it finds both, it registers all the\n-   already JITed code.  If it has already found the symbols, then it\n-   doesn't try again.  */\n-\n-extern void jit_inferior_created_hook (inferior *inf);\n-\n /* Re-establish the jit breakpoint(s).  */\n \n extern void jit_breakpoint_re_set (void);"
    },
    {
      "sha": "231f955fa26016f88e34a9cc7e77eb780936ae62",
      "filename": "gdb/observable.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/observable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/observable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.c?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -43,6 +43,7 @@ DEFINE_OBSERVABLE (command_error);\n DEFINE_OBSERVABLE (target_changed);\n DEFINE_OBSERVABLE (executable_changed);\n DEFINE_OBSERVABLE (inferior_created);\n+DEFINE_OBSERVABLE (inferior_execd);\n DEFINE_OBSERVABLE (record_changed);\n DEFINE_OBSERVABLE (solib_loaded);\n DEFINE_OBSERVABLE (solib_unloaded);"
    },
    {
      "sha": "1dce6746ff393632f8a63fbac02c29fbdfc95416",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -89,6 +89,9 @@ extern observable<> executable_changed;\n    information on the inferior has been printed.  */\n extern observable<inferior */* inferior */> inferior_created;\n \n+/* The inferior INF has exec'ed a new executable file.  */\n+extern observable<struct inferior */* inf */> inferior_execd;\n+\n /* The status of process record for inferior inferior in gdb has\n    changed.  The process record is started if STARTED is true, and\n    the process record is stopped if STARTED is false."
    },
    {
      "sha": "1f6e91599a56c3c6ad1f6abe566dc8b52100224f",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42a4fec513f11d4ff346f62fc0df3731ce9f7d59/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=42a4fec513f11d4ff346f62fc0df3731ce9f7d59",
      "patch": "@@ -1557,6 +1557,10 @@ _initialize_solib ()\n   solib_data = gdbarch_data_register_pre_init (solib_init);\n \n   gdb::observers::free_objfile.attach (remove_user_added_objfile);\n+  gdb::observers::inferior_execd.attach ([] (inferior *inf)\n+    {\n+      solib_create_inferior_hook (0);\n+    });\n \n   add_com (\"sharedlibrary\", class_files, sharedlibrary_command,\n \t   _(\"Load shared object library symbols for files matching REGEXP.\"));"
    }
  ]
}