{
  "sha": "3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2EzZjRiZjc2YTQ3OTBlODFlZTE4NmVhNzY3MzFhN2Y2N2RiYTFjOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T03:21:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T06:17:13Z"
    },
    "message": "qsort: elf_link_add_object_symbols weak aliases\n\nThis particular sort almost certainly does not need to be stable for\nthe ELF linker to work correctly.  However it is conceivable that an\nunstable sort could affect linker output, and thus different output be\nseen with differing qsort implementations.  The argument goes like\nthis:  Given more than one strong alias symbol of equal section, value,\nand size, the aliases will compare equal by elf_sort_symbol and thus\nwhich one is chosen as the \"real\" symbol to be made dynamic depends on\nqsort.  Why would anyone define two symbols at the same address?\nWell, sometimes the fact that there are more than one strong alias\nsymbol is due to linker script symbols like __bss_start being made\ndynamic.  This will match the first symbol defined in .bss if it\ndoesn't have correct size, and forgetting to properly set size and\ntype of symbols isn't as rare as it should be.\n\nThis patch adds some more heuristics to elf_sort_symbol.\n\n\t* elflink.c (elf_sort_symbol): Sort on type and name as well.\n\t(elf_link_add_object_symbols): Style fix.",
    "tree": {
      "sha": "96600b9d8a31fed33b8736b59eb0807963f09e05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/96600b9d8a31fed33b8736b59eb0807963f09e05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48db3297342d798e58a00771a67b9b4c93412920",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48db3297342d798e58a00771a67b9b4c93412920",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48db3297342d798e58a00771a67b9b4c93412920"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 49,
    "deletions": 12
  },
  "files": [
    {
      "sha": "bb6c907ac749def5c89482258e0ed415a9c521f8",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* elflink.c (elf_sort_symbol): Sort on type and name as well.\n+\t(elf_link_add_object_symbols): Style fix.\n+\n 2019-10-14  Alan Modra  <amodra@gmail.com>\n \n \t* elf.c (_bfd_elf_map_sections_to_segments): Init target_index"
    },
    {
      "sha": "9d7f69afda52472bfc63b783d60053cecb386452",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 44,
      "deletions": 12,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
      "patch": "@@ -3587,27 +3587,60 @@ on_needed_list (const char *soname,\n   return FALSE;\n }\n \n-/* Sort symbol by value, section, and size.  */\n+/* Sort symbol by value, section, size, and type.  */\n static int\n elf_sort_symbol (const void *arg1, const void *arg2)\n {\n   const struct elf_link_hash_entry *h1;\n   const struct elf_link_hash_entry *h2;\n   bfd_signed_vma vdiff;\n+  int sdiff;\n+  const char *n1;\n+  const char *n2;\n \n   h1 = *(const struct elf_link_hash_entry **) arg1;\n   h2 = *(const struct elf_link_hash_entry **) arg2;\n   vdiff = h1->root.u.def.value - h2->root.u.def.value;\n   if (vdiff != 0)\n     return vdiff > 0 ? 1 : -1;\n-  else\n-    {\n-      int sdiff = h1->root.u.def.section->id - h2->root.u.def.section->id;\n-      if (sdiff != 0)\n-\treturn sdiff > 0 ? 1 : -1;\n-    }\n+\n+  sdiff = h1->root.u.def.section->id - h2->root.u.def.section->id;\n+  if (sdiff != 0)\n+    return sdiff;\n+\n+  /* Sort so that sized symbols are selected over zero size symbols.  */\n   vdiff = h1->size - h2->size;\n-  return vdiff == 0 ? 0 : vdiff > 0 ? 1 : -1;\n+  if (vdiff != 0)\n+    return vdiff > 0 ? 1 : -1;\n+\n+  /* Sort so that STT_OBJECT is selected over STT_NOTYPE.  */\n+  if (h1->type != h2->type)\n+    return h1->type - h2->type;\n+\n+  /* If symbols are properly sized and typed, and multiple strong\n+     aliases are not defined in a shared library by the user we\n+     shouldn't get here.  Unfortunately linker script symbols like\n+     __bss_start sometimes match a user symbol defined at the start of\n+     .bss without proper size and type.  We'd like to preference the\n+     user symbol over reserved system symbols.  Sort on leading\n+     underscores.  */\n+  n1 = h1->root.root.string;\n+  n2 = h2->root.root.string;\n+  while (*n1 == *n2)\n+    {\n+      if (*n1 == 0)\n+\tbreak;\n+      ++n1;\n+      ++n2;\n+    }\n+  if (*n1 == '_')\n+    return -1;\n+  if (*n2 == '_')\n+    return 1;\n+\n+  /* Final sort on name selects user symbols like '_u' over reserved\n+     system symbols like '_Z' and also will avoid qsort instability.  */\n+  return *n1 - *n2;\n }\n \n /* This function is used to adjust offsets into .dynstr for\n@@ -5345,8 +5378,8 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t defined symbol, search time for N weak defined symbols will be\n \t O(N^2). Binary search will cut it down to O(NlogN).  */\n       amt = extsymcount;\n-      amt *= sizeof (struct elf_link_hash_entry *);\n-      sorted_sym_hash = (struct elf_link_hash_entry **) bfd_malloc (amt);\n+      amt *= sizeof (*sorted_sym_hash);\n+      sorted_sym_hash = bfd_malloc (amt);\n       if (sorted_sym_hash == NULL)\n \tgoto error_return;\n       sym_hash = sorted_sym_hash;\n@@ -5366,8 +5399,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t    }\n \t}\n \n-      qsort (sorted_sym_hash, sym_count,\n-\t     sizeof (struct elf_link_hash_entry *),\n+      qsort (sorted_sym_hash, sym_count, sizeof (*sorted_sym_hash),\n \t     elf_sort_symbol);\n \n       while (weaks != NULL)"
    }
  ]
}