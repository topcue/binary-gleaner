{
  "sha": "98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTg4MTRjNmMxMTFhMDY4MWU2OTFhNzI4MzRjOGRjYzViOGQxYmIzYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-15T21:05:38Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-19T19:26:37Z"
    },
    "message": "Minor Ada task cleanups\n\nWhile working on the Ada task code, I noticed a few things that could\nbe cleaned up:\n\n* task_list_valid_p was not set in all cases in ada_build_task_list.\n  This causes many needless re-fetches of the task list.\n\n* task_list_valid_p can be bool, and various functions can also return\n  bool.\n\n* Nothing checks the return value of read_known_tasks, so it can be\n  changed to return void.\n\n* The call to ada_build_task_list in\n  ravenscar_thread_target::update_thread_list is redundant, because\n  this is the first thing done by iterate_over_live_ada_tasks.\n\nTested using the internal AdaCore test suite against a ravenscar\ntarget.\n\ngdb/ChangeLog\n2019-02-19  Tom Tromey  <tromey@adacore.com>\n\n\t* ravenscar-thread.c\n\t(ravenscar_thread_target::update_thread_list): Don't call\n\tada_build_task_list.\n\t* ada-lang.h (ada_build_task_list): Don't declare.\n\t* ada-tasks.c (struct ada_tasks_inferior_data)\n\t<task_list_valid_p>: Now bool.\n\t(read_known_tasks, ada_task_list_changed)\n\t(ada_tasks_invalidate_inferior_data): Update.\n\t(read_known_tasks_array): Return bool.\n\t(read_known_tasks_list): Likewise.\n\t(read_known_tasks): Return void.\n\t(ada_build_task_list): Now static.",
    "tree": {
      "sha": "569c709c9438d99160649efbe94acd546877a4d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/569c709c9438d99160649efbe94acd546877a4d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f2117ba3892110badc65a7126b19cec211acfa2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f2117ba3892110badc65a7126b19cec211acfa2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f2117ba3892110badc65a7126b19cec211acfa2"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 42,
    "deletions": 32
  },
  "files": [
    {
      "sha": "4e429f4fa3717e7a3058d06cd00b690935d22d7d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
      "patch": "@@ -1,3 +1,18 @@\n+2019-02-19  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ravenscar-thread.c\n+\t(ravenscar_thread_target::update_thread_list): Don't call\n+\tada_build_task_list.\n+\t* ada-lang.h (ada_build_task_list): Don't declare.\n+\t* ada-tasks.c (struct ada_tasks_inferior_data)\n+\t<task_list_valid_p>: Now bool.\n+\t(read_known_tasks, ada_task_list_changed)\n+\t(ada_tasks_invalidate_inferior_data): Update.\n+\t(read_known_tasks_array): Return bool.\n+\t(read_known_tasks_list): Likewise.\n+\t(read_known_tasks): Return void.\n+\t(ada_build_task_list): Now static.\n+\n 2019-02-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdbtypes.c (type_align): Allow alignment of TYPE_CODE_METHODPTR"
    },
    {
      "sha": "ee03dbd2aad46b332eef4ab6afed517edd67b50d",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
      "patch": "@@ -411,8 +411,6 @@ extern void iterate_over_live_ada_tasks\n \n extern const char *ada_get_tcb_types_info (void);\n \n-extern int ada_build_task_list (void);\n-\n extern void print_ada_task_info (struct ui_out *uiout,\n \t\t\t\t char *taskno_str,\n \t\t\t\t struct inferior *inf);"
    },
    {
      "sha": "ccabc63104080e553308be4e52bebb632998c08e",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 27,
      "deletions": 28,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
      "patch": "@@ -26,6 +26,8 @@\n #include \"progspace.h\"\n #include \"objfiles.h\"\n \n+static int ada_build_task_list ();\n+\n /* The name of the array in the GNAT runtime where the Ada Task Control\n    Block of each task is stored.  */\n #define KNOWN_TASKS_NAME \"system__tasking__debug__known_tasks\"\n@@ -230,7 +232,7 @@ struct ada_tasks_inferior_data\n   /* When nonzero, this flag indicates that the task_list field\n      below is up to date.  When set to zero, the list has either\n      not been initialized, or has potentially become stale.  */\n-  int task_list_valid_p = 0;\n+  bool task_list_valid_p = false;\n \n   /* The list of Ada tasks.\n \n@@ -803,9 +805,9 @@ add_ada_task (CORE_ADDR task_id, struct inferior *inf)\n }\n \n /* Read the Known_Tasks array from the inferior memory, and store\n-   it in the current inferior's TASK_LIST.  Return non-zero upon success.  */\n+   it in the current inferior's TASK_LIST.  Return true upon success.  */\n \n-static int\n+static bool\n read_known_tasks_array (struct ada_tasks_inferior_data *data)\n {\n   const int target_ptr_byte = TYPE_LENGTH (data->known_tasks_element);\n@@ -826,13 +828,13 @@ read_known_tasks_array (struct ada_tasks_inferior_data *data)\n         add_ada_task (task_id, current_inferior ());\n     }\n \n-  return 1;\n+  return true;\n }\n \n /* Read the known tasks from the inferior memory, and store it in\n-   the current inferior's TASK_LIST.  Return non-zero upon success.  */\n+   the current inferior's TASK_LIST.  Return true upon success.  */\n \n-static int\n+static bool\n read_known_tasks_list (struct ada_tasks_inferior_data *data)\n {\n   const int target_ptr_byte = TYPE_LENGTH (data->known_tasks_element);\n@@ -843,7 +845,7 @@ read_known_tasks_list (struct ada_tasks_inferior_data *data)\n \n   /* Sanity check.  */\n   if (pspace_data->atcb_fieldno.activation_link < 0)\n-    return 0;\n+    return false;\n \n   /* Build a new list by reading the ATCBs.  Read head of the list.  */\n   read_memory (data->known_tasks_addr, known_tasks, target_ptr_byte);\n@@ -864,7 +866,7 @@ read_known_tasks_list (struct ada_tasks_inferior_data *data)\n                                 pspace_data->atcb_fieldno.activation_link));\n     }\n \n-  return 1;\n+  return true;\n }\n \n /* Set all fields of the current inferior ada-tasks data pointed by DATA.\n@@ -962,11 +964,10 @@ ada_tasks_inferior_data_sniffer (struct ada_tasks_inferior_data *data)\n }\n \n /* Read the known tasks from the current inferior's memory, and store it\n-   in the current inferior's data TASK_LIST.\n-   Return non-zero upon success.  */\n+   in the current inferior's data TASK_LIST.  */\n \n-static int\n-read_known_tasks (void)\n+static void\n+read_known_tasks ()\n {\n   struct ada_tasks_inferior_data *data =\n     get_ada_tasks_inferior_data (current_inferior ());\n@@ -983,29 +984,27 @@ read_known_tasks (void)\n   ada_tasks_inferior_data_sniffer (data);\n   gdb_assert (data->known_tasks_kind != ADA_TASKS_UNKNOWN);\n \n+  /* Step 3: Set task_list_valid_p, to avoid re-reading the Known_Tasks\n+     array unless needed.  */\n   switch (data->known_tasks_kind)\n     {\n-      case ADA_TASKS_NOT_FOUND: /* Tasking not in use in inferior.  */\n-        return 0;\n-      case ADA_TASKS_ARRAY:\n-        return read_known_tasks_array (data);\n-      case ADA_TASKS_LIST:\n-        return read_known_tasks_list (data);\n+    case ADA_TASKS_NOT_FOUND: /* Tasking not in use in inferior.  */\n+      break;\n+    case ADA_TASKS_ARRAY:\n+      data->task_list_valid_p = read_known_tasks_array (data);\n+      break;\n+    case ADA_TASKS_LIST:\n+      data->task_list_valid_p = read_known_tasks_list (data);\n+      break;\n     }\n-\n-  /* Step 3: Set task_list_valid_p, to avoid re-reading the Known_Tasks\n-     array unless needed.  Then report a success.  */\n-  data->task_list_valid_p = 1;\n-\n-  return 1;\n }\n \n /* Build the task_list by reading the Known_Tasks array from\n    the inferior, and return the number of tasks in that list\n    (zero means that the program is not using tasking at all).  */\n \n-int\n-ada_build_task_list (void)\n+static int\n+ada_build_task_list ()\n {\n   struct ada_tasks_inferior_data *data;\n \n@@ -1361,7 +1360,7 @@ ada_task_list_changed (struct inferior *inf)\n {\n   struct ada_tasks_inferior_data *data = get_ada_tasks_inferior_data (inf);\n \n-  data->task_list_valid_p = 0;\n+  data->task_list_valid_p = false;\n }\n \n /* Invalidate the per-program-space data.  */\n@@ -1380,7 +1379,7 @@ ada_tasks_invalidate_inferior_data (struct inferior *inf)\n   struct ada_tasks_inferior_data *data = get_ada_tasks_inferior_data (inf);\n \n   data->known_tasks_kind = ADA_TASKS_UNKNOWN;\n-  data->task_list_valid_p = 0;\n+  data->task_list_valid_p = false;\n }\n \n /* The 'normal_stop' observer notification callback.  */"
    },
    {
      "sha": "cb4f26a3472457e04ec1e39989213d02f9ac36a4",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98814c6c111a0681e691a72834c8dcc5b8d1bb3a/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=98814c6c111a0681e691a72834c8dcc5b8d1bb3a",
      "patch": "@@ -374,8 +374,6 @@ ravenscar_add_thread (struct ada_task_info *task)\n void\n ravenscar_thread_target::update_thread_list ()\n {\n-  ada_build_task_list ();\n-\n   /* Do not clear the thread list before adding the Ada task, to keep\n      the thread that the process stratum has included into it\n      (m_base_ptid) and the running thread, that may not have been included"
    }
  ]
}