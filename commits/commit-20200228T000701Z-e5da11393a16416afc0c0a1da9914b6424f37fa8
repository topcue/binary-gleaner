{
  "sha": "e5da11393a16416afc0c0a1da9914b6424f37fa8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTVkYTExMzkzYTE2NDE2YWZjMGMwYTFkYTk5MTRiNjQyNGYzN2ZhOA==",
  "commit": {
    "author": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2020-02-28T00:07:01Z"
    },
    "committer": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2020-02-28T00:07:01Z"
    },
    "message": "gdb: Check for nullptr when computing srcpath\n\nThis fixes a regression caused by commit 0d79cdc494d5:\n\n  $ make check TESTS=\"gdb.dwarf2/dw2-ranges-base.exp\"\n  [...]\n  ERROR: GDB process no longer exists\n\nThis error is caused by an abort during the computation of srcpath\nwhen SYMTAB_DIRNAME (s) == NULL.\n\nComputing srcpath only when SYMTAB_DIRNAME (s) is not NULL fixes this\nerror. Also change the condition for calling debuginfod_source_query\nto include whether srcpath could be computed.\n\ngdb/ChangeLog:\n\n2020-02-27  Aaron Merey  <amerey@redhat.com>\n\n        * source.c (open_source_file): Check for nullptr when computing\n        srcpath.",
    "tree": {
      "sha": "e6d5efb5e3b9b92982b7b15e77bfe36bf8749b95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6d5efb5e3b9b92982b7b15e77bfe36bf8749b95"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5da11393a16416afc0c0a1da9914b6424f37fa8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5da11393a16416afc0c0a1da9914b6424f37fa8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5da11393a16416afc0c0a1da9914b6424f37fa8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5da11393a16416afc0c0a1da9914b6424f37fa8/comments",
  "author": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1f2ad114c9927d5e457d6eb6bb8ed5120b6fec8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1f2ad114c9927d5e457d6eb6bb8ed5120b6fec8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1f2ad114c9927d5e457d6eb6bb8ed5120b6fec8"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "ff2172c28766013c8232629694e105c050824c2a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5da11393a16416afc0c0a1da9914b6424f37fa8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5da11393a16416afc0c0a1da9914b6424f37fa8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e5da11393a16416afc0c0a1da9914b6424f37fa8",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-27  Aaron Merey  <amerey@redhat.com>\n+\n+\t* source.c (open_source_file): Check for nullptr when computing\n+\tsrcpath.\n+\n 2020-02-27  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2/read.c (struct field_info) <nfields>: Now a method, not a"
    },
    {
      "sha": "50de93952bb04a2568830b9224129786b6312695",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5da11393a16416afc0c0a1da9914b6424f37fa8/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5da11393a16416afc0c0a1da9914b6424f37fa8/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=e5da11393a16416afc0c0a1da9914b6424f37fa8",
      "patch": "@@ -1160,7 +1160,7 @@ open_source_file (struct symtab *s)\n \t  std::string srcpath;\n \t  if (IS_ABSOLUTE_PATH (s->filename))\n \t    srcpath = s->filename;\n-\t  else\n+\t  else if (SYMTAB_DIRNAME (s) != nullptr)\n \t    {\n \t      srcpath = SYMTAB_DIRNAME (s);\n \t      srcpath += SLASH_STRING;\n@@ -1170,7 +1170,7 @@ open_source_file (struct symtab *s)\n \t  const struct bfd_build_id *build_id = build_id_bfd_get (ofp->obfd);\n \n \t  /* Query debuginfod for the source file.  */\n-\t  if (build_id != nullptr)\n+\t  if (build_id != nullptr && !srcpath.empty ())\n \t    fd = debuginfod_source_query (build_id->data,\n \t\t\t\t\t  build_id->size,\n \t\t\t\t\t  srcpath.c_str (),"
    }
  ]
}