{
  "sha": "677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc3YmQ0YzY5ZDBlZGE0ZjJhZTYzNWQ3OTNmMjNjMGIxNDEzYTllOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-01-04T01:48:36Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-01-04T01:53:56Z"
    },
    "message": "PR24061, powerpc-ibm-aix-ar sets bogus file permissions when extracting\n\nMode field should be read in octal, all the rest in decimal.  Do so.\n\n\tPR 24061\n\tPR 21786\n\t* coff-rs6000.c (GET_VALUE_IN_FIELD): Add base parameter and\n\tadjust all callers.\n\t(EQ_VALUE_IN_FIELD): Likewise.\n\t* coff64-rs6000.c (GET_VALUE_IN_FIELD): Likewise.",
    "tree": {
      "sha": "71a89df9551df3978e49e34c705a2c011efb0226",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71a89df9551df3978e49e34c705a2c011efb0226"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8261e52d1b8381252ede6754ea6cd1ba18810f1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8261e52d1b8381252ede6754ea6cd1ba18810f1d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8261e52d1b8381252ede6754ea6cd1ba18810f1d"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 53,
    "deletions": 44
  },
  "files": [
    {
      "sha": "fc6782f4414618f9c16b82a8117c90854ab60a14",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
      "patch": "@@ -1,3 +1,12 @@\n+2019-01-04  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24061\n+\tPR 21786\n+\t* coff-rs6000.c (GET_VALUE_IN_FIELD): Add base parameter and\n+\tadjust all callers.\n+\t(EQ_VALUE_IN_FIELD): Likewise.\n+\t* coff64-rs6000.c (GET_VALUE_IN_FIELD): Likewise.\n+\n 2019-01-01  Alan Modra  <amodra@gmail.com>\n \n \tUpdate year range in copyright notice of all files."
    },
    {
      "sha": "85e90a02545a8d2133355edd8a656d7d43da7de8",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 36,
      "deletions": 36,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
      "patch": "@@ -1214,19 +1214,19 @@ _bfd_strntoll (const char * nptr, int base, unsigned int maxlen)\n }\n \n /* Macro to read an ASCII value stored in an archive header field.  */\n-#define GET_VALUE_IN_FIELD(VAR, FIELD)\t\t  \\\n-  do\t\t\t\t\t\t  \\\n-    {\t\t\t\t\t\t  \\\n-      (VAR) = sizeof (VAR) > sizeof (long)\t  \\\n-\t? _bfd_strntoll (FIELD, 10, sizeof FIELD) \\\n-\t: _bfd_strntol (FIELD, 10, sizeof FIELD); \\\n-    }\t\t\t\t\t\t  \\\n+#define GET_VALUE_IN_FIELD(VAR, FIELD, BASE)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      (VAR) = (sizeof (VAR) > sizeof (long)\t\t\t\\\n+\t       ? _bfd_strntoll (FIELD, BASE, sizeof FIELD)\t\\\n+\t       : _bfd_strntol (FIELD, BASE, sizeof FIELD));\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define EQ_VALUE_IN_FIELD(VAR, FIELD)\t\t\t\\\n-  (sizeof (VAR) > sizeof (long)\t\t\t\t\\\n-   ? (VAR) ==_bfd_strntoll (FIELD, 10, sizeof FIELD)\t\\\n-   : (VAR) == _bfd_strntol (FIELD, 10, sizeof FIELD))\n+#define EQ_VALUE_IN_FIELD(VAR, FIELD, BASE)\t\t\t\\\n+  (sizeof (VAR) > sizeof (long)\t\t\t\t\t\\\n+   ? (VAR) == _bfd_strntoll (FIELD, BASE, sizeof FIELD)\t\t\\\n+   : (VAR) == _bfd_strntol (FIELD, BASE, sizeof FIELD))\n \n /* Read in the armap of an XCOFF archive.  */\n \n@@ -1252,7 +1252,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n       /* This is for the old format.  */\n       struct xcoff_ar_hdr hdr;\n \n-      GET_VALUE_IN_FIELD (off, xcoff_ardata (abfd)->symoff);\n+      GET_VALUE_IN_FIELD (off, xcoff_ardata (abfd)->symoff, 10);\n       if (off == 0)\n \t{\n \t  bfd_has_map (abfd) = FALSE;\n@@ -1268,12 +1268,12 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \treturn FALSE;\n \n       /* Skip the name (normally empty).  */\n-      GET_VALUE_IN_FIELD (namlen, hdr.namlen);\n+      GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n       off = ((namlen + 1) & ~ (size_t) 1) + SXCOFFARFMAG;\n       if (bfd_seek (abfd, off, SEEK_CUR) != 0)\n \treturn FALSE;\n \n-      GET_VALUE_IN_FIELD (sz, hdr.size);\n+      GET_VALUE_IN_FIELD (sz, hdr.size, 10);\n \n       /* Read in the entire symbol table.  */\n       contents = (bfd_byte *) bfd_alloc (abfd, sz);\n@@ -1307,7 +1307,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n       /* This is for the new format.  */\n       struct xcoff_ar_hdr_big hdr;\n \n-      GET_VALUE_IN_FIELD (off, xcoff_ardata_big (abfd)->symoff);\n+      GET_VALUE_IN_FIELD (off, xcoff_ardata_big (abfd)->symoff, 10);\n       if (off == 0)\n \t{\n \t  bfd_has_map (abfd) = FALSE;\n@@ -1323,12 +1323,12 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \treturn FALSE;\n \n       /* Skip the name (normally empty).  */\n-      GET_VALUE_IN_FIELD (namlen, hdr.namlen);\n+      GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n       off = ((namlen + 1) & ~ (size_t) 1) + SXCOFFARFMAG;\n       if (bfd_seek (abfd, off, SEEK_CUR) != 0)\n \treturn FALSE;\n \n-      GET_VALUE_IN_FIELD (sz, hdr.size);\n+      GET_VALUE_IN_FIELD (sz, hdr.size, 10);\n \n       /* Read in the entire symbol table.  */\n       contents = (bfd_byte *) bfd_alloc (abfd, sz);\n@@ -1434,7 +1434,7 @@ _bfd_xcoff_archive_p (bfd *abfd)\n \t}\n \n       GET_VALUE_IN_FIELD (bfd_ardata (abfd)->first_file_filepos,\n-\t\t\t  hdr.firstmemoff);\n+\t\t\t  hdr.firstmemoff, 10);\n \n       amt = SIZEOF_AR_FILE_HDR;\n       bfd_ardata (abfd)->tdata = bfd_zalloc (abfd, amt);\n@@ -1509,7 +1509,7 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n \t  return NULL;\n \t}\n \n-      GET_VALUE_IN_FIELD (namlen, hdr.namlen);\n+      GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n       amt = SIZEOF_AR_HDR + namlen + 1;\n       hdrp = (struct xcoff_ar_hdr *) bfd_alloc (abfd, amt);\n       if (hdrp == NULL)\n@@ -1526,7 +1526,7 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n       ((char *) hdrp)[SIZEOF_AR_HDR + namlen] = '\\0';\n \n       ret->arch_header = (char *) hdrp;\n-      GET_VALUE_IN_FIELD (ret->parsed_size, hdr.size);\n+      GET_VALUE_IN_FIELD (ret->parsed_size, hdr.size, 10);\n       ret->filename = (char *) hdrp + SIZEOF_AR_HDR;\n     }\n   else\n@@ -1541,7 +1541,7 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n \t  return NULL;\n \t}\n \n-      GET_VALUE_IN_FIELD (namlen, hdr.namlen);\n+      GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n       amt = SIZEOF_AR_HDR_BIG + namlen + 1;\n       hdrp = (struct xcoff_ar_hdr_big *) bfd_alloc (abfd, amt);\n       if (hdrp == NULL)\n@@ -1558,7 +1558,7 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n       ((char *) hdrp)[SIZEOF_AR_HDR_BIG + namlen] = '\\0';\n \n       ret->arch_header = (char *) hdrp;\n-      GET_VALUE_IN_FIELD (ret->parsed_size, hdr.size);\n+      GET_VALUE_IN_FIELD (ret->parsed_size, hdr.size, 10);\n       ret->filename = (char *) hdrp + SIZEOF_AR_HDR_BIG;\n     }\n \n@@ -1587,11 +1587,11 @@ _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)\n       if (last_file == NULL)\n \tfilestart = bfd_ardata (archive)->first_file_filepos;\n       else\n-\tGET_VALUE_IN_FIELD (filestart, arch_xhdr (last_file)->nextoff);\n+\tGET_VALUE_IN_FIELD (filestart, arch_xhdr (last_file)->nextoff, 10);\n \n       if (filestart == 0\n-\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata (archive)->memoff)\n-\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata (archive)->symoff))\n+\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata (archive)->memoff, 10)\n+\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata (archive)->symoff, 10))\n \t{\n \t  bfd_set_error (bfd_error_no_more_archived_files);\n \t  return NULL;\n@@ -1602,11 +1602,11 @@ _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)\n       if (last_file == NULL)\n \tfilestart = bfd_ardata (archive)->first_file_filepos;\n       else\n-\tGET_VALUE_IN_FIELD (filestart, arch_xhdr_big (last_file)->nextoff);\n+\tGET_VALUE_IN_FIELD (filestart, arch_xhdr_big (last_file)->nextoff, 10);\n \n       if (filestart == 0\n-\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata_big (archive)->memoff)\n-\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata_big (archive)->symoff))\n+\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata_big (archive)->memoff, 10)\n+\t  || EQ_VALUE_IN_FIELD (filestart, xcoff_ardata_big (archive)->symoff, 10))\n \t{\n \t  bfd_set_error (bfd_error_no_more_archived_files);\n \t  return NULL;\n@@ -1631,20 +1631,20 @@ _bfd_xcoff_stat_arch_elt (bfd *abfd, struct stat *s)\n     {\n       struct xcoff_ar_hdr *hdrp = arch_xhdr (abfd);\n \n-      GET_VALUE_IN_FIELD (s->st_mtime, hdrp->date);\n-      GET_VALUE_IN_FIELD (s->st_uid, hdrp->uid);\n-      GET_VALUE_IN_FIELD (s->st_gid, hdrp->gid);\n-      GET_VALUE_IN_FIELD (s->st_mode, hdrp->mode);\n+      GET_VALUE_IN_FIELD (s->st_mtime, hdrp->date, 10);\n+      GET_VALUE_IN_FIELD (s->st_uid, hdrp->uid, 10);\n+      GET_VALUE_IN_FIELD (s->st_gid, hdrp->gid, 10);\n+      GET_VALUE_IN_FIELD (s->st_mode, hdrp->mode, 8);\n       s->st_size = arch_eltdata (abfd)->parsed_size;\n     }\n   else\n     {\n       struct xcoff_ar_hdr_big *hdrp = arch_xhdr_big (abfd);\n \n-      GET_VALUE_IN_FIELD (s->st_mtime, hdrp->date);\n-      GET_VALUE_IN_FIELD (s->st_uid, hdrp->uid);\n-      GET_VALUE_IN_FIELD (s->st_gid, hdrp->gid);\n-      GET_VALUE_IN_FIELD (s->st_mode, hdrp->mode);\n+      GET_VALUE_IN_FIELD (s->st_mtime, hdrp->date, 10);\n+      GET_VALUE_IN_FIELD (s->st_uid, hdrp->uid, 10);\n+      GET_VALUE_IN_FIELD (s->st_gid, hdrp->gid, 10);\n+      GET_VALUE_IN_FIELD (s->st_mode, hdrp->mode, 8);\n       s->st_size = arch_eltdata (abfd)->parsed_size;\n     }\n "
    },
    {
      "sha": "6f0e358f4acc6d3277257f20f22b051c10bd135b",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/677bd4c69d0eda4f2ae635d793f23c0b1413a9e9/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=677bd4c69d0eda4f2ae635d793f23c0b1413a9e9",
      "patch": "@@ -1878,13 +1878,13 @@ _bfd_strntoll (const char * nptr, int base, unsigned int maxlen)\n }\n \n /* Macro to read an ASCII value stored in an archive header field.  */\n-#define GET_VALUE_IN_FIELD(VAR, FIELD)\t\t  \\\n-  do\t\t\t\t\t\t  \\\n-    {\t\t\t\t\t\t  \\\n-      (VAR) = sizeof (VAR) > sizeof (long)\t  \\\n-\t? _bfd_strntoll (FIELD, 10, sizeof FIELD) \\\n-\t: _bfd_strntol (FIELD, 10, sizeof FIELD); \\\n-    }\t\t\t\t\t\t  \\\n+#define GET_VALUE_IN_FIELD(VAR, FIELD, BASE)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      (VAR) = (sizeof (VAR) > sizeof (long)\t\t\t\\\n+\t       ? _bfd_strntoll (FIELD, BASE, sizeof FIELD)\t\\\n+\t       : _bfd_strntol (FIELD, BASE, sizeof FIELD));\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n /* Read in the armap of an XCOFF archive.  */\n@@ -1927,7 +1927,7 @@ xcoff64_slurp_armap (bfd *abfd)\n     return FALSE;\n \n   /* Skip the name (normally empty).  */\n-  GET_VALUE_IN_FIELD (namlen, hdr.namlen);\n+  GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n   pos = ((namlen + 1) & ~(size_t) 1) + SXCOFFARFMAG;\n   if (bfd_seek (abfd, pos, SEEK_CUR) != 0)\n     return FALSE;"
    }
  ]
}