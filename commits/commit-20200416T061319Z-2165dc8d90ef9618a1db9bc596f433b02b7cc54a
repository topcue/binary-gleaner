{
  "sha": "2165dc8d90ef9618a1db9bc596f433b02b7cc54a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjE2NWRjOGQ5MGVmOTYxOGExZGI5YmM1OTZmNDMzYjAyYjdjYzU0YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-04-16T03:15:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-04-16T06:13:19Z"
    },
    "message": "PowerPC64 GOT reloc reserving PLT entry for ifunc\n\nI can't see any reason why ELFv2 should create a PLT entry for ifuncs\nreferenced by GOT relocs as long as the GOT entry remains.  The GOT\nentry ought to be resolved by ld.so to the value returned by the ifunc\nresolver, or if there is global entry stub created for some other\nreason, by the linker to the stub address.\n\n\t* elf64-ppc.c (ppc64_elf_check_relocs): Don't create plt entries\n\tfor GOT relocs against ifuncs.",
    "tree": {
      "sha": "0f4bd8f28e59a30db58e017e7faf69b68b2c6df9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0f4bd8f28e59a30db58e017e7faf69b68b2c6df9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2165dc8d90ef9618a1db9bc596f433b02b7cc54a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2165dc8d90ef9618a1db9bc596f433b02b7cc54a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2165dc8d90ef9618a1db9bc596f433b02b7cc54a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2165dc8d90ef9618a1db9bc596f433b02b7cc54a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "06507dab6172582d3924a3d7dc92a9e7d4ab60ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06507dab6172582d3924a3d7dc92a9e7d4ab60ff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/06507dab6172582d3924a3d7dc92a9e7d4ab60ff"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 0,
    "deletions": 8
  },
  "files": [
    {
      "sha": "63de3aba594fa4de8d556342505cb38321e1eaca",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2165dc8d90ef9618a1db9bc596f433b02b7cc54a/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2165dc8d90ef9618a1db9bc596f433b02b7cc54a/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=2165dc8d90ef9618a1db9bc596f433b02b7cc54a",
      "patch": "@@ -4774,14 +4774,6 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n \t\t\t\t\trel->r_addend, tls_type))\n \t      return FALSE;\n-\n-\t  /* We may also need a plt entry if the symbol turns out to be\n-\t     an ifunc.  */\n-\t  if (h != NULL && !bfd_link_pic (info) && abiversion (abfd) != 1)\n-\t    {\n-\t      if (!update_plt_info (abfd, &h->plt.plist, rel->r_addend))\n-\t\treturn FALSE;\n-\t    }\n \t  break;\n \n \tcase R_PPC64_PLT16_HA:"
    }
  ]
}