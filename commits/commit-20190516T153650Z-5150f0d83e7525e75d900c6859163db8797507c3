{
  "sha": "5150f0d83e7525e75d900c6859163db8797507c3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTE1MGYwZDgzZTc1MjVlNzVkOTAwYzY4NTkxNjNkYjg3OTc1MDdjMw==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T11:17:44Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:50Z"
    },
    "message": "[PATCH 34/57][Arm][GAS] Add support for MVE instructions: vshl and vqshl\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n\t(parse_operands): Handle new operand.\n\t(do_neon_shl_imm): Accept MVE variants.\n\t(do_neon_shl): Likewise.\n\t(do_neon_qshl_imm): Likewise.\n\t(do_neon_qshl): Likewise.\n\t(do_neon_qshlu_imm): Likewise.\n\t(insns): Likewise.\n\t* testsuite/gas/arm/mve-vqshl-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqshl-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqshl-bad.s: New test.\n\t* testsuite/gas/arm/mve-vshl-bad.d: New test.\n\t* testsuite/gas/arm/mve-vshl-bad.l: New test.\n\t* testsuite/gas/arm/mve-vshl-bad.s: New test.",
    "tree": {
      "sha": "e1585b2072af9f3e65d0be0e713a7b59f634b660",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1585b2072af9f3e65d0be0e713a7b59f634b660"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5150f0d83e7525e75d900c6859163db8797507c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5150f0d83e7525e75d900c6859163db8797507c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5150f0d83e7525e75d900c6859163db8797507c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5150f0d83e7525e75d900c6859163db8797507c3/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4401c2414dffebc5c5e4914fb611d1ecc738e3d5"
    }
  ],
  "stats": {
    "total": 407,
    "additions": 364,
    "deletions": 43
  },
  "files": [
    {
      "sha": "d5b70c080e1137536a5d065558e8c5aecdb01306",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -1,3 +1,20 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n+\t(parse_operands): Handle new operand.\n+\t(do_neon_shl_imm): Accept MVE variants.\n+\t(do_neon_shl): Likewise.\n+\t(do_neon_qshl_imm): Likewise.\n+\t(do_neon_qshl): Likewise.\n+\t(do_neon_qshlu_imm): Likewise.\n+\t(insns): Likewise.\n+\t* testsuite/gas/arm/mve-vqshl-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqshl-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqshl-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vshl-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vshl-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vshl-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_neon_sli): Accept MVE variants."
    },
    {
      "sha": "e2786f583fc12c6faceb06993bc8e9b189aea2b4",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 154,
      "deletions": 43,
      "changes": 197,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -6965,6 +6965,8 @@ enum operand_parse_code\n   /* Neon D, Q or MVE vector register, or big immediate for logic and VMVN.  */\n   OP_RNDQMQ_Ibig,\n   OP_RNDQ_I63b, /* Neon D or Q reg, or immediate for shift.  */\n+  OP_RNDQMQ_I63b_RR, /* Neon D or Q reg, immediate for shift, MVE vector or\n+\t\t\tARM register.  */\n   OP_RIWR_I32z, /* iWMMXt wR register, or immediate 0 .. 32 for iWMMXt2.  */\n   OP_VLDR,\t/* VLDR operand.  */\n \n@@ -7421,6 +7423,13 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  }\n \t  break;\n \n+\tcase OP_RNDQMQ_I63b_RR:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rndq_i63b_rr);\n+\t  break;\n+\ttry_rndq_i63b_rr:\n+\t  po_reg_or_goto (REG_TYPE_RN, try_rndq_i63b);\n+\t  break;\n+\ttry_rndq_i63b:\n \tcase OP_RNDQ_I63b:\n \t  {\n \t    po_reg_or_goto (REG_TYPE_NDQ, try_shimm);\n@@ -16378,12 +16387,25 @@ neon_imm_shift (int write_ubit, int uval, int isquad, struct neon_type_el et,\n }\n \n static void\n-do_neon_shl_imm (void)\n+do_neon_shl (void)\n {\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n   if (!inst.operands[2].isreg)\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-      struct neon_type_el et = neon_check_type (2, rs, N_EQK, N_KEY | N_I_ALL);\n+      enum neon_shape rs;\n+      struct neon_type_el et;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  rs = neon_select_shape (NS_QQI, NS_NULL);\n+\t  et = neon_check_type (2, rs, N_EQK, N_KEY | N_I_MVE);\n+\t}\n+      else\n+\t{\n+\t  rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+\t  et = neon_check_type (2, rs, N_EQK, N_KEY | N_I_ALL);\n+\t}\n       int imm = inst.operands[2].imm;\n \n       constraint (imm < 0 || (unsigned)imm >= et.size,\n@@ -16393,33 +16415,77 @@ do_neon_shl_imm (void)\n     }\n   else\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-      struct neon_type_el et = neon_check_type (3, rs,\n-\tN_EQK, N_SU_ALL | N_KEY, N_EQK | N_SGN);\n-      unsigned int tmp;\n-\n-      /* VSHL/VQSHL 3-register variants have syntax such as:\n-\t   vshl.xx Dd, Dm, Dn\n-\t whereas other 3-register operations encoded by neon_three_same have\n-\t syntax like:\n-\t   vadd.xx Dd, Dn, Dm\n-\t (i.e. with Dn & Dm reversed). Swap operands[1].reg and operands[2].reg\n-\t here.  */\n-      tmp = inst.operands[2].reg;\n-      inst.operands[2].reg = inst.operands[1].reg;\n-      inst.operands[1].reg = tmp;\n-      NEON_ENCODE (INTEGER, inst);\n-      neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+      enum neon_shape rs;\n+      struct neon_type_el et;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  rs = neon_select_shape (NS_QQQ, NS_QQR, NS_NULL);\n+\t  et = neon_check_type (3, rs, N_EQK, N_SU_MVE | N_KEY, N_EQK | N_EQK);\n+\t}\n+      else\n+\t{\n+\t  rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+\t  et = neon_check_type (3, rs, N_EQK, N_SU_ALL | N_KEY, N_EQK | N_SGN);\n+\t}\n+\n+\n+      if (rs == NS_QQR)\n+\t{\n+\t  constraint (inst.operands[0].reg != inst.operands[1].reg,\n+\t\t       _(\"invalid instruction shape\"));\n+\t  if (inst.operands[2].reg == REG_SP)\n+\t    as_tsktsk (MVE_BAD_SP);\n+\t  else if (inst.operands[2].reg == REG_PC)\n+\t    as_tsktsk (MVE_BAD_PC);\n+\n+\t  inst.instruction = 0xee311e60;\n+\t  inst.instruction |= (et.type == NT_unsigned) << 28;\n+\t  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+\t  inst.instruction |= neon_logbits (et.size) << 18;\n+\t  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+\t  inst.instruction |= inst.operands[2].reg;\n+\t  inst.is_neon = 1;\n+\t}\n+      else\n+\t{\n+\t  unsigned int tmp;\n+\n+\t  /* VSHL/VQSHL 3-register variants have syntax such as:\n+\t       vshl.xx Dd, Dm, Dn\n+\t     whereas other 3-register operations encoded by neon_three_same have\n+\t     syntax like:\n+\t       vadd.xx Dd, Dn, Dm\n+\t     (i.e. with Dn & Dm reversed). Swap operands[1].reg and\n+\t     operands[2].reg here.  */\n+\t  tmp = inst.operands[2].reg;\n+\t  inst.operands[2].reg = inst.operands[1].reg;\n+\t  inst.operands[1].reg = tmp;\n+\t  NEON_ENCODE (INTEGER, inst);\n+\t  neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+\t}\n     }\n }\n \n static void\n-do_neon_qshl_imm (void)\n+do_neon_qshl (void)\n {\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n   if (!inst.operands[2].isreg)\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-      struct neon_type_el et = neon_check_type (2, rs, N_EQK, N_SU_ALL | N_KEY);\n+      enum neon_shape rs;\n+      struct neon_type_el et;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  rs = neon_select_shape (NS_QQI, NS_NULL);\n+\t  et = neon_check_type (2, rs, N_EQK, N_KEY | N_SU_MVE);\n+\t}\n+      else\n+\t{\n+\t  rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+\t  et = neon_check_type (2, rs, N_EQK, N_SU_ALL | N_KEY);\n+\t}\n       int imm = inst.operands[2].imm;\n \n       constraint (imm < 0 || (unsigned)imm >= et.size,\n@@ -16429,17 +16495,48 @@ do_neon_qshl_imm (void)\n     }\n   else\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-      struct neon_type_el et = neon_check_type (3, rs,\n-\tN_EQK, N_SU_ALL | N_KEY, N_EQK | N_SGN);\n-      unsigned int tmp;\n+      enum neon_shape rs;\n+      struct neon_type_el et;\n \n-      /* See note in do_neon_shl_imm.  */\n-      tmp = inst.operands[2].reg;\n-      inst.operands[2].reg = inst.operands[1].reg;\n-      inst.operands[1].reg = tmp;\n-      NEON_ENCODE (INTEGER, inst);\n-      neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  rs = neon_select_shape (NS_QQQ, NS_QQR, NS_NULL);\n+\t  et = neon_check_type (3, rs, N_EQK, N_SU_MVE | N_KEY, N_EQK | N_EQK);\n+\t}\n+      else\n+\t{\n+\t  rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+\t  et = neon_check_type (3, rs, N_EQK, N_SU_ALL | N_KEY, N_EQK | N_SGN);\n+\t}\n+\n+      if (rs == NS_QQR)\n+\t{\n+\t  constraint (inst.operands[0].reg != inst.operands[1].reg,\n+\t\t       _(\"invalid instruction shape\"));\n+\t  if (inst.operands[2].reg == REG_SP)\n+\t    as_tsktsk (MVE_BAD_SP);\n+\t  else if (inst.operands[2].reg == REG_PC)\n+\t    as_tsktsk (MVE_BAD_PC);\n+\n+\t  inst.instruction = 0xee311ee0;\n+\t  inst.instruction |= (et.type == NT_unsigned) << 28;\n+\t  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+\t  inst.instruction |= neon_logbits (et.size) << 18;\n+\t  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+\t  inst.instruction |= inst.operands[2].reg;\n+\t  inst.is_neon = 1;\n+\t}\n+      else\n+\t{\n+\t  unsigned int tmp;\n+\n+\t  /* See note in do_neon_shl.  */\n+\t  tmp = inst.operands[2].reg;\n+\t  inst.operands[2].reg = inst.operands[1].reg;\n+\t  inst.operands[1].reg = tmp;\n+\t  NEON_ENCODE (INTEGER, inst);\n+\t  neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+\t}\n     }\n }\n \n@@ -17924,9 +18021,23 @@ do_neon_sri (void)\n static void\n do_neon_qshlu_imm (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-  struct neon_type_el et = neon_check_type (2, rs,\n-    N_EQK | N_UNS, N_S8 | N_S16 | N_S32 | N_S64 | N_KEY);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+    return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_S8 | N_S16 | N_S32 | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK | N_UNS,\n+\t\t\t    N_S8 | N_S16 | N_S32 | N_S64 | N_KEY);\n+    }\n+\n   int imm = inst.operands[2].imm;\n   constraint (imm < 0 || (unsigned)imm >= et.size,\n \t      _(\"immediate out of range for shift\"));\n@@ -24301,12 +24412,10 @@ static const struct asm_opcode insns[] =\n  NUF(vrshlq,    0000500, 3, (RNQ,  oRNQ,  RNQ),  neon_rshl),\n  NUF(vqrshlq,   0000510, 3, (RNQ,  oRNQ,  RNQ),  neon_rshl),\n   /* If not immediate, fall back to neon_dyadic_i64_su.\n-     shl_imm should accept I8 I16 I32 I64,\n-     qshl_imm should accept S8 S16 S32 S64 U8 U16 U32 U64.  */\n- nUF(vshl,      _vshl,    3, (RNDQ, oRNDQ, RNDQ_I63b), neon_shl_imm),\n- nUF(vshlq,     _vshl,    3, (RNQ,  oRNQ,  RNDQ_I63b), neon_shl_imm),\n- nUF(vqshl,     _vqshl,   3, (RNDQ, oRNDQ, RNDQ_I63b), neon_qshl_imm),\n- nUF(vqshlq,    _vqshl,   3, (RNQ,  oRNQ,  RNDQ_I63b), neon_qshl_imm),\n+     shl should accept I8 I16 I32 I64,\n+     qshl should accept S8 S16 S32 S64 U8 U16 U32 U64.  */\n+ nUF(vshlq,     _vshl,    3, (RNQ,  oRNQ,  RNDQ_I63b), neon_shl),\n+ nUF(vqshlq,    _vqshl,   3, (RNQ,  oRNQ,  RNDQ_I63b), neon_qshl),\n   /* Logic ops, types optional & ignored.  */\n  nUF(vandq,     _vand,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n  nUF(vbicq,     _vbic,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n@@ -24389,7 +24498,6 @@ static const struct asm_opcode insns[] =\n  NUF(vsliq,     1800510, 3, (RNQ,  oRNQ,  I63), neon_sli),\n  NUF(vsriq,     1800410, 3, (RNQ,  oRNQ,  I64), neon_sri),\n   /* QSHL{U} immediate accepts S8 S16 S32 S64 U8 U16 U32 U64.  */\n- NUF(vqshlu,    1800610, 3, (RNDQ, oRNDQ, I63), neon_qshlu_imm),\n  NUF(vqshluq,   1800610, 3, (RNQ,  oRNQ,  I63), neon_qshlu_imm),\n   /* Right shift immediate, saturating & narrowing, with rounding variants.\n      Types accepted S16 S32 S64 U16 U32 U64.  */\n@@ -25165,6 +25273,9 @@ static const struct asm_opcode insns[] =\n  MNUF(vrev64,    1b00000,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n  MNUF(vrev32,    1b00080,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n  MNUF(vrev16,    1b00100,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n+ mnUF(vshl,\t _vshl,    3, (RNDQMQ, oRNDQMQ, RNDQMQ_I63b_RR), neon_shl),\n+ mnUF(vqshl,     _vqshl,   3, (RNDQMQ, oRNDQMQ, RNDQMQ_I63b_RR), neon_qshl),\n+ MNUF(vqshlu,    1800610,  3, (RNDQMQ, oRNDQMQ, I63),\t\t neon_qshlu_imm),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "5f6ba29601bab791a38cef8ad1e6fbf015674797",
      "filename": "gas/testsuite/gas/arm/mve-vqshl-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqshl-bad.d?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQSHL instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vqshl-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "9331fe6006e993da9bdef083218c0fd7e585800b",
      "filename": "gas/testsuite/gas/arm/mve-vqshl-bad.l",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqshl-bad.l?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,45 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqshl.s64 q0,q0,#0'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqshl.i32 q0,q0,#0'\n+[^:]*:12: Error: immediate out of range for shift -- `vqshl.s8 q0,q1,#8'\n+[^:]*:13: Error: immediate out of range for shift -- `vqshl.u16 q0,q1,#16'\n+[^:]*:14: Error: immediate out of range for shift -- `vqshl.s32 q0,q1,#32'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqshl.s64 q0,r1'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vqshl.i16 q0,r1'\n+[^:]*:17: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:18: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:19: Error: bad type in SIMD instruction -- `vqshl.s64 q0,q1,q2'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vqshl.i32 q0,q1,q2'\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Error: syntax error -- `vqshleq.s16 q0,q1,#0'\n+[^:]*:26: Error: syntax error -- `vqshleq.s16 q0,q1,#0'\n+[^:]*:28: Error: syntax error -- `vqshleq.s16 q0,q1,#0'\n+[^:]*:29: Error: vector predicated instruction should be in VPT/VPST block -- `vqshlt.s16 q0,q1,#0'\n+[^:]*:31: Error: instruction missing MVE vector predication code -- `vqshl.s16 q0,q1,#0'\n+[^:]*:33: Error: syntax error -- `vqshleq.s16 q0,r1'\n+[^:]*:34: Error: syntax error -- `vqshleq.s16 q0,r1'\n+[^:]*:36: Error: syntax error -- `vqshleq.s16 q0,r1'\n+[^:]*:37: Error: vector predicated instruction should be in VPT/VPST block -- `vqshlt.s16 q0,r1'\n+[^:]*:39: Error: instruction missing MVE vector predication code -- `vqshl.s16 q0,r1'\n+[^:]*:41: Error: syntax error -- `vqshleq.s16 q0,q1,q2'\n+[^:]*:42: Error: syntax error -- `vqshleq.s16 q0,q1,q2'\n+[^:]*:44: Error: syntax error -- `vqshleq.s16 q0,q1,q2'\n+[^:]*:45: Error: vector predicated instruction should be in VPT/VPST block -- `vqshlt.s16 q0,q1,q2'\n+[^:]*:47: Error: instruction missing MVE vector predication code -- `vqshl.s16 q0,q1,q2'"
    },
    {
      "sha": "e4a86578feb23f1b8d0a3099f4c2d8fa6ae4d494",
      "filename": "gas/testsuite/gas/arm/mve-vqshl-bad.s",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vqshl-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqshl-bad.s?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,48 @@\n+.macro cond type, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vqshl.\\type q0, q0, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqshl.s64 q0, q0, #0\n+vqshl.i32 q0, q0, #0\n+vqshl.s8 q0, q1, #8\n+vqshl.u16 q0, q1, #16\n+vqshl.s32 q0, q1, #32\n+vqshl.s64 q0, r1\n+vqshl.i16 q0, r1\n+vqshl.u16 q0, sp\n+vqshl.s32 q0, pc\n+vqshl.s64 q0, q1, q2\n+vqshl.i32 q0, q1, q2\n+cond u32, #0\n+cond s8, r1\n+cond s16, q2\n+it eq\n+vqshleq.s16 q0, q1, #0\n+vqshleq.s16 q0, q1, #0\n+vpst\n+vqshleq.s16 q0, q1, #0\n+vqshlt.s16 q0, q1, #0\n+vpst\n+vqshl.s16 q0, q1, #0\n+it eq\n+vqshleq.s16 q0, r1\n+vqshleq.s16 q0, r1\n+vpst\n+vqshleq.s16 q0, r1\n+vqshlt.s16 q0, r1\n+vpst\n+vqshl.s16 q0, r1\n+it eq\n+vqshleq.s16 q0, q1, q2\n+vqshleq.s16 q0, q1, q2\n+vpst\n+vqshleq.s16 q0, q1, q2\n+vqshlt.s16 q0, q1, q2\n+vpst\n+vqshl.s16 q0, q1, q2\n+"
    },
    {
      "sha": "04d4a5dd587b565296d7296022243f77ae7d5249",
      "filename": "gas/testsuite/gas/arm/mve-vshl-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshl-bad.d?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VSHL instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vshl-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "d3e4fc6237284fe4ae61aa1a26026762a1b683f2",
      "filename": "gas/testsuite/gas/arm/mve-vshl-bad.l",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshl-bad.l?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,44 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vshl.i64 q0,q0,#0'\n+[^:]*:11: Error: immediate out of range for shift -- `vshl.i8 q0,q1,#8'\n+[^:]*:12: Error: immediate out of range for shift -- `vshl.i16 q0,q1,#16'\n+[^:]*:13: Error: immediate out of range for shift -- `vshl.i32 q0,q1,#32'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vshl.s64 q0,r1'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vshl.i16 q0,r1'\n+[^:]*:16: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:17: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:18: Error: bad type in SIMD instruction -- `vshl.s64 q0,q1,q2'\n+[^:]*:19: Error: bad type in SIMD instruction -- `vshl.i32 q0,q1,q2'\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Error: syntax error -- `vshleq.i16 q0,q1,#0'\n+[^:]*:25: Error: syntax error -- `vshleq.i16 q0,q1,#0'\n+[^:]*:27: Error: syntax error -- `vshleq.i16 q0,q1,#0'\n+[^:]*:28: Error: vector predicated instruction should be in VPT/VPST block -- `vshlt.i16 q0,q1,#0'\n+[^:]*:30: Error: instruction missing MVE vector predication code -- `vshl.i16 q0,q1,#0'\n+[^:]*:32: Error: syntax error -- `vshleq.s16 q0,r1'\n+[^:]*:33: Error: syntax error -- `vshleq.s16 q0,r1'\n+[^:]*:35: Error: syntax error -- `vshleq.s16 q0,r1'\n+[^:]*:36: Error: vector predicated instruction should be in VPT/VPST block -- `vshlt.s16 q0,r1'\n+[^:]*:38: Error: instruction missing MVE vector predication code -- `vshl.s16 q0,r1'\n+[^:]*:40: Error: syntax error -- `vshleq.s16 q0,q1,q2'\n+[^:]*:41: Error: syntax error -- `vshleq.s16 q0,q1,q2'\n+[^:]*:43: Error: syntax error -- `vshleq.s16 q0,q1,q2'\n+[^:]*:44: Error: vector predicated instruction should be in VPT/VPST block -- `vshlt.s16 q0,q1,q2'\n+[^:]*:46: Error: instruction missing MVE vector predication code -- `vshl.s16 q0,q1,q2'"
    },
    {
      "sha": "70a3f5918161843f05b715fc81acb73319b4d5b6",
      "filename": "gas/testsuite/gas/arm/mve-vshl-bad.s",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5150f0d83e7525e75d900c6859163db8797507c3/gas/testsuite/gas/arm/mve-vshl-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshl-bad.s?ref=5150f0d83e7525e75d900c6859163db8797507c3",
      "patch": "@@ -0,0 +1,46 @@\n+.macro cond type, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vshl.\\type q0, q0, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vshl.i64 q0, q0, #0\n+vshl.i8 q0, q1, #8\n+vshl.i16 q0, q1, #16\n+vshl.i32 q0, q1, #32\n+vshl.s64 q0, r1\n+vshl.i16 q0, r1\n+vshl.u16 q0, sp\n+vshl.s32 q0, pc\n+vshl.s64 q0, q1, q2\n+vshl.i32 q0, q1, q2\n+cond i32, #0\n+cond s8, r1\n+cond s16, q2\n+it eq\n+vshleq.i16 q0, q1, #0\n+vshleq.i16 q0, q1, #0\n+vpst\n+vshleq.i16 q0, q1, #0\n+vshlt.i16 q0, q1, #0\n+vpst\n+vshl.i16 q0, q1, #0\n+it eq\n+vshleq.s16 q0, r1\n+vshleq.s16 q0, r1\n+vpst\n+vshleq.s16 q0, r1\n+vshlt.s16 q0, r1\n+vpst\n+vshl.s16 q0, r1\n+it eq\n+vshleq.s16 q0, q1, q2\n+vshleq.s16 q0, q1, q2\n+vpst\n+vshleq.s16 q0, q1, q2\n+vshlt.s16 q0, q1, q2\n+vpst\n+vshl.s16 q0, q1, q2"
    }
  ]
}