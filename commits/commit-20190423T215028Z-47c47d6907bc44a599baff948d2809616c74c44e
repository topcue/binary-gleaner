{
  "sha": "47c47d6907bc44a599baff948d2809616c74c44e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDdjNDdkNjkwN2JjNDRhNTk5YmFmZjk0OGQyODA5NjE2Yzc0YzQ0ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T20:12:28Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:28Z"
    },
    "message": "gdb/rx: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* rx-tdep.c (rx_unwind_pc): Delete.\n\t(rx_unwind_sp): Delete.\n\t(rx_dummy_id): Delete.\n\t(rx_gdbarch_init): Don't register deleted functions with\n\tgdbarch.  Update comment.",
    "tree": {
      "sha": "2a2000ccbe03a238b65cbb035b8d92d449a37e88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a2000ccbe03a238b65cbb035b8d92d449a37e88"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/47c47d6907bc44a599baff948d2809616c74c44e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47c47d6907bc44a599baff948d2809616c74c44e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/47c47d6907bc44a599baff948d2809616c74c44e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47c47d6907bc44a599baff948d2809616c74c44e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "833a4480dd7cadfd645d7b141168a0e22dc50665",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/833a4480dd7cadfd645d7b141168a0e22dc50665",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/833a4480dd7cadfd645d7b141168a0e22dc50665"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 10,
    "deletions": 36
  },
  "files": [
    {
      "sha": "66193f0fa40db186ff44dbca5b09d91fe20fcf8a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/47c47d6907bc44a599baff948d2809616c74c44e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/47c47d6907bc44a599baff948d2809616c74c44e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=47c47d6907bc44a599baff948d2809616c74c44e",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* rx-tdep.c (rx_unwind_pc): Delete.\n+\t(rx_unwind_sp): Delete.\n+\t(rx_dummy_id): Delete.\n+\t(rx_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.  Update comment.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* rs6000-tdep.c (rs6000_unwind_pc): Delete."
    },
    {
      "sha": "4cbf919db9633ece74c6a7af8d0447ad2016e7b3",
      "filename": "gdb/rx-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 36,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/47c47d6907bc44a599baff948d2809616c74c44e/gdb/rx-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/47c47d6907bc44a599baff948d2809616c74c44e/gdb/rx-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rx-tdep.c?ref=47c47d6907bc44a599baff948d2809616c74c44e",
      "patch": "@@ -751,35 +751,6 @@ static const struct frame_unwind rx_exception_unwind = {\n   rx_exception_sniffer\n };\n \n-/* Implement the \"unwind_pc\" gdbarch method.  */\n-static CORE_ADDR\n-rx_unwind_pc (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  ULONGEST pc;\n-\n-  pc = frame_unwind_register_unsigned (this_frame, RX_PC_REGNUM);\n-  return pc;\n-}\n-\n-/* Implement the \"unwind_sp\" gdbarch method.  */\n-static CORE_ADDR\n-rx_unwind_sp (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  ULONGEST sp;\n-\n-  sp = frame_unwind_register_unsigned (this_frame, RX_SP_REGNUM);\n-  return sp;\n-}\n-\n-/* Implement the \"dummy_id\" gdbarch method.  */\n-static struct frame_id\n-rx_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  return\n-    frame_id_build (get_frame_register_unsigned (this_frame, RX_SP_REGNUM),\n-\t\t    get_frame_pc (this_frame));\n-}\n-\n /* Implement the \"push_dummy_call\" gdbarch method.  */\n static CORE_ADDR\n rx_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n@@ -1112,9 +1083,6 @@ rx_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_sw_breakpoint_from_kind (gdbarch, rx_breakpoint::bp_from_kind);\n   set_gdbarch_skip_prologue (gdbarch, rx_skip_prologue);\n \n-  set_gdbarch_unwind_pc (gdbarch, rx_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, rx_unwind_sp);\n-\n   /* Target builtin data types.  */\n   set_gdbarch_char_signed (gdbarch, 0);\n   set_gdbarch_short_bit (gdbarch, 16);\n@@ -1147,10 +1115,8 @@ rx_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   dwarf2_append_unwinders (gdbarch);\n   frame_unwind_append_unwinder (gdbarch, &rx_frame_unwind);\n \n-  /* Methods for saving / extracting a dummy frame's ID.\n-     The ID's stack address must match the SP value returned by\n-     PUSH_DUMMY_CALL, and saved by generic_save_dummy_frame_tos.  */\n-  set_gdbarch_dummy_id (gdbarch, rx_dummy_id);\n+  /* Methods setting up a dummy call, and extracting the return value from\n+     a call.  */\n   set_gdbarch_push_dummy_call (gdbarch, rx_push_dummy_call);\n   set_gdbarch_return_value (gdbarch, rx_return_value);\n "
    }
  ]
}