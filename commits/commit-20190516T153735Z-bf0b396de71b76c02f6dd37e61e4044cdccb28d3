{
  "sha": "bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmYwYjM5NmRlNzFiNzZjMDJmNmRkMzdlNjFlNDA0NGNkY2NiMjhkMw==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:08:17Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 44/57][Arm][OBJDUMP] Add support for MVE instructions: vcvt and vrint\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_unpredictable): Add new reasons.\n\t(enum mve_undefined): Likewise.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_undefined): Likewise.\n\t(print_mve_unpredictable): Likewise.\n\t(print_mve_rounding_mode): Likewise.\n\t(print_mve_vcvt_size): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "5d85017adb2695e64c9a693008e01040134ad3f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d85017adb2695e64c9a693008e01040134ad3f1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99"
    }
  ],
  "stats": {
    "total": 387,
    "additions": 384,
    "deletions": 3
  },
  "files": [
    {
      "sha": "39fca355f6be2f7b8650867d20d590a4a992a18c",
      "filename": "gas/testsuite/gas/arm/mve-vrint-bad.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/gas/testsuite/gas/arm/mve-vrint-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/gas/testsuite/gas/arm/mve-vrint-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrint-bad.l?ref=bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
      "patch": "@@ -11,7 +11,7 @@\n [^:]*:13: Error: bad type in SIMD instruction -- `vrintm.f64 q0,q1'\n [^:]*:13: Error: bad type in SIMD instruction -- `vrintp.i16 q0,q1'\n [^:]*:13: Error: bad type in SIMD instruction -- `vrintp.f64 q0,q1'\n-[^:]*:14: Error: invalid rounding mode -- `vrintr.f16 q0,q1'\n+[^:]*:14: Error: VFP single, double or Neon quad precision register expected -- `vrintr.f16 q0,q1'\n [^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n [^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n [^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block"
    },
    {
      "sha": "bec1b1067d5b18975faa9be166332c484fbe5b29",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
      "patch": "@@ -1,3 +1,19 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_unpredictable): Add new reasons.\n+\t(enum mve_undefined): Likewise.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_undefined): Likewise.\n+\t(print_mve_unpredictable): Likewise.\n+\t(print_mve_rounding_mode): Likewise.\n+\t(print_mve_vcvt_size): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "66346ca921173a074f6d76219d0ce2c5f8d71a16",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 367,
      "deletions": 2,
      "changes": 369,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf0b396de71b76c02f6dd37e61e4044cdccb28d3/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=bf0b396de71b76c02f6dd37e61e4044cdccb28d3",
      "patch": "@@ -124,6 +124,11 @@ enum mve_instructions\n   MVE_VSTRD_SCATTER_T4,\n   MVE_VSTRW_SCATTER_T5,\n   MVE_VSTRD_SCATTER_T6,\n+  MVE_VCVT_FP_FIX_VEC,\n+  MVE_VCVT_BETWEEN_FP_INT,\n+  MVE_VCVT_FP_HALF_FP,\n+  MVE_VCVT_FROM_FP_TO_INT,\n+  MVE_VRINT_FP,\n   MVE_NONE\n };\n \n@@ -145,12 +150,14 @@ enum mve_unpredictable\n   UNPRED_Q_REGS_EQUAL,\t\t/* Unpredictable because vector registers are\n \t\t\t\t   equal.  */\n   UNPRED_OS,\t\t\t/* Unpredictable because offset scaled == 1.  */\n+  UNPRED_GP_REGS_EQUAL,\t\t/* Unpredictable because gp registers are the\n+\t\t\t\t   same.  */\n   UNPRED_NONE\t\t\t/* No unpredictable behavior.  */\n };\n \n enum mve_undefined\n {\n-  UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n+  UNDEF_SIZE_0,\t\t\t/* undefined because size == 0.  */\n   UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n   UNDEF_SIZE_LE_1,\t\t/* undefined because size <= 1.  */\n   UNDEF_SIZE_NOT_2,\t\t/* undefined because size != 2.  */\n@@ -160,6 +167,8 @@ enum mve_undefined\n   UNDEF_NOT_UNS_SIZE_1,\t\t/* undefined because U == 0 and\n \t\t\t\t   size == 1.  */\n   UNDEF_NOT_UNSIGNED,\t\t/* undefined because U == 0.  */\n+  UNDEF_VCVT_IMM6,\t\t/* imm6 < 32.  */\n+  UNDEF_VCVT_FSI_IMM6,\t\t/* fsi = 0 and 32 >= imm6 <= 47.  */\n   UNDEF_NONE\t\t\t/* no undefined behavior.  */\n };\n \n@@ -1868,7 +1877,9 @@ static const struct opcode32 neon_opcodes[] =\n    %d\t\t\tprint addr mode of MVE vldr[bhw] and vstr[bhw]\n    %u\t\t\tprint 'U' (unsigned) or 'S' for various mve instructions\n    %i\t\t\tprint MVE predicate(s) for vpt and vpst\n+   %m\t\t\tprint rounding mode for vcvt and vrint\n    %n\t\t\tprint vector comparison code for predicated instruction\n+   %s\t\t\tprint size for various vcvt instructions\n    %v\t\t\tprint vector predicate for instruction in predicated\n \t\t\tblock\n    %o\t\t\tprint offset scaled for vldr[hwd] and vstr[hwd]\n@@ -1882,7 +1893,8 @@ static const struct opcode32 neon_opcodes[] =\n \t\t\tUNPREDICTABLE\n    %<bitfield>s\t\tprint size for vector predicate & non VMOV instructions\n    %<bitfield>i\t\tprint immediate for vstr/vldr reg +/- imm\n-   */\n+   %<bitfield>k\t\tprint immediate for vector conversion instruction\n+ */\n \n static const struct mopcode32 mve_opcodes[] =\n {\n@@ -2051,6 +2063,36 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef000140, 0xef811f51,\n    \"vrhadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VCVT.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCVT_FP_FIX_VEC,\n+   0xef800c50, 0xef801cd1,\n+   \"vcvt%v.%s\\t%13-15,22Q, %1-3,5Q, #%16-21k\"},\n+\n+  /* Vector VCVT.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCVT_BETWEEN_FP_INT,\n+   0xffb30640, 0xffb31e51,\n+   \"vcvt%v.%s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VCVT between single and half-precision float, bottom half.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCVT_FP_HALF_FP,\n+   0xee3f0e01, 0xefbf1fd1,\n+   \"vcvtb%v.%s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VCVT between single and half-precision float, top half.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCVT_FP_HALF_FP,\n+   0xee3f1e01, 0xefbf1fd1,\n+   \"vcvtt%v.%s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VCVT.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VCVT_FROM_FP_TO_INT,\n+   0xffb30040, 0xffb31c51,\n+   \"vcvt%m%v.%s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VLD2.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VLD2,\n@@ -2129,6 +2171,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xec101f00, 0xfe101f80,\n    \"vldrw%v.u32\\t%13-15,22Q, %d\"},\n \n+  /* Vector VRINT floating point.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE_FP),\n+   MVE_VRINT_FP,\n+   0xffb20440, 0xffb31c51,\n+   \"vrint%m%v.f%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VST2 no writeback.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VST2,\n@@ -4269,6 +4317,9 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VCVT_FP_FIX_VEC:\n+      return (arm_decode_field (given, 16, 21) & 0x38) == 0;\n+\n     default:\n       return FALSE;\n \n@@ -4524,6 +4575,43 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VCVT_FP_FIX_VEC:\n+      {\n+\tunsigned long imm6 = arm_decode_field (given, 16, 21);\n+\tif ((imm6 & 0x20) == 0)\n+\t  {\n+\t    *undefined_code = UNDEF_VCVT_IMM6;\n+\t    return TRUE;\n+\t  }\n+\n+\tif ((arm_decode_field (given, 9, 9) == 0)\n+\t    && ((imm6 & 0x30) == 0x20))\n+\t  {\n+\t    *undefined_code = UNDEF_VCVT_FSI_IMM6;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n+    case MVE_VCVT_BETWEEN_FP_INT:\n+    case MVE_VCVT_FROM_FP_TO_INT:\n+      {\n+\tunsigned long size = arm_decode_field (given, 18, 19);\n+\tif (size == 0)\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE_0;\n+\t    return TRUE;\n+\t  }\n+\telse if (size == 3)\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE_3;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -4749,6 +4837,31 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VCVT_BETWEEN_FP_INT:\n+    case MVE_VCVT_FROM_FP_TO_INT:\n+      {\n+\tunsigned long rt = arm_decode_field (given, 0, 3);\n+\tunsigned long rt2 = arm_decode_field (given, 16, 19);\n+\n+\tif ((rt == 0xd) || (rt2 == 0xd))\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13;\n+\t    return TRUE;\n+\t  }\n+\telse if ((rt == 0xf) || (rt2 == 0xf))\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\telse if (rt == rt2)\n+\t  {\n+\t    *unpredictable_code = UNPRED_GP_REGS_EQUAL;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -4797,6 +4910,14 @@ print_mve_undefined (struct disassemble_info *info,\n       func (stream, \"not unsigned\");\n       break;\n \n+    case UNDEF_VCVT_IMM6:\n+      func (stream, \"invalid imm6\");\n+      break;\n+\n+    case UNDEF_VCVT_FSI_IMM6:\n+      func (stream, \"fsi = 0 and invalid imm6\");\n+      break;\n+\n     case UNDEF_NONE:\n       break;\n     }\n@@ -4851,6 +4972,10 @@ print_mve_unpredictable (struct disassemble_info *info,\n       func (stream, \"use of offset scaled\");\n       break;\n \n+    case UNPRED_GP_REGS_EQUAL:\n+      func (stream, \"same general-purpose register used for both operands\");\n+      break;\n+\n     case UNPRED_NONE:\n       break;\n     }\n@@ -4894,6 +5019,234 @@ print_mve_register_blocks (struct disassemble_info *info,\n     }\n }\n \n+static void\n+print_mve_rounding_mode (struct disassemble_info *info,\n+\t\t\t unsigned long given,\n+\t\t\t enum mve_instructions matched_insn)\n+{\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  switch (matched_insn)\n+    {\n+    case MVE_VCVT_FROM_FP_TO_INT:\n+      {\n+\tswitch (arm_decode_field (given, 8, 9))\n+\t  {\n+\t  case 0:\n+\t    func (stream, \"a\");\n+\t    break;\n+\n+\t  case 1:\n+\t    func (stream, \"n\");\n+\t    break;\n+\n+\t  case 2:\n+\t    func (stream, \"p\");\n+\t    break;\n+\n+\t  case 3:\n+\t    func (stream, \"m\");\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t  }\n+      }\n+      break;\n+\n+    case MVE_VRINT_FP:\n+      {\n+\tswitch (arm_decode_field (given, 7, 9))\n+\t  {\n+\t  case 0:\n+\t    func (stream, \"n\");\n+\t    break;\n+\n+\t  case 1:\n+\t    func (stream, \"x\");\n+\t    break;\n+\n+\t  case 2:\n+\t    func (stream, \"a\");\n+\t    break;\n+\n+\t  case 3:\n+\t    func (stream, \"z\");\n+\t    break;\n+\n+\t  case 5:\n+\t    func (stream, \"m\");\n+\t    break;\n+\n+\t  case 7:\n+\t    func (stream, \"p\");\n+\n+\t  case 4:\n+\t  case 6:\n+\t  default:\n+\t    break;\n+\t  }\n+      }\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n+static void\n+print_mve_vcvt_size (struct disassemble_info *info,\n+\t\t     unsigned long given,\n+\t\t     enum mve_instructions matched_insn)\n+{\n+  unsigned long mode = 0;\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  switch (matched_insn)\n+    {\n+    case MVE_VCVT_FP_FIX_VEC:\n+      {\n+\tmode = (((given & 0x200) >> 7)\n+\t\t| ((given & 0x10000000) >> 27)\n+\t\t| ((given & 0x100) >> 8));\n+\n+\tswitch (mode)\n+\t  {\n+\t  case 0:\n+\t    func (stream, \"f16.s16\");\n+\t    break;\n+\n+\t  case 1:\n+\t    func (stream, \"s16.f16\");\n+\t    break;\n+\n+\t  case 2:\n+\t    func (stream, \"f16.u16\");\n+\t    break;\n+\n+\t  case 3:\n+\t    func (stream, \"u16.f16\");\n+\t    break;\n+\n+\t  case 4:\n+\t    func (stream, \"f32.s32\");\n+\t    break;\n+\n+\t  case 5:\n+\t    func (stream, \"s32.f32\");\n+\t    break;\n+\n+\t  case 6:\n+\t    func (stream, \"f32.u32\");\n+\t    break;\n+\n+\t  case 7:\n+\t    func (stream, \"u32.f32\");\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t  }\n+\tbreak;\n+      }\n+    case MVE_VCVT_BETWEEN_FP_INT:\n+      {\n+\tunsigned long size = arm_decode_field (given, 18, 19);\n+\tunsigned long op = arm_decode_field (given, 7, 8);\n+\n+\tif (size == 1)\n+\t  {\n+\t    switch (op)\n+\t      {\n+\t      case 0:\n+\t\tfunc (stream, \"f16.s16\");\n+\t\tbreak;\n+\n+\t      case 1:\n+\t\tfunc (stream, \"f16.u16\");\n+\t\tbreak;\n+\n+\t      case 2:\n+\t\tfunc (stream, \"s16.f16\");\n+\t\tbreak;\n+\n+\t      case 3:\n+\t\tfunc (stream, \"u16.f16\");\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n+\telse if (size == 2)\n+\t  {\n+\t    switch (op)\n+\t      {\n+\t      case 0:\n+\t\tfunc (stream, \"f32.s32\");\n+\t\tbreak;\n+\n+\t      case 1:\n+\t\tfunc (stream, \"f32.u32\");\n+\t\tbreak;\n+\n+\t      case 2:\n+\t\tfunc (stream, \"s32.f32\");\n+\t\tbreak;\n+\n+\t      case 3:\n+\t\tfunc (stream, \"u32.f32\");\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+      break;\n+\n+    case MVE_VCVT_FP_HALF_FP:\n+      {\n+\tunsigned long op = arm_decode_field (given, 28, 28);\n+\tif (op == 0)\n+\t  func (stream, \"f16.f32\");\n+\telse if (op == 1)\n+\t  func (stream, \"f32.f16\");\n+      }\n+      break;\n+\n+    case MVE_VCVT_FROM_FP_TO_INT:\n+      {\n+\tunsigned long size = arm_decode_field_multiple (given, 7, 7, 18, 19);\n+\n+\tswitch (size)\n+\t  {\n+\t  case 2:\n+\t    func (stream, \"s16.f16\");\n+\t    break;\n+\n+\t  case 3:\n+\t    func (stream, \"u16.f16\");\n+\t    break;\n+\n+\t  case 4:\n+\t    func (stream, \"s32.f32\");\n+\t    break;\n+\n+\t  case 5:\n+\t    func (stream, \"u32.f32\");\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t  }\n+      }\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n static void\n print_instruction_predicate (struct disassemble_info *info)\n {\n@@ -4941,6 +5294,7 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VPT_VEC_T5:\n     case MVE_VPT_VEC_T6:\n     case MVE_VRHADD:\n+    case MVE_VRINT_FP:\n     case MVE_VST2:\n     case MVE_VST4:\n     case MVE_VSTRB_SCATTER_T1:\n@@ -6466,6 +6820,14 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t}\n \t\t      break;\n \n+\t\t    case 'm':\n+\t\t      print_mve_rounding_mode (info, given, insn->mve_op);\n+\t\t      break;\n+\n+\t\t    case 's':\n+\t\t      print_mve_vcvt_size (info, given, insn->mve_op);\n+\t\t      break;\n+\n \t\t    case 'u':\n \t\t      {\n \t\t\tif (arm_decode_field (given, 28, 28) == 0)\n@@ -6535,6 +6897,9 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t      func (stream, \"%lu\", mod_imm);\n \t\t\t    }\n \t\t\t    break;\n+\t\t\t  case 'k':\n+\t\t\t    func (stream, \"%lu\", 64 - value);\n+\t\t\t    break;\n \t\t\t  case 'r':\n \t\t\t    func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;"
    }
  ]
}