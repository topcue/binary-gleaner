{
  "sha": "ae6400219c19f165692254740531b2a7ad74945e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWU2NDAwMjE5YzE5ZjE2NTY5MjI1NDc0MDUzMWIyYTdhZDc0OTQ1ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-02T14:38:51Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-15T19:12:25Z"
    },
    "message": "gdb: Remove use of VEC from dwarf2read.c\n\nThis removes a use of VEC from GDB, from dwarf2read.c.  This removal\nis not very clean, and would probably benefit from additional\nrefactoring in the future.\n\nThe problem here is that the VEC is contained within struct\ndwarf2_per_cu_data, which is treated as POD in dwarf2read.c.  As such\nit is actually a VEC pointer.  When converting this to a std::vector\nin an ideal world we would not use a std::vector pointer, and use the\nstd::vector directly.  Sadly, to do that would require some rewriting\nin dwarf2read.c - my concern would be introducing bugs during this\nrewrite.\n\nIf we move to a std::vector pointer then we need to take care to\nhandle the case where the pointer is null.  The old VEC library would\nhandle null for us, making the VEC interface very clean.  With\nstd::vector we need to handle the null pointer case ourselves.\n\nThe achieve this then I've added a small number of function that wrap\nup access to the std::vector, hopefully hiding the null pointer\nmanagement.\n\nThe final ugliness with this conversion is that, ideally, when\nwrapping a data member behind an interface I would make the data\nmember private, however, treating the structure as POD once again\nprevents this, so we are left with the data member being public, but\naccess (ideally) being through the published interface functions.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* gdb/dwarf2read.c (dwarf2_per_objfile::~dwarf2_per_objfile):\n\tUpdate for new std::vector based implementation.\n\t(process_psymtab_comp_unit_reader): Likewise.\n\t(scan_partial_symbols): Likewise.\n\t(recursively_compute_inclusions): Likewise.\n\t(compute_compunit_symtab_includes): Likewise.\n\t(process_imported_unit_die): Likewise.\n\t(queue_and_load_dwo_tu): Likewise.\n\t(follow_die_sig_1): Likewise.\n\t* gdb/dwarf2read.h: Remove DEF_VEC_P.\n\t(typedef dwarf2_per_cu_ptr): Remove.\n\t(struct dwarf2_per_cu_data) <imported_symtabs_empty>: New\n\tfunction.\n\t(struct dwarf2_per_cu_data) <imported_symtabs_push>: New function.\n\t(struct dwarf2_per_cu_data) <imported_symtabs_size>: New function.\n\t(struct dwarf2_per_cu_data) <imported_symtabs_free>: New function.\n\t(struct dwarf2_per_cu_data) <imported_symtabs>: Change to\n\tstd::vector.\n\nChange-Id: Id0f4bda977c9dd83b0ba3d7fb42f7e5e2b6869c8",
    "tree": {
      "sha": "1253f1c6520169ee796ff32581920f44ea70cec8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1253f1c6520169ee796ff32581920f44ea70cec8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ae6400219c19f165692254740531b2a7ad74945e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae6400219c19f165692254740531b2a7ad74945e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ae6400219c19f165692254740531b2a7ad74945e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae6400219c19f165692254740531b2a7ad74945e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "55dfc88f7edeeb926dd6e2cae54b3666f8df596e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55dfc88f7edeeb926dd6e2cae54b3666f8df596e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/55dfc88f7edeeb926dd6e2cae54b3666f8df596e"
    }
  ],
  "stats": {
    "total": 126,
    "additions": 84,
    "deletions": 42
  },
  "files": [
    {
      "sha": "e6bd2464d0ae4030ea92e19d20d28869561f6f6d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae6400219c19f165692254740531b2a7ad74945e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae6400219c19f165692254740531b2a7ad74945e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ae6400219c19f165692254740531b2a7ad74945e",
      "patch": "@@ -1,3 +1,24 @@\n+2019-10-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/dwarf2read.c (dwarf2_per_objfile::~dwarf2_per_objfile):\n+\tUpdate for new std::vector based implementation.\n+\t(process_psymtab_comp_unit_reader): Likewise.\n+\t(scan_partial_symbols): Likewise.\n+\t(recursively_compute_inclusions): Likewise.\n+\t(compute_compunit_symtab_includes): Likewise.\n+\t(process_imported_unit_die): Likewise.\n+\t(queue_and_load_dwo_tu): Likewise.\n+\t(follow_die_sig_1): Likewise.\n+\t* gdb/dwarf2read.h: Remove DEF_VEC_P.\n+\t(typedef dwarf2_per_cu_ptr): Remove.\n+\t(struct dwarf2_per_cu_data) <imported_symtabs_empty>: New\n+\tfunction.\n+\t(struct dwarf2_per_cu_data) <imported_symtabs_push>: New function.\n+\t(struct dwarf2_per_cu_data) <imported_symtabs_size>: New function.\n+\t(struct dwarf2_per_cu_data) <imported_symtabs_free>: New function.\n+\t(struct dwarf2_per_cu_data) <imported_symtabs>: Change to\n+\tstd::vector.\n+\n 2019-10-15  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (windows_nat_target::resume): Use %x when logging"
    },
    {
      "sha": "ab3f43c7c5f8e9b6801751631270b150eac543d0",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 37,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae6400219c19f165692254740531b2a7ad74945e/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae6400219c19f165692254740531b2a7ad74945e/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=ae6400219c19f165692254740531b2a7ad74945e",
      "patch": "@@ -2152,10 +2152,10 @@ dwarf2_per_objfile::~dwarf2_per_objfile ()\n     htab_delete (line_header_hash);\n \n   for (dwarf2_per_cu_data *per_cu : all_comp_units)\n-    VEC_free (dwarf2_per_cu_ptr, per_cu->imported_symtabs);\n+    per_cu->imported_symtabs_free ();\n \n   for (signatured_type *sig_type : all_type_units)\n-    VEC_free (dwarf2_per_cu_ptr, sig_type->per_cu.imported_symtabs);\n+    sig_type->per_cu.imported_symtabs_free ();\n \n   /* Everything else should be on the objfile obstack.  */\n }\n@@ -8080,24 +8080,23 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \n   end_psymtab_common (objfile, pst);\n \n-  if (!VEC_empty (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs))\n+  if (!cu->per_cu->imported_symtabs_empty ())\n     {\n       int i;\n-      int len = VEC_length (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs);\n-      struct dwarf2_per_cu_data *iter;\n+      int len = cu->per_cu->imported_symtabs_size ();\n \n       /* Fill in 'dependencies' here; we fill in 'users' in a\n \t post-pass.  */\n       pst->number_of_dependencies = len;\n       pst->dependencies\n \t= objfile->partial_symtabs->allocate_dependencies (len);\n-      for (i = 0;\n-\t   VEC_iterate (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs,\n-\t\t\ti, iter);\n-\t   ++i)\n-\tpst->dependencies[i] = iter->v.psymtab;\n+      for (i = 0; i < len; ++i)\n+\t{\n+\t  pst->dependencies[i]\n+\t    = cu->per_cu->imported_symtabs->at (i)->v.psymtab;\n+\t}\n \n-      VEC_free (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs);\n+      cu->per_cu->imported_symtabs_free ();\n     }\n \n   /* Get the list of files included in the current compilation unit,\n@@ -8727,8 +8726,7 @@ scan_partial_symbols (struct partial_die_info *first_die, CORE_ADDR *lowpc,\n \t\tif (per_cu->v.psymtab == NULL)\n \t\t  process_psymtab_comp_unit (per_cu, 1, cu->language);\n \n-\t\tVEC_safe_push (dwarf2_per_cu_ptr,\n-\t\t\t       cu->per_cu->imported_symtabs, per_cu);\n+\t\tcu->per_cu->imported_symtabs_push (per_cu);\n \t      }\n \t      break;\n \t    case DW_TAG_imported_declaration:\n@@ -10244,9 +10242,7 @@ recursively_compute_inclusions (std::vector<compunit_symtab *> *result,\n \t\t\t\tstruct compunit_symtab *immediate_parent)\n {\n   void **slot;\n-  int ix;\n   struct compunit_symtab *cust;\n-  struct dwarf2_per_cu_data *iter;\n \n   slot = htab_find_slot (all_children, per_cu, INSERT);\n   if (*slot != NULL)\n@@ -10281,13 +10277,12 @@ recursively_compute_inclusions (std::vector<compunit_symtab *> *result,\n \t}\n     }\n \n-  for (ix = 0;\n-       VEC_iterate (dwarf2_per_cu_ptr, per_cu->imported_symtabs, ix, iter);\n-       ++ix)\n-    {\n-      recursively_compute_inclusions (result, all_children,\n-\t\t\t\t      all_type_symtabs, iter, cust);\n-    }\n+  if (!per_cu->imported_symtabs_empty ())\n+    for (dwarf2_per_cu_data *ptr : *per_cu->imported_symtabs)\n+      {\n+\trecursively_compute_inclusions (result, all_children,\n+\t\t\t\t\tall_type_symtabs, ptr, cust);\n+      }\n }\n \n /* Compute the compunit_symtab 'includes' fields for the compunit_symtab of\n@@ -10298,10 +10293,9 @@ compute_compunit_symtab_includes (struct dwarf2_per_cu_data *per_cu)\n {\n   gdb_assert (! per_cu->is_debug_types);\n \n-  if (!VEC_empty (dwarf2_per_cu_ptr, per_cu->imported_symtabs))\n+  if (!per_cu->imported_symtabs_empty ())\n     {\n-      int ix, len;\n-      struct dwarf2_per_cu_data *per_cu_iter;\n+      int len;\n       std::vector<compunit_symtab *> result_symtabs;\n       htab_t all_children, all_type_symtabs;\n       struct compunit_symtab *cust = get_compunit_symtab (per_cu);\n@@ -10315,14 +10309,10 @@ compute_compunit_symtab_includes (struct dwarf2_per_cu_data *per_cu)\n       all_type_symtabs = htab_create_alloc (1, htab_hash_pointer, htab_eq_pointer,\n \t\t\t\t\t    NULL, xcalloc, xfree);\n \n-      for (ix = 0;\n-\t   VEC_iterate (dwarf2_per_cu_ptr, per_cu->imported_symtabs,\n-\t\t\tix, per_cu_iter);\n-\t   ++ix)\n+      for (dwarf2_per_cu_data *ptr : *per_cu->imported_symtabs)\n \t{\n \t  recursively_compute_inclusions (&result_symtabs, all_children,\n-\t\t\t\t\t  all_type_symtabs, per_cu_iter,\n-\t\t\t\t\t  cust);\n+\t\t\t\t\t  all_type_symtabs, ptr, cust);\n \t}\n \n       /* Now we have a transitive closure of all the included symtabs.  */\n@@ -10566,8 +10556,7 @@ process_imported_unit_die (struct die_info *die, struct dwarf2_cu *cu)\n       if (maybe_queue_comp_unit (cu, per_cu, cu->language))\n \tload_full_comp_unit (per_cu, false, cu->language);\n \n-      VEC_safe_push (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs,\n-\t\t     per_cu);\n+      cu->per_cu->imported_symtabs_push (per_cu);\n     }\n }\n \n@@ -13499,7 +13488,7 @@ queue_and_load_dwo_tu (void **slot, void *info)\n \t while processing PER_CU.  */\n       if (maybe_queue_comp_unit (NULL, sig_cu, per_cu->cu->language))\n \tload_full_type_unit (sig_cu);\n-      VEC_safe_push (dwarf2_per_cu_ptr, per_cu->imported_symtabs, sig_cu);\n+      per_cu->imported_symtabs_push (sig_cu);\n     }\n \n   return 1;\n@@ -23666,9 +23655,7 @@ follow_die_sig_1 (struct die_info *src_die, struct signatured_type *sig_type,\n       if (dwarf2_per_objfile->index_table != NULL\n \t  && dwarf2_per_objfile->index_table->version <= 7)\n \t{\n-\t  VEC_safe_push (dwarf2_per_cu_ptr,\n-\t\t\t (*ref_cu)->per_cu->imported_symtabs,\n-\t\t\t sig_cu->per_cu);\n+\t  (*ref_cu)->per_cu->imported_symtabs_push (sig_cu->per_cu);\n \t}\n \n       *ref_cu = sig_cu;"
    },
    {
      "sha": "53fc7f4d9be529478c95680a9aab57a70c63a3cd",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 39,
      "deletions": 5,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae6400219c19f165692254740531b2a7ad74945e/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae6400219c19f165692254740531b2a7ad74945e/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=ae6400219c19f165692254740531b2a7ad74945e",
      "patch": "@@ -30,9 +30,6 @@\n extern struct cmd_list_element *set_dwarf_cmdlist;\n extern struct cmd_list_element *show_dwarf_cmdlist;\n \n-typedef struct dwarf2_per_cu_data *dwarf2_per_cu_ptr;\n-DEF_VEC_P (dwarf2_per_cu_ptr);\n-\n extern bool dwarf_always_disassemble;\n \n /* A descriptor for dwarf sections.\n@@ -347,6 +344,37 @@ struct dwarf2_per_cu_data\n     struct dwarf2_per_cu_quick_data *quick;\n   } v;\n \n+  /* Return true of IMPORTED_SYMTABS is empty or not yet allocated.  */\n+  bool imported_symtabs_empty () const\n+  {\n+    return (imported_symtabs == nullptr || imported_symtabs->empty ());\n+  }\n+\n+  /* Push P to the back of IMPORTED_SYMTABS, allocated IMPORTED_SYMTABS\n+     first if required.  */\n+  void imported_symtabs_push (dwarf2_per_cu_data *p)\n+  {\n+    if (imported_symtabs == nullptr)\n+      imported_symtabs = new std::vector <dwarf2_per_cu_data *>;\n+    imported_symtabs->push_back (p);\n+  }\n+\n+  /* Return the size of IMPORTED_SYMTABS if it is allocated, otherwise\n+     return 0.  */\n+  size_t imported_symtabs_size () const\n+  {\n+    if (imported_symtabs == nullptr)\n+      return 0;\n+    return imported_symtabs->size ();\n+  }\n+\n+  /* Delete IMPORTED_SYMTABS and set the pointer back to nullptr.  */\n+  void imported_symtabs_free ()\n+  {\n+    delete imported_symtabs;\n+    imported_symtabs = nullptr;\n+  }\n+\n   /* The CUs we import using DW_TAG_imported_unit.  This is filled in\n      while reading psymtabs, used to compute the psymtab dependencies,\n      and then cleared.  Then it is filled in again while reading full\n@@ -364,8 +392,14 @@ struct dwarf2_per_cu_data\n      .gdb_index version <=7 this also records the TUs that the CU referred\n      to.  Concurrently with this change gdb was modified to emit version 8\n      indices so we only pay a price for gold generated indices.\n-     http://sourceware.org/bugzilla/show_bug.cgi?id=15021.  */\n-  VEC (dwarf2_per_cu_ptr) *imported_symtabs;\n+     http://sourceware.org/bugzilla/show_bug.cgi?id=15021.\n+\n+     This currently needs to be a public member due to how\n+     dwarf2_per_cu_data is allocated and used.  Ideally in future things\n+     could be refactored to make this private.  Until then please try to\n+     avoid direct access to this member, and instead use the helper\n+     functions above.  */\n+  std::vector <dwarf2_per_cu_data *> *imported_symtabs;\n };\n \n /* Entry in the signatured_types hash table.  */"
    }
  ]
}