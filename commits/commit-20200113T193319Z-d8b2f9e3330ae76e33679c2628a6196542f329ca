{
  "sha": "d8b2f9e3330ae76e33679c2628a6196542f329ca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDhiMmY5ZTMzMzBhZTc2ZTMzNjc5YzI2MjhhNjE5NjU0MmYzMjljYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-01-13T19:32:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-13T19:33:19Z"
    },
    "message": "gdb: use std::vector instead of alloca in core_target::get_core_register_section\n\nAs I was trying to compile gdb for an m68k host, I got this error:\n\n  CXX    corelow.o\nIn file included from /binutils-gdb/gdb/gdbsupport/common-defs.h:120,\n                 from /binutils-gdb/gdb/defs.h:28,\n                 from /binutils-gdb/gdb/corelow.c:20:\n/binutils-gdb/gdb/corelow.c: In member function 'void core_target::get_core_register_section(regcache*, const regset*, const char*, int, int, const char*, bool)':\n/binutils-gdb/gdb/../include/libiberty.h:727:36: error: 'alloca' bound is unknown [-Werror=alloca-larger-than=]\n  727 | # define alloca(x) __builtin_alloca(x)\n      |                    ~~~~~~~~~~~~~~~~^~~\n/binutils-gdb/gdb/corelow.c:625:23: note: in expansion of macro 'alloca'\n  625 |   contents = (char *) alloca (size);\n      |                       ^~~~~~\n\nWe are using alloca to hold the contents of a the core register\nsections.  These sections are typically fairly small, but there is no\nrealy guarantee, so I think it would be more reasonable to just use\ndynamic allocation here.\n\ngdb/ChangeLog:\n\n\t* corelow.c (core_target::get_core_register_section): Use\n\t  std::vector instead of alloca.",
    "tree": {
      "sha": "85915b47e7adcea2989620b907b366562bc88634",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85915b47e7adcea2989620b907b366562bc88634"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d8b2f9e3330ae76e33679c2628a6196542f329ca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8b2f9e3330ae76e33679c2628a6196542f329ca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d8b2f9e3330ae76e33679c2628a6196542f329ca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8b2f9e3330ae76e33679c2628a6196542f329ca/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c0bd321d770f3829d5dba3abb2e47443197a2e23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0bd321d770f3829d5dba3abb2e47443197a2e23",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c0bd321d770f3829d5dba3abb2e47443197a2e23"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 10,
    "deletions": 6
  },
  "files": [
    {
      "sha": "f1904051985a0c630c37f1b0ea17350cb0c5b51a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8b2f9e3330ae76e33679c2628a6196542f329ca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8b2f9e3330ae76e33679c2628a6196542f329ca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d8b2f9e3330ae76e33679c2628a6196542f329ca",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* corelow.c (core_target::get_core_register_section): Use\n+\t  std::vector instead of alloca.\n+\n 2020-01-13  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* warning.m4: Add -Wmissing-declarations to build_warnings."
    },
    {
      "sha": "0418ec2506af54a591a483b1f5ddd47c37d01583",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8b2f9e3330ae76e33679c2628a6196542f329ca/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8b2f9e3330ae76e33679c2628a6196542f329ca/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=d8b2f9e3330ae76e33679c2628a6196542f329ca",
      "patch": "@@ -594,7 +594,6 @@ core_target::get_core_register_section (struct regcache *regcache,\n {\n   struct bfd_section *section;\n   bfd_size_type size;\n-  char *contents;\n   bool variable_size_section = (regset != NULL\n \t\t\t\t&& regset->flags & REGSET_VARIABLE_SIZE);\n \n@@ -622,9 +621,9 @@ core_target::get_core_register_section (struct regcache *regcache,\n \t       section_name.c_str ());\n     }\n \n-  contents = (char *) alloca (size);\n-  if (! bfd_get_section_contents (core_bfd, section, contents,\n-\t\t\t\t  (file_ptr) 0, size))\n+  std::vector<char> contents (size);\n+  if (!bfd_get_section_contents (core_bfd, section, contents.data (),\n+\t\t\t\t (file_ptr) 0, size))\n     {\n       warning (_(\"Couldn't read %s registers from `%s' section in core file.\"),\n \t       human_name, section_name.c_str ());\n@@ -633,12 +632,12 @@ core_target::get_core_register_section (struct regcache *regcache,\n \n   if (regset != NULL)\n     {\n-      regset->supply_regset (regset, regcache, -1, contents, size);\n+      regset->supply_regset (regset, regcache, -1, contents.data (), size);\n       return;\n     }\n \n   gdb_assert (m_core_vec != nullptr);\n-  m_core_vec->core_read_registers (regcache, contents, size, which,\n+  m_core_vec->core_read_registers (regcache, contents.data (), size, which,\n \t\t\t\t   (CORE_ADDR) bfd_section_vma (section));\n }\n "
    }
  ]
}