{
  "sha": "b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRjNGI4YWFhZDg0ODUzZGRmMWIyNzc5YTVmMWJiZTViZTE1NzM5Nw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-07-05T07:01:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-07-05T12:09:33Z"
    },
    "message": "PR28055, segfault in bpf special reloc function\n\nThe testcase in this PR tickled two bugs fixed here.  output_bfd is\nNULL when a reloc special_function is called for final linking and\nwhen called from bfd_generic_get_relocated_section_contents.  Clearly\nusing output_bfd is wrong as it results in segfaults.  Not only that,\nthe endianness of the reloc field really should be that of the input.\nThe second bug was not checking that the entire reloc field was\ncontained in the section contents.\n\n\tPR 28055\n\t* elf64-bpf.c (bpf_elf_generic_reloc): Use correct bfd for bfd_put\n\tand bfd_put_32 calls.  Correct section limit checks.",
    "tree": {
      "sha": "e01cce20071d44ecad07c05d72a7ea7597844356",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e01cce20071d44ecad07c05d72a7ea7597844356"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40e1d303cedca7d67f6219686f06b9750659beab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40e1d303cedca7d67f6219686f06b9750659beab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40e1d303cedca7d67f6219686f06b9750659beab"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 21,
    "deletions": 6
  },
  "files": [
    {
      "sha": "f688d5ce5c757fe9e68c2b51f1eef96981c22efe",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
      "patch": "@@ -1,3 +1,9 @@\n+2021-07-05  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 28055\n+\t* elf64-bpf.c (bpf_elf_generic_reloc): Use correct bfd for bfd_put\n+\tand bfd_put_32 calls.  Correct section limit checks.\n+\n 2021-07-03  Nick Clifton  <nickc@redhat.com>\n \n \t* version.m4: Update version number."
    },
    {
      "sha": "243df93ae825710faa2bfe912497d4060c7d28a2",
      "filename": "bfd/elf64-bpf.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397/bfd/elf64-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4c4b8aaad84853ddf1b2779a5f1bbe5be157397/bfd/elf64-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-bpf.c?ref=b4c4b8aaad84853ddf1b2779a5f1bbe5be157397",
      "patch": "@@ -589,14 +589,15 @@ elf64_bpf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n }\n \n /* A generic howto special function for installing BPF relocations.\n-   This function will be called by the assembler (via bfd_install_relocation).\n+   This function will be called by the assembler (via bfd_install_relocation),\n+   and by various get_relocated_section_contents functions.\n    At link time, bpf_elf_relocate_section will resolve the final relocations.\n \n    BPF instructions are always big endian, and this approach avoids problems in\n    bfd_install_relocation.  */\n \n static bfd_reloc_status_type\n-bpf_elf_generic_reloc (bfd * abfd, arelent *reloc_entry, asymbol *symbol,\n+bpf_elf_generic_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t       void *data, asection *input_section,\n \t\t       bfd *output_bfd,\n \t\t       char **error_message ATTRIBUTE_UNUSED)\n@@ -607,7 +608,15 @@ bpf_elf_generic_reloc (bfd * abfd, arelent *reloc_entry, asymbol *symbol,\n   bfd_byte *where;\n \n   /* Sanity check that the address is in range.  */\n-  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+  if (reloc_entry->howto->type == R_BPF_INSN_64)\n+    {\n+      bfd_size_type end = bfd_get_section_limit_octets (abfd, input_section);\n+      if (reloc_entry->address > end\n+\t  || end - reloc_entry->address < 16)\n+\treturn bfd_reloc_outofrange;\n+    }\n+  else if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd, input_section,\n+\t\t\t\t       reloc_entry->address))\n     return bfd_reloc_outofrange;\n \n   /*  Get the symbol value.  */\n@@ -640,15 +649,15 @@ bpf_elf_generic_reloc (bfd * abfd, arelent *reloc_entry, asymbol *symbol,\n \t instructions, and the upper 32 bits placed at the very end of the\n \t instruction. that is, there are 32 unused bits between them. */\n \n-      bfd_put_32 (output_bfd, (relocation & 0xFFFFFFFF), where + 4);\n-      bfd_put_32 (output_bfd, (relocation >> 32), where + 12);\n+      bfd_put_32 (abfd, (relocation & 0xFFFFFFFF), where + 4);\n+      bfd_put_32 (abfd, (relocation >> 32), where + 12);\n     }\n   else\n     {\n       /* For other kinds of relocations, the relocated value simply goes\n \t BITPOS bits from the start of the entry. This is always a multiple\n \t of 8, i.e. whole bytes.  */\n-      bfd_put (reloc_entry->howto->bitsize, output_bfd, relocation,\n+      bfd_put (reloc_entry->howto->bitsize, abfd, relocation,\n \t       where + reloc_entry->howto->bitpos / 8);\n     }\n "
    }
  ]
}