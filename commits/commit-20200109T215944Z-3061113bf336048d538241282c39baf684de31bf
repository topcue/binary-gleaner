{
  "sha": "3061113bf336048d538241282c39baf684de31bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzA2MTExM2JmMzM2MDQ4ZDUzODI0MTI4MmMzOWJhZjY4NGRlMzFiZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-08T21:55:03Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-09T21:59:44Z"
    },
    "message": "Fix indentation in print_thread_info_1\n\nThe body of this this big \"for\" loop is missing an indentation level,\nthis patch fixes that.\n\ngdb/ChangeLog:\n\n\t* thread.c (print_thread_info_1): Fix indentation.",
    "tree": {
      "sha": "42a6926956cfe2b1ad5f9c83e427f014a6c4d2e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/42a6926956cfe2b1ad5f9c83e427f014a6c4d2e2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3061113bf336048d538241282c39baf684de31bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3061113bf336048d538241282c39baf684de31bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3061113bf336048d538241282c39baf684de31bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3061113bf336048d538241282c39baf684de31bf/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57d750026550cf3a589e3f28a0cdc303ba5ed039",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57d750026550cf3a589e3f28a0cdc303ba5ed039",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57d750026550cf3a589e3f28a0cdc303ba5ed039"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 69,
    "deletions": 65
  },
  "files": [
    {
      "sha": "d22a5e12d6e206ce682afe732717f5fc7b50bc31",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3061113bf336048d538241282c39baf684de31bf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3061113bf336048d538241282c39baf684de31bf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3061113bf336048d538241282c39baf684de31bf",
      "patch": "@@ -1,3 +1,7 @@\n+2020-01-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* thread.c (print_thread_info_1): Fix indentation.\n+\n 2020-01-09  Christian Biesinger  <cbiesinger@google.com>\n \n \t* symtab.c (general_symbol_info::compute_and_set_names): Move the"
    },
    {
      "sha": "4959f938c7f33dd4fc5328803db8e8dc9c838f23",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 65,
      "deletions": 65,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3061113bf336048d538241282c39baf684de31bf/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3061113bf336048d538241282c39baf684de31bf/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=3061113bf336048d538241282c39baf684de31bf",
      "patch": "@@ -1090,85 +1090,85 @@ print_thread_info_1 (struct ui_out *uiout, const char *requested_threads,\n \n     for (inferior *inf : all_inferiors ())\n       for (thread_info *tp : inf->threads ())\n-      {\n-\tint core;\n+\t{\n+\t  int core;\n \n-\tany_thread = true;\n-\tif (tp == current_thread && tp->state == THREAD_EXITED)\n-\t  current_exited = true;\n+\t  any_thread = true;\n+\t  if (tp == current_thread && tp->state == THREAD_EXITED)\n+\t    current_exited = true;\n \n-\tif (!should_print_thread (requested_threads, default_inf_num,\n-\t\t\t\t  global_ids, pid, tp))\n-\t  continue;\n+\t  if (!should_print_thread (requested_threads, default_inf_num,\n+\t\t\t\t    global_ids, pid, tp))\n+\t    continue;\n \n-\tui_out_emit_tuple tuple_emitter (uiout, NULL);\n+\t  ui_out_emit_tuple tuple_emitter (uiout, NULL);\n \n-\tif (!uiout->is_mi_like_p ())\n-\t  {\n-\t    if (tp == current_thread)\n-\t      uiout->field_string (\"current\", \"*\");\n-\t    else\n-\t      uiout->field_skip (\"current\");\n+\t  if (!uiout->is_mi_like_p ())\n+\t    {\n+\t      if (tp == current_thread)\n+\t\tuiout->field_string (\"current\", \"*\");\n+\t      else\n+\t\tuiout->field_skip (\"current\");\n \n-\t    uiout->field_string (\"id-in-tg\", print_thread_id (tp));\n-\t  }\n+\t      uiout->field_string (\"id-in-tg\", print_thread_id (tp));\n+\t    }\n \n-\tif (show_global_ids || uiout->is_mi_like_p ())\n-\t  uiout->field_signed (\"id\", tp->global_num);\n+\t  if (show_global_ids || uiout->is_mi_like_p ())\n+\t    uiout->field_signed (\"id\", tp->global_num);\n \n-\t/* For the CLI, we stuff everything into the target-id field.\n-\t   This is a gross hack to make the output come out looking\n-\t   correct.  The underlying problem here is that ui-out has no\n-\t   way to specify that a field's space allocation should be\n-\t   shared by several fields.  For MI, we do the right thing\n-\t   instead.  */\n+\t  /* For the CLI, we stuff everything into the target-id field.\n+\t     This is a gross hack to make the output come out looking\n+\t     correct.  The underlying problem here is that ui-out has no\n+\t     way to specify that a field's space allocation should be\n+\t     shared by several fields.  For MI, we do the right thing\n+\t     instead.  */\n \n-\tif (uiout->is_mi_like_p ())\n-\t  {\n-\t    uiout->field_string (\"target-id\", target_pid_to_str (tp->ptid));\n+\t  if (uiout->is_mi_like_p ())\n+\t    {\n+\t      uiout->field_string (\"target-id\", target_pid_to_str (tp->ptid));\n \n-\t    const char *extra_info = target_extra_thread_info (tp);\n-\t    if (extra_info != nullptr)\n-\t      uiout->field_string (\"details\", extra_info);\n+\t      const char *extra_info = target_extra_thread_info (tp);\n+\t      if (extra_info != nullptr)\n+\t\tuiout->field_string (\"details\", extra_info);\n \n-\t    const char *name = (tp->name != nullptr\n-\t\t\t\t? tp->name\n-\t\t\t\t: target_thread_name (tp));\n-\t    if (name != NULL)\n-\t      uiout->field_string (\"name\", name);\n-\t  }\n-\telse\n-\t  {\n-\t    uiout->field_string (\"target-id\",\n-\t\t\t\t thread_target_id_str (tp).c_str ());\n-\t  }\n+\t      const char *name = (tp->name != nullptr\n+\t\t\t\t  ? tp->name\n+\t\t\t\t  : target_thread_name (tp));\n+\t      if (name != NULL)\n+\t\tuiout->field_string (\"name\", name);\n+\t    }\n+\t  else\n+\t    {\n+\t      uiout->field_string (\"target-id\",\n+\t\t\t\t   thread_target_id_str (tp).c_str ());\n+\t    }\n \n-\tif (tp->state == THREAD_RUNNING)\n-\t  uiout->text (\"(running)\\n\");\n-\telse\n-\t  {\n-\t    /* The switch below puts us at the top of the stack (leaf\n-\t       frame).  */\n-\t    switch_to_thread (tp);\n-\t    print_stack_frame (get_selected_frame (NULL),\n-\t\t\t       /* For MI output, print frame level.  */\n-\t\t\t       uiout->is_mi_like_p (),\n-\t\t\t       LOCATION, 0);\n-\t  }\n+\t  if (tp->state == THREAD_RUNNING)\n+\t    uiout->text (\"(running)\\n\");\n+\t  else\n+\t    {\n+\t      /* The switch below puts us at the top of the stack (leaf\n+\t\t frame).  */\n+\t      switch_to_thread (tp);\n+\t      print_stack_frame (get_selected_frame (NULL),\n+\t\t\t\t /* For MI output, print frame level.  */\n+\t\t\t\t uiout->is_mi_like_p (),\n+\t\t\t\t LOCATION, 0);\n+\t    }\n \n-\tif (uiout->is_mi_like_p ())\n-\t  {\n-\t    const char *state = \"stopped\";\n+\t  if (uiout->is_mi_like_p ())\n+\t    {\n+\t      const char *state = \"stopped\";\n \n-\t    if (tp->state == THREAD_RUNNING)\n-\t      state = \"running\";\n-\t    uiout->field_string (\"state\", state);\n-\t  }\n+\t      if (tp->state == THREAD_RUNNING)\n+\t\tstate = \"running\";\n+\t      uiout->field_string (\"state\", state);\n+\t    }\n \n-\tcore = target_core_of_thread (tp->ptid);\n-\tif (uiout->is_mi_like_p () && core != -1)\n-\t  uiout->field_signed (\"core\", core);\n-      }\n+\t  core = target_core_of_thread (tp->ptid);\n+\t  if (uiout->is_mi_like_p () && core != -1)\n+\t    uiout->field_signed (\"core\", core);\n+\t}\n \n     /* This end scope restores the current thread and the frame\n        selected before the \"info threads\" command, and it finishes the"
    }
  ]
}