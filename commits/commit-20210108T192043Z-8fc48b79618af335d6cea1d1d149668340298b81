{
  "sha": "8fc48b79618af335d6cea1d1d149668340298b81",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGZjNDhiNzk2MThhZjMzNWQ2Y2VhMWQxZDE0OTY2ODM0MDI5OGI4MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-08T19:20:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-08T19:20:43Z"
    },
    "message": "Pass void_context_p to parse_expression\n\nAn earlier patch pointed out that nothing in GDB sets void_context_p\nwhen parsing an expression.  This patch fixes this omission.\n\n\"print\" and \"call\" differ in that the former will print a value that\nhas void type, while the latter will not.  AdaCore has had a patch for\na long time that uses this distinction to help with overload\nresolution.  In particular, in a \"call\" context, a procedure will be\nchosen, while in a \"print\" context, a zero-argument function will be\nchosen instead.\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-01-08  Tom Tromey  <tromey@adacore.com>\n\n\t* parse.c (parse_expression): Add void_context_p parameter.  Use\n\tparse_exp_in_context.\n\t* printcmd.c (print_command_1): Change voidprint to bool.  Pass to\n\tparse_expression.\n\t(print_command, call_command): Update.\n\t* expression.h (parse_expression): Add void_context_p parameter.\n\ngdb/testsuite/ChangeLog\n2021-01-08  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/voidctx/pck.adb: New file.\n\t* gdb.ada/voidctx/pck.ads: New file.\n\t* gdb.ada/voidctx/voidctx.adb: New file.\n\t* gdb.ada/voidctx.exp: New file.",
    "tree": {
      "sha": "fff5e183fda0fd399702add8a0257b6d36440090",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fff5e183fda0fd399702add8a0257b6d36440090"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8fc48b79618af335d6cea1d1d149668340298b81",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fc48b79618af335d6cea1d1d149668340298b81",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8fc48b79618af335d6cea1d1d149668340298b81",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fc48b79618af335d6cea1d1d149668340298b81/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6abd4cf281deda4b1eb2d569a2729a485105e553",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6abd4cf281deda4b1eb2d569a2729a485105e553",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6abd4cf281deda4b1eb2d569a2729a485105e553"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 156,
    "deletions": 9
  },
  "files": [
    {
      "sha": "d567830b1fa12183a5fdd7dc5dc8a0b044339480",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -1,3 +1,12 @@\n+2021-01-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* parse.c (parse_expression): Add void_context_p parameter.  Use\n+\tparse_exp_in_context.\n+\t* printcmd.c (print_command_1): Change voidprint to bool.  Pass to\n+\tparse_expression.\n+\t(print_command, call_command): Update.\n+\t* expression.h (parse_expression): Add void_context_p parameter.\n+\n 2021-01-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* value.c (set_value_component_location): Adjust the VALUE_LVAL"
    },
    {
      "sha": "e70169e9b3ecc8b38fba4f5ad8e2a5848c5c6b06",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -142,7 +142,8 @@ typedef std::unique_ptr<expression> expression_up;\n \n class innermost_block_tracker;\n extern expression_up parse_expression (const char *,\n-\t\t\t\t       innermost_block_tracker * = nullptr);\n+\t\t\t\t       innermost_block_tracker * = nullptr,\n+\t\t\t\t       bool void_context_p = false);\n \n extern expression_up parse_expression_with_language (const char *string,\n \t\t\t\t\t\t     enum language lang);"
    },
    {
      "sha": "b3cd91d2730c9e595cd7c148320d12e26ef006e1",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -1158,13 +1158,20 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n   return result;\n }\n \n-/* Parse STRING as an expression, and complain if this fails\n-   to use up all of the contents of STRING.  */\n+/* Parse STRING as an expression, and complain if this fails to use up\n+   all of the contents of STRING.  TRACKER, if non-null, will be\n+   updated by the parser.  VOID_CONTEXT_P should be true to indicate\n+   that the expression may be expected to return a value with void\n+   type.  Parsers are free to ignore this, or to use it to help with\n+   overload resolution decisions.  */\n \n expression_up\n-parse_expression (const char *string, innermost_block_tracker *tracker)\n+parse_expression (const char *string, innermost_block_tracker *tracker,\n+\t\t  bool void_context_p)\n {\n-  expression_up exp = parse_exp_1 (&string, 0, 0, 0, tracker);\n+  expression_up exp = parse_exp_in_context (&string, 0, nullptr, 0,\n+\t\t\t\t\t    void_context_p, nullptr,\n+\t\t\t\t\t    tracker, nullptr);\n   if (*string)\n     error (_(\"Junk after end of expression.\"));\n   return exp;"
    },
    {
      "sha": "2e56d28e9f497ce512c3038e7757a35c1c158c2d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -1206,7 +1206,7 @@ print_value (value *val, const value_print_options &opts)\n /* Implementation of the \"print\" and \"call\" commands.  */\n \n static void\n-print_command_1 (const char *args, int voidprint)\n+print_command_1 (const char *args, bool voidprint)\n {\n   struct value *val;\n   value_print_options print_opts;\n@@ -1223,7 +1223,9 @@ print_command_1 (const char *args, int voidprint)\n \n   if (exp != nullptr && *exp)\n     {\n-      expression_up expr = parse_expression (exp);\n+      /* VOIDPRINT is true to indicate that we do want to print a void\n+\t value, so invert it for parse_expression.  */\n+      expression_up expr = parse_expression (exp, nullptr, !voidprint);\n       val = evaluate_expression (expr.get ());\n     }\n   else\n@@ -1321,14 +1323,14 @@ print_command_completer (struct cmd_list_element *ignore,\n static void\n print_command (const char *exp, int from_tty)\n {\n-  print_command_1 (exp, 1);\n+  print_command_1 (exp, true);\n }\n \n /* Same as print, except it doesn't print void results.  */\n static void\n call_command (const char *exp, int from_tty)\n {\n-  print_command_1 (exp, 0);\n+  print_command_1 (exp, false);\n }\n \n /* Implementation of the \"output\" command.  */"
    },
    {
      "sha": "fcca04996f4fa51d35b8e00a32b70475e33f92e0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -1,3 +1,10 @@\n+2021-01-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/voidctx/pck.adb: New file.\n+\t* gdb.ada/voidctx/pck.ads: New file.\n+\t* gdb.ada/voidctx/voidctx.adb: New file.\n+\t* gdb.ada/voidctx.exp: New file.\n+\n 2021-01-08  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \tPR gdb/27157"
    },
    {
      "sha": "c557c1fe8d0e21cc3f129ae47e168f6b7e732827",
      "filename": "gdb/testsuite/gdb.ada/voidctx.exp",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/voidctx.exp?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile voidctx\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug ]] != \"\" } {\n+  return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/voidctx.adb]\n+runto \"voidctx.adb:$bp_location\"\n+\n+gdb_test \"print pck.proc_count\" \" = 0\" \"initial proc_count\"\n+gdb_test \"print pck.func_count\" \" = 0\" \"initial func_count\"\n+\n+gdb_test \"print DoSomething\" \" = 42\"\n+gdb_test \"print pck.proc_count\" \" = 0\" \"check proc_count 1\"\n+gdb_test \"print pck.func_count\" \" = 1\" \"check func_count 1\"\n+\n+gdb_test_no_output \"call DoSomething\"\n+gdb_test \"print pck.proc_count\" \" = 1\" \"check proc_count 2\"\n+gdb_test \"print pck.func_count\" \" = 1\" \"check func_count 2\""
    },
    {
      "sha": "bdd76cd4142496f9aac0fc4d16846619771b4899",
      "filename": "gdb/testsuite/gdb.ada/voidctx/pck.adb",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/voidctx/pck.adb?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -0,0 +1,27 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Pck is\n+   function DoSomething return Integer is\n+   begin\n+      Func_Count := Func_Count + 1;\n+      return 42;\n+   end;\n+\n+   procedure DoSomething is\n+   begin\n+      Proc_Count := Proc_Count + 1;\n+   end;\n+end Pck;"
    },
    {
      "sha": "cf7fe15e6fba585c35034cca3fcce7adacc6b5d2",
      "filename": "gdb/testsuite/gdb.ada/voidctx/pck.ads",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/voidctx/pck.ads?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -0,0 +1,23 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package Pck is\n+   -- Each count is incremented by the respective DoSomething.\n+   Proc_Count : Integer := 0;\n+   Func_Count : Integer := 0;\n+\n+   function DoSomething return Integer;\n+   procedure DoSomething;\n+end Pck;"
    },
    {
      "sha": "f70c7f065ec9a2d026a0a82e2cd028774e596f52",
      "filename": "gdb/testsuite/gdb.ada/voidctx/voidctx.adb",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/voidctx.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc48b79618af335d6cea1d1d149668340298b81/gdb/testsuite/gdb.ada/voidctx/voidctx.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/voidctx/voidctx.adb?ref=8fc48b79618af335d6cea1d1d149668340298b81",
      "patch": "@@ -0,0 +1,31 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+procedure Voidctx is\n+\n+   function DoSomething return Integer is\n+   begin\n+      return 42;\n+   end;\n+\n+   procedure DoSomething is\n+   begin\n+      null;\n+   end;\n+\n+begin\n+   null;  -- STOP\n+end Voidctx;"
    }
  ]
}