{
  "sha": "a6e7fea128b8e1da3ea99dc906df56f85589d335",
  "node_id": "C_kwDOANOeidoAKGE2ZTdmZWExMjhiOGUxZGEzZWE5OWRjOTA2ZGY1NmY4NTU4OWQzMzU",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-09T13:22:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-16T17:35:03Z"
    },
    "message": "gdb: throw OPTIMIZED_OUT_ERROR rather than GENERIC_ERROR\n\nWhile reviewing this patch:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-November/183227.html\n\nI spotted that the patch could be improved if we threw\nOPTIMIZED_OUT_ERROR rather than GENERIC_ERROR in a few places.\n\nThis commit updates error_value_optimized_out and\nrequire_not_optimized_out to throw OPTIMIZED_OUT_ERROR.\n\nI ran the testsuite and saw no regressions.  This doesn't really\nsurprise me, we don't usually write code like:\n\n  catch (const gdb_exception_error &ex)\n    {\n      (if ex.error == GENERIC_ERROR)\n        ...\n      else\n        ...\n    }\n\nThere are a three places where we write something like:\n\n  catch (const gdb_exception_error &ex)\n    {\n      (if ex.error == OPTIMIZED_OUT_ERROR)\n        ...\n    }\n\nIn frame.c:unwind_pc, stack.c:info_frame_command_core, and\nvalue.c:value_optimized_out, but if we are hitting these cases then\nit's not significantly changing GDB's behaviour.",
    "tree": {
      "sha": "6befb7056fdcd80cd87ab3c896f4227d25296024",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6befb7056fdcd80cd87ab3c896f4227d25296024"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a6e7fea128b8e1da3ea99dc906df56f85589d335",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6e7fea128b8e1da3ea99dc906df56f85589d335",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a6e7fea128b8e1da3ea99dc906df56f85589d335",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6e7fea128b8e1da3ea99dc906df56f85589d335/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b7c9d393d60957b901418359d2cf5d276bcc5e4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7c9d393d60957b901418359d2cf5d276bcc5e4b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7c9d393d60957b901418359d2cf5d276bcc5e4b"
    }
  ],
  "stats": {
    "total": 5,
    "additions": 3,
    "deletions": 2
  },
  "files": [
    {
      "sha": "10edf3bb9312890b782f5b867cc68a574728d4dd",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6e7fea128b8e1da3ea99dc906df56f85589d335/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6e7fea128b8e1da3ea99dc906df56f85589d335/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=a6e7fea128b8e1da3ea99dc906df56f85589d335",
      "patch": "@@ -1221,7 +1221,7 @@ value_actual_type (struct value *value, int resolve_simple_types,\n void\n error_value_optimized_out (void)\n {\n-  error (_(\"value has been optimized out\"));\n+  throw_error (OPTIMIZED_OUT_ERROR, _(\"value has been optimized out\"));\n }\n \n static void\n@@ -1230,7 +1230,8 @@ require_not_optimized_out (const struct value *value)\n   if (!value->optimized_out.empty ())\n     {\n       if (value->lval == lval_register)\n-\terror (_(\"register has not been saved in frame\"));\n+\tthrow_error (OPTIMIZED_OUT_ERROR,\n+\t\t     _(\"register has not been saved in frame\"));\n       else\n \terror_value_optimized_out ();\n     }"
    }
  ]
}