{
  "sha": "a9158a863c18545634cb0f0462b326aeca30634c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTkxNThhODYzYzE4NTQ1NjM0Y2IwZjA0NjJiMzI2YWVjYTMwNjM0Yw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-07T21:30:37Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-11T22:40:25Z"
    },
    "message": "gdb/riscv: Remove riscv_type_alignment function\n\nMake use of the type_align function and remove riscv_type_alignment as\nit is no longer needed.  I tested this against a number of RV32 and\nRV64 targets, and I also ran the tests with an assertion in place\nchecking that the old riscv_type_alignment function gives the same\nanswer as the common type_align function - it does, and all the tests\nstill pass.\n\ngdb/ChangeLog:\n\n\t* riscv-tdep.c (riscv_type_align): New function.\n\t(riscv_type_alignment): Delete.\n\t(riscv_arg_location): Use 'type_align'.\n\t(riscv_gdbarch_init): Register riscv_type_align gdbarch function.",
    "tree": {
      "sha": "9b310fc775e36db1a486c2efeb50394b60b03dd9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b310fc775e36db1a486c2efeb50394b60b03dd9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9158a863c18545634cb0f0462b326aeca30634c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9158a863c18545634cb0f0462b326aeca30634c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9158a863c18545634cb0f0462b326aeca30634c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9158a863c18545634cb0f0462b326aeca30634c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "41077b6625d16cc6c0c4b404a177a8850300b8a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41077b6625d16cc6c0c4b404a177a8850300b8a0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/41077b6625d16cc6c0c4b404a177a8850300b8a0"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 19,
    "deletions": 48
  },
  "files": [
    {
      "sha": "92a286b54635b7c8b8baefbe666a6ee9ee507b4a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9158a863c18545634cb0f0462b326aeca30634c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9158a863c18545634cb0f0462b326aeca30634c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a9158a863c18545634cb0f0462b326aeca30634c",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-tdep.c (riscv_type_align): New function.\n+\t(riscv_type_alignment): Delete.\n+\t(riscv_arg_location): Use 'type_align'.\n+\t(riscv_gdbarch_init): Register riscv_type_align gdbarch function.\n+\n 2019-04-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdbtypes.c (type_align): A struct with no non-static fields also"
    },
    {
      "sha": "6370bc268fc65445b6aa286c9cde0864deaad9b3",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 12,
      "deletions": 48,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9158a863c18545634cb0f0462b326aeca30634c/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9158a863c18545634cb0f0462b326aeca30634c/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=a9158a863c18545634cb0f0462b326aeca30634c",
      "patch": "@@ -1619,55 +1619,18 @@ riscv_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp,\n   return sp;\n }\n \n-/* Compute the alignment of the type T.  Used while setting up the\n-   arguments for a dummy call.  */\n+/* Implement the gdbarch type alignment method, overrides the generic\n+   alignment algorithm for anything that is RISC-V specific.  */\n \n-static int\n-riscv_type_alignment (struct type *t)\n+static ULONGEST\n+riscv_type_align (gdbarch *gdbarch, type *type)\n {\n-  t = check_typedef (t);\n-  switch (TYPE_CODE (t))\n-    {\n-    default:\n-      error (_(\"Could not compute alignment of type\"));\n-\n-    case TYPE_CODE_RANGE:\n-    case TYPE_CODE_RVALUE_REF:\n-    case TYPE_CODE_PTR:\n-    case TYPE_CODE_ENUM:\n-    case TYPE_CODE_INT:\n-    case TYPE_CODE_FLT:\n-    case TYPE_CODE_REF:\n-    case TYPE_CODE_CHAR:\n-    case TYPE_CODE_BOOL:\n-      return TYPE_LENGTH (t);\n+  type = check_typedef (type);\n+  if (TYPE_CODE (type) == TYPE_CODE_ARRAY && TYPE_VECTOR (type))\n+    return std::min (TYPE_LENGTH (type), (ULONGEST) BIGGEST_ALIGNMENT);\n \n-    case TYPE_CODE_ARRAY:\n-      if (TYPE_VECTOR (t))\n-\treturn std::min (TYPE_LENGTH (t), (ULONGEST) BIGGEST_ALIGNMENT);\n-      /* FALLTHROUGH */\n-\n-    case TYPE_CODE_COMPLEX:\n-      return riscv_type_alignment (TYPE_TARGET_TYPE (t));\n-\n-    case TYPE_CODE_STRUCT:\n-    case TYPE_CODE_UNION:\n-      {\n-\tint i;\n-\tint align = 1;\n-\n-\tfor (i = 0; i < TYPE_NFIELDS (t); ++i)\n-\t  {\n-\t    if (TYPE_FIELD_LOC_KIND (t, i) == FIELD_LOC_KIND_BITPOS)\n-\t      {\n-\t\tint a = riscv_type_alignment (TYPE_FIELD_TYPE (t, i));\n-\t\tif (a > align)\n-\t\t  align = a;\n-\t      }\n-\t  }\n-\treturn align;\n-      }\n-    }\n+  /* Anything else will be aligned by the generic code.  */\n+  return 0;\n }\n \n /* Holds information about a single argument either being passed to an\n@@ -2288,7 +2251,7 @@ riscv_arg_location (struct gdbarch *gdbarch,\n {\n   ainfo->type = type;\n   ainfo->length = TYPE_LENGTH (ainfo->type);\n-  ainfo->align = riscv_type_alignment (ainfo->type);\n+  ainfo->align = type_align (ainfo->type);\n   ainfo->is_unnamed = is_unnamed;\n   ainfo->contents = nullptr;\n   ainfo->argloc[0].c_length = 0;\n@@ -2314,7 +2277,7 @@ riscv_arg_location (struct gdbarch *gdbarch,\n \t}\n \n       /* Recalculate the alignment requirement.  */\n-      ainfo->align = riscv_type_alignment (ainfo->type);\n+      ainfo->align = type_align (ainfo->type);\n       riscv_call_arg_scalar_int (ainfo, cinfo);\n       break;\n \n@@ -3221,6 +3184,7 @@ riscv_gdbarch_init (struct gdbarch_info info,\n   set_gdbarch_long_double_format (gdbarch, floatformats_ia64_quad);\n   set_gdbarch_ptr_bit (gdbarch, riscv_isa_xlen (gdbarch) * 8);\n   set_gdbarch_char_signed (gdbarch, 0);\n+  set_gdbarch_type_align (gdbarch, riscv_type_align);\n \n   /* Information about the target architecture.  */\n   set_gdbarch_return_value (gdbarch, riscv_return_value);"
    }
  ]
}