{
  "sha": "d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDRjOWE0Zjg3ZGRiYmI3OWQ4NTJmNTllZTE3MjNlMDMyOTQ1NDBjMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-26T14:35:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-26T14:36:44Z"
    },
    "message": "Move more declarations from dwarf2/loc.h to dwarf2/read.h\n\nAll these functions have their implementations in dwarf2/read.c, so move\ntheir declarations to dwarf2/read.h.  Move the doc to the header, at the\nsame time.\n\ngdb/ChangeLog:\n\n\t* dwarf2/loc.h (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n\tdwarf2_fetch_die_type_sect_off): Move to...\n\t* dwarf2/read.h (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n\tdwarf2_fetch_die_type_sect_off): ... here.\n\t* dwarf2/read.c (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n\tdwarf2_fetch_die_type_sect_off): Move doc to header file.",
    "tree": {
      "sha": "5eb1e1aa4f8df21cbea3a0b58b387838f6a8f1dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5eb1e1aa4f8df21cbea3a0b58b387838f6a8f1dd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cceb53b8849bc76f522931890b585b41e6662fa5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cceb53b8849bc76f522931890b585b41e6662fa5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cceb53b8849bc76f522931890b585b41e6662fa5"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 54,
    "deletions": 35
  },
  "files": [
    {
      "sha": "33f7bc8707ab82a408a8981cbd66142992c5b1de",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
      "patch": "@@ -1,3 +1,15 @@\n+2020-02-26  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/loc.h (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n+\tdwarf2_fetch_die_type_sect_off): Move to...\n+\t* dwarf2/read.h (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n+\tdwarf2_fetch_die_type_sect_off): ... here.\n+\t* dwarf2/read.c (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off, dwarf2_fetch_constant_bytes,\n+\tdwarf2_fetch_die_type_sect_off): Move doc to header file.\n+\n 2020-02-26  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/25603"
    },
    {
      "sha": "98a7d8a60697cbe1884795ba342a4e848dd8a000",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 0,
      "deletions": 18,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
      "patch": "@@ -41,24 +41,6 @@ const gdb_byte *dwarf2_find_location_expression\n    size_t *locexpr_length,\n    CORE_ADDR pc);\n \n-struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_sect_off\n-  (sect_offset offset_in_cu, struct dwarf2_per_cu_data *per_cu,\n-   CORE_ADDR (*get_frame_pc) (void *baton),\n-   void *baton, bool resolve_abstract_p = false);\n-\n-struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_cu_off\n-  (cu_offset offset_in_cu, struct dwarf2_per_cu_data *per_cu,\n-   CORE_ADDR (*get_frame_pc) (void *baton),\n-   void *baton);\n-\n-extern const gdb_byte *dwarf2_fetch_constant_bytes (sect_offset,\n-\t\t\t\t\t\t    struct dwarf2_per_cu_data *,\n-\t\t\t\t\t\t    struct obstack *,\n-\t\t\t\t\t\t    LONGEST *);\n-\n-struct type *dwarf2_fetch_die_type_sect_off (sect_offset,\n-\t\t\t\t\t     struct dwarf2_per_cu_data *);\n-\n /* Find the frame base information for FRAMEFUNC at PC.  START is an\n    out parameter which is set to point to the DWARF expression to\n    compute.  LENGTH is an out parameter which is set to the length of"
    },
    {
      "sha": "6849644748481bd4b36b0afeb2b02e1904ca3426",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 17,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
      "patch": "@@ -22211,14 +22211,11 @@ follow_die_ref (struct die_info *src_die, const struct attribute *attr,\n   return die;\n }\n \n-/* Return DWARF block referenced by DW_AT_location of DIE at SECT_OFF at PER_CU.\n-   Returned value is intended for DW_OP_call*.  Returned\n-   dwarf2_locexpr_baton->data has lifetime of\n-   PER_CU->DWARF2_PER_OBJFILE->OBJFILE.  */\n+/* See read.h.  */\n \n struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n-\t\t\t       struct dwarf2_per_cu_data *per_cu,\n+\t\t\t       dwarf2_per_cu_data *per_cu,\n \t\t\t       CORE_ADDR (*get_frame_pc) (void *baton),\n \t\t\t       void *baton, bool resolve_abstract_p)\n {\n@@ -22317,12 +22314,11 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n   return retval;\n }\n \n-/* Like dwarf2_fetch_die_loc_sect_off, but take a CU\n-   offset.  */\n+/* See read.h.  */\n \n struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_cu_off (cu_offset offset_in_cu,\n-\t\t\t     struct dwarf2_per_cu_data *per_cu,\n+\t\t\t     dwarf2_per_cu_data *per_cu,\n \t\t\t     CORE_ADDR (*get_frame_pc) (void *baton),\n \t\t\t     void *baton)\n {\n@@ -22350,15 +22346,12 @@ write_constant_as_bytes (struct obstack *obstack,\n   return result;\n }\n \n-/* If the DIE at OFFSET in PER_CU has a DW_AT_const_value, return a\n-   pointer to the constant bytes and set LEN to the length of the\n-   data.  If memory is needed, allocate it on OBSTACK.  If the DIE\n-   does not have a DW_AT_const_value, return NULL.  */\n+/* See read.h.  */\n \n const gdb_byte *\n dwarf2_fetch_constant_bytes (sect_offset sect_off,\n-\t\t\t     struct dwarf2_per_cu_data *per_cu,\n-\t\t\t     struct obstack *obstack,\n+\t\t\t     dwarf2_per_cu_data *per_cu,\n+\t\t\t     obstack *obstack,\n \t\t\t     LONGEST *len)\n {\n   struct dwarf2_cu *cu;\n@@ -22483,12 +22476,11 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n   return result;\n }\n \n-/* Return the type of the die at OFFSET in PER_CU.  Return NULL if no\n-   valid type for this die is found.  */\n+/* See read.h.  */\n \n struct type *\n dwarf2_fetch_die_type_sect_off (sect_offset sect_off,\n-\t\t\t\tstruct dwarf2_per_cu_data *per_cu)\n+\t\t\t\tdwarf2_per_cu_data *per_cu)\n {\n   struct dwarf2_cu *cu;\n   struct die_info *die;"
    },
    {
      "sha": "00652c2b45a71dec209167c1df67bb6006bd35bc",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4c9a4f87ddbbb79d852f59ee1723e03294540c2/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=d4c9a4f87ddbbb79d852f59ee1723e03294540c2",
      "patch": "@@ -537,6 +537,39 @@ struct type *dwarf2_get_die_type (cu_offset die_offset,\n CORE_ADDR dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n \t\t\t\t  unsigned int addr_index);\n \n+/* Return DWARF block referenced by DW_AT_location of DIE at SECT_OFF at PER_CU.\n+   Returned value is intended for DW_OP_call*.  Returned\n+   dwarf2_locexpr_baton->data has lifetime of\n+   PER_CU->DWARF2_PER_OBJFILE->OBJFILE.  */\n+\n+struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_sect_off\n+  (sect_offset sect_off, dwarf2_per_cu_data *per_cu,\n+   CORE_ADDR (*get_frame_pc) (void *baton),\n+   void *baton, bool resolve_abstract_p = false);\n+\n+/* Like dwarf2_fetch_die_loc_sect_off, but take a CU\n+   offset.  */\n+\n+struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_cu_off\n+  (cu_offset offset_in_cu, dwarf2_per_cu_data *per_cu,\n+   CORE_ADDR (*get_frame_pc) (void *baton),\n+   void *baton);\n+\n+/* If the DIE at SECT_OFF in PER_CU has a DW_AT_const_value, return a\n+   pointer to the constant bytes and set LEN to the length of the\n+   data.  If memory is needed, allocate it on OBSTACK.  If the DIE\n+   does not have a DW_AT_const_value, return NULL.  */\n+\n+extern const gdb_byte *dwarf2_fetch_constant_bytes\n+  (sect_offset sect_off, dwarf2_per_cu_data *per_cu, obstack *obstack,\n+   LONGEST *len);\n+\n+/* Return the type of the die at SECT_OFF in PER_CU.  Return NULL if no\n+   valid type for this die is found.  */\n+\n+struct type *dwarf2_fetch_die_type_sect_off\n+  (sect_offset sect_off, dwarf2_per_cu_data *per_cu);\n+\n /* When non-zero, dump line number entries as they are read in.  */\n extern unsigned int dwarf_line_debug;\n "
    }
  ]
}