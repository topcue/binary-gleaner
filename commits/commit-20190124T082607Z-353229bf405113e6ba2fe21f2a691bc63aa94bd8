{
  "sha": "353229bf405113e6ba2fe21f2a691bc63aa94bd8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzUzMjI5YmY0MDUxMTNlNmJhMmZlMjFmMmE2OTFiYzYzYWE5NGJkOA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-01-24T08:17:39Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-01-24T08:26:07Z"
    },
    "message": "AArch64 AAPCS: Ignore static members\n\nStatic members in C++ structs are global data and therefore not part of the\nlist of struct members considered for passing in registers.\n\nNote the corresponding code in GCC (from which the GDB AAPCS code is based)\ndoes not have any static member checks due to the static members not being\npart of the struct type at that point.\n\nExtend gdb.base/infcall-nested-structs.exp to test structs with static\nmembers when compiled for C++.  XFAIL more cases for x86_64 (see gdb/24104).\nFor completeness, ensure some test cases have both empty structures and\nstatic members.\n\nAlso fixes gdb.dwarf2/dw2-cp-infcall-ref-static.exp.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aapcs_is_vfp_call_or_return_candidate_1): Check\n\tfor static members.\n\t(pass_in_v_vfp_candidate): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/infcall-nested-structs.c (struct struct_static_02_01):\n\tNew structure.\n\t(struct struct_static_02_02): Likewise.\n\t(struct struct_static_02_03): Likewise.\n\t(struct struct_static_02_04): Likewise.\n\t(struct struct_static_04_01): Likewise.\n\t(struct struct_static_04_02): Likewise.\n\t(struct struct_static_04_03): Likewise.\n\t(struct struct_static_04_04): Likewise.\n\t(struct struct_static_06_01): Likewise.\n\t(struct struct_static_06_02): Likewise.\n\t(struct struct_static_06_03): Likewise.\n\t(struct struct_static_06_04): Likewise.\n\t(cmp_struct_static_02_01): Likewise.\n\t(cmp_struct_static_02_02): Likewise.\n\t(cmp_struct_static_02_03): Likewise.\n\t(cmp_struct_static_02_04): Likewise.\n\t(cmp_struct_static_04_01): Likewise.\n\t(cmp_struct_static_04_02): Likewise.\n\t(cmp_struct_static_04_03): Likewise.\n\t(cmp_struct_static_04_04): Likewise.\n\t(cmp_struct_static_06_01): Likewise.\n\t(cmp_struct_static_06_02): Likewise.\n\t(cmp_struct_static_06_03): Likewise.\n\t(cmp_struct_static_06_04): Likewise.\n\t(call_all): Test new structs.\n\t* gdb.base/infcall-nested-structs.exp: Likewise.",
    "tree": {
      "sha": "7a8e1d2774cf12dd5d77d390ebce0a3900fb2570",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a8e1d2774cf12dd5d77d390ebce0a3900fb2570"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/353229bf405113e6ba2fe21f2a691bc63aa94bd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/353229bf405113e6ba2fe21f2a691bc63aa94bd8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/353229bf405113e6ba2fe21f2a691bc63aa94bd8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/353229bf405113e6ba2fe21f2a691bc63aa94bd8/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "388a192d73df7439bf375d8b8042bb53a6be9c60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/388a192d73df7439bf375d8b8042bb53a6be9c60",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/388a192d73df7439bf375d8b8042bb53a6be9c60"
    }
  ],
  "stats": {
    "total": 241,
    "additions": 235,
    "deletions": 6
  },
  "files": [
    {
      "sha": "453677e5999a7bb45b542047dc44a8617103b5c8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=353229bf405113e6ba2fe21f2a691bc63aa94bd8",
      "patch": "@@ -1,3 +1,9 @@\n+2019-01-24  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-tdep.c (aapcs_is_vfp_call_or_return_candidate_1): Check\n+\tfor static members.\n+\t(pass_in_v_vfp_candidate): Likewise.\n+\n 2019-01-23  Tom Tromey  <tom@tromey.com>\n \t    Pedro Alves  <palves@redhat.com>\n "
    },
    {
      "sha": "fb79b570b2b7a4ad247d309d11816765beb91fcc",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=353229bf405113e6ba2fe21f2a691bc63aa94bd8",
      "patch": "@@ -1224,6 +1224,10 @@ aapcs_is_vfp_call_or_return_candidate_1 (struct type *type,\n \n \tfor (int i = 0; i < TYPE_NFIELDS (type); i++)\n \t  {\n+\t    /* Ignore any static fields.  */\n+\t    if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      continue;\n+\n \t    struct type *member = check_typedef (TYPE_FIELD_TYPE (type, i));\n \n \t    int sub_count = aapcs_is_vfp_call_or_return_candidate_1\n@@ -1502,6 +1506,10 @@ pass_in_v_vfp_candidate (struct gdbarch *gdbarch, struct regcache *regcache,\n     case TYPE_CODE_UNION:\n       for (int i = 0; i < TYPE_NFIELDS (arg_type); i++)\n \t{\n+\t  /* Don't include static fields.  */\n+\t  if (field_is_static (&TYPE_FIELD (arg_type, i)))\n+\t    continue;\n+\n \t  struct value *field = value_primitive_field (arg, 0, i, arg_type);\n \t  struct type *field_type = check_typedef (value_type (field));\n "
    },
    {
      "sha": "a4ab85ff844be67625543b92f164b07e8457c53f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=353229bf405113e6ba2fe21f2a691bc63aa94bd8",
      "patch": "@@ -1,3 +1,33 @@\n+2019-01-24  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.base/infcall-nested-structs.c (struct struct_static_02_01):\n+\tNew structure.\n+\t(struct struct_static_02_02): Likewise.\n+\t(struct struct_static_02_03): Likewise.\n+\t(struct struct_static_02_04): Likewise.\n+\t(struct struct_static_04_01): Likewise.\n+\t(struct struct_static_04_02): Likewise.\n+\t(struct struct_static_04_03): Likewise.\n+\t(struct struct_static_04_04): Likewise.\n+\t(struct struct_static_06_01): Likewise.\n+\t(struct struct_static_06_02): Likewise.\n+\t(struct struct_static_06_03): Likewise.\n+\t(struct struct_static_06_04): Likewise.\n+\t(cmp_struct_static_02_01): Likewise.\n+\t(cmp_struct_static_02_02): Likewise.\n+\t(cmp_struct_static_02_03): Likewise.\n+\t(cmp_struct_static_02_04): Likewise.\n+\t(cmp_struct_static_04_01): Likewise.\n+\t(cmp_struct_static_04_02): Likewise.\n+\t(cmp_struct_static_04_03): Likewise.\n+\t(cmp_struct_static_04_04): Likewise.\n+\t(cmp_struct_static_06_01): Likewise.\n+\t(cmp_struct_static_06_02): Likewise.\n+\t(cmp_struct_static_06_03): Likewise.\n+\t(cmp_struct_static_06_04): Likewise.\n+\t(call_all): Test new structs.\n+\t* gdb.base/infcall-nested-structs.exp: Likewise.\n+\n 2019-01-21  Alan Hayward  <alan.hayward@arm.com>\n \t* gdb.base/infcall-nested-structs.exp: Test C++ in addition to C.\n "
    },
    {
      "sha": "b6f793e7a33d1cd99fb4ed46a56b5a7fb4ececda",
      "filename": "gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "status": "modified",
      "additions": 173,
      "deletions": 0,
      "changes": 173,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/infcall-nested-structs.c?ref=353229bf405113e6ba2fe21f2a691bc63aa94bd8",
      "patch": "@@ -21,6 +21,11 @@\n    scalar fields, the fields can be inside nested structures, and there can\n    be empty structures around too.\n \n+   When compiled for C++ this file also tests structures containing static\n+   members (which live in global memory).  In addition, empty structures in C++\n+   have a size of 1 (compared to 0 in GNU C), which can effect structure\n+   padding.\n+\n    This test is specifically written for RiscV and Aarch64, which both have\n    special ABI rules for structures like these, however, there should be no harm\n    in running these tests on other targets, though in many cases the\n@@ -97,6 +102,32 @@ struct struct_05_02 { tA a; struct { struct { ES(es1); } s1; } s2; tB b; struct\n struct struct_05_03 { struct { struct { ES(es1); } s1; } s2; ES(es1); struct { struct { tA a; } s3; } s4; struct { struct { tB b; } s5; } s6; struct { struct { tA c; } s7; } s8; struct { struct { tB d; } s9; } s10; struct { struct { tA e; } s11; } s12;};\n struct struct_05_04 { ES(es1); ES(es2); tA a; ES(es3); tB b; ES(es4); tA c; ES(es5); tB d; ES(es6); tA e; };\n \n+/* Only C++ allows structures to have static members.  */\n+#ifdef __cplusplus\n+\n+/* Structures with two fields nested to various depths, one of which is static.\n+   Some include empty structures.  */\n+struct struct_static_02_01 { struct sa { struct sb { tA a; static tB b; } s1; } s2; };\n+struct struct_static_02_02 { static tA a; struct { struct { ES(es1); } s1; } s2; tB b; };\n+struct struct_static_02_03 { struct { struct { ES(es1); } s1; } s2; ES(es1); struct { struct { tA a; } s3; } s4; struct sa { struct sb { static tB b; } s5; } s6;};\n+struct struct_static_02_04 { static tA a; tB b; };\n+\n+/* Structures with four fields nested to various depths, some of which are\n+   static.  Some include empty structures.  */\n+struct struct_static_04_01 { struct sa { struct sb { static tA a; tB b; tA c; tB d; } s1; } s2; };\n+struct struct_static_04_02 { tA a; struct { struct { ES(es1); } s1; } s2; tB b; struct { struct { ES(es1); } s2; } s3; static tA c; struct { struct { ES(es2); } s4; } s5; static tB d;};\n+struct struct_static_04_03 { struct sa { struct sb { static tA a; } s3; } s4; struct sc { struct sd { static tB b; } s5; } s6; struct se { struct sf { static tA c; } s7; } s8; struct sg { struct sh { static tB d; } s9; } s10;};\n+struct struct_static_04_04 { ES(es1); ES(es2); tA a; ES(es3); tB b; ES(es4); tA c; ES(es5); static tB d; };\n+\n+/* Structures with six fields nested to various depths, some of which are\n+   static.  Some include empty structures.  */\n+struct struct_static_06_01 { struct sa { struct sb { tA a; static tB b; tA c; tB d; tA e; } s1; } s2; tB f; };\n+struct struct_static_06_02 { tA a; static tB b; static tA c; tB d; tB e; tA f;};\n+struct struct_static_06_03 { struct { struct { ES(es1); } s1; } s2; ES(es1); struct sa { struct sb { static tA a; } s3; } s4; struct sc { struct sd { tB b; } s5; } s6; struct se { struct sf { static tA c; } s7; } s8; struct sg { struct sh { static tB d; } s9; } s10; struct { struct { tA e; tB f; } s11; } s12;};\n+struct struct_static_06_04 { ES(es1); ES(es2); static tA a; ES(es3); static tB b; ES(es4); static tA c; ES(es5); static tB d; ES(es6); static tA e; ES(es7); tB f; };\n+\n+#endif\n+\n int cmp_struct_01_01 (struct struct_01_01 a, struct struct_01_01 b)\n { return a.s2.s1.a == b.s2.s1.a; }\n \n@@ -151,6 +182,78 @@ int cmp_struct_05_03 (struct struct_05_03 a, struct struct_05_03 b)\n int cmp_struct_05_04 (struct struct_05_04 a, struct struct_05_04 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e; }\n \n+#ifdef __cplusplus\n+\n+int\n+cmp_struct_static_02_01 (struct struct_static_02_01 a,\n+\t\t\t struct struct_static_02_01 b)\n+{ return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == a.s2.s1.b; }\n+\n+int\n+cmp_struct_static_02_02 (struct struct_static_02_02 a,\n+\t\t\t struct struct_static_02_02 b)\n+{ return a.a == b.a && a.b == b.b; }\n+\n+int\n+cmp_struct_static_02_03 (struct struct_static_02_03 a,\n+\t\t\t struct struct_static_02_03 b)\n+{ return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b; }\n+\n+int\n+cmp_struct_static_02_04 (struct struct_static_02_04 a,\n+\t\t\t     struct struct_static_02_04 b)\n+{ return a.a == b.a && a.b == b.b; }\n+\n+int\n+cmp_struct_static_04_01 (struct struct_static_04_01 a,\n+\t\t\t struct struct_static_04_01 b)\n+{ return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == a.s2.s1.b\n+\t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == a.s2.s1.d; }\n+\n+int\n+cmp_struct_static_04_02 (struct struct_static_04_02 a,\n+\t\t\t struct struct_static_04_02 b)\n+{ return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n+\n+int\n+cmp_struct_static_04_03 (struct struct_static_04_03 a,\n+\t\t\t struct struct_static_04_03 b)\n+{ return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n+\t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d; }\n+\n+int\n+cmp_struct_static_04_04 (struct struct_static_04_04 a,\n+\t\t\t struct struct_static_04_04 b)\n+{ return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n+\n+int\n+cmp_struct_static_06_01 (struct struct_static_06_01 a,\n+\t\t\t struct struct_static_06_01 b)\n+{ return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == a.s2.s1.b\n+\t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == a.s2.s1.d\n+\t && a.s2.s1.e == b.s2.s1.e && a.f == b.f; }\n+\n+int\n+cmp_struct_static_06_02 (struct struct_static_06_02 a,\n+\t\t\t struct struct_static_06_02 b)\n+{ return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e\n+\t && a.f == b.f; }\n+\n+int\n+cmp_struct_static_06_03 (struct struct_static_06_03 a,\n+\t\t\t struct struct_static_06_03 b)\n+{ return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n+\t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d\n+\t && a.s12.s11.e == b.s12.s11.e && a.s12.s11.f == b.s12.s11.f; }\n+\n+int\n+cmp_struct_static_06_04 (struct struct_static_06_04 a,\n+\t\t\t struct struct_static_06_04 b)\n+{ return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e\n+\t && a.f == b.f; }\n+\n+#endif\n+\n REF_VAL(struct_01_01) = { {}, { { 'a' } } };\n REF_VAL(struct_01_02) = { 'a', { { {} } } };\n REF_VAL(struct_01_03) = { { { {} } }, {}, { { 'a' } } };\n@@ -171,6 +274,48 @@ REF_VAL(struct_05_02) = { 'a', { { {} } }, 'b', { { {} } }, 'c', { { {} } }, 'd'\n REF_VAL(struct_05_03) = { { { {} } }, {}, { { 'a' } }, { { 'b' } }, { { 'c' } }, { { 'd' } }, { { 'e' } } };\n REF_VAL(struct_05_04) = { {}, {}, 'a', {}, 'b', {}, 'c', {}, 'd', {}, 'e' };\n \n+#ifdef __cplusplus\n+\n+/* Initialise static members.  */\n+tB struct_static_02_01::sa::sb::b = '1';\n+tA struct_static_02_02::a = '2';\n+tB struct_static_02_03::sa::sb::b = '3';\n+tA struct_static_02_04::a = '4';\n+tA struct_static_04_01::sa::sb::a = '5';\n+tA struct_static_04_02::c = '6';\n+tB struct_static_04_02::d = '7';\n+tA struct_static_04_03::sa::sb::a = '8';\n+tB struct_static_04_03::sc::sd::b = '9';\n+tA struct_static_04_03::se::sf::c = '0';\n+tB struct_static_04_03::sg::sh::d = 'A';\n+tB struct_static_04_04::d = 'B';\n+tB struct_static_06_01::sa::sb::b = 'C';\n+tB struct_static_06_02::b = 'D';\n+tA struct_static_06_02::c = 'E';\n+tA struct_static_06_03::sa::sb::a = 'F';\n+tA struct_static_06_03::se::sf::c = 'G';\n+tB struct_static_06_03::sg::sh::d = 'H';\n+tA struct_static_06_04::a = 'I';\n+tB struct_static_06_04::b = 'J';\n+tA struct_static_06_04::c = 'K';\n+tB struct_static_06_04::d = 'L';\n+tA struct_static_06_04::e = 'M';\n+\n+REF_VAL(struct_static_02_01) = { { { 'a' } } };\n+REF_VAL(struct_static_02_02) = { { { {} } }, 'b' };\n+REF_VAL(struct_static_02_03) = { { { {} } }, {}, { { 'a' } }, { { } } };\n+REF_VAL(struct_static_02_04) = { 'b' };\n+REF_VAL(struct_static_04_01) = { { { 'b', 'c', 'd' } } };\n+REF_VAL(struct_static_04_02) = { 'a', { { {} } }, 'b', { { {} } }, { { {} } } };\n+REF_VAL(struct_static_04_03) = {};\n+REF_VAL(struct_static_04_04) = { {}, {}, 'a', {}, 'b', {}, 'c', {} };\n+REF_VAL(struct_static_06_01) = { { { 'a', 'c', 'd', 'e' } }, 'f' };\n+REF_VAL(struct_static_06_02) = { 'a', 'd', 'e', 'f' };\n+REF_VAL(struct_static_06_03) = { { { {} } }, {}, {}, { { 'b' } }, {}, /*{ { 'e', 'f' } }*/ };\n+REF_VAL(struct_static_06_04) = { {}, {}, {}, {}, {}, {}, {}, 'f' };\n+\n+#endif\n+\n /* Create all of the functions GDB will call to check functionality.  */\n MAKE_CHECK_FUNCS(struct_01_01)\n MAKE_CHECK_FUNCS(struct_01_02)\n@@ -188,6 +333,20 @@ MAKE_CHECK_FUNCS(struct_05_01)\n MAKE_CHECK_FUNCS(struct_05_02)\n MAKE_CHECK_FUNCS(struct_05_03)\n MAKE_CHECK_FUNCS(struct_05_04)\n+#ifdef __cplusplus\n+MAKE_CHECK_FUNCS(struct_static_02_01)\n+MAKE_CHECK_FUNCS(struct_static_02_02)\n+MAKE_CHECK_FUNCS(struct_static_02_03)\n+MAKE_CHECK_FUNCS(struct_static_02_04)\n+MAKE_CHECK_FUNCS(struct_static_04_01)\n+MAKE_CHECK_FUNCS(struct_static_04_02)\n+MAKE_CHECK_FUNCS(struct_static_04_03)\n+MAKE_CHECK_FUNCS(struct_static_04_04)\n+MAKE_CHECK_FUNCS(struct_static_06_01)\n+MAKE_CHECK_FUNCS(struct_static_06_02)\n+MAKE_CHECK_FUNCS(struct_static_06_03)\n+MAKE_CHECK_FUNCS(struct_static_06_04)\n+#endif\n \n #define CALL_LINE(NAME) val += check_arg_ ## NAME (rtn_str_ ## NAME ())\n \n@@ -212,6 +371,20 @@ call_all ()\n   CALL_LINE(struct_05_02);\n   CALL_LINE(struct_05_03);\n   CALL_LINE(struct_05_04);\n+#ifdef __cplusplus\n+  CALL_LINE(struct_static_02_01);\n+  CALL_LINE(struct_static_02_02);\n+  CALL_LINE(struct_static_02_03);\n+  CALL_LINE(struct_static_02_04);\n+  CALL_LINE(struct_static_04_01);\n+  CALL_LINE(struct_static_04_02);\n+  CALL_LINE(struct_static_04_03);\n+  CALL_LINE(struct_static_04_04);\n+  CALL_LINE(struct_static_06_01);\n+  CALL_LINE(struct_static_06_02);\n+  CALL_LINE(struct_static_06_03);\n+  CALL_LINE(struct_static_06_04);\n+#endif\n \n   return (val != 4);\n }"
    },
    {
      "sha": "f5fbf44ed165f05cb8dfcd2d99d9397a57e6bec0",
      "filename": "gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/353229bf405113e6ba2fe21f2a691bc63aa94bd8/gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/infcall-nested-structs.exp?ref=353229bf405113e6ba2fe21f2a691bc63aa94bd8",
      "patch": "@@ -122,13 +122,25 @@ proc run_tests { lang types } {\n     foreach {name} {struct_01_01 struct_01_02 struct_01_03 struct_01_04\n                     struct_02_01 struct_02_02 struct_02_03 struct_02_04\n                     struct_04_01 struct_04_02 struct_04_03 struct_04_04\n-                    struct_05_01 struct_05_02 struct_05_03 struct_05_04} {\n+                    struct_05_01 struct_05_02 struct_05_03 struct_05_04\n+                    struct_static_02_01 struct_static_02_02 struct_static_02_03 struct_static_02_04\n+                    struct_static_04_01 struct_static_04_02 struct_static_04_03 struct_static_04_04\n+                    struct_static_06_01 struct_static_06_02 struct_static_06_03 struct_static_06_04} {\n+\n+\t# Only run static member tests on C++\n+\tif { $lang == \"c\" && [regexp \"static\" $name match] } {\n+\t    continue\n+\t}\n \n-\tif { ( $lang == \"c++\"\n-\t       && ( ( [regexp \"struct_01_0(1|2|3)\" $name match] && [regexp \"^types-(td($|-)|tl(|l)(|-tf|-td|-tld)$)\" $types match] )\n-\t\t    || ( $name == \"struct_01_02\" && $types == \"types-tfc\" )\n-\t\t    || ( $name == \"struct_01_04\" && [regexp \"^types-(tf($|-)|ti(|-tf|-td|-tld)$)\" $types match] )\n-\t\t    || ( $name == \"struct_02_01\" && [regexp \"^types-tf-t(c|s|i)\" $types match] ) ) ) } {\n+\tif { $lang == \"c++\"\n+\t     && ( ( [regexp \"struct_01_0(1|2|3)\" $name match] && [regexp \"^types-(td($|-)|tl(|l)(|-tf|-td|-tld)$)\" $types match] )\n+\t\t  || ( $name == \"struct_01_02\" && $types == \"types-tfc\" )\n+\t\t  || ( $name == \"struct_01_04\" && [regexp \"^types-(tf($|-)|ti(|-tf|-td|-tld)$)\" $types match] )\n+\t\t  || ( $name == \"struct_02_01\" && [regexp \"^types-tf-t(c|s|i)\" $types match] )\n+\t\t  || ( $name == \"struct_static_02_02\" && [regexp \"^types-(t(f|d|ld)-t(d|l|ll)$|t(d|l|ll)$|t(c|s|i|l|ll)-td)\" $types match] )\n+\t\t  || ( $name == \"struct_static_02_03\" && [regexp \"^types-(ti-t(f|l|d|)|tf(-|$)|ti$)\" $types match] )\n+\t\t  || ( $name == \"struct_static_04_02\" && [regexp \"^types-(t(c|s)-tf|tf-ts)\" $types match] )\n+\t\t  || ( $name == \"struct_static_06_04\" && ![regexp \"^types-(t(c|dc|ldc|ld)$|t.-tld|tl(l|d)-tld|t(f|d|ld)-tc)\" $types match] ) ) } {\n \t    setup_xfail gdb/24104 \"x86_64-*-linux*\"\n \t}\n \tgdb_test \"p/d check_arg_${name} (ref_val_${name})\" \"= 1\""
    }
  ]
}