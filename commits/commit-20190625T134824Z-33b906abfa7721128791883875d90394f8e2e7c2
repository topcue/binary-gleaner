{
  "sha": "33b906abfa7721128791883875d90394f8e2e7c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzNiOTA2YWJmYTc3MjExMjg3OTE4ODM4NzVkOTAzOTRmOGUyZTdjMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T16:13:13Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:24Z"
    },
    "message": "Create subclasses for different window types\n\nThis changes the TUI so that each different major window type has its\nown subclass.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-data.h (struct tui_win_info): Make constructor\n\tprotected.  Make destructor virtual.  Add initializers.\n\t(tui_source_window, tui_data_window, tui_cmd_window): New\n\tclasses.\n\t* tui/tui-data.c (tui_win_info): Rename from init_win_info.  Now a\n\tconstructor.  Add \"type\" parameter.\n\t(tui_source_window, tui_data_window, tui_cmd_window): New\n\tconstructors.\n\t(tui_alloc_win_info): Instantiate the appropriate subclass.",
    "tree": {
      "sha": "9a70d1592112232a2d178afe1beea0bc3d28ea58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9a70d1592112232a2d178afe1beea0bc3d28ea58"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/33b906abfa7721128791883875d90394f8e2e7c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33b906abfa7721128791883875d90394f8e2e7c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/33b906abfa7721128791883875d90394f8e2e7c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33b906abfa7721128791883875d90394f8e2e7c2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7e11af42dca6482302833c4106974176aa66052",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7e11af42dca6482302833c4106974176aa66052",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7e11af42dca6482302833c4106974176aa66052"
    }
  ],
  "stats": {
    "total": 126,
    "additions": 86,
    "deletions": 40
  },
  "files": [
    {
      "sha": "d01d1184d9225a93f1c8efda2da27a99586a031e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33b906abfa7721128791883875d90394f8e2e7c2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33b906abfa7721128791883875d90394f8e2e7c2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=33b906abfa7721128791883875d90394f8e2e7c2",
      "patch": "@@ -1,3 +1,15 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-data.h (struct tui_win_info): Make constructor\n+\tprotected.  Make destructor virtual.  Add initializers.\n+\t(tui_source_window, tui_data_window, tui_cmd_window): New\n+\tclasses.\n+\t* tui/tui-data.c (tui_win_info): Rename from init_win_info.  Now a\n+\tconstructor.  Add \"type\" parameter.\n+\t(tui_source_window, tui_data_window, tui_cmd_window): New\n+\tconstructors.\n+\t(tui_alloc_win_info): Instantiate the appropriate subclass.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (tui_resize_all): Use delete."
    },
    {
      "sha": "3320b4fc62a18da3d46690e30b58af4fe509f43f",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 44,
      "deletions": 32,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33b906abfa7721128791883875d90394f8e2e7c2/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33b906abfa7721128791883875d90394f8e2e7c2/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=33b906abfa7721128791883875d90394f8e2e7c2",
      "patch": "@@ -495,47 +495,59 @@ init_content_element (struct tui_win_element *element,\n     }\n }\n \n-static void\n-init_win_info (struct tui_win_info *win_info)\n+tui_win_info::tui_win_info (enum tui_win_type type)\n {\n-  tui_init_generic_part (&win_info->generic);\n-  win_info->can_highlight =\n-    win_info->is_highlighted = FALSE;\n-  switch (win_info->generic.type)\n-    {\n-    case SRC_WIN:\n-    case DISASSEM_WIN:\n-      win_info->detail.source_info.execution_info = NULL;\n-      win_info->detail.source_info.has_locator = FALSE;\n-      win_info->detail.source_info.horizontal_offset = 0;\n-      win_info->detail.source_info.gdbarch = NULL;\n-      win_info->detail.source_info.start_line_or_addr.loa = LOA_ADDRESS;\n-      win_info->detail.source_info.start_line_or_addr.u.addr = 0;\n-      win_info->detail.source_info.fullname = NULL;\n-      break;\n-    case DATA_WIN:\n-      win_info->detail.data_display_info.data_content = NULL;\n-      win_info->detail.data_display_info.data_content_count = 0;\n-      win_info->detail.data_display_info.regs_content = NULL;\n-      win_info->detail.data_display_info.regs_content_count = 0;\n-      win_info->detail.data_display_info.regs_column_count = 1;\n-      win_info->detail.data_display_info.display_regs = FALSE;\n-      win_info->detail.data_display_info.current_group = 0;\n-      break;\n-    case CMD_WIN:\n-      break;\n-    }\n+  generic.type = type;\n+  tui_init_generic_part (&generic);\n }\n \n+tui_source_window::tui_source_window (enum tui_win_type type)\n+  : tui_win_info (type)\n+{\n+  gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n+  detail.source_info.execution_info = NULL;\n+  detail.source_info.has_locator = FALSE;\n+  detail.source_info.horizontal_offset = 0;\n+  detail.source_info.gdbarch = NULL;\n+  detail.source_info.start_line_or_addr.loa = LOA_ADDRESS;\n+  detail.source_info.start_line_or_addr.u.addr = 0;\n+  detail.source_info.fullname = NULL;\n+}\n+\n+tui_data_window::tui_data_window ()\n+  : tui_win_info (DATA_WIN)\n+{\n+  detail.data_display_info.data_content = (tui_win_content) NULL;\n+  detail.data_display_info.data_content_count = 0;\n+  detail.data_display_info.regs_content = (tui_win_content) NULL;\n+  detail.data_display_info.regs_content_count = 0;\n+  detail.data_display_info.regs_column_count = 1;\n+  detail.data_display_info.display_regs = FALSE;\n+  detail.data_display_info.current_group = 0;\n+}\n+\n+tui_cmd_window::tui_cmd_window ()\n+  : tui_win_info (CMD_WIN)\n+{\n+}\n \n struct tui_win_info *\n tui_alloc_win_info (enum tui_win_type type)\n {\n-  struct tui_win_info *win_info = new struct tui_win_info (type);\n+  switch (type)\n+    {\n+    case SRC_WIN:\n+    case DISASSEM_WIN:\n+      return new tui_source_window (type);\n \n-  init_win_info (win_info);\n+    case DATA_WIN:\n+      return new tui_data_window ();\n \n-  return win_info;\n+    case CMD_WIN:\n+      return new tui_cmd_window ();\n+    }\n+\n+  gdb_assert_not_reached (_(\"Unhandled window type\"));\n }\n \n "
    },
    {
      "sha": "1627625950940f0f2fc6e195c5fbf1237398eff3",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 30,
      "deletions": 8,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33b906abfa7721128791883875d90394f8e2e7c2/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33b906abfa7721128791883875d90394f8e2e7c2/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=33b906abfa7721128791883875d90394f8e2e7c2",
      "patch": "@@ -271,15 +271,15 @@ struct tui_command_info\n /* This defines information about each logical window.  */\n struct tui_win_info\n {\n-  explicit tui_win_info (enum tui_win_type type)\n-  {\n-    generic.type = type;\n-  }\n-\n-  ~tui_win_info ();\n+protected:\n \n+  explicit tui_win_info (enum tui_win_type type);\n   DISABLE_COPY_AND_ASSIGN (tui_win_info);\n \n+public:\n+\n+  virtual ~tui_win_info ();\n+\n   struct tui_gen_win_info generic;\t/* General window information.  */\n   union\n   {\n@@ -288,8 +288,30 @@ struct tui_win_info\n     struct tui_command_info command_info;\n   }\n   detail;\n-  int can_highlight;\t/* Can this window ever be highlighted?  */\n-  int is_highlighted;\t/* Is this window highlighted?  */\n+\n+  /* Can this window ever be highlighted?  */\n+  int can_highlight = 0;\n+\n+  /* Is this window highlighted?  */\n+  int is_highlighted = 0;\n+};\n+\n+struct tui_source_window : public tui_win_info\n+{\n+  explicit tui_source_window (enum tui_win_type type);\n+  DISABLE_COPY_AND_ASSIGN (tui_source_window);\n+};\n+\n+struct tui_data_window : public tui_win_info\n+{\n+  tui_data_window ();\n+  DISABLE_COPY_AND_ASSIGN (tui_data_window);\n+};\n+\n+struct tui_cmd_window : public tui_win_info\n+{\n+  tui_cmd_window ();\n+  DISABLE_COPY_AND_ASSIGN (tui_cmd_window);\n };\n \n extern int tui_win_is_source_type (enum tui_win_type win_type);"
    }
  ]
}