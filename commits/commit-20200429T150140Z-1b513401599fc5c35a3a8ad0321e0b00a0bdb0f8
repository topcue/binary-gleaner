{
  "sha": "1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI1MTM0MDE1OTlmYzVjMzVhM2E4YWQwMzIxZTBiMDBhMGJkYjBmOA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-04-29T15:01:40Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-04-29T15:01:40Z"
    },
    "message": "Add a warning if an emtpty SHT_REL, SHT_RELA or SHT_PROGBITS section is detected.  Disable all warnings unless the (new) lint mode is enabled.\n\n\t* readelf.c (warn): New function - like elfcomm.c version but only\n\tproduces output if warnings are enabled.\n\t(struct options): Add --lint and --enable-checks.\n\t(usage): Add entry for --lint.\n\t(parse_args): Handle -L.  If checks are enabled but no dumps have\n\tbeen selected then enable all dumps.\n\t(process_section_headers): Replace long if-then-else sequence with\n\ta switch.  Add warning messages for empty SHT_REL, SHT_RELA and\n\tSHT_PROGBITS sections.\n\t(process_file): Do not complain if the file is an archive and lint\n\tmode has been enabled.\n\t* elfcomm.c (error): Make the function weak.\n\t(warn): Likewise.\n\t* NEWS: Mention the new feature.\n\t* doc/binutils.texi: Document the new feature.\n\t* dwarf.h (report_leb_status): Add file name and line number\n\tparameters.  Include them in the diagnostic output.\n\t(READ_ULEB): Pass file and line number to report_leb_status.\n\t(READ_SLEB): Likewise.\n\t* dwarf.c (read_and_print_leb128): Pass file and line number to\n\treport_leb_status.\n\t* testsuite/binutils-all/readelf.exp: Add test of new feature.\n\t* testsuite/binutils-all/zero-sec.s: New test source file.\n\t* testsuite/binutils-all/zero-sec.r: Expected output from new\n\ttest.",
    "tree": {
      "sha": "60828bb944219b8162057ef6b1a843982045cce5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/60828bb944219b8162057ef6b1a843982045cce5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc49bc72378b4402ca60baa5ff65f1392c92c279",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc49bc72378b4402ca60baa5ff65f1392c92c279",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc49bc72378b4402ca60baa5ff65f1392c92c279"
    }
  ],
  "stats": {
    "total": 254,
    "additions": 201,
    "deletions": 53
  },
  "files": [
    {
      "sha": "048a9721a2583fe930946f555c58d8e6c16d882c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -1,3 +1,31 @@\n+2020-04-29  Nick Clifton  <nickc@redhat.com>\n+\n+\t* readelf.c (warn): New function - like elfcomm.c version but only\n+\tproduces output if warnings are enabled.\n+\t(struct options): Add --lint and --enable-checks.\n+\t(usage): Add entry for --lint.\n+\t(parse_args): Handle -L.  If checks are enabled but no dumps have\n+\tbeen selected then enable all dumps.\n+\t(process_section_headers): Replace long if-then-else sequence with\n+\ta switch.  Add warning messages for empty SHT_REL, SHT_RELA and\n+\tSHT_PROGBITS sections.\n+\t(process_file): Do not complain if the file is an archive and lint\n+\tmode has been enabled.\n+\t* elfcomm.c (error): Make the function weak.\n+\t(warn): Likewise.\n+\t* NEWS: Mention the new feature.\n+\t* doc/binutils.texi: Document the new feature.\n+\t* dwarf.h (report_leb_status): Add file name and line number\n+\tparameters.  Include them in the diagnostic output.\n+\t(READ_ULEB): Pass file and line number to report_leb_status.\n+\t(READ_SLEB): Likewise.\n+\t* dwarf.c (read_and_print_leb128): Pass file and line number to\n+\treport_leb_status.\n+\t* testsuite/binutils-all/readelf.exp: Add test of new feature.\n+\t* testsuite/binutils-all/zero-sec.s: New test source file.\n+\t* testsuite/binutils-all/zero-sec.r: Expected output from new\n+\ttest.\n+\n 2020-04-29  Nick Clifton  <nickc@redhat.com>\n \n \t* po/sr.po: Updated Serbian translation."
    },
    {
      "sha": "e1aaf996e8992c54558adfe45b2d330efec80cca",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -1,5 +1,11 @@\n -*- text -*-\n \n+* The readelf tool now has a -L or --lint or --enable-checks option which turns\n+  on warning messages about possible problems with the file(s) being examined.\n+  These checks include things like zero-sized sections, which are allowed by\n+  the ELF standard but which nevertheless might be of concern if the user\n+  was expecting them to actually contain something.\n+\n Changes in 2.34:\n \n * Binutils now supports debuginfod, an HTTP server for distributing"
    },
    {
      "sha": "9a3a40f14765f1c47edb4077cc8d08f3a27e7bed",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -4706,6 +4706,7 @@ readelf [@option{-a}|@option{--all}]\n         [@option{-V}|@option{--version-info}]\n         [@option{-A}|@option{--arch-specific}]\n         [@option{-D}|@option{--use-dynamic}]\n+        [@option{-L}|@option{--lint}|@option{--enable-checks}]\n         [@option{-x} <number or name>|@option{--hex-dump=}<number or name>]\n         [@option{-p} <number or name>|@option{--string-dump=}<number or name>]\n         [@option{-R} <number or name>|@option{--relocated-dump=}<number or name>]\n@@ -4862,6 +4863,15 @@ symbol table sections.\n When displaying relocations, this option makes @command{readelf}\n display the dynamic relocations rather than the static relocations.\n \n+@item -L\n+@itemx --lint\n+@itemx --enable-checks\n+Displays warning messages about possible problems with the file(s)\n+being examined.  If used on its own then all of the contents of the\n+file(s) will be examined.  If used with one of the dumping options\n+then the warning messages will only be produced for the things being\n+displayed.\n+\n @item -x <number or name>\n @itemx --hex-dump=<number or name>\n Displays the contents of the indicated section as a hexadecimal bytes."
    },
    {
      "sha": "675b4d016fd0777af4dc8a05424f8190d9d32a74",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -2008,7 +2008,7 @@ read_and_print_leb128 (unsigned char *        data,\n   int status;\n   dwarf_vma val = read_leb128 (data, end, is_signed, bytes_read, &status);\n   if (status != 0)\n-    report_leb_status (status);\n+    report_leb_status (status, __FILE__, __LINE__);\n   else\n     printf (\"%s\", dwarf_vmatoa (is_signed ? \"d\" : \"u\", val));\n }"
    },
    {
      "sha": "27f8a51521e3f66208f00a5d817e13ffad6be918",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -263,12 +263,12 @@ extern unsigned char * get_build_id (void *);\n #endif\n \n static inline void\n-report_leb_status (int status)\n+report_leb_status (int status, const char *file, unsigned long lnum)\n {\n   if ((status & 1) != 0)\n-    error (_(\"LEB end of data\\n\"));\n+    error (_(\"%s:%lu: end of data encountered whilst reading LEB\\n\"), file, lnum);\n   else if ((status & 2) != 0)\n-    error (_(\"LEB value too large\\n\"));\n+    error (_(\"%s:%lu: read LEB value is too large to store in destination variable\\n\"), file, lnum);\n }\n \n #define SKIP_ULEB(start, end)\t\t\t\t\t\\\n@@ -277,15 +277,17 @@ report_leb_status (int status)\n       unsigned int _len;\t\t\t\t\t\\\n       read_leb128 (start, end, FALSE, &_len, NULL);\t\t\\\n       start += _len;\t\t\t\t\t\t\\\n-    } while (0)\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #define SKIP_SLEB(start, end)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       unsigned int _len;\t\t\t\t\t\\\n       read_leb128 (start, end, TRUE, &_len, NULL);\t\t\\\n       start += _len;\t\t\t\t\t\t\\\n-    } while (0)\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #define READ_ULEB(var, start, end)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -299,8 +301,9 @@ report_leb_status (int status)\n       (var) = _val;\t\t\t\t\t\t\\\n       if ((var) != _val)\t\t\t\t\t\\\n \t_status |= 2;\t\t\t\t\t\t\\\n-      report_leb_status (_status);\t\t\t\t\\\n-    } while (0)\n+      report_leb_status (_status, __FILE__, __LINE__);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n \n #define READ_SLEB(var, start, end)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -314,5 +317,6 @@ report_leb_status (int status)\n       (var) = _val;\t\t\t\t\t\t\\\n       if ((var) != _val)\t\t\t\t\t\\\n \t_status |= 2;\t\t\t\t\t\t\\\n-      report_leb_status (_status);\t\t\t\t\\\n-    } while (0)\n+      report_leb_status (_status, __FILE__, __LINE__);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)"
    },
    {
      "sha": "fc47b40757f2db1b5f48224862b428bccddbc3eb",
      "filename": "binutils/elfcomm.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/elfcomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/elfcomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.c?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -34,6 +34,15 @@\n \n extern char *program_name;\n \n+/* FIXME:  This definition really ought to be in ansidecl.h.  */\n+#ifndef ATTRIBUTE_WEAK\n+#define ATTRIBUTE_WEAK __attribute__((weak))\n+#endif\n+\n+/* Allow the following two functions to be overridden if desired.  */\n+void error (const char *, ...) ATTRIBUTE_WEAK;\n+void warn (const char *, ...) ATTRIBUTE_WEAK;\n+\n void\n error (const char *message, ...)\n {"
    },
    {
      "sha": "4ceb6b2151f2c96b130ffc5a421114818a42484f",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 119,
      "deletions": 43,
      "changes": 162,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -199,7 +199,8 @@ struct dump_list_entry\n \n /* A dynamic array of flags indicating for which sections a dump\n    has been requested via command line switches.  */\n-struct dump_data {\n+struct dump_data\n+{\n   dump_type *          dump_sects;\n   unsigned int         num_dump_sects;\n };\n@@ -230,6 +231,8 @@ static bfd_boolean do_ctf = FALSE;\n static bfd_boolean do_arch = FALSE;\n static bfd_boolean do_notes = FALSE;\n static bfd_boolean do_archive_index = FALSE;\n+static bfd_boolean do_checks = FALSE;\n+static bfd_boolean check_all = FALSE;\n static bfd_boolean is_32bit_elf = FALSE;\n static bfd_boolean decompress_dumps = FALSE;\n \n@@ -384,6 +387,25 @@ bfd_vmatoa (char *fmtch, bfd_vma value)\n   return ret;\n }\n \n+/* A version of the warn() function that is disabled if do_checks is not active.  */\n+\n+void\n+warn (const char *message, ...)\n+{\n+  va_list args;\n+\n+  if (!do_checks)\n+    return;\n+\n+  /* Try to keep warning messages in sync with the program's normal output.  */\n+  fflush (stdout);\n+\n+  va_start (args, message);\n+  fprintf (stderr, _(\"%s: Warning: \"), program_name);\n+  vfprintf (stderr, message, args);\n+  va_end (args);\n+}\n+\n /* Retrieve NMEMB structures, each SIZE bytes long from FILEDATA starting at\n    OFFSET + the offset of the current archive member, if we are examining an\n    archive.  Put the retrieved data into VAR, if it is not NULL.  Otherwise\n@@ -4478,6 +4500,8 @@ static struct option options[] =\n   {\"relocs\",\t       no_argument, 0, 'r'},\n   {\"notes\",\t       no_argument, 0, 'n'},\n   {\"dynamic\",\t       no_argument, 0, 'd'},\n+  {\"lint\",             no_argument, 0, 'L'},\n+  {\"enable-checks\",    no_argument, 0, 'L'},\n   {\"arch-specific\",    no_argument, 0, 'A'},\n   {\"version-info\",     no_argument, 0, 'V'},\n   {\"use-dynamic\",      no_argument, 0, 'D'},\n@@ -4525,7 +4549,7 @@ usage (FILE * stream)\n   -e --headers           Equivalent to: -h -l -S\\n\\\n   -s --syms              Display the symbol table\\n\\\n      --symbols           An alias for --syms\\n\\\n-  --dyn-syms             Display the dynamic symbol table\\n\\\n+     --dyn-syms          Display the dynamic symbol table\\n\\\n   -n --notes             Display the core notes (if present)\\n\\\n   -r --relocs            Display the relocations (if present)\\n\\\n   -u --unwind            Display the unwind info (if present)\\n\\\n@@ -4534,6 +4558,7 @@ usage (FILE * stream)\n   -A --arch-specific     Display architecture specific information (if any)\\n\\\n   -c --archive-index     Display the symbol/file index in an archive\\n\\\n   -D --use-dynamic       Use the dynamic section info when displaying symbols\\n\\\n+  -L --lint|--enable-checks  Display warning messages for possible problems\\n\\\n   -x --hex-dump=<number|name>\\n\\\n                          Dump the contents of section <number|name> as bytes\\n\\\n   -p --string-dump=<number|name>\\n\\\n@@ -4662,7 +4687,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n     usage (stderr);\n \n   while ((c = getopt_long\n-\t  (argc, argv, \"ADHINR:SVWacdeghi:lnp:rstuvw::x:z\", options, NULL)) != EOF)\n+\t  (argc, argv, \"ADHILNR:SVWacdeghi:lnp:rstuvw::x:z\", options, NULL)) != EOF)\n     {\n       switch (c)\n \t{\n@@ -4736,6 +4761,9 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \tcase 'c':\n \t  do_archive_index = TRUE;\n \t  break;\n+\tcase 'L':\n+\t  do_checks = TRUE;\n+\t  break;\n \tcase 'x':\n \t  request_dump (dumpdata, HEX_DUMP);\n \t  break;\n@@ -4832,7 +4860,18 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n       && !do_histogram && !do_debugging && !do_arch && !do_notes\n       && !do_section_groups && !do_archive_index\n       && !do_dyn_syms)\n-    usage (stderr);\n+    {\n+      if (do_checks)\n+\t{\n+\t  check_all = TRUE;\n+\t  do_dynamic = do_syms = do_reloc = do_unwind = do_sections = TRUE;\n+\t  do_segments = do_header = do_dump = do_version = TRUE;\n+\t  do_histogram = do_debugging = do_arch = do_notes = TRUE;\n+\t  do_section_groups = do_archive_index = do_dyn_syms = TRUE;\n+\t}\n+      else\n+\tusage (stderr);\n+    }\n }\n \n static const char *\n@@ -6277,7 +6316,7 @@ process_section_headers (Filedata * filedata)\n   while (0)\n \n #define CHECK_ENTSIZE(section, i, type)\t\t\t\t\t\\\n-  CHECK_ENTSIZE_VALUES (section, i, sizeof (Elf32_External_##type),\t    \\\n+  CHECK_ENTSIZE_VALUES (section, i, sizeof (Elf32_External_##type),\t\\\n \t\t\tsizeof (Elf64_External_##type))\n \n   for (i = 0, section = filedata->section_headers;\n@@ -6286,8 +6325,11 @@ process_section_headers (Filedata * filedata)\n     {\n       char * name = SECTION_NAME (section);\n \n-      if (section->sh_type == SHT_DYNSYM)\n+      /* Run some sanity checks on the headers and\n+\t possibly fill in some file data as well.  */\n+      switch (section->sh_type)\n \t{\n+\tcase SHT_DYNSYM:\n \t  if (filedata->dynamic_symbols != NULL)\n \t    {\n \t      error (_(\"File contains multiple dynamic symbol tables\\n\"));\n@@ -6297,45 +6339,74 @@ process_section_headers (Filedata * filedata)\n \t  CHECK_ENTSIZE (section, i, Sym);\n \t  filedata->dynamic_symbols\n \t    = GET_ELF_SYMBOLS (filedata, section, &filedata->num_dynamic_syms);\n-\t}\n-      else if (section->sh_type == SHT_STRTAB\n-\t       && streq (name, \".dynstr\"))\n-\t{\n-\t  if (filedata->dynamic_strings != NULL)\n+\t  break;\n+\n+\tcase SHT_STRTAB:\n+\t  if (streq (name, \".dynstr\"))\n \t    {\n-\t      error (_(\"File contains multiple dynamic string tables\\n\"));\n-\t      continue;\n+\t      if (filedata->dynamic_strings != NULL)\n+\t\t{\n+\t\t  error (_(\"File contains multiple dynamic string tables\\n\"));\n+\t\t  continue;\n+\t\t}\n+\n+\t      filedata->dynamic_strings\n+\t\t= (char *) get_data (NULL, filedata, section->sh_offset,\n+\t\t\t\t     1, section->sh_size, _(\"dynamic strings\"));\n+\t      filedata->dynamic_strings_length\n+\t\t= filedata->dynamic_strings == NULL ? 0 : section->sh_size;\n \t    }\n+\t  break;\n+\n+\tcase SHT_SYMTAB_SHNDX:\n+\t  {\n+\t    elf_section_list * entry = xmalloc (sizeof * entry);\n+\n+\t    entry->hdr = section;\n+\t    entry->next = filedata->symtab_shndx_list;\n+\t    filedata->symtab_shndx_list = entry;\n+\t  }\n+\t  break;\n+\n+\tcase SHT_SYMTAB:\n+\t  CHECK_ENTSIZE (section, i, Sym);\n+\t  break;\n+\n+\tcase SHT_GROUP:\n+\t  CHECK_ENTSIZE_VALUES (section, i, GRP_ENTRY_SIZE, GRP_ENTRY_SIZE);\n+\t  break;\n \n-\t  filedata->dynamic_strings\n-\t    = (char *) get_data (NULL, filedata, section->sh_offset,\n-\t\t\t\t 1, section->sh_size, _(\"dynamic strings\"));\n-\t  filedata->dynamic_strings_length\n-\t    = filedata->dynamic_strings == NULL ? 0 : section->sh_size;\n-\t}\n-      else if (section->sh_type == SHT_SYMTAB_SHNDX)\n-\t{\n-\t  elf_section_list * entry = xmalloc (sizeof * entry);\n-\n-\t  entry->hdr = section;\n-\t  entry->next = filedata->symtab_shndx_list;\n-\t  filedata->symtab_shndx_list = entry;\n-\t}\n-      else if (section->sh_type == SHT_SYMTAB)\n-\tCHECK_ENTSIZE (section, i, Sym);\n-      else if (section->sh_type == SHT_GROUP)\n-\tCHECK_ENTSIZE_VALUES (section, i, GRP_ENTRY_SIZE, GRP_ENTRY_SIZE);\n-      else if (section->sh_type == SHT_REL)\n-\tCHECK_ENTSIZE (section, i, Rel);\n-      else if (section->sh_type == SHT_RELA)\n-\tCHECK_ENTSIZE (section, i, Rela);\n-      else if ((do_debugging || do_debug_info || do_debug_abbrevs\n-\t\t|| do_debug_lines || do_debug_pubnames || do_debug_pubtypes\n-\t\t|| do_debug_aranges || do_debug_frames || do_debug_macinfo\n-\t\t|| do_debug_str || do_debug_loc || do_debug_ranges\n-\t\t|| do_debug_addr || do_debug_cu_index || do_debug_links)\n-\t       && (const_strneq (name, \".debug_\")\n-                   || const_strneq (name, \".zdebug_\")))\n+\tcase SHT_REL:\n+\t  CHECK_ENTSIZE (section, i, Rel);\n+\t  if (section->sh_size == 0)\n+\t    warn (_(\"Section '%s': zero-sized relocation section\\n\"), name);\n+\t  break;\n+\n+\tcase SHT_RELA:\n+\t  CHECK_ENTSIZE (section, i, Rela);\n+\t  if (section->sh_size == 0)\n+\t    warn (_(\"Section '%s': zero-sized relocation section\\n\"), name);\n+\t  break;\n+\n+\tcase SHT_NOTE:\n+\tcase SHT_PROGBITS:\n+\t  if (section->sh_size == 0)\n+\t    /* This is not illegal according to the ELF standard, but\n+\t       it might be an indication that something is wrong.  */\n+\t    warn (_(\"Section '%s': has a size of zero - is this intended ?\\n\"), name);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      if ((do_debugging || do_debug_info || do_debug_abbrevs\n+\t   || do_debug_lines || do_debug_pubnames || do_debug_pubtypes\n+\t   || do_debug_aranges || do_debug_frames || do_debug_macinfo\n+\t   || do_debug_str || do_debug_loc || do_debug_ranges\n+\t   || do_debug_addr || do_debug_cu_index || do_debug_links)\n+\t  && (const_strneq (name, \".debug_\")\n+\t      || const_strneq (name, \".zdebug_\")))\n \t{\n           if (name[1] == 'z')\n             name += sizeof (\".zdebug_\") - 1;\n@@ -20646,7 +20717,7 @@ process_file (char * file_name)\n     }\n   else\n     {\n-      if (do_archive_index)\n+      if (do_archive_index && !check_all)\n \terror (_(\"File %s is not an archive so its index cannot be displayed.\\n\"),\n \t       file_name);\n \n@@ -20712,9 +20783,14 @@ main (int argc, char ** argv)\n   parse_args (& cmdline, argc, argv);\n \n   if (optind < (argc - 1))\n+    /* When displaying information for more than one file,\n+       prefix the information with the file name.  */\n     show_name = TRUE;\n   else if (optind >= argc)\n     {\n+      /* Ensure that the warning is always displayed.  */\n+      do_checks = TRUE;\n+\n       warn (_(\"Nothing to do.\\n\"));\n       usage (stderr);\n     }"
    },
    {
      "sha": "6b385fda2d63e61321a13f04a687a7bbb6f431d3",
      "filename": "binutils/testsuite/binutils-all/readelf.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/readelf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/readelf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.exp?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -506,4 +506,15 @@ if {![binutils_assemble $srcdir/$subdir/dwo.s tmpdir/dwo.o]} then {\n     readelf_test {--debug-dump=links} $tempfile readelf.k2  {}\n }\n \n+if {![binutils_assemble $srcdir/$subdir/zero-sec.s tmpdir/zero-sec.o]} then {\n+    unresolved \"readelf --enable-checks (failed to assemble zero-sec.s)\"\n+} else {\n+    if ![is_remote host] {\n+\tset tempfile tmpdir/zero-sec.o\n+    } else {\n+\tset tempfile [remote_download host tmpdir/zero-sec.o]\n+    }\n+\n+    readelf_test {--enable-checks --sections --wide} $tempfile zero-sec.r {}\n+}\n "
    },
    {
      "sha": "98dfdc36869318b026cf14e810c95ccb2cfaa711",
      "filename": "binutils/testsuite/binutils-all/zero-sec.r",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/zero-sec.r",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/zero-sec.r",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/zero-sec.r?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -0,0 +1,3 @@\n+#...\n+.*Warning: Section '.*': has a size of zero - is this intended.*\n+#..."
    },
    {
      "sha": "ba8de231cbd560921bd0df193ae8b99e08bcc0ce",
      "filename": "binutils/testsuite/binutils-all/zero-sec.s",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/zero-sec.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8/binutils/testsuite/binutils-all/zero-sec.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/zero-sec.s?ref=1b513401599fc5c35a3a8ad0321e0b00a0bdb0f8",
      "patch": "@@ -0,0 +1 @@\n+\t.data"
    }
  ]
}