{
  "sha": "0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14",
  "node_id": "C_kwDOANOeidoAKDBkOGNiYzVmMmZjYmNiOWViMjA3ZjEyNTA3ZmRmZTA0ZjNkM2FlMTQ",
  "commit": {
    "author": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2021-11-25T14:22:24Z"
    },
    "committer": {
      "name": "Markus Metzger",
      "email": "markus.t.metzger@intel.com",
      "date": "2022-01-27T12:31:21Z"
    },
    "message": "gdb, remote, btrace: move switch_to_thread call right before xfer call\n\nIn remote_target::remote_btrace_maybe_reopen, we switch to the currently\niterated thread in order to set inferior_ptid for a subsequent xfer.\n\nMove the switch_to_thread call directly before the target_read_stralloc\ncall to clarify why we need to switch threads.",
    "tree": {
      "sha": "f25de2cf681ae607b3afe2b65fc60fb51d36b4d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f25de2cf681ae607b3afe2b65fc60fb51d36b4d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14/comments",
  "author": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "markus-metzger",
    "id": 5424725,
    "node_id": "MDQ6VXNlcjU0MjQ3MjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5424725?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/markus-metzger",
    "html_url": "https://github.com/markus-metzger",
    "followers_url": "https://api.github.com/users/markus-metzger/followers",
    "following_url": "https://api.github.com/users/markus-metzger/following{/other_user}",
    "gists_url": "https://api.github.com/users/markus-metzger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/markus-metzger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/markus-metzger/subscriptions",
    "organizations_url": "https://api.github.com/users/markus-metzger/orgs",
    "repos_url": "https://api.github.com/users/markus-metzger/repos",
    "events_url": "https://api.github.com/users/markus-metzger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/markus-metzger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "696c0d5ef2a6edaa2094e808f53acd502a157641",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/696c0d5ef2a6edaa2094e808f53acd502a157641",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/696c0d5ef2a6edaa2094e808f53acd502a157641"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 8,
    "deletions": 9
  },
  "files": [
    {
      "sha": "49eeb63445db35644f7a96e1ae3cb0f47de0b3f1",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=0d8cbc5f2fcbcb9eb207f12507fdfe04f3d3ae14",
      "patch": "@@ -14103,12 +14103,15 @@ remote_target::btrace_sync_conf (const btrace_config *conf)\n     }\n }\n \n-/* Read the current thread's btrace configuration from the target and\n-   store it into CONF.  */\n+/* Read TP's btrace configuration from the target and store it into CONF.  */\n \n static void\n-btrace_read_config (struct btrace_config *conf)\n+btrace_read_config (thread_info *tp, struct btrace_config *conf)\n {\n+  /* target_read_stralloc relies on INFERIOR_PTID.  */\n+  scoped_restore_current_thread restore_thread;\n+  switch_to_thread (tp);\n+\n   gdb::optional<gdb::char_vector> xml\n     = target_read_stralloc (current_inferior ()->top_target (),\n \t\t\t    TARGET_OBJECT_BTRACE_CONF, \"\");\n@@ -14132,14 +14135,10 @@ remote_target::remote_btrace_maybe_reopen ()\n   if (packet_support (PACKET_qXfer_btrace_conf) != PACKET_ENABLE)\n     return;\n \n-  scoped_restore_current_thread restore_thread;\n-\n   for (thread_info *tp : all_non_exited_threads (this))\n     {\n-      switch_to_thread (tp);\n-\n       memset (&rs->btrace_config, 0x00, sizeof (struct btrace_config));\n-      btrace_read_config (&rs->btrace_config);\n+      btrace_read_config (tp, &rs->btrace_config);\n \n       if (rs->btrace_config.format == BTRACE_FORMAT_NONE)\n \tcontinue;\n@@ -14227,7 +14226,7 @@ remote_target::enable_btrace (thread_info *tp,\n      tracing itself is not impacted.  */\n   try\n     {\n-      btrace_read_config (&tinfo->conf);\n+      btrace_read_config (tp, &tinfo->conf);\n     }\n   catch (const gdb_exception_error &err)\n     {"
    }
  ]
}