{
  "sha": "162c6aef1f3a96923e75f0b4ef430822d273465c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTYyYzZhZWYxZjNhOTY5MjNlNzVmMGI0ZWY0MzA4MjJkMjczNDY1Yw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-18T11:51:52Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-18T11:51:52Z"
    },
    "message": "gas: fold symbol table entries generated for .startof.() / .sizeof.()\n\nWhen the same such construct is used multiple times in a source file,\nthere's still no need to emit a separate symbol each time. Under the\nassumption that there won't be many of these, use a simple array\nlookup method to record previously used symbols.",
    "tree": {
      "sha": "81686d89de13a729cde555aae7d4b3ac0033005d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/81686d89de13a729cde555aae7d4b3ac0033005d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/162c6aef1f3a96923e75f0b4ef430822d273465c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/162c6aef1f3a96923e75f0b4ef430822d273465c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/162c6aef1f3a96923e75f0b4ef430822d273465c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/162c6aef1f3a96923e75f0b4ef430822d273465c/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1fef66b0dcc09c9114100e782ea54594550e8fb7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fef66b0dcc09c9114100e782ea54594550e8fb7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1fef66b0dcc09c9114100e782ea54594550e8fb7"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 71,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9e61c2f3a5e95f3df58acab629dd2e38a9b7569c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=162c6aef1f3a96923e75f0b4ef430822d273465c",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-18  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* expr.c (symbol_lookup_or_make): New.\n+\t(operand): Use it.\n+\t* testsuite/gas/elf/startof.s, testsuite/gas/elf/startof.d: New.\n+\t* testsuite/gas/elf/elf.exp: Run new test.\n+\n 2021-06-17  Nick Clifton  <nickc@redhat.com>\n \n \tPR 27904"
    },
    {
      "sha": "03caa91f4d18a8f25361d8d36b4b975cc0c83840",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 47,
      "deletions": 8,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=162c6aef1f3a96923e75f0b4ef430822d273465c",
      "patch": "@@ -127,6 +127,52 @@ expr_symbol_where (symbolS *sym, const char **pfile, unsigned int *pline)\n \n   return 0;\n }\n+\n+/* Look up a previously used .startof. / .sizeof. symbol, or make a fresh\n+   one.  */\n+\n+static symbolS *\n+symbol_lookup_or_make (const char *name, bool start)\n+{\n+  static symbolS **seen[2];\n+  static unsigned int nr_seen[2];\n+  char *buf = concat (start ? \".startof.\" : \".sizeof.\", name, NULL);\n+  symbolS *symbolP;\n+  unsigned int i;\n+\n+  for (i = 0; i < nr_seen[start]; ++i)\n+    {\n+    symbolP = seen[start][i];\n+\n+    if (! symbolP)\n+      break;\n+\n+    name = S_GET_NAME (symbolP);\n+    if ((symbols_case_sensitive\n+\t ? strcasecmp (buf, name)\n+\t : strcmp (buf, name)) == 0)\n+      {\n+\tfree (buf);\n+\treturn symbolP;\n+      }\n+    }\n+\n+  symbolP = symbol_make (buf);\n+  free (buf);\n+\n+  if (i >= nr_seen[start])\n+    {\n+      unsigned int nr = (i + 1) * 2;\n+\n+      seen[start] = XRESIZEVEC (symbolS *, seen[start], nr);\n+      nr_seen[start] = nr;\n+      memset (&seen[start][i + 1], 0, (nr - i - 1) * sizeof(seen[0][0]));\n+    }\n+\n+  seen[start][i] = symbolP;\n+\n+  return symbolP;\n+}\n \f\n /* Utilities for building expressions.\n    Since complex expressions are recorded as symbols for use in other\n@@ -1159,8 +1205,6 @@ operand (expressionS *expressionP, enum expr_mode mode)\n \t    as_bad (_(\"syntax error in .startof. or .sizeof.\"));\n \t  else\n \t    {\n-\t      char *buf;\n-\n \t      ++input_line_pointer;\n \t      SKIP_WHITESPACE ();\n \t      c = get_symbol_name (& name);\n@@ -1175,13 +1219,8 @@ operand (expressionS *expressionP, enum expr_mode mode)\n \t\t  break;\n \t\t}\n \n-\t      buf = concat (start ? \".startof.\" : \".sizeof.\", name,\n-\t\t\t    (char *) NULL);\n-\t      symbolP = symbol_make (buf);\n-\t      free (buf);\n-\n \t      expressionP->X_op = O_symbol;\n-\t      expressionP->X_add_symbol = symbolP;\n+\t      expressionP->X_add_symbol = symbol_lookup_or_make (name, start);\n \t      expressionP->X_add_number = 0;\n \n \t      *input_line_pointer = c;"
    },
    {
      "sha": "23804758c5a9a451d11e2cd0ea7508c6a5a3e8e6",
      "filename": "gas/testsuite/gas/elf/elf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/elf.exp?ref=162c6aef1f3a96923e75f0b4ef430822d273465c",
      "patch": "@@ -309,6 +309,7 @@ if { [is_elf_format] } then {\n     run_dump_test \"pr27355\"\n \n     run_dump_test \"syms\"\n+    run_dump_test \"startof\"\n \n     run_dump_test \"missing-build-notes\"\n     "
    },
    {
      "sha": "9cffa93e22bdb2c44210d5600e48498f04e6e957",
      "filename": "gas/testsuite/gas/elf/startof.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/startof.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/startof.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/startof.d?ref=162c6aef1f3a96923e75f0b4ef430822d273465c",
      "patch": "@@ -0,0 +1,10 @@\n+#name: .startof. / .sizeof.\n+#readelf: -s\n+\n+Symbol table .*\n+   Num: .*\n+     0: 0+ .*\n+#...\n+     [1-8]: 0+ .* UND \\.startof\\.\\.text\n+     [2-9]: 0+ .* UND \\.sizeof\\.\\.text\n+#pass"
    },
    {
      "sha": "a90e1160dd8e0fd0b11cda96f113eafda992fb32",
      "filename": "gas/testsuite/gas/elf/startof.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/startof.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/162c6aef1f3a96923e75f0b4ef430822d273465c/gas/testsuite/gas/elf/startof.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/startof.s?ref=162c6aef1f3a96923e75f0b4ef430822d273465c",
      "patch": "@@ -0,0 +1,6 @@\n+\t.data\n+\t.dc.a\t.startof.(.text)\n+\t.dc.a\t.sizeof.(.text)\n+\t.dc.a\t0\n+\t.dc.a\t.sizeof.(.text)\n+\t.dc.a\t.startof.(.text)"
    }
  ]
}