{
  "sha": "0e3b7c25eea80717638617ebafac611ed970def8",
  "node_id": "C_kwDOANOeidoAKDBlM2I3YzI1ZWVhODA3MTc2Mzg2MTdlYmFmYWM2MTFlZDk3MGRlZjg",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-09-01T14:33:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-30T12:10:33Z"
    },
    "message": "gdb/python: introduce gdb.TargetConnection object type\n\nThis commit adds a new object type gdb.TargetConnection.  This new\ntype represents a connection within GDB (a connection as displayed by\n'info connections').\n\nThere's three ways to find a gdb.TargetConnection, there's a new\n'gdb.connections()' function, which returns a list of all currently\nactive connections.\n\nOr you can read the new 'connection' property on the gdb.Inferior\nobject type, this contains the connection for that inferior (or None\nif the inferior has no connection, for example, it is exited).\n\nFinally, there's a new gdb.events.connection_removed event registry,\nthis emits a new gdb.ConnectionEvent whenever a connection is removed\nfrom GDB (this can happen when all inferiors using a connection exit,\nthough this is not always the case, depending on the connection type).\nThe gdb.ConnectionEvent has a 'connection' property, which is the\ngdb.TargetConnection being removed from GDB.\n\nThe gdb.TargetConnection has an 'is_valid()' method.  A connection\nobject becomes invalid when the underlying connection is removed from\nGDB (as discussed above, this might be when all inferiors using a\nconnection exit, or it might be when the user explicitly replaces a\nconnection in GDB by issuing another 'target' command).\n\nThe gdb.TargetConnection has the following read-only properties:\n\n  'num': The number for this connection,\n\n  'type': e.g. 'native', 'remote', 'sim', etc\n\n  'description': The longer description as seen in the 'info\n                 connections' command output.\n\n  'details': A string or None.  Extra details for the connection, for\n             example, a remote connection's details might be\n             'hostname:port'.",
    "tree": {
      "sha": "65eaac6eb07c906b3c18903ede558ea8138ad830",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65eaac6eb07c906b3c18903ede558ea8138ad830"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e3b7c25eea80717638617ebafac611ed970def8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e3b7c25eea80717638617ebafac611ed970def8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e3b7c25eea80717638617ebafac611ed970def8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e3b7c25eea80717638617ebafac611ed970def8/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "abfdb09f011ac7c76321843d9d0b395ca96e3fef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abfdb09f011ac7c76321843d9d0b395ca96e3fef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/abfdb09f011ac7c76321843d9d0b395ca96e3fef"
    }
  ],
  "stats": {
    "total": 729,
    "additions": 725,
    "deletions": 4
  },
  "files": [
    {
      "sha": "bff27577b956266681752037b0b82edbc2c356c0",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -391,6 +391,7 @@ SUBDIR_PYTHON_SRCS = \\\n \tpython/py-bpevent.c \\\n \tpython/py-breakpoint.c \\\n \tpython/py-cmd.c \\\n+\tpython/py-connection.c \\\n \tpython/py-continueevent.c \\\n \tpython/py-event.c \\\n \tpython/py-evtregistry.c \\"
    },
    {
      "sha": "b55d9bc47f79a65e487b9c1a2bcc3dd73cfabb99",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -59,6 +59,21 @@ show logging enabled\n   ** New function gdb.Architecture.integer_type(), which returns an\n      integer type given a size and a signed-ness.\n \n+  ** New gdb.TargetConnection object type that represents a connection\n+     (as displayed by the 'info connections' command).\n+\n+  ** The gdb.Inferior type now has a 'connection' property which is an\n+     instance of gdb.TargetConnection, the connection used by this\n+     inferior.  This can be None if the inferior has no connection.\n+\n+  ** New 'gdb.events.connection_removed' event registry, which emits a\n+     'gdb.ConnectionEvent' when a connection is removed from GDB.\n+     This event has a 'connection' property, a gdb.TargetConnection\n+     object for the connection being removed.\n+\n+  ** New gdb.connections() function that returns a list of all\n+     currently active connections.\n+\n * New features in the GDB remote stub, GDBserver\n \n   ** GDBserver is now supported on OpenRISC GNU/Linux."
    },
    {
      "sha": "33748eeb9f384d8e2c3de98c7ed7cd2bd2bfa9b3",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 91,
      "deletions": 2,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -220,6 +220,7 @@ optional arguments while skipping others.  Example:\n * Lazy Strings In Python::      Python representation of lazy strings.\n * Architectures In Python::     Python representation of architectures.\n * Registers In Python::         Python representation of registers.\n+* Connections In Python::\tPython representation of connections.\n * TUI Windows In Python::       Implementing new TUI windows.\n @end menu\n \n@@ -565,6 +566,13 @@ returned from @code{gdb.Architecture.name}\n (@pxref{gdbpy_architecture_name,,Architecture.name}).\n @end defun\n \n+@anchor{gdbpy_connections}\n+@defun gdb.connections\n+Return a list of @code{gdb.TargetConnection} objects, one for each\n+currently active connection (@pxref{Connections In Python}).  The\n+connection objects are in no particular order in the returned list.\n+@end defun\n+\n @node Exception Handling\n @subsubsection Exception Handling\n @cindex python exceptions\n@@ -3095,10 +3103,18 @@ A @code{gdb.Inferior} object has the following attributes:\n ID of inferior, as assigned by GDB.\n @end defvar\n \n+@anchor{gdbpy_inferior_connection}\n+@defvar Inferior.connection\n+The @code{gdb.TargetConnection} for this inferior (@pxref{Connections\n+In Python}), or @code{None} if this inferior has no connection.\n+@end defvar\n+\n @defvar Inferior.connection_num\n ID of inferior's connection as assigned by @value{GDBN}, or None if\n-the inferior is not connected to a target.\n-@xref{Inferiors Connections and Programs}.\n+the inferior is not connected to a target.  @xref{Inferiors Connections\n+and Programs}.  This is equivalent to\n+@code{gdb.Inferior.connection.num} in the case where\n+@code{gdb.Inferior.connection} is not @code{None}.\n @end defvar\n \n @defvar Inferior.pid\n@@ -3439,6 +3455,15 @@ which has a single attribute:\n An integer, the value of the exit code @value{GDBN} will return.\n @end defvar\n \n+@item events.connection_removed\n+This is emitted when @value{GDBN} removes a connection\n+(@pxref{Connections In Python}).  The event is of type\n+@code{gdb.ConnectionEvent}.  This has a single read-only attribute:\n+\n+@defvar ConnectionEvent.connection\n+The @code{gdb.TargetConnection} that is being removed.\n+@end defvar\n+\n @end table\n \n @node Threads In Python\n@@ -5973,6 +5998,70 @@ properties:\n A string that is the name of this register group.\n @end defvar\n \n+@node Connections In Python\n+@subsubsection Connections In Python\n+@cindex connections in python\n+@value{GDBN} lets you run and debug multiple programs in a single\n+session.  Each program being debugged has a connection, the connection\n+describes how @value{GDBN} controls the program being debugged.\n+Examples of different connection types are @samp{native} and\n+@samp{remote}.  @xref{Inferiors Connections and Programs}.\n+\n+@value{GDBN} uses the @code{gdb.TargetConnection} object type to\n+represent a connection in Python code.  To get a list of all\n+connections use @code{gdb.connections}\n+(@pxref{gdbpy_connections,,gdb.connections}).\n+\n+To get the connection for a single @code{gdb.Inferior} read its\n+@code{gdb.Inferior.connection} attribute\n+(@pxref{gdbpy_inferior_connection,,gdb.Inferior.connection}).\n+\n+A @code{gdb.TargetConnection} has the following method:\n+\n+@defun TargetConnection.is_valid ()\n+Return @code{True} if the @code{gdb.TargetConnection} object is valid,\n+@code{False} if not.  A @code{gdb.TargetConnection} will become\n+invalid if the connection no longer exists within @value{GDBN}, this\n+might happen when no inferiors are using the connection, but could be\n+delayed until the user replaces the current target.\n+\n+Reading any of the @code{gdb.TargetConnection} properties will throw\n+an exception if the connection is invalid.\n+@end defun\n+\n+A @code{gdb.TargetConnection} has the following read-only properties:\n+\n+@defvar TargetConnection.num\n+An integer assigned by @value{GDBN} to uniquely identify this\n+connection.  This is the same value as displayed in the @samp{Num}\n+column of the @code{info connections} command output (@pxref{Inferiors\n+Connections and Programs,,info connections}).\n+@end defvar\n+\n+@defvar TargetConnection.type\n+A string that describes what type of connection this is.  This string\n+will be one of the valid names that can be passed to the @code{target}\n+command (@pxref{Target Commands,,target command}).\n+@end defvar\n+\n+@defvar TargetConnection.description\n+A string that gives a short description of this target type.  This is\n+the same string that is displayed in the @samp{Description} column of\n+the @code{info connection} command output (@pxref{Inferiors\n+Connections and Programs,,info connections}).\n+@end defvar\n+\n+@defvar TargetConnection.details\n+An optional string that gives additional information about this\n+connection.  This attribute can be @code{None} if there are no\n+additional details for this connection.\n+\n+An example of a connection type that might have additional details is\n+the @samp{remote} connection, in this case the details string can\n+contain the @samp{@var{hostname}:@var{port}} that was used to connect\n+to the remote target.\n+@end defvar\n+\n @node TUI Windows In Python\n @subsubsection Implementing new TUI windows\n @cindex Python TUI Windows"
    },
    {
      "sha": "fe88b0bf702924af92d745ae373e84e34b82f87a",
      "filename": "gdb/observable.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/observable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/observable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -78,6 +78,7 @@ DEFINE_OBSERVABLE (user_selected_context_changed);\n DEFINE_OBSERVABLE (styling_changed);\n DEFINE_OBSERVABLE (current_source_symtab_and_line_changed);\n DEFINE_OBSERVABLE (gdb_exiting);\n+DEFINE_OBSERVABLE (connection_removed);\n \n } /* namespace observers */\n } /* namespace gdb */"
    },
    {
      "sha": "d3c441dc7640c8741243c823bfda5ee9b0a1761d",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -253,6 +253,9 @@ extern observable<> current_source_symtab_and_line_changed;\n /* Called when GDB is about to exit.  */\n extern observable<int> gdb_exiting;\n \n+/* When a connection is removed.  */\n+extern observable<process_stratum_target */* target */> connection_removed;\n+\n } /* namespace observers */\n \n } /* namespace gdb */"
    },
    {
      "sha": "ed22a3335cdc6480844198ff526f473cca8238ea",
      "filename": "gdb/python/py-all-events.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-all-events.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-all-events.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-all-events.def?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -39,3 +39,4 @@ GDB_PY_DEFINE_EVENT(breakpoint_deleted)\n GDB_PY_DEFINE_EVENT(breakpoint_modified)\n GDB_PY_DEFINE_EVENT(before_prompt)\n GDB_PY_DEFINE_EVENT(gdb_exiting)\n+GDB_PY_DEFINE_EVENT(connection_removed)"
    },
    {
      "sha": "f1dfa26e39c81ec803a7e40fab258c0aae205e4d",
      "filename": "gdb/python/py-connection.c",
      "status": "added",
      "additions": 366,
      "deletions": 0,
      "changes": 366,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-connection.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -0,0 +1,366 @@\n+/* Python interface to inferiors.\n+\n+   Copyright (C) 2009-2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"python-internal.h\"\n+#include \"process-stratum-target.h\"\n+#include \"inferior.h\"\n+#include \"observable.h\"\n+#include \"target-connection.h\"\n+#include \"py-events.h\"\n+#include \"py-event.h\"\n+#include \"arch-utils.h\"\n+\n+#include <map>\n+\n+/* The Python object that represents a connection.  */\n+\n+struct connection_object\n+{\n+  PyObject_HEAD\n+\n+  /* The process target that represents this connection.   When a\n+     connection_object is created this field will always point at a valid\n+     target.  Later, if GDB stops using this target (the target is popped\n+     from all target stacks) then this field is set to nullptr, which\n+     indicates that this Python object is now in the invalid state (see\n+     the is_valid() method below).  */\n+  struct process_stratum_target *target;\n+};\n+\n+extern PyTypeObject connection_object_type\n+  CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"connection_object\");\n+\n+/* Require that CONNECTION be valid.  */\n+#define CONNPY_REQUIRE_VALID(connection)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if (connection->target == nullptr)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tPyErr_SetString (PyExc_RuntimeError,\t\t\t\\\n+\t\t\t _(\"Connection no longer exists.\"));\t\\\n+\treturn nullptr;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A map between process_stratum targets and the Python object representing\n+   them.  We actually hold a gdbpy_ref around the Python object so that\n+   reference counts are handled correctly when entries are deleted.  */\n+static std::map<process_stratum_target *,\n+\t\tgdbpy_ref<connection_object>> all_connection_objects;\n+\n+/* Return a reference to a gdb.TargetConnection object for TARGET.  If\n+   TARGET is nullptr then a reference to None is returned.\n+\n+   Previously created gdb.TargetConnection objects are cached, and\n+   additional references to the same connection object can be returned with\n+   later calls to this function.  */\n+\n+gdbpy_ref<>\n+target_to_connection_object (process_stratum_target *target)\n+{\n+  if (target == nullptr)\n+    return gdbpy_ref<>::new_reference (Py_None);\n+\n+  gdbpy_ref <connection_object> conn_obj;\n+  auto conn_obj_iter = all_connection_objects.find (target);\n+  if (conn_obj_iter == all_connection_objects.end ())\n+    {\n+      conn_obj.reset (PyObject_New (connection_object,\n+\t\t\t\t    &connection_object_type));\n+      if (conn_obj == nullptr)\n+\treturn nullptr;\n+      conn_obj->target = target;\n+      all_connection_objects.emplace (target, conn_obj);\n+    }\n+  else\n+    conn_obj = conn_obj_iter->second;\n+\n+  gdb_assert (conn_obj != nullptr);\n+\n+  /* Repackage the result as a PyObject reference.  */\n+  return gdbpy_ref<> ((PyObject *) conn_obj.release ());\n+}\n+\n+/* Return a list of gdb.TargetConnection objects, one for each currently\n+   active connection.  The returned list is in no particular order.  */\n+\n+PyObject *\n+gdbpy_connections (PyObject *self, PyObject *args)\n+{\n+  gdbpy_ref<> list (PyList_New (0));\n+  if (list == nullptr)\n+    return nullptr;\n+\n+  for (process_stratum_target *target : all_non_exited_process_targets ())\n+    {\n+      gdb_assert (target != nullptr);\n+\n+      gdbpy_ref<> conn = target_to_connection_object (target);\n+      if (conn == nullptr)\n+\treturn nullptr;\n+      gdb_assert (conn.get () != Py_None);\n+\n+      if (PyList_Append (list.get (), conn.get ()) < 0)\n+\treturn nullptr;\n+    }\n+\n+  return list.release ();\n+}\n+\n+/* Emit a connection event for TARGET to REGISTRY.  Return 0 on success, or\n+   a negative value on error.  */\n+\n+static int\n+emit_connection_event (process_stratum_target *target,\n+\t\t       eventregistry_object *registry)\n+{\n+  gdbpy_ref<> event_obj\n+    = create_event_object (&connection_event_object_type);\n+  if (event_obj == nullptr)\n+    return -1;\n+\n+  gdbpy_ref<> conn = target_to_connection_object (target);\n+  if (evpy_add_attribute (event_obj.get (), \"connection\", conn.get ()) < 0)\n+    return -1;\n+\n+  return evpy_emit_event (event_obj.get (), registry);\n+}\n+\n+/* Callback for the connection_removed observer.  */\n+\n+static void\n+connpy_connection_removed (process_stratum_target *target)\n+{\n+  if (!gdb_python_initialized)\n+    return;\n+\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (!evregpy_no_listeners_p (gdb_py_events.connection_removed))\n+    if (emit_connection_event (target, gdb_py_events.connection_removed) < 0)\n+      gdbpy_print_stack ();\n+\n+  auto conn_obj_iter = all_connection_objects.find (target);\n+  if (conn_obj_iter != all_connection_objects.end ())\n+    {\n+      gdbpy_ref <connection_object> conn_obj = conn_obj_iter->second;\n+      conn_obj->target = nullptr;\n+      all_connection_objects.erase (target);\n+    }\n+}\n+\n+/* Called when a gdb.TargetConnection object is deallocated.  */\n+\n+static void\n+connpy_connection_dealloc (PyObject *obj)\n+{\n+  connection_object *conn_obj = (connection_object *) obj;\n+\n+  /* As the all_connection_objects map holds a reference to each connection\n+     object we can only enter the dealloc function when the reference in\n+     all_connection_objects has been erased.\n+\n+     As we always set the target pointer back to nullptr before we erase\n+     items from all_connection_objects then, when we get here, the target\n+     pointer must be nullptr.  */\n+  gdb_assert (conn_obj->target == nullptr);\n+\n+  Py_TYPE (obj)->tp_free (obj);\n+}\n+\n+/* Implement repr() for gdb.TargetConnection.  */\n+\n+static PyObject *\n+connpy_repr (PyObject *obj)\n+{\n+  connection_object *self = (connection_object *) obj;\n+  process_stratum_target *target = self->target;\n+\n+  if (target == nullptr)\n+    return PyString_FromFormat (\"<%s (invalid)>\", Py_TYPE (obj)->tp_name);\n+\n+  return PyString_FromFormat (\"<%s num=%d, what=\\\"%s\\\">\",\n+\t\t\t      Py_TYPE (obj)->tp_name,\n+\t\t\t      target->connection_number,\n+\t\t\t      make_target_connection_string (target).c_str ());\n+}\n+\n+/* Implementation of gdb.TargetConnection.is_valid() -> Boolean.  Returns\n+   True if this connection object is still associated with a\n+   process_stratum_target, otherwise, returns False.  */\n+\n+static PyObject *\n+connpy_is_valid (PyObject *self, PyObject *args)\n+{\n+  connection_object *conn = (connection_object *) self;\n+\n+  if (conn->target == nullptr)\n+    Py_RETURN_FALSE;\n+\n+  Py_RETURN_TRUE;\n+}\n+\n+/* Return the id number of this connection.  */\n+\n+static PyObject *\n+connpy_get_connection_num (PyObject *self, void *closure)\n+{\n+  connection_object *conn = (connection_object *) self;\n+\n+  CONNPY_REQUIRE_VALID (conn);\n+\n+  auto num = conn->target->connection_number;\n+  return gdb_py_object_from_longest (num).release ();\n+}\n+\n+/* Return a string that gives the short name for this connection type.  */\n+\n+static PyObject *\n+connpy_get_connection_type (PyObject *self, void *closure)\n+{\n+  connection_object *conn = (connection_object *) self;\n+\n+  CONNPY_REQUIRE_VALID (conn);\n+\n+  const char *shortname = conn->target->shortname ();\n+  return host_string_to_python_string (shortname).release ();\n+}\n+\n+/* Return a string that gives a longer description of this connection type.  */\n+\n+static PyObject *\n+connpy_get_description (PyObject *self, void *closure)\n+{\n+  connection_object *conn = (connection_object *) self;\n+\n+  CONNPY_REQUIRE_VALID (conn);\n+\n+  const char *longname = conn->target->longname ();\n+  return host_string_to_python_string (longname).release ();\n+}\n+\n+/* Return a string that gives additional details about this connection, or\n+   None, if there are no additional details for this connection type.  */\n+\n+static PyObject *\n+connpy_get_connection_details (PyObject *self, void *closure)\n+{\n+  connection_object *conn = (connection_object *) self;\n+\n+  CONNPY_REQUIRE_VALID (conn);\n+\n+  const char *details = conn->target->connection_string ();\n+  if (details != nullptr)\n+    return host_string_to_python_string (details).release ();\n+  else\n+    Py_RETURN_NONE;\n+}\n+\n+/* Python specific initialization for this file.  */\n+\n+int\n+gdbpy_initialize_connection (void)\n+{\n+  if (PyType_Ready (&connection_object_type) < 0)\n+    return -1;\n+\n+  if (gdb_pymodule_addobject (gdb_module, \"TargetConnection\",\n+\t\t\t      (PyObject *) &connection_object_type) < 0)\n+    return -1;\n+\n+  return 0;\n+}\n+\n+/* Global initialization for this file.  */\n+\n+void _initialize_py_connection ();\n+void\n+_initialize_py_connection ()\n+{\n+  gdb::observers::connection_removed.attach (connpy_connection_removed,\n+\t\t\t\t\t     \"py-connection\");\n+}\n+\n+/* Methods for the gdb.TargetConnection object type.  */\n+\n+static PyMethodDef connection_object_methods[] =\n+{\n+  { \"is_valid\", connpy_is_valid, METH_NOARGS,\n+    \"is_valid () -> Boolean.\\n\\\n+Return true if this TargetConnection is valid, false if not.\" },\n+  { NULL }\n+};\n+\n+/* Attributes for the gdb.TargetConnection object type.  */\n+\n+static gdb_PyGetSetDef connection_object_getset[] =\n+{\n+  { \"num\", connpy_get_connection_num, NULL,\n+    \"ID number of this connection, as assigned by GDB.\", NULL },\n+  { \"type\", connpy_get_connection_type, NULL,\n+    \"A short string that is the name for this connection type.\", NULL },\n+  { \"description\", connpy_get_description, NULL,\n+    \"A longer string describing this connection type.\", NULL },\n+  { \"details\", connpy_get_connection_details, NULL,\n+    \"A string containing additional connection details.\", NULL },\n+  { NULL }\n+};\n+\n+/* Define the gdb.TargetConnection object type.  */\n+\n+PyTypeObject connection_object_type =\n+{\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.TargetConnection\",\t  /* tp_name */\n+  sizeof (connection_object),\t  /* tp_basicsize */\n+  0,\t\t\t\t  /* tp_itemsize */\n+  connpy_connection_dealloc,\t  /* tp_dealloc */\n+  0,\t\t\t\t  /* tp_print */\n+  0,\t\t\t\t  /* tp_getattr */\n+  0,\t\t\t\t  /* tp_setattr */\n+  0,\t\t\t\t  /* tp_compare */\n+  connpy_repr,\t\t\t  /* tp_repr */\n+  0,\t\t\t\t  /* tp_as_number */\n+  0,\t\t\t\t  /* tp_as_sequence */\n+  0,\t\t\t\t  /* tp_as_mapping */\n+  0,\t\t\t\t  /* tp_hash  */\n+  0,\t\t\t\t  /* tp_call */\n+  0,\t\t\t\t  /* tp_str */\n+  0,\t\t\t\t  /* tp_getattro */\n+  0,\t\t\t\t  /* tp_setattro */\n+  0,\t\t\t\t  /* tp_as_buffer */\n+  Py_TPFLAGS_DEFAULT,\t\t  /* tp_flags */\n+  \"GDB target connection object\", /* tp_doc */\n+  0,\t\t\t\t  /* tp_traverse */\n+  0,\t\t\t\t  /* tp_clear */\n+  0,\t\t\t\t  /* tp_richcompare */\n+  0,\t\t\t\t  /* tp_weaklistoffset */\n+  0,\t\t\t\t  /* tp_iter */\n+  0,\t\t\t\t  /* tp_iternext */\n+  connection_object_methods,\t  /* tp_methods */\n+  0,\t\t\t\t  /* tp_members */\n+  connection_object_getset,\t  /* tp_getset */\n+  0,\t\t\t\t  /* tp_base */\n+  0,\t\t\t\t  /* tp_dict */\n+  0,\t\t\t\t  /* tp_descr_get */\n+  0,\t\t\t\t  /* tp_descr_set */\n+  0,\t\t\t\t  /* tp_dictoffset */\n+  0,\t\t\t\t  /* tp_init */\n+  0\t\t\t\t  /* tp_alloc */\n+};"
    },
    {
      "sha": "6a49f2aa896b5d06f839f223be83f94798d754b9",
      "filename": "gdb/python/py-event-types.def",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-event-types.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-event-types.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-event-types.def?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -110,3 +110,8 @@ GDB_PY_DEFINE_EVENT_TYPE (gdb_exiting,\n \t\t\t  \"GdbExitingEvent\",\n \t\t\t  \"GDB is about to exit\",\n \t\t\t  event_object_type);\n+\n+GDB_PY_DEFINE_EVENT_TYPE (connection,\n+\t\t\t  \"ConnectionEvent\",\n+\t\t\t  \"GDB connection added or removed object\",\n+\t\t\t  event_object_type);"
    },
    {
      "sha": "3b2d47095ca90e949070e4e99e7c0b91c8bb6103",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -415,6 +415,20 @@ infpy_get_num (PyObject *self, void *closure)\n   return gdb_py_object_from_longest (inf->inferior->num).release ();\n }\n \n+/* Return the gdb.TargetConnection object for this inferior, or None if a\n+   connection does not exist.  */\n+\n+static PyObject *\n+infpy_get_connection (PyObject *self, void *closure)\n+{\n+  inferior_object *inf = (inferior_object *) self;\n+\n+  INFPY_REQUIRE_VALID (inf);\n+\n+  process_stratum_target *target = inf->inferior->process_target ();\n+  return target_to_connection_object (target).release ();\n+}\n+\n /* Return the connection number of the given inferior, or None if a\n    connection does not exist.  */\n \n@@ -849,6 +863,8 @@ gdbpy_initialize_inferior (void)\n static gdb_PyGetSetDef inferior_object_getset[] =\n {\n   { \"num\", infpy_get_num, NULL, \"ID of inferior, as assigned by GDB.\", NULL },\n+  { \"connection\", infpy_get_connection, NULL,\n+    \"The gdb.TargetConnection for this inferior.\", NULL },\n   { \"connection_num\", infpy_get_connection_num, NULL,\n     \"ID of inferior's connection, as assigned by GDB.\", NULL },\n   { \"pid\", infpy_get_pid, NULL, \"PID of inferior, as assigned by the OS.\","
    },
    {
      "sha": "211833e4b2d20449ea85fb59d434c0c117503dd7",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -482,6 +482,10 @@ gdbpy_ref<inferior_object> inferior_to_inferior_object (inferior *inf);\n PyObject *gdbpy_buffer_to_membuf (gdb::unique_xmalloc_ptr<gdb_byte> buffer,\n \t\t\t\t  CORE_ADDR address, ULONGEST length);\n \n+struct process_stratum_target;\n+gdbpy_ref<> target_to_connection_object (process_stratum_target *target);\n+PyObject *gdbpy_connections (PyObject *self, PyObject *args);\n+\n const struct block *block_object_to_block (PyObject *obj);\n struct symbol *symbol_object_to_symbol (PyObject *obj);\n struct value *value_object_to_value (PyObject *self);\n@@ -555,6 +559,8 @@ int gdbpy_initialize_tui ()\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_membuf ()\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n+int gdbpy_initialize_connection ()\n+  CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n \n /* A wrapper for PyErr_Fetch that handles reference counting for the\n    caller.  */"
    },
    {
      "sha": "82af012068b6c62e07654f8d694f98d70a40bcc5",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -1876,6 +1876,7 @@ do_start_initialization ()\n       || gdbpy_initialize_xmethods () < 0\n       || gdbpy_initialize_unwind () < 0\n       || gdbpy_initialize_membuf () < 0\n+      || gdbpy_initialize_connection () < 0\n       || gdbpy_initialize_tui () < 0)\n     return false;\n \n@@ -2326,6 +2327,10 @@ Register a TUI window constructor.\" },\n     \"architecture_names () -> List.\\n\\\n Return a list of all the architecture names GDB understands.\" },\n \n+  { \"connections\", gdbpy_connections, METH_NOARGS,\n+    \"connections () -> List.\\n\\\n+Return a list of gdb.TargetConnection objects.\" },\n+\n   {NULL, NULL, 0, NULL}\n };\n "
    },
    {
      "sha": "da1c9da74dc2947070705d0dae07401ea25a89c7",
      "filename": "gdb/target-connection.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/target-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/target-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-connection.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -24,6 +24,7 @@\n \n #include \"inferior.h\"\n #include \"target.h\"\n+#include \"observable.h\"\n \n /* A map between connection number and representative process_stratum\n    target.  */\n@@ -49,6 +50,9 @@ connection_list_add (process_stratum_target *t)\n void\n connection_list_remove (process_stratum_target *t)\n {\n+  /* Notify about the connection being removed before we reset the\n+     connection number to zero.  */\n+  gdb::observers::connection_removed.notify (t);\n   process_targets.erase (t->connection_number);\n   t->connection_number = 0;\n }"
    },
    {
      "sha": "3f74a47de312fe09007edbca9c9a1424ffd90885",
      "filename": "gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -15,18 +15,27 @@\n \n # Test \"info inferiors\" and \"info connections\" with multiple targets.\n \n+load_lib gdb-python.exp\n+\n source $srcdir/$subdir/multi-target.exp.tcl\n \n if {![multi_target_prepare]} {\n     return\n }\n \n+# Cache the result of calling skip_python_tests into a local variable.\n+set run_python_tests [expr ! [skip_python_tests]]\n+\n # Test \"info inferiors\" and \"info connections\".  MULTI_PROCESS\n # indicates whether the multi-process feature of remote targets is\n # turned off or on.\n proc test_info_inferiors {multi_process} {\n     setup \"off\"\n \n+    if { $::run_python_tests } {\n+\tgdb_test_no_output \"source ${::remote_python_file}\" \"load python file\"\n+    }\n+\n     gdb_test_no_output \\\n \t\"set remote multiprocess-feature-packet $multi_process\"\n \n@@ -86,6 +95,18 @@ proc test_info_inferiors {multi_process} {\n \t\t     \"[connection_num 5 $inf]${ws}core${ws}Local core dump file${ws}\" \\\n \t\t    ]\n \n+\t    if { $::run_python_tests } {\n+\t\tgdb_test \"python info_connections()\" \\\n+\t\t    [multi_line \\\n+\t\t\t \"Num${ws}What${ws}Description\" \\\n+\t\t\t \"[connection_num 1 $inf]${ws}native${ws}Native process\" \\\n+\t\t\t \"[connection_num 2 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol\" \\\n+\t\t\t \"[connection_num 3 $inf]${ws}core${ws}Local core dump file\" \\\n+\t\t\t \"[connection_num 4 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol\" \\\n+\t\t\t \"[connection_num 5 $inf]${ws}core${ws}Local core dump file\" \\\n+\t\t\t]\n+\t    }\n+\n \t    gdb_test \"info inferiors\" \\\n \t\t[multi_line \\\n \t\t     \"Num${ws}Description${ws}Connection${ws}Executable${ws}\" \\\n@@ -96,10 +117,27 @@ proc test_info_inferiors {multi_process} {\n \t\t     \"[inf_desc 5 $inf]4 \\\\(extended-remote localhost:$decimal\\\\)${ws}${binfile}${ws}\" \\\n \t\t     \"[inf_desc 6 $inf]5 \\\\(core\\\\)${ws}${binfile}${ws}\" \\\n \t\t    ]\n+\n+\t    if { $::run_python_tests } {\n+\t\tgdb_test \"python info_inferiors()\" \\\n+\t\t    [multi_line \\\n+\t\t     \"Inferior 1, Connection #1: native\" \\\n+\t\t     \"Inferior 2, Connection #2: extended-remote localhost:$decimal\" \\\n+\t\t     \"Inferior 3, Connection #3: core\" \\\n+\t\t     \"Inferior 4, Connection #1: native\" \\\n+\t\t     \"Inferior 5, Connection #4: extended-remote localhost:$decimal\" \\\n+\t\t     \"Inferior 6, Connection #5: core\" \\\n+\t\t    ]\n+\t    }\n \t}\n     }\n }\n \n+if { $run_python_tests } {\n+    set remote_python_file [gdb_remote_download host \\\n+\t\t\t\t${srcdir}/${subdir}/${testfile}.py]\n+}\n+\n # Test \"info inferiors\" and \"info connections\" commands.\n with_test_prefix \"info-inferiors\" {\n     foreach_with_prefix multi_process {\"on\" \"off\"} {"
    },
    {
      "sha": "78c82f200bdc92e930a27236ab52eb24bf1db77b",
      "filename": "gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-info-inferiors.py?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -0,0 +1,64 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import gdb\n+\n+# Take a gdb.TargetConnection and return the connection number.\n+def conn_num(c):\n+    return c.num\n+\n+# Takes a gdb.TargetConnection and return a string that is either the\n+# type, or the type and details (if the details are not None).\n+def make_target_connection_string(c):\n+    if c.details is None:\n+        return c.type\n+    else:\n+        return \"%s %s\" % (c.type, c.details)\n+\n+# A Python implementation of 'info connections'.  Produce output that\n+# is identical to the output of 'info connections' so we can check\n+# that aspects of gdb.TargetConnection work correctly.\n+def info_connections():\n+    all_connections = sorted(gdb.connections(), key=conn_num)\n+    current_conn = gdb.selected_inferior().connection\n+    what_width = 0\n+    for c in all_connections:\n+        s = make_target_connection_string(c)\n+        if len(s) > what_width:\n+            what_width = len(s)\n+\n+    fmt = \"  Num  %%-%ds  Description\" % what_width\n+    print(fmt % \"What\")\n+    fmt = \"%%s%%-3d  %%-%ds  %%s\" % what_width\n+    for c in all_connections:\n+        if c == current_conn:\n+            prefix = \"* \"\n+        else:\n+            prefix = \"  \"\n+\n+        print(fmt % (prefix, c.num, make_target_connection_string(c),\n+                     c.description))\n+\n+def inf_num(i):\n+    return i.num\n+\n+# Print information about each inferior, and the connection it is\n+# using.\n+def info_inferiors():\n+    all_inferiors = sorted(gdb.inferiors(), key=inf_num)\n+    for i in gdb.inferiors():\n+        print(\"Inferior %d, Connection #%d: %s\" %\n+              (i.num, i.connection_num,\n+               make_target_connection_string(i.connection)))"
    },
    {
      "sha": "4b32e70447617ce58c76d84d4a5e929a610ed169",
      "filename": "gdb/testsuite/gdb.python/py-connection.c",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-connection.c?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -0,0 +1,22 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main (void)\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "b805b052f7329e2e264e45616f0bf46ae06d5296",
      "filename": "gdb/testsuite/gdb.python/py-connection.exp",
      "status": "added",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-connection.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-connection.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-connection.exp?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -0,0 +1,69 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is for testing the gdb.TargetConnection API.  This API is\n+# already tested in gdb.multi/multi-target-info-inferiors.exp and\n+# gdb.python/py-inferior.exp, this file just covers some edge cases\n+# that are not tested in other places.\n+\n+load_lib gdb-python.exp\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+if ![runto_main] then {\n+    return 0\n+}\n+\n+# Create a gdb.TargetConnection object and check it is initially\n+# valid.\n+gdb_test_no_output \"python conn = gdb.selected_inferior().connection\"\n+gdb_test \"python print(conn)\" \\\n+    \"<gdb.TargetConnection num=1, what=\\\"\\[^\\\"\\]+\\\">\" \\\n+    \"print gdb.TargetConnection while it is still valid\"\n+gdb_test \"python print(conn.is_valid())\" \"True\" \"is_valid returns True\"\n+\n+# Get the connection again, and ensure we get the exact same object.\n+gdb_test_no_output \"python conn2 = gdb.selected_inferior().connection\"\n+gdb_test \"python print('Same object: %s' % (conn is conn2))\" \"True\"\n+\n+# Now invalidate the connection, and ensure that the is_valid method\n+# starts to return False.\n+gdb_test \"info connections\" \"\\r\\n\\\\* 1 .*\" \\\n+    \"info connections while the connection is still around\"\n+gdb_test \"disconnect\" \"\" \"kill the inferior\" \\\n+    \"A program is being debugged already\\\\.  Kill it\\\\? .*y or n. $\" \"y\"\n+gdb_test \"info connections\" \"No connections\\\\.\" \\\n+    \"info connections now all the connections have gone\"\n+gdb_test \"python print(conn)\" \"<gdb.TargetConnection \\\\(invalid\\\\)>\" \\\n+    \"print gdb.TargetConnection now its invalid\"\n+gdb_test \"python print(conn.is_valid())\" \"False\" \"is_valid returns False\"\n+\n+# Now check that accessing properties of the invalid connection cases\n+# an error.\n+gdb_test \"python print(conn.num)\" \\\n+    \"RuntimeError: Connection no longer exists\\\\.\\r\\n.*\"\n+gdb_test \"python print(conn.type)\" \\\n+    \"RuntimeError: Connection no longer exists\\\\.\\r\\n.*\"\n+gdb_test \"python print(conn.description)\" \\\n+    \"RuntimeError: Connection no longer exists\\\\.\\r\\n.*\"\n+gdb_test \"python print(conn.details)\" \\\n+    \"RuntimeError: Connection no longer exists\\\\.\\r\\n.*\""
    },
    {
      "sha": "d5d284a763e485c4ca05176e2e50f9e596b5353e",
      "filename": "gdb/testsuite/gdb.python/py-inferior.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-inferior.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e3b7c25eea80717638617ebafac611ed970def8/gdb/testsuite/gdb.python/py-inferior.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-inferior.exp?ref=0e3b7c25eea80717638617ebafac611ed970def8",
      "patch": "@@ -51,6 +51,8 @@ gdb_py_test_silent_cmd \"python i0 = inferiors\\[0\\]\" \"get first inferior\" 0\n gdb_test \"python print ('result = %s' % (i0 == inferiors\\[0\\]))\" \" = True\" \"test equality comparison (true)\"\n gdb_test \"python print ('result = %s' % i0.num)\" \" = \\[0-9\\]+\" \"test Inferior.num\"\n gdb_test \"python print ('result = %s' % i0.connection_num)\" \" = \\[0-9\\]+\" \"test Inferior.connection_num\"\n+gdb_test \"python print ('result = %s' % (i0.connection_num == i0.connection.num))\" \" = True\" \\\n+    \"Inferior.connection_num equals Inferior.connection.num\"\n gdb_test \"python print ('result = %s' % i0.pid)\" \" = \\[0-9\\]+\" \"test Inferior.pid\"\n gdb_test \"python print ('result = %s' % i0.was_attached)\" \" = False\" \"test Inferior.was_attached\"\n gdb_test \"python print (i0.threads ())\" \"\\\\(<gdb.InferiorThread object at 0x\\[\\[:xdigit:\\]\\]+>,\\\\)\" \"test Inferior.threads\"\n@@ -264,6 +266,8 @@ with_test_prefix \"is_valid\" {\n \t\"RuntimeError: Inferior no longer exists.*\"\n     gdb_test \"python print (inf_list\\[1\\].connection_num)\" \\\n \t\"RuntimeError: Inferior no longer exists.*\"\n+    gdb_test \"python print (inf_list\\[1\\].connection)\" \\\n+\t\"RuntimeError: Inferior no longer exists.*\"\n     gdb_test \"python print (inf_list\\[1\\].pid)\" \\\n \t\"RuntimeError: Inferior no longer exists.*\"\n     gdb_test \"python print (inf_list\\[1\\].was_attached)\" \\\n@@ -281,14 +285,18 @@ with_test_prefix \"selected_inferior\" {\n     gdb_test \"inferior 1\" \".*\" \"switch to first inferior\"\n     gdb_test \"py print (gdb.selected_inferior().num)\" \"1\" \"first inferior selected\"\n     gdb_test \"py print (gdb.selected_inferior().connection_num)\" \"1\" \\\n-\t\"first inferior's connection\"\n+\t\"first inferior's connection number\"\n+    gdb_test \"py print (gdb.selected_inferior().connection.num)\" \"1\" \\\n+\t\"first inferior's connection number, though connection object\"\n     # Figure out if inf 1 has a native target.\n     set inf_1_is_native [gdb_is_target_native]\n \n     gdb_test \"add-inferior -no-connection\" \"Added inferior 3\" \"create new inferior\"\n     gdb_test \"inferior 3\" \".*\" \"switch to third inferior\"\n     gdb_test \"py print (gdb.selected_inferior().num)\" \"3\" \"third inferior selected\"\n     gdb_test \"py print (gdb.selected_inferior().connection_num)\" \"None\" \\\n+\t\"third inferior's None connection number\"\n+    gdb_test \"py print (gdb.selected_inferior().connection)\" \"None\" \\\n \t\"third inferior's None connection\"\n     gdb_test \"target native\" \"Done.  Use the \\\"run\\\" command to start a process.\" \\\n \t\"target for the third inferior\"\n@@ -302,7 +310,15 @@ with_test_prefix \"selected_inferior\" {\n     }\n     gdb_test \"py print (gdb.selected_inferior().connection_num)\" \\\n \t\"$expected_connection_num\" \\\n-\t\"third inferior's native connection\"\n+\t\"third inferior's native connection number\"\n+    gdb_test \"py print (gdb.selected_inferior().connection.num)\" \\\n+\t\"$expected_connection_num\" \\\n+\t\"third inferior's native connection number, though connection object\"\n+\n+    # Test printing of gdb.TargetConnection object.\n+    gdb_test \"py print (gdb.selected_inferior().connection)\" \\\n+\t\"<gdb.TargetConnection num=${expected_connection_num}, what=\\\"\\[^\\\"\\]+\\\">\" \\\n+\t\"print a connection object\"\n \n     gdb_test \"inferior 1\" \".*\" \"switch back to first inferior\"\n     gdb_test_no_output \"remove-inferiors 3\" \"remove second inferior\""
    }
  ]
}