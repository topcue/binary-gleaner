{
  "sha": "a72d0f3d69896b5fcdc916e0547fe774dcb58614",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTcyZDBmM2Q2OTg5NmI1ZmNkYzkxNmUwNTQ3ZmU3NzRkY2I1ODYxNA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-12T13:02:30Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-21T18:16:49Z"
    },
    "message": "gdb/doc: reorder and group sections relating to aliases\n\nThis started by observing that the section name:\n\n  Automatically prepend default arguments to user-defined aliases\n\nIs very long.  When this is rendered in the PDF manual (at least for\nme), this name is so long that in the table of contents the page\nnumber ends up being misaligned.\n\nMy first thought was we could drop the 'to user-defined aliases' bit\nif this section became a sub-section of the section on aliases.\n\nSo then I looked for a section with 'aliases' in its name, and\ncouldn't find one.\n\nIt turns out that aliases are documented in a section called:\n\n  Creating new spellings of existing commands\n\nWhich (to me) seems an odd aspect of aliases to emphasise.\n\nSo, in this patch I make the following changes:\n\n  - Move the section on aliases earlier in the manual, this is now\n    immediately after the section about creating user defined\n    commands.  This made more sense to me.\n\n  - Rename the section on aliases from 'Creating new spellings of\n    existing commands' to 'Command Aliases'.\n\n  - Update the wording of the first paragraph in the 'Command Aliases'\n    section so that it reads better given the new name.\n\n  - Add a cross-reference from the 'Command Aliases' section to the\n    'Python' section now that the aliases section comes first.\n\n  - Down case all the text inside @var within this section as this is\n    the correct style for the GDB manual.\n\n  - Move the section on default args to become a sub-section of the\n    'Command Aliases' section, and rename this sub-section from\n    'Automatically prepend default arguments to user-defined aliases'\n    to 'Default Arguments'.\n\n  - Add @menu into the 'Command Aliases' section to link to the\n    'Default Arguments' subsection.\n\n  - Add a @cindex entry to the default arguments sub-section.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Commands): Update menu.\n\t(Extending GDB): Likewise.\n\t(Command aliases default args): Moved later into the document,\n\tadded a cindex entry.  Renamed the section 'Automatically prepend\n\tdefault arguments to user-defined aliases' to 'Default Arguments'.\n\t(Aliases): Moved earlier in the document.  Minor rewording of the\n\tfirst paragraph, down-cased the text inside all uses of @var, and\n\tadded a cross reference to the Python code.  Renamed the section\n\t'Creating new spellings of existing commands' to 'Command\n\tAliases'.",
    "tree": {
      "sha": "6a68e43b50090fc484e15174efb4ee9d5e6f6ce5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a68e43b50090fc484e15174efb4ee9d5e6f6ce5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a72d0f3d69896b5fcdc916e0547fe774dcb58614",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a72d0f3d69896b5fcdc916e0547fe774dcb58614",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a72d0f3d69896b5fcdc916e0547fe774dcb58614",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a72d0f3d69896b5fcdc916e0547fe774dcb58614/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "325d39e4e09f0b7c8eec7e33ca93d0a9c82632ec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/325d39e4e09f0b7c8eec7e33ca93d0a9c82632ec",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/325d39e4e09f0b7c8eec7e33ca93d0a9c82632ec"
    }
  ],
  "stats": {
    "total": 393,
    "additions": 204,
    "deletions": 189
  },
  "files": [
    {
      "sha": "200239c2068f426c969dd76961529193ee95a442",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a72d0f3d69896b5fcdc916e0547fe774dcb58614/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a72d0f3d69896b5fcdc916e0547fe774dcb58614/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=a72d0f3d69896b5fcdc916e0547fe774dcb58614",
      "patch": "@@ -1,3 +1,16 @@\n+2021-01-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Commands): Update menu.\n+\t(Extending GDB): Likewise.\n+\t(Command aliases default args): Moved later into the document,\n+\tadded a cindex entry.  Renamed the section 'Automatically prepend\n+\tdefault arguments to user-defined aliases' to 'Default Arguments'.\n+\t(Aliases): Moved earlier in the document.  Minor rewording of the\n+\tfirst paragraph, down-cased the text inside all uses of @var, and\n+\tadded a cross reference to the Python code.  Renamed the section\n+\t'Creating new spellings of existing commands' to 'Command\n+\tAliases'.\n+\n 2021-01-21  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR python/19151"
    },
    {
      "sha": "c9b432c0eb647068e08645179ef4ee465d169816",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 191,
      "deletions": 189,
      "changes": 380,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a72d0f3d69896b5fcdc916e0547fe774dcb58614/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a72d0f3d69896b5fcdc916e0547fe774dcb58614/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=a72d0f3d69896b5fcdc916e0547fe774dcb58614",
      "patch": "@@ -1634,7 +1634,6 @@ show you the alternatives available, if there is more than one possibility).\n * Command Settings::            How to change default behavior of commands\n * Completion::                  Command completion\n * Command Options::             Command options\n-* Command aliases default args::        Automatically prepend default arguments to user-defined aliases\n * Help::                        How to ask @value{GDBN} for help\n @end menu\n \n@@ -2055,89 +2054,6 @@ uppercase.\n (For more on using the @code{print} command, see @ref{Data, ,Examining\n Data}.)\n \n-@node Command aliases default args\n-@section Automatically prepend default arguments to user-defined aliases\n-\n-You can tell @value{GDBN} to always prepend some default arguments to\n-the list of arguments provided explicitly by the user when using a\n-user-defined alias.\n-\n-If you repeatedly use the same arguments or options for a command, you\n-can define an alias for this command and tell @value{GDBN} to\n-automatically prepend these arguments or options to the list of\n-arguments you type explicitly when using the alias@footnote{@value{GDBN}\n-could easily accept default arguments for pre-defined commands and aliases,\n-but it was deemed this would be confusing, and so is not allowed.}.\n-\n-For example, if you often use the command @code{thread apply all}\n-specifying to work on the threads in ascending order and to continue in case it\n-encounters an error, you can tell @value{GDBN} to automatically preprend\n-the @code{-ascending} and @code{-c} options by using:\n-\n-@smallexample\n-(@value{GDBP}) alias thread apply asc-all = thread apply all -ascending -c\n-@end smallexample\n-\n-Once you have defined this alias with its default args, any time you type\n-the @code{thread apply asc-all} followed by @code{some arguments},\n-@value{GDBN} will execute  @code{thread apply all -ascending -c some arguments}.\n-\n-To have even less to type, you can also define a one word alias:\n-@smallexample\n-(@value{GDBP}) alias t_a_c = thread apply all -ascending -c\n-@end smallexample\n-\n-As usual, unambiguous abbreviations can be used for @var{alias}\n-and @var{default-args}.\n-\n-The different aliases of a command do not share their default args.\n-For example, you define a new alias @code{bt_ALL} showing all possible\n-information and another alias @code{bt_SMALL} showing very limited information\n-using:\n-@smallexample\n-(@value{GDBP}) alias bt_ALL = backtrace -entry-values both -frame-arg all \\\n-   -past-main -past-entry -full\n-(@value{GDBP}) alias bt_SMALL = backtrace -entry-values no -frame-arg none \\\n-   -past-main off -past-entry off\n-@end smallexample\n-\n-(For more on using the @code{alias} command, see @ref{Aliases}.)\n-\n-Default args are not limited to the arguments and options of @var{command},\n-but can specify nested commands if @var{command} accepts such a nested command\n-as argument.\n-For example, the below defines @code{faalocalsoftype} that lists the\n-frames having locals of a certain type, together with the matching\n-local vars:\n-@smallexample\n-(@value{GDBP}) alias faalocalsoftype = frame apply all info locals -q -t\n-(@value{GDBP}) faalocalsoftype int\n-#1  0x55554f5e in sleeper_or_burner (v=0xdf50) at sleepers.c:86\n-i = 0\n-ret = 21845\n-@end smallexample\n-\n-This is also very useful to define an alias for a set of nested @code{with}\n-commands to have a particular combination of temporary settings.  For example,\n-the below defines the alias @code{pp10} that pretty prints an expression\n-argument, with a maximum of 10 elements if the expression is a string or\n-an array:\n-@smallexample\n-(@value{GDBP}) alias pp10 = with print pretty -- with print elements 10 -- print\n-@end smallexample\n-This defines the alias  @code{pp10} as being a sequence of 3 commands.\n-The first part @code{with print pretty --} temporarily activates the setting\n-@code{set print pretty}, then launches the command that follows the separator\n-@code{--}.\n-The command following the first part is also a @code{with} command that\n-temporarily changes the setting @code{set print elements} to 10, then\n-launches the command that follows the second separator @code{--}.\n-The third part @code{print} is the command the @code{pp10} alias will launch,\n-using the temporary values of the settings and the arguments explicitly given\n-by the user.\n-For more information about the @code{with} command usage,\n-see @ref{Command Settings}.\n-\n @node Help\n @section Getting Help\n @cindex online documentation\n@@ -26898,11 +26814,11 @@ being debugged.\n \n @menu\n * Sequences::                Canned Sequences of @value{GDBN} Commands\n+* Aliases::                  Command Aliases\n * Python::                   Extending @value{GDBN} using Python\n * Guile::                    Extending @value{GDBN} using Guile\n * Auto-loading extensions::  Automatically loading extensions\n * Multiple Extension Languages:: Working with multiple extension languages\n-* Aliases::                  Creating new spellings of existing commands\n @end menu\n \n To facilitate the use of extension languages, @value{GDBN} is capable\n@@ -27535,6 +27451,196 @@ auto-loaded.\n If @var{regexp} is supplied only canned sequences of commands scripts with\n matching names are printed.\n \n+@node Aliases\n+@section Command Aliases\n+@cindex aliases for commands\n+\n+@menu\n+* Command aliases default args::\tDefault arguments for aliases\n+@end menu\n+\n+Aliases allow you to define alternate spellings for existing commands.\n+For example, if a new @value{GDBN} command defined in Python\n+(@pxref{Python}) has a long name, it is handy to have an abbreviated\n+version of it that involves less typing.\n+\n+@value{GDBN} itself uses aliases.  For example @samp{s} is an alias\n+of the @samp{step} command even though it is otherwise an ambiguous\n+abbreviation of other commands like @samp{set} and @samp{show}.\n+\n+Aliases are also used to provide shortened or more common versions\n+of multi-word commands.  For example, @value{GDBN} provides the\n+@samp{tty} alias of the @samp{set inferior-tty} command.\n+\n+You can define a new alias with the @samp{alias} command.\n+\n+@table @code\n+\n+@kindex alias\n+@item alias [-a] [--] @var{alias} = @var{command} [@var{default-args}]\n+\n+@end table\n+\n+@var{alias} specifies the name of the new alias.  Each word of\n+@var{alias} must consist of letters, numbers, dashes and underscores.\n+\n+@var{command} specifies the name of an existing command\n+that is being aliased.\n+\n+@var{command} can also be the name of an existing alias.  In this\n+case, @var{command} cannot be an alias that has default arguments.\n+\n+The @samp{-a} option specifies that the new alias is an abbreviation\n+of the command.  Abbreviations are not used in command completion.\n+\n+The @samp{--} option specifies the end of options,\n+and is useful when @var{alias} begins with a dash.\n+\n+You can specify @var{default-args} for your alias.  These\n+@var{default-args} will be automatically added before the alias\n+arguments typed explicitly on the command line.\n+\n+For example, the below defines an alias @code{btfullall} that shows all local\n+variables and all frame arguments:\n+@smallexample\n+(@value{GDBP}) alias btfullall = backtrace -full -frame-arguments all\n+@end smallexample\n+\n+For more information about @var{default-args}, see @ref{Command\n+aliases default args, ,Default Arguments}.\n+\n+Here is a simple example showing how to make an abbreviation of a\n+command so that there is less to type.  Suppose you were tired of\n+typing @samp{disas}, the current shortest unambiguous abbreviation of\n+the @samp{disassemble} command and you wanted an even shorter version\n+named @samp{di}.  The following will accomplish this.\n+\n+@smallexample\n+(gdb) alias -a di = disas\n+@end smallexample\n+\n+Note that aliases are different from user-defined commands.  With a\n+user-defined command, you also need to write documentation for it with\n+the @samp{document} command.  An alias automatically picks up the\n+documentation of the existing command.\n+\n+Here is an example where we make @samp{elms} an abbreviation of\n+@samp{elements} in the @samp{set print elements} command.\n+This is to show that you can make an abbreviation of any part\n+of a command.\n+\n+@smallexample\n+(gdb) alias -a set print elms = set print elements\n+(gdb) alias -a show print elms = show print elements\n+(gdb) set p elms 20\n+(gdb) show p elms\n+Limit on string chars or array elements to print is 200.\n+@end smallexample\n+\n+Note that if you are defining an alias of a @samp{set} command,\n+and you want to have an alias for the corresponding @samp{show}\n+command, then you need to define the latter separately.\n+\n+Unambiguously abbreviated commands are allowed in @var{command} and\n+@var{alias}, just as they are normally.\n+\n+@smallexample\n+(gdb) alias -a set pr elms = set p ele\n+@end smallexample\n+\n+Finally, here is an example showing the creation of a one word\n+alias for a more complex command.\n+This creates alias @samp{spe} of the command @samp{set print elements}.\n+\n+@smallexample\n+(gdb) alias spe = set print elements\n+(gdb) spe 20\n+@end smallexample\n+\n+@node Command aliases default args\n+@subsection Default Arguments\n+@cindex aliases for commands, default arguments\n+\n+You can tell @value{GDBN} to always prepend some default arguments to\n+the list of arguments provided explicitly by the user when using a\n+user-defined alias.\n+\n+If you repeatedly use the same arguments or options for a command, you\n+can define an alias for this command and tell @value{GDBN} to\n+automatically prepend these arguments or options to the list of\n+arguments you type explicitly when using the alias@footnote{@value{GDBN}\n+could easily accept default arguments for pre-defined commands and aliases,\n+but it was deemed this would be confusing, and so is not allowed.}.\n+\n+For example, if you often use the command @code{thread apply all}\n+specifying to work on the threads in ascending order and to continue in case it\n+encounters an error, you can tell @value{GDBN} to automatically preprend\n+the @code{-ascending} and @code{-c} options by using:\n+\n+@smallexample\n+(@value{GDBP}) alias thread apply asc-all = thread apply all -ascending -c\n+@end smallexample\n+\n+Once you have defined this alias with its default args, any time you type\n+the @code{thread apply asc-all} followed by @code{some arguments},\n+@value{GDBN} will execute  @code{thread apply all -ascending -c some arguments}.\n+\n+To have even less to type, you can also define a one word alias:\n+@smallexample\n+(@value{GDBP}) alias t_a_c = thread apply all -ascending -c\n+@end smallexample\n+\n+As usual, unambiguous abbreviations can be used for @var{alias}\n+and @var{default-args}.\n+\n+The different aliases of a command do not share their default args.\n+For example, you define a new alias @code{bt_ALL} showing all possible\n+information and another alias @code{bt_SMALL} showing very limited information\n+using:\n+@smallexample\n+(@value{GDBP}) alias bt_ALL = backtrace -entry-values both -frame-arg all \\\n+   -past-main -past-entry -full\n+(@value{GDBP}) alias bt_SMALL = backtrace -entry-values no -frame-arg none \\\n+   -past-main off -past-entry off\n+@end smallexample\n+\n+(For more on using the @code{alias} command, see @ref{Aliases}.)\n+\n+Default args are not limited to the arguments and options of @var{command},\n+but can specify nested commands if @var{command} accepts such a nested command\n+as argument.\n+For example, the below defines @code{faalocalsoftype} that lists the\n+frames having locals of a certain type, together with the matching\n+local vars:\n+@smallexample\n+(@value{GDBP}) alias faalocalsoftype = frame apply all info locals -q -t\n+(@value{GDBP}) faalocalsoftype int\n+#1  0x55554f5e in sleeper_or_burner (v=0xdf50) at sleepers.c:86\n+i = 0\n+ret = 21845\n+@end smallexample\n+\n+This is also very useful to define an alias for a set of nested @code{with}\n+commands to have a particular combination of temporary settings.  For example,\n+the below defines the alias @code{pp10} that pretty prints an expression\n+argument, with a maximum of 10 elements if the expression is a string or\n+an array:\n+@smallexample\n+(@value{GDBP}) alias pp10 = with print pretty -- with print elements 10 -- print\n+@end smallexample\n+This defines the alias  @code{pp10} as being a sequence of 3 commands.\n+The first part @code{with print pretty --} temporarily activates the setting\n+@code{set print pretty}, then launches the command that follows the separator\n+@code{--}.\n+The command following the first part is also a @code{with} command that\n+temporarily changes the setting @code{set print elements} to 10, then\n+launches the command that follows the second separator @code{--}.\n+The third part @code{print} is the command the @code{pp10} alias will launch,\n+using the temporary values of the settings and the arguments explicitly given\n+by the user.\n+For more information about the @code{with} command usage,\n+see @ref{Command Settings}.\n+\n @c Python docs live in a separate file.\n @include python.texi\n \n@@ -27834,110 +27940,6 @@ This extends to errors while performing such requests: If an error happens\n while, for example, trying to pretty-print an object then the error is\n reported and any following extension languages are not tried.\n \n-@node Aliases\n-@section Creating new spellings of existing commands\n-@cindex aliases for commands\n-\n-It is often useful to define alternate spellings of existing commands.\n-For example, if a new @value{GDBN} command defined in Python has\n-a long name to type, it is handy to have an abbreviated version of it\n-that involves less typing.\n-\n-@value{GDBN} itself uses aliases.  For example @samp{s} is an alias\n-of the @samp{step} command even though it is otherwise an ambiguous\n-abbreviation of other commands like @samp{set} and @samp{show}.\n-\n-Aliases are also used to provide shortened or more common versions\n-of multi-word commands.  For example, @value{GDBN} provides the\n-@samp{tty} alias of the @samp{set inferior-tty} command.\n-\n-You can define a new alias with the @samp{alias} command.\n-\n-@table @code\n-\n-@kindex alias\n-@item alias [-a] [--] @var{ALIAS} = @var{COMMAND} [DEFAULT-ARGS...]\n-\n-@end table\n-\n-@var{ALIAS} specifies the name of the new alias.\n-Each word of @var{ALIAS} must consist of letters, numbers, dashes and\n-underscores.\n-\n-@var{COMMAND} specifies the name of an existing command\n-that is being aliased.\n-\n-@var{COMMAND} can also be the name of an existing alias.  In this case,\n-@var{COMMAND} cannot be an alias that has default arguments.\n-\n-The @samp{-a} option specifies that the new alias is an abbreviation\n-of the command.  Abbreviations are not used in command completion.\n-\n-The @samp{--} option specifies the end of options,\n-and is useful when @var{ALIAS} begins with a dash.\n-\n-You can specify @var{default-args} for your alias.\n-These @var{default-args} will be automatically added before the alias\n-arguments typed explicitly on the command line.\n-\n-For example, the below defines an alias @code{btfullall} that shows all local\n-variables and all frame arguments:\n-@smallexample\n-(@value{GDBP}) alias btfullall = backtrace -full -frame-arguments all\n-@end smallexample\n-\n-For more information about @var{default-args}, see @ref{Command aliases default args,\n-,Automatically prepend default arguments to user-defined aliases}.\n-\n-Here is a simple example showing how to make an abbreviation\n-of a command so that there is less to type.\n-Suppose you were tired of typing @samp{disas}, the current\n-shortest unambiguous abbreviation of the @samp{disassemble} command\n-and you wanted an even shorter version named @samp{di}.\n-The following will accomplish this.\n-\n-@smallexample\n-(gdb) alias -a di = disas\n-@end smallexample\n-\n-Note that aliases are different from user-defined commands.\n-With a user-defined command, you also need to write documentation\n-for it with the @samp{document} command.\n-An alias automatically picks up the documentation of the existing command.\n-\n-Here is an example where we make @samp{elms} an abbreviation of\n-@samp{elements} in the @samp{set print elements} command.\n-This is to show that you can make an abbreviation of any part\n-of a command.\n-\n-@smallexample\n-(gdb) alias -a set print elms = set print elements\n-(gdb) alias -a show print elms = show print elements\n-(gdb) set p elms 20\n-(gdb) show p elms\n-Limit on string chars or array elements to print is 200.\n-@end smallexample\n-\n-Note that if you are defining an alias of a @samp{set} command,\n-and you want to have an alias for the corresponding @samp{show}\n-command, then you need to define the latter separately.\n-\n-Unambiguously abbreviated commands are allowed in @var{COMMAND} and\n-@var{ALIAS}, just as they are normally.\n-\n-@smallexample\n-(gdb) alias -a set pr elms = set p ele\n-@end smallexample\n-\n-Finally, here is an example showing the creation of a one word\n-alias for a more complex command.\n-This creates alias @samp{spe} of the command @samp{set print elements}.\n-\n-@smallexample\n-(gdb) alias spe = set print elements\n-(gdb) spe 20\n-@end smallexample\n-\n @node Interpreters\n @chapter Command Interpreters\n @cindex command interpreters"
    }
  ]
}