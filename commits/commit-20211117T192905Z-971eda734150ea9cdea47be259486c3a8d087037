{
  "sha": "971eda734150ea9cdea47be259486c3a8d087037",
  "node_id": "C_kwDOANOeidoAKDk3MWVkYTczNDE1MGVhOWNkZWE0N2JlMjU5NDg2YzNhOGQwODcwMzc",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:21:33Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:29:05Z"
    },
    "message": "aarch64: [SME] Add SME instructions\n\nPatch is adding new SME matrix instructions. Please note additional\ninstructions will be added in following patches.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sme_zada_operand):\n\tNew parser.\n\t* config/tc-aarch64.c (parse_reg_with_qual):\n\tNew reg parser.\n\t* config/tc-aarch64.c (R_ZA): New egister type.\n\t(parse_operands): New parser.\n\t* testsuite/gas/aarch64/sme-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme.d: New test.\n\t* testsuite/gas/aarch64/sme.s: New test.\n\t* testsuite/gas/aarch64/sme-f64.d: New test.\n\t* testsuite/gas/aarch64/sme-f64.s: New test.\n\t* testsuite/gas/aarch64/sme-i64.d: New test.\n\t* testsuite/gas/aarch64/sme-i64.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operands\n\tAARCH64_OPND_SME_ZAda_2b, AARCH64_OPND_SME_ZAda_3b and\n\tAARCH64_OPND_SME_Pm.\n\t(enum aarch64_insn_class): New instruction class sme_misc.\n\nopcodes/ChangeLog:\n\n\t* aarch64-opc.c (aarch64_print_operand):\n\tPrint OPND_SME_ZAda_2b and OPND_SME_ZAda_3b operands.\n\t(verify_constraints): Handle OPND_SME_Pm.\n\t* aarch64-opc.h (enum aarch64_field_kind):\n\tNew bit fields FLD_SME_ZAda_2b, FLD_SME_ZAda_3b and FLD_SME_Pm.\n\t* aarch64-tbl.h (OP_SME_ZADA_PN_PM_ZN_S): New qualifier set.\n\t(OP_SME_ZADA_PN_PM_ZN_D): New qualifier.\n\t(OP_SME_ZADA_PN_PM_ZN_ZM): New qualifier.\n\t(OP_SME_ZADA_S_PM_PM_S_S): New qualifier.\n\t(OP_SME_ZADA_D_PM_PM_D_D): New qualifier.\n\t(OP_SME_ZADA_S_PM_PM_H_H): New qualifier.\n\t(OP_SME_ZADA_S_PM_PM_B_B): New qualifier.\n\t(OP_SME_ZADA_D_PM_PM_H_H): New qualifier.\n\t(SME_INSN): New instruction macro.\n\t(SME_F64_INSN): New instruction macro.\n\t(SME_I64_INSN): New instruction macro.\n\t(SME_INSNC): New instruction macro.\n\t(struct aarch64_opcode): New SME instructions.\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "3b9493f052037ac3bde3619db1c4e7d22d986d0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3b9493f052037ac3bde3619db1c4e7d22d986d0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/971eda734150ea9cdea47be259486c3a8d087037",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/971eda734150ea9cdea47be259486c3a8d087037",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/971eda734150ea9cdea47be259486c3a8d087037",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/971eda734150ea9cdea47be259486c3a8d087037/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57f02370a1e55bf09d3ede5ba6b2fcc78b40200a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57f02370a1e55bf09d3ede5ba6b2fcc78b40200a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57f02370a1e55bf09d3ede5ba6b2fcc78b40200a"
    }
  ],
  "stats": {
    "total": 1557,
    "additions": 1423,
    "deletions": 134
  },
  "files": [
    {
      "sha": "7c94e9b6c3182eed915322f4dd184b11b26d79b9",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 126,
      "deletions": 1,
      "changes": 127,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -278,6 +278,7 @@ struct reloc_entry\n   BASIC_REG_TYPE(VN)\t/* v[0-31] */\t\\\n   BASIC_REG_TYPE(ZN)\t/* z[0-31] */\t\\\n   BASIC_REG_TYPE(PN)\t/* p[0-15] */\t\\\n+  BASIC_REG_TYPE(ZA)\t/* za[0-15] */\t\\\n   /* Typecheck: any 64-bit int reg         (inc SP exc XZR).  */\t\\\n   MULTI_REG_TYPE(R64_SP, REG_TYPE(R_64) | REG_TYPE(SP_64))\t\t\\\n   /* Typecheck: same, plus SVE registers.  */\t\t\t\t\\\n@@ -4164,6 +4165,117 @@ parse_bti_operand (char **str,\n   return 0;\n }\n \n+/* Parse STR for reg of REG_TYPE and following '.' and QUALIFIER.\n+   Function returns REG_ENTRY struct and QUALIFIER [bhsdq] or NULL\n+   on failure. Format:\n+\n+     REG_TYPE.QUALIFIER\n+\n+   Side effect: Update STR with current parse position of success.\n+*/\n+\n+static const reg_entry *\n+parse_reg_with_qual (char **str, aarch64_reg_type reg_type,\n+                     aarch64_opnd_qualifier_t *qualifier)\n+{\n+  char *q;\n+\n+  reg_entry *reg = parse_reg (str);\n+  if (reg != NULL && reg->type == reg_type)\n+    {\n+      if (!skip_past_char (str, '.'))\n+        {\n+          set_syntax_error (_(\"missing ZA tile element size separator\"));\n+          return NULL;\n+        }\n+\n+      q = *str;\n+      switch (TOLOWER (*q))\n+        {\n+        case 'b':\n+          *qualifier = AARCH64_OPND_QLF_S_B;\n+          break;\n+        case 'h':\n+          *qualifier = AARCH64_OPND_QLF_S_H;\n+          break;\n+        case 's':\n+          *qualifier = AARCH64_OPND_QLF_S_S;\n+          break;\n+        case 'd':\n+          *qualifier = AARCH64_OPND_QLF_S_D;\n+          break;\n+        case 'q':\n+          *qualifier = AARCH64_OPND_QLF_S_Q;\n+          break;\n+        default:\n+          return NULL;\n+        }\n+      q++;\n+\n+      *str = q;\n+      return reg;\n+    }\n+\n+  return NULL;\n+}\n+\n+/* Parse SME ZA tile encoded in <ZAda> assembler symbol.\n+   Function return tile QUALIFIER on success.\n+\n+   Tiles are in example format: za[0-9]\\.[bhsd]\n+\n+   Function returns <ZAda> register number or PARSE_FAIL.\n+*/\n+static int\n+parse_sme_zada_operand (char **str, aarch64_opnd_qualifier_t *qualifier)\n+{\n+  int regno;\n+  const reg_entry *reg = parse_reg_with_qual (str, REG_TYPE_ZA, qualifier);\n+\n+  if (reg == NULL)\n+    return PARSE_FAIL;\n+  regno = reg->number;\n+\n+  switch (*qualifier)\n+    {\n+    case AARCH64_OPND_QLF_S_B:\n+      if (regno != 0x00)\n+      {\n+        set_syntax_error (_(\"invalid ZA tile register number, expected za0\"));\n+        return PARSE_FAIL;\n+      }\n+      break;\n+    case AARCH64_OPND_QLF_S_H:\n+      if (regno > 0x01)\n+      {\n+        set_syntax_error (_(\"invalid ZA tile register number, expected za0-za1\"));\n+        return PARSE_FAIL;\n+      }\n+      break;\n+    case AARCH64_OPND_QLF_S_S:\n+      if (regno > 0x03)\n+      {\n+        /* For the 32-bit variant: is the name of the ZA tile ZA0-ZA3.  */\n+        set_syntax_error (_(\"invalid ZA tile register number, expected za0-za3\"));\n+        return PARSE_FAIL;\n+      }\n+      break;\n+    case AARCH64_OPND_QLF_S_D:\n+      if (regno > 0x07)\n+      {\n+        /* For the 64-bit variant: is the name of the ZA tile ZA0-ZA7  */\n+        set_syntax_error (_(\"invalid ZA tile register number, expected za0-za7\"));\n+        return PARSE_FAIL;\n+      }\n+      break;\n+    default:\n+      set_syntax_error (_(\"invalid ZA tile element size, allowed b, h, s and d\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  return regno;\n+}\n+\n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n \n@@ -5801,6 +5913,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_SVE_Pm:\n \tcase AARCH64_OPND_SVE_Pn:\n \tcase AARCH64_OPND_SVE_Pt:\n+\tcase AARCH64_OPND_SME_Pm:\n \t  reg_type = REG_TYPE_PN;\n \t  goto vector_reg;\n \n@@ -6867,6 +6980,15 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t    goto failure;\n \t  break;\n \n+\tcase AARCH64_OPND_SME_ZAda_2b:\n+\tcase AARCH64_OPND_SME_ZAda_3b:\n+\t  val = parse_sme_zada_operand (&str, &qualifier);\n+\t  if (val == PARSE_FAIL)\n+\t    goto failure;\n+\t  info->reg.regno = val;\n+\t  info->qualifier = qualifier;\n+\t  break;\n+\n \tdefault:\n \t  as_fatal (_(\"unhandled operand code %d\"), operands[i]);\n \t}\n@@ -7463,7 +7585,10 @@ static const reg_entry reg_names[] = {\n   REGSET (z, ZN), REGSET (Z, ZN),\n \n   /* SVE predicate registers.  */\n-  REGSET16 (p, PN), REGSET16 (P, PN)\n+  REGSET16 (p, PN), REGSET16 (P, PN),\n+\n+  /* SME ZA tile registers.  */\n+  REGSET16 (za, ZA), REGSET16 (ZA, ZA)\n };\n \n #undef REGDEF"
    },
    {
      "sha": "7fdd19fd81206ad7fdb91944b75680caceed9f44",
      "filename": "gas/testsuite/gas/aarch64/sme-f64.d",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-f64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-f64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-f64.d?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,31 @@\n+#name: SME F64 extension\n+#as: -march=armv8-a+sme-f64\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\t80c82020 \tfmopa\tza0.d, p0/m, p1/m, z1.d, z8.d\n+   4:\t80c76841 \tfmopa\tza1.d, p2/m, p3/m, z2.d, z7.d\n+   8:\t80c6b062 \tfmopa\tza2.d, p4/m, p5/m, z3.d, z6.d\n+   c:\t80c5f883 \tfmopa\tza3.d, p6/m, p7/m, z4.d, z5.d\n+  10:\t80c404a4 \tfmopa\tza4.d, p1/m, p0/m, z5.d, z4.d\n+  14:\t80c34cc5 \tfmopa\tza5.d, p3/m, p2/m, z6.d, z3.d\n+  18:\t80c294e6 \tfmopa\tza6.d, p5/m, p4/m, z7.d, z2.d\n+  1c:\t80c1dd07 \tfmopa\tza7.d, p7/m, p6/m, z8.d, z1.d\n+  20:\t80c41ca4 \tfmopa\tza4.d, p7/m, p0/m, z5.d, z4.d\n+  24:\t80c338c5 \tfmopa\tza5.d, p6/m, p1/m, z6.d, z3.d\n+  28:\t80c254e6 \tfmopa\tza6.d, p5/m, p2/m, z7.d, z2.d\n+  2c:\t80c17107 \tfmopa\tza7.d, p4/m, p3/m, z8.d, z1.d\n+  30:\t80c82030 \tfmops\tza0.d, p0/m, p1/m, z1.d, z8.d\n+  34:\t80c76851 \tfmops\tza1.d, p2/m, p3/m, z2.d, z7.d\n+  38:\t80c6b072 \tfmops\tza2.d, p4/m, p5/m, z3.d, z6.d\n+  3c:\t80c5f893 \tfmops\tza3.d, p6/m, p7/m, z4.d, z5.d\n+  40:\t80c404b4 \tfmops\tza4.d, p1/m, p0/m, z5.d, z4.d\n+  44:\t80c34cd5 \tfmops\tza5.d, p3/m, p2/m, z6.d, z3.d\n+  48:\t80c294f6 \tfmops\tza6.d, p5/m, p4/m, z7.d, z2.d\n+  4c:\t80c1dd17 \tfmops\tza7.d, p7/m, p6/m, z8.d, z1.d\n+  50:\t81a1f803 \tfmopa\tza3.s, p6/m, p7/m, z0.h, z1.h\n+  54:\t8081f813 \tfmops\tza3.s, p6/m, p7/m, z0.s, z1.s"
    },
    {
      "sha": "03a136b152ef9e995877de30c147ac3632c2d51a",
      "filename": "gas/testsuite/gas/aarch64/sme-f64.s",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-f64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-f64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-f64.s?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,32 @@\n+/* Scalable Matrix Extension (SME F64).  */\n+\n+/* FMOPA (non-widening), double-precision.  */\n+fmopa za0.d, p0/m, p1/m, z1.d, z8.d\n+fmopa za1.d, p2/m, p3/m, z2.d, z7.d\n+fmopa za2.d, p4/m, p5/m, z3.d, z6.d\n+fmopa za3.d, p6/m, p7/m, z4.d, z5.d\n+fmopa za4.d, p1/m, p0/m, z5.d, z4.d\n+fmopa za5.d, p3/m, p2/m, z6.d, z3.d\n+fmopa za6.d, p5/m, p4/m, z7.d, z2.d\n+fmopa za7.d, p7/m, p6/m, z8.d, z1.d\n+fmopa za4.d, p7/m, p0/m, z5.d, z4.d\n+fmopa za5.d, p6/m, p1/m, z6.d, z3.d\n+fmopa za6.d, p5/m, p2/m, z7.d, z2.d\n+fmopa za7.d, p4/m, p3/m, z8.d, z1.d\n+\n+/* FMOPS (non-widening), double-precision.  */\n+fmops za0.d, p0/m, p1/m, z1.d, z8.d\n+fmops za1.d, p2/m, p3/m, z2.d, z7.d\n+fmops za2.d, p4/m, p5/m, z3.d, z6.d\n+fmops za3.d, p6/m, p7/m, z4.d, z5.d\n+fmops za4.d, p1/m, p0/m, z5.d, z4.d\n+fmops za5.d, p3/m, p2/m, z6.d, z3.d\n+fmops za6.d, p5/m, p4/m, z7.d, z2.d\n+fmops za7.d, p7/m, p6/m, z8.d, z1.d\n+\n+/* Register aliases.  */\n+foo .req za3\n+bar .req z0\n+\n+fmopa foo.s, p6/m, p7/m, bar.h, z1.h\n+fmops foo.s, p6/m, p7/m, bar.s, z1.s"
    },
    {
      "sha": "ee5880e585fb901b78b66a29b478de36eac29b80",
      "filename": "gas/testsuite/gas/aarch64/sme-i64.d",
      "status": "added",
      "additions": 117,
      "deletions": 0,
      "changes": 117,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-i64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-i64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-i64.d?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,117 @@\n+#name: SME I64 extension\n+#as: -march=armv8-a+sme-i64\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0d02020 \taddha\tza0.d, p0/m, p1/m, z1.d\n+   4:\tc0d06841 \taddha\tza1.d, p2/m, p3/m, z2.d\n+   8:\tc0d0b062 \taddha\tza2.d, p4/m, p5/m, z3.d\n+   c:\tc0d0f883 \taddha\tza3.d, p6/m, p7/m, z4.d\n+  10:\tc0d004a4 \taddha\tza4.d, p1/m, p0/m, z5.d\n+  14:\tc0d04cc5 \taddha\tza5.d, p3/m, p2/m, z6.d\n+  18:\tc0d094e6 \taddha\tza6.d, p5/m, p4/m, z7.d\n+  1c:\tc0d0dd07 \taddha\tza7.d, p7/m, p6/m, z8.d\n+  20:\tc0d01ca4 \taddha\tza4.d, p7/m, p0/m, z5.d\n+  24:\tc0d038c5 \taddha\tza5.d, p6/m, p1/m, z6.d\n+  28:\tc0d054e6 \taddha\tza6.d, p5/m, p2/m, z7.d\n+  2c:\tc0d07107 \taddha\tza7.d, p4/m, p3/m, z8.d\n+  30:\tc0d12020 \taddva\tza0.d, p0/m, p1/m, z1.d\n+  34:\tc0d16841 \taddva\tza1.d, p2/m, p3/m, z2.d\n+  38:\tc0d1b062 \taddva\tza2.d, p4/m, p5/m, z3.d\n+  3c:\tc0d1f883 \taddva\tza3.d, p6/m, p7/m, z4.d\n+  40:\tc0d104a4 \taddva\tza4.d, p1/m, p0/m, z5.d\n+  44:\tc0d14cc5 \taddva\tza5.d, p3/m, p2/m, z6.d\n+  48:\tc0d194e6 \taddva\tza6.d, p5/m, p4/m, z7.d\n+  4c:\tc0d1dd07 \taddva\tza7.d, p7/m, p6/m, z8.d\n+  50:\tc0d11ca4 \taddva\tza4.d, p7/m, p0/m, z5.d\n+  54:\tc0d138c5 \taddva\tza5.d, p6/m, p1/m, z6.d\n+  58:\tc0d154e6 \taddva\tza6.d, p5/m, p2/m, z7.d\n+  5c:\tc0d17107 \taddva\tza7.d, p4/m, p3/m, z8.d\n+  60:\ta0c82020 \tsmopa\tza0.d, p0/m, p1/m, z1.h, z8.h\n+  64:\ta0c76841 \tsmopa\tza1.d, p2/m, p3/m, z2.h, z7.h\n+  68:\ta0c6b062 \tsmopa\tza2.d, p4/m, p5/m, z3.h, z6.h\n+  6c:\ta0c5f883 \tsmopa\tza3.d, p6/m, p7/m, z4.h, z5.h\n+  70:\ta0c404a4 \tsmopa\tza4.d, p1/m, p0/m, z5.h, z4.h\n+  74:\ta0c34cc5 \tsmopa\tza5.d, p3/m, p2/m, z6.h, z3.h\n+  78:\ta0c294e6 \tsmopa\tza6.d, p5/m, p4/m, z7.h, z2.h\n+  7c:\ta0c1dd07 \tsmopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+  80:\ta0c82030 \tsmops\tza0.d, p0/m, p1/m, z1.h, z8.h\n+  84:\ta0c76851 \tsmops\tza1.d, p2/m, p3/m, z2.h, z7.h\n+  88:\ta0c6b072 \tsmops\tza2.d, p4/m, p5/m, z3.h, z6.h\n+  8c:\ta0c5f893 \tsmops\tza3.d, p6/m, p7/m, z4.h, z5.h\n+  90:\ta0c404b4 \tsmops\tza4.d, p1/m, p0/m, z5.h, z4.h\n+  94:\ta0c34cd5 \tsmops\tza5.d, p3/m, p2/m, z6.h, z3.h\n+  98:\ta0c294f6 \tsmops\tza6.d, p5/m, p4/m, z7.h, z2.h\n+  9c:\ta0c1dd17 \tsmops\tza7.d, p7/m, p6/m, z8.h, z1.h\n+  a0:\ta0c41cb4 \tsmops\tza4.d, p7/m, p0/m, z5.h, z4.h\n+  a4:\ta0c338d5 \tsmops\tza5.d, p6/m, p1/m, z6.h, z3.h\n+  a8:\ta0c254f6 \tsmops\tza6.d, p5/m, p2/m, z7.h, z2.h\n+  ac:\ta0c17117 \tsmops\tza7.d, p4/m, p3/m, z8.h, z1.h\n+  b0:\ta0e82020 \tsumopa\tza0.d, p0/m, p1/m, z1.h, z8.h\n+  b4:\ta0e76841 \tsumopa\tza1.d, p2/m, p3/m, z2.h, z7.h\n+  b8:\ta0e6b062 \tsumopa\tza2.d, p4/m, p5/m, z3.h, z6.h\n+  bc:\ta0e5f883 \tsumopa\tza3.d, p6/m, p7/m, z4.h, z5.h\n+  c0:\ta0e404a4 \tsumopa\tza4.d, p1/m, p0/m, z5.h, z4.h\n+  c4:\ta0e34cc5 \tsumopa\tza5.d, p3/m, p2/m, z6.h, z3.h\n+  c8:\ta0e294e6 \tsumopa\tza6.d, p5/m, p4/m, z7.h, z2.h\n+  cc:\ta0e1dd07 \tsumopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+  d0:\ta0e82030 \tsumops\tza0.d, p0/m, p1/m, z1.h, z8.h\n+  d4:\ta0e76851 \tsumops\tza1.d, p2/m, p3/m, z2.h, z7.h\n+  d8:\ta0e6b072 \tsumops\tza2.d, p4/m, p5/m, z3.h, z6.h\n+  dc:\ta0e5f893 \tsumops\tza3.d, p6/m, p7/m, z4.h, z5.h\n+  e0:\ta0e404b4 \tsumops\tza4.d, p1/m, p0/m, z5.h, z4.h\n+  e4:\ta0e34cd5 \tsumops\tza5.d, p3/m, p2/m, z6.h, z3.h\n+  e8:\ta0e294f6 \tsumops\tza6.d, p5/m, p4/m, z7.h, z2.h\n+  ec:\ta0e1dd17 \tsumops\tza7.d, p7/m, p6/m, z8.h, z1.h\n+  f0:\ta1e82020 \tumopa\tza0.d, p0/m, p1/m, z1.h, z8.h\n+  f4:\ta1e76841 \tumopa\tza1.d, p2/m, p3/m, z2.h, z7.h\n+  f8:\ta1e6b062 \tumopa\tza2.d, p4/m, p5/m, z3.h, z6.h\n+  fc:\ta1e5f883 \tumopa\tza3.d, p6/m, p7/m, z4.h, z5.h\n+ 100:\ta1e404a4 \tumopa\tza4.d, p1/m, p0/m, z5.h, z4.h\n+ 104:\ta1e34cc5 \tumopa\tza5.d, p3/m, p2/m, z6.h, z3.h\n+ 108:\ta1e294e6 \tumopa\tza6.d, p5/m, p4/m, z7.h, z2.h\n+ 10c:\ta1e1dd07 \tumopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 110:\ta1e82030 \tumops\tza0.d, p0/m, p1/m, z1.h, z8.h\n+ 114:\ta1e76851 \tumops\tza1.d, p2/m, p3/m, z2.h, z7.h\n+ 118:\ta1e6b072 \tumops\tza2.d, p4/m, p5/m, z3.h, z6.h\n+ 11c:\ta1e5f893 \tumops\tza3.d, p6/m, p7/m, z4.h, z5.h\n+ 120:\ta1e404b4 \tumops\tza4.d, p1/m, p0/m, z5.h, z4.h\n+ 124:\ta1e34cd5 \tumops\tza5.d, p3/m, p2/m, z6.h, z3.h\n+ 128:\ta1e294f6 \tumops\tza6.d, p5/m, p4/m, z7.h, z2.h\n+ 12c:\ta1e1dd17 \tumops\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 130:\ta1c82020 \tusmopa\tza0.d, p0/m, p1/m, z1.h, z8.h\n+ 134:\ta1c76841 \tusmopa\tza1.d, p2/m, p3/m, z2.h, z7.h\n+ 138:\ta1c6b062 \tusmopa\tza2.d, p4/m, p5/m, z3.h, z6.h\n+ 13c:\ta1c5f883 \tusmopa\tza3.d, p6/m, p7/m, z4.h, z5.h\n+ 140:\ta1c404a4 \tusmopa\tza4.d, p1/m, p0/m, z5.h, z4.h\n+ 144:\ta1c34cc5 \tusmopa\tza5.d, p3/m, p2/m, z6.h, z3.h\n+ 148:\ta1c294e6 \tusmopa\tza6.d, p5/m, p4/m, z7.h, z2.h\n+ 14c:\ta1c1dd07 \tusmopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 150:\ta1c82030 \tusmops\tza0.d, p0/m, p1/m, z1.h, z8.h\n+ 154:\ta1c76851 \tusmops\tza1.d, p2/m, p3/m, z2.h, z7.h\n+ 158:\ta1c6b072 \tusmops\tza2.d, p4/m, p5/m, z3.h, z6.h\n+ 15c:\ta1c5f893 \tusmops\tza3.d, p6/m, p7/m, z4.h, z5.h\n+ 160:\ta1c404b4 \tusmops\tza4.d, p1/m, p0/m, z5.h, z4.h\n+ 164:\ta1c34cd5 \tusmops\tza5.d, p3/m, p2/m, z6.h, z3.h\n+ 168:\ta1c294f6 \tusmops\tza6.d, p5/m, p4/m, z7.h, z2.h\n+ 16c:\ta1c1dd17 \tusmops\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 170:\ta1c41cb4 \tusmops\tza4.d, p7/m, p0/m, z5.h, z4.h\n+ 174:\ta1c338d5 \tusmops\tza5.d, p6/m, p1/m, z6.h, z3.h\n+ 178:\ta1c254f6 \tusmops\tza6.d, p5/m, p2/m, z7.h, z2.h\n+ 17c:\ta1c17117 \tusmops\tza7.d, p4/m, p3/m, z8.h, z1.h\n+ 180:\tc0d02020 \taddha\tza0.d, p0/m, p1/m, z1.d\n+ 184:\tc0d17107 \taddva\tza7.d, p4/m, p3/m, z8.d\n+ 188:\t8181f883 \tbfmopa\tza3.s, p6/m, p7/m, z4.h, z1.h\n+ 18c:\t8181f893 \tbfmops\tza3.s, p6/m, p7/m, z4.h, z1.h\n+ 190:\ta0c1dd07 \tsmopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 194:\ta0c17117 \tsmops\tza7.d, p4/m, p3/m, z8.h, z1.h\n+ 198:\ta0e1dd07 \tsumopa\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 19c:\ta0e1dd17 \tsumops\tza7.d, p7/m, p6/m, z8.h, z1.h\n+ 1a0:\ta1a1f883 \tumopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 1a4:\ta1a1f893 \tumops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 1a8:\ta1817083 \tusmopa\tza3.s, p4/m, p3/m, z4.b, z1.b\n+ 1ac:\ta181f893 \tusmops\tza3.s, p6/m, p7/m, z4.b, z1.b"
    },
    {
      "sha": "1f8ba84e5365bc49104c124cf84cdb050a2cb7b8",
      "filename": "gas/testsuite/gas/aarch64/sme-i64.s",
      "status": "added",
      "additions": 135,
      "deletions": 0,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-i64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-i64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-i64.s?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,135 @@\n+/* Scalable Matrix Extension (SME I64).  */\n+\n+/* ADDHA 64-bit variant.  */\n+addha za0.d, p0/m, p1/m, z1.d\n+addha za1.d, p2/m, p3/m, z2.d\n+addha za2.d, p4/m, p5/m, z3.d\n+addha za3.d, p6/m, p7/m, z4.d\n+addha za4.d, p1/m, p0/m, z5.d\n+addha za5.d, p3/m, p2/m, z6.d\n+addha za6.d, p5/m, p4/m, z7.d\n+addha za7.d, p7/m, p6/m, z8.d\n+addha za4.d, p7/m, p0/m, z5.d\n+addha za5.d, p6/m, p1/m, z6.d\n+addha za6.d, p5/m, p2/m, z7.d\n+addha za7.d, p4/m, p3/m, z8.d\n+\n+/* ADDVA 64-bit variant.  */\n+addva za0.d, p0/m, p1/m, z1.d\n+addva za1.d, p2/m, p3/m, z2.d\n+addva za2.d, p4/m, p5/m, z3.d\n+addva za3.d, p6/m, p7/m, z4.d\n+addva za4.d, p1/m, p0/m, z5.d\n+addva za5.d, p3/m, p2/m, z6.d\n+addva za6.d, p5/m, p4/m, z7.d\n+addva za7.d, p7/m, p6/m, z8.d\n+addva za4.d, p7/m, p0/m, z5.d\n+addva za5.d, p6/m, p1/m, z6.d\n+addva za6.d, p5/m, p2/m, z7.d\n+addva za7.d, p4/m, p3/m, z8.d\n+\n+/* SMOPA 64-bit variant.  */\n+smopa za0.d, p0/m, p1/m, z1.h, z8.h\n+smopa za1.d, p2/m, p3/m, z2.h, z7.h\n+smopa za2.d, p4/m, p5/m, z3.h, z6.h\n+smopa za3.d, p6/m, p7/m, z4.h, z5.h\n+smopa za4.d, p1/m, p0/m, z5.h, z4.h\n+smopa za5.d, p3/m, p2/m, z6.h, z3.h\n+smopa za6.d, p5/m, p4/m, z7.h, z2.h\n+smopa za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* SMOPS 64-bit variant.  */\n+smops za0.d, p0/m, p1/m, z1.h, z8.h\n+smops za1.d, p2/m, p3/m, z2.h, z7.h\n+smops za2.d, p4/m, p5/m, z3.h, z6.h\n+smops za3.d, p6/m, p7/m, z4.h, z5.h\n+smops za4.d, p1/m, p0/m, z5.h, z4.h\n+smops za5.d, p3/m, p2/m, z6.h, z3.h\n+smops za6.d, p5/m, p4/m, z7.h, z2.h\n+smops za7.d, p7/m, p6/m, z8.h, z1.h\n+smops za4.d, p7/m, p0/m, z5.h, z4.h\n+smops za5.d, p6/m, p1/m, z6.h, z3.h\n+smops za6.d, p5/m, p2/m, z7.h, z2.h\n+smops za7.d, p4/m, p3/m, z8.h, z1.h\n+\n+/* SUMOPA 64-bit variant.  */\n+sumopa za0.d, p0/m, p1/m, z1.h, z8.h\n+sumopa za1.d, p2/m, p3/m, z2.h, z7.h\n+sumopa za2.d, p4/m, p5/m, z3.h, z6.h\n+sumopa za3.d, p6/m, p7/m, z4.h, z5.h\n+sumopa za4.d, p1/m, p0/m, z5.h, z4.h\n+sumopa za5.d, p3/m, p2/m, z6.h, z3.h\n+sumopa za6.d, p5/m, p4/m, z7.h, z2.h\n+sumopa za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* SUMOPS 64-bit variant.  */\n+sumops za0.d, p0/m, p1/m, z1.h, z8.h\n+sumops za1.d, p2/m, p3/m, z2.h, z7.h\n+sumops za2.d, p4/m, p5/m, z3.h, z6.h\n+sumops za3.d, p6/m, p7/m, z4.h, z5.h\n+sumops za4.d, p1/m, p0/m, z5.h, z4.h\n+sumops za5.d, p3/m, p2/m, z6.h, z3.h\n+sumops za6.d, p5/m, p4/m, z7.h, z2.h\n+sumops za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* UMOPA 64-bit variant.  */\n+umopa za0.d, p0/m, p1/m, z1.h, z8.h\n+umopa za1.d, p2/m, p3/m, z2.h, z7.h\n+umopa za2.d, p4/m, p5/m, z3.h, z6.h\n+umopa za3.d, p6/m, p7/m, z4.h, z5.h\n+umopa za4.d, p1/m, p0/m, z5.h, z4.h\n+umopa za5.d, p3/m, p2/m, z6.h, z3.h\n+umopa za6.d, p5/m, p4/m, z7.h, z2.h\n+umopa za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* UMOPS 64-bit variant.  */\n+umops za0.d, p0/m, p1/m, z1.h, z8.h\n+umops za1.d, p2/m, p3/m, z2.h, z7.h\n+umops za2.d, p4/m, p5/m, z3.h, z6.h\n+umops za3.d, p6/m, p7/m, z4.h, z5.h\n+umops za4.d, p1/m, p0/m, z5.h, z4.h\n+umops za5.d, p3/m, p2/m, z6.h, z3.h\n+umops za6.d, p5/m, p4/m, z7.h, z2.h\n+umops za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* USMOPA 64-bit variant.  */\n+usmopa za0.d, p0/m, p1/m, z1.h, z8.h\n+usmopa za1.d, p2/m, p3/m, z2.h, z7.h\n+usmopa za2.d, p4/m, p5/m, z3.h, z6.h\n+usmopa za3.d, p6/m, p7/m, z4.h, z5.h\n+usmopa za4.d, p1/m, p0/m, z5.h, z4.h\n+usmopa za5.d, p3/m, p2/m, z6.h, z3.h\n+usmopa za6.d, p5/m, p4/m, z7.h, z2.h\n+usmopa za7.d, p7/m, p6/m, z8.h, z1.h\n+\n+/* USMOPS 64-bit variant.  */\n+usmops za0.d, p0/m, p1/m, z1.h, z8.h\n+usmops za1.d, p2/m, p3/m, z2.h, z7.h\n+usmops za2.d, p4/m, p5/m, z3.h, z6.h\n+usmops za3.d, p6/m, p7/m, z4.h, z5.h\n+usmops za4.d, p1/m, p0/m, z5.h, z4.h\n+usmops za5.d, p3/m, p2/m, z6.h, z3.h\n+usmops za6.d, p5/m, p4/m, z7.h, z2.h\n+usmops za7.d, p7/m, p6/m, z8.h, z1.h\n+usmops za4.d, p7/m, p0/m, z5.h, z4.h\n+usmops za5.d, p6/m, p1/m, z6.h, z3.h\n+usmops za6.d, p5/m, p2/m, z7.h, z2.h\n+usmops za7.d, p4/m, p3/m, z8.h, z1.h\n+\n+/* Register aliases.  */\n+foo .req za3\n+bar .req za7\n+baz .req za0\n+\n+addha baz.d, p0/m, p1/m, z1.d\n+addva bar.d, p4/m, p3/m, z8.d\n+bfmopa foo.s, p6/m, p7/m, z4.h, z1.h\n+bfmops foo.s, p6/m, p7/m, z4.h, z1.h\n+smopa bar.d, p7/m, p6/m, z8.h, z1.h\n+smops bar.d, p4/m, p3/m, z8.h, z1.h\n+sumopa bar.d, p7/m, p6/m, z8.h, z1.h\n+sumops bar.d, p7/m, p6/m, z8.h, z1.h\n+umopa foo.s, p6/m, p7/m, z4.b, z1.b\n+umops foo.s, p6/m, p7/m, z4.b, z1.b\n+usmopa foo.s, p4/m, p3/m, z4.b, z1.b\n+usmops foo.s, p6/m, p7/m, z4.b, z1.b"
    },
    {
      "sha": "8fb819ba4ed8a0b4ac11394cf6033757193d245a",
      "filename": "gas/testsuite/gas/aarch64/sme-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-illegal.d?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme+sme-i64+sme-f64\n+#source: sme-illegal.s\n+#error_output: sme-illegal.l"
    },
    {
      "sha": "19d22daad6793d27d549f83d48b5c6d6d50b1f15",
      "filename": "gas/testsuite/gas/aarch64/sme-illegal.l",
      "status": "added",
      "additions": 95,
      "deletions": 0,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-illegal.l?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,95 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `addha za4.s,p0/m,p1/m,z1.s'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `addha za15.s,p2/m,p3/m,z2.s'\n+[^:]*:[0-9]+: Error: operand mismatch -- `addha za0.s,p2/m,p3/m,z2.d'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \taddha za0.d, p2/m, p3/m, z2.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `addha za8.d,p0/m,p1/m,z1.d'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `addha za15.d,p2/m,p3/m,z2.d'\n+[^:]*:[0-9]+: Error: operand mismatch -- `addha za0.d,p2/m,p3/m,z2.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \taddha za0.d, p2/m, p3/m, z2.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `addva za4.s,p0/m,p1/m,z1.s'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `addva za15.s,p2/m,p3/m,z2.s'\n+[^:]*:[0-9]+: Error: operand mismatch -- `addva za0.s,p2/m,p3/m,z2.d'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \taddva za0.d, p2/m, p3/m, z2.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `addva za8.d,p0/m,p1/m,z1.d'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `addva za15.d,p2/m,p3/m,z2.d'\n+[^:]*:[0-9]+: Error: operand mismatch -- `addva za0.d,p2/m,p3/m,z2.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \taddva za0.d, p2/m, p3/m, z2.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `bfmopa za4.s,p0/m,p1/m,z1.h,z4.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `bfmopa za0.s,p2/m,p3/m,z2.s,z3.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tbfmopa za0.s, p2/m, p3/m, z2.h, z3.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `bfmops za4.s,p0/m,p1/m,z1.h,z4.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `bfmops za0.s,p2/m,p3/m,z2.s,z3.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tbfmops za0.s, p2/m, p3/m, z2.h, z3.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `fmopa za4.s,p0/m,p1/m,z1.s,z4.s'\n+[^:]*:[0-9]+: Error: operand mismatch -- `fmopa za0.s,p6/m,p7/m,z4.d,z1.d'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tfmopa za0.d, p6/m, p7/m, z4.d, z1.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `fmopa za8.d,p0/m,p1/m,z1.d,z8.d'\n+[^:]*:[0-9]+: Error: operand mismatch -- `fmopa za0.d,p2/m,p3/m,z2.s,z7.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tfmopa za0.d, p2/m, p3/m, z2.d, z7.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `fmopa za4.s,p0/m,p1/m,z1.h,z4.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `fmopa za1.s,p2/m,p3/m,z2.q,z3.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tfmopa za1.d, p2/m, p3/m, z2.d, z3.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `fmops za4.s,p0/m,p1/m,z1.s,z4.s'\n+[^:]*:[0-9]+: Error: operand mismatch -- `fmops za1.s,p2/m,p3/m,z2.q,z3.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tfmops za1.d, p2/m, p3/m, z2.d, z3.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `fmops za8.d,p0/m,p1/m,z1.d,z8.d'\n+[^:]*:[0-9]+: Error: operand mismatch -- `fmops za0.d,p2/m,p3/m,z2.s,z7.s'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tfmops za0.d, p2/m, p3/m, z2.d, z7.d\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `fmops za8.s,p0/m,p1/m,z1.h,z4.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `fmops za1.q,p2/m,p3/m,z2.h,z3.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `smopa za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `smopa za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `smopa za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `smopa za1.d,p2/m,p3/m,z2.h,z7.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsmopa za1.d, p2/m, p3/m, z2.h, z7.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `smops za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `smops za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `smops za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `smops za1.d,p2/m,p3/m,z2.h,z7.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsmops za1.d, p2/m, p3/m, z2.h, z7.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `sumopa za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `sumopa za1.q,p2/m,p3/m,z2.s,z3.s'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `sumopa za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `sumopa za1.d,p2/m,p3/m,z2.h,z7.q'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tsumopa za1.d, p2/m, p3/m, z2.h, z7.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `sumops za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `sumops za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `sumops za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `sumops za1.q,p2/m,p3/m,z2.h,z7.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `umopa za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `umopa za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `umopa za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `umopa za1.q,p2/m,p3/m,z2.h,z7.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `umops za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `umops za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `umops za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `umops za1.d,p2/m,p3/m,z2.d,z7.d'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tumops za1.d, p2/m, p3/m, z2.h, z7.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `usmopa za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `usmopa za1.q,p2/m,p3/m,z2.b,z3.b'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `usmopa za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile element size, allowed b, h, s and d at operand 1 -- `usmopa za1.q,p2/m,p3/m,z2.h,z7.h'\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za3 at operand 1 -- `usmops za4.s,p0/m,p1/m,z1.b,z4.b'\n+[^:]*:[0-9]+: Error: operand mismatch -- `usmops za1.s,p2/m,p3/m,z2.s,z3.b'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tusmops za1.d, p2/m, p3/m, z2.h, z3.h\n+[^:]*:[0-9]+: Error: invalid ZA tile register number, expected za0-za7 at operand 1 -- `usmops za8.d,p0/m,p1/m,z1.h,z8.h'\n+[^:]*:[0-9]+: Error: operand mismatch -- `usmops za1.d,p2/m,p3/m,z2.d,z7.d'\n+[^:]*:[0-9]+: Info:    did you mean this\\?\n+[^:]*:[0-9]+: Info:    \tusmops za1.d, p2/m, p3/m, z2.h, z7.h"
    },
    {
      "sha": "d543a64217a9e8921713d0b9a577ba011c6d0a25",
      "filename": "gas/testsuite/gas/aarch64/sme-illegal.s",
      "status": "added",
      "additions": 117,
      "deletions": 0,
      "changes": 117,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-illegal.s?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,117 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* ADDHA 32-bit variant.  */\n+addha za4.s, p0/m, p1/m, z1.s\n+addha za15.s, p2/m, p3/m, z2.s\n+addha za0.s, p2/m, p3/m, z2.d\n+\n+/* ADDHA 64-bit variant.  */\n+addha za8.d, p0/m, p1/m, z1.d\n+addha za15.d, p2/m, p3/m, z2.d\n+addha za0.d, p2/m, p3/m, z2.s\n+\n+/* ADDVA 32-bit variant.  */\n+addva za4.s, p0/m, p1/m, z1.s\n+addva za15.s, p2/m, p3/m, z2.s\n+addva za0.s, p2/m, p3/m, z2.d\n+\n+/* ADDVA 64-bit variant.  */\n+addva za8.d, p0/m, p1/m, z1.d\n+addva za15.d, p2/m, p3/m, z2.d\n+addva za0.d, p2/m, p3/m, z2.s\n+\n+/* BFMOPA.  */\n+bfmopa za4.s, p0/m, p1/m, z1.h, z4.h\n+bfmopa za0.s, p2/m, p3/m, z2.s, z3.s\n+\n+/* BFMOPS.  */\n+bfmops za4.s, p0/m, p1/m, z1.h, z4.h\n+bfmops za0.s, p2/m, p3/m, z2.s, z3.s\n+\n+/* FMOPA (non-widening), single-precision.  */\n+fmopa za4.s, p0/m, p1/m, z1.s, z4.s\n+fmopa za0.s, p6/m, p7/m, z4.d, z1.d\n+\n+/* FMOPA (non-widening), double-precision.  */\n+fmopa za8.d, p0/m, p1/m, z1.d, z8.d\n+fmopa za0.d, p2/m, p3/m, z2.s, z7.s\n+\n+/* FMOPA (widening)  */\n+fmopa za4.s, p0/m, p1/m, z1.h, z4.h\n+fmopa za1.s, p2/m, p3/m, z2.q, z3.q\n+\n+/* FMOPS (non-widening), single-precision.  */\n+fmops za4.s, p0/m, p1/m, z1.s, z4.s\n+fmops za1.s, p2/m, p3/m, z2.q, z3.q\n+\n+/* FMOPS (non-widening), double-precision.  */\n+fmops za8.d, p0/m, p1/m, z1.d, z8.d\n+fmops za0.d, p2/m, p3/m, z2.s, z7.s\n+\n+/* FMOPS (widening)  */\n+fmops za8.s, p0/m, p1/m, z1.h, z4.h\n+fmops za1.q, p2/m, p3/m, z2.h, z3.h\n+\n+/* SMOPA 32-bit variant.  */\n+smopa za4.s, p0/m, p1/m, z1.b, z4.b\n+smopa za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* SMOPA 64-bit variant.  */\n+smopa za8.d, p0/m, p1/m, z1.h, z8.h\n+smopa za1.d, p2/m, p3/m, z2.h, z7.q\n+\n+/* SMOPS 32-bit variant.  */\n+smops za4.s, p0/m, p1/m, z1.b, z4.b\n+smops za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* SMOPS 64-bit variant.  */\n+smops za8.d, p0/m, p1/m, z1.h, z8.h\n+smops za1.d, p2/m, p3/m, z2.h, z7.q\n+\n+/* SUMOPA 32-bit variant.  */\n+sumopa za4.s, p0/m, p1/m, z1.b, z4.b\n+sumopa za1.q, p2/m, p3/m, z2.s, z3.s\n+\n+/* SUMOPA 64-bit variant.  */\n+sumopa za8.d, p0/m, p1/m, z1.h, z8.h\n+sumopa za1.d, p2/m, p3/m, z2.h, z7.q\n+\n+/* SUMOPS 32-bit variant.  */\n+sumops za4.s, p0/m, p1/m, z1.b, z4.b\n+sumops za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* SUMOPS 64-bit variant.  */\n+sumops za8.d, p0/m, p1/m, z1.h, z8.h\n+sumops za1.q, p2/m, p3/m, z2.h, z7.h\n+\n+/* UMOPA 32-bit variant.  */\n+umopa za4.s, p0/m, p1/m, z1.b, z4.b\n+umopa za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* UMOPA 64-bit variant.  */\n+umopa za8.d, p0/m, p1/m, z1.h, z8.h\n+umopa za1.q, p2/m, p3/m, z2.h, z7.h\n+\n+/* UMOPS 32-bit variant.  */\n+umops za4.s, p0/m, p1/m, z1.b, z4.b\n+umops za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* UMOPS 64-bit variant.  */\n+umops za8.d, p0/m, p1/m, z1.h, z8.h\n+umops za1.d, p2/m, p3/m, z2.d, z7.d\n+\n+/* USMOPA 32-bit variant.  */\n+usmopa za4.s, p0/m, p1/m, z1.b, z4.b\n+usmopa za1.q, p2/m, p3/m, z2.b, z3.b\n+\n+/* USMOPA 64-bit variant.  */\n+usmopa za8.d, p0/m, p1/m, z1.h, z8.h\n+usmopa za1.q, p2/m, p3/m, z2.h, z7.h\n+\n+/* USMOPS 32-bit variant.  */\n+usmops za4.s, p0/m, p1/m, z1.b, z4.b\n+usmops za1.s, p2/m, p3/m, z2.s, z3.b\n+\n+/* USMOPS 64-bit variant.  */\n+usmops za8.d, p0/m, p1/m, z1.h, z8.h\n+usmops za1.d, p2/m, p3/m, z2.d, z7.d"
    },
    {
      "sha": "673ac79ca9f3397c2ac348afa2d092e13afeaa74",
      "filename": "gas/testsuite/gas/aarch64/sme.d",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme.d?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,93 @@\n+#name: SME extension\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0902020 \taddha\tza0.s, p0/m, p1/m, z1.s\n+   4:\tc0906841 \taddha\tza1.s, p2/m, p3/m, z2.s\n+   8:\tc090b062 \taddha\tza2.s, p4/m, p5/m, z3.s\n+   c:\tc090f883 \taddha\tza3.s, p6/m, p7/m, z4.s\n+  10:\tc0912020 \taddva\tza0.s, p0/m, p1/m, z1.s\n+  14:\tc0916841 \taddva\tza1.s, p2/m, p3/m, z2.s\n+  18:\tc091b062 \taddva\tza2.s, p4/m, p5/m, z3.s\n+  1c:\tc091f883 \taddva\tza3.s, p6/m, p7/m, z4.s\n+  20:\t81842020 \tbfmopa\tza0.s, p0/m, p1/m, z1.h, z4.h\n+  24:\t81836841 \tbfmopa\tza1.s, p2/m, p3/m, z2.h, z3.h\n+  28:\t8182b062 \tbfmopa\tza2.s, p4/m, p5/m, z3.h, z2.h\n+  2c:\t8181f883 \tbfmopa\tza3.s, p6/m, p7/m, z4.h, z1.h\n+  30:\t81842030 \tbfmops\tza0.s, p0/m, p1/m, z1.h, z4.h\n+  34:\t81836851 \tbfmops\tza1.s, p2/m, p3/m, z2.h, z3.h\n+  38:\t8182b072 \tbfmops\tza2.s, p4/m, p5/m, z3.h, z2.h\n+  3c:\t8181f893 \tbfmops\tza3.s, p6/m, p7/m, z4.h, z1.h\n+  40:\t80842020 \tfmopa\tza0.s, p0/m, p1/m, z1.s, z4.s\n+  44:\t80836841 \tfmopa\tza1.s, p2/m, p3/m, z2.s, z3.s\n+  48:\t8082b062 \tfmopa\tza2.s, p4/m, p5/m, z3.s, z2.s\n+  4c:\t8081f883 \tfmopa\tza3.s, p6/m, p7/m, z4.s, z1.s\n+  50:\t81a42020 \tfmopa\tza0.s, p0/m, p1/m, z1.h, z4.h\n+  54:\t81a36841 \tfmopa\tza1.s, p2/m, p3/m, z2.h, z3.h\n+  58:\t81a2b062 \tfmopa\tza2.s, p4/m, p5/m, z3.h, z2.h\n+  5c:\t81a1f883 \tfmopa\tza3.s, p6/m, p7/m, z4.h, z1.h\n+  60:\t80842030 \tfmops\tza0.s, p0/m, p1/m, z1.s, z4.s\n+  64:\t80836851 \tfmops\tza1.s, p2/m, p3/m, z2.s, z3.s\n+  68:\t8082b072 \tfmops\tza2.s, p4/m, p5/m, z3.s, z2.s\n+  6c:\t8081f893 \tfmops\tza3.s, p6/m, p7/m, z4.s, z1.s\n+  70:\t80841c30 \tfmops\tza0.s, p7/m, p0/m, z1.s, z4.s\n+  74:\t80833851 \tfmops\tza1.s, p6/m, p1/m, z2.s, z3.s\n+  78:\t80825472 \tfmops\tza2.s, p5/m, p2/m, z3.s, z2.s\n+  7c:\t80817093 \tfmops\tza3.s, p4/m, p3/m, z4.s, z1.s\n+  80:\t80842030 \tfmops\tza0.s, p0/m, p1/m, z1.s, z4.s\n+  84:\t80836851 \tfmops\tza1.s, p2/m, p3/m, z2.s, z3.s\n+  88:\t8082b072 \tfmops\tza2.s, p4/m, p5/m, z3.s, z2.s\n+  8c:\t8081f893 \tfmops\tza3.s, p6/m, p7/m, z4.s, z1.s\n+  90:\ta0842020 \tsmopa\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  94:\ta0836841 \tsmopa\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  98:\ta082b062 \tsmopa\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  9c:\ta081f883 \tsmopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+  a0:\ta0842030 \tsmops\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  a4:\ta0836851 \tsmops\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  a8:\ta082b072 \tsmops\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  ac:\ta081f893 \tsmops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+  b0:\ta0a42020 \tsumopa\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  b4:\ta0a36841 \tsumopa\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  b8:\ta0a2b062 \tsumopa\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  bc:\ta0a1f883 \tsumopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+  c0:\ta0a42030 \tsumops\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  c4:\ta0a36851 \tsumops\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  c8:\ta0a2b072 \tsumops\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  cc:\ta0a1f893 \tsumops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+  d0:\ta0a41c30 \tsumops\tza0.s, p7/m, p0/m, z1.b, z4.b\n+  d4:\ta0a33851 \tsumops\tza1.s, p6/m, p1/m, z2.b, z3.b\n+  d8:\ta0a25472 \tsumops\tza2.s, p5/m, p2/m, z3.b, z2.b\n+  dc:\ta0a17093 \tsumops\tza3.s, p4/m, p3/m, z4.b, z1.b\n+  e0:\ta1a42020 \tumopa\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  e4:\ta1a36841 \tumopa\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  e8:\ta1a2b062 \tumopa\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  ec:\ta1a1f883 \tumopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+  f0:\ta1a42030 \tumops\tza0.s, p0/m, p1/m, z1.b, z4.b\n+  f4:\ta1a36851 \tumops\tza1.s, p2/m, p3/m, z2.b, z3.b\n+  f8:\ta1a2b072 \tumops\tza2.s, p4/m, p5/m, z3.b, z2.b\n+  fc:\ta1a1f893 \tumops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 100:\ta1842020 \tusmopa\tza0.s, p0/m, p1/m, z1.b, z4.b\n+ 104:\ta1836841 \tusmopa\tza1.s, p2/m, p3/m, z2.b, z3.b\n+ 108:\ta182b062 \tusmopa\tza2.s, p4/m, p5/m, z3.b, z2.b\n+ 10c:\ta181f883 \tusmopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 110:\ta1841c20 \tusmopa\tza0.s, p7/m, p0/m, z1.b, z4.b\n+ 114:\ta1833841 \tusmopa\tza1.s, p6/m, p1/m, z2.b, z3.b\n+ 118:\ta1825462 \tusmopa\tza2.s, p5/m, p2/m, z3.b, z2.b\n+ 11c:\ta1817083 \tusmopa\tza3.s, p4/m, p3/m, z4.b, z1.b\n+ 120:\ta1842030 \tusmops\tza0.s, p0/m, p1/m, z1.b, z4.b\n+ 124:\ta1836851 \tusmops\tza1.s, p2/m, p3/m, z2.b, z3.b\n+ 128:\ta182b072 \tusmops\tza2.s, p4/m, p5/m, z3.b, z2.b\n+ 12c:\ta181f893 \tusmops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 130:\t8181f883 \tbfmopa\tza3.s, p6/m, p7/m, z4.h, z1.h\n+ 134:\t8181f893 \tbfmops\tza3.s, p6/m, p7/m, z4.h, z1.h\n+ 138:\t81a1f883 \tfmopa\tza3.s, p6/m, p7/m, z4.h, z1.h\n+ 13c:\t8081f893 \tfmops\tza3.s, p6/m, p7/m, z4.s, z1.s\n+ 140:\ta1a1f883 \tumopa\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 144:\ta1a1f893 \tumops\tza3.s, p6/m, p7/m, z4.b, z1.b\n+ 148:\ta1817083 \tusmopa\tza3.s, p4/m, p3/m, z4.b, z1.b\n+ 14c:\ta181f893 \tusmops\tza3.s, p6/m, p7/m, z4.b, z1.b"
    },
    {
      "sha": "ad48fa0e5cef01480164ee258d757fe6ade05ed9",
      "filename": "gas/testsuite/gas/aarch64/sme.s",
      "status": "added",
      "additions": 123,
      "deletions": 0,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/gas/testsuite/gas/aarch64/sme.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme.s?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -0,0 +1,123 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* ADDHA 32-bit variant.  */\n+addha za0.s, p0/m, p1/m, z1.s\n+addha za1.s, p2/m, p3/m, z2.s\n+addha za2.s, p4/m, p5/m, z3.s\n+addha za3.s, p6/m, p7/m, z4.s\n+\n+/* ADDVA 32-bit variant.  */\n+addva za0.s, p0/m, p1/m, z1.s\n+addva za1.s, p2/m, p3/m, z2.s\n+addva za2.s, p4/m, p5/m, z3.s\n+addva za3.s, p6/m, p7/m, z4.s\n+\n+/* BFMOPA.  */\n+bfmopa za0.s, p0/m, p1/m, z1.h, z4.h\n+bfmopa za1.s, p2/m, p3/m, z2.h, z3.h\n+bfmopa za2.s, p4/m, p5/m, z3.h, z2.h\n+bfmopa za3.s, p6/m, p7/m, z4.h, z1.h\n+\n+/* BFMOPS.  */\n+bfmops za0.s, p0/m, p1/m, z1.h, z4.h\n+bfmops za1.s, p2/m, p3/m, z2.h, z3.h\n+bfmops za2.s, p4/m, p5/m, z3.h, z2.h\n+bfmops za3.s, p6/m, p7/m, z4.h, z1.h\n+\n+/* FMOPA (non-widening), single-precision.  */\n+fmopa za0.s, p0/m, p1/m, z1.s, z4.s\n+fmopa za1.s, p2/m, p3/m, z2.s, z3.s\n+fmopa za2.s, p4/m, p5/m, z3.s, z2.s\n+fmopa za3.s, p6/m, p7/m, z4.s, z1.s\n+\n+/* FMOPA (widening)  */\n+fmopa za0.s, p0/m, p1/m, z1.h, z4.h\n+fmopa za1.s, p2/m, p3/m, z2.h, z3.h\n+fmopa za2.s, p4/m, p5/m, z3.h, z2.h\n+fmopa za3.s, p6/m, p7/m, z4.h, z1.h\n+\n+/* FMOPS (non-widening), single-precision.  */\n+fmops za0.s, p0/m, p1/m, z1.s, z4.s\n+fmops za1.s, p2/m, p3/m, z2.s, z3.s\n+fmops za2.s, p4/m, p5/m, z3.s, z2.s\n+fmops za3.s, p6/m, p7/m, z4.s, z1.s\n+fmops za0.s, p7/m, p0/m, z1.s, z4.s\n+fmops za1.s, p6/m, p1/m, z2.s, z3.s\n+fmops za2.s, p5/m, p2/m, z3.s, z2.s\n+fmops za3.s, p4/m, p3/m, z4.s, z1.s\n+\n+/* FMOPS (widening)  */\n+fmops za0.s, p0/m, p1/m, z1.s, z4.s\n+fmops za1.s, p2/m, p3/m, z2.s, z3.s\n+fmops za2.s, p4/m, p5/m, z3.s, z2.s\n+fmops za3.s, p6/m, p7/m, z4.s, z1.s\n+\n+/* SMOPA 32-bit variant.  */\n+smopa za0.s, p0/m, p1/m, z1.b, z4.b\n+smopa za1.s, p2/m, p3/m, z2.b, z3.b\n+smopa za2.s, p4/m, p5/m, z3.b, z2.b\n+smopa za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* SMOPS 32-bit variant.  */\n+smops za0.s, p0/m, p1/m, z1.b, z4.b\n+smops za1.s, p2/m, p3/m, z2.b, z3.b\n+smops za2.s, p4/m, p5/m, z3.b, z2.b\n+smops za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* SUMOPA 32-bit variant.  */\n+sumopa za0.s, p0/m, p1/m, z1.b, z4.b\n+sumopa za1.s, p2/m, p3/m, z2.b, z3.b\n+sumopa za2.s, p4/m, p5/m, z3.b, z2.b\n+sumopa za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* SUMOPS 32-bit variant.  */\n+sumops za0.s, p0/m, p1/m, z1.b, z4.b\n+sumops za1.s, p2/m, p3/m, z2.b, z3.b\n+sumops za2.s, p4/m, p5/m, z3.b, z2.b\n+sumops za3.s, p6/m, p7/m, z4.b, z1.b\n+sumops za0.s, p7/m, p0/m, z1.b, z4.b\n+sumops za1.s, p6/m, p1/m, z2.b, z3.b\n+sumops za2.s, p5/m, p2/m, z3.b, z2.b\n+sumops za3.s, p4/m, p3/m, z4.b, z1.b\n+\n+/* UMOPA 32-bit variant.  */\n+umopa za0.s, p0/m, p1/m, z1.b, z4.b\n+umopa za1.s, p2/m, p3/m, z2.b, z3.b\n+umopa za2.s, p4/m, p5/m, z3.b, z2.b\n+umopa za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* UMOPS 32-bit variant.  */\n+umops za0.s, p0/m, p1/m, z1.b, z4.b\n+umops za1.s, p2/m, p3/m, z2.b, z3.b\n+umops za2.s, p4/m, p5/m, z3.b, z2.b\n+umops za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* USMOPA 32-bit variant.  */\n+usmopa za0.s, p0/m, p1/m, z1.b, z4.b\n+usmopa za1.s, p2/m, p3/m, z2.b, z3.b\n+usmopa za2.s, p4/m, p5/m, z3.b, z2.b\n+usmopa za3.s, p6/m, p7/m, z4.b, z1.b\n+usmopa za0.s, p7/m, p0/m, z1.b, z4.b\n+usmopa za1.s, p6/m, p1/m, z2.b, z3.b\n+usmopa za2.s, p5/m, p2/m, z3.b, z2.b\n+usmopa za3.s, p4/m, p3/m, z4.b, z1.b\n+\n+/* USMOPS 32-bit variant.  */\n+usmops za0.s, p0/m, p1/m, z1.b, z4.b\n+usmops za1.s, p2/m, p3/m, z2.b, z3.b\n+usmops za2.s, p4/m, p5/m, z3.b, z2.b\n+usmops za3.s, p6/m, p7/m, z4.b, z1.b\n+\n+/* Register aliases.  */\n+foo .req za3\n+bar .req za7\n+baz .req za0\n+\n+bfmopa foo.s, p6/m, p7/m, z4.h, z1.h\n+bfmops foo.s, p6/m, p7/m, z4.h, z1.h\n+fmopa foo.s, p6/m, p7/m, z4.h, z1.h\n+fmops foo.s, p6/m, p7/m, z4.s, z1.s\n+umopa foo.s, p6/m, p7/m, z4.b, z1.b\n+umops foo.s, p6/m, p7/m, z4.b, z1.b\n+usmopa foo.s, p4/m, p3/m, z4.b, z1.b\n+usmops foo.s, p6/m, p7/m, z4.b, z1.b"
    },
    {
      "sha": "cc5a5f3a6aa14f94104e060348d1e16935b3ac79",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -445,6 +445,9 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_ZnxN,\t/* SVE vector register list in Zn.  */\n   AARCH64_OPND_SVE_Zt,\t\t/* SVE vector register in Zt.  */\n   AARCH64_OPND_SVE_ZtxN,\t/* SVE vector register list in Zt.  */\n+  AARCH64_OPND_SME_ZAda_2b,\t/* SME <ZAda>.S, 2-bits.  */\n+  AARCH64_OPND_SME_ZAda_3b,\t/* SME <ZAda>.D, 3-bits.  */\n+  AARCH64_OPND_SME_Pm,\t\t/* SME scalable predicate register, bits [15:13].  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };\n@@ -609,6 +612,7 @@ enum aarch64_insn_class\n   movewide,\n   pcreladdr,\n   ic_system,\n+  sme_misc,\n   sve_cpy,\n   sve_index,\n   sve_limm,"
    },
    {
      "sha": "4839fef8049a76cb01989eed0862faa3a00ff9a7",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -661,6 +661,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 198:\n     case 204:\n     case 207:\n+    case 209:\n+    case 210:\n+    case 211:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 15:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -672,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 210:\n+    case 213:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -717,7 +720,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 209:\n+    case 212:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:"
    },
    {
      "sha": "4376e3bc569406909c9d50fb664b88be6d04751b",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 442,
      "deletions": 131,
      "changes": 573,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -36,11 +36,187 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                 {\n                   if (((word >> 28) & 0x1) == 0)\n                     {\n-                      /* 33222222222211111111110000000000\n-                         10987654321098765432109876543210\n-                         xxx00000xxxxxxxxxxxxxxxxxxxxxxxx\n-                         udf.  */\n-                      return 754;\n+                      if (((word >> 21) & 0x1) == 0)\n+                        {\n+                          if (((word >> 22) & 0x1) == 0)\n+                            {\n+                              if (((word >> 23) & 0x1) == 0)\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00000000xxxxxxxxxxxxxxxxxxxxx\n+                                     udf.  */\n+                                  return 754;\n+                                }\n+                              else\n+                                {\n+                                  if (((word >> 4) & 0x1) == 0)\n+                                    {\n+                                      if (((word >> 29) & 0x1) == 0)\n+                                        {\n+                                          if (((word >> 30) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x0000000100xxxxxxxxxxxxxxxx0xxxx\n+                                                 fmopa.  */\n+                                              return 2354;\n+                                            }\n+                                          else\n+                                            {\n+                                              if (((word >> 16) & 0x1) == 0)\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000100xxxx0xxxxxxxxxxx0xxxx\n+                                                     addha.  */\n+                                                  return 2348;\n+                                                }\n+                                              else\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     x1000000100xxxx1xxxxxxxxxxx0xxxx\n+                                                     addva.  */\n+                                                  return 2350;\n+                                                }\n+                                            }\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100000100xxxxxxxxxxxxxxxx0xxxx\n+                                             smopa.  */\n+                                          return 2360;\n+                                        }\n+                                    }\n+                                  else\n+                                    {\n+                                      if (((word >> 29) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx000000100xxxxxxxxxxxxxxxx1xxxx\n+                                             fmops.  */\n+                                          return 2357;\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100000100xxxxxxxxxxxxxxxx1xxxx\n+                                             smops.  */\n+                                          return 2362;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                          else\n+                            {\n+                              if (((word >> 4) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      if (((word >> 30) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x0000000x10xxxxxxxxxxxxxxxx0xxxx\n+                                             fmopa.  */\n+                                          return 2355;\n+                                        }\n+                                      else\n+                                        {\n+                                          if (((word >> 16) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x1000000x10xxxx0xxxxxxxxxxx0xxxx\n+                                                 addha.  */\n+                                              return 2349;\n+                                            }\n+                                          else\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x1000000x10xxxx1xxxxxxxxxxx0xxxx\n+                                                 addva.  */\n+                                              return 2351;\n+                                            }\n+                                        }\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100000x10xxxxxxxxxxxxxxxx0xxxx\n+                                         smopa.  */\n+                                      return 2361;\n+                                    }\n+                                }\n+                              else\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx000000x10xxxxxxxxxxxxxxxx1xxxx\n+                                         fmops.  */\n+                                      return 2358;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100000x10xxxxxxxxxxxxxxxx1xxxx\n+                                         smops.  */\n+                                      return 2363;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                      else\n+                        {\n+                          if (((word >> 4) & 0x1) == 0)\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00000x01xxxxxxxxxxxxxxxx0xxxx\n+                                     sumopa.  */\n+                                  return 2364;\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00000x11xxxxxxxxxxxxxxxx0xxxx\n+                                     sumopa.  */\n+                                  return 2365;\n+                                }\n+                            }\n+                          else\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00000x01xxxxxxxxxxxxxxxx1xxxx\n+                                     sumops.  */\n+                                  return 2366;\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00000x11xxxxxxxxxxxxxxxx1xxxx\n+                                     sumops.  */\n+                                  return 2367;\n+                                }\n+                            }\n+                        }\n                     }\n                   else\n                     {\n@@ -64,42 +240,174 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                 }\n               else\n                 {\n-                  if (((word >> 29) & 0x1) == 0)\n+                  if (((word >> 28) & 0x1) == 0)\n                     {\n-                      if (((word >> 30) & 0x1) == 0)\n+                      if (((word >> 4) & 0x1) == 0)\n                         {\n-                          /* 33222222222211111111110000000000\n-                             10987654321098765432109876543210\n-                             x00x0001xxxxxxxxxxxxxxxxxxxxxxxx\n-                             add.  */\n-                          return 12;\n+                          if (((word >> 21) & 0x1) == 0)\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx000001x00xxxxxxxxxxxxxxxx0xxxx\n+                                         bfmopa.  */\n+                                      return 2352;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100001x00xxxxxxxxxxxxxxxx0xxxx\n+                                         usmopa.  */\n+                                      return 2372;\n+                                    }\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00001x10xxxxxxxxxxxxxxxx0xxxx\n+                                     usmopa.  */\n+                                  return 2373;\n+                                }\n+                            }\n+                          else\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx000001x01xxxxxxxxxxxxxxxx0xxxx\n+                                         fmopa.  */\n+                                      return 2356;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100001x01xxxxxxxxxxxxxxxx0xxxx\n+                                         umopa.  */\n+                                      return 2368;\n+                                    }\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00001x11xxxxxxxxxxxxxxxx0xxxx\n+                                     umopa.  */\n+                                  return 2369;\n+                                }\n+                            }\n                         }\n                       else\n                         {\n-                          /* 33222222222211111111110000000000\n-                             10987654321098765432109876543210\n-                             x10x0001xxxxxxxxxxxxxxxxxxxxxxxx\n-                             sub.  */\n-                          return 16;\n+                          if (((word >> 21) & 0x1) == 0)\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx000001x00xxxxxxxxxxxxxxxx1xxxx\n+                                         bfmops.  */\n+                                      return 2353;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100001x00xxxxxxxxxxxxxxxx1xxxx\n+                                         usmops.  */\n+                                      return 2374;\n+                                    }\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00001x10xxxxxxxxxxxxxxxx1xxxx\n+                                     usmops.  */\n+                                  return 2375;\n+                                }\n+                            }\n+                          else\n+                            {\n+                              if (((word >> 22) & 0x1) == 0)\n+                                {\n+                                  if (((word >> 29) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx000001x01xxxxxxxxxxxxxxxx1xxxx\n+                                         fmops.  */\n+                                      return 2359;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xx100001x01xxxxxxxxxxxxxxxx1xxxx\n+                                         umops.  */\n+                                      return 2370;\n+                                    }\n+                                }\n+                              else\n+                                {\n+                                  /* 33222222222211111111110000000000\n+                                     10987654321098765432109876543210\n+                                     xxx00001x11xxxxxxxxxxxxxxxx1xxxx\n+                                     umops.  */\n+                                  return 2371;\n+                                }\n+                            }\n                         }\n                     }\n                   else\n                     {\n-                      if (((word >> 30) & 0x1) == 0)\n+                      if (((word >> 29) & 0x1) == 0)\n                         {\n-                          /* 33222222222211111111110000000000\n-                             10987654321098765432109876543210\n-                             x01x0001xxxxxxxxxxxxxxxxxxxxxxxx\n-                             adds.  */\n-                          return 14;\n+                          if (((word >> 30) & 0x1) == 0)\n+                            {\n+                              /* 33222222222211111111110000000000\n+                                 10987654321098765432109876543210\n+                                 x0010001xxxxxxxxxxxxxxxxxxxxxxxx\n+                                 add.  */\n+                              return 12;\n+                            }\n+                          else\n+                            {\n+                              /* 33222222222211111111110000000000\n+                                 10987654321098765432109876543210\n+                                 x1010001xxxxxxxxxxxxxxxxxxxxxxxx\n+                                 sub.  */\n+                              return 16;\n+                            }\n                         }\n                       else\n                         {\n-                          /* 33222222222211111111110000000000\n-                             10987654321098765432109876543210\n-                             x11x0001xxxxxxxxxxxxxxxxxxxxxxxx\n-                             subs.  */\n-                          return 17;\n+                          if (((word >> 30) & 0x1) == 0)\n+                            {\n+                              /* 33222222222211111111110000000000\n+                                 10987654321098765432109876543210\n+                                 x0110001xxxxxxxxxxxxxxxxxxxxxxxx\n+                                 adds.  */\n+                              return 14;\n+                            }\n+                          else\n+                            {\n+                              /* 33222222222211111111110000000000\n+                                 10987654321098765432109876543210\n+                                 x1110001xxxxxxxxxxxxxxxxxxxxxxxx\n+                                 subs.  */\n+                              return 17;\n+                            }\n                         }\n                     }\n                 }\n@@ -2423,15 +2731,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurb.  */\n-                                                      return 2388;\n+                                                      return 2416;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2396;\n+                                                      return 2424;\n                                                     }\n                                                 }\n                                               else\n@@ -2442,15 +2750,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurh.  */\n-                                                      return 2392;\n+                                                      return 2420;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2399;\n+                                                      return 2427;\n                                                     }\n                                                 }\n                                             }\n@@ -2530,15 +2838,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurb.  */\n-                                                      return 2389;\n+                                                      return 2417;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2397;\n+                                                      return 2425;\n                                                     }\n                                                 }\n                                               else\n@@ -2549,15 +2857,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurh.  */\n-                                                      return 2393;\n+                                                      return 2421;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2400;\n+                                                      return 2428;\n                                                     }\n                                                 }\n                                             }\n@@ -2640,15 +2948,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursb.  */\n-                                                      return 2391;\n+                                                      return 2419;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursw.  */\n-                                                      return 2398;\n+                                                      return 2426;\n                                                     }\n                                                 }\n                                               else\n@@ -2657,7 +2965,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x1011001100xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2395;\n+                                                  return 2423;\n                                                 }\n                                             }\n                                           else\n@@ -2668,15 +2976,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursb.  */\n-                                                  return 2390;\n+                                                  return 2418;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2394;\n+                                                  return 2422;\n                                                 }\n                                             }\n                                         }\n@@ -3162,15 +3470,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx\n                                              setf8.  */\n-                                          return 2386;\n+                                          return 2414;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx\n                                              setf16.  */\n-                                          return 2387;\n+                                          return 2415;\n                                         }\n                                     }\n                                   else\n@@ -3316,7 +3624,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010000xxxxxxxxx01xxxxxxxxxx\n                                              rmif.  */\n-                                          return 2385;\n+                                          return 2413;\n                                         }\n                                       else\n                                         {\n@@ -4365,7 +4673,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000110xxxxxxxxxx\n                                                                  usdot.  */\n-                                                              return 2405;\n+                                                              return 2433;\n                                                             }\n                                                         }\n                                                     }\n@@ -4439,7 +4747,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000111xxxxxxxxxx\n                                                                  sudot.  */\n-                                                              return 2406;\n+                                                              return 2434;\n                                                             }\n                                                         }\n                                                     }\n@@ -7058,7 +7366,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              010001x0xx0xxxxx011110xxxxxxxxxx\n                                                              usdot.  */\n-                                                          return 2404;\n+                                                          return 2432;\n                                                         }\n                                                     }\n                                                 }\n@@ -8762,7 +9070,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  011001x0100xxx10101xxxxxxxxxxxxx\n                                                                  bfcvtnt.  */\n-                                                              return 2433;\n+                                                              return 2461;\n                                                             }\n                                                         }\n                                                       else\n@@ -9005,15 +9313,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  101001x00x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1rob.  */\n-                                              return 2409;\n+                                              return 2437;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  101001x01x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1roh.  */\n-                                              return 2410;\n+                                              return 2438;\n                                             }\n                                         }\n                                       else\n@@ -9245,7 +9553,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx010xxxxxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2430;\n+                                                      return 2458;\n                                                     }\n                                                   else\n                                                     {\n@@ -9266,15 +9574,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2437;\n+                                                          return 2465;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx1xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2436;\n+                                                          return 2464;\n                                                         }\n                                                     }\n                                                   else\n@@ -9329,7 +9637,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  x11001x0011xxxxx1x0xxxxxxxxxxxxx\n                                                  bfdot.  */\n-                                              return 2429;\n+                                              return 2457;\n                                             }\n                                           else\n                                             {\n@@ -9341,15 +9649,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx0xxxxxxxxxx\n                                                          bfmlalb.  */\n-                                                      return 2435;\n+                                                      return 2463;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx1xxxxxxxxxx\n                                                          bfmlalt.  */\n-                                                      return 2434;\n+                                                      return 2462;\n                                                     }\n                                                 }\n                                               else\n@@ -9400,15 +9708,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x00x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rob.  */\n-                                                  return 2413;\n+                                                  return 2441;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x01x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1roh.  */\n-                                                  return 2414;\n+                                                  return 2442;\n                                                 }\n                                             }\n                                           else\n@@ -9767,7 +10075,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0101xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2407;\n+                                                      return 2435;\n                                                     }\n                                                   else\n                                                     {\n@@ -9800,7 +10108,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx111xxxxxxxxxxxxx\n                                                          bfmmla.  */\n-                                                      return 2431;\n+                                                      return 2459;\n                                                     }\n                                                   else\n                                                     {\n@@ -9830,7 +10138,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2408;\n+                                                      return 2436;\n                                                     }\n                                                   else\n                                                     {\n@@ -9959,7 +10267,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x00xxxxxxxxxx\n                                                                  zip1.  */\n-                                                              return 2417;\n+                                                              return 2445;\n                                                             }\n                                                           else\n                                                             {\n@@ -9969,15 +10277,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000010xxxxxxxxxx\n                                                                      uzp1.  */\n-                                                                  return 2419;\n+                                                                  return 2447;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000110xxxxxxxxxx\n                                                                      trn1.  */\n-                                                                  return 2421;\n+                                                                  return 2449;\n                                                                 }\n                                                             }\n                                                         }\n@@ -9989,7 +10297,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x01xxxxxxxxxx\n                                                                  zip2.  */\n-                                                              return 2418;\n+                                                              return 2446;\n                                                             }\n                                                           else\n                                                             {\n@@ -9999,15 +10307,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000011xxxxxxxxxx\n                                                                      uzp2.  */\n-                                                                  return 2420;\n+                                                                  return 2448;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000111xxxxxxxxxx\n                                                                      trn2.  */\n-                                                                  return 2422;\n+                                                                  return 2450;\n                                                                 }\n                                                             }\n                                                         }\n@@ -11055,15 +11363,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      010001x1000xxxxx100110xxxxxxxxxx\n                                                                      smmla.  */\n-                                                                  return 2401;\n+                                                                  return 2429;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      010001x1100xxxxx100110xxxxxxxxxx\n                                                                      usmmla.  */\n-                                                                  return 2403;\n+                                                                  return 2431;\n                                                                 }\n                                                             }\n                                                           else\n@@ -11072,7 +11380,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x1x10xxxxx100110xxxxxxxxxx\n                                                                  ummla.  */\n-                                                              return 2402;\n+                                                              return 2430;\n                                                             }\n                                                         }\n                                                     }\n@@ -12568,15 +12876,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2411;\n+                                                  return 2439;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2412;\n+                                                  return 2440;\n                                                 }\n                                             }\n                                         }\n@@ -12950,15 +13258,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2415;\n+                                                  return 2443;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2416;\n+                                                  return 2444;\n                                                 }\n                                             }\n                                         }\n@@ -14392,7 +14700,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          011001x110001x10101xxxxxxxxxxxxx\n                                                                          bfcvt.  */\n-                                                                      return 2432;\n+                                                                      return 2460;\n                                                                     }\n                                                                 }\n                                                               else\n@@ -16461,7 +16769,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1001xxxxxxxxxx\n                                                          smmla.  */\n-                                                      return 2423;\n+                                                      return 2451;\n                                                     }\n                                                 }\n                                             }\n@@ -16494,7 +16802,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx\n                                                          sdot.  */\n-                                                      return 2349;\n+                                                      return 2377;\n                                                     }\n                                                 }\n                                               else\n@@ -16568,7 +16876,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1011xxxxxxxxxx\n                                                          usmmla.  */\n-                                                      return 2425;\n+                                                      return 2453;\n                                                     }\n                                                 }\n                                             }\n@@ -16601,7 +16909,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0111xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2426;\n+                                                      return 2454;\n                                                     }\n                                                 }\n                                               else\n@@ -16648,15 +16956,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110000xxxxxxxxxxxxxxxxxxxxx\n                                              eor3.  */\n-                                          return 2356;\n+                                          return 2384;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              1x001110100xxxxxxxxxxxxxxxxxxxxx\n                                              xar.  */\n-                                          return 2358;\n+                                          return 2386;\n                                         }\n                                     }\n                                   else\n@@ -16667,7 +16975,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx\n                                              sm3ss1.  */\n-                                          return 2360;\n+                                          return 2388;\n                                         }\n                                       else\n                                         {\n@@ -16681,15 +16989,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx00xxxxxxxxxx\n                                                          sm3tt1a.  */\n-                                                      return 2361;\n+                                                      return 2389;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx00xxxxxxxxxx\n                                                          sha512su0.  */\n-                                                      return 2354;\n+                                                      return 2382;\n                                                     }\n                                                 }\n                                               else\n@@ -16698,7 +17006,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx\n                                                      sm3tt2a.  */\n-                                                  return 2363;\n+                                                  return 2391;\n                                                 }\n                                             }\n                                           else\n@@ -16711,15 +17019,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx01xxxxxxxxxx\n                                                          sm3tt1b.  */\n-                                                      return 2362;\n+                                                      return 2390;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx01xxxxxxxxxx\n                                                          sm4e.  */\n-                                                      return 2367;\n+                                                      return 2395;\n                                                     }\n                                                 }\n                                               else\n@@ -16728,7 +17036,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx\n                                                      sm3tt2b.  */\n-                                                  return 2364;\n+                                                  return 2392;\n                                                 }\n                                             }\n                                         }\n@@ -16909,7 +17217,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx101110xx0xxxxx100101xxxxxxxxxx\n                                                          udot.  */\n-                                                      return 2348;\n+                                                      return 2376;\n                                                     }\n                                                 }\n                                               else\n@@ -16940,7 +17248,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx101x01xxxxxxxxxx\n                                                      ummla.  */\n-                                                  return 2424;\n+                                                  return 2452;\n                                                 }\n                                               else\n                                                 {\n@@ -16959,7 +17267,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx1x1011xxxxxxxxxx\n                                                      bfmmla.  */\n-                                                  return 2440;\n+                                                  return 2468;\n                                                 }\n                                               else\n                                                 {\n@@ -16969,7 +17277,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx1011100x0xxxxx1x1111xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2438;\n+                                                      return 2466;\n                                                     }\n                                                   else\n                                                     {\n@@ -16979,15 +17287,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x01011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2445;\n+                                                          return 2473;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x11011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2444;\n+                                                          return 2472;\n                                                         }\n                                                     }\n                                                 }\n@@ -17571,15 +17879,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          000011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn.  */\n-                                                                      return 2441;\n+                                                                      return 2469;\n                                                                     }\n                                                                   else\n                                                                     {\n                                                                       /* 33222222222211111111110000000000\n                                                                          10987654321098765432109876543210\n                                                                          010011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn2.  */\n-                                                                      return 2442;\n+                                                                      return 2470;\n                                                                     }\n                                                                 }\n                                                             }\n@@ -17897,7 +18205,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                          10987654321098765432109876543210\n                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx\n                                          bcax.  */\n-                                      return 2359;\n+                                      return 2387;\n                                     }\n                                 }\n                               else\n@@ -18508,7 +18816,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx100000xxxxxxxxxx\n                                                                  sha512h.  */\n-                                                              return 2352;\n+                                                              return 2380;\n                                                             }\n                                                         }\n                                                     }\n@@ -18560,7 +18868,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx110000xxxxxxxxxx\n                                                                  sm3partw1.  */\n-                                                              return 2365;\n+                                                              return 2393;\n                                                             }\n                                                         }\n                                                     }\n@@ -18803,7 +19111,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100010xxxxxxxxxx\n                                                              sha512su1.  */\n-                                                          return 2355;\n+                                                          return 2383;\n                                                         }\n                                                     }\n                                                   else\n@@ -18879,7 +19187,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110010xxxxxxxxxx\n                                                                  sm4ekey.  */\n-                                                              return 2368;\n+                                                              return 2396;\n                                                             }\n                                                         }\n                                                       else\n@@ -19705,7 +20013,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100001xxxxxxxxxx\n                                                              sha512h2.  */\n-                                                          return 2353;\n+                                                          return 2381;\n                                                         }\n                                                     }\n                                                   else\n@@ -19737,7 +20045,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110001xxxxxxxxxx\n                                                                  sm3partw2.  */\n-                                                              return 2366;\n+                                                              return 2394;\n                                                             }\n                                                         }\n                                                       else\n@@ -19977,7 +20285,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100011xxxxxxxxxx\n                                                              rax1.  */\n-                                                          return 2357;\n+                                                          return 2385;\n                                                         }\n                                                     }\n                                                   else\n@@ -20009,15 +20317,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2371;\n+                                                              return 2399;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2375;\n+                                                              return 2403;\n                                                             }\n                                                         }\n                                                     }\n@@ -20039,15 +20347,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2372;\n+                                                              return 2400;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2376;\n+                                                              return 2404;\n                                                             }\n                                                         }\n                                                     }\n@@ -20086,15 +20394,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2369;\n+                                                              return 2397;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2373;\n+                                                              return 2401;\n                                                             }\n                                                         }\n                                                       else\n@@ -20116,15 +20424,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2370;\n+                                                              return 2398;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2374;\n+                                                              return 2402;\n                                                             }\n                                                         }\n                                                       else\n@@ -21932,15 +22240,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2377;\n+                                                  return 2405;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2381;\n+                                                  return 2409;\n                                                 }\n                                             }\n                                           else\n@@ -21962,15 +22270,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2378;\n+                                                  return 2406;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2382;\n+                                                  return 2410;\n                                                 }\n                                             }\n                                           else\n@@ -22476,15 +22784,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2379;\n+                                                  return 2407;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2383;\n+                                                  return 2411;\n                                                 }\n                                             }\n                                         }\n@@ -22506,15 +22814,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2380;\n+                                                  return 2408;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2384;\n+                                                  return 2412;\n                                                 }\n                                             }\n                                         }\n@@ -22570,15 +22878,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx\n                                                  sdot.  */\n-                                              return 2351;\n+                                              return 2379;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx\n                                                  udot.  */\n-                                              return 2350;\n+                                              return 2378;\n                                             }\n                                         }\n                                     }\n@@ -22681,15 +22989,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111100xxxxxx1111x0xxxxxxxxxx\n                                                          sudot.  */\n-                                                      return 2428;\n+                                                      return 2456;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          xx00111110xxxxxx1111x0xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2427;\n+                                                      return 2455;\n                                                     }\n                                                 }\n                                               else\n@@ -22700,7 +23008,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111101xxxxxx1111x0xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2439;\n+                                                      return 2467;\n                                                     }\n                                                   else\n                                                     {\n@@ -22710,15 +23018,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x000111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2447;\n+                                                          return 2475;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x100111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2446;\n+                                                          return 2474;\n                                                         }\n                                                     }\n                                                 }\n@@ -23352,8 +23660,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 824: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 832: value = 833; break;\t/* frintz --> frintz.  */\n     case 833: return NULL;\t\t/* frintz --> NULL.  */\n-    case 825: value = 2443; break;\t/* fcvt --> bfcvt.  */\n-    case 2443: return NULL;\t\t/* bfcvt --> NULL.  */\n+    case 825: value = 2471; break;\t/* fcvt --> bfcvt.  */\n+    case 2471: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 834: value = 835; break;\t/* frinta --> frinta.  */\n     case 835: return NULL;\t\t/* frinta --> NULL.  */\n     case 836: value = 837; break;\t/* frintx --> frintx.  */\n@@ -23854,6 +24162,9 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 198:\n     case 204:\n     case 207:\n+    case 209:\n+    case 210:\n+    case 211:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 10:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -23869,7 +24180,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 210:\n+    case 213:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -23915,7 +24226,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 209:\n+    case 212:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:"
    },
    {
      "sha": "cf1ce0b01931d575e1f48a5760f46d08d24e6aca",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -233,6 +233,9 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_ZnxN\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zn}, \"a list of SVE vector registers\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_Zt\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zt}, \"an SVE vector register\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SVE_ZtxN\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zt}, \"a list of SVE vector registers\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZAda_2b\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_ZAda_2b}, \"an SME ZA tile ZA0-ZA3\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZAda_3b\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_ZAda_3b}, \"an SME ZA tile ZA0-ZA7\"},\n+  {AARCH64_OPND_CLASS_PRED_REG, \"SME_Pm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Pm}, \"an SVE predicate register\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},"
    },
    {
      "sha": "8ced8e0dfd635b4baa20bd13bb040ad02b3af538",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -321,6 +321,9 @@ const aarch64_field fields[] =\n     { 19,  2 }, /* SVE_tszl_19: triangular size select low, bits [20,19].  */\n     { 14,  1 }, /* SVE_xs_14: UXTW/SXTW select (bit 14).  */\n     { 22,  1 }, /* SVE_xs_22: UXTW/SXTW select (bit 22).  */\n+    {  0,  2 }, /* SME ZAda tile ZA0-ZA3.  */\n+    {  0,  3 }, /* SME ZAda tile ZA0-ZA7.  */\n+    { 13,  3 }, /* SME Pm second source scalable predicate register P0-P7.  */\n     { 11,  2 }, /* rotate1: FCMLA immediate rotate.  */\n     { 13,  2 }, /* rotate2: Indexed element FCMLA immediate rotate.  */\n     { 12,  1 }, /* rotate3: FCADD immediate rotate.  */\n@@ -3304,6 +3307,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_SVE_Pm:\n     case AARCH64_OPND_SVE_Pn:\n     case AARCH64_OPND_SVE_Pt:\n+    case AARCH64_OPND_SME_Pm:\n       if (opnd->qualifier == AARCH64_OPND_QLF_NIL)\n \tsnprintf (buf, size, \"p%d\", opnd->reg.regno);\n       else if (opnd->qualifier == AARCH64_OPND_QLF_P_Z\n@@ -3345,6 +3349,12 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \t\topnd->reglane.index);\n       break;\n \n+    case AARCH64_OPND_SME_ZAda_2b:\n+    case AARCH64_OPND_SME_ZAda_3b:\n+      snprintf (buf, size, \"za%d.%s\", opnd->reg.regno,\n+                aarch64_get_qualifier_name (opnd->qualifier));\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);\n@@ -5277,6 +5287,7 @@ verify_constraints (const struct aarch64_inst *inst,\n \t\t  case AARCH64_OPND_SVE_Pm:\n \t\t  case AARCH64_OPND_SVE_Pn:\n \t\t  case AARCH64_OPND_SVE_Pt:\n+\t\t  case AARCH64_OPND_SME_Pm:\n \t\t    inst_pred = inst_op;\n \t\t    inst_pred_idx = i;\n \t\t    break;"
    },
    {
      "sha": "ba19c12c63641328595c01c551295ed93d3b4af0",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -150,6 +150,9 @@ enum aarch64_field_kind\n   FLD_SVE_tszl_19,\n   FLD_SVE_xs_14,\n   FLD_SVE_xs_22,\n+  FLD_SME_ZAda_2b,\n+  FLD_SME_ZAda_3b,\n+  FLD_SME_Pm,\n   FLD_rotate1,\n   FLD_rotate2,\n   FLD_rotate3,"
    },
    {
      "sha": "f725f2f02f8aa3d80e301f0a76e10d0f844fbc31",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971eda734150ea9cdea47be259486c3a8d087037/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=971eda734150ea9cdea47be259486c3a8d087037",
      "patch": "@@ -2168,6 +2168,42 @@\n {                                                       \\\n   QLF3(X,X,NIL),                                        \\\n }\n+/* e.g. ADDVA <ZAda>.S, <Pn>/M, <Pm>/M, <Zn>.S  */\n+#define OP_SME_ZADA_PN_PM_ZN_S                          \\\n+{                                                       \\\n+  QLF4(S_S,P_M,P_M,S_S),                                \\\n+}\n+/* e.g. ADDVA <ZAda>.D, <Pn>/M, <Pm>/M, <Zn>.D  */\n+#define OP_SME_ZADA_PN_PM_ZN_D                          \\\n+{                                                       \\\n+  QLF4(S_D,P_M,P_M,S_D),                                \\\n+}\n+/* e.g. BFMOPA <ZAda>.S, <Pn>/M, <Pm>/M, <Zn>.H, <Zm>.H  */\n+#define OP_SME_ZADA_PN_PM_ZN_ZM                         \\\n+{                                                       \\\n+  QLF5(S_S,P_M,P_M,S_H,S_H),                            \\\n+}\n+#define OP_SME_ZADA_S_PM_PM_S_S                         \\\n+{                                                       \\\n+  QLF5(S_S,P_M,P_M,S_S,S_S)                             \\\n+}\n+#define OP_SME_ZADA_D_PM_PM_D_D                         \\\n+{                                                       \\\n+  QLF5(S_D,P_M,P_M,S_D,S_D)                             \\\n+}\n+#define OP_SME_ZADA_S_PM_PM_H_H                         \\\n+{                                                       \\\n+  QLF5(S_S,P_M,P_M,S_H,S_H)                             \\\n+}\n+#define OP_SME_ZADA_S_PM_PM_B_B                         \\\n+{                                                       \\\n+  QLF5(S_S,P_M,P_M,S_B,S_B)                             \\\n+}\n+#define OP_SME_ZADA_D_PM_PM_H_H                         \\\n+{                                                       \\\n+  QLF5(S_D,P_M,P_M,S_H,S_H)                             \\\n+}\n+\n /* e.g. UDOT <Vd>.2S, <Vn>.8B, <Vm>.8B.  */\n #define QL_V3DOT\t   \\\n {\t\t\t   \\\n@@ -2564,6 +2600,18 @@ static const aarch64_feature_set aarch64_feature_flagm =\n #define SVE2SM4_INSNC(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,CONSTRAINTS,TIED) \\\n   { NAME, OPCODE, MASK, CLASS, OP, SVE2_SM4, OPS, QUALS, \\\n     FLAGS | F_STRICT, CONSTRAINTS, TIED, NULL }\n+#define SME_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, SME, OPS, QUALS, \\\n+    FLAGS, 0, TIED, NULL }\n+#define SME_F64_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, SME_F64, OPS, QUALS, \\\n+    FLAGS, 0, TIED, NULL }\n+#define SME_I64_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, SME_I64, OPS, QUALS, \\\n+    FLAGS, 0, TIED, NULL }\n+#define SME_INSNC(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,CONSTRAINTS,TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, OP, SME, OPS, QUALS, \\\n+    FLAGS, CONSTRAINTS, TIED, NULL }\n #define SVE2BITPERM_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,TIED) \\\n   { NAME, OPCODE, MASK, CLASS, OP, SVE2_BITPERM, OPS, QUALS, \\\n     FLAGS | F_STRICT, 0, TIED, NULL }\n@@ -5045,6 +5093,35 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n   SVE2BITPERM_INSN (\"bdep\", 0x4500b400, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, 0),\n   SVE2BITPERM_INSN (\"bext\", 0x4500b000, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, 0),\n   SVE2BITPERM_INSN (\"bgrp\", 0x4500b800, 0xff20fc00, sve_size_bhsd, 0, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_VVV_BHSD, 0, 0),\n+  /* SME instructions.  */\n+  SME_INSN (\"addha\", 0xc0900000, 0xffff001c, sme_misc, 0, OP4 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn), OP_SME_ZADA_PN_PM_ZN_S, 0, 0),\n+  SME_I64_INSN (\"addha\", 0xc0d00000, 0xffff0018, sme_misc, 0, OP4 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn), OP_SME_ZADA_PN_PM_ZN_D, 0, 0),\n+  SME_INSN (\"addva\", 0xc0910000, 0xffff001c, sme_misc, 0, OP4 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn), OP_SME_ZADA_PN_PM_ZN_S, 0, 0),\n+  SME_I64_INSN (\"addva\", 0xc0d10000, 0xffff0018, sme_misc, 0, OP4 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn), OP_SME_ZADA_PN_PM_ZN_D, 0, 0),\n+  SME_INSN (\"bfmopa\", 0x81800000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_PN_PM_ZN_ZM, 0, 0),\n+  SME_INSN (\"bfmops\", 0x81800010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_PN_PM_ZN_ZM, 0, 0),\n+  SME_INSN (\"fmopa\", 0x80800000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_S_S, 0, 0),\n+  SME_F64_INSN (\"fmopa\", 0x80c00000, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_D_D, 0, 0),\n+  SME_INSN (\"fmopa\", 0x81a00000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"fmops\", 0x80800010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_S_S, 0, 0),\n+  SME_F64_INSN (\"fmops\", 0x80c00010, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_D_D, 0, 0),\n+  SME_INSN (\"fmops\", 0x81a00010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"smopa\", 0xa0800000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"smopa\", 0xa0c00000, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"smops\", 0xa0800010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"smops\", 0xa0c00010, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"sumopa\", 0xa0a00000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"sumopa\", 0xa0e00000, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"sumops\", 0xa0a00010 ,0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"sumops\", 0xa0e00010 ,0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"umopa\", 0xa1a00000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"umopa\", 0xa1e00000, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"umops\", 0xa1a00010 ,0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"umops\", 0xa1e00010 ,0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"usmopa\", 0xa1800000, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"usmopa\", 0xa1c00000, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n+  SME_INSN (\"usmops\", 0xa1800010, 0xffe0001c, sme_misc, 0, OP5 (SME_ZAda_2b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_S_PM_PM_B_B, 0, 0),\n+  SME_I64_INSN (\"usmops\", 0xa1c00010, 0xffe00018, sme_misc, 0, OP5 (SME_ZAda_3b, SVE_Pg3, SME_Pm, SVE_Zn, SVE_Zm_16), OP_SME_ZADA_D_PM_PM_H_H, 0, 0),\n \n   /* SIMD Dot Product (optional in v8.2-A).  */\n   DOT_INSN (\"udot\", 0x2e009400, 0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n@@ -5613,6 +5690,12 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n       \"an SVE vector register\")\t\t\t\t\t\t\\\n     Y(SVE_REG, sve_reglist, \"SVE_ZtxN\", 0, F(FLD_SVE_Zt),\t\t\\\n       \"a list of SVE vector registers\")\t\t\t\t\t\\\n+    Y(SVE_REG, regno, \"SME_ZAda_2b\", 0, F(FLD_SME_ZAda_2b),\t\t\\\n+      \"an SME ZA tile ZA0-ZA3\")\t\t\t\t\t\\\n+    Y(SVE_REG, regno, \"SME_ZAda_3b\", 0, F(FLD_SME_ZAda_3b),\t\t\\\n+      \"an SME ZA tile ZA0-ZA7\")\t\t\t\t\t\\\n+    Y(PRED_REG, regno, \"SME_Pm\", 0, F(FLD_SME_Pm),\t\t\t\\\n+      \"an SVE predicate register\")\t\t\t\t\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n       \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\"
    }
  ]
}