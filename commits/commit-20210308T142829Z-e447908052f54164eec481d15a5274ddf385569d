{
  "sha": "e447908052f54164eec481d15a5274ddf385569d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTQ0NzkwODA1MmY1NDE2NGVlYzQ4MWQxNWE1Mjc0ZGRmMzg1NTY5ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:29Z"
    },
    "message": "Introduce class adl_func_operation\n\nThis adds class adl_func_operation, which implements\nargument-dependent lookup function calls.\n\nOther function calls will be handled in a different way.  However,\nbecause ADL calls were created in a single spot in the C++ parser, and\nbecause they had different semantics from the other cases, it was\nconvenient to treat them specially.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class adl_func_operation): New.\n\t* eval.c (adl_func_operation::evaluate): New method.",
    "tree": {
      "sha": "869b45f3dba350e9a6097bac187c6ae9a77c46dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/869b45f3dba350e9a6097bac187c6ae9a77c46dc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e447908052f54164eec481d15a5274ddf385569d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e447908052f54164eec481d15a5274ddf385569d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e447908052f54164eec481d15a5274ddf385569d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e447908052f54164eec481d15a5274ddf385569d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "95d49dfbba00253382d0f7ad0ea2052b2b7bc445",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95d49dfbba00253382d0f7ad0ea2052b2b7bc445",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/95d49dfbba00253382d0f7ad0ea2052b2b7bc445"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 47,
    "deletions": 0
  },
  "files": [
    {
      "sha": "627969aea63a84434636712285fbdf83653541e6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e447908052f54164eec481d15a5274ddf385569d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e447908052f54164eec481d15a5274ddf385569d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e447908052f54164eec481d15a5274ddf385569d",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class adl_func_operation): New.\n+\t* eval.c (adl_func_operation::evaluate): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_unop_in_range): No longer static."
    },
    {
      "sha": "972e63035b383e8a50f6efa958d410d9341d56cf",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e447908052f54164eec481d15a5274ddf385569d/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e447908052f54164eec481d15a5274ddf385569d/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=e447908052f54164eec481d15a5274ddf385569d",
      "patch": "@@ -2549,6 +2549,29 @@ logical_or_operation::evaluate (struct type *expect_type,\n     }\n }\n \n+value *\n+adl_func_operation::evaluate (struct type *expect_type,\n+\t\t\t      struct expression *exp,\n+\t\t\t      enum noside noside)\n+{\n+  std::vector<operation_up> &arg_ops = std::get<2> (m_storage);\n+  std::vector<value *> args (arg_ops.size ());\n+  for (int i = 0; i < arg_ops.size (); ++i)\n+    args[i] = arg_ops[i]->evaluate_with_coercion (exp, noside);\n+\n+  struct symbol *symp;\n+  find_overload_match (args, std::get<0> (m_storage).c_str (),\n+\t\t       NON_METHOD,\n+\t\t       nullptr, nullptr,\n+\t\t       nullptr, &symp, nullptr, 0, noside);\n+  if (SYMBOL_TYPE (symp)->code () == TYPE_CODE_ERROR)\n+    error_unknown_type (symp->print_name ());\n+  value *callee = evaluate_var_value (noside, std::get<1> (m_storage), symp);\n+  return evaluate_subexp_do_call (exp, noside, callee, args,\n+\t\t\t\t  nullptr, expect_type);\n+\n+}\n+\n }\n \n struct value *"
    },
    {
      "sha": "0785df939e4798c1695b06089afabc76aaf27384",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e447908052f54164eec481d15a5274ddf385569d/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e447908052f54164eec481d15a5274ddf385569d/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=e447908052f54164eec481d15a5274ddf385569d",
      "patch": "@@ -2030,6 +2030,25 @@ class logical_or_operation\n     override;\n };\n \n+/* This class implements ADL (aka Koenig) function calls for C++.  It\n+   holds the name of the function to call, the block in which the\n+   lookup should be done, and a vector of arguments.  */\n+class adl_func_operation\n+  : public tuple_holding_operation<std::string, const block *,\n+\t\t\t\t   std::vector<operation_up>>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_ADL_FUNC; }\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}