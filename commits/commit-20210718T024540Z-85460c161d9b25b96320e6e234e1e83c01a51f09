{
  "sha": "85460c161d9b25b96320e6e234e1e83c01a51f09",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODU0NjBjMTYxZDliMjViOTYzMjBlNmUyMzRlMWU4M2MwMWE1MWYwOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-15T19:01:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-18T02:45:40Z"
    },
    "message": "gdb: convert nat/x86-dregs.c macros to functions\n\nI'm debugging why GDB crashes on OpenBSD/amd64, turns out it's because\nx86_dr_low.get_status is nullptr.  It would have been useful to be able\nto break on x86_dr_low_get_status, so I thought it would be a good\nreason to convert these function-like macros into functions.\n\nChange-Id: Ic200b50ef8455b4697bc518da0fa2bb704cf4721",
    "tree": {
      "sha": "76f79f106f01b0fff9a5b56551d89fcf309d64e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/76f79f106f01b0fff9a5b56551d89fcf309d64e7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85460c161d9b25b96320e6e234e1e83c01a51f09",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85460c161d9b25b96320e6e234e1e83c01a51f09",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85460c161d9b25b96320e6e234e1e83c01a51f09",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85460c161d9b25b96320e6e234e1e83c01a51f09/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "04dd8003c0988c04cceff4e9a94da21a614ed0a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/04dd8003c0988c04cceff4e9a94da21a614ed0a9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/04dd8003c0988c04cceff4e9a94da21a614ed0a9"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 48,
    "deletions": 11
  },
  "files": [
    {
      "sha": "cf8e517eb0d66e480a2e882081348f77cf49ba29",
      "filename": "gdb/nat/x86-dregs.c",
      "status": "modified",
      "additions": 48,
      "deletions": 11,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85460c161d9b25b96320e6e234e1e83c01a51f09/gdb/nat/x86-dregs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85460c161d9b25b96320e6e234e1e83c01a51f09/gdb/nat/x86-dregs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/x86-dregs.c?ref=85460c161d9b25b96320e6e234e1e83c01a51f09",
      "patch": "@@ -35,31 +35,68 @@\n /* Accessor macros for low-level function vector.  */\n \n /* Can we update the inferior's debug registers?  */\n-#define x86_dr_low_can_set_addr() (x86_dr_low.set_addr != NULL)\n+\n+static bool\n+x86_dr_low_can_set_addr ()\n+{\n+  return x86_dr_low.set_addr != nullptr;\n+}\n \n /* Update the inferior's debug register REGNUM from STATE.  */\n-#define x86_dr_low_set_addr(new_state, i) \\\n-  (x86_dr_low.set_addr ((i), (new_state)->dr_mirror[(i)]))\n+\n+static void\n+x86_dr_low_set_addr (struct x86_debug_reg_state *new_state, int i)\n+{\n+  x86_dr_low.set_addr (i, new_state->dr_mirror[i]);\n+}\n \n /* Return the inferior's debug register REGNUM.  */\n-#define x86_dr_low_get_addr(i) (x86_dr_low.get_addr ((i)))\n+\n+static unsigned long\n+x86_dr_low_get_addr (int i)\n+{\n+  return x86_dr_low.get_addr (i);\n+}\n \n /* Can we update the inferior's DR7 control register?  */\n-#define x86_dr_low_can_set_control() (x86_dr_low.set_control != NULL)\n+\n+static bool\n+x86_dr_low_can_set_control ()\n+{\n+  return x86_dr_low.set_control != nullptr;\n+}\n \n /* Update the inferior's DR7 debug control register from STATE.  */\n-#define x86_dr_low_set_control(new_state) \\\n-  (x86_dr_low.set_control ((new_state)->dr_control_mirror))\n+\n+static void\n+x86_dr_low_set_control (struct x86_debug_reg_state *new_state)\n+{\n+  x86_dr_low.set_control (new_state->dr_control_mirror);\n+}\n \n /* Return the value of the inferior's DR7 debug control register.  */\n-#define x86_dr_low_get_control() (x86_dr_low.get_control ())\n+\n+static unsigned long\n+x86_dr_low_get_control ()\n+{\n+  return x86_dr_low.get_control ();\n+}\n \n /* Return the value of the inferior's DR6 debug status register.  */\n-#define x86_dr_low_get_status() (x86_dr_low.get_status ())\n+\n+static unsigned long\n+x86_dr_low_get_status ()\n+{\n+  return x86_dr_low.get_status ();\n+}\n \n /* Return the debug register size, in bytes.  */\n-#define x86_get_debug_register_length() \\\n-  (x86_dr_low.debug_register_length)\n+\n+static int\n+x86_get_debug_register_length ()\n+{\n+  return x86_dr_low.debug_register_length;\n+}\n \n /* Support for 8-byte wide hw watchpoints.  */\n #define TARGET_HAS_DR_LEN_8 (x86_get_debug_register_length () == 8)"
    }
  ]
}