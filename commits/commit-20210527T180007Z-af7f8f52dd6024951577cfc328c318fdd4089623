{
  "sha": "af7f8f52dd6024951577cfc328c318fdd4089623",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWY3ZjhmNTJkZDYwMjQ5NTE1NzdjZmMzMjhjMzE4ZmRkNDA4OTYyMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T17:59:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:00:07Z"
    },
    "message": "gdb: make add_setshow commands return set_show_commands\n\nSome add_set_show commands return a single cmd_list_element, the one for\nthe \"set\" command.  A subsequent patch will need to access the show\ncommand's cmd_list_element as well.  Change these functions to return a\nnew structure type that holds both pointers.\n\nI initially only modified add_setshow_boolean_cmd (the one I needed),\nbut I think it's better to change the whole chain to keep everything in\nsync.\n\ngdb/ChangeLog:\n\n\t* command.h (set_show_commands): New.\n\t(add_setshow_enum_cmd, add_setshow_auto_boolean_cmd,\n\tadd_setshow_boolean_cmd, add_setshow_filename_cmd,\n\tadd_setshow_string_cmd, add_setshow_string_noescape_cmd,\n\tadd_setshow_optional_filename_cmd, add_setshow_integer_cmd,\n\tadd_setshow_uinteger_cmd, add_setshow_zinteger_cmd,\n\tadd_setshow_zuinteger_cmd, add_setshow_zuinteger_unlimited_cmd):\n\tReturn set_show_commands.  Adjust callers.\n\t* cli/cli-decode.c (add_setshow_cmd_full): Return\n\tset_show_commands, remove result parameters, adjust callers.\n\nChange-Id: I17492b01b76002d09effc84830f9c6db26f1db7a",
    "tree": {
      "sha": "e22264c4479004aef1f6ed7bbe609e3a0207009b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e22264c4479004aef1f6ed7bbe609e3a0207009b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/af7f8f52dd6024951577cfc328c318fdd4089623",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af7f8f52dd6024951577cfc328c318fdd4089623",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/af7f8f52dd6024951577cfc328c318fdd4089623",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af7f8f52dd6024951577cfc328c318fdd4089623/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "868027a48b613b9024a0da835b920a6e2ec2528c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/868027a48b613b9024a0da835b920a6e2ec2528c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/868027a48b613b9024a0da835b920a6e2ec2528c"
    }
  ],
  "stats": {
    "total": 485,
    "additions": 221,
    "deletions": 264
  },
  "files": [
    {
      "sha": "8c17e20fb7dc5a9a33d977d481bc1beb773451da",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -1,3 +1,16 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* command.h (set_show_commands): New.\n+\t(add_setshow_enum_cmd, add_setshow_auto_boolean_cmd,\n+\tadd_setshow_boolean_cmd, add_setshow_filename_cmd,\n+\tadd_setshow_string_cmd, add_setshow_string_noescape_cmd,\n+\tadd_setshow_optional_filename_cmd, add_setshow_integer_cmd,\n+\tadd_setshow_uinteger_cmd, add_setshow_zinteger_cmd,\n+\tadd_setshow_zuinteger_cmd, add_setshow_zuinteger_unlimited_cmd):\n+\tReturn set_show_commands.  Adjust callers.\n+\t* cli/cli-decode.c (add_setshow_cmd_full): Return\n+\tset_show_commands, remove result parameters, adjust callers.\n+\n 2021-05-27  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/27919"
    },
    {
      "sha": "0482cca7a627ca1deb49dde52e4b2c995e4b77c3",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 110,
      "deletions": 110,
      "changes": 220,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -531,11 +531,11 @@ add_set_or_show_cmd (const char *name,\n    setting.  VAR is address of the variable being controlled by this\n    command.  SET_FUNC and SHOW_FUNC are the callback functions (if\n    non-NULL).  SET_DOC, SHOW_DOC and HELP_DOC are the documentation\n-   strings.  PRINT the format string to print the value.  SET_RESULT\n-   and SHOW_RESULT, if not NULL, are set to the resulting command\n-   structures.  */\n+   strings.\n \n-static void\n+   Return the newly created set and show commands.  */\n+\n+static set_show_commands\n add_setshow_cmd_full (const char *name,\n \t\t      enum command_class theclass,\n \t\t      var_types var_type, void *var,\n@@ -544,9 +544,7 @@ add_setshow_cmd_full (const char *name,\n \t\t      cmd_const_sfunc_ftype *set_func,\n \t\t      show_value_ftype *show_func,\n \t\t      struct cmd_list_element **set_list,\n-\t\t      struct cmd_list_element **show_list,\n-\t\t      struct cmd_list_element **set_result,\n-\t\t      struct cmd_list_element **show_result)\n+\t\t      struct cmd_list_element **show_list)\n {\n   struct cmd_list_element *set;\n   struct cmd_list_element *show;\n@@ -578,18 +576,15 @@ add_setshow_cmd_full (const char *name,\n      for the \"show\" command to complete on anything.  */\n   set_cmd_completer (show, nullptr);\n \n-  if (set_result != NULL)\n-    *set_result = set;\n-  if (show_result != NULL)\n-    *show_result = show;\n+  return {set, show};\n }\n \n /* Add element named NAME to command list LIST (the list for set or\n    some sublist thereof).  CLASS is as in add_cmd.  ENUMLIST is a list\n    of strings which may follow NAME.  VAR is address of the variable\n    which will contain the matching string (from ENUMLIST).  */\n \n-void\n+set_show_commands\n add_setshow_enum_cmd (const char *name,\n \t\t      enum command_class theclass,\n \t\t      const char *const *enumlist,\n@@ -603,17 +598,17 @@ add_setshow_enum_cmd (const char *name,\n \t\t      struct cmd_list_element **show_list,\n \t\t      void *context)\n {\n-  struct cmd_list_element *c, *show;\n+  set_show_commands commands\n+    =  add_setshow_cmd_full (name, theclass, var_enum, var,\n+\t\t\t     set_doc, show_doc, help_doc,\n+\t\t\t     set_func, show_func,\n+\t\t\t     set_list, show_list);\n+  commands.set->enums = enumlist;\n \n-  add_setshow_cmd_full (name, theclass, var_enum, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&c, &show);\n-  c->enums = enumlist;\n+  set_cmd_context (commands.set, context);\n+  set_cmd_context (commands.show, context);\n \n-  set_cmd_context (c, context);\n-  set_cmd_context (show, context);\n+  return commands;\n }\n \n /* See cli-decode.h.  */\n@@ -623,7 +618,8 @@ const char * const auto_boolean_enums[] = { \"on\", \"off\", \"auto\", NULL };\n    command list lists.  CLASS is as in add_cmd.  VAR is address of the\n    variable which will contain the value.  DOC is the documentation\n    string.  FUNC is the corresponding callback.  */\n-void\n+\n+set_show_commands\n add_setshow_auto_boolean_cmd (const char *name,\n \t\t\t      enum command_class theclass,\n \t\t\t      enum auto_boolean *var,\n@@ -634,14 +630,15 @@ add_setshow_auto_boolean_cmd (const char *name,\n \t\t\t      struct cmd_list_element **set_list,\n \t\t\t      struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *c;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_auto_boolean, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n-  add_setshow_cmd_full (name, theclass, var_auto_boolean, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&c, NULL);\n-  c->enums = auto_boolean_enums;\n+  commands.set->enums = auto_boolean_enums;\n+\n+  return commands;\n }\n \n /* See cli-decode.h.  */\n@@ -653,7 +650,7 @@ const char * const boolean_enums[] = { \"on\", \"off\", NULL };\n    value.  SET_DOC and SHOW_DOC are the documentation strings.\n    Returns the new command element.  */\n \n-cmd_list_element *\n+set_show_commands\n add_setshow_boolean_cmd (const char *name, enum command_class theclass, bool *var,\n \t\t\t const char *set_doc, const char *show_doc,\n \t\t\t const char *help_doc,\n@@ -662,21 +659,21 @@ add_setshow_boolean_cmd (const char *name, enum command_class theclass, bool *va\n \t\t\t struct cmd_list_element **set_list,\n \t\t\t struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *c;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_boolean, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n-  add_setshow_cmd_full (name, theclass, var_boolean, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&c, NULL);\n-  c->enums = boolean_enums;\n+  commands.set->enums = boolean_enums;\n \n-  return c;\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n-void\n+\n+set_show_commands\n add_setshow_filename_cmd (const char *name, enum command_class theclass,\n \t\t\t  char **var,\n \t\t\t  const char *set_doc, const char *show_doc,\n@@ -686,19 +683,21 @@ add_setshow_filename_cmd (const char *name, enum command_class theclass,\n \t\t\t  struct cmd_list_element **set_list,\n \t\t\t  struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set_result;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_filename, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n+\n+  set_cmd_completer (commands.set, filename_completer);\n \n-  add_setshow_cmd_full (name, theclass, var_filename, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set_result, NULL);\n-  set_cmd_completer (set_result, filename_completer);\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n-void\n+\n+set_show_commands\n add_setshow_string_cmd (const char *name, enum command_class theclass,\n \t\t\tchar **var,\n \t\t\tconst char *set_doc, const char *show_doc,\n@@ -708,21 +707,22 @@ add_setshow_string_cmd (const char *name, enum command_class theclass,\n \t\t\tstruct cmd_list_element **set_list,\n \t\t\tstruct cmd_list_element **show_list)\n {\n-  cmd_list_element *set_cmd;\n-\n-  add_setshow_cmd_full (name, theclass, var_string, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set_cmd, NULL);\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_string, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n   /* Disable the default symbol completer.  */\n-  set_cmd_completer (set_cmd, nullptr);\n+  set_cmd_completer (commands.set, nullptr);\n+\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n-struct cmd_list_element *\n+\n+set_show_commands\n add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n \t\t\t\t char **var,\n \t\t\t\t const char *set_doc, const char *show_doc,\n@@ -732,23 +732,22 @@ add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n \t\t\t\t struct cmd_list_element **set_list,\n \t\t\t\t struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set_cmd;\n-\n-  add_setshow_cmd_full (name, theclass, var_string_noescape, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set_cmd, NULL);\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_string_noescape, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n   /* Disable the default symbol completer.  */\n-  set_cmd_completer (set_cmd, nullptr);\n+  set_cmd_completer (commands.set, nullptr);\n \n-  return set_cmd;\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n-void\n+\n+set_show_commands\n add_setshow_optional_filename_cmd (const char *name, enum command_class theclass,\n \t\t\t\t   char **var,\n \t\t\t\t   const char *set_doc, const char *show_doc,\n@@ -758,16 +757,15 @@ add_setshow_optional_filename_cmd (const char *name, enum command_class theclass\n \t\t\t\t   struct cmd_list_element **set_list,\n \t\t\t\t   struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set_result;\n- \n-  add_setshow_cmd_full (name, theclass, var_optional_filename, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set_result, NULL);\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_optional_filename, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \t\t\n-  set_cmd_completer (set_result, filename_completer);\n+  set_cmd_completer (commands.set, filename_completer);\n \n+  return commands;\n }\n \n /* Completes on literal \"unlimited\".  Used by integer commands that\n@@ -792,7 +790,8 @@ integer_unlimited_completer (struct cmd_list_element *ignore,\n    add_cmd.  VAR is address of the variable which will contain the\n    value.  SET_DOC and SHOW_DOC are the documentation strings.  This\n    function is only used in Python API.  Please don't use it elsewhere.  */\n-void\n+\n+set_show_commands\n add_setshow_integer_cmd (const char *name, enum command_class theclass,\n \t\t\t int *var,\n \t\t\t const char *set_doc, const char *show_doc,\n@@ -802,22 +801,23 @@ add_setshow_integer_cmd (const char *name, enum command_class theclass,\n \t\t\t struct cmd_list_element **set_list,\n \t\t\t struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_integer, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n-  add_setshow_cmd_full (name, theclass, var_integer, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set, NULL);\n+  set_cmd_completer (commands.set, integer_unlimited_completer);\n \n-  set_cmd_completer (set, integer_unlimited_completer);\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n    value.  SET_DOC and SHOW_DOC are the documentation strings.  */\n-void\n+\n+set_show_commands\n add_setshow_uinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t  unsigned int *var,\n \t\t\t  const char *set_doc, const char *show_doc,\n@@ -827,22 +827,23 @@ add_setshow_uinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t  struct cmd_list_element **set_list,\n \t\t\t  struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_uinteger, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n-  add_setshow_cmd_full (name, theclass, var_uinteger, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set, NULL);\n+  set_cmd_completer (commands.set, integer_unlimited_completer);\n \n-  set_cmd_completer (set, integer_unlimited_completer);\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n    value.  SET_DOC and SHOW_DOC are the documentation strings.  */\n-void\n+\n+set_show_commands\n add_setshow_zinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t  int *var,\n \t\t\t  const char *set_doc, const char *show_doc,\n@@ -852,14 +853,13 @@ add_setshow_zinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t  struct cmd_list_element **set_list,\n \t\t\t  struct cmd_list_element **show_list)\n {\n-  add_setshow_cmd_full (name, theclass, var_zinteger, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\tNULL, NULL);\n+  return add_setshow_cmd_full (name, theclass, var_zinteger, var,\n+\t\t\t       set_doc, show_doc, help_doc,\n+\t\t\t       set_func, show_func,\n+\t\t\t       set_list, show_list);\n }\n \n-void\n+set_show_commands\n add_setshow_zuinteger_unlimited_cmd (const char *name,\n \t\t\t\t     enum command_class theclass,\n \t\t\t\t     int *var,\n@@ -871,22 +871,23 @@ add_setshow_zuinteger_unlimited_cmd (const char *name,\n \t\t\t\t     struct cmd_list_element **set_list,\n \t\t\t\t     struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *set;\n+  set_show_commands commands\n+    = add_setshow_cmd_full (name, theclass, var_zuinteger_unlimited, var,\n+\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t    set_func, show_func,\n+\t\t\t    set_list, show_list);\n \n-  add_setshow_cmd_full (name, theclass, var_zuinteger_unlimited, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\t&set, NULL);\n+  set_cmd_completer (commands.set, integer_unlimited_completer);\n \n-  set_cmd_completer (set, integer_unlimited_completer);\n+  return commands;\n }\n \n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n    value.  SET_DOC and SHOW_DOC are the documentation strings.  */\n-void\n+\n+set_show_commands\n add_setshow_zuinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t   unsigned int *var,\n \t\t\t   const char *set_doc, const char *show_doc,\n@@ -896,11 +897,10 @@ add_setshow_zuinteger_cmd (const char *name, enum command_class theclass,\n \t\t\t   struct cmd_list_element **set_list,\n \t\t\t   struct cmd_list_element **show_list)\n {\n-  add_setshow_cmd_full (name, theclass, var_zuinteger, var,\n-\t\t\tset_doc, show_doc, help_doc,\n-\t\t\tset_func, show_func,\n-\t\t\tset_list, show_list,\n-\t\t\tNULL, NULL);\n+  return add_setshow_cmd_full (name, theclass, var_zuinteger, var,\n+\t\t\t       set_doc, show_doc, help_doc,\n+\t\t\t       set_func, show_func,\n+\t\t\t       set_list, show_list);\n }\n \n /* Remove the command named NAME from the command list.  Return the"
    },
    {
      "sha": "e82f2eabaed7e544f2c64976065910f0b7096e30",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 79,
      "deletions": 135,
      "changes": 214,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -398,141 +398,85 @@ typedef void (show_value_ftype) (struct ui_file *file,\n    instead print the value out directly.  */\n extern show_value_ftype deprecated_show_value_hack;\n \n-extern void add_setshow_enum_cmd (const char *name,\n-\t\t\t\t  enum command_class theclass,\n-\t\t\t\t  const char *const *enumlist,\n-\t\t\t\t  const char **var,\n-\t\t\t\t  const char *set_doc,\n-\t\t\t\t  const char *show_doc,\n-\t\t\t\t  const char *help_doc,\n-\t\t\t\t  cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t  show_value_ftype *show_func,\n-\t\t\t\t  struct cmd_list_element **set_list,\n-\t\t\t\t  struct cmd_list_element **show_list,\n-\t\t\t\t  void *context = nullptr);\n-\n-extern void add_setshow_auto_boolean_cmd (const char *name,\n-\t\t\t\t\t  enum command_class theclass,\n-\t\t\t\t\t  enum auto_boolean *var,\n-\t\t\t\t\t  const char *set_doc,\n-\t\t\t\t\t  const char *show_doc,\n-\t\t\t\t\t  const char *help_doc,\n-\t\t\t\t\t  cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t\t  show_value_ftype *show_func,\n-\t\t\t\t\t  struct cmd_list_element **set_list,\n-\t\t\t\t\t  struct cmd_list_element **show_list);\n-\n-extern cmd_list_element *\n-  add_setshow_boolean_cmd (const char *name,\n-\t\t\t   enum command_class theclass,\n-\t\t\t   bool *var,\n-\t\t\t   const char *set_doc, const char *show_doc,\n-\t\t\t   const char *help_doc,\n-\t\t\t   cmd_const_sfunc_ftype *set_func,\n-\t\t\t   show_value_ftype *show_func,\n-\t\t\t   struct cmd_list_element **set_list,\n-\t\t\t   struct cmd_list_element **show_list);\n-\n-extern void add_setshow_filename_cmd (const char *name,\n-\t\t\t\t      enum command_class theclass,\n-\t\t\t\t      char **var,\n-\t\t\t\t      const char *set_doc,\n-\t\t\t\t      const char *show_doc,\n-\t\t\t\t      const char *help_doc,\n-\t\t\t\t      cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t      show_value_ftype *show_func,\n-\t\t\t\t      struct cmd_list_element **set_list,\n-\t\t\t\t      struct cmd_list_element **show_list);\n-\n-extern void add_setshow_string_cmd (const char *name,\n-\t\t\t\t    enum command_class theclass,\n-\t\t\t\t    char **var,\n-\t\t\t\t    const char *set_doc,\n-\t\t\t\t    const char *show_doc,\n-\t\t\t\t    const char *help_doc,\n-\t\t\t\t    cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t    show_value_ftype *show_func,\n-\t\t\t\t    struct cmd_list_element **set_list,\n-\t\t\t\t    struct cmd_list_element **show_list);\n-\n-extern struct cmd_list_element *add_setshow_string_noescape_cmd\n-\t\t      (const char *name,\n-\t\t       enum command_class theclass,\n-\t\t       char **var,\n-\t\t       const char *set_doc,\n-\t\t       const char *show_doc,\n-\t\t       const char *help_doc,\n-\t\t       cmd_const_sfunc_ftype *set_func,\n-\t\t       show_value_ftype *show_func,\n-\t\t       struct cmd_list_element **set_list,\n-\t\t       struct cmd_list_element **show_list);\n-\n-extern void add_setshow_optional_filename_cmd (const char *name,\n-\t\t\t\t\t       enum command_class theclass,\n-\t\t\t\t\t       char **var,\n-\t\t\t\t\t       const char *set_doc,\n-\t\t\t\t\t       const char *show_doc,\n-\t\t\t\t\t       const char *help_doc,\n-\t\t\t\t\t       cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t\t       show_value_ftype *show_func,\n-\t\t\t\t\t       struct cmd_list_element **set_list,\n-\t\t\t\t\t       struct cmd_list_element **show_list);\n-\n-extern void add_setshow_integer_cmd (const char *name,\n-\t\t\t\t     enum command_class theclass,\n-\t\t\t\t     int *var,\n-\t\t\t\t     const char *set_doc,\n-\t\t\t\t     const char *show_doc,\n-\t\t\t\t     const char *help_doc,\n-\t\t\t\t     cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t     show_value_ftype *show_func,\n-\t\t\t\t     struct cmd_list_element **set_list,\n-\t\t\t\t     struct cmd_list_element **show_list);\n-\n-extern void add_setshow_uinteger_cmd (const char *name,\n-\t\t\t\t      enum command_class theclass,\n-\t\t\t\t      unsigned int *var,\n-\t\t\t\t      const char *set_doc,\n-\t\t\t\t      const char *show_doc,\n-\t\t\t\t      const char *help_doc,\n-\t\t\t\t      cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t      show_value_ftype *show_func,\n-\t\t\t\t      struct cmd_list_element **set_list,\n-\t\t\t\t      struct cmd_list_element **show_list);\n-\n-extern void add_setshow_zinteger_cmd (const char *name,\n-\t\t\t\t      enum command_class theclass,\n-\t\t\t\t      int *var,\n-\t\t\t\t      const char *set_doc,\n-\t\t\t\t      const char *show_doc,\n-\t\t\t\t      const char *help_doc,\n-\t\t\t\t      cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t      show_value_ftype *show_func,\n-\t\t\t\t      struct cmd_list_element **set_list,\n-\t\t\t\t      struct cmd_list_element **show_list);\n-\n-extern void add_setshow_zuinteger_cmd (const char *name,\n-\t\t\t\t       enum command_class theclass,\n-\t\t\t\t       unsigned int *var,\n-\t\t\t\t       const char *set_doc,\n-\t\t\t\t       const char *show_doc,\n-\t\t\t\t       const char *help_doc,\n-\t\t\t\t       cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t       show_value_ftype *show_func,\n-\t\t\t\t       struct cmd_list_element **set_list,\n-\t\t\t\t       struct cmd_list_element **show_list);\n-\n-extern void\n-  add_setshow_zuinteger_unlimited_cmd (const char *name,\n-\t\t\t\t       enum command_class theclass,\n-\t\t\t\t       int *var,\n-\t\t\t\t       const char *set_doc,\n-\t\t\t\t       const char *show_doc,\n-\t\t\t\t       const char *help_doc,\n-\t\t\t\t       cmd_const_sfunc_ftype *set_func,\n-\t\t\t\t       show_value_ftype *show_func,\n-\t\t\t\t       struct cmd_list_element **set_list,\n-\t\t\t\t       struct cmd_list_element **show_list);\n+/* Return value type for the add_setshow_* functions.  */\n+\n+struct set_show_commands\n+{\n+  cmd_list_element *set, *show;\n+};\n+\n+extern set_show_commands add_setshow_enum_cmd\n+  (const char *name, command_class theclass, const char *const *enumlist,\n+   const char **var, const char *set_doc, const char *show_doc,\n+   const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list, void *context = nullptr);\n+\n+extern set_show_commands add_setshow_auto_boolean_cmd\n+  (const char *name, command_class theclass, auto_boolean *var,\n+   const char *set_doc, const char *show_doc, const char *help_doc,\n+   cmd_const_sfunc_ftype *set_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_boolean_cmd\n+  (const char *name, command_class theclass, bool *var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_filename_cmd\n+  (const char *name, command_class theclass, char **var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_string_cmd\n+  (const char *name, command_class theclass, char **var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_string_noescape_cmd\n+  (const char *name, command_class theclass, char **var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_optional_filename_cmd\n+  (const char *name, command_class theclass, char **var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_integer_cmd\n+  (const char *name, command_class theclass, int *var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_uinteger_cmd\n+  (const char *name, command_class theclass, unsigned int *var,\n+   const char *set_doc, const char *show_doc, const char *help_doc,\n+   cmd_const_sfunc_ftype *set_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_zinteger_cmd\n+  (const char *name, command_class theclass, int *var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_zuinteger_cmd\n+  (const char *name, command_class theclass, unsigned int *var,\n+   const char *set_doc, const char *show_doc, const char *help_doc,\n+   cmd_const_sfunc_ftype *set_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n+extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n+  (const char *name, command_class theclass, int *var, const char *set_doc,\n+   const char *show_doc, const char *help_doc, cmd_const_sfunc_ftype *set_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n \n /* Do a \"show\" command for each thing on a command list.  */\n "
    },
    {
      "sha": "ddaa77272a93c935a164696ff6e2169e579599f6",
      "filename": "gdb/corefile.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corefile.c?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -458,25 +458,25 @@ void _initialize_core ();\n void\n _initialize_core ()\n {\n-  struct cmd_list_element *c;\n-\n-  c = add_cmd (\"core-file\", class_files, core_file_command, _(\"\\\n+  cmd_list_element *core_file_cmd\n+    = add_cmd (\"core-file\", class_files, core_file_command, _(\"\\\n Use FILE as core dump for examining memory and registers.\\n\\\n Usage: core-file FILE\\n\\\n No arg means have no core file.  This command has been superseded by the\\n\\\n `target core' and `detach' commands.\"), &cmdlist);\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (core_file_cmd, filename_completer);\n \n   \n-  c = add_setshow_string_noescape_cmd (\"gnutarget\", class_files,\n+  set_show_commands set_show_gnutarget\n+    = add_setshow_string_noescape_cmd (\"gnutarget\", class_files,\n \t\t\t\t       &gnutarget_string, _(\"\\\n Set the current BFD target.\"), _(\"\\\n Show the current BFD target.\"), _(\"\\\n Use `set gnutarget auto' to specify automatic detection.\"),\n \t\t\t\t       set_gnutarget_command,\n \t\t\t\t       show_gnutarget_string,\n \t\t\t\t       &setlist, &showlist);\n-  set_cmd_completer (c, complete_set_gnutarget);\n+  set_cmd_completer (set_show_gnutarget.set, complete_set_gnutarget);\n \n   add_alias_cmd (\"g\", \"gnutarget\", class_files, 1, &setlist);\n "
    },
    {
      "sha": "7f730f681887076d94a1b542c54598d32d7957b2",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -1139,17 +1139,16 @@ void _initialize_disasm ();\n void\n _initialize_disasm ()\n {\n-  struct cmd_list_element *cmd;\n-\n   /* Add the command that controls the disassembler options.  */\n-  cmd = add_setshow_string_noescape_cmd (\"disassembler-options\", no_class,\n-\t\t\t\t\t &prospective_options, _(\"\\\n+  set_show_commands set_show_disas_opts\n+    = add_setshow_string_noescape_cmd (\"disassembler-options\", no_class,\n+\t\t\t\t       &prospective_options, _(\"\\\n Set the disassembler options.\\n\\\n Usage: set disassembler-options OPTION [,OPTION]...\\n\\n\\\n See: 'show disassembler-options' for valid option values.\"), _(\"\\\n Show the disassembler options.\"), NULL,\n \t\t\t\t\t set_disassembler_options_sfunc,\n \t\t\t\t\t show_disassembler_options_sfunc,\n \t\t\t\t\t &setlist, &showlist);\n-  set_cmd_completer (cmd, disassembler_options_completer);\n+  set_cmd_completer (set_show_disas_opts.set, disassembler_options_completer);\n }"
    },
    {
      "sha": "334d9744dee14f62a14551ae05ccd720f60aeab1",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -3572,17 +3572,18 @@ Usage: func NAME\"));\n \n   /* Install \"set print raw frame-arguments\", a deprecated spelling of\n      \"set print raw-frame-arguments\".  */\n-  cmd = add_setshow_boolean_cmd\n-    (\"frame-arguments\", no_class,\n-     &user_frame_print_options.print_raw_frame_arguments,\n-     _(\"\\\n+  set_show_commands set_show_frame_args\n+    = add_setshow_boolean_cmd\n+      (\"frame-arguments\", no_class,\n+       &user_frame_print_options.print_raw_frame_arguments,\n+       _(\"\\\n Set whether to print frame arguments in raw form.\"), _(\"\\\n Show whether to print frame arguments in raw form.\"), _(\"\\\n If set, frame arguments are printed in raw form, bypassing any\\n\\\n pretty-printers for that value.\"),\n-     NULL, NULL,\n-     &setprintrawlist, &showprintrawlist);\n-  deprecate_cmd (cmd, \"set print raw-frame-arguments\");\n+       NULL, NULL,\n+       &setprintrawlist, &showprintrawlist);\n+  deprecate_cmd (set_show_frame_args.set, \"set print raw-frame-arguments\");\n \n   add_setshow_auto_boolean_cmd (\"disassemble-next-line\", class_stack,\n \t\t\t\t&disassemble_next_line, _(\"\\"
    },
    {
      "sha": "6e0f43d2fd92d80d53927ea3e78882da9cbb9a67",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af7f8f52dd6024951577cfc328c318fdd4089623/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=af7f8f52dd6024951577cfc328c318fdd4089623",
      "patch": "@@ -2345,7 +2345,7 @@ input settings.\"),\n \t\t\tshow_interactive_mode,\n \t\t\t&setlist, &showlist);\n \n-  c = add_setshow_boolean_cmd (\"startup-quietly\", class_support,\n+  add_setshow_boolean_cmd (\"startup-quietly\", class_support,\n \t\t\t       &startup_quiet, _(\"\\\n Set whether GDB should start up quietly.\"), _(\"\t\t\\\n Show whether GDB should start up quietly.\"), _(\"\\"
    }
  ]
}