{
  "sha": "ae64ba58b3bc5a9a023974f37515aee9862548fd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWU2NGJhNThiM2JjNWE5YTAyMzk3NGYzNzUxNWFlZTk4NjI1NDhmZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:20Z"
    },
    "message": "Introduce comma_operation\n\nThis adds class comma_operation, which implements BINOP_COMMA.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ax-gdb.c (comma_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "1e3490af3e496eaae203886c75a69649ac9bf3d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e3490af3e496eaae203886c75a69649ac9bf3d5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ae64ba58b3bc5a9a023974f37515aee9862548fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae64ba58b3bc5a9a023974f37515aee9862548fd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ae64ba58b3bc5a9a023974f37515aee9862548fd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae64ba58b3bc5a9a023974f37515aee9862548fd/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4eff4c122e06e913452e2039e29e8db6b15b1dd"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 57,
    "deletions": 0
  },
  "files": [
    {
      "sha": "729074bd61d019a9267838eac9488ca55e9eb5be",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ae64ba58b3bc5a9a023974f37515aee9862548fd",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ax-gdb.c (comma_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class repeat_operation): New."
    },
    {
      "sha": "8d5e4fff9033728aefa575cf2a47d77b9e9f7728",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=ae64ba58b3bc5a9a023974f37515aee9862548fd",
      "patch": "@@ -2469,6 +2469,28 @@ repeat_operation::do_generate_ax (struct expression *exp,\n   value->type = array;\n }\n \n+void\n+comma_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t struct agent_expr *ax,\n+\t\t\t\t struct axs_value *value,\n+\t\t\t\t struct type *cast_type)\n+{\n+  /* Note that we need to be a little subtle about generating code\n+     for comma.  In C, we can do some optimizations here because\n+     we know the left operand is only being evaluated for effect.\n+     However, if the tracing kludge is in effect, then we always\n+     need to evaluate the left hand side fully, so that all the\n+     variables it mentions get traced.  */\n+  struct axs_value value1;\n+  std::get<0> (m_storage)->generate_ax (exp, ax, &value1);\n+  /* Don't just dispose of the left operand.  We might be tracing,\n+     in which case we want to emit code to trace it if it's an\n+     lvalue.  */\n+  gen_traced_pop (ax, &value1);\n+  std::get<1> (m_storage)->generate_ax (exp, ax, value);\n+  /* It's the consumer's responsibility to trace the right operand.  */\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "2fa5b2f205525041afa76f6780e3748fccfc70ab",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae64ba58b3bc5a9a023974f37515aee9862548fd/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=ae64ba58b3bc5a9a023974f37515aee9862548fd",
      "patch": "@@ -1208,6 +1208,37 @@ class repeat_operation\n     override;\n };\n \n+/* C-style comma operator.  */\n+class comma_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    /* The left-hand-side is only evaluated for side effects, so don't\n+       bother in other modes.  */\n+    if (noside == EVAL_NORMAL)\n+      std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    return std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_COMMA; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}