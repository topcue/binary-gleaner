{
  "sha": "df6780137dc9d832db8c5525ecc760acdbcde5c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGY2NzgwMTM3ZGM5ZDgzMmRiOGM1NTI1ZWNjNzYwYWNkYmNkZTVjOQ==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:38:59Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:42:36Z"
    },
    "message": "[binutils][aarch64] Bfloat16 enablement [2/X]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions) to binutils.\n\nThis patch introduces the following BFloat16 instructions to the\naarch64 backend: bfdot, bfmmla, bfcvt, bfcvtnt, bfmlal[t/b],\nbfcvtn2.\n\nCommitted on behalf of Mihail Ionescu.\n\ngas/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-aarch64.c (vectype_to_qualifier): Special case the\n\tS_2H operand qualifier.\n\t* doc/c-aarch64.texi: Document bf16 and bf16mmla4 extensions.\n\t* testsuite/gas/aarch64/bfloat16.d: New test.\n\t* testsuite/gas/aarch64/bfloat16.s: New test.\n\t* testsuite/gas/aarch64/illegal-bfloat16.d: New test.\n\t* testsuite/gas/aarch64/illegal-bfloat16.l: New test.\n\t* testsuite/gas/aarch64/illegal-bfloat16.s: New test.\n\t* testsuite/gas/aarch64/sve-bfloat-movprfx.s: New test.\n\t* testsuite/gas/aarch64/sve-bfloat-movprfx.d: New test.\n\ninclude/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/aarch64.h (AARCH64_FEATURE_BFLOAT16): New feature macros.\n\t(AARCH64_ARCH_V8_6): Include BFloat16 feature macros.\n\t(enum aarch64_opnd_qualifier): Introduce new operand qualifier\n\tAARCH64_OPND_QLF_S_2H.\n\t(enum aarch64_insn_class): Introduce new class \"bfloat16\".\n\t(BFLOAT16_SVE_INSNC): New feature set for bfloat16\n\tinstructions to support the movprfx constraint.\n\nopcodes/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* aarch64-asm.c (aarch64_ins_reglane): Use AARCH64_OPND_QLF_S_2H\n\tin reglane special case.\n\t* aarch64-dis-2.c (aarch64_opcode_lookup_1,\n\taarch64_find_next_opcode): Account for new instructions.\n\t* aarch64-dis.c (aarch64_ext_reglane): Use AARCH64_OPND_QLF_S_2H\n\tin reglane special case.\n\t* aarch64-opc.c (struct operand_qualifier_data): Add data for\n\tnew AARCH64_OPND_QLF_S_2H qualifier.\n\t* aarch64-tbl.h (QL_BFDOT QL_BFDOT64, QL_BFDOT64I, QL_BFMMLA2,\n\tQL_BFCVT64, QL_BFCVTN64, QL_BFCVTN2_64): New qualifiers.\n\t(aarch64_feature_bfloat16, aarch64_feature_bfloat16_sve,\n\taarch64_feature_bfloat16_bfmmla4): New feature sets.\n\t(BFLOAT_SVE, BFLOAT): New feature set macros.\n\t(BFLOAT_SVE_INSN, BFLOAT_BFMMLA4_INSN, BFLOAT_INSN): New macros\n\tto define BFloat16 instructions.\n\t(aarch64_opcode_table): Define new instructions bfdot,\n\tbfmmla, bfcvt, bfcvtnt, bfdot, bfdot, bfcvtn, bfmlal[b/t]\n\tbfcvtn2, bfcvt.\n\nRegression tested on aarch64-elf.\n\nIs it ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "13d42c9514e6d84686a0f15776cf27c70854cf32",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/13d42c9514e6d84686a0f15776cf27c70854cf32"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/df6780137dc9d832db8c5525ecc760acdbcde5c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df6780137dc9d832db8c5525ecc760acdbcde5c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/df6780137dc9d832db8c5525ecc760acdbcde5c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df6780137dc9d832db8c5525ecc760acdbcde5c9/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ae2d3d9eabfd3dff6a540e7789e368e8d75fbce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ae2d3d9eabfd3dff6a540e7789e368e8d75fbce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ae2d3d9eabfd3dff6a540e7789e368e8d75fbce"
    }
  ],
  "stats": {
    "total": 839,
    "additions": 766,
    "deletions": 73
  },
  "files": [
    {
      "sha": "05bf4e4621c9555e43825dcab366dfb64cde9178",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -1,3 +1,17 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-aarch64.c (vectype_to_qualifier): Special case the\n+\tS_2H operand qualifier.\n+\t* doc/c-aarch64.texi: Document bf16 extension.\n+\t* testsuite/gas/aarch64/bfloat16.d: New test.\n+\t* testsuite/gas/aarch64/bfloat16.s: New test.\n+\t* testsuite/gas/aarch64/illegal-bfloat16.d: New test.\n+\t* testsuite/gas/aarch64/illegal-bfloat16.l: New test.\n+\t* testsuite/gas/aarch64/illegal-bfloat16.s: New test.\n+\t* testsuite/gas/aarch64/sve-bfloat-movprfx.s: New test.\n+\t* testsuite/gas/aarch64/sve-bfloat-movprfx.d: New test.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "527d8590ca7e08b8921cade8703888e3136f9a5e",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -5130,6 +5130,10 @@ vectype_to_qualifier (const struct vector_type_el *vectype)\n       if (vectype->type == NT_b && vectype->width == 4)\n \treturn AARCH64_OPND_QLF_S_4B;\n \n+      /* Special case S_2H.  */\n+      if (vectype->type == NT_h && vectype->width == 2)\n+\treturn AARCH64_OPND_QLF_S_2H;\n+\n       /* Vector element register.  */\n       return AARCH64_OPND_QLF_S_B + vectype->type;\n     }\n@@ -9003,6 +9007,8 @@ static const struct aarch64_option_cpu_value_table aarch64_features[] = {\n \t\t\t\t\t | AARCH64_FEATURE_SHA3, 0)},\n   {\"sve2-bitperm\",\tAARCH64_FEATURE (AARCH64_FEATURE_SVE2_BITPERM, 0),\n \t\t\tAARCH64_FEATURE (AARCH64_FEATURE_SVE2, 0)},\n+  {\"bf16\",\t\tAARCH64_FEATURE (AARCH64_FEATURE_BFLOAT16, 0),\n+\t\t\tAARCH64_ARCH_NONE},\n   {NULL,\t\tAARCH64_ARCH_NONE, AARCH64_ARCH_NONE},\n };\n "
    },
    {
      "sha": "4cb94872daa647e543c1c67b486e71de21dcb425",
      "filename": "gas/doc/c-aarch64.texi",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/doc/c-aarch64.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/doc/c-aarch64.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-aarch64.texi?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -144,6 +144,8 @@ automatically cause those extensions to be disabled.\n @multitable @columnfractions .12 .17 .17 .54\n @headitem Extension @tab Minimum Architecture @tab Enabled by default\n  @tab Description\n+@item @code{bf16} @tab ARMv8.2-A @tab ARMv8.6-A or later\n+ @tab Enable BFloat16 extension.\n @item @code{compnum} @tab ARMv8.2-A @tab ARMv8.3-A or later\n  @tab Enable the complex number SIMD extensions.  This implies\n  @code{fp16} and @code{simd}."
    },
    {
      "sha": "78d10cb3cadb98c00763ba299d55c548d2209d31",
      "filename": "gas/testsuite/gas/aarch64/bfloat16.d",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/bfloat16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/bfloat16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/bfloat16.d?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,56 @@\n+#as: -march=armv8.6-a+bf16+sve\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t647b82b1 \tbfdot\tz17\\.s, z21\\.h, z27\\.h\n+ *[0-9a-f]+:\t64608000 \tbfdot\tz0\\.s, z0\\.h, z0\\.h\n+ *[0-9a-f]+:\t647d42b1 \tbfdot\tz17\\.s, z21\\.h, z5\\.h\\[3\\]\n+ *[0-9a-f]+:\t64784000 \tbfdot\tz0\\.s, z0\\.h, z0\\.h\\[3\\]\n+ *[0-9a-f]+:\t64604000 \tbfdot\tz0\\.s, z0\\.h, z0\\.h\\[0\\]\n+ *[0-9a-f]+:\t647be6b1 \tbfmmla\tz17\\.s, z21\\.h, z27\\.h\n+ *[0-9a-f]+:\t6460e400 \tbfmmla\tz0\\.s, z0\\.h, z0\\.h\n+ *[0-9a-f]+:\t658ab6b1 \tbfcvt\tz17\\.h, p5/m, z21\\.s\n+ *[0-9a-f]+:\t658aa000 \tbfcvt\tz0\\.h, p0/m, z0\\.s\n+ *[0-9a-f]+:\t648ab6b1 \tbfcvtnt\tz17\\.h, p5/m, z21\\.s\n+ *[0-9a-f]+:\t648aa000 \tbfcvtnt\tz0\\.h, p0/m, z0\\.s\n+ *[0-9a-f]+:\t64fb86b1 \tbfmlalt\tz17\\.s, z21\\.h, z27\\.h\n+ *[0-9a-f]+:\t64e08400 \tbfmlalt\tz0\\.s, z0\\.h, z0\\.h\n+ *[0-9a-f]+:\t64fb82b1 \tbfmlalb\tz17\\.s, z21\\.h, z27\\.h\n+ *[0-9a-f]+:\t64e08000 \tbfmlalb\tz0\\.s, z0\\.h, z0\\.h\n+ *[0-9a-f]+:\t64e546b1 \tbfmlalt\tz17\\.s, z21\\.h, z5\\.h\\[0\\]\n+ *[0-9a-f]+:\t64f84c00 \tbfmlalt\tz0\\.s, z0\\.h, z0\\.h\\[7\\]\n+ *[0-9a-f]+:\t64e542b1 \tbfmlalb\tz17\\.s, z21\\.h, z5\\.h\\[0\\]\n+ *[0-9a-f]+:\t64f84800 \tbfmlalb\tz0\\.s, z0\\.h, z0\\.h\\[7\\]\n+ *[0-9a-f]+:\t2e5bfeb1 \tbfdot\tv17\\.2s, v21\\.4h, v27\\.4h\n+ *[0-9a-f]+:\t2e40fc00 \tbfdot\tv0\\.2s, v0\\.4h, v0\\.4h\n+ *[0-9a-f]+:\t6e5bfeb1 \tbfdot\tv17\\.4s, v21\\.8h, v27\\.8h\n+ *[0-9a-f]+:\t6e40fc00 \tbfdot\tv0\\.4s, v0\\.8h, v0\\.8h\n+ *[0-9a-f]+:\t0f7bfab1 \tbfdot\tv17\\.2s, v21\\.4h, v27\\.2h\\[3\\]\n+ *[0-9a-f]+:\t0f60f800 \tbfdot\tv0\\.2s, v0\\.4h, v0\\.2h\\[3\\]\n+ *[0-9a-f]+:\t4f7bfab1 \tbfdot\tv17\\.4s, v21\\.8h, v27\\.2h\\[3\\]\n+ *[0-9a-f]+:\t4f60f800 \tbfdot\tv0\\.4s, v0\\.8h, v0\\.2h\\[3\\]\n+ *[0-9a-f]+:\t0f5bf2b1 \tbfdot\tv17\\.2s, v21\\.4h, v27\\.2h\\[0\\]\n+ *[0-9a-f]+:\t0f40f000 \tbfdot\tv0\\.2s, v0\\.4h, v0\\.2h\\[0\\]\n+ *[0-9a-f]+:\t4f5bf2b1 \tbfdot\tv17\\.4s, v21\\.8h, v27\\.2h\\[0\\]\n+ *[0-9a-f]+:\t4f40f000 \tbfdot\tv0\\.4s, v0\\.8h, v0\\.2h\\[0\\]\n+ *[0-9a-f]+:\t6e5beeb1 \tbfmmla\tv17\\.4s, v21\\.8h, v27\\.8h\n+ *[0-9a-f]+:\t6e40ec00 \tbfmmla\tv0\\.4s, v0\\.8h, v0\\.8h\n+ *[0-9a-f]+:\t2edbfeb1 \tbfmlalb\tv17\\.4s, v21\\.8h, v27\\.8h\n+ *[0-9a-f]+:\t2ec0fc00 \tbfmlalb\tv0\\.4s, v0\\.8h, v0\\.8h\n+ *[0-9a-f]+:\t6edbfeb1 \tbfmlalt\tv17\\.4s, v21\\.8h, v27\\.8h\n+ *[0-9a-f]+:\t6ec0fc00 \tbfmlalt\tv0\\.4s, v0\\.8h, v0\\.8h\n+ *[0-9a-f]+:\t0fcff2b1 \tbfmlalb\tv17\\.4s, v21\\.8h, v15\\.h\\[0\\]\n+ *[0-9a-f]+:\t0ff0f800 \tbfmlalb\tv0\\.4s, v0\\.8h, v0\\.h\\[7\\]\n+ *[0-9a-f]+:\t4fcff2b1 \tbfmlalt\tv17\\.4s, v21\\.8h, v15\\.h\\[0\\]\n+ *[0-9a-f]+:\t4ff0f800 \tbfmlalt\tv0\\.4s, v0\\.8h, v0\\.h\\[7\\]\n+ *[0-9a-f]+:\t0ea16ab1 \tbfcvtn\tv17\\.4h, v21\\.4s\n+ *[0-9a-f]+:\t0ea16800 \tbfcvtn\tv0\\.4h, v0\\.4s\n+ *[0-9a-f]+:\t4ea16ab1 \tbfcvtn2\tv17\\.8h, v21\\.4s\n+ *[0-9a-f]+:\t4ea16800 \tbfcvtn2\tv0\\.8h, v0\\.4s\n+ *[0-9a-f]+:\t1e6342b1 \tbfcvt\th17, s21\n+ *[0-9a-f]+:\t1e634000 \tbfcvt\th0, s0"
    },
    {
      "sha": "5850a9c7d1892c36bc90f379e8aab7b48af3f7d7",
      "filename": "gas/testsuite/gas/aarch64/bfloat16.s",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/bfloat16.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/bfloat16.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/bfloat16.s?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,70 @@\n+/* The instructions with non-zero register numbers are there to ensure we have\n+   the correct argument positioning (i.e. check that the first argument is at\n+   the end of the word etc).\n+   The instructions with all-zero register numbers are to ensure the previous\n+   encoding didn't just \"happen\" to fit -- so that if we change the registers\n+   that changes the correct part of the word.\n+   Each of the numbered patterns begin and end with a 1, so we can replace\n+   them with all-zeros and see the entire range has changed. */\n+\n+// SVE\n+bfdot\tz17.s,  z21.h,  z27.h\n+bfdot\tz0.s,  z0.h,  z0.h\n+\n+bfdot\tz17.s,  z21.h,  z5.h[3]\n+bfdot\tz0.s,  z0.h,  z0.h[3]\n+bfdot\tz0.s,  z0.h,  z0.h[0]\n+\n+bfmmla\tz17.s,  z21.h,  z27.h\n+bfmmla\tz0.s,  z0.h,  z0.h\n+\n+bfcvt\tz17.h, p5/m, z21.s\n+bfcvt\tz0.h, p0/m, z0.s\n+bfcvtnt\tz17.h, p5/m, z21.s\n+bfcvtnt\tz0.h, p0/m, z0.s\n+\n+bfmlalt z17.s, z21.h, z27.h\n+bfmlalt z0.s, z0.h, z0.h\n+bfmlalb z17.s, z21.h, z27.h\n+bfmlalb z0.s, z0.h, z0.h\n+\n+bfmlalt z17.s, z21.h, z5.h[0]\n+bfmlalt z0.s, z0.h, z0.h[7]\n+bfmlalb z17.s, z21.h, z5.h[0]\n+bfmlalb z0.s, z0.h, z0.h[7]\n+\n+// SIMD\n+bfdot\tv17.2s, v21.4h, v27.4h\n+bfdot\tv0.2s, v0.4h, v0.4h\n+bfdot\tv17.4s, v21.8h, v27.8h\n+bfdot\tv0.4s, v0.8h, v0.8h\n+\n+bfdot\tv17.2s, v21.4h, v27.2h[3]\n+bfdot\tv0.2s, v0.4h, v0.2h[3]\n+bfdot\tv17.4s, v21.8h, v27.2h[3]\n+bfdot\tv0.4s, v0.8h, v0.2h[3]\n+bfdot\tv17.2s, v21.4h, v27.2h[0]\n+bfdot\tv0.2s, v0.4h, v0.2h[0]\n+bfdot\tv17.4s, v21.8h, v27.2h[0]\n+bfdot\tv0.4s, v0.8h, v0.2h[0]\n+\n+bfmmla\tv17.4s, v21.8h, v27.8h\n+bfmmla\tv0.4s, v0.8h, v0.8h\n+\n+bfmlalb\tv17.4s, v21.8h, v27.8h\n+bfmlalb\tv0.4s, v0.8h, v0.8h\n+bfmlalt\tv17.4s, v21.8h, v27.8h\n+bfmlalt\tv0.4s, v0.8h, v0.8h\n+\n+bfmlalb\tv17.4s, v21.8h, v15.h[0]\n+bfmlalb\tv0.4s, v0.8h, v0.h[7]\n+bfmlalt\tv17.4s, v21.8h, v15.h[0]\n+bfmlalt\tv0.4s, v0.8h, v0.h[7]\n+\n+bfcvtn\tv17.4h, v21.4s\n+bfcvtn\tv0.4h, v0.4s\n+bfcvtn2\tv17.8h, v21.4s\n+bfcvtn2\tv0.8h, v0.4s\n+\n+bfcvt\th17, s21\n+bfcvt\th0, s0"
    },
    {
      "sha": "275ac33af8fa300c9307748599d4ed547671b420",
      "filename": "gas/testsuite/gas/aarch64/illegal-bfloat16.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-bfloat16.d?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Illegal Bfloat16 instructions\n+#as: -march=armv8.6-a+bf16+sve\n+#source: illegal-bfloat16.s\n+#error_output: illegal-bfloat16.l"
    },
    {
      "sha": "c20f132de38aa160985ba88d47a384c3a0b1b54b",
      "filename": "gas/testsuite/gas/aarch64/illegal-bfloat16.l",
      "status": "added",
      "additions": 95,
      "deletions": 0,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-bfloat16.l?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,95 @@\n+[^ :]+: Assembler messages:\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfdot z0\\.s,z1\\.h,z2\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfdot z0\\.s, z1\\.h, z2\\.h\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfdot z0\\.s,z1\\.h,z3\\.s\\[3\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfdot z0\\.s, z1\\.h, z3\\.h\\[3\\]\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 3 at operand 3 -- `bfdot z0\\.s,z1\\.h,z3\\.h\\[4\\]'\n+[^ :]+:[0-9]+: Error: z0-z7 expected at operand 3 -- `bfdot z0\\.s,z1\\.h,z8\\.h\\[3\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmmla z0\\.s,z1\\.h,z2\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmmla z0\\.s, z1\\.h, z2\\.h\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfcvt z0\\.h,p1/z,z2\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfcvt z0\\.h, p1/m, z2\\.s\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfcvt z0\\.h,p1/m,z2\\.h'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfcvt z0\\.h, p1/m, z2\\.s\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfcvtnt z0\\.h,p1/z,z2\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfcvtnt z0\\.h, p1/m, z2\\.s\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfcvtnt z0\\.h,p1/m,z2\\.h'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfcvtnt z0\\.h, p1/m, z2\\.s\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalt z0\\.s,z0\\.h,z0\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalt z0\\.s, z0\\.h, z0\\.h\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalt z32\\.s,z0\\.h,z0\\.h'\n+[^ :]+:[0-9]+: Error: operand 2 must be an SVE vector register -- `bfmlalt z0\\.s,z32\\.h,z0\\.h'\n+[^ :]+:[0-9]+: Error: operand 3 must be an indexed SVE vector register -- `bfmlalt z0\\.s,z0\\.h,z32\\.h'\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 7 at operand 3 -- `bfmlalt z0\\.s,z0\\.h,z0\\.h\\[8\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalt z0\\.s,z0\\.h,z0\\.s\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalt z0\\.s, z0\\.h, z0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalt z32\\.s,z0\\.h,z0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand 2 must be an SVE vector register -- `bfmlalt z0\\.s,z32\\.h,z0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: z0-z7 expected at operand 3 -- `bfmlalt z0\\.s,z0\\.h,z8\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalb z0\\.s,z0\\.h,z0\\.s'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalb z0\\.s, z0\\.h, z0\\.h\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalb z32\\.s,z0\\.h,z0\\.h'\n+[^ :]+:[0-9]+: Error: operand 2 must be an SVE vector register -- `bfmlalb z0\\.s,z32\\.h,z0\\.h'\n+[^ :]+:[0-9]+: Error: operand 3 must be an indexed SVE vector register -- `bfmlalb z0\\.s,z0\\.h,z32\\.h'\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 7 at operand 3 -- `bfmlalb z0\\.s,z0\\.h,z0\\.h\\[8\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalb z0\\.s,z0\\.h,z0\\.s\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalb z0\\.s, z0\\.h, z0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalb z32\\.s,z0\\.h,z0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand 2 must be an SVE vector register -- `bfmlalb z0\\.s,z32\\.h,z0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: z0-z7 expected at operand 3 -- `bfmlalb z0\\.s,z0\\.h,z8\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfdot v0\\.2s,v1\\.4h,v2\\.2s\\[3\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfdot v0\\.2s, v1\\.4h, v2\\.2h\\[3\\]\n+[^ :]+:[0-9]+: Info:    other valid variant\\(s\\):\n+[^ :]+:[0-9]+: Info:    \tbfdot v0\\.4s, v1\\.8h, v2\\.2h\\[3\\]\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 3 at operand 3 -- `bfdot v0\\.4s,v1\\.8h,v2\\.2h\\[4\\]'\n+[^ :]+:[0-9]+: Error: invalid element size 8 and vector size combination s at operand 3 -- `bfmmla v0\\.4s,v1\\.8h,v2\\.8s'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmmla v0\\.4s,v1\\.4h,v2\\.8h'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmmla v0\\.4s, v1\\.8h, v2\\.8h\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalb v0\\.4s,v0\\.4h,v0\\.8h'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalb v0\\.4s, v0\\.8h, v0\\.8h\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalb v32\\.4s,v0\\.8h,v0\\.8h'\n+[^ :]+:[0-9]+: Error: operand 2 must be a SIMD vector register -- `bfmlalb v0\\.4s,v32\\.8h,v0\\.8h'\n+[^ :]+:[0-9]+: Error: operand 3 must be a SIMD vector register -- `bfmlalb v0\\.4s,v0\\.8h,v32\\.8h'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalt v0\\.4s,v0\\.8h,v0\\.4h'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalt v0\\.4s, v0\\.8h, v0\\.8h\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalt v32\\.4s,v0\\.8h,v0\\.8h'\n+[^ :]+:[0-9]+: Error: operand 2 must be a SIMD vector register -- `bfmlalt v0\\.4s,v32\\.8h,v0\\.8h'\n+[^ :]+:[0-9]+: Error: operand 3 must be a SIMD vector register -- `bfmlalt v0\\.4s,v0\\.8h,v32\\.8h'\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 7 at operand 3 -- `bfmlalb v0\\.4s,v0\\.8h,v0\\.h\\[8\\]'\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalb v32\\.4s,v0\\.8h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand 2 must be a SIMD vector register -- `bfmlalb v0\\.4s,v32\\.8h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: register number out of range 0 to 15 at operand 3 -- `bfmlalb v0\\.4s,v0\\.8h,v16\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalb v0\\.4s,v0\\.4h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalb v0\\.4s, v0\\.8h, v0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalb v0\\.4s,v0\\.8h,v0\\.s\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalb v0\\.4s, v0\\.8h, v0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalt v0\\.4s,v0\\.8h,v0\\.s\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalt v0\\.4s, v0\\.8h, v0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfmlalt v0\\.4s,v0\\.4h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfmlalt v0\\.4s, v0\\.8h, v0\\.h\\[0\\]\n+[^ :]+:[0-9]+: Error: register element index out of range 0 to 7 at operand 3 -- `bfmlalt v0\\.4s,v0\\.8h,v0\\.h\\[8\\]'\n+[^ :]+:[0-9]+: Error: operand 1 must be an SVE vector register -- `bfmlalt v32\\.4s,v0\\.8h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand 2 must be a SIMD vector register -- `bfmlalt v0\\.4s,v32\\.8h,v0\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: register number out of range 0 to 15 at operand 3 -- `bfmlalt v0\\.4s,v0\\.8h,v16\\.h\\[0\\]'\n+[^ :]+:[0-9]+: Error: operand mismatch -- `bfcvt h0,h1'\n+[^ :]+:[0-9]+: Info:    did you mean this\\?\n+[^ :]+:[0-9]+: Info:    \tbfcvt h0, s1"
    },
    {
      "sha": "6b5333435ee291e6b2a7997b50a52a60f8490345",
      "filename": "gas/testsuite/gas/aarch64/illegal-bfloat16.s",
      "status": "added",
      "additions": 67,
      "deletions": 0,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/illegal-bfloat16.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-bfloat16.s?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,67 @@\n+// SVE\n+bfdot\tz0.s,  z1.h,  z2.s  // Fails from size types\n+\n+bfdot\tz0.s,  z1.h,  z3.s[3] // Fails from size types\n+bfdot\tz0.s,  z1.h,  z3.h[4] // Fails from index size\n+bfdot\tz0.s,  z1.h,  z8.h[3] // Fails from vector number\n+\n+bfmmla\tz0.s,  z1.h,  z2.s  // Fails from size types\n+\n+bfcvt\tz0.h, p1/z, z2.s   // Fails from merge type\n+bfcvt\tz0.h, p1/m, z2.h   // Fails from size type\n+\n+bfcvtnt\tz0.h, p1/z, z2.s   // Fails from merge type\n+bfcvtnt\tz0.h, p1/m, z2.h   // Fails from size type\n+\n+bfmlalt z0.s, z0.h, z0.s   // Fails from size type\n+bfmlalt z32.s, z0.h, z0.h\n+bfmlalt z0.s, z32.h, z0.h\n+bfmlalt z0.s, z0.h, z32.h\n+\n+bfmlalt z0.s, z0.h, z0.h[8] // Fails from index size\n+bfmlalt z0.s, z0.h, z0.s[0] // Fails from size type\n+bfmlalt z32.s, z0.h, z0.h[0]\n+bfmlalt z0.s, z32.h, z0.h[0]\n+bfmlalt z0.s, z0.h, z8.h[0] // Fails from vector index\n+\n+bfmlalb z0.s, z0.h, z0.s   // Fails from size type\n+bfmlalb z32.s, z0.h, z0.h\n+bfmlalb z0.s, z32.h, z0.h\n+bfmlalb z0.s, z0.h, z32.h\n+\n+bfmlalb z0.s, z0.h, z0.h[8] // Fails from index size\n+bfmlalb z0.s, z0.h, z0.s[0] // Fails from size type\n+bfmlalb z32.s, z0.h, z0.h[0]\n+bfmlalb z0.s, z32.h, z0.h[0]\n+bfmlalb z0.s, z0.h, z8.h[0] // Fails from vector index\n+\n+// SIMD\n+bfdot\tv0.2s, v1.4h, v2.2s[3] // Fails from size types\n+bfdot\tv0.4s, v1.8h, v2.2h[4] // Fails from index size\n+\n+bfmmla\tv0.4s, v1.8h, v2.8s  // Fails from size types\n+bfmmla\tv0.4s, v1.4h, v2.8h  // Fails from size types\n+\n+bfmlalb\tv0.4s, v0.4h, v0.8h\n+bfmlalb\tv32.4s, v0.8h, v0.8h\n+bfmlalb\tv0.4s, v32.8h, v0.8h\n+bfmlalb\tv0.4s, v0.8h, v32.8h\n+bfmlalt\tv0.4s, v0.8h, v0.4h\n+bfmlalt\tv32.4s, v0.8h, v0.8h\n+bfmlalt\tv0.4s, v32.8h, v0.8h\n+bfmlalt\tv0.4s, v0.8h, v32.8h\n+\n+bfmlalb\tv0.4s, v0.8h, v0.h[8]\n+bfmlalb\tv32.4s, v0.8h, v0.h[0]\n+bfmlalb\tv0.4s, v32.8h, v0.h[0]\n+bfmlalb\tv0.4s, v0.8h, v16.h[0]\n+bfmlalb\tv0.4s, v0.4h, v0.h[0]\n+bfmlalb\tv0.4s, v0.8h, v0.s[0]\n+bfmlalt\tv0.4s, v0.8h, v0.s[0]\n+bfmlalt\tv0.4s, v0.4h, v0.h[0]\n+bfmlalt\tv0.4s, v0.8h, v0.h[8]\n+bfmlalt\tv32.4s, v0.8h, v0.h[0]\n+bfmlalt\tv0.4s, v32.8h, v0.h[0]\n+bfmlalt\tv0.4s, v0.8h, v16.h[0]\n+\n+bfcvt\th0, h1 // Fails from size types"
    },
    {
      "sha": "a7971586f74f5a07374f811fcfb50189f7842515",
      "filename": "gas/testsuite/gas/aarch64/sve-bfloat-movprfx.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.d?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,27 @@\n+#as: -march=armv8.6-a+bf16+sve\n+#objdump: -dr\n+\n+.* file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0000000000000000 <\\.text>:\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64638040 \tbfdot\tz0\\.s, z2\\.h, z3\\.h\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64634040 \tbfdot\tz0\\.s, z2\\.h, z3\\.h\\[0\\]\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t6463e440 \tbfmmla\tz0\\.s, z2\\.h, z3\\.h\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64e38040 \tbfmlalb\tz0\\.s, z2\\.h, z3\\.h\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64e38440 \tbfmlalt\tz0\\.s, z2\\.h, z3\\.h\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64e34040 \tbfmlalb\tz0\\.s, z2\\.h, z3\\.h\\[0\\]\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t64e34440 \tbfmlalt\tz0\\.s, z2\\.h, z3\\.h\\[0\\]\n+ *[0-9a-f]+:\t0420bc20 \tmovprfx\tz0, z1\n+ *[0-9a-f]+:\t658aa040 \tbfcvt\tz0\\.h, p0/m, z2\\.s\n+ *[0-9a-f]+:\t04512020 \tmovprfx\tz0\\.h, p0/m, z1\\.h\n+ *[0-9a-f]+:\t658aa040 \tbfcvt\tz0\\.h, p0/m, z2\\.s"
    },
    {
      "sha": "c322532a80757dd032cf728ef4606af2ab2faaaa",
      "filename": "gas/testsuite/gas/aarch64/sve-bfloat-movprfx.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sve-bfloat-movprfx.s?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -0,0 +1,31 @@\n+.text\n+.arch armv8.2-a+bf16+sve\n+\n+movprfx z0, z1\n+bfdot\tz0.s,  z2.h,  z3.h\n+\n+movprfx z0, z1\n+bfdot\tz0.s,  z2.h,  z3.h[0]\n+\n+movprfx z0, z1\n+bfmmla z0.s,  z2.h,  z3.h\n+\n+movprfx z0, z1\n+bfmlalb\tz0.s,  z2.h,  z3.h\n+\n+movprfx z0, z1\n+bfmlalt\tz0.s,  z2.h,  z3.h\n+\n+movprfx z0, z1\n+bfmlalb\tz0.s,  z2.h,  z3.h[0]\n+\n+movprfx z0, z1\n+bfmlalt\tz0.s,  z2.h,  z3.h[0]\n+\n+# Unpredicated movprfx + bfcvt\n+movprfx z0, z1\n+bfcvt z0.h, p0/m, z2.s\n+\n+# Predicated movprfx + bfcvt\n+movprfx z0.h, p0/m, z1.h\n+bfcvt z0.h, p0/m, z2.s"
    },
    {
      "sha": "d7c891d9ce15ccfd4dfa5e623b606fef60da650c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -1,3 +1,14 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/aarch64.h (AARCH64_FEATURE_BFLOAT16): New feature macros.\n+\t(AARCH64_ARCH_V8_6): Include BFloat16 feature macros.\n+\t(enum aarch64_opnd_qualifier): Introduce new operand qualifier\n+\tAARCH64_OPND_QLF_S_2H.\n+\t(enum aarch64_insn_class): Introduce new class \"bfloat16\".\n+\t(BFLOAT16_SVE_INSNC): New feature set for bfloat16\n+\tinstructions to support the movprfx constraint.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "4cda1e079e03a70a808a6c03e36dcfe221751919",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -64,6 +64,7 @@ typedef uint32_t aarch64_insn;\n #define AARCH64_FEATURE_F16_FML\t0x1000000000ULL\t/* v8.2 FP16FML ins.  */\n #define AARCH64_FEATURE_V8_5\t0x2000000000ULL\t/* ARMv8.5 processors.  */\n #define AARCH64_FEATURE_V8_6\t0x00000002\t/* ARMv8.6 processors.  */\n+#define AARCH64_FEATURE_BFLOAT16\t0x00000004\t/* Bfloat16 insns.  */\n \n /* Flag Manipulation insns.  */\n #define AARCH64_FEATURE_FLAGMANIP\t0x4000000000ULL\n@@ -131,7 +132,8 @@ typedef uint32_t aarch64_insn;\n \t\t\t\t\t\t | AARCH64_FEATURE_ID_PFR2 \\\n \t\t\t\t\t\t | AARCH64_FEATURE_SSBS)\n #define AARCH64_ARCH_V8_6\tAARCH64_FEATURE (AARCH64_ARCH_V8_5,\t\\\n-\t\t\t\t\t\t AARCH64_FEATURE_V8_6)\n+\t\t\t\t\t\t AARCH64_FEATURE_V8_6   \\\n+\t\t\t\t\t\t | AARCH64_FEATURE_BFLOAT16)\n \n #define AARCH64_ARCH_NONE\tAARCH64_FEATURE (0, 0)\n #define AARCH64_ANY\t\tAARCH64_FEATURE (-1, 0)\t/* Any basic core.  */\n@@ -462,11 +464,13 @@ enum aarch64_opnd_qualifier\n   AARCH64_OPND_QLF_S_S,\n   AARCH64_OPND_QLF_S_D,\n   AARCH64_OPND_QLF_S_Q,\n-  /* This type qualifier has a special meaning in that it means that 4 x 1 byte\n-     are selected by the instruction.  Other than that it has no difference\n-     with AARCH64_OPND_QLF_S_B in encoding.  It is here purely for syntactical\n-     reasons and is an exception from normal AArch64 disassembly scheme.  */\n+  /* These type qualifiers have a special meaning in that they mean 4 x 1 byte\n+     or 2 x 2 byte are selected by the instruction.  Other than that they have\n+     no difference with AARCH64_OPND_QLF_S_B in encoding.  They are here purely\n+     for syntactical reasons and is an exception from normal AArch64\n+     disassembly scheme.  */\n   AARCH64_OPND_QLF_S_4B,\n+  AARCH64_OPND_QLF_S_2H,\n \n   /* Qualifying an operand which is a SIMD vector register or a SIMD vector\n      register list; indicating register shape.\n@@ -609,6 +613,7 @@ enum aarch64_insn_class\n   cryptosm3,\n   cryptosm4,\n   dotproduct,\n+  bfloat16,\n };\n \n /* Opcode enumerators.  */"
    },
    {
      "sha": "ef6ecf5e0bb82f9c5d0492bd27d66736d8e783e9",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -1,3 +1,25 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* aarch64-asm.c (aarch64_ins_reglane): Use AARCH64_OPND_QLF_S_2H\n+\tin reglane special case.\n+\t* aarch64-dis-2.c (aarch64_opcode_lookup_1,\n+\taarch64_find_next_opcode): Account for new instructions.\n+\t* aarch64-dis.c (aarch64_ext_reglane): Use AARCH64_OPND_QLF_S_2H\n+\tin reglane special case.\n+\t* aarch64-opc.c (struct operand_qualifier_data): Add data for\n+\tnew AARCH64_OPND_QLF_S_2H qualifier.\n+\t* aarch64-tbl.h (QL_BFDOT QL_BFDOT64, QL_BFDOT64I, QL_BFMMLA2,\n+\tQL_BFCVT64, QL_BFCVTN64, QL_BFCVTN2_64): New qualifiers.\n+\t(aarch64_feature_bfloat16, aarch64_feature_bfloat16_sve): New feature\n+\tsets.\n+\t(BFLOAT_SVE, BFLOAT): New feature set macros.\n+\t(BFLOAT_SVE_INSN, BFLOAT_INSN): New macros to define BFloat16\n+\tinstructions.\n+\t(aarch64_opcode_table): Define new instructions bfdot,\n+\tbfmmla, bfcvt, bfcvtnt, bfdot, bfdot, bfcvtn, bfmlal[b/t]\n+\tbfcvtn2, bfcvt.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "3dcd84a5cb72af95f93223df129f7d9a5370c626",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -130,6 +130,7 @@ aarch64_ins_reglane (const aarch64_operand *self, const aarch64_opnd_info *info,\n       switch (info->qualifier)\n \t{\n \tcase AARCH64_OPND_QLF_S_4B:\n+\tcase AARCH64_OPND_QLF_S_2H:\n \t  /* L:H */\n \t  assert (reglane_index < 4);\n \t  insert_fields (code, reglane_index, 0, 2, FLD_L, FLD_H);"
    },
    {
      "sha": "cd1f6b91a931fc86f06786cad11c3a683d5ed0dd",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 268,
      "deletions": 68,
      "changes": 336,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -8660,11 +8660,22 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                     {\n                                                       if (((word >> 16) & 0x1) == 0)\n                                                         {\n-                                                          /* 33222222222211111111110000000000\n-                                                             10987654321098765432109876543210\n-                                                             011001x0100xxxx0101xxxxxxxxxxxxx\n-                                                             fcvtnt.  */\n-                                                          return 2068;\n+                                                          if (((word >> 17) & 0x1) == 0)\n+                                                            {\n+                                                              /* 33222222222211111111110000000000\n+                                                                 10987654321098765432109876543210\n+                                                                 011001x0100xxx00101xxxxxxxxxxxxx\n+                                                                 fcvtnt.  */\n+                                                              return 2068;\n+                                                            }\n+                                                          else\n+                                                            {\n+                                                              /* 33222222222211111111110000000000\n+                                                                 10987654321098765432109876543210\n+                                                                 011001x0100xxx10101xxxxxxxxxxxxx\n+                                                                 bfcvtnt.  */\n+                                                              return 2394;\n+                                                            }\n                                                         }\n                                                       else\n                                                         {\n@@ -9118,19 +9129,52 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                             {\n                                               if (((word >> 23) & 0x1) == 0)\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x11001x0011xxxxx010xxxxxxxxxxxxx\n-                                                     st1b.  */\n-                                                  return 1868;\n+                                                  if (((word >> 31) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         011001x0011xxxxx010xxxxxxxxxxxxx\n+                                                         bfdot.  */\n+                                                      return 2391;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         111001x0011xxxxx010xxxxxxxxxxxxx\n+                                                         st1b.  */\n+                                                      return 1868;\n+                                                    }\n                                                 }\n                                               else\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x11001x0111xxxxx010xxxxxxxxxxxxx\n-                                                     st1h.  */\n-                                                  return 1889;\n+                                                  if (((word >> 31) & 0x1) == 0)\n+                                                    {\n+                                                      if (((word >> 10) & 0x1) == 0)\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             011001x0111xxxxx010xx0xxxxxxxxxx\n+                                                             bfmlalb.  */\n+                                                          return 2398;\n+                                                        }\n+                                                      else\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             011001x0111xxxxx010xx1xxxxxxxxxx\n+                                                             bfmlalt.  */\n+                                                          return 2397;\n+                                                        }\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         111001x0111xxxxx010xxxxxxxxxxxxx\n+                                                         st1h.  */\n+                                                      return 1889;\n+                                                    }\n                                                 }\n                                             }\n                                         }\n@@ -9169,11 +9213,44 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                         }\n                                       else\n                                         {\n-                                          /* 33222222222211111111110000000000\n-                                             10987654321098765432109876543210\n-                                             x11001x0x11xxxxx1x0xxxxxxxxxxxxx\n-                                             st1h.  */\n-                                          return 1890;\n+                                          if (((word >> 23) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x11001x0011xxxxx1x0xxxxxxxxxxxxx\n+                                                 bfdot.  */\n+                                              return 2390;\n+                                            }\n+                                          else\n+                                            {\n+                                              if (((word >> 31) & 0x1) == 0)\n+                                                {\n+                                                  if (((word >> 10) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         011001x0111xxxxx1x0xx0xxxxxxxxxx\n+                                                         bfmlalb.  */\n+                                                      return 2396;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         011001x0111xxxxx1x0xx1xxxxxxxxxx\n+                                                         bfmlalt.  */\n+                                                      return 2395;\n+                                                    }\n+                                                }\n+                                              else\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     111001x0111xxxxx1x0xxxxxxxxxxxxx\n+                                                     st1h.  */\n+                                                  return 1890;\n+                                                }\n+                                            }\n                                         }\n                                     }\n                                 }\n@@ -9529,9 +9606,9 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                         }\n                                       else\n                                         {\n-                                          if (((word >> 20) & 0x1) == 0)\n+                                          if (((word >> 22) & 0x1) == 0)\n                                             {\n-                                              if (((word >> 22) & 0x1) == 0)\n+                                              if (((word >> 20) & 0x1) == 0)\n                                                 {\n                                                   if (((word >> 23) & 0x1) == 0)\n                                                     {\n@@ -9556,50 +9633,61 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n-                                                         x11001x00110xxxx111xxxxxxxxxxxxx\n-                                                         st1b.  */\n-                                                      return 1874;\n+                                                         x11001x00011xxxx111xxxxxxxxxxxxx\n+                                                         st2b.  */\n+                                                      return 1909;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n-                                                         x11001x01110xxxx111xxxxxxxxxxxxx\n-                                                         st1h.  */\n-                                                      return 1895;\n+                                                         x11001x01011xxxx111xxxxxxxxxxxxx\n+                                                         st2h.  */\n+                                                      return 1913;\n                                                     }\n                                                 }\n                                             }\n                                           else\n                                             {\n-                                              if (((word >> 22) & 0x1) == 0)\n+                                              if (((word >> 23) & 0x1) == 0)\n                                                 {\n-                                                  if (((word >> 23) & 0x1) == 0)\n+                                                  if (((word >> 31) & 0x1) == 0)\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n-                                                         x11001x00011xxxx111xxxxxxxxxxxxx\n-                                                         st2b.  */\n-                                                      return 1909;\n+                                                         011001x0011xxxxx111xxxxxxxxxxxxx\n+                                                         bfmmla.  */\n+                                                      return 2392;\n                                                     }\n                                                   else\n                                                     {\n-                                                      /* 33222222222211111111110000000000\n-                                                         10987654321098765432109876543210\n-                                                         x11001x01011xxxx111xxxxxxxxxxxxx\n-                                                         st2h.  */\n-                                                      return 1913;\n+                                                      if (((word >> 20) & 0x1) == 0)\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             111001x00110xxxx111xxxxxxxxxxxxx\n+                                                             st1b.  */\n+                                                          return 1874;\n+                                                        }\n+                                                      else\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             111001x00111xxxx111xxxxxxxxxxxxx\n+                                                             st4b.  */\n+                                                          return 1925;\n+                                                        }\n                                                     }\n                                                 }\n                                               else\n                                                 {\n-                                                  if (((word >> 23) & 0x1) == 0)\n+                                                  if (((word >> 20) & 0x1) == 0)\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n-                                                         x11001x00111xxxx111xxxxxxxxxxxxx\n-                                                         st4b.  */\n-                                                      return 1925;\n+                                                         x11001x01110xxxx111xxxxxxxxxxxxx\n+                                                         st1h.  */\n+                                                      return 1895;\n                                                     }\n                                                   else\n                                                     {\n@@ -13993,11 +14081,22 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                             {\n                                                               if (((word >> 22) & 0x1) == 0)\n                                                                 {\n-                                                                  /* 33222222222211111111110000000000\n-                                                                     10987654321098765432109876543210\n-                                                                     011001x1x0001x10101xxxxxxxxxxxxx\n-                                                                     fcvtx.  */\n-                                                                  return 2070;\n+                                                                  if (((word >> 23) & 0x1) == 0)\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         011001x100001x10101xxxxxxxxxxxxx\n+                                                                         fcvtx.  */\n+                                                                      return 2070;\n+                                                                    }\n+                                                                  else\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         011001x110001x10101xxxxxxxxxxxxx\n+                                                                         bfcvt.  */\n+                                                                      return 2393;\n+                                                                    }\n                                                                 }\n                                                               else\n                                                                 {\n@@ -16503,11 +16602,55 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                         }\n                                       else\n                                         {\n-                                          /* 33222222222211111111110000000000\n-                                             10987654321098765432109876543210\n-                                             xx101110xx0xxxxx1x1xx1xxxxxxxxxx\n-                                             fcadd.  */\n-                                          return 373;\n+                                          if (((word >> 11) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 xx101110xx0xxxxx1x1x01xxxxxxxxxx\n+                                                 fcadd.  */\n+                                              return 373;\n+                                            }\n+                                          else\n+                                            {\n+                                              if (((word >> 12) & 0x1) == 0)\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     xx101110xx0xxxxx1x1011xxxxxxxxxx\n+                                                     bfmmla.  */\n+                                                  return 2401;\n+                                                }\n+                                              else\n+                                                {\n+                                                  if (((word >> 23) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         xx1011100x0xxxxx1x1111xxxxxxxxxx\n+                                                         bfdot.  */\n+                                                      return 2399;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      if (((word >> 30) & 0x1) == 0)\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             x01011101x0xxxxx1x1111xxxxxxxxxx\n+                                                             bfmlalb.  */\n+                                                          return 2406;\n+                                                        }\n+                                                      else\n+                                                        {\n+                                                          /* 33222222222211111111110000000000\n+                                                             10987654321098765432109876543210\n+                                                             x11011101x0xxxxx1x1111xxxxxxxxxx\n+                                                             bfmlalt.  */\n+                                                          return 2405;\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n                                         }\n                                     }\n                                 }\n@@ -17060,21 +17203,43 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                             }\n                                                           else\n                                                             {\n-                                                              if (((word >> 30) & 0x1) == 0)\n+                                                              if (((word >> 23) & 0x1) == 0)\n                                                                 {\n-                                                                  /* 33222222222211111111110000000000\n-                                                                     10987654321098765432109876543210\n-                                                                     00001110xx1xxxx1011010xxxxxxxxxx\n-                                                                     fcvtn.  */\n-                                                                  return 178;\n+                                                                  if (((word >> 30) & 0x1) == 0)\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         000011100x1xxxx1011010xxxxxxxxxx\n+                                                                         fcvtn.  */\n+                                                                      return 178;\n+                                                                    }\n+                                                                  else\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         010011100x1xxxx1011010xxxxxxxxxx\n+                                                                         fcvtn2.  */\n+                                                                      return 179;\n+                                                                    }\n                                                                 }\n                                                               else\n                                                                 {\n-                                                                  /* 33222222222211111111110000000000\n-                                                                     10987654321098765432109876543210\n-                                                                     01001110xx1xxxx1011010xxxxxxxxxx\n-                                                                     fcvtn2.  */\n-                                                                  return 179;\n+                                                                  if (((word >> 30) & 0x1) == 0)\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         000011101x1xxxx1011010xxxxxxxxxx\n+                                                                         bfcvtn.  */\n+                                                                      return 2402;\n+                                                                    }\n+                                                                  else\n+                                                                    {\n+                                                                      /* 33222222222211111111110000000000\n+                                                                         10987654321098765432109876543210\n+                                                                         010011101x1xxxx1011010xxxxxxxxxx\n+                                                                         bfcvtn2.  */\n+                                                                      return 2403;\n+                                                                    }\n                                                                 }\n                                                             }\n                                                         }\n@@ -22165,11 +22330,44 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                         }\n                                       else\n                                         {\n-                                          /* 33222222222211111111110000000000\n-                                             10987654321098765432109876543210\n-                                             xxx01111xxxxxxxx1111x0xxxxxxxxxx\n-                                             sqrdmlsh.  */\n-                                          return 130;\n+                                          if (((word >> 29) & 0x1) == 0)\n+                                            {\n+                                              if (((word >> 23) & 0x1) == 0)\n+                                                {\n+                                                  /* 33222222222211111111110000000000\n+                                                     10987654321098765432109876543210\n+                                                     xx0011110xxxxxxx1111x0xxxxxxxxxx\n+                                                     bfdot.  */\n+                                                  return 2400;\n+                                                }\n+                                              else\n+                                                {\n+                                                  if (((word >> 30) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x00011111xxxxxxx1111x0xxxxxxxxxx\n+                                                         bfmlalb.  */\n+                                                      return 2408;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x10011111xxxxxxx1111x0xxxxxxxxxx\n+                                                         bfmlalt.  */\n+                                                      return 2407;\n+                                                    }\n+                                                }\n+                                            }\n+                                          else\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 xx101111xxxxxxxx1111x0xxxxxxxxxx\n+                                                 sqrdmlsh.  */\n+                                              return 130;\n+                                            }\n                                         }\n                                     }\n                                 }\n@@ -22787,6 +22985,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 823: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 831: value = 832; break;\t/* frintz --> frintz.  */\n     case 832: return NULL;\t\t/* frintz --> NULL.  */\n+    case 824: value = 2404; break;\t/* fcvt --> bfcvt.  */\n+    case 2404: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 833: value = 834; break;\t/* frinta --> frinta.  */\n     case 834: return NULL;\t\t/* frinta --> NULL.  */\n     case 835: value = 836; break;\t/* frintx --> frintx.  */"
    },
    {
      "sha": "930056981385987d0428eed2b3022cf65bdde6b7",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -348,6 +348,7 @@ aarch64_ext_reglane (const aarch64_operand *self, aarch64_opnd_info *info,\n       switch (info->qualifier)\n \t{\n \tcase AARCH64_OPND_QLF_S_4B:\n+\tcase AARCH64_OPND_QLF_S_2H:\n \t  /* L:H */\n \t  info->reglane.index = extract_fields (code, 0, 2, FLD_H, FLD_L);\n \t  info->reglane.regno &= 0x1f;"
    },
    {
      "sha": "456bac0232602b283da13620c59de29dc5c476e6",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -712,6 +712,7 @@ struct operand_qualifier_data aarch64_opnd_qualifiers[] =\n   {8, 1, 0x3, \"d\", OQK_OPD_VARIANT},\n   {16, 1, 0x4, \"q\", OQK_OPD_VARIANT},\n   {4, 1, 0x0, \"4b\", OQK_OPD_VARIANT},\n+  {4, 1, 0x0, \"2h\", OQK_OPD_VARIANT},\n \n   {1, 4, 0x0, \"4b\", OQK_OPD_VARIANT},\n   {1, 8, 0x0, \"8b\", OQK_OPD_VARIANT},"
    },
    {
      "sha": "3425336d2fcf4c53f17ec766edcfc6e232d63429",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df6780137dc9d832db8c5525ecc760acdbcde5c9/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "patch": "@@ -2257,6 +2257,50 @@\n {\t\t\\\n   QLF2(X, NIL),\t\\\n }\n+\n+/* e.g. BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb> */\n+#define QL_BFDOT64    \\\n+{\t\t      \\\n+  QLF3(V_2S, V_4H, V_4H),\\\n+  QLF3(V_4S, V_8H, V_8H),\\\n+}\n+\n+/* e.g. BFDOT <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.2H[<index>] */\n+#define QL_BFDOT64I    \\\n+{\t\t      \\\n+  QLF3(V_2S, V_4H, S_2H),\\\n+  QLF3(V_4S, V_8H, S_2H),\\\n+}\n+\n+/* e.g. BFMMLA <Vd>.4s, <Vn>.8h, <Vm>.8h */\n+#define QL_BFMMLA    \\\n+{\t\t      \\\n+  QLF3(V_4S, V_8H, V_8H),\\\n+}\n+\n+/* e.g. BFCVT <Hd>, <Sn> */\n+#define QL_BFCVT64      \\\n+{\t\t      \\\n+  QLF2(S_H,S_S),  \\\n+}\n+\n+/* e.g. BFCVT <Hd>, <Sn> */\n+#define QL_BFCVTN64      \\\n+{\t\t      \\\n+  QLF2(V_4H,V_4S),  \\\n+}\n+\n+/* e.g. BFCVT <Hd>, <Sn> */\n+#define QL_BFCVTN2_64      \\\n+{\t\t      \\\n+  QLF2(V_8H,V_4S),  \\\n+}\n+\n+/* e.g. BFMLAL2 <Vd>.4s, <Vn>.8h, <Vm>.H[<index>] */\n+#define QL_V3BFML4S      \\\n+{\t\t      \\\n+  QLF3(V_4S, V_8H, S_H),\t\\\n+}\n \f\n /* Opcode table.  */\n \n@@ -2331,6 +2375,10 @@ static const aarch64_feature_set aarch64_feature_bti =\n   AARCH64_FEATURE (AARCH64_FEATURE_BTI, 0);\n static const aarch64_feature_set aarch64_feature_memtag =\n   AARCH64_FEATURE (AARCH64_FEATURE_V8_5 | AARCH64_FEATURE_MEMTAG, 0);\n+static const aarch64_feature_set aarch64_feature_bfloat16 =\n+  AARCH64_FEATURE (AARCH64_FEATURE_BFLOAT16, 0);\n+static const aarch64_feature_set aarch64_feature_bfloat16_sve =\n+  AARCH64_FEATURE (AARCH64_FEATURE_BFLOAT16 | AARCH64_FEATURE_SVE, 0);\n static const aarch64_feature_set aarch64_feature_tme =\n   AARCH64_FEATURE (AARCH64_FEATURE_TME, 0);\n static const aarch64_feature_set aarch64_feature_sve2 =\n@@ -2387,6 +2435,8 @@ static const aarch64_feature_set aarch64_feature_v8_6 =\n #define SVE2_SM4\t\t&aarch64_feature_sve2sm4\n #define SVE2_BITPERM\t&aarch64_feature_sve2bitperm\n #define ARMV8_6\t\t&aarch64_feature_v8_6\n+#define BFLOAT16_SVE\t&aarch64_feature_bfloat16_sve\n+#define BFLOAT16\t&aarch64_feature_bfloat16\n \n #define CORE_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, OP, CORE, OPS, QUALS, FLAGS, 0, 0, NULL }\n@@ -2477,6 +2527,13 @@ static const aarch64_feature_set aarch64_feature_v8_6 =\n #define SVE2BITPERM_INSN(NAME,OPCODE,MASK,CLASS,OP,OPS,QUALS,FLAGS,TIED) \\\n   { NAME, OPCODE, MASK, CLASS, OP, SVE2_BITPERM, OPS, QUALS, \\\n     FLAGS | F_STRICT, 0, TIED, NULL }\n+#define BFLOAT16_SVE_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, BFLOAT16_SVE, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define BFLOAT16_SVE_INSNC(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS, CONSTRAINTS, TIED) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, BFLOAT16_SVE, OPS, QUALS, FLAGS | F_STRICT, \\\n+    CONSTRAINTS, TIED, NULL }\n+#define BFLOAT16_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, BFLOAT16, OPS, QUALS, FLAGS, 0, 0, NULL }\n \n struct aarch64_opcode aarch64_opcode_table[] =\n {\n@@ -4974,6 +5031,29 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   V8_4_INSN (\"ldapursw\", 0x99800000, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_OFFSET), QL_STLX, 0),\n   V8_4_INSN (\"stlur\",    0xd9000000, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_OFFSET), QL_STLX, 0),\n   V8_4_INSN (\"ldapur\",   0xd9400000, 0xffe00c00, ldst_unscaled, OP2 (Rt, ADDR_OFFSET), QL_STLX, 0),\n+\n+  /* BFloat instructions.  */\n+  BFLOAT16_SVE_INSNC (\"bfdot\",  0x64608000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfdot\",  0x64604000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_INDEX), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfmmla\",  0x6460e400, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfcvt\",  0x658aa000, 0xffffe000, sve_misc, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfcvtnt\",  0x648aa000, 0xffffe000, sve_misc, OP3 (SVE_Zd, SVE_Pg3, SVE_Zn), OP_SVE_HMS, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfmlalt\",  0x64e08400, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfmlalb\",  0x64e08000, 0xffe0fc00, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm_16), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfmlalt\",  0x64e04400, 0xffe0f400, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_11_INDEX), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  BFLOAT16_SVE_INSNC (\"bfmlalb\",  0x64e04000, 0xffe0f400, sve_misc, OP3 (SVE_Zd, SVE_Zn, SVE_Zm3_11_INDEX), OP_SVE_SHH, 0, C_SCAN_MOVPRFX, 0),\n+  /* BFloat Advanced SIMD instructions.  */\n+  BFLOAT16_INSN (\"bfdot\", 0x2e40fc00, 0xbfe0fc00, bfloat16, OP3 (Vd, Vn, Vm), QL_BFDOT64, F_SIZEQ),\n+  /* Using dotproduct as iclass to treat instruction similar to udot.  */\n+  BFLOAT16_INSN (\"bfdot\", 0x0f40f000, 0xbfc0f400, dotproduct, OP3 (Vd, Vn, Em), QL_BFDOT64I, F_SIZEQ),\n+  BFLOAT16_INSN (\"bfmmla\", 0x6e40ec00, 0xffe0fc00, bfloat16, OP3 (Vd, Vn, Vm), QL_BFMMLA, F_SIZEQ),\n+  BFLOAT16_INSN (\"bfcvtn\",  0x0ea16800, 0xfffffc00, bfloat16, OP2 (Vd, Vn), QL_BFCVTN64, 0),\n+  BFLOAT16_INSN (\"bfcvtn2\", 0x4ea16800, 0xfffffc00, bfloat16, OP2 (Vd, Vn), QL_BFCVTN2_64, 0),\n+  BFLOAT16_INSN (\"bfcvt\",  0x1e634000, 0xfffffc00, bfloat16, OP2 (Fd, Fn), QL_BFCVT64, 0),\n+  BFLOAT16_INSN (\"bfmlalt\", 0x6ec0fc00, 0xffe0fc00, bfloat16, OP3 (Vd, Vn, Vm), QL_BFMMLA, 0),\n+  BFLOAT16_INSN (\"bfmlalb\", 0x2ec0fc00, 0xffe0fc00, bfloat16, OP3 (Vd, Vn, Vm), QL_BFMMLA, 0),\n+  BFLOAT16_INSN (\"bfmlalt\", 0x4fc0f000, 0xffc0f400, bfloat16, OP3 (Vd, Vn, Em16), QL_V3BFML4S, 0),\n+  BFLOAT16_INSN (\"bfmlalb\", 0x0fc0f000, 0xffc0f400, bfloat16, OP3 (Vd, Vn, Em16), QL_V3BFML4S, 0),\n   {0, 0, 0, 0, 0, 0, {}, {}, 0, 0, 0, NULL},\n };\n "
    }
  ]
}