{
  "sha": "97da0e2677c4a38df2406576428ec27d1da26e7c",
  "node_id": "C_kwDOANOeidoAKDk3ZGEwZTI2NzdjNGEzOGRmMjQwNjU3NjQyOGVjMjdkMWRhMjZlN2M",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-12T13:12:23Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-18T00:48:45Z"
    },
    "message": "tweak __ehdr_start visibility and flags for check_relocs\n\nbfd/\n\t* elf-bfd.h (UNDEFWEAK_NO_DYNAMIC_RELOC): Test linker_def.\nld/\n\t* ldelf.c (ldelf_before_allocation): Don't force __ehdr_start\n\tlocal and hidden here..\n\t* ldlang.c (lang_symbol_tweaks): ..do so here instead and set\n\tdef_regular and linker_def for check_relocs.  New function\n\textracted from lang_process.",
    "tree": {
      "sha": "3f7a0a7c2dbf856d95a0fb876ec3257f848d316d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3f7a0a7c2dbf856d95a0fb876ec3257f848d316d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/97da0e2677c4a38df2406576428ec27d1da26e7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97da0e2677c4a38df2406576428ec27d1da26e7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/97da0e2677c4a38df2406576428ec27d1da26e7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97da0e2677c4a38df2406576428ec27d1da26e7c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f95afb8894820f99682bd9379804f5d2a1e324e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f95afb8894820f99682bd9379804f5d2a1e324e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1f95afb8894820f99682bd9379804f5d2a1e324e"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 42,
    "deletions": 11
  },
  "files": [
    {
      "sha": "138ef46791b2622f5979b90e3bdc2fe5dee7998e",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97da0e2677c4a38df2406576428ec27d1da26e7c/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97da0e2677c4a38df2406576428ec27d1da26e7c/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=97da0e2677c4a38df2406576428ec27d1da26e7c",
      "patch": "@@ -291,9 +291,12 @@ weakdef (struct elf_link_hash_entry *h)\n   _bfd_elf_symbol_refs_local_p (H, INFO, 1)\n \n /* Whether an undefined weak symbol should resolve to its link-time\n-   value, even in PIC or PIE objects.  */\n+   value, even in PIC or PIE objects.  The linker_def test is to\n+   handle symbols like __ehdr_start that may be undefweak in early\n+   stages of linking but are guaranteed to be defined later.  */\n #define UNDEFWEAK_NO_DYNAMIC_RELOC(INFO, H)\t\t\\\n   ((H)->root.type == bfd_link_hash_undefweak\t\t\\\n+   && !(H)->root.linker_def\t\t\t\t\\\n    && (ELF_ST_VISIBILITY ((H)->other) != STV_DEFAULT\t\\\n        || (INFO)->dynamic_undefined_weak == 0))\n "
    },
    {
      "sha": "121c25d948fc417df93f2abb4b309e0419c1d4f7",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97da0e2677c4a38df2406576428ec27d1da26e7c/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97da0e2677c4a38df2406576428ec27d1da26e7c/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=97da0e2677c4a38df2406576428ec27d1da26e7c",
      "patch": "@@ -1607,11 +1607,6 @@ ldelf_before_allocation (char *audit, char *depaudit,\n \t\t  || h->root.type == bfd_link_hash_undefweak\n \t\t  || h->root.type == bfd_link_hash_common))\n \t    {\n-\t      const struct elf_backend_data *bed;\n-\t      bed = get_elf_backend_data (link_info.output_bfd);\n-\t      (*bed->elf_backend_hide_symbol) (&link_info, h, true);\n-\t      if (ELF_ST_VISIBILITY (h->other) != STV_INTERNAL)\n-\t\th->other = (h->other & ~ELF_ST_VISIBILITY (-1)) | STV_HIDDEN;\n \t      /* Don't leave the symbol undefined.  Undefined hidden\n \t\t symbols typically won't have dynamic relocations, but\n \t\t we most likely will need dynamic relocations for"
    },
    {
      "sha": "499a9c7182c6399d2a2dd37303e306d1f9e21600",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 38,
      "deletions": 5,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97da0e2677c4a38df2406576428ec27d1da26e7c/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97da0e2677c4a38df2406576428ec27d1da26e7c/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=97da0e2677c4a38df2406576428ec27d1da26e7c",
      "patch": "@@ -6994,6 +6994,43 @@ lang_finalize_start_stop (void)\n   foreach_start_stop (set_start_stop);\n }\n \n+static void\n+lang_symbol_tweaks (void)\n+{\n+  /* Give initial values for __start and __stop symbols, so that  ELF\n+     gc_sections will keep sections referenced by these symbols.  Must\n+     be done before lang_do_assignments.  */\n+  if (config.build_constructors)\n+    lang_init_start_stop ();\n+\n+  /* Make __ehdr_start hidden, and set def_regular even though it is\n+     likely undefined at this stage.  For lang_check_relocs.  */\n+  if (is_elf_hash_table (link_info.hash)\n+      && !bfd_link_relocatable (&link_info))\n+    {\n+      struct elf_link_hash_entry *h = (struct elf_link_hash_entry *)\n+\tbfd_link_hash_lookup (link_info.hash, \"__ehdr_start\",\n+\t\t\t      false, false, true);\n+\n+      /* Only adjust the export class if the symbol was referenced\n+\t and not defined, otherwise leave it alone.  */\n+      if (h != NULL\n+\t  && (h->root.type == bfd_link_hash_new\n+\t      || h->root.type == bfd_link_hash_undefined\n+\t      || h->root.type == bfd_link_hash_undefweak\n+\t      || h->root.type == bfd_link_hash_common))\n+\t{\n+\t  const struct elf_backend_data *bed;\n+\t  bed = get_elf_backend_data (link_info.output_bfd);\n+\t  (*bed->elf_backend_hide_symbol) (&link_info, h, true);\n+\t  if (ELF_ST_VISIBILITY (h->other) != STV_INTERNAL)\n+\t    h->other = (h->other & ~ELF_ST_VISIBILITY (-1)) | STV_HIDDEN;\n+\t  h->def_regular = 1;\n+\t  h->root.linker_def = 1;\n+\t}\n+    }\n+}\n+\n static void\n lang_end (void)\n {\n@@ -8210,11 +8247,7 @@ lang_process (void)\n      files.  */\n   ldctor_build_sets ();\n \n-  /* Give initial values for __start and __stop symbols, so that  ELF\n-     gc_sections will keep sections referenced by these symbols.  Must\n-     be done before lang_do_assignments below.  */\n-  if (config.build_constructors)\n-    lang_init_start_stop ();\n+  lang_symbol_tweaks ();\n \n   /* PR 13683: We must rerun the assignments prior to running garbage\n      collection in order to make sure that all symbol aliases are resolved.  */"
    }
  ]
}