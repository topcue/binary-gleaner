{
  "sha": "a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTI5ZDUxMTI4MTRlN2E2NzQ0ZjAzYmRkZmU2NzU2ZTJhYTVlN2E1MA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-12T13:09:33Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-12T13:09:33Z"
    },
    "message": "gdb/testsuite: Prevent globals leaking between test scripts\n\nMany of the test scripts create variables in the global namespace,\nthese variables will then be present for the following test scripts.\nIn most cases this is harmless, but in some cases this can cause\nproblems.\n\nFor example, if a variable is created as an array in one script, but\nthen assigned as a scalar in a different script, this will cause a TCL\nerror.\n\nThe solution proposed in this patch is to have the GDB test harness\nrecord a list of all known global variables at the point just before\nwe source the test script.  Then, after the test script has run, we\nagain iterate over all global variables.  Any variable that was not in\nthe original list is deleted, unless it was marked as a persistent global\nvariable using gdb_persistent_global.\n\nThe assumption here is that no test script should need to create a\nglobal variable that will outlive the lifetime of the test script\nitself.  With this patch in place all tests currently seem to pass, so\nthe assumption seems to hold.\n\ngdb/testsuite/ChangeLog:\n\n2020-06-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (gdb_known_globals, gdb_persistent_globals): New global.\n\t(gdb_persistent_global, gdb_persistent_global_no_decl): New proc.\n\t(gdb_setup_known_globals): New proc.\n\t(gdb_cleanup_globals): New proc.\n\t* lib/gdb.exp (load_lib): New override proc.\n\t(gdb_stdin_log_init): Set var in_file as persistent global.\n\t* lib/pascal.exp (gdb_stdin_log_init): Set vars\n\tpascal_compiler_is_gpc, pascal_compiler_is_fpc, gpc_compiler and\n\tfpc_compiler as persistent global.",
    "tree": {
      "sha": "9475dd9d41c62c3fa2c7c021b8c548fdcc240978",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9475dd9d41c62c3fa2c7c021b8c548fdcc240978"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c74a764f2cf5ea5e6997e35ba0f755fe2c09889",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c74a764f2cf5ea5e6997e35ba0f755fe2c09889",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c74a764f2cf5ea5e6997e35ba0f755fe2c09889"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 106,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d8ec5f001a81cb67cfe70148d31575c5db783f86",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
      "patch": "@@ -1,3 +1,16 @@\n+2020-06-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (gdb_known_globals, gdb_persistent_globals): New global.\n+\t(gdb_persistent_global, gdb_persistent_global_no_decl): New proc.\n+\t(gdb_setup_known_globals): New proc.\n+\t(gdb_cleanup_globals): New proc.\n+\t* lib/gdb.exp (load_lib): New override proc.\n+\t(gdb_stdin_log_init): Set var in_file as persistent global.\n+\t* lib/pascal.exp (gdb_stdin_log_init): Set vars\n+\tpascal_compiler_is_gpc, pascal_compiler_is_fpc, gpc_compiler and\n+\tfpc_compiler as persistent global.\n+\n 2020-06-12  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/tuiterm.exp (spawn): Rename to ..."
    },
    {
      "sha": "f502eb157d84fd674dcced92c3e266c12ad3820e",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 89,
      "deletions": 1,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
      "patch": "@@ -28,6 +28,57 @@ if {$tool == \"\"} {\n # List of procs to run in gdb_finish.\n set gdb_finish_hooks [list]\n \n+# Variable in which we keep track of globals that are allowed to be live\n+# across test-cases.\n+array set gdb_persistent_globals {}\n+\n+# Mark variable names in ARG as a persistent global, and declare them as\n+# global in the calling context.  Can be used to rewrite \"global var_a var_b\"\n+# into \"gdb_persistent_global var_a var_b\".\n+proc gdb_persistent_global { args } {\n+    global gdb_persistent_globals\n+    foreach varname $args {\n+\tuplevel 1 global $varname\n+\tset gdb_persistent_globals($varname) 1\n+    }\n+}\n+\n+# Mark variable names in ARG as a persistent global.\n+proc gdb_persistent_global_no_decl { args } {\n+    global gdb_persistent_globals\n+    foreach varname $args {\n+\tset gdb_persistent_globals($varname) 1\n+    }\n+}\n+\n+# Override proc load_lib.\n+rename load_lib saved_load_lib\n+# Run the runtest version of load_lib, and mark all variables that were\n+# created by this call as persistent.\n+proc load_lib { file } {\n+    array set known_global {}\n+    foreach varname [info globals] {\n+       set known_globals($varname) 1\n+    }\n+\n+    set code [catch \"saved_load_lib $file\" result]\n+\n+    foreach varname [info globals] {\n+       if { ![info exists known_globals($varname)] } {\n+           gdb_persistent_global_no_decl $varname\n+       }\n+    }\n+\n+    if {$code == 1} {\n+\tglobal errorInfo errorCode\n+\treturn -code error -errorinfo $errorInfo -errorcode $errorCode $result\n+    } elseif {$code > 1} {\n+\treturn -code $code $result\n+    }\n+\n+    return $result\n+}\n+\n load_lib libgloss.exp\n load_lib cache.exp\n load_lib gdb-utils.exp\n@@ -5094,6 +5145,38 @@ set banned_procedures { strace }\n # if the banned variables and procedures are already traced.\n set banned_traced 0\n \n+# Global array that holds the name of all global variables at the time\n+# a test script is started.  After the test script has completed any\n+# global not in this list is deleted.\n+array set gdb_known_globals {}\n+\n+# Setup the GDB_KNOWN_GLOBALS array with the names of all current\n+# global variables.\n+proc gdb_setup_known_globals {} {\n+    global gdb_known_globals\n+\n+    array set gdb_known_globals {}\n+    foreach varname [info globals] {\n+\tset gdb_known_globals($varname) 1\n+    }\n+}\n+\n+# Cleanup the global namespace.  Any global not in the\n+# GDB_KNOWN_GLOBALS array is unset, this ensures we don't \"leak\"\n+# globals from one test script to another.\n+proc gdb_cleanup_globals {} {\n+    global gdb_known_globals gdb_persistent_globals\n+\n+    foreach varname [info globals] {\n+\tif {![info exists gdb_known_globals($varname)]} {\n+\t    if { [info exists gdb_persistent_globals($varname)] } {\n+\t\tcontinue\n+\t    }\n+\t    uplevel #0 unset $varname\n+\t}\n+    }\n+}\n+\n proc gdb_init { test_file_name } {\n     # Reset the timeout value to the default.  This way, any testcase\n     # that changes the timeout value without resetting it cannot affect\n@@ -5198,6 +5281,8 @@ proc gdb_init { test_file_name } {\n \n     set res [default_gdb_init $test_file_name]\n \n+    gdb_setup_known_globals\n+\n     # Dejagnu overrides proc unknown.  The dejagnu version may trigger in a\n     # test-case but abort the entire test run.  To fix this, we install a\n     # local version here, which reverts dejagnu's override, and restore\n@@ -5215,6 +5300,7 @@ proc gdb_finish { } {\n     global gdbserver_reconnect_p\n     global gdb_prompt\n     global cleanfiles\n+    global known_globals\n \n     # Restore dejagnu's version of proc unknown.\n     rename ::unknown \"\"\n@@ -5250,6 +5336,8 @@ proc gdb_finish { } {\n \t$gdb_finish_hook\n     }\n     set gdb_finish_hooks [list]\n+\n+    gdb_cleanup_globals\n }\n \n global debug_format\n@@ -6957,7 +7045,7 @@ proc gdbserver_debug_enabled { } {\n # Open the file for logging gdb input\n \n proc gdb_stdin_log_init { } {\n-    global in_file\n+    gdb_persistent_global in_file\n \n     if {[info exists in_file]} {\n       # Close existing file."
    },
    {
      "sha": "ff118642940bf2e61a5580f6639b7b273d5074ce",
      "filename": "gdb/testsuite/lib/pascal.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/lib/pascal.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a29d5112814e7a6744f03bddfe6756e2aa5e7a50/gdb/testsuite/lib/pascal.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/pascal.exp?ref=a29d5112814e7a6744f03bddfe6756e2aa5e7a50",
      "patch": "@@ -33,10 +33,10 @@ set pascal_init_done 0\n  \n proc pascal_init {} {\n     global pascal_init_done\n-    global pascal_compiler_is_gpc\n-    global pascal_compiler_is_fpc\n-    global gpc_compiler\n-    global fpc_compiler\n+    gdb_persistent_global pascal_compiler_is_gpc\n+    gdb_persistent_global pascal_compiler_is_fpc\n+    gdb_persistent_global gpc_compiler\n+    gdb_persistent_global fpc_compiler\n     global env\n  \n     if { $pascal_init_done == 1 } {"
    }
  ]
}