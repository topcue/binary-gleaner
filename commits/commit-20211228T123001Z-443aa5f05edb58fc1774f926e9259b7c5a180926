{
  "sha": "443aa5f05edb58fc1774f926e9259b7c5a180926",
  "node_id": "C_kwDOANOeidoAKDQ0M2FhNWYwNWVkYjU4ZmMxNzc0ZjkyNmU5MjU5YjdjNWExODA5MjY",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-20T14:39:13Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-28T12:30:01Z"
    },
    "message": "gas reloc sorting\n\nIn some cases, eg. riscv_pre_output_hook, gas generates out-of-order\nrelocations.  Various places in the linker assume relocs are sorted\nby increasing r_offset, which is normally the case.  Provide\nGAS_SORT_RELOCS to handle unsorted relocs.\n\nbfd/\n\tPR 28709\n\t* elf32-nds32.c (nds32_insertion_sort): Make static.\n\t* elf32-nds32.h (nds32_insertion_sort): Delete declaration.\ngas/\n\tPR 28709\n\t* write.c (write_relocs): Implement reloc sorting by r_offset\n\twhen GAS_SORT_RELOCS.\n\t* config/tc-nds32.c (compar_relent, nds32_set_section_relocs): Delete.\n\t* config/tc-nds32.h (nds32_set_section_relocs): Don't declare.\n\t(SET_SECTION_RELOCS): Don't define.\n\t(GAS_SORT_RELOCS): Define.\n\t* config/tc-riscv.h (GAS_SORT_RELOCS): Define.",
    "tree": {
      "sha": "ebc72377ef825f1da276fa3080f91fb49a143341",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ebc72377ef825f1da276fa3080f91fb49a143341"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/443aa5f05edb58fc1774f926e9259b7c5a180926",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/443aa5f05edb58fc1774f926e9259b7c5a180926",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/443aa5f05edb58fc1774f926e9259b7c5a180926",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/443aa5f05edb58fc1774f926e9259b7c5a180926/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4748764aaba89b8515cbf8918dc0ada840cdfab7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4748764aaba89b8515cbf8918dc0ada840cdfab7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4748764aaba89b8515cbf8918dc0ada840cdfab7"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 31,
    "deletions": 45
  },
  "files": [
    {
      "sha": "56d1d39181c1dbd11280c18baf7664c8852bb926",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -2522,7 +2522,7 @@ nds32_put_trampoline (void *contents, const unsigned long *template,\n /* nds32_insertion_sort sorts an array with nmemb elements of size size.\n    This prototype is the same as qsort ().  */\n \n-void\n+static void\n nds32_insertion_sort (void *base, size_t nmemb, size_t size,\n \t\t      int (*compar) (const void *lhs, const void *rhs))\n {"
    },
    {
      "sha": "0bf16974421cddd071d41a36c2484a150d5cb3cc",
      "filename": "bfd/elf32-nds32.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/bfd/elf32-nds32.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/bfd/elf32-nds32.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.h?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -95,8 +95,6 @@ extern int elf32_nds32_check_relax_group (bfd *, asection *);\n extern int elf32_nds32_unify_relax_group (bfd *, asection *);\n extern int nds32_elf_unify_tls_model (bfd *, asection *, bfd_byte *,\n \t\t\t\t      struct bfd_link_info *);\n-extern void nds32_insertion_sort\n-(void *, size_t, size_t, int (*) (const void *, const void *));\n \n extern int\t   nds32_convert_32_to_16 (bfd *, uint32_t, uint16_t *, int *);\n extern int\t   nds32_convert_16_to_32 (bfd *, uint16_t, uint32_t *);"
    },
    {
      "sha": "228afa616c9f8f2341889d0e769cc871f32337b4",
      "filename": "gas/config/tc-nds32.c",
      "status": "modified",
      "additions": 0,
      "deletions": 39,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.c?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -7537,45 +7537,6 @@ nds32_allow_local_subtract (expressionS *expr_l ATTRIBUTE_UNUSED,\n   return false;\n }\n \n-/* Sort relocation by address.\n-\n-   We didn't use qsort () in stdlib, because quick-sort is not a stable\n-   sorting algorithm.  Relocations at the same address (r_offset) must keep\n-   their relative order.  For example, RELAX_ENTRY must be the very first\n-   relocation entry.\n-\n-   Currently, this function implements insertion-sort.  */\n-\n-static int\n-compar_relent (const void *lhs, const void *rhs)\n-{\n-  const arelent **l = (const arelent **) lhs;\n-  const arelent **r = (const arelent **) rhs;\n-\n-  if ((*l)->address > (*r)->address)\n-    return 1;\n-  else if ((*l)->address == (*r)->address)\n-    return 0;\n-  else\n-    return -1;\n-}\n-\n-/* SET_SECTION_RELOCS ()\n-\n-   Although this macro is originally used to set a relocation for each section,\n-   we use it to sort relocations in the same section by the address of the\n-   relocation.  */\n-\n-void\n-nds32_set_section_relocs (asection *sec ATTRIBUTE_UNUSED,\n-\t\t\t  arelent **relocs, unsigned int n)\n-{\n-  if (n <= 1)\n-    return;\n-\n-  nds32_insertion_sort (relocs, n, sizeof (*relocs), compar_relent);\n-}\n-\n long\n nds32_pcrel_from_section (fixS *fixP, segT sec ATTRIBUTE_UNUSED)\n {"
    },
    {
      "sha": "85a1adb8eed18f5ae4740f8aab866c3cadfe2431",
      "filename": "gas/config/tc-nds32.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-nds32.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-nds32.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.h?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -88,7 +88,6 @@ extern void nds32_frob_file_before_fix (void);\n extern void elf_nds32_final_processing (void);\n extern int nds32_validate_fix_sub (struct fix *, segT);\n extern int nds32_force_relocation (struct fix *);\n-extern void nds32_set_section_relocs (asection *, arelent ** , unsigned int);\n \n /* Fill in rs_align_code fragments.  TODO: Review this.  */\n extern void nds32_handle_align (fragS *);\n@@ -110,7 +109,7 @@ extern void tc_nds32_frame_initial_instructions (void);\n    || TC_FORCE_RELOCATION (FIX))\n #define TC_FORCE_RELOCATION(fix)\t\tnds32_force_relocation (fix)\n #define TC_VALIDATE_FIX_SUB(FIX,SEG)\t\tnds32_validate_fix_sub (FIX,SEG)\n-#define SET_SECTION_RELOCS(sec, relocs, n)\tnds32_set_section_relocs (sec, relocs, n)\n+#define GAS_SORT_RELOCS\t\t\t\t1\n /* Values passed to md_apply_fix don't include the symbol value.  */\n #define MD_APPLY_SYM_VALUE(FIX)\t\t\t0\n #define HANDLE_ALIGN(f)\t\t\t\tnds32_handle_align (f)"
    },
    {
      "sha": "1ca02c0bbc6066079896dd4ade43e46c05b102d5",
      "filename": "gas/config/tc-riscv.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/config/tc-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.h?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -78,6 +78,7 @@ extern int riscv_parse_long_option (const char *);\n \n #define md_pre_output_hook riscv_pre_output_hook ()\n extern void riscv_pre_output_hook (void);\n+#define GAS_SORT_RELOCS 1\n \n /* Let the linker resolve all the relocs due to relaxation.  */\n #define tc_fix_adjustable(fixp) 0"
    },
    {
      "sha": "eaa9d21068f2e9c93900352fd45bff2aaffb7aaf",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 28,
      "deletions": 1,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/443aa5f05edb58fc1774f926e9259b7c5a180926/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=443aa5f05edb58fc1774f926e9259b7c5a180926",
      "patch": "@@ -1315,7 +1315,34 @@ write_relocs (bfd *abfd ATTRIBUTE_UNUSED, asection *sec,\n \t\t}\n \t      r = r->next;\n \t    }\n-\t  relocs[n++] = *reloc;\n+#ifdef GAS_SORT_RELOCS\n+\t  if (n != 0 && (*reloc)->address < relocs[n - 1]->address)\n+\t    {\n+\t      size_t lo = 0;\n+\t      size_t hi = n - 1;\n+\t      bfd_vma look = (*reloc)->address;\n+\t      while (lo < hi)\n+\t\t{\n+\t\t  size_t mid = (lo + hi) / 2;\n+\t\t  if (relocs[mid]->address > look)\n+\t\t    hi = mid;\n+\t\t  else\n+\t\t    {\n+\t\t      lo = mid + 1;\n+\t\t      if (relocs[mid]->address == look)\n+\t\t\tbreak;\n+\t\t    }\n+\t\t}\n+\t      while (lo < hi && relocs[lo]->address == look)\n+\t\tlo++;\n+\t      memmove (relocs + lo + 1, relocs + lo,\n+\t\t       (n - lo) * sizeof (*relocs));\n+\t      n++;\n+\t      relocs[lo] = *reloc;\n+\t    }\n+\t  else\n+#endif\n+\t    relocs[n++] = *reloc;\n \t  install_reloc (sec, *reloc, fixp->fx_frag,\n \t\t\t fixp->fx_file, fixp->fx_line);\n #ifndef RELOC_EXPANSION_POSSIBLE"
    }
  ]
}