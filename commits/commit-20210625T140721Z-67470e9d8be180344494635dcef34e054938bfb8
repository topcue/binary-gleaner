{
  "sha": "67470e9d8be180344494635dcef34e054938bfb8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc0NzBlOWQ4YmUxODAzNDQ0OTQ2MzVkY2VmMzRlMDU0OTM4YmZiOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-06-25T14:01:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-06-25T14:07:21Z"
    },
    "message": "Decode Ada types in Python layer\n\nGNAT emits encoded type names, but these aren't usually of interest to\nusers.  The Ada language code in gdb hides this oddity -- but the\nPython layer does not.  This patch changes the Python code to use the\ndecoded Ada type name, when appropriate.\n\nI looked at decoding Ada type names during construction, as that would\nbe cleaner.  However, the Ada support in gdb relies on the encodings\nat various points, so this isn't really doable right now.\n\n2021-06-25  Tom Tromey  <tromey@adacore.com>\n\n\t* python/py-type.c (typy_get_name): Decode an Ada type name.\n\ngdb/testsuite/ChangeLog\n2021-06-25  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/py_range.exp: Add type name test cases.",
    "tree": {
      "sha": "7477aae623d62721bf9cee5b2ca2d4cf6bd4c7e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7477aae623d62721bf9cee5b2ca2d4cf6bd4c7e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/67470e9d8be180344494635dcef34e054938bfb8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67470e9d8be180344494635dcef34e054938bfb8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/67470e9d8be180344494635dcef34e054938bfb8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67470e9d8be180344494635dcef34e054938bfb8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8a3df5acae7ad08f691b449c7e6f8e38fb1b8cb1"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 22,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c973f4381b20744526722d1e6736f75c4f9eda50",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67470e9d8be180344494635dcef34e054938bfb8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67470e9d8be180344494635dcef34e054938bfb8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=67470e9d8be180344494635dcef34e054938bfb8",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* python/py-type.c (typy_get_name): Decode an Ada type name.\n+\n 2021-06-25  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_decode): Add wrap parameter."
    },
    {
      "sha": "04d1c7a0ee7d3ac0f0d64d06532769ce3ab80b2d",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67470e9d8be180344494635dcef34e054938bfb8/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67470e9d8be180344494635dcef34e054938bfb8/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=67470e9d8be180344494635dcef34e054938bfb8",
      "patch": "@@ -27,6 +27,7 @@\n #include \"objfiles.h\"\n #include \"language.h\"\n #include \"typeprint.h\"\n+#include \"ada-lang.h\"\n \n struct type_object\n {\n@@ -393,6 +394,14 @@ typy_get_name (PyObject *self, void *closure)\n \n   if (type->name () == NULL)\n     Py_RETURN_NONE;\n+  /* Ada type names are encoded, but it is better for users to see the\n+     decoded form.  */\n+  if (ADA_TYPE_P (type))\n+    {\n+      std::string name = ada_decode (type->name (), false);\n+      if (!name.empty ())\n+\treturn PyString_FromString (name.c_str ());\n+    }\n   return PyString_FromString (type->name ());\n }\n "
    },
    {
      "sha": "e5164c731adb1cce7b070a074dc5e031d14ec882",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67470e9d8be180344494635dcef34e054938bfb8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67470e9d8be180344494635dcef34e054938bfb8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=67470e9d8be180344494635dcef34e054938bfb8",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/py_range.exp: Add type name test cases.\n+\n 2021-06-24  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/info-macros.exp: Add <EOL> after trailing whitespace in"
    },
    {
      "sha": "3e6efa3e9325318c9cdda99a012289ecb6a647a6",
      "filename": "gdb/testsuite/gdb.ada/py_range.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67470e9d8be180344494635dcef34e054938bfb8/gdb/testsuite/gdb.ada/py_range.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67470e9d8be180344494635dcef34e054938bfb8/gdb/testsuite/gdb.ada/py_range.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/py_range.exp?ref=67470e9d8be180344494635dcef34e054938bfb8",
      "patch": "@@ -40,3 +40,8 @@ gdb_test \"python print(int(gdb.parse_and_eval('si')))\" \\\n \n gdb_test \"python print(int(gdb.parse_and_eval('ir')))\" \\\n          \"974\"\n+\n+gdb_test \"python print(gdb.parse_and_eval('si').type)\" \\\n+    \"foo\\\\.small_integer\" \"print type\"\n+gdb_test \"python print(gdb.parse_and_eval('si').type.name)\" \\\n+    \"foo\\\\.small_integer\" \"print type name\""
    }
  ]
}