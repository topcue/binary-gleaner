{
  "sha": "c1202057eb9161a86af27d867703235fee7b7555",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzEyMDIwNTdlYjkxNjFhODZhZjI3ZDg2NzcwMzIzNWZlZTdiNzU1NQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-04-10T14:49:36Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-04-10T14:49:36Z"
    },
    "message": "Pull in patch for libiberty that fixes a stack exhaustion bug when demangling a pathalogically constructed mangled name.\n\n\tPR 89394\n\t* cp-demangle.c (cplus_demangle_fill_name): Reject negative\n\tlengths.\n\t(d_count_templates_scopes): Replace num_templates and num_scopes\n\tparameters with a struct d_print_info pointer parameter.  Adjust\n\tbody of the function accordingly.  Add recursion counter and check\n\tthat the recursion limit is not reached.\n\t(d_print_init): Pass dpi parameter to d_count_templates_scopes.\n\tReset recursion counter afterwards, unless the recursion limit was\n\treached.",
    "tree": {
      "sha": "c2e598f711cb9142e77d3c2d241cba0a2ff05601",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c2e598f711cb9142e77d3c2d241cba0a2ff05601"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c1202057eb9161a86af27d867703235fee7b7555",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1202057eb9161a86af27d867703235fee7b7555",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c1202057eb9161a86af27d867703235fee7b7555",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1202057eb9161a86af27d867703235fee7b7555/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 42,
    "deletions": 22
  },
  "files": [
    {
      "sha": "4df3aaa62ca4cfafe8c521584ff6bb93b407badb",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1202057eb9161a86af27d867703235fee7b7555/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1202057eb9161a86af27d867703235fee7b7555/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=c1202057eb9161a86af27d867703235fee7b7555",
      "patch": "@@ -1,3 +1,19 @@\n+2019-04-10  Nick Clifton  <nickc@redhat.com>\n+\n+\t* libiberty: Sync with gcc.  Bring in:\n+\t2019-04-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 89394\n+\t* cp-demangle.c (cplus_demangle_fill_name): Reject negative\n+\tlengths.\n+\t(d_count_templates_scopes): Replace num_templates and num_scopes\n+\tparameters with a struct d_print_info pointer parameter.  Adjust\n+\tbody of the function accordingly.  Add recursion counter and check\n+\tthat the recursion limit is not reached.\n+\t(d_print_init): Pass dpi parameter to d_count_templates_scopes.\n+\tReset recursion counter afterwards, unless the recursion limit was\n+\treached.\n+\n 2018-06-24  Nick Clifton  <nickc@redhat.com>\n \n \t2.32 branch created."
    },
    {
      "sha": "779b4e763a05f8328c40fe3775753af9947001d6",
      "filename": "libiberty/cp-demangle.c",
      "status": "modified",
      "additions": 26,
      "deletions": 22,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c1202057eb9161a86af27d867703235fee7b7555/libiberty/cp-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c1202057eb9161a86af27d867703235fee7b7555/libiberty/cp-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/cp-demangle.c?ref=c1202057eb9161a86af27d867703235fee7b7555",
      "patch": "@@ -861,7 +861,7 @@ CP_STATIC_IF_GLIBCPP_V3\n int\n cplus_demangle_fill_name (struct demangle_component *p, const char *s, int len)\n {\n-  if (p == NULL || s == NULL || len == 0)\n+  if (p == NULL || s == NULL || len <= 0)\n     return 0;\n   p->d_printing = 0;\n   p->type = DEMANGLE_COMPONENT_NAME;\n@@ -4061,7 +4061,7 @@ d_growable_string_callback_adapter (const char *s, size_t l, void *opaque)\n    are larger than the actual numbers encountered.  */\n \n static void\n-d_count_templates_scopes (int *num_templates, int *num_scopes,\n+d_count_templates_scopes (struct d_print_info *dpi,\n \t\t\t  const struct demangle_component *dc)\n {\n   if (dc == NULL)\n@@ -4081,13 +4081,13 @@ d_count_templates_scopes (int *num_templates, int *num_scopes,\n       break;\n \n     case DEMANGLE_COMPONENT_TEMPLATE:\n-      (*num_templates)++;\n+      dpi->num_copy_templates++;\n       goto recurse_left_right;\n \n     case DEMANGLE_COMPONENT_REFERENCE:\n     case DEMANGLE_COMPONENT_RVALUE_REFERENCE:\n       if (d_left (dc)->type == DEMANGLE_COMPONENT_TEMPLATE_PARAM)\n-\t(*num_scopes)++;\n+\tdpi->num_saved_scopes++;\n       goto recurse_left_right;\n \n     case DEMANGLE_COMPONENT_QUAL_NAME:\n@@ -4152,42 +4152,42 @@ d_count_templates_scopes (int *num_templates, int *num_scopes,\n     case DEMANGLE_COMPONENT_TAGGED_NAME:\n     case DEMANGLE_COMPONENT_CLONE:\n     recurse_left_right:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\td_left (dc));\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\td_right (dc));\n+      /* PR 89394 - Check for too much recursion.  */\n+      if (dpi->recursion > DEMANGLE_RECURSION_LIMIT)\n+\t/* FIXME: There ought to be a way to report to the\n+\t   user that the recursion limit has been reached.  */\n+\treturn;\n+\n+      ++ dpi->recursion;\n+      d_count_templates_scopes (dpi, d_left (dc));\n+      d_count_templates_scopes (dpi, d_right (dc));\n+      -- dpi->recursion;\n       break;\n \n     case DEMANGLE_COMPONENT_CTOR:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\tdc->u.s_ctor.name);\n+      d_count_templates_scopes (dpi, dc->u.s_ctor.name);\n       break;\n \n     case DEMANGLE_COMPONENT_DTOR:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\tdc->u.s_dtor.name);\n+      d_count_templates_scopes (dpi, dc->u.s_dtor.name);\n       break;\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\tdc->u.s_extended_operator.name);\n+      d_count_templates_scopes (dpi, dc->u.s_extended_operator.name);\n       break;\n \n     case DEMANGLE_COMPONENT_FIXED_TYPE:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-                                dc->u.s_fixed.length);\n+      d_count_templates_scopes (dpi, dc->u.s_fixed.length);\n       break;\n \n     case DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS:\n     case DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\td_left (dc));\n+      d_count_templates_scopes (dpi, d_left (dc));\n       break;\n \n     case DEMANGLE_COMPONENT_LAMBDA:\n     case DEMANGLE_COMPONENT_DEFAULT_ARG:\n-      d_count_templates_scopes (num_templates, num_scopes,\n-\t\t\t\tdc->u.s_unary_num.sub);\n+      d_count_templates_scopes (dpi, dc->u.s_unary_num.sub);\n       break;\n     }\n }\n@@ -4222,8 +4222,12 @@ d_print_init (struct d_print_info *dpi, demangle_callbackref callback,\n   dpi->next_copy_template = 0;\n   dpi->num_copy_templates = 0;\n \n-  d_count_templates_scopes (&dpi->num_copy_templates,\n-\t\t\t    &dpi->num_saved_scopes, dc);\n+  d_count_templates_scopes (dpi, dc);\n+  /* If we did not reach the recursion limit, then reset the\n+     current recursion value back to 0, so that we can print\n+     the templates.  */\n+  if (dpi->recursion < DEMANGLE_RECURSION_LIMIT)\n+    dpi->recursion = 0;\n   dpi->num_copy_templates *= dpi->num_saved_scopes;\n \n   dpi->current_template = NULL;"
    }
  ]
}