{
  "sha": "4ef367bffd73d50002339deba40983530ccb9d15",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGVmMzY3YmZmZDczZDUwMDAyMzM5ZGViYTQwOTgzNTMwY2NiOWQxNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-26T15:49:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-01-26T15:49:38Z"
    },
    "message": "Use debug_prefixed_printf_cond in windows-nat.c\n\nThis changes windows-nat.c and nat/windows-nat.c to use the new\ndebug_prefixed_printf_cond facility.  I tried this out on a Windows\nbuild and I think it makes the output look a little nicer.\n\n2021-01-26  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (DEBUG_EXEC, DEBUG_EVENTS, DEBUG_MEM)\n\t(DEBUG_EXCEPT): Use debug_prefixed_printf_cond.\n\t(windows_init_thread_list, windows_nat::handle_load_dll)\n\t(windows_nat::handle_unload_dll, windows_nat_target::resume)\n\t(windows_nat_target::resume)\n\t(windows_nat_target::get_windows_debug_event)\n\t(windows_nat_target::interrupt, windows_xfer_memory)\n\t(windows_nat_target::close): Update.\n\t* nat/windows-nat.c (DEBUG_EVENTS): Use\n\tdebug_prefixed_printf_cond.\n\t(matching_pending_stop, fetch_pending_stop)\n\t(continue_last_debug_event): Update.",
    "tree": {
      "sha": "ac8dfce86b54c0a06df34d4a130f68365df61c5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac8dfce86b54c0a06df34d4a130f68365df61c5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4ef367bffd73d50002339deba40983530ccb9d15",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ef367bffd73d50002339deba40983530ccb9d15",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4ef367bffd73d50002339deba40983530ccb9d15",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ef367bffd73d50002339deba40983530ccb9d15/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4cb1265b3f906cbfd092715b61bb81a8f6179a49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cb1265b3f906cbfd092715b61bb81a8f6179a49",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4cb1265b3f906cbfd092715b61bb81a8f6179a49"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 89,
    "deletions": 68
  },
  "files": [
    {
      "sha": "4b1f21cc91d130df8dbd7267192398dfc0bbe871",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ef367bffd73d50002339deba40983530ccb9d15/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ef367bffd73d50002339deba40983530ccb9d15/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4ef367bffd73d50002339deba40983530ccb9d15",
      "patch": "@@ -1,3 +1,18 @@\n+2021-01-26  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (DEBUG_EXEC, DEBUG_EVENTS, DEBUG_MEM)\n+\t(DEBUG_EXCEPT): Use debug_prefixed_printf_cond.\n+\t(windows_init_thread_list, windows_nat::handle_load_dll)\n+\t(windows_nat::handle_unload_dll, windows_nat_target::resume)\n+\t(windows_nat_target::resume)\n+\t(windows_nat_target::get_windows_debug_event)\n+\t(windows_nat_target::interrupt, windows_xfer_memory)\n+\t(windows_nat_target::close): Update.\n+\t* nat/windows-nat.c (DEBUG_EVENTS): Use\n+\tdebug_prefixed_printf_cond.\n+\t(matching_pending_stop, fetch_pending_stop)\n+\t(continue_last_debug_event): Update.\n+\n 2020-12-17  Mihails Strasuns  <mihails.strasuns@intel.com>\n \n \t* linux-tdep.c (linux_make_mappings_corefile_notes): Start using"
    },
    {
      "sha": "659a75663ae48fb201831d60ccb05993a4e87d78",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ef367bffd73d50002339deba40983530ccb9d15/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ef367bffd73d50002339deba40983530ccb9d15/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=4ef367bffd73d50002339deba40983530ccb9d15",
      "patch": "@@ -47,7 +47,9 @@ bool ignore_first_breakpoint = false;\n \n /* Note that 'debug_events' must be locally defined in the relevant\n    functions.  */\n-#define DEBUG_EVENTS(x)\tif (debug_events) debug_printf x\n+#define DEBUG_EVENTS(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_events, \"windows events\", fmt, \\\n+\t\t\t      ## __VA_ARGS__)\n \n windows_thread_info::~windows_thread_info ()\n {\n@@ -334,9 +336,8 @@ matching_pending_stop (bool debug_events)\n       if (desired_stop_thread_id == -1\n \t  || desired_stop_thread_id == item.thread_id)\n \t{\n-\t  DEBUG_EVENTS ((\"windows_continue - pending stop anticipated, \"\n-\t\t\t \"desired=0x%x, item=0x%x\\n\",\n-\t\t\t desired_stop_thread_id, item.thread_id));\n+\t  DEBUG_EVENTS (\"pending stop anticipated, desired=0x%x, item=0x%x\",\n+\t\t\tdesired_stop_thread_id, item.thread_id);\n \t  return true;\n \t}\n     }\n@@ -360,9 +361,8 @@ fetch_pending_stop (bool debug_events)\n \t  result = *iter;\n \t  current_event = iter->event;\n \n-\t  DEBUG_EVENTS ((\"get_windows_debug_event - \"\n-\t\t\t \"pending stop found in 0x%x (desired=0x%x)\\n\",\n-\t\t\t iter->thread_id, desired_stop_thread_id));\n+\t  DEBUG_EVENTS (\"pending stop found in 0x%x (desired=0x%x)\",\n+\t\t\titer->thread_id, desired_stop_thread_id);\n \n \t  pending_stops.erase (iter);\n \t  break;\n@@ -377,11 +377,11 @@ fetch_pending_stop (bool debug_events)\n BOOL\n continue_last_debug_event (DWORD continue_status, bool debug_events)\n {\n-  DEBUG_EVENTS ((\"ContinueDebugEvent (cpid=%d, ctid=0x%x, %s);\\n\",\n-\t\t  (unsigned) last_wait_event.dwProcessId,\n-\t\t  (unsigned) last_wait_event.dwThreadId,\n-\t\t  continue_status == DBG_CONTINUE ?\n-\t\t  \"DBG_CONTINUE\" : \"DBG_EXCEPTION_NOT_HANDLED\"));\n+  DEBUG_EVENTS (\"ContinueDebugEvent (cpid=%d, ctid=0x%x, %s)\",\n+\t\t(unsigned) last_wait_event.dwProcessId,\n+\t\t(unsigned) last_wait_event.dwThreadId,\n+\t\tcontinue_status == DBG_CONTINUE ?\n+\t\t\"DBG_CONTINUE\" : \"DBG_EXCEPTION_NOT_HANDLED\");\n \n   return ContinueDebugEvent (last_wait_event.dwProcessId,\n \t\t\t     last_wait_event.dwThreadId,"
    },
    {
      "sha": "8f6fb3ddcdf5941badaf564c0f49b3d58aa356d5",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 62,
      "deletions": 56,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ef367bffd73d50002339deba40983530ccb9d15/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ef367bffd73d50002339deba40983530ccb9d15/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=4ef367bffd73d50002339deba40983530ccb9d15",
      "patch": "@@ -218,10 +218,17 @@ static int windows_initialization_done;\n #endif\n \n #define CHECK(x)\tcheck (x, __FILE__,__LINE__)\n-#define DEBUG_EXEC(x)\tif (debug_exec)\t\tdebug_printf x\n-#define DEBUG_EVENTS(x)\tif (debug_events)\tdebug_printf x\n-#define DEBUG_MEM(x)\tif (debug_memory)\tdebug_printf x\n-#define DEBUG_EXCEPT(x)\tif (debug_exceptions)\tdebug_printf x\n+#define DEBUG_EXEC(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_exec, \"windows exec\", fmt, ## __VA_ARGS__)\n+#define DEBUG_EVENTS(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_events, \"windows events\", fmt, \\\n+\t\t\t      ## __VA_ARGS__)\n+#define DEBUG_MEM(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_memory, \"windows mem\", fmt, \\\n+\t\t\t      ## __VA_ARGS__)\n+#define DEBUG_EXCEPT(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_exceptions, \"windows except\", fmt, \\\n+\t\t\t      ## __VA_ARGS__)\n \n static void cygwin_set_dr (int i, CORE_ADDR addr);\n static void cygwin_set_dr7 (unsigned long val);\n@@ -503,7 +510,7 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n static void\n windows_init_thread_list (void)\n {\n-  DEBUG_EVENTS ((\"gdb: windows_init_thread_list\\n\"));\n+  DEBUG_EVENTS (\"\");\n   init_thread_list ();\n \n   for (windows_thread_info *here : thread_list)\n@@ -885,8 +892,8 @@ windows_nat::handle_load_dll ()\n \n   lm_info_windows *li = (lm_info_windows *) solib_end->lm_info;\n \n-  DEBUG_EVENTS ((\"gdb: Loading dll \\\"%s\\\" at %s.\\n\", solib_end->so_name,\n-\t\t host_address_to_string (li->load_addr)));\n+  DEBUG_EVENTS (\"Loading dll \\\"%s\\\" at %s.\", solib_end->so_name,\n+\t\thost_address_to_string (li->load_addr));\n }\n \n static void\n@@ -917,7 +924,7 @@ windows_nat::handle_unload_dll ()\n \t  so->next = sodel->next;\n \t  if (!so->next)\n \t    solib_end = so;\n-\t  DEBUG_EVENTS ((\"gdb: Unloading dll \\\"%s\\\".\\n\", sodel->so_name));\n+\t  DEBUG_EVENTS (\"Unloading dll \\\"%s\\\".\", sodel->so_name);\n \n \t  windows_free_so (sodel);\n \t  return;\n@@ -1402,7 +1409,7 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n     {\n       if (current_event.dwDebugEventCode != EXCEPTION_DEBUG_EVENT)\n \t{\n-\t  DEBUG_EXCEPT((\"Cannot continue with signal %d here.\\n\",sig));\n+\t  DEBUG_EXCEPT (\"Cannot continue with signal %d here.\", sig);\n \t}\n       else if (sig == last_sig)\n \tcontinue_status = DBG_EXCEPTION_NOT_HANDLED;\n@@ -1423,18 +1430,18 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \t      }\n \t  if (continue_status == DBG_CONTINUE)\n \t    {\n-\t      DEBUG_EXCEPT((\"Cannot continue with signal %d.\\n\",sig));\n+\t      DEBUG_EXCEPT (\"Cannot continue with signal %d.\", sig);\n \t    }\n \t}\n #endif\n-\tDEBUG_EXCEPT((\"Can only continue with received signal %d.\\n\",\n-\t  last_sig));\n+      DEBUG_EXCEPT (\"Can only continue with received signal %d.\",\n+\t\t    last_sig);\n     }\n \n   last_sig = GDB_SIGNAL_0;\n \n-  DEBUG_EXEC ((\"gdb: windows_resume (pid=%d, tid=0x%x, step=%d, sig=%d);\\n\",\n-\t       ptid.pid (), (unsigned) ptid.lwp (), step, sig));\n+  DEBUG_EXEC (\"pid=%d, tid=0x%x, step=%d, sig=%d\",\n+\t      ptid.pid (), (unsigned) ptid.lwp (), step, sig);\n \n   /* Get context for currently selected thread.  */\n   th = thread_rec (inferior_ptid, DONT_INVALIDATE_CONTEXT);\n@@ -1599,10 +1606,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n   switch (event_code)\n     {\n     case CREATE_THREAD_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"CREATE_THREAD_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"CREATE_THREAD_DEBUG_EVENT\");\n       if (saw_create != 1)\n \t{\n \t  inferior *inf = find_inferior_pid (this, current_event.dwProcessId);\n@@ -1628,21 +1635,21 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case EXIT_THREAD_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"EXIT_THREAD_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"EXIT_THREAD_DEBUG_EVENT\");\n       windows_delete_thread (ptid_t (current_event.dwProcessId,\n \t\t\t\t     current_event.dwThreadId, 0),\n \t\t\t     current_event.u.ExitThread.dwExitCode,\n \t\t\t     false /* main_thread_p */);\n       break;\n \n     case CREATE_PROCESS_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"CREATE_PROCESS_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"CREATE_PROCESS_DEBUG_EVENT\");\n       CloseHandle (current_event.u.CreateProcessInfo.hFile);\n       if (++saw_create != 1)\n \tbreak;\n@@ -1659,10 +1666,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case EXIT_PROCESS_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"EXIT_PROCESS_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"EXIT_PROCESS_DEBUG_EVENT\");\n       if (!windows_initialization_done)\n \t{\n \t  target_terminal::ours ();\n@@ -1697,10 +1704,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case LOAD_DLL_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"LOAD_DLL_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"LOAD_DLL_DEBUG_EVENT\");\n       CloseHandle (current_event.u.LoadDll.hFile);\n       if (saw_create != 1 || ! windows_initialization_done)\n \tbreak;\n@@ -1711,10 +1718,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case UNLOAD_DLL_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"UNLOAD_DLL_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"UNLOAD_DLL_DEBUG_EVENT\");\n       if (saw_create != 1 || ! windows_initialization_done)\n \tbreak;\n       catch_errors (handle_unload_dll);\n@@ -1724,10 +1731,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case EXCEPTION_DEBUG_EVENT:\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"EXCEPTION_DEBUG_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"EXCEPTION_DEBUG_EVENT\");\n       if (saw_create != 1)\n \tbreak;\n       switch (handle_exception (ourstatus, debug_exceptions))\n@@ -1746,10 +1753,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n       break;\n \n     case OUTPUT_DEBUG_STRING_EVENT:\t/* Message from the kernel.  */\n-      DEBUG_EVENTS ((\"gdb: kernel event for pid=%u tid=0x%x code=%s)\\n\",\n-\t\t     (unsigned) current_event.dwProcessId,\n-\t\t     (unsigned) current_event.dwThreadId,\n-\t\t     \"OUTPUT_DEBUG_STRING_EVENT\"));\n+      DEBUG_EVENTS (\"kernel event for pid=%u tid=0x%x code=%s\",\n+\t\t    (unsigned) current_event.dwProcessId,\n+\t\t    (unsigned) current_event.dwThreadId,\n+\t\t    \"OUTPUT_DEBUG_STRING_EVENT\");\n       if (saw_create != 1)\n \tbreak;\n       thread_id = handle_output_debug_string (ourstatus);\n@@ -1774,9 +1781,9 @@ windows_nat_target::get_windows_debug_event (int pid,\n     {\n       /* Pending stop.  See the comment by the definition of\n \t \"pending_stops\" for details on why this is needed.  */\n-      DEBUG_EVENTS ((\"get_windows_debug_event - \"\n-\t\t     \"unexpected stop in 0x%x (expecting 0x%x)\\n\",\n-\t\t     thread_id, desired_stop_thread_id));\n+      DEBUG_EVENTS (\"get_windows_debug_event - \"\n+\t\t    \"unexpected stop in 0x%x (expecting 0x%x)\",\n+\t\t    thread_id, desired_stop_thread_id);\n \n       if (current_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT\n \t  && ((current_event.u.Exception.ExceptionRecord.ExceptionCode\n@@ -3066,7 +3073,7 @@ windows_nat_target::mourn_inferior ()\n void\n windows_nat_target::interrupt ()\n {\n-  DEBUG_EVENTS ((\"gdb: GenerateConsoleCtrlEvent (CTRLC_EVENT, 0)\\n\"));\n+  DEBUG_EVENTS (\"GenerateConsoleCtrlEvent (CTRLC_EVENT, 0)\");\n   CHECK (GenerateConsoleCtrlEvent (CTRL_C_EVENT, current_event.dwProcessId));\n   registers_changed ();\t\t/* refresh register state */\n }\n@@ -3084,8 +3091,8 @@ windows_xfer_memory (gdb_byte *readbuf, const gdb_byte *writebuf,\n \n   if (writebuf != NULL)\n     {\n-      DEBUG_MEM ((\"gdb: write target memory, %s bytes at %s\\n\",\n-\t\t  pulongest (len), core_addr_to_string (memaddr)));\n+      DEBUG_MEM (\"write target memory, %s bytes at %s\",\n+\t\t pulongest (len), core_addr_to_string (memaddr));\n       success = WriteProcessMemory (current_process_handle,\n \t\t\t\t    (LPVOID) (uintptr_t) memaddr, writebuf,\n \t\t\t\t    len, &done);\n@@ -3096,8 +3103,8 @@ windows_xfer_memory (gdb_byte *readbuf, const gdb_byte *writebuf,\n     }\n   else\n     {\n-      DEBUG_MEM ((\"gdb: read target memory, %s bytes at %s\\n\",\n-\t\t  pulongest (len), core_addr_to_string (memaddr)));\n+      DEBUG_MEM (\"read target memory, %s bytes at %s\",\n+\t\t pulongest (len), core_addr_to_string (memaddr));\n       success = ReadProcessMemory (current_process_handle,\n \t\t\t\t   (LPCVOID) (uintptr_t) memaddr, readbuf,\n \t\t\t\t   len, &done);\n@@ -3132,8 +3139,7 @@ windows_nat_target::kill ()\n void\n windows_nat_target::close ()\n {\n-  DEBUG_EVENTS ((\"gdb: windows_close, inferior_ptid=%d\\n\",\n-\t\tinferior_ptid.pid ()));\n+  DEBUG_EVENTS (\"inferior_ptid=%d\\n\", inferior_ptid.pid ());\n }\n \n /* Convert pid to printable format.  */"
    }
  ]
}