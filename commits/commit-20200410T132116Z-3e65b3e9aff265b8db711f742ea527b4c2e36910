{
  "sha": "3e65b3e9aff265b8db711f742ea527b4c2e36910",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2U2NWIzZTlhZmYyNjViOGRiNzExZjc0MmVhNTI3YjRjMmUzNjkxMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-10T13:18:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-10T13:21:16Z"
    },
    "message": "Skip separate debug files when handling copy relocations\n\nget_symbol_address and get_msymbol_address call\nlookup_minimal_symbol_linkage, which iterates over the separate debug\nfiles of the objfile that is passed in.\n\nThis means that if these functions pass in a separate debug objfile,\nthen they are doing unnecessary work.\n\nThis patch avoids the extra work by skipping separate debug objfiles\nin the loops.\n\ngdb/ChangeLog\n2020-04-10  Tom Tromey  <tromey@adacore.com>\n\n\t* symtab.c (get_symbol_address, get_msymbol_address): Skip\n\tseparate debug files.",
    "tree": {
      "sha": "a14ef76e2d9666c0ef18131cb99dc865158d4f52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a14ef76e2d9666c0ef18131cb99dc865158d4f52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3e65b3e9aff265b8db711f742ea527b4c2e36910",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e65b3e9aff265b8db711f742ea527b4c2e36910",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3e65b3e9aff265b8db711f742ea527b4c2e36910",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e65b3e9aff265b8db711f742ea527b4c2e36910/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13302e956fb7a0c700f53f16d985c9e6207e331c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13302e956fb7a0c700f53f16d985c9e6207e331c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/13302e956fb7a0c700f53f16d985c9e6207e331c"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 10,
    "deletions": 1
  },
  "files": [
    {
      "sha": "fa05f93a5e5a46b166ab865141d06d43dee7808e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e65b3e9aff265b8db711f742ea527b4c2e36910/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e65b3e9aff265b8db711f742ea527b4c2e36910/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3e65b3e9aff265b8db711f742ea527b4c2e36910",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* symtab.c (get_symbol_address, get_msymbol_address): Skip\n+\tseparate debug files.\n+\n 2020-04-10  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* nat/windows-nat.c (STATUS_WX86_BREAKPOINT, STATUS_WX86_SINGLE_STEP):"
    },
    {
      "sha": "13a5a108e6fe9dd1f530312e4bf1feb1b71965e6",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e65b3e9aff265b8db711f742ea527b4c2e36910/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e65b3e9aff265b8db711f742ea527b4c2e36910/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=3e65b3e9aff265b8db711f742ea527b4c2e36910",
      "patch": "@@ -6438,6 +6438,9 @@ get_symbol_address (const struct symbol *sym)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n+      if (objfile->separate_debug_objfile_backlink != nullptr)\n+\tcontinue;\n+\n       bound_minimal_symbol minsym\n \t= lookup_minimal_symbol_linkage (linkage_name, objfile);\n       if (minsym.minsym != nullptr)\n@@ -6458,7 +6461,8 @@ get_msymbol_address (struct objfile *objf, const struct minimal_symbol *minsym)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      if ((objfile->flags & OBJF_MAINLINE) != 0)\n+      if (objfile->separate_debug_objfile_backlink == nullptr\n+\t  && (objfile->flags & OBJF_MAINLINE) != 0)\n \t{\n \t  bound_minimal_symbol found\n \t    = lookup_minimal_symbol_linkage (linkage_name, objfile);"
    }
  ]
}