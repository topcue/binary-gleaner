{
  "sha": "bb0da2b49689f49f01be2f8c5429945f37e12404",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmIwZGEyYjQ5Njg5ZjQ5ZjAxYmUyZjhjNTQyOTk0NWYzN2UxMjQwNA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-01-26T11:29:00Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-02-06T20:04:53Z"
    },
    "message": "Fix leak of identifier in macro definition.\n\nValgrind detects leaks like the following (gdb.base/macscp.exp).\nThis patch fixes 1 of the 3 leaks (the last one in the list below).\n\nThe remaining leaks are better fixed in splay_tree_remove  and\nsplay_tree_insert in libiberty.\nTested on debian/amd64, natively and under valgrind.\n\n==22285== 64 (48 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 737 of 3,377\n==22285==    at 0x4C2BE6D: malloc (vg_replace_malloc.c:309)\n==22285==    by 0x4049E7: xmalloc (common-utils.c:44)\n==22285==    by 0x533A20: new_macro_key(macro_table*, char const*, macro_source_file*, int) (macrotab.c:355)\n==22285==    by 0x53438B: macro_define_function(macro_source_file*, int, char const*, int, char const**, char const*) (macrotab.c:822)\n==22285==    by 0x52F945: macro_define_command(char const*, int) (macrocmd.c:409)\n...\n==22285== 128 (96 direct, 32 indirect) bytes in 2 blocks are definitely lost in loss record 1,083 of 3,377\n==22285==    at 0x4C2BE6D: malloc (vg_replace_malloc.c:309)\n==22285==    by 0x4049E7: xmalloc (common-utils.c:44)\n==22285==    by 0x533A20: new_macro_key(macro_table*, char const*, macro_source_file*, int) (macrotab.c:355)\n==22285==    by 0x534277: macro_define_object_internal(macro_source_file*, int, char const*, char const*, macro_special_kind) (macrotab.c:776)\n==22285==    by 0x52F7E0: macro_define_command(char const*, int) (macrocmd.c:414)\n...\n==22285== 177 bytes in 19 blocks are definitely lost in loss record 1,193 of 3,377\n==22285==    at 0x4C2BE6D: malloc (vg_replace_malloc.c:309)\n==22285==    by 0x4049E7: xmalloc (common-utils.c:44)\n==22285==    by 0x52F5BD: extract_identifier(char const**, int) (macrocmd.c:316)\n==22285==    by 0x52F77D: macro_define_command(char const*, int) (macrocmd.c:355)\ngdb/ChangeLog\n2019-02-06  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* macrocmd.c (extract_identifier): Return\n\ta gdb::unique_xmalloc_ptr<char> instead of a char *, and update\n\tcallers.",
    "tree": {
      "sha": "1dc43fe35f3074664ef05d7e01d02ec3cdb449ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1dc43fe35f3074664ef05d7e01d02ec3cdb449ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb0da2b49689f49f01be2f8c5429945f37e12404",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb0da2b49689f49f01be2f8c5429945f37e12404",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb0da2b49689f49f01be2f8c5429945f37e12404",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb0da2b49689f49f01be2f8c5429945f37e12404/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "424eb552c27a1574974d9052dff4ff252a7db22d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/424eb552c27a1574974d9052dff4ff252a7db22d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/424eb552c27a1574974d9052dff4ff252a7db22d"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 17,
    "deletions": 14
  },
  "files": [
    {
      "sha": "87cba1c40ee0ac0d9a12cd7d9a96bf2c3a417aee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb0da2b49689f49f01be2f8c5429945f37e12404/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb0da2b49689f49f01be2f8c5429945f37e12404/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bb0da2b49689f49f01be2f8c5429945f37e12404",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-06  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* macrocmd.c (extract_identifier): Return\n+\ta gdb::unique_xmalloc_ptr<char> instead of a char *, and update\n+\tcallers.\n+\n 2019-02-06  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-nat.c (fbsd_fetch_cmdline): Join arguments with spaces."
    },
    {
      "sha": "beb9b78b3441ebd044900a0cd30cee321597a328",
      "filename": "gdb/macrocmd.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb0da2b49689f49f01be2f8c5429945f37e12404/gdb/macrocmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb0da2b49689f49f01be2f8c5429945f37e12404/gdb/macrocmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrocmd.c?ref=bb0da2b49689f49f01be2f8c5429945f37e12404",
      "patch": "@@ -288,7 +288,7 @@ skip_ws (const char **expp)\n    function will also allow \"...\" forms as used in varargs macro\n    parameters.  */\n \n-static char *\n+static gdb::unique_xmalloc_ptr<char>\n extract_identifier (const char **expp, int is_parameter)\n {\n   char *result;\n@@ -317,7 +317,7 @@ extract_identifier (const char **expp, int is_parameter)\n   memcpy (result, *expp, len);\n   result[len] = '\\0';\n   *expp += len;\n-  return result;\n+  return gdb::unique_xmalloc_ptr<char> (result);\n }\n \n struct temporary_macro_definition : public macro_definition\n@@ -346,14 +346,13 @@ static void\n macro_define_command (const char *exp, int from_tty)\n {\n   temporary_macro_definition new_macro;\n-  char *name = NULL;\n \n   if (!exp)\n     error (_(\"usage: macro define NAME[(ARGUMENT-LIST)] [REPLACEMENT-LIST]\"));\n \n   skip_ws (&exp);\n-  name = extract_identifier (&exp, 0);\n-  if (! name)\n+  gdb::unique_xmalloc_ptr<char> name = extract_identifier (&exp, 0);\n+  if (name == NULL)\n     error (_(\"Invalid macro name.\"));\n   if (*exp == '(')\n     {\n@@ -380,7 +379,7 @@ macro_define_command (const char *exp, int from_tty)\n \t      /* Must update new_macro as well...  */\n \t      new_macro.argv = (const char * const *) argv;\n \t    }\n-\t  argv[new_macro.argc] = extract_identifier (&exp, 1);\n+\t  argv[new_macro.argc] = extract_identifier (&exp, 1).release ();\n \t  if (! argv[new_macro.argc])\n \t    error (_(\"Macro is missing an argument.\"));\n \t  ++new_macro.argc;\n@@ -404,32 +403,30 @@ macro_define_command (const char *exp, int from_tty)\n       ++exp;\n       skip_ws (&exp);\n \n-      macro_define_function (macro_main (macro_user_macros), -1, name,\n+      macro_define_function (macro_main (macro_user_macros), -1, name.get (),\n \t\t\t     new_macro.argc, (const char **) new_macro.argv,\n \t\t\t     exp);\n     }\n   else\n     {\n       skip_ws (&exp);\n-      macro_define_object (macro_main (macro_user_macros), -1, name, exp);\n+      macro_define_object (macro_main (macro_user_macros), -1, name.get (),\n+\t\t\t   exp);\n     }\n }\n \n \n static void\n macro_undef_command (const char *exp, int from_tty)\n {\n-  char *name;\n-\n   if (!exp)\n     error (_(\"usage: macro undef NAME\"));\n \n   skip_ws (&exp);\n-  name = extract_identifier (&exp, 0);\n-  if (! name)\n+  gdb::unique_xmalloc_ptr<char> name = extract_identifier (&exp, 0);\n+  if (name == nullptr)\n     error (_(\"Invalid macro name.\"));\n-  macro_undef (macro_main (macro_user_macros), -1, name);\n-  xfree (name);\n+  macro_undef (macro_main (macro_user_macros), -1, name.get ());\n }\n \n "
    }
  ]
}