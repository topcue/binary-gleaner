{
  "sha": "e0ec6b1a8796127c5141647bfe88e260716d6cd4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTBlYzZiMWE4Nzk2MTI3YzUxNDE2NDdiZmU4OGUyNjA3MTZkNmNkNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-04T19:14:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-17T16:41:42Z"
    },
    "message": "Simplify DWARF file name caching\n\nThe DWARF index file name caching code only records when a line table\nhas been read and the reading failed.  However, the code would be\nsimpler if it recorded any attempt, which is what this patch\nimplements.",
    "tree": {
      "sha": "0c767eb98df7037e950e963cb198b3a0896e2549",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c767eb98df7037e950e963cb198b3a0896e2549"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0ec6b1a8796127c5141647bfe88e260716d6cd4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0ec6b1a8796127c5141647bfe88e260716d6cd4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0ec6b1a8796127c5141647bfe88e260716d6cd4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0ec6b1a8796127c5141647bfe88e260716d6cd4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4584f33d68b79c362ce9f3543052027b1676f30e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4584f33d68b79c362ce9f3543052027b1676f30e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4584f33d68b79c362ce9f3543052027b1676f30e"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 7,
    "deletions": 17
  },
  "files": [
    {
      "sha": "c730c528a1ec978eafe391f39ebd378ddbd19f2c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 17,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0ec6b1a8796127c5141647bfe88e260716d6cd4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0ec6b1a8796127c5141647bfe88e260716d6cd4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e0ec6b1a8796127c5141647bfe88e260716d6cd4",
      "patch": "@@ -1989,9 +1989,9 @@ struct dwarf2_per_cu_quick_data\n      expand_symtabs_matching.  */\n   unsigned int mark : 1;\n \n-  /* True if we've tried to read the file table and found there isn't one.\n-     There will be no point in trying to read it again next time.  */\n-  unsigned int no_file_data : 1;\n+  /* True if we've tried to read the file table.  There will be no\n+     point in trying to read it again next time.  */\n+  bool files_read : 1;\n };\n \n /* A subclass of psymbol_functions that arranges to read the DWARF\n@@ -2897,13 +2897,11 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n \n   gdb_assert (! this_cu->is_debug_types);\n \n+  this_cu->v.quick->files_read = true;\n   /* Our callers never want to match partial units -- instead they\n      will match the enclosing full CU.  */\n   if (comp_unit_die->tag == DW_TAG_partial_unit)\n-    {\n-      this_cu->v.quick->no_file_data = 1;\n-      return;\n-    }\n+    return;\n \n   lh_cu = this_cu;\n   slot = NULL;\n@@ -2933,10 +2931,7 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n       lh = dwarf_decode_line_header (line_offset, cu);\n     }\n   if (lh == NULL)\n-    {\n-      lh_cu->v.quick->no_file_data = 1;\n-      return;\n-    }\n+    return;\n \n   qfn = XOBNEW (&per_objfile->per_bfd->obstack, struct quick_file_names);\n   qfn->hash.dwo_unit = cu->dwo_unit;\n@@ -2976,18 +2971,13 @@ dw2_get_file_names (dwarf2_per_cu_data *this_cu,\n   /* Nor type unit groups.  */\n   gdb_assert (! this_cu->type_unit_group_p ());\n \n-  if (this_cu->v.quick->file_names != NULL)\n+  if (this_cu->v.quick->files_read)\n     return this_cu->v.quick->file_names;\n-  /* If we know there is no line data, no point in looking again.  */\n-  if (this_cu->v.quick->no_file_data)\n-    return NULL;\n \n   cutu_reader reader (this_cu, per_objfile);\n   if (!reader.dummy_p)\n     dw2_get_file_names_reader (&reader, reader.comp_unit_die);\n \n-  if (this_cu->v.quick->no_file_data)\n-    return NULL;\n   return this_cu->v.quick->file_names;\n }\n "
    }
  ]
}