{
  "sha": "0598af4880f58af5ce7c15419551362646892c7f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU5OGFmNDg4MGY1OGFmNWNlN2MxNTQxOTU1MTM2MjY0Njg5MmM3Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T20:42:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-04T16:36:31Z"
    },
    "message": "Fix TUI use of \"has_break\" field\n\nThe TUI uses the \"has_break\" in two different ways: sometimes as a\nboolean, and sometimes as flags.\n\nThis patch changes the TUI to be more type-safe here, and fixes the\ncode.  I could not find a bug that this caused, so apparently this is\njust cosmetic.\n\nThis deletes some code from tui_set_disassem_content.  Whenver this is\ncalled, I believe the TUI updates the breakpoint information\nafterward, so this assignment is redundant; which is good because it\nis also incorrect.\n\ngdb/ChangeLog\n2019-07-04  Tom Tromey  <tom@tromey.com>\n\n\tPR tui/24724:\n\t* tui/tui-winsource.c (tui_clear_source_content): Update.\n\t(tui_source_window_base::set_is_exec_point_at): Fix comment.\n\t(tui_update_breakpoint_info): Update.\n\t(tui_set_exec_info_content): Update.\n\t* tui/tui-source.c (tui_set_source_content_nil): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content): Don't set\n\thas_break.\n\t* tui/tui-data.h (enum tui_bp_flag): New.\n\t(tui_bp_flags): New enum flags type.\n\t(struct tui_source_element) <break_mode>: Change type.  Rename\n\tfrom has_break.\n\t(TUI_BP_ENABLED, TUI_BP_DISABLED, TUI_BP_HIT)\n\t(TUI_BP_CONDITIONAL, TUI_BP_HARDWARE): Don't define.  Now enum\n\tconstants.\n\t* tui/tui-winsource.h: Fix comment.",
    "tree": {
      "sha": "86064bd52fa57b21c7b5a145b08c6cb2cd850a4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/86064bd52fa57b21c7b5a145b08c6cb2cd850a4b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0598af4880f58af5ce7c15419551362646892c7f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0598af4880f58af5ce7c15419551362646892c7f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0598af4880f58af5ce7c15419551362646892c7f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0598af4880f58af5ce7c15419551362646892c7f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "213fd9faf563ce5726ce66c8104cbaba44ba9c09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/213fd9faf563ce5726ce66c8104cbaba44ba9c09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/213fd9faf563ce5726ce66c8104cbaba44ba9c09"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 42,
    "deletions": 25
  },
  "files": [
    {
      "sha": "dfd10419042ce41a637835610bbce811e016ff6c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -1,3 +1,22 @@\n+2019-07-04  Tom Tromey  <tom@tromey.com>\n+\n+\tPR tui/24724:\n+\t* tui/tui-winsource.c (tui_clear_source_content): Update.\n+\t(tui_source_window_base::set_is_exec_point_at): Fix comment.\n+\t(tui_update_breakpoint_info): Update.\n+\t(tui_set_exec_info_content): Update.\n+\t* tui/tui-source.c (tui_set_source_content_nil): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content): Don't set\n+\thas_break.\n+\t* tui/tui-data.h (enum tui_bp_flag): New.\n+\t(tui_bp_flags): New enum flags type.\n+\t(struct tui_source_element) <break_mode>: Change type.  Rename\n+\tfrom has_break.\n+\t(TUI_BP_ENABLED, TUI_BP_DISABLED, TUI_BP_HIT)\n+\t(TUI_BP_CONDITIONAL, TUI_BP_HARDWARE): Don't define.  Now enum\n+\tconstants.\n+\t* tui/tui-winsource.h: Fix comment.\n+\n 2019-07-04  Alan Hayward  <alan.hayward@arm.com>\n \n \t* aarch32-linux-nat.h (VFP_REGS_SIZE): Remove define."
    },
    {
      "sha": "412be1ce75694f1fd2f3d5d5b0b58ea6895790e9",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -164,6 +164,18 @@ struct tui_layout_def\n   enum tui_win_type display_mode;\n };\n \n+/* Flags to tell what kind of breakpoint is at current line.  */\n+enum tui_bp_flag\n+{\n+  TUI_BP_ENABLED = 0x01,\n+  TUI_BP_DISABLED = 0x02,\n+  TUI_BP_HIT = 0x04,\n+  TUI_BP_CONDITIONAL = 0x08,\n+  TUI_BP_HARDWARE = 0x10\n+};\n+\n+DEF_ENUM_FLAGS_TYPE (enum tui_bp_flag, tui_bp_flags);\n+\n /* Elements in the Source/Disassembly Window.  */\n struct tui_source_element\n {\n@@ -181,7 +193,7 @@ struct tui_source_element\n   char *line = nullptr;\n   struct tui_line_or_address line_or_addr;\n   bool is_exec_point = false;\n-  int has_break = 0;\n+  tui_bp_flags break_mode = 0;\n };\n \n \n@@ -191,13 +203,6 @@ struct tui_source_element\n # define MAX_LOCATOR_ELEMENT_LEN        1024\n #endif\n \n-/* Flags to tell what kind of breakpoint is at current line.  */\n-#define TUI_BP_ENABLED      0x01\n-#define TUI_BP_DISABLED     0x02\n-#define TUI_BP_HIT          0x04\n-#define TUI_BP_CONDITIONAL  0x08\n-#define TUI_BP_HARDWARE     0x10\n-\n /* Position of breakpoint markers in the exec info string.  */\n #define TUI_BP_HIT_POS      0\n #define TUI_BP_BREAK_POS    1"
    },
    {
      "sha": "b22368eccf7f9908b7db5f1d2caa5b62d314ea4e",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -239,12 +239,6 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n       src->line_or_addr.u.addr = asm_lines[i].addr;\n       src->is_exec_point = asm_lines[i].addr == cur_pc;\n \n-      /* See whether there is a breakpoint installed.  */\n-      src->has_break = (!src->is_exec_point\n-\t\t\t&& breakpoint_here_p (current_program_space->aspace,\n-\t\t\t\t\t      pc)\n-\t\t\t!= no_breakpoint_here);\n-\n       xfree (asm_lines[i].addr_string);\n       xfree (asm_lines[i].insn);\n     }"
    },
    {
      "sha": "81ede061570dc909b1e87530a1978f3f7cbf655e",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -240,7 +240,7 @@ tui_set_source_content_nil (struct tui_source_window_base *win_info,\n       element->line_or_addr.loa = LOA_LINE;\n       element->line_or_addr.u.line_no = 0;\n       element->is_exec_point = false;\n-      element->has_break = FALSE;\n+      element->break_mode = 0;\n \n       /* Set the contents of the line to blank.  */\n       element->line[0] = (char) 0;"
    },
    {
      "sha": "dbede410278f6d5a27e1ab1b0845771bdf7a71c7",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -217,7 +217,7 @@ tui_clear_source_content (struct tui_source_window_base *win_info,\n \t{\n \t  struct tui_source_element *element = &win_info->content[i];\n \n-\t  element->has_break = FALSE;\n+\t  element->break_mode = 0;\n \t  element->is_exec_point = false;\n \t}\n     }\n@@ -344,7 +344,7 @@ tui_source_window_base::do_scroll_horizontal (int num_to_scroll)\n }\n \n \n-/* Set or clear the has_break flag in the line whose line is\n+/* Set or clear the is_exec_point flag in the line whose line is\n    line_no.  */\n \n void\n@@ -415,7 +415,6 @@ tui_update_breakpoint_info (struct tui_source_window_base *win,\n     {\n       struct breakpoint *bp;\n       extern struct breakpoint *breakpoint_chain;\n-      int mode;\n       struct tui_source_element *line;\n \n       line = &win->content[i];\n@@ -425,7 +424,7 @@ tui_update_breakpoint_info (struct tui_source_window_base *win,\n       /* Scan each breakpoint to see if the current line has something to\n          do with it.  Identify enable/disabled breakpoints as well as\n          those that we already hit.  */\n-      mode = 0;\n+      tui_bp_flags mode = 0;\n       for (bp = breakpoint_chain;\n            bp != NULL;\n            bp = bp->next)\n@@ -460,10 +459,10 @@ tui_update_breakpoint_info (struct tui_source_window_base *win,\n \t\t}\n \t    }\n         }\n-      if (line->has_break != mode)\n+      if (line->break_mode != mode)\n         {\n-          line->has_break = mode;\n-          need_refresh = 1;\n+          line->break_mode = mode;\n+          need_refresh = true;\n         }\n     }\n   return need_refresh;\n@@ -496,7 +495,7 @@ tui_set_exec_info_content (struct tui_source_window_base *win_info)\n \t{\n \t  tui_exec_info_content &element = content[i];\n \t  struct tui_source_element *src_element;\n-\t  int mode;\n+\t  tui_bp_flags mode;\n \n \t  src_element = &win_info->content[i];\n \n@@ -505,7 +504,7 @@ tui_set_exec_info_content (struct tui_source_window_base *win_info)\n \n \t  /* Now update the exec info content based upon the state\n \t     of each line as indicated by the source content.  */\n-\t  mode = src_element->has_break;\n+\t  mode = src_element->break_mode;\n \t  if (mode & TUI_BP_HIT)\n \t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n \t  else if (mode & (TUI_BP_ENABLED | TUI_BP_DISABLED))"
    },
    {
      "sha": "2a85a008812df32a7982bcc8324ba7aa571d9249",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0598af4880f58af5ce7c15419551362646892c7f/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=0598af4880f58af5ce7c15419551362646892c7f",
      "patch": "@@ -31,7 +31,7 @@ struct tui_win_info;\n    state changed.  */\n extern void tui_update_all_breakpoint_info (void);\n \n-/* Scan the source window and the breakpoints to update the hasBreak\n+/* Scan the source window and the breakpoints to update the break_mode\n    information for each line.  Returns 1 if something changed and the\n    execution window must be refreshed.  */\n extern int tui_update_breakpoint_info (struct tui_source_window_base *win,"
    }
  ]
}