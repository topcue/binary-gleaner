{
  "sha": "3128916d88bf1bf0e4688de1529f481d57bd331a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzEyODkxNmQ4OGJmMWJmMGU0Njg4ZGUxNTI5ZjQ4MWQ1N2JkMzMxYQ==",
  "commit": {
    "author": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2020-07-07T13:01:48Z"
    },
    "committer": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2020-07-07T13:01:48Z"
    },
    "message": "arc: Improve error messages when assembling\n\ngas/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/tc-arc.c (find_opcode_match): Add error messages.\n\t* testsuite/gas/arc/add_s-err.s: Update test.\n\t* testsuite/gas/arc/asm-errors.err: Likewise.\n\t* testsuite/gas/arc/cpu-em-err.s: Likewise.\n\t* testsuite/gas/arc/hregs-err.s: Likewise.\n\t* testsuite/gas/arc/warn.s: Likewise.",
    "tree": {
      "sha": "b3e31e1ca4c79c195d189f04196b1b4e42c60ad0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b3e31e1ca4c79c195d189f04196b1b4e42c60ad0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3128916d88bf1bf0e4688de1529f481d57bd331a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3128916d88bf1bf0e4688de1529f481d57bd331a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3128916d88bf1bf0e4688de1529f481d57bd331a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3128916d88bf1bf0e4688de1529f481d57bd331a/comments",
  "author": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f337259fbd5ee31c6794158457dcd0d23e5c0f13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f337259fbd5ee31c6794158457dcd0d23e5c0f13",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f337259fbd5ee31c6794158457dcd0d23e5c0f13"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 63,
    "deletions": 30
  },
  "files": [
    {
      "sha": "0be7fa3fcc8cc86af18a57503205a37f8bfed4a9",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-07  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/tc-arc.c (find_opcode_match): Add error messages.\n+\t* testsuite/gas/arc/add_s-err.s: Update test.\n+\t* testsuite/gas/arc/asm-errors.err: Likewise.\n+\t* testsuite/gas/arc/cpu-em-err.s: Likewise.\n+\t* testsuite/gas/arc/hregs-err.s: Likewise.\n+\t* testsuite/gas/arc/warn.s: Likewise.\n+\n 2020-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26212"
    },
    {
      "sha": "0a22d3844d4c569d59ac4cb7bc905e8a89407890",
      "filename": "gas/config/tc-arc.c",
      "status": "modified",
      "additions": 42,
      "deletions": 18,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/config/tc-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/config/tc-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arc.c?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -1758,8 +1758,9 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n   int ntok = *pntok;\n   int got_cpu_match = 0;\n   expressionS bktok[MAX_INSN_ARGS];\n-  int bkntok;\n+  int bkntok, maxerridx = 0;\n   expressionS emptyE;\n+  const char *tmpmsg = NULL;\n \n   arc_opcode_hash_entry_iterator_init (&iter);\n   memset (&emptyE, 0, sizeof (emptyE));\n@@ -1806,7 +1807,7 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t    {\n             case ARC_OPERAND_ADDRTYPE:\n \t      {\n-\t\t*errmsg = NULL;\n+\t\ttmpmsg = NULL;\n \n \t\t/* Check to be an address type.  */\n \t\tif (tok[tokidx].X_op != O_addrtype)\n@@ -1817,8 +1818,8 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t\t   address type.  */\n \t\tgas_assert (operand->insert != NULL);\n \t\t(*operand->insert) (0, tok[tokidx].X_add_number,\n-\t\t\t\t    errmsg);\n-\t\tif (*errmsg != NULL)\n+\t\t\t\t    &tmpmsg);\n+\t\tif (tmpmsg != NULL)\n \t\t  goto match_failed;\n \t      }\n               break;\n@@ -1844,11 +1845,11 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t      /* Special handling?  */\n \t      if (operand->insert)\n \t\t{\n-\t\t  *errmsg = NULL;\n+\t\t  tmpmsg = NULL;\n \t\t  (*operand->insert)(0,\n \t\t\t\t     regno (tok[tokidx].X_add_number),\n-\t\t\t\t     errmsg);\n-\t\t  if (*errmsg)\n+\t\t\t\t     &tmpmsg);\n+\t\t  if (tmpmsg)\n \t\t    {\n \t\t      if (operand->flags & ARC_OPERAND_IGNORE)\n \t\t\t{\n@@ -1957,26 +1958,35 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t\t\t}\n \n \t\t      if (val < min || val > max)\n-\t\t\tgoto match_failed;\n+\t\t\t{\n+\t\t\t  tmpmsg = _(\"immediate is out of bounds\");\n+\t\t\t  goto match_failed;\n+\t\t\t}\n \n \t\t      /* Check alignments.  */\n \t\t      if ((operand->flags & ARC_OPERAND_ALIGNED32)\n \t\t\t  && (val & 0x03))\n-\t\t\tgoto match_failed;\n+\t\t\t{\n+\t\t\t  tmpmsg = _(\"immediate is not 32bit aligned\");\n+\t\t\t  goto match_failed;\n+\t\t\t}\n \n \t\t      if ((operand->flags & ARC_OPERAND_ALIGNED16)\n \t\t\t  && (val & 0x01))\n-\t\t\tgoto match_failed;\n+\t\t\t{\n+\t\t\t  tmpmsg = _(\"immediate is not 16bit aligned\");\n+\t\t\t  goto match_failed;\n+\t\t\t}\n \t\t    }\n \t\t  else if (operand->flags & ARC_OPERAND_NCHK)\n \t\t    {\n \t\t      if (operand->insert)\n \t\t\t{\n-\t\t\t  *errmsg = NULL;\n+\t\t\t  tmpmsg = NULL;\n \t\t\t  (*operand->insert)(0,\n \t\t\t\t\t     tok[tokidx].X_add_number,\n-\t\t\t\t\t     errmsg);\n-\t\t\t  if (*errmsg)\n+\t\t\t\t\t     &tmpmsg);\n+\t\t\t  if (tmpmsg)\n \t\t\t    goto match_failed;\n \t\t\t}\n \t\t      else if (!(operand->flags & ARC_OPERAND_IGNORE))\n@@ -1997,11 +2007,11 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t\t      regs |= get_register (tok[tokidx].X_op_symbol);\n \t\t      if (operand->insert)\n \t\t\t{\n-\t\t\t  *errmsg = NULL;\n+\t\t\t  tmpmsg = NULL;\n \t\t\t  (*operand->insert)(0,\n \t\t\t\t\t     regs,\n-\t\t\t\t\t     errmsg);\n-\t\t\t  if (*errmsg)\n+\t\t\t\t\t     &tmpmsg);\n+\t\t\t  if (tmpmsg)\n \t\t\t    goto match_failed;\n \t\t\t}\n \t\t      else\n@@ -2044,7 +2054,11 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t\t      || t->X_op == O_absent\n \t\t      || t->X_op == O_register\n \t\t      || (t->X_add_number != tok[tokidx].X_add_number))\n-\t\t    goto match_failed;\n+\t\t    {\n+\t\t      tmpmsg = _(\"operand is not duplicate of the \"\n+\t\t\t\t \"previous one\");\n+\t\t      goto match_failed;\n+\t\t    }\n \t\t}\n \t      t = &tok[tokidx];\n \t      break;\n@@ -2060,7 +2074,10 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \n       /* Setup ready for flag parsing.  */\n       if (!parse_opcode_flags (opcode, nflgs, first_pflag))\n-\tgoto match_failed;\n+\t{\n+\t  tmpmsg = _(\"flag mismatch\");\n+\t  goto match_failed;\n+\t}\n \n       pr_debug (\"flg\");\n       /* Possible match -- did we use all of our input?  */\n@@ -2070,12 +2087,19 @@ find_opcode_match (const struct arc_opcode_hash_entry *entry,\n \t  pr_debug (\"\\n\");\n \t  return opcode;\n \t}\n+      tmpmsg = _(\"too many arguments\");\n \n     match_failed:;\n       pr_debug (\"\\n\");\n       /* Restore the original parameters.  */\n       memcpy (tok, bktok, MAX_INSN_ARGS * sizeof (*tok));\n       ntok = bkntok;\n+      if (tokidx >= maxerridx\n+\t  && tmpmsg)\n+\t{\n+\t  maxerridx = tokidx;\n+\t  *errmsg = tmpmsg;\n+\t}\n     }\n \n   if (*pcpumatch)"
    },
    {
      "sha": "b7b70829ed06228245b0762894585c8d74899c6e",
      "filename": "gas/testsuite/gas/arc/add_s-err.s",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/add_s-err.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/add_s-err.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arc/add_s-err.s?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -6,5 +6,5 @@\n         ;; The following insns are accepted by ARCv2 only\n         add_s r4,r4,-1          ; { dg-error \"Error: register must be either r0-r3 or r12-r15 for instruction\" }\n         add_s 0,0xAAAA5555,-1   ; { dg-error \"Error: inappropriate arguments for opcode 'add_s'\" }\n-        add_s r0,r15,0x20       ; { dg-error \"Error: inappropriate arguments for opcode 'add_s'\" }\n-        add_s r1,r15,0x20       ; { dg-error \"Error: inappropriate arguments for opcode 'add_s'\" }\n+        add_s r0,r15,0x20       ; { dg-error \"Error: immediate is out of bounds for instruction 'add_s'\" }\n+        add_s r1,r15,0x20       ; { dg-error \"Error: immediate is out of bounds for instruction 'add_s'\" }"
    },
    {
      "sha": "ccc65feb5663710a52d963a04ac6361d347261ef",
      "filename": "gas/testsuite/gas/arc/asm-errors.err",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/asm-errors.err",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/asm-errors.err",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arc/asm-errors.err?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -1,6 +1,6 @@\n [^:]*: Assembler messages:\n-[^:]*:2: Error: inappropriate arguments for opcode 'adc'\n-[^:]*:3: Error: inappropriate arguments for opcode 'adc'\n-[^:]*:4: Error: inappropriate arguments for opcode 'adc'\n+[^:]*:2: Error: flag mismatch for instruction 'adc'\n+[^:]*:3: Error: flag mismatch for instruction 'adc'\n+[^:]*:4: Error: flag mismatch for instruction 'adc'\n [^:]*:5: Error: extra comma\n [^:]*:5: Error: syntax error"
    },
    {
      "sha": "49b29512757bc5987dc6819fdd2e76a28cf16ffd",
      "filename": "gas/testsuite/gas/arc/cpu-em-err.s",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/cpu-em-err.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/cpu-em-err.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arc/cpu-em-err.s?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -1,4 +1,4 @@\n ;;; Check if .cpu em doesn't have code-density ops.\n ; { dg-do assemble { target arc*-*-* } }\n \t.cpu\tem\n-\tsub_s r15,r2,r15\t; { dg-error \"Error: inappropriate arguments for opcode 'sub_s'\" }\n+\tsub_s r15,r2,r15 ; { dg-error \"Error: register must be SP for instruction 'sub_s'\" }"
    },
    {
      "sha": "a76415b84358f7558895e1b7d7acd90406287225",
      "filename": "gas/testsuite/gas/arc/hregs-err.s",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/hregs-err.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/hregs-err.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arc/hregs-err.s?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -1,11 +1,11 @@\n ; { dg-do assemble { target arc*-*-* } }\n \t.cpu\tHS\n \t.text\n-\tld_s\tr0,[r32,28]\t; { dg-error \"Error: register must be R1 for instruction 'ld_s'\" }\n+\tld_s\tr0,[r32,28]\t; { dg-error \"Error: register must be GP for instruction 'ld_s'\" }\n \tld_s\tr0,[r28,28]\n \tld_s\tr1,[r32,28]\t; { dg-error \"Error: register must be GP for instruction 'ld_s'\" }\n-\tld_s\tr2,[r32,28]\t; { dg-error \"Error: register must be R1 for instruction 'ld_s'\" }\n+\tld_s\tr2,[r32,28]\t; { dg-error \"Error: register must be PCL for instruction 'ld_s'\" }\n \tld_s\tr3,[pcl,0x10]\n-\tadd_s\tr0,r0,r32\t; { dg-error \"Error: inappropriate arguments for opcode 'add_s'\" }\n+\tadd_s\tr0,r0,r32\t; { dg-error \"Error: register out of range for instruction 'add_s'\" }\n \tadd_s\tr0,r0,r28\n-\tmov_s.ne r0,r32\t\t; { dg-error \"Error: inappropriate arguments for opcode 'mov_s'\" }\n+\tmov_s.ne r0,r32\t\t; { dg-error \"Error: register out of range for instruction 'mov_s'\" }"
    },
    {
      "sha": "592ee31bfcf020b9d8dab08ad3028a3e9549de9a",
      "filename": "gas/testsuite/gas/arc/warn.s",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/warn.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3128916d88bf1bf0e4688de1529f481d57bd331a/gas/testsuite/gas/arc/warn.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arc/warn.s?ref=3128916d88bf1bf0e4688de1529f481d57bd331a",
      "patch": "@@ -3,9 +3,9 @@\n ; { dg-do assemble { target arc*-*-* } }\n \n \tb.d foo\n-\tmov r0,256\t\n+\tmov r0,256\n \n-\tj.d foo\t\t; { dg-warning \"inappropriate arguments for opcode\" \"inappropriate arguments for opcode\" }\n+\tj.d foo\t\t; { dg-error \"Error: flag mismatch for instruction 'j'\" }\n \tmov r0,r1\n \n foo:"
    }
  ]
}