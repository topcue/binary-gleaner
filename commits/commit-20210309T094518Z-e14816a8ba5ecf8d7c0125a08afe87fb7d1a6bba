{
  "sha": "e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTE0ODE2YThiYTVlY2Y4ZDdjMDEyNWEwOGFmZTg3ZmI3ZDFhNmJiYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-25T11:41:57Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-09T09:45:18Z"
    },
    "message": "gdb/fortran: add support for RANK keyword\n\ngfortran supports the RANK keyword, see:\n\n  https://gcc.gnu.org/onlinedocs/gfortran/RANK.html#RANK\n\nthis commit adds support for this keyword to GDB's Fortran expression\nparser.\n\ngdb/ChangeLog:\n\n\t* f-exp.h (eval_op_f_rank): Declare.\n\t(expr::fortran_rank_operation): New typedef.\n\t* f-exp.y (exp): Handle UNOP_FORTRAN_RANK after parsing an\n\tUNOP_INTRINSIC.\n\t(f77_keywords): Add \"rank\" keyword.\n\t* f-lang.c (eval_op_f_rank): New function.\n\t* std-operator.def (UNOP_FORTRAN_RANK): New operator.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/rank.exp: New file.\n\t* gdb.fortran/rank.f90: New file.",
    "tree": {
      "sha": "718883b66af773f86fc1ef753db65f8e33456f1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/718883b66af773f86fc1ef753db65f8e33456f1c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "742732c7f0a989eaba7c1acac3ca5eeaa274df0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/742732c7f0a989eaba7c1acac3ca5eeaa274df0e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/742732c7f0a989eaba7c1acac3ca5eeaa274df0e"
    }
  ],
  "stats": {
    "total": 189,
    "additions": 189,
    "deletions": 0
  },
  "files": [
    {
      "sha": "59638cc479e3aa85f8b4042349f0388cec2b87ef",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-exp.h (eval_op_f_rank): Declare.\n+\t(expr::fortran_rank_operation): New typedef.\n+\t* f-exp.y (exp): Handle UNOP_FORTRAN_RANK after parsing an\n+\tUNOP_INTRINSIC.\n+\t(f77_keywords): Add \"rank\" keyword.\n+\t* f-lang.c (eval_op_f_rank): New function.\n+\t* std-operator.def (UNOP_FORTRAN_RANK): New operator.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* printcmd.c (set_command): Remove null check."
    },
    {
      "sha": "f23c426b34bbaf8858590a2567bfd3bcff923d5c",
      "filename": "gdb/f-exp.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.h?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -74,6 +74,17 @@ extern struct value * eval_op_f_allocated (struct type *expect_type,\n \t\t\t\t\t   enum exp_opcode op,\n \t\t\t\t\t   struct value *arg1);\n \n+/* Implement the evaluation of UNOP_FORTRAN_RANK.  EXPECTED_TYPE, EXP, and\n+   NOSIDE are as for expression::evaluate (see expression.h).  OP will\n+   always be UNOP_FORTRAN_RANK, and ARG1 is the argument being passed to\n+   the expression.   */\n+\n+extern struct value *eval_op_f_rank (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside,\n+\t\t\t\t     enum exp_opcode op,\n+\t\t\t\t     struct value *arg1);\n+\n namespace expr\n {\n \n@@ -94,6 +105,8 @@ using fortran_associated_1arg = unop_operation<FORTRAN_ASSOCIATED,\n \t\t\t\t\t       eval_op_f_associated>;\n using fortran_associated_2arg = binop_operation<FORTRAN_ASSOCIATED,\n \t\t\t\t\t\teval_op_f_associated>;\n+using fortran_rank_operation = unop_operation<UNOP_FORTRAN_RANK,\n+\t\t\t\t\t      eval_op_f_rank>;\n \n /* The Fortran \"complex\" operation.  */\n class fortran_cmplx_operation"
    },
    {
      "sha": "02e35c83b051288963b50b3150dd5959b743938b",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -320,6 +320,9 @@ exp\t:\tUNOP_INTRINSIC '(' exp ')'\n \t\t\t    case UNOP_FORTRAN_ALLOCATED:\n \t\t\t      pstate->wrap<fortran_allocated_operation> ();\n \t\t\t      break;\n+\t\t\t    case UNOP_FORTRAN_RANK:\n+\t\t\t      pstate->wrap<fortran_rank_operation> ();\n+\t\t\t      break;\n \t\t\t    default:\n \t\t\t      gdb_assert_not_reached (\"unhandled intrinsic\");\n \t\t\t    }\n@@ -1139,6 +1142,7 @@ static const struct token f77_keywords[] =\n   { \"ubound\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_UBOUND, false },\n   { \"allocated\", UNOP_INTRINSIC, UNOP_FORTRAN_ALLOCATED, false },\n   { \"associated\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_ASSOCIATED, false },\n+  { \"rank\", UNOP_INTRINSIC, UNOP_FORTRAN_RANK, false },\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "d30b13d8b6d6c58af1304c142bdb3be6b9052686",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -773,6 +773,26 @@ eval_op_f_allocated (struct type *expect_type, struct expression *exp,\n   return value_from_longest (result_type, result_value);\n }\n \n+/* See f-exp.h.  */\n+\n+struct value *\n+eval_op_f_rank (struct type *expect_type,\n+\t\tstruct expression *exp,\n+\t\tenum noside noside,\n+\t\tenum exp_opcode op,\n+\t\tstruct value *arg1)\n+{\n+  gdb_assert (op == UNOP_FORTRAN_RANK);\n+\n+  struct type *result_type\n+    = builtin_f_type (exp->gdbarch)->builtin_integer;\n+  struct type *type = check_typedef (value_type (arg1));\n+  if (type->code () != TYPE_CODE_ARRAY)\n+    return value_from_longest (result_type, 0);\n+  LONGEST ndim = calc_f77_array_dims (type);\n+  return value_from_longest (result_type, ndim);\n+}\n+\n namespace expr\n {\n "
    },
    {
      "sha": "158bd24476554eb20e5ce45bede07b4868720d8c",
      "filename": "gdb/std-operator.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/std-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/std-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/std-operator.def?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -378,6 +378,7 @@ OP (UNOP_FORTRAN_KIND)\n OP (UNOP_FORTRAN_FLOOR)\n OP (UNOP_FORTRAN_CEILING)\n OP (UNOP_FORTRAN_ALLOCATED)\n+OP (UNOP_FORTRAN_RANK)\n \n /* Two operand builtins.  */\n OP (BINOP_FORTRAN_CMPLX)"
    },
    {
      "sha": "f221157e51ff4ddc8596772bb278971941c1f9a7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/rank.exp: New file.\n+\t* gdb.fortran/rank.f90: New file.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.fortran/debug-expr.exp: Update tests."
    },
    {
      "sha": "86af7111f47f22497d8166e048e3e1ba9cfa9ee4",
      "filename": "gdb/testsuite/gdb.fortran/rank.exp",
      "status": "added",
      "additions": 79,
      "deletions": 0,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/gdb.fortran/rank.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/gdb.fortran/rank.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/rank.exp?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -0,0 +1,79 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Testing GDB's implementation of RANK keyword.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Test Breakpoint\"]\n+gdb_breakpoint [gdb_get_line_number \"Final Breakpoint\"]\n+\n+# We place a limit on the number of tests that can be run, just in\n+# case something goes wrong, and GDB gets stuck in an loop here.\n+set found_final_breakpoint false\n+set test_count 0\n+while { $test_count < 500 } {\n+    with_test_prefix \"test $test_count\" {\n+\tincr test_count\n+\n+\tgdb_test_multiple \"continue\" \"continue\" {\n+\t    -re -wrap \"! Test Breakpoint\" {\n+\t\t# We can run a test from here.\n+\t    }\n+\t    -re \"! Final Breakpoint\" {\n+\t\t# We're done with the tests.\n+\t\tset found_final_breakpoint true\n+\t    }\n+\t}\n+\n+\tif ($found_final_breakpoint) {\n+\t    break\n+\t}\n+\n+\t# First grab the expected answer.\n+\tset answer [get_valueof \"\" \"answer\" \"**unknown**\"]\n+\n+\t# Now move up a frame and figure out a command for us to run\n+\t# as a test.\n+\tset command \"\"\n+\tgdb_test_multiple \"up\" \"up\" {\n+\t    -re -wrap \"\\r\\n\\[0-9\\]+\\[ \\t\\]+call test_rank \\\\((\\[^\\r\\n\\]+)\\\\)\" {\n+\t\tset command $expect_out(1,string)\n+\t    }\n+\t}\n+\n+\tgdb_assert { ![string equal $command \"\"] } \"found a command to run\"\n+\n+\tgdb_test \"p $command\" \" = $answer\"\n+    }\n+}\n+\n+# Ensure we reached the final breakpoint.  If more tests have been added\n+# to the test script, and this starts failing, then the safety 'while'\n+# loop above might need to be increased.\n+gdb_assert {$found_final_breakpoint} \"ran all compiled in tests\""
    },
    {
      "sha": "66de2bb9ed76f56102d6280345dd76589a8688a5",
      "filename": "gdb/testsuite/gdb.fortran/rank.f90",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/gdb.fortran/rank.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba/gdb/testsuite/gdb.fortran/rank.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/rank.f90?ref=e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "patch": "@@ -0,0 +1,57 @@\n+! Copyright 2021 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+!\n+! Start of test program.\n+!\n+program test\n+\n+  ! Things to ask questions about.\n+  integer, target :: array_1d (8:10) = 0\n+  integer, target :: array_2d (1:3, 4:7) = 0\n+  integer :: other_1d (4:5, -3:-1, 99:101) = 0\n+  integer, pointer :: array_1d_p (:) => null ()\n+  integer, pointer :: array_2d_p (:,:) => null ()\n+\n+  integer :: an_integer = 0\n+  real :: a_real = 0.0\n+\n+  ! The start of the tests.\n+  call test_rank (rank (array_1d))\n+  call test_rank (rank (array_2d))\n+  call test_rank (rank (other_1d))\n+  call test_rank (rank (array_1d_p))\n+  call test_rank (rank (array_2d_p))\n+\n+  array_1d_p => array_1d\n+  array_2d_p => array_2d\n+\n+  call test_rank (rank (array_1d_p))\n+  call test_rank (rank (array_2d_p))\n+\n+  call test_rank (rank (an_integer))\n+  call test_rank (rank (a_real))\n+\n+  print *, \"\" ! Final Breakpoint\n+\n+contains\n+\n+  subroutine test_rank (answer)\n+    integer :: answer\n+\n+    print *,answer\t! Test Breakpoint\n+  end subroutine test_rank\n+\n+end program test"
    }
  ]
}