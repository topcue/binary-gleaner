{
  "sha": "d2f325df0b54b0fed87f74c284f0a067b7233a14",
  "node_id": "C_kwDOANOeidoAKGQyZjMyNWRmMGI1NGIwZmVkODdmNzRjMjg0ZjBhMDY3YjcyMzNhMTQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-28T20:02:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-10-21T20:10:54Z"
    },
    "message": "gdbserver: make thread_info non-POD\n\nAdd a constructor and a destructor.  The constructor takes care of the\ninitialization that happened in add_thread, while the destructor takes\ncare of the freeing that happened in free_one_thread.  This is needed to\nmake target_waitstatus non-POD, as thread_info contains a member of that\ntype.\n\nChange-Id: I1db321b4de9dd233ede0d5c101950f1d6f1d13b7",
    "tree": {
      "sha": "7415bedf2283d7f1ce356275aa628463870a984e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7415bedf2283d7f1ce356275aa628463870a984e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d2f325df0b54b0fed87f74c284f0a067b7233a14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2f325df0b54b0fed87f74c284f0a067b7233a14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d2f325df0b54b0fed87f74c284f0a067b7233a14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2f325df0b54b0fed87f74c284f0a067b7233a14/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "add3db9182348555b80ec850b58a6f423b0e6bc5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/add3db9182348555b80ec850b58a6f423b0e6bc5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/add3db9182348555b80ec850b58a6f423b0e6bc5"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 18,
    "deletions": 14
  },
  "files": [
    {
      "sha": "fc9b4d204355901bb528008cdc119c5e05dcd35c",
      "filename": "gdbserver/gdbthread.h",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2f325df0b54b0fed87f74c284f0a067b7233a14/gdbserver/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2f325df0b54b0fed87f74c284f0a067b7233a14/gdbserver/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/gdbthread.h?ref=d2f325df0b54b0fed87f74c284f0a067b7233a14",
      "patch": "@@ -29,20 +29,31 @@ struct regcache;\n \n struct thread_info\n {\n+  thread_info (ptid_t id, void *target_data)\n+    : id (id), target_data (target_data)\n+  {\n+    this->last_status.kind = TARGET_WAITKIND_IGNORE;\n+  }\n+\n+  ~thread_info ()\n+  {\n+    free_register_cache (this->regcache_data);\n+  }\n+\n   /* The id of this thread.  */\n   ptid_t id;\n \n   void *target_data;\n-  struct regcache *regcache_data;\n+  struct regcache *regcache_data = nullptr;\n \n   /* The last resume GDB requested on this thread.  */\n-  enum resume_kind last_resume_kind;\n+  enum resume_kind last_resume_kind = resume_continue;\n \n   /* The last wait status reported for this thread.  */\n   struct target_waitstatus last_status;\n \n   /* True if LAST_STATUS hasn't been reported to GDB yet.  */\n-  int status_pending_p;\n+  int status_pending_p = 0;\n \n   /* Given `while-stepping', a thread may be collecting data for more\n      than one tracepoint simultaneously.  E.g.:\n@@ -67,10 +78,10 @@ struct thread_info\n    tracepoint actions this thread is now collecting; NULL if empty.\n    Each item in the list holds the current step of the while-stepping\n    action.  */\n-  struct wstep_state *while_stepping;\n+  struct wstep_state *while_stepping = nullptr;\n \n   /* Branch trace target information for this thread.  */\n-  struct btrace_target_info *btrace;\n+  struct btrace_target_info *btrace = nullptr;\n };\n \n extern std::list<thread_info *> all_threads;"
    },
    {
      "sha": "a636266c798fd4a1d5a16c883544c77fa1a73dcc",
      "filename": "gdbserver/inferiors.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2f325df0b54b0fed87f74c284f0a067b7233a14/gdbserver/inferiors.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2f325df0b54b0fed87f74c284f0a067b7233a14/gdbserver/inferiors.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/inferiors.cc?ref=d2f325df0b54b0fed87f74c284f0a067b7233a14",
      "patch": "@@ -36,19 +36,13 @@ static std::string current_inferior_cwd;\n struct thread_info *\n add_thread (ptid_t thread_id, void *target_data)\n {\n-  struct thread_info *new_thread = XCNEW (struct thread_info);\n-\n-  new_thread->id = thread_id;\n-  new_thread->last_resume_kind = resume_continue;\n-  new_thread->last_status.kind = TARGET_WAITKIND_IGNORE;\n+  thread_info *new_thread = new thread_info (thread_id, target_data);\n \n   all_threads.push_back (new_thread);\n \n   if (current_thread == NULL)\n     current_thread = new_thread;\n \n-  new_thread->target_data = target_data;\n-\n   return new_thread;\n }\n \n@@ -93,8 +87,7 @@ find_any_thread_of_pid (int pid)\n static void\n free_one_thread (thread_info *thread)\n {\n-  free_register_cache (thread_regcache_data (thread));\n-  free (thread);\n+  delete thread;\n }\n \n void"
    }
  ]
}