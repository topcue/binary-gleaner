{
  "sha": "eccd14b3f5927107c3b6ce5993fa9b9c054b27c3",
  "node_id": "C_kwDOANOeidoAKGVjY2QxNGIzZjU5MjcxMDdjM2I2Y2U1OTkzZmE5YjljMDU0YjI3YzM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-01T16:41:32Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-03T21:48:42Z"
    },
    "message": "gdb: change some alias functions parameters to const-reference\n\nNow that we use intrusive list to link aliases, it becomes easier to\npass cmd_list_element arguments by const-reference rather than by\npointer to some functions, change a few.\n\nChange-Id: Id0df648ed26e9447da0671fc2c858981cda31df8",
    "tree": {
      "sha": "2a3173444879d10a48ab24031e67078ad56940e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a3173444879d10a48ab24031e67078ad56940e4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c471bdb19858ad0e7a0d5f5017fd5e1892525da8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c471bdb19858ad0e7a0d5f5017fd5e1892525da8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c471bdb19858ad0e7a0d5f5017fd5e1892525da8"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 32,
    "deletions": 32
  },
  "files": [
    {
      "sha": "b8be3f54921f5be602b9f3e31c5b12c6acb0c637",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eccd14b3f5927107c3b6ce5993fa9b9c054b27c3/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=eccd14b3f5927107c3b6ce5993fa9b9c054b27c3",
      "patch": "@@ -86,7 +86,7 @@ lookup_cmd_with_subcommands (cmd_list_element **subcommands,\n }\n \n static void\n-print_help_for_command (struct cmd_list_element *c,\n+print_help_for_command (const cmd_list_element &c,\n \t\t\tbool recurse, struct ui_file *stream);\n \n static void\n@@ -1314,39 +1314,39 @@ add_com_suppress_notification (const char *name, enum command_class theclass,\n /* Print the prefix of C followed by name of C in title style.  */\n \n static void\n-fput_command_name_styled (struct cmd_list_element *c, struct ui_file *stream)\n+fput_command_name_styled (const cmd_list_element &c, struct ui_file *stream)\n {\n   std::string prefixname\n-    = c->prefix == nullptr ? \"\" : c->prefix->prefixname ();\n+    = c.prefix == nullptr ? \"\" : c.prefix->prefixname ();\n \n   fprintf_styled (stream, title_style.style (), \"%s%s\",\n-\t\t  prefixname.c_str (), c->name);\n+\t\t  prefixname.c_str (), c.name);\n }\n \n /* Print the definition of alias C using title style for alias\n    and aliased command.  */\n \n static void\n-fput_alias_definition_styled (struct cmd_list_element *c,\n+fput_alias_definition_styled (const cmd_list_element &c,\n \t\t\t      struct ui_file *stream)\n {\n-  gdb_assert (c->is_alias ());\n+  gdb_assert (c.is_alias ());\n   fputs_filtered (\"  alias \", stream);\n   fput_command_name_styled (c, stream);\n   fprintf_filtered (stream, \" = \");\n-  fput_command_name_styled (c->alias_target, stream);\n-  fprintf_filtered (stream, \" %s\\n\", c->default_args.c_str ());\n+  fput_command_name_styled (*c.alias_target, stream);\n+  fprintf_filtered (stream, \" %s\\n\", c.default_args.c_str ());\n }\n \n /* Print the definition of the aliases of CMD that have default args.  */\n \n static void\n-fput_aliases_definition_styled (struct cmd_list_element *cmd,\n+fput_aliases_definition_styled (const cmd_list_element &cmd,\n \t\t\t\tstruct ui_file *stream)\n {\n-  for (cmd_list_element &alias : cmd->aliases)\n+  for (const cmd_list_element &alias : cmd.aliases)\n     if (!alias.default_args.empty ())\n-      fput_alias_definition_styled (&alias, stream);\n+      fput_alias_definition_styled (alias, stream);\n }\n \n \n@@ -1357,21 +1357,21 @@ fput_aliases_definition_styled (struct cmd_list_element *cmd,\n */\n \n static void\n-fput_command_names_styled (struct cmd_list_element *c,\n+fput_command_names_styled (const cmd_list_element &c,\n \t\t\t   bool always_fput_c_name, const char *postfix,\n \t\t\t   struct ui_file *stream)\n {\n-  if (always_fput_c_name || !c->aliases.empty ())\n+  if (always_fput_c_name || !c.aliases.empty ())\n     fput_command_name_styled (c, stream);\n \n-  for (cmd_list_element &alias : c->aliases)\n+  for (const cmd_list_element &alias : c.aliases)\n     {\n       fputs_filtered (\", \", stream);\n       wrap_here (\"   \");\n-      fput_command_name_styled (&alias, stream);\n+      fput_command_name_styled (alias, stream);\n     }\n \n-  if (always_fput_c_name || !c->aliases.empty ())\n+  if (always_fput_c_name || !c.aliases.empty ())\n     fputs_filtered (postfix, stream);\n }\n \n@@ -1380,7 +1380,7 @@ fput_command_names_styled (struct cmd_list_element *c,\n    otherwise print only one-line help for command C.  */\n \n static void\n-print_doc_of_command (struct cmd_list_element *c, const char *prefix,\n+print_doc_of_command (const cmd_list_element &c, const char *prefix,\n \t\t      bool verbose, compiled_regex &highlight,\n \t\t      struct ui_file *stream)\n {\n@@ -1396,12 +1396,12 @@ print_doc_of_command (struct cmd_list_element *c, const char *prefix,\n     {\n       fputs_filtered (\"\\n\", stream);\n       fput_aliases_definition_styled (c, stream);\n-      fputs_highlighted (c->doc, highlight, stream);\n+      fputs_highlighted (c.doc, highlight, stream);\n       fputs_filtered (\"\\n\", stream);\n     }\n   else\n     {\n-      print_doc_line (stream, c->doc, false);\n+      print_doc_line (stream, c.doc, false);\n       fputs_filtered (\"\\n\", stream);\n       fput_aliases_definition_styled (c, stream);\n     }\n@@ -1441,7 +1441,7 @@ apropos_cmd (struct ui_file *stream,\n \t  /* Try to match against the name.  */\n \t  returnvalue = regex.search (c->name, name_len, 0, name_len, NULL);\n \t  if (returnvalue >= 0)\n-\t    print_doc_of_command (c, prefix, verbose, regex, stream);\n+\t    print_doc_of_command (*c, prefix, verbose, regex, stream);\n \n \t  /* Try to match against the name of the aliases.  */\n \t  for (const cmd_list_element &alias : c->aliases)\n@@ -1450,7 +1450,7 @@ apropos_cmd (struct ui_file *stream,\n \t      returnvalue = regex.search (alias.name, name_len, 0, name_len, NULL);\n \t      if (returnvalue >= 0)\n \t\t{\n-\t\t  print_doc_of_command (c, prefix, verbose, regex, stream);\n+\t\t  print_doc_of_command (*c, prefix, verbose, regex, stream);\n \t\t  break;\n \t\t}\n \t    }\n@@ -1461,7 +1461,7 @@ apropos_cmd (struct ui_file *stream,\n \n \t  /* Try to match against documentation.  */\n \t  if (regex.search (c->doc, doc_len, 0, doc_len, NULL) >= 0)\n-\t    print_doc_of_command (c, prefix, verbose, regex, stream);\n+\t    print_doc_of_command (*c, prefix, verbose, regex, stream);\n \t}\n       /* Check if this command has subcommands.  */\n       if (c->is_prefix ())\n@@ -1524,8 +1524,8 @@ help_cmd (const char *command, struct ui_file *stream)\n \n   /* If the user asked 'help somecommand' and there is no alias,\n      the false indicates to not output the (single) command name.  */\n-  fput_command_names_styled (c, false, \"\\n\", stream);\n-  fput_aliases_definition_styled (c, stream);\n+  fput_command_names_styled (*c, false, \"\\n\", stream);\n+  fput_aliases_definition_styled (*c, stream);\n   fputs_filtered (c->doc, stream);\n   fputs_filtered (\"\\n\", stream);\n \n@@ -1664,7 +1664,7 @@ help_all (struct ui_file *stream)\n \t      fprintf_filtered (stream, \"\\nUnclassified commands\\n\\n\");\n \t      seen_unclassified = 1;\n \t    }\n-\t  print_help_for_command (c, true, stream);\n+\t  print_help_for_command (*c, true, stream);\n \t}\n     }\n \n@@ -1716,23 +1716,23 @@ print_doc_line (struct ui_file *stream, const char *str,\n    If RECURSE is non-zero, also print one-line descriptions\n    of all prefixed subcommands.  */\n static void\n-print_help_for_command (struct cmd_list_element *c,\n+print_help_for_command (const cmd_list_element &c,\n \t\t\tbool recurse, struct ui_file *stream)\n {\n   fput_command_names_styled (c, true, \" -- \", stream);\n-  print_doc_line (stream, c->doc, false);\n+  print_doc_line (stream, c.doc, false);\n   fputs_filtered (\"\\n\", stream);\n-  if (!c->default_args.empty ())\n+  if (!c.default_args.empty ())\n     fput_alias_definition_styled (c, stream);\n   fput_aliases_definition_styled (c, stream);\n \n   if (recurse\n-      && c->is_prefix ()\n-      && c->abbrev_flag == 0)\n+      && c.is_prefix ()\n+      && c.abbrev_flag == 0)\n     /* Subcommands of a prefix command typically have 'all_commands'\n        as class.  If we pass CLASS to recursive invocation,\n        most often we won't see anything.  */\n-    help_cmd_list (*c->subcommands, all_commands, true, stream);\n+    help_cmd_list (*c.subcommands, all_commands, true, stream);\n }\n \n /*\n@@ -1789,7 +1789,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \t     as this would show the (possibly very long) not very useful\n \t     list of sub-commands of the aliased command.  */\n \t  print_help_for_command\n-\t    (c,\n+\t    (*c,\n \t     recurse && (theclass != class_alias || !c->is_alias ()),\n \t     stream);\n \t  continue;"
    }
  ]
}