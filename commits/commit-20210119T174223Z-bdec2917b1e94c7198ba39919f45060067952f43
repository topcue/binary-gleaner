{
  "sha": "bdec2917b1e94c7198ba39919f45060067952f43",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmRlYzI5MTdiMWU5NGM3MTk4YmEzOTkxOWY0NTA2MDA2Nzk1MmY0Mw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-01-15T16:16:04Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-01-19T17:42:23Z"
    },
    "message": "Convert some frame functions to use gdb::array_view.\n\nThis patch converts the most obvious functions from gdb/frame.h to use\nthe gdb::array_view abstraction.  I've converted the ones that used buffer +\nlength.\n\nThere are others using only the buffer, with an implicit size. I did not\ntouch those for now. But it would be nice to pass the size for safety.\n\nTested with --enable-targets=all on Ubuntu 18.04/20.04 aarch64-linux.\n\ngdb/ChangeLog\n\n2021-01-19  Luis Machado  <luis.machado@linaro.org>\n\n\t* frame.h (get_frame_register_bytes): Pass a gdb::array_view instead\n\tof buffer + length.\n\t(put_frame_register_bytes): Likewise.\n\tAdjust documentation.\n\t(get_frame_memory): Pass a gdb::array_view instead of buffer + length.\n\t(safe_frame_unwind_memory): Likewise.\n\t* frame.c (get_frame_register_bytes, put_frame_register_bytes)\n\t(get_frame_memory, safe_frame_unwind_memory): Adjust to use\n\tgdb::array_view.\n\t* amd64-fbsd-tdep.c (amd64fbsd_sigtramp_p): Likewise.\n\t* amd64-linux-tdep.c (amd64_linux_sigtramp_start): Likewise.\n\t* amd64-obsd-tdep.c (amd64obsd_sigtramp_p): Likewise.\n\t* arc-linux-tdep.c (arc_linux_is_sigtramp): Likewise.\n\t* cris-tdep.c (cris_sigtramp_start, cris_rt_sigtramp_start): Likewise.\n\t* dwarf2/loc.c (rw_pieced_value): Likewise.\n\t* hppa-tdep.c (hppa_frame_cache): Likewise.\n\t* i386-fbsd-tdep.c (i386fbsd_sigtramp_p): Likewise.\n\t* i386-gnu-tdep.c (i386_gnu_sigtramp_start): Likewise.\n\t* i386-linux-tdep.c (i386_linux_sigtramp_start)\n\t(i386_linux_rt_sigtramp_start): Likewise.\n\t* i386-obsd-tdep.c (i386obsd_sigtramp_p): Likewise.\n\t* i386-tdep.c (i386_register_to_value): Likewise.\n\t* i387-tdep.c (i387_register_to_value): Likewise.\n\t* ia64-tdep.c (ia64_register_to_value): Likewise.\n\t* m32r-linux-tdep.c (m32r_linux_sigtramp_start)\n\t(m32r_linux_rt_sigtramp_start): Likewise.\n\t* m68k-linux-tdep.c (m68k_linux_pc_in_sigtramp): Likewise.\n\t* m68k-tdep.c (m68k_register_to_value): Likewise.\n\t* mips-tdep.c (mips_register_to_value)\n\t(mips_value_to_register): Likewise.\n\t* ppc-fbsd-tdep.c (ppcfbsd_sigtramp_frame_sniffer)\n\t(ppcfbsd_sigtramp_frame_cache): Likewise.\n\t* ppc-obsd-tdep.c (ppcobsd_sigtramp_frame_sniffer)\n\t(ppcobsd_sigtramp_frame_cache): Likewise.\n\t* rs6000-tdep.c (rs6000_in_function_epilogue_frame_p)\n\t(rs6000_register_to_value): Likewise.\n\t* tilegx-tdep.c (tilegx_analyze_prologue): Likewise.\n\t* tramp-frame.c (tramp_frame_start): Likewise.\n\t* valops.c (value_assign): Likewise.",
    "tree": {
      "sha": "808f5e6ba99e684a6c2328e25f338dc0731970e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/808f5e6ba99e684a6c2328e25f338dc0731970e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bdec2917b1e94c7198ba39919f45060067952f43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdec2917b1e94c7198ba39919f45060067952f43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bdec2917b1e94c7198ba39919f45060067952f43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdec2917b1e94c7198ba39919f45060067952f43/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c65ca138c4be913964dbd332c44e861fced991cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c65ca138c4be913964dbd332c44e861fced991cd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c65ca138c4be913964dbd332c44e861fced991cd"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 147,
    "deletions": 84
  },
  "files": [
    {
      "sha": "aeb089498de6ce8416ebe5b1c1d07b458cca9ddd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1,3 +1,45 @@\n+2021-01-19  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* frame.h (get_frame_register_bytes): Pass a gdb::array_view instead\n+\tof buffer + length.\n+\t(put_frame_register_bytes): Likewise.\n+\tAdjust documentation.\n+\t(get_frame_memory): Pass a gdb::array_view instead of buffer + length.\n+\t(safe_frame_unwind_memory): Likewise.\n+\t* frame.c (get_frame_register_bytes, put_frame_register_bytes)\n+\t(get_frame_memory, safe_frame_unwind_memory): Adjust to use\n+\tgdb::array_view.\n+\t* amd64-fbsd-tdep.c (amd64fbsd_sigtramp_p): Likewise.\n+\t* amd64-linux-tdep.c (amd64_linux_sigtramp_start): Likewise.\n+\t* amd64-obsd-tdep.c (amd64obsd_sigtramp_p): Likewise.\n+\t* arc-linux-tdep.c (arc_linux_is_sigtramp): Likewise.\n+\t* cris-tdep.c (cris_sigtramp_start, cris_rt_sigtramp_start): Likewise.\n+\t* dwarf2/loc.c (rw_pieced_value): Likewise.\n+\t* hppa-tdep.c (hppa_frame_cache): Likewise.\n+\t* i386-fbsd-tdep.c (i386fbsd_sigtramp_p): Likewise.\n+\t* i386-gnu-tdep.c (i386_gnu_sigtramp_start): Likewise.\n+\t* i386-linux-tdep.c (i386_linux_sigtramp_start)\n+\t(i386_linux_rt_sigtramp_start): Likewise.\n+\t* i386-obsd-tdep.c (i386obsd_sigtramp_p): Likewise.\n+\t* i386-tdep.c (i386_register_to_value): Likewise.\n+\t* i387-tdep.c (i387_register_to_value): Likewise.\n+\t* ia64-tdep.c (ia64_register_to_value): Likewise.\n+\t* m32r-linux-tdep.c (m32r_linux_sigtramp_start)\n+\t(m32r_linux_rt_sigtramp_start): Likewise.\n+\t* m68k-linux-tdep.c (m68k_linux_pc_in_sigtramp): Likewise.\n+\t* m68k-tdep.c (m68k_register_to_value): Likewise.\n+\t* mips-tdep.c (mips_register_to_value)\n+\t(mips_value_to_register): Likewise.\n+\t* ppc-fbsd-tdep.c (ppcfbsd_sigtramp_frame_sniffer)\n+\t(ppcfbsd_sigtramp_frame_cache): Likewise.\n+\t* ppc-obsd-tdep.c (ppcobsd_sigtramp_frame_sniffer)\n+\t(ppcobsd_sigtramp_frame_cache): Likewise.\n+\t* rs6000-tdep.c (rs6000_in_function_epilogue_frame_p)\n+\t(rs6000_register_to_value): Likewise.\n+\t* tilegx-tdep.c (tilegx_analyze_prologue): Likewise.\n+\t* tramp-frame.c (tramp_frame_start): Likewise.\n+\t* valops.c (value_assign): Likewise.\n+\n 2021-01-19  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-linux-tdep.c (aarch64_linux_restore_vreg): Pass in an"
    },
    {
      "sha": "289431306ab7661986dfb76582521be8440139d6",
      "filename": "gdb/amd64-fbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -52,7 +52,7 @@ amd64fbsd_sigtramp_p (struct frame_info *this_frame)\n   CORE_ADDR pc = get_frame_pc (this_frame);\n   gdb_byte buf[sizeof amd64fbsd_sigtramp_code];\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, sizeof buf))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n   if (memcmp (buf, amd64fbsd_sigtramp_code, sizeof amd64fbsd_sigtramp_code)\n       != 0)"
    },
    {
      "sha": "00d19be5ba06b19067d8681d0ccd60cbbf0fda20",
      "filename": "gdb/amd64-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-linux-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -146,7 +146,7 @@ amd64_linux_sigtramp_start (struct frame_info *this_frame)\n      PC is not at the start of the instruction sequence, there will be\n      a few trailing readable bytes on the stack.  */\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, sizeof buf))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n \n   if (buf[0] != LINUX_SIGTRAMP_INSN0)\n@@ -155,7 +155,7 @@ amd64_linux_sigtramp_start (struct frame_info *this_frame)\n \treturn 0;\n \n       pc -= LINUX_SIGTRAMP_OFFSET1;\n-      if (!safe_frame_unwind_memory (this_frame, pc, buf, sizeof buf))\n+      if (!safe_frame_unwind_memory (this_frame, pc, buf))\n \treturn 0;\n     }\n "
    },
    {
      "sha": "cdb09d0272bcae309b6baa5e04d76a99255b1ab0",
      "filename": "gdb/amd64-obsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/amd64-obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-obsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -78,7 +78,7 @@ amd64obsd_sigtramp_p (struct frame_info *this_frame)\n \n   /* If we can't read the instructions at START_PC, return zero.  */\n   buf = (gdb_byte *) alloca ((sizeof sigreturn) + 1);\n-  if (!safe_frame_unwind_memory (this_frame, start_pc + 6, buf, buflen))\n+  if (!safe_frame_unwind_memory (this_frame, start_pc + 6, {buf, buflen}))\n     return 0;\n \n   /* Check for sigreturn(2).  Depending on how the assembler encoded"
    },
    {
      "sha": "c9fbd7ddc28aa327673a9ed3e49472d404dd7728",
      "filename": "gdb/arc-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/arc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/arc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -204,7 +204,7 @@ arc_linux_is_sigtramp (struct frame_info *this_frame)\n \n   /* Read the memory at the PC.  Since we are stopped, any breakpoint must\n      have been removed.  */\n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, insns_sz))\n+  if (!safe_frame_unwind_memory (this_frame, pc, {buf, insns_sz}))\n     {\n       /* Failed to unwind frame.  */\n       return FALSE;\n@@ -215,7 +215,7 @@ arc_linux_is_sigtramp (struct frame_info *this_frame)\n     return TRUE;\n \n   /* No - look one instruction earlier in the code...  */\n-  if (!safe_frame_unwind_memory (this_frame, pc - 4, buf, insns_sz))\n+  if (!safe_frame_unwind_memory (this_frame, pc - 4, {buf, insns_sz}))\n     {\n       /* Failed to unwind frame.  */\n       return FALSE;"
    },
    {
      "sha": "a33fdc1143e6eb899ceabc431354af54b94ca443",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -198,7 +198,7 @@ cris_sigtramp_start (struct frame_info *this_frame)\n   CORE_ADDR pc = get_frame_pc (this_frame);\n   gdb_byte buf[SIGTRAMP_LEN];\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, SIGTRAMP_LEN))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n \n   if (((buf[1] << 8) + buf[0]) != SIGTRAMP_INSN0)\n@@ -207,7 +207,7 @@ cris_sigtramp_start (struct frame_info *this_frame)\n \treturn 0;\n \n       pc -= SIGTRAMP_OFFSET1;\n-      if (!safe_frame_unwind_memory (this_frame, pc, buf, SIGTRAMP_LEN))\n+      if (!safe_frame_unwind_memory (this_frame, pc, buf))\n \treturn 0;\n     }\n \n@@ -226,7 +226,7 @@ cris_rt_sigtramp_start (struct frame_info *this_frame)\n   CORE_ADDR pc = get_frame_pc (this_frame);\n   gdb_byte buf[SIGTRAMP_LEN];\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, SIGTRAMP_LEN))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n \n   if (((buf[1] << 8) + buf[0]) != SIGTRAMP_INSN0)\n@@ -235,7 +235,7 @@ cris_rt_sigtramp_start (struct frame_info *this_frame)\n \treturn 0;\n \n       pc -= SIGTRAMP_OFFSET1;\n-      if (!safe_frame_unwind_memory (this_frame, pc, buf, SIGTRAMP_LEN))\n+      if (!safe_frame_unwind_memory (this_frame, pc, buf))\n \treturn 0;\n     }\n "
    },
    {
      "sha": "580e5b0dedaac2c54e8e8660ab4747f62af3791d",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1748,7 +1748,7 @@ rw_pieced_value (struct value *v, struct value *from)\n \t\t/* Read mode.  */\n \t\tif (!get_frame_register_bytes (frame, gdb_regnum,\n \t\t\t\t\t       bits_to_skip / 8,\n-\t\t\t\t\t       this_size, buffer.data (),\n+\t\t\t\t\t       buffer,\n \t\t\t\t\t       &optim, &unavail))\n \t\t  {\n \t\t    if (optim)\n@@ -1773,7 +1773,7 @@ rw_pieced_value (struct value *v, struct value *from)\n \t\t       Need some bits from original register value.  */\n \t\t    get_frame_register_bytes (frame, gdb_regnum,\n \t\t\t\t\t      bits_to_skip / 8,\n-\t\t\t\t\t      this_size, buffer.data (),\n+\t\t\t\t\t      buffer,\n \t\t\t\t\t      &optim, &unavail);\n \t\t    if (optim)\n \t\t      throw_error (OPTIMIZED_OUT_ERROR,\n@@ -1792,7 +1792,7 @@ rw_pieced_value (struct value *v, struct value *from)\n \t\t\t      this_size_bits, bits_big_endian);\n \t\tput_frame_register_bytes (frame, gdb_regnum,\n \t\t\t\t\t  bits_to_skip / 8,\n-\t\t\t\t\t  this_size, buffer.data ());\n+\t\t\t\t\t  buffer);\n \t      }\n \t  }\n \t  break;"
    },
    {
      "sha": "4578b1acab3e21d4d10e6db6151d396d9bb1cf63",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1469,7 +1469,8 @@ deprecated_frame_register_read (frame_info *frame, int regnum,\n \n bool\n get_frame_register_bytes (frame_info *frame, int regnum,\n-\t\t\t  CORE_ADDR offset, int len, gdb_byte *myaddr,\n+\t\t\t  CORE_ADDR offset,\n+\t\t\t  gdb::array_view<gdb_byte> buffer,\n \t\t\t  int *optimizedp, int *unavailablep)\n {\n   struct gdbarch *gdbarch = get_frame_arch (frame);\n@@ -1496,6 +1497,8 @@ get_frame_register_bytes (frame_info *frame, int regnum,\n \tbreak;\t/* This register is not available on this architecture.  */\n       maxsize += thissize;\n     }\n+\n+  int len = buffer.size ();\n   if (len > maxsize)\n     error (_(\"Bad debug information detected: \"\n \t     \"Attempt to read %d bytes from registers.\"), len);\n@@ -1508,6 +1511,8 @@ get_frame_register_bytes (frame_info *frame, int regnum,\n       if (curr_len > len)\n \tcurr_len = len;\n \n+      gdb_byte *myaddr = buffer.data ();\n+\n       if (curr_len == register_size (gdbarch, regnum))\n \t{\n \t  enum lval_type lval;\n@@ -1551,7 +1556,8 @@ get_frame_register_bytes (frame_info *frame, int regnum,\n \n void\n put_frame_register_bytes (struct frame_info *frame, int regnum,\n-\t\t\t  CORE_ADDR offset, int len, const gdb_byte *myaddr)\n+\t\t\t  CORE_ADDR offset,\n+\t\t\t  gdb::array_view<const gdb_byte> buffer)\n {\n   struct gdbarch *gdbarch = get_frame_arch (frame);\n \n@@ -1562,6 +1568,7 @@ put_frame_register_bytes (struct frame_info *frame, int regnum,\n       regnum++;\n     }\n \n+  int len = buffer.size ();\n   /* Copy the data.  */\n   while (len > 0)\n     {\n@@ -1570,6 +1577,7 @@ put_frame_register_bytes (struct frame_info *frame, int regnum,\n       if (curr_len > len)\n \tcurr_len = len;\n \n+      const gdb_byte *myaddr = buffer.data ();\n       if (curr_len == register_size (gdbarch, regnum))\n \t{\n \t  put_frame_register (frame, regnum, myaddr);\n@@ -2891,9 +2899,9 @@ get_frame_address_space (struct frame_info *frame)\n \n void\n get_frame_memory (struct frame_info *this_frame, CORE_ADDR addr,\n-\t\t  gdb_byte *buf, int len)\n+\t\t  gdb::array_view<gdb_byte> buffer)\n {\n-  read_memory (addr, buf, len);\n+  read_memory (addr, buffer.data (), buffer.size ());\n }\n \n LONGEST\n@@ -2918,10 +2926,10 @@ get_frame_memory_unsigned (struct frame_info *this_frame, CORE_ADDR addr,\n \n bool\n safe_frame_unwind_memory (struct frame_info *this_frame,\n-\t\t\t  CORE_ADDR addr, gdb_byte *buf, int len)\n+\t\t\t  CORE_ADDR addr, gdb::array_view<gdb_byte> buffer)\n {\n   /* NOTE: target_read_memory returns zero on success!  */\n-  return target_read_memory (addr, buf, len) == 0;\n+  return target_read_memory (addr, buffer.data (), buffer.size ()) == 0;\n }\n \n /* Architecture methods.  */"
    },
    {
      "sha": "597a45967ed25198813cee4b04827ce4e6aab445",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -653,15 +653,15 @@ extern void put_frame_register (struct frame_info *frame, int regnum,\n    contents are optimized out or unavailable, set *OPTIMIZEDP,\n    *UNAVAILABLEP accordingly.  */\n extern bool get_frame_register_bytes (frame_info *frame, int regnum,\n-\t\t\t\t      CORE_ADDR offset, int len,\n-\t\t\t\t      gdb_byte *myaddr,\n+\t\t\t\t      CORE_ADDR offset,\n+\t\t\t\t      gdb::array_view<gdb_byte> buffer,\n \t\t\t\t      int *optimizedp, int *unavailablep);\n \n-/* Write LEN bytes to one or multiple registers starting with REGNUM\n-   in frame FRAME, starting at OFFSET, into BUF.  */\n+/* Write bytes from BUFFER to one or multiple registers starting with REGNUM\n+   in frame FRAME, starting at OFFSET.  */\n extern void put_frame_register_bytes (struct frame_info *frame, int regnum,\n-\t\t\t\t      CORE_ADDR offset, int len,\n-\t\t\t\t      const gdb_byte *myaddr);\n+\t\t\t\t      CORE_ADDR offset,\n+\t\t\t\t      gdb::array_view<const gdb_byte> buffer);\n \n /* Unwind the PC.  Strictly speaking return the resume address of the\n    calling frame.  For GDB, `pc' is the resume address and not a\n@@ -687,7 +687,7 @@ extern void frame_pop (struct frame_info *frame);\n    adaptor frames this should be ok.  */\n \n extern void get_frame_memory (struct frame_info *this_frame, CORE_ADDR addr,\n-\t\t\t      gdb_byte *buf, int len);\n+\t\t\t      gdb::array_view<gdb_byte> buffer);\n extern LONGEST get_frame_memory_signed (struct frame_info *this_frame,\n \t\t\t\t\tCORE_ADDR memaddr, int len);\n extern ULONGEST get_frame_memory_unsigned (struct frame_info *this_frame,\n@@ -696,7 +696,7 @@ extern ULONGEST get_frame_memory_unsigned (struct frame_info *this_frame,\n /* Same as above, but return true zero when the entire memory read\n    succeeds, false otherwise.  */\n extern bool safe_frame_unwind_memory (frame_info *this_frame, CORE_ADDR addr,\n-\t\t\t\t      gdb_byte *buf, int len);\n+\t\t\t\t      gdb::array_view<gdb_byte> buffer);\n \n /* Return this frame's architecture.  */\n extern struct gdbarch *get_frame_arch (struct frame_info *this_frame);"
    },
    {
      "sha": "786dda60fc83b8ad0efc8b4ce3a4a5055157dcf7",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1990,7 +1990,7 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n \tgdb_byte buf4[4];\n \tlong inst;\n \n-\tif (!safe_frame_unwind_memory (this_frame, pc, buf4, sizeof buf4)) \n+\tif (!safe_frame_unwind_memory (this_frame, pc, buf4))\n \t  {\n \t    error (_(\"Cannot read instruction at %s.\"),\n \t\t   paddress (gdbarch, pc));"
    },
    {
      "sha": "103972490c425223b7de7a47a72efa1de9eec901",
      "filename": "gdb/i386-fbsd-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -135,8 +135,8 @@ i386fbsd_sigtramp_p (struct frame_info *this_frame)\n   const gdb_byte *middle, *end;\n \n   /* Look for a matching start.  */\n-  if (!safe_frame_unwind_memory (this_frame, pc, buf,\n-\t\t\t\t sizeof i386fbsd_sigtramp_start))\n+  if (!safe_frame_unwind_memory (this_frame, pc,\n+\t\t\t\t {buf, sizeof i386fbsd_sigtramp_start}))\n     return 0;\n   if (memcmp (buf, i386fbsd_sigtramp_start, sizeof i386fbsd_sigtramp_start)\n       == 0)\n@@ -162,23 +162,23 @@ i386fbsd_sigtramp_p (struct frame_info *this_frame)\n   /* Since the end is shorter than the middle, check for a matching end\n      next.  */\n   pc += sizeof i386fbsd_sigtramp_start;\n-  if (!safe_frame_unwind_memory (this_frame, pc, buf,\n-\t\t\t\t sizeof i386fbsd_sigtramp_end))\n+  if (!safe_frame_unwind_memory (this_frame, pc,\n+\t\t\t\t {buf, sizeof i386fbsd_sigtramp_end}))\n     return 0;\n   if (memcmp (buf, end, sizeof i386fbsd_sigtramp_end) == 0)\n     return 1;\n \n   /* If the end didn't match, check for a matching middle.  */\n-  if (!safe_frame_unwind_memory (this_frame, pc, buf,\n-\t\t\t\t sizeof i386fbsd_sigtramp_middle))\n+  if (!safe_frame_unwind_memory (this_frame, pc,\n+\t\t\t\t {buf, sizeof i386fbsd_sigtramp_middle}))\n     return 0;\n   if (memcmp (buf, middle, sizeof i386fbsd_sigtramp_middle) != 0)\n     return 0;\n \n   /* The middle matched, check for a matching end.  */\n   pc += sizeof i386fbsd_sigtramp_middle;\n-  if (!safe_frame_unwind_memory (this_frame, pc, buf,\n-\t\t\t\t sizeof i386fbsd_sigtramp_end))\n+  if (!safe_frame_unwind_memory (this_frame, pc,\n+\t\t\t\t {buf, sizeof i386fbsd_sigtramp_end}))\n     return 0;\n   if (memcmp (buf, end, sizeof i386fbsd_sigtramp_end) != 0)\n     return 0;"
    },
    {
      "sha": "33ccd3b9ebec648ea066cc429ecb90500d7ec486",
      "filename": "gdb/i386-gnu-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-gnu-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-gnu-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-gnu-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -63,7 +63,7 @@ i386_gnu_sigtramp_start (struct frame_info *this_frame)\n \n   if (!safe_frame_unwind_memory (this_frame,\n \t\t\t\t pc + GNU_SIGTRAMP_TAIL - GNU_SIGTRAMP_LEN,\n-\t\t\t\t buf, GNU_SIGTRAMP_LEN))\n+\t\t\t\t buf))\n     return 0;\n \n   if (memcmp (buf, gnu_sigtramp_code, GNU_SIGTRAMP_LEN) != 0)"
    },
    {
      "sha": "c0df916ce6dc374ff97efdf2d88914ce21df22a0",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -134,7 +134,7 @@ i386_linux_sigtramp_start (struct frame_info *this_frame)\n      PC is not at the start of the instruction sequence, there will be\n      a few trailing readable bytes on the stack.  */\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_SIGTRAMP_LEN))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n \n   if (buf[0] != LINUX_SIGTRAMP_INSN0)\n@@ -155,7 +155,7 @@ i386_linux_sigtramp_start (struct frame_info *this_frame)\n \n       pc -= adjust;\n \n-      if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_SIGTRAMP_LEN))\n+      if (!safe_frame_unwind_memory (this_frame, pc, buf))\n \treturn 0;\n     }\n \n@@ -202,7 +202,7 @@ i386_linux_rt_sigtramp_start (struct frame_info *this_frame)\n      PC is not at the start of the instruction sequence, there will be\n      a few trailing readable bytes on the stack.  */\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_RT_SIGTRAMP_LEN))\n+  if (!safe_frame_unwind_memory (this_frame, pc, buf))\n     return 0;\n \n   if (buf[0] != LINUX_RT_SIGTRAMP_INSN0)\n@@ -212,8 +212,8 @@ i386_linux_rt_sigtramp_start (struct frame_info *this_frame)\n \n       pc -= LINUX_RT_SIGTRAMP_OFFSET1;\n \n-      if (!safe_frame_unwind_memory (this_frame, pc, buf,\n-\t\t\t\t     LINUX_RT_SIGTRAMP_LEN))\n+      if (!safe_frame_unwind_memory (this_frame, pc,\n+\t\t\t\t     buf))\n \treturn 0;\n     }\n "
    },
    {
      "sha": "387863f859a944f0919354cf159f263f02fe261a",
      "filename": "gdb/i386-obsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-obsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -99,7 +99,7 @@ i386obsd_sigtramp_p (struct frame_info *this_frame)\n     {\n       /* If we can't read the instructions, return zero.  */\n       if (!safe_frame_unwind_memory (this_frame, start_pc + *offset,\n-\t\t\t\t     buf, buflen))\n+\t\t\t\t     {buf, buflen}))\n \treturn 0;\n \n       /* Check for sigreturn(2).  */"
    },
    {
      "sha": "991218de4c4a45917e3d3d12162290b145561a1a",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -3781,8 +3781,10 @@ i386_register_to_value (struct frame_info *frame, int regnum,\n       gdb_assert (register_size (gdbarch, regnum) == 4);\n \n       if (!get_frame_register_bytes (frame, regnum, 0,\n-\t\t\t\t     register_size (gdbarch, regnum),\n-\t\t\t\t     to, optimizedp, unavailablep))\n+\t\t\t\t     gdb::make_array_view (to,\n+\t\t\t\t\t\t\tregister_size (gdbarch,\n+\t\t\t\t\t\t\t\t       regnum)),\n+\t\t\t\t     optimizedp, unavailablep))\n \treturn 0;\n \n       regnum = i386_next_regnum (regnum);"
    },
    {
      "sha": "c17c0f30b1e6ab0a26278b5834a158903f0845d8",
      "filename": "gdb/i387-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i387-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/i387-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i387-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -365,8 +365,10 @@ i387_register_to_value (struct frame_info *frame, int regnum,\n \n   /* Convert to TYPE.  */\n   if (!get_frame_register_bytes (frame, regnum, 0,\n-\t\t\t\t register_size (gdbarch, regnum),\n-\t\t\t\t from, optimizedp, unavailablep))\n+\t\t\t\t gdb::make_array_view (from,\n+\t\t\t\t\t\t       register_size (gdbarch,\n+\t\t\t\t\t\t\t\t      regnum)),\n+\t\t\t\t optimizedp, unavailablep))\n     return 0;\n \n   target_float_convert (from, i387_ext_type (gdbarch), to, type);"
    },
    {
      "sha": "35eeffe8434110fc93434c6a4970475b44714f19",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1226,8 +1226,10 @@ ia64_register_to_value (struct frame_info *frame, int regnum,\n \n   /* Convert to TYPE.  */\n   if (!get_frame_register_bytes (frame, regnum, 0,\n-\t\t\t\t register_size (gdbarch, regnum),\n-\t\t\t\t in, optimizedp, unavailablep))\n+\t\t\t\t gdb::make_array_view (in,\n+\t\t\t\t\t\t       register_size (gdbarch,\n+\t\t\t\t\t\t\t\t      regnum)),\n+\t\t\t\t optimizedp, unavailablep))\n     return 0;\n \n   target_float_convert (in, ia64_ext_type (gdbarch), out, valtype);"
    },
    {
      "sha": "1d42a0a43fdf19c5ab521cafab04e9ef0ef912bf",
      "filename": "gdb/m32r-linux-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m32r-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m32r-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32r-linux-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -99,7 +99,7 @@ m32r_linux_sigtramp_start (CORE_ADDR pc, struct frame_info *this_frame)\n \n   if (pc % 2 != 0)\n     {\n-      if (!safe_frame_unwind_memory (this_frame, pc, buf, 2))\n+      if (!safe_frame_unwind_memory (this_frame, pc, {buf, 2}))\n \treturn 0;\n \n       if (memcmp (buf, linux_sigtramp_code, 2) == 0)\n@@ -108,7 +108,7 @@ m32r_linux_sigtramp_start (CORE_ADDR pc, struct frame_info *this_frame)\n \treturn 0;\n     }\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, 4))\n+  if (!safe_frame_unwind_memory (this_frame, pc, {buf, 4}))\n     return 0;\n \n   if (memcmp (buf, linux_sigtramp_code, 4) != 0)\n@@ -148,20 +148,20 @@ m32r_linux_rt_sigtramp_start (CORE_ADDR pc, struct frame_info *this_frame)\n   if (pc % 2 != 0)\n     return 0;\n \n-  if (!safe_frame_unwind_memory (this_frame, pc, buf, 4))\n+  if (!safe_frame_unwind_memory (this_frame, pc, {buf, 4}))\n     return 0;\n \n   if (memcmp (buf, linux_rt_sigtramp_code, 4) == 0)\n     {\n-      if (!safe_frame_unwind_memory (this_frame, pc + 4, buf, 4))\n+      if (!safe_frame_unwind_memory (this_frame, pc + 4, {buf, 4}))\n \treturn 0;\n \n       if (memcmp (buf, linux_rt_sigtramp_code + 4, 4) == 0)\n \treturn pc;\n     }\n   else if (memcmp (buf, linux_rt_sigtramp_code + 4, 4) == 0)\n     {\n-      if (!safe_frame_unwind_memory (this_frame, pc - 4, buf, 4))\n+      if (!safe_frame_unwind_memory (this_frame, pc - 4, {buf, 4}))\n \treturn 0;\n \n       if (memcmp (buf, linux_rt_sigtramp_code, 4) == 0)"
    },
    {
      "sha": "7b3cd5f2d9e194aedf11df5c03c04850a69ef84a",
      "filename": "gdb/m68k-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m68k-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m68k-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68k-linux-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -69,7 +69,7 @@ m68k_linux_pc_in_sigtramp (struct frame_info *this_frame)\n   unsigned long insn0, insn1, insn2;\n   CORE_ADDR pc = get_frame_pc (this_frame);\n \n-  if (!safe_frame_unwind_memory (this_frame, pc - 4, buf, sizeof (buf)))\n+  if (!safe_frame_unwind_memory (this_frame, pc - 4, {buf, sizeof (buf)}))\n     return 0;\n   insn1 = extract_unsigned_integer (buf + 4, 4, byte_order);\n   insn2 = extract_unsigned_integer (buf + 8, 4, byte_order);"
    },
    {
      "sha": "76cc38bd6ff0dd6f17d3ccca54c37da2a8b50f11",
      "filename": "gdb/m68k-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m68k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/m68k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68k-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -213,8 +213,10 @@ m68k_register_to_value (struct frame_info *frame, int regnum,\n \n   /* Convert to TYPE.  */\n   if (!get_frame_register_bytes (frame, regnum, 0,\n-\t\t\t\t register_size (gdbarch, regnum),\n-\t\t\t\t from, optimizedp, unavailablep))\n+\t\t\t\t gdb::make_array_view (from,\n+\t\t\t\t\t\t       register_size (gdbarch,\n+\t\t\t\t\t\t\t\t      regnum)),\n+\t\t\t\t optimizedp, unavailablep))\n     return 0;\n \n   target_float_convert (from, fpreg_type, to, type);"
    },
    {
      "sha": "e12dffbdfcb0d8820bd591c03130b47a05a2c32e",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -926,23 +926,23 @@ mips_register_to_value (struct frame_info *frame, int regnum,\n       get_frame_register (frame, regnum + 0, to + 4);\n       get_frame_register (frame, regnum + 1, to + 0);\n \n-      if (!get_frame_register_bytes (frame, regnum + 0, 0, 4, to + 4,\n+      if (!get_frame_register_bytes (frame, regnum + 0, 0, {to + 4, 4},\n \t\t\t\t     optimizedp, unavailablep))\n \treturn 0;\n \n-      if (!get_frame_register_bytes (frame, regnum + 1, 0, 4, to + 0,\n+      if (!get_frame_register_bytes (frame, regnum + 1, 0, {to + 0, 4},\n \t\t\t\t     optimizedp, unavailablep))\n \treturn 0;\n       *optimizedp = *unavailablep = 0;\n       return 1;\n     }\n   else if (mips_convert_register_gpreg_case_p (gdbarch, regnum, type))\n     {\n-      int len = TYPE_LENGTH (type);\n+      size_t len = TYPE_LENGTH (type);\n       CORE_ADDR offset;\n \n       offset = gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG ? 8 - len : 0;\n-      if (!get_frame_register_bytes (frame, regnum, offset, len, to,\n+      if (!get_frame_register_bytes (frame, regnum, offset, {to, len},\n \t\t\t\t     optimizedp, unavailablep))\n \treturn 0;\n \n@@ -970,7 +970,7 @@ mips_value_to_register (struct frame_info *frame, int regnum,\n   else if (mips_convert_register_gpreg_case_p (gdbarch, regnum, type))\n     {\n       gdb_byte fill[8];\n-      int len = TYPE_LENGTH (type);\n+      size_t len = TYPE_LENGTH (type);\n       \n       /* Sign extend values, irrespective of type, that are stored to \n \t a 64-bit general purpose register.  (32-bit unsigned values\n@@ -984,17 +984,17 @@ mips_value_to_register (struct frame_info *frame, int regnum,\n \t    store_signed_integer (fill, 8, BFD_ENDIAN_BIG, -1);\n \t  else\n \t    store_signed_integer (fill, 8, BFD_ENDIAN_BIG, 0);\n-\t  put_frame_register_bytes (frame, regnum, 0, 8 - len, fill);\n-\t  put_frame_register_bytes (frame, regnum, 8 - len, len, from);\n+\t  put_frame_register_bytes (frame, regnum, 0, {fill, 8 - len});\n+\t  put_frame_register_bytes (frame, regnum, 8 - len, {from, len});\n \t}\n       else\n \t{\n \t  if (from[len-1] & 0x80)\n \t    store_signed_integer (fill, 8, BFD_ENDIAN_LITTLE, -1);\n \t  else\n \t    store_signed_integer (fill, 8, BFD_ENDIAN_LITTLE, 0);\n-\t  put_frame_register_bytes (frame, regnum, 0, len, from);\n-\t  put_frame_register_bytes (frame, regnum, len, 8 - len, fill);\n+\t  put_frame_register_bytes (frame, regnum, 0, {from, len});\n+\t  put_frame_register_bytes (frame, regnum, len, {fill, 8 - len});\n \t}\n     }\n   else"
    },
    {
      "sha": "d03df9666fc4a0bd711aad11b2fdb7606ad63225",
      "filename": "gdb/ppc-fbsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ppc-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ppc-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-fbsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -176,7 +176,7 @@ ppcfbsd_sigtramp_frame_sniffer (const struct frame_unwind *self,\n       unsigned long insn;\n \n       if (!safe_frame_unwind_memory (this_frame, start_pc + *offset,\n-\t\t\t\t     buf, sizeof buf))\n+\t\t\t\t     {buf, sizeof buf}))\n \tcontinue;\n \n       /* Check for \"li r0,SYS_sigreturn\".  */\n@@ -214,7 +214,7 @@ ppcfbsd_sigtramp_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n   func = get_frame_pc (this_frame);\n   func &= ~(ppcfbsd_page_size - 1);\n-  if (!safe_frame_unwind_memory (this_frame, func, buf, sizeof buf))\n+  if (!safe_frame_unwind_memory (this_frame, func, {buf, sizeof buf}))\n     return cache;\n \n   base = get_frame_register_unsigned (this_frame, gdbarch_sp_regnum (gdbarch));"
    },
    {
      "sha": "b92f11c67ec1da08e66420696a5e6f6eacf780e5",
      "filename": "gdb/ppc-obsd-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ppc-obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/ppc-obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-obsd-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -137,7 +137,7 @@ ppcobsd_sigtramp_frame_sniffer (const struct frame_unwind *self,\n       unsigned long insn;\n \n       if (!safe_frame_unwind_memory (this_frame, start_pc + *offset,\n-\t\t\t\t     buf, sizeof buf))\n+\t\t\t\t     {buf, sizeof buf}))\n \tcontinue;\n \n       /* Check for \"li r0,SYS_sigreturn\".  */\n@@ -177,7 +177,7 @@ ppcobsd_sigtramp_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n   func = get_frame_pc (this_frame);\n   func &= ~(ppcobsd_page_size - 1);\n-  if (!safe_frame_unwind_memory (this_frame, func, buf, sizeof buf))\n+  if (!safe_frame_unwind_memory (this_frame, func, {buf, sizeof buf}))\n     return cache;\n \n   /* Calculate the offset where we can find `struct sigcontext'.  We"
    },
    {
      "sha": "62848a0af9c18f7b3e715b3bd1f5c689d7602235",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -777,7 +777,8 @@ rs6000_in_function_epilogue_frame_p (struct frame_info *curfrm,\n \n   for (scan_pc = pc; scan_pc < epilogue_end; scan_pc += PPC_INSN_SIZE)\n     {\n-      if (!safe_frame_unwind_memory (curfrm, scan_pc, insn_buf, PPC_INSN_SIZE))\n+      if (!safe_frame_unwind_memory (curfrm, scan_pc,\n+\t\t\t\t     {insn_buf, PPC_INSN_SIZE}))\n \treturn 0;\n       insn = extract_unsigned_integer (insn_buf, PPC_INSN_SIZE, byte_order);\n       if (insn == 0x4e800020)\n@@ -803,7 +804,8 @@ rs6000_in_function_epilogue_frame_p (struct frame_info *curfrm,\n        scan_pc >= epilogue_start;\n        scan_pc -= PPC_INSN_SIZE)\n     {\n-      if (!safe_frame_unwind_memory (curfrm, scan_pc, insn_buf, PPC_INSN_SIZE))\n+      if (!safe_frame_unwind_memory (curfrm, scan_pc,\n+\t\t\t\t     {insn_buf, PPC_INSN_SIZE}))\n \treturn 0;\n       insn = extract_unsigned_integer (insn_buf, PPC_INSN_SIZE, byte_order);\n       if (insn_changes_sp_or_jumps (insn))\n@@ -2607,8 +2609,10 @@ rs6000_register_to_value (struct frame_info *frame,\n   gdb_assert (type->code () == TYPE_CODE_FLT);\n \n   if (!get_frame_register_bytes (frame, regnum, 0,\n-\t\t\t\t register_size (gdbarch, regnum),\n-\t\t\t\t from, optimizedp, unavailablep))\n+\t\t\t\t gdb::make_array_view (from,\n+\t\t\t\t\t\t       register_size (gdbarch,\n+\t\t\t\t\t\t\t\t      regnum)),\n+\t\t\t\t optimizedp, unavailablep))\n     return 0;\n \n   target_float_convert (from, builtin_type (gdbarch)->builtin_double,"
    },
    {
      "sha": "7ff879476f33010c99d5dea666e0123b35f49c4d",
      "filename": "gdb/tilegx-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/tilegx-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/tilegx-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tilegx-tdep.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -429,7 +429,7 @@ tilegx_analyze_prologue (struct gdbarch* gdbarch,\n \t  instbuf_start = next_addr;\n \n \t  status = safe_frame_unwind_memory (next_frame, instbuf_start,\n-\t\t\t\t\t     instbuf, instbuf_size);\n+\t\t\t\t\t     {instbuf, instbuf_size});\n \t  if (status == 0)\n \t    memory_error (TARGET_XFER_E_IO, next_addr);\n \t}"
    },
    {
      "sha": "b13ca51482221760bfa840abe097bca8b910d57e",
      "filename": "gdb/tramp-frame.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/tramp-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/tramp-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tramp-frame.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -102,14 +102,15 @@ tramp_frame_start (const struct tramp_frame *tramp,\n \t{\n \t  gdb_byte buf[sizeof (tramp->insn[0])];\n \t  ULONGEST insn;\n+\t  size_t insn_size = tramp->insn_size;\n \n \t  if (tramp->insn[i].bytes == TRAMP_SENTINEL_INSN)\n \t    return func;\n \t  if (!safe_frame_unwind_memory (this_frame,\n-\t\t\t\t\t func + i * tramp->insn_size,\n-\t\t\t\t\t buf, tramp->insn_size))\n+\t\t\t\t\t func + i * insn_size,\n+\t\t\t\t\t {buf, insn_size}))\n \t    break;\n-\t  insn = extract_unsigned_integer (buf, tramp->insn_size, byte_order);\n+\t  insn = extract_unsigned_integer (buf, insn_size, byte_order);\n \t  if (tramp->insn[i].bytes != (insn & tramp->insn[i].mask))\n \t    break;\n \t}"
    },
    {
      "sha": "882f6e7f0c266e5badbef4e3b04998df66daeb9c",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdec2917b1e94c7198ba39919f45060067952f43/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdec2917b1e94c7198ba39919f45060067952f43/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=bdec2917b1e94c7198ba39919f45060067952f43",
      "patch": "@@ -1200,7 +1200,7 @@ value_assign (struct value *toval, struct value *fromval)\n \t  {\n \t    struct value *parent = value_parent (toval);\n \t    LONGEST offset = value_offset (parent) + value_offset (toval);\n-\t    int changed_len;\n+\t    size_t changed_len;\n \t    gdb_byte buffer[sizeof (LONGEST)];\n \t    int optim, unavail;\n \n@@ -1209,13 +1209,13 @@ value_assign (struct value *toval, struct value *fromval)\n \t\t\t   + HOST_CHAR_BIT - 1)\n \t\t\t  / HOST_CHAR_BIT;\n \n-\t    if (changed_len > (int) sizeof (LONGEST))\n+\t    if (changed_len > sizeof (LONGEST))\n \t      error (_(\"Can't handle bitfields which \"\n \t\t       \"don't fit in a %d bit word.\"),\n \t\t     (int) sizeof (LONGEST) * HOST_CHAR_BIT);\n \n \t    if (!get_frame_register_bytes (frame, value_reg, offset,\n-\t\t\t\t\t   changed_len, buffer,\n+\t\t\t\t\t   {buffer, changed_len},\n \t\t\t\t\t   &optim, &unavail))\n \t      {\n \t\tif (optim)\n@@ -1230,7 +1230,7 @@ value_assign (struct value *toval, struct value *fromval)\n \t\t\t  value_bitpos (toval), value_bitsize (toval));\n \n \t    put_frame_register_bytes (frame, value_reg, offset,\n-\t\t\t\t      changed_len, buffer);\n+\t\t\t\t      {buffer, changed_len});\n \t  }\n \telse\n \t  {\n@@ -1248,8 +1248,8 @@ value_assign (struct value *toval, struct value *fromval)\n \t      {\n \t\tput_frame_register_bytes (frame, value_reg,\n \t\t\t\t\t  value_offset (toval),\n-\t\t\t\t\t  TYPE_LENGTH (type),\n-\t\t\t\t\t  value_contents (fromval));\n+\t\t\t\t\t  {value_contents (fromval),\n+\t\t\t\t\t   TYPE_LENGTH (type)});\n \t      }\n \t  }\n "
    }
  ]
}