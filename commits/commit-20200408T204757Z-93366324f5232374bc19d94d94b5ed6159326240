{
  "sha": "93366324f5232374bc19d94d94b5ed6159326240",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTMzNjYzMjRmNTIzMjM3NGJjMTlkOTRkOTRiNWVkNjE1OTMyNjI0MA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:57Z"
    },
    "message": "Remove the \"next\" field from windows_thread_info\n\nThis changes windows_thread_info to remove the \"next\" field, replacing\nthe linked list of threads with a vector.  This is a prerequisite to\nsharing this structure with gdbserver, which manages threads\ndifferently.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (struct windows_thread_info): Remove typedef.\n\t(thread_head): Remove.\n\t(thread_list): New global.\n\t(thread_rec, windows_add_thread, windows_init_thread_list)\n\t(windows_delete_thread, windows_continue): Update.",
    "tree": {
      "sha": "07338de00e881cdedab891def4e7c5b3567510b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07338de00e881cdedab891def4e7c5b3567510b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93366324f5232374bc19d94d94b5ed6159326240",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93366324f5232374bc19d94d94b5ed6159326240",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93366324f5232374bc19d94d94b5ed6159326240",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93366324f5232374bc19d94d94b5ed6159326240/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0f2265e2461babf685ff14f4ec9a9c60898453fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f2265e2461babf685ff14f4ec9a9c60898453fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0f2265e2461babf685ff14f4ec9a9c60898453fe"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 29,
    "deletions": 31
  },
  "files": [
    {
      "sha": "1ab9f476e99ccfc5c057cfbf3104d3facc8aeacc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93366324f5232374bc19d94d94b5ed6159326240/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93366324f5232374bc19d94d94b5ed6159326240/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93366324f5232374bc19d94d94b5ed6159326240",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (struct windows_thread_info): Remove typedef.\n+\t(thread_head): Remove.\n+\t(thread_list): New global.\n+\t(thread_rec, windows_add_thread, windows_init_thread_list)\n+\t(windows_delete_thread, windows_continue): Update.\n+\n 2020-04-08  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* windows-tdep.h (windows_init_abi): Add comment."
    },
    {
      "sha": "2f9e00a0a9abe58eb139425092d6a00d8c4fc178",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 21,
      "deletions": 31,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93366324f5232374bc19d94d94b5ed6159326240/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93366324f5232374bc19d94d94b5ed6159326240/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=93366324f5232374bc19d94d94b5ed6159326240",
      "patch": "@@ -43,6 +43,7 @@\n #include <cygwin/version.h>\n #endif\n #include <algorithm>\n+#include <vector>\n \n #include \"filenames.h\"\n #include \"symfile.h\"\n@@ -245,9 +246,8 @@ static enum gdb_signal last_sig = GDB_SIGNAL_0;\n \n /* Thread information structure used to track information that is\n    not available in gdb's thread structure.  */\n-typedef struct windows_thread_info_struct\n+struct windows_thread_info\n   {\n-    struct windows_thread_info_struct *next;\n     DWORD id;\n     HANDLE h;\n     CORE_ADDR thread_local_base;\n@@ -261,10 +261,9 @@ typedef struct windows_thread_info_struct\n \tWOW64_CONTEXT wow64_context;\n #endif\n       };\n-  }\n-windows_thread_info;\n+  };\n \n-static windows_thread_info thread_head;\n+static std::vector<windows_thread_info *> thread_list;\n \n /* The process and thread handles for the above context.  */\n \n@@ -429,9 +428,7 @@ check (BOOL ok, const char *file, int line)\n static windows_thread_info *\n thread_rec (DWORD id, int get_context)\n {\n-  windows_thread_info *th;\n-\n-  for (th = &thread_head; (th = th->next) != NULL;)\n+  for (windows_thread_info *th : thread_list)\n     if (th->id == id)\n       {\n \tif (!th->suspended && get_context)\n@@ -499,8 +496,7 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n   if (wow64_process)\n     th->thread_local_base += 0x2000;\n #endif\n-  th->next = thread_head.next;\n-  thread_head.next = th;\n+  thread_list.push_back (th);\n \n   /* Add this new thread to the list of threads.\n \n@@ -554,17 +550,13 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n static void\n windows_init_thread_list (void)\n {\n-  windows_thread_info *th = &thread_head;\n-\n   DEBUG_EVENTS ((\"gdb: windows_init_thread_list\\n\"));\n   init_thread_list ();\n-  while (th->next != NULL)\n-    {\n-      windows_thread_info *here = th->next;\n-      th->next = here->next;\n-      xfree (here);\n-    }\n-  thread_head.next = NULL;\n+\n+  for (windows_thread_info *here : thread_list)\n+    xfree (here);\n+\n+  thread_list.clear ();\n }\n \n /* Delete a thread from the list of threads.\n@@ -577,7 +569,6 @@ windows_init_thread_list (void)\n static void\n windows_delete_thread (ptid_t ptid, DWORD exit_code, bool main_thread_p)\n {\n-  windows_thread_info *th;\n   DWORD id;\n \n   gdb_assert (ptid.tid () != 0);\n@@ -600,17 +591,17 @@ windows_delete_thread (ptid_t ptid, DWORD exit_code, bool main_thread_p)\n \n   delete_thread (find_thread_ptid (&the_windows_nat_target, ptid));\n \n-  for (th = &thread_head;\n-       th->next != NULL && th->next->id != id;\n-       th = th->next)\n-    continue;\n+  auto iter = std::find_if (thread_list.begin (), thread_list.end (),\n+\t\t\t    [=] (windows_thread_info *th)\n+\t\t\t    {\n+\t\t\t      return th->id == id;\n+\t\t\t    });\n \n-  if (th->next != NULL)\n+  if (iter != thread_list.end ())\n     {\n-      windows_thread_info *here = th->next;\n-      th->next = here->next;\n-      xfree (here->name);\n-      xfree (here);\n+      xfree ((*iter)->name);\n+      xfree (*iter);\n+      thread_list.erase (iter);\n     }\n }\n \n@@ -1477,7 +1468,6 @@ handle_exception (struct target_waitstatus *ourstatus)\n static BOOL\n windows_continue (DWORD continue_status, int id, int killed)\n {\n-  windows_thread_info *th;\n   BOOL res;\n \n   DEBUG_EVENTS ((\"ContinueDebugEvent (cpid=%d, ctid=0x%x, %s);\\n\",\n@@ -1486,7 +1476,7 @@ windows_continue (DWORD continue_status, int id, int killed)\n \t\t  continue_status == DBG_CONTINUE ?\n \t\t  \"DBG_CONTINUE\" : \"DBG_EXCEPTION_NOT_HANDLED\"));\n \n-  for (th = &thread_head; (th = th->next) != NULL;)\n+  for (windows_thread_info *th : thread_list)\n     if ((id == -1 || id == (int) th->id)\n \t&& th->suspended)\n       {"
    }
  ]
}