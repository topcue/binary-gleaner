{
  "sha": "359157df2087894563a900e5f63299b42f460be2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzU5MTU3ZGYyMDg3ODk0NTYzYTkwMGU1ZjYzMjk5YjQyZjQ2MGJlMg==",
  "commit": {
    "author": {
      "name": "Alex Coplan",
      "email": "alex.coplan@arm.com",
      "date": "2020-06-22T13:51:04Z"
    },
    "committer": {
      "name": "Alex Coplan",
      "email": "alex.coplan@arm.com",
      "date": "2020-06-22T13:51:04Z"
    },
    "message": "aarch64: Normalize and sort feature bit macros\n\nThis patch normalizes and sorts the feature bit macros in\ninclude/opcode/aarch64.h such that it's easy to tell which bits are\nallocated and where it's safe to add new feature bits.\n\nTesting:\n * Testsuite run on aarch64-none-elf.\n\ninclude/ChangeLog:\n\n2020-06-22  Alex Coplan  <alex.coplan@arm.com>\n\n\t* opcode/aarch64.h (AARCH64_FEATURE_SHA2): Normalize.\n\t(AARCH64_FEATURE_AES): Likewise.\n\t(AARCH64_FEATURE_V8_4): Likewise.\n\t(AARCH64_FEATURE_SM4): Likewise.\n\t(AARCH64_FEATURE_SHA3): Likewise.\n\t(AARCH64_FEATURE_V8): Likewise.\n\t(AARCH64_FEATURE_V8_2): Likewise.\n\t(AARCH64_FEATURE_V8_3): Likewise.\n\t(AARCH64_FEATURE_FP): Likewise.\n\t(AARCH64_FEATURE_SIMD): Likewise.\n\t(AARCH64_FEATURE_CRC): Likewise.\n\t(AARCH64_FEATURE_LSE): Likewise.\n\t(AARCH64_FEATURE_PAN): Likewise.\n\t(AARCH64_FEATURE_LOR): Likewise.\n\t(AARCH64_FEATURE_RDMA): Likewise.\n\t(AARCH64_FEATURE_V8_1): Likewise.\n\t(AARCH64_FEATURE_F16): Likewise.\n\t(AARCH64_FEATURE_RAS): Likewise.\n\t(AARCH64_FEATURE_PROFILE): Likewise.\n\t(AARCH64_FEATURE_SVE): Likewise.\n\t(AARCH64_FEATURE_RCPC): Likewise.\n\t(AARCH64_FEATURE_COMPNUM): Likewise.\n\t(AARCH64_FEATURE_DOTPROD): Likewise.\n\t(AARCH64_FEATURE_F16_FML): Likewise.\n\t(AARCH64_FEATURE_V8_5): Likewise.\n\t(AARCH64_FEATURE_V8_6): Likewise.\n\t(AARCH64_FEATURE_BFLOAT16): Likewise.\n\t(AARCH64_FEATURE_FLAGMANIP): Likewise.\n\t(AARCH64_FEATURE_FRINTTS): Likewise.\n\t(AARCH64_FEATURE_SB): Likewise.\n\t(AARCH64_FEATURE_PREDRES): Likewise.\n\t(AARCH64_FEATURE_CVADP): Likewise.\n\t(AARCH64_FEATURE_RNG): Likewise.\n\t(AARCH64_FEATURE_BTI): Likewise.\n\t(AARCH64_FEATURE_SCXTNUM): Likewise.\n\t(AARCH64_FEATURE_ID_PFR2): Likewise.\n\t(AARCH64_FEATURE_SSBS): Likewise.\n\t(AARCH64_FEATURE_MEMTAG): Likewise.\n\t(AARCH64_FEATURE_TME): Likewise.\n\t(AARCH64_FEATURE_I8MM): Likewise.\n\t(AARCH64_FEATURE_F32MM): Likewise.\n\t(AARCH64_FEATURE_F64MM): Likewise.\n\t(AARCH64_FEATURE_SVE2): Likewise.\n\t(AARCH64_FEATURE_SVE2_AES): Likewise.\n\t(AARCH64_FEATURE_SVE2_BITPERM): Likewise.\n\t(AARCH64_FEATURE_SVE2_SM4): Likewise.\n\t(AARCH64_FEATURE_SVE2_SHA3): Likewise.",
    "tree": {
      "sha": "8ab03ff24636eb8b9ddb88822b46499113b26282",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8ab03ff24636eb8b9ddb88822b46499113b26282"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/359157df2087894563a900e5f63299b42f460be2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359157df2087894563a900e5f63299b42f460be2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/359157df2087894563a900e5f63299b42f460be2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359157df2087894563a900e5f63299b42f460be2/comments",
  "author": {
    "login": "acoplan-arm",
    "id": 86676934,
    "node_id": "MDQ6VXNlcjg2Njc2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acoplan-arm",
    "html_url": "https://github.com/acoplan-arm",
    "followers_url": "https://api.github.com/users/acoplan-arm/followers",
    "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/acoplan-arm/orgs",
    "repos_url": "https://api.github.com/users/acoplan-arm/repos",
    "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acoplan-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "acoplan-arm",
    "id": 86676934,
    "node_id": "MDQ6VXNlcjg2Njc2OTM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acoplan-arm",
    "html_url": "https://github.com/acoplan-arm",
    "followers_url": "https://api.github.com/users/acoplan-arm/followers",
    "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/acoplan-arm/orgs",
    "repos_url": "https://api.github.com/users/acoplan-arm/repos",
    "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acoplan-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d768f160a99558a07a2463899c8bfeec0f0a67a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d768f160a99558a07a2463899c8bfeec0f0a67a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d768f160a99558a07a2463899c8bfeec0f0a67a7"
    }
  ],
  "stats": {
    "total": 161,
    "additions": 97,
    "deletions": 64
  },
  "files": [
    {
      "sha": "d36213fb2993674c630f0dfe243499cc66f367c4",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/359157df2087894563a900e5f63299b42f460be2/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/359157df2087894563a900e5f63299b42f460be2/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=359157df2087894563a900e5f63299b42f460be2",
      "patch": "@@ -1,3 +1,53 @@\n+2020-06-22  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* opcode/aarch64.h (AARCH64_FEATURE_SHA2): Normalize.\n+\t(AARCH64_FEATURE_AES): Likewise.\n+\t(AARCH64_FEATURE_V8_4): Likewise.\n+\t(AARCH64_FEATURE_SM4): Likewise.\n+\t(AARCH64_FEATURE_SHA3): Likewise.\n+\t(AARCH64_FEATURE_V8): Likewise.\n+\t(AARCH64_FEATURE_V8_2): Likewise.\n+\t(AARCH64_FEATURE_V8_3): Likewise.\n+\t(AARCH64_FEATURE_FP): Likewise.\n+\t(AARCH64_FEATURE_SIMD): Likewise.\n+\t(AARCH64_FEATURE_CRC): Likewise.\n+\t(AARCH64_FEATURE_LSE): Likewise.\n+\t(AARCH64_FEATURE_PAN): Likewise.\n+\t(AARCH64_FEATURE_LOR): Likewise.\n+\t(AARCH64_FEATURE_RDMA): Likewise.\n+\t(AARCH64_FEATURE_V8_1): Likewise.\n+\t(AARCH64_FEATURE_F16): Likewise.\n+\t(AARCH64_FEATURE_RAS): Likewise.\n+\t(AARCH64_FEATURE_PROFILE): Likewise.\n+\t(AARCH64_FEATURE_SVE): Likewise.\n+\t(AARCH64_FEATURE_RCPC): Likewise.\n+\t(AARCH64_FEATURE_COMPNUM): Likewise.\n+\t(AARCH64_FEATURE_DOTPROD): Likewise.\n+\t(AARCH64_FEATURE_F16_FML): Likewise.\n+\t(AARCH64_FEATURE_V8_5): Likewise.\n+\t(AARCH64_FEATURE_V8_6): Likewise.\n+\t(AARCH64_FEATURE_BFLOAT16): Likewise.\n+\t(AARCH64_FEATURE_FLAGMANIP): Likewise.\n+\t(AARCH64_FEATURE_FRINTTS): Likewise.\n+\t(AARCH64_FEATURE_SB): Likewise.\n+\t(AARCH64_FEATURE_PREDRES): Likewise.\n+\t(AARCH64_FEATURE_CVADP): Likewise.\n+\t(AARCH64_FEATURE_RNG): Likewise.\n+\t(AARCH64_FEATURE_BTI): Likewise.\n+\t(AARCH64_FEATURE_SCXTNUM): Likewise.\n+\t(AARCH64_FEATURE_ID_PFR2): Likewise.\n+\t(AARCH64_FEATURE_SSBS): Likewise.\n+\t(AARCH64_FEATURE_MEMTAG): Likewise.\n+\t(AARCH64_FEATURE_TME): Likewise.\n+\t(AARCH64_FEATURE_I8MM): Likewise.\n+\t(AARCH64_FEATURE_F32MM): Likewise.\n+\t(AARCH64_FEATURE_F64MM): Likewise.\n+\t(AARCH64_FEATURE_SVE2): Likewise.\n+\t(AARCH64_FEATURE_SVE2_AES): Likewise.\n+\t(AARCH64_FEATURE_SVE2_BITPERM): Likewise.\n+\t(AARCH64_FEATURE_SVE2_SM4): Likewise.\n+\t(AARCH64_FEATURE_SVE2_SHA3): Likewise.\n+\n 2020-06-22  Saagar Jha  <saagar@saagarjha.com>\n \n \t* mach-o/loader.h: Add declarations of two new Mach-O load"
    },
    {
      "sha": "1e6ea191c320040f9af48ab88a52f594d90c75c6",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 47,
      "deletions": 64,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/359157df2087894563a900e5f63299b42f460be2/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/359157df2087894563a900e5f63299b42f460be2/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=359157df2087894563a900e5f63299b42f460be2",
      "patch": "@@ -37,70 +37,53 @@ extern \"C\" {\n typedef uint32_t aarch64_insn;\n \n /* The following bitmasks control CPU features.  */\n-#define AARCH64_FEATURE_SHA2\t0x200000000ULL  /* SHA2 instructions.  */\n-#define AARCH64_FEATURE_AES\t0x800000000ULL  /* AES instructions.  */\n-#define AARCH64_FEATURE_V8_4\t0x000000800ULL  /* ARMv8.4 processors.  */\n-#define AARCH64_FEATURE_SM4\t0x100000000ULL  /* SM3 & SM4 instructions.  */\n-#define AARCH64_FEATURE_SHA3\t0x400000000ULL  /* SHA3 instructions.  */\n-#define AARCH64_FEATURE_V8\t0x00000001\t/* All processors.  */\n-#define AARCH64_FEATURE_V8_2\t0x00000020      /* ARMv8.2 processors.  */\n-#define AARCH64_FEATURE_V8_3\t0x00000040      /* ARMv8.3 processors.  */\n-#define AARCH64_FEATURE_FP\t0x00020000\t/* FP instructions.  */\n-#define AARCH64_FEATURE_SIMD\t0x00040000\t/* SIMD instructions.  */\n-#define AARCH64_FEATURE_CRC\t0x00080000\t/* CRC instructions.  */\n-#define AARCH64_FEATURE_LSE\t0x00100000\t/* LSE instructions.  */\n-#define AARCH64_FEATURE_PAN\t0x00200000\t/* PAN instructions.  */\n-#define AARCH64_FEATURE_LOR\t0x00400000\t/* LOR instructions.  */\n-#define AARCH64_FEATURE_RDMA\t0x00800000\t/* v8.1 SIMD instructions.  */\n-#define AARCH64_FEATURE_V8_1\t0x01000000\t/* v8.1 features.  */\n-#define AARCH64_FEATURE_F16\t0x02000000\t/* v8.2 FP16 instructions.  */\n-#define AARCH64_FEATURE_RAS\t0x04000000\t/* RAS Extensions.  */\n-#define AARCH64_FEATURE_PROFILE\t0x08000000\t/* Statistical Profiling.  */\n-#define AARCH64_FEATURE_SVE\t0x10000000\t/* SVE instructions.  */\n-#define AARCH64_FEATURE_RCPC\t0x20000000\t/* RCPC instructions.  */\n-#define AARCH64_FEATURE_COMPNUM\t0x40000000\t/* Complex # instructions.  */\n-#define AARCH64_FEATURE_DOTPROD 0x080000000     /* Dot Product instructions.  */\n-#define AARCH64_FEATURE_F16_FML\t0x1000000000ULL\t/* v8.2 FP16FML ins.  */\n-#define AARCH64_FEATURE_V8_5\t0x2000000000ULL\t/* ARMv8.5 processors.  */\n-#define AARCH64_FEATURE_V8_6\t0x00000002\t/* ARMv8.6 processors.  */\n-#define AARCH64_FEATURE_BFLOAT16\t0x00000004\t/* Bfloat16 insns.  */\n-\n-/* Flag Manipulation insns.  */\n-#define AARCH64_FEATURE_FLAGMANIP\t0x4000000000ULL\n-/* FRINT[32,64][Z,X] insns.  */\n-#define AARCH64_FEATURE_FRINTTS\t\t0x8000000000ULL\n-/* SB instruction.  */\n-#define AARCH64_FEATURE_SB\t\t0x10000000000ULL\n-/* Execution and Data Prediction Restriction instructions.  */\n-#define AARCH64_FEATURE_PREDRES\t\t0x20000000000ULL\n-/* DC CVADP.  */\n-#define AARCH64_FEATURE_CVADP\t\t0x40000000000ULL\n-/* Random Number instructions.  */\n-#define AARCH64_FEATURE_RNG\t\t0x80000000000ULL\n-/* BTI instructions.  */\n-#define AARCH64_FEATURE_BTI\t\t0x100000000000ULL\n-/* SCXTNUM_ELx.  */\n-#define AARCH64_FEATURE_SCXTNUM\t\t0x200000000000ULL\n-/* ID_PFR2 instructions.  */\n-#define AARCH64_FEATURE_ID_PFR2\t\t0x400000000000ULL\n-/* SSBS mechanism enabled.  */\n-#define AARCH64_FEATURE_SSBS\t\t0x800000000000ULL\n-/* Memory Tagging Extension.  */\n-#define AARCH64_FEATURE_MEMTAG\t\t0x1000000000000ULL\n-/* Transactional Memory Extension.  */\n-#define AARCH64_FEATURE_TME\t\t0x2000000000000ULL\n-\n-/* Matrix Multiply instructions */\n-#define AARCH64_FEATURE_I8MM\t\t0x10000000000000ULL\n-#define AARCH64_FEATURE_F32MM\t\t0x20000000000000ULL\n-#define AARCH64_FEATURE_F64MM\t\t0x40000000000000ULL\n-\n-/* SVE2 instructions.  */\n-#define AARCH64_FEATURE_SVE2\t\t0x000000010\n-#define AARCH64_FEATURE_SVE2_AES\t\t0x000000080\n-#define AARCH64_FEATURE_SVE2_BITPERM\t0x000000100\n-#define AARCH64_FEATURE_SVE2_SM4\t\t0x000000200\n-#define AARCH64_FEATURE_SVE2_SHA3\t0x000000400\n+#define AARCH64_FEATURE_V8\t     (1ULL << 0) /* All processors.  */\n+#define AARCH64_FEATURE_V8_6\t     (1ULL << 1) /* ARMv8.6 processors.  */\n+#define AARCH64_FEATURE_BFLOAT16     (1ULL << 2) /* Bfloat16 insns.  */\n+#define AARCH64_FEATURE_SVE2\t     (1ULL << 4) /* SVE2 instructions.  */\n+#define AARCH64_FEATURE_V8_2\t     (1ULL << 5) /* ARMv8.2 processors.  */\n+#define AARCH64_FEATURE_V8_3\t     (1ULL << 6) /* ARMv8.3 processors.  */\n+#define AARCH64_FEATURE_SVE2_AES     (1ULL << 7)\n+#define AARCH64_FEATURE_SVE2_BITPERM (1ULL << 8)\n+#define AARCH64_FEATURE_SVE2_SM4     (1ULL << 9)\n+#define AARCH64_FEATURE_SVE2_SHA3    (1ULL << 10)\n+#define AARCH64_FEATURE_V8_4\t     (1ULL << 11) /* ARMv8.4 processors.  */\n+#define AARCH64_FEATURE_FP\t     (1ULL << 17) /* FP instructions.  */\n+#define AARCH64_FEATURE_SIMD\t     (1ULL << 18) /* SIMD instructions.  */\n+#define AARCH64_FEATURE_CRC\t     (1ULL << 19) /* CRC instructions.  */\n+#define AARCH64_FEATURE_LSE\t     (1ULL << 20) /* LSE instructions.  */\n+#define AARCH64_FEATURE_PAN\t     (1ULL << 21) /* PAN instructions.  */\n+#define AARCH64_FEATURE_LOR\t     (1ULL << 22) /* LOR instructions.  */\n+#define AARCH64_FEATURE_RDMA\t     (1ULL << 23) /* v8.1 SIMD instructions.  */\n+#define AARCH64_FEATURE_V8_1\t     (1ULL << 24) /* v8.1 features.  */\n+#define AARCH64_FEATURE_F16\t     (1ULL << 25) /* v8.2 FP16 instructions.  */\n+#define AARCH64_FEATURE_RAS\t     (1ULL << 26) /* RAS Extensions.  */\n+#define AARCH64_FEATURE_PROFILE      (1ULL << 27) /* Statistical Profiling.  */\n+#define AARCH64_FEATURE_SVE\t     (1ULL << 28) /* SVE instructions.  */\n+#define AARCH64_FEATURE_RCPC\t     (1ULL << 29) /* RCPC instructions.  */\n+#define AARCH64_FEATURE_COMPNUM      (1ULL << 30) /* Complex # instructions.  */\n+#define AARCH64_FEATURE_DOTPROD      (1ULL << 31) /* Dot Product instructions.  */\n+#define AARCH64_FEATURE_SM4\t     (1ULL << 32) /* SM3 & SM4 instructions.  */\n+#define AARCH64_FEATURE_SHA2\t     (1ULL << 33) /* SHA2 instructions.  */\n+#define AARCH64_FEATURE_SHA3\t     (1ULL << 34) /* SHA3 instructions.  */\n+#define AARCH64_FEATURE_AES\t     (1ULL << 35) /* AES instructions.  */\n+#define AARCH64_FEATURE_F16_FML      (1ULL << 36) /* v8.2 FP16FML ins.  */\n+#define AARCH64_FEATURE_V8_5\t     (1ULL << 37) /* ARMv8.5 processors.  */\n+#define AARCH64_FEATURE_FLAGMANIP    (1ULL << 38) /* Flag Manipulation insns.  */\n+#define AARCH64_FEATURE_FRINTTS      (1ULL << 39) /* FRINT[32,64][Z,X] insns.  */\n+#define AARCH64_FEATURE_SB\t     (1ULL << 40) /* SB instruction.  */\n+#define AARCH64_FEATURE_PREDRES      (1ULL << 41) /* Execution and Data Prediction Restriction instructions.  */\n+#define AARCH64_FEATURE_CVADP\t     (1ULL << 42) /* DC CVADP.  */\n+#define AARCH64_FEATURE_RNG\t     (1ULL << 43) /* Random Number instructions.  */\n+#define AARCH64_FEATURE_BTI\t     (1ULL << 44) /* BTI instructions.  */\n+#define AARCH64_FEATURE_SCXTNUM      (1ULL << 45) /* SCXTNUM_ELx.  */\n+#define AARCH64_FEATURE_ID_PFR2      (1ULL << 46) /* ID_PFR2 instructions.  */\n+#define AARCH64_FEATURE_SSBS\t     (1ULL << 47) /* SSBS mechanism enabled.  */\n+#define AARCH64_FEATURE_MEMTAG       (1ULL << 48) /* Memory Tagging Extension.  */\n+#define AARCH64_FEATURE_TME\t     (1ULL << 49) /* Transactional Memory Extension.  */\n+#define AARCH64_FEATURE_I8MM\t     (1ULL << 52) /* Matrix Multiply instructions.  */\n+#define AARCH64_FEATURE_F32MM\t     (1ULL << 53)\n+#define AARCH64_FEATURE_F64MM\t     (1ULL << 54)\n \n /* Crypto instructions are the combination of AES and SHA2.  */\n #define AARCH64_FEATURE_CRYPTO\t(AARCH64_FEATURE_SHA2 | AARCH64_FEATURE_AES)"
    }
  ]
}