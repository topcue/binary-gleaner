{
  "sha": "a442059f66075e4e503c43b119cc8b7de04e5718",
  "node_id": "C_kwDOANOeidoAKGE0NDIwNTlmNjYwNzVlNGU1MDNjNDNiMTE5Y2M4YjdkZTA0ZTU3MTg",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-02T08:31:06Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-03T00:16:29Z"
    },
    "message": "PR28523, ld.bfd created undefined symbols on ppc64\n\nThis patch removes any fake (linker created) function descriptor\nsymbol if its code entry symbol isn't dynamic, to ensure bogus dynamic\nsymbols are not created.  The change to func_desc_adjust requires that\nit be run only once, which means ppc64_elf_tls_setup can't call it for\njust a few selected symbols.\n\n\tPR 28523\n\t* elf64-ppc.c (func_desc_adjust): If a function entry sym is\n\tnot dynamic and has no plt entry, hide any associated fake\n\tfunction descriptor symbol.\n\t(ppc64_elf_edit): Move func_desc_adjust iteration over syms to..\n\t(ppc64_elf_tls_setup): ..here.",
    "tree": {
      "sha": "7e3791fb77f3d3d4d6903a7a47c657b9b02e1319",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7e3791fb77f3d3d4d6903a7a47c657b9b02e1319"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a442059f66075e4e503c43b119cc8b7de04e5718",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a442059f66075e4e503c43b119cc8b7de04e5718",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a442059f66075e4e503c43b119cc8b7de04e5718",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a442059f66075e4e503c43b119cc8b7de04e5718/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b480ee76e4a94317459e6ee91b48fd32fd883e30",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b480ee76e4a94317459e6ee91b48fd32fd883e30",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b480ee76e4a94317459e6ee91b48fd32fd883e30"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 14,
    "deletions": 16
  },
  "files": [
    {
      "sha": "40ae96b00d5e67ff08d987a53a0ff06048551f6c",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 14,
      "deletions": 16,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442059f66075e4e503c43b119cc8b7de04e5718/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442059f66075e4e503c43b119cc8b7de04e5718/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=a442059f66075e4e503c43b119cc8b7de04e5718",
      "patch": "@@ -6281,7 +6281,8 @@ tls_get_addr_epilogue (bfd *obfd, bfd_byte *p, struct ppc_link_hash_table *htab)\n \n /* Called via elf_link_hash_traverse to transfer dynamic linking\n    information on function code symbol entries to their corresponding\n-   function descriptor symbol entries.  */\n+   function descriptor symbol entries.  Must not be called twice for\n+   any given code symbol.  */\n \n static bool\n func_desc_adjust (struct elf_link_hash_entry *h, void *inf)\n@@ -6339,7 +6340,11 @@ func_desc_adjust (struct elf_link_hash_entry *h, void *inf)\n \tif (ent->plt.refcount > 0)\n \t  break;\n       if (ent == NULL)\n-\treturn true;\n+\t{\n+\t  if (fdh != NULL && fdh->fake)\n+\t    _bfd_elf_link_hash_hide_symbol (info, &fdh->elf, true);\n+\t  return true;\n+\t}\n     }\n \n   /* Create a descriptor as undefined if necessary.  */\n@@ -6464,12 +6469,6 @@ ppc64_elf_edit (bfd *obfd ATTRIBUTE_UNUSED, struct bfd_link_info *info)\n \t= (htab->elf.hgot->other & ~ELF_ST_VISIBILITY (-1)) | STV_HIDDEN;\n     }\n \n-  if (htab->need_func_desc_adj)\n-    {\n-      elf_link_hash_traverse (&htab->elf, func_desc_adjust, info);\n-      htab->need_func_desc_adj = 0;\n-    }\n-\n   return true;\n }\n \n@@ -7783,6 +7782,13 @@ ppc64_elf_tls_setup (struct bfd_link_info *info)\n   if (htab == NULL)\n     return false;\n \n+  /* Move dynamic linking info to the function descriptor sym.  */\n+  if (htab->need_func_desc_adj)\n+    {\n+      elf_link_hash_traverse (&htab->elf, func_desc_adjust, info);\n+      htab->need_func_desc_adj = 0;\n+    }\n+\n   if (abiversion (info->output_bfd) == 1)\n     htab->opd_abi = 1;\n \n@@ -7830,19 +7836,13 @@ ppc64_elf_tls_setup (struct bfd_link_info *info)\n   tga = elf_link_hash_lookup (&htab->elf, \".__tls_get_addr\",\n \t\t\t      false, false, true);\n   htab->tls_get_addr = ppc_elf_hash_entry (tga);\n-\n-  /* Move dynamic linking info to the function descriptor sym.  */\n-  if (tga != NULL)\n-    func_desc_adjust (tga, info);\n   tga_fd = elf_link_hash_lookup (&htab->elf, \"__tls_get_addr\",\n \t\t\t\t false, false, true);\n   htab->tls_get_addr_fd = ppc_elf_hash_entry (tga_fd);\n \n   desc = elf_link_hash_lookup (&htab->elf, \".__tls_get_addr_desc\",\n \t\t\t       false, false, true);\n   htab->tga_desc = ppc_elf_hash_entry (desc);\n-  if (desc != NULL)\n-    func_desc_adjust (desc, info);\n   desc_fd = elf_link_hash_lookup (&htab->elf, \"__tls_get_addr_desc\",\n \t\t\t\t  false, false, true);\n   htab->tga_desc_fd = ppc_elf_hash_entry (desc_fd);\n@@ -7853,8 +7853,6 @@ ppc64_elf_tls_setup (struct bfd_link_info *info)\n \n       opt = elf_link_hash_lookup (&htab->elf, \".__tls_get_addr_opt\",\n \t\t\t\t  false, false, true);\n-      if (opt != NULL)\n-\tfunc_desc_adjust (opt, info);\n       opt_fd = elf_link_hash_lookup (&htab->elf, \"__tls_get_addr_opt\",\n \t\t\t\t     false, false, true);\n       if (opt_fd != NULL"
    }
  ]
}