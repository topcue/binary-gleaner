{
  "sha": "fb46334198d8d4f82133033758cb75f086d864ad",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI0NjMzNDE5OGQ4ZDRmODIxMzMwMzM3NThjYjc1ZjA4NmQ4NjRhZA==",
  "commit": {
    "author": {
      "name": "Anthony Green",
      "email": "green@moxielogic.com",
      "date": "2019-12-14T10:23:20Z"
    },
    "committer": {
      "name": "Anthony Green",
      "email": "green@moxielogic.com",
      "date": "2019-12-14T10:33:39Z"
    },
    "message": "Add unlink support to moxie simulator\n\nThis change adds support for the unlink system call, which is\nrequired by the GCC testsuite.  It also switches read/write/open\nsystem calls to use the sim_io_* functions.\n\n2019-12-14  Anthony Green  <green@moxielogic.com>\n\n\t* interp.c (sim_engine_run): Make use of sim_io_* functions for\n\tread/write/open system calls.  Implement the unlink system call.",
    "tree": {
      "sha": "a1b9c5c9d574ad58a94e7c8240edae8a4a22feec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1b9c5c9d574ad58a94e7c8240edae8a4a22feec"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb46334198d8d4f82133033758cb75f086d864ad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb46334198d8d4f82133033758cb75f086d864ad",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb46334198d8d4f82133033758cb75f086d864ad",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb46334198d8d4f82133033758cb75f086d864ad/comments",
  "author": {
    "login": "atgreen",
    "id": 89993,
    "node_id": "MDQ6VXNlcjg5OTkz",
    "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/atgreen",
    "html_url": "https://github.com/atgreen",
    "followers_url": "https://api.github.com/users/atgreen/followers",
    "following_url": "https://api.github.com/users/atgreen/following{/other_user}",
    "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions",
    "organizations_url": "https://api.github.com/users/atgreen/orgs",
    "repos_url": "https://api.github.com/users/atgreen/repos",
    "events_url": "https://api.github.com/users/atgreen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/atgreen/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "atgreen",
    "id": 89993,
    "node_id": "MDQ6VXNlcjg5OTkz",
    "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/atgreen",
    "html_url": "https://github.com/atgreen",
    "followers_url": "https://api.github.com/users/atgreen/followers",
    "following_url": "https://api.github.com/users/atgreen/following{/other_user}",
    "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions",
    "organizations_url": "https://api.github.com/users/atgreen/orgs",
    "repos_url": "https://api.github.com/users/atgreen/repos",
    "events_url": "https://api.github.com/users/atgreen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/atgreen/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ff8577f64987a898e1dc5eb6afb66a404fb7bb16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff8577f64987a898e1dc5eb6afb66a404fb7bb16",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff8577f64987a898e1dc5eb6afb66a404fb7bb16"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 21,
    "deletions": 3
  },
  "files": [
    {
      "sha": "9f21b3c90ed6a4ca41bb8abe1ba9a1db5d207651",
      "filename": "sim/moxie/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb46334198d8d4f82133033758cb75f086d864ad/sim/moxie/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb46334198d8d4f82133033758cb75f086d864ad/sim/moxie/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/moxie/ChangeLog?ref=fb46334198d8d4f82133033758cb75f086d864ad",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-14  Anthony Green  <green@moxielogic.com>\n+\n+\t* interp.c (sim_engine_run): Make use of sim_io_* functions for\n+\tread/write/open system calls.  Implement the unlink system call.\n+\n 2017-09-06  John Baldwin  <jhb@FreeBSD.org>\n \n \t* configure: Regenerate."
    },
    {
      "sha": "fe770093e533d3ede553191c91584f2e8abab602",
      "filename": "sim/moxie/interp.c",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb46334198d8d4f82133033758cb75f086d864ad/sim/moxie/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb46334198d8d4f82133033758cb75f086d864ad/sim/moxie/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/moxie/interp.c?ref=fb46334198d8d4f82133033758cb75f086d864ad",
      "patch": "@@ -32,6 +32,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"sim-main.h\"\n #include \"sim-base.h\"\n #include \"sim-options.h\"\n+#include \"sim-io.h\"\n \n typedef int word;\n typedef unsigned int uword;\n@@ -942,9 +943,10 @@ sim_engine_run (SIM_DESC sd,\n \t\t      char fname[1024];\n \t\t      int mode = (int) convert_target_flags ((unsigned) cpu.asregs.regs[3]);\n \t\t      int perm = (int) cpu.asregs.regs[4];\n-\t\t      int fd = open (fname, mode, perm);\n+\t\t      int fd;\n \t\t      sim_core_read_buffer (sd, scpu, read_map, fname,\n \t\t\t\t\t    cpu.asregs.regs[2], 1024);\n+\t\t      fd = sim_io_open (sd, fname, mode);\n \t\t      /* FIXME - set errno */\n \t\t      cpu.asregs.regs[2] = fd;\n \t\t      break;\n@@ -954,7 +956,7 @@ sim_engine_run (SIM_DESC sd,\n \t\t      int fd = cpu.asregs.regs[2];\n \t\t      unsigned len = (unsigned) cpu.asregs.regs[4];\n \t\t      char *buf = malloc (len);\n-\t\t      cpu.asregs.regs[2] = read (fd, buf, len);\n+\t\t      cpu.asregs.regs[2] = sim_io_read (sd, fd, buf, len);\n \t\t      sim_core_write_buffer (sd, scpu, write_map, buf,\n \t\t\t\t\t     cpu.asregs.regs[3], len);\n \t\t      free (buf);\n@@ -968,11 +970,22 @@ sim_engine_run (SIM_DESC sd,\n \t\t      str = malloc (len);\n \t\t      sim_core_read_buffer (sd, scpu, read_map, str,\n \t\t\t\t\t    cpu.asregs.regs[3], len);\n-\t\t      count = write (cpu.asregs.regs[2], str, len);\n+\t\t      count = sim_io_write (sd, cpu.asregs.regs[2], str, len);\n \t\t      free (str);\n \t\t      cpu.asregs.regs[2] = count;\n \t\t      break;\n \t\t    }\n+\t\t  case 0x7: /* SYS_unlink */\n+\t\t    {\n+\t\t      char fname[1024];\n+\t\t      int fd;\n+\t\t      sim_core_read_buffer (sd, scpu, read_map, fname,\n+\t\t\t\t\t    cpu.asregs.regs[2], 1024);\n+\t\t      fd = sim_io_unlink (sd, fname);\n+\t\t      /* FIXME - set errno */\n+\t\t      cpu.asregs.regs[2] = fd;\n+\t\t      break;\n+\t\t    }\n \t\t  case 0xffffffff: /* Linux System Call */\n \t\t    {\n \t\t      unsigned int handler = cpu.asregs.sregs[1];"
    }
  ]
}