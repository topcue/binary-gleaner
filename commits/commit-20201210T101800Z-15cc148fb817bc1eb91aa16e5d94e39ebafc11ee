{
  "sha": "15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTVjYzE0OGZiODE3YmMxZWI5MWFhMTZlNWQ5NGUzOWViYWZjMTFlZQ==",
  "commit": {
    "author": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-12-07T19:54:03Z"
    },
    "committer": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-12-10T10:18:00Z"
    },
    "message": "gdb: move bfd_open_from_target_memory to gdb_bfd\n\nThis function allows to create a BFD handle using an accessible memory\nrange in a target memory.  It is currently contained in a JIT module but\nthis functionality may be of wider usefullness - for example, reading\nELF binaries contained within a core dump.\n\ngdb/ChangeLog:\n2020-12-07  Mihails Strasuns  <mihails.strasuns@intel.com>\n\n\t* jit.c (mem_bfd*, bfd_open_from_target_memory): Removed.\n\t* gdb_bfd.h (gdb_bfd_open_from_target_memory): New function.\n\t* gdb_bfd.c (mem_bfd*, gdb_bfd_open_from_target_memory): New functions.",
    "tree": {
      "sha": "ccae04d13503626501e682f6f5cafc53d8b3b934",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ccae04d13503626501e682f6f5cafc53d8b3b934"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/comments",
  "author": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c2137f55ad04e451d834048d4bfec1de2daea20e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2137f55ad04e451d834048d4bfec1de2daea20e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c2137f55ad04e451d834048d4bfec1de2daea20e"
    }
  ],
  "stats": {
    "total": 182,
    "additions": 99,
    "deletions": 83
  },
  "files": [
    {
      "sha": "93529546e3f0d519c689c5b6e124ceea3c554cb1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-07  Mihails Strasuns  <mihails.strasuns@intel.com>\n+\n+\t* jit.c (mem_bfd*, bfd_open_from_target_memory): Removed.\n+\t* gdb_bfd.h (gdb_bfd_open_from_target_memory): New function.\n+\t* gdb_bfd.c (mem_bfd*, gdb_bfd_open_from_target_memory): New functions.\t\n+\n 2020-12-09  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_lookup_encoded_symbol): Use add_angle_brackets."
    },
    {
      "sha": "0ea82c95b876c58144039a93d2dccc54be05ce93",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
      "patch": "@@ -207,6 +207,91 @@ gdb_bfd_has_target_filename (struct bfd *abfd)\n   return is_target_filename (bfd_get_filename (abfd));\n }\n \n+/* For `gdb_bfd_open_from_target_memory`.  */\n+\n+struct target_buffer\n+{\n+  CORE_ADDR base;\n+  ULONGEST size;\n+};\n+\n+/* For `gdb_bfd_open_from_target_memory`.  Opening the file is a no-op.  */\n+\n+static void *\n+mem_bfd_iovec_open (struct bfd *abfd, void *open_closure)\n+{\n+  return open_closure;\n+}\n+\n+/* For `gdb_bfd_open_from_target_memory`.  Closing the file is just freeing the\n+   base/size pair on our side.  */\n+\n+static int\n+mem_bfd_iovec_close (struct bfd *abfd, void *stream)\n+{\n+  xfree (stream);\n+\n+  /* Zero means success.  */\n+  return 0;\n+}\n+\n+/* For `gdb_bfd_open_from_target_memory`.  For reading the file, we just need to\n+   pass through to target_read_memory and fix up the arguments and return\n+   values.  */\n+\n+static file_ptr\n+mem_bfd_iovec_pread (struct bfd *abfd, void *stream, void *buf,\n+\t\t     file_ptr nbytes, file_ptr offset)\n+{\n+  int err;\n+  struct target_buffer *buffer = (struct target_buffer *) stream;\n+\n+  /* If this read will read all of the file, limit it to just the rest.  */\n+  if (offset + nbytes > buffer->size)\n+    nbytes = buffer->size - offset;\n+\n+  /* If there are no more bytes left, we've reached EOF.  */\n+  if (nbytes == 0)\n+    return 0;\n+\n+  err = target_read_memory (buffer->base + offset, (gdb_byte *) buf, nbytes);\n+  if (err)\n+    return -1;\n+\n+  return nbytes;\n+}\n+\n+/* For `gdb_bfd_open_from_target_memory`.  For statting the file, we only\n+   support the st_size attribute.  */\n+\n+static int\n+mem_bfd_iovec_stat (struct bfd *abfd, void *stream, struct stat *sb)\n+{\n+  struct target_buffer *buffer = (struct target_buffer*) stream;\n+\n+  memset (sb, 0, sizeof (struct stat));\n+  sb->st_size = buffer->size;\n+  return 0;\n+}\n+\n+/* See gdb_bfd.h.  */\n+\n+gdb_bfd_ref_ptr\n+gdb_bfd_open_from_target_memory (CORE_ADDR addr, ULONGEST size,\n+\t\t\t\t const char *target,\n+\t\t\t\t const char *filename)\n+{\n+  struct target_buffer *buffer = XNEW (struct target_buffer);\n+\n+  buffer->base = addr;\n+  buffer->size = size;\n+  return gdb_bfd_openr_iovec (filename ? filename : \"<in-memory>\", target,\n+\t\t\t      mem_bfd_iovec_open,\n+\t\t\t      buffer,\n+\t\t\t      mem_bfd_iovec_pread,\n+\t\t\t      mem_bfd_iovec_close,\n+\t\t\t      mem_bfd_iovec_stat);\n+}\n \n /* Return the system error number corresponding to ERRNUM.  */\n "
    },
    {
      "sha": "5c1a9548edc63103ecd8bc312612c3eeec1519b9",
      "filename": "gdb/gdb_bfd.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/gdb_bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/gdb_bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.h?ref=15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
      "patch": "@@ -194,6 +194,12 @@ int gdb_bfd_requires_relocations (bfd *abfd);\n bool gdb_bfd_get_full_section_contents (bfd *abfd, asection *section,\n \t\t\t\t\tgdb::byte_vector *contents);\n \n+/* Create and initialize a BFD handle from a target in-memory range.  */\n+\n+gdb_bfd_ref_ptr gdb_bfd_open_from_target_memory (CORE_ADDR addr, ULONGEST size,\n+\t\t\t\t\t\t const char *target,\n+\t\t\t\t\t\t const char *filename = nullptr);\n+\n /* Range adapter for a BFD's sections.\n \n    To be used as:"
    },
    {
      "sha": "e36b3c3b68af6880db3c29f31b273ea7cbaac03d",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 2,
      "deletions": 83,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15cc148fb817bc1eb91aa16e5d94e39ebafc11ee/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=15cc148fb817bc1eb91aa16e5d94e39ebafc11ee",
      "patch": "@@ -69,86 +69,6 @@ show_jit_debug (struct ui_file *file, int from_tty,\n   fprintf_filtered (file, _(\"JIT debugging is %s.\\n\"), value);\n }\n \n-struct target_buffer\n-{\n-  CORE_ADDR base;\n-  ULONGEST size;\n-};\n-\n-/* Opening the file is a no-op.  */\n-\n-static void *\n-mem_bfd_iovec_open (struct bfd *abfd, void *open_closure)\n-{\n-  return open_closure;\n-}\n-\n-/* Closing the file is just freeing the base/size pair on our side.  */\n-\n-static int\n-mem_bfd_iovec_close (struct bfd *abfd, void *stream)\n-{\n-  xfree (stream);\n-\n-  /* Zero means success.  */\n-  return 0;\n-}\n-\n-/* For reading the file, we just need to pass through to target_read_memory and\n-   fix up the arguments and return values.  */\n-\n-static file_ptr\n-mem_bfd_iovec_pread (struct bfd *abfd, void *stream, void *buf,\n-\t\t     file_ptr nbytes, file_ptr offset)\n-{\n-  int err;\n-  struct target_buffer *buffer = (struct target_buffer *) stream;\n-\n-  /* If this read will read all of the file, limit it to just the rest.  */\n-  if (offset + nbytes > buffer->size)\n-    nbytes = buffer->size - offset;\n-\n-  /* If there are no more bytes left, we've reached EOF.  */\n-  if (nbytes == 0)\n-    return 0;\n-\n-  err = target_read_memory (buffer->base + offset, (gdb_byte *) buf, nbytes);\n-  if (err)\n-    return -1;\n-\n-  return nbytes;\n-}\n-\n-/* For statting the file, we only support the st_size attribute.  */\n-\n-static int\n-mem_bfd_iovec_stat (struct bfd *abfd, void *stream, struct stat *sb)\n-{\n-  struct target_buffer *buffer = (struct target_buffer*) stream;\n-\n-  memset (sb, 0, sizeof (struct stat));\n-  sb->st_size = buffer->size;\n-  return 0;\n-}\n-\n-/* Open a BFD from the target's memory.  */\n-\n-static gdb_bfd_ref_ptr\n-bfd_open_from_target_memory (CORE_ADDR addr, ULONGEST size,\n-\t\t\t     const char *target)\n-{\n-  struct target_buffer *buffer = XNEW (struct target_buffer);\n-\n-  buffer->base = addr;\n-  buffer->size = size;\n-  return gdb_bfd_openr_iovec (\"<in-memory>\", target,\n-\t\t\t      mem_bfd_iovec_open,\n-\t\t\t      buffer,\n-\t\t\t      mem_bfd_iovec_pread,\n-\t\t\t      mem_bfd_iovec_close,\n-\t\t\t      mem_bfd_iovec_stat);\n-}\n-\n struct jit_reader\n {\n   jit_reader (struct gdb_reader_funcs *f, gdb_dlhandle_up &&h)\n@@ -773,9 +693,8 @@ jit_bfd_try_read_symtab (struct jit_code_entry *code_entry,\n \t\t\tpaddress (gdbarch, code_entry->symfile_addr),\n \t\t\tpulongest (code_entry->symfile_size));\n \n-  gdb_bfd_ref_ptr nbfd (bfd_open_from_target_memory (code_entry->symfile_addr,\n-\t\t\t\t\t\t     code_entry->symfile_size,\n-\t\t\t\t\t\t     gnutarget));\n+  gdb_bfd_ref_ptr nbfd (gdb_bfd_open_from_target_memory\n+      (code_entry->symfile_addr, code_entry->symfile_size, gnutarget));\n   if (nbfd == NULL)\n     {\n       puts_unfiltered (_(\"Error opening JITed symbol file, ignoring it.\\n\"));"
    }
  ]
}