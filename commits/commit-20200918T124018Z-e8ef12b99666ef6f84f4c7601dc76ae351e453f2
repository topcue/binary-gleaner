{
  "sha": "e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZThlZjEyYjk5NjY2ZWY2Zjg0ZjRjNzYwMWRjNzZhZTM1MWU0NTNmMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-18T12:40:18Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-18T12:40:18Z"
    },
    "message": "Fix \"thread find\" with multiple inferiors/targets (PR gdb/26631)\n\n\"thread find\" with multiple inferiors got broken with the multi-target\nwork:\n\n Thread 1 \"gdb\" hit Breakpoint 1, internal_error (...) at ../../src/gdbsupport/errors.cc:51\n 51      {\n (top-gdb) bt\n #0  internal_error (file=0xffffd4d0 <error: Cannot access memory at address 0xffffd4d0>, line=0, fmt=0x555556330320 \"en_US.UTF-8\") at ../../src/gdbsupport/errors.cc:51\n #1  0x0000555555bca4c7 in target_thread_name (info=0x555556801290) at ../../src/gdb/target.c:2035\n #2  0x0000555555beb07a in thread_find_command (arg=0x7fffffffe08e \"1\", from_tty=0) at ../../src/gdb/thread.c:1959\n #3  0x000055555572ec49 in do_const_cfunc (c=0x555556786bc0, args=0x7fffffffe08e \"1\", from_tty=0) at ../../src/gdb/cli/cli-decode.c:95\n #4  0x0000555555732abd in cmd_func (cmd=0x555556786bc0, args=0x7fffffffe08e \"1\", from_tty=0) at ../../src/gdb/cli/cli-decode.c:2181\n #5  0x0000555555bf1245 in execute_command (p=0x7fffffffe08e \"1\", from_tty=0) at ../../src/gdb/top.c:664\n #6  0x00005555559cad10 in catch_command_errors (command=0x555555bf0c31 <execute_command(char const*, int)>, arg=0x7fffffffe082 \"thread find 1\", from_tty=0) at ../../src/gdb/main.c:457\n #7  0x00005555559cc33d in captured_main_1 (context=0x7fffffffdb60) at ../../src/gdb/main.c:1218\n #8  0x00005555559cc571 in captured_main (data=0x7fffffffdb60) at ../../src/gdb/main.c:1243\n #9  0x00005555559cc5e8 in gdb_main (args=0x7fffffffdb60) at ../../src/gdb/main.c:1268\n #10 0x0000555555623816 in main (argc=17, argv=0x7fffffffdc78) at ../../src/gdb/gdb.c:32\n\nThe problem is that we're not switching to the inferior/target before\ncalling target methods, which trips on an assertion put in place\nexactly to catch this sort of problem.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/26631\n\t* gdb.multi/multi-target-thread-find.exp: New file.\n\ngdb/ChangeLog:\n\n\tPR gdb/26631\n\t* thread.c (thread_find_command): Switch inferior before calling\n\ttarget methods.",
    "tree": {
      "sha": "d72f48f6f54ac6b8e87f5471b136f745242c511b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d72f48f6f54ac6b8e87f5471b136f745242c511b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e11daf7a2e0e08e0820f528175113134151a1a14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11daf7a2e0e08e0820f528175113134151a1a14",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e11daf7a2e0e08e0820f528175113134151a1a14"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 123,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c7b743826ef68b9ba8eb09ec8fb3051170a378c6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-18  Pedro Alves  <pedro@palves.net>\n+\n+\tPR gdb/26631\n+\t* thread.c (thread_find_command): Switch inferior before calling\n+\ttarget methods.\n+\n 2020-09-17  Tom Tromey  <tromey@adacore.com>\n \n \t* tic6x-tdep.c (tic6x_gdbarch_init): Update."
    },
    {
      "sha": "ef4006bff6f80a9cff83b7dc3e30e241dca9c6f8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-18  Pedro Alves  <pedro@palves.net>\n+\n+\tPR gdb/26631\n+\t* gdb.multi/multi-target-thread-find.exp: New file.\n+\n 2020-09-18  Pedro Alves  <pedro@palves.net>\n \n \t* gdb.multi/multi-target-continue.exp: New file, factored out from"
    },
    {
      "sha": "8cdbcb856598baa09a99710f1a91f7c50d7425c6",
      "filename": "gdb/testsuite/gdb.multi/multi-target-thread-find.exp",
      "status": "added",
      "additions": 106,
      "deletions": 0,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/testsuite/gdb.multi/multi-target-thread-find.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/testsuite/gdb.multi/multi-target-thread-find.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-thread-find.exp?ref=e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
      "patch": "@@ -0,0 +1,106 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"thread find\" with multiple inferiors/targets.  Regression test\n+# for PR gdb/26631.\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+proc test_thread_find {} {\n+    global decimal gdb_prompt\n+\n+    set NUM_INFS 6\n+\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    # This makes sure we don't crash.  See PR gdb/26631.\n+    gdb_test \"thread find xxxyyyzzz\" \\\n+\t\"No threads match 'xxxyyyzzz'\"\n+\n+    # Create thread names.\n+    for {set i 1} {$i <= $NUM_INFS} {incr i} {\n+\tgdb_test \"thread apply $i.1 thread name threadname_$i\" \\\n+\t    \"Thread $i.1 .*\" \\\n+\t    \"name thread $i\"\n+    }\n+\n+    # Collect target ids.\n+\n+    for {set i 1} {$i <= $NUM_INFS} {incr i} {\n+\tset target_id($i) \"\"\n+    }\n+    set any \"\\[^\\r\\n\\]*\"\n+    gdb_test_multiple \"info threads\" \"collect thread id\" {\n+\t-re \". ($decimal).$decimal  (Thread ${any}) \\\"threadname_\\[0-9\\]+\\\" $any\" {\n+\t    set thr_num $expect_out(1,string)\n+\t    set target_id($thr_num) $expect_out(2,string)\n+\t    exp_continue\n+\t}\n+\t-re \".*$gdb_prompt $\" {\n+\t    pass \"collect target id\"\n+\t}\n+    }\n+\n+    # Find the threads by name.  Note we repeat the search with each\n+    # inferior selected, so that we're sure that GDB doesn't get\n+    # confused with which target stack to consult.\n+\n+    with_test_prefix \"find by name\" {\n+\tfor {set sel_inf 1} {$sel_inf <= $NUM_INFS} {incr sel_inf} {\n+\t    with_test_prefix \"inf $sel_inf\" {\n+\n+\t\tgdb_test \"inferior $sel_inf\" \\\n+\t\t    \"Switching to inferior $sel_inf .*\"\n+\n+\t\tfor {set find_inf 1} {$find_inf <= $NUM_INFS} {incr find_inf} {\n+\t\t    gdb_test \"thread find threadname_$find_inf\" \\\n+\t\t\t\"Thread $find_inf.1 has name 'threadname_$find_inf'\" \\\n+\t\t\t\"find thread name $find_inf\"\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    # Find the threads by target id.  Likewise we repeat the search\n+    # with each inferior selected.\n+\n+    with_test_prefix \"find by target id\" {\n+\tfor {set sel_inf 1} {$sel_inf <= $NUM_INFS} {incr sel_inf} {\n+\t    with_test_prefix \"inf $sel_inf\" {\n+\n+\t\tgdb_test \"inferior $sel_inf\" \\\n+\t\t    \"Switching to inferior $sel_inf .*\"\n+\n+\t\tfor {set find_inf 1} {$find_inf <= $NUM_INFS} {incr find_inf} {\n+\t\t    set target_id_re [string_to_regexp $target_id($find_inf)]\n+\t\t    gdb_test \"thread find $target_id($find_inf)\" \\\n+\t\t\t\"Thread $find_inf.1 has target id '$target_id_re'.*\" \\\n+\t\t\t\"find thread target id $find_inf\"\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+test_thread_find\n+\n+multi_target_cleanup"
    },
    {
      "sha": "0217f3b54f7a1054d1422f58755ad305c812ca55",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8ef12b99666ef6f84f4c7601dc76ae351e453f2/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=e8ef12b99666ef6f84f4c7601dc76ae351e453f2",
      "patch": "@@ -1946,9 +1946,15 @@ thread_find_command (const char *arg, int from_tty)\n   if (tmp != 0)\n     error (_(\"Invalid regexp (%s): %s\"), tmp, arg);\n \n+  /* We're going to be switching threads.  */\n+  scoped_restore_current_thread restore_thread;\n+\n   update_thread_list ();\n+\n   for (thread_info *tp : all_threads ())\n     {\n+      switch_to_inferior_no_thread (tp->inf);\n+\n       if (tp->name != NULL && re_exec (tp->name))\n \t{\n \t  printf_filtered (_(\"Thread %s has name '%s'\\n\"),"
    }
  ]
}