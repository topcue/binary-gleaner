{
  "sha": "4d080b4687deb2441a81762f3b01fc51cd13bd97",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGQwODBiNDY4N2RlYjI0NDFhODE3NjJmM2IwMWZjNTFjZDEzYmQ5Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:41Z"
    },
    "message": "Introduce method wrappers for quick_symbol_functions\n\nThis introduces wrappers for each function in quick_symbol_functions.\nThe wrappers are methods on objfile, and are defined in\nsymfile-debug.c, so that they can use the symfile_debug variable.\nPlaces that call the quick functions are all updated to call these new\nwrapper methods.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (iterate_over_symtabs, expand_symtab_containing_pc)\n\t(lookup_symbol_via_quick_fns, find_quick_global_symbol_language)\n\t(basic_lookup_transparent_type_quick)\n\t(find_pc_sect_compunit_symtab, find_symbol_at_address)\n\t(find_line_symtab, global_symbol_searcher::expand_symtabs):\n\tUpdate.\n\t* symmisc.c (print_objfile_statistics, dump_objfile)\n\t(maintenance_expand_symtabs): Update.\n\t* symfile.c (symbol_file_add_with_addrs)\n\t(expand_symtabs_matching, map_symbol_filenames): Update.\n\t* symfile-debug.c (objfile::has_partial_symbols)\n\t(objfile::find_last_source_symtab)\n\t(objfile::forget_cached_source_info)\n\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n\t(objfile::print_stats, objfile::dump)\n\t(objfile::expand_symtabs_for_function)\n\t(objfile::expand_all_symtabs)\n\t(objfile::expand_symtabs_with_fullname)\n\t(objfile::map_matching_symbols)\n\t(objfile::expand_symtabs_matching)\n\t(objfile::find_pc_sect_compunit_symtab)\n\t(objfile::map_symbol_filenames)\n\t(objfile::find_compunit_symtab_by_address)\n\t(objfile::lookup_global_symbol_language): New methods.\n\t(debug_sym_quick_functions): Remove.\n\t(debug_sym_fns, install_symfile_debug_logging): Update.\n\t* source.c (forget_cached_source_info_for_objfile)\n\t(select_source_symtab): Update.\n\t* objfiles.h (struct objfile): Add methods corresponding to\n\tquick_symbol_functions.\n\t* objfiles.c (objfile::has_partial_symbols): Move to\n\tsymfile-debug.c.\n\t* linespec.c (iterate_over_all_matching_symtabs): Update.\n\t* cp-support.c (add_symbol_overload_list_qualified): Update.\n\t* ada-lang.c (add_nonlocal_symbols): Update.",
    "tree": {
      "sha": "09d767267d4430e86c9cc5637fcc328d05c7ceab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/09d767267d4430e86c9cc5637fcc328d05c7ceab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d080b4687deb2441a81762f3b01fc51cd13bd97",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d080b4687deb2441a81762f3b01fc51cd13bd97",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d080b4687deb2441a81762f3b01fc51cd13bd97",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d080b4687deb2441a81762f3b01fc51cd13bd97/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fae2120ba0a6fd9288af24b359bf0e3ab3556cdb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fae2120ba0a6fd9288af24b359bf0e3ab3556cdb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fae2120ba0a6fd9288af24b359bf0e3ab3556cdb"
    }
  ],
  "stats": {
    "total": 736,
    "additions": 368,
    "deletions": 368
  },
  "files": [
    {
      "sha": "dc96da12c7852751654c22f30614351e693287df",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -1,3 +1,41 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (iterate_over_symtabs, expand_symtab_containing_pc)\n+\t(lookup_symbol_via_quick_fns, find_quick_global_symbol_language)\n+\t(basic_lookup_transparent_type_quick)\n+\t(find_pc_sect_compunit_symtab, find_symbol_at_address)\n+\t(find_line_symtab, global_symbol_searcher::expand_symtabs):\n+\tUpdate.\n+\t* symmisc.c (print_objfile_statistics, dump_objfile)\n+\t(maintenance_expand_symtabs): Update.\n+\t* symfile.c (symbol_file_add_with_addrs)\n+\t(expand_symtabs_matching, map_symbol_filenames): Update.\n+\t* symfile-debug.c (objfile::has_partial_symbols)\n+\t(objfile::find_last_source_symtab)\n+\t(objfile::forget_cached_source_info)\n+\t(objfile::map_symtabs_matching_filename, objfile::lookup_symbol)\n+\t(objfile::print_stats, objfile::dump)\n+\t(objfile::expand_symtabs_for_function)\n+\t(objfile::expand_all_symtabs)\n+\t(objfile::expand_symtabs_with_fullname)\n+\t(objfile::map_matching_symbols)\n+\t(objfile::expand_symtabs_matching)\n+\t(objfile::find_pc_sect_compunit_symtab)\n+\t(objfile::map_symbol_filenames)\n+\t(objfile::find_compunit_symtab_by_address)\n+\t(objfile::lookup_global_symbol_language): New methods.\n+\t(debug_sym_quick_functions): Remove.\n+\t(debug_sym_fns, install_symfile_debug_logging): Update.\n+\t* source.c (forget_cached_source_info_for_objfile)\n+\t(select_source_symtab): Update.\n+\t* objfiles.h (struct objfile): Add methods corresponding to\n+\tquick_symbol_functions.\n+\t* objfiles.c (objfile::has_partial_symbols): Move to\n+\tsymfile-debug.c.\n+\t* linespec.c (iterate_over_all_matching_symtabs): Update.\n+\t* cp-support.c (add_symbol_overload_list_qualified): Update.\n+\t* ada-lang.c (add_nonlocal_symbols): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* objfiles.h (struct objfile) <has_partial_symbols>: Return bool."
    },
    {
      "sha": "d0374780b9891e9d3018409796d15c9647986d12",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -5203,11 +5203,8 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n     {\n       data.objfile = objfile;\n \n-      if (objfile->sf != nullptr)\n-\tobjfile->sf->qf->map_matching_symbols (objfile, lookup_name,\n-\t\t\t\t\t       domain, global, callback,\n-\t\t\t\t\t       (is_wild_match\n-\t\t\t\t\t\t? NULL : compare_names));\n+      objfile->map_matching_symbols (lookup_name, domain, global, callback,\n+\t\t\t\t     is_wild_match ? NULL : compare_names);\n \n       for (compunit_symtab *cu : objfile->compunits ())\n \t{\n@@ -5229,10 +5226,8 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n       for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  data.objfile = objfile;\n-\t  if (objfile->sf != nullptr)\n-\t    objfile->sf->qf->map_matching_symbols (objfile, name1,\n-\t\t\t\t\t\t   domain, global, callback,\n-\t\t\t\t\t\t   compare_names);\n+\t  objfile->map_matching_symbols (name1, domain, global, callback,\n+\t\t\t\t\t compare_names);\n \t}\n     }      \t\n }"
    },
    {
      "sha": "eba477d549d1c124338fb2d67551c79322388d91",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -1452,10 +1452,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n      matching FUNC_NAME.  Make sure we read that symbol table in.  */\n \n   for (objfile *objf : current_program_space->objfiles ())\n-    {\n-      if (objf->sf)\n-\tobjf->sf->qf->expand_symtabs_for_function (objf, func_name);\n-    }\n+    objf->expand_symtabs_for_function (func_name);\n \n   /* Search upwards from currently selected frame (so that we can\n      complete on local vars.  */"
    },
    {
      "sha": "c7dbd3eeae2a34a8dced072ea8b879fe0a38df62",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -1168,12 +1168,8 @@ iterate_over_all_matching_symtabs\n \n       for (objfile *objfile : current_program_space->objfiles ())\n \t{\n-\t  if (objfile->sf)\n-\t    objfile->sf->qf->expand_symtabs_matching (objfile,\n-\t\t\t\t\t\t      NULL,\n-\t\t\t\t\t\t      &lookup_name,\n-\t\t\t\t\t\t      NULL, NULL,\n-\t\t\t\t\t\t      search_domain);\n+\t  objfile->expand_symtabs_matching (NULL, &lookup_name, NULL, NULL,\n+\t\t\t\t\t    search_domain);\n \n \t  for (compunit_symtab *cu : objfile->compunits ())\n \t    {"
    },
    {
      "sha": "f18f6158fc3a57e05bfb750df202e1fc11718491",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -810,25 +810,6 @@ objfile_rebase (struct objfile *objfile, CORE_ADDR slide)\n     breakpoint_re_set ();\n }\n \f\n-/* See objfiles.h.  */\n-\n-bool\n-objfile::has_partial_symbols ()\n-{\n-  if (!sf)\n-    return false;\n-\n-  /* If we have not read psymbols, but we have a function capable of reading\n-     them, then that is an indication that they are in fact available.  Without\n-     this function the symbols may have been already read in but they also may\n-     not be present in this objfile.  */\n-  if ((flags & OBJF_PSYMTABS_READ) == 0\n-      && sf->sym_read_psymbols != NULL)\n-    return true;\n-\n-  return sf->qf->has_symbols (this);\n-}\n-\n /* Return non-zero if OBJFILE has full symbols.  */\n \n int"
    },
    {
      "sha": "c55f0f174fc9220791c4e924c2e547e256617014",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 67,
      "deletions": 2,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -415,8 +415,8 @@ class separate_debug_range\n \n    GDB typically reads symbols twice -- first an initial scan which just\n    reads \"partial symbols\"; these are partial information for the\n-   static/global symbols in a symbol file.  When later looking up symbols,\n-   objfile->sf->qf->lookup_symbol is used to check if we only have a partial\n+   static/global symbols in a symbol file.  When later looking up\n+   symbols, lookup_symbol is used to check if we only have a partial\n    symbol and if so, read and expand the full compunit.  */\n \n struct objfile\n@@ -552,6 +552,71 @@ struct objfile\n \n   bool has_partial_symbols ();\n \n+  /* See quick_symbol_functions.  */\n+  struct symtab *find_last_source_symtab ();\n+\n+  /* See quick_symbol_functions.  */\n+  void forget_cached_source_info ();\n+\n+  /* See quick_symbol_functions.  */\n+  bool map_symtabs_matching_filename\n+    (const char *name, const char *real_path,\n+     gdb::function_view<bool (symtab *)> callback);\n+\n+  /* See quick_symbol_functions.  */\n+  struct compunit_symtab *lookup_symbol (block_enum kind, const char *name,\n+\t\t\t\t\t domain_enum domain);\n+\n+  /* See quick_symbol_functions.  */\n+  void print_stats ();\n+\n+  /* See quick_symbol_functions.  */\n+  void dump ();\n+\n+  /* See quick_symbol_functions.  */\n+  void expand_symtabs_for_function (const char *func_name);\n+\n+  /* See quick_symbol_functions.  */\n+  void expand_all_symtabs ();\n+\n+  /* See quick_symbol_functions.  */\n+  void expand_symtabs_with_fullname (const char *fullname);\n+\n+  /* See quick_symbol_functions.  */\n+  void map_matching_symbols\n+    (const lookup_name_info &name, domain_enum domain,\n+     int global,\n+     gdb::function_view<symbol_found_callback_ftype> callback,\n+     symbol_compare_ftype *ordered_compare);\n+\n+  /* See quick_symbol_functions.  */\n+  void expand_symtabs_matching\n+    (gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+     const lookup_name_info *lookup_name,\n+     gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+     gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     enum search_domain kind);\n+\n+  /* See quick_symbol_functions.  */\n+  struct compunit_symtab *find_pc_sect_compunit_symtab\n+    (struct bound_minimal_symbol msymbol,\n+     CORE_ADDR pc,\n+     struct obj_section *section,\n+     int warn_if_readin);\n+\n+  /* See quick_symbol_functions.  */\n+  void map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n+\t\t\t     int need_fullname);\n+\n+  /* See quick_symbol_functions.  */\n+  struct compunit_symtab *find_compunit_symtab_by_address (CORE_ADDR address);\n+\n+  /* See quick_symbol_functions.  */\n+  enum language lookup_global_symbol_language (const char *name,\n+\t\t\t\t\t       domain_enum domain,\n+\t\t\t\t\t       bool *symbol_found_p);\n+\n+\n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n      (i.e., it has not been passed through gdb_realpath)."
    },
    {
      "sha": "6fc27ae72f78a35da8b6f220e3ea02424a315d35",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -342,8 +342,7 @@ select_source_symtab (struct symtab *s)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      if (objfile->sf)\n-\ts = objfile->sf->qf->find_last_source_symtab (objfile);\n+      s = objfile->find_last_source_symtab ();\n       if (s)\n \tnew_symtab = s;\n     }\n@@ -417,8 +416,7 @@ forget_cached_source_info_for_objfile (struct objfile *objfile)\n \t}\n     }\n \n-  if (objfile->sf)\n-    objfile->sf->qf->forget_cached_source_info (objfile);\n+  objfile->forget_cached_source_info ();\n }\n \n /* See source.h.  */"
    },
    {
      "sha": "419f24d2240af788c03557119d079923feb95608",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 201,
      "deletions": 217,
      "changes": 418,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -68,312 +68,296 @@ debug_symtab_name (struct symtab *symtab)\n   return symtab_to_filename_for_display (symtab);\n }\n \f\n-/* Debugging version of struct quick_symbol_functions.  */\n \n-static bool\n-debug_qf_has_symbols (struct objfile *objfile)\n+/* See objfiles.h.  */\n+\n+bool\n+objfile::has_partial_symbols ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  bool retval;\n+  bool retval = false;\n \n-  retval = debug_data->real_sf->qf->has_symbols (objfile);\n+  /* If we have not read psymbols, but we have a function capable of reading\n+     them, then that is an indication that they are in fact available.  Without\n+     this function the symbols may have been already read in but they also may\n+     not be present in this objfile.  */\n+  if ((flags & OBJF_PSYMTABS_READ) == 0\n+      && sf != nullptr\n+      && sf->sym_read_psymbols != NULL)\n+    retval = true;\n+  else if (sf != nullptr)\n+    retval = sf->qf->has_symbols (this);\n \n-  fprintf_filtered (gdb_stdlog, \"qf->has_symbols (%s) = %d\\n\",\n-\t\t    objfile_debug_name (objfile), retval);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->has_symbols (%s) = %d\\n\",\n+\t\t      objfile_debug_name (this), retval);\n \n   return retval;\n }\n \n-static struct symtab *\n-debug_qf_find_last_source_symtab (struct objfile *objfile)\n+struct symtab *\n+objfile::find_last_source_symtab ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  struct symtab *retval;\n+  struct symtab *retval = nullptr;\n \n-  fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (%s)\\n\",\n+\t\t      objfile_debug_name (this));\n \n-  retval = debug_data->real_sf->qf->find_last_source_symtab (objfile);\n+  if (sf != nullptr)\n+    retval = sf->qf->find_last_source_symtab (this);\n \n-  fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (...) = %s\\n\",\n-\t\t    retval ? debug_symtab_name (retval) : \"NULL\");\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->find_last_source_symtab (...) = %s\\n\",\n+\t\t      retval ? debug_symtab_name (retval) : \"NULL\");\n \n   return retval;\n }\n \n-static void\n-debug_qf_forget_cached_source_info (struct objfile *objfile)\n+void\n+objfile::forget_cached_source_info ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog, \"qf->forget_cached_source_info (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->forget_cached_source_info (%s)\\n\",\n+\t\t      objfile_debug_name (this));\n \n-  debug_data->real_sf->qf->forget_cached_source_info (objfile);\n+  if (sf != nullptr)\n+    sf->qf->forget_cached_source_info (this);\n }\n \n-static bool\n-debug_qf_map_symtabs_matching_filename\n-  (struct objfile *objfile, const char *name, const char *real_path,\n+bool\n+objfile::map_symtabs_matching_filename\n+  (const char *name, const char *real_path,\n    gdb::function_view<bool (symtab *)> callback)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->map_symtabs_matching_filename (%s, \\\"%s\\\", \\\"%s\\\", %s)\\n\",\n-\t\t    objfile_debug_name (objfile), name,\n-\t\t    real_path ? real_path : NULL,\n-\t\t    host_address_to_string (&callback));\n-\n-  bool retval = (debug_data->real_sf->qf->map_symtabs_matching_filename\n-\t\t (objfile, name, real_path, callback));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->map_symtabs_matching_filename (%s, \\\"%s\\\", \"\n+\t\t      \"\\\"%s\\\", %s)\\n\",\n+\t\t      objfile_debug_name (this), name,\n+\t\t      real_path ? real_path : NULL,\n+\t\t      host_address_to_string (&callback));\n+\n+  bool retval = false;\n+  if (sf != nullptr)\n+    retval = (sf->qf->map_symtabs_matching_filename\n+\t      (this, name, real_path, callback));\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->map_symtabs_matching_filename (...) = %d\\n\",\n-\t\t    retval);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->map_symtabs_matching_filename (...) = %d\\n\",\n+\t\t      retval);\n \n   return retval;\n }\n \n-static struct compunit_symtab *\n-debug_qf_lookup_symbol (struct objfile *objfile, block_enum kind,\n-\t\t\tconst char *name, domain_enum domain)\n+struct compunit_symtab *\n+objfile::lookup_symbol (block_enum kind, const char *name, domain_enum domain)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  struct compunit_symtab *retval;\n+  struct compunit_symtab *retval = nullptr;\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->lookup_symbol (%s, %d, \\\"%s\\\", %s)\\n\",\n-\t\t    objfile_debug_name (objfile), kind, name,\n-\t\t    domain_name (domain));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->lookup_symbol (%s, %d, \\\"%s\\\", %s)\\n\",\n+\t\t      objfile_debug_name (this), kind, name,\n+\t\t      domain_name (domain));\n \n-  retval = debug_data->real_sf->qf->lookup_symbol (objfile, kind, name,\n-\t\t\t\t\t\t   domain);\n+  if (sf != nullptr)\n+    retval = sf->qf->lookup_symbol (this, kind, name, domain);\n \n-  fprintf_filtered (gdb_stdlog, \"qf->lookup_symbol (...) = %s\\n\",\n-\t\t    retval\n-\t\t    ? debug_symtab_name (compunit_primary_filetab (retval))\n-\t\t    : \"NULL\");\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->lookup_symbol (...) = %s\\n\",\n+\t\t      retval\n+\t\t      ? debug_symtab_name (compunit_primary_filetab (retval))\n+\t\t      : \"NULL\");\n \n   return retval;\n }\n \n-static void\n-debug_qf_print_stats (struct objfile *objfile)\n+void\n+objfile::print_stats ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog, \"qf->print_stats (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->print_stats (%s)\\n\",\n+\t\t      objfile_debug_name (this));\n \n-  debug_data->real_sf->qf->print_stats (objfile);\n+  if (sf != nullptr)\n+    sf->qf->print_stats (this);\n }\n \n-static void\n-debug_qf_dump (struct objfile *objfile)\n+void\n+objfile::dump ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog, \"qf->dump (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->dump (%s)\\n\",\n+\t\t      objfile_debug_name (this));\n \n-  debug_data->real_sf->qf->dump (objfile);\n+  if (sf != nullptr)\n+    sf->qf->dump (this);\n }\n \n-static void\n-debug_qf_expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t      const char *func_name)\n+void\n+objfile::expand_symtabs_for_function (const char *func_name)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->expand_symtabs_for_function (%s, \\\"%s\\\")\\n\",\n-\t\t    objfile_debug_name (objfile), func_name);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->expand_symtabs_for_function (%s, \\\"%s\\\")\\n\",\n+\t\t      objfile_debug_name (this), func_name);\n \n-  debug_data->real_sf->qf->expand_symtabs_for_function (objfile, func_name);\n+  if (sf != nullptr)\n+    sf->qf->expand_symtabs_for_function (this, func_name);\n }\n \n-static void\n-debug_qf_expand_all_symtabs (struct objfile *objfile)\n+void\n+objfile::expand_all_symtabs ()\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog, \"qf->expand_all_symtabs (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog, \"qf->expand_all_symtabs (%s)\\n\",\n+\t\t      objfile_debug_name (this));\n \n-  debug_data->real_sf->qf->expand_all_symtabs (objfile);\n+  if (sf != nullptr)\n+    sf->qf->expand_all_symtabs (this);\n }\n \n-static void\n-debug_qf_expand_symtabs_with_fullname (struct objfile *objfile,\n-\t\t\t\t       const char *fullname)\n+void\n+objfile::expand_symtabs_with_fullname (const char *fullname)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->expand_symtabs_with_fullname (%s, \\\"%s\\\")\\n\",\n-\t\t    objfile_debug_name (objfile), fullname);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->expand_symtabs_with_fullname (%s, \\\"%s\\\")\\n\",\n+\t\t      objfile_debug_name (this), fullname);\n \n-  debug_data->real_sf->qf->expand_symtabs_with_fullname (objfile, fullname);\n+  if (sf != nullptr)\n+    sf->qf->expand_symtabs_with_fullname (this, fullname);\n }\n \n-static void\n-debug_qf_map_matching_symbols\n-  (struct objfile *objfile,\n-   const lookup_name_info &name, domain_enum domain,\n+void\n+objfile::map_matching_symbols\n+  (const lookup_name_info &name, domain_enum domain,\n    int global,\n    gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->map_matching_symbols (%s, %s, %d, %s)\\n\",\n-\t\t    objfile_debug_name (objfile),\n-\t\t    domain_name (domain), global,\n-\t\t    host_address_to_string (ordered_compare));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->map_matching_symbols (%s, %s, %d, %s)\\n\",\n+\t\t      objfile_debug_name (this),\n+\t\t      domain_name (domain), global,\n+\t\t      host_address_to_string (ordered_compare));\n \n-  debug_data->real_sf->qf->map_matching_symbols (objfile, name,\n-\t\t\t\t\t\t domain, global,\n-\t\t\t\t\t\t callback,\n-\t\t\t\t\t\t ordered_compare);\n+  if (sf != nullptr)\n+    sf->qf->map_matching_symbols (this, name, domain, global,\n+\t\t\t\t  callback, ordered_compare);\n }\n \n-static void\n-debug_qf_expand_symtabs_matching\n-  (struct objfile *objfile,\n-   gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+void\n+objfile::expand_symtabs_matching\n+  (gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    const lookup_name_info *lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n    enum search_domain kind)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->expand_symtabs_matching (%s, %s, %s, %s, %s)\\n\",\n+\t\t      objfile_debug_name (this),\n+\t\t      host_address_to_string (&file_matcher),\n+\t\t      host_address_to_string (&symbol_matcher),\n+\t\t      host_address_to_string (&expansion_notify),\n+\t\t      search_domain_name (kind));\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->expand_symtabs_matching (%s, %s, %s, %s, %s)\\n\",\n-\t\t    objfile_debug_name (objfile),\n-\t\t    host_address_to_string (&file_matcher),\n-\t\t    host_address_to_string (&symbol_matcher),\n-\t\t    host_address_to_string (&expansion_notify),\n-\t\t    search_domain_name (kind));\n-\n-  debug_data->real_sf->qf->expand_symtabs_matching (objfile,\n-\t\t\t\t\t\t    file_matcher,\n-\t\t\t\t\t\t    lookup_name,\n-\t\t\t\t\t\t    symbol_matcher,\n-\t\t\t\t\t\t    expansion_notify,\n-\t\t\t\t\t\t    kind);\n-}\n-\n-static struct compunit_symtab *\n-debug_qf_find_pc_sect_compunit_symtab (struct objfile *objfile,\n-\t\t\t\t       struct bound_minimal_symbol msymbol,\n+  if (sf != nullptr)\n+    sf->qf->expand_symtabs_matching (this, file_matcher, lookup_name,\n+\t\t\t\t     symbol_matcher, expansion_notify, kind);\n+}\n+\n+struct compunit_symtab *\n+objfile::find_pc_sect_compunit_symtab (struct bound_minimal_symbol msymbol,\n \t\t\t\t       CORE_ADDR pc,\n \t\t\t\t       struct obj_section *section,\n \t\t\t\t       int warn_if_readin)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  struct compunit_symtab *retval;\n+  struct compunit_symtab *retval = nullptr;\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->find_pc_sect_compunit_symtab (%s, %s, %s, %s, %d)\\n\",\n-\t\t    objfile_debug_name (objfile),\n-\t\t    host_address_to_string (msymbol.minsym),\n-\t\t    hex_string (pc),\n-\t\t    host_address_to_string (section),\n-\t\t    warn_if_readin);\n-\n-  retval\n-    = debug_data->real_sf->qf->find_pc_sect_compunit_symtab (objfile, msymbol,\n-\t\t\t\t\t\t\t     pc, section,\n-\t\t\t\t\t\t\t     warn_if_readin);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->find_pc_sect_compunit_symtab (%s, %s, %s, %s, %d)\\n\",\n+\t\t      objfile_debug_name (this),\n+\t\t      host_address_to_string (msymbol.minsym),\n+\t\t      hex_string (pc),\n+\t\t      host_address_to_string (section),\n+\t\t      warn_if_readin);\n+\n+  if (sf != nullptr)\n+    retval\n+      = sf->qf->find_pc_sect_compunit_symtab (this, msymbol, pc, section,\n+\t\t\t\t\t      warn_if_readin);\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->find_pc_sect_compunit_symtab (...) = %s\\n\",\n-\t\t    retval\n-\t\t    ? debug_symtab_name (compunit_primary_filetab (retval))\n-\t\t    : \"NULL\");\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->find_pc_sect_compunit_symtab (...) = %s\\n\",\n+\t\t      retval\n+\t\t      ? debug_symtab_name (compunit_primary_filetab (retval))\n+\t\t      : \"NULL\");\n \n   return retval;\n }\n \n-static void\n-debug_qf_map_symbol_filenames (struct objfile *objfile,\n-\t\t\t       symbol_filename_ftype *fun, void *data,\n+void\n+objfile::map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n \t\t\t       int need_fullname)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->map_symbol_filenames (%s, %s, %s, %d)\\n\",\n-\t\t    objfile_debug_name (objfile),\n-\t\t    host_address_to_string (fun),\n-\t\t    host_address_to_string (data),\n-\t\t    need_fullname);\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->map_symbol_filenames (%s, %s, %s, %d)\\n\",\n+\t\t      objfile_debug_name (this),\n+\t\t      host_address_to_string (fun),\n+\t\t      host_address_to_string (data),\n+\t\t      need_fullname);\n \n-  debug_data->real_sf->qf->map_symbol_filenames (objfile, fun, data,\n-\t\t\t\t\t\t need_fullname);\n+  if (sf != nullptr)\n+    sf->qf->map_symbol_filenames (this, fun, data, need_fullname);\n }\n \n-static struct compunit_symtab *\n-debug_qf_find_compunit_symtab_by_address (struct objfile *objfile,\n-\t\t\t\t\t  CORE_ADDR address)\n+struct compunit_symtab *\n+objfile::find_compunit_symtab_by_address (CORE_ADDR address)\n {\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->find_compunit_symtab_by_address (%s, %s)\\n\",\n-\t\t    objfile_debug_name (objfile),\n-\t\t    hex_string (address));\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->find_compunit_symtab_by_address (%s, %s)\\n\",\n+\t\t      objfile_debug_name (this),\n+\t\t      hex_string (address));\n \n   struct compunit_symtab *result = NULL;\n-  if (debug_data->real_sf->qf->map_symbol_filenames != NULL)\n-    result\n-      = debug_data->real_sf->qf->find_compunit_symtab_by_address (objfile,\n-\t\t\t\t\t\t\t\t  address);\n+  if (sf != nullptr && sf->qf->find_compunit_symtab_by_address != NULL)\n+    result = sf->qf->find_compunit_symtab_by_address (this, address);\n \n-  fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->find_compunit_symtab_by_address (...) = %s\\n\",\n-\t\t    result\n-\t\t    ? debug_symtab_name (compunit_primary_filetab (result))\n-\t\t    : \"NULL\");\n+  if (debug_symfile)\n+    fprintf_filtered (gdb_stdlog,\n+\t\t      \"qf->find_compunit_symtab_by_address (...) = %s\\n\",\n+\t\t      result\n+\t\t      ? debug_symtab_name (compunit_primary_filetab (result))\n+\t\t      : \"NULL\");\n+\n+  return result;\n+}\n+\n+enum language\n+objfile::lookup_global_symbol_language (const char *name,\n+\t\t\t\t\tdomain_enum domain,\n+\t\t\t\t\tbool *symbol_found_p)\n+{\n+  enum language result = language_unknown;\n+\n+  if (sf != nullptr && sf->qf->lookup_global_symbol_language != nullptr)\n+    result = sf->qf->lookup_global_symbol_language (this, name, domain,\n+\t\t\t\t\t\t    symbol_found_p);\n+  else\n+    *symbol_found_p = false;\n \n   return result;\n }\n \n-static const struct quick_symbol_functions debug_sym_quick_functions =\n-{\n-  debug_qf_has_symbols,\n-  debug_qf_find_last_source_symtab,\n-  debug_qf_forget_cached_source_info,\n-  debug_qf_map_symtabs_matching_filename,\n-  debug_qf_lookup_symbol,\n-  NULL,\n-  debug_qf_print_stats,\n-  debug_qf_dump,\n-  debug_qf_expand_symtabs_for_function,\n-  debug_qf_expand_all_symtabs,\n-  debug_qf_expand_symtabs_with_fullname,\n-  debug_qf_map_matching_symbols,\n-  debug_qf_expand_symtabs_matching,\n-  debug_qf_find_pc_sect_compunit_symtab,\n-  debug_qf_find_compunit_symtab_by_address,\n-  debug_qf_map_symbol_filenames\n-};\n \f\n /* Debugging version of struct sym_probe_fns.  */\n \n@@ -532,7 +516,7 @@ static const struct sym_fns debug_sym_fns =\n   debug_sym_read_linetable,\n   debug_sym_relocate,\n   &debug_sym_probe_fns,\n-  &debug_sym_quick_functions\n+  nullptr\n };\n \f\n /* Install the debugging versions of the symfile functions for OBJFILE.\n@@ -571,7 +555,7 @@ install_symfile_debug_logging (struct objfile *objfile)\n   COPY_SF_PTR (real_sf, debug_data, sym_relocate, debug_sym_relocate);\n   if (real_sf->sym_probe_fns)\n     debug_data->debug_sf.sym_probe_fns = &debug_sym_probe_fns;\n-  debug_data->debug_sf.qf = &debug_sym_quick_functions;\n+  debug_data->debug_sf.qf = real_sf->qf;\n \n #undef COPY_SF_PTR\n "
    },
    {
      "sha": "ac9adc816a483fcba4546267b001f1d526da2568",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -1100,8 +1100,7 @@ symbol_file_add_with_addrs (bfd *abfd, const char *name,\n \tprintf_filtered (_(\"Expanding full symbols from %ps...\\n\"),\n \t\t\t styled_string (file_name_style.style (), name));\n \n-      if (objfile->sf)\n-\tobjfile->sf->qf->expand_all_symtabs (objfile);\n+      objfile->expand_all_symtabs ();\n     }\n \n   /* Note that we only print a message if we have no symbols and have\n@@ -3731,13 +3730,10 @@ expand_symtabs_matching\n    enum search_domain kind)\n {\n   for (objfile *objfile : current_program_space->objfiles ())\n-    {\n-      if (objfile->sf)\n-\tobjfile->sf->qf->expand_symtabs_matching (objfile, file_matcher,\n-\t\t\t\t\t\t  &lookup_name,\n-\t\t\t\t\t\t  symbol_matcher,\n-\t\t\t\t\t\t  expansion_notify, kind);\n-    }\n+    objfile->expand_symtabs_matching (file_matcher,\n+\t\t\t\t      &lookup_name,\n+\t\t\t\t      symbol_matcher,\n+\t\t\t\t      expansion_notify, kind);\n }\n \n /* Wrapper around the quick_symbol_functions map_symbol_filenames \"method\".\n@@ -3749,11 +3745,7 @@ map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n \t\t      int need_fullname)\n {\n   for (objfile *objfile : current_program_space->objfiles ())\n-    {\n-      if (objfile->sf)\n-\tobjfile->sf->qf->map_symbol_filenames (objfile, fun, data,\n-\t\t\t\t\t       need_fullname);\n-    }\n+    objfile->map_symbol_filenames (fun, data, need_fullname);\n }\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "0aab30d08abc48770fc7d1e2624220894e38eca6",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 13,
      "deletions": 21,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -105,8 +105,7 @@ print_objfile_statistics (void)\n \tif (OBJSTAT (objfile, n_types) > 0)\n \t  printf_filtered (_(\"  Number of \\\"types\\\" defined: %d\\n\"),\n \t\t\t   OBJSTAT (objfile, n_types));\n-\tif (objfile->sf)\n-\t  objfile->sf->qf->print_stats (objfile);\n+\tobjfile->print_stats ();\n \ti = linetables = 0;\n \tfor (compunit_symtab *cu : objfile->compunits ())\n \t  {\n@@ -153,8 +152,7 @@ dump_objfile (struct objfile *objfile)\n   printf_filtered (\", %d minsyms\\n\\n\",\n \t\t   objfile->per_bfd->minimal_symbol_count);\n \n-  if (objfile->sf)\n-    objfile->sf->qf->dump (objfile);\n+  objfile->dump ();\n \n   if (objfile->compunit_symtabs != NULL)\n     {\n@@ -963,23 +961,17 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n \n   for (struct program_space *pspace : program_spaces)\n     for (objfile *objfile : pspace->objfiles ())\n-      {\n-\tif (objfile->sf)\n-\t  {\n-\t    objfile->sf->qf->expand_symtabs_matching\n-\t      (objfile,\n-\t       [&] (const char *filename, bool basenames)\n-\t       {\n-\t\t /* KISS: Only apply the regexp to the complete file name.  */\n-\t\t return (!basenames\n-\t\t\t && (regexp == NULL || re_exec (filename)));\n-\t       },\n-\t       NULL,\n-\t       NULL,\n-\t       NULL,\n-\t       ALL_DOMAIN);\n-\t  }\n-      }\n+      objfile->expand_symtabs_matching\n+\t([&] (const char *filename, bool basenames)\n+\t {\n+\t   /* KISS: Only apply the regexp to the complete file name.  */\n+\t   return (!basenames\n+\t\t   && (regexp == NULL || re_exec (filename)));\n+\t },\n+\t NULL,\n+\t NULL,\n+\t NULL,\n+\t ALL_DOMAIN);\n }\n \f\n "
    },
    {
      "sha": "084e8ecc2e86442c3b72cb8e8e158b615562f0a5",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 34,
      "deletions": 72,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d080b4687deb2441a81762f3b01fc51cd13bd97/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=4d080b4687deb2441a81762f3b01fc51cd13bd97",
      "patch": "@@ -555,11 +555,8 @@ iterate_over_symtabs (const char *name,\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      if (objfile->sf\n-\t  && objfile->sf->qf->map_symtabs_matching_filename (objfile,\n-\t\t\t\t\t\t\t     name,\n-\t\t\t\t\t\t\t     real_path.get (),\n-\t\t\t\t\t\t\t     callback))\n+      if (objfile->map_symtabs_matching_filename (name, real_path.get (),\n+\t\t\t\t\t\t  callback))\n \treturn;\n     }\n }\n@@ -1114,11 +1111,8 @@ expand_symtab_containing_pc (CORE_ADDR pc, struct obj_section *section)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      struct compunit_symtab *cust = NULL;\n-\n-      if (objfile->sf)\n-\tcust = objfile->sf->qf->find_pc_sect_compunit_symtab (objfile, msymbol,\n-\t\t\t\t\t\t\t      pc, section, 0);\n+      struct compunit_symtab *cust\n+\t= objfile->find_pc_sect_compunit_symtab (msymbol, pc, section, 0);\n       if (cust)\n \treturn;\n     }\n@@ -2369,9 +2363,6 @@ lookup_symbol_via_quick_fns (struct objfile *objfile,\n   const struct block *block;\n   struct block_symbol result;\n \n-  if (!objfile->sf)\n-    return {};\n-\n   if (symbol_lookup_debug > 1)\n     {\n       fprintf_unfiltered (gdb_stdlog,\n@@ -2382,7 +2373,7 @@ lookup_symbol_via_quick_fns (struct objfile *objfile,\n \t\t\t  name, domain_name (domain));\n     }\n \n-  cust = objfile->sf->qf->lookup_symbol (objfile, block_index, name, domain);\n+  cust = objfile->lookup_symbol (block_index, name, domain);\n   if (cust == NULL)\n     {\n       if (symbol_lookup_debug > 1)\n@@ -2549,23 +2540,13 @@ lookup_symbol_in_objfile (struct objfile *objfile, enum block_enum block_index,\n static enum language\n find_quick_global_symbol_language (const char *name, const domain_enum domain)\n {\n-  for (objfile *objfile : current_program_space->objfiles ())\n-    {\n-      if (objfile->sf && objfile->sf->qf\n-\t  && objfile->sf->qf->lookup_global_symbol_language)\n-\tcontinue;\n-      return language_unknown;\n-    }\n-\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       bool symbol_found_p;\n       enum language lang\n-\t= objfile->sf->qf->lookup_global_symbol_language (objfile, name, domain,\n-\t\t\t\t\t\t\t  &symbol_found_p);\n-      if (!symbol_found_p)\n-\tcontinue;\n-      return lang;\n+\t= objfile->lookup_global_symbol_language (name, domain, &symbol_found_p);\n+      if (symbol_found_p)\n+\treturn lang;\n     }\n \n   return language_unknown;\n@@ -2749,10 +2730,7 @@ basic_lookup_transparent_type_quick (struct objfile *objfile,\n   const struct block *block;\n   struct symbol *sym;\n \n-  if (!objfile->sf)\n-    return NULL;\n-  cust = objfile->sf->qf->lookup_symbol (objfile, block_index, name,\n-\t\t\t\t\t STRUCT_DOMAIN);\n+  cust = objfile->lookup_symbol (block_index, name, STRUCT_DOMAIN);\n   if (cust == NULL)\n     return NULL;\n \n@@ -2955,16 +2933,15 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n \t  /* In order to better support objfiles that contain both\n \t     stabs and coff debugging info, we continue on if a psymtab\n \t     can't be found.  */\n-\t  if ((obj_file->flags & OBJF_REORDERED) && obj_file->sf)\n+\t  if ((obj_file->flags & OBJF_REORDERED) != 0)\n \t    {\n \t      struct compunit_symtab *result;\n \n \t      result\n-\t\t= obj_file->sf->qf->find_pc_sect_compunit_symtab (obj_file,\n-\t\t\t\t\t\t\t\t  msymbol,\n-\t\t\t\t\t\t\t\t  pc,\n-\t\t\t\t\t\t\t\t  section,\n-\t\t\t\t\t\t\t\t  0);\n+\t\t= obj_file->find_pc_sect_compunit_symtab (msymbol,\n+\t\t\t\t\t\t\t  pc,\n+\t\t\t\t\t\t\t  section,\n+\t\t\t\t\t\t\t  0);\n \t      if (result != NULL)\n \t\treturn result;\n \t    }\n@@ -3005,14 +2982,8 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n \n   for (objfile *objf : current_program_space->objfiles ())\n     {\n-      struct compunit_symtab *result;\n-\n-      if (!objf->sf)\n-\tcontinue;\n-      result = objf->sf->qf->find_pc_sect_compunit_symtab (objf,\n-\t\t\t\t\t\t\t   msymbol,\n-\t\t\t\t\t\t\t   pc, section,\n-\t\t\t\t\t\t\t   1);\n+      struct compunit_symtab *result\n+\t= objf->find_pc_sect_compunit_symtab (msymbol, pc, section, 1);\n       if (result != NULL)\n \treturn result;\n     }\n@@ -3059,11 +3030,9 @@ find_symbol_at_address (CORE_ADDR address)\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      /* If this objfile doesn't have \"quick\" functions, then it may\n-\t have been read with -readnow, in which case we need to search\n-\t the symtabs directly.  */\n-      if (objfile->sf == NULL\n-\t  || objfile->sf->qf->find_compunit_symtab_by_address == NULL)\n+      /* If this objfile was read with -readnow, then we need to\n+\t search the symtabs directly.  */\n+      if ((objfile->flags & OBJF_READNOW) != 0)\n \t{\n \t  for (compunit_symtab *symtab : objfile->compunits ())\n \t    {\n@@ -3075,8 +3044,7 @@ find_symbol_at_address (CORE_ADDR address)\n       else\n \t{\n \t  struct compunit_symtab *symtab\n-\t    = objfile->sf->qf->find_compunit_symtab_by_address (objfile,\n-\t\t\t\t\t\t\t\taddress);\n+\t    = objfile->find_compunit_symtab_by_address (address);\n \t  if (symtab != NULL)\n \t    {\n \t      struct symbol *sym = search_symtab (symtab, address);\n@@ -3451,11 +3419,7 @@ find_line_symtab (struct symtab *sym_tab, int line,\n \tbest = 0;\n \n       for (objfile *objfile : current_program_space->objfiles ())\n-\t{\n-\t  if (objfile->sf)\n-\t    objfile->sf->qf->expand_symtabs_with_fullname\n-\t      (objfile, symtab_to_fullname (sym_tab));\n-\t}\n+\tobjfile->expand_symtabs_with_fullname (symtab_to_fullname (sym_tab));\n \n       for (objfile *objfile : current_program_space->objfiles ())\n \t{\n@@ -4576,21 +4540,19 @@ global_symbol_searcher::expand_symtabs\n   enum search_domain kind = m_kind;\n   bool found_msymbol = false;\n \n-  if (objfile->sf)\n-    objfile->sf->qf->expand_symtabs_matching\n-      (objfile,\n-       [&] (const char *filename, bool basenames)\n-       {\n-\t return file_matches (filename, filenames, basenames);\n-       },\n-       &lookup_name_info::match_any (),\n-       [&] (const char *symname)\n-       {\n-\t return (!preg.has_value ()\n-\t\t || preg->exec (symname, 0, NULL, 0) == 0);\n-       },\n-       NULL,\n-       kind);\n+  objfile->expand_symtabs_matching\n+    ([&] (const char *filename, bool basenames)\n+     {\n+       return file_matches (filename, filenames, basenames);\n+     },\n+     &lookup_name_info::match_any (),\n+     [&] (const char *symname)\n+     {\n+       return (!preg.has_value ()\n+\t       || preg->exec (symname, 0, NULL, 0) == 0);\n+     },\n+     NULL,\n+     kind);\n \n   /* Here, we search through the minimal symbol tables for functions and\n      variables that match, and force their symbols to be read.  This is in"
    }
  ]
}