{
  "sha": "0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
  "node_id": "C_kwDOANOeidoAKDBlOWYxYzA0Yjk1NzI5MjBjN2Y5NDAyMDNhNjdkNWFmM2Y2YzE5ZjY",
  "commit": {
    "author": {
      "name": "Pavel Mayorov",
      "email": "pmayorov@cloudlinux.com",
      "date": "2022-01-07T12:34:37Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2022-01-07T12:34:37Z"
    },
    "message": "Revert previous delta to debug.c.  Replace with patch to reject indirect types that point to indirect types.\n\n\tPR 28718\n\t* dwarf.c: Revert previous delta.\n\t(debug_get_real_type): Reject indirect types that point to\n\tindirect types.\n\t(debug_get_type_name, debug_get_type_size, debug_write_type):\n\tLikewise.",
    "tree": {
      "sha": "efb31147230285e336d7ca49bb37e926d955905f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/efb31147230285e336d7ca49bb37e926d955905f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e9f1c04b9572920c7f940203a67d5af3f6c19f6/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aed44286efa8ae8717a77d94b51ac3614e2ca6dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aed44286efa8ae8717a77d94b51ac3614e2ca6dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aed44286efa8ae8717a77d94b51ac3614e2ca6dc"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 23,
    "deletions": 20
  },
  "files": [
    {
      "sha": "ff25db288a7de142a816ab89d4443306956a6bef",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e9f1c04b9572920c7f940203a67d5af3f6c19f6/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e9f1c04b9572920c7f940203a67d5af3f6c19f6/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
      "patch": "@@ -1,6 +1,14 @@\n-2022-01-06  Nick Clifton  <nickc@redhat.com>\n+2022-01-07  Pavel Mayorov  <pmayorov@cloudlinux.com>\n \n \tPR 28718\n+\t* dwarf.c: Revert previous delta.\n+\t(debug_get_real_type): Reject indirect types that point to\n+\tindirect types.\n+\t(debug_get_type_name, debug_get_type_size, debug_write_type):\n+\tLikewise.\n+\n+2022-01-06  Nick Clifton  <nickc@redhat.com>\n+\n \t* debug.c (debug_write_type): Allow for malicious recursion via\n \tindirect debug types.\n "
    },
    {
      "sha": "3f8998af7cd2bda0f2783c1ff5c9f432a2d474dd",
      "filename": "binutils/debug.c",
      "status": "modified",
      "additions": 14,
      "deletions": 19,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e9f1c04b9572920c7f940203a67d5af3f6c19f6/binutils/debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e9f1c04b9572920c7f940203a67d5af3f6c19f6/binutils/debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/debug.c?ref=0e9f1c04b9572920c7f940203a67d5af3f6c19f6",
      "patch": "@@ -2065,7 +2065,9 @@ debug_get_real_type (void *handle, debug_type type,\n       /* The default case is just here to avoid warnings.  */\n     default:\n     case DEBUG_KIND_INDIRECT:\n-      if (*type->u.kindirect->slot != NULL)\n+      /* A valid non-self-referencing indirect type.  */\n+      if (*type->u.kindirect->slot != NULL\n+\t  && *type->u.kindirect->slot != type)\n \treturn debug_get_real_type (handle, *type->u.kindirect->slot, &rl);\n       return type;\n     case DEBUG_KIND_NAMED:\n@@ -2095,7 +2097,9 @@ debug_get_type_name (void *handle, debug_type type)\n {\n   if (type->kind == DEBUG_KIND_INDIRECT)\n     {\n-      if (*type->u.kindirect->slot != NULL)\n+      /* A valid non-self-referencing indirect type.  */\n+      if (*type->u.kindirect->slot != NULL\n+\t  && *type->u.kindirect->slot != type)\n \treturn debug_get_type_name (handle, *type->u.kindirect->slot);\n       return type->u.kindirect->tag;\n     }\n@@ -2124,7 +2128,9 @@ debug_get_type_size (void *handle, debug_type type)\n     default:\n       return 0;\n     case DEBUG_KIND_INDIRECT:\n-      if (*type->u.kindirect->slot != NULL)\n+      /* A valid non-self-referencing indirect type.  */\n+      if (*type->u.kindirect->slot != NULL\n+\t  && *type->u.kindirect->slot != type)\n \treturn debug_get_type_size (handle, *type->u.kindirect->slot);\n       return 0;\n     case DEBUG_KIND_NAMED:\n@@ -2484,22 +2490,11 @@ debug_write_type (struct debug_handle *info,\n       debug_error (_(\"debug_write_type: illegal type encountered\"));\n       return false;\n     case DEBUG_KIND_INDIRECT:\n-      /* PR 28718: Allow for malicious recursion.  */\n-      {\n-\tstatic int recursion_depth = 0;\n-\tbool result;\n-\n-\tif (recursion_depth > 256)\n-\t  {\n-\t    debug_error (_(\"debug_write_type: too many levels of nested indirection\"));\n-\t    return false;\n-\t  }\n-\t++ recursion_depth;\n-\tresult = debug_write_type (info, fns, fhandle, *type->u.kindirect->slot,\n-\t\t\t\t  name);\n-\t-- recursion_depth;\n-\treturn result;\n-      }\n+      /* Prevent infinite recursion.  */\n+      if (*type->u.kindirect->slot == type)\n+\treturn (*fns->empty_type) (fhandle);\n+      return debug_write_type (info, fns, fhandle, *type->u.kindirect->slot,\n+\t\t\t       name);\n     case DEBUG_KIND_VOID:\n       return (*fns->void_type) (fhandle);\n     case DEBUG_KIND_INT:"
    }
  ]
}