{
  "sha": "03adb248d621063cbbb0ce583cbd2e016ada7a6f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDNhZGIyNDhkNjIxMDYzY2JiYjBjZTU4M2NiZDJlMDE2YWRhN2E2Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-07-01T17:36:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-02T16:11:22Z"
    },
    "message": "Defer Ada character literal resolution\n\nIn Ada, an enumeration type can use a character literal as one of the\nenumerators.  The Ada expression parser handles the appropriate\nconversion.\n\nIt turns out, though, that this conversion was handled incorrectly.\nFor an expression like TYPE'(EXP), the conversion would be done for\nany such literal appearing in EXP -- but only the outermost such\nexpression should really be affected.\n\nThis patch defers the conversion until the resolution phase, fixing\nthe bug.",
    "tree": {
      "sha": "5d600cd66576f9e36bfae3573d4d593c1288d7c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d600cd66576f9e36bfae3573d4d593c1288d7c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03adb248d621063cbbb0ce583cbd2e016ada7a6f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03adb248d621063cbbb0ce583cbd2e016ada7a6f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03adb248d621063cbbb0ce583cbd2e016ada7a6f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03adb248d621063cbbb0ce583cbd2e016ada7a6f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b12db26d161d526953ab04ad92d598fd148d0bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b12db26d161d526953ab04ad92d598fd148d0bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b12db26d161d526953ab04ad92d598fd148d0bf"
    }
  ],
  "stats": {
    "total": 248,
    "additions": 204,
    "deletions": 44
  },
  "files": [
    {
      "sha": "594abe067e8a53ba7a91da96cdff65b447a6f165",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -742,6 +742,35 @@ class ada_name_association : public ada_association\n   operation_up m_val;\n };\n \n+/* A character constant expression.  This is a separate operation so\n+   that it can participate in resolution, so that TYPE'(CST) can\n+   work correctly for enums with character enumerators.  */\n+class ada_char_operation : public long_const_operation,\n+\t\t\t   public ada_resolvable\n+{\n+public:\n+\n+  using long_const_operation::long_const_operation;\n+\n+  bool resolve (struct expression *exp,\n+\t\tbool deprocedure_p,\n+\t\tbool parse_completion,\n+\t\tinnermost_block_tracker *tracker,\n+\t\tstruct type *context_type) override\n+  {\n+    /* This should never be called, because this class also implements\n+       'replace'.  */\n+    gdb_assert_not_reached (\"unexpected call\");\n+  }\n+\n+  operation_up replace (operation_up &&owner,\n+\t\t\tstruct expression *exp,\n+\t\t\tbool deprocedure_p,\n+\t\t\tbool parse_completion,\n+\t\t\tinnermost_block_tracker *tracker,\n+\t\t\tstruct type *context_type) override;\n+};\n+\n } /* namespace expr */\n \n #endif /* ADA_EXP_H */"
    },
    {
      "sha": "a0b8b7df8ce546ff0bf9d2c3b42d0d4ab4c8a8b8",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 44,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -91,8 +91,6 @@ static void write_name_assoc (struct parser_state *, struct stoken);\n \n static const struct block *block_lookup (const struct block *, const char *);\n \n-static LONGEST convert_char_literal (struct type *, LONGEST);\n-\n static void write_ambiguous_var (struct parser_state *,\n \t\t\t\t const struct block *, const char *, int);\n \n@@ -869,11 +867,9 @@ primary\t:\tINT\n \t;\n \n primary\t:\tCHARLIT\n-\t\t  { write_int (pstate,\n-\t\t\t       convert_char_literal (type_qualifier, $1.val),\n-\t\t\t       (type_qualifier == NULL) \n-\t\t\t       ? $1.type : type_qualifier);\n-\t\t  }\n+\t\t\t{\n+\t\t\t  pstate->push_new<ada_char_operation> ($1.type, $1.val);\n+\t\t\t}\n \t;\n \n primary\t:\tFLOAT\n@@ -1718,43 +1714,6 @@ write_name_assoc (struct parser_state *par_state, struct stoken name)\n   push_association<ada_name_association> (ada_pop ());\n }\n \n-/* Convert the character literal whose ASCII value would be VAL to the\n-   appropriate value of type TYPE, if there is a translation.\n-   Otherwise return VAL.  Hence, in an enumeration type ('A', 'B'),\n-   the literal 'A' (VAL == 65), returns 0.  */\n-\n-static LONGEST\n-convert_char_literal (struct type *type, LONGEST val)\n-{\n-  char name[7];\n-  int f;\n-\n-  if (type == NULL)\n-    return val;\n-  type = check_typedef (type);\n-  if (type->code () != TYPE_CODE_ENUM)\n-    return val;\n-\n-  if ((val >= 'a' && val <= 'z') || (val >= '0' && val <= '9'))\n-    xsnprintf (name, sizeof (name), \"Q%c\", (int) val);\n-  else\n-    xsnprintf (name, sizeof (name), \"QU%02x\", (int) val);\n-  size_t len = strlen (name);\n-  for (f = 0; f < type->num_fields (); f += 1)\n-    {\n-      /* Check the suffix because an enum constant in a package will\n-\t have a name like \"pkg__QUxx\".  This is safe enough because we\n-\t already have the correct type, and because mangling means\n-\t there can't be clashes.  */\n-      const char *ename = TYPE_FIELD_NAME (type, f);\n-      size_t elen = strlen (ename);\n-\n-      if (elen >= len && strcmp (name, ename + elen - len) == 0)\n-\treturn TYPE_FIELD_ENUMVAL (type, f);\n-    }\n-  return val;\n-}\n-\n static struct type *\n type_int (struct parser_state *par_state)\n {"
    },
    {
      "sha": "1038ccbb316c8c58d2d35bc1be1e13fb71ae5043",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -10114,6 +10114,66 @@ ada_resolvable::replace (operation_up &&owner,\n   return std::move (owner);\n }\n \n+/* Convert the character literal whose ASCII value would be VAL to the\n+   appropriate value of type TYPE, if there is a translation.\n+   Otherwise return VAL.  Hence, in an enumeration type ('A', 'B'),\n+   the literal 'A' (VAL == 65), returns 0.  */\n+\n+static LONGEST\n+convert_char_literal (struct type *type, LONGEST val)\n+{\n+  char name[7];\n+  int f;\n+\n+  if (type == NULL)\n+    return val;\n+  type = check_typedef (type);\n+  if (type->code () != TYPE_CODE_ENUM)\n+    return val;\n+\n+  if ((val >= 'a' && val <= 'z') || (val >= '0' && val <= '9'))\n+    xsnprintf (name, sizeof (name), \"Q%c\", (int) val);\n+  else\n+    xsnprintf (name, sizeof (name), \"QU%02x\", (int) val);\n+  size_t len = strlen (name);\n+  for (f = 0; f < type->num_fields (); f += 1)\n+    {\n+      /* Check the suffix because an enum constant in a package will\n+\t have a name like \"pkg__QUxx\".  This is safe enough because we\n+\t already have the correct type, and because mangling means\n+\t there can't be clashes.  */\n+      const char *ename = TYPE_FIELD_NAME (type, f);\n+      size_t elen = strlen (ename);\n+\n+      if (elen >= len && strcmp (name, ename + elen - len) == 0)\n+\treturn TYPE_FIELD_ENUMVAL (type, f);\n+    }\n+  return val;\n+}\n+\n+/* See ada-exp.h.  */\n+\n+operation_up\n+ada_char_operation::replace (operation_up &&owner,\n+\t\t\t     struct expression *exp,\n+\t\t\t     bool deprocedure_p,\n+\t\t\t     bool parse_completion,\n+\t\t\t     innermost_block_tracker *tracker,\n+\t\t\t     struct type *context_type)\n+{\n+  operation_up result = std::move (owner);\n+\n+  if (context_type != nullptr && context_type->code () == TYPE_CODE_ENUM)\n+    {\n+      gdb_assert (result.get () == this);\n+      std::get<0> (m_storage) = context_type;\n+      std::get<1> (m_storage)\n+\t= convert_char_literal (context_type, std::get<1> (m_storage));\n+    }\n+\n+  return make_operation<ada_wrapped_operation> (std::move (result));\n+}\n+\n value *\n ada_wrapped_operation::evaluate (struct type *expect_type,\n \t\t\t\t struct expression *exp,"
    },
    {
      "sha": "2cd93f82854beb54056f346dca49b6085c85ca43",
      "filename": "gdb/testsuite/gdb.ada/char_enum_overload.exp",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/char_enum_overload.exp?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -0,0 +1,34 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile foo\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug ]] != \"\" } {\n+  return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n+runto \"foo.adb:$bp_location\"\n+\n+gdb_test \"print pck.Global_Enum_Type'(Overloaded('+'))\" \"= 1 'Y'\" \\\n+    \"call correct overload\"\n+gdb_test \"print pck.Global_Enum_Type'('+')\" \" = 2 '\\\\+'\" \\\n+    \"use enum constant\""
    },
    {
      "sha": "ee0a0aa4f0e5dc61e7b3fd11bd28ba50ed7ec709",
      "filename": "gdb/testsuite/gdb.ada/char_enum_overload/foo.adb",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/char_enum_overload/foo.adb?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -0,0 +1,22 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+\n+procedure Foo is\n+   Gchar : Global_Enum_Type := Global_Enum_Type'(Overloaded('+'));\n+begin\n+   Do_Nothing (Gchar'Address);  -- STOP\n+end Foo;"
    },
    {
      "sha": "6aba048fd8f2280a7d006fe1e324e893be1da415",
      "filename": "gdb/testsuite/gdb.ada/char_enum_overload/pck.adb",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/char_enum_overload/pck.adb?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -0,0 +1,31 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Pck is\n+   procedure Overloaded (Value : Global_Enum_Type) is\n+   begin\n+      null;\n+   end Overloaded;\n+\n+   function Overloaded (Value : Character) return Global_Enum_Type is\n+   begin\n+      return 'Y';\n+   end Overloaded;\n+\n+   procedure Do_Nothing (A : System.Address) is\n+   begin\n+      null;\n+   end Do_Nothing;\n+end Pck;"
    },
    {
      "sha": "7dc478f774b23a6705b32c3036575efdec0ce2fd",
      "filename": "gdb/testsuite/gdb.ada/char_enum_overload/pck.ads",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03adb248d621063cbbb0ce583cbd2e016ada7a6f/gdb/testsuite/gdb.ada/char_enum_overload/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/char_enum_overload/pck.ads?ref=03adb248d621063cbbb0ce583cbd2e016ada7a6f",
      "patch": "@@ -0,0 +1,25 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+\n+package Pck is\n+   type Global_Enum_Type is ('x', 'Y', '+');\n+\n+   procedure Overloaded (Value : Global_Enum_Type);\n+   function Overloaded (Value : Character) return Global_Enum_Type;\n+\n+   procedure Do_Nothing (A : System.Address);\n+end Pck;"
    }
  ]
}