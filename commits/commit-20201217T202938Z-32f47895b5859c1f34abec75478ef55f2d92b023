{
  "sha": "32f47895b5859c1f34abec75478ef55f2d92b023",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzJmNDc4OTViNTg1OWMxZjM0YWJlYzc1NDc4ZWY1NWYyZDkyYjAyMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-17T20:29:38Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-17T20:29:38Z"
    },
    "message": "Remove printfi_filtered and fprintfi_filtered\n\nAfter seeing Simon's patch, I thought maybe it was finally time to\nremove printfi_filtered and fprintfi_filtered, in favor of using the\n\"%*s\" approach to indenting.\n\nIn this patch I took the straightforward approach of always adding a\nleading \"%*s\", even when the format already started with \"%s\", to\navoid the trickier form of:\n\n    printf (\"%*s\", -indent, string)\n\nRegression tested on x86-64 Fedora 32.\nLet me know what you think.\n\ngdb/ChangeLog\n2020-12-17  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbtypes.c (print_args, dump_fn_fieldlists, print_cplus_stuff)\n\t(print_gnat_stuff, print_fixed_point_type_info)\n\t(recursive_dump_type): Update.\n\t* go32-nat.c (go32_sysinfo, display_descriptor): Update.\n\t* c-typeprint.c (c_type_print_base_struct_union)\n\t(c_type_print_base_1): Update.\n\t* rust-lang.c (rust_internal_print_type): Update.\n\t* f-typeprint.c (f_language::f_type_print_base): Update.\n\t* utils.h (fprintfi_filtered, printfi_filtered): Remove.\n\t* m2-typeprint.c (m2_record_fields): Update.\n\t* p-typeprint.c (pascal_type_print_base): Update.\n\t* compile/compile-loc2c.c (push, pushf, unary, binary)\n\t(do_compile_dwarf_expr_to_c): Update.\n\t* utils.c (fprintfi_filtered, printfi_filtered): Remove.",
    "tree": {
      "sha": "cf6b98937829b3a3d5801feea8797c3d591aedef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf6b98937829b3a3d5801feea8797c3d591aedef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32f47895b5859c1f34abec75478ef55f2d92b023",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32f47895b5859c1f34abec75478ef55f2d92b023",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32f47895b5859c1f34abec75478ef55f2d92b023",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32f47895b5859c1f34abec75478ef55f2d92b023/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "85be4f5a8c8bec8d3163585a82e288a4dec08b07",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85be4f5a8c8bec8d3163585a82e288a4dec08b07",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85be4f5a8c8bec8d3163585a82e288a4dec08b07"
    }
  ],
  "stats": {
    "total": 427,
    "additions": 212,
    "deletions": 215
  },
  "files": [
    {
      "sha": "d1b9b3808212cffbfe194ee0e2a461569ba87025",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -1,3 +1,20 @@\n+2020-12-17  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbtypes.c (print_args, dump_fn_fieldlists, print_cplus_stuff)\n+\t(print_gnat_stuff, print_fixed_point_type_info)\n+\t(recursive_dump_type): Update.\n+\t* go32-nat.c (go32_sysinfo, display_descriptor): Update.\n+\t* c-typeprint.c (c_type_print_base_struct_union)\n+\t(c_type_print_base_1): Update.\n+\t* rust-lang.c (rust_internal_print_type): Update.\n+\t* f-typeprint.c (f_language::f_type_print_base): Update.\n+\t* utils.h (fprintfi_filtered, printfi_filtered): Remove.\n+\t* m2-typeprint.c (m2_record_fields): Update.\n+\t* p-typeprint.c (pascal_type_print_base): Update.\n+\t* compile/compile-loc2c.c (push, pushf, unary, binary)\n+\t(do_compile_dwarf_expr_to_c): Update.\n+\t* utils.c (fprintfi_filtered, printfi_filtered): Remove.\n+\n 2020-12-16  Tom Tromey  <tom@tromey.com>\n \n \t* rust-exp.y (rust_lex_tests): Update."
    },
    {
      "sha": "b6f1eee760abae36a406995d769ec4543cca1c84",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -1122,13 +1122,13 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t  && TYPE_TYPEDEF_FIELD_COUNT (type) == 0)\n \t{\n \t  if (type->is_stub ())\n-\t    fprintfi_filtered (level + 4, stream,\n-\t\t\t       _(\"%p[<incomplete type>%p]\\n\"),\n-\t\t\t       metadata_style.style ().ptr (), nullptr);\n+\t    fprintf_filtered (stream, _(\"%*s%p[<incomplete type>%p]\\n\"),\n+\t\t\t      level + 4, \"\",\n+\t\t\t      metadata_style.style ().ptr (), nullptr);\n \t  else\n-\t    fprintfi_filtered (level + 4, stream,\n-\t\t\t       _(\"%p[<no data fields>%p]\\n\"),\n-\t\t\t       metadata_style.style ().ptr (), nullptr);\n+\t    fprintf_filtered (stream, _(\"%*s%p[<no data fields>%p]\\n\"),\n+\t\t\t      level + 4, \"\",\n+\t\t\t      metadata_style.style ().ptr (), nullptr);\n \t}\n \n       /* Start off with no specific section type, so we can print\n@@ -1439,7 +1439,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t    print_spaces_filtered (2, stream);\n \t}\n \n-      fprintfi_filtered (level, stream, \"}\");\n+      fprintf_filtered (stream, \"%*s}\", level, \"\");\n     }\n }\n \n@@ -1633,13 +1633,15 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t    if (type->num_fields () == 0)\n \t      {\n \t\tif (type->is_stub ())\n-\t\t  fprintfi_filtered (level + 4, stream,\n-\t\t\t\t     _(\"%p[<incomplete type>%p]\\n\"),\n-\t\t\t\t     metadata_style.style ().ptr (), nullptr);\n+\t\t  fprintf_filtered (stream,\n+\t\t\t\t    _(\"%*s%p[<incomplete type>%p]\\n\"),\n+\t\t\t\t    level + 4, \"\",\n+\t\t\t\t    metadata_style.style ().ptr (), nullptr);\n \t\telse\n-\t\t  fprintfi_filtered (level + 4, stream,\n-\t\t\t\t     _(\"%p[<no data fields>%p]\\n\"),\n-\t\t\t\t     metadata_style.style ().ptr (), nullptr);\n+\t\t  fprintf_filtered (stream,\n+\t\t\t\t    _(\"%*s%p[<no data fields>%p]\\n\"),\n+\t\t\t\t    level + 4, \"\",\n+\t\t\t\t    metadata_style.style ().ptr (), nullptr);\n \t      }\n \t    len = type->num_fields ();\n \t    for (i = 0; i < len; i++)\n@@ -1663,7 +1665,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t\t  }\n \t\tfprintf_filtered (stream, \";\\n\");\n \t      }\n-\t    fprintfi_filtered (level, stream, \"}\");\n+\t    fprintf_filtered (stream, \"%*s}\", level, \"\");\n \t  }\n       }\n       break;"
    },
    {
      "sha": "e88e73309558e549e39d27472be7946284054daa",
      "filename": "gdb/compile/compile-loc2c.c",
      "status": "modified",
      "additions": 57,
      "deletions": 49,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/compile/compile-loc2c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/compile/compile-loc2c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-loc2c.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -434,9 +434,9 @@ compute_stack_depth (enum bfd_endian byte_order, unsigned int addr_size,\n static void\n push (int indent, string_file *stream, ULONGEST l)\n {\n-  fprintfi_filtered (indent, stream,\n-\t\t     \"__gdb_stack[++__gdb_tos] = (\" GCC_UINTPTR \") %s;\\n\",\n-\t\t     hex_string (l));\n+  fprintf_filtered (stream,\n+\t\t    \"%*s__gdb_stack[++__gdb_tos] = (\" GCC_UINTPTR \") %s;\\n\",\n+\t\t    indent, \"\", hex_string (l));\n }\n \n /* Emit code to push an arbitrary expression.  This works like\n@@ -450,13 +450,13 @@ pushf (int indent, string_file *stream, const char *format, ...)\n {\n   va_list args;\n \n-  fprintfi_filtered (indent, stream, \"__gdb_stack[__gdb_tos + 1] = \");\n+  fprintf_filtered (stream, \"%*s__gdb_stack[__gdb_tos + 1] = \", indent, \"\");\n   va_start (args, format);\n   stream->vprintf (format, args);\n   va_end (args);\n   stream->puts (\";\\n\");\n \n-  fprintfi_filtered (indent, stream, \"++__gdb_tos;\\n\");\n+  fprintf_filtered (stream, \"%*s++__gdb_tos;\\n\", indent, \"\");\n }\n \n /* Emit code for a unary expression -- one which operates in-place on\n@@ -470,7 +470,7 @@ unary (int indent, string_file *stream, const char *format, ...)\n {\n   va_list args;\n \n-  fprintfi_filtered (indent, stream, \"__gdb_stack[__gdb_tos] = \");\n+  fprintf_filtered (stream, \"%*s__gdb_stack[__gdb_tos] = \", indent, \"\");\n   va_start (args, format);\n   stream->vprintf (format, args);\n   va_end (args);\n@@ -487,12 +487,12 @@ binary (int indent, string_file *stream, const char *format, ...)\n {\n   va_list args;\n \n-  fprintfi_filtered (indent, stream, \"__gdb_stack[__gdb_tos - 1] = \");\n+  fprintf_filtered (stream, \"%*s__gdb_stack[__gdb_tos - 1] = \", indent, \"\");\n   va_start (args, format);\n   stream->vprintf (format, args);\n   va_end (args);\n   stream->puts (\";\\n\");\n-  fprintfi_filtered (indent, stream, \"--__gdb_tos;\\n\");\n+  fprintf_filtered (stream, \"%*s--__gdb_tos;\\n\", indent, \"\");\n }\n \n /* Print the name of a label given its \"SCOPE\", an arbitrary integer\n@@ -599,9 +599,9 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \n   ++scope;\n \n-  fprintfi_filtered (indent, stream, \"__attribute__ ((unused)) %s %s;\\n\",\n-\t\t     type_name, result_name);\n-  fprintfi_filtered (indent, stream, \"{\\n\");\n+  fprintf_filtered (stream, \"%*s__attribute__ ((unused)) %s %s;\\n\",\n+\t\t    indent, \"\", type_name, result_name);\n+  fprintf_filtered (stream, \"%*s{\\n\", indent, \"\");\n   indent += 2;\n \n   stack_depth = compute_stack_depth (byte_order, addr_size,\n@@ -637,19 +637,19 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t\t \"compiled code.\"),\n \t       sym->print_name ());\n \n-      fprintfi_filtered (indent, stream, \"%s = %s;\\n\",\n-\t\t\t result_name,\n-\t\t\t core_addr_to_string (value_address (val)));\n-      fprintfi_filtered (indent - 2, stream, \"}\\n\");\n+      fprintf_filtered (stream, \"%*s%s = %s;\\n\",\n+\t\t\tindent, \"\", result_name,\n+\t\t\tcore_addr_to_string (value_address (val)));\n+      fprintf_filtered (stream, \"%*s}\\n\", indent - 2, \"\");\n       return;\n     }\n \n-  fprintfi_filtered (indent, stream, GCC_UINTPTR \" __gdb_stack[%d];\\n\",\n-\t\t     stack_depth);\n+  fprintf_filtered (stream, \"%*s\" GCC_UINTPTR \" __gdb_stack[%d];\\n\",\n+\t\t    indent, \"\", stack_depth);\n \n   if (need_tempvar)\n-    fprintfi_filtered (indent, stream, GCC_UINTPTR \" __gdb_tmp;\\n\");\n-  fprintfi_filtered (indent, stream, \"int __gdb_tos = -1;\\n\");\n+    fprintf_filtered (stream, \"%*s\" GCC_UINTPTR \" __gdb_tmp;\\n\", indent, \"\");\n+  fprintf_filtered (stream, \"%*sint __gdb_tos = -1;\\n\", indent, \"\");\n \n   if (initial != NULL)\n     pushf (indent, stream, \"%s\", core_addr_to_string (*initial));\n@@ -908,7 +908,7 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t  break;\n \n \tcase DW_OP_drop:\n-\t  fprintfi_filtered (indent, stream, \"--__gdb_tos;\\n\");\n+\t  fprintf_filtered (stream, \"%*s--__gdb_tos;\\n\", indent, \"\");\n \t  break;\n \n \tcase DW_OP_pick:\n@@ -918,30 +918,37 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t  break;\n \n \tcase DW_OP_swap:\n-\t  fprintfi_filtered (indent, stream,\n-\t\t\t     \"__gdb_tmp = __gdb_stack[__gdb_tos - 1];\\n\");\n-\t  fprintfi_filtered (indent, stream,\n-\t\t\t     \"__gdb_stack[__gdb_tos - 1] = \"\n-\t\t\t     \"__gdb_stack[__gdb_tos];\\n\");\n-\t  fprintfi_filtered (indent, stream, (\"__gdb_stack[__gdb_tos] = \"\n-\t\t\t\t\t      \"__gdb_tmp;\\n\"));\n+\t  fprintf_filtered (stream,\n+\t\t\t    \"%*s__gdb_tmp = __gdb_stack[__gdb_tos - 1];\\n\",\n+\t\t\t    indent, \"\");\n+\t  fprintf_filtered (stream,\n+\t\t\t    \"%*s__gdb_stack[__gdb_tos - 1] = \"\n+\t\t\t    \"__gdb_stack[__gdb_tos];\\n\",\n+\t\t\t    indent, \"\");\n+\t  fprintf_filtered (stream, (\"%*s__gdb_stack[__gdb_tos] = \"\n+\t\t\t\t     \"__gdb_tmp;\\n\"),\n+\t\t\t    indent, \"\");\n \t  break;\n \n \tcase DW_OP_over:\n \t  pushf (indent, stream, \"__gdb_stack[__gdb_tos - 1]\");\n \t  break;\n \n \tcase DW_OP_rot:\n-\t  fprintfi_filtered (indent, stream, (\"__gdb_tmp = \"\n-\t\t\t\t\t      \"__gdb_stack[__gdb_tos];\\n\"));\n-\t  fprintfi_filtered (indent, stream,\n-\t\t\t     \"__gdb_stack[__gdb_tos] = \"\n-\t\t\t     \"__gdb_stack[__gdb_tos - 1];\\n\");\n-\t  fprintfi_filtered (indent, stream,\n-\t\t\t     \"__gdb_stack[__gdb_tos - 1] = \"\n-\t\t\t     \"__gdb_stack[__gdb_tos -2];\\n\");\n-\t  fprintfi_filtered (indent, stream, \"__gdb_stack[__gdb_tos - 2] = \"\n-\t\t\t     \"__gdb_tmp;\\n\");\n+\t  fprintf_filtered (stream, (\"%*s__gdb_tmp = \"\n+\t\t\t\t     \"__gdb_stack[__gdb_tos];\\n\"),\n+\t\t\t    indent, \"\");\n+\t  fprintf_filtered (stream,\n+\t\t\t    \"%*s__gdb_stack[__gdb_tos] = \"\n+\t\t\t    \"__gdb_stack[__gdb_tos - 1];\\n\",\n+\t\t\t    indent, \"\");\n+\t  fprintf_filtered (stream,\n+\t\t\t    \"%*s__gdb_stack[__gdb_tos - 1] = \"\n+\t\t\t    \"__gdb_stack[__gdb_tos -2];\\n\",\n+\t\t\t    indent, \"\");\n+\t  fprintf_filtered (stream, \"%*s__gdb_stack[__gdb_tos - 2] = \"\n+\t\t\t    \"__gdb_tmp;\\n\",\n+\t\t\t    indent, \"\");\n \t  break;\n \n \tcase DW_OP_deref:\n@@ -962,11 +969,11 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \n \t    /* Cast to a pointer of the desired type, then\n \t       dereference.  */\n-\t    fprintfi_filtered (indent, stream,\n-\t\t\t       \"__gdb_stack[__gdb_tos] = \"\n-\t\t\t       \"*((__gdb_int_%s *) \"\n-\t\t\t       \"__gdb_stack[__gdb_tos]);\\n\",\n-\t\t\t       mode);\n+\t    fprintf_filtered (stream,\n+\t\t\t      \"%*s__gdb_stack[__gdb_tos] = \"\n+\t\t\t      \"*((__gdb_int_%s *) \"\n+\t\t\t      \"__gdb_stack[__gdb_tos]);\\n\",\n+\t\t\t      indent, \"\", mode);\n \t  }\n \t  break;\n \n@@ -1088,17 +1095,18 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \tcase DW_OP_skip:\n \t  offset = extract_signed_integer (op_ptr, 2, byte_order);\n \t  op_ptr += 2;\n-\t  fprintfi_filtered (indent, stream, \"goto \");\n+\t  fprintf_filtered (stream, \"%*sgoto \", indent, \"\");\n \t  print_label (stream, scope, op_ptr + offset - base);\n \t  stream->puts (\";\\n\");\n \t  break;\n \n \tcase DW_OP_bra:\n \t  offset = extract_signed_integer (op_ptr, 2, byte_order);\n \t  op_ptr += 2;\n-\t  fprintfi_filtered (indent, stream,\n-\t\t\t     \"if ((( \" GCC_INTPTR\n-\t\t\t     \") __gdb_stack[__gdb_tos--]) != 0) goto \");\n+\t  fprintf_filtered (stream,\n+\t\t\t    \"%*sif ((( \" GCC_INTPTR\n+\t\t\t    \") __gdb_stack[__gdb_tos--]) != 0) goto \",\n+\t\t\t    indent, \"\");\n \t  print_label (stream, scope, op_ptr + offset - base);\n \t  stream->puts (\";\\n\");\n \t  break;\n@@ -1111,9 +1119,9 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t}\n     }\n \n-  fprintfi_filtered (indent, stream, \"%s = __gdb_stack[__gdb_tos];\\n\",\n-\t\t     result_name);\n-  fprintfi_filtered (indent - 2, stream, \"}\\n\");\n+  fprintf_filtered (stream, \"%*s%s = __gdb_stack[__gdb_tos];\\n\",\n+\t\t    indent, \"\", result_name);\n+  fprintf_filtered (stream, \"%*s}\\n\", indent - 2, \"\");\n }\n \n /* See compile.h.  */"
    },
    {
      "sha": "048d3f793dea0c0474fefd488f2e9aa546f82619",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -307,7 +307,7 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \tprefix = \"Type, C_Union :: \";\n       else if (type->code () == TYPE_CODE_STRUCT)\n \tprefix = \"Type \";\n-      fprintfi_filtered (level, stream, \"%s%s\", prefix, type->name ());\n+      fprintf_filtered (stream, \"%*s%s%s\", level, \"\", prefix, type->name ());\n       return;\n     }\n \n@@ -331,34 +331,34 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n       break;\n \n     case TYPE_CODE_PTR:\n-      fprintfi_filtered (level, stream, \"PTR TO -> ( \");\n+      fprintf_filtered (stream, \"%*sPTR TO -> ( \", level, \"\");\n       f_type_print_base (TYPE_TARGET_TYPE (type), stream, show, 0);\n       break;\n \n     case TYPE_CODE_REF:\n-      fprintfi_filtered (level, stream, \"REF TO -> ( \");\n+      fprintf_filtered (stream, \"%*sREF TO -> ( \", level, \"\");\n       f_type_print_base (TYPE_TARGET_TYPE (type), stream, show, 0);\n       break;\n \n     case TYPE_CODE_VOID:\n       {\n \tgdbarch *gdbarch = get_type_arch (type);\n \tstruct type *void_type = builtin_f_type (gdbarch)->builtin_void;\n-\tfprintfi_filtered (level, stream, \"%s\", void_type->name ());\n+\tfprintf_filtered (stream, \"%*s%s\", level, \"\", void_type->name ());\n       }\n       break;\n \n     case TYPE_CODE_UNDEF:\n-      fprintfi_filtered (level, stream, \"struct <unknown>\");\n+      fprintf_filtered (stream, \"%*sstruct <unknown>\", level, \"\");\n       break;\n \n     case TYPE_CODE_ERROR:\n-      fprintfi_filtered (level, stream, \"%s\", TYPE_ERROR_NAME (type));\n+      fprintf_filtered (stream, \"%*s%s\", level, \"\", TYPE_ERROR_NAME (type));\n       break;\n \n     case TYPE_CODE_RANGE:\n       /* This should not occur.  */\n-      fprintfi_filtered (level, stream, \"<range type>\");\n+      fprintf_filtered (stream, \"%*s<range type>\", level, \"\");\n       break;\n \n     case TYPE_CODE_CHAR:\n@@ -368,7 +368,7 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \t C-oriented, we must change these to \"character\" from \"char\".  */\n \n       if (strcmp (type->name (), \"char\") == 0)\n-\tfprintfi_filtered (level, stream, \"character\");\n+\tfprintf_filtered (stream, \"%*scharacter\", level, \"\");\n       else\n \tgoto default_case;\n       break;\n@@ -387,15 +387,15 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \t  fprintf_filtered (stream, \"character*%s\", pulongest (upper_bound));\n \t}\n       else\n-\tfprintfi_filtered (level, stream, \"character*(*)\");\n+\tfprintf_filtered (stream, \"%*scharacter*(*)\", level, \"\");\n       break;\n \n     case TYPE_CODE_STRUCT:\n     case TYPE_CODE_UNION:\n       if (type->code () == TYPE_CODE_UNION)\n-\tfprintfi_filtered (level, stream, \"Type, C_Union :: \");\n+\tfprintf_filtered (stream, \"%*sType, C_Union :: \", level, \"\");\n       else\n-\tfprintfi_filtered (level, stream, \"Type \");\n+\tfprintf_filtered (stream, \"%*sType \", level, \"\");\n       fputs_filtered (type->name (), stream);\n       /* According to the definition,\n \t we only print structure elements in case show > 0.  */\n@@ -413,13 +413,13 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \t\t\t\t\t   stream, show - 1, 0, 0, 0, false);\n \t      fputs_filtered (\"\\n\", stream);\n \t    }\n-\t  fprintfi_filtered (level, stream, \"End Type \");\n+\t  fprintf_filtered (stream, \"%*sEnd Type \", level, \"\");\n \t  fputs_filtered (type->name (), stream);\n \t}\n       break;\n \n     case TYPE_CODE_MODULE:\n-      fprintfi_filtered (level, stream, \"module %s\", type->name ());\n+      fprintf_filtered (stream, \"%*smodule %s\", level, \"\", type->name ());\n       break;\n \n     default_case:\n@@ -429,7 +429,7 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \t the type name is, as recorded in the type itself.  If there\n \t is no type name, then complain.  */\n       if (type->name () != NULL)\n-\tfprintfi_filtered (level, stream, \"%s\", type->name ());\n+\tfprintf_filtered (stream, \"%*s%s\", level, \"\", type->name ());\n       else\n \terror (_(\"Invalid type code (%d) in symbol table.\"), type->code ());\n       break;"
    },
    {
      "sha": "43058320c3c99426457ebe74ba1a405d7f06c135",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 79,
      "deletions": 81,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -4829,8 +4829,8 @@ print_args (struct field *args, int nargs, int spaces)\n \n       for (i = 0; i < nargs; i++)\n \t{\n-\t  printfi_filtered (spaces, \"[%d] name '%s'\\n\", i,\n-\t\t\t    args[i].name != NULL ? args[i].name : \"<NULL>\");\n+\t  printf_filtered (\"%*s[%d] name '%s'\\n\", spaces, \"\", i,\n+\t\t\t   args[i].name != NULL ? args[i].name : \"<NULL>\");\n \t  recursive_dump_type (args[i].type (), spaces + 2);\n \t}\n     }\n@@ -4855,15 +4855,15 @@ dump_fn_fieldlists (struct type *type, int spaces)\n   int overload_idx;\n   struct fn_field *f;\n \n-  printfi_filtered (spaces, \"fn_fieldlists \");\n+  printf_filtered (\"%*sfn_fieldlists \", spaces, \"\");\n   gdb_print_host_address (TYPE_FN_FIELDLISTS (type), gdb_stdout);\n   printf_filtered (\"\\n\");\n   for (method_idx = 0; method_idx < TYPE_NFN_FIELDS (type); method_idx++)\n     {\n       f = TYPE_FN_FIELDLIST1 (type, method_idx);\n-      printfi_filtered (spaces + 2, \"[%d] name '%s' (\",\n-\t\t\tmethod_idx,\n-\t\t\tTYPE_FN_FIELDLIST_NAME (type, method_idx));\n+      printf_filtered (\"%*s[%d] name '%s' (\", spaces + 2, \"\",\n+\t\t       method_idx,\n+\t\t       TYPE_FN_FIELDLIST_NAME (type, method_idx));\n       gdb_print_host_address (TYPE_FN_FIELDLIST_NAME (type, method_idx),\n \t\t\t      gdb_stdout);\n       printf_filtered (_(\") length %d\\n\"),\n@@ -4872,70 +4872,71 @@ dump_fn_fieldlists (struct type *type, int spaces)\n \t   overload_idx < TYPE_FN_FIELDLIST_LENGTH (type, method_idx);\n \t   overload_idx++)\n \t{\n-\t  printfi_filtered (spaces + 4, \"[%d] physname '%s' (\",\n-\t\t\t    overload_idx,\n-\t\t\t    TYPE_FN_FIELD_PHYSNAME (f, overload_idx));\n+\t  printf_filtered (\"%*s[%d] physname '%s' (\",\n+\t\t\t   spaces + 4, \"\", overload_idx,\n+\t\t\t   TYPE_FN_FIELD_PHYSNAME (f, overload_idx));\n \t  gdb_print_host_address (TYPE_FN_FIELD_PHYSNAME (f, overload_idx),\n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\")\\n\");\n-\t  printfi_filtered (spaces + 8, \"type \");\n+\t  printf_filtered (\"%*stype \", spaces + 8, \"\");\n \t  gdb_print_host_address (TYPE_FN_FIELD_TYPE (f, overload_idx), \n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\"\\n\");\n \n \t  recursive_dump_type (TYPE_FN_FIELD_TYPE (f, overload_idx),\n \t\t\t       spaces + 8 + 2);\n \n-\t  printfi_filtered (spaces + 8, \"args \");\n+\t  printf_filtered (\"%*sargs \", spaces + 8, \"\");\n \t  gdb_print_host_address (TYPE_FN_FIELD_ARGS (f, overload_idx), \n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\"\\n\");\n \t  print_args (TYPE_FN_FIELD_ARGS (f, overload_idx),\n \t\t      TYPE_FN_FIELD_TYPE (f, overload_idx)->num_fields (),\n \t\t      spaces + 8 + 2);\n-\t  printfi_filtered (spaces + 8, \"fcontext \");\n+\t  printf_filtered (\"%*sfcontext \", spaces + 8, \"\");\n \t  gdb_print_host_address (TYPE_FN_FIELD_FCONTEXT (f, overload_idx),\n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\"\\n\");\n \n-\t  printfi_filtered (spaces + 8, \"is_const %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_CONST (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"is_volatile %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_VOLATILE (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"is_private %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_PRIVATE (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"is_protected %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_PROTECTED (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"is_stub %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_STUB (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"defaulted %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_DEFAULTED (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"is_deleted %d\\n\",\n-\t\t\t    TYPE_FN_FIELD_DELETED (f, overload_idx));\n-\t  printfi_filtered (spaces + 8, \"voffset %u\\n\",\n-\t\t\t    TYPE_FN_FIELD_VOFFSET (f, overload_idx));\n+\t  printf_filtered (\"%*sis_const %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_CONST (f, overload_idx));\n+\t  printf_filtered (\"%*sis_volatile %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_VOLATILE (f, overload_idx));\n+\t  printf_filtered (\"%*sis_private %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_PRIVATE (f, overload_idx));\n+\t  printf_filtered (\"%*sis_protected %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_PROTECTED (f, overload_idx));\n+\t  printf_filtered (\"%*sis_stub %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_STUB (f, overload_idx));\n+\t  printf_filtered (\"%*sdefaulted %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_DEFAULTED (f, overload_idx));\n+\t  printf_filtered (\"%*sis_deleted %d\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_DELETED (f, overload_idx));\n+\t  printf_filtered (\"%*svoffset %u\\n\", spaces + 8, \"\",\n+\t\t\t   TYPE_FN_FIELD_VOFFSET (f, overload_idx));\n \t}\n     }\n }\n \n static void\n print_cplus_stuff (struct type *type, int spaces)\n {\n-  printfi_filtered (spaces, \"vptr_fieldno %d\\n\", TYPE_VPTR_FIELDNO (type));\n-  printfi_filtered (spaces, \"vptr_basetype \");\n+  printf_filtered (\"%*svptr_fieldno %d\\n\", spaces, \"\",\n+\t\t   TYPE_VPTR_FIELDNO (type));\n+  printf_filtered (\"%*svptr_basetype \", spaces, \"\");\n   gdb_print_host_address (TYPE_VPTR_BASETYPE (type), gdb_stdout);\n   puts_filtered (\"\\n\");\n   if (TYPE_VPTR_BASETYPE (type) != NULL)\n     recursive_dump_type (TYPE_VPTR_BASETYPE (type), spaces + 2);\n \n-  printfi_filtered (spaces, \"n_baseclasses %d\\n\",\n-\t\t    TYPE_N_BASECLASSES (type));\n-  printfi_filtered (spaces, \"nfn_fields %d\\n\",\n-\t\t    TYPE_NFN_FIELDS (type));\n+  printf_filtered (\"%*sn_baseclasses %d\\n\", spaces, \"\",\n+\t\t   TYPE_N_BASECLASSES (type));\n+  printf_filtered (\"%*snfn_fields %d\\n\", spaces, \"\",\n+\t\t   TYPE_NFN_FIELDS (type));\n   if (TYPE_N_BASECLASSES (type) > 0)\n     {\n-      printfi_filtered (spaces, \"virtual_field_bits (%d bits at *\",\n-\t\t\tTYPE_N_BASECLASSES (type));\n+      printf_filtered (\"%*svirtual_field_bits (%d bits at *\",\n+\t\t       spaces, \"\", TYPE_N_BASECLASSES (type));\n       gdb_print_host_address (TYPE_FIELD_VIRTUAL_BITS (type), \n \t\t\t      gdb_stdout);\n       printf_filtered (\")\");\n@@ -4948,9 +4949,8 @@ print_cplus_stuff (struct type *type, int spaces)\n     {\n       if (TYPE_FIELD_PRIVATE_BITS (type) != NULL)\n \t{\n-\t  printfi_filtered (spaces, \n-\t\t\t    \"private_field_bits (%d bits at *\",\n-\t\t\t    type->num_fields ());\n+\t  printf_filtered (\"%*sprivate_field_bits (%d bits at *\",\n+\t\t\t   spaces, \"\", type->num_fields ());\n \t  gdb_print_host_address (TYPE_FIELD_PRIVATE_BITS (type), \n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\")\");\n@@ -4960,9 +4960,8 @@ print_cplus_stuff (struct type *type, int spaces)\n \t}\n       if (TYPE_FIELD_PROTECTED_BITS (type) != NULL)\n \t{\n-\t  printfi_filtered (spaces, \n-\t\t\t    \"protected_field_bits (%d bits at *\",\n-\t\t\t    type->num_fields ());\n+\t  printf_filtered (\"%*sprotected_field_bits (%d bits at *\",\n+\t\t\t   spaces, \"\", type->num_fields ());\n \t  gdb_print_host_address (TYPE_FIELD_PROTECTED_BITS (type), \n \t\t\t\t  gdb_stdout);\n \t  printf_filtered (\")\");\n@@ -4976,8 +4975,8 @@ print_cplus_stuff (struct type *type, int spaces)\n       dump_fn_fieldlists (type, spaces);\n     }\n \n-  printfi_filtered (spaces, \"calling_convention %d\\n\",\n-\t\t    TYPE_CPLUS_CALLING_CONVENTION (type));\n+  printf_filtered (\"%*scalling_convention %d\\n\", spaces, \"\",\n+\t\t   TYPE_CPLUS_CALLING_CONVENTION (type));\n }\n \n /* Print the contents of the TYPE's type_specific union, assuming that\n@@ -4989,10 +4988,10 @@ print_gnat_stuff (struct type *type, int spaces)\n   struct type *descriptive_type = TYPE_DESCRIPTIVE_TYPE (type);\n \n   if (descriptive_type == NULL)\n-    printfi_filtered (spaces + 2, \"no descriptive type\\n\");\n+    printf_filtered (\"%*sno descriptive type\\n\", spaces + 2, \"\");\n   else\n     {\n-      printfi_filtered (spaces + 2, \"descriptive type\\n\");\n+      printf_filtered (\"%*sdescriptive type\\n\", spaces + 2, \"\");\n       recursive_dump_type (descriptive_type, spaces + 4);\n     }\n }\n@@ -5003,8 +5002,8 @@ print_gnat_stuff (struct type *type, int spaces)\n static void\n print_fixed_point_type_info (struct type *type, int spaces)\n {\n-  printfi_filtered (spaces + 2, \"scaling factor: %s\\n\",\n-\t\t    type->fixed_point_scaling_factor ().str ().c_str ());\n+  printf_filtered (\"%*sscaling factor: %s\\n\", spaces + 2, \"\",\n+\t\t   type->fixed_point_scaling_factor ().str ().c_str ());\n }\n \n static struct obstack dont_print_type_obstack;\n@@ -5053,7 +5052,7 @@ recursive_dump_type (struct type *type, int spaces)\n \t{\n \t  if (type == first_dont_print[i])\n \t    {\n-\t      printfi_filtered (spaces, \"type node \");\n+\t      printf_filtered (\"%*stype node \", spaces, \"\");\n \t      gdb_print_host_address (type, gdb_stdout);\n \t      printf_filtered (_(\" <same as already seen type>\\n\"));\n \t      return;\n@@ -5063,14 +5062,14 @@ recursive_dump_type (struct type *type, int spaces)\n       obstack_ptr_grow (&dont_print_type_obstack, type);\n     }\n \n-  printfi_filtered (spaces, \"type node \");\n+  printf_filtered (\"%*stype node \", spaces, \"\");\n   gdb_print_host_address (type, gdb_stdout);\n   printf_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"name '%s' (\",\n-\t\t    type->name () ? type->name () : \"<NULL>\");\n+  printf_filtered (\"%*sname '%s' (\", spaces, \"\",\n+\t\t   type->name () ? type->name () : \"<NULL>\");\n   gdb_print_host_address (type->name (), gdb_stdout);\n   printf_filtered (\")\\n\");\n-  printfi_filtered (spaces, \"code 0x%x \", type->code ());\n+  printf_filtered (\"%*scode 0x%x \", spaces, \"\", type->code ());\n   switch (type->code ())\n     {\n     case TYPE_CODE_UNDEF:\n@@ -5153,36 +5152,37 @@ recursive_dump_type (struct type *type, int spaces)\n       break;\n     }\n   puts_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"length %s\\n\", pulongest (TYPE_LENGTH (type)));\n+  printf_filtered (\"%*slength %s\\n\", spaces, \"\",\n+\t\t   pulongest (TYPE_LENGTH (type)));\n   if (TYPE_OBJFILE_OWNED (type))\n     {\n-      printfi_filtered (spaces, \"objfile \");\n+      printf_filtered (\"%*sobjfile \", spaces, \"\");\n       gdb_print_host_address (TYPE_OWNER (type).objfile, gdb_stdout);\n     }\n   else\n     {\n-      printfi_filtered (spaces, \"gdbarch \");\n+      printf_filtered (\"%*sgdbarch \", spaces, \"\");\n       gdb_print_host_address (TYPE_OWNER (type).gdbarch, gdb_stdout);\n     }\n   printf_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"target_type \");\n+  printf_filtered (\"%*starget_type \", spaces, \"\");\n   gdb_print_host_address (TYPE_TARGET_TYPE (type), gdb_stdout);\n   printf_filtered (\"\\n\");\n   if (TYPE_TARGET_TYPE (type) != NULL)\n     {\n       recursive_dump_type (TYPE_TARGET_TYPE (type), spaces + 2);\n     }\n-  printfi_filtered (spaces, \"pointer_type \");\n+  printf_filtered (\"%*spointer_type \", spaces, \"\");\n   gdb_print_host_address (TYPE_POINTER_TYPE (type), gdb_stdout);\n   printf_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"reference_type \");\n+  printf_filtered (\"%*sreference_type \", spaces, \"\");\n   gdb_print_host_address (TYPE_REFERENCE_TYPE (type), gdb_stdout);\n   printf_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"type_chain \");\n+  printf_filtered (\"%*stype_chain \", spaces, \"\");\n   gdb_print_host_address (TYPE_CHAIN (type), gdb_stdout);\n   printf_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"instance_flags 0x%x\", \n-\t\t    (unsigned) type->instance_flags ());\n+  printf_filtered (\"%*sinstance_flags 0x%x\", spaces, \"\", \n+\t\t   (unsigned) type->instance_flags ());\n   if (TYPE_CONST (type))\n     {\n       puts_filtered (\" TYPE_CONST\");\n@@ -5217,7 +5217,7 @@ recursive_dump_type (struct type *type, int spaces)\n     }\n   puts_filtered (\"\\n\");\n \n-  printfi_filtered (spaces, \"flags\");\n+  printf_filtered (\"%*sflags\", spaces, \"\");\n   if (type->is_unsigned ())\n     {\n       puts_filtered (\" TYPE_UNSIGNED\");\n@@ -5266,20 +5266,18 @@ recursive_dump_type (struct type *type, int spaces)\n       puts_filtered (\" TYPE_NOTTEXT\");\n     }\n   puts_filtered (\"\\n\");\n-  printfi_filtered (spaces, \"nfields %d \", type->num_fields ());\n+  printf_filtered (\"%*snfields %d \", spaces, \"\", type->num_fields ());\n   gdb_print_host_address (type->fields (), gdb_stdout);\n   puts_filtered (\"\\n\");\n   for (idx = 0; idx < type->num_fields (); idx++)\n     {\n       if (type->code () == TYPE_CODE_ENUM)\n-\tprintfi_filtered (spaces + 2,\n-\t\t\t  \"[%d] enumval %s type \",\n-\t\t\t  idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));\n+\tprintf_filtered (\"%*s[%d] enumval %s type \", spaces + 2, \"\",\n+\t\t\t idx, plongest (TYPE_FIELD_ENUMVAL (type, idx)));\n       else\n-\tprintfi_filtered (spaces + 2,\n-\t\t\t  \"[%d] bitpos %s bitsize %d type \",\n-\t\t\t  idx, plongest (TYPE_FIELD_BITPOS (type, idx)),\n-\t\t\t  TYPE_FIELD_BITSIZE (type, idx));\n+\tprintf_filtered (\"%*s[%d] bitpos %s bitsize %d type \", spaces + 2, \"\",\n+\t\t\t idx, plongest (TYPE_FIELD_BITPOS (type, idx)),\n+\t\t\t TYPE_FIELD_BITSIZE (type, idx));\n       gdb_print_host_address (type->field (idx).type (), gdb_stdout);\n       printf_filtered (\" name '%s' (\",\n \t\t       TYPE_FIELD_NAME (type, idx) != NULL\n@@ -5294,7 +5292,7 @@ recursive_dump_type (struct type *type, int spaces)\n     }\n   if (type->code () == TYPE_CODE_RANGE)\n     {\n-      printfi_filtered (spaces, \"low \");\n+      printf_filtered (\"%*slow \", spaces, \"\");\n       dump_dynamic_prop (type->bounds ()->low);\n       printf_filtered (\"  high \");\n       dump_dynamic_prop (type->bounds ()->high);\n@@ -5304,22 +5302,22 @@ recursive_dump_type (struct type *type, int spaces)\n   switch (TYPE_SPECIFIC_FIELD (type))\n     {\n       case TYPE_SPECIFIC_CPLUS_STUFF:\n-\tprintfi_filtered (spaces, \"cplus_stuff \");\n+\tprintf_filtered (\"%*scplus_stuff \", spaces, \"\");\n \tgdb_print_host_address (TYPE_CPLUS_SPECIFIC (type), \n \t\t\t\tgdb_stdout);\n \tputs_filtered (\"\\n\");\n \tprint_cplus_stuff (type, spaces);\n \tbreak;\n \n       case TYPE_SPECIFIC_GNAT_STUFF:\n-\tprintfi_filtered (spaces, \"gnat_stuff \");\n+\tprintf_filtered (\"%*sgnat_stuff \", spaces, \"\");\n \tgdb_print_host_address (TYPE_GNAT_SPECIFIC (type), gdb_stdout);\n \tputs_filtered (\"\\n\");\n \tprint_gnat_stuff (type, spaces);\n \tbreak;\n \n       case TYPE_SPECIFIC_FLOATFORMAT:\n-\tprintfi_filtered (spaces, \"floatformat \");\n+\tprintf_filtered (\"%*sfloatformat \", spaces, \"\");\n \tif (TYPE_FLOATFORMAT (type) == NULL\n \t    || TYPE_FLOATFORMAT (type)->name == NULL)\n \t  puts_filtered (\"(null)\");\n@@ -5329,19 +5327,19 @@ recursive_dump_type (struct type *type, int spaces)\n \tbreak;\n \n       case TYPE_SPECIFIC_FUNC:\n-\tprintfi_filtered (spaces, \"calling_convention %d\\n\",\n-\t\t\t  TYPE_CALLING_CONVENTION (type));\n+\tprintf_filtered (\"%*scalling_convention %d\\n\", spaces, \"\",\n+\t\t\t TYPE_CALLING_CONVENTION (type));\n \t/* tail_call_list is not printed.  */\n \tbreak;\n \n       case TYPE_SPECIFIC_SELF_TYPE:\n-\tprintfi_filtered (spaces, \"self_type \");\n+\tprintf_filtered (\"%*sself_type \", spaces, \"\");\n \tgdb_print_host_address (TYPE_SELF_TYPE (type), gdb_stdout);\n \tputs_filtered (\"\\n\");\n \tbreak;\n \n       case TYPE_SPECIFIC_FIXED_POINT:\n-\tprintfi_filtered (spaces, \"fixed_point_info \");\n+\tprintf_filtered (\"%*sfixed_point_info \", spaces, \"\");\n \tprint_fixed_point_type_info (type, spaces);\n \tputs_filtered (\"\\n\");\n \tbreak;\n@@ -5351,8 +5349,8 @@ recursive_dump_type (struct type *type, int spaces)\n \t{\n \t  unsigned bit_size = type->bit_size ();\n \t  unsigned bit_off = type->bit_offset ();\n-\t  printfi_filtered (spaces, \" bit size = %u, bit offset = %u\\n\",\n-\t\t\t    bit_size, bit_off);\n+\t  printf_filtered (\"%*s bit size = %u, bit offset = %u\\n\", spaces, \"\",\n+\t\t\t   bit_size, bit_off);\n \t}\n       break;\n     }"
    },
    {
      "sha": "3765d530c94d0aa305e40419324c26754f2151d7",
      "filename": "gdb/go32-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/go32-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/go32-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go32-nat.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -1261,7 +1261,7 @@ go32_sysinfo (const char *arg, int from_tty)\n       xsnprintf (cpu_string, sizeof (cpu_string), \"%s%s Model %d Stepping %d\",\n \t\t intel_p ? \"Pentium\" : (amd_p ? \"AMD\" : (hygon_p ? \"Hygon\" : \"ix86\")),\n \t\t cpu_brand, cpu_model, cpuid_eax & 0xf);\n-      printfi_filtered (31, \"%s\\n\", cpu_string);\n+      printf_filtered (\"%*s%s\\n\", 31, \"\", cpu_string);\n       if (((cpuid_edx & (6 | (0x0d << 23))) != 0)\n \t  || ((cpuid_edx & 1) == 0)\n \t  || ((amd_p || hygon_p) && (cpuid_edx & (3 << 30)) != 0))\n@@ -1372,11 +1372,11 @@ go32_sysinfo (const char *arg, int from_tty)\n \t\t   \"%s-bit DPMI, with%s Virtual Memory support\\n\",\n \t\t   (dpmi_version_data.flags & 1) ? \"32\" : \"16\",\n \t\t   (dpmi_version_data.flags & 4) ? \"\" : \"out\");\n-  printfi_filtered (31, \"Interrupts reflected to %s mode\\n\",\n+  printf_filtered (\"%*sInterrupts reflected to %s mode\\n\", 31, \"\",\n \t\t   (dpmi_version_data.flags & 2) ? \"V86\" : \"Real\");\n-  printfi_filtered (31, \"Processor type: i%d86\\n\",\n+  printf_filtered (\"%*sProcessor type: i%d86\\n\", 31, \"\",\n \t\t   dpmi_version_data.cpu);\n-  printfi_filtered (31, \"PIC base interrupt: Master: %#x  Slave: %#x\\n\",\n+  printf_filtered (\"%*sPIC base interrupt: Master: %#x  Slave: %#x\\n\", 31, \"\",\n \t\t   dpmi_version_data.master_pic, dpmi_version_data.slave_pic);\n \n   /* a_tss is only initialized when the debuggee is first run.  */\n@@ -1430,8 +1430,8 @@ go32_sysinfo (const char *arg, int from_tty)\n       __dpmi_int (0x21, &regs);\n       if ((regs.x.flags & 1) != 0)\n \tregs.h.al = 0;\n-      printfi_filtered (31, \"UMBs %sin DOS memory chain\\n\",\n-\t\t\tregs.h.al == 0 ? \"not \" : \"\");\n+      printf_filtered (\"%*sUMBs %sin DOS memory chain\\n\", 31, \"\",\n+\t\t       regs.h.al == 0 ? \"not \" : \"\");\n     }\n }\n \n@@ -1595,7 +1595,7 @@ display_descriptor (unsigned type, unsigned long base_addr, int idx, int force)\n \t\tbreak;\n \t      case 5:\n \t\tprintf_filtered (\"TSS selector=0x%04x\", descr.base0);\n-\t\tprintfi_filtered (16, \"Task Gate\");\n+\t\tprintf_filtered (\"%*sTask Gate\", 16, \"\");\n \t\tbreak;\n \t      case 6:\n \t      case 7:"
    },
    {
      "sha": "8b05bf316010c6c1562e7d571a773a3cf9f30240",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -582,7 +582,7 @@ m2_record_fields (struct type *type, struct ui_file *stream, int show,\n \t  fprintf_filtered (stream, \";\\n\");\n \t}\n       \n-      fprintfi_filtered (level, stream, \"END \");\n+      fprintf_filtered (stream, \"%*sEND \", level, \"\");\n     }\n }\n "
    },
    {
      "sha": "b53a0de0c97680c51fb1d1f1f7fecf3ef3986b1e",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -564,9 +564,11 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t  if ((type->num_fields () == 0) && (TYPE_NFN_FIELDS (type) == 0))\n \t    {\n \t      if (type->is_stub ())\n-\t\tfprintfi_filtered (level + 4, stream, \"<incomplete type>\\n\");\n+\t\tfprintf_filtered (stream, \"%*s<incomplete type>\\n\",\n+\t\t\t\t  level + 4, \"\");\n \t      else\n-\t\tfprintfi_filtered (level + 4, stream, \"<no data fields>\\n\");\n+\t\tfprintf_filtered (stream, \"%*s<no data fields>\\n\",\n+\t\t\t\t  level + 4, \"\");\n \t    }\n \n \t  /* Start off with no specific section type, so we can print\n@@ -597,24 +599,26 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t\t      if (section_type != s_protected)\n \t\t\t{\n \t\t\t  section_type = s_protected;\n-\t\t\t  fprintfi_filtered (level + 2, stream,\n-\t\t\t\t\t     \"protected\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*sprotected\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \t\t  else if (TYPE_FIELD_PRIVATE (type, i))\n \t\t    {\n \t\t      if (section_type != s_private)\n \t\t\t{\n \t\t\t  section_type = s_private;\n-\t\t\t  fprintfi_filtered (level + 2, stream, \"private\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*sprivate\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      if (section_type != s_public)\n \t\t\t{\n \t\t\t  section_type = s_public;\n-\t\t\t  fprintfi_filtered (level + 2, stream, \"public\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*spublic\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \t\t}\n@@ -668,24 +672,26 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t\t      if (section_type != s_protected)\n \t\t\t{\n \t\t\t  section_type = s_protected;\n-\t\t\t  fprintfi_filtered (level + 2, stream,\n-\t\t\t\t\t     \"protected\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*sprotected\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \t\t  else if (TYPE_FN_FIELD_PRIVATE (f, j))\n \t\t    {\n \t\t      if (section_type != s_private)\n \t\t\t{\n \t\t\t  section_type = s_private;\n-\t\t\t  fprintfi_filtered (level + 2, stream, \"private\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*sprivate\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      if (section_type != s_public)\n \t\t\t{\n \t\t\t  section_type = s_public;\n-\t\t\t  fprintfi_filtered (level + 2, stream, \"public\\n\");\n+\t\t\t  fprintf_filtered (stream, \"%*spublic\\n\",\n+\t\t\t\t\t    level + 2, \"\");\n \t\t\t}\n \t\t    }\n \n@@ -736,7 +742,7 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t\t  fprintf_filtered (stream, \";\\n\");\n \t\t}\n \t    }\n-\t  fprintfi_filtered (level, stream, \"end\");\n+\t  fprintf_filtered (stream, \"%*send\", level, \"\");\n \t}\n       break;\n "
    },
    {
      "sha": "3a9a4e7fd65a70ed557735afb69134128cc8aa69",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -849,9 +849,10 @@ rust_internal_print_type (struct type *type, const char *varstring,\n \t\t&& name[len] == ':'\n \t\t&& name[len + 1] == ':')\n \t      name += len + 2;\n-\t    fprintfi_filtered (level + 2, stream, \"%ps,\\n\",\n-\t\t\t       styled_string (variable_name_style.style (),\n-\t\t\t\t\t      name));\n+\t    fprintf_filtered (stream, \"%*s%ps,\\n\",\n+\t\t\t      level + 2, \"\",\n+\t\t\t      styled_string (variable_name_style.style (),\n+\t\t\t\t\t     name));\n \t  }\n \n \tfputs_filtered (\"}\", stream);"
    },
    {
      "sha": "a0b36b4a540f8a699884e0eabb4079a448a35341",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -2183,22 +2183,6 @@ fprintf_unfiltered (struct ui_file *stream, const char *format, ...)\n   va_end (args);\n }\n \n-/* Like fprintf_filtered, but prints its result indented.\n-   Called as fprintfi_filtered (spaces, stream, format, ...);  */\n-\n-void\n-fprintfi_filtered (int spaces, struct ui_file *stream, const char *format,\n-\t\t   ...)\n-{\n-  va_list args;\n-\n-  va_start (args, format);\n-  print_spaces_filtered (spaces, stream);\n-\n-  vfprintf_filtered (stream, format, args);\n-  va_end (args);\n-}\n-\n /* See utils.h.  */\n \n void\n@@ -2263,20 +2247,6 @@ printf_unfiltered (const char *format, ...)\n   va_end (args);\n }\n \n-/* Like printf_filtered, but prints it's result indented.\n-   Called as printfi_filtered (spaces, format, ...);  */\n-\n-void\n-printfi_filtered (int spaces, const char *format, ...)\n-{\n-  va_list args;\n-\n-  va_start (args, format);\n-  print_spaces_filtered (spaces, gdb_stdout);\n-  vfprintf_filtered (gdb_stdout, format, args);\n-  va_end (args);\n-}\n-\n /* Easy -- but watch out!\n \n    This routine is *not* a replacement for puts()!  puts() appends a newline."
    },
    {
      "sha": "51483b80cb253a49d18365fdcce3fb7c28298897",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32f47895b5859c1f34abec75478ef55f2d92b023/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=32f47895b5859c1f34abec75478ef55f2d92b023",
      "patch": "@@ -443,13 +443,8 @@ extern void vfprintf_filtered (struct ui_file *, const char *, va_list)\n extern void fprintf_filtered (struct ui_file *, const char *, ...)\n   ATTRIBUTE_PRINTF (2, 3);\n \n-extern void fprintfi_filtered (int, struct ui_file *, const char *, ...)\n-  ATTRIBUTE_PRINTF (3, 4);\n-\n extern void printf_filtered (const char *, ...) ATTRIBUTE_PRINTF (1, 2);\n \n-extern void printfi_filtered (int, const char *, ...) ATTRIBUTE_PRINTF (2, 3);\n-\n extern void vprintf_unfiltered (const char *, va_list) ATTRIBUTE_PRINTF (1, 0);\n \n extern void vfprintf_unfiltered (struct ui_file *, const char *, va_list)"
    }
  ]
}