{
  "sha": "bf57746745ac0c0d2922de5af5f0d8527d7a585a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY1Nzc0Njc0NWFjMGMwZDI5MjJkZTVhZjVmMGQ4NTI3ZDdhNTg1YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-01T23:46:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-02T01:06:19Z"
    },
    "message": "ELF SEC_SMALL_DATA\n\nFor those ELF targets that have .sdata or .sbss sections, or similar\nsections, arrange to mark the sections with the SEC_SMALL_DATA flag.\nThis fixes regressions in nm symbol type caused by removing .sdata\nand .sbss from coff_section_type with commit 49d9fd42ac.\n\n\t* elf32-m32r.c (m32r_elf_section_flags): New function.\n\t(elf_backend_section_flags): Define.\n\t* elf32-nds32.c (nds32_elf_section_flags): New function.\n\t(elf_backend_section_flags): Define.\n\t* elf32-ppc.c (ppc_elf_section_from_shdr): Set SEC_SMALL_DATA for\n\t.sbss and .sdata sections.\n\t* elf32-v850.c (v850_elf_section_from_shdr): Set SEC_SMALL_DATA\n\tfor SHF_V850_GPREL sections.\n\t* elf64-alpha.c (elf64_alpha_section_from_shdr): Delete outdated\n\tFIXME.\n\t* elf64-hppa.c (elf64_hppa_section_from_shdr): Set SEC_SMALL_DATA\n\tfor SHF_PARISC_SHORT sections.\n\t* elf64-ppc.c (ppc64_elf_section_flags): New function.\n\t(elf_backend_section_flags): Define.\n\t* elfxx-mips.c (_bfd_mips_elf_section_from_shdr): Set SEC_SMALL_DATA\n\tfor SHF_MIPS_GPREL sections.  Delete FIXME.",
    "tree": {
      "sha": "7445cbcebf6e475e42b8343ce056543fa7f67473",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7445cbcebf6e475e42b8343ce056543fa7f67473"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf57746745ac0c0d2922de5af5f0d8527d7a585a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf57746745ac0c0d2922de5af5f0d8527d7a585a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf57746745ac0c0d2922de5af5f0d8527d7a585a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf57746745ac0c0d2922de5af5f0d8527d7a585a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c803a2dd7d3d742a3d0071914f557ef465afe71",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c803a2dd7d3d742a3d0071914f557ef465afe71",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c803a2dd7d3d742a3d0071914f557ef465afe71"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 85,
    "deletions": 16
  },
  "files": [
    {
      "sha": "304efd06877d9f953e6715a3e431955bdade87c1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -1,3 +1,22 @@\n+2020-03-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-m32r.c (m32r_elf_section_flags): New function.\n+\t(elf_backend_section_flags): Define.\n+\t* elf32-nds32.c (nds32_elf_section_flags): New function.\n+\t(elf_backend_section_flags): Define.\n+\t* elf32-ppc.c (ppc_elf_section_from_shdr): Set SEC_SMALL_DATA for\n+\t.sbss and .sdata sections.\n+\t* elf32-v850.c (v850_elf_section_from_shdr): Set SEC_SMALL_DATA\n+\tfor SHF_V850_GPREL sections.\n+\t* elf64-alpha.c (elf64_alpha_section_from_shdr): Delete outdated\n+\tFIXME.\n+\t* elf64-hppa.c (elf64_hppa_section_from_shdr): Set SEC_SMALL_DATA\n+\tfor SHF_PARISC_SHORT sections.\n+\t* elf64-ppc.c (ppc64_elf_section_flags): New function.\n+\t(elf_backend_section_flags): Define.\n+\t* elfxx-mips.c (_bfd_mips_elf_section_from_shdr): Set SEC_SMALL_DATA\n+\tfor SHF_MIPS_GPREL sections.  Delete FIXME.\n+\n 2020-03-02  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (elf_backend_section_flags): Remove flagword* param."
    },
    {
      "sha": "2a4b0b2ebea80d4bab414cb58ee00e62a74dcae6",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -3827,6 +3827,18 @@ static const struct bfd_elf_special_section m32r_elf_special_sections[] =\n   { NULL,\t\t      0,  0, 0,\t\t   0 }\n };\n \n+static bfd_boolean\n+m32r_elf_section_flags (const Elf_Internal_Shdr *hdr)\n+{\n+  const char *name = hdr->bfd_section->name;\n+\n+  if (strncmp (name, \".sbss\", 5) == 0\n+      || strncmp (name, \".sdata\", 6) == 0)\n+    hdr->bfd_section->flags |= SEC_SMALL_DATA;\n+\n+  return TRUE;\n+}\n+\n static enum elf_reloc_type_class\n m32r_elf_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,\n \t\t\t   const asection *rel_sec ATTRIBUTE_UNUSED,\n@@ -3897,6 +3909,7 @@ m32r_elf_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,\n #define bfd_elf32_bfd_set_private_flags\t\tm32r_elf_set_private_flags\n #define bfd_elf32_bfd_print_private_bfd_data\tm32r_elf_print_private_bfd_data\n #define elf_backend_special_sections\t\tm32r_elf_special_sections\n+#define elf_backend_section_flags\t\tm32r_elf_section_flags\n \n #define elf_backend_linux_prpsinfo32_ugid16\tTRUE\n "
    },
    {
      "sha": "fc4d002f0d9386ddc0a35b6ff31817d3099fefef",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -12593,6 +12593,18 @@ static struct bfd_elf_special_section const nds32_elf_special_sections[] =\n   {NULL, 0, 0, 0, 0}\n };\n \n+static bfd_boolean\n+nds32_elf_section_flags (const Elf_Internal_Shdr *hdr)\n+{\n+  const char *name = hdr->bfd_section->name;\n+\n+  if (strncmp (name, \".sbss\", 5) == 0\n+      || strncmp (name, \".sdata\", 6) == 0)\n+    hdr->bfd_section->flags |= SEC_SMALL_DATA;\n+\n+  return TRUE;\n+}\n+\n static bfd_boolean\n nds32_elf_output_arch_syms (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t\t\t    struct bfd_link_info *info,\n@@ -14093,6 +14105,7 @@ nds32_elf_unify_tls_model (bfd *inbfd, asection *insec, bfd_byte *incontents,\n #define elf_backend_object_p\t\t\tnds32_elf_object_p\n #define elf_backend_final_write_processing\tnds32_elf_final_write_processing\n #define elf_backend_special_sections\t\tnds32_elf_special_sections\n+#define elf_backend_section_flags\t\tnds32_elf_section_flags\n #define bfd_elf32_bfd_get_relocated_section_contents \\\n \t\t\t\tnds32_elf_get_relocated_section_contents\n #define bfd_elf32_bfd_is_target_special_symbol\tnds32_elf_is_target_special_symbol"
    },
    {
      "sha": "68b02205aafc9cb7e9ac5bfa124556a97840528f",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -1332,15 +1332,21 @@ ppc_elf_section_from_shdr (bfd *abfd,\n     return FALSE;\n \n   newsect = hdr->bfd_section;\n-  flags = bfd_section_flags (newsect);\n+  flags = 0;\n   if (hdr->sh_flags & SHF_EXCLUDE)\n     flags |= SEC_EXCLUDE;\n \n   if (hdr->sh_type == SHT_ORDERED)\n     flags |= SEC_SORT_ENTRIES;\n \n-  bfd_set_section_flags (newsect, flags);\n-  return TRUE;\n+  if (strncmp (name, \".PPC.EMB\", 8) == 0)\n+    name += 8;\n+  if (strncmp (name, \".sbss\", 5) == 0\n+      || strncmp (name, \".sdata\", 6) == 0)\n+    flags |= SEC_SMALL_DATA;\n+\n+  return (flags == 0\n+\t  || bfd_set_section_flags (newsect, newsect->flags | flags));\n }\n \n /* Set up any other section flags and such that may be necessary.  */"
    },
    {
      "sha": "bf37a936620f12a3c6482d265ae2a7e2c6ae09d5",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -3151,25 +3151,30 @@ v850_elf_section_from_shdr (bfd *abfd,\n \t\t\t    const char *name,\n \t\t\t    int shindex)\n {\n+  flagword flags;\n+\n   /* There ought to be a place to keep ELF backend specific flags, but\n      at the moment there isn't one.  We just keep track of the\n      sections by their name, instead.  */\n \n   if (! _bfd_elf_make_section_from_shdr (abfd, hdr, name, shindex))\n     return FALSE;\n \n+  flags = 0;\n   switch (hdr->sh_type)\n     {\n     case SHT_V850_SCOMMON:\n     case SHT_V850_TCOMMON:\n     case SHT_V850_ZCOMMON:\n-      if (!bfd_set_section_flags (hdr->bfd_section,\n-\t\t\t\t  (bfd_section_flags (hdr->bfd_section)\n-\t\t\t\t   | SEC_IS_COMMON)))\n-\treturn FALSE;\n+      flags = SEC_IS_COMMON;\n     }\n \n-  return TRUE;\n+  if ((hdr->sh_flags & SHF_V850_GPREL) != 0)\n+    flags |= SEC_SMALL_DATA;\n+\n+  return (flags == 0\n+\t  || bfd_set_section_flags (hdr->bfd_section,\n+\t\t\t\t    hdr->bfd_section->flags | flags));\n }\n \n /* Set the correct type for a V850 ELF section.  We do this"
    },
    {
      "sha": "ca15944e608da0138e36e6713422c5a6d09ac344",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -1136,9 +1136,7 @@ elf64_alpha_info_to_howto (bfd *abfd, arelent *cache_ptr,\n \f\n /* Handle an Alpha specific section when reading an object file.  This\n    is called when bfd_section_from_shdr finds a section with an unknown\n-   type.\n-   FIXME: We need to handle the SHF_ALPHA_GPREL flag, but I'm not sure\n-   how to.  */\n+   type.  */\n \n static bfd_boolean\n elf64_alpha_section_from_shdr (bfd *abfd,"
    },
    {
      "sha": "a2602daf2b1a2027be71fe5a88082efbc98f4e90",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -383,7 +383,9 @@ elf64_hppa_section_from_shdr (bfd *abfd,\n   if (! _bfd_elf_make_section_from_shdr (abfd, hdr, name, shindex))\n     return FALSE;\n \n-  return TRUE;\n+  return ((hdr->sh_flags & SHF_PARISC_SHORT) == 0\n+\t  || bfd_set_section_flags (hdr->bfd_section,\n+\t\t\t\t    hdr->bfd_section->flags | SEC_SMALL_DATA));\n }\n \n /* SEC is a section containing relocs for an input BFD when linking; return"
    },
    {
      "sha": "05ef34b030ac551cc3158080451bf31853720837",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -125,6 +125,7 @@ static bfd_vma opd_entry_value\n #define elf_backend_finish_dynamic_sections   ppc64_elf_finish_dynamic_sections\n #define elf_backend_link_output_symbol_hook   ppc64_elf_output_symbol_hook\n #define elf_backend_special_sections\t      ppc64_elf_special_sections\n+#define elf_backend_section_flags\t      ppc64_elf_section_flags\n #define elf_backend_merge_symbol_attribute    ppc64_elf_merge_symbol_attribute\n #define elf_backend_merge_symbol\t      ppc64_elf_merge_symbol\n #define elf_backend_get_reloc_section\t      bfd_get_section_by_name\n@@ -2011,6 +2012,18 @@ ppc64_elf_new_section_hook (bfd *abfd, asection *sec)\n   return _bfd_elf_new_section_hook (abfd, sec);\n }\n \n+static bfd_boolean\n+ppc64_elf_section_flags (const Elf_Internal_Shdr *hdr)\n+{\n+  const char *name = hdr->bfd_section->name;\n+\n+  if (strncmp (name, \".sbss\", 5) == 0\n+      || strncmp (name, \".sdata\", 6) == 0)\n+    hdr->bfd_section->flags |= SEC_SMALL_DATA;\n+\n+  return TRUE;\n+}\n+\n static struct _opd_sec_data *\n get_opd_info (asection * sec)\n {"
    },
    {
      "sha": "4671b5044975a0f6710390035e0f38fe755a2f38",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf57746745ac0c0d2922de5af5f0d8527d7a585a/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=bf57746745ac0c0d2922de5af5f0d8527d7a585a",
      "patch": "@@ -7425,10 +7425,7 @@ _bfd_mips_elf_section_processing (bfd *abfd, Elf_Internal_Shdr *hdr)\n \n /* Handle a MIPS specific section when reading an object file.  This\n    is called when elfcode.h finds a section with an unknown type.\n-   This routine supports both the 32-bit and 64-bit ELF ABI.\n-\n-   FIXME: We need to handle the SHF_MIPS_GPREL flag, but I'm not sure\n-   how to.  */\n+   This routine supports both the 32-bit and 64-bit ELF ABI.  */\n \n bfd_boolean\n _bfd_mips_elf_section_from_shdr (bfd *abfd,\n@@ -7517,6 +7514,9 @@ _bfd_mips_elf_section_from_shdr (bfd *abfd,\n   if (! _bfd_elf_make_section_from_shdr (abfd, hdr, name, shindex))\n     return FALSE;\n \n+  if (hdr->sh_flags & SHF_MIPS_GPREL)\n+    flags |= SEC_SMALL_DATA;\n+\n   if (flags)\n     {\n       if (!bfd_set_section_flags (hdr->bfd_section,"
    }
  ]
}