{
  "sha": "fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmM3NWMyOGJhMWVhNzM1M2ZiNmUxZTU5MDRjNTcwM2E0ODUwNGI2Nw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-05-14T11:59:53Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-05-14T11:59:53Z"
    },
    "message": "gdb: protect some 'regcache_read_pc' calls\n\nIt possible that a thread whose PC we attempt to read is already dead.\nIn this case, 'regcache_read_pc' errors out.  This impacts the\n\"proceed\" execution flow, where GDB quits early before having a chance\nto check if there exists a pending event.  To remedy, keep going with\na 0 value for the PC if 'regcache_read_pc' fails.  Because the value\nof PC before resuming a thread is mostly used for storing and checking\nthe next time the thread stops, this tolerance is expected to be\nharmless for a dead thread/process.\n\ngdb/ChangeLog:\n2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* regcache.c (regcache_read_pc_protected): New function\n\timplementation that returns 0 if the PC cannot read via\n\t'regcache_read_pc'.\n\t* infrun.c (proceed): Call 'regcache_read_pc_protected'\n\tinstead of 'regcache_read_pc'.\n\t(keep_going_pass_signal): Ditto.\n\ngdbsupport/ChangeLog:\n2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* common-regcache.h (regcache_read_pc_protected): New function\n\tdeclaration.",
    "tree": {
      "sha": "5b1a59f1c2cb60a34c7ca6b34e7868aaac49c975",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5b1a59f1c2cb60a34c7ca6b34e7868aaac49c975"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d95b8e9d631e76eb152c86003db6b89e913bdd9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d95b8e9d631e76eb152c86003db6b89e913bdd9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d95b8e9d631e76eb152c86003db6b89e913bdd9"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 41,
    "deletions": 3
  },
  "files": [
    {
      "sha": "462884ce41ead6c7ecfe71a4976f083b2dda1a59",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
      "patch": "@@ -1,3 +1,12 @@\n+2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* regcache.c (regcache_read_pc_protected): New function\n+\timplementation that returns 0 if the PC cannot read via\n+\t'regcache_read_pc'.\n+\t* infrun.c (proceed): Call 'regcache_read_pc_protected'\n+\tinstead of 'regcache_read_pc'.\n+\t(keep_going_pass_signal): Ditto.\n+\n 2020-05-13  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (align_value): Remove."
    },
    {
      "sha": "5e01336ab091b72eba524748cd6c7fab22efe4aa",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
      "patch": "@@ -2995,7 +2995,8 @@ proceed (CORE_ADDR addr, enum gdb_signal siggnal)\n   gdbarch = regcache->arch ();\n   const address_space *aspace = regcache->aspace ();\n \n-  pc = regcache_read_pc (regcache);\n+  pc = regcache_read_pc_protected (regcache);\n+\n   thread_info *cur_thr = inferior_thread ();\n \n   /* Fill in with reasonable starting values.  */\n@@ -3122,7 +3123,7 @@ proceed (CORE_ADDR addr, enum gdb_signal siggnal)\n      advanced.  Must do this before resuming any thread, as in\n      all-stop/remote, once we resume we can't send any other packet\n      until the target stops again.  */\n-  cur_thr->prev_pc = regcache_read_pc (regcache);\n+  cur_thr->prev_pc = regcache_read_pc_protected (regcache);\n \n   {\n     scoped_restore save_defer_tc = make_scoped_defer_target_commit_resume ();\n@@ -7929,7 +7930,7 @@ keep_going_pass_signal (struct execution_control_state *ecs)\n \n   /* Save the pc before execution, to compare with pc after stop.  */\n   ecs->event_thread->prev_pc\n-    = regcache_read_pc (get_thread_regcache (ecs->event_thread));\n+    = regcache_read_pc_protected (get_thread_regcache (ecs->event_thread));\n \n   if (ecs->event_thread->control.trap_expected)\n     {"
    },
    {
      "sha": "1be794520ec34022bd2b931d20a4a8edd0a0d49a",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
      "patch": "@@ -1220,6 +1220,24 @@ regcache_read_pc (struct regcache *regcache)\n   return pc_val;\n }\n \n+/* See gdbsupport/common-regcache.h.  */\n+\n+CORE_ADDR\n+regcache_read_pc_protected (regcache *regcache)\n+{\n+  CORE_ADDR pc;\n+  try\n+    {\n+      pc = regcache_read_pc (regcache);\n+    }\n+  catch (const gdb_exception_error &ex)\n+    {\n+      pc = 0;\n+    }\n+\n+  return pc;\n+}\n+\n void\n regcache_write_pc (struct regcache *regcache, CORE_ADDR pc)\n {"
    },
    {
      "sha": "636a3d34e145f683eea8db5f8884a53d19860e3c",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* common-regcache.h (regcache_read_pc_protected): New function\n+\tdeclaration.\n+\n 2020-04-28  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb-sigmask.h: Fix typo (pthead_sigmask -> pthread_sigmask)."
    },
    {
      "sha": "650536e8a88cb59681a90cd67c351855a16f61df",
      "filename": "gdbsupport/common-regcache.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdbsupport/common-regcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc75c28ba1ea7353fb6e1e5904c5703a48504b67/gdbsupport/common-regcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-regcache.h?ref=fc75c28ba1ea7353fb6e1e5904c5703a48504b67",
      "patch": "@@ -56,6 +56,11 @@ extern int regcache_register_size (const struct regcache *regcache, int n);\n \n extern CORE_ADDR regcache_read_pc (struct regcache *regcache);\n \n+/* Read the PC register.  If PC cannot be read, return 0.\n+   This is a wrapper around 'regcache_read_pc'.  */\n+\n+extern CORE_ADDR regcache_read_pc_protected (regcache *regcache);\n+\n /* Read a raw register into a unsigned integer.  */\n extern enum register_status regcache_raw_read_unsigned\n   (struct regcache *regcache, int regnum, ULONGEST *val);"
    }
  ]
}