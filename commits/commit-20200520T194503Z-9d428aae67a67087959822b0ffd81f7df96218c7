{
  "sha": "9d428aae67a67087959822b0ffd81f7df96218c7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWQ0MjhhYWU2N2E2NzA4Nzk1OTgyMmIwZmZkODFmN2RmOTYyMThjNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-20T19:44:24Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-20T19:45:03Z"
    },
    "message": "gdb: reset/recompute objfile section offsets in reread_symbols\n\nThis patch started as an investigation of this bug, where the program is\nre-compiled between two \"start\" runs:\n\n    $ ./gdb -nx --data-directory=data-directory -q a.out\n    Reading symbols from a.out...\n    (gdb) start\n    Temporary breakpoint 1 at 0x1131: file test.c, line 1.\n    Starting program: /home/smarchi/build/wt/test/gdb/a.out\n\n    Temporary breakpoint 1, main () at test.c:1\n    1       int main() { return 0; }\n\n    *** re-compile a.out ***\n\n    (gdb) start\n    The program being debugged has been started already.\n    Start it from the beginning? (y or n) y\n    `/home/smarchi/build/wt/test/gdb/a.out' has changed; re-reading symbols.\n    Temporary breakpoint 2 at 0x555555555129: file test.c, line 1.\n    Starting program: /home/smarchi/build/wt/test/gdb/a.out\n    warning: Probes-based dynamic linker interface failed.\n    Reverting to original interface.\n\n    Temporary breakpoint 2, main () at test.c:1\n    1       int main() { return 0; }\n    (gdb)\n\nTo reproduce the bug, a.out needs to be a position-independent\nexecutable (PIE).\n\nHere's what happens:\n\n1) We first read the symbols of a.out.  The section offsets in the\n   objfile are all 0, so the symbols are created unrelocated.\n2) The breakpoint on main is created, as you can see the breakpoint\n   address (derived from the `main` symbol with value 0x1129) is still\n   unrelocated (0x1131).  Since the program is not yet started, we don't\n   know at which base address the executable is going to end at.\n   Everything good so far.\n3) The execution starts, GDB finds out the executable's base address,\n   fills the objfile's section_offsets vector with a bunch of offsets,\n   and relocates the symbols with those offsets.  The latter modifies\n   the symbol values (the `main` symbol is changed from 0x1129 to\n   0x555555555129).\n4) We `start` again, we detect that `a.out` has changed, the\n   `reread_symbols` function kicks in.  It tries to reset everything\n   in the `struct objfile` corresponding to `a.out`, except that it\n   leaves the `section_offsets` vector there.\n5) `reread_symbols` reads the debug info (calls `read_symbols`).  As the\n   DWARF info is read, symbols are created using the old offsets still\n   in `section_offsets`.  For example, the `main` symbol is created with\n   the value 0x555555555129.  Even though at this point there is no\n   process, so that address is bogus.  There's probably more that\n   depends on section_offsets that is not done correctly.\n6) Something in the SVR4 solib handling goes wrong, probably because\n   of something that went wrong in (5).  I can't quite explain it (if\n   somebody would like to provide a more complete analysis, please go\n   ahead).  But this is where it takes a wrong turn:\n\n    #0  elf_locate_base () at /home/smarchi/src/wt/test/gdb/solib-svr4.c:799\n    #1  0x000055f0a5bee6d5 in locate_base (info=<optimized out>) at /home/smarchi/src/wt/test/gdb/solib-svr4.c:848\n    #2  0x000055f0a5bf1771 in svr4_handle_solib_event () at /home/smarchi/src/wt/test/gdb/solib-svr4.c:1955\n    #3  0x000055f0a5c0ff92 in handle_solib_event () at /home/smarchi/src/wt/test/gdb/solib.c:1258\n\n   In the non-working case (without this patch), elf_locate_base returns\n   0, whereas in the working case (with this patch) it returns a valid\n   address, as we should expect.\n\nThis patch fixes this by making reread_symbols clear the\n`section_offsets` vector, and re-create it by calling `sym_offsets`.\nThis is analogous to what syms_from_objfile_1 does.  I didn't seem\nabsolutely necessary, but I also made it clear the various\n`sect_index_*` fields, since their values no longer make sense (they\ndescribe the old executable, and are indices in the now cleared\nsections/section_offsets arrays).\n\nI don't really like the approach taken by reread_symbols, trying to\nreset everything manually on the objfile object, instead of, for\nexample, creating a new one from scratch.  But I don't know enough yet\nto propose a better solution.\n\nOne more reason I think this patch is needed is that the number of\nsections of the new executable could be different from the number of\nsections of the old executable.  So if we don't re-create the\nsection_offsets array, not only we'll have wrong offsets, but we could\nmake accesses past the array.\n\nSomething else that silently fails (but doesn't seem to have\nconsequences) is the prologue analysis when we try to create the\nbreakpoint on `main`.  Since the `main` symbol has the wrong value\n0x555555555129, we try to access memory in that area, which fails.  This\ncan be observed by debugging gdb and using `catch throw`.  Before the\nprocess is started, we need to access the memory at its unrelocated\naddress, 0x1129, which will read memory from the ELF file.  This is now\nwhat happens, with this patch applied.\n\nIt silently fails, probably because commit 46a62268b, \"Catch exceptions\nthrown from gdbarch_skip_prologue\", papered over the problem and added\nan empty catch clause.  I'm quite sure that the root cause then was the\none fixed by this patch.\n\nThis fixes tests gdb.ada/exec_changed.exp and gdb.base/reread.exp for\nme.\n\ngdb/ChangeLog:\n\n\t* symfile.c (reread_symbols): Clear objfile's section_offsets\n\tvector and section indices, re-compute them by calling\n\tsym_offsets.",
    "tree": {
      "sha": "2c46d1816a75ce13d69d71215ed29ca16a98e71d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c46d1816a75ce13d69d71215ed29ca16a98e71d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9d428aae67a67087959822b0ffd81f7df96218c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d428aae67a67087959822b0ffd81f7df96218c7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9d428aae67a67087959822b0ffd81f7df96218c7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d428aae67a67087959822b0ffd81f7df96218c7/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8f595e9b4fd0a3a74d53ddffd69f2825627ae5c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f595e9b4fd0a3a74d53ddffd69f2825627ae5c6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8f595e9b4fd0a3a74d53ddffd69f2825627ae5c6"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 14,
    "deletions": 0
  },
  "files": [
    {
      "sha": "38d18976110982a67319404d25763b03968c38e0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d428aae67a67087959822b0ffd81f7df96218c7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d428aae67a67087959822b0ffd81f7df96218c7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9d428aae67a67087959822b0ffd81f7df96218c7",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-20  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* symfile.c (reread_symbols): Clear objfile's section_offsets\n+\tvector and section indices, re-compute them by calling\n+\tsym_offsets.\n+\n 2020-05-20  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (bound_name, MAX_ADA_DIMENS): Remove."
    },
    {
      "sha": "b02a9235663b00823d687c002630de566ef7e07b",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d428aae67a67087959822b0ffd81f7df96218c7/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d428aae67a67087959822b0ffd81f7df96218c7/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=9d428aae67a67087959822b0ffd81f7df96218c7",
      "patch": "@@ -2543,6 +2543,11 @@ reread_symbols (void)\n \t     will need to be called (see discussion below).  */\n \t  obstack_free (&objfile->objfile_obstack, 0);\n \t  objfile->sections = NULL;\n+\t  objfile->section_offsets.clear ();\n+\t  objfile->sect_index_bss = -1;\n+\t  objfile->sect_index_data = -1;\n+\t  objfile->sect_index_rodata = -1;\n+\t  objfile->sect_index_text = -1;\n \t  objfile->compunit_symtabs = NULL;\n \t  objfile->template_symbols = NULL;\n \t  objfile->static_links.reset (nullptr);\n@@ -2597,6 +2602,9 @@ reread_symbols (void)\n \n \t  objfiles_changed ();\n \n+\t  /* Recompute section offsets and section indices.  */\n+\t  objfile->sf->sym_offsets (objfile, {});\n+\n \t  read_symbols (objfile, 0);\n \n \t  if (!objfile_has_symbols (objfile))"
    }
  ]
}