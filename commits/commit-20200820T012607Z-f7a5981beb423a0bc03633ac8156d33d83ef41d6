{
  "sha": "f7a5981beb423a0bc03633ac8156d33d83ef41d6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjdhNTk4MWJlYjQyM2EwYmMwMzYzM2FjODE1NmQzM2Q4M2VmNDFkNg==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2020-08-18T08:49:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-20T01:26:07Z"
    },
    "message": "Port ecoff.c to str_hash.\n\n\t* ecoff.c (INIT_VARRAY): Use htab_t.\n\t(add_string): Likewise.\n\t(ecoff_read_begin_hook): Use new str_htab_create.\n\t(get_tag): Use htab_t.\n\t(add_file): Likewise.",
    "tree": {
      "sha": "028c1ccfd14ac12fa636e6deb9c466e8f4d8bd5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/028c1ccfd14ac12fa636e6deb9c466e8f4d8bd5a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f7a5981beb423a0bc03633ac8156d33d83ef41d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7a5981beb423a0bc03633ac8156d33d83ef41d6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f7a5981beb423a0bc03633ac8156d33d83ef41d6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7a5981beb423a0bc03633ac8156d33d83ef41d6/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 19,
    "deletions": 20
  },
  "files": [
    {
      "sha": "417ec653c3fc95389af4299b50965a569272098d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7a5981beb423a0bc03633ac8156d33d83ef41d6/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7a5981beb423a0bc03633ac8156d33d83ef41d6/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f7a5981beb423a0bc03633ac8156d33d83ef41d6",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* ecoff.c (INIT_VARRAY): Use htab_t.\n+\t(add_string): Likewise.\n+\t(ecoff_read_begin_hook): Use new str_htab_create.\n+\t(get_tag): Use htab_t.\n+\t(add_file): Likewise.\n+\n 2020-08-20  Martin Liska  <mliska@suse.cz>\n \n \t* hash.h (struct string_tuple): New."
    },
    {
      "sha": "5ec999e21581a6cc5bab3226d1f8c69c41dc095b",
      "filename": "gas/ecoff.c",
      "status": "modified",
      "additions": 11,
      "deletions": 20,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7a5981beb423a0bc03633ac8156d33d83ef41d6/gas/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7a5981beb423a0bc03633ac8156d33d83ef41d6/gas/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ecoff.c?ref=f7a5981beb423a0bc03633ac8156d33d83ef41d6",
      "patch": "@@ -946,7 +946,7 @@ typedef struct efdr {\n   varray_t\t aux_syms;\t/* auxiliary symbols */\n   struct efdr\t*next_file;\t/* next file descriptor */\n \t\t\t\t/* string/type hash tables */\n-  struct hash_control *str_hash;\t/* string hash table */\n+  htab_t\tstr_hash;\t/* string hash table */\n   thash_t\t*thash_head[THASH_SIZE];\n } efdr_t;\n \n@@ -994,7 +994,7 @@ static const efdr_t init_file = {\n \n   (struct efdr *)0,\t/* next_file:\tnext file structure */\n \n-  (struct hash_control *)0,\t/* str_hash:\tstring hash table */\n+  (htab_t)0,\t\t/* str_hash:\tstring hash table */\n   { 0 },\t\t/* thash_head:\ttype hash table */\n };\n \n@@ -1111,7 +1111,7 @@ static const type_info_t type_info_init = {\n \n static varray_t file_desc = INIT_VARRAY (efdr_t);\n \n-static struct hash_control *tag_hash;\n+static htab_t tag_hash;\n \n /* Static types for int and void.  Also, remember the last function's\n    type (which is set up when we encounter the declaration for the\n@@ -1408,7 +1408,7 @@ static char stabs_symbol[] = STABS_SYMBOL;\n \n static void add_varray_page (varray_t *vp);\n static symint_t add_string (varray_t *vp,\n-\t\t\t    struct hash_control *hash_tbl,\n+\t\t\t    htab_t hash_tbl,\n \t\t\t    const char *str,\n \t\t\t    shash_t **ret_hash);\n static localsym_t *add_ecoff_symbol (const char *str, st_t type,\n@@ -1475,7 +1475,7 @@ static lineno_list_t *allocate_lineno_list (void);\n void\n ecoff_read_begin_hook (void)\n {\n-  tag_hash = hash_new ();\n+  tag_hash = str_htab_create ();\n   top_tag_head = allocate_thead ();\n   top_tag_head->first_tag = (tag_t *) NULL;\n   top_tag_head->free = (thead_t *) NULL;\n@@ -1548,7 +1548,7 @@ add_varray_page (varray_t *vp /* varray to add page to */)\n \n static symint_t\n add_string (varray_t *vp,\t\t\t/* string obstack */\n-\t    struct hash_control *hash_tbl,\t/* ptr to hash table */\n+\t    htab_t hash_tbl,\t\t\t/* ptr to hash table */\n \t    const char *str,\t\t\t/* string */\n \t    shash_t **ret_hash\t\t\t/* return hash pointer */)\n {\n@@ -1558,11 +1558,9 @@ add_string (varray_t *vp,\t\t\t/* string obstack */\n   if (len >= PAGE_USIZE)\n     as_fatal (_(\"string too big (%lu bytes)\"), len);\n \n-  hash_ptr = (shash_t *) hash_find (hash_tbl, str);\n+  hash_ptr = (shash_t *) str_hash_find (hash_tbl, str);\n   if (hash_ptr == (shash_t *) NULL)\n     {\n-      const char *err;\n-\n       if (vp->objects_last_page + len >= PAGE_USIZE)\n \t{\n \t  vp->num_allocated =\n@@ -1580,10 +1578,7 @@ add_string (varray_t *vp,\t\t\t/* string obstack */\n \n       strcpy (hash_ptr->string, str);\n \n-      err = hash_insert (hash_tbl, str, (char *) hash_ptr);\n-      if (err)\n-\tas_fatal (_(\"inserting \\\"%s\\\" into string hash table: %s\"),\n-\t\t  str, err);\n+      str_hash_insert (hash_tbl, str, (char *) hash_ptr);\n     }\n \n   if (ret_hash != (shash_t **) NULL)\n@@ -2009,13 +2004,12 @@ get_tag (const char *tag,\t/* tag name */\n \t bt_t basic_type\t/* bt_Struct, bt_Union, or bt_Enum */)\n {\n   shash_t *hash_ptr;\n-  const char *err;\n   tag_t *tag_ptr;\n \n   if (cur_file_ptr == (efdr_t *) NULL)\n     as_fatal (_(\"no current file pointer\"));\n \n-  hash_ptr = (shash_t *) hash_find (tag_hash, tag);\n+  hash_ptr = (shash_t *) str_hash_find (tag_hash, tag);\n \n   if (hash_ptr != (shash_t *) NULL\n       && hash_ptr->tag_ptr != (tag_t *) NULL)\n@@ -2036,10 +2030,7 @@ get_tag (const char *tag,\t/* tag name */\n \n       perm = xstrdup (tag);\n       hash_ptr = allocate_shash ();\n-      err = hash_insert (tag_hash, perm, (char *) hash_ptr);\n-      if (err)\n-\tas_fatal (_(\"inserting \\\"%s\\\" into tag hash table: %s\"),\n-\t\t  tag, err);\n+      str_hash_insert (tag_hash, perm, (char *) hash_ptr);\n       hash_ptr->string = perm;\n     }\n \n@@ -2281,7 +2272,7 @@ add_file (const char *file_name, int indx ATTRIBUTE_UNUSED, int fake)\n       fil_ptr->fake = fake;\n \n       /* Allocate the string hash table.  */\n-      fil_ptr->str_hash = hash_new ();\n+      fil_ptr->str_hash = str_htab_create ();\n \n       /* Make sure 0 byte in string table is null  */\n       add_string (&fil_ptr->strings,"
    }
  ]
}