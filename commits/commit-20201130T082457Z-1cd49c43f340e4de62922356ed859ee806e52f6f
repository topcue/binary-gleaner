{
  "sha": "1cd49c43f340e4de62922356ed859ee806e52f6f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWNkNDljNDNmMzQwZTRkZTYyOTIyMzU2ZWQ4NTllZTgwNmU1MmY2Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-30T08:24:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-30T08:24:57Z"
    },
    "message": "Remove some dead code from evaluate_subexp_standard\n\nI noticed that in the OP_ARRAY case in evaluate_subexp_standard,\n\"index_pc\" is read but never set.  This dead code then guards the only\ncall to init_array_element, so this can be removed as well.\n\ngdb/ChangeLog\n2020-11-30  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (init_array_element): Remove.\n\t(evaluate_subexp_standard) <OP_ARRAY>: Remove \"index_pc\".",
    "tree": {
      "sha": "7105f9af41006dcdadfe133653c935a756f7142a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7105f9af41006dcdadfe133653c935a756f7142a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1cd49c43f340e4de62922356ed859ee806e52f6f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cd49c43f340e4de62922356ed859ee806e52f6f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1cd49c43f340e4de62922356ed859ee806e52f6f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cd49c43f340e4de62922356ed859ee806e52f6f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b7bbf3c81afce9721f602cdecceac8124beeb421",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7bbf3c81afce9721f602cdecceac8124beeb421",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7bbf3c81afce9721f602cdecceac8124beeb421"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 12,
    "deletions": 57
  },
  "files": [
    {
      "sha": "813305d0fdc4ff125c7fb3dbfa2673dac8b7c1f5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cd49c43f340e4de62922356ed859ee806e52f6f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cd49c43f340e4de62922356ed859ee806e52f6f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1cd49c43f340e4de62922356ed859ee806e52f6f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-30  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (init_array_element): Remove.\n+\t(evaluate_subexp_standard) <OP_ARRAY>: Remove \"index_pc\".\n+\n 2020-11-29  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR tui/26973"
    },
    {
      "sha": "d02813eec523c8c52c32773ebb423526a2b6c745",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 7,
      "deletions": 57,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cd49c43f340e4de62922356ed859ee806e52f6f/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cd49c43f340e4de62922356ed859ee806e52f6f/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=1cd49c43f340e4de62922356ed859ee806e52f6f",
      "patch": "@@ -57,10 +57,6 @@ static struct value *evaluate_struct_tuple (struct value *,\n \t\t\t\t\t    struct expression *, int *,\n \t\t\t\t\t    enum noside, int);\n \n-static LONGEST init_array_element (struct value *, struct value *,\n-\t\t\t\t   struct expression *, int *, enum noside,\n-\t\t\t\t   LONGEST, LONGEST);\n-\n struct value *\n evaluate_subexp (struct type *expect_type, struct expression *exp,\n \t\t int *pos, enum noside noside)\n@@ -337,39 +333,6 @@ evaluate_struct_tuple (struct value *struct_val,\n   return struct_val;\n }\n \n-/* Recursive helper function for setting elements of array tuples.\n-   The target is ARRAY (which has bounds LOW_BOUND to HIGH_BOUND); the\n-   element value is ELEMENT; EXP, POS and NOSIDE are as usual.\n-   Evaluates index expressions and sets the specified element(s) of\n-   ARRAY to ELEMENT.  Returns last index value.  */\n-\n-static LONGEST\n-init_array_element (struct value *array, struct value *element,\n-\t\t    struct expression *exp, int *pos,\n-\t\t    enum noside noside, LONGEST low_bound, LONGEST high_bound)\n-{\n-  LONGEST index;\n-  int element_size = TYPE_LENGTH (value_type (element));\n-\n-  if (exp->elts[*pos].opcode == BINOP_COMMA)\n-    {\n-      (*pos)++;\n-      init_array_element (array, element, exp, pos, noside,\n-\t\t\t  low_bound, high_bound);\n-      return init_array_element (array, element,\n-\t\t\t\t exp, pos, noside, low_bound, high_bound);\n-    }\n-  else\n-    {\n-      index = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n-      if (index < low_bound || index > high_bound)\n-\terror (_(\"tuple index out of range\"));\n-      memcpy (value_contents_raw (array) + (index - low_bound) * element_size,\n-\t      value_contents (element), element_size);\n-    }\n-  return index;\n-}\n-\n /* Promote value ARG1 as appropriate before performing a unary operation\n    on this argument.\n    If the result is not appropriate for any particular language then it\n@@ -1433,30 +1396,17 @@ evaluate_subexp_standard (struct type *expect_type,\n \t  for (tem = nargs; --nargs >= 0;)\n \t    {\n \t      struct value *element;\n-\t      int index_pc = 0;\n \n \t      element = evaluate_subexp (element_type, exp, pos, noside);\n \t      if (value_type (element) != element_type)\n \t\telement = value_cast (element_type, element);\n-\t      if (index_pc)\n-\t\t{\n-\t\t  int continue_pc = *pos;\n-\n-\t\t  *pos = index_pc;\n-\t\t  index = init_array_element (array, element, exp, pos, noside,\n-\t\t\t\t\t      low_bound, high_bound);\n-\t\t  *pos = continue_pc;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (index > high_bound)\n-\t\t    /* To avoid memory corruption.  */\n-\t\t    error (_(\"Too many array elements\"));\n-\t\t  memcpy (value_contents_raw (array)\n-\t\t\t  + (index - low_bound) * element_size,\n-\t\t\t  value_contents (element),\n-\t\t\t  element_size);\n-\t\t}\n+\t      if (index > high_bound)\n+\t\t/* To avoid memory corruption.  */\n+\t\terror (_(\"Too many array elements\"));\n+\t      memcpy (value_contents_raw (array)\n+\t\t      + (index - low_bound) * element_size,\n+\t\t      value_contents (element),\n+\t\t      element_size);\n \t      index++;\n \t    }\n \t  return array;"
    }
  ]
}