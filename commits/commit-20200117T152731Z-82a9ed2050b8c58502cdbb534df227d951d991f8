{
  "sha": "82a9ed2050b8c58502cdbb534df227d951d991f8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODJhOWVkMjA1MGI4YzU4NTAyY2RiYjUzNGRmMjI3ZDk1MWQ5OTFmOA==",
  "commit": {
    "author": {
      "name": "Thomas Troeger",
      "email": "tstroege@gmx.de",
      "date": "2020-01-17T15:27:31Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-01-17T15:27:31Z"
    },
    "message": "Improve the performance of the ascii art jump visualizer.\n\n\t* objdump.c (jump_info_visualize_address): Discard jumps that are\n\tno longer needed.\n\t(disassemble_bytes): Only compute the maximum level if jumps were\n\tdetected.",
    "tree": {
      "sha": "07364a1793f454264d2bb4ae3e135030f62c8716",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07364a1793f454264d2bb4ae3e135030f62c8716"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/82a9ed2050b8c58502cdbb534df227d951d991f8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82a9ed2050b8c58502cdbb534df227d951d991f8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/82a9ed2050b8c58502cdbb534df227d951d991f8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82a9ed2050b8c58502cdbb534df227d951d991f8/comments",
  "author": {
    "login": "hochl",
    "id": 6332453,
    "node_id": "MDQ6VXNlcjYzMzI0NTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6332453?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hochl",
    "html_url": "https://github.com/hochl",
    "followers_url": "https://api.github.com/users/hochl/followers",
    "following_url": "https://api.github.com/users/hochl/following{/other_user}",
    "gists_url": "https://api.github.com/users/hochl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hochl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hochl/subscriptions",
    "organizations_url": "https://api.github.com/users/hochl/orgs",
    "repos_url": "https://api.github.com/users/hochl/repos",
    "events_url": "https://api.github.com/users/hochl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hochl/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67b10306d19bd16ec9f3ca73b14aa82c789436e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67b10306d19bd16ec9f3ca73b14aa82c789436e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67b10306d19bd16ec9f3ca73b14aa82c789436e1"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 46,
    "deletions": 27
  },
  "files": [
    {
      "sha": "ac7d86ac164d1a216d83d8796b922ad903589d27",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82a9ed2050b8c58502cdbb534df227d951d991f8/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82a9ed2050b8c58502cdbb534df227d951d991f8/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=82a9ed2050b8c58502cdbb534df227d951d991f8",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-17  Thomas Troeger  <tstroege@gmx.de>\n+\n+\t* objdump.c (jump_info_visualize_address): Discard jumps that are\n+\tno longer needed.\n+\t(disassemble_bytes): Only compute the maximum level if jumps were\n+\tdetected.\n+\n 2020-01-13  Nick Clifton  <nickc@redhat.com>\n \n \t* objdump.c (disassemble_bytes): Remove C99-ism."
    },
    {
      "sha": "60a396712923375f01a97bccdf740782383b01bb",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 39,
      "deletions": 27,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82a9ed2050b8c58502cdbb534df227d951d991f8/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82a9ed2050b8c58502cdbb534df227d951d991f8/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=82a9ed2050b8c58502cdbb534df227d951d991f8",
      "patch": "@@ -1704,7 +1704,7 @@ show_line (bfd *abfd, asection *section, bfd_vma addr_offset)\n \n \t  /* Skip selected directory levels.  */\n \t  for (s = fname + 1; *s != '\\0' && level < prefix_strip; s++)\n-\t    if (IS_DIR_SEPARATOR(*s))\n+\t    if (IS_DIR_SEPARATOR (*s))\n \t      {\n \t\tfname = s;\n \t\tlevel++;\n@@ -2087,7 +2087,7 @@ jump_info_merge (struct jump_info **base)\n \t\t  a->start.max_count += b->start.max_count;\n \t\t  a->start.addresses =\n \t\t    xrealloc (a->start.addresses,\n-\t\t\t      a->start.max_count * sizeof(bfd_vma *));\n+\t\t\t      a->start.max_count * sizeof (bfd_vma *));\n \t\t}\n \n \t      /* Append start addresses.  */\n@@ -2146,24 +2146,34 @@ jump_info_sort (struct jump_info **base)\n /* Visualize all jumps at a given address.  */\n \n static void\n-jump_info_visualize_address (const struct jump_info *jumps,\n-\t\t\t     bfd_vma address,\n+jump_info_visualize_address (bfd_vma address,\n \t\t\t     int max_level,\n \t\t\t     char *line_buffer,\n \t\t\t     uint8_t *color_buffer)\n {\n+  struct jump_info *ji = detected_jumps;\n   size_t len = (max_level + 1) * 3;\n-  const struct jump_info *ji;\n \n   /* Clear line buffer.  */\n-  memset(line_buffer, ' ', len);\n-  memset(color_buffer, 0, len);\n+  memset (line_buffer, ' ', len);\n+  memset (color_buffer, 0, len);\n \n   /* Iterate over jumps and add their ASCII art.  */\n-  for (ji = jumps; ji; ji = ji->next)\n+  while (ji)\n     {\n-      if ((jump_info_min_address (ji) <= address)\n-\t  && (jump_info_max_address (ji) >= address))\n+      /* Discard jumps that are never needed again.  */\n+      if (jump_info_max_address (ji) < address)\n+\t{\n+\t  struct jump_info *tmp = ji;\n+\n+\t  ji = ji->next;\n+\t  jump_info_unlink (tmp, &detected_jumps);\n+\t  jump_info_free (tmp);\n+\t  continue;\n+\t}\n+\n+      /* This jump intersects with the current address.  */\n+      if (jump_info_min_address (ji) <= address)\n \t{\n \t  /* Hash target address to get an even\n \t     distribution between all values.  */\n@@ -2246,6 +2256,8 @@ jump_info_visualize_address (const struct jump_info *jumps,\n \t      color_buffer[offset] = color;\n \t    }\n \t}\n+\n+      ji = ji->next;\n     }\n }\n \n@@ -2518,26 +2530,27 @@ disassemble_bytes (struct disassemble_info * inf,\n   inf->insn_info_valid = 0;\n \n   /* Determine maximum level. */\n+  uint8_t *color_buffer = NULL;\n+  char *line_buffer = NULL;\n   int max_level = -1;\n-  struct jump_info *base = detected_jumps ? detected_jumps : NULL;\n-  struct jump_info *ji;\n \n-  for (ji = base; ji; ji = ji->next)\n+  /* Some jumps were detected.  */\n+  if (detected_jumps)\n     {\n-      if (ji->level > max_level)\n+      struct jump_info *ji;\n+\n+      /* Find maximum jump level.  */\n+      for (ji = detected_jumps; ji; ji = ji->next)\n \t{\n-\t  max_level = ji->level;\n+\t  if (ji->level > max_level)\n+\t    max_level = ji->level;\n \t}\n-    }\n \n-  /* Allocate line buffer if there are any jumps.  */\n-  size_t len = (max_level + 1) * 3 + 1;\n-  char *line_buffer = (max_level >= 0) ? xmalloc(len): NULL;\n-  uint8_t *color_buffer = (max_level >= 0) ? xmalloc(len): NULL;\n-\n-  if (line_buffer)\n-    {\n+      /* Allocate buffers.  */\n+      size_t len = (max_level + 1) * 3 + 1;\n+      line_buffer = xmalloc (len);\n       line_buffer[len - 1] = 0;\n+      color_buffer = xmalloc (len);\n       color_buffer[len - 1] = 0;\n     }\n \n@@ -2615,8 +2628,7 @@ disassemble_bytes (struct disassemble_info * inf,\n \t  /* Visualize jumps. */\n \t  if (line_buffer)\n \t    {\n-\t      jump_info_visualize_address (base,\n-\t\t\t\t\t   section->vma + addr_offset,\n+\t      jump_info_visualize_address (section->vma + addr_offset,\n \t\t\t\t\t   max_level,\n \t\t\t\t\t   line_buffer,\n \t\t\t\t\t   color_buffer);\n@@ -3934,7 +3946,7 @@ dump_bfd_header (bfd *abfd)\n \t\t\t\t   bfd_get_mach (abfd)));\n   printf (_(\"flags 0x%08x:\\n\"), abfd->flags & ~BFD_FLAGS_FOR_BFD_USE_MASK);\n \n-#define PF(x, y)    if (abfd->flags & x) {printf(\"%s%s\", comma, y); comma=\", \";}\n+#define PF(x, y)    if (abfd->flags & x) {printf (\"%s%s\", comma, y); comma=\", \";}\n   PF (HAS_RELOC, \"HAS_RELOC\");\n   PF (EXEC_P, \"EXEC_P\");\n   PF (HAS_LINENO, \"HAS_LINENO\");\n@@ -4478,7 +4490,7 @@ dump_reloc_set (bfd *abfd, asection *sec, arelent **relpp, long relcount)\n \t     Undo this transformation, otherwise the output\n \t     will be confusing.  */\n \t  if (abfd->xvec->flavour == bfd_target_elf_flavour\n-\t      && elf_tdata(abfd)->elf_header->e_machine == EM_SPARCV9\n+\t      && elf_tdata (abfd)->elf_header->e_machine == EM_SPARCV9\n \t      && relcount > 1\n \t      && !strcmp (q->howto->name, \"R_SPARC_LO10\"))\n \t    {"
    }
  ]
}