{
  "sha": "dd125343a1cccac2878d528d61a5ea71e46793fa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQxMjUzNDNhMWNjY2FjMjg3OGQ1MjhkNjFhNWVhNzFlNDY3OTNmYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-20T14:10:47Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-20T14:10:47Z"
    },
    "message": "gdb: refactor test_get_thread_arch_aspace_regcache\n\nDo these misc changes to test_get_thread_arch_aspace_regcache:\n\n- Rename to get_thread_arch_aspace_regcache_and_check.  The following\n  patch introduces a selftest for get_thread_arch_aspace_regcache, named\n  get_thread_arch_aspace_regcache_test.  To avoid confusion between the\n  two functions, rename this one to\n  get_thread_arch_aspace_regcache_and_check, I think it describes better\n  what it does.\n\n- Remove gdbarch parameter.  We always pass the same gdbarch (the\n  current inferior's gdbarch), so having a parameter is not useful.  It\n  would be interesting to actually test with multiple gdbarches, to\n  verify that the regcache container can hold multiple regcaches (with\n  different architectures) for a same (target, ptid).  But it's not the\n  case as of this patch.\n\n- Verify that the regcache's arch is correctly set.\n\n- Remove the aspace parameter.  We always pass NULL here, so it's not\n  useful to have it as a parameter.  Also, instead of passing a NULL\n  aspace to get_thread_arch_aspace_regcache and verifying that we get a\n  NULL aspace back, pass the current inferior's aspace (just like we use\n  the current inferior's gdbarch).\n\ngdb/ChangeLog:\n\n\t* regcache.c (test_get_thread_arch_aspace_regcache): Rename to...\n\t(get_thread_arch_aspace_regcache_and_check): ... this.  Remove\n\tgdbarch and aspace parameter.  Use current inferior's aspace.\n\tValidate regcache's arch value.\n\t(regcaches_test): Update.\n\nChange-Id: I8b4c2303b4f91f062269043d1f7abe1650232010",
    "tree": {
      "sha": "8176c46700f549506c18e6bb540773dee9ae8b36",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8176c46700f549506c18e6bb540773dee9ae8b36"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd125343a1cccac2878d528d61a5ea71e46793fa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd125343a1cccac2878d528d61a5ea71e46793fa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd125343a1cccac2878d528d61a5ea71e46793fa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd125343a1cccac2878d528d61a5ea71e46793fa/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ee93972f9dbbb77a7cd4f63c6c7bb66a8b12c71",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ee93972f9dbbb77a7cd4f63c6c7bb66a8b12c71",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3ee93972f9dbbb77a7cd4f63c6c7bb66a8b12c71"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 25,
    "deletions": 23
  },
  "files": [
    {
      "sha": "ef36c2fed6869bfa6aa0e0982e727adf7ccac77a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd125343a1cccac2878d528d61a5ea71e46793fa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd125343a1cccac2878d528d61a5ea71e46793fa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dd125343a1cccac2878d528d61a5ea71e46793fa",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-20  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* regcache.c (test_get_thread_arch_aspace_regcache): Rename to...\n+\t(get_thread_arch_aspace_regcache_and_check): ... this.  Remove\n+\tgdbarch and aspace parameter.  Use current inferior's aspace.\n+\tValidate regcache's arch value.\n+\t(regcaches_test): Update.\n+\n 2020-08-20  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* regcache.c (regcaches_test): Call registers_changed."
    },
    {
      "sha": "c27f6043fb26941729b9700d26c2e124d7ddf76f",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 17,
      "deletions": 23,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd125343a1cccac2878d528d61a5ea71e46793fa/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd125343a1cccac2878d528d61a5ea71e46793fa/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=dd125343a1cccac2878d528d61a5ea71e46793fa",
      "patch": "@@ -1491,15 +1491,21 @@ regcaches_size ()\n /* Wrapper around get_thread_arch_aspace_regcache that does some self checks.  */\n \n static void\n-test_get_thread_arch_aspace_regcache (process_stratum_target *target,\n-\t\t\t\t      ptid_t ptid, struct gdbarch *gdbarch,\n-\t\t\t\t      address_space *aspace)\n+get_thread_arch_aspace_regcache_and_check (process_stratum_target *target,\n+\t\t\t\t\t   ptid_t ptid)\n {\n-  struct regcache *regcache\n-    = get_thread_arch_aspace_regcache (target, ptid, gdbarch, aspace);\n+  /* We currently only test with a single gdbarch.  Any gdbarch will do, so use\n+     the current inferior's gdbarch.  Also use the current inferior's address\n+     space.  */\n+  gdbarch *arch = current_inferior ()->gdbarch;\n+  address_space *aspace = current_inferior ()->aspace;\n+  regcache *regcache\n+    = get_thread_arch_aspace_regcache (target, ptid, arch, aspace);\n+\n   SELF_CHECK (regcache != NULL);\n   SELF_CHECK (regcache->target () == target);\n   SELF_CHECK (regcache->ptid () == ptid);\n+  SELF_CHECK (regcache->arch () == arch);\n   SELF_CHECK (regcache->aspace () == aspace);\n }\n \n@@ -1517,37 +1523,27 @@ regcaches_test ()\n \n   /* Get regcache from (target1,ptid1), a new regcache is added to\n      REGCACHES.  */\n-  test_get_thread_arch_aspace_regcache (&test_target1, ptid1,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target1, ptid1);\n   SELF_CHECK (regcaches_size () == 1);\n \n   /* Get regcache from (target1,ptid2), a new regcache is added to\n      REGCACHES.  */\n-  test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target1, ptid2);\n   SELF_CHECK (regcaches_size () == 2);\n \n   /* Get regcache from (target1,ptid3), a new regcache is added to\n      REGCACHES.  */\n-  test_get_thread_arch_aspace_regcache (&test_target1, ptid3,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target1, ptid3);\n   SELF_CHECK (regcaches_size () == 3);\n \n   /* Get regcache from (target1,ptid2) again, nothing is added to\n      REGCACHES.  */\n-  test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target1, ptid2);\n   SELF_CHECK (regcaches_size () == 3);\n \n   /* Get regcache from (target2,ptid2), a new regcache is added to\n      REGCACHES, since this time we're using a different target.  */\n-  test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target2, ptid2);\n   SELF_CHECK (regcaches_size () == 4);\n \n   /* Mark that (target1,ptid2) changed.  The regcache of (target1,\n@@ -1557,9 +1553,7 @@ regcaches_test ()\n \n   /* Get the regcache from (target2,ptid2) again, confirming the\n      registers_changed_ptid call above did not delete it.  */\n-  test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n-\t\t\t\t\ttarget_gdbarch (),\n-\t\t\t\t\tNULL);\n+  get_thread_arch_aspace_regcache_and_check (&test_target2, ptid2);\n   SELF_CHECK (regcaches_size () == 3);\n \n   /* Confirm that marking all regcaches of all targets as changed"
    }
  ]
}