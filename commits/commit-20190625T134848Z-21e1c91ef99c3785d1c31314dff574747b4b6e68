{
  "sha": "21e1c91ef99c3785d1c31314dff574747b4b6e68",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjFlMWM5MWVmOTljMzc4NWQxYzMxMzE0ZGZmNTc0NzQ3YjRiNmU2OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-22T18:49:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:48Z"
    },
    "message": "Separate out data window\n\nThis removes \"data_window\" from union tui_which_element and updates\nthe uses.  It also changes how tui_data_window refers to the register\ndata, and changes it not to need the \"content\" field at all (though as\nthis is in a base class, it can't yet be removed).\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-wingeneral.c (tui_data_window::refresh_window): Update.\n\t* tui/tui-windata.c (tui_data_window::first_data_item_displayed)\n\t(tui_delete_data_content_windows, tui_display_all_data)\n\t(tui_data_window::do_scroll_vertical, tui_display_data_from):\n\tUpdate.\n\t* tui/tui-win.c (tui_data_window::set_new_height): Simplify.\n\t* tui/tui-regs.c (tui_last_regs_line_no)\n\t(tui_line_from_reg_element_no, tui_first_reg_element_no_inline)\n\t(tui_show_registers): Update.\n\t(tui_show_register_group): Return void.  Update.\n\t(tui_display_registers_from, tui_display_reg_element_at_line)\n\t(tui_display_registers_from_line, tui_check_register_values):\n\tUpdate.\n\t* tui/tui-data.h (union tui_which_element) <data_window>: Remove\n\tmember.\n\t(struct tui_data_window) <regs_content>: Now a std::vector.\n\t<regs_content_count>: Remove.\n\t(tui_add_content_elements, tui_free_data_content): Don't declare.\n\t* tui/tui-data.c (tui_data_window::clear_detail): Update.\n\t(init_content_element): Remove DATA_WIN case.  Add assert.\n\t(tui_add_content_elements): Remove.\n\t(tui_data_window): Update.\n\t(tui_free_data_content): Remove.\n\t(free_content_elements): Remove DATA_WIN case.",
    "tree": {
      "sha": "5dfd28ad97c1469d19312b4ecc9e37a8b14f63a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5dfd28ad97c1469d19312b4ecc9e37a8b14f63a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/21e1c91ef99c3785d1c31314dff574747b4b6e68",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21e1c91ef99c3785d1c31314dff574747b4b6e68",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/21e1c91ef99c3785d1c31314dff574747b4b6e68",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21e1c91ef99c3785d1c31314dff574747b4b6e68/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "115ac53b852ed91e23d97e8357f24216609fa86f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/115ac53b852ed91e23d97e8357f24216609fa86f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/115ac53b852ed91e23d97e8357f24216609fa86f"
    }
  ],
  "stats": {
    "total": 321,
    "additions": 110,
    "deletions": 211
  },
  "files": [
    {
      "sha": "d6848f0455371478713c48779aaac00589bfc067",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -1,3 +1,30 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-wingeneral.c (tui_data_window::refresh_window): Update.\n+\t* tui/tui-windata.c (tui_data_window::first_data_item_displayed)\n+\t(tui_delete_data_content_windows, tui_display_all_data)\n+\t(tui_data_window::do_scroll_vertical, tui_display_data_from):\n+\tUpdate.\n+\t* tui/tui-win.c (tui_data_window::set_new_height): Simplify.\n+\t* tui/tui-regs.c (tui_last_regs_line_no)\n+\t(tui_line_from_reg_element_no, tui_first_reg_element_no_inline)\n+\t(tui_show_registers): Update.\n+\t(tui_show_register_group): Return void.  Update.\n+\t(tui_display_registers_from, tui_display_reg_element_at_line)\n+\t(tui_display_registers_from_line, tui_check_register_values):\n+\tUpdate.\n+\t* tui/tui-data.h (union tui_which_element) <data_window>: Remove\n+\tmember.\n+\t(struct tui_data_window) <regs_content>: Now a std::vector.\n+\t<regs_content_count>: Remove.\n+\t(tui_add_content_elements, tui_free_data_content): Don't declare.\n+\t* tui/tui-data.c (tui_data_window::clear_detail): Update.\n+\t(init_content_element): Remove DATA_WIN case.  Add assert.\n+\t(tui_add_content_elements): Remove.\n+\t(tui_data_window): Update.\n+\t(tui_free_data_content): Remove.\n+\t(free_content_elements): Remove DATA_WIN case.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-data.c (tui_data_item_window): Update."
    },
    {
      "sha": "7cf7d7f22166d11f6aeeafd0747990b594b145d6",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 2,
      "deletions": 72,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -175,8 +175,7 @@ tui_cmd_window::clear_detail ()\n void\n tui_data_window::clear_detail ()\n {\n-  regs_content = NULL;\n-  regs_content_count = 0;\n+  regs_content.clear ();\n   regs_column_count = 1;\n   display_regs = false;\n }\n@@ -360,6 +359,7 @@ init_content_element (struct tui_win_element *element,\n   gdb_assert (type != LOCATOR_WIN);\n   gdb_assert (type != CMD_WIN);\n   gdb_assert (type != DATA_ITEM_WIN);\n+  gdb_assert (type != DATA_WIN);\n \n   switch (type)\n     {\n@@ -371,9 +371,6 @@ init_content_element (struct tui_win_element *element,\n       element->which_element.source.is_exec_point = FALSE;\n       element->which_element.source.has_break = FALSE;\n       break;\n-    case DATA_WIN:\n-      element->which_element.data_window = new tui_data_item_window ();\n-      break;\n     default:\n       break;\n     }\n@@ -426,39 +423,6 @@ tui_alloc_content (int num_elements, enum tui_win_type type)\n }\n \n \n-/* Adds the input number of elements to the windows's content.  If no\n-   content has been allocated yet, alloc_content() is called to do\n-   this.  The index of the first element added is returned, unless\n-   there is a memory allocation error, in which case, (-1) is\n-   returned.  */\n-int\n-tui_add_content_elements (struct tui_gen_win_info *win_info, \n-\t\t\t  int num_elements)\n-{\n-  struct tui_win_element *element_ptr;\n-  int i, index_start;\n-\n-  if (win_info->content == NULL)\n-    {\n-      win_info->content = tui_alloc_content (num_elements, win_info->type);\n-      index_start = 0;\n-    }\n-  else\n-    index_start = win_info->content_size;\n-  if (win_info->content != NULL)\n-    {\n-      for (i = index_start; (i < num_elements + index_start); i++)\n-\t{\n-\t  element_ptr = XNEW (struct tui_win_element);\n-\t  win_info->content[i] = element_ptr;\n-\t  init_content_element (element_ptr, win_info->type);\n-\t  win_info->content_size++;\n-\t}\n-    }\n-\n-  return index_start;\n-}\n-\n tui_gen_win_info::~tui_gen_win_info ()\n {\n   if (handle != NULL)\n@@ -480,9 +444,6 @@ tui_data_window::~tui_data_window ()\n {\n   if (content != NULL)\n     {\n-      tui_free_data_content (regs_content, regs_content_count);\n-      regs_content = NULL;\n-      regs_content_count = 0;\n       regs_column_count = 1;\n       display_regs = false;\n       content = NULL;\n@@ -515,33 +476,6 @@ tui_free_win_content (struct tui_gen_win_info *win_info)\n }\n \n \n-void\n-tui_free_data_content (tui_win_content content, \n-\t\t       int content_size)\n-{\n-  int i;\n-\n-  /* Remember that data window content elements are of type struct\n-     tui_gen_win_info *, each of which whose single element is a data\n-     element.  */\n-  for (i = 0; i < content_size; i++)\n-    {\n-      struct tui_gen_win_info *generic_win\n-\t= content[i]->which_element.data_window;\n-\n-      if (generic_win != NULL)\n-\t{\n-\t  tui_delete_win (generic_win->handle);\n-\t  generic_win->handle = NULL;\n-\t  tui_free_win_content (generic_win);\n-\t}\n-    }\n-  free_content (content,\n-\t\tcontent_size,\n-\t\tDATA_WIN);\n-}\n-\n-\n /**********************************\n ** LOCAL STATIC FUNCTIONS        **\n **********************************/\n@@ -596,10 +530,6 @@ free_content_elements (tui_win_content content,\n \t\t    case SRC_WIN:\n \t\t      xfree (element->which_element.source.line);\n \t\t      break;\n-\t\t    case DATA_WIN:\n-\t\t      delete element->which_element.data_window;\n-\t\t      xfree (element);\n-\t\t      break;\n \t\t    default:\n \t\t      break;\n \t\t    }"
    },
    {
      "sha": "2e13f306e769cec80503819e1b63fcbc358dcf6d",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -204,7 +204,6 @@ typedef char tui_exec_info_content[TUI_EXECINFO_SIZE];\n union tui_which_element\n {\n   struct tui_source_element source;\t/* The source elements.  */\n-  struct tui_data_item_window *data_window;\t/* Data display elements.  */\n };\n \n struct tui_win_element\n@@ -477,9 +476,8 @@ struct tui_data_window : public tui_win_info\n     return DATA_NAME;\n   }\n \n-  /* Start of regs display content.  */\n-  tui_win_content regs_content = NULL;\n-  int regs_content_count = 0;\n+  /* Windows that are used to display registers.  */\n+  std::vector<std::unique_ptr<tui_data_item_window>> regs_content;\n   int regs_column_count = 0;\n   /* Should regs be displayed at all?  */\n   bool display_regs = false;\n@@ -554,10 +552,7 @@ extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n /* Data Manipulation Functions.  */\n extern void tui_initialize_static_data (void);\n extern tui_win_content tui_alloc_content (int, enum tui_win_type);\n-extern int tui_add_content_elements (struct tui_gen_win_info *, \n-\t\t\t\t     int);\n extern void tui_free_win_content (struct tui_gen_win_info *);\n-extern void tui_free_data_content (tui_win_content, int);\n extern void tui_free_all_source_wins_content (void);\n extern struct tui_win_info *tui_partial_win_by_name (const char *);\n extern enum tui_layout_type tui_current_layout (void);"
    },
    {
      "sha": "32e82b23482e0d72d8213de8f095a5b7def97f05",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 62,
      "deletions": 104,
      "changes": 166,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -49,9 +49,9 @@\n ******************************************/\n static void tui_display_register (struct tui_data_item_window *data);\n \n-static enum tui_status tui_show_register_group (struct reggroup *group,\n-\t\t\t\t\t\tstruct frame_info *frame,\n-\t\t\t\t\t\tint refresh_values_only);\n+static void tui_show_register_group (struct reggroup *group,\n+\t\t\t\t     struct frame_info *frame,\n+\t\t\t\t     int refresh_values_only);\n \n static enum tui_status tui_get_register (struct frame_info *frame,\n \t\t\t\t\t struct tui_data_item_window *data,\n@@ -70,11 +70,11 @@ tui_last_regs_line_no (void)\n {\n   int num_lines = (-1);\n \n-  if (TUI_DATA_WIN->regs_content_count > 0)\n+  if (!TUI_DATA_WIN->regs_content.empty ())\n     {\n-      num_lines = (TUI_DATA_WIN->regs_content_count\n+      num_lines = (TUI_DATA_WIN->regs_content.size ()\n \t\t   / TUI_DATA_WIN->regs_column_count);\n-      if (TUI_DATA_WIN->regs_content_count % TUI_DATA_WIN->regs_column_count)\n+      if (TUI_DATA_WIN->regs_content.size () % TUI_DATA_WIN->regs_column_count)\n \tnum_lines++;\n     }\n   return num_lines;\n@@ -87,7 +87,7 @@ tui_last_regs_line_no (void)\n int\n tui_line_from_reg_element_no (int element_no)\n {\n-  if (element_no < TUI_DATA_WIN->regs_content_count)\n+  if (element_no < TUI_DATA_WIN->regs_content.size ())\n     {\n       int i, line = (-1);\n \n@@ -113,7 +113,7 @@ int\n tui_first_reg_element_no_inline (int line_no)\n {\n   if ((line_no * TUI_DATA_WIN->regs_column_count)\n-      <= TUI_DATA_WIN->regs_content_count)\n+      <= TUI_DATA_WIN->regs_content.size ())\n     return (((line_no + 1) * TUI_DATA_WIN->regs_column_count) \n \t    - TUI_DATA_WIN->regs_column_count);\n   else\n@@ -145,8 +145,9 @@ tui_show_registers (struct reggroup *group)\n \n   if (target_has_registers && target_has_stack && target_has_memory)\n     {\n-      ret = tui_show_register_group (group, get_selected_frame (NULL),\n-                                     group == TUI_DATA_WIN->current_group);\n+      tui_show_register_group (group, get_selected_frame (NULL),\n+\t\t\t       group == TUI_DATA_WIN->current_group);\n+      ret = TUI_SUCCESS;\n     }\n   if (ret == TUI_FAILURE)\n     {\n@@ -155,16 +156,11 @@ tui_show_registers (struct reggroup *group)\n     }\n   else\n     {\n-      int i;\n-\n       /* Clear all notation of changed values.  */\n-      for (i = 0; i < TUI_DATA_WIN->regs_content_count; i++)\n+      for (auto &&data_item_win : TUI_DATA_WIN->regs_content)\n \t{\n-\t  struct tui_data_item_window *data_item_win;\n-\n-\t  data_item_win = TUI_DATA_WIN->regs_content[i]\n-            ->which_element.data_window;\n-\t  data_item_win->highlight = false;\n+\t  if (data_item_win != nullptr)\n+\t    data_item_win->highlight = false;\n \t}\n       TUI_DATA_WIN->current_group = group;\n       tui_display_all_data ();\n@@ -176,15 +172,13 @@ tui_show_registers (struct reggroup *group)\n    using the given frame.  Values are refreshed only when\n    refresh_values_only is TRUE.  */\n \n-static enum tui_status\n+static void\n tui_show_register_group (struct reggroup *group,\n                          struct frame_info *frame, \n \t\t\t int refresh_values_only)\n {\n   struct gdbarch *gdbarch = get_frame_arch (frame);\n-  enum tui_status ret = TUI_FAILURE;\n   int nr_regs;\n-  int allocated_here = FALSE;\n   int regnum, pos;\n   char title[80];\n \n@@ -213,68 +207,47 @@ tui_show_register_group (struct reggroup *group,\n       nr_regs++;\n     }\n \n-  if (TUI_DATA_WIN->regs_content_count > 0 && !refresh_values_only)\n-    {\n-      tui_free_data_content (TUI_DATA_WIN->regs_content,\n-                             TUI_DATA_WIN->regs_content_count);\n-      TUI_DATA_WIN->regs_content_count = 0;\n-    }\n+  if (!refresh_values_only)\n+    TUI_DATA_WIN->regs_content.clear ();\n \n-  if (TUI_DATA_WIN->regs_content_count <= 0)\n+  if (nr_regs < TUI_DATA_WIN->regs_content.size ())\n+    TUI_DATA_WIN->regs_content.resize (nr_regs);\n+  else\n     {\n-      TUI_DATA_WIN->regs_content = tui_alloc_content (nr_regs, DATA_WIN);\n-      allocated_here = TRUE;\n-      refresh_values_only = FALSE;\n+      for (int i = TUI_DATA_WIN->regs_content.size (); i < nr_regs; ++i)\n+\tTUI_DATA_WIN->regs_content.emplace_back (new tui_data_item_window ());\n     }\n \n-  if (TUI_DATA_WIN->regs_content != NULL)\n+  /* Now set the register names and values.  */\n+  pos = 0;\n+  for (regnum = 0; regnum < gdbarch_num_cooked_regs (gdbarch); regnum++)\n     {\n-      if (!refresh_values_only || allocated_here)\n-\t{\n-\t  TUI_DATA_WIN->content = NULL;\n-\t  TUI_DATA_WIN->content_size = 0;\n-\t  tui_add_content_elements (TUI_DATA_WIN, nr_regs);\n-\t  TUI_DATA_WIN->regs_content = TUI_DATA_WIN->content;\n-\t  TUI_DATA_WIN->regs_content_count = nr_regs;\n-\t}\n+      struct tui_data_item_window *data_item_win;\n+      const char *name;\n \n-      /* Now set the register names and values.  */\n-      pos = 0;\n-      for (regnum = 0; regnum < gdbarch_num_cooked_regs (gdbarch); regnum++)\n-        {\n-\t  struct tui_data_item_window *data_item_win;\n-          const char *name;\n-\n-          /* Must be in the group.  */\n-          if (!gdbarch_register_reggroup_p (gdbarch, regnum, group))\n-            continue;\n-\n-\t  /* If the register name is empty, it is undefined for this\n-\t     processor, so don't display anything.  */\n-\t  name = gdbarch_register_name (gdbarch, regnum);\n-\t  if (name == 0 || *name == '\\0')\n-\t    continue;\n-\n-\t  data_item_win =\n-            TUI_DATA_WIN->regs_content[pos]->which_element.data_window;\n-          if (data_item_win)\n-            {\n-              if (!refresh_values_only)\n-                {\n-                  data_item_win->item_no = regnum;\n-                  data_item_win->name = name;\n-                  data_item_win->highlight = false;\n-                }\n-              tui_get_register (frame, data_item_win, regnum, 0);\n-            }\n-          pos++;\n-\t}\n+      /* Must be in the group.  */\n+      if (!gdbarch_register_reggroup_p (gdbarch, regnum, group))\n+\tcontinue;\n \n-      TUI_DATA_WIN->content_size = TUI_DATA_WIN->regs_content_count;\n-      ret = TUI_SUCCESS;\n-    }\n+      /* If the register name is empty, it is undefined for this\n+\t processor, so don't display anything.  */\n+      name = gdbarch_register_name (gdbarch, regnum);\n+      if (name == 0 || *name == '\\0')\n+\tcontinue;\n \n-  return ret;\n+      data_item_win = TUI_DATA_WIN->regs_content[pos].get ();\n+      if (data_item_win)\n+\t{\n+\t  if (!refresh_values_only)\n+\t    {\n+\t      data_item_win->item_no = regnum;\n+\t      data_item_win->name = name;\n+\t      data_item_win->highlight = false;\n+\t    }\n+\t  tui_get_register (frame, data_item_win, regnum, 0);\n+\t}\n+      pos++;\n+    }\n }\n \n /* Function to display the registers in the content from\n@@ -284,21 +257,16 @@ tui_show_register_group (struct reggroup *group,\n void\n tui_display_registers_from (int start_element_no)\n {\n-  if (TUI_DATA_WIN->regs_content != NULL\n-      && TUI_DATA_WIN->regs_content_count > 0)\n+  if (!TUI_DATA_WIN->regs_content.empty ())\n     {\n-      int i = start_element_no;\n       int j, item_win_width, cur_y;\n \n       int max_len = 0;\n-      for (i = 0; i < TUI_DATA_WIN->regs_content_count; i++)\n+      for (auto &&data_item_win : TUI_DATA_WIN->regs_content)\n         {\n-          struct tui_data_item_window *data_item_win;\n           char *p;\n           int len;\n \n-          data_item_win\n-\t    = TUI_DATA_WIN->regs_content[i]->which_element.data_window;\n           len = 0;\n           p = data_item_win->content;\n           if (p != 0)\n@@ -314,7 +282,7 @@ tui_display_registers_from (int start_element_no)\n             max_len = len;\n         }\n       item_win_width = max_len + 1;\n-      i = start_element_no;\n+      int i = start_element_no;\n \n       TUI_DATA_WIN->regs_column_count =\n         (TUI_DATA_WIN->width - 2) / item_win_width;\n@@ -326,19 +294,18 @@ tui_display_registers_from (int start_element_no)\n       /* Now create each data \"sub\" window, and write the display into\n \t it.  */\n       cur_y = 1;\n-      while (i < TUI_DATA_WIN->regs_content_count \n+      while (i < TUI_DATA_WIN->regs_content.size ()\n \t     && cur_y <= TUI_DATA_WIN->viewport_height)\n \t{\n \t  for (j = 0;\n \t       j < TUI_DATA_WIN->regs_column_count\n-\t\t && i < TUI_DATA_WIN->regs_content_count;\n+\t\t && i < TUI_DATA_WIN->regs_content.size ();\n \t       j++)\n \t    {\n \t      struct tui_data_item_window *data_item_win;\n \n \t      /* Create the window if necessary.  */\n-\t      data_item_win = TUI_DATA_WIN->regs_content[i]\n-                ->which_element.data_window;\n+\t      data_item_win = TUI_DATA_WIN->regs_content[i].get ();\n               if (data_item_win->handle != NULL\n                   && (data_item_win->height != 1\n                       || data_item_win->width != item_win_width\n@@ -379,8 +346,7 @@ static void\n tui_display_reg_element_at_line (int start_element_no,\n \t\t\t\t int start_line_no)\n {\n-  if (TUI_DATA_WIN->regs_content != NULL\n-      && TUI_DATA_WIN->regs_content_count > 0)\n+  if (!TUI_DATA_WIN->regs_content.empty ())\n     {\n       int element_no = start_element_no;\n \n@@ -414,7 +380,7 @@ int\n tui_display_registers_from_line (int line_no, \n \t\t\t\t int force_display)\n {\n-  if (TUI_DATA_WIN->regs_content_count > 0)\n+  if (!TUI_DATA_WIN->regs_content.empty ())\n     {\n       int line, element_no;\n \n@@ -427,7 +393,7 @@ tui_display_registers_from_line (int line_no,\n \t  if (line_no >= tui_last_regs_line_no ())\n \t    {\n \t      if ((line = tui_line_from_reg_element_no (\n-\t\t TUI_DATA_WIN->regs_content_count - 1)) < 0)\n+\t\t TUI_DATA_WIN->regs_content.size () - 1)) < 0)\n \t\tline = 0;\n \t    }\n \t  else\n@@ -437,8 +403,7 @@ tui_display_registers_from_line (int line_no,\n \tline = line_no;\n \n       element_no = tui_first_reg_element_no_inline (line);\n-      if (element_no\n-\t  < TUI_DATA_WIN->regs_content_count)\n+      if (element_no < TUI_DATA_WIN->regs_content.size ())\n \ttui_display_reg_element_at_line (element_no, line);\n       else\n \tline = (-1);\n@@ -459,30 +424,23 @@ tui_check_register_values (struct frame_info *frame)\n   if (TUI_DATA_WIN != NULL\n       && TUI_DATA_WIN->is_visible)\n     {\n-      if (TUI_DATA_WIN->regs_content_count <= 0 \n+      if (TUI_DATA_WIN->regs_content.empty ()\n \t  && TUI_DATA_WIN->display_regs)\n \ttui_show_registers (TUI_DATA_WIN->current_group);\n       else\n \t{\n-\t  int i;\n-\n-\t  for (i = 0; (i < TUI_DATA_WIN->regs_content_count); i++)\n+\t  for (auto &&data_item_win_ptr : TUI_DATA_WIN->regs_content)\n \t    {\n-\t      struct tui_data_item_window *data_item_win_ptr;\n \t      int was_hilighted;\n \n-\t      data_item_win_ptr = TUI_DATA_WIN->regs_content[i]->\n-                which_element.data_window;\n \t      was_hilighted = data_item_win_ptr->highlight;\n \n-              tui_get_register (frame, data_item_win_ptr,\n+              tui_get_register (frame, data_item_win_ptr.get (),\n                                 data_item_win_ptr->item_no,\n \t\t\t\t&data_item_win_ptr->highlight);\n \n \t      if (data_item_win_ptr->highlight || was_hilighted)\n-\t\t{\n-                  tui_display_register (data_item_win_ptr);\n-\t\t}\n+\t\ttui_display_register (data_item_win_ptr.get ());\n \t    }\n \t}\n     }"
    },
    {
      "sha": "40b962739ce9b99fe4dc48372ebf4b0bfc2356e2",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -1267,12 +1267,10 @@ void\n tui_data_window::set_new_height (int height)\n {\n   /* Delete all data item windows.  */\n-  for (int i = 0; i < content_size; i++)\n+  for (auto &&win : regs_content)\n     {\n-      struct tui_gen_win_info *gen_win_info\n-\t= content[i]->which_element.data_window;\n-      tui_delete_win (gen_win_info->handle);\n-      gen_win_info->handle = NULL;\n+      tui_delete_win (win->handle);\n+      win->handle = NULL;\n     }\n }\n "
    },
    {
      "sha": "7ff50a0c90567f86aad38c70bd0f31cc23c6b697",
      "filename": "gdb/tui/tui-windata.c",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-windata.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-windata.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-windata.c?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -44,11 +44,11 @@\n int\n tui_data_window::first_data_item_displayed ()\n {\n-  for (int i = 0; i < content_size; i++)\n+  for (int i = 0; i < regs_content.size (); i++)\n     {\n       struct tui_gen_win_info *data_item_win;\n \n-      data_item_win = content[i]->which_element.data_window;\n+      data_item_win = regs_content[i].get ();\n       if (data_item_win->handle != NULL && data_item_win->is_visible)\n \treturn i;\n     }\n@@ -62,16 +62,11 @@ tui_data_window::first_data_item_displayed ()\n void\n tui_delete_data_content_windows (void)\n {\n-  int i;\n-  struct tui_gen_win_info *data_item_win_ptr;\n-\n-  for (i = 0; (i < TUI_DATA_WIN->content_size); i++)\n+  for (auto &&win : TUI_DATA_WIN->regs_content)\n     {\n-      data_item_win_ptr\n-\t= TUI_DATA_WIN->content[i]->which_element.data_window;\n-      tui_delete_win (data_item_win_ptr->handle);\n-      data_item_win_ptr->handle = NULL;\n-      data_item_win_ptr->is_visible = false;\n+      tui_delete_win (win->handle);\n+      win->handle = NULL;\n+      win->is_visible = false;\n     }\n }\n \n@@ -104,7 +99,7 @@ tui_erase_data_content (const char *prompt)\n void\n tui_display_all_data (void)\n {\n-  if (TUI_DATA_WIN->content_size <= 0)\n+  if (TUI_DATA_WIN->regs_content.empty ())\n     tui_erase_data_content (NO_DATA_STRING);\n   else\n     {\n@@ -138,7 +133,7 @@ tui_display_data_from (int element_no, int reuse_windows)\n {\n   int first_line = (-1);\n \n-  if (element_no < TUI_DATA_WIN->regs_content_count)\n+  if (element_no < TUI_DATA_WIN->regs_content.size ())\n     first_line = tui_line_from_reg_element_no (element_no);\n   else\n     { /* Calculate the first_line from the element number.  */\n@@ -159,7 +154,7 @@ void\n tui_data_window::refresh_all ()\n {\n   tui_erase_data_content (NULL);\n-  if (content_size > 0)\n+  if (!regs_content.empty ())\n     {\n       int first_element = first_data_item_displayed ();\n \n@@ -177,7 +172,7 @@ tui_data_window::do_scroll_vertical (int num_to_scroll)\n   int first_line = (-1);\n \n   first_element_no = first_data_item_displayed ();\n-  if (first_element_no < regs_content_count)\n+  if (first_element_no < regs_content.size ())\n     first_line = tui_line_from_reg_element_no (first_element_no);\n   else\n     { /* Calculate the first line from the element number which is in"
    },
    {
      "sha": "8f64e73e2842f28ec8c67367c63b9f0d01b8b546",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21e1c91ef99c3785d1c31314dff574747b4b6e68/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=21e1c91ef99c3785d1c31314dff574747b4b6e68",
      "patch": "@@ -45,16 +45,12 @@ tui_gen_win_info::refresh_window ()\n void\n tui_data_window::refresh_window ()\n {\n-  if (content_size > 0)\n+  if (!regs_content.empty ())\n     {\n-      for (int i = 0; i < content_size; i++)\n+      for (auto &&win : regs_content)\n \t{\n-\t  struct tui_gen_win_info *data_item_win_ptr;\n-\n-\t  data_item_win_ptr = content[i]->which_element.data_window;\n-\t  if (data_item_win_ptr != NULL\n-\t      && data_item_win_ptr->handle != NULL)\n-\t    wrefresh (data_item_win_ptr->handle);\n+\t  if (win != NULL && win->handle != NULL)\n+\t    wrefresh (win->handle);\n \t}\n     }\n   else"
    }
  ]
}