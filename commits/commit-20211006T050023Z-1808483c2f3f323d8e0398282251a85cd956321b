{
  "sha": "1808483c2f3f323d8e0398282251a85cd956321b",
  "node_id": "C_kwDOANOeidoAKDE4MDg0ODNjMmYzZjMyM2Q4ZTAzOTgyODIyNTFhODVjZDk1NjMyMWI",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-06T03:08:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-06T05:00:23Z"
    },
    "message": "PR28402, fail to allocate line number array\n\nThis fixes a situation where the COFF code allocated memory for\ninternal representaion arrays before reading the external file data.\nThat meant the allocation didn't have any sanity check against file\nsize.\n\n\tPR 28402\n\t* coffcode.h (buy_and_read): Malloc rather than alloc memory.\n\t(coff_slurp_line_table): Read native line number info before\n\tallocating memory for internal line number array.  Adjust error\n\tpaths to suit.  Remove now unnecessary line number count check.\n\t(coff_slurp_reloc_table): Adjust to suit buy_and_read change.",
    "tree": {
      "sha": "8bcb354ac28060267ad47a80ff98606ed9c65181",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8bcb354ac28060267ad47a80ff98606ed9c65181"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1808483c2f3f323d8e0398282251a85cd956321b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1808483c2f3f323d8e0398282251a85cd956321b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1808483c2f3f323d8e0398282251a85cd956321b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1808483c2f3f323d8e0398282251a85cd956321b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0a6041ce9383338fa62acb207683780faaa8b42c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a6041ce9383338fa62acb207683780faaa8b42c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0a6041ce9383338fa62acb207683780faaa8b42c"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 19,
    "deletions": 16
  },
  "files": [
    {
      "sha": "c28d753011ab6c1d8e6aaf5aea18ab6bdf47c8aa",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 19,
      "deletions": 16,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1808483c2f3f323d8e0398282251a85cd956321b/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1808483c2f3f323d8e0398282251a85cd956321b/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=1808483c2f3f323d8e0398282251a85cd956321b",
      "patch": "@@ -4294,7 +4294,7 @@ buy_and_read (bfd *abfd, file_ptr where,\n     }\n   if (bfd_seek (abfd, where, SEEK_SET) != 0)\n     return NULL;\n-  return _bfd_alloc_and_read (abfd, amt, amt);\n+  return _bfd_malloc_and_read (abfd, amt, amt);\n }\n \n /*\n@@ -4358,31 +4358,26 @@ coff_slurp_line_table (bfd *abfd, asection *asect)\n \n   BFD_ASSERT (asect->lineno == NULL);\n \n-  if (asect->lineno_count > asect->size)\n+  native_lineno = (LINENO *) buy_and_read (abfd, asect->line_filepos,\n+\t\t\t\t\t   asect->lineno_count,\n+\t\t\t\t\t   bfd_coff_linesz (abfd));\n+  if (native_lineno == NULL)\n     {\n       _bfd_error_handler\n-\t(_(\"%pB: warning: line number count (%#lx) exceeds section size (%#lx)\"),\n-\t abfd, (unsigned long) asect->lineno_count, (unsigned long) asect->size);\n+\t(_(\"%pB: warning: line number table read failed\"), abfd);\n       return false;\n     }\n \n   if (_bfd_mul_overflow (asect->lineno_count + 1, sizeof (alent), &amt))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n+      free (native_lineno);\n       return false;\n     }\n   lineno_cache = (alent *) bfd_alloc (abfd, amt);\n   if (lineno_cache == NULL)\n-    return false;\n-\n-  native_lineno = (LINENO *) buy_and_read (abfd, asect->line_filepos,\n-\t\t\t\t\t   asect->lineno_count,\n-\t\t\t\t\t   bfd_coff_linesz (abfd));\n-  if (native_lineno == NULL)\n     {\n-      _bfd_error_handler\n-\t(_(\"%pB: warning: line number table read failed\"), abfd);\n-      bfd_release (abfd, lineno_cache);\n+      free (native_lineno);\n       return false;\n     }\n \n@@ -4475,7 +4470,7 @@ coff_slurp_line_table (bfd *abfd, asection *asect)\n \n   asect->lineno_count = cache_ptr - lineno_cache;\n   memset (cache_ptr, 0, sizeof (*cache_ptr));\n-  bfd_release (abfd, native_lineno);\n+  free (native_lineno);\n \n   /* On some systems (eg AIX5.3) the lineno table may not be sorted.  */\n   if (!ordered)\n@@ -5093,14 +5088,20 @@ coff_slurp_reloc_table (bfd * abfd, sec_ptr asect, asymbol ** symbols)\n   native_relocs = (RELOC *) buy_and_read (abfd, asect->rel_filepos,\n \t\t\t\t\t  asect->reloc_count,\n \t\t\t\t\t  bfd_coff_relsz (abfd));\n+  if (native_relocs == NULL)\n+    return false;\n+\n   if (_bfd_mul_overflow (asect->reloc_count, sizeof (arelent), &amt))\n     {\n       bfd_set_error (bfd_error_file_too_big);\n       return false;\n     }\n   reloc_cache = (arelent *) bfd_alloc (abfd, amt);\n-  if (reloc_cache == NULL || native_relocs == NULL)\n-    return false;\n+  if (reloc_cache == NULL)\n+    {\n+      free (native_relocs);\n+      return false;\n+    }\n \n   for (idx = 0; idx < asect->reloc_count; idx++)\n     {\n@@ -5170,10 +5171,12 @@ coff_slurp_reloc_table (bfd * abfd, sec_ptr asect, asymbol ** symbols)\n \t    (_(\"%pB: illegal relocation type %d at address %#\" PRIx64),\n \t     abfd, dst.r_type, (uint64_t) dst.r_vaddr);\n \t  bfd_set_error (bfd_error_bad_value);\n+\t  free (native_relocs);\n \t  return false;\n \t}\n     }\n \n+  free (native_relocs);\n   asect->relocation = reloc_cache;\n   return true;\n }"
    }
  ]
}