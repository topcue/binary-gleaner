{
  "sha": "b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
  "node_id": "C_kwDOANOeidoAKGIwZjZjOGQyNDcyNmQ5YmY0YTU1NzFhOWM4ODFlYWE0OWUzMTI5YTM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-28T14:58:43Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-28T02:30:11Z"
    },
    "message": "gdb: make lwp_info non-POD\n\nInitialize all fields in the class declaration directly.  This opens the\ndoor to using intrusive_list, done in the following patch.\n\nChange-Id: I38bb27410cd9ebf511d310bb86fe2ea1872c3b05",
    "tree": {
      "sha": "afd3572ff62995c09b7d192c9cc87f29d38fd2b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/afd3572ff62995c09b7d192c9cc87f29d38fd2b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a58f2d262b3348770a140927ba4bcc20195789d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a58f2d262b3348770a140927ba4bcc20195789d7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a58f2d262b3348770a140927ba4bcc20195789d7"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 28,
    "deletions": 37
  },
  "files": [
    {
      "sha": "f063db8425b81f90fa1364daef4ed1f71843204b",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 21,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
      "patch": "@@ -845,19 +845,10 @@ purge_lwp_list (int pid)\n static struct lwp_info *\n add_initial_lwp (ptid_t ptid)\n {\n-  struct lwp_info *lp;\n-\n   gdb_assert (ptid.lwp_p ());\n \n-  lp = XNEW (struct lwp_info);\n-\n-  memset (lp, 0, sizeof (struct lwp_info));\n-\n-  lp->last_resume_kind = resume_continue;\n-  lp->waitstatus.kind = TARGET_WAITKIND_IGNORE;\n+  lwp_info *lp = new lwp_info (ptid);\n \n-  lp->ptid = ptid;\n-  lp->core = -1;\n \n   /* Add to sorted-by-reverse-creation-order list.  */\n   lwp_list_add (lp);\n@@ -893,16 +884,13 @@ add_lwp (ptid_t ptid)\n static void\n delete_lwp (ptid_t ptid)\n {\n-  struct lwp_info *lp;\n-  void **slot;\n-  struct lwp_info dummy;\n+  lwp_info dummy (ptid);\n \n-  dummy.ptid = ptid;\n-  slot = htab_find_slot (lwp_lwpid_htab, &dummy, NO_INSERT);\n+  void **slot = htab_find_slot (lwp_lwpid_htab, &dummy, NO_INSERT);\n   if (slot == NULL)\n     return;\n \n-  lp = *(struct lwp_info **) slot;\n+  lwp_info *lp = *(struct lwp_info **) slot;\n   gdb_assert (lp != NULL);\n \n   htab_clear_slot (lwp_lwpid_htab, slot);\n@@ -920,18 +908,15 @@ delete_lwp (ptid_t ptid)\n static struct lwp_info *\n find_lwp_pid (ptid_t ptid)\n {\n-  struct lwp_info *lp;\n   int lwp;\n-  struct lwp_info dummy;\n \n   if (ptid.lwp_p ())\n     lwp = ptid.lwp ();\n   else\n     lwp = ptid.pid ();\n \n-  dummy.ptid = ptid_t (0, lwp);\n-  lp = (struct lwp_info *) htab_find (lwp_lwpid_htab, &dummy);\n-  return lp;\n+  lwp_info dummy (ptid_t (0, lwp));\n+  return (struct lwp_info *) htab_find (lwp_lwpid_htab, &dummy);\n }\n \n /* See nat/linux-nat.h.  */"
    },
    {
      "sha": "050b8046da48db0907ed4342cfb3b4a3ff2b68e8",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 22,
      "deletions": 16,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=b0f6c8d24726d9bf4a5571a9c881eaa49e3129a3",
      "patch": "@@ -202,59 +202,65 @@ struct arch_lwp_info;\n \n struct lwp_info\n {\n+  lwp_info (ptid_t ptid)\n+    : ptid (ptid)\n+  {\n+    waitstatus.kind = TARGET_WAITKIND_IGNORE;\n+  }\n+\n   /* The process id of the LWP.  This is a combination of the LWP id\n      and overall process id.  */\n   ptid_t ptid;\n \n   /* If this flag is set, we need to set the event request flags the\n      next time we see this LWP stop.  */\n-  int must_set_ptrace_flags;\n+  int must_set_ptrace_flags = 0;\n \n   /* Non-zero if we sent this LWP a SIGSTOP (but the LWP didn't report\n      it back yet).  */\n-  int signalled;\n+  int signalled = 0;\n \n   /* Non-zero if this LWP is stopped.  */\n-  int stopped;\n+  int stopped = 0;\n \n   /* Non-zero if this LWP will be/has been resumed.  Note that an LWP\n      can be marked both as stopped and resumed at the same time.  This\n      happens if we try to resume an LWP that has a wait status\n      pending.  We shouldn't let the LWP run until that wait status has\n      been processed, but we should not report that wait status if GDB\n      didn't try to let the LWP run.  */\n-  int resumed;\n+  int resumed = 0;\n \n   /* The last resume GDB requested on this thread.  */\n-  enum resume_kind last_resume_kind;\n+  resume_kind last_resume_kind = resume_continue;\n \n   /* If non-zero, a pending wait status.  */\n-  int status;\n+  int status = 0;\n \n   /* When 'stopped' is set, this is where the lwp last stopped, with\n      decr_pc_after_break already accounted for.  If the LWP is\n      running and stepping, this is the address at which the lwp was\n      resumed (that is, it's the previous stop PC).  If the LWP is\n      running and not stepping, this is 0.  */\n-  CORE_ADDR stop_pc;\n+  CORE_ADDR stop_pc = 0;\n \n   /* Non-zero if we were stepping this LWP.  */\n-  int step;\n+  int step = 0;\n \n   /* The reason the LWP last stopped, if we need to track it\n      (breakpoint, watchpoint, etc.).  */\n-  enum target_stop_reason stop_reason;\n+  target_stop_reason stop_reason = TARGET_STOPPED_BY_NO_REASON;\n \n   /* On architectures where it is possible to know the data address of\n      a triggered watchpoint, STOPPED_DATA_ADDRESS_P is non-zero, and\n      STOPPED_DATA_ADDRESS contains such data address.  Otherwise,\n      STOPPED_DATA_ADDRESS_P is false, and STOPPED_DATA_ADDRESS is\n      undefined.  Only valid if STOPPED_BY_WATCHPOINT is true.  */\n-  int stopped_data_address_p;\n-  CORE_ADDR stopped_data_address;\n+  int stopped_data_address_p = 0;\n+  CORE_ADDR stopped_data_address = 0;\n \n   /* Non-zero if we expect a duplicated SIGINT.  */\n-  int ignore_sigint;\n+  int ignore_sigint = 0;\n \n   /* If WAITSTATUS->KIND != TARGET_WAITKIND_SPURIOUS, the waitstatus\n      for this LWP's last event.  This may correspond to STATUS above,\n@@ -269,15 +275,15 @@ struct lwp_info\n   enum target_waitkind syscall_state;\n \n   /* The processor core this LWP was last seen on.  */\n-  int core;\n+  int core = -1;\n \n   /* Arch-specific additions.  */\n-  struct arch_lwp_info *arch_private;\n+  struct arch_lwp_info *arch_private = nullptr;\n \n   /* Previous and next pointers in doubly-linked list of known LWPs,\n      sorted by reverse creation order.  */\n-  struct lwp_info *prev;\n-  struct lwp_info *next;\n+  struct lwp_info *prev = nullptr;\n+  struct lwp_info *next = nullptr;\n };\n \n /* The global list of LWPs, for ALL_LWPS.  Unlike the threads list,"
    }
  ]
}