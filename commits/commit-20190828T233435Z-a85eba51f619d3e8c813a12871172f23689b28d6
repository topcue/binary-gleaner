{
  "sha": "a85eba51f619d3e8c813a12871172f23689b28d6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTg1ZWJhNTFmNjE5ZDNlOGM4MTNhMTI4NzExNzJmMjM2ODliMjhkNg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-28T23:34:08Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-28T23:34:35Z"
    },
    "message": "Tidy check_uvalue\n\nI don't see a need to calculate \"ptr = start + uvalue\" then compare\n\"ptr\" with \"start\" and \"end\".  Given \"start <= end\" on entry, the\n\"uvalue\" comparison with \"max_uvalue\" ought to be sufficient to ensure\n\"start + uvalue\" is bounded by \"start\" and \"end\" regardless of the\nsize of pointers and the unsigned dwarf_vma integer type.\n\n\t* dwarf.c (check_uvalue): Remove unnecessary pointer checks.",
    "tree": {
      "sha": "2e1ecfbaf00869124544c05344e2d07d201a4618",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e1ecfbaf00869124544c05344e2d07d201a4618"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a85eba51f619d3e8c813a12871172f23689b28d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a85eba51f619d3e8c813a12871172f23689b28d6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a85eba51f619d3e8c813a12871172f23689b28d6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a85eba51f619d3e8c813a12871172f23689b28d6/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/83cf0d04dcdc9a4e7f105a517390e4c1af444340"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 5,
    "deletions": 8
  },
  "files": [
    {
      "sha": "98e660d167d3ff8e50b59e022f88b6a34761feeb",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a85eba51f619d3e8c813a12871172f23689b28d6/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a85eba51f619d3e8c813a12871172f23689b28d6/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=a85eba51f619d3e8c813a12871172f23689b28d6",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (check_uvalue): Remove unnecessary pointer checks.\n+\n 2019-08-28  Niklas G\u00fcrtler  <profclonk@gmail.com>\n \n \tPR 24942"
    },
    {
      "sha": "df924e4050a082b4e80d6c8a9b3870a89d767516",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a85eba51f619d3e8c813a12871172f23689b28d6/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a85eba51f619d3e8c813a12871172f23689b28d6/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=a85eba51f619d3e8c813a12871172f23689b28d6",
      "patch": "@@ -1848,16 +1848,9 @@ check_uvalue (const unsigned char * start,\n {\n   dwarf_vma max_uvalue = end - start;\n \n-  /* FIXME: Testing \"(start + uvalue) < start\" miscompiles with gcc 4.8.3\n-     running on an x86_64 host in 32-bit mode.  So we pre-compute the value\n-     here.  */\n-  const unsigned char * ptr = start + uvalue;\n-\n   /* See PR 17512: file: 008-103549-0.001:0.1.\n      and PR 24829 for examples of where these tests are triggered.  */\n-  if (uvalue > max_uvalue\n-      || ptr > end\n-      || ptr < start)\n+  if (uvalue > max_uvalue)\n     {\n       warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n       uvalue = max_uvalue;"
    }
  ]
}