{
  "sha": "2a12c336b9d55189780846324eda98c66d543de7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmExMmMzMzZiOWQ1NTE4OTc4MDg0NjMyNGVkYTk4YzY2ZDU0M2RlNw==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:47:40Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:47:40Z"
    },
    "message": "gdbtypes.h: Get rid of the TYPE_FIXED_POINT_INFO macro\n\nThis is one step further towards the removal of all these macros.\n\ngdb/ChangeLog:\n\n        * gdbtypes.h (struct type) <fixed_point_info, set_fixed_point_info>:\n        New methods.\n        (INIT_FIXED_POINT_SPECIFIC): Adjust.\n        (TYPE_FIXED_POINT_INFO): Delete macro.\n        (allocate_fixed_point_type_info): Change return type to void.\n        * gdbtypes.c (copy_type_recursive): Replace the use of\n        TYPE_FIXED_POINT_INFO by a call to the fixed_point_info method.\n        (fixed_point_scaling_factor): Likewise.\n        (allocate_fixed_point_type_info): Change return type to void.\n        Adjust implementation accordingly.\n        * dwarf2/read.c (finish_fixed_point_type): Replace the use of\n        TYPE_FIXED_POINT_INFO by a call to the fixed_point_info method.",
    "tree": {
      "sha": "bbb0516d696c7d803a5e51481bd70c899e0641ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bbb0516d696c7d803a5e51481bd70c899e0641ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2a12c336b9d55189780846324eda98c66d543de7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a12c336b9d55189780846324eda98c66d543de7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2a12c336b9d55189780846324eda98c66d543de7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a12c336b9d55189780846324eda98c66d543de7/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 48,
    "deletions": 16
  },
  "files": [
    {
      "sha": "5e34c7ef440af1b5d7aa472043acb08f4319f2c0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a12c336b9d55189780846324eda98c66d543de7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a12c336b9d55189780846324eda98c66d543de7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2a12c336b9d55189780846324eda98c66d543de7",
      "patch": "@@ -1,3 +1,18 @@\n+2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdbtypes.h (struct type) <fixed_point_info, set_fixed_point_info>:\n+\tNew methods.\n+\t(INIT_FIXED_POINT_SPECIFIC): Adjust.\n+\t(TYPE_FIXED_POINT_INFO): Delete macro.\n+\t(allocate_fixed_point_type_info): Change return type to void.\n+\t* gdbtypes.c (copy_type_recursive): Replace the use of\n+\tTYPE_FIXED_POINT_INFO by a call to the fixed_point_info method.\n+\t(fixed_point_scaling_factor): Likewise.\n+\t(allocate_fixed_point_type_info): Change return type to void.\n+\tAdjust implementation accordingly.\n+\t* dwarf2/read.c (finish_fixed_point_type): Replace the use of\n+\tTYPE_FIXED_POINT_INFO by a call to the fixed_point_info method.\n+\n 2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gmp-utils.h (gdb_mpz::read): Change buf and len parameters"
    },
    {
      "sha": "601a57194364782b1178aa2c6ffce82575a023ea",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a12c336b9d55189780846324eda98c66d543de7/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a12c336b9d55189780846324eda98c66d543de7/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2a12c336b9d55189780846324eda98c66d543de7",
      "patch": "@@ -18162,7 +18162,7 @@ get_dwarf2_unsigned_rational_constant (struct die_info *die,\n }\n \n /* Assuming DIE corresponds to a fixed point type, finish the creation\n-   of the corresponding TYPE by setting its TYPE_FIXED_POINT_INFO.\n+   of the corresponding TYPE by setting its type-specific data.\n    CU is the DIE's CU.  */\n \n static void\n@@ -18232,7 +18232,7 @@ finish_fixed_point_type (struct type *type, struct die_info *die,\n \t\t sect_offset_str (die->sect_off));\n     }\n \n-  gdb_mpq &scaling_factor = TYPE_FIXED_POINT_INFO (type)->scaling_factor;\n+  gdb_mpq &scaling_factor = type->fixed_point_info ().scaling_factor;\n \n   gdb_mpz tmp_z (scale_num);\n   mpz_set (mpq_numref (scaling_factor.val), tmp_z.val);"
    },
    {
      "sha": "f0d9c24fa34a8241049ea0c0e459cba35e9bd9ff",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a12c336b9d55189780846324eda98c66d543de7/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a12c336b9d55189780846324eda98c66d543de7/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=2a12c336b9d55189780846324eda98c66d543de7",
      "patch": "@@ -5503,8 +5503,8 @@ copy_type_recursive (struct objfile *objfile,\n       break;\n     case TYPE_SPECIFIC_FIXED_POINT:\n       INIT_FIXED_POINT_SPECIFIC (new_type);\n-      TYPE_FIXED_POINT_INFO (new_type)->scaling_factor\n-\t= TYPE_FIXED_POINT_INFO (type)->scaling_factor;\n+      new_type->fixed_point_info ().scaling_factor\n+\t= type->fixed_point_info ().scaling_factor;\n       break;\n     case TYPE_SPECIFIC_INT:\n       TYPE_SPECIFIC_FIELD (new_type) = TYPE_SPECIFIC_INT;\n@@ -5826,29 +5826,29 @@ static const struct objfile_key<fixed_point_type_storage>\n \n /* See gdbtypes.h.  */\n \n-fixed_point_type_info *\n+void\n allocate_fixed_point_type_info (struct type *type)\n {\n   std::unique_ptr<fixed_point_type_info> up (new fixed_point_type_info);\n-  fixed_point_type_info *result;\n+  fixed_point_type_info *info;\n \n   if (TYPE_OBJFILE_OWNED (type))\n     {\n       fixed_point_type_storage *storage\n \t= fixed_point_objfile_key.get (TYPE_OBJFILE (type));\n       if (storage == nullptr)\n \tstorage = fixed_point_objfile_key.emplace (TYPE_OBJFILE (type));\n-      result = up.get ();\n+      info = up.get ();\n       storage->push_back (std::move (up));\n     }\n   else\n     {\n       /* We just leak the memory, because that's what we do generally\n \t for non-objfile-attached types.  */\n-      result = up.release ();\n+      info = up.release ();\n     }\n \n-  return result;\n+  type->set_fixed_point_info (info);\n }\n \n /* See gdbtypes.h.  */\n@@ -5883,7 +5883,7 @@ fixed_point_scaling_factor (struct type *type)\n {\n   type = fixed_point_type_base_type (type);\n \n-  return TYPE_FIXED_POINT_INFO (type)->scaling_factor;\n+  return type->fixed_point_info ().scaling_factor;\n }\n \n \f"
    },
    {
      "sha": "c9d23437cd46bf0027a2895a91ff9629074fa7fc",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 23,
      "deletions": 6,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a12c336b9d55189780846324eda98c66d543de7/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a12c336b9d55189780846324eda98c66d543de7/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=2a12c336b9d55189780846324eda98c66d543de7",
      "patch": "@@ -1194,6 +1194,27 @@ struct type\n     this->main_type->m_flag_endianity_not_default = endianity_is_not_default;\n   }\n \n+  /* * Assuming that THIS is a TYPE_CODE_FIXED_POINT, return a reference\n+     to this type's fixed_point_info.  */\n+\n+  struct fixed_point_type_info &fixed_point_info () const\n+  {\n+    gdb_assert (this->code () == TYPE_CODE_FIXED_POINT);\n+    gdb_assert (this->main_type->type_specific.fixed_point_info != nullptr);\n+\n+    return *this->main_type->type_specific.fixed_point_info;\n+  }\n+\n+  /* * Assuming that THIS is a TYPE_CODE_FIXED_POINT, set this type's\n+     fixed_point_info to INFO.  */\n+\n+  void set_fixed_point_info (struct fixed_point_type_info *info) const\n+  {\n+    gdb_assert (this->code () == TYPE_CODE_FIXED_POINT);\n+\n+    this->main_type->type_specific.fixed_point_info = info;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1747,7 +1768,7 @@ extern void allocate_gnat_aux_type (struct type *);\n    handled.  */\n #define INIT_FIXED_POINT_SPECIFIC(type) \\\n   (TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_FIXED_POINT, \\\n-   TYPE_FIXED_POINT_INFO (type) = allocate_fixed_point_type_info (type))\n+   allocate_fixed_point_type_info (type))\n \n #define TYPE_MAIN_TYPE(thistype) (thistype)->main_type\n #define TYPE_TARGET_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->target_type\n@@ -1845,9 +1866,6 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n   (TYPE_CPLUS_SPECIFIC(thistype)->virtual_field_bits == NULL ? 0 \\\n     : B_TST(TYPE_CPLUS_SPECIFIC(thistype)->virtual_field_bits, (index)))\n \n-#define TYPE_FIXED_POINT_INFO(thistype) \\\n-  (TYPE_MAIN_TYPE(thistype)->type_specific.fixed_point_info)\n-\n #define FIELD_NAME(thisfld) ((thisfld).name)\n #define FIELD_LOC_KIND(thisfld) ((thisfld).loc_kind)\n #define FIELD_BITPOS_LVAL(thisfld) ((thisfld).loc.bitpos)\n@@ -2582,8 +2600,7 @@ extern const gdb_mpq &fixed_point_scaling_factor (struct type *type);\n \n /* Allocate a fixed-point type info for TYPE.  This should only be\n    called by INIT_FIXED_POINT_SPECIFIC.  */\n-extern fixed_point_type_info *allocate_fixed_point_type_info\n-  (struct type *type);\n+extern void allocate_fixed_point_type_info (struct type *type);\n \n /* * When the type includes explicit byte ordering, return that.\n    Otherwise, the byte ordering from gdbarch_byte_order for "
    }
  ]
}