{
  "sha": "b161a60d1fe2a7383c7940815687c6100b97204e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjE2MWE2MGQxZmUyYTczODNjNzk0MDgxNTY4N2M2MTAwYjk3MjA0ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-07T14:59:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-07T14:59:35Z"
    },
    "message": "gdb: pass target to thread_ptid_changed observable\n\nI noticed what I think is a potential bug.  I did not observe it nor was\nI able to reproduce it using actual debugging.  It's quite unlikely,\nbecause it involves multi-target and ptid clashes.  I added selftests\nthat demonstrate it though.\n\nThe thread_ptid_changed observer says that thread with OLD_PTID now has\nNEW_PTID.  Now, if for some reason we happen to have two targets\ndefining a thread with OLD_PTID, the observers don't know which thread\nthis is about.\n\nregcache::regcache_thread_ptid_changed changes all regcaches with\nOLD_PTID.  If there is a regcache for a thread with ptid OLD_PTID, but\nthat belongs to a different target, this regcache will be erroneously\nchanged.\n\nSimilarly, infrun_thread_ptid_changed updates inferior_ptid if\ninferior_ptid matches OLD_PTID.  But if inferior_ptid currently refers\nnot to the thread is being changed, but to a thread with the same ptid\nbelonging to a different target, then inferior_ptid will erroneously be\nchanged.\n\nThis patch adds a `process_stratum_target *` parameter to the\n`thread_ptid_changed` observable and makes the two observers use it.\nTests for both are added, which would fail if the corresponding fix\nwasn't done.\n\ngdb/ChangeLog:\n\n\t* observable.h (thread_ptid_changed): Add parameter\n\t`process_stratum_target *`.\n\t* infrun.c (infrun_thread_ptid_changed): Add parameter\n\t`process_stratum_target *` and use it.\n\t(selftests): New namespace.\n\t(infrun_thread_ptid_changed): New function.\n\t(_initialize_infrun): Register selftest.\n\t* regcache.c (regcache_thread_ptid_changed): Add parameter\n\t`process_stratum_target *` and use it.\n\t(regcache_thread_ptid_changed): New function.\n\t(_initialize_regcache): Register selftest.\n\t* thread.c (thread_change_ptid): Pass target to\n\tthread_ptid_changed observable.\n\nChange-Id: I0599e61224b6d154a7b55088a894cb88298c3c71",
    "tree": {
      "sha": "f12e3423a7fe7902cd700b3594e3de8ebe09bf15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f12e3423a7fe7902cd700b3594e3de8ebe09bf15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b161a60d1fe2a7383c7940815687c6100b97204e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b161a60d1fe2a7383c7940815687c6100b97204e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b161a60d1fe2a7383c7940815687c6100b97204e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b161a60d1fe2a7383c7940815687c6100b97204e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d2854d8d5a82946ace7f5b626f19c2b73f86d1f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2854d8d5a82946ace7f5b626f19c2b73f86d1f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d2854d8d5a82946ace7f5b626f19c2b73f86d1f6"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 167,
    "deletions": 7
  },
  "files": [
    {
      "sha": "fa1120e89e630ccf37fc1527d6a2c5f500fab2f7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b161a60d1fe2a7383c7940815687c6100b97204e",
      "patch": "@@ -1,3 +1,19 @@\n+2020-08-07  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* observable.h (thread_ptid_changed): Add parameter\n+\t`process_stratum_target *`.\n+\t* infrun.c (infrun_thread_ptid_changed): Add parameter\n+\t`process_stratum_target *` and use it.\n+\t(selftests): New namespace.\n+\t(infrun_thread_ptid_changed): New function.\n+\t(_initialize_infrun): Register selftest.\n+\t* regcache.c (regcache_thread_ptid_changed): Add parameter\n+\t`process_stratum_target *` and use it.\n+\t(regcache_thread_ptid_changed): New function.\n+\t(_initialize_regcache): Register selftest.\n+\t* thread.c (thread_change_ptid): Pass target to\n+\tthread_ptid_changed observable.\n+\n 2020-08-06  Caroline Tice <cmtice@google.com>\n \n         * dwarf2/read.c (struct dwo_file): Update comment on 'sections' field."
    },
    {
      "sha": "7be1fed76df21d1fad1aa460d13bf6b654025aee",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 76,
      "deletions": 2,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=b161a60d1fe2a7383c7940815687c6100b97204e",
      "patch": "@@ -67,6 +67,9 @@\n #include \"gdbsupport/gdb_select.h\"\n #include <unordered_map>\n #include \"async-event.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"scoped-mock-context.h\"\n+#include \"test-target.h\"\n \n /* Prototypes for local functions */\n \n@@ -2068,9 +2071,11 @@ start_step_over (void)\n /* Update global variables holding ptids to hold NEW_PTID if they were\n    holding OLD_PTID.  */\n static void\n-infrun_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n+infrun_thread_ptid_changed (process_stratum_target *target,\n+\t\t\t    ptid_t old_ptid, ptid_t new_ptid)\n {\n-  if (inferior_ptid == old_ptid)\n+  if (inferior_ptid == old_ptid\n+      && current_inferior ()->process_target () == target)\n     inferior_ptid = new_ptid;\n }\n \n@@ -9455,6 +9460,70 @@ infrun_async_inferior_event_handler (gdb_client_data data)\n   inferior_event_handler (INF_REG_EVENT);\n }\n \n+namespace selftests\n+{\n+\n+/* Verify that when two threads with the same ptid exist (from two different\n+   targets) and one of them changes ptid, we only update inferior_ptid if\n+   it is appropriate.  */\n+\n+static void\n+infrun_thread_ptid_changed ()\n+{\n+  gdbarch *arch = current_inferior ()->gdbarch;\n+\n+  /* The thread which inferior_ptid represents changes ptid.  */\n+  {\n+    scoped_restore_current_pspace_and_thread restore;\n+\n+    scoped_mock_context<test_target_ops> target1 (arch);\n+    scoped_mock_context<test_target_ops> target2 (arch);\n+    target2.mock_inferior.next = &target1.mock_inferior;\n+\n+    ptid_t old_ptid (111, 222);\n+    ptid_t new_ptid (111, 333);\n+\n+    target1.mock_inferior.pid = old_ptid.pid ();\n+    target1.mock_thread.ptid = old_ptid;\n+    target2.mock_inferior.pid = old_ptid.pid ();\n+    target2.mock_thread.ptid = old_ptid;\n+\n+    auto restore_inferior_ptid = make_scoped_restore (&inferior_ptid, old_ptid);\n+    set_current_inferior (&target1.mock_inferior);\n+\n+    thread_change_ptid (&target1.mock_target, old_ptid, new_ptid);\n+\n+    gdb_assert (inferior_ptid == new_ptid);\n+  }\n+\n+  /* A thread with the same ptid as inferior_ptid, but from another target,\n+     changes ptid.  */\n+  {\n+    scoped_restore_current_pspace_and_thread restore;\n+\n+    scoped_mock_context<test_target_ops> target1 (arch);\n+    scoped_mock_context<test_target_ops> target2 (arch);\n+    target2.mock_inferior.next = &target1.mock_inferior;\n+\n+    ptid_t old_ptid (111, 222);\n+    ptid_t new_ptid (111, 333);\n+\n+    target1.mock_inferior.pid = old_ptid.pid ();\n+    target1.mock_thread.ptid = old_ptid;\n+    target2.mock_inferior.pid = old_ptid.pid ();\n+    target2.mock_thread.ptid = old_ptid;\n+\n+    auto restore_inferior_ptid = make_scoped_restore (&inferior_ptid, old_ptid);\n+    set_current_inferior (&target2.mock_inferior);\n+\n+    thread_change_ptid (&target1.mock_target, old_ptid, new_ptid);\n+\n+    gdb_assert (inferior_ptid == old_ptid);\n+  }\n+}\n+\n+} /* namespace selftests */\n+\n void _initialize_infrun ();\n void\n _initialize_infrun ()\n@@ -9756,4 +9825,9 @@ or signalled.\"),\n \t\t\t   show_observer_mode,\n \t\t\t   &setlist,\n \t\t\t   &showlist);\n+\n+#if GDB_SELF_TEST\n+  selftests::register_test (\"infrun_thread_ptid_changed\",\n+\t\t\t    selftests::infrun_thread_ptid_changed);\n+#endif\n }"
    },
    {
      "sha": "da0a9b12f74caab06a11bafa0e78f5f654937f01",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=b161a60d1fe2a7383c7940815687c6100b97204e",
      "patch": "@@ -27,6 +27,7 @@ struct so_list;\n struct objfile;\n struct thread_info;\n struct inferior;\n+struct process_stratum_target;\n struct trace_state_variable;\n \n namespace gdb\n@@ -165,8 +166,9 @@ extern observable<struct gdbarch */* newarch */> architecture_changed;\n \n /* The thread's ptid has changed.  The OLD_PTID parameter specifies\n    the old value, and NEW_PTID specifies the new value.  */\n-extern observable<ptid_t /* old_ptid */, ptid_t /* new_ptid */>\n-    thread_ptid_changed;\n+extern observable<process_stratum_target * /* target */,\n+\t\t  ptid_t /* old_ptid */, ptid_t /* new_ptid */>\n+  thread_ptid_changed;\n \n /* The inferior INF has been added to the list of inferiors.  At\n    this point, it might not be associated with any process.  */"
    },
    {
      "sha": "71e528f9b60f7b3d27b758ea648faabfe1cb733f",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 70,
      "deletions": 2,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=b161a60d1fe2a7383c7940815687c6100b97204e",
      "patch": "@@ -414,11 +414,12 @@ regcache_observer_target_changed (struct target_ops *target)\n \n /* Update regcaches related to OLD_PTID to now use NEW_PTID.  */\n static void\n-regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n+regcache_thread_ptid_changed (process_stratum_target *target,\n+\t\t\t      ptid_t old_ptid, ptid_t new_ptid)\n {\n   for (auto &regcache : regcaches)\n     {\n-      if (regcache->ptid () == old_ptid)\n+      if (regcache->ptid () == old_ptid && regcache->target () == target)\n \tregcache->set_ptid (new_ptid);\n     }\n }\n@@ -1817,6 +1818,71 @@ cooked_write_test (struct gdbarch *gdbarch)\n     }\n }\n \n+/* Verify that when two threads with the same ptid exist (from two different\n+   targets) and one of them changes ptid, we only update the appropriate\n+   regcaches.  */\n+\n+static void\n+regcache_thread_ptid_changed ()\n+{\n+  /* This test relies on the global regcache list to initially be empty.  */\n+  registers_changed ();\n+\n+  /* Any arch will do.  */\n+  gdbarch *arch = current_inferior ()->gdbarch;\n+\n+  /* Prepare two targets with one thread each, with the same ptid.  */\n+  scoped_mock_context<test_target_ops> target1 (arch);\n+  scoped_mock_context<test_target_ops> target2 (arch);\n+  target2.mock_inferior.next = &target1.mock_inferior;\n+\n+  ptid_t old_ptid (111, 222);\n+  ptid_t new_ptid (111, 333);\n+\n+  target1.mock_inferior.pid = old_ptid.pid ();\n+  target1.mock_thread.ptid = old_ptid;\n+  target2.mock_inferior.pid = old_ptid.pid ();\n+  target2.mock_thread.ptid = old_ptid;\n+\n+  gdb_assert (regcaches.empty ());\n+\n+  /* Populate the regcaches container.  */\n+  get_thread_arch_aspace_regcache (&target1.mock_target, old_ptid, arch,\n+\t\t\t\t   nullptr);\n+  get_thread_arch_aspace_regcache (&target2.mock_target, old_ptid, arch,\n+\t\t\t\t   nullptr);\n+\n+  /* Return whether a regcache for (TARGET, PTID) exists in REGCACHES.  */\n+  auto regcache_exists = [] (process_stratum_target *target, ptid_t ptid)\n+    {\n+      for (regcache *rc : regcaches)\n+\t{\n+\t  if (rc->target () == target && rc->ptid () == ptid)\n+\t    return true;\n+\t}\n+\n+      return false;\n+    };\n+\n+  gdb_assert (regcaches_size () == 2);\n+  gdb_assert (regcache_exists (&target1.mock_target, old_ptid));\n+  gdb_assert (!regcache_exists (&target1.mock_target, new_ptid));\n+  gdb_assert (regcache_exists (&target2.mock_target, old_ptid));\n+  gdb_assert (!regcache_exists (&target2.mock_target, new_ptid));\n+\n+  thread_change_ptid (&target1.mock_target, old_ptid, new_ptid);\n+\n+  gdb_assert (regcaches_size () == 2);\n+  gdb_assert (!regcache_exists (&target1.mock_target, old_ptid));\n+  gdb_assert (regcache_exists (&target1.mock_target, new_ptid));\n+  gdb_assert (regcache_exists (&target2.mock_target, old_ptid));\n+  gdb_assert (!regcache_exists (&target2.mock_target, new_ptid));\n+\n+  /* Leave the regcache list empty.  */\n+  registers_changed ();\n+  gdb_assert (regcaches.empty ());\n+}\n+\n } // namespace selftests\n #endif /* GDB_SELF_TEST */\n \n@@ -1840,5 +1906,7 @@ _initialize_regcache ()\n \t\t\t\t\t selftests::cooked_read_test);\n   selftests::register_test_foreach_arch (\"regcache::cooked_write_test\",\n \t\t\t\t\t selftests::cooked_write_test);\n+  selftests::register_test (\"regcache_thread_ptid_changed\",\n+\t\t\t    selftests::regcache_thread_ptid_changed);\n #endif\n }"
    },
    {
      "sha": "c915407581fb6fba7bdf00968d31d8259557ddb8",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b161a60d1fe2a7383c7940815687c6100b97204e/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=b161a60d1fe2a7383c7940815687c6100b97204e",
      "patch": "@@ -775,7 +775,7 @@ thread_change_ptid (process_stratum_target *targ,\n   tp = find_thread_ptid (inf, old_ptid);\n   tp->ptid = new_ptid;\n \n-  gdb::observers::thread_ptid_changed.notify (old_ptid, new_ptid);\n+  gdb::observers::thread_ptid_changed.notify (targ, old_ptid, new_ptid);\n }\n \n /* See gdbthread.h.  */"
    }
  ]
}