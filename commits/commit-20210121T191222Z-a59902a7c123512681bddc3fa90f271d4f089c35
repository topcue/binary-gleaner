{
  "sha": "a59902a7c123512681bddc3fa90f271d4f089c35",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTU5OTAyYTdjMTIzNTEyNjgxYmRkYzNmYTkwZjI3MWQ0ZjA4OWMzNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-21T19:12:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-21T19:12:22Z"
    },
    "message": "gdb: convert auto-load to new-style debug macros\n\nFunction file_is_auto_load_safe was taking a format string and varargs\njust to output a debug print.  This is probably because that function is\nused in linux-thread-db.c and main.c, but debug_auto_load is static in\nauto-load.c.  I simplified that, making debug_auto_load visible outside\nof auto-load.c, and making the callers of file_is_auto_load_safe output\nthe debug print themselves.\n\nThis file uses _() for internationalization of the debug messages.  This\nis not necessary, as these are mostly messages for GDB developers, and\nit's not used in other files anyway.  So I removed them.\n\nThe rest is pretty much standard.\n\ngdb/ChangeLog:\n\n\t* auto-load.h (debug_auto_load): Move here.\n\t(auto_load_debug_printf): New.\n\t* auto-load.c: Use auto_load_debug_printf.\n\t(debug_auto_load): Move to header.\n\t* linux-thread-db.c (try_thread_db_load): Use\n\tauto_load_debug_printf.\n\t* main.c (captured_main_1): Likewise.\n\nChange-Id: I468dc2a1d24b7dbf171f55181a11abbfafe70ba1",
    "tree": {
      "sha": "16bf472a73ee2e80cc8359a245e33b1475b6e11f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16bf472a73ee2e80cc8359a245e33b1475b6e11f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a59902a7c123512681bddc3fa90f271d4f089c35",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a59902a7c123512681bddc3fa90f271d4f089c35",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a59902a7c123512681bddc3fa90f271d4f089c35",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a59902a7c123512681bddc3fa90f271d4f089c35/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3abc0cee08121f4957a1286e93a3fcb0e969869",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3abc0cee08121f4957a1286e93a3fcb0e969869",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3abc0cee08121f4957a1286e93a3fcb0e969869"
    }
  ],
  "stats": {
    "total": 194,
    "additions": 92,
    "deletions": 102
  },
  "files": [
    {
      "sha": "2d820d2335742ba3b5b650ab5ede75254c4c0908",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a59902a7c123512681bddc3fa90f271d4f089c35",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-21  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* auto-load.h (debug_auto_load): Move here.\n+\t(auto_load_debug_printf): New.\n+\t* auto-load.c: Use auto_load_debug_printf.\n+\t(debug_auto_load): Move to header.\n+\t* linux-thread-db.c (try_thread_db_load): Use\n+\tauto_load_debug_printf.\n+\t* main.c (captured_main_1): Likewise.\n+\n 2021-01-21  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* f-valprint.c (f77_array_offset_tbl): Remove."
    },
    {
      "sha": "1dfcf21eeebf220853371342e1c0c92bf78f7f65",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 58,
      "deletions": 88,
      "changes": 146,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=a59902a7c123512681bddc3fa90f271d4f089c35",
      "patch": "@@ -61,8 +61,9 @@ static void maybe_print_script_not_found_warning\n    const struct extension_language_defn *language,\n    const char *section_name, unsigned offset);\n \n-/* Value of the 'set debug auto-load' configuration variable.  */\n-static bool debug_auto_load = false;\n+/* See auto-load.h.  */\n+\n+bool debug_auto_load = false;\n \n /* \"show\" command for the debug_auto_load configuration variable.  */\n \n@@ -183,8 +184,7 @@ auto_load_expand_dir_vars (const char *string)\n   substitute_path_component (&s, \"$debugdir\", debug_file_directory);\n \n   if (debug_auto_load && strcmp (s, string) != 0)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t_(\"auto-load: Expanded $-variables to \\\"%s\\\".\\n\"), s);\n+    auto_load_debug_printf (\"Expanded $-variables to \\\"%s\\\".\", s);\n \n   std::vector<gdb::unique_xmalloc_ptr<char>> dir_vec\n     = dirnames_to_char_ptr_vec (s);\n@@ -198,10 +198,8 @@ auto_load_expand_dir_vars (const char *string)\n static void\n auto_load_safe_path_vec_update (void)\n {\n-  if (debug_auto_load)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t_(\"auto-load: Updating directories of \\\"%s\\\".\\n\"),\n-\t\t\tauto_load_safe_path);\n+  auto_load_debug_printf (\"Updating directories of \\\"%s\\\".\",\n+\t\t\t  auto_load_safe_path);\n \n   auto_load_safe_path_vec = auto_load_expand_dir_vars (auto_load_safe_path);\n   size_t len = auto_load_safe_path_vec.size ();\n@@ -222,23 +220,18 @@ auto_load_safe_path_vec_update (void)\n       if (debug_auto_load)\n \t{\n \t  if (strcmp (in_vec.get (), original.get ()) == 0)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t_(\"auto-load: Using directory \\\"%s\\\".\\n\"),\n-\t\t\t\tin_vec.get ());\n+\t    auto_load_debug_printf (\"Using directory \\\"%s\\\".\",\n+\t\t\t\t    in_vec.get ());\n \t  else\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t_(\"auto-load: Resolved directory \\\"%s\\\" \"\n-\t\t\t\t  \"as \\\"%s\\\".\\n\"),\n-\t\t\t\toriginal.get (), in_vec.get ());\n+\t    auto_load_debug_printf (\"Resolved directory \\\"%s\\\" as \\\"%s\\\".\",\n+\t\t\t\t    original.get (), in_vec.get ());\n \t}\n \n       /* If gdb_realpath returns a different content, append it.  */\n       if (strcmp (real_path.get (), in_vec.get ()) != 0)\n \t{\n-\t  if (debug_auto_load)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t_(\"auto-load: And canonicalized as \\\"%s\\\".\\n\"),\n-\t\t\t\treal_path.get ());\n+\t  auto_load_debug_printf (\"And canonicalized as \\\"%s\\\".\",\n+\t\t\t\t  real_path.get ());\n \n \t  auto_load_safe_path_vec.push_back (std::move (real_path));\n \t}\n@@ -338,10 +331,8 @@ filename_is_in_pattern_1 (char *filename, char *pattern)\n   size_t pattern_len = strlen (pattern);\n   size_t filename_len = strlen (filename);\n \n-  if (debug_auto_load)\n-    fprintf_unfiltered (gdb_stdlog, _(\"auto-load: Matching file \\\"%s\\\" \"\n-\t\t\t\t      \"to pattern \\\"%s\\\"\\n\"),\n-\t\t\tfilename, pattern);\n+  auto_load_debug_printf (\"Matching file \\\"%s\\\" to pattern \\\"%s\\\"\",\n+\t\t\t  filename, pattern);\n \n   /* Trim trailing slashes (\"/\") from PATTERN.  Even for \"d:\\\" paths as\n      trailing slashes are trimmed also from FILENAME it still matches\n@@ -355,9 +346,7 @@ filename_is_in_pattern_1 (char *filename, char *pattern)\n      IS_DIR_SEPARATOR character, such as the 'C:\\x.exe' filename.  */\n   if (pattern_len == 0)\n     {\n-      if (debug_auto_load)\n-\tfprintf_unfiltered (gdb_stdlog,\n-\t\t\t    _(\"auto-load: Matched - empty pattern\\n\"));\n+      auto_load_debug_printf (\"Matched - empty pattern\");\n       return 1;\n     }\n \n@@ -370,20 +359,15 @@ filename_is_in_pattern_1 (char *filename, char *pattern)\n       filename[filename_len] = '\\0';\n       if (filename_len == 0)\n \t{\n-\t  if (debug_auto_load)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t_(\"auto-load: Not matched - pattern \\\"%s\\\".\\n\"),\n-\t\t\t\tpattern);\n+\t  auto_load_debug_printf (\"Not matched - pattern \\\"%s\\\".\", pattern);\n \t  return 0;\n \t}\n \n       if (gdb_filename_fnmatch (pattern, filename, FNM_FILE_NAME | FNM_NOESCAPE)\n \t  == 0)\n \t{\n-\t  if (debug_auto_load)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"auto-load: Matched - file \"\n-\t\t\t\t\t      \"\\\"%s\\\" to pattern \\\"%s\\\".\\n\"),\n-\t\t\t\tfilename, pattern);\n+\t  auto_load_debug_printf (\"Matched - file \\\"%s\\\" to pattern \\\"%s\\\".\",\n+\t\t\t\t  filename, pattern);\n \t  return 1;\n \t}\n \n@@ -434,10 +418,8 @@ filename_is_in_auto_load_safe_path_vec (const char *filename,\n \t{\n \t  *filename_realp = gdb_realpath (filename);\n \t  if (debug_auto_load && strcmp (filename_realp->get (), filename) != 0)\n-\t    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t_(\"auto-load: Resolved \"\n-\t\t\t\t  \"file \\\"%s\\\" as \\\"%s\\\".\\n\"),\n-\t\t\t\tfilename, filename_realp->get ());\n+\t    auto_load_debug_printf (\"Resolved file \\\"%s\\\" as \\\"%s\\\".\",\n+\t\t\t\t    filename, filename_realp->get ());\n \t}\n \n       if (strcmp (filename_realp->get (), filename) != 0)\n@@ -451,10 +433,8 @@ filename_is_in_auto_load_safe_path_vec (const char *filename,\n \n   if (pattern != NULL)\n     {\n-      if (debug_auto_load)\n-\tfprintf_unfiltered (gdb_stdlog, _(\"auto-load: File \\\"%s\\\" matches \"\n-\t\t\t\t\t  \"directory \\\"%s\\\".\\n\"),\n-\t\t\t    filename, pattern);\n+      auto_load_debug_printf (\"File \\\"%s\\\" matches directory \\\"%s\\\".\",\n+\t\t\t      filename, pattern);\n       return 1;\n     }\n \n@@ -464,20 +444,11 @@ filename_is_in_auto_load_safe_path_vec (const char *filename,\n /* See auto-load.h.  */\n \n bool\n-file_is_auto_load_safe (const char *filename, const char *debug_fmt, ...)\n+file_is_auto_load_safe (const char *filename)\n {\n   gdb::unique_xmalloc_ptr<char> filename_real;\n   static bool advice_printed = false;\n \n-  if (debug_auto_load)\n-    {\n-      va_list debug_args;\n-\n-      va_start (debug_args, debug_fmt);\n-      vfprintf_unfiltered (gdb_stdlog, debug_fmt, debug_args);\n-      va_end (debug_args);\n-    }\n-\n   if (filename_is_in_auto_load_safe_path_vec (filename, &filename_real))\n     return true;\n \n@@ -766,9 +737,10 @@ auto_load_objfile_script_1 (struct objfile *objfile, const char *realname,\n \n   gdb_file_up input = gdb_fopen_cloexec (filename.c_str (), \"r\");\n   debugfile = filename.c_str ();\n-  if (debug_auto_load)\n-    fprintf_unfiltered (gdb_stdlog, _(\"auto-load: Attempted file \\\"%s\\\" %s.\\n\"),\n-\t\t\tdebugfile, input ? _(\"exists\") : _(\"does not exist\"));\n+\n+  auto_load_debug_printf (\"Attempted file \\\"%s\\\" %s.\",\n+\t\t\t  debugfile,\n+\t\t\t  input != nullptr ? \"exists\" : \"does not exist\");\n \n   std::string debugfile_holder;\n   if (!input)\n@@ -779,10 +751,9 @@ auto_load_objfile_script_1 (struct objfile *objfile, const char *realname,\n       std::vector<gdb::unique_xmalloc_ptr<char>> vec\n \t= auto_load_expand_dir_vars (auto_load_dir);\n \n-      if (debug_auto_load)\n-\tfprintf_unfiltered (gdb_stdlog, _(\"auto-load: Searching 'set auto-load \"\n-\t\t\t\t\t  \"scripts-directory' path \\\"%s\\\".\\n\"),\n-\t\t\t    auto_load_dir);\n+      auto_load_debug_printf\n+\t(\"Searching 'set auto-load scripts-directory' path \\\"%s\\\".\",\n+\t auto_load_dir);\n \n       /* Convert Windows file name from c:/dir/file to /c/dir/file.  */\n       if (HAS_DRIVE_SPEC (debugfile))\n@@ -796,11 +767,13 @@ auto_load_objfile_script_1 (struct objfile *objfile, const char *realname,\n \t  debugfile = debugfile_holder.c_str ();\n \n \t  input = gdb_fopen_cloexec (debugfile, \"r\");\n-\t  if (debug_auto_load)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"auto-load: Attempted file \"\n-\t\t\t\t\t      \"\\\"%s\\\" %s.\\n\"),\n-\t\t\t\tdebugfile,\n-\t\t\t\tinput ? _(\"exists\") : _(\"does not exist\"));\n+\n+\t  auto_load_debug_printf (\"Attempted file \\\"%s\\\" %s.\",\n+\t\t\t\t  debugfile,\n+\t\t\t\t  (input != nullptr\n+\t\t\t\t   ? \"exists\"\n+\t\t\t\t   : \"does not exist\"));\n+\n \t  if (input != NULL)\n \t    break;\n \t}\n@@ -810,12 +783,11 @@ auto_load_objfile_script_1 (struct objfile *objfile, const char *realname,\n     {\n       struct auto_load_pspace_info *pspace_info;\n \n-      bool is_safe\n-\t= file_is_auto_load_safe (debugfile,\n-\t\t\t\t  _(\"auto-load: Loading %s script \\\"%s\\\"\"\n-\t\t\t\t    \" by extension for objfile \\\"%s\\\".\\n\"),\n-\t\t\t\t  ext_lang_name (language),\n-\t\t\t\t  debugfile, objfile_name (objfile));\n+      auto_load_debug_printf\n+\t(\"Loading %s script \\\"%s\\\" by extension for objfile \\\"%s\\\".\",\n+\t ext_lang_name (language), debugfile, objfile_name (objfile));\n+\n+      bool is_safe = file_is_auto_load_safe (debugfile);\n \n       /* Add this script to the hash table too so\n \t \"info auto-load ${lang}-scripts\" can print it.  */\n@@ -871,10 +843,11 @@ auto_load_objfile_script (struct objfile *objfile,\n \t{\n \t  len -= lexe;\n \t  realname.get ()[len] = '\\0';\n-\t  if (debug_auto_load)\n-\t    fprintf_unfiltered (gdb_stdlog, _(\"auto-load: Stripped .exe suffix, \"\n-\t\t\t\t\t      \"retrying with \\\"%s\\\".\\n\"),\n-\t\t\t\trealname.get ());\n+\n+\t  auto_load_debug_printf\n+\t    (\"auto-load: Stripped .exe suffix, retrying with \\\"%s\\\".\",\n+\t     realname.get ());\n+\n \t  auto_load_objfile_script_1 (objfile, realname.get (), language);\n \t}\n     }\n@@ -917,13 +890,12 @@ source_script_file (struct auto_load_pspace_info *pspace_info,\n \n   if (opened)\n     {\n-      if (!file_is_auto_load_safe (opened->full_path.get (),\n-\t\t\t\t   _(\"auto-load: Loading %s script \"\n-\t\t\t\t     \"\\\"%s\\\" from section \\\"%s\\\" of \"\n-\t\t\t\t     \"objfile \\\"%s\\\".\\n\"),\n-\t\t\t\t   ext_lang_name (language),\n-\t\t\t\t   opened->full_path.get (),\n-\t\t\t\t   section_name, objfile_name (objfile)))\n+      auto_load_debug_printf\n+\t(\"Loading %s script \\\"%s\\\" from section \\\"%s\\\" of objfile \\\"%s\\\".\",\n+\t ext_lang_name (language), opened->full_path.get (),\n+\t section_name, objfile_name (objfile));\n+\n+      if (!file_is_auto_load_safe (opened->full_path.get ()))\n \topened.reset ();\n     }\n   else\n@@ -1018,13 +990,11 @@ of file %ps.\"),\n       return;\n     }\n \n-  bool is_safe\n-    = file_is_auto_load_safe (objfile_name (objfile),\n-\t\t\t      _(\"auto-load: Loading %s script \"\n-\t\t\t\t\"\\\"%s\\\" from section \\\"%s\\\" of \"\n-\t\t\t\t\"objfile \\\"%s\\\".\\n\"),\n-\t\t\t      ext_lang_name (language), name,\n-\t\t\t      section_name, objfile_name (objfile));\n+  auto_load_debug_printf\n+    (\"Loading %s script \\\"%s\\\" from section \\\"%s\\\" of objfile \\\"%s\\\".\",\n+     ext_lang_name (language), name, section_name, objfile_name (objfile));\n+\n+  bool is_safe = file_is_auto_load_safe (objfile_name (objfile));\n \n   bool in_hash_table\n     = maybe_add_script_text (pspace_info, is_safe, name, language);"
    },
    {
      "sha": "f726126c554132b9404af1c153f94192cb0887e2",
      "filename": "gdb/auto-load.h",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/auto-load.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/auto-load.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.h?ref=a59902a7c123512681bddc3fa90f271d4f089c35",
      "patch": "@@ -25,6 +25,15 @@ struct program_space;\n struct auto_load_pspace_info;\n struct extension_language_defn;\n \n+/* Value of the 'set debug auto-load' configuration variable.  */\n+\n+extern bool debug_auto_load;\n+\n+/* Print an \"auto-load\" debug statement.  */\n+\n+#define auto_load_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_auto_load, \"auto-load\", fmt, ##__VA_ARGS__)\n+\n extern bool global_auto_load;\n \n extern bool auto_load_local_gdbinit;\n@@ -52,9 +61,7 @@ extern struct cmd_list_element **auto_load_info_cmdlist_get (void);\n    even if the caller would quietly skip non-existing file in unsafe\n    directory.  */\n \n-extern bool file_is_auto_load_safe (const char *filename,\n-\t\t\t\t    const char *debug_fmt, ...)\n-  ATTRIBUTE_PRINTF (2, 3);\n+extern bool file_is_auto_load_safe (const char *filename);\n \n /* Return true if auto-loading gdb scripts is enabled.  */\n "
    },
    {
      "sha": "dce4bd23c1b7df199ee951e4d4861b4481f42a85",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=a59902a7c123512681bddc3fa90f271d4f089c35",
      "patch": "@@ -976,10 +976,11 @@ try_thread_db_load (const char *library, bool check_auto_load_safe)\n \t  return false;\n \t}\n \n-      if (!file_is_auto_load_safe (library, _(\"auto-load: Loading libthread-db \"\n-\t\t\t\t\t      \"library \\\"%s\\\" from explicit \"\n-\t\t\t\t\t      \"directory.\\n\"),\n-\t\t\t\t   library))\n+      auto_load_debug_printf\n+\t(\"Loading libthread-db library \\\"%s\\\" from explicit directory.\",\n+\t library);\n+\n+      if (!file_is_auto_load_safe (library))\n \treturn false;\n     }\n "
    },
    {
      "sha": "331e3a50acf8df6dbb92dd6021f8f52847c3d824",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a59902a7c123512681bddc3fa90f271d4f089c35/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=a59902a7c123512681bddc3fa90f271d4f089c35",
      "patch": "@@ -1185,15 +1185,17 @@ captured_main_1 (struct captured_main_args *context)\n       auto_load_local_gdbinit_pathname\n \t= gdb_realpath (local_gdbinit.c_str ()).release ();\n \n-      if (!inhibit_gdbinit && auto_load_local_gdbinit\n-\t  && file_is_auto_load_safe (local_gdbinit.c_str (),\n-\t\t\t\t     _(\"auto-load: Loading .gdbinit \"\n-\t\t\t\t       \"file \\\"%s\\\".\\n\"),\n-\t\t\t\t     local_gdbinit.c_str ()))\n+      if (!inhibit_gdbinit && auto_load_local_gdbinit)\n \t{\n-\t  auto_load_local_gdbinit_loaded = 1;\n+\t  auto_load_debug_printf (\"Loading .gdbinit file \\\"%s\\\".\",\n+\t\t\t\t  local_gdbinit.c_str ());\n \n-\t  ret = catch_command_errors (source_script, local_gdbinit.c_str (), 0);\n+\t  if (file_is_auto_load_safe (local_gdbinit.c_str ()))\n+\t    {\n+\t      auto_load_local_gdbinit_loaded = 1;\n+\n+\t      ret = catch_command_errors (source_script, local_gdbinit.c_str (), 0);\n+\t    }\n \t}\n     }\n "
    }
  ]
}