{
  "sha": "2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmY5NzNmMTM0ZDc3NTJjYmM2NjJlYzY1ZGE4YWQ4YmJlNGM2ZmI4Zg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-18T04:13:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-19T03:19:15Z"
    },
    "message": "Wrong ELF class plugin vs. gcc ld version\n\nWhen building 32-bit binutils with CC=\"gcc -m32\" CXX=\"g++ -m32\" we can\nfail the gcc ld version test due to an error attempting to load a\n64-bit plugin into 32-bit ld-new.  This results in bogus errors about\n\"Your compiler driver ignores -B when choosing ld.\"\n\n\t* testsuite/lib/ld-lib.exp: Whitespace.\n\t(load_common_lib): Expand single use and delete this proc.\n\t(run_host_cmd): Use -fno-lto when getting gcc's ld version.\n\tUse -B for clang too.",
    "tree": {
      "sha": "43eca27a7a11557b325be3d06291acb72fcf8fb1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/43eca27a7a11557b325be3d06291acb72fcf8fb1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0be51eb4c363bea9a550392bf58c0e497403fff2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0be51eb4c363bea9a550392bf58c0e497403fff2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0be51eb4c363bea9a550392bf58c0e497403fff2"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 79,
    "deletions": 72
  },
  "files": [
    {
      "sha": "9d16c305200ea53f09bc77e6ff9f6dafdce6fb42",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/lib/ld-lib.exp: Whitespace.\n+\t(load_common_lib): Expand single use and delete this proc.\n+\t(run_host_cmd): Use -fno-lto when getting gcc's ld version.\n+\tUse -B for clang too.\n+\n 2021-02-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* testplugin.c (record_read_length): Remove debug fprintf."
    },
    {
      "sha": "9febe283b9397cd9957e52da0e8b73b4c0014aed",
      "filename": "ld/testsuite/lib/ld-lib.exp",
      "status": "modified",
      "additions": 72,
      "deletions": 72,
      "changes": 144,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f/ld/testsuite/lib/ld-lib.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f/ld/testsuite/lib/ld-lib.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/lib/ld-lib.exp?ref=2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
      "patch": "@@ -18,12 +18,7 @@\n # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n # MA 02110-1301, USA.\n \n-proc load_common_lib { name } {\n-    global srcdir\n-    load_file $srcdir/../../binutils/testsuite/lib/$name\n-}\n-\n-load_common_lib binutils-common.exp\n+load_file $srcdir/../../binutils/testsuite/lib/binutils-common.exp\n \n # Returns 1 if the gcc for the target is at least version MAJOR.MINOR\n # Returns 0 otherwise.\n@@ -108,19 +103,24 @@ proc run_host_cmd { prog command } {\n \tset prog $gccexe\n     }\n     set gccexe [string replace $gccexe 0 [string last \"/\" $gccexe] \"\"]\n-    if {[string match \"*cc*\" $gccexe] || [string match \"*++*\" $gccexe]} then {\n+    if {[string match \"*cc*\" $gccexe] ||\n+\t[string match \"*++*\" $gccexe] ||\n+\t[string match \"clang*\" $gccexe]} then {\n \tset gccflags \"$gcc_B_opt $gccflags $ld_L_opt\"\n \tif {![info exists gcc_ld_B_opt_tested]} {\n \t    set gcc_ld_B_opt_tested 1\n \t    set ld_version_message [run_host_cmd \"$ld\" \"--version\"]\n-\t    set gcc_ld_version_message [run_host_cmd \"$prog\" \"$gccflags -Wl,--version\"]\n+\t    set ver \"-Wl,--version\"\n+\t    if [check_lto_available] {\n+\t\tset ver \"-fno-lto $ver\"\n+\t    }\n+\t    set gcc_ld_version_message [run_host_cmd \"$prog\" \"$gccflags $ver\"]\n \t    if {[string first $ld_version_message $gcc_ld_version_message] < 0} {\n \t\tperror \"************************************************************************\"\n \t\tperror \"Your compiler driver ignores -B when choosing ld.\"\n \t\tperror \"You will not be testing the new ld in many of the following tests.\"\n \t\tset gcc_ld_version [run_host_cmd \"$prog\" \"$gccflags --print-prog-name=ld\"]\n \t\tif {![string match \"\" $gcc_ld_version] && ![string match \"ld\" $gcc_ld_version]} {\n-\t\t\n \t\t    perror \"It seems you will be testing $gcc_ld_version instead.\"\n \t\t}\n \t\tperror \"************************************************************************\"\n@@ -175,13 +175,13 @@ proc default_ld_relocate { ld target objects } {\n proc is_endian_output_format { object_flags } {\n \n     if {[string match \"*-oformat binary*\" $object_flags] ||      \\\n-        [string match \"*-oformat ieee*\" $object_flags] ||        \\\n-\t[string match \"*-oformat ihex*\" $object_flags] ||        \\\n+\t[string match \"*-oformat ieee*\" $object_flags] ||\t \\\n+\t[string match \"*-oformat ihex*\" $object_flags] ||\t \\\n \t[string match \"*-oformat netbsd-core*\" $object_flags] || \\\n-\t[string match \"*-oformat srec*\" $object_flags] ||        \\\n+\t[string match \"*-oformat srec*\" $object_flags] ||\t \\\n \t[string match \"*-oformat tekhex*\" $object_flags] ||      \\\n \t[string match \"*-oformat trad-core*\" $object_flags] } then {\n-        return 0\n+\treturn 0\n     } else {\n \treturn 1\n     }\n@@ -254,7 +254,7 @@ proc default_ld_compile { cc source object } {\n     }\n \n     if [board_info [target_info name] exists cflags] {\n-        append flags \" [board_info [target_info name] cflags]\"\n+\tappend flags \" [board_info [target_info name] cflags]\"\n     }\n \n     if [board_info [target_info name] exists multilib_flags] {\n@@ -355,7 +355,7 @@ proc default_ld_nm { nm nmflags object } {\n \twhile { [gets $file line] != -1 } {\n \t    verbose \"$line\" 2\n \t    if [regexp \"^(\\[0-9a-fA-F\\]+) \\[a-zA-Z0-9\\] \\\\.*(.+)$\" $line whole value name] {\n-                set name [string trimleft $name \"_\"]\n+\t\tset name [string trimleft $name \"_\"]\n \t\tverbose \"Setting nm_output($name) to 0x$value\" 2\n \t\tset nm_output($name) 0x$value\n \t    }\n@@ -376,12 +376,12 @@ proc ld_link_defsyms {} {\n \n     # ARM targets call __gccmain\n     if {[istarget arm*-*-*]} {\n-        append flags \" --defsym __gccmain=0\"\n+\tappend flags \" --defsym __gccmain=0\"\n     }\n \n     # Windows targets need __main, some prefixed with underscore.\n     if {[istarget *-*-cygwin* ] || [istarget *-*-mingw*]} {\n-        append flags \" --defsym __main=main --defsym ___main=main\"\n+\tappend flags \" --defsym __main=main --defsym ___main=main\"\n     }\n \n     # PowerPC EABI code calls __eabi.\n@@ -579,13 +579,13 @@ proc run_ld_link_tests { ldtests args } {\n \t\tset dump_prog \"\"\n \t\tswitch -- $action {\n \t\t    objdump\n-\t\t        { set dump_prog $objdump }\n+\t\t\t{ set dump_prog $objdump }\n \t\t    nm\n-\t\t        { set dump_prog $nm }\n+\t\t\t{ set dump_prog $nm }\n \t\t    readelf\n-\t\t        { set dump_prog $READELF }\n+\t\t\t{ set dump_prog $READELF }\n \t\t    ld\n-\t\t        { set dump_prog \"ld\" }\n+\t\t\t{ set dump_prog \"ld\" }\n \t\t    default\n \t\t\t{\n \t\t\t    perror \"Unrecognized action $action\"\n@@ -615,12 +615,12 @@ proc run_ld_link_tests { ldtests args } {\n \t\t    }\n \t\t    set env(LC_ALL) \"C\"\n \t\t    set cmd \"$binary $progopts $binfile\"\n-    \t\t    set status [remote_exec host [concat sh -c [list \"$cmd >dump.out 2>ld.stderr\"]] \"\" \"/dev/null\"]\n+\t\t    set status [remote_exec host [concat sh -c [list \"$cmd >dump.out 2>ld.stderr\"]] \"\" \"/dev/null\"]\n \t\t    send_log \"$cmd\\n\"\n-    \t\t    remote_upload host \"ld.stderr\"\n-    \t\t    set comp_output [prune_warnings [file_contents \"ld.stderr\"]]\n-    \t\t    remote_file host delete \"ld.stderr\"\n-    \t\t    remote_file build delete \"ld.stderr\"\n+\t\t    remote_upload host \"ld.stderr\"\n+\t\t    set comp_output [prune_warnings [file_contents \"ld.stderr\"]]\n+\t\t    remote_file host delete \"ld.stderr\"\n+\t\t    remote_file build delete \"ld.stderr\"\n \n \t\t    if {[info exists old_lc_all]} {\n \t\t\tset env(LC_ALL) $old_lc_all\n@@ -639,8 +639,8 @@ proc run_ld_link_tests { ldtests args } {\n \t\t    if { [regexp_diff \"dump.out\" \"$srcdir/$subdir/$dumpfile\"] } then {\n \t\t\tverbose \"output is [file_contents \"dump.out\"]\" 2\n \t\t\tset failed 1\n-\t\t   \tremote_file build delete \"dump.out\"\n-\t\t   \tremote_file host delete \"dump.out\"\n+\t\t\tremote_file build delete \"dump.out\"\n+\t\t\tremote_file host delete \"dump.out\"\n \t\t\tbreak\n \t\t    }\n \t\t    remote_file build delete \"dump.out\"\n@@ -693,7 +693,7 @@ proc run_ld_link_exec_tests { ldtests args } {\n     # linker options are included in GCC spec files then we need the -specs\n     # option.\n     if [board_info [target_info name] exists cflags] {\n-        set board_cflags \" [board_info [target_info name] cflags]\"\n+\tset board_cflags \" [board_info [target_info name] cflags]\"\n     } else {\n \tset board_cflags \"\"\n     }\n@@ -857,7 +857,7 @@ proc run_cc_link_tests { ldtests } {\n     global STATIC_LDFLAGS\n \n     if [board_info [target_info name] exists cflags] {\n-        set board_cflags \" [board_info [target_info name] cflags]\"\n+\tset board_cflags \" [board_info [target_info name] cflags]\"\n     } else {\n \tset board_cflags \"\"\n     }\n@@ -900,28 +900,28 @@ proc run_cc_link_tests { ldtests } {\n \n \t    # Find actions related to error/warning processing.\n \t    switch -- $action {\n-\t        error\n-\t        {\n-\t            set check_ld(source) \"regexp\"\n-\t            set check_ld(regexp) $progopts\n-\t            set check_ld(terminal) 1\n-\t        }\n-\t        warning\n-\t        {\n-\t            set check_ld(source) \"regexp\"\n-\t            set check_ld(regexp) $progopts\n-\t        }\n-\t        error_output\n-\t        {\n-\t            set check_ld(source) \"file\"\n-\t            set check_ld(file) $progopts\n-\t            set check_ld(terminal) 1\n-\t        }\n-\t        warning_output\n-\t        {\n-\t            set check_ld(source) \"file\"\n-\t            set check_ld(file) $progopts\n-\t        }\n+\t\terror\n+\t\t{\n+\t\t    set check_ld(source) \"regexp\"\n+\t\t    set check_ld(regexp) $progopts\n+\t\t    set check_ld(terminal) 1\n+\t\t}\n+\t\twarning\n+\t\t{\n+\t\t    set check_ld(source) \"regexp\"\n+\t\t    set check_ld(regexp) $progopts\n+\t\t}\n+\t\terror_output\n+\t\t{\n+\t\t    set check_ld(source) \"file\"\n+\t\t    set check_ld(file) $progopts\n+\t\t    set check_ld(terminal) 1\n+\t\t}\n+\t\twarning_output\n+\t\t{\n+\t\t    set check_ld(source) \"file\"\n+\t\t    set check_ld(file) $progopts\n+\t\t}\n \t    }\n \t}\n \n@@ -988,15 +988,15 @@ proc run_cc_link_tests { ldtests } {\n \t    }\n \n \t    if { $check_ld(source) != \"\" } then {\n-                if { $ld_output == \"\" } then {\n-                    verbose -log \"Linker was expected to give error or warning\"\n-                    set failed 1\n-                }\n+\t\tif { $ld_output == \"\" } then {\n+\t\t    verbose -log \"Linker was expected to give error or warning\"\n+\t\t    set failed 1\n+\t\t}\n \t    } else {\n-                if { $ld_output != \"\" } then {\n-                    verbose -log \"Unexpected linker warning or error\"\n-                    set failed 1\n-                }\n+\t\tif { $ld_output != \"\" } then {\n+\t\t    verbose -log \"Unexpected linker warning or error\"\n+\t\t    set failed 1\n+\t\t}\n \t    }\n \t}\n \n@@ -1011,11 +1011,11 @@ proc run_cc_link_tests { ldtests } {\n \t\tset dump_prog \"\"\n \t\tswitch -- $action {\n \t\t    objdump\n-\t\t        { set dump_prog $objdump }\n+\t\t\t{ set dump_prog $objdump }\n \t\t    nm\n-\t\t        { set dump_prog $nm }\n+\t\t\t{ set dump_prog $nm }\n \t\t    readelf\n-\t\t        { set dump_prog $READELF }\n+\t\t\t{ set dump_prog $READELF }\n \t\t    error {}\n \t\t    warning {}\n \t\t    error_output {}\n@@ -1082,7 +1082,7 @@ proc check_gc_sections_available { } {\n \t# Some targets don't support gc-sections despite whatever's\n \t# advertised by ld's options.\n \tif {   [istarget alpha-*-*]\n-            || [istarget bpf-*-*]\n+\t    || [istarget bpf-*-*]\n \t    || [istarget d30v-*-*]\n \t    || [istarget dlx-*-*]\n \t    || [istarget hppa*64-*-*]\n@@ -1200,7 +1200,7 @@ proc check_compiler_available { } {\n     global CC\n \n     if {![info exists compiler_available_saved]} {\n-        if { [which $CC] == 0 } {\n+\tif { [which $CC] == 0 } {\n \t    set compiler_available_saved 0\n \t    return 0\n \t}\n@@ -1266,7 +1266,7 @@ proc check_lto_available { } {\n     global CC\n \n     if {![info exists lto_available_saved]} {\n-        if { ![check_gcc_plugin_enabled] } {\n+\tif { ![check_gcc_plugin_enabled] } {\n \t    set lto_available_saved 0\n \t    return 0\n \t}\n@@ -1309,7 +1309,7 @@ proc check_lto_fat_available { } {\n     global CC\n \n     if {![info exists lto_fat_available_saved]} {\n-        if { ![check_gcc_plugin_enabled] } {\n+\tif { ![check_gcc_plugin_enabled] } {\n \t    set lto_fat_available_saved 0\n \t    return 0\n \t}\n@@ -1352,7 +1352,7 @@ proc check_lto_shared_available { } {\n     global CC\n \n     if {![info exists lto_shared_available_saved]} {\n-        if { ![check_gcc_plugin_enabled] } {\n+\tif { ![check_gcc_plugin_enabled] } {\n \t    set lto_shared_available_saved 0\n \t    return 0\n \t}\n@@ -1418,7 +1418,7 @@ proc check_ifunc_available { } {\n     global CC\n \n     if {![info exists ifunc_available_saved]} {\n-        if { ![check_compiler_available] } {\n+\tif { ![check_compiler_available] } {\n \t    set ifunc_available_saved 0\n \t    return 0\n \t}\n@@ -1467,7 +1467,7 @@ proc check_ifunc_attribute_available { } {\n     global CC\n \n     if {![info exists ifunc_attribute_available_saved]} {\n-        if { ![check_compiler_available] } {\n+\tif { ![check_compiler_available] } {\n \t    set ifunc_attribute_available_saved 0\n \t    return 0\n \t}\n@@ -1514,7 +1514,7 @@ proc check_libdl_available { } {\n     global CC\n \n     if {![info exists libdl_available_saved]} {\n-        if { ![check_compiler_available] } {\n+\tif { ![check_compiler_available] } {\n \t    set libdl_available_saved 0\n \t    return 0\n \t}\n@@ -1550,7 +1550,7 @@ proc check_gnu2_tls_available { } {\n     global GNU2_CFLAGS\n \n     if {![info exists gnu2_tls_available_saved]} {\n-        if { ![check_compiler_available] || \"$GNU2_CFLAGS\" == \"\" } {\n+\tif { ![check_compiler_available] || \"$GNU2_CFLAGS\" == \"\" } {\n \t    set gnu2_tls_available_saved 0\n \t    return 0\n \t}"
    }
  ]
}