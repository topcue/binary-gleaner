{
  "sha": "a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
  "node_id": "C_kwDOANOeidoAKGE0MjNjOWYzOTI5NGI1Y2M2ZjY1OGExNDVmMzg0NGQxOWYzZjNjZjE",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-01-28T19:14:37Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-01-28T19:14:37Z"
    },
    "message": "Use register maps for gp regsets on FreeBSD/x86 core dumps.\n\nIn particular, this permits reporting the value of the $ds, $es, $fs,\nand $gs segment registers from amd64 core dumps since they are stored\nas 16-bit values rather than the 32-bit size assumed by i386_gregset.",
    "tree": {
      "sha": "b537a53a06be1066e71f790eac63107338cb7e52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b537a53a06be1066e71f790eac63107338cb7e52"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a423c9f39294b5cc6f658a145f3844d19f3f3cf1/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b623bbc9a5b18a1100837450b7806de220068ccc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b623bbc9a5b18a1100837450b7806de220068ccc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b623bbc9a5b18a1100837450b7806de220068ccc"
    }
  ],
  "stats": {
    "total": 147,
    "additions": 87,
    "deletions": 60
  },
  "files": [
    {
      "sha": "f61ca74d88a568e8abd96a5dc69a39ad10e6eead",
      "filename": "gdb/amd64-fbsd-tdep.c",
      "status": "modified",
      "additions": 47,
      "deletions": 42,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a423c9f39294b5cc6f658a145f3844d19f3f3cf1/gdb/amd64-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a423c9f39294b5cc6f658a145f3844d19f3f3cf1/gdb/amd64-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-tdep.c?ref=a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
      "patch": "@@ -32,6 +32,51 @@\n #include \"solib-svr4.h\"\n #include \"inferior.h\"\n \n+/* The general-purpose regset consists of 22 64-bit slots, most of\n+   which contain individual registers, but a few contain multiple\n+   16-bit segment registers.  */\n+#define AMD64_FBSD_SIZEOF_GREGSET\t(22 * 8)\n+\n+/* Register maps.  */\n+\n+static const struct regcache_map_entry amd64_fbsd_gregmap[] =\n+{\n+  { 1, AMD64_R15_REGNUM, 0 },\n+  { 1, AMD64_R14_REGNUM, 0 },\n+  { 1, AMD64_R13_REGNUM, 0 },\n+  { 1, AMD64_R12_REGNUM, 0 },\n+  { 1, AMD64_R11_REGNUM, 0 },\n+  { 1, AMD64_R10_REGNUM, 0 },\n+  { 1, AMD64_R9_REGNUM, 0 },\n+  { 1, AMD64_R8_REGNUM, 0 },\n+  { 1, AMD64_RDI_REGNUM, 0 },\n+  { 1, AMD64_RSI_REGNUM, 0 },\n+  { 1, AMD64_RBP_REGNUM, 0 },\n+  { 1, AMD64_RBX_REGNUM, 0 },\n+  { 1, AMD64_RDX_REGNUM, 0 },\n+  { 1, AMD64_RCX_REGNUM, 0 },\n+  { 1, AMD64_RAX_REGNUM, 0 },\n+  { 1, REGCACHE_MAP_SKIP, 4 },\t/* trapno */\n+  { 1, AMD64_FS_REGNUM, 2 },\n+  { 1, AMD64_GS_REGNUM, 2 },\n+  { 1, REGCACHE_MAP_SKIP, 4 },\t/* err */\n+  { 1, AMD64_ES_REGNUM, 2 },\n+  { 1, AMD64_DS_REGNUM, 2 },\n+  { 1, AMD64_RIP_REGNUM, 0 },\n+  { 1, AMD64_CS_REGNUM, 8 },\n+  { 1, AMD64_EFLAGS_REGNUM, 8 },\n+  { 1, AMD64_RSP_REGNUM, 0 },\n+  { 1, AMD64_SS_REGNUM, 8 },\n+  { 0 }\n+};\n+\n+/* Register set definitions.  */\n+\n+const struct regset amd64_fbsd_gregset =\n+{\n+  amd64_fbsd_gregmap, regcache_supply_regset, regcache_collect_regset\n+};\n+\n /* Support for signal handlers.  */\n \n /* Return whether THIS_FRAME corresponds to a FreeBSD sigtramp\n@@ -80,42 +125,6 @@ amd64fbsd_sigcontext_addr (struct frame_info *this_frame)\n   return sp + 16;\n }\n \f\n-/* FreeBSD 5.1-RELEASE or later.  */\n-\n-/* Mapping between the general-purpose registers in `struct reg'\n-   format and GDB's register cache layout.\n-\n-   Note that some registers are 32-bit, but since we're little-endian\n-   we get away with that.  */\n-\n-/* From <machine/reg.h>.  */\n-static int amd64fbsd_r_reg_offset[] =\n-{\n-  14 * 8,\t\t\t/* %rax */\n-  11 * 8,\t\t\t/* %rbx */\n-  13 * 8,\t\t\t/* %rcx */\n-  12 * 8,\t\t\t/* %rdx */\n-  9 * 8,\t\t\t/* %rsi */\n-  8 * 8,\t\t\t/* %rdi */\n-  10 * 8,\t\t\t/* %rbp */\n-  20 * 8,\t\t\t/* %rsp */\n-  7 * 8,\t\t\t/* %r8 ...  */\n-  6 * 8,\n-  5 * 8,\n-  4 * 8,\n-  3 * 8,\n-  2 * 8,\n-  1 * 8,\n-  0 * 8,\t\t\t/* ... %r15 */\n-  17 * 8,\t\t\t/* %rip */\n-  19 * 8,\t\t\t/* %eflags */\n-  18 * 8,\t\t\t/* %cs */\n-  21 * 8,\t\t\t/* %ss */\n-  -1,\t\t\t\t/* %ds */\n-  -1,\t\t\t\t/* %es */\n-  -1,\t\t\t\t/* %fs */\n-  -1\t\t\t\t/* %gs */\n-};\n \n /* From <machine/signal.h>.  */\n int amd64fbsd_sc_reg_offset[] =\n@@ -193,8 +202,8 @@ amd64fbsd_iterate_over_regset_sections (struct gdbarch *gdbarch,\n {\n   i386_gdbarch_tdep *tdep = (i386_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n-  cb (\".reg\", tdep->sizeof_gregset, tdep->sizeof_gregset, &i386_gregset, NULL,\n-      cb_data);\n+  cb (\".reg\", AMD64_FBSD_SIZEOF_GREGSET, AMD64_FBSD_SIZEOF_GREGSET,\n+      &amd64_fbsd_gregset, NULL, cb_data);\n   cb (\".reg2\", tdep->sizeof_fpregset, tdep->sizeof_fpregset, &amd64_fpregset,\n       NULL, cb_data);\n   cb (\".reg-xstate\", X86_XSTATE_SIZE (tdep->xcr0), X86_XSTATE_SIZE (tdep->xcr0),\n@@ -233,10 +242,6 @@ amd64fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* Obviously FreeBSD is BSD-based.  */\n   i386bsd_init_abi (info, gdbarch);\n \n-  tdep->gregset_reg_offset = amd64fbsd_r_reg_offset;\n-  tdep->gregset_num_regs = ARRAY_SIZE (amd64fbsd_r_reg_offset);\n-  tdep->sizeof_gregset = 22 * 8;\n-\n   amd64_init_abi (info, gdbarch,\n \t\t  amd64_target_description (X86_XSTATE_SSE_MASK, true));\n "
    },
    {
      "sha": "6d720d8377f16a8a4ea735a728100d6e70062e0a",
      "filename": "gdb/i386-fbsd-tdep.c",
      "status": "modified",
      "additions": 40,
      "deletions": 18,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a423c9f39294b5cc6f658a145f3844d19f3f3cf1/gdb/i386-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a423c9f39294b5cc6f658a145f3844d19f3f3cf1/gdb/i386-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-tdep.c?ref=a423c9f39294b5cc6f658a145f3844d19f3f3cf1",
      "patch": "@@ -32,6 +32,42 @@\n #include \"solib-svr4.h\"\n #include \"inferior.h\"\n \n+/* The general-purpose regset consists of 19 32-bit slots.  */\n+#define I386_FBSD_SIZEOF_GREGSET\t(19 * 4)\n+\n+/* Register maps.  */\n+\n+static const struct regcache_map_entry i386_fbsd_gregmap[] =\n+{\n+  { 1, I386_FS_REGNUM, 4 },\n+  { 1, I386_ES_REGNUM, 4 },\n+  { 1, I386_DS_REGNUM, 4 },\n+  { 1, I386_EDI_REGNUM, 0 },\n+  { 1, I386_ESI_REGNUM, 0 },\n+  { 1, I386_EBP_REGNUM, 0 },\n+  { 1, REGCACHE_MAP_SKIP, 4 },\t/* isp */\n+  { 1, I386_EBX_REGNUM, 0 },\n+  { 1, I386_EDX_REGNUM, 0 },\n+  { 1, I386_ECX_REGNUM, 0 },\n+  { 1, I386_EAX_REGNUM, 0 },\n+  { 1, REGCACHE_MAP_SKIP, 4 },\t/* trapno */\n+  { 1, REGCACHE_MAP_SKIP, 4 },\t/* err */\n+  { 1, I386_EIP_REGNUM, 0 },\n+  { 1, I386_CS_REGNUM, 4 },\n+  { 1, I386_EFLAGS_REGNUM, 0 },\n+  { 1, I386_ESP_REGNUM, 0 },\n+  { 1, I386_SS_REGNUM, 4 },\n+  { 1, I386_GS_REGNUM, 4 },\n+  { 0 }\n+};\n+\n+/* Register set definitions.  */\n+\n+const struct regset i386_fbsd_gregset =\n+{\n+  i386_fbsd_gregmap, regcache_supply_regset, regcache_collect_regset\n+};\n+\n /* Support for signal handlers.  */\n \n /* Return whether THIS_FRAME corresponds to a FreeBSD sigtramp\n@@ -111,17 +147,6 @@ i386fbsd_sigtramp_p (struct frame_info *this_frame)\n   return 1;\n }\n \n-/* From <machine/reg.h>.  */\n-static int i386fbsd_r_reg_offset[] =\n-{\n-  10 * 4, 9 * 4, 8 * 4, 7 * 4,\t/* %eax, %ecx, %edx, %ebx */\n-  16 * 4, 5 * 4,\t\t/* %esp, %ebp */\n-  4 * 4, 3 * 4,\t\t\t/* %esi, %edi */\n-  13 * 4, 15 * 4,\t\t/* %eip, %eflags */\n-  14 * 4, 17 * 4,\t\t/* %cs, %ss */\n-  2 * 4, 1 * 4, 0 * 4, 18 * 4\t/* %ds, %es, %fs, %gs */\n-};\n-\n /* From <machine/signal.h>.  */\n int i386fbsd_sc_reg_offset[] =\n {\n@@ -229,8 +254,8 @@ i386fbsd_iterate_over_regset_sections (struct gdbarch *gdbarch,\n {\n   i386_gdbarch_tdep *tdep = (i386_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n-  cb (\".reg\", tdep->sizeof_gregset, tdep->sizeof_gregset, &i386_gregset, NULL,\n-      cb_data);\n+  cb (\".reg\", I386_FBSD_SIZEOF_GREGSET, I386_FBSD_SIZEOF_GREGSET,\n+      &i386_fbsd_gregset, NULL, cb_data);\n   cb (\".reg2\", tdep->sizeof_fpregset, tdep->sizeof_fpregset, &i386_fpregset,\n       NULL, cb_data);\n \n@@ -276,11 +301,8 @@ i386fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* Obviously FreeBSD is BSD-based.  */\n   i386bsd_init_abi (info, gdbarch);\n \n-  /* FreeBSD has a different `struct reg', and reserves some space for\n-     its FPU emulator in `struct fpreg'.  */\n-  tdep->gregset_reg_offset = i386fbsd_r_reg_offset;\n-  tdep->gregset_num_regs = ARRAY_SIZE (i386fbsd_r_reg_offset);\n-  tdep->sizeof_gregset = 19 * 4;\n+  /* FreeBSD reserves some space for its FPU emulator in\n+     `struct fpreg'.  */\n   tdep->sizeof_fpregset = 176;\n \n   /* FreeBSD uses -freg-struct-return by default.  */"
    }
  ]
}