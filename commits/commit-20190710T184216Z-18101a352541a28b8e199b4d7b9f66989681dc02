{
  "sha": "18101a352541a28b8e199b4d7b9f66989681dc02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTgxMDFhMzUyNTQxYTI4YjhlMTk5YjRkN2I5ZjY2OTg5NjgxZGMwMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-26T18:42:14Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T18:42:16Z"
    },
    "message": "Change remote-sim.c to use type-safe registry\n\nThis changes remote-sim.c to use the type-safe registry.\n\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* remote-sim.c (struct sim_inferior_data): Add initializers,\n\tconstructor, and destructor.\n\t(sim_inferior_data_key): Change type.  Move lower.\n\t(check_for_duplicate_sim_descriptor): Update.\n\t(get_sim_inferior_data): Use new.  Update.\n\t(~sim_inferior_data_cleanup): Rename from\n\tsim_inferior_data_cleanup.  Simplify.\n\t(gdbsim_close_inferior, simulator_command)\n\t(sim_command_completer, _initialize_remote_sim): Update.\n\t(next_pid, INITIAL_PID): Move earlier.",
    "tree": {
      "sha": "4a0bac320b9c281dd33cf01c546b049324f1aca3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a0bac320b9c281dd33cf01c546b049324f1aca3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/18101a352541a28b8e199b4d7b9f66989681dc02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18101a352541a28b8e199b4d7b9f66989681dc02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/18101a352541a28b8e199b4d7b9f66989681dc02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18101a352541a28b8e199b4d7b9f66989681dc02/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05b08ac1608c8355201db21fe4c871677466f0d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05b08ac1608c8355201db21fe4c871677466f0d5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05b08ac1608c8355201db21fe4c871677466f0d5"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 42,
    "deletions": 50
  },
  "files": [
    {
      "sha": "92338cce59e04f164e1501800c925dc728a62dd7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18101a352541a28b8e199b4d7b9f66989681dc02/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18101a352541a28b8e199b4d7b9f66989681dc02/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=18101a352541a28b8e199b4d7b9f66989681dc02",
      "patch": "@@ -1,3 +1,16 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* remote-sim.c (struct sim_inferior_data): Add initializers,\n+\tconstructor, and destructor.\n+\t(sim_inferior_data_key): Change type.  Move lower.\n+\t(check_for_duplicate_sim_descriptor): Update.\n+\t(get_sim_inferior_data): Use new.  Update.\n+\t(~sim_inferior_data_cleanup): Rename from\n+\tsim_inferior_data_cleanup.  Simplify.\n+\t(gdbsim_close_inferior, simulator_command)\n+\t(sim_command_completer, _initialize_remote_sim): Update.\n+\t(next_pid, INITIAL_PID): Move earlier.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* python/python-internal.h (create_thread_object): Return"
    },
    {
      "sha": "67b46909455a2343147c49b0a5861168ae6661bf",
      "filename": "gdb/remote-sim.c",
      "status": "modified",
      "additions": 29,
      "deletions": 50,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18101a352541a28b8e199b4d7b9f66989681dc02/gdb/remote-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18101a352541a28b8e199b4d7b9f66989681dc02/gdb/remote-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-sim.c?ref=18101a352541a28b8e199b4d7b9f66989681dc02",
      "patch": "@@ -132,12 +132,25 @@ struct gdbsim_target final\n \n static struct gdbsim_target gdbsim_ops;\n \n-static const struct inferior_data *sim_inferior_data_key;\n+/* Value of the next pid to allocate for an inferior.  As indicated\n+   elsewhere, its initial value is somewhat arbitrary; it's critical\n+   though that it's not zero or negative.  */\n+static int next_pid;\n+#define INITIAL_PID 42000\n \n /* Simulator-specific, per-inferior state.  */\n struct sim_inferior_data {\n+  explicit sim_inferior_data (SIM_DESC desc)\n+    : gdbsim_desc (desc),\n+      remote_sim_ptid (next_pid, 0, next_pid)\n+  {\n+    ++next_pid;\n+  }\n+\n+  ~sim_inferior_data ();\n+\n   /* Flag which indicates whether or not the program has been loaded.  */\n-  int program_loaded;\n+  int program_loaded = 0;\n \n   /* Simulator descriptor for this inferior.  */\n   SIM_DESC gdbsim_desc;\n@@ -150,22 +163,18 @@ struct sim_inferior_data {\n   ptid_t remote_sim_ptid;\n \n   /* Signal with which to resume.  */\n-  enum gdb_signal resume_siggnal;\n+  enum gdb_signal resume_siggnal = GDB_SIGNAL_0;\n \n   /* Flag which indicates whether resume should step or not.  */\n-  int resume_step;\n+  int resume_step = 0;\n };\n \n+static inferior_key<sim_inferior_data> sim_inferior_data_key;\n+\n /* Flag indicating the \"open\" status of this module.  It's set to 1\n    in gdbsim_open() and 0 in gdbsim_close().  */\n static int gdbsim_is_open = 0;\n \n-/* Value of the next pid to allocate for an inferior.  As indicated\n-   elsewhere, its initial value is somewhat arbitrary; it's critical\n-   though that it's not zero or negative.  */\n-static int next_pid;\n-#define INITIAL_PID 42000\n-\n /* Argument list to pass to sim_open().  It is allocated in gdbsim_open()\n    and deallocated in gdbsim_close().  The lifetime needs to extend beyond\n    the call to gdbsim_open() due to the fact that other sim instances other\n@@ -186,8 +195,7 @@ check_for_duplicate_sim_descriptor (struct inferior *inf, void *arg)\n   struct sim_inferior_data *sim_data;\n   SIM_DESC new_sim_desc = (SIM_DESC) arg;\n \n-  sim_data = ((struct sim_inferior_data *)\n-\t      inferior_data (inf, sim_inferior_data_key));\n+  sim_data = sim_inferior_data_key.get (inf);\n \n   return (sim_data != NULL && sim_data->gdbsim_desc == new_sim_desc);\n }\n@@ -204,8 +212,7 @@ static struct sim_inferior_data *\n get_sim_inferior_data (struct inferior *inf, int sim_instance_needed)\n {\n   SIM_DESC sim_desc = NULL;\n-  struct sim_inferior_data *sim_data\n-    = (struct sim_inferior_data *) inferior_data (inf, sim_inferior_data_key);\n+  struct sim_inferior_data *sim_data = sim_inferior_data_key.get (inf);\n \n   /* Try to allocate a new sim instance, if needed.  We do this ahead of\n      a potential allocation of a sim_inferior_data struct in order to\n@@ -240,18 +247,7 @@ get_sim_inferior_data (struct inferior *inf, int sim_instance_needed)\n \n   if (sim_data == NULL)\n     {\n-      sim_data = XCNEW(struct sim_inferior_data);\n-      set_inferior_data (inf, sim_inferior_data_key, sim_data);\n-\n-      /* Allocate a ptid for this inferior.  */\n-      sim_data->remote_sim_ptid = ptid_t (next_pid, 0, next_pid);\n-      next_pid++;\n-\n-      /* Initialize the other instance variables.  */\n-      sim_data->program_loaded = 0;\n-      sim_data->gdbsim_desc = sim_desc;\n-      sim_data->resume_siggnal = GDB_SIGNAL_0;\n-      sim_data->resume_step = 0;\n+      sim_data = sim_inferior_data_key.emplace (inf, sim_desc);\n     }\n   else if (sim_desc)\n     {\n@@ -287,20 +283,10 @@ get_sim_inferior_data_by_ptid (ptid_t ptid, int sim_instance_needed)\n \n /* Free the per-inferior simulator data.  */\n \n-static void\n-sim_inferior_data_cleanup (struct inferior *inf, void *data)\n+sim_inferior_data::~sim_inferior_data ()\n {\n-  struct sim_inferior_data *sim_data = (struct sim_inferior_data *) data;\n-\n-  if (sim_data != NULL)\n-    {\n-      if (sim_data->gdbsim_desc)\n-\t{\n-\t  sim_close (sim_data->gdbsim_desc, 0);\n-\t  sim_data->gdbsim_desc = NULL;\n-\t}\n-      xfree (sim_data);\n-    }\n+  if (gdbsim_desc)\n+    sim_close (gdbsim_desc, 0);\n }\n \n static void\n@@ -789,14 +775,12 @@ gdbsim_target_open (const char *args, int from_tty)\n static int\n gdbsim_close_inferior (struct inferior *inf, void *arg)\n {\n-  struct sim_inferior_data *sim_data\n-    = (struct sim_inferior_data *) inferior_data (inf, sim_inferior_data_key);\n+  struct sim_inferior_data *sim_data = sim_inferior_data_key.get (inf);\n   if (sim_data != NULL)\n     {\n       ptid_t ptid = sim_data->remote_sim_ptid;\n \n-      sim_inferior_data_cleanup (inf, sim_data);\n-      set_inferior_data (inf, sim_inferior_data_key, NULL);\n+      sim_inferior_data_key.clear (inf);\n \n       /* Having a ptid allocated and stored in remote_sim_ptid does\n \t not mean that a corresponding inferior was ever created.\n@@ -1193,8 +1177,7 @@ simulator_command (const char *args, int from_tty)\n      thus allocating memory that would not be garbage collected until\n      the ultimate destruction of the associated inferior.  */\n \n-  sim_data  = ((struct sim_inferior_data *)\n-\t       inferior_data (current_inferior (), sim_inferior_data_key));\n+  sim_data  = sim_inferior_data_key.get (current_inferior ());\n   if (sim_data == NULL || sim_data->gdbsim_desc == NULL)\n     {\n \n@@ -1225,8 +1208,7 @@ sim_command_completer (struct cmd_list_element *ignore,\n {\n   struct sim_inferior_data *sim_data;\n \n-  sim_data = ((struct sim_inferior_data *)\n-\t      inferior_data (current_inferior (), sim_inferior_data_key));\n+  sim_data = sim_inferior_data_key.get (current_inferior ());\n   if (sim_data == NULL || sim_data->gdbsim_desc == NULL)\n     return;\n \n@@ -1324,7 +1306,4 @@ _initialize_remote_sim (void)\n   c = add_com (\"sim\", class_obscure, simulator_command,\n \t       _(\"Send a command to the simulator.\"));\n   set_cmd_completer (c, sim_command_completer);\n-\n-  sim_inferior_data_key\n-    = register_inferior_data_with_cleanup (NULL, sim_inferior_data_cleanup);\n }"
    }
  ]
}