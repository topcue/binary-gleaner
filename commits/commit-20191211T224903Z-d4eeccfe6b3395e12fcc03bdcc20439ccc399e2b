{
  "sha": "d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDRlZWNjZmU2YjMzOTVlMTJmY2MwM2JkY2MyMDQzOWNjYzM5OWUyYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-26T22:37:32Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-11T22:49:03Z"
    },
    "message": "Change \"winheight\" resizing to use new layout code\n\nThe \"winheight\" command resizes a specified window, resizing the other\nwindows in the layout to adapt.  In the current code, this is done by\nexamining each possible layout separately.  The new layout code has a\nmore general approach to handling this, and this patch simply removes\nthe old code in favor of a call into the new layout engine.\n\ngdb/ChangeLog\n2019-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-win.c (tui_set_win_height_command): Call\n\ttui_adjust_window_height.\n\t(tui_adjust_win_heights, new_height_ok): Remove.\n\t* tui/tui-layout.h (tui_adjust_window_height): Declare.\n\t* tui/tui-layout.c (tui_adjust_window_height): New function.\n\nChange-Id: I6bb681375a46adc8d29fd06f581deed4e078e78a",
    "tree": {
      "sha": "e5fa11e0988ec21da67163b834142dce19fa8b1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5fa11e0988ec21da67163b834142dce19fa8b1f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d97994549706f8f65fe9726b1fec1f0d643f822",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d97994549706f8f65fe9726b1fec1f0d643f822",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d97994549706f8f65fe9726b1fec1f0d643f822"
    }
  ],
  "stats": {
    "total": 301,
    "additions": 22,
    "deletions": 279
  },
  "files": [
    {
      "sha": "c80c5403516c39c5545c20b3120e8daa524de605",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-win.c (tui_set_win_height_command): Call\n+\ttui_adjust_window_height.\n+\t(tui_adjust_win_heights, new_height_ok): Remove.\n+\t* tui/tui-layout.h (tui_adjust_window_height): Declare.\n+\t* tui/tui-layout.c (tui_adjust_window_height): New function.\n+\n 2019-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (tui_resize_all): Remove code, call"
    },
    {
      "sha": "9ab89a87fa4154bfa3d7eff7b957aa8dd1265e0f",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
      "patch": "@@ -70,6 +70,14 @@ tui_apply_current_layout ()\n   applied_layout->apply (0, 0, tui_term_width (), tui_term_height ());\n }\n \n+/* See tui-layout.  */\n+\n+void\n+tui_adjust_window_height (struct tui_win_info *win, int new_height)\n+{\n+  applied_layout->adjust_size (win->name (), new_height);\n+}\n+\n /* Show the screen layout defined.  */\n static void\n show_layout (enum tui_layout_type layout)"
    },
    {
      "sha": "691d4ad2e22b05a0ba6f09e9310d980ef9439aed",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
      "patch": "@@ -177,4 +177,8 @@ extern void tui_set_layout (enum tui_layout_type);\n /* Apply the current layout.  */\n extern void tui_apply_current_layout ();\n \n+/* Adjust the window height of WIN to NEW_HEIGHT.  */\n+extern void tui_adjust_window_height (struct tui_win_info *win,\n+\t\t\t\t      int new_height);\n+\n #endif /* TUI_TUI_LAYOUT_H */"
    },
    {
      "sha": "ac3690a7f456e90e15f5ca32872e0ad07a34e086",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 2,
      "deletions": 279,
      "changes": 281,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=d4eeccfe6b3395e12fcc03bdcc20439ccc399e2b",
      "patch": "@@ -56,9 +56,6 @@\n \n #include <signal.h>\n \n-static enum tui_status tui_adjust_win_heights (struct tui_win_info *, \n-\t\t\t\t\t       int);\n-static int new_height_ok (struct tui_win_info *, int);\n static void tui_set_tab_width_command (const char *, int);\n static void tui_refresh_all_command (const char *, int);\n static void tui_all_windows_info (const char *, int);\n@@ -932,12 +929,8 @@ tui_set_win_height_command (const char *arg, int from_tty)\n \n \t\t  /* Now change the window's height, and adjust\n \t\t     all other windows around it.  */\n-\t\t  if (tui_adjust_win_heights (win_info,\n-\t\t\t\t\t      new_height) == TUI_FAILURE)\n-\t\t    warning (_(\"Invalid window height specified.\\n%s\"),\n-\t\t\t     WIN_HEIGHT_USAGE);\n-\t\t  else\n-\t\t    tui_update_gdb_sizes ();\n+\t\t  tui_adjust_window_height (win_info, new_height);\n+\t\t  tui_update_gdb_sizes ();\n \t\t}\n \t      else\n \t\twarning (_(\"Invalid window height specified.\\n%s\"),\n@@ -951,170 +944,6 @@ tui_set_win_height_command (const char *arg, int from_tty)\n     printf_filtered (WIN_HEIGHT_USAGE);\n }\n \n-/* Function to adjust all window heights around the primary.   */\n-static enum tui_status\n-tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n-\t\t\tint new_height)\n-{\n-  enum tui_status status = TUI_FAILURE;\n-\n-  if (new_height_ok (primary_win_info, new_height))\n-    {\n-      status = TUI_SUCCESS;\n-      if (new_height != primary_win_info->height)\n-\t{\n-\t  int diff;\n-\t  struct tui_win_info *win_info;\n-\t  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n-\t  enum tui_layout_type cur_layout = tui_current_layout ();\n-\t  int width = tui_term_width ();\n-\n-\t  diff = (new_height - primary_win_info->height) * (-1);\n-\t  if (cur_layout == SRC_COMMAND \n-\t      || cur_layout == DISASSEM_COMMAND)\n-\t    {\n-\t      struct tui_win_info *src_win_info;\n-\n-\t      primary_win_info->resize (new_height, width,\n-\t\t\t\t\t0, primary_win_info->y);\n-\t      if (primary_win_info->type == CMD_WIN)\n-\t\t{\n-\t\t  win_info = *(tui_source_windows ().begin ());\n-\t\t  src_win_info = win_info;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  win_info = tui_win_list[CMD_WIN];\n-\t\t  src_win_info = primary_win_info;\n-\t\t}\n-\t      win_info->resize (win_info->height + diff, width,\n-\t\t\t\t0, win_info->y);\n-\t      TUI_CMD_WIN->y = locator->y + 1;\n-\t      if ((src_win_info->type == SRC_WIN\n-\t\t   || src_win_info->type == DISASSEM_WIN))\n-\t\t{\n-\t\t  tui_source_window_base *src_base\n-\t\t    = (tui_source_window_base *) src_win_info;\n-\t\t  if (src_base->content.empty ())\n-\t\t    src_base->erase_source_content ();\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      struct tui_win_info *first_win;\n-\t      struct tui_source_window_base *second_win;\n-\t      tui_source_window_base *src1;\n-\n-\t      if (cur_layout == SRC_DISASSEM_COMMAND)\n-\t\t{\n-\t\t  src1 = TUI_SRC_WIN;\n-\t\t  first_win = src1;\n-\t\t  second_win = TUI_DISASM_WIN;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  src1 = nullptr;\n-\t\t  first_win = TUI_DATA_WIN;\n-\t\t  second_win = *(tui_source_windows ().begin ());\n-\t\t}\n-\t      if (primary_win_info == TUI_CMD_WIN)\n-\t\t{ /* Split the change in height across the 1st & 2nd\n-\t\t     windows, adjusting them as well.  */\n-\t\t  /* Subtract the locator.  */\n-\t\t  int first_split_diff = diff / 2;\n-\t\t  int second_split_diff = first_split_diff;\n-\n-\t\t  if (diff % 2)\n-\t\t    {\n-\t\t      if (first_win->height >\n-\t\t\t  second_win->height)\n-\t\t\tif (diff < 0)\n-\t\t\t  first_split_diff--;\n-\t\t\telse\n-\t\t\t  first_split_diff++;\n-\t\t      else\n-\t\t\t{\n-\t\t\t  if (diff < 0)\n-\t\t\t    second_split_diff--;\n-\t\t\t  else\n-\t\t\t    second_split_diff++;\n-\t\t\t}\n-\t\t    }\n-\t\t  /* Make sure that the minimum heights are\n-\t\t     honored.  */\n-\t\t  while ((first_win->height + first_split_diff) < 3)\n-\t\t    {\n-\t\t      first_split_diff++;\n-\t\t      second_split_diff--;\n-\t\t    }\n-\t\t  while ((second_win->height + second_split_diff) < 3)\n-\t\t    {\n-\t\t      second_split_diff++;\n-\t\t      first_split_diff--;\n-\t\t    }\n-\t\t  first_win->resize (first_win->height + first_split_diff,\n-\t\t\t\t     width,\n-\t\t\t\t     0, first_win->y);\n-\t\t  second_win->resize (second_win->height + second_split_diff,\n-\t\t\t\t      width,\n-\t\t\t\t      0, first_win->height - 1);\n-\t\t  locator->resize (1, width,\n-\t\t\t\t   0, (second_win->y\n-\t\t\t\t       + second_win->height + 1));\n-\n-\t\t  TUI_CMD_WIN->resize (new_height, width,\n-\t\t\t\t       0, locator->y + 1);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if ((TUI_CMD_WIN->height + diff) < 1)\n-\t\t    { /* If there is no way to increase the command\n-\t\t\t window take real estate from the 1st or 2nd\n-\t\t\t window.  */\n-\t\t      if ((TUI_CMD_WIN->height + diff) < 1)\n-\t\t\t{\n-\t\t\t  int i;\n-\n-\t\t\t  for (i = TUI_CMD_WIN->height + diff;\n-\t\t\t       (i < 1); i++)\n-\t\t\t    if (primary_win_info == first_win)\n-\t\t\t      second_win->height--;\n-\t\t\t    else\n-\t\t\t      first_win->height--;\n-\t\t\t}\n-\t\t    }\n-\t\t  if (primary_win_info == first_win)\n-\t\t    first_win->resize (new_height, width, 0, 0);\n-\t\t  else\n-\t\t    first_win->resize (first_win->height, width, 0, 0);\n-\t\t  second_win->y = first_win->height - 1;\n-\t\t  if (primary_win_info == second_win)\n-\t\t    second_win->resize (new_height, width,\n-\t\t\t\t\t0, first_win->height - 1);\n-\t\t  else\n-\t\t    second_win->resize (second_win->height, width,\n-\t\t\t\t\t0, first_win->height - 1);\n-\t\t  locator->resize (1, width,\n-\t\t\t\t   0, (second_win->y\n-\t\t\t\t       + second_win->height + 1));\n-\t\t  TUI_CMD_WIN->y = locator->y + 1;\n-\t\t  if ((TUI_CMD_WIN->height + diff) < 1)\n-\t\t    TUI_CMD_WIN->resize (1, width, 0, locator->y + 1);\n-\t\t  else\n-\t\t    TUI_CMD_WIN->resize (TUI_CMD_WIN->height + diff, width,\n-\t\t\t\t\t 0, locator->y + 1);\n-\t\t}\n-\t      if (src1 != nullptr && src1->content.empty ())\n-\t\tsrc1->erase_source_content ();\n-\t      if (second_win->content.empty ())\n-\t\tsecond_win->erase_source_content ();\n-\t    }\n-\t}\n-    }\n-\n-  return status;\n-}\n-\n /* See tui-data.h.  */\n \n int\n@@ -1123,112 +952,6 @@ tui_win_info::max_height () const\n   return tui_term_height () - 2;\n }\n \n-static int\n-new_height_ok (struct tui_win_info *primary_win_info, \n-\t       int new_height)\n-{\n-  int ok = (new_height < tui_term_height ());\n-\n-  if (ok)\n-    {\n-      int diff;\n-      enum tui_layout_type cur_layout = tui_current_layout ();\n-\n-      diff = (new_height - primary_win_info->height) * (-1);\n-      if (cur_layout == SRC_COMMAND || cur_layout == DISASSEM_COMMAND)\n-\t{\n-\t  ok = (new_height <= primary_win_info->max_height ()\n-\t\t&& new_height >= MIN_CMD_WIN_HEIGHT);\n-\t  if (ok)\n-\t    {\t\t\t/* Check the total height.  */\n-\t      struct tui_win_info *win_info;\n-\n-\t      if (primary_win_info == TUI_CMD_WIN)\n-\t\twin_info = *(tui_source_windows ().begin ());\n-\t      else\n-\t\twin_info = TUI_CMD_WIN;\n-\t      ok = ((new_height +\n-\t\t     (win_info->height + diff)) <= tui_term_height ());\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  int cur_total_height, total_height, min_height = 0;\n-\t  struct tui_win_info *first_win;\n-\t  struct tui_win_info *second_win;\n-\n-\t  if (cur_layout == SRC_DISASSEM_COMMAND)\n-\t    {\n-\t      first_win = TUI_SRC_WIN;\n-\t      second_win = TUI_DISASM_WIN;\n-\t    }\n-\t  else\n-\t    {\n-\t      first_win = TUI_DATA_WIN;\n-\t      second_win = *(tui_source_windows ().begin ());\n-\t    }\n-\t  /* We could simply add all the heights to obtain the same\n-\t     result but below is more explicit since we subtract 1 for\n-\t     the line that the first and second windows share, and add\n-\t     one for the locator.  */\n-\t  total_height = cur_total_height =\n-\t    (first_win->height + second_win->height - 1)\n-\t    + TUI_CMD_WIN->height + 1;\t/* Locator. */\n-\t  if (primary_win_info == TUI_CMD_WIN)\n-\t    {\n-\t      /* Locator included since first & second win share a line.  */\n-\t      ok = ((first_win->height +\n-\t\t     second_win->height + diff) >=\n-\t\t    (MIN_WIN_HEIGHT * 2) \n-\t\t    && new_height >= MIN_CMD_WIN_HEIGHT);\n-\t      if (ok)\n-\t\t{\n-\t\t  total_height = new_height + \n-\t\t    (first_win->height +\n-\t\t     second_win->height + diff);\n-\t\t  min_height = MIN_CMD_WIN_HEIGHT;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      min_height = MIN_WIN_HEIGHT;\n-\n-\t      /* First see if we can increase/decrease the command\n-\t         window.  And make sure that the command window is at\n-\t         least 1 line.  */\n-\t      ok = ((TUI_CMD_WIN->height + diff) > 0);\n-\t      if (!ok)\n-\t\t{ /* Looks like we have to increase/decrease one of\n-\t\t     the other windows.  */\n-\t\t  if (primary_win_info == first_win)\n-\t\t    ok = (second_win->height + diff) >= min_height;\n-\t\t  else\n-\t\t    ok = (first_win->height + diff) >= min_height;\n-\t\t}\n-\t      if (ok)\n-\t\t{\n-\t\t  if (primary_win_info == first_win)\n-\t\t    total_height = new_height +\n-\t\t      second_win->height +\n-\t\t      TUI_CMD_WIN->height + diff;\n-\t\t  else\n-\t\t    total_height = new_height +\n-\t\t      first_win->height +\n-\t\t      TUI_CMD_WIN->height + diff;\n-\t\t}\n-\t    }\n-\t  /* Now make sure that the proposed total height doesn't\n-\t     exceed the old total height.  */\n-\t  if (ok)\n-\t    ok = (new_height >= min_height \n-\t\t  && total_height <= cur_total_height);\n-\t}\n-    }\n-\n-  return ok;\n-}\n-\n-\n static void\n parse_scrolling_args (const char *arg, \n \t\t      struct tui_win_info **win_to_scroll,"
    }
  ]
}