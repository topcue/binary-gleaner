{
  "sha": "60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjBlMjJjMWVhY2IwZGYzMmFlZWViNzhjNTNjZmQ0NmM1M2EzNzcwZg==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-03-31T12:49:06Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-04-01T17:15:03Z"
    },
    "message": "Allow pointer arithmetic with integer references\n\nConsidering these variables:\nint i = 3;\nint &iref = i;\n\nIt's not possible to do any pointer arithmetic with iref:\n(gdb) p &i+iref\nArgument to arithmetic operation not a number or boolean.\n\nSo this adds checks for references to integers in pointer arithmetic.\n\ngdb/ChangeLog:\n\n2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n\n\tPR gdb/24789\n\t* eval.c (is_integral_or_integral_reference): New function.\n\t(evaluate_subexp_standard): Allow integer references in\n\tpointer arithmetic.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n\n\tPR gdb/24789\n\t* gdb.cp/misc.cc: Add integer reference variable.\n\t* gdb.cp/misc.exp: Add test.",
    "tree": {
      "sha": "e9870fa9aee3159d44e48cffce61f0d85abf8318",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e9870fa9aee3159d44e48cffce61f0d85abf8318"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "77bf7b5317195e092a9f18fef993c412e2e05f53",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77bf7b5317195e092a9f18fef993c412e2e05f53",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/77bf7b5317195e092a9f18fef993c412e2e05f53"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 41,
    "deletions": 3
  },
  "files": [
    {
      "sha": "65225a286a448c8003d06493a73609f9c0aa2b30",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\tPR gdb/24789\n+\t* eval.c (is_integral_or_integral_reference): New function.\n+\t(evaluate_subexp_standard): Allow integer references in\n+\tpointer arithmetic.\n+\n 2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* remote.c (remote_target::remote_parse_stop_reply): Remove the"
    },
    {
      "sha": "3b1f4943b43e9f07535cace9b3836bde91caf0c3",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
      "patch": "@@ -1248,6 +1248,20 @@ skip_undetermined_arglist (int nargs, struct expression *exp, int *pos,\n     evaluate_subexp (NULL_TYPE, exp, pos, noside);\n }\n \n+/* Return true if type is integral or reference to integral */\n+\n+static bool\n+is_integral_or_integral_reference (struct type *type)\n+{\n+  if (is_integral_type (type))\n+    return true;\n+\n+  type = check_typedef (type);\n+  return (type != nullptr\n+\t  && TYPE_IS_REFERENCE (type)\n+\t  && is_integral_type (TYPE_TARGET_TYPE (type)));\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -2208,10 +2222,10 @@ evaluate_subexp_standard (struct type *expect_type,\n       if (binop_user_defined_p (op, arg1, arg2))\n \treturn value_x_binop (arg1, arg2, op, OP_NULL, noside);\n       else if (ptrmath_type_p (exp->language_defn, value_type (arg1))\n-\t       && is_integral_type (value_type (arg2)))\n+\t       && is_integral_or_integral_reference (value_type (arg2)))\n \treturn value_ptradd (arg1, value_as_long (arg2));\n       else if (ptrmath_type_p (exp->language_defn, value_type (arg2))\n-\t       && is_integral_type (value_type (arg1)))\n+\t       && is_integral_or_integral_reference (value_type (arg1)))\n \treturn value_ptradd (arg2, value_as_long (arg1));\n       else\n \t{\n@@ -2234,7 +2248,7 @@ evaluate_subexp_standard (struct type *expect_type,\n \t  return value_from_longest (type, value_ptrdiff (arg1, arg2));\n \t}\n       else if (ptrmath_type_p (exp->language_defn, value_type (arg1))\n-\t       && is_integral_type (value_type (arg2)))\n+\t       && is_integral_or_integral_reference (value_type (arg2)))\n \treturn value_ptradd (arg1, - value_as_long (arg2));\n       else\n \t{"
    },
    {
      "sha": "58271cf8ccb368997fac0e309ed6938bc7f2436b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\tPR gdb/24789\n+\t* gdb.cp/misc.cc: Add integer reference variable.\n+\t* gdb.cp/misc.exp: Add test.\n+\n 2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.server/stop-reply-no-thread.exp: Enhance the test"
    },
    {
      "sha": "41fb9d2f2db939c905f7d1a3ab2e831564898766",
      "filename": "gdb/testsuite/gdb.cp/misc.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/gdb.cp/misc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/gdb.cp/misc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/misc.cc?ref=60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
      "patch": "@@ -24,6 +24,9 @@ bool            v_bool_array[2];\n typedef struct fleep fleep;\n struct fleep { int a; } s;\n \n+int number;\n+int &number_ref = number;\n+\n // ====================== simple class structures  =======================\n \n struct default_public_struct {"
    },
    {
      "sha": "cd6f0f7070abcf20540c2dd6b705cfee31f7a11d",
      "filename": "gdb/testsuite/gdb.cp/misc.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/gdb.cp/misc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60e22c1eacb0df32aeeeb78c53cfd46c53a3770f/gdb/testsuite/gdb.cp/misc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/misc.exp?ref=60e22c1eacb0df32aeeeb78c53cfd46c53a3770f",
      "patch": "@@ -110,3 +110,11 @@ gdb_test \"print (int)false\" \"\\\\$\\[0-9\\]* = 0\" \"(int)false\"\n \n gdb_test \"print 'misc.cc'::v_bool\" \" = true\" \\\n     \"expression using block qualifier\"\n+\n+# pointer arithmetic\n+gdb_test \"print *(v_bool_array + number_ref)\" \"\\\\$\\[0-9\\]* = false\" \\\n+    \"pointer addition with integer reference\"\n+gdb_test \"print *(number_ref + v_bool_array)\" \"\\\\$\\[0-9\\]* = false\" \\\n+    \"pointer addition with integer reference\"\n+gdb_test \"print *(v_bool_array - number_ref)\" \"\\\\$\\[0-9\\]* = false\" \\\n+    \"pointer subtraction with integer reference\""
    }
  ]
}