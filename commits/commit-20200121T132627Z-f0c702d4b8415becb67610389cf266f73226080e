{
  "sha": "f0c702d4b8415becb67610389cf266f73226080e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjBjNzAyZDRiODQxNWJlY2I2NzYxMDM4OWNmMjY2ZjczMjI2MDgwZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-09T19:24:15Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-21T13:26:27Z"
    },
    "message": "Convert an int flag variable to bool\n\nAs suggested, the cond variable is really supposed to be a bool. So,\nmake it so.\n\ngdb/ChangeLog:\n\n2020-01-21  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-tdep.c (struct aarch64_displaced_step_closure)\n\t<cond>: Change type to bool.\n\t(aarch64_displaced_step_b_cond): Update cond to use bool type.\n\t(aarch64_displaced_step_cb): Likewise.\n\t(aarch64_displaced_step_tb): Likewise.",
    "tree": {
      "sha": "f6932a0bb555a856df0e461e1ce4e592958cb3ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f6932a0bb555a856df0e461e1ce4e592958cb3ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f0c702d4b8415becb67610389cf266f73226080e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0c702d4b8415becb67610389cf266f73226080e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f0c702d4b8415becb67610389cf266f73226080e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0c702d4b8415becb67610389cf266f73226080e/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ab139e5bedfec2bb277287574cc0322c21a252b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ab139e5bedfec2bb277287574cc0322c21a252b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ab139e5bedfec2bb277287574cc0322c21a252b"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 12,
    "deletions": 4
  },
  "files": [
    {
      "sha": "0161fbf6849c6c52bdd91b3c279ec2327508535d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f0c702d4b8415becb67610389cf266f73226080e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f0c702d4b8415becb67610389cf266f73226080e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f0c702d4b8415becb67610389cf266f73226080e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-01-21  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-tdep.c (struct aarch64_displaced_step_closure)\n+\t<cond>: Change type to bool.\n+\t(aarch64_displaced_step_b_cond): Update cond to use bool type.\n+\t(aarch64_displaced_step_cb): Likewise.\n+\t(aarch64_displaced_step_tb): Likewise.\n+\n 2020-01-21  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-tdep.c (aarch64_displaced_step_fixup): Add more debugging"
    },
    {
      "sha": "1631178f8c2620b3470f83ceb656b11c4571ac57",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f0c702d4b8415becb67610389cf266f73226080e/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f0c702d4b8415becb67610389cf266f73226080e/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=f0c702d4b8415becb67610389cf266f73226080e",
      "patch": "@@ -2735,7 +2735,7 @@ struct aarch64_displaced_step_closure : public displaced_step_closure\n {\n   /* It is true when condition instruction, such as B.CON, TBZ, etc,\n      is being displaced stepping.  */\n-  int cond = 0;\n+  bool cond = false;\n \n   /* PC adjustment offset after displaced stepping.  If 0, then we don't\n      write the PC back, assuming the PC is already the right address.  */\n@@ -2816,7 +2816,7 @@ aarch64_displaced_step_b_cond (const unsigned cond, const int32_t offset,\n   */\n \n   emit_bcond (dsd->insn_buf, cond, 8);\n-  dsd->dsc->cond = 1;\n+  dsd->dsc->cond = true;\n   dsd->dsc->pc_adjust = offset;\n   dsd->insn_count = 1;\n }\n@@ -2851,7 +2851,7 @@ aarch64_displaced_step_cb (const int32_t offset, const int is_cbnz,\n   */\n   emit_cb (dsd->insn_buf, is_cbnz, aarch64_register (rn, is64), 8);\n   dsd->insn_count = 1;\n-  dsd->dsc->cond = 1;\n+  dsd->dsc->cond = true;\n   dsd->dsc->pc_adjust = offset;\n }\n \n@@ -2876,7 +2876,7 @@ aarch64_displaced_step_tb (const int32_t offset, int is_tbnz,\n   */\n   emit_tb (dsd->insn_buf, is_tbnz, bit, aarch64_register (rt, 1), 8);\n   dsd->insn_count = 1;\n-  dsd->dsc->cond = 1;\n+  dsd->dsc->cond = true;\n   dsd->dsc->pc_adjust = offset;\n }\n "
    }
  ]
}