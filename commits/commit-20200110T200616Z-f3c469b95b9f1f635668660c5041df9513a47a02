{
  "sha": "f3c469b95b9f1f635668660c5041df9513a47a02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjNjNDY5Yjk1YjlmMWY2MzU2Njg2NjBjNTA0MWRmOTUxM2E0N2EwMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:16Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:16Z"
    },
    "message": "Switch the inferior too in switch_to_program_space_and_thread\n\nWith multi-target, each inferior now has its own target connection.\nThe problem in switch_to_program_space_and_thread is that in the\ncurrent state GDB switches to \"no thread\" and also sets the program\nspace but because the inferior is not switched, potentially an\nincorrect target remains selected.\n\nHere is a sample scenario that exploits this flow:\n\nOn terminal 1, start a gdbserver on a program named foo:\n\n $ gdbserver :1234 ./foo\n\nOn terminal 2, start gdb on a program named bar.  Suppose foo and bar\nare compiled from foo.c and bar.c.  They are completely separate.  So,\nbar.c:2 has no meaning for foo.\n\n $ gdb -q ./bar\n Reading symbols from ./bar...\n (gdb) add-inferior\n [New inferior 2]\n Added inferior 2\n (gdb) inferior 2\n [Switching to inferior 2 [<null>] (<noexec>)]\n (gdb) target remote :1234\n ...\n (gdb) set debug remote 2\n (gdb) break bar.c:2\n Sending packet: $Hgp0.0#ad...Packet received: OK\n Sending packet: $m5fa,12#f8...Packet received: E01\n Sending packet: $m5fa,1#c6...Packet received: E01\n Sending packet: $m5fb,3#c9...Packet received: E01\n Sending packet: $m5fe,1#ca...Packet received: E01\n Breakpoint 1 at 0x5fe: file bar.c, line 2.\n (gdb)\n\nHere we have an unnecessary sending of the packets to the gdbserver.\n\nWith this fix in progspace-and-thread.c, we'll get this:\n\n (gdb) break bar.c:2\n Breakpoint 1 at 0x5fe: file bar.c, line 2.\n (gdb)\n\nNow there is no sending of the packets to gdbserver.\n\nThe changes around clear_symtab_users calls are necessary because\notherwise we regress gdb.base/step-over-exit.exp, hitting the new\nassertion in switch_to_program_space_and_thread.  The problem is, a\nforked child terminates, and when GDB decides to auto-purge that\ninferior, GDB tries to switch to the pspace of that no-longer-existing\ninferior.\n\nThe root of the problem is within the program_space destructor:\n\nprogram_space::~program_space ()\n{\n...\n  set_current_program_space (this);        # (1)\n...\n  breakpoint_program_space_exit (this);    # (2)\n...\n  free_all_objfiles ();                    # (3)\n...\n}\n\nWe get here from delete_inferior -> delete_program_space.\n\nSo we're deleting an inferior, and the inferior to be\ndeleted is no longer in the inferior list.\n\nAt (2), we've deleted all the breakpoints and locations for the\nprogram space being deleted.\n\nThe crash happens while doing a breakpoint re-set, called by\nclear_symtab_users at the tail end of (3).  That is, while recreating\nbreakpoints for the current program space, which is the program space\nwe're tearing down.  During breakpoint re-set, we try to switch to the\nnew location's pspace (the current pspace set in (1), so the pspace\nwe're tearing down) with switch_to_program_space_and_thread, and that\nhits the failed assertion.  It's the fact that we recreate breakpoints\nin the program_space destructor that is the latent bug here.  Just\ndon't do that, and we don't end up in the crash situation.\n\nMy first approach to fix this added a symfile_add_flags parameter to\nprogram_space::free_all_objfiles, and then passed that down to\nclear_symtab_users.  The program_space dtor would then pass down\nSYMFILE_DEFER_BP_RESET to free_all_objfiles.  I couldn't help feeling\nthat adding that parameter to free_all_objfiles looked a little\nawkward, so I settled on something a little different -- hoist the\nclear_symtab_users call to the callers.  There are only two callers.\nI felt that that didn't look as odd, particularly since\nremove_symbol_file_command also does:\n\n  objf->unlink ();\n  clear_symtab_users (0);\n\nI.e., objfile deletion is already separate from calling\nclear_symtab_users in some places.\n\ngdb/ChangeLog:\n2020-01-10  Aleksandar Paunovic  <aleksandar.paunovic@intel.com>\n\t    Pedro Alves  <palves@redhat.com>\n\n\t* progspace-and-thread.c (switch_to_program_space_and_thread):\n\tAssert there's an inferior for PSPACE.  Use\n\tswitch_to_inferior_no_thread to switch the inferior too.\n\t* progspace.c (program_space::~program_space): Call\n\tclear_symtab_users here, with SYMFILE_DEFER_BP_RESET.\n\t(program_space::free_all_objfiles): Don't call clear_symtab_users\n\there.\n\t* symfile.c (symbol_file_clear): Call clear_symtab_users here.\n\ngdb/testsuite/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.server/bkpt-other-inferior.exp: New file.",
    "tree": {
      "sha": "b0024f6b1521ebc1edd9dae1bf4a64e9932f2c22",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b0024f6b1521ebc1edd9dae1bf4a64e9932f2c22"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f3c469b95b9f1f635668660c5041df9513a47a02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3c469b95b9f1f635668660c5041df9513a47a02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f3c469b95b9f1f635668660c5041df9513a47a02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3c469b95b9f1f635668660c5041df9513a47a02/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "65c574f6dd066a239a94c2df0e1e12d50eae06c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/65c574f6dd066a239a94c2df0e1e12d50eae06c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/65c574f6dd066a239a94c2df0e1e12d50eae06c9"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 117,
    "deletions": 5
  },
  "files": [
    {
      "sha": "3eae3e1a6b6397b7819fe58763660568dba00fee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -1,3 +1,15 @@\n+2020-01-10  Aleksandar Paunovic  <aleksandar.paunovic@intel.com>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\t* progspace-and-thread.c (switch_to_program_space_and_thread):\n+\tAssert there's an inferior for PSPACE.  Use\n+\tswitch_to_inferior_no_thread to switch the inferior too.\n+\t* progspace.c (program_space::~program_space): Call\n+\tclear_symtab_users here, with SYMFILE_DEFER_BP_RESET.\n+\t(program_space::free_all_objfiles): Don't call clear_symtab_users\n+\there.\n+\t* symfile.c (symbol_file_clear): Call clear_symtab_users here.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* NEWS: Mention multi-target debugging, \"info connections\", and"
    },
    {
      "sha": "698661d43fbff2f6fe073d48179a636ca05f922d",
      "filename": "gdb/progspace-and-thread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/progspace-and-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/progspace-and-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace-and-thread.c?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -25,8 +25,9 @@ void\n switch_to_program_space_and_thread (program_space *pspace)\n {\n   inferior *inf = find_inferior_for_program_space (pspace);\n+  gdb_assert (inf != nullptr);\n \n-  if (inf != NULL && inf->pid != 0)\n+  if (inf->pid != 0)\n     {\n       thread_info *tp = any_live_thread_of_inferior (inf);\n \n@@ -39,6 +40,5 @@ switch_to_program_space_and_thread (program_space *pspace)\n \t}\n     }\n \n-  switch_to_no_thread ();\n-  set_current_program_space (pspace);\n+  switch_to_inferior_no_thread (inf);\n }"
    },
    {
      "sha": "136104034795efef1ddd1451ed8bdf173670723a",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -147,6 +147,9 @@ program_space::~program_space ()\n   no_shared_libraries (NULL, 0);\n   exec_close ();\n   free_all_objfiles ();\n+  /* Defer breakpoint re-set because we don't want to create new\n+     locations for this pspace which we're tearing down.  */\n+  clear_symtab_users (SYMFILE_DEFER_BP_RESET);\n   if (!gdbarch_has_shared_address_space (target_gdbarch ()))\n     free_address_space (this->aspace);\n   clear_section_table (&this->target_sections);\n@@ -168,8 +171,6 @@ program_space::free_all_objfiles ()\n \n   while (!objfiles_list.empty ())\n     objfiles_list.front ()->unlink ();\n-\n-  clear_symtab_users (0);\n }\n \n /* See progspace.h.  */"
    },
    {
      "sha": "d5a797a32cba9fdfaea63cc046fe39b52049c821",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -1243,6 +1243,8 @@ symbol_file_clear (int from_tty)\n \n   current_program_space->free_all_objfiles ();\n \n+  clear_symtab_users (0);\n+\n   gdb_assert (symfile_objfile == NULL);\n   if (from_tty)\n     printf_filtered (_(\"No symbol file now.\\n\"));"
    },
    {
      "sha": "13ccadb2b32c028832f59359491875ae5e0731cb",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -1,3 +1,7 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.server/bkpt-other-inferior.exp: New file.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/kill-detach-inferiors-cmd.exp: Adjust expected output"
    },
    {
      "sha": "7ad38ea1b25c12fc5fc387fd90e4180b82fc8111",
      "filename": "gdb/testsuite/gdb.server/bkpt-other-inferior.exp",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/testsuite/gdb.server/bkpt-other-inferior.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3c469b95b9f1f635668660c5041df9513a47a02/gdb/testsuite/gdb.server/bkpt-other-inferior.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/bkpt-other-inferior.exp?ref=f3c469b95b9f1f635668660c5041df9513a47a02",
      "patch": "@@ -0,0 +1,93 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that GDB does not access the remote target's memory when\n+# setting a breakpoint on a function that only exists in an inferior\n+# that is not bound to the remote target.\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile server.c\n+\n+if { [skip_gdbserver_tests] } {\n+    return 0\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${binfile} \"${srcfile}\" \\\n+\t  {debug pthreads}] } {\n+    return\n+}\n+\n+# Make sure we're disconnected, in case we're testing with an\n+# extended-remote board, therefore already connected.\n+gdb_test \"disconnect\" \".*\"\n+\n+# Leave inferior 1 with the exec target, not connected.  Add another\n+# inferior, and connect it to gdbserver.\n+\n+gdb_test \"add-inferior\" \"Added inferior 2\" \\\n+    \"add inferior 2\"\n+gdb_test \"inferior 2\" \"Switching to inferior 2.*\" \\\n+    \"switch to inferior 2\"\n+gdb_test \"file ${binfile}\" \".*\" \"load file in inferior 2\"\n+\n+set target_exec [gdbserver_download_current_prog]\n+\n+# Start GDBserver.\n+set res [gdbserver_start \"\" $target_exec]\n+\n+# Connect to GDBserver.\n+set gdbserver_protocol [lindex $res 0]\n+set gdbserver_gdbport [lindex $res 1]\n+gdb_target_cmd $gdbserver_protocol $gdbserver_gdbport\n+\n+# Discard any symbol files that we have opened.\n+set test \"discard symbol table\"\n+gdb_test_multiple \"file\" $test {\n+    -re \"A program is being debugged already..*Are you sure you want to change the file.*y or n. $\" {\n+\tgdb_test \"y\" \".*\" $test \\\n+\t    {Discard symbol table from `.*'\\? \\(y or n\\) } \"y\"\n+    }\n+}\n+\n+# At this point:\n+#\n+# - inferior 1 has symbols, and is not connected to any target.\n+# - inferior 2 has no symbols, and is connected to gdbserver.\n+\n+# Setting a breakpoint at some function by name should set a\n+# breakpoint on inferior 1, since it has symbols, and should not\n+# result in any access to inferior 2's remote target.\n+\n+gdb_test_no_output \"set debug remote 1\"\n+\n+foreach inf_sel {1 2} {\n+    with_test_prefix \"inf $inf_sel\" {\n+\tgdb_test \"inferior $inf_sel\" \"Switching to inferior $inf_sel.*\" \\\n+\t    \"switch to inferior\"\n+\n+\tset test \"set breakpoint\"\n+\tgdb_test_multiple \"break main\" $test {\n+\t    -re \"Sending packet.*$gdb_prompt $\" {\n+\t\tfail $test\n+\t    }\n+\t    -re \"^break main\\r\\nBreakpoint .* at .*$gdb_prompt $\" {\n+\t\tpass $test\n+\t    }\n+\t}\n+\n+\tdelete_breakpoints\n+    }\n+}"
    }
  ]
}