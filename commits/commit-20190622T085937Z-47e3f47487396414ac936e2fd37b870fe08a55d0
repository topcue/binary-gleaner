{
  "sha": "47e3f47487396414ac936e2fd37b870fe08a55d0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDdlM2Y0NzQ4NzM5NjQxNGFjOTM2ZTJmZDM3Yjg3MGZlMDhhNTVkMA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-06-22T08:59:37Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-06-22T08:59:37Z"
    },
    "message": "[gdb] Fix s390x -m31 build\n\nWhen building gdb on s390x with -m31, we run into this Wformat\nwarning (which Werror turns into an error):\n...\ngdb/dwarf2read.c: In function \\\n  'void create_addrmap_from_aranges(dwarf2_per_objfile*, \\\n                                    dwarf2_section_info*)':\ngdb/dwarf2read.c:3277:22: error: format '%zu' expects argument of type \\\n  'size_t', but argument 3 has type 'int' [-Werror=format=]\n    warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n...\n\nThe Wformat warning is triggered in this statement:\n...\n          warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n                     \"length %s exceeds section length %s, \"\n                     \"ignoring .debug_aranges.\"),\n                   objfile_name (objfile), entry_addr - section->buffer,\n                   plongest (bytes_read + entry_length),\n                   pulongest (section->size));\n...\nwhere 'entry_addr - section->buffer' is of type ptrdiff_t and '%zu' prints an\nunsigned with the same size as size_t/ssize_t.\n\nOn s390x with -m31, we have:\n- size_t   : unsigned long int (32-bit)\n- ptrdiff_t: int               (32-bit)\n\nWformat warns against this because even though long int and int have the same\nsize, the types are not compatible.\n\n[ The Wformat warning is to similar to what we would get for x86_64 -m32\n(where long and int are also the same size) and:\n...\nint i;\nprintf (\"%ld\", i);\n... ]\n\nFix this by using '%s' and plongest instead of '%zu' to print ptrdiff_t.\n\nBuild and reg-tested on x86_64.\n\ngdb/ChangeLog:\n\n2019-06-22  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2read.c (create_addrmap_from_aranges)\n\t(read_debug_names_from_section): Print ptrdiff_t using '%s' and plongest\n\tinstead of '%zu'.",
    "tree": {
      "sha": "d77b595642e1b33c3f029411058ad67b67ca6814",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d77b595642e1b33c3f029411058ad67b67ca6814"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/47e3f47487396414ac936e2fd37b870fe08a55d0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47e3f47487396414ac936e2fd37b870fe08a55d0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/47e3f47487396414ac936e2fd37b870fe08a55d0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47e3f47487396414ac936e2fd37b870fe08a55d0/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5ec331ef744a495ad35469928564a43a09391562",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ec331ef744a495ad35469928564a43a09391562",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5ec331ef744a495ad35469928564a43a09391562"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 30,
    "deletions": 18
  },
  "files": [
    {
      "sha": "7e7da824bad3ca4843f6468cd7b2cbf71730512b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/47e3f47487396414ac936e2fd37b870fe08a55d0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/47e3f47487396414ac936e2fd37b870fe08a55d0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=47e3f47487396414ac936e2fd37b870fe08a55d0",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2read.c (create_addrmap_from_aranges)\n+\t(read_debug_names_from_section): Print ptrdiff_t using '%s' and plongest\n+\tinstead of '%zu'.\n+\n 2019-06-21  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2read.h (dwarf2_section_info_def): Remove."
    },
    {
      "sha": "85f2b1dfc47d9ff4e1260752f1e97e3cad52840b",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 18,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/47e3f47487396414ac936e2fd37b870fe08a55d0/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/47e3f47487396414ac936e2fd37b870fe08a55d0/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=47e3f47487396414ac936e2fd37b870fe08a55d0",
      "patch": "@@ -3229,10 +3229,11 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       const uint8_t offset_size = dwarf5_is_dwarf64 ? 8 : 4;\n       if (addr + entry_length > section->buffer + section->size)\n \t{\n-\t  warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t  warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t             \"length %s exceeds section length %s, \"\n \t\t     \"ignoring .debug_aranges.\"),\n-\t\t   objfile_name (objfile), entry_addr - section->buffer,\n+\t\t   objfile_name (objfile),\n+\t\t   plongest (entry_addr - section->buffer),\n \t\t   plongest (bytes_read + entry_length),\n \t\t   pulongest (section->size));\n \t  return;\n@@ -3243,10 +3244,10 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       addr += 2;\n       if (version != 2)\n \t{\n-\t  warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t  warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t     \"has unsupported version %d, ignoring .debug_aranges.\"),\n-\t\t   objfile_name (objfile), entry_addr - section->buffer,\n-\t\t   version);\n+\t\t   objfile_name (objfile),\n+\t\t   plongest (entry_addr - section->buffer), version);\n \t  return;\n \t}\n \n@@ -3257,10 +3258,11 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t= debug_info_offset_to_per_cu.find (sect_offset (debug_info_offset));\n       if (per_cu_it == debug_info_offset_to_per_cu.cend ())\n \t{\n-\t  warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t  warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t     \"debug_info_offset %s does not exists, \"\n \t\t     \"ignoring .debug_aranges.\"),\n-\t\t   objfile_name (objfile), entry_addr - section->buffer,\n+\t\t   objfile_name (objfile),\n+\t\t   plongest (entry_addr - section->buffer),\n \t\t   pulongest (debug_info_offset));\n \t  return;\n \t}\n@@ -3269,20 +3271,21 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       const uint8_t address_size = *addr++;\n       if (address_size < 1 || address_size > 8)\n \t{\n-\t  warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t  warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t     \"address_size %u is invalid, ignoring .debug_aranges.\"),\n-\t\t   objfile_name (objfile), entry_addr - section->buffer,\n-\t\t   address_size);\n+\t\t   objfile_name (objfile),\n+\t\t   plongest (entry_addr - section->buffer), address_size);\n \t  return;\n \t}\n \n       const uint8_t segment_selector_size = *addr++;\n       if (segment_selector_size != 0)\n \t{\n-\t  warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t  warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t     \"segment_selector_size %u is not supported, \"\n \t\t     \"ignoring .debug_aranges.\"),\n-\t\t   objfile_name (objfile), entry_addr - section->buffer,\n+\t\t   objfile_name (objfile),\n+\t\t   plongest (entry_addr - section->buffer),\n \t\t   segment_selector_size);\n \t  return;\n \t}\n@@ -3295,20 +3298,22 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n            padding > 0; padding--)\n \tif (*addr++ != 0)\n \t  {\n-\t    warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t    warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t       \"padding is not zero, ignoring .debug_aranges.\"),\n-\t\t     objfile_name (objfile), entry_addr - section->buffer);\n+\t\t     objfile_name (objfile),\n+\t\t     plongest (entry_addr - section->buffer));\n \t    return;\n \t  }\n \n       for (;;)\n \t{\n \t  if (addr + 2 * address_size > entry_end)\n \t    {\n-\t      warning (_(\"Section .debug_aranges in %s entry at offset %zu \"\n+\t      warning (_(\"Section .debug_aranges in %s entry at offset %s \"\n \t\t\t \"address list is not properly terminated, \"\n \t\t\t \"ignoring .debug_aranges.\"),\n-\t\t       objfile_name (objfile), entry_addr - section->buffer);\n+\t\t       objfile_name (objfile),\n+\t\t       plongest (entry_addr - section->buffer));\n \t      return;\n \t    }\n \t  ULONGEST start = extract_unsigned_integer (addr, address_size,\n@@ -5517,8 +5522,9 @@ read_debug_names_from_section (struct objfile *objfile,\n   if (addr != abbrev_table_start + abbrev_table_size)\n     {\n       warning (_(\"Section .debug_names in %s has abbreviation_table \"\n-                 \"of size %zu vs. written as %u, ignoring .debug_names.\"),\n-\t       filename, addr - abbrev_table_start, abbrev_table_size);\n+\t\t \"of size %s vs. written as %u, ignoring .debug_names.\"),\n+\t       filename, plongest (addr - abbrev_table_start),\n+\t       abbrev_table_size);\n       return false;\n     }\n   map.entry_pool = addr;"
    }
  ]
}