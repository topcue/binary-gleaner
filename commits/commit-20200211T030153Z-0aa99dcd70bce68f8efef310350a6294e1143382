{
  "sha": "0aa99dcd70bce68f8efef310350a6294e1143382",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGFhOTlkY2Q3MGJjZTY4ZjhlZmVmMzEwMzUwYTYyOTRlMTE0MzM4Mg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-11T03:01:42Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-11T03:01:53Z"
    },
    "message": "Use GCC LTO wrapper to get real symbols from LTO IR objects\n\nGCC LTO wrapper is needed to extract real symbols from LTO IR objects.\nThis patch does the following:\n\n1. Set up GCC LTO wrapper for each LTO IR object.\n2. Run GCC LTO wrapper to get the real object.\n3. Extract symbol info from the real object.\n4. Cleanup afterwards.\n\nbfd/\n\n\tPR binutils/25355\n\t* configure.ac (HAVE_EXECUTABLE_SUFFIX): New AC_DEFINE.\n\t(EXECUTABLE_SUFFIX): Likewise.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* plugin.c (bfd_plugin_close_and_cleanup): Removed.\n\t(plugin_list_entry): Add all_symbols_read, cleanup_handler,\n\tgcc, lto_wrapper, resolution_file, resolution_option, gcc_env,\n\treal_bfd, real_nsyms, real_syms, lto_nsyms and lto_syms.\n\t(get_lto_wrapper): New.\n\t(setup_lto_wrapper_env): Likewise.\n\t(current_plugin): Likewise.\n\t(register_all_symbols_read): Likewise.\n\t(register_cleanup): Likewise.\n\t(get_symbols): Likewise.\n\t(add_input_file): Likewise.\n\t(bfd_plugin_close_and_cleanup): Likewise.\n\t(claim_file): Removed.\n\t(register_claim_file): Set current_plugin->claim_file.\n\t(add_symbols): Make a copy of LTO symbols.  Set lto_nsyms and\n\tlto_syms in current_plugin.\n\t(try_claim): Use current_plugin->claim_file.  Call LTO plugin\n\tall_symbols_read handler.  Copy real symbols to plugin_data.\n\tCall LTO plugin cleanup handler.  Clean up for LTO wrapper.\n\t(try_load_plugin): Don't reuse the previous plugin for LTO\n\twrapper.  Set up GCC LTO wrapper if possible.  Don't set\n\tplugin_list_iter->claim_file.\n\t(bfd_plugin_canonicalize_symtab): Use real LTO symbols if\n\tpossible.\n\t* plugin.h (plugin_data_struct): Add real_bfd, real_nsyms and\n\treal_syms.\n\nld/\n\n\tPR binutils/25355\n\t* testsuite/ld-plugin/lto.exp: Run PR binutils/25355 test.\n\t* testsuite/ld-plugin/pr25355.c: New file.\n\t* testsuite/ld-plugin/pr25355.d: Likewise.\n\t* testsuite/lib/ld-lib.exp (run_cc_link_tests): Support compile\n\tonly dump.",
    "tree": {
      "sha": "ff8678bad1747516104097a8860d8eb775f370b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ff8678bad1747516104097a8860d8eb775f370b8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0aa99dcd70bce68f8efef310350a6294e1143382",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0aa99dcd70bce68f8efef310350a6294e1143382",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0aa99dcd70bce68f8efef310350a6294e1143382",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0aa99dcd70bce68f8efef310350a6294e1143382/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f5dd314d60e25b3094694999889c72a49fee76b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f5dd314d60e25b3094694999889c72a49fee76b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f5dd314d60e25b3094694999889c72a49fee76b"
    }
  ],
  "stats": {
    "total": 577,
    "additions": 554,
    "deletions": 23
  },
  "files": [
    {
      "sha": "fef8bc43004ec2c9e9e06c8f859ad0657db6a0a9",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -1,3 +1,37 @@\n+2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25355\n+\t* configure.ac (HAVE_EXECUTABLE_SUFFIX): New AC_DEFINE.\n+\t(EXECUTABLE_SUFFIX): Likewise.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* plugin.c (bfd_plugin_close_and_cleanup): Removed.\n+\t(plugin_list_entry): Add all_symbols_read, cleanup_handler,\n+\tgcc, lto_wrapper, resolution_file, resolution_option, gcc_env,\n+\treal_bfd, real_nsyms, real_syms, lto_nsyms and lto_syms.\n+\t(get_lto_wrapper): New.\n+\t(setup_lto_wrapper_env): Likewise.\n+\t(current_plugin): Likewise.\n+\t(register_all_symbols_read): Likewise.\n+\t(register_cleanup): Likewise.\n+\t(get_symbols): Likewise.\n+\t(add_input_file): Likewise.\n+\t(bfd_plugin_close_and_cleanup): Likewise.\n+\t(claim_file): Removed.\n+\t(register_claim_file): Set current_plugin->claim_file.\n+\t(add_symbols): Make a copy of LTO symbols.  Set lto_nsyms and\n+\tlto_syms in current_plugin.\n+\t(try_claim): Use current_plugin->claim_file.  Call LTO plugin\n+\tall_symbols_read handler.  Copy real symbols to plugin_data.\n+\tCall LTO plugin cleanup handler.  Clean up for LTO wrapper.\n+\t(try_load_plugin): Don't reuse the previous plugin for LTO\n+\twrapper.  Set up GCC LTO wrapper if possible.  Don't set\n+\tplugin_list_iter->claim_file.\n+\t(bfd_plugin_canonicalize_symtab): Use real LTO symbols if\n+\tpossible.\n+\t* plugin.h (plugin_data_struct): Add real_bfd, real_nsyms and\n+\treal_syms.\n+\n 2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* elf32-msp430.c (msp430_elf_relax_section): Before relaxing a branch,"
    },
    {
      "sha": "e1dc0f0c445ba36abe491adb7370527f85b0d4c5",
      "filename": "bfd/config.in",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.in?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -18,6 +18,9 @@\n    language is requested. */\n #undef ENABLE_NLS\n \n+/* Suffix used for executables, if any. */\n+#undef EXECUTABLE_SUFFIX\n+\n /* Define to 1 if you have the <alloca.h> header file. */\n #undef HAVE_ALLOCA_H\n \n@@ -95,6 +98,9 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n+/* Does the platform use an executable suffix? */\n+#undef HAVE_EXECUTABLE_SUFFIX\n+\n /* Define to 1 if you have the `fcntl' function. */\n #undef HAVE_FCNTL\n "
    },
    {
      "sha": "cca67ee1080eea3076bb42664880062c8886046f",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -12813,6 +12813,16 @@ fi\n \n \n \n+if test -n \"$EXEEXT\"; then\n+\n+$as_echo \"#define HAVE_EXECUTABLE_SUFFIX 1\" >>confdefs.h\n+\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define EXECUTABLE_SUFFIX \"${EXEEXT}\"\n+_ACEOF\n+\n \n host64=false\n target64=false"
    },
    {
      "sha": "af4d4b8c1354d7e92a5aa235cd5257f5fb854f41",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -157,6 +157,12 @@ AM_MAINTAINER_MODE\n AM_CONDITIONAL(GENINSRC_NEVER, false)\n AM_INSTALL_LIBBFD\n AC_EXEEXT\n+if test -n \"$EXEEXT\"; then\n+  AC_DEFINE(HAVE_EXECUTABLE_SUFFIX, 1,\n+\t    [Does the platform use an executable suffix?])\n+fi\n+AC_DEFINE_UNQUOTED(EXECUTABLE_SUFFIX, \"${EXEEXT}\",\n+\t\t   [Suffix used for executables, if any.])\n \n host64=false\n target64=false"
    },
    {
      "sha": "1edcb57bf3a358a6f01d44c756a3a0bac45a6674",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 474,
      "deletions": 23,
      "changes": 497,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -69,7 +69,6 @@ dlerror (void)\n \n #endif /* !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)  */\n \n-#define bfd_plugin_close_and_cleanup\t\t      _bfd_generic_close_and_cleanup\n #define bfd_plugin_bfd_free_cached_info\t\t      _bfd_generic_bfd_free_cached_info\n #define bfd_plugin_new_section_hook\t\t      _bfd_generic_new_section_hook\n #define bfd_plugin_get_section_contents\t\t      _bfd_generic_get_section_contents\n@@ -124,13 +123,312 @@ message (int level ATTRIBUTE_UNUSED,\n   return LDPS_OK;\n }\n \n+struct plugin_list_entry\n+{\n+  /* These must be initialized for each IR object with LTO wrapper.  */\n+  void *handle;\n+  ld_plugin_claim_file_handler claim_file;\n+  ld_plugin_all_symbols_read_handler all_symbols_read;\n+  ld_plugin_all_symbols_read_handler cleanup_handler;\n+  char *resolution_file;\n+  char *resolution_option;\n+  bfd *real_bfd;\n+  long real_nsyms;\n+  asymbol **real_syms;\n+  int lto_nsyms;\n+  const struct ld_plugin_symbol *lto_syms;\n+\n+  struct plugin_list_entry *next;\n+\n+  /* These can be reused for all IR objects.  */\n+  const char *plugin_name;\n+  char *gcc;\n+  char *lto_wrapper;\n+  char *gcc_env;\n+  bfd_boolean initialized;\n+};\n+\n+/* Use GCC LTO wrapper to covert LTO IR object to the real object.  */\n+\n+static bfd_boolean\n+get_lto_wrapper (struct plugin_list_entry *plugin)\n+{\n+  struct stat st;\n+  const char *real_name;\n+  const char *base_name;\n+  size_t length;\n+  const char *target_start = NULL;\n+  const char *target_end = NULL;\n+  size_t target_length = 0;\n+  char *gcc_name;\n+  char *wrapper_name;\n+  char *p;\n+  char dir_seperator = '\\0';\n+  char *resolution_file;\n+\n+  if (plugin->initialized)\n+    {\n+      if (plugin->lto_wrapper)\n+\t{\n+\t  resolution_file = make_temp_file (\".res\");\n+\t  if (resolution_file)\n+\t    {\n+\t      plugin->resolution_file = resolution_file;\n+\t      plugin->resolution_option = concat (\"-fresolution=\",\n+\t\t\t\t\t\t  resolution_file, NULL);\n+\t      return TRUE;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Something is wrong.  Give up.  */\n+\t      free (plugin->gcc);\n+\t      free (plugin->lto_wrapper);\n+\t      free (plugin->gcc_env);\n+\t      plugin->gcc = NULL;\n+\t      plugin->gcc_env = NULL;\n+\t      plugin->lto_wrapper = NULL;\n+\t    }\n+\t}\n+\n+      return FALSE;\n+    }\n+\n+  plugin->initialized = TRUE;\n+\n+  /* Check for PREFIX/libexec/gcc/TARGET/VERSION/liblto_plugin.so.  */\n+  real_name = lrealpath (plugin->plugin_name);\n+  base_name = lbasename (real_name);\n+\n+  /* The directory length in plugin pathname.  */\n+  length = base_name - real_name;\n+\n+  /* Skip if there is no PREFIX.  */\n+  if (!length)\n+    return FALSE;\n+\n+  p = (char *) real_name + length - 1;\n+  if (IS_DIR_SEPARATOR (*p))\n+    {\n+      int level = 0;\n+      for (; p != real_name; p--)\n+\tif (IS_DIR_SEPARATOR (*p))\n+\t  {\n+\t    level++;\n+\t    if (level == 2)\n+\t      target_end = p;\n+\t    else if (level == 3)\n+\t      {\n+\t\ttarget_start = p + 1;\n+\t\ttarget_length = target_end - target_start;\n+\t      }\n+\t    else if (level == 5)\n+\t      {\n+\t\tdir_seperator = *p;\n+\t\tbreak;\n+\t      }\n+\t  }\n+    }\n+\n+  /* Skip if there is no TARGET nor PREFIX.  */\n+  if (!target_length || !dir_seperator)\n+    return FALSE;\n+\n+#ifdef HAVE_EXECUTABLE_SUFFIX\n+# define GCC_EXECUTABLE\t\t\"gcc\" EXECUTABLE_SUFFIX\n+# define LTO_WRAPPER_EXECUTABLE\t\"lto-wrapper\" EXECUTABLE_SUFFIX\n+#else\n+# define GCC_EXECUTABLE\t\t\"gcc\"\n+# define LTO_WRAPPER_EXECUTABLE\t\"lto-wrapper\"\n+#endif\n+  gcc_name = bfd_malloc (length + target_length\n+\t\t\t + sizeof (GCC_EXECUTABLE));\n+  if (gcc_name == NULL)\n+    return FALSE;\n+  memcpy (gcc_name, real_name, length);\n+\n+  /* Get PREFIX/bin/.  */\n+  p += gcc_name - real_name;\n+  memcpy (p + 1, \"bin\", 3);\n+  p[4] = dir_seperator;\n+\n+  /* Try PREFIX/bin/TARGET-gcc first.  */\n+  memcpy (p + 5, target_start, target_length);\n+  p[5 + target_length] = '-';\n+  memcpy (p + 5 + target_length + 1, GCC_EXECUTABLE,\n+\t  sizeof (GCC_EXECUTABLE));\n+  if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))\n+    {\n+      /* Then try PREFIX/bin/gcc.  */\n+      memcpy (p + 5, GCC_EXECUTABLE, sizeof (GCC_EXECUTABLE));\n+      if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))\n+\t{\n+\t  free (gcc_name);\n+\t  return FALSE;\n+\t}\n+    }\n+\n+  /* lto-wrapper should be in the same directory with LTO plugin.  */\n+  wrapper_name = bfd_malloc (length + sizeof (LTO_WRAPPER_EXECUTABLE));\n+  if (wrapper_name == NULL)\n+    {\n+      free (gcc_name);\n+      return FALSE;\n+    }\n+  memcpy (wrapper_name, real_name, length);\n+  memcpy (wrapper_name + length, LTO_WRAPPER_EXECUTABLE,\n+\t  sizeof (LTO_WRAPPER_EXECUTABLE));\n+  if (stat (wrapper_name, &st) == 0 && S_ISREG (st.st_mode))\n+    {\n+      resolution_file = make_temp_file (\".res\");\n+      if (resolution_file)\n+\t{\n+\t  plugin->gcc = gcc_name;\n+\t  plugin->lto_wrapper = wrapper_name;\n+\t  plugin->gcc_env = concat (\"COLLECT_GCC=\", gcc_name, NULL);\n+\t  plugin->resolution_file = resolution_file;\n+\t  plugin->resolution_option = concat (\"-fresolution=\",\n+\t\t\t\t\t      resolution_file, NULL);\n+\t  return TRUE;\n+\t}\n+    }\n+\n+  free (gcc_name);\n+  free (wrapper_name);\n+  return FALSE;\n+}\n+\n+/* Set environment variables for GCC LTO wrapper to covert LTO IR\n+   object to the real object.  */\n+\n+static int\n+setup_lto_wrapper_env (struct plugin_list_entry *plugin)\n+{\n+  return (putenv (plugin->gcc_env)\n+\t  || putenv (\"COLLECT_GCC_OPTIONS=\"));\n+}\n+\n+static struct plugin_list_entry *plugin_list = NULL;\n+static struct plugin_list_entry *current_plugin = NULL;\n+\n /* Register a claim-file handler. */\n-static ld_plugin_claim_file_handler claim_file = NULL;\n \n static enum ld_plugin_status\n register_claim_file (ld_plugin_claim_file_handler handler)\n {\n-  claim_file = handler;\n+  current_plugin->claim_file = handler;\n+  return LDPS_OK;\n+}\n+\n+/* Register an all-symbols-read handler.  */\n+\n+static enum ld_plugin_status\n+register_all_symbols_read (ld_plugin_all_symbols_read_handler handler)\n+{\n+  current_plugin->all_symbols_read = handler;\n+  return LDPS_OK;\n+}\n+\n+/* Register a cleanup handler.  */\n+\n+static enum ld_plugin_status\n+register_cleanup (ld_plugin_all_symbols_read_handler handler)\n+{\n+  current_plugin->cleanup_handler = handler;\n+  return LDPS_OK;\n+}\n+\n+/* Get the symbol resolution info for a plugin-claimed input file.  */\n+\n+static enum ld_plugin_status\n+get_symbols (const void *handle ATTRIBUTE_UNUSED, int nsyms,\n+\t     struct ld_plugin_symbol *syms)\n+{\n+  if (syms)\n+    {\n+      int n;\n+      for (n = 0; n < nsyms; n++)\n+\t{\n+\t  switch (syms[n].def)\n+\t    {\n+\t    default:\n+\t      BFD_ASSERT (0);\n+\t      break;\n+\t    case LDPK_UNDEF:\n+\t    case LDPK_WEAKUNDEF:\n+\t      syms[n].resolution = LDPR_UNDEF;\n+\t      break;\n+\t    case LDPK_DEF:\n+\t    case LDPK_WEAKDEF:\n+\t    case LDPK_COMMON:\n+\t      /* Tell plugin that LTO symbol has references from regular\n+\t\t object code. */\n+\t      syms[n].resolution  = LDPR_PREVAILING_DEF;\n+\t      break;\n+\t    }\n+      }\n+    }\n+\n+  return LDPS_OK;\n+}\n+\n+/* Add a new (real) input file generated by a plugin.  */\n+\n+static enum ld_plugin_status\n+add_input_file (const char *pathname)\n+{\n+  /* Get symbols from the real LTO object.  */\n+  char **matching;\n+  long real_symsize;\n+  long real_nsyms;\n+  asymbol **real_syms;\n+  int lto_nsyms;\n+  bfd_boolean lto_symbol_found = FALSE;\n+  const struct ld_plugin_symbol *lto_syms;\n+  bfd *rbfd;\n+  int i, j;\n+\n+  rbfd = bfd_openr (pathname, NULL);\n+  if (!bfd_check_format_matches (rbfd, bfd_object, &matching))\n+    BFD_ASSERT (0);\n+\n+  real_symsize = bfd_get_symtab_upper_bound (rbfd);\n+  if (real_symsize < 0)\n+    BFD_ASSERT (0);\n+\n+  real_syms = (asymbol **) bfd_malloc (real_symsize);\n+  if (real_syms)\n+    {\n+      real_nsyms = bfd_canonicalize_symtab (rbfd, real_syms);\n+      if (real_nsyms < 0)\n+\tBFD_ASSERT (0);\n+\n+      /* NB: LTO plugin may generate more than one real object from one\n+\t LTO IR object.  We use the one which contains LTO symbols.  */\n+      lto_syms = current_plugin->lto_syms;\n+      lto_nsyms = current_plugin->lto_nsyms;\n+      for (i = 0; i < lto_nsyms; i++)\n+\tfor (j = 0; j < real_nsyms; j++)\n+\t  if (real_syms[j]->name\n+\t      && strcmp (lto_syms[i].name, real_syms[j]->name) == 0)\n+\t    {\n+\t      lto_symbol_found = TRUE;\n+\t      break;\n+\t    }\n+    }\n+\n+  if (lto_symbol_found)\n+    {\n+      current_plugin->real_nsyms = real_nsyms;\n+      current_plugin->real_syms = real_syms;\n+      /* NB: We can't close RBFD which own the real symbol info.  */\n+      current_plugin->real_bfd = rbfd;\n+    }\n+  else\n+    {\n+      bfd_close (rbfd);\n+      free (real_syms);\n+    }\n+\n   return LDPS_OK;\n }\n \n@@ -143,13 +441,50 @@ add_symbols (void * handle,\n   struct plugin_data_struct *plugin_data =\n     bfd_alloc (abfd, sizeof (plugin_data_struct));\n \n-  plugin_data->nsyms = nsyms;\n-  plugin_data->syms = syms;\n+  if (plugin_data)\n+    {\n+      struct ld_plugin_symbol *sym_info;\n+      char *strtab;\n+      size_t sym_info_size, name_length;\n+      int i;\n+\n+      abfd->tdata.plugin_data = plugin_data;\n+\n+      /* NB: LTO symbols are owned by LTO plugin.  Create a copy so\n+\t that we can use it in bfd_plugin_canonicalize_symtab.  */\n+      sym_info_size = nsyms * sizeof (*syms);\n+\n+      /* Allocate a string table  */\n+      for (i = 0; i < nsyms; i++)\n+\tsym_info_size += strlen (syms[i].name) + 1;\n+\n+      sym_info = bfd_alloc (abfd, sym_info_size);\n+      if (sym_info)\n+\t{\n+\t  /* Copy symbol table.  */\n+\t  memcpy (sym_info, syms, nsyms * sizeof (*syms));\n+\n+\t  /* Copy symbol names in symbol table.  */\n+\t  strtab = (char *) (sym_info + nsyms);\n+\t  for (i = 0; i < nsyms; i++)\n+\t    {\n+\t      name_length = strlen (syms[i].name);\n+\t      memcpy (strtab, syms[i].name, name_length + 1);\n+\t      sym_info[i].name = strtab;\n+\t      strtab += name_length + 1;\n+\t    }\n+\n+\t  plugin_data->nsyms = nsyms;\n+\t  plugin_data->syms = sym_info;\n+\n+\t  current_plugin->lto_nsyms = nsyms;\n+\t  current_plugin->lto_syms = sym_info;\n+\t}\n+    }\n \n   if (nsyms != 0)\n     abfd->flags |= HAS_SYMS;\n \n-  abfd->tdata.plugin_data = plugin_data;\n   return LDPS_OK;\n }\n \n@@ -214,33 +549,67 @@ try_claim (bfd *abfd)\n   file.handle = abfd;\n   if (!bfd_plugin_open_input (abfd, &file))\n     return 0;\n-  if (claim_file)\n-    claim_file (&file, &claimed);\n+  if (current_plugin->claim_file)\n+    {\n+      current_plugin->claim_file (&file, &claimed);\n+      if (claimed)\n+\t{\n+\t  if (current_plugin->all_symbols_read)\n+\t    {\n+\t      struct plugin_data_struct *plugin_data\n+\t\t= abfd->tdata.plugin_data;\n+\t      if (plugin_data)\n+\t\t{\n+\t\t  /* Get real symbols from LTO wrapper.  */\n+\t\t  current_plugin->all_symbols_read ();\n+\n+\t\t  /* Copy real symbols to plugin_data.  */\n+\t\t  plugin_data->real_bfd = current_plugin->real_bfd;\n+\t\t  plugin_data->real_nsyms = current_plugin->real_nsyms;\n+\t\t  plugin_data->real_syms = current_plugin->real_syms;\n+\n+\t\t  /* Clean up LTO plugin.  */\n+\t\t  if (current_plugin->cleanup_handler)\n+\t\t    current_plugin->cleanup_handler ();\n+\t\t}\n+\t    }\n+\t}\n+\n+      if (current_plugin->lto_wrapper)\n+\t{\n+\t  /* Clean up for LTO wrapper.  */\n+\t  unlink (current_plugin->resolution_file);\n+\t  free (current_plugin->resolution_option);\n+\t}\n+    }\n   close (file.fd);\n   return claimed;\n }\n \n-struct plugin_list_entry\n-{\n-  void *                        handle;\n-  ld_plugin_claim_file_handler  claim_file;\n-  struct plugin_list_entry *    next;\n-};\n-\n-static struct plugin_list_entry * plugin_list = NULL;\n-\n static int\n try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n {\n   void *plugin_handle = NULL;\n-  struct ld_plugin_tv tv[4];\n+  struct ld_plugin_tv tv[12];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n   struct plugin_list_entry *plugin_list_iter;\n \n   *has_plugin_p = 0;\n \n+  /* NB: Each object is inddependent.  Reuse the previous plugin from\n+     the last LTO wrapper run will lead to wrong LTO data.  */\n+  if (current_plugin\n+      && current_plugin->handle\n+      && current_plugin->lto_wrapper\n+      && strcmp (current_plugin->plugin_name, pname) == 0)\n+    {\n+      dlclose (current_plugin->handle);\n+      memset (current_plugin, 0,\n+\t      offsetof (struct plugin_list_entry, next));\n+    }\n+\n   plugin_handle = dlopen (pname, RTLD_NOW);\n   if (!plugin_handle)\n     {\n@@ -259,18 +628,25 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n \t    return 0;\n \n \t  register_claim_file (plugin_list_iter->claim_file);\n+\t  current_plugin = plugin_list_iter;\n \t  goto have_claim_file;\n \t}\n+      else if (plugin_list_iter->lto_wrapper\n+\t       && strcmp (plugin_list_iter->plugin_name, pname) == 0)\n+\tgoto have_lto_wrapper;\n     }\n \n   plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);\n   if (plugin_list_iter == NULL)\n     return 0;\n-  plugin_list_iter->handle = plugin_handle;\n-  plugin_list_iter->claim_file = NULL;\n+  memset (plugin_list_iter, 0, sizeof (*plugin_list_iter));\n+  plugin_list_iter->plugin_name = pname;\n   plugin_list_iter->next = plugin_list;\n   plugin_list = plugin_list_iter;\n \n+have_lto_wrapper:\n+  plugin_list_iter->handle = plugin_handle;\n+\n   onload = dlsym (plugin_handle, \"onload\");\n   if (!onload)\n     return 0;\n@@ -287,23 +663,63 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n   tv[i].tv_tag = LDPT_ADD_SYMBOLS;\n   tv[i].tv_u.tv_add_symbols = add_symbols;\n \n+  if (get_lto_wrapper (plugin_list_iter))\n+    {\n+      ++i;\n+      tv[i].tv_tag = LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK;\n+      tv[i].tv_u.tv_register_all_symbols_read = register_all_symbols_read;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_REGISTER_CLEANUP_HOOK;\n+      tv[i].tv_u.tv_register_cleanup = register_cleanup;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_GET_SYMBOLS;\n+      tv[i].tv_u.tv_get_symbols = get_symbols;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_GET_SYMBOLS_V2;\n+      tv[i].tv_u.tv_get_symbols = get_symbols;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_OPTION;\n+      tv[i].tv_u.tv_string = plugin_list_iter->lto_wrapper;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_OPTION;\n+      tv[i].tv_u.tv_string = plugin_list_iter->resolution_option;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_LINKER_OUTPUT;\n+      tv[i].tv_u.tv_val = LDPO_EXEC;\n+\n+      ++i;\n+      tv[i].tv_tag = LDPT_ADD_INPUT_FILE;\n+      tv[i].tv_u.tv_add_input_file = add_input_file;\n+    }\n+\n   ++i;\n   tv[i].tv_tag = LDPT_NULL;\n   tv[i].tv_u.tv_val = 0;\n \n+  current_plugin = plugin_list_iter;\n+\n+  /* LTO plugin will call handler hooks to set up plugin handlers.  */\n   status = (*onload)(tv);\n \n   if (status != LDPS_OK)\n     return 0;\n \n-  plugin_list_iter->claim_file = claim_file;\n+  if (current_plugin->lto_wrapper\n+      && setup_lto_wrapper_env (current_plugin))\n+    return 0;\n \n have_claim_file:\n   *has_plugin_p = 1;\n \n   abfd->plugin_format = bfd_plugin_no;\n \n-  if (!claim_file)\n+  if (!current_plugin->claim_file)\n     return 0;\n \n   if (!try_claim (abfd))\n@@ -562,7 +978,15 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n \t\t\tSEC_ALLOC | SEC_LOAD | SEC_CODE | SEC_HAS_CONTENTS);\n   static asection fake_common_section\n     = BFD_FAKE_SECTION (fake_common_section, NULL, \"plug\", 0, SEC_IS_COMMON);\n-  int i;\n+  int i, j;\n+  long real_nsyms;\n+  asymbol **real_syms;\n+\n+  real_syms = plugin_data->real_syms;\n+  if (real_syms)\n+    real_nsyms = plugin_data->real_nsyms;\n+  else\n+    real_nsyms = 0;\n \n   for (i = 0; i < nsyms; i++)\n     {\n@@ -587,6 +1011,15 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n \tcase LDPK_DEF:\n \tcase LDPK_WEAKDEF:\n \t  s->section = &fake_section;\n+\t  if (real_nsyms)\n+\t    /* Use real LTO symbols if possible.  */\n+\t    for (j = 0; j < real_nsyms; j++)\n+\t      if (real_syms[j]->name\n+\t\t  && strcmp (syms[i].name, real_syms[j]->name) == 0)\n+\t\t{\n+\t\t  s->section = real_syms[j]->section;\n+\t\t  break;\n+\t\t}\n \t  break;\n \tdefault:\n \t  BFD_ASSERT (0);\n@@ -635,6 +1068,24 @@ bfd_plugin_sizeof_headers (bfd *a ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n+static bfd_boolean\n+bfd_plugin_close_and_cleanup (bfd *abfd)\n+{\n+  struct plugin_data_struct *plugin_data;\n+\n+  if (abfd->format != bfd_archive\n+      && (plugin_data = abfd->tdata.plugin_data))\n+    {\n+      if (plugin_data->real_bfd)\n+\tbfd_close (plugin_data->real_bfd);\n+\n+      if (plugin_data->real_syms)\n+\tfree (plugin_data->real_syms);\n+    }\n+\n+  return _bfd_generic_close_and_cleanup (abfd);\n+}\n+\n const bfd_target plugin_vec =\n {\n   \"plugin\",\t\t\t/* Name.  */"
    },
    {
      "sha": "05c3573933dc5929a9472e3a104263a52cf33cdd",
      "filename": "bfd/plugin.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/plugin.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/bfd/plugin.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.h?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -33,6 +33,9 @@ typedef struct plugin_data_struct\n {\n   int nsyms;\n   const struct ld_plugin_symbol *syms;\n+  bfd *real_bfd;\n+  long real_nsyms;\n+  asymbol **real_syms;\n }\n plugin_data_struct;\n "
    },
    {
      "sha": "57c215fae468976f38458a90d369aa2025863dba",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25355\n+\t* testsuite/ld-plugin/lto.exp: Run PR binutils/25355 test.\n+\t* testsuite/ld-plugin/pr25355.c: New file.\n+\t* testsuite/ld-plugin/pr25355.d: Likewise.\n+\t* testsuite/lib/ld-lib.exp (run_cc_link_tests): Support compile\n+\tonly dump.\n+\n 2020-02-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* testsuite/ld-unique/unique.exp (contains_unique_symbol): Updated."
    },
    {
      "sha": "1b44b0da3fda900518255a18cf9f2a57e8f07841",
      "filename": "ld/testsuite/ld-plugin/lto.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/lto.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/lto.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/lto.exp?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -234,6 +234,11 @@ set lto_link_tests [list \\\n   [list \"Build pr24406-2b.o\" \\\n    \"\" \"-O2 -fno-lto\" \\\n    {pr24406-2b.c}] \\\n+  [list \"pr25355.o\" \\\n+   \"\" \\\n+   \"-flto -fno-common $lto_no_fat\" \\\n+   {pr25355.c} \\\n+   [list [list \"nm\" \"$plug_opt\" \"pr25355.d\"]]] \\\n ]\n \n if { [at_least_gcc_version 4 7] } {"
    },
    {
      "sha": "99f01fb5c896a8f90bce6dc4cf9cb8ea8ed826a9",
      "filename": "ld/testsuite/ld-plugin/pr25355.c",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/pr25355.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/pr25355.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/pr25355.c?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -0,0 +1,2 @@\n+int nm_test_var;\n+int nm_test_var2 = 1234;"
    },
    {
      "sha": "98d10aba1cf78d0b850446c398d26b37cdcbf6a1",
      "filename": "ld/testsuite/ld-plugin/pr25355.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/pr25355.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/ld-plugin/pr25355.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/pr25355.d?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -0,0 +1,4 @@\n+#...\n+[0-9a-f]+ B _?nm_test_var\n+[0-9a-f]+ D _?nm_test_var2\n+#pass"
    },
    {
      "sha": "015eda6eb971d6f97905bfa0d55880a8f2131245",
      "filename": "ld/testsuite/lib/ld-lib.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/lib/ld-lib.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0aa99dcd70bce68f8efef310350a6294e1143382/ld/testsuite/lib/ld-lib.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/lib/ld-lib.exp?ref=0aa99dcd70bce68f8efef310350a6294e1143382",
      "patch": "@@ -928,6 +928,7 @@ proc run_cc_link_tests { ldtests } {\n \n \tif { $binfile eq \"tmpdir/\" } {\n \t    # compile only\n+\t    set binfile $objfile\n \t} elseif { [regexp \".*\\\\.a$\" $binfile] } {\n \t    if { ![ar_simple_create $ar $ldflags $binfile \"$objfiles\"] } {\n \t\tset failed 1"
    }
  ]
}