{
  "sha": "5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI5YjNlNTNhNjhmNDU2OGRjMGI2OTA3ZTM0ZTc2M2E2YzNkZDE0NQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T18:58:29Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T19:03:20Z"
    },
    "message": "Introduce forward_scope_exit\n\nThis adds a template that can be used to automatically instantiate\nscope_exit-like types that wrap some cleanup function.  The\ninstantiated type has a ctor that has the same interface as the\nwrapped function.  While the \"magic\" is just straight C++11, the\nintended use is via the FORWARD_SCOPE_EXIT macro, which is a minimal\nmacro that avoids spelling out the wrapped function name more than\nonce:\n\n void some_function (int foo, object *bar);\n using some_function_fce = FORWARD_SCOPE_EXIT (some_function);\n some_function_fce cleanup (some_int, some_obj_ptr);\n\nThe above runs:\n  some_function (some_int, some_obj_ptr);\nat scope exit.\n\nThis is mainly useful as opposed to a simpler SCOPE_EXIT when you need\nto:\n  - cancel the scope_exit, in which case you need the object's name\n  - wrap the scope_exit in a gdb::optional, in which case you need the\n    scope_exit's type in advance.\n\nMore details in the code comments.\n\ngdb/ChangeLog:\n2019-01-23  Pedro Alves  <palves@redhat.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* common/forward-scope-exit.h: New file.",
    "tree": {
      "sha": "88330e51c94cb494319813787fe23e42abeee4b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88330e51c94cb494319813787fe23e42abeee4b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54b65c9b51ec80ef5812dde1a508ce171eeb8ce6"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 128,
    "deletions": 0
  },
  "files": [
    {
      "sha": "dff515d8cebfeef62e6cc60537efd813faa5e8a4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
      "patch": "@@ -1,3 +1,8 @@\n+2019-01-23  Pedro Alves  <palves@redhat.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* common/forward-scope-exit.h: New file.\n+\n 2019-01-23  Pedro Alves  <palves@redhat.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n \t    Tom Tromey  <tom@tromey.com>"
    },
    {
      "sha": "8d639151a437e426eb9173ff1feb7868f1cacaf8",
      "filename": "gdb/common/forward-scope-exit.h",
      "status": "added",
      "additions": 123,
      "deletions": 0,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145/gdb/common/forward-scope-exit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145/gdb/common/forward-scope-exit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/forward-scope-exit.h?ref=5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
      "patch": "@@ -0,0 +1,123 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef COMMON_FORWARD_SCOPE_EXIT_H\n+#define COMMON_FORWARD_SCOPE_EXIT_H\n+\n+#include \"common/scope-exit.h\"\n+#include <functional>\n+\n+/* A forward_scope_exit is like scope_exit, but instead of giving it a\n+   callable, you instead specialize it for a given cleanup function,\n+   and the generated class automatically has a constructor with the\n+   same interface as the cleanup function.  forward_scope_exit\n+   captures the arguments passed to the ctor, and in turn passes those\n+   as arguments to the wrapped cleanup function, when it is called at\n+   scope exit time, from within the forward_scope_exit dtor.  The\n+   forward_scope_exit class can take any number of arguments, and is\n+   cancelable if needed.\n+\n+   This allows usage like this:\n+\n+      void\n+      delete_longjmp_breakpoint (int arg)\n+      {\n+\t// Blah, blah, blah...\n+      }\n+\n+      using longjmp_breakpoint_cleanup\n+\t= FORWARD_SCOPE_EXIT (delete_longjmp_breakpoint);\n+\n+   This above created a new cleanup class `longjmp_breakpoint_cleanup`\n+   than can then be used like this:\n+\n+      longjmp_breakpoint_cleanup obj (thread);\n+\n+      // Blah, blah, blah...\n+\n+      obj.release ();  // Optional cancel if needed.\n+\n+   forward_scope_exit is also handy when you would need to wrap a\n+   scope_exit in a gdb::optional:\n+\n+      gdb::optional<longjmp_breakpoint_cleanup> cleanup;\n+      if (some condition)\n+\tcleanup.emplace (thread);\n+      ...\n+      if (cleanup)\n+\tcleanup->release ();\n+\n+   since with scope exit, you would have to know the scope_exit's\n+   callable template type when you create the gdb::optional:\n+\n+     gdb:optional<scope_exit<what goes here?>>\n+\n+   The \"forward\" naming fits both purposes shown above -- the class\n+   \"forwards\" ctor arguments to the wrapped cleanup function at scope\n+   exit time, and can also be used to \"forward declare\"\n+   scope_exit-like objects.  */\n+\n+namespace detail\n+{\n+\n+/* Function and Signature are passed in the same type, in order to\n+   extract Function's arguments' types in the specialization below.\n+   Those are used to generate the constructor.  */\n+\n+template<typename Function, Function *function, typename Signature>\n+struct forward_scope_exit;\n+\n+template<typename Function, Function *function,\n+\t typename Res, typename... Args>\n+class forward_scope_exit<Function, function, Res (Args...)>\n+  : public scope_exit_base<forward_scope_exit<Function,\n+\t\t\t\t\t      function,\n+\t\t\t\t\t      Res (Args...)>>\n+{\n+  /* For access to on_exit().  */\n+  friend scope_exit_base<forward_scope_exit<Function,\n+\t\t\t\t\t    function,\n+\t\t\t\t\t    Res (Args...)>>;\n+\n+public:\n+  explicit forward_scope_exit (Args ...args)\n+    : m_bind_function (std::bind (function, args...))\n+  {\n+    /* Nothing.  */\n+  }\n+\n+private:\n+  void on_exit ()\n+  {\n+    m_bind_function ();\n+  }\n+\n+  /* The function and the arguments passed to the ctor, all packed in\n+     a std::bind.  */\n+  decltype (std::bind (function, std::declval<Args> ()...))\n+    m_bind_function;\n+};\n+\n+} /* namespace detail */\n+\n+/* This is the \"public\" entry point.  It's a macro to avoid having to\n+   name FUNC more than once.  */\n+\n+#define FORWARD_SCOPE_EXIT(FUNC) \\\n+  detail::forward_scope_exit<decltype (FUNC), FUNC, decltype (FUNC)>\n+\n+#endif /* COMMON_FORWARD_SCOPE_EXIT_H */"
    }
  ]
}