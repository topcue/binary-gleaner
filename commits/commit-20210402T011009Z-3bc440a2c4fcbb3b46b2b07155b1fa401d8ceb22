{
  "sha": "3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2JjNDQwYTJjNGZjYmIzYjQ2YjJiMDcxNTViMWZhNDAxZDhjZWIyMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-04-02T01:10:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-02T01:10:09Z"
    },
    "message": "gdb: remove TYPE_DECLARED_CLASS\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_DECLARED_CLASS): Remove, replace all uses\n\twith type::is_declared_class.\n\nChange-Id: Ifecb2342417ecd7bf570c3205344b09d706daab2",
    "tree": {
      "sha": "4a6caa0ccfb1d97b9d76aaed41b431f7fe616943",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a6caa0ccfb1d97b9d76aaed41b431f7fe616943"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aa70e35c71a2bfa8c2733878b665edb39c171d34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70e35c71a2bfa8c2733878b665edb39c171d34",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aa70e35c71a2bfa8c2733878b665edb39c171d34"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 19,
    "deletions": 22
  },
  "files": [
    {
      "sha": "72403915370047ae4a9846f13577aee9a0765141",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_DECLARED_CLASS): Remove, replace all uses\n+\twith type::is_declared_class.\n+\n 2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <is_declared_class,"
    },
    {
      "sha": "d6a2322dbf6e4810f1ccda88f912d6e20434e6ae",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -1879,7 +1879,7 @@ type_aggregate_p (struct type *type)\n \t  || type->code () == TYPE_CODE_UNION\n \t  || type->code () == TYPE_CODE_NAMESPACE\n \t  || (type->code () == TYPE_CODE_ENUM\n-\t      && TYPE_DECLARED_CLASS (type)));\n+\t      && type->is_declared_class ()));\n }\n \n /* Validate a parameter typelist.  */"
    },
    {
      "sha": "f81f1c2c1131b32c8ba33d0298ae894117b35497",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -965,7 +965,7 @@ output_access_specifier (struct ui_file *stream,\n static bool\n need_access_label_p (struct type *type)\n {\n-  if (TYPE_DECLARED_CLASS (type))\n+  if (type->is_declared_class ())\n     {\n       QUIT;\n       for (int i = TYPE_N_BASECLASSES (type); i < type->num_fields (); i++)\n@@ -1061,7 +1061,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n   c_type_print_modifier (type, stream, 0, 1, language);\n   if (type->code () == TYPE_CODE_UNION)\n     fprintf_filtered (stream, \"union \");\n-  else if (TYPE_DECLARED_CLASS (type))\n+  else if (type->is_declared_class ())\n     fprintf_filtered (stream, \"class \");\n   else\n     fprintf_filtered (stream, \"struct \");\n@@ -1499,7 +1499,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t    fprintf_filtered (stream, \"union \");\n \t  else if (type->code () == TYPE_CODE_STRUCT)\n \t    {\n-\t      if (TYPE_DECLARED_CLASS (type))\n+\t      if (type->is_declared_class ())\n \t\tfprintf_filtered (stream, \"class \");\n \t      else\n \t\tfprintf_filtered (stream, \"struct \");\n@@ -1552,7 +1552,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n     case TYPE_CODE_ENUM:\n       c_type_print_modifier (type, stream, 0, 1, language);\n       fprintf_filtered (stream, \"enum \");\n-      if (TYPE_DECLARED_CLASS (type))\n+      if (type->is_declared_class ())\n \tfprintf_filtered (stream, \"class \");\n       /* Print the tag name if it exists.\n \t The aCC compiler emits a spurious "
    },
    {
      "sha": "71ad6791e1df4c968d6c0390c09c6a358ee59d32",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -91,7 +91,7 @@ get_method_access_flag (const struct type *type, int fni, int num)\n   gdb_assert (type->code () == TYPE_CODE_STRUCT);\n \n   /* If this type was not declared a class, everything is public.  */\n-  if (!TYPE_DECLARED_CLASS (type))\n+  if (!type->is_declared_class ())\n     return GCC_CP_ACCESS_PUBLIC;\n \n   /* Otherwise, read accessibility from the fn_field.  */\n@@ -828,11 +828,11 @@ compile_cplus_convert_struct_or_union (compile_cplus_instance *instance,\n   gcc_decl resuld;\n   if (type->code () == TYPE_CODE_STRUCT)\n     {\n-      const char *what = TYPE_DECLARED_CLASS (type) ? \"class\" : \"struct\";\n+      const char *what = type->is_declared_class () ? \"class\" : \"struct\";\n \n       resuld = instance->plugin ().build_decl\n \t(what, name.get (), (GCC_CP_SYMBOL_CLASS | nested_access\n-\t\t\t     | (TYPE_DECLARED_CLASS (type)\n+\t\t\t     | (type->is_declared_class ()\n \t\t\t\t? GCC_CP_FLAG_CLASS_NOFLAG\n \t\t\t\t: GCC_CP_FLAG_CLASS_IS_STRUCT)),\n \t 0, nullptr, 0, filename, line);"
    },
    {
      "sha": "20884baebbadfdf11e27c0ea7f5ac633b686e120",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -640,7 +640,7 @@ type_aggregate_p (struct type *type)\n \t  || type->code () == TYPE_CODE_UNION\n \t  || type->code () == TYPE_CODE_MODULE\n \t  || (type->code () == TYPE_CODE_ENUM\n-\t      && TYPE_DECLARED_CLASS (type)));\n+\t      && type->is_declared_class ()));\n }\n \n /* Take care of parsing a number (anything that starts with a digit)."
    },
    {
      "sha": "165a8090f994dd477ea805b4ffa4f8d94da03f33",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -23307,7 +23307,7 @@ determine_prefix (struct die_info *die, struct dwarf2_cu *cu)\n \treturn determine_prefix (parent, cu);\n       case DW_TAG_enumeration_type:\n \tparent_type = read_type_die (parent, cu);\n-\tif (TYPE_DECLARED_CLASS (parent_type))\n+\tif (parent_type->is_declared_class ())\n \t  {\n \t    if (parent_type->name () != NULL)\n \t      return parent_type->name ();"
    },
    {
      "sha": "5a20e7e16ca1da0ed7fa06a1ea40f37fc74aded7",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -4507,7 +4507,7 @@ rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value\n     case TYPE_CODE_CHAR:\n     case TYPE_CODE_RANGE:\n     case TYPE_CODE_BOOL:\n-      if (TYPE_DECLARED_CLASS (arg))\n+      if (arg->is_declared_class ())\n \treturn INCOMPATIBLE_TYPE_BADNESS;\n       return INTEGER_PROMOTION_BADNESS;\n     case TYPE_CODE_FLT:\n@@ -4531,7 +4531,7 @@ rank_one_type_parm_enum (struct type *parm, struct type *arg, struct value *valu\n     case TYPE_CODE_RANGE:\n     case TYPE_CODE_BOOL:\n     case TYPE_CODE_ENUM:\n-      if (TYPE_DECLARED_CLASS (parm) || TYPE_DECLARED_CLASS (arg))\n+      if (parm->is_declared_class () || arg->is_declared_class ())\n \treturn INCOMPATIBLE_TYPE_BADNESS;\n       return INTEGER_CONVERSION_BADNESS;\n     case TYPE_CODE_FLT:\n@@ -4551,7 +4551,7 @@ rank_one_type_parm_char (struct type *parm, struct type *arg, struct value *valu\n     case TYPE_CODE_RANGE:\n     case TYPE_CODE_BOOL:\n     case TYPE_CODE_ENUM:\n-      if (TYPE_DECLARED_CLASS (arg))\n+      if (arg->is_declared_class ())\n \treturn INCOMPATIBLE_TYPE_BADNESS;\n       return INTEGER_CONVERSION_BADNESS;\n     case TYPE_CODE_FLT:"
    },
    {
      "sha": "9677d068ee1cf87365ca5d9d9d8f1f7b7e0527a1",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -220,14 +220,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_NOTTEXT(t)\t(((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_NOTTEXT)\n \n-/* * True if this type was declared using the \"class\" keyword.  This is\n-   only valid for C++ structure and enum types.  If false, a structure\n-   was declared as a \"struct\"; if true it was declared \"class\".  For\n-   enum types, this is true when \"enum class\" or \"enum struct\" was\n-   used to declare the type..  */\n-\n-#define TYPE_DECLARED_CLASS(t) ((t)->declared_class ())\n-\n /* * True if this type is a \"flag\" enum.  A flag enum is one where all\n    the values are pairwise disjoint when \"and\"ed together.  This\n    affects how enum values are printed.  */"
    },
    {
      "sha": "b65401c079f1eeb3ac6cde651e49fcb2ea77271f",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "patch": "@@ -3313,7 +3313,7 @@ enum_constant_from_type (struct type *type, const char *name)\n   int name_len = strlen (name);\n \n   gdb_assert (type->code () == TYPE_CODE_ENUM\n-\t      && TYPE_DECLARED_CLASS (type));\n+\t      && type->is_declared_class ());\n \n   for (i = TYPE_N_BASECLASSES (type); i < type->num_fields (); ++i)\n     {"
    }
  ]
}