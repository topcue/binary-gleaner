{
  "sha": "5537ddd024adc7d1af6f9572983f77e9dd047fce",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTUzN2RkZDAyNGFkYzdkMWFmNmY5NTcyOTgzZjc3ZTlkZDA0N2ZjZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:52Z"
    },
    "message": "gdb: remove TYPE_HIGH_BOUND and TYPE_LOW_BOUND\n\nRemove the macros, use the getters of `struct dynamic_prop` instead.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_LOW_BOUND, TYPE_HIGH_BOUND): Remove.  Update\n\tall callers to use type::range_bounds followed by\n\tdynamic_prop::{low,high}.\n\nChange-Id: I31beeed65d94d81ac4f999244a8b859e2ee961d1",
    "tree": {
      "sha": "140eaabcf9d30e85f99be4c6b7f2d918ca310514",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/140eaabcf9d30e85f99be4c6b7f2d918ca310514"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5537ddd024adc7d1af6f9572983f77e9dd047fce",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5537ddd024adc7d1af6f9572983f77e9dd047fce",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5537ddd024adc7d1af6f9572983f77e9dd047fce",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5537ddd024adc7d1af6f9572983f77e9dd047fce/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c2e4e0689ea244d0ed979171a3d09c9176b8175",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c2e4e0689ea244d0ed979171a3d09c9176b8175",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c2e4e0689ea244d0ed979171a3d09c9176b8175"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 58,
    "deletions": 53
  },
  "files": [
    {
      "sha": "e6acbb2fd834ed3ea73bc67d257b20ed39e587d7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_LOW_BOUND, TYPE_HIGH_BOUND): Remove.  Update\n+\tall callers to use type::range_bounds followed by\n+\tdynamic_prop::{low,high}.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbtypes.h (struct dynamic_prop) <kind, set_undefined,"
    },
    {
      "sha": "8d0b6c21faff619169573714330fa99002397b91",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -725,7 +725,7 @@ ada_discrete_type_high_bound (struct type *type)\n   switch (type->code ())\n     {\n     case TYPE_CODE_RANGE:\n-      return TYPE_HIGH_BOUND (type);\n+      return type->bounds ()->high.const_val ();\n     case TYPE_CODE_ENUM:\n       return TYPE_FIELD_ENUMVAL (type, type->num_fields () - 1);\n     case TYPE_CODE_BOOL:\n@@ -746,7 +746,7 @@ ada_discrete_type_low_bound (struct type *type)\n   switch (type->code ())\n     {\n     case TYPE_CODE_RANGE:\n-      return TYPE_LOW_BOUND (type);\n+      return type->bounds ()->low.const_val ();\n     case TYPE_CODE_ENUM:\n       return TYPE_FIELD_ENUMVAL (type, 0);\n     case TYPE_CODE_BOOL:\n@@ -2250,7 +2250,7 @@ has_negatives (struct type *type)\n     case TYPE_CODE_INT:\n       return !TYPE_UNSIGNED (type);\n     case TYPE_CODE_RANGE:\n-      return TYPE_LOW_BOUND (type) - type->bounds ()->bias < 0;\n+      return type->bounds ()->low.const_val () - type->bounds ()->bias < 0;\n     }\n }\n \n@@ -8283,13 +8283,13 @@ ada_is_redundant_range_encoding (struct type *range_type,\n   n = 8; /* Skip \"___XDLU_\".  */\n   if (!ada_scan_number (bounds_str, n, &lo, &n))\n     return 0;\n-  if (TYPE_LOW_BOUND (range_type) != lo)\n+  if (range_type->bounds ()->low.const_val () != lo)\n     return 0;\n \n   n += 2; /* Skip the \"__\" separator between the two bounds.  */\n   if (!ada_scan_number (bounds_str, n, &hi, &n))\n     return 0;\n-  if (TYPE_HIGH_BOUND (range_type) != hi)\n+  if (range_type->bounds ()->high.const_val () != hi)\n     return 0;\n \n   return 1;\n@@ -10604,8 +10604,10 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \t  return value_from_longest (type, (LONGEST) 1);\n \n         case TYPE_CODE_RANGE:\n-\t  arg2 = value_from_longest (type, TYPE_LOW_BOUND (type));\n-\t  arg3 = value_from_longest (type, TYPE_HIGH_BOUND (type));\n+\t  arg2 = value_from_longest (type,\n+\t\t\t\t     type->bounds ()->low.const_val ());\n+\t  arg3 = value_from_longest (type,\n+\t\t\t\t     type->bounds ()->high.const_val ());\n \t  binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n \t  binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg3);\n \t  type = language_bool_type (exp->language_defn, exp->gdbarch);\n@@ -11422,7 +11424,7 @@ ada_is_modular_type (struct type *type)\n ULONGEST\n ada_modulus (struct type *type)\n {\n-  return (ULONGEST) TYPE_HIGH_BOUND (type) + 1;\n+  return (ULONGEST) type->bounds ()->high.const_val () + 1;\n }\n \f\n "
    },
    {
      "sha": "7870a7847ad6ef9b68cb5dd18fe489cca992f837",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -901,7 +901,8 @@ ada_tasks_inferior_data_sniffer (struct ada_tasks_inferior_data *data)\n \t    {\n \t      data->known_tasks_element = eltype;\n \t      data->known_tasks_length =\n-\t\tTYPE_HIGH_BOUND (idxtype) - TYPE_LOW_BOUND (idxtype) + 1;\n+\t\t(idxtype->bounds ()->high.const_val ()\n+\t\t - idxtype->bounds ()->low.const_val () + 1);\n \t      return;\n \t    }\n \t}"
    },
    {
      "sha": "6a5b7d3f37aac30d7e3fed5a3def0b818bee8763",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -42,7 +42,7 @@ static void\n adjust_type_signedness (struct type *type)\n {\n   if (type != NULL && type->code () == TYPE_CODE_RANGE\n-      && TYPE_LOW_BOUND (type) >= 0)\n+      && type->bounds ()->low.const_val () >= 0)\n     TYPE_UNSIGNED (type) = 1;\n }\n "
    },
    {
      "sha": "a0b84936b023bf62525d821dc032d0609c9fcfb0",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -307,12 +307,13 @@ c_describe_child (const struct varobj *parent, int index,\n     case TYPE_CODE_ARRAY:\n       if (cname)\n \t*cname = int_string (index\n-\t\t\t     + TYPE_LOW_BOUND (type->index_type ()),\n+\t\t\t     + type->index_type ()->bounds ()->low.const_val (),\n \t\t\t     10, 1, 0, 0);\n \n       if (cvalue && value)\n \t{\n-\t  int real_index = index + TYPE_LOW_BOUND (type->index_type ());\n+\t  int real_index\n+\t    = index + type->index_type ()->bounds ()->low.const_val ();\n \n \t  try\n \t    {\n@@ -327,12 +328,10 @@ c_describe_child (const struct varobj *parent, int index,\n \t*ctype = get_target_type (type);\n \n       if (cfull_expression)\n-\t*cfull_expression = \n-\t  string_printf (\"(%s)[%s]\", parent_expression.c_str (),\n-\t\t\t int_string (index\n-\t\t\t\t     + TYPE_LOW_BOUND (type->index_type ()),\n-\t\t\t\t     10, 1, 0, 0));\n-\n+\t*cfull_expression = string_printf\n+\t  (\"(%s)[%s]\", parent_expression.c_str (),\n+\t   int_string (index + type->index_type ()->bounds ()->low.const_val (),\n+\t\t       10, 1, 0, 0));\n \n       break;\n "
    },
    {
      "sha": "3c900a24a3a628c5a72be657628f8020b2ccb670",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -47,7 +47,7 @@ convert_array (compile_c_instance *context, struct type *type)\n   if (TYPE_LOW_BOUND_KIND (range) != PROP_CONST)\n     return context->plugin ().error (_(\"array type with non-constant\"\n \t\t\t\t       \" lower bound is not supported\"));\n-  if (TYPE_LOW_BOUND (range) != 0)\n+  if (range->bounds ()->low.const_val () != 0)\n     return context->plugin ().error (_(\"cannot convert array type with \"\n \t\t\t\t       \"non-zero lower bound to C\"));\n "
    },
    {
      "sha": "4084f87e5a359754f4d03428a6b2a9e4dcfdbbb4",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -464,7 +464,7 @@ compile_cplus_convert_array (compile_cplus_instance *instance,\n       return instance->plugin ().error (s);\n     }\n \n-  if (TYPE_LOW_BOUND (range) != 0)\n+  if (range->bounds ()->low.const_val () != 0)\n     {\n       const char *s = _(\"cannot convert array type with \"\n \t\t\t\"non-zero lower bound to C\");"
    },
    {
      "sha": "2191e190927e6626c2b9b2ae2b70efece4f3ba75",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -384,12 +384,12 @@ value_f90_subarray (struct value *array,\n   *pos += 3;\n \n   if (range_type == LOW_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n-    low_bound = TYPE_LOW_BOUND (range);\n+    low_bound = range->bounds ()->low.const_val ();\n   else\n     low_bound = value_as_long (evaluate_subexp (NULL_TYPE, exp, pos, noside));\n \n   if (range_type == HIGH_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n-    high_bound = TYPE_HIGH_BOUND (range);\n+    high_bound = range->bounds ()->high.const_val ();\n   else\n     high_bound = value_as_long (evaluate_subexp (NULL_TYPE, exp, pos, noside));\n "
    },
    {
      "sha": "507d2f6dacbe7d65e21732090a9da6d71250fffd",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -1041,8 +1041,8 @@ get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n \t  || type->bounds ()->high.kind () != PROP_CONST)\n \treturn -1;\n \n-      *lowp = TYPE_LOW_BOUND (type);\n-      *highp = TYPE_HIGH_BOUND (type);\n+      *lowp = type->bounds ()->low.const_val ();\n+      *highp = type->bounds ()->high.const_val ();\n \n       if (TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_ENUM)\n \t{\n@@ -5116,9 +5116,9 @@ recursive_dump_type (struct type *type, int spaces)\n   if (type->code () == TYPE_CODE_RANGE)\n     {\n       printfi_filtered (spaces, \"low %s%s  high %s%s\\n\",\n-\t\t\tplongest (TYPE_LOW_BOUND (type)), \n+\t\t\tplongest (type->bounds ()->low.const_val ()),\n \t\t\tTYPE_LOW_BOUND_UNDEFINED (type) ? \" (undefined)\" : \"\",\n-\t\t\tplongest (TYPE_HIGH_BOUND (type)),\n+\t\t\tplongest (type->bounds ()->high.const_val ()),\n \t\t\tTYPE_HIGH_BOUND_UNDEFINED (type) \n \t\t\t? \" (undefined)\" : \"\");\n     }"
    },
    {
      "sha": "044af479727fbe0b3654d01b264dfe21a34b0990",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -1594,10 +1594,6 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_LOW_BOUND(range_type) \\\n-  ((range_type)->bounds ()->low.const_val ())\n-#define TYPE_HIGH_BOUND(range_type) \\\n-  ((range_type)->bounds ()->high.const_val ())\n #define TYPE_LOW_BOUND_UNDEFINED(range_type) \\\n   (TYPE_LOW_BOUND_KIND(range_type) == PROP_UNDEFINED)\n #define TYPE_HIGH_BOUND_UNDEFINED(range_type) \\\n@@ -1646,10 +1642,10 @@ extern bool set_type_align (struct type *, ULONGEST);\n    TYPE_LOW_BOUND_UNDEFINED((arraytype)->index_type ())\n \n #define TYPE_ARRAY_UPPER_BOUND_VALUE(arraytype) \\\n-   (TYPE_HIGH_BOUND((arraytype)->index_type ()))\n+   ((arraytype)->index_type ()->bounds ()->high.const_val ())\n \n #define TYPE_ARRAY_LOWER_BOUND_VALUE(arraytype) \\\n-   (TYPE_LOW_BOUND((arraytype)->index_type ()))\n+   ((arraytype)->index_type ()->bounds ()->low.const_val ())\n \n #define TYPE_ARRAY_BIT_STRIDE(arraytype) \\\n   (TYPE_BIT_STRIDE(((arraytype)->index_type ())))"
    },
    {
      "sha": "fe6f493aa7f5cfffad2995dda8dddc9eaf5d26b6",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -826,12 +826,12 @@ gdbscm_type_range (SCM self)\n     {\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n-      low = TYPE_LOW_BOUND (type->index_type ());\n-      high = TYPE_HIGH_BOUND (type->index_type ());\n+      low = type->index_type ()->bounds ()->low.const_val ();\n+      high = type->index_type ()->bounds ()->high.const_val ();\n       break;\n     case TYPE_CODE_RANGE:\n-      low = TYPE_LOW_BOUND (type);\n-      high = TYPE_HIGH_BOUND (type);\n+      low = type->bounds ()->low.const_val ();\n+      high = type->bounds ()->high.const_val ();\n       break;\n     }\n "
    },
    {
      "sha": "39f0e8e2961022994ccc3c30b0808252d909989a",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -188,7 +188,7 @@ void\n m2_range (struct type *type, struct ui_file *stream, int show,\n \t  int level, const struct type_print_options *flags)\n {\n-  if (TYPE_HIGH_BOUND (type) == TYPE_LOW_BOUND (type))\n+  if (type->bounds ()->high.const_val () == type->bounds ()->low.const_val ())\n     {\n       /* FIXME: TYPE_TARGET_TYPE used to be TYPE_DOMAIN_TYPE but that was\n \t wrong.  Not sure if TYPE_TARGET_TYPE is correct though.  */\n@@ -200,9 +200,9 @@ m2_range (struct type *type, struct ui_file *stream, int show,\n       struct type *target = TYPE_TARGET_TYPE (type);\n \n       fprintf_filtered (stream, \"[\");\n-      print_type_scalar (target, TYPE_LOW_BOUND (type), stream);\n+      print_type_scalar (target, type->bounds ()->low.const_val (), stream);\n       fprintf_filtered (stream, \"..\");\n-      print_type_scalar (target, TYPE_HIGH_BOUND (type), stream);\n+      print_type_scalar (target, type->bounds ()->high.const_val (), stream);\n       fprintf_filtered (stream, \"]\");\n     }\n }\n@@ -315,9 +315,9 @@ m2_print_bounds (struct type *type,\n     return;\n \n   if (print_high)\n-    print_type_scalar (target, TYPE_HIGH_BOUND (type), stream);\n+    print_type_scalar (target, type->bounds ()->high.const_val (), stream);\n   else\n-    print_type_scalar (target, TYPE_LOW_BOUND (type), stream);\n+    print_type_scalar (target, type->bounds ()->low.const_val (), stream);\n }\n \n static void\n@@ -358,9 +358,9 @@ m2_is_long_set (struct type *type)\n \t    return 0;\n \t  range = type->field (i).type ()->index_type ();\n \t  if ((i > TYPE_N_BASECLASSES (type))\n-\t      && previous_high + 1 != TYPE_LOW_BOUND (range))\n+\t      && previous_high + 1 != range->bounds ()->low.const_val ())\n \t    return 0;\n-\t  previous_high = TYPE_HIGH_BOUND (range);\n+\t  previous_high = range->bounds ()->high.const_val ();\n \t}\n       return len>0;\n     }\n@@ -416,8 +416,8 @@ m2_is_long_set_of_type (struct type *type, struct type **of_type)\n       range = type->field (i).type ()->index_type ();\n       target = TYPE_TARGET_TYPE (range);\n \n-      l1 = TYPE_LOW_BOUND (type->field (i).type ()->index_type ());\n-      h1 = TYPE_HIGH_BOUND (type->field (len - 1).type ()->index_type ());\n+      l1 = type->field (i).type ()->index_type ()->bounds ()->low.const_val ();\n+      h1 = type->field (len - 1).type ()->index_type ()->bounds ()->high.const_val ();\n       *of_type = target;\n       if (m2_get_discrete_bounds (target, &l2, &h2) >= 0)\n \treturn (l1 == l2 && h1 == h2);"
    },
    {
      "sha": "175c53adacfa426da4e3c51341ad1f909cc63345",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -55,8 +55,9 @@ get_long_set_bounds (struct type *type, LONGEST *low, LONGEST *high)\n       i = TYPE_N_BASECLASSES (type);\n       if (len == 0)\n \treturn 0;\n-      *low = TYPE_LOW_BOUND (type->field (i).type ()->index_type ());\n-      *high = TYPE_HIGH_BOUND (type->field (len - 1).type ()->index_type ());\n+      *low = type->field (i).type ()->index_type ()->bounds ()->low.const_val ();\n+      *high = (type->field (len - 1).type ()->index_type ()->bounds ()\n+\t       ->high.const_val ());\n       return 1;\n     }\n   error (_(\"expecting long_set\"));"
    },
    {
      "sha": "c453df4b003c546ae6fa9fe770177f885ac77068",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -797,9 +797,9 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n       {\n \tstruct type *target = TYPE_TARGET_TYPE (type);\n \n-\tprint_type_scalar (target, TYPE_LOW_BOUND (type), stream);\n+\tprint_type_scalar (target, type->bounds ()->low.const_val (), stream);\n \tfputs_filtered (\"..\", stream);\n-\tprint_type_scalar (target, TYPE_HIGH_BOUND (type), stream);\n+\tprint_type_scalar (target, type->bounds ()->high.const_val (), stream);\n       }\n       break;\n "
    },
    {
      "sha": "e99ee415e2f921a16802f1518da59cd8a112b868",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5537ddd024adc7d1af6f9572983f77e9dd047fce/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=5537ddd024adc7d1af6f9572983f77e9dd047fce",
      "patch": "@@ -592,12 +592,12 @@ typy_range (PyObject *self, PyObject *args)\n     {\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n-      low = TYPE_LOW_BOUND (type->index_type ());\n-      high = TYPE_HIGH_BOUND (type->index_type ());\n+      low = type->index_type ()->bounds ()->low.const_val ();\n+      high = type->index_type ()->bounds ()->high.const_val ();\n       break;\n     case TYPE_CODE_RANGE:\n-      low = TYPE_LOW_BOUND (type);\n-      high = TYPE_HIGH_BOUND (type);\n+      low = type->bounds ()->low.const_val ();\n+      high = type->bounds ()->high.const_val ();;\n       break;\n     }\n "
    }
  ]
}