{
  "sha": "61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjFiMzAwOTk3MDJhNzZmYjdlNmE5YzVkYmE3YzAzYjk1ZjllYjBmMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-24T16:51:19Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-06T23:04:31Z"
    },
    "message": "Remove last cleanups from stabsread.c\n\nThis removes the last cleanups from stabsread.c.  Similar code in\ndwarf2read.c was C++-ified, but considering that stabs are deprecated,\nit seemed simpler to just change these allocations to use an obstack\nand leave the data structures in place.\n\nThis patch renames field_info to stabs_field_info -- adding a\nconstructor here provoked a bug due to the resulting ODR violation.\n\n2019-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* stabsread.c (struct stabs_field_info): Rename from field_info.\n\t<list, fnlist>: Add initializers.\n\t<obstack>: New member.\n\t(read_member_functions, read_struct_fields, read_baseclasses):\n\tAllocate on obstack.  Don't use cleanups.\n\t(read_one_struct_field, read_member_functions, read_struct_fields)\n\t(read_baseclasses, read_tilde_fields, attach_fn_fields_to_type)\n\t(attach_fields_to_type, read_cpp_abbrev, read_member_functions)\n\t(read_struct_type): Update.",
    "tree": {
      "sha": "e40a90e10a92af76c33ab6441da64ea9596c1299",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e40a90e10a92af76c33ab6441da64ea9596c1299"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6cceac94147f6026e93dcfc0a0df03555b571a12",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cceac94147f6026e93dcfc0a0df03555b571a12",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6cceac94147f6026e93dcfc0a0df03555b571a12"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 47,
    "deletions": 46
  },
  "files": [
    {
      "sha": "ef323e126cbe4e5eb1f2d1aa734fee58b7d784d9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
      "patch": "@@ -1,3 +1,15 @@\n+2019-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* stabsread.c (struct stabs_field_info): Rename from field_info.\n+\t<list, fnlist>: Add initializers.\n+\t<obstack>: New member.\n+\t(read_member_functions, read_struct_fields, read_baseclasses):\n+\tAllocate on obstack.  Don't use cleanups.\n+\t(read_one_struct_field, read_member_functions, read_struct_fields)\n+\t(read_baseclasses, read_tilde_fields, attach_fn_fields_to_type)\n+\t(attach_fields_to_type, read_cpp_abbrev, read_member_functions)\n+\t(read_struct_type): Update.\n+\n 2019-03-06  Tom Tromey  <tom@tromey.com>\n \n \t* nat/linux-namespaces.c (linux_mntns_access_fs): Use SCOPE_EXIT."
    },
    {
      "sha": "ac33465c13b028799d7ab27b852c0a83de8b55e3",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 35,
      "deletions": 46,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=61b30099702a76fb7e6a9c5dba7c03b95f9eb0f2",
      "patch": "@@ -85,14 +85,16 @@ struct next_fnfieldlist\n    This is part of some reorganization of low level C++ support and is\n    expected to eventually go away...  (FIXME) */\n \n-struct field_info\n+struct stab_field_info\n   {\n-    struct nextfield *list;\n-    struct next_fnfieldlist *fnlist;\n+    struct nextfield *list = nullptr;\n+    struct next_fnfieldlist *fnlist = nullptr;\n+\n+    auto_obstack obstack;\n   };\n \n static void\n-read_one_struct_field (struct field_info *, const char **, const char *,\n+read_one_struct_field (struct stab_field_info *, const char **, const char *,\n \t\t       struct type *, struct objfile *);\n \n static struct type *dbx_alloc_type (int[2], struct objfile *);\n@@ -125,24 +127,24 @@ static struct type *read_enum_type (const char **, struct type *, struct objfile\n static struct type *rs6000_builtin_type (int, struct objfile *);\n \n static int\n-read_member_functions (struct field_info *, const char **, struct type *,\n+read_member_functions (struct stab_field_info *, const char **, struct type *,\n \t\t       struct objfile *);\n \n static int\n-read_struct_fields (struct field_info *, const char **, struct type *,\n+read_struct_fields (struct stab_field_info *, const char **, struct type *,\n \t\t    struct objfile *);\n \n static int\n-read_baseclasses (struct field_info *, const char **, struct type *,\n+read_baseclasses (struct stab_field_info *, const char **, struct type *,\n \t\t  struct objfile *);\n \n static int\n-read_tilde_fields (struct field_info *, const char **, struct type *,\n+read_tilde_fields (struct stab_field_info *, const char **, struct type *,\n \t\t   struct objfile *);\n \n-static int attach_fn_fields_to_type (struct field_info *, struct type *);\n+static int attach_fn_fields_to_type (struct stab_field_info *, struct type *);\n \n-static int attach_fields_to_type (struct field_info *, struct type *,\n+static int attach_fields_to_type (struct stab_field_info *, struct type *,\n \t\t\t\t  struct objfile *);\n \n static struct type *read_struct_type (const char **, struct type *,\n@@ -158,7 +160,7 @@ static struct field *read_args (const char **, int, struct objfile *,\n static void add_undefined_type (struct type *, int[2]);\n \n static int\n-read_cpp_abbrev (struct field_info *, const char **, struct type *,\n+read_cpp_abbrev (struct stab_field_info *, const char **, struct type *,\n \t\t struct objfile *);\n \n static const char *find_name_end (const char *name);\n@@ -2277,7 +2279,7 @@ stabs_method_name_from_physname (const char *physname)\n    Returns 1 for success, 0 for failure.  */\n \n static int\n-read_member_functions (struct field_info *fip, const char **pp,\n+read_member_functions (struct stab_field_info *fip, const char **pp,\n \t\t       struct type *type, struct objfile *objfile)\n {\n   int nfn_fields = 0;\n@@ -2317,8 +2319,7 @@ read_member_functions (struct field_info *fip, const char **pp,\n       look_ahead_type = NULL;\n       length = 0;\n \n-      new_fnlist = XCNEW (struct next_fnfieldlist);\n-      make_cleanup (xfree, new_fnlist);\n+      new_fnlist = OBSTACK_ZALLOC (&fip->obstack, struct next_fnfieldlist);\n \n       if ((*pp)[0] == 'o' && (*pp)[1] == 'p' && is_cplus_marker ((*pp)[2]))\n \t{\n@@ -2357,8 +2358,7 @@ read_member_functions (struct field_info *fip, const char **pp,\n \n       do\n \t{\n-\t  new_sublist = XCNEW (struct next_fnfield);\n-\t  make_cleanup (xfree, new_sublist);\n+\t  new_sublist = OBSTACK_ZALLOC (&fip->obstack, struct next_fnfield);\n \n \t  /* Check for and handle cretinous dbx symbol name continuation!  */\n \t  if (look_ahead_type == NULL)\n@@ -2642,8 +2642,8 @@ read_member_functions (struct field_info *fip, const char **pp,\n \n \t      /* Create a new fn_fieldlist for the destructors.  */\n \n-\t      destr_fnlist = XCNEW (struct next_fnfieldlist);\n-\t      make_cleanup (xfree, destr_fnlist);\n+\t      destr_fnlist = OBSTACK_ZALLOC (&fip->obstack,\n+\t\t\t\t\t     struct next_fnfieldlist);\n \n \t      destr_fnlist->fn_fieldlist.name\n \t\t= obconcat (&objfile->objfile_obstack, \"~\",\n@@ -2743,8 +2743,8 @@ read_member_functions (struct field_info *fip, const char **pp,\n    keep parsing and it's time for error_type().  */\n \n static int\n-read_cpp_abbrev (struct field_info *fip, const char **pp, struct type *type,\n-\t\t struct objfile *objfile)\n+read_cpp_abbrev (struct stab_field_info *fip, const char **pp,\n+\t\t struct type *type, struct objfile *objfile)\n {\n   const char *p;\n   const char *name;\n@@ -2838,8 +2838,9 @@ read_cpp_abbrev (struct field_info *fip, const char **pp, struct type *type,\n }\n \n static void\n-read_one_struct_field (struct field_info *fip, const char **pp, const char *p,\n-\t\t       struct type *type, struct objfile *objfile)\n+read_one_struct_field (struct stab_field_info *fip, const char **pp,\n+\t\t       const char *p, struct type *type,\n+\t\t       struct objfile *objfile)\n {\n   struct gdbarch *gdbarch = get_objfile_arch (objfile);\n \n@@ -2981,8 +2982,8 @@ read_one_struct_field (struct field_info *fip, const char **pp, const char *p,\n    Returns 1 for success, 0 for failure.  */\n \n static int\n-read_struct_fields (struct field_info *fip, const char **pp, struct type *type,\n-\t\t    struct objfile *objfile)\n+read_struct_fields (struct stab_field_info *fip, const char **pp,\n+\t\t    struct type *type, struct objfile *objfile)\n {\n   const char *p;\n   struct nextfield *newobj;\n@@ -3001,8 +3002,7 @@ read_struct_fields (struct field_info *fip, const char **pp, struct type *type,\n     {\n       STABS_CONTINUE (pp, objfile);\n       /* Get space to record the next field's data.  */\n-      newobj = XCNEW (struct nextfield);\n-      make_cleanup (xfree, newobj);\n+      newobj = OBSTACK_ZALLOC (&fip->obstack, struct nextfield);\n \n       newobj->next = fip->list;\n       fip->list = newobj;\n@@ -3079,8 +3079,8 @@ read_struct_fields (struct field_info *fip, const char **pp, struct type *type,\n \n \n static int\n-read_baseclasses (struct field_info *fip, const char **pp, struct type *type,\n-\t\t  struct objfile *objfile)\n+read_baseclasses (struct stab_field_info *fip, const char **pp,\n+\t\t  struct type *type, struct objfile *objfile)\n {\n   int i;\n   struct nextfield *newobj;\n@@ -3123,8 +3123,7 @@ read_baseclasses (struct field_info *fip, const char **pp, struct type *type,\n \n   for (i = 0; i < TYPE_N_BASECLASSES (type); i++)\n     {\n-      newobj = XCNEW (struct nextfield);\n-      make_cleanup (xfree, newobj);\n+      newobj = OBSTACK_ZALLOC (&fip->obstack, struct nextfield);\n \n       newobj->next = fip->list;\n       fip->list = newobj;\n@@ -3203,8 +3202,8 @@ read_baseclasses (struct field_info *fip, const char **pp, struct type *type,\n    so we can look for the vptr base class info.  */\n \n static int\n-read_tilde_fields (struct field_info *fip, const char **pp, struct type *type,\n-\t\t   struct objfile *objfile)\n+read_tilde_fields (struct stab_field_info *fip, const char **pp,\n+\t\t   struct type *type, struct objfile *objfile)\n {\n   const char *p;\n \n@@ -3286,7 +3285,7 @@ read_tilde_fields (struct field_info *fip, const char **pp, struct type *type,\n }\n \n static int\n-attach_fn_fields_to_type (struct field_info *fip, struct type *type)\n+attach_fn_fields_to_type (struct stab_field_info *fip, struct type *type)\n {\n   int n;\n \n@@ -3305,7 +3304,7 @@ attach_fn_fields_to_type (struct field_info *fip, struct type *type)\n    for this class's virtual functions.  */\n \n static int\n-attach_fields_to_type (struct field_info *fip, struct type *type,\n+attach_fields_to_type (struct stab_field_info *fip, struct type *type,\n \t\t       struct objfile *objfile)\n {\n   int nfields = 0;\n@@ -3474,11 +3473,7 @@ static struct type *\n read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n                   struct objfile *objfile)\n {\n-  struct cleanup *back_to;\n-  struct field_info fi;\n-\n-  fi.list = NULL;\n-  fi.fnlist = NULL;\n+  struct stab_field_info fi;\n \n   /* When describing struct/union/class types in stabs, G++ always drops\n      all qualifications from the name.  So if you've got:\n@@ -3500,8 +3495,6 @@ read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n       return type;\n     }\n \n-  back_to = make_cleanup (null_cleanup, 0);\n-\n   INIT_CPLUS_SPECIFIC (type);\n   TYPE_CODE (type) = type_code;\n   TYPE_STUB (type) = 0;\n@@ -3513,10 +3506,7 @@ read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n \n     TYPE_LENGTH (type) = read_huge_number (pp, 0, &nbits, 0);\n     if (nbits != 0)\n-      {\n-\tdo_cleanups (back_to);\n-\treturn error_type (pp, objfile);\n-      }\n+      return error_type (pp, objfile);\n     set_length_in_type_chain (type);\n   }\n \n@@ -3535,7 +3525,6 @@ read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n       type = error_type (pp, objfile);\n     }\n \n-  do_cleanups (back_to);\n   return (type);\n }\n "
    }
  ]
}