{
  "sha": "4a4e7361d67cd9262be1413300795eede564f4cb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE0ZTczNjFkNjdjZDkyNjJiZTE0MTMzMDA3OTVlZWRlNTY0ZjRjYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-18T01:04:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-19T04:31:05Z"
    },
    "message": "PowerPC64 notoc calls\n\nCalls from functions that don't have a valid toc pointer in r2 (these\ncalls are marked with _NOTOC relocs) to functions that require r2\nvalid must go via the callee global entry point.  This patch corrects\nthe condition the linker was using to detect functions that require r2\nto be valid.  Values of both zero and one in st_other local entry bits\nmean a function doesn't care about r2.\n\n\t* elf64-ppc.c (ppc64_elf_inline_plt): Correct st_other test for\n\tfunctions that require r2 valid to use local entry.\n\t(ppc64_elf_size_stubs, ppc64_elf_relocate_section): Likewise.",
    "tree": {
      "sha": "e437fd994ab680f45bb277ab91a56a3c01787b22",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e437fd994ab680f45bb277ab91a56a3c01787b22"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a4e7361d67cd9262be1413300795eede564f4cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4e7361d67cd9262be1413300795eede564f4cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a4e7361d67cd9262be1413300795eede564f4cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4e7361d67cd9262be1413300795eede564f4cb/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "312413cb844dcce24b0c30254f5789b77a54b0fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/312413cb844dcce24b0c30254f5789b77a54b0fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/312413cb844dcce24b0c30254f5789b77a54b0fc"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 9,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ea049b1d423c430c1295816fe134ce888ca1fe9f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4e7361d67cd9262be1413300795eede564f4cb/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4e7361d67cd9262be1413300795eede564f4cb/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4a4e7361d67cd9262be1413300795eede564f4cb",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (ppc64_elf_inline_plt): Correct st_other test for\n+\tfunctions that require r2 valid to use local entry.\n+\t(ppc64_elf_size_stubs, ppc64_elf_relocate_section): Likewise.\n+\n 2019-06-17  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* elfnn-aarch64.c (elfNN_aarch64_allocate_local_dynrelocs): Remove."
    },
    {
      "sha": "61620190ce623794b7f0c594e36b1ee3f8356613",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4e7361d67cd9262be1413300795eede564f4cb/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4e7361d67cd9262be1413300795eede564f4cb/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=4a4e7361d67cd9262be1413300795eede564f4cb",
      "patch": "@@ -7445,7 +7445,7 @@ ppc64_elf_inline_plt (struct bfd_link_info *info)\n \t\t\t&& !(r_type == R_PPC64_PLTCALL_NOTOC\n \t\t\t     && (((h ? h->other : sym->st_other)\n \t\t\t\t  & STO_PPC64_LOCAL_MASK)\n-\t\t\t\t != 1 << STO_PPC64_LOCAL_BIT)))\n+\t\t\t\t > 1 << STO_PPC64_LOCAL_BIT)))\n \t\t      *tls_maskp &= ~PLT_KEEP;\n \t\t  }\n \t      }\n@@ -12897,7 +12897,7 @@ ppc64_elf_size_stubs (struct bfd_link_info *info)\n \t\t\t\t   && code_sec->output_section != NULL\n \t\t\t\t   && (((hash ? hash->elf.other : sym->st_other)\n \t\t\t\t\t& STO_PPC64_LOCAL_MASK)\n-\t\t\t\t       != 1 << STO_PPC64_LOCAL_BIT)))\n+\t\t\t\t       > 1 << STO_PPC64_LOCAL_BIT)))\n \t\t\tstub_type = ppc_stub_long_branch_notoc;\n \t\t    }\n \t\t  else if (stub_type != ppc_stub_plt_call)\n@@ -15056,7 +15056,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  || stub_entry->stub_type == ppc_stub_plt_branch_both)\n \t      && (r_type != R_PPC64_REL24_NOTOC\n \t\t  || ((fdh ? fdh->elf.other : sym->st_other)\n-\t\t      & STO_PPC64_LOCAL_MASK) == 1 << STO_PPC64_LOCAL_BIT)\n+\t\t      & STO_PPC64_LOCAL_MASK) <= 1 << STO_PPC64_LOCAL_BIT)\n \t      && (relocation + addend - from + max_br_offset\n \t\t  < 2 * max_br_offset))\n \t    stub_entry = NULL;"
    }
  ]
}