{
  "sha": "bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmNkMTdkNGY1MThkY2Q5ZmZhOGIyMjE3ZjNlMjE1ZGYzMzFiZmIxYg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:34:18Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-08-11T06:34:18Z"
    },
    "message": "gas: make 2nd argument of .dcb.* consistently optional\n\nUnlike the forms consuming/producing integer data, the floating point\nones so far required the 2nd argument to be present, contrary to\ndocumentation. To avoid code duplication, split float_length() out of\nhex_float() (taking the opportunity to adjust error message wording).",
    "tree": {
      "sha": "72635b13727200fefa81f0e6a89a8cd992915444",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72635b13727200fefa81f0e6a89a8cd992915444"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de133cf98cdf4cb3d1461ef10c83ce72df7399c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de133cf98cdf4cb3d1461ef10c83ce72df7399c7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de133cf98cdf4cb3d1461ef10c83ce72df7399c7"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 78,
    "deletions": 55
  },
  "files": [
    {
      "sha": "cd82c83adeba22d27bce712275928d5dc9ce50ed",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 75,
      "deletions": 55,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
      "patch": "@@ -3639,6 +3639,68 @@ s_nops (int ignore ATTRIBUTE_UNUSED)\n   *p = val.X_add_number;\n }\n \n+/* Obtain the size of a floating point number, given a type.  */\n+\n+static int\n+float_length (int float_type, int *pad_p)\n+{\n+  int length, pad = 0;\n+\n+  switch (float_type)\n+    {\n+    case 'b':\n+    case 'B':\n+    case 'h':\n+    case 'H':\n+      length = 2;\n+      break;\n+\n+    case 'f':\n+    case 'F':\n+    case 's':\n+    case 'S':\n+      length = 4;\n+      break;\n+\n+    case 'd':\n+    case 'D':\n+    case 'r':\n+    case 'R':\n+      length = 8;\n+      break;\n+\n+    case 'x':\n+    case 'X':\n+#ifdef X_PRECISION\n+      length = X_PRECISION * sizeof (LITTLENUM_TYPE);\n+      pad = X_PRECISION_PAD * sizeof (LITTLENUM_TYPE);\n+      if (!length)\n+#endif\n+\tlength = 12;\n+      break;\n+\n+    case 'p':\n+    case 'P':\n+#ifdef P_PRECISION\n+      length = P_PRECISION * sizeof (LITTLENUM_TYPE);\n+      pad = P_PRECISION_PAD * sizeof (LITTLENUM_TYPE);\n+      if (!length)\n+#endif\n+\tlength = 12;\n+      break;\n+\n+    default:\n+      as_bad (_(\"unknown floating type '%c'\"), float_type);\n+      length = -1;\n+      break;\n+    }\n+\n+  if (pad_p)\n+    *pad_p = pad;\n+\n+  return length;\n+}\n+\n static int\n parse_one_float (int float_type, char temp[MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT])\n {\n@@ -3709,16 +3771,19 @@ s_float_space (int float_type)\n   SKIP_WHITESPACE ();\n   if (*input_line_pointer != ',')\n     {\n-      as_bad (_(\"missing value\"));\n-      ignore_rest_of_line ();\n-      if (flag_mri)\n-\tmri_comment_end (stop, stopc);\n-      return;\n+      int pad;\n+\n+      flen = float_length (float_type, &pad);\n+      if (flen >= 0)\n+\tmemset (temp, 0, flen += pad);\n     }\n+  else\n+    {\n+      ++input_line_pointer;\n \n-  ++input_line_pointer;\n+      flen = parse_one_float (float_type, temp);\n+    }\n \n-  flen = parse_one_float (float_type, temp);\n   if (flen < 0)\n     {\n       if (flag_mri)\n@@ -4847,56 +4912,11 @@ parse_repeat_cons (expressionS *exp, unsigned int nbytes)\n static int\n hex_float (int float_type, char *bytes)\n {\n-  int length, pad = 0;\n+  int pad, length = float_length (float_type, &pad);\n   int i;\n \n-  switch (float_type)\n-    {\n-    case 'b':\n-    case 'B':\n-    case 'h':\n-    case 'H':\n-      length = 2;\n-      break;\n-\n-    case 'f':\n-    case 'F':\n-    case 's':\n-    case 'S':\n-      length = 4;\n-      break;\n-\n-    case 'd':\n-    case 'D':\n-    case 'r':\n-    case 'R':\n-      length = 8;\n-      break;\n-\n-    case 'x':\n-    case 'X':\n-#ifdef X_PRECISION\n-      length = X_PRECISION * sizeof (LITTLENUM_TYPE);\n-      pad = X_PRECISION_PAD * sizeof (LITTLENUM_TYPE);\n-      if (!length)\n-#endif\n-\tlength = 12;\n-      break;\n-\n-    case 'p':\n-    case 'P':\n-#ifdef P_PRECISION\n-      length = P_PRECISION * sizeof (LITTLENUM_TYPE);\n-      pad = P_PRECISION_PAD * sizeof (LITTLENUM_TYPE);\n-      if (!length)\n-#endif\n-\tlength = 12;\n-      break;\n-\n-    default:\n-      as_bad (_(\"unknown floating type type '%c'\"), float_type);\n-      return -1;\n-    }\n+  if (length < 0)\n+    return length;\n \n   /* It would be nice if we could go through expression to parse the\n      hex constant, but if we get a bignum it's a pain to sort it into"
    },
    {
      "sha": "eabb24c3738f65d5bef04cee12f18535cd897617",
      "filename": "gas/testsuite/gas/all/float.s",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b/gas/testsuite/gas/all/float.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b/gas/testsuite/gas/all/float.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/float.s?ref=bcd17d4f518dcd9ffa8b2217f3e215df331bfb1b",
      "patch": "@@ -7,16 +7,19 @@ foo:\t.single\t0r1.2345e+06\n \n \t.dc.s 1\n \t.dc.s 0f:1234\n+\t.dcb.s 1\n \t.dcb.s 1, 1\n \t.dcb.s 1, 0s:4321\n \t.ds.s 1, -1\n \n \t.dc.d 1\n \t.dc.d 0d:1234\n+\t.dcb.d 1\n \t.dcb.d 1, 1\n \t.dcb.d 1, 0r:4321\n \t.ds.d 1, -1\n \n \t.dc.x 0x:1234\n+\t.dcb.x 1\n \t.dcb.x 1, 0x:4321\n \t.ds.x 1, -1"
    }
  ]
}