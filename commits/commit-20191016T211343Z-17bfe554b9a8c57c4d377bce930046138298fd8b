{
  "sha": "17bfe554b9a8c57c4d377bce930046138298fd8b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTdiZmU1NTRiOWE4YzU3YzRkMzc3YmNlOTMwMDQ2MTM4Mjk4ZmQ4Yg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-15T15:02:33Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-16T21:13:43Z"
    },
    "message": "Allow not saving the signal state in SIGSETJMP\n\nSaving the signal state is very slow (this patch is a 14% speedup).  The\nreason we need this code is because signal handler will leave the\nsignal blocked when we longjmp out of it.  But in this case we can\njust manually unblock the signal instead of taking the unconditional\nperf hit.\n\ngdb/ChangeLog:\n\n2019-10-16  Christian Biesinger  <cbiesinger@google.com>\n\n\t* gdbsupport/gdb_setjmp.h (SIGSETJMP): Allow passing in the value to\n\tpass on to sigsetjmp's second argument.\n\t* cp-support.c (gdb_demangle): Unblock SIGSEGV if we caught a crash.\n\nChange-Id: Ib3010966050c64b4cc8b47d8cb45871652b0b3ea",
    "tree": {
      "sha": "07bfdba2d06de217e3774ce60dabd8d22e38e675",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07bfdba2d06de217e3774ce60dabd8d22e38e675"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17bfe554b9a8c57c4d377bce930046138298fd8b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17bfe554b9a8c57c4d377bce930046138298fd8b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17bfe554b9a8c57c4d377bce930046138298fd8b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17bfe554b9a8c57c4d377bce930046138298fd8b/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "950b74950f6020eda38647f22e9077ac7f68ca49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/950b74950f6020eda38647f22e9077ac7f68ca49",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/950b74950f6020eda38647f22e9077ac7f68ca49"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 28,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ba028ed230f68eefa56cd2fe5b21888e505b8fb3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17bfe554b9a8c57c4d377bce930046138298fd8b",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-16  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* gdbsupport/gdb_setjmp.h (SIGSETJMP): Allow passing in the value to\n+\tpass on to sigsetjmp's second argument.\n+\t* cp-support.c (gdb_demangle): Unblock SIGSEGV if we caught a crash.\n+\n 2019-10-16  Keith Seitz  <keiths@redhat.com>\n \n \tPR gdb/23567"
    },
    {
      "sha": "253369b1efe5ea37c615e0af9ba158bfd48c3329",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=17bfe554b9a8c57c4d377bce930046138298fd8b",
      "patch": "@@ -1539,7 +1539,16 @@ gdb_demangle (const char *name, int options)\n       ofunc = signal (SIGSEGV, gdb_demangle_signal_handler);\n #endif\n \n-      crash_signal = SIGSETJMP (gdb_demangle_jmp_buf);\n+      /* The signal handler may keep the signal blocked when we longjmp out\n+         of it.  If we have sigprocmask, we can use it to unblock the signal\n+\t afterwards and we can avoid the performance overhead of saving the\n+\t signal mask just in case the signal gets triggered.  Otherwise, just\n+\t tell sigsetjmp to save the mask.  */\n+#ifdef HAVE_SIGPROCMASK\n+      crash_signal = SIGSETJMP (gdb_demangle_jmp_buf, 0);\n+#else\n+      crash_signal = SIGSETJMP (gdb_demangle_jmp_buf, 1);\n+#endif\n     }\n #endif\n \n@@ -1559,6 +1568,14 @@ gdb_demangle (const char *name, int options)\n \t{\n \t  static int error_reported = 0;\n \n+#ifdef HAVE_SIGPROCMASK\n+\t  /* If we got the signal, SIGSEGV may still be blocked; restore it.  */\n+\t  sigset_t segv_sig_set;\n+\t  sigemptyset (&segv_sig_set);\n+\t  sigaddset (&segv_sig_set, SIGSEGV);\n+\t  sigprocmask (SIG_UNBLOCK, &segv_sig_set, NULL);\n+#endif\n+\n \t  if (!error_reported)\n \t    {\n \t      std::string short_msg"
    },
    {
      "sha": "499597085b8f33b54e392fccab56e18270d806c2",
      "filename": "gdb/gdbsupport/gdb_setjmp.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/gdbsupport/gdb_setjmp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17bfe554b9a8c57c4d377bce930046138298fd8b/gdb/gdbsupport/gdb_setjmp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/gdb_setjmp.h?ref=17bfe554b9a8c57c4d377bce930046138298fd8b",
      "patch": "@@ -23,11 +23,13 @@\n \n #ifdef HAVE_SIGSETJMP\n #define SIGJMP_BUF\t\tsigjmp_buf\n-#define SIGSETJMP(buf)\t\tsigsetjmp((buf), 1)\n+#define SIGSETJMP(buf,val)\tsigsetjmp((buf), val)\n #define SIGLONGJMP(buf,val)\tsiglongjmp((buf), (val))\n #else\n #define SIGJMP_BUF\t\tjmp_buf\n-#define SIGSETJMP(buf)\t\tsetjmp(buf)\n+/* We ignore val here because that's safer and avoids having to check\n+   whether _setjmp exists.  */\n+#define SIGSETJMP(buf,val)\tsetjmp(buf)\n #define SIGLONGJMP(buf,val)\tlongjmp((buf), (val))\n #endif\n "
    }
  ]
}