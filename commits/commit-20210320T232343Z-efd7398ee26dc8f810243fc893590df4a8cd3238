{
  "sha": "efd7398ee26dc8f810243fc893590df4a8cd3238",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZkNzM5OGVlMjZkYzhmODEwMjQzZmM4OTM1OTBkZjRhOGNkMzIzOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:43Z"
    },
    "message": "Change how DWARF indices use addrmap\n\nCurrently the DWARF index readers reuse the objfile's partial symbol\ntable in order to store an addrmap.  We're going to be remove the\npartial symbol object, so this patch changes the DWARF reader to store\nthis addrmap in the per_bfd object.  This object is chosen, rather\nthan the quick_symbol_functions subclass, because the addrmap can be\nshared across objfiles.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.h (struct dwarf2_per_bfd) <psymtabs_addrmap>: New\n\tmember.\n\t* dwarf2/read.c (create_addrmap_from_index)\n\t(create_addrmap_from_aranges): Set per_bfd addrmap.\n\t(dwarf2_read_gdb_index): Don't set partial_symtabs.\n\t(dwarf2_base_index_functions::find_pc_sect_compunit_symtab): Use\n\tper_bfd addrmap.\n\t(dwarf2_read_debug_names): Don't set partial_symtabs.\n\t(dwarf2_initialize_objfile): Likewise.",
    "tree": {
      "sha": "3b53fa18b2523091ce81702474361e048f596ed9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3b53fa18b2523091ce81702474361e048f596ed9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efd7398ee26dc8f810243fc893590df4a8cd3238",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd7398ee26dc8f810243fc893590df4a8cd3238",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efd7398ee26dc8f810243fc893590df4a8cd3238",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd7398ee26dc8f810243fc893590df4a8cd3238/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "51962708bd3701780ac9ffd99a70d8eb2149a376",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51962708bd3701780ac9ffd99a70d8eb2149a376",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/51962708bd3701780ac9ffd99a70d8eb2149a376"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 32,
    "deletions": 26
  },
  "files": [
    {
      "sha": "fcc8f2a545628494017eeeea3701ca8e243a6d7d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efd7398ee26dc8f810243fc893590df4a8cd3238",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_bfd) <psymtabs_addrmap>: New\n+\tmember.\n+\t* dwarf2/read.c (create_addrmap_from_index)\n+\t(create_addrmap_from_aranges): Set per_bfd addrmap.\n+\t(dwarf2_read_gdb_index): Don't set partial_symtabs.\n+\t(dwarf2_base_index_functions::find_pc_sect_compunit_symtab): Use\n+\tper_bfd addrmap.\n+\t(dwarf2_read_debug_names): Don't set partial_symtabs.\n+\t(dwarf2_initialize_objfile): Likewise.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_build_psymtabs): Set partial_symtabs"
    },
    {
      "sha": "483c6fbd92178e0dcbfccbe564ce6655b0b3534c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 17,
      "deletions": 26,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=efd7398ee26dc8f810243fc893590df4a8cd3238",
      "patch": "@@ -2700,13 +2700,14 @@ create_signatured_type_table_from_debug_names\n }\n \n /* Read the address map data from the mapped index, and use it to\n-   populate the objfile's psymtabs_addrmap.  */\n+   populate the psymtabs_addrmap.  */\n \n static void\n create_addrmap_from_index (dwarf2_per_objfile *per_objfile,\n \t\t\t   struct mapped_index *index)\n {\n   struct objfile *objfile = per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n   struct gdbarch *gdbarch = objfile->arch ();\n   const gdb_byte *iter, *end;\n   struct addrmap *mutable_map;\n@@ -2738,7 +2739,7 @@ create_addrmap_from_index (dwarf2_per_objfile *per_objfile,\n \t  continue;\n \t}\n \n-      if (cu_index >= per_objfile->per_bfd->all_comp_units.size ())\n+      if (cu_index >= per_bfd->all_comp_units.size ())\n \t{\n \t  complaint (_(\".gdb_index address table has invalid CU number %u\"),\n \t\t     (unsigned) cu_index);\n@@ -2748,15 +2749,15 @@ create_addrmap_from_index (dwarf2_per_objfile *per_objfile,\n       lo = gdbarch_adjust_dwarf2_addr (gdbarch, lo + baseaddr) - baseaddr;\n       hi = gdbarch_adjust_dwarf2_addr (gdbarch, hi + baseaddr) - baseaddr;\n       addrmap_set_empty (mutable_map, lo, hi - 1,\n-\t\t\t per_objfile->per_bfd->get_cu (cu_index));\n+\t\t\t per_bfd->get_cu (cu_index));\n     }\n \n-  objfile->partial_symtabs->psymtabs_addrmap\n-    = addrmap_create_fixed (mutable_map, objfile->partial_symtabs->obstack ());\n+  per_bfd->index_addrmap = addrmap_create_fixed (mutable_map,\n+\t\t\t\t\t\t &per_bfd->obstack);\n }\n \n /* Read the address map data from DWARF-5 .debug_aranges, and use it to\n-   populate the objfile's psymtabs_addrmap.  */\n+   populate the psymtabs_addrmap.  */\n \n static void\n create_addrmap_from_aranges (dwarf2_per_objfile *per_objfile,\n@@ -2766,6 +2767,7 @@ create_addrmap_from_aranges (dwarf2_per_objfile *per_objfile,\n   bfd *abfd = objfile->obfd;\n   struct gdbarch *gdbarch = objfile->arch ();\n   const CORE_ADDR baseaddr = objfile->text_section_offset ();\n+  dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n \n   auto_obstack temp_obstack;\n   addrmap *mutable_map = addrmap_create_mutable (&temp_obstack);\n@@ -2902,7 +2904,7 @@ create_addrmap_from_aranges (dwarf2_per_objfile *per_objfile,\n \t  addr += address_size;\n \t  if (start == 0 && length == 0)\n \t    break;\n-\t  if (start == 0 && !per_objfile->per_bfd->has_section_at_zero)\n+\t  if (start == 0 && !per_bfd->has_section_at_zero)\n \t    {\n \t      /* Symbol was eliminated due to a COMDAT group.  */\n \t      continue;\n@@ -2916,8 +2918,8 @@ create_addrmap_from_aranges (dwarf2_per_objfile *per_objfile,\n \t}\n     }\n \n-  objfile->partial_symtabs->psymtabs_addrmap\n-    = addrmap_create_fixed (mutable_map, objfile->partial_symtabs->obstack ());\n+  per_bfd->index_addrmap = addrmap_create_fixed (mutable_map,\n+\t\t\t\t\t\t &per_bfd->obstack);\n }\n \n /* Find a slot in the mapped index INDEX for the object named NAME.\n@@ -3184,11 +3186,6 @@ dwarf2_read_gdb_index\n   per_bfd->quick_file_names_table =\n     create_quick_file_names_table (per_bfd->all_comp_units.size ());\n \n-  /* Save partial symtabs in the per_bfd object, for the benefit of subsequent\n-     objfiles using the same BFD.  */\n-  gdb_assert (per_bfd->partial_symtabs == nullptr);\n-  per_bfd->partial_symtabs = objfile->partial_symtabs;\n-\n   return 1;\n }\n \n@@ -4925,16 +4922,17 @@ dwarf2_base_index_functions::find_pc_sect_compunit_symtab\n   struct dwarf2_per_cu_data *data;\n   struct compunit_symtab *result;\n \n-  if (!objfile->partial_symtabs->psymtabs_addrmap)\n+  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n+  if (per_objfile->per_bfd->index_addrmap == nullptr)\n     return NULL;\n \n   CORE_ADDR baseaddr = objfile->text_section_offset ();\n-  data = (struct dwarf2_per_cu_data *) addrmap_find\n-    (objfile->partial_symtabs->psymtabs_addrmap, pc - baseaddr);\n+  data = ((struct dwarf2_per_cu_data *)\n+\t  addrmap_find (per_objfile->per_bfd->index_addrmap,\n+\t\t\tpc - baseaddr));\n   if (!data)\n     return NULL;\n \n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   if (warn_if_readin && per_objfile->symtab_set_p (data))\n     warning (_(\"(Internal error: pc %s in read in CU, but not in symtab.)\"),\n \t     paddress (objfile->arch (), pc));\n@@ -5345,11 +5343,6 @@ dwarf2_read_debug_names (dwarf2_per_objfile *per_objfile)\n   per_bfd->quick_file_names_table =\n     create_quick_file_names_table (per_objfile->per_bfd->all_comp_units.size ());\n \n-  /* Save partial symtabs in the per_bfd object, for the benefit of subsequent\n-     objfiles using the same BFD.  */\n-  gdb_assert (per_bfd->partial_symtabs == nullptr);\n-  per_bfd->partial_symtabs = objfile->partial_symtabs;\n-\n   return true;\n }\n \n@@ -6057,7 +6050,6 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n     {\n       dwarf_read_debug_printf (\"re-using shared debug names table\");\n       *index_kind = dw_index_kind::DEBUG_NAMES;\n-      per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n       return true;\n     }\n@@ -6068,7 +6060,6 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n     {\n       dwarf_read_debug_printf (\"re-using shared index table\");\n       *index_kind = dw_index_kind::GDB_INDEX;\n-      per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n       return true;\n     }\n@@ -14504,7 +14495,7 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu, dwarf_tag tag,\n \n /* Get low and high pc attributes from DW_AT_ranges attribute value OFFSET.\n    Return 1 if the attributes are present and valid, otherwise, return 0.\n-   If RANGES_PST is not NULL we should setup `objfile->psymtabs_addrmap'.  */\n+   If RANGES_PST is not NULL we should set up the `psymtabs_addrmap'.  */\n \n static int\n dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,"
    },
    {
      "sha": "6cfbee95f8fbe76f4e8160f5895a4f5e8d7a9072",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efd7398ee26dc8f810243fc893590df4a8cd3238/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=efd7398ee26dc8f810243fc893590df4a8cd3238",
      "patch": "@@ -257,6 +257,9 @@ struct dwarf2_per_bfd\n      partial symbols have been read the first time.  */\n   std::shared_ptr<psymtab_storage> partial_symtabs;\n \n+  /* The address map that is used by the DWARF index code.  */\n+  struct addrmap *index_addrmap = nullptr;\n+\n private:\n \n   /* The total number of per_cu and signatured_type objects that have"
    }
  ]
}