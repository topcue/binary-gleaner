{
  "sha": "e38330f8b00e641e397260e9cecb2070ac2d1477",
  "node_id": "C_kwDOANOeidoAKGUzODMzMGY4YjAwZTY0MWUzOTcyNjBlOWNlY2IyMDcwYWMyZDE0Nzc",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T05:18:18Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T18:23:58Z"
    },
    "message": "sim: iq2000/lm32/m32c/moxie/rx: switch to new target-newlib-syscall.h\n\nUse the new target-newlib-syscall.h to provide the target syscall\ndefines.  These code paths are written specifically for the newlib\nABI rather than being generalized, so switching them to the defines\nrather than trying to go through the dynamic callback conversion\nseems like the best trade-off for now.  Might have to reconsider\nthis in the future.",
    "tree": {
      "sha": "c90b41f37cd4f9fd1139c8336ac0042d84d862da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c90b41f37cd4f9fd1139c8336ac0042d84d862da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e38330f8b00e641e397260e9cecb2070ac2d1477",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e38330f8b00e641e397260e9cecb2070ac2d1477",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e38330f8b00e641e397260e9cecb2070ac2d1477",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e38330f8b00e641e397260e9cecb2070ac2d1477/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/64ae70dde5bc8916800bbdb570d6281b700f7e84"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 35,
    "deletions": 35
  },
  "files": [
    {
      "sha": "88de5ac6f5ce0fafadca959afa339c82bb104beb",
      "filename": "sim/iq2000/iq2000.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/iq2000/iq2000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/iq2000/iq2000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/iq2000.c?ref=e38330f8b00e641e397260e9cecb2070ac2d1477",
      "patch": "@@ -27,7 +27,7 @@\n #include \"sim-signal.h\"\n #include \"cgen-mem.h\"\n #include \"cgen-ops.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n #include <stdlib.h>\n \n enum\n@@ -80,7 +80,7 @@ do_syscall (SIM_CPU *current_cpu, PCADDR pc)\n \t  exit (1);\n \t}\n \n-    case TARGET_SYS_write:\n+    case TARGET_NEWLIB_SYS_write:\n       buf = zalloc (PARM3);\n       sim_read (CPU_STATE (current_cpu), CPU2DATA(PARM2), buf, PARM3);\n       SET_H_GR (ret_reg,\n@@ -89,18 +89,18 @@ do_syscall (SIM_CPU *current_cpu, PCADDR pc)\n       free (buf);\n       break;\n \n-    case TARGET_SYS_lseek:\n+    case TARGET_NEWLIB_SYS_lseek:\n       SET_H_GR (ret_reg,\n \t\tsim_io_lseek (CPU_STATE (current_cpu),\n \t\t\t      PARM1, PARM2, PARM3));\n       break;\n \t    \n-    case TARGET_SYS_exit:\n+    case TARGET_NEWLIB_SYS_exit:\n       sim_engine_halt (CPU_STATE (current_cpu), current_cpu,\n \t\t       NULL, pc, sim_exited, PARM1);\n       break;\n \n-    case TARGET_SYS_read:\n+    case TARGET_NEWLIB_SYS_read:\n       buf = zalloc (PARM3);\n       SET_H_GR (ret_reg,\n \t\tsim_io_read (CPU_STATE (current_cpu),\n@@ -109,20 +109,20 @@ do_syscall (SIM_CPU *current_cpu, PCADDR pc)\n       free (buf);\n       break;\n \t    \n-    case TARGET_SYS_open:\n+    case TARGET_NEWLIB_SYS_open:\n       buf = fetch_str (current_cpu, pc, PARM1);\n       SET_H_GR (ret_reg,\n \t\tsim_io_open (CPU_STATE (current_cpu),\n \t\t\t     buf, PARM2));\n       free (buf);\n       break;\n \n-    case TARGET_SYS_close:\n+    case TARGET_NEWLIB_SYS_close:\n       SET_H_GR (ret_reg,\n \t\tsim_io_close (CPU_STATE (current_cpu), PARM1));\n       break;\n \n-    case TARGET_SYS_time:\n+    case TARGET_NEWLIB_SYS_time:\n       SET_H_GR (ret_reg, time (0));\n       break;\n "
    },
    {
      "sha": "87d21910645899b4e8c088f9b84a00f6a120c989",
      "filename": "sim/lm32/traps.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/lm32/traps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/lm32/traps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/traps.c?ref=e38330f8b00e641e397260e9cecb2070ac2d1477",
      "patch": "@@ -28,7 +28,7 @@\n #include \"sim-signal.h\"\n #include \"sim-syscall.h\"\n #include \"lm32-sim.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n /* Handle invalid instructions.  */\n \n@@ -133,7 +133,7 @@ lm32bf_scall_insn (SIM_CPU * current_cpu, IADDR pc)\n   host_callback *cb = STATE_CALLBACK (sd);\n \n   if ((STATE_ENVIRONMENT (sd) != OPERATING_ENVIRONMENT)\n-      || (GET_H_GR (8) == TARGET_SYS_exit))\n+      || (GET_H_GR (8) == TARGET_NEWLIB_SYS_exit))\n     {\n       /* Delegate system call to host O/S.  */\n       long result, result2;"
    },
    {
      "sha": "e613e514082551da0b6b79c6f77c7b702811949e",
      "filename": "sim/m32c/syscalls.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/m32c/syscalls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/m32c/syscalls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32c/syscalls.c?ref=e38330f8b00e641e397260e9cecb2070ac2d1477",
      "patch": "@@ -32,7 +32,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"cpu.h\"\n #include \"mem.h\"\n #include \"syscalls.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n /* The current syscall callbacks we're using.  */\n static struct host_callback_struct *callbacks;\n@@ -185,7 +185,7 @@ m32c_syscall (int id)\n     printf (\"\\033[31m/* SYSCALL(%d) = %s */\\033[0m\\n\", id, callnames[id]);\n   switch (id)\n     {\n-    case TARGET_SYS_exit:\n+    case TARGET_NEWLIB_SYS_exit:\n       {\n \tint ec = arg (2);\n \tif (verbose)\n@@ -194,7 +194,7 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_open:\n+    case TARGET_NEWLIB_SYS_open:\n       {\n \tint path = arg (PTRSZ);\n \tint oflags = arg (2);\n@@ -229,7 +229,7 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_close:\n+    case TARGET_NEWLIB_SYS_close:\n       {\n \tint fd = arg (2);\n \n@@ -245,7 +245,7 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_read:\n+    case TARGET_NEWLIB_SYS_read:\n       {\n \tint fd = arg (2);\n \tint addr = arg (PTRSZ);\n@@ -265,7 +265,7 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_write:\n+    case TARGET_NEWLIB_SYS_write:\n       {\n \tint fd = arg (2);\n \tint addr = arg (PTRSZ);\n@@ -288,11 +288,11 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_getpid:\n+    case TARGET_NEWLIB_SYS_getpid:\n       put_reg (r0, 42);\n       break;\n \n-    case TARGET_SYS_gettimeofday:\n+    case TARGET_NEWLIB_SYS_gettimeofday:\n       {\n \tint tvaddr = arg (PTRSZ);\n \tstruct timeval tv;\n@@ -307,7 +307,7 @@ m32c_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_kill:\n+    case TARGET_NEWLIB_SYS_kill:\n       {\n \tint pid = arg (2);\n \tint sig = arg (2);"
    },
    {
      "sha": "228e23ce803b96e3960de86e08b019d2b2053b8a",
      "filename": "sim/moxie/interp.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/moxie/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/moxie/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/moxie/interp.c?ref=e38330f8b00e641e397260e9cecb2070ac2d1477",
      "patch": "@@ -35,7 +35,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"sim-options.h\"\n #include \"sim-io.h\"\n #include \"sim-signal.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n typedef int word;\n typedef unsigned int uword;\n@@ -935,13 +935,13 @@ sim_engine_run (SIM_DESC sd,\n \t        cpu.asregs.sregs[3] = inum;\n \t\tswitch (inum)\n \t\t  {\n-\t\t  case TARGET_SYS_exit:\n+\t\t  case TARGET_NEWLIB_SYS_exit:\n \t\t    {\n \t\t      sim_engine_halt (sd, scpu, NULL, pc, sim_exited,\n \t\t\t\t       cpu.asregs.regs[2]);\n \t\t      break;\n \t\t    }\n-\t\t  case TARGET_SYS_open:\n+\t\t  case TARGET_NEWLIB_SYS_open:\n \t\t    {\n \t\t      char fname[1024];\n \t\t      int mode = (int) convert_target_flags ((unsigned) cpu.asregs.regs[3]);\n@@ -954,7 +954,7 @@ sim_engine_run (SIM_DESC sd,\n \t\t      cpu.asregs.regs[2] = fd;\n \t\t      break;\n \t\t    }\n-\t\t  case TARGET_SYS_read:\n+\t\t  case TARGET_NEWLIB_SYS_read:\n \t\t    {\n \t\t      int fd = cpu.asregs.regs[2];\n \t\t      unsigned len = (unsigned) cpu.asregs.regs[4];\n@@ -965,7 +965,7 @@ sim_engine_run (SIM_DESC sd,\n \t\t      free (buf);\n \t\t      break;\n \t\t    }\n-\t\t  case TARGET_SYS_write:\n+\t\t  case TARGET_NEWLIB_SYS_write:\n \t\t    {\n \t\t      char *str;\n \t\t      /* String length is at 0x12($fp) */\n@@ -978,7 +978,7 @@ sim_engine_run (SIM_DESC sd,\n \t\t      cpu.asregs.regs[2] = count;\n \t\t      break;\n \t\t    }\n-\t\t  case TARGET_SYS_unlink:\n+\t\t  case TARGET_NEWLIB_SYS_unlink:\n \t\t    {\n \t\t      char fname[1024];\n \t\t      int fd;"
    },
    {
      "sha": "a18c1047afa0f7fb4878ae2010d3aaa68efe2418",
      "filename": "sim/rx/syscalls.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/rx/syscalls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e38330f8b00e641e397260e9cecb2070ac2d1477/sim/rx/syscalls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/rx/syscalls.c?ref=e38330f8b00e641e397260e9cecb2070ac2d1477",
      "patch": "@@ -32,7 +32,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"cpu.h\"\n #include \"mem.h\"\n #include \"syscalls.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n /* The current syscall callbacks we're using.  */\n static struct host_callback_struct *callbacks;\n@@ -146,10 +146,10 @@ rx_syscall (int id)\n   argp = 0;\n   stackp = 4;\n   if (trace)\n-    printf (\"\\033[31m/* SYSCALL(%d) = %s */\\033[0m\\n\", id, id <= TARGET_SYS_link ? callnames[id] : \"unknown\");\n+    printf (\"\\033[31m/* SYSCALL(%d) = %s */\\033[0m\\n\", id, id <= TARGET_NEWLIB_SYS_link ? callnames[id] : \"unknown\");\n   switch (id)\n     {\n-    case TARGET_SYS_exit:\n+    case TARGET_NEWLIB_SYS_exit:\n       {\n \tint ec = arg ();\n \tif (verbose)\n@@ -158,7 +158,7 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_open:\n+    case TARGET_NEWLIB_SYS_open:\n       {\n \tint oflags, cflags;\n \tint path = arg ();\n@@ -200,7 +200,7 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_close:\n+    case TARGET_NEWLIB_SYS_close:\n       {\n \tint fd = arg ();\n \n@@ -216,7 +216,7 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_read:\n+    case TARGET_NEWLIB_SYS_read:\n       {\n \tint fd = arg ();\n \tint addr = arg ();\n@@ -236,7 +236,7 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_write:\n+    case TARGET_NEWLIB_SYS_write:\n       {\n \tint fd = arg ();\n \tint addr = arg ();\n@@ -259,11 +259,11 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_getpid:\n+    case TARGET_NEWLIB_SYS_getpid:\n       put_reg (1, 42);\n       break;\n \n-    case TARGET_SYS_gettimeofday:\n+    case TARGET_NEWLIB_SYS_gettimeofday:\n       {\n \tint tvaddr = arg ();\n \tstruct timeval tv;\n@@ -278,7 +278,7 @@ rx_syscall (int id)\n       }\n       break;\n \n-    case TARGET_SYS_kill:\n+    case TARGET_NEWLIB_SYS_kill:\n       {\n \tint pid = arg ();\n \tint sig = arg ();"
    }
  ]
}