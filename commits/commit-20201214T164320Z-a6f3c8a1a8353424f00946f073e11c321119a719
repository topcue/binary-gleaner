{
  "sha": "a6f3c8a1a8353424f00946f073e11c321119a719",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTZmM2M4YTFhODM1MzQyNGYwMDk0NmYwNzNlMTFjMzIxMTE5YTcxOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-14T16:43:20Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-14T16:43:20Z"
    },
    "message": "Do not manually dissect OP_TYPE operations\n\nSome code in GDB will examine the structure of an expression to see if\nit starts with OP_TYPE, and then proceed to extract the type by hand.\n\nThere is no need to do this dissection manually.  evaluate_type does\nthe same thing via an \"allowed\" API.\n\nThis patch changes such code to use evaluate_type.  In two cases this\nsimplifies the code.\n\nRegression tested on x86-64 Fedora 28.\n\ngdb/ChangeLog\n2020-12-14  Tom Tromey  <tom@tromey.com>\n\n\t* dtrace-probe.c (dtrace_process_dof_probe): Use value_type.\n\t* typeprint.c (whatis_exp): Always use evaluate_type.\n\t(maintenance_print_type): Likewise.  Simplify.",
    "tree": {
      "sha": "3b84a745976a7a44b5c467dc092edd930c33b00e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3b84a745976a7a44b5c467dc092edd930c33b00e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a6f3c8a1a8353424f00946f073e11c321119a719",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6f3c8a1a8353424f00946f073e11c321119a719",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a6f3c8a1a8353424f00946f073e11c321119a719",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6f3c8a1a8353424f00946f073e11c321119a719/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "18f1cb1fc5355629c74f7615e358e3007f4e3bae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18f1cb1fc5355629c74f7615e358e3007f4e3bae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/18f1cb1fc5355629c74f7615e358e3007f4e3bae"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 15,
    "deletions": 29
  },
  "files": [
    {
      "sha": "0bf7d511f8249150724f4a7a3dbaeb0c675d187e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a6f3c8a1a8353424f00946f073e11c321119a719",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-14  Tom Tromey  <tom@tromey.com>\n+\n+\t* dtrace-probe.c (dtrace_process_dof_probe): Use value_type.\n+\t* typeprint.c (whatis_exp): Always use evaluate_type.\n+\t(maintenance_print_type): Likewise.  Simplify.\n+\n 2020-12-14  Tom Tromey  <tromey@adacore.com>\n \n \t* dictionary.c (language_defn::search_name_hash): Ignore \"B\"."
    },
    {
      "sha": "3ea047fce80b6ffc92ee6ec23ddf11ef6140816c",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=a6f3c8a1a8353424f00946f073e11c321119a719",
      "patch": "@@ -493,7 +493,7 @@ dtrace_process_dof_probe (struct objfile *objfile,\n \t    }\n \n \t  if (expr != NULL && expr.get ()->elts[0].opcode == OP_TYPE)\n-\t    type = expr.get ()->elts[1].type;\n+\t    type = value_type (evaluate_type (expr.get ()));\n \n \t  args.emplace_back (type, std::move (type_str), std::move (expr));\n \t}"
    },
    {
      "sha": "2f671d9c80f38de1d6847ca8627c42258d210daa",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 28,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a6f3c8a1a8353424f00946f073e11c321119a719/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=a6f3c8a1a8353424f00946f073e11c321119a719",
      "patch": "@@ -490,10 +490,12 @@ whatis_exp (const char *exp, int show)\n \t \"whatis\" prints the type of the expression without stripping\n \t any typedef level.  \"ptype\" always strips all levels of\n \t typedefs.  */\n+      val = evaluate_type (expr.get ());\n+      type = value_type (val);\n+\n       if (show == -1 && expr->elts[0].opcode == OP_TYPE)\n \t{\n \t  /* The user expression names a type directly.  */\n-\t  type = expr->elts[1].type;\n \n \t  /* If this is a typedef, then find its immediate target.\n \t     Use check_typedef to resolve stubs, but ignore its result\n@@ -506,14 +508,6 @@ whatis_exp (const char *exp, int show)\n \t     value to fetch the dynamic type from.  */\n \t  val = NULL;\n \t}\n-      else\n-\t{\n-\t  /* The user expression names a type indirectly by naming an\n-\t     object or expression of that type.  Find that\n-\t     indirectly-named type.  */\n-\t  val = evaluate_type (expr.get ());\n-\t  type = value_type (val);\n-\t}\n     }\n   else\n     {\n@@ -684,28 +678,14 @@ print_type_fixed_point (struct type *type, struct ui_file *stream)\n void\n maintenance_print_type (const char *type_name, int from_tty)\n {\n-  struct value *val;\n-  struct type *type;\n-\n   if (type_name != NULL)\n     {\n       expression_up expr = parse_expression (type_name);\n-      if (expr->elts[0].opcode == OP_TYPE)\n-\t{\n-\t  /* The user expression names a type directly, just use that type.  */\n-\t  type = expr->elts[1].type;\n-\t}\n-      else\n-\t{\n-\t  /* The user expression may name a type indirectly by naming an\n-\t     object of that type.  Find that indirectly named type.  */\n-\t  val = evaluate_type (expr.get ());\n-\t  type = value_type (val);\n-\t}\n-      if (type != NULL)\n-\t{\n-\t  recursive_dump_type (type, 0);\n-\t}\n+      struct value *val = evaluate_type (expr.get ());\n+      struct type *type = value_type (val);\n+\n+      if (type != nullptr)\n+\trecursive_dump_type (type, 0);\n     }\n }\n \f"
    }
  ]
}