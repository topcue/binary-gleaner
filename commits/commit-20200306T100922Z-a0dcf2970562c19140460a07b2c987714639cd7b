{
  "sha": "a0dcf2970562c19140460a07b2c987714639cd7b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTBkY2YyOTcwNTYyYzE5MTQwNDYwYTA3YjJjOTg3NzE0NjM5Y2Q3Yg==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-06T10:09:22Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-06T10:09:22Z"
    },
    "message": "Fix an abort triggered when objcopy is used to set the \"share\" section flag on an ELF section.\n\nbinutils* objcopy.c (check_new_section_flags): New function.  Reject the\n\tSEC_COFF_SHARED flag if the target is not a COFF binary.\n\t(copy_object): Call check_new_section_flags.\n\t(setup_section): Likewise.\n\t* doc/binutils.texi (objcopy): Add a note that the 'share' section\n\tflag cannot be applied to ELF binaries.\n\nbfd\t* elf.c (_bfd_elf_set_section_contents): Replace call to abort\n\twith error messages and failure return values.",
    "tree": {
      "sha": "67161a1ca585012f45c4b117bb9ecbd8bbc17740",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67161a1ca585012f45c4b117bb9ecbd8bbc17740"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a0dcf2970562c19140460a07b2c987714639cd7b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0dcf2970562c19140460a07b2c987714639cd7b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a0dcf2970562c19140460a07b2c987714639cd7b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0dcf2970562c19140460a07b2c987714639cd7b/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bc49bfd849a9291b61bbe314505a35d07e130347",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc49bfd849a9291b61bbe314505a35d07e130347",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bc49bfd849a9291b61bbe314505a35d07e130347"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 84,
    "deletions": 12
  },
  "files": [
    {
      "sha": "0df437b2ffd16be2a3758d36efe7b56d38405e59",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0dcf2970562c19140460a07b2c987714639cd7b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0dcf2970562c19140460a07b2c987714639cd7b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a0dcf2970562c19140460a07b2c987714639cd7b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* elf.c (_bfd_elf_set_section_contents): Replace call to abort\n+\twith error messages and failure return values.\n+\n 2020-03-05  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* elf32-xtensa.c (shrink_dynamic_reloc_sections): Shrink dynamic"
    },
    {
      "sha": "e6db2ff64d8a975b9bab0767d5e010a0f04e7a1e",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 33,
      "deletions": 7,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0dcf2970562c19140460a07b2c987714639cd7b/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0dcf2970562c19140460a07b2c987714639cd7b/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=a0dcf2970562c19140460a07b2c987714639cd7b",
      "patch": "@@ -3218,7 +3218,6 @@ elf_fake_sections (bfd *abfd, asection *asect, void *fsarg)\n \t  /* Set SEC_ELF_COMPRESS to indicate this section should be\n \t     compressed.  */\n \t  asect->flags |= SEC_ELF_COMPRESS;\n-\n \t  /* If this section will be compressed, delay adding section\n \t     name to section name section after it is compressed in\n \t     _bfd_elf_assign_file_positions_for_non_load.  */\n@@ -9181,20 +9180,47 @@ _bfd_elf_set_section_contents (bfd *abfd,\n   hdr = &elf_section_data (section)->this_hdr;\n   if (hdr->sh_offset == (file_ptr) -1)\n     {\n+      unsigned char *contents;\n+\n       if (bfd_section_is_ctf (section))\n \t/* Nothing to do with this section: the contents are generated\n \t   later.  */\n \treturn TRUE;\n \n-      /* We must compress this section.  Write output to the buffer.  */\n-      unsigned char *contents = hdr->contents;\n-      if ((offset + count) > hdr->sh_size\n-\t  || (section->flags & SEC_ELF_COMPRESS) == 0\n-\t  || contents == NULL)\n-\tabort ();\n+      if ((section->flags & SEC_ELF_COMPRESS) == 0)\n+\t{\n+\t  _bfd_error_handler\n+\t    (_(\"%pB:%pA: error: attempting to write into an unallocated compressed section\"),\n+\t     abfd, section);\n+\t  bfd_set_error (bfd_error_invalid_operation);\n+\t  return FALSE;\n+\t}\n+      \n+      if ((offset + count) > hdr->sh_size)\n+\t{\n+\t  _bfd_error_handler\n+\t    (_(\"%pB:%pA: error: attempting to write over the end of the section\"),\n+\t     abfd, section);\n+\n+\t  bfd_set_error (bfd_error_invalid_operation);\n+\t  return FALSE;\n+\t}\n+\n+      contents = hdr->contents;\n+      if (contents == NULL)\n+\t{\n+\t  _bfd_error_handler\n+\t    (_(\"%pB:%pA: error: attempting to write section into an empty buffer\"),\n+\t     abfd, section);\n+\n+\t  bfd_set_error (bfd_error_invalid_operation);\n+\t  return FALSE;\n+\t}\n+\n       memcpy (contents + offset, location, count);\n       return TRUE;\n     }\n+\n   pos = hdr->sh_offset + offset;\n   if (bfd_seek (abfd, pos, SEEK_SET) != 0\n       || bfd_bwrite (location, count, abfd) != count)"
    },
    {
      "sha": "840fc4d5891ecb9c7493881b8aa011a653936b54",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=a0dcf2970562c19140460a07b2c987714639cd7b",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* objcopy.c (check_new_section_flags): New function.  Reject the\n+\tSEC_COFF_SHARED flag if the target is not a COFF binary.\n+\t(copy_object): Call check_new_section_flags.\n+\t(setup_section): Likewise.\n+\t* doc/binutils.texi (objcopy): Add a note that the 'share' section\n+\tflag cannot be applied to ELF binaries.\n+\n 2020-03-06  Alan Modra  <amodra@gmail.com>\n \n \tPR 25637"
    },
    {
      "sha": "de3f1babb2787a67c67b81fdfe3403af56be4b21",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=a0dcf2970562c19140460a07b2c987714639cd7b",
      "patch": "@@ -1648,7 +1648,9 @@ recognized names are @samp{alloc}, @samp{contents}, @samp{load},\n @samp{contents} flag for a section which does not have contents, but it\n is not meaningful to clear the @samp{contents} flag of a section which\n does have contents--just remove the section instead.  Not all flags are\n-meaningful for all object file formats.\n+meaningful for all object file formats.  In particular the\n+@samp{share} flag is only meaningful for COFF format files and not for\n+ELF format files.\n \n @item --set-section-alignment @var{sectionpattern}=@var{align}\n Set the alignment for any sections matching @var{sectionpattern}.\n@@ -1704,7 +1706,8 @@ Rename a section from @var{oldname} to @var{newname}, optionally\n changing the section's flags to @var{flags} in the process.  This has\n the advantage over using a linker script to perform the rename in that\n the output stays as an object file and does not become a linked\n-executable.\n+executable.  This option accepts the same set of flags as the\n+@option{--sect-section-flags} option.\n \n This option is particularly helpful when the input format is binary,\n since this will always create a section called .data.  If for example,"
    },
    {
      "sha": "09facf0061ea28865eabe83e6feb36c38bd35dad",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 32,
      "deletions": 3,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0dcf2970562c19140460a07b2c987714639cd7b/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=a0dcf2970562c19140460a07b2c987714639cd7b",
      "patch": "@@ -2562,6 +2562,23 @@ merge_gnu_build_notes (bfd *          abfd,\n   return size;\n }\n \n+static flagword\n+check_new_section_flags (flagword flags, bfd * abfd, const char * secname)\n+{\n+  /* Only set the SEC_COFF_SHARED flag on COFF files.\n+     The same bit value is used by ELF targets to indicate\n+     compressed sections, and setting that flag here breaks\n+     things.  */\n+  if ((flags & SEC_COFF_SHARED)\n+      && bfd_get_flavour (abfd) != bfd_target_coff_flavour)\n+    {\n+      non_fatal (_(\"%s[%s]: Note - dropping 'share' flag as output format is not COFF\"),\n+\t\t bfd_get_filename (abfd), secname);\n+      flags &= ~ SEC_COFF_SHARED;\n+    }\n+  return flags;\n+}\n+\n /* Copy object file IBFD onto OBFD.\n    Returns TRUE upon success, FALSE otherwise.  */\n \n@@ -2810,7 +2827,10 @@ copy_object (bfd *ibfd, bfd *obfd, const bfd_arch_info_type *input_arch)\n \t  pset = find_section_list (padd->name, FALSE,\n \t\t\t\t    SECTION_CONTEXT_SET_FLAGS);\n \t  if (pset != NULL)\n-\t    flags = pset->flags | SEC_HAS_CONTENTS;\n+\t    {\t      \n+\t      flags = pset->flags | SEC_HAS_CONTENTS;\n+\t      flags = check_new_section_flags (flags, obfd, padd->name);\n+\t    }\n \t  else\n \t    flags = SEC_HAS_CONTENTS | SEC_READONLY | SEC_DATA;\n \n@@ -3950,6 +3970,7 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n   flagword flags;\n   const char *err;\n   const char * name;\n+  const char * new_name;\n   char *prefix = NULL;\n   bfd_boolean make_nobits;\n   unsigned int alignment;\n@@ -3965,7 +3986,12 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n       flags &= bfd_applicable_section_flags (ibfd);\n       flags &= bfd_applicable_section_flags (obfd);\n     }\n-  name = find_section_rename (name, &flags);\n+  new_name = find_section_rename (name, &flags);\n+  if (new_name != name)\n+    {\n+      name = new_name;\n+      flags = check_new_section_flags (flags, obfd, name);\n+    }\n \n   /* Prefix sections.  */\n   if (prefix_alloc_sections_string\n@@ -3989,7 +4015,10 @@ setup_section (bfd *ibfd, sec_ptr isection, void *obfdarg)\n   p = find_section_list (bfd_section_name (isection), FALSE,\n \t\t\t SECTION_CONTEXT_SET_FLAGS);\n   if (p != NULL)\n-    flags = p->flags | (flags & (SEC_HAS_CONTENTS | SEC_RELOC));\n+    {\n+      flags = p->flags | (flags & (SEC_HAS_CONTENTS | SEC_RELOC));\n+      flags = check_new_section_flags (flags, obfd, bfd_section_name (isection));\n+    }\n   else if (strip_symbols == STRIP_NONDEBUG\n \t   && (flags & (SEC_ALLOC | SEC_GROUP)) != 0\n \t   && !is_nondebug_keep_contents_section (ibfd, isection))"
    }
  ]
}