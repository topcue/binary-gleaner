{
  "sha": "678c7a56ced1828d37a554ec97f672496f135054",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc4YzdhNTZjZWQxODI4ZDM3YTU1NGVjOTdmNjcyNDk2ZjEzNTA1NA==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-05-13T00:44:19Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:34:37Z"
    },
    "message": "Adjust corefile.exp test to show regression after bfd hack removal\n\nIn his review of my BZ 25631 patch series, Pedro was unable to\nreproduce the regression which should occur after patch #1, \"Remove\nhack for GDB which sets the section size to 0\", is applied.\n\nPedro was using an ld version older than 2.30.  Version 2.30\nintroduced the linker option -z separate-code.  Here's what the man\npage has to say about it:\n\n    Create separate code \"PT_LOAD\" segment header in the object.  This\n    specifies a memory segment that should contain only instructions\n    and must be in wholly disjoint pages from any other data.\n\nIn ld version 2.31, use of separate-code became the default for\nLinux/x86.  So, really, 2.31 or later is required in order to see the\nregression that occurs in recent Linux distributions when only the\nbfd hack removal patch is applied.\n\nFor the test case in question, use of the separate-code linker option\nmeans that the global variable \"coremaker_ro\" ends up in a separate\nload segment (though potentially with other read-only data).  The\nupshot of this is that when only patch #1 is applied, GDB won't be\nable to correctly access coremaker_ro.  The reason for this is due\nto the fact that this section will now have a non-zero size, but\nwill not have contents from the core file to find this data.\nSo GDB will ask BFD for the contents and BFD will respond with\nzeroes for anything from those sections.  GDB should instead be\nlooking in the executable for this data.  Failing that, it can\nthen ask BFD for a reasonable value.  This is what a later patch\nin this series does.\n\nWhen using ld versions earlier than 2.31 (or 2.30 w/ the\n-z separate-code option explicitly provided to the linker), there is\nthe possibility that coremaker_ro ends up being placed near other data\nwhich is recorded in the core file.  That means that the correct value\nwill end up in the core file, simply because it resides on a page that\nthe kernel chooses to put in the core file.  This is why Pedro wasn't\nable to reproduce the regression that should occur after fixing the\nBFD hack.\n\nThis patch places a big chunk of memory, two pages worth on x86, in\nfront of \"coremaker_ro\" to attempt to force it onto another page\nwithout requiring use of that new-fangled linker switch.\n\nSpeaking of which, I considered changing the test to use\n-z separate-code, but this won't work because it didn't\nexist prior to version 2.30.  The linker would probably complain\nof an unrecognized switch.  Also, it likely won't be available in\nother linkers not based on current binutils.  I.e. it probably won't\nwork in FreeBSD, NetBSD, etc.\n\nTo make this more concrete, this is what *should* happen when\nattempting to access coremaker_ro when only patch #1 is applied:\n\n    Core was generated by `/mesquite2/sourceware-git/f28-coresegs/bld/gdb/testsuite/outputs/gdb.base/coref'.\n    Program terminated with signal SIGABRT, Aborted.\n    #0  0x00007f68205deefb in raise () from /lib64/libc.so.6\n    (gdb) p coremaker_ro\n    $1 = 0\n\nNote that this result is wrong; 201 should have been printed instead.\nBut that's the point of the rest of the patch series.\n\nHowever, without this commit, or when using an old Linux distro with\na pre-2.31 ld, this is what you might see instead:\n\n    Core was generated by `/mesquite2/sourceware-git/f28-coresegs/bld/gdb/testsuite/outputs/gdb.base/coref'.\n    Program terminated with signal SIGABRT, Aborted.\n    #0  0x00007f63dd658efb in raise () from /lib64/libc.so.6\n    (gdb) p coremaker_ro\n    $1 = 201\n\nI.e. it prints the right answer, which sort of makes it seem like the\nrest of the series isn't required.\n\nNow, back to the patch itself... what should be the size of the memory\nchunk placed before coremaker_ro?\n\nIt needs to be at least as big as the page size (PAGE_SIZE) from\nthe kernel.  For x86 and several other architectures this value is\n4096.  I used MAPSIZE which is defined to be 8192 in coremaker.c.\nSo it's twice as big as what's currently needed for most Linux\narchitectures.  The constant PAGE_SIZE is available from <sys/user.h>,\nbut this isn't portable either.  In the end, it seemed simpler to\njust pick a value and hope that it's big enough.  (Running a separate\nprogram which finds the page size via sysconf(_SC_PAGESIZE) and then\npasses it to the compilation via a -D switch seemed like overkill\nfor a case which is rendered moot by recent linker versions.)\n\nFurther information can be found here:\n\n   https://sourceware.org/pipermail/gdb-patches/2020-May/168168.html\n   https://sourceware.org/pipermail/gdb-patches/2020-May/168170.html\n\nThanks to H.J. Lu for telling me about the '-z separate-code' linker\nswitch.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/coremaker.c (filler_ro): New global constant.",
    "tree": {
      "sha": "0e02bcfd0ddf3dfc5598ecbfd39bb07ee4934929",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e02bcfd0ddf3dfc5598ecbfd39bb07ee4934929"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/678c7a56ced1828d37a554ec97f672496f135054",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/678c7a56ced1828d37a554ec97f672496f135054",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/678c7a56ced1828d37a554ec97f672496f135054",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/678c7a56ced1828d37a554ec97f672496f135054/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea57e509a23223556c5aede50da8a2aa23a95912",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea57e509a23223556c5aede50da8a2aa23a95912",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ea57e509a23223556c5aede50da8a2aa23a95912"
    }
  ],
  "stats": {
    "total": 10,
    "additions": 10,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6c3bb5ec9d5fa0106b778ab28f56f06f84502793",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/678c7a56ced1828d37a554ec97f672496f135054/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/678c7a56ced1828d37a554ec97f672496f135054/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=678c7a56ced1828d37a554ec97f672496f135054",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-20  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.base/coremaker.c (filler_ro): New global constant.\n+\n 2020-07-22  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/mi_prot.exp: New file."
    },
    {
      "sha": "a39b3ba8a4b60ab9d1832f1b87c090d411fb75ca",
      "filename": "gdb/testsuite/gdb.base/coremaker.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/678c7a56ced1828d37a554ec97f672496f135054/gdb/testsuite/gdb.base/coremaker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/678c7a56ced1828d37a554ec97f672496f135054/gdb/testsuite/gdb.base/coremaker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/coremaker.c?ref=678c7a56ced1828d37a554ec97f672496f135054",
      "patch": "@@ -42,6 +42,12 @@ char *buf2;\n int coremaker_data = 1;\t/* In Data section */\n int coremaker_bss;\t/* In BSS section */\n \n+/* Place a chunk of memory before coremaker_ro to improve the chances\n+   that coremaker_ro will end up on it's own page.  See:\n+\n+   https://sourceware.org/pipermail/gdb-patches/2020-May/168168.html\n+   https://sourceware.org/pipermail/gdb-patches/2020-May/168170.html  */\n+const unsigned char filler_ro[MAPSIZE] = {1, 2, 3, 4, 5, 6, 7, 8};\n const int coremaker_ro = 201;\t/* In Read-Only Data section */\n \n /* Note that if the mapping fails for any reason, we set buf2"
    }
  ]
}