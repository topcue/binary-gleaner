{
  "sha": "fe053b9e85378b4df1397684266b2cddcce8123b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmUwNTNiOWU4NTM3OGI0ZGYxMzk3Njg0MjY2YjJjZGRjY2U4MTIzYg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:06Z"
    },
    "message": "gdb/jit: pass the jiter objfile as an argument to jit_event_handler\n\nThis is a refactoring that adds a new parameter to the `jit_event_handler`\nfunction: the JITer objfile.  The goal is to distinguish which JITer\ntriggered the JIT event, in case there are multiple JITers -- a capability\nthat is added in a subsequent patch.\n\ngdb/ChangeLog:\n2020-07-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* jit.h: Forward-declare `struct objfile`.\n\t(jit_event_handler): Add a second parameter, the JITer objfile.\n\t* jit.c (jit_read_descriptor): Change the signature to take the\n\tJITer objfile as an argument instead of the jit_program_space_data.\n\t(jit_inferior_init): Update the call to jit_read_descriptor.\n\t(jit_event_handler): Use the new JITer objfile argument when calling\n\tjit_read_descriptor.\n\t* breakpoint.c (handle_jit_event): Update the call to\n\tjit_event_handler to pass the JITer objfile.",
    "tree": {
      "sha": "6ab15f8d5b42943f01b2d8602b5a65718ffc7eed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ab15f8d5b42943f01b2d8602b5a65718ffc7eed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe053b9e85378b4df1397684266b2cddcce8123b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe053b9e85378b4df1397684266b2cddcce8123b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe053b9e85378b4df1397684266b2cddcce8123b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe053b9e85378b4df1397684266b2cddcce8123b/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39fdda0744607575103b30ffbec3cdb99f8d2501",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39fdda0744607575103b30ffbec3cdb99f8d2501",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39fdda0744607575103b30ffbec3cdb99f8d2501"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 34,
    "deletions": 15
  },
  "files": [
    {
      "sha": "7d52e228b4649fb3e6a7f2949703f22d8326e3d9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe053b9e85378b4df1397684266b2cddcce8123b",
      "patch": "@@ -1,3 +1,15 @@\n+2020-07-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* jit.h: Forward-declare `struct objfile`.\n+\t(jit_event_handler): Add a second parameter, the JITer objfile.\n+\t* jit.c (jit_read_descriptor): Change the signature to take the\n+\tJITer objfile as an argument instead of the jit_program_space_data.\n+\t(jit_inferior_init): Update the call to jit_read_descriptor.\n+\t(jit_event_handler): Use the new JITer objfile argument when calling\n+\tjit_read_descriptor.\n+\t* breakpoint.c (handle_jit_event): Update the call to\n+\tjit_event_handler to pass the JITer objfile.\n+\n 2020-07-21  John Baldwin  <jhb@FreeBSD.org>\n \n \t* gdbarch.c: Regenerate."
    },
    {
      "sha": "414208469f9bdcc9232c942e5f60f9bd00d012e8",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=fe053b9e85378b4df1397684266b2cddcce8123b",
      "patch": "@@ -5448,8 +5448,9 @@ handle_jit_event (void)\n \n   frame = get_current_frame ();\n   gdbarch = get_frame_arch (frame);\n+  objfile *jiter = symbol_objfile (get_frame_function (frame));\n \n-  jit_event_handler (gdbarch);\n+  jit_event_handler (gdbarch, jiter);\n \n   target_terminal::inferior ();\n }"
    },
    {
      "sha": "41ed81ab4b02bc8984ae82e82f5e972d59851c0b",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=fe053b9e85378b4df1397684266b2cddcce8123b",
      "patch": "@@ -332,9 +332,9 @@ get_jit_program_space_data ()\n    memory.  Returns true if all went well, false otherwise.  */\n \n static bool\n-jit_read_descriptor (struct gdbarch *gdbarch,\n-\t\t     struct jit_descriptor *descriptor,\n-\t\t     struct jit_program_space_data *ps_data)\n+jit_read_descriptor (gdbarch *gdbarch,\n+\t\t     jit_descriptor *descriptor,\n+\t\t     objfile *jiter)\n {\n   int err;\n   struct type *ptr_type;\n@@ -344,16 +344,16 @@ jit_read_descriptor (struct gdbarch *gdbarch,\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   struct jit_objfile_data *objf_data;\n \n-  if (ps_data->objfile == NULL)\n-    return false;\n-  objf_data = get_jit_objfile_data (ps_data->objfile);\n+  gdb_assert (jiter != nullptr);\n+  objf_data = get_jit_objfile_data (jiter);\n+\n   if (objf_data->descriptor == NULL)\n     return false;\n \n   if (jit_debug)\n     fprintf_unfiltered (gdb_stdlog,\n \t\t\t\"jit_read_descriptor, descriptor_addr = %s\\n\",\n-\t\t\tpaddress (gdbarch, MSYMBOL_VALUE_ADDRESS (ps_data->objfile,\n+\t\t\tpaddress (gdbarch, MSYMBOL_VALUE_ADDRESS (jiter,\n \t\t\t\t\t\t\t\t  objf_data->descriptor)));\n \n   /* Figure out how big the descriptor is on the remote and how to read it.  */\n@@ -363,7 +363,7 @@ jit_read_descriptor (struct gdbarch *gdbarch,\n   desc_buf = (gdb_byte *) alloca (desc_size);\n \n   /* Read the descriptor.  */\n-  err = target_read_memory (MSYMBOL_VALUE_ADDRESS (ps_data->objfile,\n+  err = target_read_memory (MSYMBOL_VALUE_ADDRESS (jiter,\n \t\t\t\t\t\t   objf_data->descriptor),\n \t\t\t    desc_buf, desc_size);\n   if (err)\n@@ -1255,9 +1255,13 @@ jit_inferior_init (struct gdbarch *gdbarch)\n   if (!jit_breakpoint_re_set_internal (gdbarch, ps_data))\n     return;\n \n+  /* There must be a JITer registered, otherwise we would exit early\n+     above.  */\n+  objfile *jiter = ps_data->objfile;\n+\n   /* Read the descriptor so we can check the version number and load\n      any already JITed functions.  */\n-  if (!jit_read_descriptor (gdbarch, &descriptor, ps_data))\n+  if (!jit_read_descriptor (gdbarch, &descriptor, jiter))\n     return;\n \n   /* Check that the version number agrees with that we support.  */\n@@ -1330,16 +1334,15 @@ jit_inferior_exit_hook (struct inferior *inf)\n }\n \n void\n-jit_event_handler (struct gdbarch *gdbarch)\n+jit_event_handler (gdbarch *gdbarch, objfile *jiter)\n {\n   struct jit_descriptor descriptor;\n   struct jit_code_entry code_entry;\n   CORE_ADDR entry_addr;\n   struct objfile *objf;\n \n   /* Read the descriptor from remote memory.  */\n-  if (!jit_read_descriptor (gdbarch, &descriptor,\n-\t\t\t    get_jit_program_space_data ()))\n+  if (!jit_read_descriptor (gdbarch, &descriptor, jiter))\n     return;\n   entry_addr = descriptor.relevant_entry;\n "
    },
    {
      "sha": "71e78a5167d7e6c15c69251b8f6ce69cf8400a5c",
      "filename": "gdb/jit.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/jit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe053b9e85378b4df1397684266b2cddcce8123b/gdb/jit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.h?ref=fe053b9e85378b4df1397684266b2cddcce8123b",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef JIT_H\n #define JIT_H\n \n+struct objfile;\n+\n /* When the JIT breakpoint fires, the inferior wants us to take one of\n    these actions.  These values are used by the inferior, so the\n    values of these enums cannot be changed.  */\n@@ -76,8 +78,9 @@ extern void jit_inferior_created_hook (void);\n extern void jit_breakpoint_re_set (void);\n \n /* This function is called by handle_inferior_event when it decides\n-   that the JIT event breakpoint has fired.  */\n+   that the JIT event breakpoint has fired.  JITER is the objfile\n+   whose JIT event breakpoint has been hit.  */\n \n-extern void jit_event_handler (struct gdbarch *gdbarch);\n+extern void jit_event_handler (gdbarch *gdbarch, objfile *jiter);\n \n #endif /* JIT_H */"
    }
  ]
}