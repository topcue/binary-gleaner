{
  "sha": "7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
  "node_id": "C_kwDOANOeidoAKDc5MDRlOTYxM2UwYTJmYzM4ZTlhYmMwNmE5MTZkZWE2YTAwOWM3YjQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-26T01:14:19Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-18T17:14:42Z"
    },
    "message": "Move gdb_argv to gdbsupport\n\nThis moves the gdb_argv class to a new header in gdbsupport.",
    "tree": {
      "sha": "55c245504a0bb4dfce0eea29fc1e796789d0b0e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55c245504a0bb4dfce0eea29fc1e796789d0b0e5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5947982f1dadfa72a6913f25cc4f56e137c7217e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5947982f1dadfa72a6913f25cc4f56e137c7217e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5947982f1dadfa72a6913f25cc4f56e137c7217e"
    }
  ],
  "stats": {
    "total": 405,
    "additions": 220,
    "deletions": 185
  },
  "files": [
    {
      "sha": "ed75d3dfc1568769eef0dabaad37de9d11f07a6c",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -27,6 +27,7 @@\n #include \"cli-script.h\"\n #include \"completer.h\"\n #include \"gdbsupport/intrusive_list.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Not a set/show command.  Note that some commands which begin with\n    \"set\" or \"show\" might be in this category, if their syntax does"
    },
    {
      "sha": "6794c93d60e7bdd1bc3c4452122867638ad7f9ec",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -44,6 +44,7 @@\n #include \"gdbsupport/gdb_unlinker.h\"\n #include \"gdbsupport/pathstuff.h\"\n #include \"gdbsupport/scoped_ignore_signal.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n \f\n "
    },
    {
      "sha": "d9854d50f7869efcc201253b5eb6d1f68d04dcfa",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -49,6 +49,7 @@\n #include <algorithm>\n #include \"gdbsupport/pathstuff.h\"\n #include \"cli/cli-style.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n void (*deprecated_file_changed_hook) (const char *);\n "
    },
    {
      "sha": "bf558922db66455f8e2b411c2fa2e5658fd69d35",
      "filename": "gdb/guile/scm-string.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/guile/scm-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/guile/scm-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-string.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -23,6 +23,7 @@\n #include \"defs.h\"\n #include \"charset.h\"\n #include \"guile-internal.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Convert STRING to an int.\n    STRING must be a valid integer.  */"
    },
    {
      "sha": "bebddb44173cb4280a774d18250f591b19e2bf4d",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -35,6 +35,7 @@\n #include \"target-descriptions.h\"\n #include \"readline/tilde.h\"\n #include \"progspace-and-thread.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Keep a registry of per-inferior data-pointers required by other GDB\n    modules.  */"
    },
    {
      "sha": "2e7ed15723fded78fb96da567f62ad3620e5db97",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -72,6 +72,7 @@\n #include \"scoped-mock-context.h\"\n #include \"test-target.h\"\n #include \"gdbsupport/common-debug.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Prototypes for local functions */\n "
    },
    {
      "sha": "a475d8790c9a3731febf0704039ef6b53fc689b0",
      "filename": "gdb/interps.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/interps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/interps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/interps.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -38,6 +38,7 @@\n #include \"completer.h\"\n #include \"top.h\"\t\t/* For command_loop.  */\n #include \"main.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Each UI has its own independent set of interpreters.  */\n "
    },
    {
      "sha": "9db8a7aeba2210048b2b4423e919d0e4758b088d",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -36,6 +36,7 @@\n #include \"gdbcmd.h\"\n #include <algorithm>\n #include <set>\n+#include \"gdbsupport/buildargv.h\"\n \n static struct partial_symbol *lookup_partial_symbol (struct objfile *,\n \t\t\t\t\t\t     struct partial_symtab *,"
    },
    {
      "sha": "3308252cb47825906ff9818d66340aa39d579a1a",
      "filename": "gdb/skip.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/skip.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/skip.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/skip.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -37,6 +37,7 @@\n #include \"gdbsupport/gdb_optional.h\"\n #include <list>\n #include \"cli/cli-style.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* True if we want to print debug printouts related to file/function\n    skipping. */"
    },
    {
      "sha": "ab5cfc5a9d97eabf3790861438b06fc31bf15036",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -50,6 +50,7 @@\n #include \"observable.h\"\n #include \"build-id.h\"\n #include \"debuginfod-support.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n #define OPEN_MODE (O_RDONLY | O_BINARY)\n #define FDOPEN_MODE FOPEN_RB"
    },
    {
      "sha": "b81be2962d44ff947be6f6f41271b19ec5a6cfd1",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -55,6 +55,7 @@\n #include \"gdbsupport/def-vector.h\"\n #include \"cli/cli-option.h\"\n #include \"cli/cli-style.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* The possible choices of \"set print frame-arguments\", and the value\n    of this setting.  */"
    },
    {
      "sha": "37ce01bb0e6da332068bbdab10ccf994bae69fb4",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -61,6 +61,7 @@\n #include \"gdbsupport/selftest.h\"\n #include \"cli/cli-style.h\"\n #include \"gdbsupport/forward-scope-exit.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n #include <sys/types.h>\n #include <fcntl.h>"
    },
    {
      "sha": "4cbe338cb842a58bbcde802c0a59af5127ba2ace",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -38,6 +38,7 @@\n #include \"source.h\"\n #include \"readline/tilde.h\"\n #include <cli/cli-style.h>\n+#include \"gdbsupport/buildargv.h\"\n \n /* Prototypes for local functions */\n "
    },
    {
      "sha": "f7d9331e5b7f60d710bb64f9493481084fc6c587",
      "filename": "gdb/tracefile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/tracefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/tracefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracefile.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -24,6 +24,7 @@\n #include \"regcache.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include \"gdbarch.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n /* Helper macros.  */\n "
    },
    {
      "sha": "33f5c7f59fe15d9c1baaf9223f3a14ac02b8b58f",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -58,6 +58,7 @@\n #include <algorithm>\n #include \"cli/cli-style.h\"\n #include \"expop.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n #include <unistd.h>\n "
    },
    {
      "sha": "da60c1e4144493aa51996f34479594a15bc11b8c",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -76,6 +76,7 @@\n #include \"cli-out.h\"\n #include \"gdbsupport/gdb-safe-ctype.h\"\n #include \"bt-utils.h\"\n+#include \"gdbsupport/buildargv.h\"\n \n void (*deprecated_error_begin_hook) (void);\n \n@@ -2890,17 +2891,6 @@ ldirname (const char *filename)\n   return dirname;\n }\n \n-/* See utils.h.  */\n-\n-void\n-gdb_argv::reset (const char *s)\n-{\n-  char **argv = buildargv (s);\n-\n-  freeargv (m_argv);\n-  m_argv = argv;\n-}\n-\n /* Return ARGS parsed as a valid pid, or throw an error.  */\n \n int"
    },
    {
      "sha": "5ac34eb41a922ecdbe9e38a804b7c0011b97cb1b",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 174,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -120,180 +120,6 @@ extern int parse_pid_to_attach (const char *args);\n \n extern int parse_escape (struct gdbarch *, const char **);\n \n-/* A wrapper for an array of char* that was allocated in the way that\n-   'buildargv' does, and should be freed with 'freeargv'.  */\n-\n-class gdb_argv\n-{\n-public:\n-\n-  /* A constructor that initializes to NULL.  */\n-\n-  gdb_argv ()\n-    : m_argv (NULL)\n-  {\n-  }\n-\n-  /* A constructor that calls buildargv on STR.  STR may be NULL, in\n-     which case this object is initialized with a NULL array.  */\n-\n-  explicit gdb_argv (const char *str)\n-    : m_argv (NULL)\n-  {\n-    reset (str);\n-  }\n-\n-  /* A constructor that takes ownership of an existing array.  */\n-\n-  explicit gdb_argv (char **array)\n-    : m_argv (array)\n-  {\n-  }\n-\n-  gdb_argv (const gdb_argv &) = delete;\n-  gdb_argv &operator= (const gdb_argv &) = delete;\n-\n-  gdb_argv &operator= (gdb_argv &&other)\n-  {\n-    freeargv (m_argv);\n-    m_argv = other.m_argv;\n-    other.m_argv = nullptr;\n-    return *this;\n-  }\n-\n-  gdb_argv (gdb_argv &&other)\n-  {\n-    m_argv = other.m_argv;\n-    other.m_argv = nullptr;\n-  }\n-\n-  ~gdb_argv ()\n-  {\n-    freeargv (m_argv);\n-  }\n-\n-  /* Call buildargv on STR, storing the result in this object.  Any\n-     previous state is freed.  STR may be NULL, in which case this\n-     object is reset with a NULL array.  If buildargv fails due to\n-     out-of-memory, call malloc_failure.  Therefore, the value is\n-     guaranteed to be non-NULL, unless the parameter itself is\n-     NULL.  */\n-\n-  void reset (const char *str);\n-\n-  /* Return the underlying array.  */\n-\n-  char **get ()\n-  {\n-    return m_argv;\n-  }\n-\n-  const char * const * get () const\n-  {\n-    return m_argv;\n-  }\n-\n-  /* Return the underlying array, transferring ownership to the\n-     caller.  */\n-\n-  ATTRIBUTE_UNUSED_RESULT char **release ()\n-  {\n-    char **result = m_argv;\n-    m_argv = NULL;\n-    return result;\n-  }\n-\n-  /* Return the number of items in the array.  */\n-\n-  int count () const\n-  {\n-    return countargv (m_argv);\n-  }\n-\n-  /* Index into the array.  */\n-\n-  char *operator[] (int arg)\n-  {\n-    gdb_assert (m_argv != NULL);\n-    return m_argv[arg];\n-  }\n-\n-  /* Return the arguments array as an array view.  */\n-\n-  gdb::array_view<char *> as_array_view ()\n-  {\n-    return gdb::array_view<char *> (this->get (), this->count ());\n-  }\n-\n-  gdb::array_view<const char * const> as_array_view () const\n-  {\n-    return gdb::array_view<const char * const> (this->get (), this->count ());\n-  }\n-\n-  /* Append arguments to this array.  */\n-  void append (gdb_argv &&other)\n-  {\n-    int size = count ();\n-    int argc = other.count ();\n-    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n-\n-    for (int argi = 0; argi < argc; argi++)\n-      {\n-\t/* Transfer ownership of the string.  */\n-\tm_argv[size++] = other.m_argv[argi];\n-\t/* Ensure that destruction of OTHER works correctly.  */\n-\tother.m_argv[argi] = nullptr;\n-      }\n-    m_argv[size] = nullptr;\n-  }\n-\n-  /* Append arguments to this array.  */\n-  void append (const gdb_argv &other)\n-  {\n-    int size = count ();\n-    int argc = other.count ();\n-    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n-\n-    for (int argi = 0; argi < argc; argi++)\n-      m_argv[size++] = xstrdup (other.m_argv[argi]);\n-    m_argv[size] = nullptr;\n-  }\n-\n-  /* The iterator type.  */\n-\n-  typedef char **iterator;\n-\n-  /* Return an iterator pointing to the start of the array.  */\n-\n-  iterator begin ()\n-  {\n-    return m_argv;\n-  }\n-\n-  /* Return an iterator pointing to the end of the array.  */\n-\n-  iterator end ()\n-  {\n-    return m_argv + count ();\n-  }\n-\n-  bool operator!= (std::nullptr_t)\n-  {\n-    return m_argv != NULL;\n-  }\n-\n-  bool operator== (std::nullptr_t)\n-  {\n-    return m_argv == NULL;\n-  }\n-\n-private:\n-\n-  /* The wrapped array.  */\n-\n-  char **m_argv;\n-};\n-\n \f\n /* Cleanup utilities.  */\n "
    },
    {
      "sha": "7a34d9b509d8ce81142c6cdbf3ea9676adb202e2",
      "filename": "gdbsupport/buildargv.h",
      "status": "added",
      "additions": 204,
      "deletions": 0,
      "changes": 204,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdbsupport/buildargv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7904e9613e0a2fc38e9abc06a916dea6a009c7b4/gdbsupport/buildargv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/buildargv.h?ref=7904e9613e0a2fc38e9abc06a916dea6a009c7b4",
      "patch": "@@ -0,0 +1,204 @@\n+/* RAII wrapper for buildargv\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDBSUPPORT_BUILDARGV_H\n+#define GDBSUPPORT_BUILDARGV_H\n+\n+#include \"libiberty.h\"\n+\n+/* A wrapper for an array of char* that was allocated in the way that\n+   'buildargv' does, and should be freed with 'freeargv'.  */\n+\n+class gdb_argv\n+{\n+public:\n+\n+  /* A constructor that initializes to NULL.  */\n+\n+  gdb_argv ()\n+    : m_argv (NULL)\n+  {\n+  }\n+\n+  /* A constructor that calls buildargv on STR.  STR may be NULL, in\n+     which case this object is initialized with a NULL array.  */\n+\n+  explicit gdb_argv (const char *str)\n+    : m_argv (NULL)\n+  {\n+    reset (str);\n+  }\n+\n+  /* A constructor that takes ownership of an existing array.  */\n+\n+  explicit gdb_argv (char **array)\n+    : m_argv (array)\n+  {\n+  }\n+\n+  gdb_argv (const gdb_argv &) = delete;\n+  gdb_argv &operator= (const gdb_argv &) = delete;\n+\n+  gdb_argv &operator= (gdb_argv &&other)\n+  {\n+    freeargv (m_argv);\n+    m_argv = other.m_argv;\n+    other.m_argv = nullptr;\n+    return *this;\n+  }\n+\n+  gdb_argv (gdb_argv &&other)\n+  {\n+    m_argv = other.m_argv;\n+    other.m_argv = nullptr;\n+  }\n+\n+  ~gdb_argv ()\n+  {\n+    freeargv (m_argv);\n+  }\n+\n+  /* Call buildargv on STR, storing the result in this object.  Any\n+     previous state is freed.  STR may be NULL, in which case this\n+     object is reset with a NULL array.  If buildargv fails due to\n+     out-of-memory, call malloc_failure.  Therefore, the value is\n+     guaranteed to be non-NULL, unless the parameter itself is\n+     NULL.  */\n+\n+  void reset (const char *str)\n+  {\n+    char **argv = buildargv (str);\n+    freeargv (m_argv);\n+    m_argv = argv;\n+  }\n+\n+  /* Return the underlying array.  */\n+\n+  char **get ()\n+  {\n+    return m_argv;\n+  }\n+\n+  const char * const * get () const\n+  {\n+    return m_argv;\n+  }\n+\n+  /* Return the underlying array, transferring ownership to the\n+     caller.  */\n+\n+  ATTRIBUTE_UNUSED_RESULT char **release ()\n+  {\n+    char **result = m_argv;\n+    m_argv = NULL;\n+    return result;\n+  }\n+\n+  /* Return the number of items in the array.  */\n+\n+  int count () const\n+  {\n+    return countargv (m_argv);\n+  }\n+\n+  /* Index into the array.  */\n+\n+  char *operator[] (int arg)\n+  {\n+    gdb_assert (m_argv != NULL);\n+    return m_argv[arg];\n+  }\n+\n+  /* Return the arguments array as an array view.  */\n+\n+  gdb::array_view<char *> as_array_view ()\n+  {\n+    return gdb::array_view<char *> (this->get (), this->count ());\n+  }\n+\n+  gdb::array_view<const char * const> as_array_view () const\n+  {\n+    return gdb::array_view<const char * const> (this->get (), this->count ());\n+  }\n+\n+  /* Append arguments to this array.  */\n+  void append (gdb_argv &&other)\n+  {\n+    int size = count ();\n+    int argc = other.count ();\n+    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n+\n+    for (int argi = 0; argi < argc; argi++)\n+      {\n+\t/* Transfer ownership of the string.  */\n+\tm_argv[size++] = other.m_argv[argi];\n+\t/* Ensure that destruction of OTHER works correctly.  */\n+\tother.m_argv[argi] = nullptr;\n+      }\n+    m_argv[size] = nullptr;\n+  }\n+\n+  /* Append arguments to this array.  */\n+  void append (const gdb_argv &other)\n+  {\n+    int size = count ();\n+    int argc = other.count ();\n+    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n+\n+    for (int argi = 0; argi < argc; argi++)\n+      m_argv[size++] = xstrdup (other.m_argv[argi]);\n+    m_argv[size] = nullptr;\n+  }\n+\n+  /* The iterator type.  */\n+\n+  typedef char **iterator;\n+\n+  /* Return an iterator pointing to the start of the array.  */\n+\n+  iterator begin ()\n+  {\n+    return m_argv;\n+  }\n+\n+  /* Return an iterator pointing to the end of the array.  */\n+\n+  iterator end ()\n+  {\n+    return m_argv + count ();\n+  }\n+\n+  bool operator!= (std::nullptr_t)\n+  {\n+    return m_argv != NULL;\n+  }\n+\n+  bool operator== (std::nullptr_t)\n+  {\n+    return m_argv == NULL;\n+  }\n+\n+private:\n+\n+  /* The wrapped array.  */\n+\n+  char **m_argv;\n+};\n+\n+#endif /* GDBSUPPORT_BUILDARGV_H */"
    }
  ]
}