{
  "sha": "39f0547e554df96608dd041d2a7b3c72882fd515",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzlmMDU0N2U1NTRkZjk2NjA4ZGQwNDFkMmE3YjNjNzI4ODJmZDUxNQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-25T12:15:41Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-25T12:15:41Z"
    },
    "message": "Extend objdump's --dwarf=follow-links option so that separate debug info files will also be affected by other dump function, and symbol tables from separate debug info files will be used when disassembling the main file.\n\n\t* objdump.c (sym_ok): New function.\n\t(find_symbol_for_address): Use new function.\n\t(disassemble_section): Compare sections by name, not pointer.\n\t(dump_dwarf): Move code to initialise byte_get pointer and iterate\n\tover separate debug files from here to ...\n\t(dump_bfd): ... here.  Add parameter indicating that a separate\n\tdebug info file is being dumped.  For main file, pull in the\n\tsymbol tables from all separate debug info files.\n\t(display_object): Update call to dump_bfd.\n\t* doc/binutils.texi: Document extened behaviour of the\n\t--dwarf=follow-links option.\n\t* NEWS: Mention this new feature.\n\t* testsuite/binutils-all/objdump.WK2: Update expected output.\n\t* testsuite/binutils-all/objdump.exp (test_follow_debuglink): Add\n\toptions and dump file parameters.\n\tAdd extra test.\n\t* testsuite/binutils-all/objdump.WK3: New file.\n\t* testsuite/binutils-all/readelf.exp: Change expected output for\n\treadelf -wKis test.\n\t* testsuite/binutils-all/readelf.wKis: New file.",
    "tree": {
      "sha": "53ca1f928e75345d1a9e3a409ef95ef9a2175304",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53ca1f928e75345d1a9e3a409ef95ef9a2175304"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39f0547e554df96608dd041d2a7b3c72882fd515",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39f0547e554df96608dd041d2a7b3c72882fd515",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39f0547e554df96608dd041d2a7b3c72882fd515",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39f0547e554df96608dd041d2a7b3c72882fd515/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60245a92ce2c16d0b43987c2442b1a125652b832",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60245a92ce2c16d0b43987c2442b1a125652b832",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60245a92ce2c16d0b43987c2442b1a125652b832"
    }
  ],
  "stats": {
    "total": 267,
    "additions": 212,
    "deletions": 55
  },
  "files": [
    {
      "sha": "f3d8fa2a5ccb9a02d3ce1090b7f5635f5d0f7202",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -1,3 +1,26 @@\n+2019-02-25  Nick Clifton  <nickc@redhat.com>\n+\n+\t* objdump.c (sym_ok): New function.\n+\t(find_symbol_for_address): Use new function.\n+\t(disassemble_section): Compare sections by name, not pointer.\n+\t(dump_dwarf): Move code to initialise byte_get pointer and iterate\n+\tover separate debug files from here to ...\n+\t(dump_bfd): ... here.  Add parameter indicating that a separate\n+\tdebug info file is being dumped.  For main file, pull in the\n+\tsymbol tables from all separate debug info files.\n+\t(display_object): Update call to dump_bfd.\n+\t* doc/binutils.texi: Document extened behaviour of the\n+\t--dwarf=follow-links option.\n+\t* NEWS: Mention this new feature.\n+\t* testsuite/binutils-all/objdump.WK2: Update expected output.\n+\t* testsuite/binutils-all/objdump.exp (test_follow_debuglink): Add\n+\toptions and dump file parameters.\n+\tAdd extra test.\n+\t* testsuite/binutils-all/objdump.WK3: New file.\n+\t* testsuite/binutils-all/readelf.exp: Change expected output for\n+\treadelf -wKis test.\n+\t* testsuite/binutils-all/readelf.wKis: New file.\n+\n 2019-02-22  Nick Clifton  <nickc@redhat.com>\n \n \tPR 23843"
    },
    {
      "sha": "7c9d7bef30b024bdb03bc0d86b1ffbc1506ffe66",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -6,6 +6,13 @@\n   more than one are present in a file.  (This usually happens when gcc's\n   -gsplit-dwarf option is used).\n \n+  In addition objdump's --dwarf=follow-links now also affects its other\n+  display options, so that for example, when combined with --syms it will\n+  cause the symbol tables in any linked debug info files to also be\n+  displayed.  In addition when combined with --disassemble the --dwarf=\n+  follow-links option will ensure that any symbol tables in the linked\n+  files are read and used when disassembling code in the main file.\n+  \n Changes in 2.32:\n \n * The addr2line, c++filt, nm and objdump tools now have a limit on the"
    },
    {
      "sha": "eb5c3e87a3c8ad2c64ebb7fb995174a0679f37f1",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -2236,6 +2236,10 @@ will stop at the end of the function, otherwise it will stop when the\n next symbol is encountered.  If there are no matches for @var{symbol}\n then nothing will be displayed.\n \n+Note if the @option{--dwarf=follow-links} option has also been enabled\n+then any symbol tables in linked debug info files will be read in and\n+used when disassembling.\n+\n @item -D\n @itemx --disassemble-all\n Like @option{-d}, but disassemble the contents of all sections, not just\n@@ -2254,6 +2258,10 @@ If the target is an ARM architecture this switch also has the effect\n of forcing the disassembler to decode pieces of data found in code\n sections as if they were instructions.\n \n+Note if the @option{--dwarf=follow-links} option has also been enabled\n+then any symbol tables in linked debug info files will be read in and\n+used when disassembling.\n+\n @item --prefix-addresses\n When disassembling, print the complete address on each line.  This is\n the older disassembly format."
    },
    {
      "sha": "9f17af9ff823bc1517118c8d58b9cc42431bcbad",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -9826,6 +9826,7 @@ parse_gnu_debuglink (struct dwarf_section * section, void * data)\n      The CRC value is stored after the filename, aligned up to 4 bytes.  */\n   name = (const char *) section->start;\n \n+  \n   crc_offset = strnlen (name, section->size) + 1;\n   crc_offset = (crc_offset + 3) & ~3;\n   if (crc_offset + 4 > section->size)\n@@ -9981,6 +9982,11 @@ load_separate_debug_info (const char *            main_filename,\n   sprintf (debug_filename, \"%s/%s\", EXTRA_DEBUG_ROOT1, separate_filename);\n   if (check_func (debug_filename, func_data))\n     goto found;\n+\n+  /* Try the first extra debug file root.  */\n+  sprintf (debug_filename, \"%s/%s/%s\", EXTRA_DEBUG_ROOT1, canon_dir, separate_filename);\n+  if (check_func (debug_filename, func_data))\n+    goto found;\n #endif\n \n #ifdef EXTRA_DEBUG_ROOT2\n@@ -10010,6 +10016,9 @@ load_separate_debug_info (const char *            main_filename,\n #endif\n \n #ifdef EXTRA_DEBUG_ROOT1\n+  sprintf (debug_filename, \"%s/%s/%s\", EXTRA_DEBUG_ROOT1, canon_dir, separate_filename);\n+  warn (_(\"tried: %s\\n\"), debug_filename);\n+\n   sprintf (debug_filename, \"%s/%s\", EXTRA_DEBUG_ROOT1, separate_filename);\n   warn (_(\"tried: %s\\n\"), debug_filename);\n #endif"
    },
    {
      "sha": "ca2f062efb752448cd5ed2dcfb987322a63faf31",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -218,6 +218,7 @@ extern int do_debug_addr;\n extern int do_debug_cu_index;\n extern int do_wide;\n extern int do_debug_links;\n+extern int do_follow_links;\n \n extern int dwarf_cutoff_level;\n extern unsigned long dwarf_start_die;"
    },
    {
      "sha": "ab091c10d4bfcffef991026ab2b9469d2362965c",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 108,
      "deletions": 41,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -987,6 +987,30 @@ objdump_print_symname (bfd *abfd, struct disassemble_info *inf,\n     free (alloc);\n }\n \n+static inline bfd_boolean\n+sym_ok (bfd_boolean               want_section,\n+\tbfd *                     abfd ATTRIBUTE_UNUSED,\n+\tlong                      place,\n+\tasection *                sec,\n+\tstruct disassemble_info * inf)\n+{\n+  if (want_section)\n+    {\n+      /* Note - we cannot just compare section pointers because they could\n+\t be different, but the same...  Ie the symbol that we are trying to\n+\t find could have come from a separate debug info file.  Under such\n+\t circumstances the symbol will be associated with a section in the\n+\t debug info file, whilst the section we want is in a normal file.\n+\t So the section pointers will be different, but the section names\n+\t will be the same.  */\n+      if (strcmp (bfd_section_name (abfd, sorted_syms[place]->section),\n+\t\t  bfd_section_name (abfd, sec)) != 0)\n+\treturn FALSE;\n+    }\n+\n+  return inf->symbol_is_valid (sorted_syms[place], inf);\n+}\n+\n /* Locate a symbol given a bfd and a section (from INFO->application_data),\n    and a VMA.  If INFO->application_data->require_sec is TRUE, then always\n    require the symbol to be in the section.  Returns NULL if there is no\n@@ -1062,8 +1086,7 @@ find_symbol_for_address (bfd_vma vma,\n \t && (bfd_asymbol_value (sorted_syms[min])\n \t     == bfd_asymbol_value (sorted_syms[thisplace])))\n     {\n-      if (sorted_syms[min]->section == sec\n-\t  && inf->symbol_is_valid (sorted_syms[min], inf))\n+      if (sym_ok (TRUE, abfd, min, sec, inf))\n \t{\n \t  thisplace = min;\n \n@@ -1090,16 +1113,15 @@ find_symbol_for_address (bfd_vma vma,\n \t\t      && vma >= bfd_get_section_vma (abfd, sec)\n \t\t      && vma < (bfd_get_section_vma (abfd, sec)\n \t\t\t\t+ bfd_section_size (abfd, sec) / opb)));\n-  if ((sorted_syms[thisplace]->section != sec && want_section)\n-      || ! inf->symbol_is_valid (sorted_syms[thisplace], inf))\n+  \n+  if (! sym_ok (want_section, abfd, thisplace, sec, inf))\n     {\n       long i;\n       long newplace = sorted_symcount;\n \n       for (i = min - 1; i >= 0; i--)\n \t{\n-\t  if ((sorted_syms[i]->section == sec || !want_section)\n-\t      && inf->symbol_is_valid (sorted_syms[i], inf))\n+\t  if (sym_ok (want_section, abfd, i, sec, inf))\n \t    {\n \t      if (newplace == sorted_symcount)\n \t\tnewplace = i;\n@@ -1122,17 +1144,15 @@ find_symbol_for_address (bfd_vma vma,\n \t     Look for one with a larger value.  */\n \t  for (i = thisplace + 1; i < sorted_symcount; i++)\n \t    {\n-\t      if ((sorted_syms[i]->section == sec || !want_section)\n-\t\t  && inf->symbol_is_valid (sorted_syms[i], inf))\n+\t      if (sym_ok (want_section, abfd, i, sec, inf))\n \t\t{\n \t\t  thisplace = i;\n \t\t  break;\n \t\t}\n \t    }\n \t}\n \n-      if ((sorted_syms[thisplace]->section != sec && want_section)\n-\t  || ! inf->symbol_is_valid (sorted_syms[thisplace], inf))\n+      if (! sym_ok (want_section, abfd, thisplace, sec, inf))\n \t/* There is no suitable symbol.  */\n \treturn NULL;\n     }\n@@ -2460,7 +2480,7 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n       else\n \t{\n #define is_valid_next_sym(SYM) \\\n-  ((SYM)->section == section \\\n+  (strcmp (bfd_section_name (abfd, (SYM)->section), bfd_section_name (abfd, section)) == 0 \\\n    && (bfd_asymbol_value (SYM) > bfd_asymbol_value (sym)) \\\n    && pinfo->symbol_is_valid (SYM, pinfo))\n \n@@ -2882,24 +2902,18 @@ dump_dwarf_section (bfd *abfd, asection *section,\n static void\n dump_dwarf (bfd *abfd)\n {\n-  bfd_boolean have_separates;\n-\n-  is_relocatable = (abfd->flags & (EXEC_P | DYNAMIC)) == 0;\n-\n-  eh_addr_size = bfd_arch_bits_per_address (abfd) / 8;\n-\n-  if (bfd_big_endian (abfd))\n-    byte_get = byte_get_big_endian;\n-  else if (bfd_little_endian (abfd))\n-    byte_get = byte_get_little_endian;\n-  else\n-    /* PR 17512: file: objdump-s-endless-loop.tekhex.  */\n+  /* The byte_get pointer should have been set at the start of dump_bfd().  */\n+  if (byte_get == NULL)\n     {\n       warn (_(\"File %s does not contain any dwarf debug information\\n\"),\n \t    bfd_get_filename (abfd));\n       return;\n     }\n \n+  is_relocatable = (abfd->flags & (EXEC_P | DYNAMIC)) == 0;\n+\n+  eh_addr_size = bfd_arch_bits_per_address (abfd) / 8;\n+\n   switch (bfd_get_arch (abfd))\n     {\n     case bfd_arch_i386:\n@@ -2946,21 +2960,7 @@ dump_dwarf (bfd *abfd)\n       break;\n     }\n \n-  have_separates = load_separate_debug_files (abfd, bfd_get_filename (abfd));\n-\n   bfd_map_over_sections (abfd, dump_dwarf_section, NULL);\n-\n-  if (have_separates)\n-    {\n-      separate_info * i;\n-\n-      for (i = first_separate_info; i != NULL; i = i->next)\n-\tbfd_map_over_sections (i->handle, dump_dwarf_section, NULL);\n-\n-      /* The file handles are closed by the call to free_debug_memory() below.  */\n-    }\n-\n-  free_debug_memory ();\n }\n \f\n /* Read ABFD's stabs section STABSECT_NAME, and return a pointer to\n@@ -3768,8 +3768,38 @@ adjust_addresses (bfd *abfd ATTRIBUTE_UNUSED,\n /* Dump selected contents of ABFD.  */\n \n static void\n-dump_bfd (bfd *abfd)\n+dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n {\n+  if (bfd_big_endian (abfd))\n+    byte_get = byte_get_big_endian;\n+  else if (bfd_little_endian (abfd))\n+    byte_get = byte_get_little_endian;\n+  else\n+    byte_get = NULL;\n+\n+  /* Load any separate debug information files.\n+     We do this now and without checking do_follow_links because separate\n+     debug info files may contain symbol tables that we will need when\n+     displaying information about the main file.  Any memory allocated by\n+     load_separate_debug_files will be released when we call\n+     free_debug_memory below.\n+     \n+     The test on is_mainfile is there because the chain of separate debug\n+     info files is a global variable shared by all invocations of dump_bfd.  */\n+  if (is_mainfile)\n+    {\n+      load_separate_debug_files (abfd, bfd_get_filename (abfd));\n+\n+      /* If asked to do so, recursively dump the separate files.  */\n+      if (do_follow_links)\n+\t{\n+\t  separate_info * i;\n+\n+\t  for (i = first_separate_info; i != NULL; i = i->next)\n+\t    dump_bfd (i->handle, FALSE);\n+\t}\n+    }\n+\n   /* If we are adjusting section VMA's, change them all now.  Changing\n      the BFD information is a hack.  However, we must do it, or\n      bfd_find_nearest_line will not do the right thing.  */\n@@ -3799,14 +3829,48 @@ dump_bfd (bfd *abfd)\n       || disassemble\n       || dump_debugging\n       || dump_dwarf_section_info)\n-    syms = slurp_symtab (abfd);\n+    {\n+      syms = slurp_symtab (abfd);\n+\n+      /* If following links, load any symbol tables from the linked files as well.  */\n+      if (do_follow_links && is_mainfile)\n+\t{\n+\t  separate_info * i;\n+\n+\t  for (i = first_separate_info; i != NULL; i = i->next)\n+\t    {\n+\t      asymbol **  extra_syms;\n+\t      long        old_symcount = symcount;\n+\t      \n+\t      extra_syms = slurp_symtab (i->handle);\n+\n+\t      if (extra_syms)\n+\t\t{\n+\t\t  if (old_symcount == 0)\n+\t\t    {\n+\t\t      syms = extra_syms;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      syms = xrealloc (syms, (symcount + old_symcount) * sizeof (asymbol *));\n+\t\t      memcpy (syms + old_symcount,\n+\t\t\t      extra_syms,\n+\t\t\t      symcount * sizeof (asymbol *));\n+\t\t    }\n+\t\t}\n+\n+\t      symcount += old_symcount;\n+\t    }\n+\t}\n+    }\n \n   if (dump_section_headers)\n     dump_headers (abfd);\n \n   if (dump_dynamic_symtab || dump_dynamic_reloc_info\n       || (disassemble && bfd_get_dynamic_symtab_upper_bound (abfd) > 0))\n     dynsyms = slurp_dynamic_symtab (abfd);\n+\n   if (disassemble)\n     {\n       synthcount = bfd_get_synthetic_symtab (abfd, symcount, syms,\n@@ -3880,6 +3944,9 @@ dump_bfd (bfd *abfd)\n   symcount = 0;\n   dynsymcount = 0;\n   synthcount = 0;\n+\n+  if (is_mainfile)\n+    free_debug_memory ();\n }\n \n static void\n@@ -3889,7 +3956,7 @@ display_object_bfd (bfd *abfd)\n \n   if (bfd_check_format_matches (abfd, bfd_object, &matching))\n     {\n-      dump_bfd (abfd);\n+      dump_bfd (abfd, TRUE);\n       return;\n     }\n \n@@ -3909,7 +3976,7 @@ display_object_bfd (bfd *abfd)\n \n   if (bfd_check_format_matches (abfd, bfd_core, &matching))\n     {\n-      dump_bfd (abfd);\n+      dump_bfd (abfd, TRUE);\n       return;\n     }\n "
    },
    {
      "sha": "b51500ddd27d4c44e622b2ae4954740d03010dbe",
      "filename": "binutils/testsuite/binutils-all/debuglink.s",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/debuglink.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/debuglink.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/debuglink.s?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -64,4 +64,3 @@ debugS:\n \t;# will be started.\n \t.balign\t2, 0\n debugE:\n-"
    },
    {
      "sha": "7d8db73592f0c7f3947ce504573419b759f54e46",
      "filename": "binutils/testsuite/binutils-all/linkdebug.s",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/linkdebug.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/linkdebug.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/linkdebug.s?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -51,4 +51,3 @@ string3:\n \t.asciz  \"string-4\"\n \t.balign\t2\n string_end:\n-\t"
    },
    {
      "sha": "539a0875cfedb3e6adb331f6e810691726ac93e7",
      "filename": "binutils/testsuite/binutils-all/objdump.WK2",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.WK2",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.WK2",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.WK2?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -1,5 +1,11 @@\n #...\n .*debuglink.o: Found separate debug info file:.*linkdebug.debug\n+#...\n+Contents of the .debug_str section \\(loaded from .*linkdebug.debug\\):\n+\n+  0x00000000 73747269 6e672d33 00737472 696e672d string-3.string-\n+  0x00000010 3400                                4.\n+\n #...\n Contents of the .debug_str section \\(loaded from .*debuglink.o\\):\n \n@@ -17,9 +23,4 @@ Contents of the .debug_info section \\(loaded from .*debuglink.o\\):\n     <c>   DW_AT_name        : \\(indirect string, offset: 0x0\\): string-1\n  <0><10>: Abbrev Number: 2 \\(DW_TAG_subprogram\\)\n     <11>   DW_AT_name        : \\(alt indirect string, offset: 0x0\\) string-3\n-\n-Contents of the .debug_str section \\(loaded from .*linkdebug.debug\\):\n-\n-  0x00000000 73747269 6e672d33 00737472 696e672d string-3.string-\n-  0x00000010 3400                                4.\n-\n+#pass"
    },
    {
      "sha": "399cf5264e4fe5be0709d346e2c06f51e0f6bd69",
      "filename": "binutils/testsuite/binutils-all/objdump.WK3",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.WK3",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.WK3",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.WK3?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -0,0 +1,17 @@\n+#...\n+.*debuglink.o: Found separate debug info file:.*linkdebug.debug\n+#...\n+.*linkdebug.debug:.*\n+#...\n+ .* .debug_abbrev .*\n+ .* .debug_str .*\n+#...\n+.*debuglink.o:.*\n+#...\n+ .* .gnu_debuglink .*\n+ .* .gnu_debugaltlink .*\n+ .* .debug_str .*\n+ .* .debug_info .*\n+#...\n+ .* .debug_line .*\n+#pass"
    },
    {
      "sha": "81a061f70c1f8d9131aa570a86a4f2804400f761",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -623,12 +623,12 @@ if { [is_elf_format] } then {\n # Very similar to proc test_build_id_debuglink except this time we\n # display some of the contents of the separate debug info file.\n \n-proc test_follow_debuglink {} {\n+proc test_follow_debuglink { options dumpfile } {\n     global srcdir\n     global subdir\n     global OBJDUMP\n     \n-    set test \"follow-debuglink\"\n+    set test \"follow-debuglink ($options)\"\n \n     if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n \tfail \"$test (reason: assemble first source file)\"\n@@ -647,13 +647,13 @@ proc test_follow_debuglink {} {\n \tset tempfile [remote_download host tmpdir/debuglink.o]\n     }\n     \n-    set got [remote_exec host \"$OBJDUMP --dwarf=follow-links --dwarf=info --dwarf=str $tempfile\" \"\" \"/dev/null\" \"tmpdir/objdump.out\"]\n+    set got [remote_exec host \"$OBJDUMP $options $tempfile\" \"\" \"/dev/null\" \"tmpdir/objdump.out\"]\n     if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n \tfail \"$test (reason: unexpected error output from objdump)\"\n \treturn\n     }\n \n-    if { [regexp_diff tmpdir/objdump.out $srcdir/$subdir/objdump.WK2] } then {\n+    if { [regexp_diff tmpdir/objdump.out $srcdir/$subdir/$dumpfile] } then {\n \tfail $test\n \tverbose \"output is \\n[file_contents objdump.out]\" 2\n \treturn\n@@ -668,7 +668,8 @@ proc test_follow_debuglink {} {\n }\n \n if {[is_elf_format]} then {\n-    test_follow_debuglink\n+    test_follow_debuglink \"--dwarf=follow-links --dwarf=info --dwarf=str\" objdump.WK2\n+    test_follow_debuglink \"--dwarf=follow-links --headers --wide\" objdump.WK3\n }\n \n # Options which are not tested: -a -D -R -T -x -l --stabs"
    },
    {
      "sha": "0d9a42fba8332777f3509d850c660c9dd9893058",
      "filename": "binutils/testsuite/binutils-all/readelf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/readelf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/readelf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.exp?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -489,7 +489,7 @@ if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n \t    set tempfile2 [remote_download host tmpdir/linkdebug.debug]\n \t}\n \n-\treadelf_test {-wKis} $tempfile objdump.WK2  {}\n+\treadelf_test {-wKis} $tempfile readelf.wKis  {}\n     }\n }\n "
    },
    {
      "sha": "5c7c0b25a5ef74917094b1a9642be9c82dab7a1d",
      "filename": "binutils/testsuite/binutils-all/readelf.wKis",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/readelf.wKis",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39f0547e554df96608dd041d2a7b3c72882fd515/binutils/testsuite/binutils-all/readelf.wKis",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.wKis?ref=39f0547e554df96608dd041d2a7b3c72882fd515",
      "patch": "@@ -0,0 +1,25 @@\n+#...\n+.*debuglink.o: Found separate debug info file:.*linkdebug.debug\n+#...\n+Contents of the .debug_str section \\(loaded from .*debuglink.o\\):\n+\n+  0x00000000 73747269 6e672d31 00737472 696e672d string-1.string-\n+  0x00000010 3200                                2.\n+#...\n+Contents of the .debug_info section \\(loaded from .*debuglink.o\\):\n+\n+  Compilation Unit @ offset 0x0:\n+   Length:        0x12 \\(32-bit\\)\n+   Version:       4\n+   Abbrev Offset: 0x0\n+   Pointer Size:  4\n+ <0><b>: Abbrev Number: 1 \\(DW_TAG_compile_unit\\)\n+    <c>   DW_AT_name        : \\(indirect string, offset: 0x0\\): string-1\n+ <0><10>: Abbrev Number: 2 \\(DW_TAG_subprogram\\)\n+    <11>   DW_AT_name        : \\(alt indirect string, offset: 0x0\\) string-3\n+#...\n+Contents of the .debug_str section \\(loaded from .*linkdebug.debug\\):\n+\n+  0x00000000 73747269 6e672d33 00737472 696e672d string-3.string-\n+  0x00000010 3400                                4.\n+#pass"
    }
  ]
}