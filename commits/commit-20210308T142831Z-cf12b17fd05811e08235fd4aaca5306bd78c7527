{
  "sha": "cf12b17fd05811e08235fd4aaca5306bd78c7527",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2YxMmIxN2ZkMDU4MTFlMDgyMzVmZDRhYWNhNTMwNmJkNzhjNzUyNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:31Z"
    },
    "message": "Implement OpenCL ternary conditional operator\n\nThis implements the ?: ternary conditional operator for OpenCL.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* opencl-lang.c (opencl_ternop_cond_operation::evaluate): New\n\tmethod.\n\t* c-exp.h (class opencl_ternop_cond_operation): New.",
    "tree": {
      "sha": "b1266eb5299ea2aa2f223e8bdabbb35162f877ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b1266eb5299ea2aa2f223e8bdabbb35162f877ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cf12b17fd05811e08235fd4aaca5306bd78c7527",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf12b17fd05811e08235fd4aaca5306bd78c7527",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cf12b17fd05811e08235fd4aaca5306bd78c7527",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf12b17fd05811e08235fd4aaca5306bd78c7527/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/944fd3b8126f27569a6a3552b3457ba8a8cc3f87"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 107,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ef586ae6a7f5edbedf1208b03632edf424e10a8f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cf12b17fd05811e08235fd4aaca5306bd78c7527",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* opencl-lang.c (opencl_ternop_cond_operation::evaluate): New\n+\tmethod.\n+\t* c-exp.h (class opencl_ternop_cond_operation): New.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* opencl-lang.c (opencl_logical_binop_operation::evaluate): New"
    },
    {
      "sha": "0ce2bd6eb221dbee5c345eb59f3f77b326903f3f",
      "filename": "gdb/c-exp.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/c-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/c-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.h?ref=cf12b17fd05811e08235fd4aaca5306bd78c7527",
      "patch": "@@ -203,6 +203,22 @@ class opencl_logical_binop_operation\n   { return std::get<0> (m_storage); }\n };\n \n+/* The ?: ternary operator for OpenCL.  */\n+class opencl_ternop_cond_operation\n+  : public tuple_holding_operation<operation_up, operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return TERNOP_COND; }\n+};\n+\n }/* namespace expr */\n \n #endif /* C_EXP_H */"
    },
    {
      "sha": "c5150953022cab6efc05353cc6e3eda4db40c17a",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf12b17fd05811e08235fd4aaca5306bd78c7527/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=cf12b17fd05811e08235fd4aaca5306bd78c7527",
      "patch": "@@ -1032,6 +1032,91 @@ opencl_logical_binop_operation::evaluate (struct type *expect_type,\n     }\n }\n \n+value *\n+opencl_ternop_cond_operation::evaluate (struct type *expect_type,\n+\t\t\t\t\tstruct expression *exp,\n+\t\t\t\t\tenum noside noside)\n+{\n+  value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+  struct type *type1 = check_typedef (value_type (arg1));\n+  if (type1->code () == TYPE_CODE_ARRAY && type1->is_vector ())\n+    {\n+      struct value *arg2, *arg3, *tmp, *ret;\n+      struct type *eltype2, *type2, *type3, *eltype3;\n+      int t2_is_vec, t3_is_vec, i;\n+      LONGEST lowb1, lowb2, lowb3, highb1, highb2, highb3;\n+\n+      arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+      arg3 = std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+      type2 = check_typedef (value_type (arg2));\n+      type3 = check_typedef (value_type (arg3));\n+      t2_is_vec\n+\t= type2->code () == TYPE_CODE_ARRAY && type2->is_vector ();\n+      t3_is_vec\n+\t= type3->code () == TYPE_CODE_ARRAY && type3->is_vector ();\n+\n+      /* Widen the scalar operand to a vector if necessary.  */\n+      if (t2_is_vec || !t3_is_vec)\n+\t{\n+\t  arg3 = opencl_value_cast (type2, arg3);\n+\t  type3 = value_type (arg3);\n+\t}\n+      else if (!t2_is_vec || t3_is_vec)\n+\t{\n+\t  arg2 = opencl_value_cast (type3, arg2);\n+\t  type2 = value_type (arg2);\n+\t}\n+      else if (!t2_is_vec || !t3_is_vec)\n+\t{\n+\t  /* Throw an error if arg2 or arg3 aren't vectors.  */\n+\t  error (_(\"\\\n+Cannot perform conditional operation on incompatible types\"));\n+\t}\n+\n+      eltype2 = check_typedef (TYPE_TARGET_TYPE (type2));\n+      eltype3 = check_typedef (TYPE_TARGET_TYPE (type3));\n+\n+      if (!get_array_bounds (type1, &lowb1, &highb1)\n+\t  || !get_array_bounds (type2, &lowb2, &highb2)\n+\t  || !get_array_bounds (type3, &lowb3, &highb3))\n+\terror (_(\"Could not determine the vector bounds\"));\n+\n+      /* Throw an error if the types of arg2 or arg3 are incompatible.  */\n+      if (eltype2->code () != eltype3->code ()\n+\t  || TYPE_LENGTH (eltype2) != TYPE_LENGTH (eltype3)\n+\t  || eltype2->is_unsigned () != eltype3->is_unsigned ()\n+\t  || lowb2 != lowb3 || highb2 != highb3)\n+\terror (_(\"\\\n+Cannot perform operation on vectors with different types\"));\n+\n+      /* Throw an error if the sizes of arg1 and arg2/arg3 differ.  */\n+      if (lowb1 != lowb2 || lowb1 != lowb3\n+\t  || highb1 != highb2 || highb1 != highb3)\n+\terror (_(\"\\\n+Cannot perform conditional operation on vectors with different sizes\"));\n+\n+      ret = allocate_value (type2);\n+\n+      for (i = 0; i < highb1 - lowb1 + 1; i++)\n+\t{\n+\t  tmp = value_logical_not (value_subscript (arg1, i)) ?\n+\t    value_subscript (arg3, i) : value_subscript (arg2, i);\n+\t  memcpy (value_contents_writeable (ret) +\n+\t\t  i * TYPE_LENGTH (eltype2), value_contents_all (tmp),\n+\t\t  TYPE_LENGTH (eltype2));\n+\t}\n+\n+      return ret;\n+    }\n+  else\n+    {\n+      if (value_logical_not (arg1))\n+\treturn std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+      else\n+\treturn std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+    }\n+}\n+\n } /* namespace expr */\n \n const struct exp_descriptor exp_descriptor_opencl ="
    }
  ]
}