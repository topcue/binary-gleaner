{
  "sha": "9a24a2763daa773328a788988048a7b3f344a548",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWEyNGEyNzYzZGFhNzczMzI4YTc4ODk4ODA0OGE3YjNmMzQ0YTU0OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-25T06:00:53Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-25T14:44:44Z"
    },
    "message": "SORT_BY_INIT_PRIORITY\n\nI was looking at the implementation of this script keyword today and\ncouldn't remember why we do what we do in get_init_priority, because\nthe comments explain how the init_priority is encoded but don't say\nwhy it is necessary to extract the priority and sort on that.  So\nafter figuring out why (again), I wrote some more comments.\n\nThen I simplified get_init_priority a little, adding some sanity\nchecking on the strtoul result.  This actually makes get_init_priority\nsupport sorting by numerical suffix more generally, but I figure this\nfeature would be better as a new keyword (without the .ctors/.dtors\nspecial case), so haven't documented the extension.\n\n\t* ld.texi (SORT_BY_ALIGNMENT): Reword slightly.\n\t(SORT_BY_INIT_PRIORITY): Elucidate.\n\t* ldlang.c: Include limits.h.\n\t(get_init_priority): Comment.  Change param to a section,\n\treturn an int.  Sanity check priority digits.  Support sorting\n\tmore sections with trailing digits.  Return -1 on error.\n\t(compare_section): Adjust.",
    "tree": {
      "sha": "7986f994def57ac9cd6296cbef133128c71aed05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7986f994def57ac9cd6296cbef133128c71aed05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a24a2763daa773328a788988048a7b3f344a548",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a24a2763daa773328a788988048a7b3f344a548",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a24a2763daa773328a788988048a7b3f344a548",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a24a2763daa773328a788988048a7b3f344a548/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6ba2ed48c8cb591c1ccac172be7f895f59080cfa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ba2ed48c8cb591c1ccac172be7f895f59080cfa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6ba2ed48c8cb591c1ccac172be7f895f59080cfa"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 60,
    "deletions": 35
  },
  "files": [
    {
      "sha": "c90a587b3ad0ee845b872c6337afb2acd972b552",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a24a2763daa773328a788988048a7b3f344a548/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a24a2763daa773328a788988048a7b3f344a548/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=9a24a2763daa773328a788988048a7b3f344a548",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* ld.texi (SORT_BY_ALIGNMENT): Reword slightly.\n+\t(SORT_BY_INIT_PRIORITY): Elucidate.\n+\t* ldlang.c: Include limits.h.\n+\t(get_init_priority): Comment.  Change param to a section,\n+\treturn an int.  Sanity check priority digits.  Support sorting\n+\tmore sections with trailing digits.  Return -1 on error.\n+\t(compare_section): Adjust.\n+\n 2019-09-25  Nick Clifton  <nickc@redhat.com>\n \n \t* emultempl/avrelf.em (_before_allocation): Silence build warning"
    },
    {
      "sha": "95fa6a03485560aa36ba872cefed252e092e3d9e",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a24a2763daa773328a788988048a7b3f344a548/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a24a2763daa773328a788988048a7b3f344a548/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=9a24a2763daa773328a788988048a7b3f344a548",
      "patch": "@@ -4630,17 +4630,20 @@ pattern in parentheses (e.g., @code{SORT_BY_NAME(.text*)}).  When the\n into ascending order by name before placing them in the output file.\n \n @cindex SORT_BY_ALIGNMENT\n-@code{SORT_BY_ALIGNMENT} is very similar to @code{SORT_BY_NAME}. The\n-difference is @code{SORT_BY_ALIGNMENT} will sort sections into\n-descending order by alignment before placing them in the output file.\n-Larger alignments are placed before smaller alignments in order to\n-reduce the amount of padding necessary.\n+@code{SORT_BY_ALIGNMENT} is similar to @code{SORT_BY_NAME}.\n+@code{SORT_BY_ALIGNMENT} will sort sections into descending order of\n+alignment before placing them in the output file.  Placing larger\n+alignments before smaller alignments can reduce the amount of padding\n+needed.\n \n @cindex SORT_BY_INIT_PRIORITY\n-@code{SORT_BY_INIT_PRIORITY} is very similar to @code{SORT_BY_NAME}. The\n-difference is @code{SORT_BY_INIT_PRIORITY} will sort sections into\n-ascending order by numerical value of the GCC init_priority attribute\n-encoded in the section name before placing them in the output file.\n+@code{SORT_BY_INIT_PRIORITY} is also similar to @code{SORT_BY_NAME}.\n+@code{SORT_BY_INIT_PRIORITY} will sort sections into ascending\n+numerical order of the GCC init_priority attribute encoded in the\n+section name before placing them in the output file.  In\n+@code{.init_array.NNNNN} and @code{.fini_array.NNNNN}, @code{NNNNN} is\n+the init_priority.  In @code{.ctors.NNNNN} and @code{.dtors.NNNNN},\n+@code{NNNNN} is 65535 minus the init_priority.\n \n @cindex SORT\n @code{SORT} is an alias for @code{SORT_BY_NAME}."
    },
    {
      "sha": "a28e9a045353de8c5df199ed6730cb74f68540c2",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 38,
      "deletions": 26,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a24a2763daa773328a788988048a7b3f344a548/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a24a2763daa773328a788988048a7b3f344a548/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=9a24a2763daa773328a788988048a7b3f344a548",
      "patch": "@@ -19,6 +19,7 @@\n    MA 02110-1301, USA.  */\n \n #include \"sysdep.h\"\n+#include <limits.h>\n #include \"bfd.h\"\n #include \"libiberty.h\"\n #include \"filenames.h\"\n@@ -403,39 +404,50 @@ match_simple_wild (const char *pattern, const char *name)\n /* Return the numerical value of the init_priority attribute from\n    section name NAME.  */\n \n-static unsigned long\n-get_init_priority (const char *name)\n+static int\n+get_init_priority (const asection *sec)\n {\n-  char *end;\n-  unsigned long init_priority;\n+  const char *name = bfd_section_name (sec);\n+  const char *dot;\n \n   /* GCC uses the following section names for the init_priority\n-     attribute with numerical values 101 and 65535 inclusive. A\n+     attribute with numerical values 101 to 65535 inclusive. A\n      lower value means a higher priority.\n \n-     1: .init_array.NNNN/.fini_array.NNNN: Where NNNN is the\n+     1: .init_array.NNNNN/.fini_array.NNNNN: Where NNNNN is the\n \tdecimal numerical value of the init_priority attribute.\n \tThe order of execution in .init_array is forward and\n \t.fini_array is backward.\n-     2: .ctors.NNNN/.dtors.NNNN: Where NNNN is 65535 minus the\n+     2: .ctors.NNNNN/.dtors.NNNNN: Where NNNNN is 65535 minus the\n \tdecimal numerical value of the init_priority attribute.\n \tThe order of execution in .ctors is backward and .dtors\n \tis forward.\n-   */\n-  if (strncmp (name, \".init_array.\", 12) == 0\n-      || strncmp (name, \".fini_array.\", 12) == 0)\n-    {\n-      init_priority = strtoul (name + 12, &end, 10);\n-      return *end ? 0 : init_priority;\n-    }\n-  else if (strncmp (name, \".ctors.\", 7) == 0\n-\t   || strncmp (name, \".dtors.\", 7) == 0)\n-    {\n-      init_priority = strtoul (name + 7, &end, 10);\n-      return *end ? 0 : 65535 - init_priority;\n-    }\n \n-  return 0;\n+     .init_array.NNNNN sections would normally be placed in an output\n+     .init_array section, .fini_array.NNNNN in .fini_array,\n+     .ctors.NNNNN in .ctors, and .dtors.NNNNN in .dtors.  This means\n+     we should sort by increasing number (and could just use\n+     SORT_BY_NAME in scripts).  However if .ctors.NNNNN sections are\n+     being placed in .init_array (which may also contain\n+     .init_array.NNNNN sections) or .dtors.NNNNN sections are being\n+     placed in .fini_array then we need to extract the init_priority\n+     attribute and sort on that.  */\n+  dot = strrchr (name, '.');\n+  if (dot != NULL && ISDIGIT (dot[1]))\n+    {\n+      char *end;\n+      unsigned long init_priority = strtoul (dot + 1, &end, 10);\n+      if (*end == 0)\n+\t{\n+\t  if (dot == name + 6\n+\t      && (strncmp (name, \".ctors\", 6) == 0\n+\t\t  || strncmp (name, \".dtors\", 6) == 0))\n+\t    init_priority = 65535 - init_priority;\n+\t  if (init_priority <= INT_MAX)\n+\t    return init_priority;\n+\t}\n+    }\n+  return -1;\n }\n \n /* Compare sections ASEC and BSEC according to SORT.  */\n@@ -444,19 +456,19 @@ static int\n compare_section (sort_type sort, asection *asec, asection *bsec)\n {\n   int ret;\n-  unsigned long ainit_priority, binit_priority;\n+  int a_priority, b_priority;\n \n   switch (sort)\n     {\n     default:\n       abort ();\n \n     case by_init_priority:\n-      ainit_priority = get_init_priority (bfd_section_name (asec));\n-      binit_priority = get_init_priority (bfd_section_name (bsec));\n-      if (ainit_priority == 0 || binit_priority == 0)\n+      a_priority = get_init_priority (asec);\n+      b_priority = get_init_priority (bsec);\n+      if (a_priority < 0 || b_priority < 0)\n \tgoto sort_by_name;\n-      ret = ainit_priority - binit_priority;\n+      ret = a_priority - b_priority;\n       if (ret)\n \tbreak;\n       else"
    }
  ]
}