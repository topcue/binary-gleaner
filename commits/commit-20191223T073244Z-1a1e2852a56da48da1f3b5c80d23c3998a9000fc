{
  "sha": "1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWExZTI4NTJhNTZkYTQ4ZGExZjNiNWM4MGQyM2MzOTk4YTkwMDBmYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-23T07:32:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-23T07:32:44Z"
    },
    "message": "ubsan: d30v: left shift cannot be represented in type 'long long'\n\n\t* d30v-dis.c (extract_value): Make num param a uint64_t, constify\n\toper.  Use unsigned vars.\n\t(print_insn): Make num var uint64_t.  Constify oper and remove now\n\tunnecessary casts on extract_value calls.\n\t(print_insn_d30v): Use unsigned vars.  Adjust printf formats.",
    "tree": {
      "sha": "530ce9e92980515d3df25d158d4883885bc74409",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/530ce9e92980515d3df25d158d4883885bc74409"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1e2852a56da48da1f3b5c80d23c3998a9000fc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd30bcef4a685ae4a67f8b4a793af0cf7230b9fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd30bcef4a685ae4a67f8b4a793af0cf7230b9fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd30bcef4a685ae4a67f8b4a793af0cf7230b9fc"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 25,
    "deletions": 17
  },
  "files": [
    {
      "sha": "1c5592ae26df5f583710ebe08d1d959479929f18",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a1e2852a56da48da1f3b5c80d23c3998a9000fc/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a1e2852a56da48da1f3b5c80d23c3998a9000fc/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* d30v-dis.c (extract_value): Make num param a uint64_t, constify\n+\toper.  Use unsigned vars.\n+\t(print_insn): Make num var uint64_t.  Constify oper and remove now\n+\tunnecessary casts on extract_value calls.\n+\t(print_insn_d30v): Use unsigned vars.  Adjust printf formats.\n+\n 2019-12-23  Alan Modra  <amodra@gmail.com>\n \n \t* wasm32-dis.c (wasm_read_leb128): Don't allow oversize shifts."
    },
    {
      "sha": "8d96c28e6d987b19f501ea96075660c8e5e5f1a9",
      "filename": "opcodes/d30v-dis.c",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a1e2852a56da48da1f3b5c80d23c3998a9000fc/opcodes/d30v-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a1e2852a56da48da1f3b5c80d23c3998a9000fc/opcodes/d30v-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/d30v-dis.c?ref=1a1e2852a56da48da1f3b5c80d23c3998a9000fc",
      "patch": "@@ -90,11 +90,11 @@ lookup_opcode (struct d30v_insn *insn, long num, int is_long)\n }\n \n static int\n-extract_value (long long num, struct d30v_operand *oper, int is_long)\n+extract_value (uint64_t num, const struct d30v_operand *oper, int is_long)\n {\n-  int val;\n+  unsigned int val;\n   int shift = 12 - oper->position;\n-  int mask = (0xFFFFFFFF >> (32 - oper->bits));\n+  unsigned int mask = (0xFFFFFFFF >> (32 - oper->bits));\n \n   if (is_long)\n     {\n@@ -118,13 +118,13 @@ extract_value (long long num, struct d30v_operand *oper, int is_long)\n static void\n print_insn (struct disassemble_info *info,\n \t    bfd_vma memaddr,\n-\t    long long num,\n+\t    uint64_t num,\n \t    struct d30v_insn *insn,\n \t    int is_long,\n \t    int show_ext)\n {\n   int val, opnum, need_comma = 0;\n-  struct d30v_operand *oper;\n+  const struct d30v_operand *oper;\n   int i, match, need_paren = 0, found_control = 0;\n   unsigned int opind = 0;\n \n@@ -136,7 +136,7 @@ print_insn (struct disassemble_info *info,\n       opind++;\n       val =\n \textract_value (num,\n-\t\t       (struct d30v_operand *) &d30v_operand_table[insn->form->operands[0]],\n+\t\t       &d30v_operand_table[insn->form->operands[0]],\n \t\t       is_long);\n       (*info->fprintf_func) (info->stream, \"%s\", d30v_cc_names[val]);\n     }\n@@ -160,7 +160,7 @@ print_insn (struct disassemble_info *info,\n     {\n       int bits;\n \n-      oper = (struct d30v_operand *) &d30v_operand_table[opnum];\n+      oper = &d30v_operand_table[opnum];\n       bits = oper->bits;\n       if (oper->flags & OPERAND_SHIFT)\n \tbits += 3;\n@@ -210,8 +210,8 @@ print_insn (struct disassemble_info *info,\n \t  match = 0;\n \t  if (oper->flags & OPERAND_CONTROL)\n \t    {\n-\t      struct d30v_operand *oper3 =\n-\t\t(struct d30v_operand *) &d30v_operand_table[insn->form->operands[2]];\n+\t      const struct d30v_operand *oper3\n+\t\t= &d30v_operand_table[insn->form->operands[2]];\n \t      int id = extract_value (num, oper3, is_long);\n \n \t      found_control = 1;\n@@ -330,9 +330,9 @@ print_insn_d30v (bfd_vma memaddr, struct disassemble_info *info)\n {\n   int status, result;\n   bfd_byte buffer[12];\n-  unsigned long in1, in2;\n+  uint32_t in1, in2;\n   struct d30v_insn insn;\n-  long long num;\n+  uint64_t num;\n \n   insn.form = NULL;\n \n@@ -353,9 +353,9 @@ print_insn_d30v (bfd_vma memaddr, struct disassemble_info *info)\n     {\n       info->bytes_per_line = 8;\n       if (!(result = lookup_opcode (&insn, in1, 0)))\n-\t(*info->fprintf_func) (info->stream, \".long\\t0x%lx\", in1);\n+\t(*info->fprintf_func) (info->stream, \".long\\t0x%x\", in1);\n       else\n-\tprint_insn (info, memaddr, (long long) in1, &insn, 0, result);\n+\tprint_insn (info, memaddr, (uint64_t) in1, &insn, 0, result);\n       return 4;\n     }\n   in2 = bfd_getb32 (buffer);\n@@ -365,17 +365,17 @@ print_insn_d30v (bfd_vma memaddr, struct disassemble_info *info)\n       /* LONG instruction.  */\n       if (!(result = lookup_opcode (&insn, in1, 1)))\n \t{\n-\t  (*info->fprintf_func) (info->stream, \".long\\t0x%lx,0x%lx\", in1, in2);\n+\t  (*info->fprintf_func) (info->stream, \".long\\t0x%x,0x%x\", in1, in2);\n \t  return 8;\n \t}\n-      num = (long long) in1 << 32 | in2;\n+      num = (uint64_t) in1 << 32 | in2;\n       print_insn (info, memaddr, num, &insn, 1, result);\n     }\n   else\n     {\n       num = in1;\n       if (!(result = lookup_opcode (&insn, in1, 0)))\n-\t(*info->fprintf_func) (info->stream, \".long\\t0x%lx\", in1);\n+\t(*info->fprintf_func) (info->stream, \".long\\t0x%x\", in1);\n       else\n \tprint_insn (info, memaddr, num, &insn, 0, result);\n \n@@ -396,7 +396,7 @@ print_insn_d30v (bfd_vma memaddr, struct disassemble_info *info)\n       insn.form = NULL;\n       num = in2;\n       if (!(result = lookup_opcode (&insn, in2, 0)))\n-\t(*info->fprintf_func) (info->stream, \".long\\t0x%lx\", in2);\n+\t(*info->fprintf_func) (info->stream, \".long\\t0x%x\", in2);\n       else\n \tprint_insn (info, memaddr, num, &insn, 0, result);\n     }"
    }
  ]
}