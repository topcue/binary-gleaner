{
  "sha": "39549caef4ae5e5adb5a52518d195f367315e9e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk1NDljYWVmNGFlNWU1YWRiNWE1MjUxOGQxOTVmMzY3MzE1ZTllOQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-05-22T00:26:24Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-05-22T00:27:05Z"
    },
    "message": "sim/d10v: Use offsetof in a static assertion about structure layout.\n\nclang 11 fails to compile the static assertion as it cannot compute\nthe pointer value at a compile time:\n\ngdb/sim/d10v/interp.c:1149:37: error: static_assert expression is not an integral constant expression\n  static_assert ((uintptr_t) &State == (uintptr_t) &State.regs,\n                 ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n\nInstead, assert that the offset of State.regs is 0.\n\nsim/d10v/ChangeLog:\n\n\t* interp.c (sim_create_inferior): Use offsetof in static\n\tassertion.",
    "tree": {
      "sha": "caa49cda7cb4a7f544a3d4dabb0d53eaf7ab3ed3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/caa49cda7cb4a7f544a3d4dabb0d53eaf7ab3ed3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39549caef4ae5e5adb5a52518d195f367315e9e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39549caef4ae5e5adb5a52518d195f367315e9e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39549caef4ae5e5adb5a52518d195f367315e9e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39549caef4ae5e5adb5a52518d195f367315e9e9/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "33d93379d258dfb2bebdd67e32e00c9667c486e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33d93379d258dfb2bebdd67e32e00c9667c486e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/33d93379d258dfb2bebdd67e32e00c9667c486e2"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "e633352c58d397b4d15147f8c9fb61e0c3c7efa9",
      "filename": "sim/d10v/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39549caef4ae5e5adb5a52518d195f367315e9e9/sim/d10v/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39549caef4ae5e5adb5a52518d195f367315e9e9/sim/d10v/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/ChangeLog?ref=39549caef4ae5e5adb5a52518d195f367315e9e9",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-22  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* interp.c (sim_create_inferior): Use offsetof in static\n+\tassertion.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (SIM_HAVE_COMMON_SIM_STATE): Delete."
    },
    {
      "sha": "b587cc18654f624ddb67de5cf25cba3bf5b6c84f",
      "filename": "sim/d10v/interp.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39549caef4ae5e5adb5a52518d195f367315e9e9/sim/d10v/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39549caef4ae5e5adb5a52518d195f367315e9e9/sim/d10v/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/d10v/interp.c?ref=39549caef4ae5e5adb5a52518d195f367315e9e9",
      "patch": "@@ -1146,8 +1146,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n   bfd_vma start_address;\n \n   /* Make sure we have the right structure for the following memset.  */\n-  static_assert ((uintptr_t) &State == (uintptr_t) &State.regs,\n-\t\t \"&State != &State.regs\");\n+  static_assert (offsetof (struct _state, regs) == 0,\n+\t\t \"State.regs is not at offset 0\");\n \n   /* Reset state from the regs field until the mem field.  */\n   memset (&State, 0, (uintptr_t) &State.mem - (uintptr_t) &State.regs);"
    }
  ]
}