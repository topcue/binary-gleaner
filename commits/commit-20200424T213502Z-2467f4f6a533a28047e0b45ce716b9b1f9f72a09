{
  "sha": "2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjQ2N2Y0ZjZhNTMzYTI4MDQ3ZTBiNDVjZTcxNmI5YjFmOWY3MmEwOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-24T21:35:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T21:35:02Z"
    },
    "message": "Introduce new add_psymbol_to_list overload\n\nThis adds a new overload of add_psymbol_to_list.  This one takes an\nalready constructed psymbol and adds it to the bcache and the\nappropriate list.\n\nThis seemed cleaner than continuing to add parameters to the existing\nadd_psymbol_to_list, and is more in line with how full symbols are\nconstructed.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tom@tromey.com>\n\n\t* psymtab.c (add_psymbol_to_bcache): Simplify calling convention.\n\t(add_psymbol_to_list): New overload.  Make old overload call new\n\tone.\n\t* psympriv.h (add_psymbol_to_list): New overload.",
    "tree": {
      "sha": "37cdfd4694fccb2788dcfd8096264b0fca1bdf1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/37cdfd4694fccb2788dcfd8096264b0fca1bdf1b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e61108c92d4bc4021ab89671612308c01b18e15d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e61108c92d4bc4021ab89671612308c01b18e15d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e61108c92d4bc4021ab89671612308c01b18e15d"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 44,
    "deletions": 24
  },
  "files": [
    {
      "sha": "083d4d29eca4e5a8c8766525b1463a38d35cae92",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-24  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.c (add_psymbol_to_bcache): Simplify calling convention.\n+\t(add_psymbol_to_list): New overload.  Make old overload call new\n+\tone.\n+\t* psympriv.h (add_psymbol_to_list): New overload.\n+\n 2020-04-24  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (partial_die_info::read) <case"
    },
    {
      "sha": "6f0307e05b787d762267e7c7e74179e28b21eecf",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
      "patch": "@@ -424,6 +424,14 @@ extern void add_psymbol_to_list (gdb::string_view name,\n \t\t\t\t enum language language,\n \t\t\t\t struct objfile *objfile);\n \n+/* Add a symbol to the partial symbol table of OBJFILE.  The psymbol\n+   must be fully constructed, and the names must be set and intern'd\n+   as appropriate.  */\n+\n+extern void add_psymbol_to_list (const partial_symbol &psym,\n+\t\t\t\t psymbol_placement where,\n+\t\t\t\t struct objfile *objfile);\n+\n /* Initialize storage for partial symbols.  If partial symbol storage\n    has already been initialized, this does nothing.  TOTAL_SYMBOLS is\n    an estimate of how many symbols there will be.  */"
    },
    {
      "sha": "118dc570e7cb60ebd56799e60f2da783d740038e",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 29,
      "deletions": 24,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2467f4f6a533a28047e0b45ce716b9b1f9f72a09/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=2467f4f6a533a28047e0b45ce716b9b1f9f72a09",
      "patch": "@@ -1590,24 +1590,10 @@ psymbol_compare (const void *addr1, const void *addr2, int length)\n    different domain (or address) is possible and correct.  */\n \n static struct partial_symbol *\n-add_psymbol_to_bcache (gdb::string_view name, bool copy_name,\n-\t\t       domain_enum domain,\n-\t\t       enum address_class theclass,\n-\t\t       short section,\n-\t\t       CORE_ADDR coreaddr,\n-\t\t       enum language language, struct objfile *objfile,\n+add_psymbol_to_bcache (const partial_symbol &psymbol,\n+\t\t       struct objfile *objfile,\n \t\t       int *added)\n {\n-  struct partial_symbol psymbol;\n-  memset (&psymbol, 0, sizeof (psymbol));\n-\n-  psymbol.set_unrelocated_address (coreaddr);\n-  psymbol.ginfo.section = section;\n-  psymbol.domain = domain;\n-  psymbol.aclass = theclass;\n-  psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());\n-  psymbol.ginfo.compute_and_set_names (name, copy_name, objfile->per_bfd);\n-\n   /* Stash the partial symbol away in the cache.  */\n   return ((struct partial_symbol *)\n \t  objfile->partial_symtabs->psymbol_cache.insert\n@@ -1628,21 +1614,16 @@ append_psymbol_to_list (std::vector<partial_symbol *> *list,\n /* See psympriv.h.  */\n \n void\n-add_psymbol_to_list (gdb::string_view name, bool copy_name,\n-\t\t     domain_enum domain,\n-\t\t     enum address_class theclass,\n-\t\t     short section,\n+add_psymbol_to_list (const partial_symbol &psymbol,\n \t\t     psymbol_placement where,\n-\t\t     CORE_ADDR coreaddr,\n-\t\t     enum language language, struct objfile *objfile)\n+\t\t     struct objfile *objfile)\n {\n   struct partial_symbol *psym;\n \n   int added;\n \n   /* Stash the partial symbol away in the cache.  */\n-  psym = add_psymbol_to_bcache (name, copy_name, domain, theclass,\n-\t\t\t\tsection, coreaddr, language, objfile, &added);\n+  psym = add_psymbol_to_bcache (psymbol, objfile, &added);\n \n   /* Do not duplicate global partial symbols.  */\n   if (where == psymbol_placement::GLOBAL && !added)\n@@ -1658,6 +1639,30 @@ add_psymbol_to_list (gdb::string_view name, bool copy_name,\n \n /* See psympriv.h.  */\n \n+void\n+add_psymbol_to_list (gdb::string_view name, bool copy_name,\n+\t\t     domain_enum domain,\n+\t\t     enum address_class theclass,\n+\t\t     short section,\n+\t\t     psymbol_placement where,\n+\t\t     CORE_ADDR coreaddr,\n+\t\t     enum language language, struct objfile *objfile)\n+{\n+  struct partial_symbol psymbol;\n+  memset (&psymbol, 0, sizeof (psymbol));\n+\n+  psymbol.set_unrelocated_address (coreaddr);\n+  psymbol.ginfo.section = section;\n+  psymbol.domain = domain;\n+  psymbol.aclass = theclass;\n+  psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());\n+  psymbol.ginfo.compute_and_set_names (name, copy_name, objfile->per_bfd);\n+\n+  add_psymbol_to_list (psymbol, where, objfile);\n+}\n+\n+/* See psympriv.h.  */\n+\n void\n init_psymbol_list (struct objfile *objfile, int total_symbols)\n {"
    }
  ]
}