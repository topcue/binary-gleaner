{
  "sha": "95099889938ef50922779a0db03f277eea8747b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTUwOTk4ODk5MzhlZjUwOTIyNzc5YTBkYjAzZjI3N2VlYTg3NDdiNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-09T10:56:05Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-09T11:08:48Z"
    },
    "message": "PR25645, readelf segfault reading fuzzed alpha-vms binary\n\n\tPR 25645\n\t* readelf.c (dump_ia64_vms_dynamic_fixups): Pass size and nmemb\n\tto get_data rather than multiplying.\n\t(dump_ia64_vms_dynamic_relocs): Likewise.\n\t(process_version_sections): Correct order of size and nmemb args\n\tin get_data call.\n\t(process_mips_specific): Likewise.",
    "tree": {
      "sha": "74ec293db6ce991b5bee0bcb34c484dcbbf5fa74",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/74ec293db6ce991b5bee0bcb34c484dcbbf5fa74"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/95099889938ef50922779a0db03f277eea8747b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95099889938ef50922779a0db03f277eea8747b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/95099889938ef50922779a0db03f277eea8747b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95099889938ef50922779a0db03f277eea8747b5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "865e20278c2665c13946a32ae67f55161b0d56d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/865e20278c2665c13946a32ae67f55161b0d56d7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/865e20278c2665c13946a32ae67f55161b0d56d7"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 22,
    "deletions": 12
  },
  "files": [
    {
      "sha": "05c29397f8373a954d0be937489a19ddd0c5f211",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95099889938ef50922779a0db03f277eea8747b5/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95099889938ef50922779a0db03f277eea8747b5/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=95099889938ef50922779a0db03f277eea8747b5",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-09  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25645\n+\t* readelf.c (dump_ia64_vms_dynamic_fixups): Pass size and nmemb\n+\tto get_data rather than multiplying.\n+\t(dump_ia64_vms_dynamic_relocs): Likewise.\n+\t(process_version_sections): Correct order of size and nmemb args\n+\tin get_data call.\n+\t(process_mips_specific): Likewise.\n+\n 2020-03-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* readelf.c (get_dynamic_data): Replace \"memory chekers\" with"
    },
    {
      "sha": "260ea33ba4c956b0e78c6516da588773c764d7f1",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95099889938ef50922779a0db03f277eea8747b5/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95099889938ef50922779a0db03f277eea8747b5/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=95099889938ef50922779a0db03f277eea8747b5",
      "patch": "@@ -7091,7 +7091,7 @@ dump_ia64_vms_dynamic_fixups (Filedata *                  filedata,\n   const char * lib_name;\n \n   imfs = get_data (NULL, filedata, dynamic_addr + fixup->fixup_rela_off,\n-\t\t   1, fixup->fixup_rela_cnt * sizeof (*imfs),\n+\t\t   sizeof (*imfs), fixup->fixup_rela_cnt,\n \t\t   _(\"dynamic section image fixups\"));\n   if (!imfs)\n     return FALSE;\n@@ -7140,7 +7140,7 @@ dump_ia64_vms_dynamic_relocs (Filedata * filedata, struct ia64_vms_dynimgrela *i\n   long i;\n \n   imrs = get_data (NULL, filedata, dynamic_addr + imgrela->img_rela_off,\n-\t\t   1, imgrela->img_rela_cnt * sizeof (*imrs),\n+\t\t   sizeof (*imrs), imgrela->img_rela_cnt,\n \t\t   _(\"dynamic section image relocations\"));\n   if (!imrs)\n     return FALSE;\n@@ -10898,9 +10898,9 @@ process_version_sections (Filedata * filedata)\n \t    off = offset_from_vma (filedata,\n \t\t\t\t   version_info[DT_VERSIONTAGIDX (DT_VERSYM)],\n \t\t\t\t   total * sizeof (short));\n-\t    edata = (unsigned char *) get_data (NULL, filedata, off, total,\n-                                                sizeof (short),\n-                                                _(\"version symbol data\"));\n+\t    edata = (unsigned char *) get_data (NULL, filedata, off,\n+\t\t\t\t\t\tsizeof (short), total,\n+\t\t\t\t\t\t_(\"version symbol data\"));\n \t    if (!edata)\n \t      {\n \t\tfree (strtab);\n@@ -16639,9 +16639,9 @@ process_mips_specific (Filedata * filedata)\n       size_t cnt;\n \n       elib = (Elf32_External_Lib *) get_data (NULL, filedata, liblist_offset,\n-                                              liblistno,\n-                                              sizeof (Elf32_External_Lib),\n-                                              _(\"liblist section data\"));\n+\t\t\t\t\t      sizeof (Elf32_External_Lib),\n+\t\t\t\t\t      liblistno,\n+\t\t\t\t\t      _(\"liblist section data\"));\n       if (elib)\n \t{\n \t  printf (ngettext (\"\\nSection '.liblist' contains %lu entry:\\n\",\n@@ -17008,8 +17008,8 @@ process_mips_specific (Filedata * filedata)\n \t  Elf32_External_Conflict * econf32;\n \n \t  econf32 = (Elf32_External_Conflict *)\n-              get_data (NULL, filedata, conflicts_offset, conflictsno,\n-                        sizeof (* econf32), _(\"conflict\"));\n+\t    get_data (NULL, filedata, conflicts_offset,\n+\t\t      sizeof (*econf32), conflictsno, _(\"conflict\"));\n \t  if (!econf32)\n \t    return FALSE;\n \n@@ -17023,8 +17023,8 @@ process_mips_specific (Filedata * filedata)\n \t  Elf64_External_Conflict * econf64;\n \n \t  econf64 = (Elf64_External_Conflict *)\n-              get_data (NULL, filedata, conflicts_offset, conflictsno,\n-                        sizeof (* econf64), _(\"conflict\"));\n+\t    get_data (NULL, filedata, conflicts_offset,\n+\t\t      sizeof (*econf64), conflictsno, _(\"conflict\"));\n \t  if (!econf64)\n \t    return FALSE;\n "
    }
  ]
}