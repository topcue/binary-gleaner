{
  "sha": "8bdc16587e26100282094c8eaa8e83180ba57afd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGJkYzE2NTg3ZTI2MTAwMjgyMDk0YzhlYWE4ZTgzMTgwYmE1N2FmZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-14T13:58:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-01T20:41:49Z"
    },
    "message": "gdb: Add $_cimag and $_creal internal functions\n\nAdd two new internal functions $_cimag and $_creal that extract the\nimaginary and real parts of a complex value.\n\nThese internal functions can take a complex value of any type 'float\ncomplex', 'double complex', or 'long double complex' and return a\nsuitable floating point value 'float', 'double', or 'long double'.\nSo we can now do this:\n\n    (gdb) p z1\n    $1 = 1.5 + 4.5 * I\n    (gdb) p $_cimag (z1)\n    $4 = 4.5\n    (gdb) p $_creal (z1)\n    $4 = 1.5\n\nThe components of a complex value are not strictly named types in\nDWARF, as the complex type is itself the base type.  However, once we\nare able to extract the components it makes sense to be able to ask\nwhat the type of these components is and get a sensible answer back,\nrather than the error we would currently get.  Currently GDB says:\n\n    (gdb) ptype z1\n    type = complex double\n    (gdb) p $_cimag (z1)\n    $4 = 4.5\n    (gdb) ptype $\n    type = <invalid type code 9>\n\nWith the changes in dwarf2read.c, GDB now says:\n\n    (gdb) ptype z1\n    type = complex double\n    (gdb) p $_cimag (z1)\n    $4 = 4.5\n    (gdb) ptype $\n    type = double\n\nWhich seems to make more sense.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new internal functions.\n\t* dwarf2read.c (dwarf2_init_complex_target_type): New function.\n\t(read_base_type): Use dwarf2_init_complex_target_type.\n\t* value.c (creal_internal_fn): New function.\n\t(cimag_internal_fn): New function.\n\t(_initialize_values): Register new internal functions.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Convenience Funs): Document '$_creal' and\n\t'$_cimag'.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/complex-parts.c: New file.\n\t* gdb.base/complex-parts.exp: New file.",
    "tree": {
      "sha": "5e18b77acd219a53d4ac482fd56e060d05927964",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5e18b77acd219a53d4ac482fd56e060d05927964"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8bdc16587e26100282094c8eaa8e83180ba57afd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8bdc16587e26100282094c8eaa8e83180ba57afd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8bdc16587e26100282094c8eaa8e83180ba57afd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8bdc16587e26100282094c8eaa8e83180ba57afd/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c29705b71a8ec966478c0dc4712194a95291c6de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c29705b71a8ec966478c0dc4712194a95291c6de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c29705b71a8ec966478c0dc4712194a95291c6de"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 234,
    "deletions": 2
  },
  "files": [
    {
      "sha": "35a9550ecdd440f9f6cd5161c82628306b2aed4e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new internal functions.\n+\t* dwarf2read.c (dwarf2_init_complex_target_type): New function.\n+\t(read_base_type): Use dwarf2_init_complex_target_type.\n+\t* value.c (creal_internal_fn): New function.\n+\t(cimag_internal_fn): New function.\n+\t(_initialize_values): Register new internal functions.\n+\n 2019-04-01  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* infrun.c (stop_all_threads): If debug_infrun, always"
    },
    {
      "sha": "5309a8f923b46a49650bde0bb1ec713d23c3a05c",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -16,6 +16,9 @@\n \n * Support for Pointer Authentication on AArch64 Linux.\n \n+* Two new convernience functions $_cimag and $_creal that extract the\n+  imaginary and real parts respectively from complex numbers.\n+\n * Python API\n \n   ** The gdb.Value type has a new method 'format_string' which returns a\n@@ -24,7 +27,6 @@\n      'array_indexes', 'symbols', 'unions', 'deref_refs', 'actual_objects',\n      'static_members', 'max_elements', 'repeat_threshold', and 'format'.\n \n-\n *** Changes in GDB 8.3\n \n * GDB and GDBserver now support access to additional registers on"
    },
    {
      "sha": "ea5fafdff1a0b15f146a7e1ec0fcd451932564a2",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Convenience Funs): Document '$_creal' and\n+\t'$_cimag'.\n+\n 2019-03-30  Eli Zaretskii  <eliz@gnu.org>\n \n \t* gdb.texinfo (Convenience Vars): Document $_gdb_major and"
    },
    {
      "sha": "f410d026b82afe369c56bc70969afcc61a127c4b",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -11401,6 +11401,17 @@ an enumerated type:\n Visiting node of type NODE_INTEGER\n @end smallexample\n \n+@item $_cimag(@var{value})\n+@itemx $_creal(@var{value})\n+@findex $_cimag@r{, convenience function}\n+@findex $_creal@r{, convenience function}\n+Return the imaginary (@code{$_cimag}) or real (@code{$_creal}) part of\n+the complex number @var{value}.\n+\n+The type of the imaginary or real part depends on the type of the\n+complex number, e.g., using @code{$_cimag} on a @code{float complex}\n+will return an imaginary part of type @code{float}.\n+\n @end table\n \n @value{GDBN} provides the ability to list and get help on"
    },
    {
      "sha": "8881a1e28a83ac21e1cd57f7647bdd1051826e77",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 35,
      "deletions": 1,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -17530,6 +17530,40 @@ dwarf2_init_integer_type (struct dwarf2_cu *cu, struct objfile *objfile,\n   return type;\n }\n \n+/* Initialise and return a floating point type of size BITS suitable for\n+   use as a component of a complex number.  The NAME_HINT is passed through\n+   when initialising the floating point type and is the name of the complex\n+   type.\n+\n+   As DWARF doesn't currently provide an explicit name for the components\n+   of a complex number, but it can be helpful to have these components\n+   named, we try to select a suitable name based on the size of the\n+   component.  */\n+static struct type *\n+dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n+\t\t\t\t struct objfile *objfile,\n+\t\t\t\t int bits, const char *name_hint)\n+{\n+  gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct type *tt = nullptr;\n+\n+  switch (bits)\n+    {\n+    case 32:\n+      tt = builtin_type (gdbarch)->builtin_float;\n+      break;\n+    case 64:\n+      tt = builtin_type (gdbarch)->builtin_double;\n+      break;\n+    case 128:\n+      tt = builtin_type (gdbarch)->builtin_long_double;\n+      break;\n+    }\n+\n+  const char *name = (tt == nullptr) ? nullptr : TYPE_NAME (tt);\n+  return dwarf2_init_float_type (objfile, bits, name, name_hint);\n+}\n+\n /* Find a representation of a given base type and install\n    it in the TYPE field of the die.  */\n \n@@ -17569,7 +17603,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \ttype = init_boolean_type (objfile, bits, 1, name);\n \tbreak;\n       case DW_ATE_complex_float:\n-\ttype = dwarf2_init_float_type (objfile, bits / 2, NULL, name);\n+\ttype = dwarf2_init_complex_target_type (cu, objfile, bits / 2, name);\n \ttype = init_complex_type (objfile, name, type);\n \tbreak;\n       case DW_ATE_decimal_float:"
    },
    {
      "sha": "7d603ad6c1c975da4d9a77053cc13b8b924e1386",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/complex-parts.c: New file.\n+\t* gdb.base/complex-parts.exp: New file.\n+\n 2019-04-01  Tom Tromey  <tromey@adacore.com>\n \n \tPR symtab/23331:"
    },
    {
      "sha": "243caee0695a1cc3b96d6fc3fb89936b1b5ac73a",
      "filename": "gdb/testsuite/gdb.base/complex-parts.c",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/complex-parts.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/complex-parts.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/complex-parts.c?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -0,0 +1,50 @@\n+/* Copyright 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Unlike the other 'complex.c' test, this one uses the \"standard\" header\n+   file to pull in the complex types.  The testing is around printing the\n+   complex numbers, and using the convenience function $_cimag and $_creal\n+   to extract the parts of the complex numbers.  */\n+\n+#include <complex.h>\n+\n+void\n+keep_around (volatile void *ptr)\n+{\n+  asm (\"\" ::: \"memory\");\n+}\n+\n+int\n+main (void)\n+{\n+  double complex z1 = 1.5 + 4.5 * I;\n+  float complex z2 = 2.5 - 5.5 * I;\n+  long double complex z3 = 3.5 + 6.5 * I;\n+\n+  double d1 = 1.5;\n+  float f1 = 2.5;\n+  int i1 = 3;\n+\n+  keep_around (&z1);\n+  keep_around (&z2);\n+  keep_around (&z3);\n+  keep_around (&d1);\n+  keep_around (&f1);\n+  keep_around (&i1);\n+\n+  return 0;\t/* Break Here.  */\n+}"
    },
    {
      "sha": "ce8f4277a8b63930a9ef3a95b0e45589389d65be",
      "filename": "gdb/testsuite/gdb.base/complex-parts.exp",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/complex-parts.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/complex-parts.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/complex-parts.exp?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -0,0 +1,62 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+if { ![runto_main] } then {\n+    fail \"can't run to main\"\n+    return 0\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break Here\"]\n+gdb_continue_to_breakpoint \"breakpt\" \".* Break Here\\\\. .*\"\n+\n+gdb_test \"p z1\" \" = 1.5 \\\\+ 4.5 \\\\* I\"\n+gdb_test \"p z2\" \" = 2.5 \\\\+ -5.5 \\\\* I\"\n+gdb_test \"p z3\" \" = 3.5 \\\\+ 6.5 \\\\* I\"\n+\n+gdb_test \"ptype z1\" \" = complex double\"\n+gdb_test \"ptype z2\" \" = complex float\"\n+gdb_test \"ptype z3\" \" = complex long double\"\n+\n+gdb_test \"p \\$_cimag (z1)\" \" = 4.5\"\n+gdb_test \"ptype \\$\" \" = double\"\n+\n+gdb_test \"p \\$_cimag (z2)\" \" = -5.5\"\n+gdb_test \"ptype \\$\" \" = float\"\n+\n+gdb_test \"p \\$_cimag (z3)\" \" = 6.5\"\n+gdb_test \"ptype \\$\" \" = long double\"\n+\n+gdb_test \"p \\$_creal (z1)\" \" = 1.5\"\n+gdb_test \"ptype \\$\" \" = double\"\n+\n+gdb_test \"p \\$_creal (z2)\" \" = 2.5\"\n+gdb_test \"ptype \\$\" \" = float\"\n+\n+gdb_test \"p \\$_creal (z3)\" \" = 3.5\"\n+gdb_test \"ptype \\$\" \" = long double\"\n+\n+gdb_test \"p \\$_cimag (d1)\" \"expected a complex number\"\n+gdb_test \"p \\$_cimag (f1)\" \"expected a complex number\"\n+gdb_test \"p \\$_cimag (i1)\" \"expected a complex number\"\n+\n+gdb_test \"p \\$_creal (d1)\" \"expected a complex number\"\n+gdb_test \"p \\$_creal (f1)\" \"expected a complex number\"\n+gdb_test \"p \\$_creal (i1)\" \"expected a complex number\""
    },
    {
      "sha": "56ec917aa3f83867fa9c08df96d05b7d5a1754d9",
      "filename": "gdb/testsuite/gdb.base/default.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/testsuite/gdb.base/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/default.exp?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -601,6 +601,8 @@ set show_conv_list \\\n \t{$_probe_arg9 = <error: No frame selected>} \\\n \t{$_probe_arg10 = <error: No frame selected>} \\\n \t{$_probe_arg11 = <error: No frame selected>} \\\n+\t{$_cimag = <internal function _cimag>} \\\n+\t{$_creal = <internal function _creal>} \\\n \t{$_isvoid = <internal function _isvoid>} \\\n \t{$_gdb_major = 8} \\\n \t{$_gdb_minor = 4} \\"
    },
    {
      "sha": "c0f8a58168a45f72343ffa5f44b0e2f830cc82a2",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8bdc16587e26100282094c8eaa8e83180ba57afd/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=8bdc16587e26100282094c8eaa8e83180ba57afd",
      "patch": "@@ -3933,6 +3933,44 @@ isvoid_internal_fn (struct gdbarch *gdbarch,\n   return value_from_longest (builtin_type (gdbarch)->builtin_int, ret);\n }\n \n+/* Implementation of the convenience function $_cimag.  Extracts the\n+   real part from a complex number.  */\n+\n+static struct value *\n+creal_internal_fn (struct gdbarch *gdbarch,\n+\t\t   const struct language_defn *language,\n+\t\t   void *cookie, int argc, struct value **argv)\n+{\n+  if (argc != 1)\n+    error (_(\"You must provide one argument for $_creal.\"));\n+\n+  value *cval = argv[0];\n+  type *ctype = check_typedef (value_type (cval));\n+  if (TYPE_CODE (ctype) != TYPE_CODE_COMPLEX)\n+    error (_(\"expected a complex number\"));\n+  return value_from_component (cval, TYPE_TARGET_TYPE (ctype), 0);\n+}\n+\n+/* Implementation of the convenience function $_cimag.  Extracts the\n+   imaginary part from a complex number.  */\n+\n+static struct value *\n+cimag_internal_fn (struct gdbarch *gdbarch,\n+\t\t   const struct language_defn *language,\n+\t\t   void *cookie, int argc,\n+\t\t   struct value **argv)\n+{\n+  if (argc != 1)\n+    error (_(\"You must provide one argument for $_cimag.\"));\n+\n+  value *cval = argv[0];\n+  type *ctype = check_typedef (value_type (cval));\n+  if (TYPE_CODE (ctype) != TYPE_CODE_COMPLEX)\n+    error (_(\"expected a complex number\"));\n+  return value_from_component (cval, TYPE_TARGET_TYPE (ctype),\n+\t\t\t       TYPE_LENGTH (TYPE_TARGET_TYPE (ctype)));\n+}\n+\n #if GDB_SELF_TEST\n namespace selftests\n {\n@@ -4114,6 +4152,20 @@ Usage: $_isvoid (expression)\\n\\\n Return 1 if the expression is void, zero otherwise.\"),\n \t\t\t isvoid_internal_fn, NULL);\n \n+  add_internal_function (\"_creal\", _(\"\\\n+Extract the real part of a complex number.\\n\\\n+Usage: $_creal (expression)\\n\\\n+Return the real part of a complex number, the type depends on the\\n\\\n+type of a complex number.\"),\n+\t\t\t creal_internal_fn, NULL);\n+\n+  add_internal_function (\"_cimag\", _(\"\\\n+Extract the imaginary part of a complex number.\\n\\\n+Usage: $_cimag (expression)\\n\\\n+Return the imaginary part of a complex number, the type depends on the\\n\\\n+type of a complex number.\"),\n+\t\t\t cimag_internal_fn, NULL);\n+\n   add_setshow_zuinteger_unlimited_cmd (\"max-value-size\",\n \t\t\t\t       class_support, &max_value_size, _(\"\\\n Set maximum sized value gdb will load from the inferior.\"), _(\"\\"
    }
  ]
}