{
  "sha": "56d467f4ee376e28a16740f26e5f6eec3c743632",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTZkNDY3ZjRlZTM3NmUyOGExNjc0MGYyNmU1ZjZlZWMzYzc0MzYzMg==",
  "commit": {
    "author": {
      "name": "Caroline Tice",
      "email": "cmtice@google.com",
      "date": "2021-03-17T22:54:22Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-07T10:41:50Z"
    },
    "message": "gdb: handle relative paths to DWO files\n\nDWARF allows .dwo file paths to be relative rather than absolute.\n\nWhen they are relative, DWARF uses DW_AT_comp_dir to find the .dwo\nfile.  DW_AT_comp_dir can also be relative, making the entire search\npatch for the .dwo file relative.\n\nIn this case, GDB currently searches relative to its current working\ndirectory, i.e. the directory from which the debugger was launched,\nbut not relative to the directory containing the built binary.  This\ncannot be right, as the compiler, when generating the relative paths,\nknows where it's building the binary but can have no idea where the\ndebugger will be launched.\n\nThe correct thing is to add the directory containing the binary to the\nsearch paths used for resolving relative locations of dwo files. That\nis what this patch does.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (try_open_dwop_file): Add path for the binary to\n\tthe search paths used resolve relative location of .dwo file.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/fission-relative-dwo.c: New file.\n\t* gdb.dwarf2/fission-relative-dwo.exp: New file.",
    "tree": {
      "sha": "c72b27cb14e1b66aaa598392f8463777fecaacbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c72b27cb14e1b66aaa598392f8463777fecaacbf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/56d467f4ee376e28a16740f26e5f6eec3c743632",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56d467f4ee376e28a16740f26e5f6eec3c743632",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/56d467f4ee376e28a16740f26e5f6eec3c743632",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56d467f4ee376e28a16740f26e5f6eec3c743632/comments",
  "author": {
    "login": "cmtice",
    "id": 5561162,
    "node_id": "MDQ6VXNlcjU1NjExNjI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5561162?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cmtice",
    "html_url": "https://github.com/cmtice",
    "followers_url": "https://api.github.com/users/cmtice/followers",
    "following_url": "https://api.github.com/users/cmtice/following{/other_user}",
    "gists_url": "https://api.github.com/users/cmtice/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cmtice/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cmtice/subscriptions",
    "organizations_url": "https://api.github.com/users/cmtice/orgs",
    "repos_url": "https://api.github.com/users/cmtice/repos",
    "events_url": "https://api.github.com/users/cmtice/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cmtice/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61dee7220ecff488f24d32511c2532466d25741f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61dee7220ecff488f24d32511c2532466d25741f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/61dee7220ecff488f24d32511c2532466d25741f"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 175,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b418b755aa42ab486194f1b34bba7383ac1ff400",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=56d467f4ee376e28a16740f26e5f6eec3c743632",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-07  Caroline Tice  <cmtice@google.com>\n+\n+\t* dwarf2/read.c (try_open_dwop_file): Add path for the binary to\n+\tthe search paths used resolve relative location of .dwo file.\n+\n 2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2/section.c (dwarf2_section_info::get_bfd_owner): Add an"
    },
    {
      "sha": "ed0d1c6cc7fe755eee60c861a5bc4fcb2175b374",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=56d467f4ee376e28a16740f26e5f6eec3c743632",
      "patch": "@@ -12723,6 +12723,13 @@ try_open_dwop_file (dwarf2_per_objfile *per_objfile,\n   else\n     search_path = debug_file_directory;\n \n+  /* Add the path for the executable binary to the list of search paths.  */\n+  std::string objfile_dir = ldirname (objfile_name (per_objfile->objfile));\n+  search_path_holder.reset (concat (objfile_dir.c_str (),\n+\t\t\t\t    dirname_separator_string,\n+\t\t\t\t    search_path, nullptr));\n+  search_path = search_path_holder.get ();\n+\n   openp_flags flags = OPF_RETURN_REALPATH;\n   if (is_dwp)\n     flags |= OPF_SEARCH_IN_PATH;"
    },
    {
      "sha": "c9c6063c9d14ccd126e98a990ac986b219cbd965",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=56d467f4ee376e28a16740f26e5f6eec3c743632",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/fission-relative-dwo.c: New file.\n+\t* gdb.dwarf2/fission-relative-dwo.exp: New file.\n+\n 2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.dwarf2/fission-absolute-dwo.c: New file."
    },
    {
      "sha": "27f7f0dfb4bb8b5920f166d27c36197a133df51c",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-relative-dwo.c",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.c?ref=56d467f4ee376e28a16740f26e5f6eec3c743632",
      "patch": "@@ -0,0 +1,28 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Our fake object.  */\n+int global_var[100];\n+\n+int\n+main (int argc, char **argv)\n+{\n+  asm (\"main_label: .globl main_label\");\n+\n+  return 0;\n+}"
    },
    {
      "sha": "566d756c1a86f59736c4826e7d8f9bf4415c8d12",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-relative-dwo.exp",
      "status": "added",
      "additions": 130,
      "deletions": 0,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56d467f4ee376e28a16740f26e5f6eec3c743632/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-relative-dwo.exp?ref=56d467f4ee376e28a16740f26e5f6eec3c743632",
      "patch": "@@ -0,0 +1,130 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test checks that GDB can find the dwo file when the path to the\n+# dwo embedded in the executable is relative.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c -dw.S\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcfile gdb_test_file_name\n+\n+    set debug_addr_base -1\n+\n+    # The information that will be split out into the .dwo file.\n+    cu {fission 1} {\n+\n+\t# Capture the current index into .debug_addr so we can fill in\n+\t# DW_AT_GNU_addr_base later.\n+\tset debug_addr_base [debug_addr_label]\n+\n+\tcompile_unit {\n+            {language @DW_LANG_C}\n+            {name ${srcfile}}\n+\t    {DW_AT_comp_dir .}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+        } {\n+\t    declare_labels int4_type struct_type\n+\n+\t    int4_type: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 4 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\n+\t    struct_type: DW_TAG_structure_type {\n+\t\t{DW_AT_name \"foo_t\"}\n+\t\t{DW_AT_byte_size 12 DW_FORM_sdata}\n+\t    } {\n+\t\tmember {\n+\t\t    {name \"aa\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 0 data1}\n+\t\t}\n+\t\tmember {\n+\t\t    {name \"bb\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 4 data1}\n+\t\t}\n+\t\tmember {\n+\t\t    {name \"cc\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 8 data1}\n+\t\t}\n+\t    }\n+\n+\t    DW_TAG_variable {\n+\t\t{DW_AT_name global_var}\n+\t\t{DW_AT_type :$struct_type}\n+\t\t{DW_AT_location {\n+\t\t    DW_OP_GNU_addr_index [gdb_target_symbol global_var]\n+\t\t} SPECIAL_expr}\n+\t\t{external 1 flag}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{DW_AT_name main DW_FORM_string}\n+\t\t{MACRO_AT_func {main}}\n+\t    }\n+\t}\n+    }\n+\n+    # The information that will remain in the .o file.\n+    cu {} {\n+\tcompile_unit {\n+            {DW_AT_GNU_dwo_name ${gdb_test_file_name}.dwo DW_FORM_strp}\n+\t    {DW_AT_comp_dir .}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+\t    {DW_AT_GNU_addr_base $debug_addr_base}\n+        } {\n+\t    # Nothing.\n+\t}\n+    }\n+}\n+\n+# Compile both source files to create the executable.  As we compile\n+# ASM_FILE we split out the debug information into the dwo file.\n+set object_file [standard_output_file ${testfile}.o]\n+if { [build_executable_and_dwo_files \"${testfile}.exp\" ${testfile} {nodebug} \\\n+\t  [list $asm_file {nodebug split-dwo} ${object_file}] \\\n+\t  [list $srcfile {nodebug}]] } {\n+    perror \"failed to compile ${gdb_test_file_name}\"\n+    return -1\n+}\n+\n+# Now we can start GDB.\n+clean_restart ${testfile}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Print the type of global_var.  This type information is entirely\n+# fictional, it only exists in the DWARF.  If we don't have the DWARF\n+# information then there's no way we can print this.\n+gdb_test \"p global_var\" \" = \\\\{aa = 0, bb = 0, cc = 0\\\\}\""
    }
  ]
}