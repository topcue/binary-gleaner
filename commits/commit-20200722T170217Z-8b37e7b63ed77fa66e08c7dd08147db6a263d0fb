{
  "sha": "8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGIzN2U3YjYzZWQ3N2ZhNjZlMDhjN2RkMDgxNDdkYjZhMjYzZDBmYg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-04T14:07:54Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:17Z"
    },
    "message": "libctf, ld, binutils: add textual error/warning reporting for libctf\n\nThis commit adds a long-missing piece of infrastructure to libctf: the\nability to report errors and warnings using all the power of printf,\nrather than being restricted to one errno value.  Internally, libctf\ncalls ctf_err_warn() to add errors and warnings to a list: a new\niterator ctf_errwarning_next() then consumes this list one by one and\nhands it to the caller, which can free it.  New errors and warnings are\nadded until the list is consumed by the caller or the ctf_file_t is\nclosed, so you can dump them at intervals.  The caller can of course\nchoose to print only those warnings it wants.  (I am not sure whether we\nwant objdump, readelf or ld to print warnings or not: right now I'm\nprinting them, but maybe we only want to print errors?  This entirely\ndepends on whether warnings are voluminous things describing e.g. the\ninability to emit single types because of name clashes or something.\nThere are no users of this infrastructure yet, so it's hard to say.)\n\nThere is no internationalization here yet, but this at least adds a\nplace where internationalization can be added, to one of\nctf_errwarning_next or ctf_err_warn.\n\nWe also provide a new ctf_assert() function which uses this\ninfrastructure to provide non-fatal assertion failures while emitting an\nassert-like string to the caller: to save space and avoid needlessly\nduplicating unchanging strings, the assertion test is inlined but the\nprint-things-out failure case is not.  All assertions in libctf will be\nconverted to use this machinery in future commits and propagate\nassertion-failure errors up, so that the linker in particular cannot be\nkilled by libctf assertion failures when it could perfectly well just\nprint warnings and drop the CTF section.\n\ninclude/\n\t* ctf-api.h (ECTF_INTERNAL): Adjust error text.\n\t(ctf_errwarning_next): New.\nlibctf/\n\t* ctf-impl.h (ctf_assert): New.\n\t(ctf_err_warning_t): Likewise.\n\t(ctf_file_t) <ctf_errs_warnings>: Likewise.\n\t(ctf_err_warn): New prototype.\n\t(ctf_assert_fail_internal): Likewise.\n\t* ctf-inlines.h (ctf_assert_internal): Likewise.\n\t* ctf-open.c (ctf_file_close): Free ctf_errs_warnings.\n\t* ctf-create.c (ctf_serialize): Copy it on serialization.\n\t* ctf-subr.c (ctf_err_warn): New, add an error/warning.\n\t(ctf_errwarning_next): New iterator, free and pass back\n\terrors/warnings in succession.\n\t* libctf.ver (ctf_errwarning_next): Add.\nld/\n\t* ldlang.c (lang_ctf_errs_warnings): New, print CTF errors\n\tand warnings.  Assert when libctf asserts.\n\t(lang_merge_ctf): Call it.\n\t(land_write_ctf): Likewise.\nbinutils/\n\t* objdump.c (ctf_archive_member): Print CTF errors and warnings.\n\t* readelf.c (dump_ctf_archive_member): Likewise.",
    "tree": {
      "sha": "c280e06227a691786531e22149349fbc003499a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c280e06227a691786531e22149349fbc003499a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b7190c821e529d7858cff7c2fcc57304a1d38d2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7190c821e529d7858cff7c2fcc57304a1d38d2b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7190c821e529d7858cff7c2fcc57304a1d38d2b"
    }
  ],
  "stats": {
    "total": 238,
    "additions": 235,
    "deletions": 3
  },
  "files": [
    {
      "sha": "716950977a6cf9c9d9ad9d54744f45e9621199b2",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* objdump.c (ctf_archive_member): Print CTF errors and warnings.\n+\t* readelf.c (dump_ctf_archive_member): Likewise.\n+\n 2020-07-22  Nick Clifton  <nickc@redhat.com>\n \n \t* readelf.c (parse_args): Silence potential warnings about a"
    },
    {
      "sha": "8d4b1b6ba940ea1b1eca84d5e2a90636bde79378",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -4081,6 +4081,9 @@ dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n \t\t\t  \"Function objects\", \"Variables\", \"Types\", \"Strings\",\n \t\t\t  \"\"};\n   const char **thing;\n+  ctf_next_t *it = NULL;\n+  char *errtext;\n+  int is_warning;\n   size_t i;\n \n   /* Only print out the name of non-default-named archive members.\n@@ -4117,6 +4120,20 @@ dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n \t  break;\n \t}\n     }\n+\n+  /* Dump accumulated errors and warnings.  */\n+  while ((errtext = ctf_errwarning_next (ctf, &it, &is_warning)) != NULL)\n+    {\n+      non_fatal (_(\"%s: `%s'\"), is_warning ? _(\"warning\"): _(\"error\"),\n+\t\t errtext);\n+      free (errtext);\n+    }\n+  if (ctf_errno (ctf) != ECTF_NEXT_END)\n+    {\n+      non_fatal (_(\"CTF error: cannot get CTF errors: `%s'\"),\n+\t\t ctf_errmsg (ctf_errno (ctf)));\n+    }\n+\n   return 0;\n }\n "
    },
    {
      "sha": "421992d12d95ec2e61f40c658167a952ff097365",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -14215,7 +14215,11 @@ dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n \t\t\t  \"Function objects\", \"Variables\", \"Types\", \"Strings\",\n \t\t\t  \"\"};\n   const char **thing;\n+  ctf_next_t *it = NULL;\n+  char *errtext;\n+  int is_warning;\n   size_t i;\n+  int err = 0;\n \n   /* Only print out the name of non-default-named archive members.\n      The name .ctf appears everywhere, even for things that aren't\n@@ -14248,10 +14252,25 @@ dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n \t{\n \t  error (_(\"Iteration failed: %s, %s\\n\"), *thing,\n \t\t ctf_errmsg (ctf_errno (ctf)));\n-\t  return 1;\n+\t  err = 1;\n+\t  goto out;\n \t}\n     }\n-  return 0;\n+\n+ out:\n+  /* Dump accumulated errors and warnings.  */\n+  while ((errtext = ctf_errwarning_next (ctf, &it, &is_warning)) != NULL)\n+    {\n+      error (_(\"%s: `%s'\\n\"), is_warning ? _(\"warning\"): _(\"error\"),\n+\t     errtext);\n+      free (errtext);\n+    }\n+  if (ctf_errno (ctf) != ECTF_NEXT_END)\n+    {\n+      error (_(\"CTF error: cannot get CTF errors: `%s'\\n\"),\n+\t     ctf_errmsg (ctf_errno (ctf)));\n+    }\n+  return err;\n }\n \n static bfd_boolean"
    },
    {
      "sha": "d76ac8fbffc7f1d965339d39e1138da17e7c8ad4",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ECTF_INTERNAL): Adjust error text.\n+\t(ctf_errwarning_next): New.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ECTF_FLAGS): New."
    },
    {
      "sha": "e061b7022b6754ee69898d992347f38d66039246",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -203,7 +203,7 @@ enum\n    ECTF_DUMPSECTUNKNOWN, /* Unknown section number in dump.  */\n    ECTF_DUMPSECTCHANGED, /* Section changed in middle of dump.  */\n    ECTF_NOTYET,\t\t/* Feature not yet implemented.  */\n-   ECTF_INTERNAL,\t/* Internal error in link.  */\n+   ECTF_INTERNAL,\t/* Internal error: assertion failure.  */\n    ECTF_NONREPRESENTABLE, /* Type not representable in CTF.  */\n    ECTF_NEXT_END,\t/* End of iteration.  */\n    ECTF_NEXT_WRONGFUN,\t/* Wrong iteration function called.  */\n@@ -396,6 +396,12 @@ extern char *ctf_dump (ctf_file_t *, ctf_dump_state_t **state,\n \t\t       ctf_sect_names_t sect, ctf_dump_decorate_f *,\n \t\t       void *arg);\n \n+/* Error-warning reporting: an 'iterator' that returns errors and warnings from\n+   the error/warning list, in order of emission.  Errors and warnings are popped\n+   after return: the caller must free the returned error-text pointer.  */\n+extern char *ctf_errwarning_next (ctf_file_t *, ctf_next_t **,\n+\t\t\t\t  int *is_warning);\n+\n extern ctf_id_t ctf_add_array (ctf_file_t *, uint32_t,\n \t\t\t       const ctf_arinfo_t *);\n extern ctf_id_t ctf_add_const (ctf_file_t *, uint32_t, ctf_id_t);"
    },
    {
      "sha": "69272878842ad480963fef51c821813dd8ae5240",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ldlang.c (lang_ctf_errs_warnings): New, print CTF errors\n+\tand warnings.  Assert when libctf asserts.\n+\t(lang_merge_ctf): Call it.\n+\t(land_write_ctf): Likewise.\n+\n 2020-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/26262"
    },
    {
      "sha": "cc64e7a987a9e5a14a67c6eb3a1cec38a835a6b0",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -3725,6 +3725,29 @@ ldlang_open_ctf (void)\n     ctf_close (errfile->the_ctf);\n }\n \n+/* Emit CTF errors and warnings.  */\n+static void\n+lang_ctf_errs_warnings (ctf_file_t *fp)\n+{\n+  ctf_next_t *i = NULL;\n+  char *text;\n+  int is_warning;\n+\n+  while ((text = ctf_errwarning_next (fp, &i, &is_warning)) != NULL)\n+    {\n+      einfo (_(\"%s: `%s'\\n\"), is_warning ? _(\"CTF warning\"): _(\"CTF error\"),\n+\t     text);\n+      free (text);\n+    }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    {\n+      einfo (_(\"CTF error: cannot get CTF errors: `%s'\\n\"),\n+\t     ctf_errmsg (ctf_errno (fp)));\n+    }\n+\n+  ASSERT (ctf_errno (fp) != ECTF_INTERNAL);\n+}\n+\n /* Merge together CTF sections.  After this, only the symtab-dependent\n    function and data object sections need adjustment.  */\n \n@@ -3778,6 +3801,7 @@ lang_merge_ctf (void)\n \t  output_sect->flags |= SEC_EXCLUDE;\n \t}\n     }\n+  lang_ctf_errs_warnings (ctf_output);\n }\n \n /* Let the emulation examine the symbol table and strtab to help it optimize the\n@@ -3831,6 +3855,8 @@ lang_write_ctf (int late)\n \t  output_sect->size = 0;\n \t  output_sect->flags |= SEC_EXCLUDE;\n \t}\n+\n+      lang_ctf_errs_warnings (ctf_output);\n     }\n \n   /* This also closes every CTF input file used in the link.  */"
    },
    {
      "sha": "114d4e6c9a0382ad25e4cb5e53e71e2c7f7ac9d6",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -1,3 +1,18 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_assert): New.\n+\t(ctf_err_warning_t): Likewise.\n+\t(ctf_file_t) <ctf_errs_warnings>: Likewise.\n+\t(ctf_err_warn): New prototype.\n+\t(ctf_assert_fail_internal): Likewise.\n+\t* ctf-inlines.h (ctf_assert_internal): Likewise.\n+\t* ctf-open.c (ctf_file_close): Free ctf_errs_warnings.\n+\t* ctf-create.c (ctf_serialize): Copy it on serialization.\n+\t* ctf-subr.c (ctf_err_warn): New, add an error/warning.\n+\t(ctf_errwarning_next): New iterator, free and pass back\n+\terrors/warnings in succession.\n+\t* libctf.ver (ctf_errwarning_next): Add.\n+\n 2020-07-22  Egeyar Bagcioglu  <egeyar.bagcioglu@oracle.com>\n \n \t* ctf-types.c (ctf_variable_iter): Fix error return."
    },
    {
      "sha": "a538b2d560347ae0ff4f4b437741c89a1dfca25d",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -534,6 +534,7 @@ ctf_serialize (ctf_file_t *fp)\n   nfp->ctf_ptrtab_len = fp->ctf_ptrtab_len;\n   nfp->ctf_link_inputs = fp->ctf_link_inputs;\n   nfp->ctf_link_outputs = fp->ctf_link_outputs;\n+  nfp->ctf_errs_warnings = fp->ctf_errs_warnings;\n   nfp->ctf_str_prov_offset = fp->ctf_str_prov_offset;\n   nfp->ctf_syn_ext_strtab = fp->ctf_syn_ext_strtab;\n   nfp->ctf_link_cu_mapping = fp->ctf_link_cu_mapping;\n@@ -556,6 +557,7 @@ ctf_serialize (ctf_file_t *fp)\n   fp->ctf_str_atoms = NULL;\n   fp->ctf_prov_strtab = NULL;\n   memset (&fp->ctf_dtdefs, 0, sizeof (ctf_list_t));\n+  memset (&fp->ctf_errs_warnings, 0, sizeof (ctf_list_t));\n   fp->ctf_add_processing = NULL;\n   fp->ctf_ptrtab = NULL;\n   fp->ctf_link_inputs = NULL;"
    },
    {
      "sha": "47a392723e93e42a35ee318abee20116ea74fc29",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -70,6 +70,10 @@ extern \"C\"\n \n #endif\n \n+#define ctf_assert(fp, expr)\t\t\t\t\t\t\\\n+  _libctf_unlikely_ (ctf_assert_internal (fp, __FILE__, __LINE__,\t\\\n+\t\t\t\t\t  #expr, !!(expr)))\n+\n /* libctf in-memory state.  */\n \n typedef struct ctf_fixed_hash ctf_hash_t; /* Private to ctf-hash.c.  */\n@@ -195,6 +199,13 @@ typedef struct ctf_bundle\n   ctf_dtdef_t *ctb_dtd;\t\t/* CTF dynamic type definition (if any).  */\n } ctf_bundle_t;\n \n+typedef struct ctf_err_warning\n+{\n+  ctf_list_t cew_list;\t\t/* List forward/back pointers.  */\n+  int cew_is_warning;\t\t/* 1 if warning, 0 if error.  */\n+  char *cew_text;\t\t/* Error/warning text.  */\n+} ctf_err_warning_t;\n+\n /* Atoms associate strings with a list of the CTF items that reference that\n    string, so that ctf_update() can instantiate all the strings using the\n    ctf_str_atoms and then reassociate them with the real string later.\n@@ -297,6 +308,7 @@ struct ctf_file\n   unsigned long ctf_snapshots;\t  /* ctf_snapshot() plus ctf_update() count.  */\n   unsigned long ctf_snapshot_lu;  /* ctf_snapshot() call count at last update.  */\n   ctf_archive_t *ctf_archive;\t  /* Archive this ctf_file_t came from.  */\n+  ctf_list_t ctf_errs_warnings;\t  /* CTF errors and warnings.  */\n   ctf_dynhash_t *ctf_link_inputs; /* Inputs to this link.  */\n   ctf_dynhash_t *ctf_link_outputs; /* Additional outputs from this link.  */\n   ctf_dynhash_t *ctf_link_type_mapping; /* Map input types to output types.  */\n@@ -543,6 +555,11 @@ _libctf_printflike_ (1, 2)\n extern void ctf_dprintf (const char *, ...);\n extern void libctf_init_debug (void);\n \n+_libctf_printflike_ (3, 4)\n+extern void ctf_err_warn (ctf_file_t *, int is_warning, const char *, ...);\n+extern void ctf_assert_fail_internal (ctf_file_t *, const char *,\n+\t\t\t\t      size_t, const char *);\n+\n extern Elf64_Sym *ctf_sym_to_elf64 (const Elf32_Sym *src, Elf64_Sym *dst);\n extern const char *ctf_lookup_symbol_name (ctf_file_t *fp, unsigned long symidx);\n "
    },
    {
      "sha": "affc9f91374943f11fc212dcb5625d792d59b214",
      "filename": "libctf/ctf-inlines.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-inlines.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-inlines.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-inlines.h?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -80,6 +80,16 @@ ctf_dynset_cinsert (ctf_dynset_t *h, const void *k)\n   return ctf_dynset_insert (h, (void *) k);\n }\n \n+static inline int\n+ctf_assert_internal (ctf_file_t *fp, const char *file, size_t line,\n+\t\t     const char *exprstr, int expr)\n+{\n+  if (_libctf_unlikely_ (!expr))\n+    ctf_assert_fail_internal (fp, file, line, exprstr);\n+\n+  return expr;\n+}\n+\n #ifdef\t__cplusplus\n }\n #endif"
    },
    {
      "sha": "24899f08e20fea36a91d5762fb6a82e0993916f7",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -1644,6 +1644,7 @@ ctf_file_close (ctf_file_t *fp)\n {\n   ctf_dtdef_t *dtd, *ntd;\n   ctf_dvdef_t *dvd, *nvd;\n+  ctf_err_warning_t *err, *nerr;\n \n   if (fp == NULL)\n     return;\t\t   /* Allow ctf_file_close(NULL) to simplify caller code.  */\n@@ -1710,6 +1711,14 @@ ctf_file_close (ctf_file_t *fp)\n   ctf_dynhash_destroy (fp->ctf_link_cu_mapping);\n   ctf_dynhash_destroy (fp->ctf_add_processing);\n \n+  for (err = ctf_list_next (&fp->ctf_errs_warnings); err != NULL; err = nerr)\n+    {\n+      nerr = ctf_list_next (err);\n+      ctf_list_delete (&fp->ctf_errs_warnings, err);\n+      free (err->cew_text);\n+      free (err);\n+    }\n+\n   free (fp->ctf_sxlate);\n   free (fp->ctf_txlate);\n   free (fp->ctf_ptrtab);"
    },
    {
      "sha": "0b49ae9fca8c067b897a0286a025dddbf73b4897",
      "filename": "libctf/ctf-subr.c",
      "status": "modified",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-subr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/ctf-subr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-subr.c?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -194,3 +194,96 @@ void ctf_dprintf (const char *format, ...)\n       va_end (alist);\n     }\n }\n+\n+/* Errors and warnings.  */\n+_libctf_printflike_ (3, 4)\n+extern void\n+ctf_err_warn (ctf_file_t *fp, int is_warning, const char *format, ...)\n+{\n+  va_list alist;\n+  ctf_err_warning_t *cew;\n+\n+  /* Don't bother reporting errors here: we can't do much about them if they\n+     happen.  If we're so short of memory that a tiny malloc doesn't work, a\n+     vfprintf isn't going to work either and the caller will have to rely on the\n+     ENOMEM return they'll be getting in short order anyway.  */\n+\n+  if ((cew = malloc (sizeof (ctf_err_warning_t))) == NULL)\n+    return;\n+\n+  cew->cew_is_warning = is_warning;\n+  va_start (alist, format);\n+  if (vasprintf (&cew->cew_text, format, alist) < 0)\n+    {\n+      free (cew);\n+      va_end (alist);\n+      return;\n+    }\n+  va_end (alist);\n+\n+  ctf_dprintf (\"%s: %s\\n\", is_warning ? \"error\" : \"warning\", cew->cew_text);\n+\n+  ctf_list_append (&fp->ctf_errs_warnings, cew);\n+}\n+\n+/* Error-warning reporting: an 'iterator' that returns errors and warnings from\n+   the error/warning list, in order of emission.  Errors and warnings are popped\n+   after return: the caller must free the returned error-text pointer.  */\n+char *\n+ctf_errwarning_next (ctf_file_t *fp, ctf_next_t **it, int *is_warning)\n+{\n+  ctf_next_t *i = *it;\n+  char *ret;\n+  ctf_err_warning_t *cew;\n+\n+  if (!i)\n+    {\n+      if ((i = ctf_next_create ()) == NULL)\n+\t{\n+\t  ctf_set_errno (fp, ENOMEM);\n+\t  return NULL;\n+\t}\n+\n+      i->cu.ctn_fp = fp;\n+      i->ctn_iter_fun = (void (*) (void)) ctf_errwarning_next;\n+      *it = i;\n+    }\n+\n+  if ((void (*) (void)) ctf_errwarning_next != i->ctn_iter_fun)\n+    {\n+      ctf_set_errno (fp, ECTF_NEXT_WRONGFUN);\n+      return NULL;\n+    }\n+\n+  if (fp != i->cu.ctn_fp)\n+    {\n+      ctf_set_errno (fp, ECTF_NEXT_WRONGFP);\n+      return NULL;\n+    }\n+\n+  cew = ctf_list_next (&fp->ctf_errs_warnings);\n+\n+  if (!cew)\n+    {\n+      ctf_next_destroy (i);\n+      *it = NULL;\n+      ctf_set_errno (fp, ECTF_NEXT_END);\n+      return NULL;\n+    }\n+\n+  if (is_warning)\n+    *is_warning = cew->cew_is_warning;\n+  ret = cew->cew_text;\n+  ctf_list_delete (&fp->ctf_errs_warnings, cew);\n+  free (cew);\n+  return ret;\n+}\n+\n+void\n+ctf_assert_fail_internal (ctf_file_t *fp, const char *file, size_t line,\n+\t\t\t  const char *exprstr)\n+{\n+  ctf_err_warn (fp, 0, \"%s: %lu: libctf assertion failed: %s\", file,\n+\t\t(long unsigned int) line, exprstr);\n+  ctf_set_errno (fp, ECTF_INTERNAL);\n+}"
    },
    {
      "sha": "f1c9b2bf0039006b95940d7a06a75158aa45a0e5",
      "filename": "libctf/libctf.ver",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/libctf.ver",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b37e7b63ed77fa66e08c7dd08147db6a263d0fb/libctf/libctf.ver",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/libctf.ver?ref=8b37e7b63ed77fa66e08c7dd08147db6a263d0fb",
      "patch": "@@ -154,6 +154,7 @@ LIBCTF_1.0 {\n \n \tctf_setdebug;\n \tctf_getdebug;\n+\tctf_errwarning_next;\n \n \t/* Not yet part of the stable API.  */\n "
    }
  ]
}