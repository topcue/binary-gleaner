{
  "sha": "21df382b918888de64749e977f185c4e10a5b838",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjFkZjM4MmI5MTg4ODhkZTY0NzQ5ZTk3N2YxODVjNGUxMGE1YjgzOA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-16T07:30:29Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-16T07:30:29Z"
    },
    "message": "x86: fold SReg{2,3}\n\nThey're the only exception to there generally being no mix of register\nkinds possible in an insn operand template, and there being two bits per\noperand for their representation is also quite wasteful, considering the\nlow number of uses.  Fold both bits and deal with the little bit of\nfallout.\n\nAlso take the liberty and drop dead code trying to set REX_B: No segment\nregister has RegRex set on it.\n\nAdditionally I was quite surprised that PUSH/POP with the permitted\nsegment registers is not covered by the test cases.  Add the missing\npieces.",
    "tree": {
      "sha": "0304ccc5838584e7f3cadb92a206e4a2b616fed8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0304ccc5838584e7f3cadb92a206e4a2b616fed8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/21df382b918888de64749e977f185c4e10a5b838",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21df382b918888de64749e977f185c4e10a5b838",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/21df382b918888de64749e977f185c4e10a5b838",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21df382b918888de64749e977f185c4e10a5b838/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/206e6c58a769f9ec63827b8ca3952b0cd8c828ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/206e6c58a769f9ec63827b8ca3952b0cd8c828ba"
    }
  ],
  "stats": {
    "total": 38250,
    "additions": 13987,
    "deletions": 24263
  },
  "files": [
    {
      "sha": "bdff6e49a3e0a94172f091eb307886567af2d319",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -1,3 +1,17 @@\n+2019-07-16  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (type_names): Replace SReg entries.\n+\t(pi, check_byte_reg, build_modrm_byte, i386_att_operand,\n+\tparse_real_register): Switch to using sreg field.\n+\t(process_operands): Likewise. Extend handling of PUSH/POP of\n+\tsegment registers. Drop dead setting of REX_B.\n+\t* config/tc-i386-intel.c (i386_intel_simplify_register,\n+\ti386_intel_operand): Switch to using sreg field.\n+\t* testsuite/gas/i386/x86-64-opcode.s: Add PUSH/POP of %fs/%gs.\n+\t* testsuite/gas/i386/x86-64-opcode.d: Adjust expectations.\n+\t* testsuite/gas/i386/ilp32/x86-64-opcode.d: Use parent dir\n+\texpectations.\n+\n 2019-07-15  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* testsuite/gas/bpf/mem.s: ldabs instructions do not take a `src'"
    },
    {
      "sha": "8f738b99a2b1d8e768944994a03d4bca8dccd8ea",
      "filename": "gas/config/tc-i386-intel.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/config/tc-i386-intel.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/config/tc-i386-intel.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386-intel.c?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -283,7 +283,7 @@ i386_intel_simplify_register (expressionS *e)\n \t  as_bad (_(\"invalid use of register\"));\n \t  return 0;\n \t}\n-      if (i386_regtab[reg_num].reg_type.bitfield.sreg3\n+      if (i386_regtab[reg_num].reg_type.bitfield.sreg\n \t  && i386_regtab[reg_num].reg_num == RegFlat)\n \t{\n \t  as_bad (_(\"invalid use of pseudo-register\"));\n@@ -984,8 +984,7 @@ i386_intel_operand (char *operand_string, int got_a_float)\n \t      as_bad (_(\"segment register name expected\"));\n \t      return 0;\n \t    }\n-\t  if (!i386_regtab[expP->X_add_number].reg_type.bitfield.sreg2\n-\t      && !i386_regtab[expP->X_add_number].reg_type.bitfield.sreg3)\n+\t  if (!i386_regtab[expP->X_add_number].reg_type.bitfield.sreg)\n \t    {\n \t      as_bad (_(\"invalid use of register\"));\n \t      return 0;"
    },
    {
      "sha": "1f2b298369b09cb1d7617b8fe126804e5d65ba80",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -3031,8 +3031,7 @@ pi (const char *line, i386_insn *x)\n       if (x->types[j].bitfield.reg\n \t  || x->types[j].bitfield.regmmx\n \t  || x->types[j].bitfield.regsimd\n-\t  || x->types[j].bitfield.sreg2\n-\t  || x->types[j].bitfield.sreg3\n+\t  || x->types[j].bitfield.sreg\n \t  || x->types[j].bitfield.control\n \t  || x->types[j].bitfield.debug\n \t  || x->types[j].bitfield.test)\n@@ -3129,8 +3128,7 @@ const type_names[] =\n   { OPERAND_TYPE_DEBUG, \"debug reg\" },\n   { OPERAND_TYPE_FLOATREG, \"FReg\" },\n   { OPERAND_TYPE_FLOATACC, \"FAcc\" },\n-  { OPERAND_TYPE_SREG2, \"SReg2\" },\n-  { OPERAND_TYPE_SREG3, \"SReg3\" },\n+  { OPERAND_TYPE_SREG, \"SReg\" },\n   { OPERAND_TYPE_JUMPABSOLUTE, \"Jump Absolute\" },\n   { OPERAND_TYPE_REGMMX, \"rMMX\" },\n   { OPERAND_TYPE_REGXMM, \"rXMM\" },\n@@ -6575,8 +6573,7 @@ check_byte_reg (void)\n       if (i.types[op].bitfield.reg\n \t  || i.types[op].bitfield.regmmx\n \t  || i.types[op].bitfield.regsimd\n-\t  || i.types[op].bitfield.sreg2\n-\t  || i.types[op].bitfield.sreg3\n+\t  || i.types[op].bitfield.sreg\n \t  || i.types[op].bitfield.control\n \t  || i.types[op].bitfield.debug\n \t  || i.types[op].bitfield.test)\n@@ -6994,18 +6991,24 @@ process_operands (void)\n \n   if (i.tm.opcode_modifier.shortform)\n     {\n-      if (i.types[0].bitfield.sreg2\n-\t  || i.types[0].bitfield.sreg3)\n+      if (i.types[0].bitfield.sreg)\n \t{\n-\t  if (i.tm.base_opcode == POP_SEG_SHORT\n-\t      && i.op[0].regs->reg_num == 1)\n+\t  if (flag_code != CODE_64BIT\n+\t      ? i.tm.base_opcode == POP_SEG_SHORT\n+\t\t&& i.op[0].regs->reg_num == 1\n+\t      : (i.tm.base_opcode | 1) == POP_SEG_SHORT\n+\t\t&& i.op[0].regs->reg_num < 4)\n \t    {\n-\t      as_bad (_(\"you can't `pop %scs'\"), register_prefix);\n+\t      as_bad (_(\"you can't `%s %s%s'\"),\n+\t\t      i.tm.name, register_prefix, i.op[0].regs->reg_name);\n \t      return 0;\n \t    }\n+\t  if ( i.op[0].regs->reg_num > 3 )\n+\t    {\n+\t      i.tm.base_opcode ^= POP_SEG_SHORT ^ POP_SEG386_SHORT;\n+\t      i.tm.opcode_length = 2;\n+\t    }\n \t  i.tm.base_opcode |= (i.op[0].regs->reg_num << 3);\n-\t  if ((i.op[0].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_B;\n \t}\n       else\n \t{\n@@ -7652,8 +7655,7 @@ build_modrm_byte (void)\n \t      if (i.types[op].bitfield.reg\n \t\t  || i.types[op].bitfield.regbnd\n \t\t  || i.types[op].bitfield.regmask\n-\t\t  || i.types[op].bitfield.sreg2\n-\t\t  || i.types[op].bitfield.sreg3\n+\t\t  || i.types[op].bitfield.sreg\n \t\t  || i.types[op].bitfield.control\n \t\t  || i.types[op].bitfield.debug\n \t\t  || i.types[op].bitfield.test)\n@@ -10029,9 +10031,7 @@ i386_att_operand (char *operand_string)\n       op_string = end_op;\n       if (is_space_char (*op_string))\n \t++op_string;\n-      if (*op_string == ':'\n-\t  && (r->reg_type.bitfield.sreg2\n-\t      || r->reg_type.bitfield.sreg3))\n+      if (*op_string == ':' && r->reg_type.bitfield.sreg)\n \t{\n \t  switch (r->reg_num)\n \t    {\n@@ -10894,7 +10894,7 @@ parse_real_register (char *reg_string, char **end_op)\n     return (const reg_entry *) NULL;\n \n   if ((r->reg_type.bitfield.dword\n-       || r->reg_type.bitfield.sreg3\n+       || (r->reg_type.bitfield.sreg && r->reg_num > 3)\n        || r->reg_type.bitfield.control\n        || r->reg_type.bitfield.debug\n        || r->reg_type.bitfield.test)\n@@ -10942,7 +10942,7 @@ parse_real_register (char *reg_string, char **end_op)\n       && flag_code != CODE_64BIT)\n     return (const reg_entry *) NULL;\n \n-  if (r->reg_type.bitfield.sreg3 && r->reg_num == RegFlat && !intel_syntax)\n+  if (r->reg_type.bitfield.sreg && r->reg_num == RegFlat && !intel_syntax)\n     return (const reg_entry *) NULL;\n \n   return r;"
    },
    {
      "sha": "bd67122cc18a120cb7787e1b8de1c8568af38cb6",
      "filename": "gas/testsuite/gas/i386/ilp32/x86-64-opcode.d",
      "status": "modified",
      "additions": 1,
      "deletions": 305,
      "changes": 306,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/ilp32/x86-64-opcode.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/ilp32/x86-64-opcode.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/ilp32/x86-64-opcode.d?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -2,308 +2,4 @@\n #as: -J\n #objdump: -drw\n #name: x86-64 (ILP32) opcode\n-\n-.*: +file format .*\n-\n-Disassembly of section .text:\n-\n-0+ <.text>:\n-[ \t]*[a-f0-9]+:\t41 ff 10             \tcallq  \\*\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tff 10                \tcallq  \\*\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 ff 10             \tcallq  \\*\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tff 10                \tcallq  \\*\\(%rax\\)\n-[ \t]*[a-f0-9]+:\tcb                   \tlret   \n-[ \t]*[a-f0-9]+:\tc3                   \tretq   \n-[ \t]*[a-f0-9]+:\tcf                   \tiret   \n-[ \t]*[a-f0-9]+:\t66 cf                \tiretw  \n-[ \t]*[a-f0-9]+:\t48 cf                \tiretq  \n-[ \t]*[a-f0-9]+:\t41 8c 08             \tmov    %cs,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t8c 08                \tmov    %cs,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 8c 10             \tmov    %ss,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t8c 10                \tmov    %ss,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 8c 20             \tmov    %fs,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t8c 20                \tmov    %fs,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 8e 10             \tmov    \\(%r8\\),%ss\n-[ \t]*[a-f0-9]+:\t8e 10                \tmov    \\(%rax\\),%ss\n-[ \t]*[a-f0-9]+:\t41 8e 20             \tmov    \\(%r8\\),%fs\n-[ \t]*[a-f0-9]+:\t8e 20                \tmov    \\(%rax\\),%fs\n-[ \t]*[a-f0-9]+:\t41 c6 00 00          \tmovb   \\$0x0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tc6 00 00             \tmovb   \\$0x0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 c7 00 00 70    \tmovw   \\$0x7000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 c7 00 00 70       \tmovw   \\$0x7000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 c7 00 00 00 00 70 \tmovl   \\$0x70000000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tc7 00 00 00 00 70    \tmovl   \\$0x70000000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 c6 00 00          \tmovb   \\$0x0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tc6 00 00             \tmovb   \\$0x0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 c7 00 00 70    \tmovw   \\$0x7000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 c7 00 00 70       \tmovw   \\$0x7000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\tc7 00 00 00 00 70    \tmovl   \\$0x70000000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 c6 00 00          \tmovb   \\$0x0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tc6 00 00             \tmovb   \\$0x0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 c7 00 00 70    \tmovw   \\$0x7000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 c7 00 00 70       \tmovw   \\$0x7000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 c7 00 00 00 00 70 \tmovl   \\$0x70000000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\tc7 00 00 00 00 70    \tmovl   \\$0x70000000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t49 c7 00 00 00 00 70 \tmovq   \\$0x70000000,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t48 c7 00 00 00 00 70 \tmovq   \\$0x70000000,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 0f c3 00          \tmovnti %eax,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f c3 00             \tmovnti %eax,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t49 0f c3 00          \tmovnti %rax,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t48 0f c3 00          \tmovnti %rax,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t4d 0f c3 00          \tmovnti %r8,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t4c 0f c3 00          \tmovnti %r8,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\te2 fe                \tloop   0x[0-9a-f]+\n-[ \t]*[a-f0-9]+:\te2 fe                \tloop   0x[0-9a-f]+\n-[ \t]*[a-f0-9]+:\t67 e2 fd             \tloopl  0x[0-9a-f]+\n-[ \t]*[a-f0-9]+:\te3 fe                \tjrcxz  0x[0-9a-f]+\n-[ \t]*[a-f0-9]+:\t67 e3 fd             \tjecxz  0x[0-9a-f]+\n-[ \t]*[a-f0-9]+:\t41 f6 38             \tidivb  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\tf6 38                \tidivb  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 f7 38          \tidivw  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 f7 38             \tidivw  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 f7 38             \tidivl  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\tf7 38                \tidivl  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t49 f7 38             \tidivq  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t48 f7 38             \tidivq  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 f6 28             \timulb  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\tf6 28                \timulb  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 f7 28          \timulw  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 f7 28             \timulw  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 f7 28             \timull  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\tf7 28                \timull  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t49 f7 28             \timulq  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t48 f7 28             \timulq  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 0f 58 00       \taddpd  \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\t66 0f 58 00          \taddpd  \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\t66 45 0f 58 38       \taddpd  \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\t66 44 0f 58 38       \taddpd  \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\t66 45 0f 58 00       \taddpd  \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\t66 44 0f 58 00       \taddpd  \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\t66 41 0f 58 38       \taddpd  \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\t66 0f 58 38          \taddpd  \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\t66 0f 58 c0          \taddpd  %xmm0,%xmm0\n-[ \t]*[a-f0-9]+:\t66 45 0f 58 ff       \taddpd  %xmm15,%xmm15\n-[ \t]*[a-f0-9]+:\t66 45 0f 58 c7       \taddpd  %xmm15,%xmm8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2d 00       \tcvtsd2si \\(%r8\\),%rax\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2d 00       \tcvtsd2si \\(%rax\\),%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2d 00       \tcvtsd2si \\(%r8\\),%r8\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2d 00       \tcvtsd2si \\(%rax\\),%r8\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2d c0       \tcvtsd2si %xmm0,%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2d c7       \tcvtsd2si %xmm15,%r8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2d c7       \tcvtsd2si %xmm15,%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2d c0       \tcvtsd2si %xmm8,%r8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2d c0       \tcvtsd2si %xmm8,%rax\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2d c7       \tcvtsd2si %xmm7,%r8\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2d c7       \tcvtsd2si %xmm7,%rax\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2d c0       \tcvtsd2si %xmm0,%r8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2c 00       \tcvttsd2si \\(%r8\\),%rax\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2c 00       \tcvttsd2si \\(%rax\\),%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2c 00       \tcvttsd2si \\(%r8\\),%r8\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2c 00       \tcvttsd2si \\(%rax\\),%r8\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2c c0       \tcvttsd2si %xmm0,%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2c c7       \tcvttsd2si %xmm15,%r8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2c c7       \tcvttsd2si %xmm15,%rax\n-[ \t]*[a-f0-9]+:\tf2 4d 0f 2c c0       \tcvttsd2si %xmm8,%r8\n-[ \t]*[a-f0-9]+:\tf2 49 0f 2c c0       \tcvttsd2si %xmm8,%rax\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2c c7       \tcvttsd2si %xmm7,%r8\n-[ \t]*[a-f0-9]+:\tf2 48 0f 2c c7       \tcvttsd2si %xmm7,%rax\n-[ \t]*[a-f0-9]+:\tf2 4c 0f 2c c0       \tcvttsd2si %xmm0,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2d 00       \tcvtss2si \\(%r8\\),%rax\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2d 00       \tcvtss2si \\(%rax\\),%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2d 00       \tcvtss2si \\(%r8\\),%r8\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2d 00       \tcvtss2si \\(%rax\\),%r8\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2d c0       \tcvtss2si %xmm0,%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2d c7       \tcvtss2si %xmm15,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2d c7       \tcvtss2si %xmm15,%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2d c0       \tcvtss2si %xmm8,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2d c0       \tcvtss2si %xmm8,%rax\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2d c7       \tcvtss2si %xmm7,%r8\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2d c7       \tcvtss2si %xmm7,%rax\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2d c0       \tcvtss2si %xmm0,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2c 00       \tcvttss2si \\(%r8\\),%rax\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2c 00       \tcvttss2si \\(%rax\\),%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2c 00       \tcvttss2si \\(%r8\\),%r8\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2c 00       \tcvttss2si \\(%rax\\),%r8\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2c c0       \tcvttss2si %xmm0,%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2c c7       \tcvttss2si %xmm15,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2c c7       \tcvttss2si %xmm15,%rax\n-[ \t]*[a-f0-9]+:\tf3 4d 0f 2c c0       \tcvttss2si %xmm8,%r8\n-[ \t]*[a-f0-9]+:\tf3 49 0f 2c c0       \tcvttss2si %xmm8,%rax\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2c c7       \tcvttss2si %xmm7,%r8\n-[ \t]*[a-f0-9]+:\tf3 48 0f 2c c7       \tcvttss2si %xmm7,%rax\n-[ \t]*[a-f0-9]+:\tf3 4c 0f 2c c0       \tcvttss2si %xmm0,%r8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 2a 00       \tcvtsi2ssl \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 0f 2a 00          \tcvtsi2ssl \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 45 0f 2a 38       \tcvtsi2ssl \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a 38       \tcvtsi2ssl \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 45 0f 2a 00       \tcvtsi2ssl \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a 00       \tcvtsi2ssl \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 2a 38       \tcvtsi2ssl \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 2a 38          \tcvtsi2ssl \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a f8       \tcvtsi2ss %eax,%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a c0       \tcvtsi2ss %eax,%xmm8\n-[ \t]*[a-f0-9]+:\tf3 0f 2a f8          \tcvtsi2ss %eax,%xmm7\n-[ \t]*[a-f0-9]+:\tf3 41 0f 2a 00       \tcvtsi2ssl \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 0f 2a 00          \tcvtsi2ssl \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 45 0f 2a 38       \tcvtsi2ssl \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a 38       \tcvtsi2ssl \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 45 0f 2a 00       \tcvtsi2ssl \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 44 0f 2a 00       \tcvtsi2ssl \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 2a 38       \tcvtsi2ssl \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 2a 38          \tcvtsi2ssl \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf2 41 0f 2a 00       \tcvtsi2sdl \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf2 0f 2a 00          \tcvtsi2sdl \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf2 45 0f 2a 38       \tcvtsi2sdl \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a 38       \tcvtsi2sdl \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf2 45 0f 2a 00       \tcvtsi2sdl \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a 00       \tcvtsi2sdl \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf2 41 0f 2a 38       \tcvtsi2sdl \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf2 0f 2a 38          \tcvtsi2sdl \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a f8       \tcvtsi2sd %eax,%xmm15\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a c0       \tcvtsi2sd %eax,%xmm8\n-[ \t]*[a-f0-9]+:\tf2 0f 2a f8          \tcvtsi2sd %eax,%xmm7\n-[ \t]*[a-f0-9]+:\tf2 41 0f 2a 00       \tcvtsi2sdl \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf2 0f 2a 00          \tcvtsi2sdl \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf2 45 0f 2a 38       \tcvtsi2sdl \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a 38       \tcvtsi2sdl \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf2 45 0f 2a 00       \tcvtsi2sdl \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf2 44 0f 2a 00       \tcvtsi2sdl \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf2 41 0f 2a 38       \tcvtsi2sdl \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf2 0f 2a 38          \tcvtsi2sdl \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\t66 41 0f 6e 00       \tmovd   \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\t66 0f 6e 00          \tmovd   \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\t66 45 0f 6e 38       \tmovd   \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\t66 44 0f 6e 38       \tmovd   \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\t66 45 0f 6e 00       \tmovd   \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\t66 44 0f 6e 00       \tmovd   \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\t66 41 0f 6e 38       \tmovd   \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\t66 0f 6e 38          \tmovd   \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\t66 0f 6e c0          \tmovd   %eax,%xmm0\n-[ \t]*[a-f0-9]+:\t66 44 0f 6e f8       \tmovd   %eax,%xmm15\n-[ \t]*[a-f0-9]+:\t66 44 0f 6e c0       \tmovd   %eax,%xmm8\n-[ \t]*[a-f0-9]+:\t66 0f 6e f8          \tmovd   %eax,%xmm7\n-[ \t]*[a-f0-9]+:\t66 41 0f 7e 00       \tmovd   %xmm0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 0f 7e 00          \tmovd   %xmm0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 45 0f 7e 38       \tmovd   %xmm15,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 44 0f 7e 38       \tmovd   %xmm15,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 45 0f 7e 00       \tmovd   %xmm8,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 44 0f 7e 00       \tmovd   %xmm8,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 0f 7e 38       \tmovd   %xmm7,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 0f 7e 38          \tmovd   %xmm7,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 0f 7e c0          \tmovd   %xmm0,%eax\n-[ \t]*[a-f0-9]+:\t66 44 0f 7e f8       \tmovd   %xmm15,%eax\n-[ \t]*[a-f0-9]+:\t66 44 0f 7e c0       \tmovd   %xmm8,%eax\n-[ \t]*[a-f0-9]+:\t66 0f 7e f8          \tmovd   %xmm7,%eax\n-[ \t]*[a-f0-9]+:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n-[ \t]*[a-f0-9]+:\t66 49 0f 6e c0       \tmovq   %r8,%xmm0\n-[ \t]*[a-f0-9]+:\t66 4d 0f 6e f8       \tmovq   %r8,%xmm15\n-[ \t]*[a-f0-9]+:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n-[ \t]*[a-f0-9]+:\t66 49 0f 7e c0       \tmovq   %xmm0,%r8\n-[ \t]*[a-f0-9]+:\t66 49 0f 7e f8       \tmovq   %xmm7,%r8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e 00       \tmovq   \\(%r8\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 0f 7e 00          \tmovq   \\(%rax\\),%xmm0\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e 38       \tmovq   \\(%r8\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e 38       \tmovq   \\(%rax\\),%xmm15\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e 00       \tmovq   \\(%r8\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e 00       \tmovq   \\(%rax\\),%xmm8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e 38       \tmovq   \\(%r8\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 7e 38          \tmovq   \\(%rax\\),%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 7e c0          \tmovq   %xmm0,%xmm0\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e ff       \tmovq   %xmm15,%xmm15\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e c7       \tmovq   %xmm15,%xmm8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e ff       \tmovq   %xmm15,%xmm7\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e c7       \tmovq   %xmm15,%xmm0\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e f8       \tmovq   %xmm8,%xmm15\n-[ \t]*[a-f0-9]+:\tf3 45 0f 7e c0       \tmovq   %xmm8,%xmm8\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e f8       \tmovq   %xmm8,%xmm7\n-[ \t]*[a-f0-9]+:\tf3 41 0f 7e c0       \tmovq   %xmm8,%xmm0\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e ff       \tmovq   %xmm7,%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e c7       \tmovq   %xmm7,%xmm8\n-[ \t]*[a-f0-9]+:\tf3 0f 7e ff          \tmovq   %xmm7,%xmm7\n-[ \t]*[a-f0-9]+:\tf3 0f 7e c7          \tmovq   %xmm7,%xmm0\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e f8       \tmovq   %xmm0,%xmm15\n-[ \t]*[a-f0-9]+:\tf3 44 0f 7e c0       \tmovq   %xmm0,%xmm8\n-[ \t]*[a-f0-9]+:\tf3 0f 7e f8          \tmovq   %xmm0,%xmm7\n-[ \t]*[a-f0-9]+:\t66 41 0f d6 00       \tmovq   %xmm0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 0f d6 00          \tmovq   %xmm0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 45 0f d6 38       \tmovq   %xmm15,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 44 0f d6 38       \tmovq   %xmm15,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 45 0f d6 00       \tmovq   %xmm8,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t66 44 0f d6 00       \tmovq   %xmm8,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t66 41 0f d6 38       \tmovq   %xmm7,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t41 0f 6e 00          \tmovd   \\(%r8\\),%mm0\n-[ \t]*[a-f0-9]+:\t0f 6e 00             \tmovd   \\(%rax\\),%mm0\n-[ \t]*[a-f0-9]+:\t41 0f 6e 38          \tmovd   \\(%r8\\),%mm7\n-[ \t]*[a-f0-9]+:\t0f 6e 38             \tmovd   \\(%rax\\),%mm7\n-[ \t]*[a-f0-9]+:\t0f 6e c0             \tmovd   %eax,%mm0\n-[ \t]*[a-f0-9]+:\t0f 6e f8             \tmovd   %eax,%mm7\n-[ \t]*[a-f0-9]+:\t41 0f 7e 00          \tmovd   %mm0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 7e 00             \tmovd   %mm0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 0f 7e 38          \tmovd   %mm7,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 7e 38             \tmovd   %mm7,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t0f 7e c0             \tmovd   %mm0,%eax\n-[ \t]*[a-f0-9]+:\t0f 7e f8             \tmovd   %mm7,%eax\n-[ \t]*[a-f0-9]+:\t41 0f 6f 00          \tmovq   \\(%r8\\),%mm0\n-[ \t]*[a-f0-9]+:\t0f 6f 00             \tmovq   \\(%rax\\),%mm0\n-[ \t]*[a-f0-9]+:\t41 0f 6f 38          \tmovq   \\(%r8\\),%mm7\n-[ \t]*[a-f0-9]+:\t0f 6f 38             \tmovq   \\(%rax\\),%mm7\n-[ \t]*[a-f0-9]+:\t41 0f 7f 00          \tmovq   %mm0,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 7f 00             \tmovq   %mm0,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 0f 7f 38          \tmovq   %mm7,\\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 7f 38             \tmovq   %mm7,\\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 8f 00             \tpopq   \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t8f 00                \tpopq   \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t9d                   \tpopfq  \n-[ \t]*[a-f0-9]+:\t41 ff 30             \tpushq  \\(%r8\\)\n-[ \t]*[a-f0-9]+:\tff 30                \tpushq  \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t9c                   \tpushfq \n-[ \t]*[a-f0-9]+:\t0f 77                \temms   \n-[ \t]*[a-f0-9]+:\t0f 0e                \tfemms  \n-[ \t]*[a-f0-9]+:\t0f 08                \tinvd   \n-[ \t]*[a-f0-9]+:\t41 0f 01 38          \tinvlpg \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 01 38             \tinvlpg \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 0f 01 38          \tinvlpg \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 01 38             \tinvlpg \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t41 0f 01 38          \tinvlpg \\(%r8\\)\n-[ \t]*[a-f0-9]+:\t0f 01 38             \tinvlpg \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t0f 00 c0             \tsldt   %eax\n-[ \t]*[a-f0-9]+:\t0f 00 c0             \tsldt   %eax\n-[ \t]*[a-f0-9]+:\t66 0f 00 c0          \tsldt   %ax\n-[ \t]*[a-f0-9]+:\t0f 00 00             \tsldt   \\(%rax\\)\n-[ \t]*[a-f0-9]+:\te6 00                \tout    %al,\\$0x0\n-[ \t]*[a-f0-9]+:\t66 e7 00             \tout    %ax,\\$0x0\n-[ \t]*[a-f0-9]+:\te7 00                \tout    %eax,\\$0x0\n-[ \t]*[a-f0-9]+:\t66 90                \txchg   %ax,%ax\n-[ \t]*[a-f0-9]+:\t87 c0                \txchg   %eax,%eax\n-[ \t]*[a-f0-9]+:\t90                   \tnop\n-[ \t]*[a-f0-9]+:\t48 90                \trex.W nop\n-[ \t]*[a-f0-9]+:\t49 90                \txchg   %rax,%r8\n-[ \t]*[a-f0-9]+:\t41 90                \txchg   %eax,%r8d\n-[ \t]*[a-f0-9]+:\t41 90                \txchg   %eax,%r8d\n-[ \t]*[a-f0-9]+:\t41 91                \txchg   %eax,%r9d\n-[ \t]*[a-f0-9]+:\t41 91                \txchg   %eax,%r9d\n-[ \t]*[a-f0-9]+:\t93                   \txchg   %eax,%ebx\n-[ \t]*[a-f0-9]+:\t93                   \txchg   %eax,%ebx\n-[ \t]*[a-f0-9]+:\t66 41 90             \txchg   %ax,%r8w\n-[ \t]*[a-f0-9]+:\t66 41 90             \txchg   %ax,%r8w\n-[ \t]*[a-f0-9]+:\t66 41 91             \txchg   %ax,%r9w\n-[ \t]*[a-f0-9]+:\t66 41 91             \txchg   %ax,%r9w\n-[ \t]*[a-f0-9]+:\t48 0f 01 e0          \tsmsw   %rax\n-[ \t]*[a-f0-9]+:\t0f 01 e0             \tsmsw   %eax\n-[ \t]*[a-f0-9]+:\t66 0f 01 e0          \tsmsw   %ax\n-[ \t]*[a-f0-9]+:\t0f 01 20             \tsmsw   \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t0f 00 c8             \tstr    %eax\n-[ \t]*[a-f0-9]+:\t0f 00 c8             \tstr    %eax\n-[ \t]*[a-f0-9]+:\t66 0f 00 c8          \tstr    %ax\n-[ \t]*[a-f0-9]+:\t0f 00 08             \tstr    \\(%rax\\)\n-[ \t]*[a-f0-9]+:\t0f 05                \tsyscall \n-[ \t]*[a-f0-9]+:\t0f 07                \tsysret \n-[ \t]*[a-f0-9]+:\t0f 01 f8             \tswapgs \n-[ \t]*[a-f0-9]+:\t66 68 22 22          \tpushw  \\$0x2222\n-[ \t]*[a-f0-9]+:\tf6 c9 01             \ttest   \\$(0x)?0*1,%cl\n-[ \t]*[a-f0-9]+:\t66 f7 c9 02 00       \ttest   \\$(0x)?0*2,%cx\n-[ \t]*[a-f0-9]+:\tf7 c9 04 00 00 00    \ttest   \\$(0x)?0*4,%ecx\n-[ \t]*[a-f0-9]+:\t48 f7 c9 08 00 00 00 \ttest   \\$(0x)?0*8,%rcx\n-#pass\n+#dump: ../x86-64-opcode.d"
    },
    {
      "sha": "35829f4f8470075acfa387159d507381410ae454",
      "filename": "gas/testsuite/gas/i386/x86-64-opcode.d",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/x86-64-opcode.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/x86-64-opcode.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-opcode.d?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -254,9 +254,13 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\t0f 7f 38             \tmovq   %mm7,\\(%rax\\)\n [ \t]*[a-f0-9]+:\t41 8f 00             \tpopq   \\(%r8\\)\n [ \t]*[a-f0-9]+:\t8f 00                \tpopq   \\(%rax\\)\n+[ \t]*[a-f0-9]+:\t0f a1                \tpopq   %fs\n+[ \t]*[a-f0-9]+:\t0f a9                \tpopq   %gs\n [ \t]*[a-f0-9]+:\t9d                   \tpopfq  \n [ \t]*[a-f0-9]+:\t41 ff 30             \tpushq  \\(%r8\\)\n [ \t]*[a-f0-9]+:\tff 30                \tpushq  \\(%rax\\)\n+[ \t]*[a-f0-9]+:\t0f a0                \tpushq  %fs\n+[ \t]*[a-f0-9]+:\t0f a8                \tpushq  %gs\n [ \t]*[a-f0-9]+:\t9c                   \tpushfq \n [ \t]*[a-f0-9]+:\t0f 77                \temms   \n [ \t]*[a-f0-9]+:\t0f 0e                \tfemms  "
    },
    {
      "sha": "8d4a6ed9b2af5400a585e4ef55630565dfe0898e",
      "filename": "gas/testsuite/gas/i386/x86-64-opcode.s",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/x86-64-opcode.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/gas/testsuite/gas/i386/x86-64-opcode.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-opcode.s?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -322,11 +322,15 @@\n \t# POP\n \tPOPq (%r8)\t\t      #\t --  --\t -- 41\t 8F 00\t\t\t\t ; REX to access upper reg.\n \tPOPq (%rax)\t\t      #\t --  --\t -- --\t 8F 00\n+\tPOP %fs\t\t\t      #\t --  --\t -- --\t 0F A1\n+\tPOP %gs\t\t\t      #\t --  --\t -- --\t 0F A9\n \tPOPFQ\t\t\t      #\t --  --\t -- --\t 9D\n \n \t# PUSH\n \tPUSHq (%r8)\t\t      #\t --  --\t -- 41\t FF 30\t\t\t\t ; REX to access upper reg.\n \tPUSHq (%rax)\t\t      #\t --  --\t -- --\t FF 30\n+\tPUSH %fs\t\t      #\t --  --\t -- --\t 0F A0\n+\tPUSH %gs\t\t      #\t --  --\t -- --\t 0F A8\n \tPUSHFQ\t\t\t      #\t --  --\t -- --\t 9C\n \n "
    },
    {
      "sha": "8954558c22385d8851f743154dce96d6b24ef14d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -1,3 +1,7 @@\n+2019-07-16  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* opcode/i386.h (POP_SEG386_SHORT): New.\n+\n 2019-07-01  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (enum aarch64_insn_class): sve_size_013"
    },
    {
      "sha": "4f7836c2a1ef1dd05b644d4c024110bc9cf80c26",
      "filename": "include/opcode/i386.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/include/opcode/i386.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/include/opcode/i386.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/i386.h?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -46,6 +46,7 @@\n \n #define MOV_AX_DISP32 0xa0\n #define POP_SEG_SHORT 0x07\n+#define POP_SEG386_SHORT 0xfa1\n #define JUMP_PC_RELATIVE 0xeb\n #define INT_OPCODE  0xcd\n #define INT3_OPCODE 0xcc"
    },
    {
      "sha": "2a7c67fe14279a20e3d8929ac8e7362d4ba735df",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -1,3 +1,16 @@\n+2019-07-16  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init, operand_types): Replace SReg\n+\tentries.\n+\t* i386-opc.h (SReg2, SReg3): Replace by ...\n+\t(SReg): ... this.\n+\t(union i386_operand_type): Replace sreg fields.\n+\t* i386-opc.tbl (mov, ): Use SReg.\n+\t(push, pop): Likewies. Drop i386 and x86-64 specific segment\n+\tregister flavors.\n+\t* i386-reg.tbl (cs, ds, es, fs, gs, ss, flat): Use SReg.\n+\t* opcodes/i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-07-15  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* bpf-desc.c: Regenerate."
    },
    {
      "sha": "97af25b1b01f812a4639cfa3fe19d032aa046feb",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -440,10 +440,8 @@ static initializer operand_type_init[] =\n     \"FloatReg\" },\n   { \"OPERAND_TYPE_FLOATACC\",\n     \"FloatAcc\" },\n-  { \"OPERAND_TYPE_SREG2\",\n-    \"SReg2\" },\n-  { \"OPERAND_TYPE_SREG3\",\n-    \"SReg3\" },\n+  { \"OPERAND_TYPE_SREG\",\n+    \"SReg\" },\n   { \"OPERAND_TYPE_JUMPABSOLUTE\",\n     \"JumpAbsolute\" },\n   { \"OPERAND_TYPE_REGMMX\",\n@@ -702,8 +700,7 @@ static bitfield operand_types[] =\n   BITFIELD (Control),\n   BITFIELD (Debug),\n   BITFIELD (Test),\n-  BITFIELD (SReg2),\n-  BITFIELD (SReg3),\n+  BITFIELD (SReg),\n   BITFIELD (Acc),\n   BITFIELD (JumpAbsolute),\n   BITFIELD (EsSeg),"
    },
    {
      "sha": "9a41aa1a0ec09c9cbd8042a7f118e52f5526f695",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 71,
      "deletions": 124,
      "changes": 195,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -1349,245 +1349,192 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n-#define OPERAND_TYPE_SREG2 \\\n+#define OPERAND_TYPE_SREG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n-\n-#define OPERAND_TYPE_SREG3 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ESSEG \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }"
    },
    {
      "sha": "a2816a14c3cb470d05841c95572345e8143c0da5",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -706,10 +706,8 @@ enum\n   Debug,\n   /* Test register */\n   Test,\n-  /* 2 bit segment register */\n-  SReg2,\n-  /* 3 bit segment register */\n-  SReg3,\n+  /* Segment register */\n+  SReg,\n   /* 1 bit immediate */\n   Imm1,\n   /* 8 bit immediate */\n@@ -811,8 +809,7 @@ typedef union i386_operand_type\n       unsigned int control:1;\n       unsigned int debug:1;\n       unsigned int test:1;\n-      unsigned int sreg2:1;\n-      unsigned int sreg3:1;\n+      unsigned int sreg:1;\n       unsigned int imm1:1;\n       unsigned int imm8:1;\n       unsigned int imm8s:1;"
    },
    {
      "sha": "0e7de09a7a52cd303367798b82f3e64496adf12c",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -63,9 +63,9 @@ mov, 2, 0xb0, None, 1, Cpu64, W|ShortForm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldS\n // size prefix.  When moving to a 32 bit register, the upper 16 bits\n // are set to an implementation defined value (on the Pentium Pro, the\n // implementation defined value is zero).\n-mov, 2, 0x8c, None, 1, 0, Modrm|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { SReg2|SReg3, Reg16|Reg32|Reg64|RegMem }\n-mov, 2, 0x8c, None, 1, 0, D|Modrm|IgnoreSize|No_bSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg2|SReg3, Word|Unspecified|BaseIndex }\n-mov, 2, 0x8e, None, 1, 0, Modrm|IgnoreSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { Reg16|Reg32|Reg64, SReg2|Sreg3 }\n+mov, 2, 0x8c, None, 1, 0, Modrm|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { SReg, Reg16|Reg32|Reg64|RegMem }\n+mov, 2, 0x8c, None, 1, 0, D|Modrm|IgnoreSize|No_bSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg, Word|Unspecified|BaseIndex }\n+mov, 2, 0x8e, None, 1, 0, Modrm|IgnoreSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { Reg16|Reg32|Reg64, SReg }\n // Move to/from control debug registers.  In the 16 or 32bit modes\n // they are 32bit.  In the 64bit mode they are 64bit.\n mov, 2, 0xf20, None, 2, Cpu386|CpuNo64, D|Modrm|IgnoreSize|No_bSuf|No_wSuf|No_sSuf|No_qSuf|No_ldSuf, { Control, Reg32|RegMem }\n@@ -113,26 +113,22 @@ push, 1, 0x50, None, 1, CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|N\n push, 1, 0xff, 0x6, 1, CpuNo64, Modrm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg16|Reg32|Word|Dword|Unspecified|BaseIndex }\n push, 1, 0x6a, None, 1, Cpu186|CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8S }\n push, 1, 0x68, None, 1, Cpu186|CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm16|Imm32 }\n-push, 1, 0x6, None, 1, CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg2 }\n-push, 1, 0xfa0, None, 2, Cpu386|CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg3 }\n+push, 1, 0x6, None, 1, 0, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg }\n // In 64bit mode, the operand size is implicitly 64bit.\n push, 1, 0x50, None, 1, Cpu64, ShortForm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Reg16|Reg64 }\n push, 1, 0xff, 0x6, 1, Cpu64, Modrm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Reg16|Reg64|Word|Qword|Unspecified|BaseIndex }\n push, 1, 0x6a, None, 1, Cpu64, DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Imm8S }\n push, 1, 0x68, None, 1, Cpu64, DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Imm16|Imm32S }\n-push, 1, 0xfa0, None, 2, Cpu64, ShortForm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { SReg3 }\n \n pusha, 0, 0x60, None, 1, Cpu186|CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { 0 }\n \n // Pop instructions.\n pop, 1, 0x58, None, 1, CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg16|Reg32 }\n pop, 1, 0x8f, 0x0, 1, CpuNo64, Modrm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Reg16|Reg32|Word|Dword|Unspecified|BaseIndex }\n-pop, 1, 0x7, None, 1, CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg2 }\n-pop, 1, 0xfa1, None, 2, Cpu386|CpuNo64, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg3 }\n+pop, 1, 0x7, None, 1, 0, ShortForm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg }\n // In 64bit mode, the operand size is implicitly 64bit.\n pop, 1, 0x58, None, 1, Cpu64, ShortForm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Reg16|Reg64 }\n pop, 1, 0x8f, 0x0, 1, Cpu64, Modrm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { Reg16|Reg64|Word|Qword|Unspecified|BaseIndex }\n-pop, 1, 0xfa1, None, 2, Cpu64, ShortForm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64, { SReg3 }\n \n popa, 0, 0x61, None, 1, Cpu186|CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { 0 }\n \n@@ -987,7 +983,7 @@ movq, 2, 0xf6f, None, 2, CpuMMX, D|Modrm|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_s\n movq, 2, 0xf6e, None, 2, Cpu64, D|Modrm|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|Size64, { Reg64|Unspecified|BaseIndex, RegMMX }\n // The segment register moves accept Reg64 so that a segment register\n // can be copied to a 64 bit register, and vice versa.\n-movq, 2, 0x8c, None, 1, Cpu64, D|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg2|SReg3, Reg64|RegMem }\n+movq, 2, 0x8c, None, 1, Cpu64, D|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { SReg, Reg64|RegMem }\n // Move to/from control debug registers.  In the 16 or 32bit modes they\n // are 32bit.  In the 64bit mode they are 64bit.\n movq, 2, 0xf20, None, 2, Cpu64, D|Modrm|Size64|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|NoRex64, { Control, Reg64|RegMem }"
    },
    {
      "sha": "ba4c51c046b8abc3f9e37667e6d9d2a75461bef0",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=21df382b918888de64749e977f185c4e10a5b838",
      "patch": "@@ -105,13 +105,13 @@ k5, RegMask, 0, 5, 98, 123\n k6, RegMask, 0, 6, 99, 124\n k7, RegMask, 0, 7, 100, 125\n // Segment registers.\n-es, SReg2, 0, 0, 40, 50\n-cs, SReg2, 0, 1, 41, 51\n-ss, SReg2, 0, 2, 42, 52\n-ds, SReg2, 0, 3, 43, 53\n-fs, SReg3, 0, 4, 44, 54\n-gs, SReg3, 0, 5, 45, 55\n-flat, SReg3, 0, RegFlat, Dw2Inval, Dw2Inval\n+es, SReg, 0, 0, 40, 50\n+cs, SReg, 0, 1, 41, 51\n+ss, SReg, 0, 2, 42, 52\n+ds, SReg, 0, 3, 43, 53\n+fs, SReg, 0, 4, 44, 54\n+gs, SReg, 0, 5, 45, 55\n+flat, SReg, 0, RegFlat, Dw2Inval, Dw2Inval\n // Control registers.\n cr0, Control, 0, 0, Dw2Inval, Dw2Inval\n cr1, Control, 0, 1, Dw2Inval, Dw2Inval"
    },
    {
      "sha": "24082e998f0f3a5b5bd46629045123d77a5c7a90",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 13834,
      "deletions": 23782,
      "changes": 37616,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/21df382b918888de64749e977f185c4e10a5b838/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=21df382b918888de64749e977f185c4e10a5b838"
    }
  ]
}