{
  "sha": "2f1b18db863d630b94f9454067597e0df648bf37",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmYxYjE4ZGI4NjNkNjMwYjk0Zjk0NTQwNjc1OTdlMGRmNjQ4YmYzNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-05T15:03:53Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-22T08:24:42Z"
    },
    "message": "gdb: Convert enum range_type to a bit field enum\n\nThe expression range_type enum represents the following ideas:\n\n  - Lower bound is set to default,\n  - Upper bound is set to default,\n  - Upper bound is exclusive.\n\nThere are currently 6 entries in the enum to represent the combination\nof all those ideas.\n\nIn a future commit I'd like to add stride information to the range,\nthis could in theory appear with any of the existing enum entries, so\nthis would take us to 12 enum entries.\n\nThis feels like its getting a little out of hand, so in this commit I\nswitch the range_type enum over to being a flags style enum.  There's\none entry to represent no flags being set, then 3 flags to represent\nthe 3 ideas above.  Adding stride information will require adding only\none more enum flag.\n\nI've then gone through and updated the code to handle this change.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* expprint.c (print_subexp_standard): Update to reflect changes to\n\tenum range_type.\n\t(dump_subexp_body_standard): Likewise.\n\t* expression.h (enum range_type): Convert to a bit field enum, and\n\tmake the enum unsigned.\n\t* f-exp.y (subrange): Update to reflect changes to enum\n\trange_type.\n\t* f-lang.c (value_f90_subarray): Likewise.\n\t* parse.c (operator_length_standard): Likewise.\n\t* rust-exp.y (rust_parser::convert_ast_to_expression): Likewise.\n\t* rust-lang.c (rust_range): Likewise.\n\t(rust_compute_range): Likewise.\n\t(rust_subscript): Likewise.",
    "tree": {
      "sha": "6c054ad0964abdaa5173dc34b530689069bf7fbd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6c054ad0964abdaa5173dc34b530689069bf7fbd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f1b18db863d630b94f9454067597e0df648bf37",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f1b18db863d630b94f9454067597e0df648bf37",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f1b18db863d630b94f9454067597e0df648bf37",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f1b18db863d630b94f9454067597e0df648bf37/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c53dcd7785debc2e2a5b8b2dede45bbf32f2438d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c53dcd7785debc2e2a5b8b2dede45bbf32f2438d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c53dcd7785debc2e2a5b8b2dede45bbf32f2438d"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 87,
    "deletions": 94
  },
  "files": [
    {
      "sha": "427f02924f3ce7889508e92e3f7d75928f6e1a80",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -1,3 +1,19 @@\n+2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* expprint.c (print_subexp_standard): Update to reflect changes to\n+\tenum range_type.\n+\t(dump_subexp_body_standard): Likewise.\n+\t* expression.h (enum range_type): Convert to a bit field enum, and\n+\tmake the enum unsigned.\n+\t* f-exp.y (subrange): Update to reflect changes to enum\n+\trange_type.\n+\t* f-lang.c (value_f90_subarray): Likewise.\n+\t* parse.c (operator_length_standard): Likewise.\n+\t* rust-exp.y (rust_parser::convert_ast_to_expression): Likewise.\n+\t* rust-lang.c (rust_range): Likewise.\n+\t(rust_compute_range): Likewise.\n+\t(rust_subscript): Likewise.\n+\n 2020-10-21  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* infrun.c (displaced_step_in_progress_thread): Fix comment."
    },
    {
      "sha": "bdb69a92f75ca83332d212c902260ee82bdc1f81",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 35,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -585,17 +585,13 @@ print_subexp_standard (struct expression *exp, int *pos,\n \t  longest_to_int (exp->elts[pc + 1].longconst);\n \t*pos += 2;\n \n-\tif (range_type == NONE_BOUND_DEFAULT_EXCLUSIVE\n-\t    || range_type == LOW_BOUND_DEFAULT_EXCLUSIVE)\n+\tif (range_type & RANGE_HIGH_BOUND_EXCLUSIVE)\n \t  fputs_filtered (\"EXCLUSIVE_\", stream);\n \tfputs_filtered (\"RANGE(\", stream);\n-\tif (range_type == HIGH_BOUND_DEFAULT\n-\t    || range_type == NONE_BOUND_DEFAULT\n-\t    || range_type == NONE_BOUND_DEFAULT_EXCLUSIVE)\n+\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n \t  print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n \tfputs_filtered (\"..\", stream);\n-\tif (range_type == LOW_BOUND_DEFAULT\n-\t    || range_type == NONE_BOUND_DEFAULT)\n+\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n \t  print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n \tfputs_filtered (\")\", stream);\n \treturn;\n@@ -1116,36 +1112,19 @@ dump_subexp_body_standard (struct expression *exp,\n \t  longest_to_int (exp->elts[elt].longconst);\n \telt += 2;\n \n-\tswitch (range_type)\n-\t  {\n-\t  case BOTH_BOUND_DEFAULT:\n-\t    fputs_filtered (\"Range '..'\", stream);\n-\t    break;\n-\t  case LOW_BOUND_DEFAULT:\n-\t    fputs_filtered (\"Range '..EXP'\", stream);\n-\t    break;\n-\t  case LOW_BOUND_DEFAULT_EXCLUSIVE:\n-\t    fputs_filtered (\"ExclusiveRange '..EXP'\", stream);\n-\t    break;\n-\t  case HIGH_BOUND_DEFAULT:\n-\t    fputs_filtered (\"Range 'EXP..'\", stream);\n-\t    break;\n-\t  case NONE_BOUND_DEFAULT:\n-\t    fputs_filtered (\"Range 'EXP..EXP'\", stream);\n-\t    break;\n-\t  case NONE_BOUND_DEFAULT_EXCLUSIVE:\n-\t    fputs_filtered (\"ExclusiveRange 'EXP..EXP'\", stream);\n-\t    break;\n-\t  default:\n-\t    fputs_filtered (\"Invalid Range!\", stream);\n-\t    break;\n-\t  }\n+\tif (range_type & RANGE_HIGH_BOUND_EXCLUSIVE)\n+\t  fputs_filtered (\"Exclusive\", stream);\n+\tfputs_filtered (\"Range '\", stream);\n+\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n+\t  fputs_filtered (\"EXP\", stream);\n+\tfputs_filtered (\"..\", stream);\n+\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n+\t  fputs_filtered (\"EXP\", stream);\n+\tfputs_filtered (\"'\", stream);\n \n-\tif (range_type == HIGH_BOUND_DEFAULT\n-\t    || range_type == NONE_BOUND_DEFAULT)\n+\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n-\tif (range_type == LOW_BOUND_DEFAULT\n-\t    || range_type == NONE_BOUND_DEFAULT)\n+\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n       }\n       break;"
    },
    {
      "sha": "6bd3fc0c3c56a49a39b5768d3ade74ce8690b2c3",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -185,22 +185,22 @@ extern void dump_prefix_expression (struct expression *, struct ui_file *);\n    or inclusive.  So we have six sorts of subrange.  This enumeration\n    type is to identify this.  */\n \n-enum range_type\n+enum range_type : unsigned\n {\n-  /* Neither the low nor the high bound was given -- so this refers to\n-     the entire available range.  */\n-  BOTH_BOUND_DEFAULT,\n-  /* The low bound was not given and the high bound is inclusive.  */\n-  LOW_BOUND_DEFAULT,\n-  /* The high bound was not given and the low bound in inclusive.  */\n-  HIGH_BOUND_DEFAULT,\n-  /* Both bounds were given and both are inclusive.  */\n-  NONE_BOUND_DEFAULT,\n-  /* The low bound was not given and the high bound is exclusive.  */\n-  NONE_BOUND_DEFAULT_EXCLUSIVE,\n-  /* Both bounds were given.  The low bound is inclusive and the high\n-     bound is exclusive.  */\n-  LOW_BOUND_DEFAULT_EXCLUSIVE,\n+  /* This is a standard range.  Both the lower and upper bounds are\n+     defined, and the bounds are inclusive.  */\n+  RANGE_STANDARD = 0,\n+\n+  /* The low bound was not given.  */\n+  RANGE_LOW_BOUND_DEFAULT = 1 << 0,\n+\n+  /* The high bound was not given.  */\n+  RANGE_HIGH_BOUND_DEFAULT = 1 << 1,\n+\n+  /* The high bound of this range is exclusive.  */\n+  RANGE_HIGH_BOUND_EXCLUSIVE = 1 << 2,\n };\n \n+DEF_ENUM_FLAGS_TYPE (enum range_type, range_types);\n+\n #endif /* !defined (EXPRESSION_H) */"
    },
    {
      "sha": "a3314082d909c252530aa27d152fe437d49128dd",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -287,26 +287,30 @@ arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n /* There are four sorts of subrange types in F90.  */\n \n subrange:\texp ':' exp\t%prec ABOVE_COMMA\n-\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE); \n-\t\t\t  write_exp_elt_longcst (pstate, NONE_BOUND_DEFAULT);\n+\t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n+\t\t\t  write_exp_elt_longcst (pstate, RANGE_STANDARD);\n \t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n \t;\n \n subrange:\texp ':'\t%prec ABOVE_COMMA\n \t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n-\t\t\t  write_exp_elt_longcst (pstate, HIGH_BOUND_DEFAULT);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t RANGE_HIGH_BOUND_DEFAULT);\n \t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n \t;\n \n subrange:\t':' exp\t%prec ABOVE_COMMA\n \t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n-\t\t\t  write_exp_elt_longcst (pstate, LOW_BOUND_DEFAULT);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t RANGE_LOW_BOUND_DEFAULT);\n \t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n \t;\n \n subrange:\t':'\t%prec ABOVE_COMMA\n \t\t\t{ write_exp_elt_opcode (pstate, OP_RANGE);\n-\t\t\t  write_exp_elt_longcst (pstate, BOTH_BOUND_DEFAULT);\n+\t\t\t  write_exp_elt_longcst (pstate,\n+\t\t\t\t\t\t (RANGE_LOW_BOUND_DEFAULT\n+\t\t\t\t\t\t  | RANGE_HIGH_BOUND_DEFAULT));\n \t\t\t  write_exp_elt_opcode (pstate, OP_RANGE); }\n \t;\n "
    },
    {
      "sha": "fcab973f8745866140e667fda8fbe7e8a3e2413e",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -131,12 +131,12 @@ value_f90_subarray (struct value *array,\n \n   *pos += 3;\n \n-  if (range_type == LOW_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n+  if (range_type & RANGE_LOW_BOUND_DEFAULT)\n     low_bound = range->bounds ()->low.const_val ();\n   else\n     low_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n \n-  if (range_type == HIGH_BOUND_DEFAULT || range_type == BOTH_BOUND_DEFAULT)\n+  if (range_type & RANGE_HIGH_BOUND_DEFAULT)\n     high_bound = range->bounds ()->high.const_val ();\n   else\n     high_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));"
    },
    {
      "sha": "6661fba81d7e40c6db07748df384c01583ddd2a6",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -921,21 +921,13 @@ operator_length_standard (const struct expression *expr, int endpos,\n       range_type = (enum range_type)\n \tlongest_to_int (expr->elts[endpos - 2].longconst);\n \n-      switch (range_type)\n-\t{\n-\tcase LOW_BOUND_DEFAULT:\n-\tcase LOW_BOUND_DEFAULT_EXCLUSIVE:\n-\tcase HIGH_BOUND_DEFAULT:\n-\t  args = 1;\n-\t  break;\n-\tcase BOTH_BOUND_DEFAULT:\n-\t  args = 0;\n-\t  break;\n-\tcase NONE_BOUND_DEFAULT:\n-\tcase NONE_BOUND_DEFAULT_EXCLUSIVE:\n-\t  args = 2;\n-\t  break;\n-\t}\n+      /* Assume the range has 2 arguments (low bound and high bound), then\n+\t reduce the argument count if any bounds are set to default.  */\n+      args = 2;\n+      if (range_type & RANGE_LOW_BOUND_DEFAULT)\n+\t--args;\n+      if (range_type & RANGE_HIGH_BOUND_DEFAULT)\n+\t--args;\n \n       break;\n "
    },
    {
      "sha": "ea9fbdc25fb36e1ab51513587a0b041bd8f3cc77",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -2492,24 +2492,29 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \n     case OP_RANGE:\n       {\n-\tenum range_type kind = BOTH_BOUND_DEFAULT;\n+\tenum range_type kind = (RANGE_HIGH_BOUND_DEFAULT\n+\t\t\t\t| RANGE_LOW_BOUND_DEFAULT);\n \n \tif (operation->left.op != NULL)\n \t  {\n \t    convert_ast_to_expression (operation->left.op, top);\n-\t    kind = HIGH_BOUND_DEFAULT;\n+\t    kind &= ~RANGE_LOW_BOUND_DEFAULT;\n \t  }\n \tif (operation->right.op != NULL)\n \t  {\n \t    convert_ast_to_expression (operation->right.op, top);\n-\t    if (kind == BOTH_BOUND_DEFAULT)\n-\t      kind = (operation->inclusive\n-\t\t      ? LOW_BOUND_DEFAULT : LOW_BOUND_DEFAULT_EXCLUSIVE);\n+\t    if (kind == (RANGE_HIGH_BOUND_DEFAULT | RANGE_LOW_BOUND_DEFAULT))\n+\t      {\n+\t\tkind = RANGE_LOW_BOUND_DEFAULT;\n+\t\tif (!operation->inclusive)\n+\t\t  kind |= RANGE_HIGH_BOUND_EXCLUSIVE;\n+\t      }\n \t    else\n \t      {\n-\t\tgdb_assert (kind == HIGH_BOUND_DEFAULT);\n-\t\tkind = (operation->inclusive\n-\t\t\t? NONE_BOUND_DEFAULT : NONE_BOUND_DEFAULT_EXCLUSIVE);\n+\t\tgdb_assert (kind == RANGE_HIGH_BOUND_DEFAULT);\n+\t\tkind = RANGE_STANDARD;\n+\t\tif (!operation->inclusive)\n+\t\t  kind |= RANGE_HIGH_BOUND_EXCLUSIVE;\n \t      }\n \t  }\n \telse"
    },
    {
      "sha": "820ebb92c43dcc3469b4e09f750c528a00eb15b1",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f1b18db863d630b94f9454067597e0df648bf37/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f1b18db863d630b94f9454067597e0df648bf37/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=2f1b18db863d630b94f9454067597e0df648bf37",
      "patch": "@@ -1077,13 +1077,11 @@ rust_range (struct expression *exp, int *pos, enum noside noside)\n   kind = (enum range_type) longest_to_int (exp->elts[*pos + 1].longconst);\n   *pos += 3;\n \n-  if (kind == HIGH_BOUND_DEFAULT || kind == NONE_BOUND_DEFAULT\n-      || kind == NONE_BOUND_DEFAULT_EXCLUSIVE)\n+  if (!(kind & RANGE_LOW_BOUND_DEFAULT))\n     low = evaluate_subexp (nullptr, exp, pos, noside);\n-  if (kind == LOW_BOUND_DEFAULT || kind == LOW_BOUND_DEFAULT_EXCLUSIVE\n-      || kind == NONE_BOUND_DEFAULT || kind == NONE_BOUND_DEFAULT_EXCLUSIVE)\n+  if (!(kind & RANGE_HIGH_BOUND_DEFAULT))\n     high = evaluate_subexp (nullptr, exp, pos, noside);\n-  bool inclusive = (kind == NONE_BOUND_DEFAULT || kind == LOW_BOUND_DEFAULT);\n+  bool inclusive = !(kind & RANGE_HIGH_BOUND_EXCLUSIVE);\n \n   if (noside == EVAL_SKIP)\n     return value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n@@ -1166,29 +1164,29 @@ rust_range (struct expression *exp, int *pos, enum noside noside)\n static void\n rust_compute_range (struct type *type, struct value *range,\n \t\t    LONGEST *low, LONGEST *high,\n-\t\t    enum range_type *kind)\n+\t\t    range_types *kind)\n {\n   int i;\n \n   *low = 0;\n   *high = 0;\n-  *kind = BOTH_BOUND_DEFAULT;\n+  *kind = RANGE_LOW_BOUND_DEFAULT | RANGE_HIGH_BOUND_DEFAULT;\n \n   if (type->num_fields () == 0)\n     return;\n \n   i = 0;\n   if (strcmp (TYPE_FIELD_NAME (type, 0), \"start\") == 0)\n     {\n-      *kind = HIGH_BOUND_DEFAULT;\n+      *kind = RANGE_HIGH_BOUND_DEFAULT;\n       *low = value_as_long (value_field (range, 0));\n       ++i;\n     }\n   if (type->num_fields () > i\n       && strcmp (TYPE_FIELD_NAME (type, i), \"end\") == 0)\n     {\n-      *kind = (*kind == BOTH_BOUND_DEFAULT\n-\t       ? LOW_BOUND_DEFAULT : NONE_BOUND_DEFAULT);\n+      *kind = (*kind == (RANGE_LOW_BOUND_DEFAULT | RANGE_HIGH_BOUND_DEFAULT)\n+\t       ? RANGE_LOW_BOUND_DEFAULT : RANGE_STANDARD);\n       *high = value_as_long (value_field (range, i));\n \n       if (rust_inclusive_range_type_p (type))\n@@ -1206,7 +1204,7 @@ rust_subscript (struct expression *exp, int *pos, enum noside noside,\n   struct type *rhstype;\n   LONGEST low, high_bound;\n   /* Initialized to appease the compiler.  */\n-  enum range_type kind = BOTH_BOUND_DEFAULT;\n+  range_types kind = RANGE_LOW_BOUND_DEFAULT | RANGE_HIGH_BOUND_DEFAULT;\n   LONGEST high = 0;\n   int want_slice = 0;\n \n@@ -1303,8 +1301,7 @@ rust_subscript (struct expression *exp, int *pos, enum noside noside,\n       else\n \terror (_(\"Cannot subscript non-array type\"));\n \n-      if (want_slice\n-\t  && (kind == BOTH_BOUND_DEFAULT || kind == LOW_BOUND_DEFAULT))\n+      if (want_slice && (kind & RANGE_LOW_BOUND_DEFAULT))\n \tlow = low_bound;\n       if (low < 0)\n \terror (_(\"Index less than zero\"));\n@@ -1322,7 +1319,7 @@ rust_subscript (struct expression *exp, int *pos, enum noside noside,\n \t  CORE_ADDR addr;\n \t  struct value *addrval, *tem;\n \n-\t  if (kind == BOTH_BOUND_DEFAULT || kind == HIGH_BOUND_DEFAULT)\n+\t  if (kind & RANGE_HIGH_BOUND_DEFAULT)\n \t    high = high_bound;\n \t  if (high < 0)\n \t    error (_(\"High index less than zero\"));"
    }
  ]
}