{
  "sha": "373907ffb2db9232af14d2a7e4433f41cc1fc56c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzczOTA3ZmZiMmRiOTIzMmFmMTRkMmE3ZTQ0MzNmNDFjYzFmYzU2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:19Z"
    },
    "message": "Introduce binop_operation\n\nThis adds two new template classes, binop_operation and\nusual_ax_binop_operation, and then uses these to implement a number of\nbinary operations that follow similar patterns.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class binop_operation, class usual_ax_binop_operation):\n\tNew.\n\t(exp_operation, intdiv_operation, mod_operation, mul_operation)\n\t(div_operation, rem_operation, lsh_operation, rsh_operation)\n\t(bitwise_and_operation, bitwise_ior_operation)\n\t(bitwise_xor_operation): New typedefs.\n\t* eval.c (eval_op_binary): No longer static.",
    "tree": {
      "sha": "f81c492c40c56c246d27df0c07f743d2412e0c63",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f81c492c40c56c246d27df0c07f743d2412e0c63"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/373907ffb2db9232af14d2a7e4433f41cc1fc56c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/373907ffb2db9232af14d2a7e4433f41cc1fc56c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/373907ffb2db9232af14d2a7e4433f41cc1fc56c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/373907ffb2db9232af14d2a7e4433f41cc1fc56c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5133d78b7bf19f350865c9515839865503cacfa9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5133d78b7bf19f350865c9515839865503cacfa9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5133d78b7bf19f350865c9515839865503cacfa9"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 82,
    "deletions": 1
  },
  "files": [
    {
      "sha": "0ed474f176cae6ca459949c4865661a84d69ff5a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=373907ffb2db9232af14d2a7e4433f41cc1fc56c",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class binop_operation, class usual_ax_binop_operation):\n+\tNew.\n+\t(exp_operation, intdiv_operation, mod_operation, mul_operation)\n+\t(div_operation, rem_operation, lsh_operation, rsh_operation)\n+\t(bitwise_and_operation, bitwise_ior_operation)\n+\t(bitwise_xor_operation): New typedefs.\n+\t* eval.c (eval_op_binary): No longer static.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class sub_operation): New."
    },
    {
      "sha": "6fde03d3522b66bf5980aac9b97a8bf2abbce03e",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=373907ffb2db9232af14d2a7e4433f41cc1fc56c",
      "patch": "@@ -1511,7 +1511,7 @@ eval_op_sub (struct type *expect_type, struct expression *exp,\n \n /* Helper function for several different binary operations.  */\n \n-static struct value *\n+struct value *\n eval_op_binary (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1, struct value *arg2)"
    },
    {
      "sha": "4624c2fdefeac1feea38f6e624e29bdf9682ed9d",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/373907ffb2db9232af14d2a7e4433f41cc1fc56c/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=373907ffb2db9232af14d2a7e4433f41cc1fc56c",
      "patch": "@@ -96,6 +96,10 @@ extern struct value *eval_op_sub (struct type *expect_type,\n \t\t\t\t  struct expression *exp,\n \t\t\t\t  enum noside noside,\n \t\t\t\t  struct value *arg1, struct value *arg2);\n+extern struct value *eval_op_binary (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside, enum exp_opcode op,\n+\t\t\t\t     struct value *arg1, struct value *arg2);\n \n namespace expr\n {\n@@ -1041,6 +1045,73 @@ class sub_operation\n   }\n };\n \n+typedef struct value *binary_ftype (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside, enum exp_opcode op,\n+\t\t\t\t    struct value *arg1, struct value *arg2);\n+\n+template<enum exp_opcode OP, binary_ftype FUNC>\n+class binop_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs\n+      = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    value *rhs\n+      = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+    return FUNC (expect_type, exp, noside, OP, lhs, rhs);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP; }\n+};\n+\n+template<enum exp_opcode OP, binary_ftype FUNC>\n+class usual_ax_binop_operation\n+  : public binop_operation<OP, FUNC>\n+{\n+public:\n+\n+  using binop_operation<OP, FUNC>::binop_operation;\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override\n+  {\n+    gen_expr_binop (exp, OP,\n+\t\t    std::get<0> (this->m_storage).get (),\n+\t\t    std::get<1> (this->m_storage).get (),\n+\t\t    ax, value);\n+  }\n+};\n+\n+using exp_operation = binop_operation<BINOP_EXP, eval_op_binary>;\n+using intdiv_operation = binop_operation<BINOP_INTDIV, eval_op_binary>;\n+using mod_operation = binop_operation<BINOP_MOD, eval_op_binary>;\n+\n+using mul_operation = usual_ax_binop_operation<BINOP_MUL, eval_op_binary>;\n+using div_operation = usual_ax_binop_operation<BINOP_DIV, eval_op_binary>;\n+using rem_operation = usual_ax_binop_operation<BINOP_REM, eval_op_binary>;\n+using lsh_operation = usual_ax_binop_operation<BINOP_LSH, eval_op_binary>;\n+using rsh_operation = usual_ax_binop_operation<BINOP_RSH, eval_op_binary>;\n+using bitwise_and_operation\n+     = usual_ax_binop_operation<BINOP_BITWISE_AND, eval_op_binary>;\n+using bitwise_ior_operation\n+     = usual_ax_binop_operation<BINOP_BITWISE_IOR, eval_op_binary>;\n+using bitwise_xor_operation\n+     = usual_ax_binop_operation<BINOP_BITWISE_XOR, eval_op_binary>;\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}