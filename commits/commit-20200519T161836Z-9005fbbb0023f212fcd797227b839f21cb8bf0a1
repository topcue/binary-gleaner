{
  "sha": "9005fbbb0023f212fcd797227b839f21cb8bf0a1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTAwNWZiYmIwMDIzZjIxMmZjZDc5NzIyN2I4MzlmMjFjYjhiZjBhMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-19T16:18:05Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-19T16:18:36Z"
    },
    "message": "gdb: make symfile_segment_data::segment_info an std::vector\n\nChange the symfile_segment_data::segment_info array to be an\nstd::vector.  No functional changes are expected.\n\ngdb/ChangeLog:\n\n\t* symfile.h (struct symfile_segment_data)\n\t<~symfile_segment_data>: Remove.\n\t<segment_info>: Change to std::vector.\n\t* symfile.c (default_symfile_segments): Update.\n\t* elfread.c (elf_symfile_segments): Update.",
    "tree": {
      "sha": "12437fdcf47ab41839ad4e9a76430a826698b853",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/12437fdcf47ab41839ad4e9a76430a826698b853"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9005fbbb0023f212fcd797227b839f21cb8bf0a1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9005fbbb0023f212fcd797227b839f21cb8bf0a1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9005fbbb0023f212fcd797227b839f21cb8bf0a1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9005fbbb0023f212fcd797227b839f21cb8bf0a1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "68b888fff3164b5e8e347d9c1ca351c366f0aac4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/68b888fff3164b5e8e347d9c1ca351c366f0aac4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/68b888fff3164b5e8e347d9c1ca351c366f0aac4"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 15,
    "deletions": 8
  },
  "files": [
    {
      "sha": "f086b5cf908c639d5ee396350a44f9fda9635c84",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9005fbbb0023f212fcd797227b839f21cb8bf0a1",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-19  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* symfile.h (struct symfile_segment_data)\n+\t<~symfile_segment_data>: Remove.\n+\t<segment_info>: Change to std::vector.\n+\t* symfile.c (default_symfile_segments): Update.\n+\t* elfread.c (elf_symfile_segments): Update.\n+\n 2020-05-19  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* symfile.h (struct symfile_segment_data) <struct segment>: New."
    },
    {
      "sha": "75bdd75250b11cf56ad26ad8552e0981056a95b2",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=9005fbbb0023f212fcd797227b839f21cb8bf0a1",
      "patch": "@@ -118,7 +118,9 @@ elf_symfile_segments (bfd *abfd)\n     data->segments.emplace_back (segments[i]->p_vaddr, segments[i]->p_memsz);\n \n   num_sections = bfd_count_sections (abfd);\n-  data->segment_info = XCNEWVEC (int, num_sections);\n+\n+  /* All elements are initialized to 0 (map to no segment).  */\n+  data->segment_info.resize (num_sections);\n \n   for (i = 0, sect = abfd->sections; sect != NULL; i++, sect = sect->next)\n     {"
    },
    {
      "sha": "e6ec458504af9d7aa639d5a9a90a234e5af5e4fc",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=9005fbbb0023f212fcd797227b839f21cb8bf0a1",
      "patch": "@@ -747,7 +747,9 @@ default_symfile_segments (bfd *abfd)\n   symfile_segment_data_up data (new symfile_segment_data);\n \n   num_sections = bfd_count_sections (abfd);\n-  data->segment_info = XCNEWVEC (int, num_sections);\n+\n+  /* All elements are initialized to 0 (map to no segment).  */\n+  data->segment_info.resize (num_sections);\n \n   for (i = 0, sect = abfd->sections; sect != NULL; i++, sect = sect->next)\n     {"
    },
    {
      "sha": "fe79f79a04829e012b2970e65e2e94a646c12df2",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9005fbbb0023f212fcd797227b839f21cb8bf0a1/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=9005fbbb0023f212fcd797227b839f21cb8bf0a1",
      "patch": "@@ -93,11 +93,6 @@ struct symfile_segment_data\n     CORE_ADDR size;\n   };\n \n-  ~symfile_segment_data ()\n-  {\n-    xfree (this->segment_info);\n-  }\n-\n   /* The segments present in this file.  If there are\n      two, the text segment is the first one and the data segment\n      is the second one.  */\n@@ -106,7 +101,7 @@ struct symfile_segment_data\n   /* This is an array of entries recording which segment contains each BFD\n      section.  SEGMENT_INFO[I] is S+1 if the I'th BFD section belongs to segment\n      S, or zero if it is not in any segment.  */\n-  int *segment_info = nullptr;\n+  std::vector<int> segment_info;\n };\n \n using symfile_segment_data_up = std::unique_ptr<symfile_segment_data>;"
    }
  ]
}