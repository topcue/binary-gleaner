{
  "sha": "b1f0f2841871f407d116e3e7f0dfca3e410633d4",
  "node_id": "C_kwDOANOeidoAKGIxZjBmMjg0MTg3MWY0MDdkMTE2ZTNlN2YwZGZjYTNlNDEwNjMzZDQ",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-07T10:45:55Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-05T09:05:40Z"
    },
    "message": "gdb/python: add a new gdb_exiting event\n\nAdd a new event, gdb.events.gdb_exiting, which is called once GDB\ndecides it is going to exit.\n\nThis event is not triggered in the case that GDB performs a hard\nabort, for example, when handling an internal error and the user\ndecides to quit the debug session, or if GDB hits an unexpected,\nfatal, signal.\n\nThis event is triggered if the user just types 'quit' at the command\nprompt, or if GDB is run with '-batch' and has processed all of the\nrequired commands.\n\nThe new event type is gdb.GdbExitingEvent, and it has a single\nattribute exit_code, which is the value that GDB is about to exit\nwith.\n\nThe event is triggered before GDB starts dismantling any of its own\ninternal state, so, my expectation is that most Python calls should\nwork just fine at this point.\n\nWhen considering this functionality I wondered about using the\n'atexit' Python module.  However, this is triggered when the Python\nenvironment is shut down, which is done from a final cleanup.  At\nthis point we don't know for sure what other GDB state has already\nbeen cleaned up.",
    "tree": {
      "sha": "afec47062fce39a7b8973b7b5d48703803525a40",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/afec47062fce39a7b8973b7b5d48703803525a40"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b1f0f2841871f407d116e3e7f0dfca3e410633d4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1f0f2841871f407d116e3e7f0dfca3e410633d4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b1f0f2841871f407d116e3e7f0dfca3e410633d4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1f0f2841871f407d116e3e7f0dfca3e410633d4/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cb56ad3f3bd378a5adde648c56c48b0a293e2b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cb56ad3f3bd378a5adde648c56c48b0a293e2b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cb56ad3f3bd378a5adde648c56c48b0a293e2b9"
    }
  ],
  "stats": {
    "total": 146,
    "additions": 141,
    "deletions": 5
  },
  "files": [
    {
      "sha": "e0fb006909ef441c463b1e4b1cc42af78746c638",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -34,6 +34,12 @@ maint show internal-warning backtrace\n      integer, the index of the new item in the history list, is\n      returned.\n \n+  ** New gdb.events.gdb_exiting event.  This event is called with a\n+     gdb.GdbExitingEvent object which has the read-only attribute\n+     'exit_code', which contains the value of the GDB exit code.  This\n+     event is triggered once GDB decides it is going to exit, but\n+     before GDB starts to clean up its internal state.\n+\n *** Changes in GDB 11\n \n * The 'set disassembler-options' command now supports specifying options"
    },
    {
      "sha": "15bf9dc3e21ae17002153adb6ac6ae3d6fe0e36f",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -3418,6 +3418,16 @@ This has a single attribute:\n The new thread.\n @end defvar\n \n+@item events.gdb_exiting\n+This is emitted when @value{GDBN} exits.  This event is not emitted if\n+@value{GDBN} exits as a result of an internal error, or after an\n+unexpected signal.  The event is of type @code{gdb.GdbExitingEvent},\n+which has a single attribute:\n+\n+@defvar GdbExitingEvent.exit_code\n+An integer, the value of the exit code @value{GDBN} will return.\n+@end defvar\n+\n @end table\n \n @node Threads In Python"
    },
    {
      "sha": "b020076cf26b9e477a6a38e8f6a7d4f0fbb8582e",
      "filename": "gdb/observable.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/observable.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/observable.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.c?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -77,6 +77,7 @@ DEFINE_OBSERVABLE (register_changed);\n DEFINE_OBSERVABLE (user_selected_context_changed);\n DEFINE_OBSERVABLE (source_styling_changed);\n DEFINE_OBSERVABLE (current_source_symtab_and_line_changed);\n+DEFINE_OBSERVABLE (gdb_exiting);\n \n } /* namespace observers */\n } /* namespace gdb */"
    },
    {
      "sha": "f20f532870f58bd82c9a29c520d3bb736b3375ee",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -248,9 +248,11 @@ extern observable<> source_styling_changed;\n /* The CLI's notion of the current source has changed.  This differs\n    from user_selected_context_changed in that it is also set by the\n    \"list\" command.  */\n-\n extern observable<> current_source_symtab_and_line_changed;\n \n+/* Called when GDB is about to exit.  */\n+extern observable<int> gdb_exiting;\n+\n } /* namespace observers */\n \n } /* namespace gdb */"
    },
    {
      "sha": "83f10989e4aea9978f1923eb357c910e2b8909b2",
      "filename": "gdb/python/py-all-events.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/py-all-events.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/py-all-events.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-all-events.def?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -38,3 +38,4 @@ GDB_PY_DEFINE_EVENT(breakpoint_created)\n GDB_PY_DEFINE_EVENT(breakpoint_deleted)\n GDB_PY_DEFINE_EVENT(breakpoint_modified)\n GDB_PY_DEFINE_EVENT(before_prompt)\n+GDB_PY_DEFINE_EVENT(gdb_exiting)"
    },
    {
      "sha": "aeaee02e8bb7f91aea51cdd5b20248b069699428",
      "filename": "gdb/python/py-event-types.def",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/py-event-types.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/py-event-types.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-event-types.def?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -105,3 +105,8 @@ GDB_PY_DEFINE_EVENT_TYPE (thread,\n \t\t\t  \"ThreadEvent\",\n \t\t\t  \"GDB thread event object\",\n \t\t\t  event_object_type);\n+\n+GDB_PY_DEFINE_EVENT_TYPE (gdb_exiting,\n+\t\t\t  \"GdbExitingEvent\",\n+\t\t\t  \"GDB is about to exit\",\n+\t\t\t  event_object_type);"
    },
    {
      "sha": "451c5bdfe0b6d5ebddcd8c4176e3f9e4f316a393",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -36,6 +36,7 @@\n #include \"location.h\"\n #include \"run-on-main-thread.h\"\n #include \"gdbsupport/selftest.h\"\n+#include \"observable.h\"\n \n /* Declared constants and enum for python stack printing.  */\n static const char python_excp_none[] = \"none\";\n@@ -1720,6 +1721,38 @@ init__gdb_module (void)\n }\n #endif\n \n+/* Emit a gdb.GdbExitingEvent, return a negative value if there are any\n+   errors, otherwise, return 0.  */\n+\n+static int\n+emit_exiting_event (int exit_code)\n+{\n+  gdbpy_ref<> event_obj = create_event_object (&gdb_exiting_event_object_type);\n+  if (event_obj == nullptr)\n+    return -1;\n+\n+  gdbpy_ref<> code = gdb_py_object_from_longest (exit_code);\n+  if (evpy_add_attribute (event_obj.get (), \"exit_code\", code.get ()) < 0)\n+    return -1;\n+\n+  return evpy_emit_event (event_obj.get (), gdb_py_events.gdb_exiting);\n+}\n+\n+/* Callback for the gdb_exiting observable.  EXIT_CODE is the value GDB\n+   will exit with.  */\n+\n+static void\n+gdbpy_gdb_exiting (int exit_code)\n+{\n+  if (!gdb_python_initialized)\n+    return;\n+\n+  gdbpy_enter enter_py (python_gdbarch, python_language);\n+\n+  if (emit_exiting_event (exit_code) < 0)\n+    gdbpy_print_stack ();\n+}\n+\n static bool\n do_start_initialization ()\n {\n@@ -1871,6 +1904,8 @@ do_start_initialization ()\n   if (gdbpy_value_cst == NULL)\n     return false;\n \n+  gdb::observers::gdb_exiting.attach (gdbpy_gdb_exiting, \"python\");\n+\n   /* Release the GIL while gdb runs.  */\n   PyEval_SaveThread ();\n "
    },
    {
      "sha": "529eeeb404964b11557a693e96cb160de5ebd316",
      "filename": "gdb/testsuite/gdb.python/py-events.exp",
      "status": "modified",
      "additions": 51,
      "deletions": 2,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/testsuite/gdb.python/py-events.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/testsuite/gdb.python/py-events.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-events.exp?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -282,21 +282,70 @@ with_test_prefix \"inferior continue exit\" {\n }\n \n # Check that when GDB exits, we see gdb.ExitedEvent objects with no\n-# 'exit_code' attribute.\n-with_test_prefix \"gdb exiting\" {\n+# 'exit_code' attribute, and that a gdb.GdbExitingEvent is emitted.\n+with_test_prefix \"gdb exiting: normal\" {\n+    gdb_test \"test-exiting-event normal\" \"GDB exiting event registered\\\\.\"\n+\n+    set saw_exiting_event 0\n     set saw_inferior_exit 0\n     gdb_test_multiple \"quit\" \"\" {\n \t-re \"Quit anyway\\\\? \\\\(y or n\\\\) $\" {\n \t    send_gdb \"y\\n\"\n \t    exp_continue\n \t}\n+\t-re \"event type: gdb-exiting\\r\\nexit code: $decimal\" {\n+\t    incr saw_exiting_event\n+\t    exp_continue\n+\t}\n \t-re \"event type: exit\\r\\nexit code: not-present\\r\\nexit inf: $decimal\\r\\nexit pid: $decimal\\r\\ndir ok: False\\r\\n\" {\n \t    incr saw_inferior_exit\n \t    exp_continue\n \t}\n \teof {\n+\t    gdb_assert { $saw_exiting_event == 1 }\n \t    gdb_assert { $saw_inferior_exit == 2 }\n \t    pass $gdb_test_name\n \t}\n     }\n }\n+\n+# Check that if the GdbExitingEvent raises an exception then this\n+# doesn't impact GDB's exit process.\n+with_test_prefix \"gdb exiting: error\" {\n+    clean_restart ${testfile}\n+\n+    if ![runto_main] then {\n+\tfail \"cannot run to main.\"\n+\treturn 0\n+    }\n+\n+    gdb_test_no_output \"source ${pyfile}\" \"load python file\"\n+    gdb_test \"test-exiting-event error\" \"GDB exiting event registered\\\\.\"\n+    gdb_test \"test-events\" \"Event testers registered\\\\.\"\n+\n+    set saw_exiting_error 0\n+    set saw_inferior_exit 0\n+    gdb_test_multiple \"quit\" \"\" {\n+\t-re \"Quit anyway\\\\? \\\\(y or n\\\\) $\" {\n+\t    send_gdb \"y\\n\"\n+\t    exp_continue\n+\t}\n+\t-re \"event type: gdb-exiting\\r\\nexit code: $decimal\" {\n+\t    fail \"$gdb_test_name XXXX\"\n+\t    exp_continue\n+\t}\n+\t-re \"Python Exception <class 'gdb.GdbError'>: error from gdb_exiting_handler\\r\\n\" {\n+\t    incr saw_exiting_error\n+\t    exp_continue\n+\t}\n+\t-re \"event type: exit\\r\\nexit code: not-present\\r\\nexit inf: $decimal\\r\\nexit pid: $decimal\\r\\ndir ok: False\\r\\n\" {\n+\t    incr saw_inferior_exit\n+\t    exp_continue\n+\t}\n+\teof {\n+\t    gdb_assert { $saw_inferior_exit == 1 }\n+\t    gdb_assert { $saw_exiting_error == 1 }\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+}"
    },
    {
      "sha": "57b0324598f66e5afdab635fb68a0d94349f1e62",
      "filename": "gdb/testsuite/gdb.python/py-events.py",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/testsuite/gdb.python/py-events.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/testsuite/gdb.python/py-events.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-events.py?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -132,3 +132,28 @@ def invoke(self, arg, from_tty):\n \n \n test_newobj_events()\n+\n+def gdb_exiting_handler(event, throw_error):\n+    assert isinstance(event, gdb.GdbExitingEvent)\n+    if throw_error:\n+        raise gdb.GdbError(\"error from gdb_exiting_handler\")\n+    else:\n+        print(\"event type: gdb-exiting\")\n+        print(\"exit code: %d\" % (event.exit_code))\n+\n+class test_exiting_event(gdb.Command):\n+    \"\"\"GDB Exiting event.\"\"\"\n+\n+    def __init__(self):\n+        gdb.Command.__init__(self, \"test-exiting-event\", gdb.COMMAND_STACK)\n+\n+    def invoke(self, arg, from_tty):\n+        if arg == \"normal\":\n+            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e,False))\n+        elif arg == \"error\":\n+            gdb.events.gdb_exiting.connect(lambda e: gdb_exiting_handler(e,True))\n+        else:\n+            raise gdb.GdbError(\"invalid or missing argument\")\n+        print(\"GDB exiting event registered.\")\n+\n+test_exiting_event()"
    },
    {
      "sha": "08cdb487df482f82a4d0bd7db2eb149af0ee92e4",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1f0f2841871f407d116e3e7f0dfca3e410633d4/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=b1f0f2841871f407d116e3e7f0dfca3e410633d4",
      "patch": "@@ -1761,15 +1761,17 @@ quit_force (int *exit_arg, int from_tty)\n {\n   int exit_code = 0;\n \n-  undo_terminal_modifications_before_exit ();\n-\n   /* An optional expression may be used to cause gdb to terminate with the\n      value of that expression.  */\n   if (exit_arg)\n     exit_code = *exit_arg;\n   else if (return_child_result)\n     exit_code = return_child_result_value;\n \n+  gdb::observers::gdb_exiting.notify (exit_code);\n+\n+  undo_terminal_modifications_before_exit ();\n+\n   /* We want to handle any quit errors and exit regardless.  */\n \n   /* Get out of tfind mode, and kill or detach all inferiors.  */"
    }
  ]
}