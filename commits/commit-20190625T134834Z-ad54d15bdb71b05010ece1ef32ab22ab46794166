{
  "sha": "ad54d15bdb71b05010ece1ef32ab22ab46794166",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWQ1NGQxNWJkYjcxYjA1MDEwZWNlMWVmMzJhYjIyYWI0Njc5NDE2Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T20:43:56Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:34Z"
    },
    "message": "Introduce two TUI source window methods\n\nThis adds two methods to the TUI source window.  These are just\nrenamings of existing functions.  It also changes the source window\nlist to have a more precise type, letting the code be more type-safe.\nThis will be useful again later.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (tui_refill_source_window)\n\t(tui_set_is_exec_point_at): Don't declare.\n\t* tui/tui-winsource.c (tui_update_source_windows_with_addr)\n\t(tui_source_window_base::refill): Rename from\n\ttui_refill_source_window.\n\t(tui_source_window_base::do_scroll_horizontal): Update.\n\t(tui_source_window_base::set_is_exec_point_at): Rename from\n\ttui_set_is_exec_point_at.\n\t(tui_update_all_breakpoint_info): Update.\n\t* tui/tui-stack.c (tui_show_frame_info): Update.\n\t* tui/tui-layout.c (show_data): Add cast.\n\t* tui/tui-hooks.c (tui_redisplay_source): Call refill method.\n\t* tui/tui-data.h (struct tui_source_window_base) <refill,\n\tset_is_exec_point_at>: New methods.\n\t(tui_source_windows, tui_add_to_source_windows): Update types.\n\t(tui_add_to_source_windows): Remove redundant declaration.\n\t* tui/tui-data.c (source_windows): Store tui_source_window_base.\n\t(tui_source_windows): Change return type.\n\t(tui_clear_source_windows_detail): Update.\n\t(tui_add_to_source_windows): Change type of parameter.\n\t(tui_free_all_source_wins_content): Update.",
    "tree": {
      "sha": "c111da3b4742438fd2c55474b7a4f1c38f3f0671",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c111da3b4742438fd2c55474b7a4f1c38f3f0671"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad54d15bdb71b05010ece1ef32ab22ab46794166",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad54d15bdb71b05010ece1ef32ab22ab46794166",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad54d15bdb71b05010ece1ef32ab22ab46794166",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad54d15bdb71b05010ece1ef32ab22ab46794166/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2042b506c85274b4c652fbc9291be65b2550104d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2042b506c85274b4c652fbc9291be65b2550104d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2042b506c85274b4c652fbc9291be65b2550104d"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 59,
    "deletions": 38
  },
  "files": [
    {
      "sha": "1a60375fa8beb29b17a9271b5f27aeb6955c6bc3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -1,3 +1,27 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (tui_refill_source_window)\n+\t(tui_set_is_exec_point_at): Don't declare.\n+\t* tui/tui-winsource.c (tui_update_source_windows_with_addr)\n+\t(tui_source_window_base::refill): Rename from\n+\ttui_refill_source_window.\n+\t(tui_source_window_base::do_scroll_horizontal): Update.\n+\t(tui_source_window_base::set_is_exec_point_at): Rename from\n+\ttui_set_is_exec_point_at.\n+\t(tui_update_all_breakpoint_info): Update.\n+\t* tui/tui-stack.c (tui_show_frame_info): Update.\n+\t* tui/tui-layout.c (show_data): Add cast.\n+\t* tui/tui-hooks.c (tui_redisplay_source): Call refill method.\n+\t* tui/tui-data.h (struct tui_source_window_base) <refill,\n+\tset_is_exec_point_at>: New methods.\n+\t(tui_source_windows, tui_add_to_source_windows): Update types.\n+\t(tui_add_to_source_windows): Remove redundant declaration.\n+\t* tui/tui-data.c (source_windows): Store tui_source_window_base.\n+\t(tui_source_windows): Change return type.\n+\t(tui_clear_source_windows_detail): Update.\n+\t(tui_add_to_source_windows): Change type of parameter.\n+\t(tui_free_all_source_wins_content): Update.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-wingeneral.c (tui_win_info::refresh)"
    },
    {
      "sha": "3298eb8248c34c6f8e8a87980f60835a34d6fb90",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -38,7 +38,7 @@ static enum tui_layout_type current_layout = UNDEFINED_LAYOUT;\n static int term_height, term_width;\n static struct tui_gen_win_info _locator;\n static struct tui_gen_win_info exec_info[2];\n-static std::vector<tui_win_info *> source_windows;\n+static std::vector<tui_source_window_base *> source_windows;\n static struct tui_win_info *win_with_focus = NULL;\n static struct tui_layout_def layout_def = {\n   SRC_WIN,\t\t\t/* DISPLAY_MODE */\n@@ -124,7 +124,7 @@ tui_set_win_with_focus (struct tui_win_info *win_info)\n /* Accessor for the current source window.  Usually there is only one\n    source window (either source or disassembly), but both can be\n    displayed at the same time.  */\n-std::vector<tui_win_info *> &\n+std::vector<tui_source_window_base *> &\n tui_source_windows ()\n {\n   return source_windows;\n@@ -145,7 +145,7 @@ tui_clear_source_windows ()\n void\n tui_clear_source_windows_detail ()\n {\n-  for (tui_win_info *win : tui_source_windows ())\n+  for (tui_source_window_base *win : tui_source_windows ())\n     win->clear_detail ();\n }\n \n@@ -154,7 +154,7 @@ tui_clear_source_windows_detail ()\n    one source window (either source or disassembly), but both can be\n    displayed at the same time.  */\n void\n-tui_add_to_source_windows (struct tui_win_info *win_info)\n+tui_add_to_source_windows (struct tui_source_window_base *win_info)\n {\n   if (source_windows.size () < 2)\n     source_windows.push_back (win_info);\n@@ -620,11 +620,10 @@ tui_win_info::~tui_win_info ()\n void\n tui_free_all_source_wins_content ()\n {\n-  for (tui_win_info *win_info : tui_source_windows ())\n+  for (tui_source_window_base *win_info : tui_source_windows ())\n     {\n       tui_free_win_content (&(win_info->generic));\n-      tui_source_window_base *base = (tui_source_window_base *) win_info;\n-      tui_free_win_content (base->execution_info);\n+      tui_free_win_content (win_info->execution_info);\n     }\n }\n "
    },
    {
      "sha": "183efb12a8707e4074e7a5f1b238cc8e15824ea9",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -304,6 +304,13 @@ struct tui_source_window_base : public tui_win_info\n   void make_visible (bool visible) override;\n   void refresh () override;\n \n+  /* Refill the source window's source cache and update it.  If this\n+     is a disassembly window, then just update it.  */\n+  void refill ();\n+\n+  /* Set the location of the execution point.  */\n+  void set_is_exec_point_at (struct tui_line_or_address l);\n+\n   /* Does the locator belong to this window?  */\n   bool m_has_locator = false;\n   /* Execution information window.  */\n@@ -451,10 +458,10 @@ extern void tui_set_term_width_to (int);\n extern struct tui_gen_win_info *tui_locator_win_info_ptr (void);\n extern struct tui_gen_win_info *tui_source_exec_info_win_ptr (void);\n extern struct tui_gen_win_info *tui_disassem_exec_info_win_ptr (void);\n-extern std::vector<tui_win_info *> &tui_source_windows ();\n+extern std::vector<tui_source_window_base *> &tui_source_windows ();\n extern void tui_clear_source_windows (void);\n extern void tui_clear_source_windows_detail (void);\n-extern void tui_add_to_source_windows (struct tui_win_info *);\n+extern void tui_add_to_source_windows (struct tui_source_window_base *);\n extern struct tui_win_info *tui_win_with_focus (void);\n extern void tui_set_win_with_focus (struct tui_win_info *);\n extern struct tui_layout_def *tui_layout_def (void);\n@@ -464,8 +471,6 @@ extern void tui_set_win_resized_to (int);\n extern struct tui_win_info *tui_next_win (struct tui_win_info *);\n extern struct tui_win_info *tui_prev_win (struct tui_win_info *);\n \n-extern void tui_add_to_source_windows (struct tui_win_info *);\n-\n extern unsigned int tui_tab_width;\n \n #endif /* TUI_TUI_DATA_H */"
    },
    {
      "sha": "7e94a13e90173055e7cad7419d6970cdc1a2c43d",
      "filename": "gdb/tui/tui-hooks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-hooks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-hooks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-hooks.c?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -212,7 +212,7 @@ tui_redisplay_source ()\n   if (tui_is_window_visible (SRC_WIN))\n     {\n       /* Force redisplay.  */\n-      tui_refill_source_window (tui_win_list[SRC_WIN]);\n+      TUI_SRC_WIN->refill ();\n     }\n }\n "
    },
    {
      "sha": "9b2bd0b7b574341dceeb72dc66a14057930f9d60",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -776,7 +776,8 @@ show_data (enum tui_layout_type new_layout)\n   base->m_has_locator = true;\n   tui_make_visible (locator);\n   tui_show_locator_content ();\n-  tui_add_to_source_windows (tui_win_list[win_type]);\n+  tui_add_to_source_windows\n+    ((tui_source_window_base *) tui_win_list[win_type]);\n   tui_set_current_layout_to (new_layout);\n }\n "
    },
    {
      "sha": "125a5b7a8e36c3fc63820e14f3a5caf70d28a579",
      "filename": "gdb/tui/tui-stack.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.c?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -396,7 +396,7 @@ tui_show_frame_info (struct frame_info *fi)\n \n       tui_show_locator_content ();\n       start_line = 0;\n-      for (struct tui_win_info *win_info : tui_source_windows ())\n+      for (struct tui_source_window_base *win_info : tui_source_windows ())\n \t{\n \t  union tui_which_element *item;\n \n@@ -436,7 +436,7 @@ tui_show_frame_info (struct frame_info *fi)\n \t      else\n \t\t{\n \t\t  l.u.line_no = item->locator.line_no;\n-\t\t  tui_set_is_exec_point_at (l, win_info);\n+\t\t  win_info->set_is_exec_point_at (l);\n \t\t}\n \t    }\n \t  else\n@@ -454,7 +454,7 @@ tui_show_frame_info (struct frame_info *fi)\n \t\t  else\n \t\t    {\n \t\t      a.u.addr = item->locator.addr;\n-\t\t      tui_set_is_exec_point_at (a, win_info);\n+\t\t      win_info->set_is_exec_point_at (a);\n \t\t    }\n \t\t}\n \t    }\n@@ -472,7 +472,7 @@ tui_show_frame_info (struct frame_info *fi)\n \treturn 0;\n \n       tui_show_locator_content ();\n-      for (struct tui_win_info *win_info : tui_source_windows ())\n+      for (struct tui_source_window_base *win_info : tui_source_windows ())\n \t{\n \t  tui_clear_source_content (win_info, EMPTY_SOURCE_PROMPT);\n \t  tui_update_exec_info (win_info);"
    },
    {
      "sha": "5946db75aaf4f0f729fa5cfa8d0fde829046b6ec",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 13,
      "deletions": 18,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -160,7 +160,7 @@ tui_update_source_windows_with_addr (struct gdbarch *gdbarch, CORE_ADDR addr)\n     }\n   else\n     {\n-      for (struct tui_win_info *win_info : tui_source_windows ())\n+      for (struct tui_source_window_base *win_info : tui_source_windows ())\n \t{\n \t  tui_clear_source_content (win_info, EMPTY_SOURCE_PROMPT);\n \t  tui_clear_exec_info_content (win_info);\n@@ -309,27 +309,23 @@ tui_show_source_content (struct tui_win_info *win_info)\n   win_info->generic.content_in_use = TRUE;\n }\n \n-/* Refill the source window's source cache and update it.  If WIN_INFO\n-   is a disassembly window, then just update it.  */\n+/* See tui-data.h.  */\n \n void\n-tui_refill_source_window (struct tui_win_info *win_info)\n+tui_source_window_base::refill ()\n {\n   symtab *s = nullptr;\n \n-  if (win_info->generic.type == SRC_WIN)\n+  if (generic.type == SRC_WIN)\n     {\n       symtab_and_line cursal = get_current_source_symtab_and_line ();\n       s = (cursal.symtab == NULL\n \t   ? find_pc_line_symtab (get_frame_pc (get_selected_frame (NULL)))\n \t   : cursal.symtab);\n     }\n \n-  tui_source_window_base *base = (tui_source_window_base *) win_info;\n-  tui_update_source_window_as_is (win_info,\n-\t\t\t\t  base->gdbarch,\n-\t\t\t\t  s,\n-\t\t\t\t  win_info->generic.content[0]\n+  tui_update_source_window_as_is (this, gdbarch, s,\n+\t\t\t\t  generic.content[0]\n \t\t\t\t    ->which_element.source.line_or_addr,\n \t\t\t\t  FALSE);\n }\n@@ -353,7 +349,7 @@ tui_source_window_base::do_scroll_horizontal\n \t    offset = 0;\n \t}\n       horizontal_offset = offset;\n-      tui_refill_source_window (this);\n+      refill ();\n     }\n }\n \n@@ -362,15 +358,14 @@ tui_source_window_base::do_scroll_horizontal\n    line_no.  */\n \n void\n-tui_set_is_exec_point_at (struct tui_line_or_address l, \n-\t\t\t  struct tui_win_info *win_info)\n+tui_source_window_base::set_is_exec_point_at (struct tui_line_or_address l)\n {\n   int changed = 0;\n   int i;\n-  tui_win_content content = win_info->generic.content;\n+  tui_win_content content = generic.content;\n \n   i = 0;\n-  while (i < win_info->generic.content_size)\n+  while (i < generic.content_size)\n     {\n       int new_state;\n       struct tui_line_or_address content_loa =\n@@ -389,12 +384,12 @@ tui_set_is_exec_point_at (struct tui_line_or_address l,\n         {\n           changed++;\n           content[i]->which_element.source.is_exec_point = new_state;\n-          tui_show_source_line (win_info, i + 1);\n+          tui_show_source_line (this, i + 1);\n         }\n       i++;\n     }\n   if (changed)\n-    tui_refill_source_window (win_info);\n+    refill ();\n }\n \n /* Update the execution windows to show the active breakpoints.\n@@ -403,7 +398,7 @@ tui_set_is_exec_point_at (struct tui_line_or_address l,\n void\n tui_update_all_breakpoint_info ()\n {\n-  for (tui_win_info *win : tui_source_windows ())\n+  for (tui_source_window_base *win : tui_source_windows ())\n     {\n       if (tui_update_breakpoint_info (win, FALSE))\n         {"
    },
    {
      "sha": "ada3964ad1a7c658f7d31002e28cb7bc23759350",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad54d15bdb71b05010ece1ef32ab22ab46794166/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=ad54d15bdb71b05010ece1ef32ab22ab46794166",
      "patch": "@@ -53,15 +53,12 @@ extern void tui_update_source_windows_with_line (struct symtab *,\n extern void tui_clear_source_content (struct tui_win_info *, int);\n extern void tui_erase_source_content (struct tui_win_info *, int);\n extern void tui_show_source_content (struct tui_win_info *);\n-extern void tui_refill_source_window (struct tui_win_info *);\n extern enum tui_status tui_set_exec_info_content (struct tui_win_info *);\n extern void tui_show_exec_info_content (struct tui_win_info *);\n extern void tui_erase_exec_info_content (struct tui_win_info *);\n extern void tui_clear_exec_info_content (struct tui_win_info *);\n extern void tui_update_exec_info (struct tui_win_info *);\n \n-extern void tui_set_is_exec_point_at (struct tui_line_or_address,\n-\t\t\t\t      struct tui_win_info *);\n extern enum tui_status tui_alloc_source_buffer (struct tui_win_info *);\n extern int tui_line_is_displayed (int, \n \t\t\t\t  struct tui_win_info *, "
    }
  ]
}