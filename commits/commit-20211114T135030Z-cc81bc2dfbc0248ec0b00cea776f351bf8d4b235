{
  "sha": "cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
  "node_id": "C_kwDOANOeidoAKGNjODFiYzJkZmJjMDI0OGVjMGIwMGNlYTc3NmYzNTFiZjhkNGIyMzU",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-10-11T22:42:33Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-11-14T13:50:30Z"
    },
    "message": "[PR gdb/16238] Add completer for the show user command\n\nThe 'show user' command (which shows the definition of non-python/scheme\nuser defined commands) is currently missing a completer. This is\nmentioned in PR 16238.  Having one can improve the user experience.\n\nIn this commit I\u00a0propose an implementation for such completer as well as\nthe associated tests.\n\nTested on x86_64 GNU/Linux.\n\nAll feedbacks are welcome.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=16238",
    "tree": {
      "sha": "bfc9980ff376eb6e99a9554cc7ee65421f4848f0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bfc9980ff376eb6e99a9554cc7ee65421f4848f0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b431e7a3fe8bcd47e38e5b5a6720272861449ed5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b431e7a3fe8bcd47e38e5b5a6720272861449ed5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b431e7a3fe8bcd47e38e5b5a6720272861449ed5"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 143,
    "deletions": 1
  },
  "files": [
    {
      "sha": "138a146c7d6a4a8bcaa12d7f1f0c7b70d8fe5e79",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 71,
      "deletions": 1,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
      "patch": "@@ -1631,6 +1631,75 @@ show_user (const char *args, int from_tty)\n     }\n }\n \n+/* Return true if COMMAND or any of its sub-commands is a user defined command.\n+   This is a helper function for show_user_completer.  */\n+\n+static bool\n+has_user_subcmd (struct cmd_list_element *command)\n+{\n+  if (cli_user_command_p (command))\n+    return true;\n+\n+  /* Alias command can yield false positive.  Ignore them as the targeted\n+     command should be reachable anyway.  */\n+  if (command->is_alias ())\n+    return false;\n+\n+  if (command->is_prefix ())\n+    for (struct cmd_list_element *subcommand = *command->subcommands;\n+\t subcommand != nullptr;\n+\t subcommand = subcommand->next)\n+      if (has_user_subcmd (subcommand))\n+\treturn true;\n+\n+  return false;\n+}\n+\n+/* Implement completer for the 'show user' command.  */\n+\n+static void\n+show_user_completer (cmd_list_element *,\n+\t\t     completion_tracker &tracker, const char *text,\n+\t\t     const char *word)\n+{\n+  struct cmd_list_element *cmd_group = cmdlist;\n+\n+  /* TEXT can contain a chain of commands and subcommands.  Follow the\n+     commands chain until we reach the point where the user wants a\n+     completion.  */\n+  while (word > text)\n+    {\n+      const char *curr_cmd = text;\n+      const char *after = skip_to_space (text);\n+      const size_t curr_cmd_len = after - text;\n+      text = skip_spaces (after);\n+\n+      for (struct cmd_list_element *c = cmd_group; c != nullptr; c = c->next)\n+\t{\n+\t  if (strlen (c->name) == curr_cmd_len\n+\t      && strncmp (c->name, curr_cmd, curr_cmd_len) == 0)\n+\t    {\n+\t      if (c->subcommands == nullptr)\n+\t\t/* We arrived after a command with no child, so nothing more\n+\t\t   to complete.  */\n+\t\treturn;\n+\n+\t      cmd_group = *c->subcommands;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  const int wordlen = strlen (word);\n+  for (struct cmd_list_element *c = cmd_group; c != nullptr; c = c->next)\n+    if (has_user_subcmd (c))\n+      {\n+\tif (strncmp (c->name, word, wordlen) == 0)\n+\t  tracker.add_completion\n+\t    (gdb::unique_xmalloc_ptr<char> (xstrdup (c->name)));\n+      }\n+}\n+\n /* Search through names of commands and documentations for a certain\n    regular expression.  */\n \n@@ -2593,10 +2662,11 @@ you must type \\\"disassemble 'foo.c'::bar\\\" and not \\\"disassemble foo.c:bar\\\".\"))\n   c = add_com (\"make\", class_support, make_command, _(\"\\\n Run the ``make'' program using the rest of the line as arguments.\"));\n   set_cmd_completer (c, filename_completer);\n-  add_cmd (\"user\", no_class, show_user, _(\"\\\n+  c = add_cmd (\"user\", no_class, show_user, _(\"\\\n Show definitions of non-python/scheme user defined commands.\\n\\\n Argument is the name of the user defined command.\\n\\\n With no argument, show definitions of all user defined commands.\"), &showlist);\n+  set_cmd_completer (c, show_user_completer);\n   add_com (\"apropos\", class_support, apropos_command, _(\"\\\n Search for commands matching a REGEXP.\\n\\\n Usage: apropos [-v] REGEXP\\n\\"
    },
    {
      "sha": "5468cc4d51b22bf8193c4414c0e30bddadf6ea48",
      "filename": "gdb/testsuite/gdb.base/show-user-completion.exp",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235/gdb/testsuite/gdb.base/show-user-completion.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc81bc2dfbc0248ec0b00cea776f351bf8d4b235/gdb/testsuite/gdb.base/show-user-completion.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/show-user-completion.exp?ref=cc81bc2dfbc0248ec0b00cea776f351bf8d4b235",
      "patch": "@@ -0,0 +1,72 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test tab-completion for the 'show user' command.\n+\n+load_lib completion-support.exp\n+\n+# This test does not require any file to be loaded.\n+clean_restart\n+\n+# Define the 'foo' and 'bar' commands so we have something to complete.\n+set re [multi_line \"Type commands for definition of \\\"foo\\\".\" \\\n+\t\t   \"End with a line saying just \\\"end\\\".\" \\\n+\t\t   \">$\" ]\n+gdb_test_multiple \"define foo\" \"define user command: foo\" {\n+    -re $re {\n+\tgdb_test \"print \\\"foo\\\"\\nend\" \"\" $gdb_test_name\n+    }\n+}\n+\n+set re [multi_line \"Type commands for definition of \\\"bar\\\".\" \\\n+\t\t   \"End with a line saying just \\\"end\\\".\" \\\n+\t\t   \">$\"]\n+gdb_test_multiple \"define bar\" \"define user command: bar\" {\n+    -re  $re {\n+\tgdb_test \"print \\\"bar\\\"\\nend\" \"\" $gdb_test_name\n+    }\n+}\n+\n+# The completer should show both options.\n+test_gdb_complete_multiple \"show user \" \"\" \"\" \"bar foo\"\n+\n+# If we give the beginning of one of the commands, it should complete it.\n+test_gdb_complete_unique \"show user f\" \"show user foo\"\n+test_gdb_complete_unique \"show user b\" \"show user bar\"\n+\n+# Define a user prefix.\n+gdb_test \"define-prefix mygroup\"\n+\n+# Add a user defined command in the user defined prefix.\n+set re [multi_line  \"Type commands for definition of \\\"mygroup mycommand\\\".\" \\\n+\t\t    \"End with a line saying just \\\"end\\\".\" \\\n+\t\t    \">$\"]\n+set test_name \"define user command: mygroup mycommand\"\n+gdb_test_multiple \"define mygroup mycommand\" $test_name {\n+    -re  $re {\n+\tgdb_test \"print \\\"42\\\"\\nend\" \"\" $gdb_test_name\n+    }\n+}\n+\n+with_test_prefix \"with user-prefix\" {\n+    # We now expect the completion to yield only 3 results.  As the 'mycommand'\n+    # is within the 'mygroup' prefix, it should not be reachable without\n+    # traversing 'mygroup' first.\n+    test_gdb_complete_multiple \"show user \" \"\" \"\" \"bar foo mygroup\"\n+}\n+\n+# Check that we can complete commands defined under a prefix.\n+test_gdb_complete_unique \"show user m\" \"show user mygroup\"\n+test_gdb_complete_unique \"show user mygroup \" \"show user mygroup mycommand\""
    }
  ]
}