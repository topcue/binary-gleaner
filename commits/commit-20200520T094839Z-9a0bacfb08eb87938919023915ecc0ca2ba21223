{
  "sha": "9a0bacfb08eb87938919023915ecc0ca2ba21223",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWEwYmFjZmIwOGViODc5Mzg5MTkwMjM5MTVlY2MwY2EyYmEyMTIyMw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-20T09:48:39Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-20T09:48:39Z"
    },
    "message": "[gdb/symtab] Handle .gdb_index in ada language mode\n\nWhen running test-case gdb.base/with.exp with target board cc-with-gdb-index,\nwe have:\n...\n(gdb) PASS: gdb.base/with.exp: basics: show language\nwith language ada -- print g_s^M\n'g_s' has unknown type; cast it to its declared type^M\n(gdb) FAIL: gdb.base/with.exp: basics: with language ada -- print g_s\n...\n\nThis is due to this bit in dw2_map_matching_symbols:\n...\n  if (dwarf2_per_objfile->index_table != nullptr)\n    {\n      /* Ada currently doesn't support .gdb_index (see PR24713).  We can get\n\t here though if the current language is Ada for a non-Ada objfile\n\t using GNU index.  As Ada does not look for non-Ada symbols this\n\t function should just return.  */\n      return;\n    }\n...\n\nWhile the reasoning in the comment may be sound from language perspective, it\ndoes introduce an inconsistency in gdb behaviour between:\n- having a .gdb_index section, and\n- having a .gdb_names section, or a partial symtab, or -readnow.\n\nFix the inconsistency by completing implementation of\ndw2_map_matching_symbols.\n\nTested on x86_64-linux, both with native and target board\ncc-with-debug-index.\n\ngdb/ChangeLog:\n\n2020-05-20  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25833\n\t* dwarf2/read.c (dw2_map_matching_symbols): Handle .gdb_index.\n\ngdb/testsuite/ChangeLog:\n\n2020-05-20  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25833\n\t* gdb.base/with-mf-inc.c: New test.\n\t* gdb.base/with-mf-main.c: New test.\n\t* gdb.base/with-mf.exp: New file.",
    "tree": {
      "sha": "2d5e055ca530385b3a022cf9b6b7902bce000c76",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d5e055ca530385b3a022cf9b6b7902bce000c76"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a0bacfb08eb87938919023915ecc0ca2ba21223",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a0bacfb08eb87938919023915ecc0ca2ba21223",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a0bacfb08eb87938919023915ecc0ca2ba21223",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a0bacfb08eb87938919023915ecc0ca2ba21223/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b958a48e1322880f23cdb0a1c35643dd27d3ddb"
    }
  ],
  "stats": {
    "total": 161,
    "additions": 153,
    "deletions": 8
  },
  "files": [
    {
      "sha": "6a7cbf38c01bd525668ee490a7f92cd7806bd3b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-20  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25833\n+\t* dwarf2/read.c (dw2_map_matching_symbols): Handle .gdb_index.\n+\n 2020-05-20  Alan Modra  <amodra@gmail.com>\n \n \tPR 25993"
    },
    {
      "sha": "ded71f53b591ba74f9795789eeca909f230b70c8",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 44,
      "deletions": 8,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -3649,6 +3649,20 @@ dw2_expand_symtabs_with_fullname (struct objfile *objfile,\n     }\n }\n \n+static void\n+dw2_expand_symtabs_matching_symbol\n+  (mapped_index_base &index,\n+   const lookup_name_info &lookup_name_in,\n+   gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+   enum search_domain kind,\n+   gdb::function_view<bool (offset_type)> match_callback);\n+\n+static void\n+dw2_expand_symtabs_matching_one\n+  (struct dwarf2_per_cu_data *per_cu,\n+   gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+   gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify);\n+\n static void\n dw2_map_matching_symbols\n   (struct objfile *objfile,\n@@ -3661,19 +3675,41 @@ dw2_map_matching_symbols\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = get_dwarf2_per_objfile (objfile);\n \n+  const block_enum block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n+\n   if (dwarf2_per_objfile->index_table != nullptr)\n     {\n       /* Ada currently doesn't support .gdb_index (see PR24713).  We can get\n \t here though if the current language is Ada for a non-Ada objfile\n-\t using GNU index.  As Ada does not look for non-Ada symbols this\n-\t function should just return.  */\n-      return;\n-    }\n+\t using GNU index.  */\n+      mapped_index &index = *dwarf2_per_objfile->index_table;\n+\n+      const char *match_name = name.ada ().lookup_name ().c_str ();\n+      auto matcher = [&] (const char *symname)\n+\t{\n+\t  if (ordered_compare == nullptr)\n+\t    return true;\n+\t  return ordered_compare (symname, match_name) == 0;\n+\t};\n+\n+      dw2_expand_symtabs_matching_symbol (index, name, matcher, ALL_DOMAIN,\n+\t\t\t\t\t  [&] (offset_type namei)\n+      {\n+\tstruct dw2_symtab_iterator iter;\n+\tstruct dwarf2_per_cu_data *per_cu;\n \n-  /* We have -readnow: no .gdb_index, but no partial symtabs either.  So,\n-     inline psym_map_matching_symbols here, assuming all partial symtabs have\n-     been read in.  */\n-  const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n+\tdw2_symtab_iter_init (&iter, dwarf2_per_objfile, block_kind, domain,\n+\t\t\t      match_name);\n+\twhile ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n+\t  dw2_expand_symtabs_matching_one (per_cu, nullptr, nullptr);\n+\treturn true;\n+      });\n+    }\n+  else\n+    {\n+      /* We have -readnow: no .gdb_index, but no partial symtabs either.  So,\n+\t proceed assuming all symtabs have been read in.  */\n+    }\n \n   for (compunit_symtab *cust : objfile->compunits ())\n     {"
    },
    {
      "sha": "cb038b104c4c8a1cf432e8229f8b3c7a8ae0683e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-20  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25833\n+\t* gdb.base/with-mf-inc.c: New test.\n+\t* gdb.base/with-mf-main.c: New test.\n+\t* gdb.base/with-mf.exp: New file.\n+\n 2020-05-19  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.rust/simple.exp: Restore missing test result."
    },
    {
      "sha": "491be7fba24a2f035c869006bd8ce9a8ebf0f789",
      "filename": "gdb/testsuite/gdb.base/with-mf-inc.c",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf-inc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf-inc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/with-mf-inc.c?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -0,0 +1,35 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Non-main part of with.c.  */\n+\n+int xxx1 = 123;\n+\n+struct S\n+{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+struct S g_s = {1, 2, 3};\n+\n+void\n+inc ()\n+{\n+  g_s.a++;;\n+}"
    },
    {
      "sha": "b50d98f2f29d4da031b5c91c973a3108f5b33be9",
      "filename": "gdb/testsuite/gdb.base/with-mf-main.c",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/with-mf-main.c?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -0,0 +1,28 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Main part of with.c.  */\n+\n+extern void inc (void);\n+\n+int\n+main ()\n+{\n+  inc ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "6b3663c570af20150cc072b6a5441d22ea0afbf5",
      "filename": "gdb/testsuite/gdb.base/with-mf.exp",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a0bacfb08eb87938919023915ecc0ca2ba21223/gdb/testsuite/gdb.base/with-mf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/with-mf.exp?ref=9a0bacfb08eb87938919023915ecc0ca2ba21223",
      "patch": "@@ -0,0 +1,34 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test .gdb_index in ada language mode.\n+\n+standard_testfile with-mf-main.c with-mf-inc.c\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile \"$srcfile $srcfile2\" \\\n+\t debug]} {\n+    return -1\n+}\n+\n+if { [ensure_gdb_index $binfile] == -1 } {\n+    return -1\n+}\n+\n+clean_restart $binfile\n+\n+gdb_test \"with language ada -- print g_s\" \\\n+    \" = \\\\(a => 1, b => 2, c => 3\\\\)\""
    }
  ]
}