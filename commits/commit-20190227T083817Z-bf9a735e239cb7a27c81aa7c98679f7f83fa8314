{
  "sha": "bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY5YTczNWUyMzljYjdhMjdjODFhYTdjOTg2NzlmN2Y4M2ZhODMxNA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-22T22:04:53Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-27T08:38:17Z"
    },
    "message": "gdb: Handle alignment for C++ structures with static members\n\nIn 'type_align' when computing the alignment of a structure we should\nnot consider the alignment of static structure members, these are\nusually stored outside of the structure and therefore don't have any\nimpact on the structures alignment requirements.\n\nI've extended the existing alignment calculating test to compile in\nboth C and C++ now so that we can create structures with static\nmembers.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (type_align): Don't consider static members when\n\tcomputing structure alignment.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/align.exp: Extend to compile in both C and C++, and add\n\ttests for structs with static members.",
    "tree": {
      "sha": "523aab5bf44a2e44119a68413dfc7e072fd67a21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/523aab5bf44a2e44119a68413dfc7e072fd67a21"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5561fc304ff2a93a33a42df63eaf18b92483b307",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5561fc304ff2a93a33a42df63eaf18b92483b307",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5561fc304ff2a93a33a42df63eaf18b92483b307"
    }
  ],
  "stats": {
    "total": 207,
    "additions": 147,
    "deletions": 60
  },
  "files": [
    {
      "sha": "ae9a68fec0eef65e7e5027f165434827e4ea3e76",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdbtypes.c (type_align): Don't consider static members when\n+\tcomputing structure alignment.\n+\n 2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* arc-tdep.c (arc_type_align): Provide alignment for basic types,"
    },
    {
      "sha": "b5f269241c4e19b7ad1c59452e16b7dd5d7a90d9",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
      "patch": "@@ -3039,15 +3039,18 @@ type_align (struct type *type)\n \t  }\n \tfor (unsigned i = 0; i < TYPE_NFIELDS (type); ++i)\n \t  {\n-\t    ULONGEST f_align = type_align (TYPE_FIELD_TYPE (type, i));\n-\t    if (f_align == 0)\n+\t    if (!field_is_static (&TYPE_FIELD (type, i)))\n \t      {\n-\t\t/* Don't pretend we know something we don't.  */\n-\t\talign = 0;\n-\t\tbreak;\n+\t\tULONGEST f_align = type_align (TYPE_FIELD_TYPE (type, i));\n+\t\tif (f_align == 0)\n+\t\t  {\n+\t\t    /* Don't pretend we know something we don't.  */\n+\t\t    align = 0;\n+\t\t    break;\n+\t\t  }\n+\t\tif (f_align > align)\n+\t\t  align = f_align;\n \t      }\n-\t    if (f_align > align)\n-\t      align = f_align;\n \t  }\n       }\n       break;"
    },
    {
      "sha": "afe39de20290fa21751d7cb93dc7daf40ba6b510",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/align.exp: Extend to compile in both C and C++, and add\n+\ttests for structs with static members.\n+\n 2019-02-26  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.python/py-value.exp (test_value_from_buffer): Check for"
    },
    {
      "sha": "558625d1b3e7a31fdff3416b4640d51c04d5d189",
      "filename": "gdb/testsuite/gdb.base/align.exp",
      "status": "modified",
      "additions": 127,
      "deletions": 53,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/testsuite/gdb.base/align.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9a735e239cb7a27c81aa7c98679f7f83fa8314/gdb/testsuite/gdb.base/align.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/align.exp?ref=bf9a735e239cb7a27c81aa7c98679f7f83fa8314",
      "patch": "@@ -15,8 +15,15 @@\n \n # This file is part of the gdb testsuite\n \n-# This tests that C11 _Alignof works in gdb, and that it agrees with\n-# the compiler.\n+# This tests that C11 _Alignof and C++11 alignof works in gdb, and\n+# that it agrees with the compiler.\n+\n+# Only test C++ if we are able.  Always use C.\n+if { [skip_cplus_tests] || [get_compiler_info \"c++\"] } {\n+    set lang {c}\n+} else {\n+    set lang {c c++}\n+}\n \n # The types we're going to test.\n \n@@ -38,72 +45,139 @@ if {[has_int128_c]} {\n     lappend typelist __int128\n }\n \n-# Create the test file.\n+# Build source file for testing alignment handling of language LANG.\n+# Returns the name of the newly created source file.\n+proc prepare_test_source_file { lang } {\n+    global typelist\n+\n+    # Create the test file.\n \n-set filename [standard_output_file align.c]\n-set outfile [open $filename w]\n+    if { $lang == \"c++\" } {\n+\tset suffix \"cpp\"\n+\tset align_func \"alignof\"\n+    } else {\n+\tset suffix \"c\"\n+\tset align_func \"_Alignof\"\n+    }\n \n-# Prologue.\n-puts -nonewline $outfile \"#define DEF(T,U) struct align_pair_ ## T ## _x_ ## U \"\n-puts $outfile \"{ T one; U two; }\"\n-puts $outfile \"unsigned a_void = _Alignof(void);\"\n+    set filename [standard_output_file \"$lang/align.$suffix\"]\n+    set outfile [open $filename w]\n \n-# First emit single items.\n-foreach type $typelist {\n-    set utype [join [split $type] _]\n-    if {$type != $utype} {\n-\tputs $outfile \"typedef $type $utype;\"\n+    # Prologue.\n+    puts -nonewline $outfile \"#define DEF(T,U) struct align_pair_ ## T ## _x_ ## U \"\n+    puts $outfile \"{ T one; U two; }\"\n+    if { $lang == \"c++\" } {\n+\tputs -nonewline $outfile \"#define DEF_WITH_STATIC(T,U) struct align_pair_static_ ## T ## _x_ ## U \"\n+\tputs $outfile \"{ static T one; U two; }\"\n+    }\n+    if { $lang == \"c\" } {\n+\tputs $outfile \"unsigned a_void = ${align_func} (void);\"\n     }\n-    puts $outfile \"$type item_$utype;\"\n-    puts $outfile \"unsigned a_$utype\\n  = _Alignof ($type);\"\n-    set utype [join [split $type] _]\n-}\n \n-# Now emit all pairs.\n-foreach type $typelist {\n-    set utype [join [split $type] _]\n-    foreach inner $typelist {\n-\tset uinner [join [split $inner] _]\n-\tputs $outfile \"DEF ($utype, $uinner);\"\n-\tset joined \"${utype}_x_${uinner}\"\n-\tputs $outfile \"struct align_pair_$joined item_${joined};\"\n-\tputs $outfile \"unsigned a_${joined}\"\n-\tputs $outfile \"  = _Alignof (struct align_pair_${joined});\"\n+    # First emit single items.\n+    foreach type $typelist {\n+\tset utype [join [split $type] _]\n+\tif {$type != $utype} {\n+\t    puts $outfile \"typedef $type $utype;\"\n+\t}\n+\tputs $outfile \"$type item_$utype;\"\n+\tif { $lang == \"c\" } {\n+\t    puts $outfile \"unsigned a_$utype\\n  = ${align_func} ($type);\"\n+\t}\n+\tset utype [join [split $type] _]\n     }\n-}\n \n-# Epilogue.\n-puts $outfile {\n-    int main() {\n-\treturn 0;\n+    # Now emit all pairs.\n+    foreach type $typelist {\n+\tset utype [join [split $type] _]\n+\tforeach inner $typelist {\n+\t    set uinner [join [split $inner] _]\n+\t    puts $outfile \"DEF ($utype, $uinner);\"\n+\t    set joined \"${utype}_x_${uinner}\"\n+\t    puts $outfile \"struct align_pair_$joined item_${joined};\"\n+\t    puts $outfile \"unsigned a_${joined}\"\n+\t    puts $outfile \"  = ${align_func} (struct align_pair_${joined});\"\n+\n+\t    if { $lang == \"c++\" } {\n+\t\tputs $outfile \"DEF_WITH_STATIC ($utype, $uinner);\"\n+\t\tset joined \"${utype}_x_${uinner}\"\n+\t\tputs $outfile \"struct align_pair_static_$joined item_static_${joined};\"\n+\t\tputs $outfile \"unsigned a_static_${joined}\"\n+\t\tputs $outfile \"  = ${align_func} (struct align_pair_static_${joined});\"\n+\t    }\n+\t}\n     }\n-}\n \n-close $outfile\n+    # Epilogue.\n+    puts $outfile {\n+\tint main() {\n+\t    return 0;\n+\t}\n+    }\n \n-standard_testfile $filename\n+    close $outfile\n \n-if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug}]} {\n-    return -1\n+    return $filename\n }\n \n-if {![runto_main]} {\n-    perror \"test suppressed\"\n-    return\n-}\n+# Run the alignment test for the language LANG.\n+proc run_alignment_test { lang } {\n+    global testfile srcfile typelist\n+    global subdir\n+\n+    set filename [prepare_test_source_file $lang]\n \n-foreach type $typelist {\n-    set utype [join [split $type] _]\n-    set expected [get_integer_valueof a_$utype 0]\n-    gdb_test \"print _Alignof($type)\" \" = $expected\"\n+    standard_testfile $filename\n+    if {[prepare_for_testing \"failed to prepare\" \"$lang/$testfile\" $srcfile {debug}]} {\n+\treturn -1\n+    }\n+\n+    if {![runto_main]} {\n+\tperror \"test suppressed\"\n+\treturn\n+    }\n+\n+    if { $lang == \"c++\" } {\n+\tset align_func \"alignof\"\n+    } else {\n+\tset align_func \"_Alignof\"\n+    }\n \n-    foreach inner $typelist {\n-\tset uinner [join [split $inner] _]\n-\tset expected [get_integer_valueof a_${utype}_x_${uinner} 0]\n-\tgdb_test \"print _Alignof(struct align_pair_${utype}_x_${uinner})\" \\\n-\t    \" = $expected\"\n+    foreach type $typelist {\n+\tset utype [join [split $type] _]\n+\tif { $lang == \"c\" } {\n+\t    set expected [get_integer_valueof a_$utype 0]\n+\t    gdb_test \"print ${align_func}($type)\" \" = $expected\"\n+\t}\n+\n+\tforeach inner $typelist {\n+\t    set uinner [join [split $inner] _]\n+\t    set expected [get_integer_valueof a_${utype}_x_${uinner} 0]\n+\t    gdb_test \"print ${align_func}(struct align_pair_${utype}_x_${uinner})\" \\\n+\t\t\" = $expected\"\n+\n+\t    if { $lang == \"c++\" } {\n+\t\tset expected [get_integer_valueof a_static_${utype}_x_${uinner} 0]\n+\t\tgdb_test \"print ${align_func}(struct align_pair_static_${utype}_x_${uinner})\" \\\n+\t\t    \" = $expected\"\n+\t    }\n+\t}\n+    }\n+\n+    if { $lang == \"c\" } {\n+\tset expected [get_integer_valueof a_void 0]\n+\tgdb_test \"print ${align_func}(void)\" \" = $expected\"\n     }\n }\n \n-set expected [get_integer_valueof a_void 0]\n-gdb_test \"print _Alignof(void)\" \" = $expected\"\n+# Create nested 'c' and 'c++' directories within this tests directory.\n+foreach l $lang {\n+    set dir \"$l\"\n+    remote_exec host \"rm -rf [standard_output_file ${dir}]\"\n+    remote_exec host \"mkdir -p [standard_output_file ${dir}]\"\n+}\n+\n+# Now run the test for each language.\n+foreach_with_prefix l $lang {\n+    run_alignment_test $l\n+}"
    }
  ]
}