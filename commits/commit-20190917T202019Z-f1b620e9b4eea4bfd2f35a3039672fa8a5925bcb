{
  "sha": "f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjFiNjIwZTliNGVlYTRiZmQyZjM1YTMwMzk2NzJmYThhNTkyNWJjYg==",
  "commit": {
    "author": {
      "name": "Mike Gulick",
      "email": "mgulick@mathworks.com",
      "date": "2019-09-12T15:16:06Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-17T20:20:19Z"
    },
    "message": "gdb: Look for compilation directory relative to directory search path\n\nThe 'directory' command allows the user to provide a list of filesystem\ndirectories in which to search for source code.  The directories in this\nsearch path are used as the base directory for the source filename from\nthe debug information (DW_AT_name).  Thus the directory search path\nprovides alternatives to the existing compilation directory from the\ndebug information (DW_AT_comp_dir).  Generally speaking, DW_AT_name\nstores the filename argument passed to the compiler (including any\ndirectory components), and DW_AT_comp_dir stores the current working\ndirectory from which the compiler was executed.  For example:\n\n    $ cd /path/to/project/subdir1\n    $ gcc -c a/test.c -g\n\nThe corresponding debug information will look like this:\n\n    DW_AT_name      : a/test.c\n    DW_AT_comp_dir  : /path/to/project/subdir1\n\nWhen compiling with the -fdebug-prefix-map GCC option, the compilation\ndirectory can be arbitrarily rewritten.  In the above example, we may\nrewrite the compilation directory as follows:\n\n    $ gcc -c a/test.c -g -fdebug-prefix-map=/path/to/project=\n\nIn this case, the corresponding debug information will look like:\n\n    DW_AT_name      : a/test.c\n    DW_AT_comp_dir  : /subdir1\n\nThis prevents GDB from finding the corresponding source code based on\nthe debug information alone.  In some cases, a substitute-path command\ncan be used to re-map a consistent prefix in the rewritten compilation\ndirectory to the real filesystem path.  However, there may not be a\nconsistent prefix remaining in the debug symbols (for example in a\nproject that has source code in many subdirectories under the project's\nroot), thereby requiring multiple substitute-path rules.  In this case,\nit is easier to add the missing prefix to the directory search path via\nthe 'directory' command.\n\nThe function find_and_open_source currently searches in:\n\n    SEARCH_PATH/FILENAME\n\nwhere SEARCH_PATH corresponds to each individual entry in the directory\nsearch path (which is guaranteed to contain the compilation directory\nfrom the debug information, as well as the current working directory).\nFILENAME corresponds to the source filename (DW_AT_name), which may have\ndirectory components in it.  In addition, GDB searches in:\n\n    SEARCH_PATH/FILE_BASENAME\n\nwhere FILE_BASENAME is the basename of the DW_AT_name entry.\n\nThis change modifies find_and_open_source to additionally search in:\n\n    SEARCH_PATH/COMP_DIR/FILENAME\n\nwhere COMP_DIR is the compilation directory from the debug symbols.  In\nthe example given earlier, running:\n\n    (gdb) directory /path/to/project\n\nwill now allow GDB to correctly locate the source code from the debug\ninformation.\n\ngdb/ChangeLog:\n\n\t* source.c (prepare_path_for_appending): New function.\n\t(openp): Make use of new function.\n\t(find_and_open_source): Search for the compilation directory and\n\tsource file as a relative path beneath the directory search path.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Source Path): Additional text to better describe\n\thow the source path directory list is used when searching for\n\tsource files.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/source-dir.exp: Add extra test for mapped compilation\n\tdirectory.",
    "tree": {
      "sha": "ab68956943ff5f00bad36d0e6b7165c260a4c963",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab68956943ff5f00bad36d0e6b7165c260a4c963"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/comments",
  "author": {
    "login": "mgulick",
    "id": 4109840,
    "node_id": "MDQ6VXNlcjQxMDk4NDA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4109840?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mgulick",
    "html_url": "https://github.com/mgulick",
    "followers_url": "https://api.github.com/users/mgulick/followers",
    "following_url": "https://api.github.com/users/mgulick/following{/other_user}",
    "gists_url": "https://api.github.com/users/mgulick/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mgulick/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mgulick/subscriptions",
    "organizations_url": "https://api.github.com/users/mgulick/orgs",
    "repos_url": "https://api.github.com/users/mgulick/repos",
    "events_url": "https://api.github.com/users/mgulick/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mgulick/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67f3ed6afef86d08ef9989cc251eac585e9ef9cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67f3ed6afef86d08ef9989cc251eac585e9ef9cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67f3ed6afef86d08ef9989cc251eac585e9ef9cf"
    }
  ],
  "stats": {
    "total": 385,
    "additions": 343,
    "deletions": 42
  },
  "files": [
    {
      "sha": "3bf43d2dfebde9fdfd6ed078e9b3e5f71cbae768",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -1,3 +1,10 @@\n+2019-09-17  Mike Gulick  <mgulick@mathworks.com>\n+\n+\t* source.c (prepare_path_for_appending): New function.\n+\t(openp): Make use of new function.\n+\t(find_and_open_source): Search for the compilation directory and\n+\tsource file as a relative path beneath the directory search path.\n+\n 2019-09-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* source-cache.c (source_cache::get_line_charpos): Catch"
    },
    {
      "sha": "a16d32d48aeae96c735e89cadf7db919927b5a4e",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -1,3 +1,9 @@\n+2019-09-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Source Path): Additional text to better describe\n+\thow the source path directory list is used when searching for\n+\tsource files.\n+\n 2019-09-12  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* gdb.texinfo (Ada Tasks): Tell the task name is printed, update"
    },
    {
      "sha": "f4bfd9f9809b63045feeb416ef644def2f6b87a2",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 108,
      "deletions": 27,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -8954,23 +8954,113 @@ it tries all the directories in the list, in the order they are present\n in the list, until it finds a file with the desired name.\n \n For example, suppose an executable references the file\n-@file{/usr/src/foo-1.0/lib/foo.c}, and our source path is\n-@file{/mnt/cross}.  The file is first looked up literally; if this\n-fails, @file{/mnt/cross/usr/src/foo-1.0/lib/foo.c} is tried; if this\n-fails, @file{/mnt/cross/foo.c} is opened; if this fails, an error\n-message is printed.  @value{GDBN} does not look up the parts of the\n+@file{/usr/src/foo-1.0/lib/foo.c}, does not record a compilation\n+directory, and the @dfn{source path} is @file{/mnt/cross}.\n+@value{GDBN} would look for the source file in the following\n+locations:\n+\n+@enumerate\n+\n+@item @file{/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/mnt/cross/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/mnt/cross/foo.c}\n+\n+@end enumerate\n+\n+If the source file is not present at any of the above locations then\n+an error is printed.  @value{GDBN} does not look up the parts of the\n source file name, such as @file{/mnt/cross/src/foo-1.0/lib/foo.c}.\n Likewise, the subdirectories of the source path are not searched: if\n the source path is @file{/mnt/cross}, and the binary refers to\n @file{foo.c}, @value{GDBN} would not find it under\n @file{/mnt/cross/usr/src/foo-1.0/lib}.\n \n Plain file names, relative file names with leading directories, file\n-names containing dots, etc.@: are all treated as described above; for\n-instance, if the source path is @file{/mnt/cross}, and the source file\n-is recorded as @file{../lib/foo.c}, @value{GDBN} would first try\n-@file{../lib/foo.c}, then @file{/mnt/cross/../lib/foo.c}, and after\n-that---@file{/mnt/cross/foo.c}.\n+names containing dots, etc.@: are all treated as described above,\n+except that non-absolute file names are not looked up literally.  If\n+the @dfn{source path} is @file{/mnt/cross}, the source file is\n+recorded as @file{../lib/foo.c}, and no compilation directory is\n+recorded, then @value{GDBN} will search in the following locations:\n+\n+@enumerate\n+\n+@item @file{/mnt/cross/../lib/foo.c}\n+@item @file{/mnt/cross/foo.c}\n+\n+@end enumerate\n+\n+@kindex cdir\n+@kindex cwd\n+@vindex $cdir@r{, convenience variable}\n+@vindex $cwd@r{, convenience variable}\n+@cindex compilation directory\n+@cindex current directory\n+@cindex working directory\n+@cindex directory, current\n+@cindex directory, compilation\n+The @dfn{source path} will always include two special entries\n+@samp{$cdir} and @samp{$cwd}, these refer to the compilation directory\n+(if one is recorded) and the current working directory respectively.\n+\n+@samp{$cdir} causes @value{GDBN} to search within the compilation\n+directory, if one is recorded in the debug information.  If no\n+compilation directory is recorded in the debug information then\n+@samp{$cdir} is ignored.\n+\n+@samp{$cwd} is not the same as @samp{.}---the former tracks the\n+current working directory as it changes during your @value{GDBN}\n+session, while the latter is immediately expanded to the current\n+directory at the time you add an entry to the source path.\n+\n+If a compilation directory is recorded in the debug information, and\n+@value{GDBN} has not found the source file after the first search\n+using @dfn{source path}, then @value{GDBN} will combine the\n+compilation directory and the filename, and then search for the source\n+file again using the @dfn{source path}.\n+\n+For example, if the executable records the source file as\n+@file{/usr/src/foo-1.0/lib/foo.c}, the compilation directory is\n+recorded as @file{/project/build}, and the @dfn{source path} is\n+@file{/mnt/cross:$cdir:$cwd} while the current working directory of\n+the @value{GDBN} session is @file{/home/user}, then @value{GDBN} will\n+search for the source file in the following loctions:\n+\n+@enumerate\n+\n+@item @file{/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/mnt/cross/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/project/build/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/home/user/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/mnt/cross/project/build/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/project/build/project/build/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/home/user/project/build/usr/src/foo-1.0/lib/foo.c}\n+@item @file{/mnt/cross/foo.c}\n+@item @file{/project/build/foo.c}\n+@item @file{/home/user/foo.c}\n+\n+@end enumerate\n+\n+If the file name in the previous example had been recorded in the\n+executable as a relative path rather than an absolute path, then the\n+first look up would not have occurred, but all of the remaining steps\n+would be similar.\n+\n+When searching for source files on MS-DOS and MS-Windows, where\n+absolute paths start with a drive letter (e.g.\n+@file{C:/project/foo.c}), @value{GDBN} will remove the drive letter\n+from the file name before appending it to a search directory from\n+@dfn{source path}; for instance if the executable references the\n+source file @file{C:/project/foo.c} and @dfn{source path} is set to\n+@file{D:/mnt/cross}, then @value{GDBN} will search in the following\n+locations for the source file:\n+\n+@enumerate\n+\n+@item @file{C:/project/foo.c}\n+@item @file{D:/mnt/cross/project/foo.c}\n+@item @file{D:/mnt/cross/foo.c}\n+\n+@end enumerate\n \n Note that the executable search path is @emph{not} used to locate the\n source files.\n@@ -8981,8 +9071,8 @@ each line is in the file.\n \n @kindex directory\n @kindex dir\n-When you start @value{GDBN}, its source path includes only @samp{cdir}\n-and @samp{cwd}, in that order.\n+When you start @value{GDBN}, its source path includes only @samp{$cdir}\n+and @samp{$cwd}, in that order.\n To add other directories, use the @code{directory} command.\n \n The search path is used to find both program source files and @value{GDBN}\n@@ -9058,21 +9148,12 @@ part of absolute file names) or\n whitespace.  You may specify a directory that is already in the source\n path; this moves it forward, so @value{GDBN} searches it sooner.\n \n-@kindex cdir\n-@kindex cwd\n-@vindex $cdir@r{, convenience variable}\n-@vindex $cwd@r{, convenience variable}\n-@cindex compilation directory\n-@cindex current directory\n-@cindex working directory\n-@cindex directory, current\n-@cindex directory, compilation\n-You can use the string @samp{$cdir} to refer to the compilation\n-directory (if one is recorded), and @samp{$cwd} to refer to the current\n-working directory.  @samp{$cwd} is not the same as @samp{.}---the former\n-tracks the current working directory as it changes during your @value{GDBN}\n-session, while the latter is immediately expanded to the current\n-directory at the time you add an entry to the source path.\n+The special strings @samp{$cdir} (to refer to the compilation\n+directory, if one is recorded), and @samp{$cwd} (to refer to the\n+current working directory) can also be included in the list of\n+directories @var{dirname}.  Though these will already be in the source\n+path they will be moved forward in the list so @value{GDBN} searches\n+them sooner.\n \n @item directory\n Reset the source path to its default value (@samp{$cdir:$cwd} on Unix systems).  This requires confirmation."
    },
    {
      "sha": "0171f2748b42b51f37715c429a2ef1e266089c26",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 58,
      "deletions": 11,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -654,6 +654,36 @@ info_source_command (const char *ignore, int from_tty)\n }\n \f\n \n+/* Helper function to remove characters from the start of PATH so that\n+   PATH can then be appended to a directory name.  We remove leading drive\n+   letters (for dos) as well as leading '/' characters and './'\n+   sequences.  */\n+\n+const char *\n+prepare_path_for_appending (const char *path)\n+{\n+  /* For dos paths, d:/foo -> /foo, and d:foo -> foo.  */\n+  if (HAS_DRIVE_SPEC (path))\n+    path = STRIP_DRIVE_SPEC (path);\n+\n+  const char *old_path;\n+  do\n+    {\n+      old_path = path;\n+\n+      /* /foo => foo, to avoid multiple slashes that Emacs doesn't like.  */\n+      while (IS_DIR_SEPARATOR(path[0]))\n+\tpath++;\n+\n+      /* ./foo => foo */\n+      while (path[0] == '.' && IS_DIR_SEPARATOR (path[1]))\n+\tpath += 2;\n+    }\n+  while (old_path != path);\n+\n+  return path;\n+}\n+\n /* Open a file named STRING, searching path PATH (dir names sep by some char)\n    using mode MODE in the calls to open.  You cannot use this function to\n    create files (O_CREAT).\n@@ -747,17 +777,9 @@ openp (const char *path, openp_flags opts, const char *string,\n \t    goto done;\n     }\n \n-  /* For dos paths, d:/foo -> /foo, and d:foo -> foo.  */\n-  if (HAS_DRIVE_SPEC (string))\n-    string = STRIP_DRIVE_SPEC (string);\n-\n-  /* /foo => foo, to avoid multiple slashes that Emacs doesn't like.  */\n-  while (IS_DIR_SEPARATOR(string[0]))\n-    string++;\n-\n-  /* ./foo => foo */\n-  while (string[0] == '.' && IS_DIR_SEPARATOR (string[1]))\n-    string += 2;\n+  /* Remove characters from the start of PATH that we don't need when PATH\n+     is appended to a directory name.  */\n+  string = prepare_path_for_appending (string);\n \n   alloclen = strlen (path) + strlen (string) + 2;\n   filename = (char *) alloca (alloclen);\n@@ -1033,7 +1055,32 @@ find_and_open_source (const char *filename,\n   openp_flags flags = OPF_SEARCH_IN_PATH;\n   if (basenames_may_differ)\n     flags |= OPF_RETURN_REALPATH;\n+\n+  /* Try to locate file using filename.  */\n   result = openp (path, flags, filename, OPEN_MODE, fullname);\n+  if (result < 0 && dirname != NULL)\n+    {\n+      /* Remove characters from the start of PATH that we don't need when\n+\t PATH is appended to a directory name.  */\n+      const char *filename_start = prepare_path_for_appending (filename);\n+\n+      /* Try to locate file using compilation dir + filename.  This is\n+\t helpful if part of the compilation directory was removed,\n+\t e.g. using gcc's -fdebug-prefix-map, and we have added the missing\n+\t prefix to source_path.  */\n+      std::string cdir_filename (dirname);\n+\n+      /* Remove any trailing directory separators.  */\n+      while (IS_DIR_SEPARATOR (cdir_filename.back ()))\n+\tcdir_filename.pop_back ();\n+\n+      /* Add our own directory separator.  */\n+      cdir_filename.append (SLASH_STRING);\n+      cdir_filename.append (filename_start);\n+\n+      result = openp (path, flags, cdir_filename.c_str (), OPEN_MODE,\n+\t\t      fullname);\n+    }\n   if (result < 0)\n     {\n       /* Didn't work.  Try using just the basename.  */"
    },
    {
      "sha": "ed838e947e9fc30f8346232ee01f37a7f167c216",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/source-dir.exp: Add extra test for mapped compilation\n+\tdirectory.\n+\n 2019-09-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/list-missing-source.exp: New file."
    },
    {
      "sha": "d94b8074ec0a799ef09a85b0e88fa9446db3035e",
      "filename": "gdb/testsuite/gdb.base/source-dir.c",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/gdb.base/source-dir.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/gdb.base/source-dir.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/source-dir.c?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -0,0 +1,22 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "25d7b07971af18864a6a806828e987bfa7802fde",
      "filename": "gdb/testsuite/gdb.base/source-dir.exp",
      "status": "modified",
      "additions": 137,
      "deletions": 4,
      "changes": 141,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/gdb.base/source-dir.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb/gdb/testsuite/gdb.base/source-dir.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/source-dir.exp?ref=f1b620e9b4eea4bfd2f35a3039672fa8a5925bcb",
      "patch": "@@ -15,9 +15,142 @@\n \n standard_testfile\n \n-gdb_start\n+# Take a list of directories DIRS, and return a regular expression\n+# that will match against the output of the 'directory' command\n+# assuming that DIRS are all of the directories that should appear in\n+# the results.\n+proc search_dir_list { dirs } {\n+    set output \"\\r\\nSource directories searched: \"\n+    append output [join $dirs \"\\[:;\\]\"]\n \n-set foo \"/nOtExStInG\"\n+    return ${output}\n+}\n \n-gdb_test \"directory $foo/a $foo/b $foo/c\" \"\\r\\nSource directories searched: $foo/a\\[:;\\]$foo/b\\[:;\\]$foo/c\\[:;\\]\\\\\\$cdir\\[:;\\]\\\\\\$cwd\"\n-gdb_test \"directory $foo/b $foo/d $foo/c\" \"\\r\\nSource directories searched: $foo/b\\[:;\\]$foo/d\\[:;\\]$foo/c\\[:;\\]$foo/a\\[:;\\]\\\\\\$cdir\\[:;\\]\\\\\\$cwd\"\n+# Check that adding directories to the search path changes the order\n+# in which directories are searched.\n+proc test_changing_search_directory {} {\n+    gdb_start\n+\n+    set foo \"/nOtExStInG\"\n+\n+    gdb_test \"directory $foo/a $foo/b $foo/c\" \\\n+\t[search_dir_list [list \\\n+\t\t\t      \"$foo/a\" \\\n+\t\t\t      \"$foo/b\" \\\n+\t\t\t      \"$foo/c\" \\\n+\t\t\t      \"\\\\\\$cdir\" \\\n+\t\t\t      \"\\\\\\$cwd\"]]\n+    gdb_test \"directory $foo/b $foo/d $foo/c\" \\\n+\t[search_dir_list [list \\\n+\t\t\t      \"$foo/b\" \\\n+\t\t\t      \"$foo/d\" \\\n+\t\t\t      \"$foo/c\" \\\n+\t\t\t      \"$foo/a\" \\\n+\t\t\t      \"\\\\\\$cdir\" \\\n+\t\t\t      \"\\\\\\$cwd\"]]\n+    gdb_exit\n+}\n+\n+# Test that the compilation directory can also be extended with a\n+# prefix from the directory search path in order to find source files.\n+proc test_truncated_comp_dir {} {\n+    global srcfile srcdir subdir binfile\n+    global decimal\n+\n+    # When we run this test the current directory will be something\n+    # like this:\n+    #     /some/path/to/gdb/build/testsuite/\n+    # We are going to copy the source file out of the source tree into\n+    # a location like this:\n+    #     /some/path/to/gdb/build/testsuite/output/gdb.base/soure-dir/\n+    #\n+    # We will then switch to this directory and compile the source\n+    # file, however, we will ask GCC to remove this prefix from the\n+    # compilation directory in the debug info:\n+    #     /some/path/to/gdb/build/testsuite/output/\n+    #\n+    # As a result the debug information will look like this:\n+    #\n+    #     DW_AT_name        : source-dir.c\n+    #     DW_AT_comp_dir    : /gdb.base/source-dir\n+    #\n+    # Finally we switch back to this directory:\n+    #     /some/path/to/gdb/build/testsuite/\n+    #\n+    # and start GDB.  There was a time when GDB would be unable to\n+    # find the source file no matter what we added to the directory\n+    # search path, this should now be fixed.\n+\n+    set original_dir [pwd]\n+    set working_dir [standard_output_file \"\"]\n+    cd ${working_dir}\n+\n+    set strip_dir [file normalize \"${working_dir}/../..\"]\n+\n+    set new_srcfile [standard_output_file ${srcfile}]\n+    set fd [open \"$new_srcfile\" w]\n+    puts $fd \"int\n+    main ()\n+    {\n+      return 0;\n+    }\"\n+    close $fd\n+\n+    set options \\\n+\t\"debug additional_flags=-fdebug-prefix-map=${strip_dir}=\"\n+    if  { [gdb_compile \"${srcfile}\" \"${binfile}\" \\\n+\t       executable ${options}] != \"\" } {\n+\tuntested \"failed to compile\"\n+\treturn -1\n+    }\n+\n+    cd ${original_dir}\n+\n+    clean_restart ${binfile}\n+\n+    gdb_test_no_output \"set directories \\$cdir:\\$cwd\"\n+    gdb_test \"show directories\" \\\n+\t\"\\r\\nSource directories searched: \\\\\\$cdir\\[:;\\]\\\\\\$cwd\"\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    gdb_test \"info source\" \\\n+    [multi_line \\\n+\t \"Current source file is ${srcfile}\" \\\n+\t \"Compilation directory is \\[^\\n\\r\\]+\" \\\n+\t \"Source language is c.\" \\\n+\t \"Producer is \\[^\\n\\r\\]+\" \\\n+\t \"Compiled with DWARF $decimal debugging format.\" \\\n+\t \"Does not include preprocessor macro info.\" ] \\\n+\t\"info source before setting directory search list\"\n+\n+    gdb_test \"dir $strip_dir\" \\\n+\t[search_dir_list [list \\\n+\t\t\t      \"$strip_dir\" \\\n+\t\t\t      \"\\\\\\$cdir\" \\\n+\t\t\t      \"\\\\\\$cwd\"]]\n+    gdb_test \"list\" [multi_line \\\n+\t\t\t \"1\\[ \\t\\]+int\" \\\n+\t\t\t \"2\\[ \\t\\]+main \\\\(\\\\)\" \\\n+\t\t\t \"3\\[ \\t\\]+\\\\{\" \\\n+\t\t\t \"4\\[ \\t\\]+return 0;\" \\\n+\t\t\t \"5\\[ \\t\\]+\\\\}\" ]\n+\n+    gdb_test \"info source\" \\\n+\t[multi_line \\\n+\t     \"Current source file is ${srcfile}\" \\\n+\t     \"Compilation directory is \\[^\\n\\r\\]+\" \\\n+\t     \"Located in ${new_srcfile}\" \\\n+\t     \"Contains 5 lines.\" \\\n+\t     \"Source language is c.\" \\\n+\t     \"Producer is \\[^\\n\\r\\]+\" \\\n+\t     \"\\[^\\n\\r\\]+\" \\\n+\t     \"\\[^\\n\\r\\]+\" ] \\\n+\t\"info source after setting directory search list\"\n+}\n+\n+test_changing_search_directory\n+test_truncated_comp_dir"
    }
  ]
}