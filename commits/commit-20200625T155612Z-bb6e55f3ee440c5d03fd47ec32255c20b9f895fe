{
  "sha": "bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmI2ZTU1ZjNlZTQ0MGM1ZDAzZmQ0N2VjMzIyNTVjMjBiOWY4OTVmZQ==",
  "commit": {
    "author": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T15:56:12Z"
    },
    "committer": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T15:56:12Z"
    },
    "message": "Remove obsolete gdbarch_static_transform_name\n\ngdbarch_static_transform_name is completely Solaris-specific or rather\nspecific to the Studio compilers.  Studio cc has deprecated Stabs support\nin the 12.4 release back in 2015, GCC has defaulted to DWARF-2 on Solaris\n7+ since 2004 and Stabs themselves are pretty much obsolete, so the whole\ncode can go.\n\nTested on sparcv9-sun-solaris2.11 and x86_64-pc-linux-gnu with\n--enable-targets=all.\n\n\t* sol2-tdep.c (sol2_static_transform_name): Remove.\n\t(sol2_init_abi): Don't register it.\n\t* gdbarch.sh (static_transform_name): Remove.\n\t* gdbarch.c, gdbarch.h: Regenerate.\n\n\t* dbxread.c (read_dbx_symtab) <'S'>: Remove call to\n\tgdbarch_static_transform_name.\n\t* mdebugread.c (parse_partial_symbols) <'S'>: Likewise.\n\t* stabsread.c (define_symbol) <'X'>: Remove.\n\t(define_symbol) <'S'>: Remove gdbarch_static_transform_name\n\thandling.\n\t<'V'>: Likewise.\n\t* xcoffread.c (scan_xcoff_symtab): Remove gdbarch.\n\t<'S'>: Remove call to gdbarch_static_transform_name.",
    "tree": {
      "sha": "e0aef8743d1f7912df194ef9e4806aeceb42778a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e0aef8743d1f7912df194ef9e4806aeceb42778a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/comments",
  "author": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6d3683661a7623a306667915abba4d4695616d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d3683661a7623a306667915abba4d4695616d7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6d3683661a7623a306667915abba4d4695616d7"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 18,
    "deletions": 144
  },
  "files": [
    {
      "sha": "cb3bd48b06f9c245d9d9ae986f27e85b3bb8bbdf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -1,3 +1,20 @@\n+2020-06-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* sol2-tdep.c (sol2_static_transform_name): Remove.\n+\t(sol2_init_abi): Don't register it.\n+\t* gdbarch.sh (static_transform_name): Remove.\n+\t* gdbarch.c, gdbarch.h: Regenerate.\n+\n+\t* dbxread.c (read_dbx_symtab) <'S'>: Remove call to\n+\tgdbarch_static_transform_name.\n+\t* mdebugread.c (parse_partial_symbols) <'S'>: Likewise.\n+\t* stabsread.c (define_symbol) <'X'>: Remove.\n+\t(define_symbol) <'S'>: Remove gdbarch_static_transform_name\n+\thandling.\n+\t<'V'>: Likewise.\n+\t* xcoffread.c (scan_xcoff_symtab): Remove gdbarch.\n+\t<'S'>: Remove call to gdbarch_static_transform_name.\n+\n 2020-06-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* procfs.c (procfs_pre_trace): New function."
    },
    {
      "sha": "2df9f5c4d0476e225503e3f1bb4b3962ea4107af",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -1460,9 +1460,6 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t  switch (p[1])\n \t    {\n \t    case 'S':\n-\t      if (gdbarch_static_transform_name_p (gdbarch))\n-\t\tgdbarch_static_transform_name (gdbarch, namestring);\n-\n \t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t   data_sect_index,"
    },
    {
      "sha": "6d1bb0d2808750bb87de2cb29be728805c834ec4",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -292,7 +292,6 @@ struct gdbarch\n   gdbarch_relocate_instruction_ftype *relocate_instruction;\n   gdbarch_overlay_update_ftype *overlay_update;\n   gdbarch_core_read_description_ftype *core_read_description;\n-  gdbarch_static_transform_name_ftype *static_transform_name;\n   int sofun_address_maybe_missing;\n   gdbarch_process_record_ftype *process_record;\n   gdbarch_process_record_signal_ftype *process_record_signal;\n@@ -658,7 +657,6 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of relocate_instruction, has predicate.  */\n   /* Skip verify of overlay_update, has predicate.  */\n   /* Skip verify of core_read_description, has predicate.  */\n-  /* Skip verify of static_transform_name, has predicate.  */\n   /* Skip verify of sofun_address_maybe_missing, invalid_p == 0 */\n   /* Skip verify of process_record, has predicate.  */\n   /* Skip verify of process_record_signal, has predicate.  */\n@@ -1436,12 +1434,6 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: stap_register_suffixes = %s\\n\",\n                       pstring_list (gdbarch->stap_register_suffixes));\n-  fprintf_unfiltered (file,\n-                      \"gdbarch_dump: gdbarch_static_transform_name_p() = %d\\n\",\n-                      gdbarch_static_transform_name_p (gdbarch));\n-  fprintf_unfiltered (file,\n-                      \"gdbarch_dump: static_transform_name = <%s>\\n\",\n-                      host_address_to_string (gdbarch->static_transform_name));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: sw_breakpoint_from_kind = <%s>\\n\",\n                       host_address_to_string (gdbarch->sw_breakpoint_from_kind));\n@@ -4075,30 +4067,6 @@ set_gdbarch_core_read_description (struct gdbarch *gdbarch,\n   gdbarch->core_read_description = core_read_description;\n }\n \n-int\n-gdbarch_static_transform_name_p (struct gdbarch *gdbarch)\n-{\n-  gdb_assert (gdbarch != NULL);\n-  return gdbarch->static_transform_name != NULL;\n-}\n-\n-const char *\n-gdbarch_static_transform_name (struct gdbarch *gdbarch, const char *name)\n-{\n-  gdb_assert (gdbarch != NULL);\n-  gdb_assert (gdbarch->static_transform_name != NULL);\n-  if (gdbarch_debug >= 2)\n-    fprintf_unfiltered (gdb_stdlog, \"gdbarch_static_transform_name called\\n\");\n-  return gdbarch->static_transform_name (name);\n-}\n-\n-void\n-set_gdbarch_static_transform_name (struct gdbarch *gdbarch,\n-                                   gdbarch_static_transform_name_ftype static_transform_name)\n-{\n-  gdbarch->static_transform_name = static_transform_name;\n-}\n-\n int\n gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "d7e7c498d9e12c30474b02b1f9421c6bf4877eb9",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -1112,14 +1112,6 @@ typedef const struct target_desc * (gdbarch_core_read_description_ftype) (struct\n extern const struct target_desc * gdbarch_core_read_description (struct gdbarch *gdbarch, struct target_ops *target, bfd *abfd);\n extern void set_gdbarch_core_read_description (struct gdbarch *gdbarch, gdbarch_core_read_description_ftype *core_read_description);\n \n-/* Handle special encoding of static variables in stabs debug info. */\n-\n-extern int gdbarch_static_transform_name_p (struct gdbarch *gdbarch);\n-\n-typedef const char * (gdbarch_static_transform_name_ftype) (const char *name);\n-extern const char * gdbarch_static_transform_name (struct gdbarch *gdbarch, const char *name);\n-extern void set_gdbarch_static_transform_name (struct gdbarch *gdbarch, gdbarch_static_transform_name_ftype *static_transform_name);\n-\n /* Set if the address in N_SO or N_FUN stabs may be zero. */\n \n extern int gdbarch_sofun_address_maybe_missing (struct gdbarch *gdbarch);"
    },
    {
      "sha": "f1a07b8a2f4fc2196fac1065c2df41e1a85a43a9",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -842,8 +842,6 @@ F;void;overlay_update;struct obj_section *osect;osect\n \n M;const struct target_desc *;core_read_description;struct target_ops *target, bfd *abfd;target, abfd\n \n-# Handle special encoding of static variables in stabs debug info.\n-F;const char *;static_transform_name;const char *name;name\n # Set if the address in N_SO or N_FUN stabs may be zero.\n v;int;sofun_address_maybe_missing;;;0;0;;0\n "
    },
    {
      "sha": "6f76bc6a84e246d45560488e035925e682495b3b",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -3029,10 +3029,6 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t    switch (p[1])\n \t\t      {\n \t\t      case 'S':\n-\t\t\tif (gdbarch_static_transform_name_p (gdbarch))\n-\t\t\t  namestring = gdbarch_static_transform_name\n-\t\t\t\t\t (gdbarch, namestring);\n-\n \t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n \t\t\t\t\t\t\t       p - namestring),\n \t\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,"
    },
    {
      "sha": "ce0f35d9b3fae38933c95e6623a6912b1bc2af68",
      "filename": "gdb/sol2-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 50,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol2-tdep.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -61,52 +61,6 @@ sol2_sigtramp_p (struct frame_info *this_frame)\n   return sol2_pc_in_sigtramp (pc, name);\n }\n \n-/* Unglobalize NAME.  */\n-\n-static const char *\n-sol2_static_transform_name (const char *name)\n-{\n-  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop,\n-     SunPRO) convert file static variables into global values, a\n-     process known as globalization.  In order to do this, the\n-     compiler will create a unique prefix and prepend it to each file\n-     static variable.  For static variables within a function, this\n-     globalization prefix is followed by the function name (nested\n-     static variables within a function are supposed to generate a\n-     warning message, and are left alone).  The procedure is\n-     documented in the Stabs Interface Manual, which is distributed\n-     with the compilers, although version 4.0 of the manual seems to\n-     be incorrect in some places, at least for SPARC.  The\n-     globalization prefix is encoded into an N_OPT stab, with the form\n-     \"G=<prefix>\".  The globalization prefix always seems to start\n-     with a dollar sign '$' (sparc) resp. a dot '.' (x86); a dot '.'\n-     is used as a separator.  So we  simply strip everything up until\n-     the last dot.  */\n-  int prefix;\n-  \n-  switch (gdbarch_bfd_arch_info (target_gdbarch ())->arch)\n-    {\n-    case bfd_arch_i386:\n-      prefix = '.';\n-      break;\n-    case bfd_arch_sparc:\n-      prefix = '$';\n-      break;\n-    default:\n-      internal_error (__FILE__, __LINE__, \"Unexpected arch\");\n-      break;\n-    }\n-\n-  if (name[0] == prefix)\n-    {\n-      const char *p = strrchr (name, '.');\n-      if (p)\n-        return p + 1;\n-    }\n-\n-  return name;\n-}\n-\n static CORE_ADDR\n sol2_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n {\n@@ -155,10 +109,6 @@ sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n      SunPRO 3.0, the compiler does this for N_FUN stabs too.  */\n   set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n \n-  /* The Sun compilers also do \"globalization\"; see the comment in\n-     sol2_static_transform_name for more information.  */\n-  set_gdbarch_static_transform_name (gdbarch, sol2_static_transform_name);\n-\n   /* Solaris uses SVR4-style shared libraries.  */\n   set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n "
    },
    {
      "sha": "d2ff54a47bdf5291690d118684cc62b89482cddf",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 40,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -723,12 +723,6 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t  /* This was an anonymous type that was never fixed up.  */\n \t  goto normal;\n \n-\tcase 'X':\n-\t  /* SunPRO (3.0 at least) static variable encoding.  */\n-\t  if (gdbarch_static_transform_name_p (gdbarch))\n-\t    goto normal;\n-\t  /* fall through */\n-\n \tdefault:\n \t  complaint (_(\"Unknown C++ symbol name `%s'\"),\n \t\t     string);\n@@ -1186,23 +1180,6 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n       SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n-      if (gdbarch_static_transform_name_p (gdbarch)\n-\t  && gdbarch_static_transform_name (gdbarch, sym->linkage_name ())\n-\t     != sym->linkage_name ())\n-\t{\n-\t  struct bound_minimal_symbol msym;\n-\n-\t  msym = lookup_minimal_symbol (sym->linkage_name (), NULL, objfile);\n-\t  if (msym.minsym != NULL)\n-\t    {\n-\t      const char *new_name = gdbarch_static_transform_name\n-\t\t(gdbarch, sym->linkage_name ());\n-\n-\t      sym->set_linkage_name (new_name);\n-\t      SET_SYMBOL_VALUE_ADDRESS (sym,\n-\t\t\t\t\tBMSYMBOL_VALUE_ADDRESS (msym));\n-\t    }\n-\t}\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n       add_symbol_to_list (sym, get_file_symbols ());\n       break;\n@@ -1367,24 +1344,8 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n       SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n-      if (gdbarch_static_transform_name_p (gdbarch)\n-\t  && gdbarch_static_transform_name (gdbarch, sym->linkage_name ())\n-\t     != sym->linkage_name ())\n-\t{\n-\t  struct bound_minimal_symbol msym;\n-\n-\t  msym = lookup_minimal_symbol (sym->linkage_name (), NULL, objfile);\n-\t  if (msym.minsym != NULL)\n-\t    {\n-\t      const char *new_name = gdbarch_static_transform_name\n-\t\t(gdbarch, sym->linkage_name ());\n-\n-\t      sym->set_linkage_name (new_name);\n-\t      SET_SYMBOL_VALUE_ADDRESS (sym, BMSYMBOL_VALUE_ADDRESS (msym));\n-\t    }\n-\t}\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n-\tadd_symbol_to_list (sym, get_local_symbols ());\n+      add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n     case 'v':"
    },
    {
      "sha": "a792c0fea2eaf8e369fd5474c73bcf2e40b7a2bd",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb6e55f3ee440c5d03fd47ec32255c20b9f895fe/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=bb6e55f3ee440c5d03fd47ec32255c20b9f895fe",
      "patch": "@@ -2114,7 +2114,6 @@ static void\n scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t   struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR toc_offset = 0;\t/* toc offset value in data section.  */\n   const char *filestring = NULL;\n \n@@ -2577,10 +2576,6 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t    switch (p[1])\n \t      {\n \t      case 'S':\n-\t\tif (gdbarch_static_transform_name_p (gdbarch))\n-\t\t  namestring = gdbarch_static_transform_name\n-\t\t\t\t (gdbarch, namestring);\n-\n \t\tadd_psymbol_to_list (gdb::string_view (namestring,\n \t\t\t\t\t\t       p - namestring),\n \t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,"
    }
  ]
}