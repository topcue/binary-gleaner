{
  "sha": "b625c7701d700d2a11cc1704a23bb79847251f01",
  "node_id": "C_kwDOANOeidoAKGI2MjVjNzcwMWQ3MDBkMmExMWNjMTcwNGEyM2JiNzk4NDcyNTFmMDE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-02T15:38:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-02T15:38:05Z"
    },
    "message": "[gdb/symtab] Remove COMPUNIT_CALL_SITE_HTAB\n\nRemove macro COMPUNIT_CALL_SITE_HTAB, and provide access to the htab using\nmember functions:\n- compunit_symtab::find_call_site\n- compunit_symtab::set_call_site_htab\n\nTested on x86_64-linux.\n\nCo-Authored-By: Tom de Vries <tdevries@suse.de>",
    "tree": {
      "sha": "3aa26137da9f475b90144d309a21c816c2e7ac9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3aa26137da9f475b90144d309a21c816c2e7ac9a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b625c7701d700d2a11cc1704a23bb79847251f01",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b625c7701d700d2a11cc1704a23bb79847251f01",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b625c7701d700d2a11cc1704a23bb79847251f01",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b625c7701d700d2a11cc1704a23bb79847251f01/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1e9983e73052d78e6c9fb709ddb897d26fef664c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e9983e73052d78e6c9fb709ddb897d26fef664c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1e9983e73052d78e6c9fb709ddb897d26fef664c"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 37,
    "deletions": 8
  },
  "files": [
    {
      "sha": "90c0c5b3250802f6945a2e69b7b6cac280b96e13",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=b625c7701d700d2a11cc1704a23bb79847251f01",
      "patch": "@@ -225,15 +225,15 @@ struct call_site *\n call_site_for_pc (struct gdbarch *gdbarch, CORE_ADDR pc)\n {\n   struct compunit_symtab *cust;\n-  void **slot = NULL;\n+  call_site *cs = nullptr;\n \n   /* -1 as tail call PC can be already after the compilation unit range.  */\n   cust = find_pc_compunit_symtab (pc - 1);\n \n-  if (cust != NULL && COMPUNIT_CALL_SITE_HTAB (cust) != NULL)\n-    slot = htab_find_slot (COMPUNIT_CALL_SITE_HTAB (cust), &pc, NO_INSERT);\n+  if (cust != nullptr)\n+    cs = cust->find_call_site (pc);\n \n-  if (slot == NULL)\n+  if (cs == nullptr)\n     {\n       struct bound_minimal_symbol msym = lookup_minimal_symbol_by_pc (pc);\n \n@@ -247,7 +247,7 @@ call_site_for_pc (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t\t    : msym.minsym->print_name ()));\n     }\n \n-  return (struct call_site *) *slot;\n+  return cs;\n }\n \n /* Return the blockvector immediately containing the innermost lexical block"
    },
    {
      "sha": "2d4ca08b6674947ee9583d89b05d93999f1be718",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b625c7701d700d2a11cc1704a23bb79847251f01",
      "patch": "@@ -9510,7 +9510,7 @@ process_full_comp_unit (dwarf2_cu *cu, enum language pretend_language)\n       if (gcc_4_minor >= 5)\n \tcust->epilogue_unwind_valid = 1;\n \n-      cust->call_site_htab = cu->call_site_htab;\n+      cust->set_call_site_htab (cu->call_site_htab);\n     }\n \n   per_objfile->set_symtab (cu->per_cu, cust);"
    },
    {
      "sha": "6ec5d95401e6a8abbdd24aa09e5178252121a4fa",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=b625c7701d700d2a11cc1704a23bb79847251f01",
      "patch": "@@ -331,6 +331,30 @@ search_domain_name (enum search_domain e)\n \n /* See symtab.h.  */\n \n+call_site *\n+compunit_symtab::find_call_site (CORE_ADDR pc) const\n+{\n+  if (m_call_site_htab == nullptr)\n+    return nullptr;\n+\n+  void **slot = htab_find_slot (m_call_site_htab, &pc, NO_INSERT);\n+  if (slot == nullptr)\n+    return nullptr;\n+\n+  return (call_site *) *slot;\n+}\n+\n+/* See symtab.h.  */\n+\n+void\n+compunit_symtab::set_call_site_htab (htab_t call_site_htab)\n+{\n+  gdb_assert (m_call_site_htab == nullptr);\n+  m_call_site_htab = call_site_htab;\n+}\n+\n+/* See symtab.h.  */\n+\n struct symtab *\n compunit_primary_filetab (const struct compunit_symtab *cust)\n {"
    },
    {
      "sha": "6a6cf8201bc5b9ce5a5ef01406a3a55de72668cc",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b625c7701d700d2a11cc1704a23bb79847251f01/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=b625c7701d700d2a11cc1704a23bb79847251f01",
      "patch": "@@ -1449,6 +1449,12 @@ struct symtab\n \n struct compunit_symtab\n {\n+  /* Set m_call_site_htab.  */\n+  void set_call_site_htab (htab_t call_site_htab);\n+\n+  /* Find call_site info for PC.  */\n+  call_site *find_call_site (CORE_ADDR pc) const;\n+\n   /* Unordered chain of all compunit symtabs of this objfile.  */\n   struct compunit_symtab *next;\n \n@@ -1503,7 +1509,7 @@ struct compunit_symtab\n   unsigned int epilogue_unwind_valid : 1;\n \n   /* struct call_site entries for this compilation unit or NULL.  */\n-  htab_t call_site_htab;\n+  htab_t m_call_site_htab;\n \n   /* The macro table for this symtab.  Like the blockvector, this\n      is shared between different symtabs in a given compilation unit.\n@@ -1538,7 +1544,6 @@ using compunit_symtab_range = next_range<compunit_symtab>;\n #define COMPUNIT_BLOCK_LINE_SECTION(cust) ((cust)->block_line_section)\n #define COMPUNIT_LOCATIONS_VALID(cust) ((cust)->locations_valid)\n #define COMPUNIT_EPILOGUE_UNWIND_VALID(cust) ((cust)->epilogue_unwind_valid)\n-#define COMPUNIT_CALL_SITE_HTAB(cust) ((cust)->call_site_htab)\n #define COMPUNIT_MACRO_TABLE(cust) ((cust)->macro_table)\n \n /* A range adapter to allowing iterating over all the file tables"
    }
  ]
}