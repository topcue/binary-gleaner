{
  "sha": "9a73e1cafedc2e3a466b6193a460cb8062fa0a59",
  "node_id": "C_kwDOANOeidoAKDlhNzNlMWNhZmVkYzJlM2E0NjZiNjE5M2E0NjBjYjgwNjJmYTBhNTk",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2021-10-21T19:22:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-12-02T16:08:50Z"
    },
    "message": "(PPC64) fix handling of fixed-point values when using \"return\" command\n\nIn the gdb.ada/fixed_points_function.exp testcase, we have the following\nAda code...\n\n   type FP1_Type is delta 0.1 range -1.0 .. +1.0; --  Ordinary\n   function Call_FP1 (F : FP1_Type) return FP1_Type is\n   begin\n      FP1_Arg := F;\n      return FP1_Arg;\n   end Call_FP1;\n\n... used as follow:\n\n   F1 : FP1_Type := 1.0;\n   F1 := Call_FP1 (F1);\n\nThe testcase, among other things, verifies that \"return\" works\nproperly as follow:\n\n    | (gdb) return 1.0\n    | Make pck.call_fp1 return now? (y or n) y\n    | [...]\n    | 9          F1 := Call_FP1 (F1);\n    | (gdb) next\n    | (gdb) print f1\n    | $1 = 0.0625\n\nThe output of the last command shows that we returned the wrong\nvalue. The value printed gives a clue about the problem, since\nit is 1/16th of the value we expected, where 1/16 is FP1_Type's\nscaling factor.\n\nThe problem, here, comes from the fact that the function\nhandling return values for base types (ppc64_sysv_abi_return_value_base)\nwrites the return value using unpack_long which, upon seeing that\nthe value being unpacked is a fixed point type, applies the scaling\nfactor, to get the integer-representation of our fixed-point value\n(similar to what it does with floats, for instance).\n\nSo, the fix consists in teaching ppc64_sysv_abi_return_value_base\nabout fixed-point types, and to avoid the unwanted application\nof the scaling factor.\n\nNote that the \"finish\" function, on the other hand, does not\nsuffer from this issue, simply becaue the value returned by\nthe function is read from register without the use of a type,\nthus avoiding an unwanted application of a scaling factor.\n\nNo test added, as this change is already tested by\ngdb.ada/fixed_points_function.exp.\n\nCo-Authored-By: Tristan Gingold <gingold@adacore.com>",
    "tree": {
      "sha": "2da5f567ff34e6474399312aecda2516a20da7ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2da5f567ff34e6474399312aecda2516a20da7ee"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a73e1cafedc2e3a466b6193a460cb8062fa0a59",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a73e1cafedc2e3a466b6193a460cb8062fa0a59",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a73e1cafedc2e3a466b6193a460cb8062fa0a59",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a73e1cafedc2e3a466b6193a460cb8062fa0a59/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0abb4049fb5937a75553fc51fdf27b22270642cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0abb4049fb5937a75553fc51fdf27b22270642cc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0abb4049fb5937a75553fc51fdf27b22270642cc"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 19,
    "deletions": 3
  },
  "files": [
    {
      "sha": "86f0acb05438b964c4bee03ca6b3459bafcbbdc3",
      "filename": "gdb/ppc-sysv-tdep.c",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73e1cafedc2e3a466b6193a460cb8062fa0a59/gdb/ppc-sysv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73e1cafedc2e3a466b6193a460cb8062fa0a59/gdb/ppc-sysv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-sysv-tdep.c?ref=9a73e1cafedc2e3a466b6193a460cb8062fa0a59",
      "patch": "@@ -1745,16 +1745,32 @@ ppc64_sysv_abi_return_value_base (struct gdbarch *gdbarch, struct type *valtype,\n   if ((valtype->code () == TYPE_CODE_INT\n        || valtype->code () == TYPE_CODE_ENUM\n        || valtype->code () == TYPE_CODE_CHAR\n-       || valtype->code () == TYPE_CODE_BOOL)\n+       || valtype->code () == TYPE_CODE_BOOL\n+       || valtype->code () == TYPE_CODE_RANGE\n+       || is_fixed_point_type (valtype))\n       && TYPE_LENGTH (valtype) <= 8)\n     {\n       int regnum = tdep->ppc_gp0_regnum + 3 + index;\n \n       if (writebuf != NULL)\n \t{\n+\t  LONGEST return_val;\n+\n+\t  if (is_fixed_point_type (valtype))\n+\t    {\n+\t      /* Fixed point type values need to be returned unscaled.  */\n+\t      gdb_mpz unscaled;\n+\n+\t      unscaled.read ({writebuf, TYPE_LENGTH (valtype)},\n+\t\t\t     type_byte_order (valtype),\n+\t\t\t     valtype->is_unsigned ());\n+\t      return_val = unscaled.as_integer<LONGEST> ();\n+\t    }\n+\t  else\n+\t    return_val = unpack_long (valtype, writebuf);\n+\n \t  /* Be careful to sign extend the value.  */\n-\t  regcache_cooked_write_unsigned (regcache, regnum,\n-\t\t\t\t\t  unpack_long (valtype, writebuf));\n+\t  regcache_cooked_write_unsigned (regcache, regnum, return_val);\n \t}\n       if (readbuf != NULL)\n \t{"
    }
  ]
}