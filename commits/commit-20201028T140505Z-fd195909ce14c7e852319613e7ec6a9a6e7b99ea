{
  "sha": "fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmQxOTU5MDljZTE0YzdlODUyMzE5NjEzZTdlYzZhOWE2ZTdiOTllYQ==",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2020-10-28T14:01:36Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2020-10-28T14:05:05Z"
    },
    "message": "aarch64: Add DSB instruction Armv8.7-a variant\n\nThis patch adds new variant (nXS) of DSB memory barrier instruction\navailable in Armv8.7-a. New nXS variant has different encoding in\ncomparison with pre Armv8.7-a DSB memory barrier variant thus new\ninstruction and new operand was added.\n\nDSB memory nXS barrier variant specifies the limitation on the barrier\noperation. Allowed values are:\n\n\tDSB SYnXS|#28\n\tDSB ISHnXS|#24\n\tDSB NSHnXS|#20\n\tDSB OSHnXS|#16\n\nPlease note that till now,  for barriers, barrier operation was encoded in\n4-bit unsigned immediate CRm field (in the range 0 to 15).\nFor DSB memory nXS barrier variant, barrier operation is a 5-bit unsigned\nassembly instruction immediate, encoded in instruction in two bits CRm<3:2>:\n\n\t\tCRm<3:2>  #imm\n\t\t  00       16\n\t\t  01       20\n\t\t  10       24\n\t\t  11       28\n\nThis patch extends current AArch64 barrier instructions with above mapping.\n\nNotable patch changes include:\n+ New DSB memory barrier variant encoding for Armv8.7-a.\n+ New operand BARRIER_DSB_NXS for above instruction in order to\ndistinguish between existing and new DSB instruction flavour.\n+ New set of DSB nXS barrier options.\n+ New instruction inserter and extractor map between instruction\nimmediate 5-bit value and 2-bit CRm field of the instruction itself (see\nFLD_CRm_dsb_nxs).\n+ Regeneration of aarch64-[asm|dis|opc]-2.c files.\n+ Test cases to cover new instruction assembling and disassembling.\n\nFor more details regarding DSB memory barrier instruction and its\nArmv8.7-a flavour please refer to Arm A64 Instruction set documentation\nfor Armv8-A architecture profile, see document pages 132-133 of [0].\n\n\t[0]: https://developer.arm.com/docs/ddi0596/i\n\ngas/ChangeLog:\n\n2020-10-23  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n\n\t* NEWS: Docs update.\n\t* config/tc-aarch64.c (parse_operands): Add\n\tAARCH64_OPND_BARRIER_DSB_NXS handler.\n\t(md_begin): Add content of aarch64_barrier_dsb_nxs_options to\n\taarch64_barrier_opt_hsh hash.\n\t* testsuite/gas/aarch64/system-4-invalid.d: New test.\n\t* testsuite/gas/aarch64/system-4-invalid.l: New test.\n\t* testsuite/gas/aarch64/system-4-invalid.s: New test.\n\t* testsuite/gas/aarch64/system-4.d: New test.\n\t* testsuite/gas/aarch64/system-4.s: New test.\n\ninclude/ChangeLog:\n\n2020-10-23  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operand\n\tAARCH64_OPND_BARRIER_DSB_NXS.\n\t(aarch64_barrier_dsb_nxs_options): Declare DSB nXS options.\n\nopcodes/ChangeLog:\n\n2020-10-23  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n\n\t* aarch64-asm.c (aarch64_ins_barrier_dsb_nxs): New inserter.\n\t* aarch64-asm.h (AARCH64_DECL_OPD_INSERTER): New inserter\n\tins_barrier_dsb_nx.\n\t* aarch64-dis.c (aarch64_ext_barrier_dsb_nxs): New extractor.\n\t* aarch64-dis.h (AARCH64_DECL_OPD_EXTRACTOR): New extractor\n\text_barrier_dsb_nx.\n\t* aarch64-opc.c (aarch64_print_operand): New options table\n\taarch64_barrier_dsb_nxs_options.\n\t* aarch64-opc.h (enum aarch64_field_kind): New field name FLD_CRm_dsb_nxs.\n\t* aarch64-tbl.h (struct aarch64_opcode): Define DSB nXS barrier\n\tArmv8.7-a instruction.\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.",
    "tree": {
      "sha": "86eccb865095b59d49fa9db53ce498befff6cbc1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/86eccb865095b59d49fa9db53ce498befff6cbc1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8926e54e3af88740e3872099115e0460ed573d21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8926e54e3af88740e3872099115e0460ed573d21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8926e54e3af88740e3872099115e0460ed573d21"
    }
  ],
  "stats": {
    "total": 3077,
    "additions": 1622,
    "deletions": 1455
  },
  "files": [
    {
      "sha": "b993464a67c962131723999614470926197b8969",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -21,6 +21,8 @@\n \n * Add support for Armv8-R and Armv8.7-A AArch64.\n \n+* Add support for DSB memory nXS barrier instruction for Armv8.7 AArch64.\n+\n * Add support for Intel TDX instructions.\n \n * Add support for Intel Key Locker instructions."
    },
    {
      "sha": "2ec1af4de1562e13858b3a8a15fcf9530afbf5db",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -6686,12 +6686,49 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t      backtrack_pos = 0;\n \t      goto failure;\n \t    }\n+\t  if (val != PARSE_FAIL\n+\t      && operands[i] == AARCH64_OPND_BARRIER)\n+\t    {\n+\t      /* Regular barriers accept options CRm (C0-C15).\n+\t         DSB nXS barrier variant accepts values > 15.  */\n+\t      po_imm_or_fail (0, 15);\n+\t    }\n \t  /* This is an extension to accept a 0..15 immediate.  */\n \t  if (val == PARSE_FAIL)\n \t    po_imm_or_fail (0, 15);\n \t  info->barrier = aarch64_barrier_options + val;\n \t  break;\n \n+\tcase AARCH64_OPND_BARRIER_DSB_NXS:\n+\t  val = parse_barrier (&str);\n+\t  if (val != PARSE_FAIL)\n+\t    {\n+\t      /* DSB nXS barrier variant accept only <option>nXS qualifiers.  */\n+\t      if (!(val == 16 || val == 20 || val == 24 || val == 28))\n+\t        {\n+\t          set_syntax_error (_(\"the specified option is not accepted in DSB\"));\n+\t          /* Turn off backtrack as this optional operand is present.  */\n+\t          backtrack_pos = 0;\n+\t          goto failure;\n+\t        }\n+\t    }\n+\t  else\n+\t    {\n+\t      /* DSB nXS barrier variant accept 5-bit unsigned immediate, with\n+\t         possible values 16, 20, 24 or 28 , encoded as val<3:2>.  */\n+\t      if (! parse_constant_immediate (&str, &val, imm_reg_type))\n+\t        goto failure;\n+\t      if (!(val == 16 || val == 20 || val == 24 || val == 28))\n+\t        {\n+\t          set_syntax_error (_(\"immediate value must be 16, 20, 24, 28\"));\n+\t          goto failure;\n+\t        }\n+\t    }\n+\t  /* Option index is encoded as 2-bit value in val<3:2>.  */\n+\t  val = (val >> 2) - 4;\n+\t  info->barrier = aarch64_barrier_dsb_nxs_options + val;\n+\t  break;\n+\n \tcase AARCH64_OPND_PRFOP:\n \t  val = parse_pldop (&str);\n \t  /* This is an extension to accept a 0..31 immediate.  */\n@@ -8782,6 +8819,16 @@ md_begin (void)\n \t\t\t   (void *) (aarch64_barrier_options + i));\n     }\n \n+  for (i = 0; i < ARRAY_SIZE (aarch64_barrier_dsb_nxs_options); i++)\n+    {\n+      const char *name = aarch64_barrier_dsb_nxs_options[i].name;\n+      checked_hash_insert (aarch64_barrier_opt_hsh, name,\n+\t\t\t   (void *) (aarch64_barrier_dsb_nxs_options + i));\n+      /* Also hash the name in the upper case.  */\n+      checked_hash_insert (aarch64_barrier_opt_hsh, get_upper_str (name),\n+\t\t\t   (void *) (aarch64_barrier_dsb_nxs_options + i));\n+    }\n+\n   for (i = 0; i < ARRAY_SIZE (aarch64_prfops); i++)\n     {\n       const char* name = aarch64_prfops[i].name;"
    },
    {
      "sha": "62d38eb324c7c8bc6b5a6271f81100c4dde167d5",
      "filename": "gas/testsuite/gas/aarch64/system-4-invalid.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/system-4-invalid.d?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -0,0 +1,3 @@\n+#name: Invalid DSB memory nXS barrier variant\n+#source: system-4-invalid.s\n+#error_output: system-4-invalid.l"
    },
    {
      "sha": "5a01e39ef7367c91121b9288eca674e2e9c9a8e6",
      "filename": "gas/testsuite/gas/aarch64/system-4-invalid.l",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/system-4-invalid.l?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -0,0 +1,11 @@\n+.*: Assembler messages:\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #17'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #18'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #19'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #21'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #22'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #23'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #25'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #26'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #27'\n+.*: Error: immediate value out of range 0 to 15 at operand 1 -- `dsb #29'"
    },
    {
      "sha": "cadad584f1f3f52e0c3ecf5af642f957297bb0fc",
      "filename": "gas/testsuite/gas/aarch64/system-4-invalid.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4-invalid.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/system-4-invalid.s?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -0,0 +1,16 @@\n+/* Armv8.7-a DSB memory nXS barrier variant.  */\n+.arch armv8.7-a\n+\n+    dsb #17\n+    dsb #18\n+    dsb #19\n+\n+    dsb #21\n+    dsb #22\n+    dsb #23\n+\n+    dsb #25\n+    dsb #26\n+    dsb #27\n+\n+    dsb #29"
    },
    {
      "sha": "0f600f80abda8f9f697f6765753c09d3083afa59",
      "filename": "gas/testsuite/gas/aarch64/system-4.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/system-4.d?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -0,0 +1,16 @@\n+#name: DSB memory nXS barrier variant\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+.*:\td503323f \tdsb\toshnxs\n+.*:\td503363f \tdsb\tnshnxs\n+.*:\td5033a3f \tdsb\tishnxs\n+.*:\td5033e3f \tdsb\tsynxs\n+.*:\td503323f \tdsb\toshnxs\n+.*:\td503363f \tdsb\tnshnxs\n+.*:\td5033a3f \tdsb\tishnxs\n+.*:\td5033e3f \tdsb\tsynxs"
    },
    {
      "sha": "f95eb35df567657b8c5a17811814c17eb19ffeb7",
      "filename": "gas/testsuite/gas/aarch64/system-4.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/gas/testsuite/gas/aarch64/system-4.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/system-4.s?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -0,0 +1,12 @@\n+/* Armv8.7-a DSB memory nXS barrier variant.  */\n+.arch armv8.7-a\n+\n+    dsb #16\n+    dsb #20\n+    dsb #24\n+    dsb #28\n+\n+    dsb oshnxs\n+    dsb nshnxs\n+    dsb ishnxs\n+    dsb synxs"
    },
    {
      "sha": "6ddcaf98ca21ef1fbd66be68274781eb4b903049",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -317,6 +317,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SYSREG_TLBI,\t/* System register <tlbi_op> operand.  */\n   AARCH64_OPND_SYSREG_SR,\t/* System register RCTX operand.  */\n   AARCH64_OPND_BARRIER,\t\t/* Barrier operand.  */\n+  AARCH64_OPND_BARRIER_DSB_NXS,\t/* Barrier operand for DSB nXS variant.  */\n   AARCH64_OPND_BARRIER_ISB,\t/* Barrier operand for ISB.  */\n   AARCH64_OPND_PRFOP,\t\t/* Prefetch operation.  */\n   AARCH64_OPND_BARRIER_PSB,\t/* Barrier operand for PSB.  */\n@@ -949,6 +950,7 @@ struct aarch64_name_value_pair\n \n extern const struct aarch64_name_value_pair aarch64_operand_modifiers [];\n extern const struct aarch64_name_value_pair aarch64_barrier_options [16];\n+extern const struct aarch64_name_value_pair aarch64_barrier_dsb_nxs_options [4];\n extern const struct aarch64_name_value_pair aarch64_prfops [32];\n extern const struct aarch64_name_value_pair aarch64_hint_options [];\n "
    },
    {
      "sha": "11bee7fb3fca79f1b00745473f755da6d0e513f7",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 146,
      "deletions": 141,
      "changes": 287,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -426,14 +426,14 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)\n     case 1184:\t/* movz */\n       value = 1184;\t/* --> movz.  */\n       break;\n-    case 1239:\t/* autibsp */\n-    case 1238:\t/* autibz */\n-    case 1237:\t/* autiasp */\n-    case 1236:\t/* autiaz */\n-    case 1235:\t/* pacibsp */\n-    case 1234:\t/* pacibz */\n-    case 1233:\t/* paciasp */\n-    case 1232:\t/* paciaz */\n+    case 1240:\t/* autibsp */\n+    case 1239:\t/* autibz */\n+    case 1238:\t/* autiasp */\n+    case 1237:\t/* autiaz */\n+    case 1236:\t/* pacibsp */\n+    case 1235:\t/* pacibz */\n+    case 1234:\t/* paciasp */\n+    case 1233:\t/* paciaz */\n     case 1211:\t/* tsb */\n     case 1210:\t/* psb */\n     case 1209:\t/* esb */\n@@ -453,141 +453,144 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)\n     case 1194:\t/* hint */\n       value = 1194;\t/* --> hint.  */\n       break;\n-    case 1216:\t/* pssbb */\n-    case 1215:\t/* ssbb */\n-    case 1214:\t/* dfb */\n+    case 1217:\t/* pssbb */\n+    case 1216:\t/* ssbb */\n+    case 1215:\t/* dfb */\n     case 1213:\t/* dsb */\n       value = 1213;\t/* --> dsb.  */\n       break;\n-    case 1227:\t/* cpp */\n-    case 1226:\t/* dvp */\n-    case 1225:\t/* cfp */\n-    case 1224:\t/* tlbi */\n-    case 1223:\t/* ic */\n-    case 1222:\t/* dc */\n-    case 1221:\t/* at */\n-    case 1220:\t/* sys */\n-      value = 1220;\t/* --> sys.  */\n+    case 1214:\t/* dsb */\n+      value = 1214;\t/* --> dsb.  */\n       break;\n-    case 2037:\t/* bic */\n-    case 1287:\t/* and */\n-      value = 1287;\t/* --> and.  */\n+    case 1228:\t/* cpp */\n+    case 1227:\t/* dvp */\n+    case 1226:\t/* cfp */\n+    case 1225:\t/* tlbi */\n+    case 1224:\t/* ic */\n+    case 1223:\t/* dc */\n+    case 1222:\t/* at */\n+    case 1221:\t/* sys */\n+      value = 1221;\t/* --> sys.  */\n       break;\n-    case 1270:\t/* mov */\n-    case 1289:\t/* and */\n-      value = 1289;\t/* --> and.  */\n+    case 2038:\t/* bic */\n+    case 1288:\t/* and */\n+      value = 1288;\t/* --> and.  */\n       break;\n-    case 1274:\t/* movs */\n-    case 1290:\t/* ands */\n-      value = 1290;\t/* --> ands.  */\n+    case 1271:\t/* mov */\n+    case 1290:\t/* and */\n+      value = 1290;\t/* --> and.  */\n       break;\n-    case 2038:\t/* cmple */\n-    case 1325:\t/* cmpge */\n-      value = 1325;\t/* --> cmpge.  */\n+    case 1275:\t/* movs */\n+    case 1291:\t/* ands */\n+      value = 1291;\t/* --> ands.  */\n       break;\n-    case 2041:\t/* cmplt */\n-    case 1328:\t/* cmpgt */\n-      value = 1328;\t/* --> cmpgt.  */\n+    case 2039:\t/* cmple */\n+    case 1326:\t/* cmpge */\n+      value = 1326;\t/* --> cmpge.  */\n       break;\n-    case 2039:\t/* cmplo */\n-    case 1330:\t/* cmphi */\n-      value = 1330;\t/* --> cmphi.  */\n+    case 2042:\t/* cmplt */\n+    case 1329:\t/* cmpgt */\n+      value = 1329;\t/* --> cmpgt.  */\n       break;\n-    case 2040:\t/* cmpls */\n-    case 1333:\t/* cmphs */\n-      value = 1333;\t/* --> cmphs.  */\n+    case 2040:\t/* cmplo */\n+    case 1331:\t/* cmphi */\n+      value = 1331;\t/* --> cmphi.  */\n       break;\n-    case 1267:\t/* mov */\n-    case 1355:\t/* cpy */\n-      value = 1355;\t/* --> cpy.  */\n+    case 2041:\t/* cmpls */\n+    case 1334:\t/* cmphs */\n+      value = 1334;\t/* --> cmphs.  */\n       break;\n-    case 1269:\t/* mov */\n+    case 1268:\t/* mov */\n     case 1356:\t/* cpy */\n       value = 1356;\t/* --> cpy.  */\n       break;\n-    case 2048:\t/* fmov */\n-    case 1272:\t/* mov */\n+    case 1270:\t/* mov */\n     case 1357:\t/* cpy */\n       value = 1357;\t/* --> cpy.  */\n       break;\n-    case 1262:\t/* mov */\n-    case 1369:\t/* dup */\n-      value = 1369;\t/* --> dup.  */\n+    case 2049:\t/* fmov */\n+    case 1273:\t/* mov */\n+    case 1358:\t/* cpy */\n+      value = 1358;\t/* --> cpy.  */\n       break;\n-    case 1264:\t/* mov */\n-    case 1261:\t/* mov */\n+    case 1263:\t/* mov */\n     case 1370:\t/* dup */\n       value = 1370;\t/* --> dup.  */\n       break;\n-    case 2047:\t/* fmov */\n-    case 1266:\t/* mov */\n+    case 1265:\t/* mov */\n+    case 1262:\t/* mov */\n     case 1371:\t/* dup */\n       value = 1371;\t/* --> dup.  */\n       break;\n-    case 1265:\t/* mov */\n-    case 1372:\t/* dupm */\n-      value = 1372;\t/* --> dupm.  */\n+    case 2048:\t/* fmov */\n+    case 1267:\t/* mov */\n+    case 1372:\t/* dup */\n+      value = 1372;\t/* --> dup.  */\n       break;\n-    case 2042:\t/* eon */\n-    case 1374:\t/* eor */\n-      value = 1374;\t/* --> eor.  */\n+    case 1266:\t/* mov */\n+    case 1373:\t/* dupm */\n+      value = 1373;\t/* --> dupm.  */\n       break;\n-    case 1275:\t/* not */\n-    case 1376:\t/* eor */\n-      value = 1376;\t/* --> eor.  */\n+    case 2043:\t/* eon */\n+    case 1375:\t/* eor */\n+      value = 1375;\t/* --> eor.  */\n       break;\n-    case 1276:\t/* nots */\n-    case 1377:\t/* eors */\n-      value = 1377;\t/* --> eors.  */\n+    case 1276:\t/* not */\n+    case 1377:\t/* eor */\n+      value = 1377;\t/* --> eor.  */\n       break;\n-    case 2043:\t/* facle */\n-    case 1382:\t/* facge */\n-      value = 1382;\t/* --> facge.  */\n+    case 1277:\t/* nots */\n+    case 1378:\t/* eors */\n+      value = 1378;\t/* --> eors.  */\n       break;\n-    case 2044:\t/* faclt */\n-    case 1383:\t/* facgt */\n-      value = 1383;\t/* --> facgt.  */\n+    case 2044:\t/* facle */\n+    case 1383:\t/* facge */\n+      value = 1383;\t/* --> facge.  */\n       break;\n-    case 2045:\t/* fcmle */\n-    case 1396:\t/* fcmge */\n-      value = 1396;\t/* --> fcmge.  */\n+    case 2045:\t/* faclt */\n+    case 1384:\t/* facgt */\n+      value = 1384;\t/* --> facgt.  */\n       break;\n-    case 2046:\t/* fcmlt */\n-    case 1398:\t/* fcmgt */\n-      value = 1398;\t/* --> fcmgt.  */\n+    case 2046:\t/* fcmle */\n+    case 1397:\t/* fcmge */\n+      value = 1397;\t/* --> fcmge.  */\n       break;\n-    case 1259:\t/* fmov */\n-    case 1404:\t/* fcpy */\n-      value = 1404;\t/* --> fcpy.  */\n+    case 2047:\t/* fcmlt */\n+    case 1399:\t/* fcmgt */\n+      value = 1399;\t/* --> fcmgt.  */\n       break;\n-    case 1258:\t/* fmov */\n-    case 1427:\t/* fdup */\n-      value = 1427;\t/* --> fdup.  */\n+    case 1260:\t/* fmov */\n+    case 1405:\t/* fcpy */\n+      value = 1405;\t/* --> fcpy.  */\n       break;\n-    case 1260:\t/* mov */\n-    case 1758:\t/* orr */\n-      value = 1758;\t/* --> orr.  */\n+    case 1259:\t/* fmov */\n+    case 1428:\t/* fdup */\n+      value = 1428;\t/* --> fdup.  */\n       break;\n-    case 2049:\t/* orn */\n+    case 1261:\t/* mov */\n     case 1759:\t/* orr */\n       value = 1759;\t/* --> orr.  */\n       break;\n-    case 1263:\t/* mov */\n-    case 1761:\t/* orr */\n-      value = 1761;\t/* --> orr.  */\n+    case 2050:\t/* orn */\n+    case 1760:\t/* orr */\n+      value = 1760;\t/* --> orr.  */\n       break;\n-    case 1273:\t/* movs */\n-    case 1762:\t/* orrs */\n-      value = 1762;\t/* --> orrs.  */\n+    case 1264:\t/* mov */\n+    case 1762:\t/* orr */\n+      value = 1762;\t/* --> orr.  */\n       break;\n-    case 1268:\t/* mov */\n-    case 1824:\t/* sel */\n-      value = 1824;\t/* --> sel.  */\n+    case 1274:\t/* movs */\n+    case 1763:\t/* orrs */\n+      value = 1763;\t/* --> orrs.  */\n       break;\n-    case 1271:\t/* mov */\n+    case 1269:\t/* mov */\n     case 1825:\t/* sel */\n       value = 1825;\t/* --> sel.  */\n       break;\n+    case 1272:\t/* mov */\n+    case 1826:\t/* sel */\n+      value = 1826;\t/* --> sel.  */\n+      break;\n     default: return NULL;\n     }\n \n@@ -630,7 +633,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 164:\n     case 165:\n     case 166:\n     case 167:\n@@ -640,7 +642,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 171:\n     case 172:\n     case 173:\n-    case 188:\n+    case 174:\n     case 189:\n     case 190:\n     case 191:\n@@ -649,8 +651,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 194:\n     case 195:\n     case 196:\n-    case 202:\n-    case 205:\n+    case 197:\n+    case 203:\n+    case 206:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 14:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -662,7 +665,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 208:\n+    case 209:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -697,17 +700,17 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 81:\n     case 82:\n     case 83:\n-    case 161:\n-    case 163:\n-    case 180:\n+    case 162:\n+    case 164:\n     case 181:\n     case 182:\n     case 183:\n     case 184:\n     case 185:\n     case 186:\n     case 187:\n-    case 207:\n+    case 188:\n+    case 208:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -717,10 +720,10 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 47:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n     case 51:\n-    case 151:\n+    case 152:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 69:\n-    case 159:\n+    case 160:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 70:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -730,11 +733,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n     case 74:\n     case 75:\n-    case 156:\n+    case 157:\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 76:\n-    case 155:\n-    case 157:\n+    case 156:\n+    case 158:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 77:\n     case 78:\n@@ -769,32 +772,33 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 102:\n       return aarch64_ins_sysins_op (self, info, code, inst, errors);\n     case 103:\n-    case 104:\n-      return aarch64_ins_barrier (self, info, code, inst, errors);\n     case 105:\n-      return aarch64_ins_prfop (self, info, code, inst, errors);\n+      return aarch64_ins_barrier (self, info, code, inst, errors);\n+    case 104:\n+      return aarch64_ins_barrier_dsb_nxs (self, info, code, inst, errors);\n     case 106:\n-      return aarch64_ins_none (self, info, code, inst, errors);\n+      return aarch64_ins_prfop (self, info, code, inst, errors);\n     case 107:\n-      return aarch64_ins_hint (self, info, code, inst, errors);\n+      return aarch64_ins_none (self, info, code, inst, errors);\n     case 108:\n+      return aarch64_ins_hint (self, info, code, inst, errors);\n     case 109:\n-      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 110:\n+      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 111:\n     case 112:\n     case 113:\n-      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 114:\n-      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 115:\n-      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 116:\n+      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 117:\n     case 118:\n     case 119:\n-      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 120:\n+      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 121:\n     case 122:\n     case 123:\n@@ -808,61 +812,62 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 131:\n     case 132:\n     case 133:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 134:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 135:\n     case 136:\n     case 137:\n     case 138:\n     case 139:\n     case 140:\n     case 141:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 142:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 143:\n     case 144:\n     case 145:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 146:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 147:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 148:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 150:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 151:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 152:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 153:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 154:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 155:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 158:\n+    case 159:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 160:\n+    case 161:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 162:\n+    case 163:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 174:\n     case 175:\n     case 176:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 177:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 178:\n     case 179:\n+    case 180:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 197:\n     case 198:\n     case 199:\n     case 200:\n     case 201:\n+    case 202:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 203:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 204:\n-    case 206:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 205:\n+    case 207:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "4b53c71a85a64f995ddcca756c32ee44e46b5007",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -876,6 +876,21 @@ aarch64_ins_barrier (const aarch64_operand *self ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n+/* Encode the memory barrier option operand for DSB <option>nXS|#<imm>.  */\n+\n+bfd_boolean\n+aarch64_ins_barrier_dsb_nxs (const aarch64_operand *self ATTRIBUTE_UNUSED,\n+\t\t     const aarch64_opnd_info *info, aarch64_insn *code,\n+\t\t     const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+\t\t     aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  /* For the DSB nXS barrier variant: is a 5-bit unsigned immediate,\n+     encoded in CRm<3:2>.  */\n+  aarch64_insn value = (info->barrier->value >> 2) - 4;\n+  insert_field (FLD_CRm_dsb_nxs, code, value, 0);\n+  return TRUE;\n+}\n+\n /* Encode the prefetch operation option operand for e.g.\n      PRFM <prfop>, [<Xn|SP>{, #<pimm>}].  */\n "
    },
    {
      "sha": "635759536c3d5fc1e29a65686cd75cac4a94f5e6",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -71,6 +71,7 @@ AARCH64_DECL_OPD_INSERTER (ins_sysreg);\n AARCH64_DECL_OPD_INSERTER (ins_pstatefield);\n AARCH64_DECL_OPD_INSERTER (ins_sysins_op);\n AARCH64_DECL_OPD_INSERTER (ins_barrier);\n+AARCH64_DECL_OPD_INSERTER (ins_barrier_dsb_nxs);\n AARCH64_DECL_OPD_INSERTER (ins_hint);\n AARCH64_DECL_OPD_INSERTER (ins_prfop);\n AARCH64_DECL_OPD_INSERTER (ins_reg_extended);"
    },
    {
      "sha": "f7eea5670c3615a523db1d27aa9f4303ebee446b",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 1309,
      "deletions": 1305,
      "changes": 2614,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea"
    },
    {
      "sha": "0871790d132ec0c0fea3fcc5a4cebe8d49605db3",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -1293,6 +1293,21 @@ aarch64_ext_barrier (const aarch64_operand *self ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n+/* Decode the memory barrier option operand for DSB <option>nXS|#<imm>.  */\n+\n+bfd_boolean\n+aarch64_ext_barrier_dsb_nxs (const aarch64_operand *self ATTRIBUTE_UNUSED,\n+\t\t     aarch64_opnd_info *info,\n+\t\t     aarch64_insn code,\n+\t\t     const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+\t\t     aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  /* For the DSB nXS barrier variant immediate is encoded in 2-bit field.  */\n+  aarch64_insn field = extract_field (FLD_CRm_dsb_nxs, code, 0);\n+  info->barrier = aarch64_barrier_dsb_nxs_options + field;\n+  return TRUE;\n+}\n+\n /* Decode the prefetch operation option operand for e.g.\n      PRFM <prfop>, [<Xn|SP>{, #<pimm>}].  */\n "
    },
    {
      "sha": "d588a52405ece5f8171249d34f0832a120e20110",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -94,6 +94,7 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_sysreg);\n AARCH64_DECL_OPD_EXTRACTOR (ext_pstatefield);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sysins_op);\n AARCH64_DECL_OPD_EXTRACTOR (ext_barrier);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_barrier_dsb_nxs);\n AARCH64_DECL_OPD_EXTRACTOR (ext_hint);\n AARCH64_DECL_OPD_EXTRACTOR (ext_prfop);\n AARCH64_DECL_OPD_EXTRACTOR (ext_reg_extended);"
    },
    {
      "sha": "20193b16783bcbaafd4f8da0c80371881ec320e9",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -128,6 +128,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SYSTEM, \"SYSREG_TLBI\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"a TBL invalidation operation specifier\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"SYSREG_SR\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"a Speculation Restriction option name (RCTX)\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"BARRIER\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"a barrier option name\"},\n+  {AARCH64_OPND_CLASS_SYSTEM, \"BARRIER_DSB_NXS\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"the DSB nXS option qualifier name SY, ISH, NSH, OSH or an optional 5-bit unsigned immediate\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"BARRIER_ISB\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"the ISB option name SY or an optional 4-bit unsigned immediate\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"PRFOP\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"a prefetch operation specifier\"},\n   {AARCH64_OPND_CLASS_SYSTEM, \"BARRIER_PSB\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"the PSB/TSB option name CSYNC\"},\n@@ -310,17 +311,17 @@ static const unsigned op_enum_table [] =\n   391,\n   413,\n   415,\n-  1263,\n-  1268,\n-  1261,\n-  1260,\n   1264,\n-  1271,\n-  1273,\n+  1269,\n+  1262,\n+  1261,\n+  1265,\n+  1272,\n   1274,\n-  1270,\n-  1276,\n   1275,\n+  1271,\n+  1277,\n+  1276,\n   131,\n };\n "
    },
    {
      "sha": "cb310dcefb0337829f411d3b5e7ed65ff5fb506a",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -328,6 +328,7 @@ const aarch64_field fields[] =\n     { 12,  1 }, /* rotate3: FCADD immediate rotate.  */\n     { 12,  2 }, /* SM3: Indexed element SM3 2 bits index immediate.  */\n     { 22,  1 }, /* sz: 1-bit element size select.  */\n+    { 10,  2 }, /* CRm_dsb_nxs: 2-bit imm. encoded in CRm<3:2>.  */\n };\n \n enum aarch64_operand_class\n@@ -466,6 +467,14 @@ const struct aarch64_name_value_pair aarch64_barrier_options[16] =\n     { \"sy\",    0xf },\n };\n \n+const struct aarch64_name_value_pair aarch64_barrier_dsb_nxs_options[4] =\n+{                       /*  CRm<3:2>  #imm  */\n+    { \"oshnxs\", 16 },    /*    00       16   */\n+    { \"nshnxs\", 20 },    /*    01       20   */\n+    { \"ishnxs\", 24 },    /*    10       24   */\n+    { \"synxs\",  28 },    /*    11       28   */\n+};\n+\n /* Table describing the operands supported by the aliases of the HINT\n    instruction.\n \n@@ -3750,6 +3759,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n       break;\n \n     case AARCH64_OPND_BARRIER:\n+    case AARCH64_OPND_BARRIER_DSB_NXS:\n       snprintf (buf, size, \"%s\", opnd->barrier->name);\n       break;\n "
    },
    {
      "sha": "768ceee7aa67c4810cd79c0adae45e6329818c94",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -154,7 +154,8 @@ enum aarch64_field_kind\n   FLD_rotate2,\n   FLD_rotate3,\n   FLD_SM3_imm2,\n-  FLD_sz\n+  FLD_sz,\n+  FLD_CRm_dsb_nxs\n };\n \n /* Field description.  */"
    },
    {
      "sha": "119625ad85f9686a08376dd975ebc221cac4be0a",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd195909ce14c7e852319613e7ec6a9a6e7b99ea/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=fd195909ce14c7e852319613e7ec6a9a6e7b99ea",
      "patch": "@@ -2561,6 +2561,8 @@ static const aarch64_feature_set aarch64_feature_v8_r =\n   { NAME, OPCODE, MASK, CLASS, 0, F32MM_SVE, OPS, QUALS, FLAGS, CONSTRAINTS, TIED, NULL }\n #define V8_R_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n   { NAME, OPCODE, MASK, CLASS, 0, ARMV8_R, OPS, QUALS, FLAGS, 0, 0, NULL }\n+#define V8_7_INSN(NAME,OPCODE,MASK,CLASS,OPS,QUALS,FLAGS) \\\n+  { NAME, OPCODE, MASK, CLASS, 0, ARMV8_7, OPS, QUALS, FLAGS, 0, 0, NULL }\n \n struct aarch64_opcode aarch64_opcode_table[] =\n {\n@@ -3853,6 +3855,7 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   CORE_INSN (\"tsb\", 0xd503225f, 0xffffffff, ic_system, 0, OP1 (BARRIER_PSB), {}, F_ALIAS),\n   CORE_INSN (\"clrex\", 0xd503305f, 0xfffff0ff, ic_system, 0, OP1 (UIMM4), {}, F_OPD0_OPT | F_DEFAULT (0xF)),\n   CORE_INSN (\"dsb\", 0xd503309f, 0xfffff0ff, ic_system, 0, OP1 (BARRIER), {}, F_HAS_ALIAS),\n+  V8_7_INSN (\"dsb\", 0xd503323f, 0xfffff3ff, ic_system, OP1 (BARRIER_DSB_NXS), {}, F_HAS_ALIAS),\n   V8_R_INSN (\"dfb\", 0xd5033c9f, 0xffffffff, ic_system, OP0 (), {}, F_ALIAS),\n   CORE_INSN (\"ssbb\", 0xd503309f, 0xffffffff, ic_system, 0, OP0 (), {}, F_ALIAS),\n   CORE_INSN (\"pssbb\", 0xd503349f, 0xffffffff, ic_system, 0, OP0 (), {}, F_ALIAS),\n@@ -5323,6 +5326,8 @@ struct aarch64_opcode aarch64_opcode_table[] =\n       \"a Speculation Restriction option name (RCTX)\")\t\t\t\\\n     Y(SYSTEM, barrier, \"BARRIER\", 0, F(),\t\t\t\t\\\n       \"a barrier option name\")\t\t\t\t\t\t\\\n+    Y(SYSTEM, barrier_dsb_nxs, \"BARRIER_DSB_NXS\", 0, F(),\t\t\t\t\\\n+      \"the DSB nXS option qualifier name SY, ISH, NSH, OSH or an optional 5-bit unsigned immediate\")\t\\\n     Y(SYSTEM, barrier, \"BARRIER_ISB\", 0, F(),\t\t\t\t\\\n       \"the ISB option name SY or an optional 4-bit unsigned immediate\")\t\\\n     Y(SYSTEM, prfop, \"PRFOP\", 0, F(),\t\t\t\t\t\\"
    }
  ]
}