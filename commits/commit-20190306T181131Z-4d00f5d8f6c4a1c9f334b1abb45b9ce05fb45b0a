{
  "sha": "4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGQwMGY1ZDhmNmM0YTFjOWYzMzRiMWFiYjQ1YjljZTA1ZmI0NWIwYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-16T16:42:10Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-06T18:11:31Z"
    },
    "message": "gdb/fortran: Add Fortran 'kind' intrinsic and keyword\n\nThe 'kind' keyword has two uses in Fortran, it is the name of a\nbuiltin intrinsic function, and it is also a keyword used to create a\ntype of a specific kind.\n\nThis commit adds support for using kind as an intrinsic function, and\nalso adds some initial support for using kind to create types of a\nspecific kind.\n\nThis commit only allows the creation of the type 'character(kind=1)',\nhowever, it will be easy enough to extend this in future to support\nmore type kinds.\n\nThe kind of any expression can be queried using the kind intrinsic\nfunction.  At the moment the kind returned corresponds to the size of\nthe type, this matches how gfortran handles kinds.  However, the\ncorrespondence between kind and type size depends on the compiler\nand/or the specific target, so this might not be correct for\neveryone.  If we want to support different compilers/targets in future\nthe code to compute the kind from a type will need to be updated.\n\ngdb/ChangeLog:\n\n\t* expprint.c (dump_subexp_body_standard): Support UNOP_KIND.\n\t* f-exp.y: Define 'KIND' token.\n\t(exp): New pattern for KIND expressions.\n\t(ptype): Handle types with a kind extension.\n\t(direct_abs_decl): Extend to spot kind extensions.\n\t(f77_keywords): Add 'kind' to the list.\n\t(push_kind_type): New function.\n\t(convert_to_kind_type): New function.\n\t* f-lang.c (evaluate_subexp_f): Support UNOP_KIND.\n\t* parse.c (operator_length_standard): Likewise.\n\t* parser-defs.h (enum type_pieces): Add tp_kind.\n\t* std-operator.def: Add UNOP_KIND.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/intrinsics.exp: New file.\n\t* gdb.fortran/intrinsics.f90: New file.\n\t* gdb.fortran/type-kinds.exp: New file.",
    "tree": {
      "sha": "24f8cddb29a1036f7f0f23d6a2178f593a2daeef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/24f8cddb29a1036f7f0f23d6a2178f593a2daeef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e454224fa82aa52a1288a3d6a2e26e8d224d732a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e454224fa82aa52a1288a3d6a2e26e8d224d732a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e454224fa82aa52a1288a3d6a2e26e8d224d732a"
    }
  ],
  "stats": {
    "total": 253,
    "additions": 249,
    "deletions": 4
  },
  "files": [
    {
      "sha": "e2efdb24393121ebe50209d39e974947edcd5e0e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -1,3 +1,19 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\n+\t* expprint.c (dump_subexp_body_standard): Support UNOP_KIND.\n+\t* f-exp.y: Define 'KIND' token.\n+\t(exp): New pattern for KIND expressions.\n+\t(ptype): Handle types with a kind extension.\n+\t(direct_abs_decl): Extend to spot kind extensions.\n+\t(f77_keywords): Add 'kind' to the list.\n+\t(push_kind_type): New function.\n+\t(convert_to_kind_type): New function.\n+\t* f-lang.c (evaluate_subexp_f): Support UNOP_KIND.\n+\t* parse.c (operator_length_standard): Likewise.\n+\t* parser-defs.h (enum type_pieces): Add tp_kind.\n+\t* std-operator.def: Add UNOP_KIND.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-exp.y (f_parse): Set yydebug."
    },
    {
      "sha": "a22499f4833b2379bc08323718bf1d5dec5e602f",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -869,6 +869,7 @@ dump_subexp_body_standard (struct expression *exp,\n     case UNOP_MIN:\n     case UNOP_ODD:\n     case UNOP_TRUNC:\n+    case UNOP_KIND:\n       elt = dump_subexp (exp, stream, elt);\n       break;\n     case OP_LONG:"
    },
    {
      "sha": "327f13736bd3ac526cf0dc015da768551b01e261",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 69,
      "deletions": 1,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -78,6 +78,10 @@ static void growbuf_by_size (int);\n \n static int match_string_literal (void);\n \n+static void push_kind_type (LONGEST val, struct type *type);\n+\n+static struct type *convert_to_kind_type (struct type *basetype, int kind);\n+\n %}\n \n /* Although the yacc \"value\" of an expression is not used,\n@@ -149,7 +153,7 @@ static int parse_number (struct parser_state *, const char *, int,\n \n %token <ssym> NAME_OR_INT \n \n-%token  SIZEOF \n+%token SIZEOF KIND\n %token ERROR\n \n /* Special type cases, put in to allow the parser to distinguish different\n@@ -228,6 +232,10 @@ exp\t:\tSIZEOF exp       %prec UNARY\n \t\t\t{ write_exp_elt_opcode (pstate, UNOP_SIZEOF); }\n \t;\n \n+exp\t:\tKIND '(' exp ')'       %prec UNARY\n+\t\t\t{ write_exp_elt_opcode (pstate, UNOP_KIND); }\n+\t;\n+\n /* No more explicit array operators, we treat everything in F77 as \n    a function call.  The disambiguation as to whether we are \n    doing a subscript operation or a function call is done \n@@ -530,6 +538,13 @@ ptype\t:\ttypebase\n \t\t      case tp_function:\n \t\t\tfollow_type = lookup_function_type (follow_type);\n \t\t\tbreak;\n+\t\t      case tp_kind:\n+\t\t\t{\n+\t\t\t  int kind_val = pop_type_int ();\n+\t\t\t  follow_type\n+\t\t\t    = convert_to_kind_type (follow_type, kind_val);\n+\t\t\t}\n+\t\t\tbreak;\n \t\t      }\n \t\t  $$ = follow_type;\n \t\t}\n@@ -548,6 +563,8 @@ abs_decl:\t'*'\n \n direct_abs_decl: '(' abs_decl ')'\n \t\t\t{ $$ = $2; }\n+\t| \t'(' KIND '=' INT ')'\n+\t\t\t{ push_kind_type ($4.val, $4.type); }\n \t| \tdirect_abs_decl func_mod\n \t\t\t{ push_type (tp_function); }\n \t|\tfunc_mod\n@@ -773,6 +790,54 @@ parse_number (struct parser_state *par_state,\n   return INT;\n }\n \n+/* Called to setup the type stack when we encounter a '(kind=N)' type\n+   modifier, performs some bounds checking on 'N' and then pushes this to\n+   the type stack followed by the 'tp_kind' marker.  */\n+static void\n+push_kind_type (LONGEST val, struct type *type)\n+{\n+  int ival;\n+\n+  if (TYPE_UNSIGNED (type))\n+    {\n+      ULONGEST uval = static_cast <ULONGEST> (val);\n+      if (uval > INT_MAX)\n+\terror (_(\"kind value out of range\"));\n+      ival = static_cast <int> (uval);\n+    }\n+  else\n+    {\n+      if (val > INT_MAX || val < 0)\n+\terror (_(\"kind value out of range\"));\n+      ival = static_cast <int> (val);\n+    }\n+\n+  push_type_int (ival);\n+  push_type (tp_kind);\n+}\n+\n+/* Called when a type has a '(kind=N)' modifier after it, for example\n+   'character(kind=1)'.  The BASETYPE is the type described by 'character'\n+   in our example, and KIND is the integer '1'.  This function returns a\n+   new type that represents the basetype of a specific kind.  */\n+static struct type *\n+convert_to_kind_type (struct type *basetype, int kind)\n+{\n+  if (basetype == parse_f_type (pstate)->builtin_character)\n+    {\n+      /* Character of kind 1 is a special case, this is the same as the\n+\t base character type.  */\n+      if (kind == 1)\n+\treturn parse_f_type (pstate)->builtin_character;\n+    }\n+\n+  error (_(\"unsupported kind %d for type %s\"),\n+\t kind, TYPE_SAFE_NAME (basetype));\n+\n+  /* Should never get here.  */\n+  return nullptr;\n+}\n+\n struct token\n {\n   /* The string to match against.  */\n@@ -840,6 +905,9 @@ static const struct token f77_keywords[] =\n   { \"sizeof\", SIZEOF, BINOP_END, true },\n   { \"real_8\", REAL_S8_KEYWORD, BINOP_END, true },\n   { \"real\", REAL_KEYWORD, BINOP_END, true },\n+  /* The following correspond to actual functions in Fortran and are case\n+     insensitive.  */\n+  { \"kind\", KIND, BINOP_END, false }\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "34ebfd9de6b1803d474ee441660b7e4d3be2979b",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 37,
      "deletions": 2,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -244,8 +244,43 @@ struct value *\n evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \t\t   int *pos, enum noside noside)\n {\n-  /* Currently no special handling is required. */\n-  return evaluate_subexp_standard (expect_type, exp, pos, noside);\n+  struct value *arg1 = NULL;\n+  enum exp_opcode op;\n+  int pc;\n+  struct type *type;\n+\n+  pc = *pos;\n+  *pos += 1;\n+  op = exp->elts[pc].opcode;\n+\n+  switch (op)\n+    {\n+    default:\n+      *pos -= 1;\n+      return evaluate_subexp_standard (expect_type, exp, pos, noside);\n+\n+    case UNOP_KIND:\n+      arg1 = evaluate_subexp (NULL, exp, pos, EVAL_AVOID_SIDE_EFFECTS);\n+      type = value_type (arg1);\n+\n+      switch (TYPE_CODE (type))\n+        {\n+          case TYPE_CODE_STRUCT:\n+          case TYPE_CODE_UNION:\n+          case TYPE_CODE_MODULE:\n+          case TYPE_CODE_FUNC:\n+            error (_(\"argument to kind must be an intrinsic type\"));\n+        }\n+\n+      if (!TYPE_TARGET_TYPE (type))\n+        return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n+\t\t\t\t   TYPE_LENGTH (type));\n+      return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n+\t\t\t\t TYPE_LENGTH (TYPE_TARGET_TYPE(type)));\n+    }\n+\n+  /* Should be unreachable.  */\n+  return nullptr;\n }\n \n static const char *f_extensions[] ="
    },
    {
      "sha": "661574e544e5c7ec6607e3c57613ebca7e20e625",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -927,6 +927,7 @@ operator_length_standard (const struct expression *expr, int endpos,\n     case UNOP_CHR:\n     case UNOP_FLOAT:\n     case UNOP_HIGH:\n+    case UNOP_KIND:\n     case UNOP_ODD:\n     case UNOP_ORD:\n     case UNOP_TRUNC:"
    },
    {
      "sha": "a607eea24938e5e9739e1268884f3e4b66ab0089",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -214,7 +214,8 @@ enum type_pieces\n     tp_const, \n     tp_volatile, \n     tp_space_identifier,\n-    tp_type_stack\n+    tp_type_stack,\n+    tp_kind\n   };\n /* The stack can contain either an enum type_pieces or an int.  */\n union type_stack_elt"
    },
    {
      "sha": "e26861bd131a7cd1b4b475309c2627535e8db1dc",
      "filename": "gdb/std-operator.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/std-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/std-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/std-operator.def?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -244,6 +244,7 @@ OP (UNOP_ORD)\n OP (UNOP_ABS)\n OP (UNOP_FLOAT)\n OP (UNOP_HIGH)\n+OP (UNOP_KIND)\t\t\t/* Fortran KIND function.  */\n OP (UNOP_MAX)\n OP (UNOP_MIN)\n OP (UNOP_ODD)"
    },
    {
      "sha": "221e30012db2cfd779ab60978339e5ae8f82c6e2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/intrinsics.exp: New file.\n+\t* gdb.fortran/intrinsics.f90: New file.\n+\t* gdb.fortran/type-kinds.exp: New file.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/dot-ops.exp: New file."
    },
    {
      "sha": "674f299c4286cdc65836db5b39a22341bf12cc45",
      "filename": "gdb/testsuite/gdb.fortran/intrinsics.exp",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/intrinsics.exp?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -0,0 +1,42 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file tests GDB's handling of Fortran builtin intrinsic functions.\n+\n+load_lib \"fortran.exp\"\n+\n+if { [skip_fortran_tests] } { continue }\n+\n+standard_testfile .f90\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug f90}] } {\n+    return -1\n+}\n+\n+if { ![runto MAIN__] } {\n+    perror \"Could not run to breakpoint `MAIN__'.\"\n+    continue\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"stop-here\"]\n+gdb_continue_to_breakpoint \"stop-here\" \".*stop-here.*\"\n+\n+# Test KIND\n+\n+gdb_test \"p kind (l1)\" \" = 1\"\n+gdb_test \"p kind (l2)\" \" = 2\"\n+gdb_test \"p kind (l4)\" \" = 4\"\n+gdb_test \"p kind (l8)\" \" = 8\"\n+gdb_test \"p kind (s1)\" \"argument to kind must be an intrinsic type\""
    },
    {
      "sha": "1be22ba4643b0999d3df925659be933cf4118242",
      "filename": "gdb/testsuite/gdb.fortran/intrinsics.f90",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/intrinsics.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/intrinsics.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/intrinsics.f90?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -0,0 +1,39 @@\n+! Copyright 2019 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program; if not, see <http://www.gnu.org/licenses/>.\n+\n+program test\n+  logical :: l\n+  logical (kind=1) :: l1\n+  logical (kind=2) :: l2\n+  logical (kind=4) :: l4\n+  logical (kind=8) :: l8\n+\n+  type :: a_struct\n+     logical :: a1\n+     logical :: a2\n+  end type a_struct\n+\n+  type (a_struct) :: s1\n+\n+  s1%a1 = .TRUE.\n+  s1%a2 = .FALSE.\n+\n+  l1 = .TRUE.\n+  l2 = .TRUE.\n+  l4 = .TRUE.\n+  l8 = .TRUE.\n+\n+  l = .FALSE.\t\t\t\t\t! stop-here\n+end"
    },
    {
      "sha": "b60b804411082ee0a41d823339457a1693ed5edb",
      "filename": "gdb/testsuite/gdb.fortran/type-kinds.exp",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/type-kinds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a/gdb/testsuite/gdb.fortran/type-kinds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/type-kinds.exp?ref=4d00f5d8f6c4a1c9f334b1abb45b9ce05fb45b0a",
      "patch": "@@ -0,0 +1,35 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This is a set of tests related to GDB's ability to parse and\n+# correctly handle the (kind=N) type adjustment mechanism within\n+# Fortran.\n+\n+load_lib \"fortran.exp\"\n+\n+if { [skip_fortran_tests] } { continue }\n+\n+# Test parsing of `(kind=N)` type modifiers.\n+proc test_basic_parsing_of_type_kinds {} {\n+    gdb_test \"p ((character (kind=1)) 1)\" \" = 1\"\n+}\n+\n+clean_restart\n+\n+if [set_lang_fortran] then {\n+    test_basic_parsing_of_type_kinds\n+} else {\n+    warning \"$test_name tests suppressed.\" 0\n+}"
    }
  ]
}