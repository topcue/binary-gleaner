{
  "sha": "a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTAxMDYwNWZlZjBlYmE3M2M1NjRjM2RkMjJlMGE2ZWNiYzI2YjEwZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-16T13:24:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-16T13:24:57Z"
    },
    "message": "Fix Cygwin gdb build\n\nSimon pointed out that the windows-nat sharing series broke the Cygwin\nbuild.  This patch fixes the problem, by moving the Cygwin-specific\ncode to a new handler function.  This approach is taken because this\ncode calls find_pc_partial_function, which isn't available in\ngdbserver.\n\ngdb/ChangeLog\n2020-04-16  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (windows_nat::handle_access_violation): New\n\tfunction.\n\t* nat/windows-nat.h (handle_access_violation): Declare.\n\t* nat/windows-nat.c (handle_exception): Move Cygwin code to\n\twindows-nat.c.  Call handle_access_violation.\n\ngdbserver/ChangeLog\n2020-04-16  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.cc (windows_nat::handle_access_violation): New\n\tfunction.",
    "tree": {
      "sha": "ab7b331485ab546acfd5141522d5cc0072eb42ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab7b331485ab546acfd5141522d5cc0072eb42ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/efba5c2319d6c25393e5cce9a2d30bbc0cb53123"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 55,
    "deletions": 20
  },
  "files": [
    {
      "sha": "7ba862edd3496987a2251b77769a6ee361db1620",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-16  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (windows_nat::handle_access_violation): New\n+\tfunction.\n+\t* nat/windows-nat.h (handle_access_violation): Declare.\n+\t* nat/windows-nat.c (handle_exception): Move Cygwin code to\n+\twindows-nat.c.  Call handle_access_violation.\n+\n 2020-04-16  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/25791"
    },
    {
      "sha": "8c2092a51d709974b4e93515bf6b7b00133846dd",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 20,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -184,26 +184,8 @@ handle_exception (struct target_waitstatus *ourstatus, bool debug_exceptions)\n     case EXCEPTION_ACCESS_VIOLATION:\n       DEBUG_EXCEPTION_SIMPLE (\"EXCEPTION_ACCESS_VIOLATION\");\n       ourstatus->value.sig = GDB_SIGNAL_SEGV;\n-#ifdef __CYGWIN__\n-      {\n-\t/* See if the access violation happened within the cygwin DLL\n-\t   itself.  Cygwin uses a kind of exception handling to deal\n-\t   with passed-in invalid addresses.  gdb should not treat\n-\t   these as real SEGVs since they will be silently handled by\n-\t   cygwin.  A real SEGV will (theoretically) be caught by\n-\t   cygwin later in the process and will be sent as a\n-\t   cygwin-specific-signal.  So, ignore SEGVs if they show up\n-\t   within the text segment of the DLL itself.  */\n-\tconst char *fn;\n-\tCORE_ADDR addr = (CORE_ADDR) (uintptr_t) rec->ExceptionAddress;\n-\n-\tif ((!cygwin_exceptions && (addr >= cygwin_load_start\n-\t\t\t\t    && addr < cygwin_load_end))\n-\t    || (find_pc_partial_function (addr, &fn, NULL, NULL)\n-\t\t&& startswith (fn, \"KERNEL32!IsBad\")))\n-\t  return HANDLE_EXCEPTION_UNHANDLED;\n-      }\n-#endif\n+      if (handle_access_violation (rec))\n+\treturn HANDLE_EXCEPTION_UNHANDLED;\n       break;\n     case STATUS_STACK_OVERFLOW:\n       DEBUG_EXCEPTION_SIMPLE (\"STATUS_STACK_OVERFLOW\");"
    },
    {
      "sha": "8d0fa9bd2165b730d49c470d15dd2e0bfcef4553",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -157,6 +157,13 @@ extern void handle_unload_dll ();\n \n extern bool handle_ms_vc_exception (const EXCEPTION_RECORD *rec);\n \n+/* When EXCEPTION_ACCESS_VIOLATION is processed, we give the embedding\n+   application a chance to change it to be considered \"unhandled\".\n+   This function must be supplied by the embedding application.  If it\n+   returns true, then the exception is \"unhandled\".  */\n+\n+extern bool handle_access_violation (const EXCEPTION_RECORD *rec);\n+\n \n /* Currently executing process */\n extern HANDLE current_process_handle;"
    },
    {
      "sha": "b857f82eb897434cc6e1fc21d569dc22fd8015e5",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -1230,6 +1230,31 @@ windows_nat::handle_ms_vc_exception (const EXCEPTION_RECORD *rec)\n   return false;\n }\n \n+/* See nat/windows-nat.h.  */\n+\n+bool\n+windows_nat::handle_access_violation (const EXCEPTION_RECORD *rec)\n+{\n+#ifdef __CYGWIN__\n+  /* See if the access violation happened within the cygwin DLL\n+     itself.  Cygwin uses a kind of exception handling to deal with\n+     passed-in invalid addresses.  gdb should not treat these as real\n+     SEGVs since they will be silently handled by cygwin.  A real SEGV\n+     will (theoretically) be caught by cygwin later in the process and\n+     will be sent as a cygwin-specific-signal.  So, ignore SEGVs if\n+     they show up within the text segment of the DLL itself.  */\n+  const char *fn;\n+  CORE_ADDR addr = (CORE_ADDR) (uintptr_t) rec->ExceptionAddress;\n+\n+  if ((!cygwin_exceptions && (addr >= cygwin_load_start\n+\t\t\t      && addr < cygwin_load_end))\n+      || (find_pc_partial_function (addr, &fn, NULL, NULL)\n+\t  && startswith (fn, \"KERNEL32!IsBad\")))\n+    return true;\n+#endif\n+  return false;\n+}\n+\n /* Resume thread specified by ID, or all artificially suspended\n    threads, if we are continuing execution.  KILLED non-zero means we\n    have killed the inferior, so we should ignore weird errors due to"
    },
    {
      "sha": "96642e5cf391413c06fd384f86b87b7e49770772",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-16  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.cc (windows_nat::handle_access_violation): New\n+\tfunction.\n+\n 2020-04-15  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* win32-low.cc (get_child_debug_event): Fix format string warning."
    },
    {
      "sha": "5a6f0df39f57197bc5a2c8512ae1113cd958b520",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a010605fef0eba73c564c3dd22e0a6ecbc26b10e/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=a010605fef0eba73c564c3dd22e0a6ecbc26b10e",
      "patch": "@@ -1198,6 +1198,14 @@ windows_nat::handle_ms_vc_exception (const EXCEPTION_RECORD *rec)\n   return false;\n }\n \n+/* See nat/windows-nat.h.  */\n+\n+bool\n+windows_nat::handle_access_violation (const EXCEPTION_RECORD *rec)\n+{\n+  return false;\n+}\n+\n /* A helper function that will, if needed, set\n    'stopped_at_software_breakpoint' on the thread and adjust the\n    PC.  */"
    }
  ]
}