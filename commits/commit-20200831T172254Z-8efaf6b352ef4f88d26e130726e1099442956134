{
  "sha": "8efaf6b352ef4f88d26e130726e1099442956134",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGVmYWY2YjM1MmVmNGY4OGQyNmUxMzA3MjZlMTA5OTQ0Mjk1NjEzNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-31T17:22:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-31T17:22:54Z"
    },
    "message": "gdb: make frame_unwind_got_optimized return a not_lval value\n\nTLDR: frame_unwind_got_optimized uses wrong frame id value, trying to\nfix it makes GDB sad, return not_lval value and don't use frame id value\ninstead.\n\nLonger version:\n\nThe `prev_register` method of the `frame_unwind` interface corresponds\nto asking the question: \"where did this frame - passed as a parameter -\nsave the value this register had in its caller frame?\".  When \"this\nframe\" did not save that register value (DW_CFA_undefined in DWARF), the\nimplementation can use the `frame_unwind_got_optimized` function to\ncreate a struct value that represents the optimized out / not saved\nregister.\n\n`frame_unwind_got_optimized` marks the value as fully optimized out,\nsets the lval field to lval_register and assigns the required data for\nlval_register: the next frame id and the register number.  The problem\nis that it uses the frame id from the wrong frame (see below for in\ndepth explanation).  In practice, this is not problematic because the\nframe id is never used: the value is already not lazy (and is marked as\noptimized out), so the value is never fetched from the target.\n\nWhen trying to change it to put the right next frame id in the value, we\nbump into problems: computing the frame id for some frame requires\nunwinding some register, if that register is not saved / optimized out,\nwe try to get the frame id that we are currently computing.\n\nThis patch addresses the problem by changing\n`frame_unwind_got_optimized` to return a not_lval value instead.  Doing\nso, we don't need to put a frame id, so we don't hit that problem.  It\nmay seem like an unnecessary change today, because it looks like we're\nfixing something that is not broken (from the user point of view).\nHowever, the bug becomes user visible with the following patches, where\ninline frames are involved.  I put this change in its own patch to keep\nit logically separate.\n\nLet's now illustrate how we are putting the wrong frame id in the value\nreturned by `frame_unwind_got_optimized`.  Let's assume this stack:\n\n    frame #0\n    frame #1\n    frame #2\n    frame #3\n\nLet's suppose that we are calling `frame_unwind_register_value` with\nframe #2 as the \"next_frame\" parameter and some register number X as the\nregnum parameter.  That is like asking the question \"where did frame #2\nsave frame #3's value for register X\".\n\n`frame_unwind_register_value` calls the frame unwinder's `prev_register`\nmethod, which in our case is `dwarf2_frame_prev_register`.  Note that in\n`dwarf2_frame_prev_register`, the parameter is now called `this_frame`,\nbut its value is still frame #2, and we are still looking for where\nframe #2 saved frame #3's value of register X.\n\nLet's now suppose that frame #2's CFI explicitly indicates that the\nregister X is was not saved (DW_CFA_undefined).  We go into\n`frame_unwind_got_optimized`.\n\nIn `frame_unwind_got_optimized`, the intent is to create a value that\nrepresents register X in frame #3.  An lval_register value requires that\nwe specify the id of the _next_ frame, that is the frame from which we\nwould need to unwind in order to get the value.  Therefore, we would\nwant to put the id of frame #2 in there.\n\nHowever, `frame_unwind_got_optimized` does:\n\n    VALUE_NEXT_FRAME_ID (val)\n      = get_frame_id (get_next_frame_sentinel_okay (frame));\n\nwhere `frame` is frame #2.  The get_next_frame_sentinel_okay call\nreturns frame #1, so we end up putting frame #1's id in the value.\n\nLet's now pretend that we try to \"fix\" it by placing the right frame id,\nin other words doing this change:\n\n    --- a/gdb/frame-unwind.c\n    +++ b/gdb/frame-unwind.c\n    @@ -260,8 +260,7 @@ frame_unwind_got_optimized (struct frame_info *frame, int regnum)\n       mark_value_bytes_optimized_out (val, 0, TYPE_LENGTH (type));\n       VALUE_LVAL (val) = lval_register;\n       VALUE_REGNUM (val) = regnum;\n    -  VALUE_NEXT_FRAME_ID (val)\n    -    = get_frame_id (get_next_frame_sentinel_okay (frame));\n    +  VALUE_NEXT_FRAME_ID (val) = get_frame_id (frame);\n       return val;\n     }\n\nThis makes some tests fails, such as gdb.dwarf2/dw2-undefined-ret-addr.exp,\nlike so:\n\n    ...\n    #9  0x0000557a8ab15a5d in internal_error (file=0x557a8b31ef80 \"/home/simark/src/binutils-gdb/gdb/frame.c\", line=623, fmt=0x557a8b31efe0 \"%s: Assertion `%s' failed.\") at /home/simark/src/binutils-gdb/gdbsupport/errors.cc:55\n    #10 0x0000557a87f816d6 in get_frame_id (fi=0x62100034bde0) at /home/simark/src/binutils-gdb/gdb/frame.c:623\n    #11 0x0000557a87f7cac7 in frame_unwind_got_optimized (frame=0x62100034bde0, regnum=16) at /home/simark/src/binutils-gdb/gdb/frame-unwind.c:264\n    #12 0x0000557a87a71a76 in dwarf2_frame_prev_register (this_frame=0x62100034bde0, this_cache=0x62100034bdf8, regnum=16) at /home/simark/src/binutils-gdb/gdb/dwarf2/frame.c:1267\n    #13 0x0000557a87f86621 in frame_unwind_register_value (next_frame=0x62100034bde0, regnum=16) at /home/simark/src/binutils-gdb/gdb/frame.c:1288\n    #14 0x0000557a87f855d5 in frame_register_unwind (next_frame=0x62100034bde0, regnum=16, optimizedp=0x7fff5f459070, unavailablep=0x7fff5f459080, lvalp=0x7fff5f4590a0, addrp=0x7fff5f4590b0, realnump=0x7fff5f459090, bufferp=0x7fff5f459150 \"\") at /home/simark/src/binutils-gdb/gdb/frame.c:1191\n    #15 0x0000557a87f860ef in frame_unwind_register (next_frame=0x62100034bde0, regnum=16, buf=0x7fff5f459150 \"\") at /home/simark/src/binutils-gdb/gdb/frame.c:1247\n    #16 0x0000557a881875f9 in i386_unwind_pc (gdbarch=0x621000190110, next_frame=0x62100034bde0) at /home/simark/src/binutils-gdb/gdb/i386-tdep.c:1971\n    #17 0x0000557a87fe58a5 in gdbarch_unwind_pc (gdbarch=0x621000190110, next_frame=0x62100034bde0) at /home/simark/src/binutils-gdb/gdb/gdbarch.c:3062\n    #18 0x0000557a87a6267b in dwarf2_tailcall_sniffer_first (this_frame=0x62100034bde0, tailcall_cachep=0x62100034bee0, entry_cfa_sp_offsetp=0x7fff5f4593f0) at /home/simark/src/binutils-gdb/gdb/dwarf2/frame-tailcall.c:387\n    #19 0x0000557a87a70cdf in dwarf2_frame_cache (this_frame=0x62100034bde0, this_cache=0x62100034bdf8) at /home/simark/src/binutils-gdb/gdb/dwarf2/frame.c:1198\n    #20 0x0000557a87a711c2 in dwarf2_frame_this_id (this_frame=0x62100034bde0, this_cache=0x62100034bdf8, this_id=0x62100034be40) at /home/simark/src/binutils-gdb/gdb/dwarf2/frame.c:1226\n    #21 0x0000557a87f81167 in compute_frame_id (fi=0x62100034bde0) at /home/simark/src/binutils-gdb/gdb/frame.c:587\n    #22 0x0000557a87f81803 in get_frame_id (fi=0x62100034bde0) at /home/simark/src/binutils-gdb/gdb/frame.c:635\n    #23 0x0000557a87f7efef in scoped_restore_selected_frame::scoped_restore_selected_frame (this=0x7fff5f459920) at /home/simark/src/binutils-gdb/gdb/frame.c:320\n    #24 0x0000557a891488ae in print_frame_args (fp_opts=..., func=0x621000183b90, frame=0x62100034bde0, num=-1, stream=0x6030000caa20) at /home/simark/src/binutils-gdb/gdb/stack.c:750\n    #25 0x0000557a8914e87a in print_frame (fp_opts=..., frame=0x62100034bde0, print_level=0, print_what=SRC_AND_LOC, print_args=1, sal=...) at /home/simark/src/binutils-gdb/gdb/stack.c:1394\n    #26 0x0000557a8914c2ae in print_frame_info (fp_opts=..., frame=0x62100034bde0, print_level=0, print_what=SRC_AND_LOC, print_args=1, set_current_sal=1) at /home/simark/src/binutils-gdb/gdb/stack.c:1119\n    ...\n\nWe end up calling get_frame_id (in the hunk above, frame #10)  while we are\ncomputing it (frame #21), and that's not good.\n\nNow, the question is how do we fix this.  I suggest making the unwinder\nreturn a not_lval value in this case.\n\nThe reason why we return an lval_register here is to make sure that this\nis printed as \"not saved\" and not \"optimized out\" down the line.  See\nthese two commits:\n\n1. 901461f8eb40 (\"Print registers not saved in the frame as \"<not saved>\"\n   instead of \"<optimized out>\".\").\n2. 6bd273ae450b (\"Make \"set debug frame 1\" output print <not saved> instead of\n   <optimized out>.\")\n\nThe current design (introduced by the first commit) is to check the\nvalue's lval to choose which one to print (see val_print_optimized_out).\n\nMaking the unwinder return not_lval instead of lval_register doesn't\nbreak \"not saved\" when doing \"print $rax\" or \"info registers\", because\nvalue_fetch_lazy_register only consumes the contents and optimized-out\nproperty from the value the unwinder returned.  The value being\nun-lazified stays an lval_register.\n\nI believe that this is a correct technical solution (and not just\npapering over the problem), because what we expect of unwinders is to\ntell us where a given register's value is saved.  If the value is saved\nin memory, -> lval_memory.  If the value is saved in some other register\nof the next frame, -> lval_register.  If the value is not saved, it\ndoesn't really make sense to return an lval_register value.  not_lval\nwould be more appropriate.  If the code then wants to represent an\noptimized out register value (like value_fetch_lazy_register does), then\nit's a separate concern which shouldn't involve the unwinder.\n\nThis change breaks the output of \"set debug frame 1\" though (introduced\nby the second commit), since that logging statement consumes the return\nvalue of the unwinder directly.  To keep the correct behavior, just make\n`frame_unwind_register_value` call `val_print_not_saved` directly,\ninstead of `val_print_optimized_out`.  This is fine because we know in\nthis context that we are always talking about a register value, and that\nwe want to show \"not saved\" for those.\n\nI augmented the gdb.dwarf2/dw2-reg-undefined.exp test case to test some\ncases I stumbled on while working on this, which I think are not tested\nanywhere:\n\n- the \"set debug frame 1\" debug output mentioned above.  It's just debug\n  output, but if we want to make sure it doesn't change, it should be\n  tested\n- printing not-saved register values from the history (should print not\n  saved)\n- copying a not-saved register value in a convenience variable.  In this\n  case, we expect that printing the convenience variable shows\n  \"optimized out\", because we copied the value, not the property of\n  where the value came from.\n\ngdb/ChangeLog:\n\n\t* frame-unwind.c (frame_unwind_got_optimized): Don't set\n\tregnum/frame in value.  Call allocate_value_lazy.\n\t* frame.c (frame_unwind_register_value): Use\n\tval_print_not_saved.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-reg-undefined.exp: Test \"set debug frame 1\"\n\toutput, printing a \"not saved\" value from history and printing a\n\tconvenience variable created from a \"not saved\" value.\n\nChange-Id: If451739a3ef7a5b453b1f50707e21ce16d74807e",
    "tree": {
      "sha": "c4ee10ed0e0bf58e298f41ad5ab9eae0a4b030e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c4ee10ed0e0bf58e298f41ad5ab9eae0a4b030e2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8efaf6b352ef4f88d26e130726e1099442956134",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8efaf6b352ef4f88d26e130726e1099442956134",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8efaf6b352ef4f88d26e130726e1099442956134",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8efaf6b352ef4f88d26e130726e1099442956134/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe1fe7eae95c43bcb1dfda8a6922eda0c9acd1c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe1fe7eae95c43bcb1dfda8a6922eda0c9acd1c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe1fe7eae95c43bcb1dfda8a6922eda0c9acd1c2"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 31,
    "deletions": 13
  },
  "files": [
    {
      "sha": "a982d917057a80bd1e38a31b7caf1f01f6d7a542",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* frame-unwind.c (frame_unwind_got_optimized): Don't set\n+\tregnum/frame in value.  Call allocate_value_lazy.\n+\t* frame.c (frame_unwind_register_value): Use\n+\tval_print_not_saved.\n+\n 2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (NULL_TYPE): Remove, change all uses to nullptr."
    },
    {
      "sha": "32124c5715a6ce84195543ba7a96f0d95b18720e",
      "filename": "gdb/frame-unwind.c",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame-unwind.c?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -251,18 +251,8 @@ frame_unwind_got_optimized (struct frame_info *frame, int regnum)\n {\n   struct gdbarch *gdbarch = frame_unwind_arch (frame);\n   struct type *type = register_type (gdbarch, regnum);\n-  struct value *val;\n-\n-  /* Return an lval_register value, so that we print it as\n-     \"<not saved>\".  */\n-  val = allocate_value_lazy (type);\n-  set_value_lazy (val, 0);\n-  mark_value_bytes_optimized_out (val, 0, TYPE_LENGTH (type));\n-  VALUE_LVAL (val) = lval_register;\n-  VALUE_REGNUM (val) = regnum;\n-  VALUE_NEXT_FRAME_ID (val)\n-    = get_frame_id (get_next_frame_sentinel_okay (frame));\n-  return val;\n+\n+  return allocate_optimized_out_value (type);\n }\n \n /* Return a value which indicates that FRAME copied REGNUM into"
    },
    {
      "sha": "25a601ccf4bb0e21802e6305912cddfe27ffa683",
      "filename": "gdb/frame-unwind.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame-unwind.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame-unwind.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame-unwind.h?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -133,6 +133,9 @@ typedef void (frame_this_id_ftype) (struct frame_info *this_frame,\n    may be a lazy reference to memory, a lazy reference to the value of\n    a register in THIS frame, or a non-lvalue.\n \n+   If the previous frame's register was not saved by THIS_FRAME and is\n+   therefore undefined, return a not_lval wholly optimized-out value.\n+\n    THIS_PROLOGUE_CACHE can be used to share any prolog analysis data\n    with the other unwind methods.  Memory for that cache should be\n    allocated using FRAME_OBSTACK_ZALLOC().  */"
    },
    {
      "sha": "ccaf97dc7e9112aa2658055fa58ff437c6ddbef3",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -1295,7 +1295,7 @@ frame_unwind_register_value (frame_info *next_frame, int regnum)\n       if (value_optimized_out (value))\n \t{\n \t  fprintf_unfiltered (gdb_stdlog, \" \");\n-\t  val_print_optimized_out (value, gdb_stdlog);\n+\t  val_print_not_saved (gdb_stdlog);\n \t}\n       else\n \t{"
    },
    {
      "sha": "db0296d09f80fb494de85c0640a48f9c18bc53c5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.dwarf2/dw2-reg-undefined.exp: Test \"set debug frame 1\"\n+\toutput, printing a \"not saved\" value from history and printing a\n+\tconvenience variable created from a \"not saved\" value.\n+\n 2020-08-31  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/eh_return.exp: Use nopie."
    },
    {
      "sha": "4ab7e2dbfc449bb1c99cd0e87d3eb5272f8a2d6f",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8efaf6b352ef4f88d26e130726e1099442956134/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8efaf6b352ef4f88d26e130726e1099442956134/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp?ref=8efaf6b352ef4f88d26e130726e1099442956134",
      "patch": "@@ -74,3 +74,15 @@ for {set f 0} {$f < 3} {incr f} {\n \t\t    \"r9\\\\s+${pattern_r8_r9_info}\\\\s*\"] \\\n \t\"Check values of rax, rbx, rcx, r8, r9 in frame ${f}\"\n }\n+\n+# Test that the debug log statement in frame_unwind_register_value produces\n+# \"not saved\" and not# \"optimized out\".\n+gdb_test \"set debug frame 1\"\n+gdb_test {print $rax} {frame_unwind_register_value[^\\r\\n]+rax[^\\r\\n]+not saved.*}\n+gdb_test \"set debug frame 0\"\n+\n+# Test that history values show \"not saved\" and not \"optimized out\".\n+gdb_test \"print\" \" = <not saved>\"\n+\n+# Test that convenience variables _don't_ show \"not saved\".\n+gdb_test {print $foo = $rax} \" = <optimized out>\""
    }
  ]
}