{
  "sha": "809a0c354b97bbbcacbd99808f0e328b39614a8f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODA5YTBjMzU0Yjk3YmJiY2FjYmQ5OTgwOGYwZTMyOGIzOTYxNGE4Zg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:30Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:30Z"
    },
    "message": "gdbserver/linux-low: turn fast tracepoint ops into methods\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tRemove the 'install_fast_tracepoint_jump_pad' and\n\t'get_min_fast_tracepoint_insn_len' linux target ops to let the\n\tconcrete linux target define the ops by overriding the declarations\n\tof process_stratum_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the ops.\n\t(class linux_process_target) <supports_fast_tracepoints>\n\t<install_fast_tracepoint_jump_pad>\n\t<get_min_fast_tracepoint_insn_len>: Remove.\n\t* linux-low.cc (linux_process_target::supports_fast_tracepoints)\n\t(linux_process_target::install_fast_tracepoint_jump_pad)\n\t(linux_process_target::get_min_fast_tracepoint_insn_len): Remove.\n\t* linux-x86-low.cc (class x86_target) <supports_fast_tracepoints>\n\t<install_fast_tracepoint_jump_pad>\n\t<get_min_fast_tracepoint_insn_len>: Declare.\n\t(x86_target::supports_fast_tracepoints): Define.\n\t(x86_install_fast_tracepoint_jump_pad): Turn into...\n\t(x86_target::install_fast_tracepoint_jump_pad): ...this.\n\t(x86_get_min_fast_tracepoint_insn_len): Turn into...\n\t(x86_target::get_min_fast_tracepoint_insn_len): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<supports_fast_tracepoints>\n\t<install_fast_tracepoint_jump_pad>\n\t<get_min_fast_tracepoint_insn_len>: Declare.\n\t(aarch64_target::supports_fast_tracepoints): Define.\n\t(aarch64_install_fast_tracepoint_jump_pad): Turn into...\n\t(aarch64_target::install_fast_tracepoint_jump_pad): ...this.\n\t(aarch64_get_min_fast_tracepoint_insn_len): Turn into...\n\t(aarch64_target::get_min_fast_tracepoint_insn_len): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-ppc-low.cc (class ppc_target) <supports_fast_tracepoints>\n\t<install_fast_tracepoint_jump_pad>\n\t<get_min_fast_tracepoint_insn_len>: Declare.\n\t(ppc_target::supports_fast_tracepoints): Define.\n\t(ppc_install_fast_tracepoint_jump_pad): Turn into...\n\t(ppc_target::install_fast_tracepoint_jump_pad): ...this.\n\t(ppc_get_min_fast_tracepoint_insn_len): Turn into...\n\t(ppc_target::get_min_fast_tracepoint_insn_len): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-s390-low.cc (class s390_target) <supports_fast_tracepoints>\n\t<install_fast_tracepoint_jump_pad>\n\t<get_min_fast_tracepoint_insn_len>: Declare.\n\t(s390_target::supports_fast_tracepoints): Define.\n\t(s390_install_fast_tracepoint_jump_pad): Turn into...\n\t(s390_target::install_fast_tracepoint_jump_pad): ...this.\n\t(s390_get_min_fast_tracepoint_insn_len): Turn into...\n\t(s390_target::get_min_fast_tracepoint_insn_len): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-arm-low.cc (the_low_target): Remove the op fields.\n\t* linux-bfin-low.cc (the_low_target): Ditto.\n\t* linux-crisv32-low.cc (the_low_target): Ditto.\n\t* linux-m32r-low.cc (the_low_target): Ditto.\n\t* linux-m68k-low.cc (the_low_target): Ditto.\n\t* linux-sh-low.cc (the_low_target): Ditto.\n\t* linux-tic6x-low.cc (the_low_target): Ditto.\n\t* linux-tile-low.cc (the_low_target): Ditto.\n\t* linux-xtensa-low.cc (the_low_target): Ditto.",
    "tree": {
      "sha": "563bbfd087e87efb83bb1410b11962ec46483557",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/563bbfd087e87efb83bb1410b11962ec46483557"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/809a0c354b97bbbcacbd99808f0e328b39614a8f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/809a0c354b97bbbcacbd99808f0e328b39614a8f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/809a0c354b97bbbcacbd99808f0e328b39614a8f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/809a0c354b97bbbcacbd99808f0e328b39614a8f/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13e567af27e45f7e2f7adc9562d4cfe5a81227f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/13e567af27e45f7e2f7adc9562d4cfe5a81227f9"
    }
  ],
  "stats": {
    "total": 347,
    "additions": 189,
    "deletions": 158
  },
  "files": [
    {
      "sha": "a7689caeea36bf924442574e66f3aae171cceb91",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -1,3 +1,64 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tRemove the 'install_fast_tracepoint_jump_pad' and\n+\t'get_min_fast_tracepoint_insn_len' linux target ops to let the\n+\tconcrete linux target define the ops by overriding the declarations\n+\tof process_stratum_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the ops.\n+\t(class linux_process_target) <supports_fast_tracepoints>\n+\t<install_fast_tracepoint_jump_pad>\n+\t<get_min_fast_tracepoint_insn_len>: Remove.\n+\t* linux-low.cc (linux_process_target::supports_fast_tracepoints)\n+\t(linux_process_target::install_fast_tracepoint_jump_pad)\n+\t(linux_process_target::get_min_fast_tracepoint_insn_len): Remove.\n+\t* linux-x86-low.cc (class x86_target) <supports_fast_tracepoints>\n+\t<install_fast_tracepoint_jump_pad>\n+\t<get_min_fast_tracepoint_insn_len>: Declare.\n+\t(x86_target::supports_fast_tracepoints): Define.\n+\t(x86_install_fast_tracepoint_jump_pad): Turn into...\n+\t(x86_target::install_fast_tracepoint_jump_pad): ...this.\n+\t(x86_get_min_fast_tracepoint_insn_len): Turn into...\n+\t(x86_target::get_min_fast_tracepoint_insn_len): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<supports_fast_tracepoints>\n+\t<install_fast_tracepoint_jump_pad>\n+\t<get_min_fast_tracepoint_insn_len>: Declare.\n+\t(aarch64_target::supports_fast_tracepoints): Define.\n+\t(aarch64_install_fast_tracepoint_jump_pad): Turn into...\n+\t(aarch64_target::install_fast_tracepoint_jump_pad): ...this.\n+\t(aarch64_get_min_fast_tracepoint_insn_len): Turn into...\n+\t(aarch64_target::get_min_fast_tracepoint_insn_len): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-ppc-low.cc (class ppc_target) <supports_fast_tracepoints>\n+\t<install_fast_tracepoint_jump_pad>\n+\t<get_min_fast_tracepoint_insn_len>: Declare.\n+\t(ppc_target::supports_fast_tracepoints): Define.\n+\t(ppc_install_fast_tracepoint_jump_pad): Turn into...\n+\t(ppc_target::install_fast_tracepoint_jump_pad): ...this.\n+\t(ppc_get_min_fast_tracepoint_insn_len): Turn into...\n+\t(ppc_target::get_min_fast_tracepoint_insn_len): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-s390-low.cc (class s390_target) <supports_fast_tracepoints>\n+\t<install_fast_tracepoint_jump_pad>\n+\t<get_min_fast_tracepoint_insn_len>: Declare.\n+\t(s390_target::supports_fast_tracepoints): Define.\n+\t(s390_install_fast_tracepoint_jump_pad): Turn into...\n+\t(s390_target::install_fast_tracepoint_jump_pad): ...this.\n+\t(s390_get_min_fast_tracepoint_insn_len): Turn into...\n+\t(s390_target::get_min_fast_tracepoint_insn_len): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-arm-low.cc (the_low_target): Remove the op fields.\n+\t* linux-bfin-low.cc (the_low_target): Ditto.\n+\t* linux-crisv32-low.cc (the_low_target): Ditto.\n+\t* linux-m32r-low.cc (the_low_target): Ditto.\n+\t* linux-m68k-low.cc (the_low_target): Ditto.\n+\t* linux-sh-low.cc (the_low_target): Ditto.\n+\t* linux-tic6x-low.cc (the_low_target): Ditto.\n+\t* linux-tile-low.cc (the_low_target): Ditto.\n+\t* linux-xtensa-low.cc (the_low_target): Ditto.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'get_thread_area' linux target op into a method of"
    },
    {
      "sha": "37fe93c89591799748a20a0ec6b29198f6d9e2b8",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 30,
      "deletions": 20,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -67,6 +67,18 @@ class aarch64_target : public linux_process_target\n \n   bool supports_tracepoints () override;\n \n+  bool supports_fast_tracepoints () override;\n+\n+  int install_fast_tracepoint_jump_pad\n+    (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+     CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+     CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+     unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+     CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+     char *err) override;\n+\n+  int get_min_fast_tracepoint_insn_len () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -1962,23 +1974,23 @@ static const struct aarch64_insn_visitor visitor =\n   aarch64_ftrace_insn_reloc_others,\n };\n \n-/* Implementation of linux_target_ops method\n+bool\n+aarch64_target::supports_fast_tracepoints ()\n+{\n+  return true;\n+}\n+\n+/* Implementation of target ops method\n    \"install_fast_tracepoint_jump_pad\".  */\n \n-static int\n-aarch64_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n-\t\t\t\t\t  CORE_ADDR tpaddr,\n-\t\t\t\t\t  CORE_ADDR collector,\n-\t\t\t\t\t  CORE_ADDR lockaddr,\n-\t\t\t\t\t  ULONGEST orig_size,\n-\t\t\t\t\t  CORE_ADDR *jump_entry,\n-\t\t\t\t\t  CORE_ADDR *trampoline,\n-\t\t\t\t\t  ULONGEST *trampoline_size,\n-\t\t\t\t\t  unsigned char *jjump_pad_insn,\n-\t\t\t\t\t  ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t\t  CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t\t  CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t\t  char *err)\n+int\n+aarch64_target::install_fast_tracepoint_jump_pad\n+  (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+   CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+   CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+   unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+   CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+   char *err)\n {\n   uint32_t buf[256];\n   uint32_t *p = buf;\n@@ -3087,11 +3099,11 @@ aarch64_emit_ops (void)\n   return &aarch64_emit_ops_impl;\n }\n \n-/* Implementation of linux_target_ops method\n+/* Implementation of target ops method\n    \"get_min_fast_tracepoint_insn_len\".  */\n \n-static int\n-aarch64_get_min_fast_tracepoint_insn_len (void)\n+int\n+aarch64_target::get_min_fast_tracepoint_insn_len ()\n {\n   return 4;\n }\n@@ -3151,9 +3163,7 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_install_fast_tracepoint_jump_pad,\n   aarch64_emit_ops,\n-  aarch64_get_min_fast_tracepoint_insn_len,\n   aarch64_supports_range_stepping,\n   aarch64_supports_hardware_single_step,\n   aarch64_get_syscall_trapinfo,"
    },
    {
      "sha": "942f26302365944e7bce36f90cdf20a7965af507",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -1117,9 +1117,7 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   arm_supports_hardware_single_step,\n   arm_get_syscall_trapinfo,"
    },
    {
      "sha": "4eaa19ebf3dbce5de849ae9d47da415a0111751e",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -171,9 +171,7 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   bfin_supports_hardware_single_step,\n };"
    },
    {
      "sha": "25816cc381289a2f0c89c19646071b392e8c6e91",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -468,9 +468,7 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   cris_supports_hardware_single_step,\n };"
    },
    {
      "sha": "f93d495daabce200a282e644125ef517de3b0b72",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 29,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -6496,29 +6496,6 @@ linux_process_target::done_accessing_memory ()\n     target_unpause_all (true);\n }\n \n-bool\n-linux_process_target::supports_fast_tracepoints ()\n-{\n-  return the_low_target.install_fast_tracepoint_jump_pad != nullptr;\n-}\n-\n-int\n-linux_process_target::install_fast_tracepoint_jump_pad\n-  (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n-   CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n-   CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n-   unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n-   CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n-   char *err)\n-{\n-  return (*the_low_target.install_fast_tracepoint_jump_pad)\n-    (tpoint, tpaddr, collector, lockaddr, orig_size,\n-     jump_entry, trampoline, trampoline_size,\n-     jjump_pad_insn, jjump_pad_insn_size,\n-     adjusted_insn_addr, adjusted_insn_addr_end,\n-     err);\n-}\n-\n emit_ops *\n linux_process_target::emit_ops ()\n {\n@@ -6528,12 +6505,6 @@ linux_process_target::emit_ops ()\n     return NULL;\n }\n \n-int\n-linux_process_target::get_min_fast_tracepoint_insn_len ()\n-{\n-  return (*the_low_target.get_min_fast_tracepoint_insn_len) ();\n-}\n-\n /* Extract &phdr and num_phdr in the inferior.  Return 0 on success.  */\n \n static int"
    },
    {
      "sha": "7c0e358b5b45ff283675587ef35400030fc91fe1",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 0,
      "deletions": 37,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -131,29 +131,10 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* Install a fast tracepoint jump pad.  See target.h for\n-     comments.  */\n-  int (*install_fast_tracepoint_jump_pad) (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n-\t\t\t\t\t   CORE_ADDR collector,\n-\t\t\t\t\t   CORE_ADDR lockaddr,\n-\t\t\t\t\t   ULONGEST orig_size,\n-\t\t\t\t\t   CORE_ADDR *jump_entry,\n-\t\t\t\t\t   CORE_ADDR *trampoline,\n-\t\t\t\t\t   ULONGEST *trampoline_size,\n-\t\t\t\t\t   unsigned char *jjump_pad_insn,\n-\t\t\t\t\t   ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t\t   CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t\t   CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t\t   char *err);\n-\n   /* Return the bytecode operations vector for the current inferior.\n      Returns NULL if bytecode compilation is not supported.  */\n   struct emit_ops *(*emit_ops) (void);\n \n-  /* Return the minimum length of an instruction that can be safely overwritten\n-     for use as a fast tracepoint.  */\n-  int (*get_min_fast_tracepoint_insn_len) (void);\n-\n   /* Returns true if the low target supports range stepping.  */\n   int (*supports_range_stepping) (void);\n \n@@ -303,24 +284,6 @@ class linux_process_target : public process_stratum_target\n \n   void stabilize_threads () override;\n \n-  bool supports_fast_tracepoints () override;\n-\n-  int install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n-\t\t\t\t\tCORE_ADDR tpaddr,\n-\t\t\t\t\tCORE_ADDR collector,\n-\t\t\t\t\tCORE_ADDR lockaddr,\n-\t\t\t\t\tULONGEST orig_size,\n-\t\t\t\t\tCORE_ADDR *jump_entry,\n-\t\t\t\t\tCORE_ADDR *trampoline,\n-\t\t\t\t\tULONGEST *trampoline_size,\n-\t\t\t\t\tunsigned char *jjump_pad_insn,\n-\t\t\t\t\tULONGEST *jjump_pad_insn_size,\n-\t\t\t\t\tCORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t\tCORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t\tchar *err) override;\n-\n-  int get_min_fast_tracepoint_insn_len () override;\n-\n   struct emit_ops *emit_ops () override;\n \n   bool supports_disable_randomization () override;"
    },
    {
      "sha": "8ce65dac8497eb1194e7a316a6a0ce819d7427ac",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -161,9 +161,7 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   m32r_supports_hardware_single_step,\n };"
    },
    {
      "sha": "017b26bca817a7bb19abf6bd59270c6ba3423033",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -265,9 +265,7 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   m68k_supports_hardware_single_step,\n };"
    },
    {
      "sha": "09a9be306f01af32c3eb84e41e125a7802f707e6",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 34,
      "deletions": 17,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -65,6 +65,18 @@ class ppc_target : public linux_process_target\n \n   bool supports_tracepoints () override;\n \n+  bool supports_fast_tracepoints () override;\n+\n+  int install_fast_tracepoint_jump_pad\n+    (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+     CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+     CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+     unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+     CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+     char *err) override;\n+\n+  int get_min_fast_tracepoint_insn_len () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -1570,22 +1582,29 @@ ppc_relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc)\n   *to += 4;\n }\n \n+bool\n+ppc_target::supports_fast_tracepoints ()\n+{\n+  return true;\n+}\n+\n /* Implement install_fast_tracepoint_jump_pad of target_ops.\n    See target.h for details.  */\n \n-static int\n-ppc_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n-\t\t\t\t      CORE_ADDR collector,\n-\t\t\t\t      CORE_ADDR lockaddr,\n-\t\t\t\t      ULONGEST orig_size,\n-\t\t\t\t      CORE_ADDR *jump_entry,\n-\t\t\t\t      CORE_ADDR *trampoline,\n-\t\t\t\t      ULONGEST *trampoline_size,\n-\t\t\t\t      unsigned char *jjump_pad_insn,\n-\t\t\t\t      ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t      CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t      CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t      char *err)\n+int\n+ppc_target::install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n+\t\t\t\t\t      CORE_ADDR tpaddr,\n+\t\t\t\t\t      CORE_ADDR collector,\n+\t\t\t\t\t      CORE_ADDR lockaddr,\n+\t\t\t\t\t      ULONGEST orig_size,\n+\t\t\t\t\t      CORE_ADDR *jump_entry,\n+\t\t\t\t\t      CORE_ADDR *trampoline,\n+\t\t\t\t\t      ULONGEST *trampoline_size,\n+\t\t\t\t\t      unsigned char *jjump_pad_insn,\n+\t\t\t\t\t      ULONGEST *jjump_pad_insn_size,\n+\t\t\t\t\t      CORE_ADDR *adjusted_insn_addr,\n+\t\t\t\t\t      CORE_ADDR *adjusted_insn_addr_end,\n+\t\t\t\t\t      char *err)\n {\n   uint32_t buf[256];\n   uint32_t *p = buf;\n@@ -1779,8 +1798,8 @@ ppc_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n \n /* Returns the minimum instruction length for installing a tracepoint.  */\n \n-static int\n-ppc_get_min_fast_tracepoint_insn_len (void)\n+int\n+ppc_target::get_min_fast_tracepoint_insn_len ()\n {\n   return 4;\n }\n@@ -3433,9 +3452,7 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_install_fast_tracepoint_jump_pad,\n   ppc_emit_ops,\n-  ppc_get_min_fast_tracepoint_insn_len,\n   NULL, /* supports_range_stepping */\n   ppc_supports_hardware_single_step,\n   NULL, /* get_syscall_trapinfo */"
    },
    {
      "sha": "2b093b898bdc9342e464ae152a010e90effb19c7",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 30,
      "deletions": 20,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -65,6 +65,18 @@ class s390_target : public linux_process_target\n \n   bool supports_tracepoints () override;\n \n+  bool supports_fast_tracepoints () override;\n+\n+  int install_fast_tracepoint_jump_pad\n+    (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+     CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+     CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+     unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+     CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+     char *err) override;\n+\n+  int get_min_fast_tracepoint_insn_len () override;\n+\n   void low_collect_ptrace_register (regcache *regcache, int regno,\n \t\t\t\t    char *buf) override;\n \n@@ -1255,23 +1267,23 @@ s390_relocate_instruction (CORE_ADDR *to, CORE_ADDR oldloc, int is_64)\n   return 0;\n }\n \n-/* Implementation of linux_target_ops method\n+bool\n+s390_target::supports_fast_tracepoints ()\n+{\n+  return true;\n+}\n+\n+/* Implementation of target ops method\n    \"install_fast_tracepoint_jump_pad\".  */\n \n-static int\n-s390_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n-\t\t\t\t       CORE_ADDR tpaddr,\n-\t\t\t\t       CORE_ADDR collector,\n-\t\t\t\t       CORE_ADDR lockaddr,\n-\t\t\t\t       ULONGEST orig_size,\n-\t\t\t\t       CORE_ADDR *jump_entry,\n-\t\t\t\t       CORE_ADDR *trampoline,\n-\t\t\t\t       ULONGEST *trampoline_size,\n-\t\t\t\t       unsigned char *jjump_pad_insn,\n-\t\t\t\t       ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t       CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t       CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t       char *err)\n+int\n+s390_target::install_fast_tracepoint_jump_pad\n+  (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+   CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+   CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+   unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+   CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+   char *err)\n {\n   int i;\n   int64_t loffset;\n@@ -1425,11 +1437,11 @@ s390_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n   return 0;\n }\n \n-/* Implementation of linux_target_ops method\n+/* Implementation of target ops method\n    \"get_min_fast_tracepoint_insn_len\".  */\n \n-static int\n-s390_get_min_fast_tracepoint_insn_len (void)\n+int\n+s390_target::get_min_fast_tracepoint_insn_len ()\n {\n   /* We only support using 6-byte jumps to reach the tracepoint code.\n      If the tracepoint buffer were allocated sufficiently close (64kiB)\n@@ -2849,9 +2861,7 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_install_fast_tracepoint_jump_pad,\n   s390_emit_ops,\n-  s390_get_min_fast_tracepoint_insn_len,\n   NULL, /* supports_range_stepping */\n   s390_supports_hardware_single_step,\n   NULL, /* get_syscall_trapinfo */"
    },
    {
      "sha": "847f686380caff8b3d6fbfa04330ca8df8caf0b4",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -192,9 +192,7 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   sh_supports_hardware_single_step,\n };"
    },
    {
      "sha": "220681e9cece5ae2a0cf54171aba74f648dc26ef",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -423,9 +423,7 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   tic6x_supports_hardware_single_step,\n };"
    },
    {
      "sha": "7a840c4dbd68e0b5dff763d893ee362bc6882d49",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -224,9 +224,7 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   tile_supports_hardware_single_step,\n };"
    },
    {
      "sha": "de992fc062eea3660ea28052ac88fdef706edf81",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 34,
      "deletions": 17,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -110,6 +110,18 @@ class x86_target : public linux_process_target\n \n   bool supports_tracepoints () override;\n \n+  bool supports_fast_tracepoints () override;\n+\n+  int install_fast_tracepoint_jump_pad\n+    (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+     CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+     CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+     unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+     CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+     char *err) override;\n+\n+  int get_min_fast_tracepoint_insn_len () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -1525,19 +1537,26 @@ i386_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n   return 0;\n }\n \n-static int\n-x86_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n-\t\t\t\t      CORE_ADDR collector,\n-\t\t\t\t      CORE_ADDR lockaddr,\n-\t\t\t\t      ULONGEST orig_size,\n-\t\t\t\t      CORE_ADDR *jump_entry,\n-\t\t\t\t      CORE_ADDR *trampoline,\n-\t\t\t\t      ULONGEST *trampoline_size,\n-\t\t\t\t      unsigned char *jjump_pad_insn,\n-\t\t\t\t      ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t      CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t      CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t      char *err)\n+bool\n+x86_target::supports_fast_tracepoints ()\n+{\n+  return true;\n+}\n+\n+int\n+x86_target::install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n+\t\t\t\t\t      CORE_ADDR tpaddr,\n+\t\t\t\t\t      CORE_ADDR collector,\n+\t\t\t\t\t      CORE_ADDR lockaddr,\n+\t\t\t\t\t      ULONGEST orig_size,\n+\t\t\t\t\t      CORE_ADDR *jump_entry,\n+\t\t\t\t\t      CORE_ADDR *trampoline,\n+\t\t\t\t\t      ULONGEST *trampoline_size,\n+\t\t\t\t\t      unsigned char *jjump_pad_insn,\n+\t\t\t\t\t      ULONGEST *jjump_pad_insn_size,\n+\t\t\t\t\t      CORE_ADDR *adjusted_insn_addr,\n+\t\t\t\t\t      CORE_ADDR *adjusted_insn_addr_end,\n+\t\t\t\t\t      char *err)\n {\n #ifdef __x86_64__\n   if (is_64bit_tdesc ())\n@@ -1566,8 +1585,8 @@ x86_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n /* Return the minimum instruction length for fast tracepoints on x86/x86-64\n    architectures.  */\n \n-static int\n-x86_get_min_fast_tracepoint_insn_len (void)\n+int\n+x86_target::get_min_fast_tracepoint_insn_len ()\n {\n   static int warned_about_fast_tracepoints = 0;\n \n@@ -2971,9 +2990,7 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_install_fast_tracepoint_jump_pad,\n   x86_emit_ops,\n-  x86_get_min_fast_tracepoint_insn_len,\n   x86_supports_range_stepping,\n   x86_supports_hardware_single_step,\n   x86_get_syscall_trapinfo,"
    },
    {
      "sha": "94501216e0c8b46485c40de1e10720a83958d46a",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809a0c354b97bbbcacbd99808f0e328b39614a8f/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=809a0c354b97bbbcacbd99808f0e328b39614a8f",
      "patch": "@@ -329,9 +329,7 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* supports_range_stepping */\n   xtensa_supports_hardware_single_step,\n };"
    }
  ]
}