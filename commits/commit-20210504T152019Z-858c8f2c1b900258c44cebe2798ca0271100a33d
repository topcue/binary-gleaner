{
  "sha": "858c8f2c1b900258c44cebe2798ca0271100a33d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODU4YzhmMmMxYjkwMDI1OGM0NGNlYmUyNzk4Y2EwMjcxMTAwYTMzZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-05-04T15:20:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-04T15:20:19Z"
    },
    "message": "gdb/testsuite: adjust gdb.python/flexible-array-member.exp expected pattern\n\nThe `Type.range ()` tests in gdb.python/flexible-array-member.exp pass\nwhen the test is compiled with gcc 9 or later, but not with gcc 8 or\nearlier:\n\n    $ make check TESTS=\"gdb.python/flexible-array-member.exp\" RUNTESTFLAGS=\"CC_FOR_TARGET='gcc-8'\"\n\n    python print(zs['items'].type.range())^M\n    (0, 0)^M\n    (gdb) FAIL: gdb.python/flexible-array-member.exp: python print(zs['items'].type.range())\n    python print(zso['items'].type.range())^M\n    (0, 0)^M\n    (gdb) FAIL: gdb.python/flexible-array-member.exp: python print(zso['items'].type.range())\n\nThe value that we get for the upper bound of a flexible array member\ndeclared with a \"0\" size is 0 with gcc <= 8 and is -1 for gcc >= 9.\nThis is due to different debug info.  For this member, gcc 8 does:\n\n    0x000000d5:   DW_TAG_array_type\n                    DW_AT_type [DW_FORM_ref4]       (0x00000034 \"int\")\n                    DW_AT_sibling [DW_FORM_ref4]    (0x000000e4)\n\n    0x000000de:     DW_TAG_subrange_type\n                      DW_AT_type [DW_FORM_ref4]     (0x0000002d \"long unsigned int\")\n\nFor the same type, gcc 9 does:\n\n    0x000000d5:   DW_TAG_array_type\n                    DW_AT_type [DW_FORM_ref4]       (0x00000034 \"int\")\n                    DW_AT_sibling [DW_FORM_ref4]    (0x000000e5)\n\n    0x000000de:     DW_TAG_subrange_type\n                      DW_AT_type [DW_FORM_ref4]     (0x0000002d \"long unsigned int\")\n                      DW_AT_count [DW_FORM_data1]   (0x00)\n\nIdeally, GDB would present a consistent and documented value for an\narray member declared with size 0, regardless of how the debug info\nlooks like.  But for now, just change the test to accept the two\nvalues, to get rid of the failure and make the test in sync\n\nI also realized (by looking at the py-type.exp test) that calling the\nfields method on an array type yields one field representing the \"index\"\nof the array.  The type of that field is of type range\n(gdb.TYPE_CODE_RANGE).  When calling `.range()` on that range type, it\nyields the same range tuple as when calling `.range()` on the array type\nitself.  For completeness, add some tests to access the range tuple\nthrough that range type as well.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/flexible-array-member.exp: Adjust expected range\n\tvalue for member declared with 0 size.  Test accessing range\n\ttuple through range type.\n\nChange-Id: Ie4e06d99fe9315527f04577888f48284d649ca4c",
    "tree": {
      "sha": "4916784d40d8020db3b1eb05106009f7c55f0826",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4916784d40d8020db3b1eb05106009f7c55f0826"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/858c8f2c1b900258c44cebe2798ca0271100a33d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/858c8f2c1b900258c44cebe2798ca0271100a33d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/858c8f2c1b900258c44cebe2798ca0271100a33d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/858c8f2c1b900258c44cebe2798ca0271100a33d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd6d8601f304d03ecdebe1b1a7d48666845a91aa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd6d8601f304d03ecdebe1b1a7d48666845a91aa"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 18,
    "deletions": 4
  },
  "files": [
    {
      "sha": "32eba3663a74caa30f53f11a23a38b4daff99b23",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/858c8f2c1b900258c44cebe2798ca0271100a33d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/858c8f2c1b900258c44cebe2798ca0271100a33d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=858c8f2c1b900258c44cebe2798ca0271100a33d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.python/flexible-array-member.exp: Adjust expected range\n+\tvalue for member declared with 0 size.  Test accessing range\n+\ttuple through range type.\n+\n 2021-05-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR testsuite/27788"
    },
    {
      "sha": "eab94e8a41201728125b93ed677cb6d56d2b3905",
      "filename": "gdb/testsuite/gdb.python/flexible-array-member.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/858c8f2c1b900258c44cebe2798ca0271100a33d/gdb/testsuite/gdb.python/flexible-array-member.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/858c8f2c1b900258c44cebe2798ca0271100a33d/gdb/testsuite/gdb.python/flexible-array-member.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/flexible-array-member.exp?ref=858c8f2c1b900258c44cebe2798ca0271100a33d",
      "patch": "@@ -76,9 +76,17 @@ gdb_test \"python print(zso\\['items'\\] == zso\\['items'\\]\\[0\\].address)\" \"True\"\n gdb_test \"python print(zso\\['items'\\]\\[0\\].address + 1 == zso\\['items'\\]\\[1\\].address)\" \"True\"\n \n # Verify the range attribute.  It looks a bit inconsistent that the high bound\n-# is sometimes 0, sometimes -1, but that's what GDB produces today, so that's\n-# what we test.\n+# is sometimes 0, sometimes -1.  It depends on the way the flexible array\n+# member is specified and on the compiler version (the debug info is\n+# different).  But that's what GDB produces today, so that's what we test.\n \n gdb_test \"python print(ns\\['items'\\].type.range())\" \"\\\\(0, 0\\\\)\"\n-gdb_test \"python print(zs\\['items'\\].type.range())\" \"\\\\(0, -1\\\\)\"\n-gdb_test \"python print(zso\\['items'\\].type.range())\" \"\\\\(0, -1\\\\)\"\n+gdb_test \"python print(zs\\['items'\\].type.range())\" \"\\\\(0, (0|-1)\\\\)\"\n+gdb_test \"python print(zso\\['items'\\].type.range())\" \"\\\\(0, (0|-1)\\\\)\"\n+\n+# Test the same thing, but going explicitly through the array index's range\n+# type.\n+\n+gdb_test \"python print(ns\\['items'\\].type.fields()\\[0\\].type.range())\" \"\\\\(0, 0\\\\)\"\n+gdb_test \"python print(zs\\['items'\\].type.fields()\\[0\\].type.range())\" \"\\\\(0, (0|-1)\\\\)\"\n+gdb_test \"python print(zso\\['items'\\].type.fields()\\[0\\].type.range())\" \"\\\\(0, (0|-1)\\\\)\""
    }
  ]
}