{
  "sha": "5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWU4MDYwMGVkMGU5MjlmYWFlYWMyMDVkYmYwZDRlN2Y5YjI4NDJjYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:09Z"
    },
    "message": "Split out eval_op_objc_msgcall\n\nThis splits OP_OBJC_MSGCALL into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_objc_msgcall): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "6e39f764d45acc583cb60a84f3cbc5572e5055db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e39f764d45acc583cb60a84f3cbc5572e5055db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb5ba2ab26ffcc00d11c2540685617ef3f29c6b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb5ba2ab26ffcc00d11c2540685617ef3f29c6b2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb5ba2ab26ffcc00d11c2540685617ef3f29c6b2"
    }
  ],
  "stats": {
    "total": 535,
    "additions": 286,
    "deletions": 249
  },
  "files": [
    {
      "sha": "a495f905168149b5ad0250c26ef5009b5d90876f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_objc_msgcall): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_binop_assign_modify): New function."
    },
    {
      "sha": "3033778e4328d28ce1c17fb65e99ecbe28d92d5e",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 281,
      "deletions": 249,
      "changes": 530,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e80600ed0e929faaeac205dbf0d4e7f9b2842cb/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=5e80600ed0e929faaeac205dbf0d4e7f9b2842cb",
      "patch": "@@ -2089,6 +2089,277 @@ eval_binop_assign_modify (struct type *expect_type, struct expression *exp,\n   return value_assign (arg1, arg2);\n }\n \n+/* Note that ARGS needs 2 empty slots up front and must end with a\n+   null pointer.  */\n+static struct value *\n+eval_op_objc_msgcall (struct type *expect_type, struct expression *exp,\n+\t\t      enum noside noside, CORE_ADDR selector,\n+\t\t      value *target, gdb::array_view<value *> args)\n+{\n+  CORE_ADDR responds_selector = 0;\n+  CORE_ADDR method_selector = 0;\n+\n+  int struct_return = 0;\n+\n+  struct value *msg_send = NULL;\n+  struct value *msg_send_stret = NULL;\n+  int gnu_runtime = 0;\n+\n+  struct value *method = NULL;\n+  struct value *called_method = NULL;\n+\n+  struct type *selector_type = NULL;\n+  struct type *long_type;\n+  struct type *type;\n+\n+  struct value *ret = NULL;\n+  CORE_ADDR addr = 0;\n+\n+  value *argvec[5];\n+\n+  long_type = builtin_type (exp->gdbarch)->builtin_long;\n+  selector_type = builtin_type (exp->gdbarch)->builtin_data_ptr;\n+\n+  if (value_as_long (target) == 0)\n+    return value_from_longest (long_type, 0);\n+\n+  if (lookup_minimal_symbol (\"objc_msg_lookup\", 0, 0).minsym)\n+    gnu_runtime = 1;\n+\n+  /* Find the method dispatch (Apple runtime) or method lookup\n+     (GNU runtime) function for Objective-C.  These will be used\n+     to lookup the symbol information for the method.  If we\n+     can't find any symbol information, then we'll use these to\n+     call the method, otherwise we can call the method\n+     directly.  The msg_send_stret function is used in the special\n+     case of a method that returns a structure (Apple runtime\n+     only).  */\n+  if (gnu_runtime)\n+    {\n+      type = selector_type;\n+\n+      type = lookup_function_type (type);\n+      type = lookup_pointer_type (type);\n+      type = lookup_function_type (type);\n+      type = lookup_pointer_type (type);\n+\n+      msg_send = find_function_in_inferior (\"objc_msg_lookup\", NULL);\n+      msg_send_stret\n+\t= find_function_in_inferior (\"objc_msg_lookup\", NULL);\n+\n+      msg_send = value_from_pointer (type, value_as_address (msg_send));\n+      msg_send_stret = value_from_pointer (type,\n+\t\t\t\t\t   value_as_address (msg_send_stret));\n+    }\n+  else\n+    {\n+      msg_send = find_function_in_inferior (\"objc_msgSend\", NULL);\n+      /* Special dispatcher for methods returning structs.  */\n+      msg_send_stret\n+\t= find_function_in_inferior (\"objc_msgSend_stret\", NULL);\n+    }\n+\n+  /* Verify the target object responds to this method.  The\n+     standard top-level 'Object' class uses a different name for\n+     the verification method than the non-standard, but more\n+     often used, 'NSObject' class.  Make sure we check for both.  */\n+\n+  responds_selector\n+    = lookup_child_selector (exp->gdbarch, \"respondsToSelector:\");\n+  if (responds_selector == 0)\n+    responds_selector\n+      = lookup_child_selector (exp->gdbarch, \"respondsTo:\");\n+\n+  if (responds_selector == 0)\n+    error (_(\"no 'respondsTo:' or 'respondsToSelector:' method\"));\n+\n+  method_selector\n+    = lookup_child_selector (exp->gdbarch, \"methodForSelector:\");\n+  if (method_selector == 0)\n+    method_selector\n+      = lookup_child_selector (exp->gdbarch, \"methodFor:\");\n+\n+  if (method_selector == 0)\n+    error (_(\"no 'methodFor:' or 'methodForSelector:' method\"));\n+\n+  /* Call the verification method, to make sure that the target\n+     class implements the desired method.  */\n+\n+  argvec[0] = msg_send;\n+  argvec[1] = target;\n+  argvec[2] = value_from_longest (long_type, responds_selector);\n+  argvec[3] = value_from_longest (long_type, selector);\n+  argvec[4] = 0;\n+\n+  ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n+  if (gnu_runtime)\n+    {\n+      /* Function objc_msg_lookup returns a pointer.  */\n+      argvec[0] = ret;\n+      ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n+    }\n+  if (value_as_long (ret) == 0)\n+    error (_(\"Target does not respond to this message selector.\"));\n+\n+  /* Call \"methodForSelector:\" method, to get the address of a\n+     function method that implements this selector for this\n+     class.  If we can find a symbol at that address, then we\n+     know the return type, parameter types etc.  (that's a good\n+     thing).  */\n+\n+  argvec[0] = msg_send;\n+  argvec[1] = target;\n+  argvec[2] = value_from_longest (long_type, method_selector);\n+  argvec[3] = value_from_longest (long_type, selector);\n+  argvec[4] = 0;\n+\n+  ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n+  if (gnu_runtime)\n+    {\n+      argvec[0] = ret;\n+      ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n+    }\n+\n+  /* ret should now be the selector.  */\n+\n+  addr = value_as_long (ret);\n+  if (addr)\n+    {\n+      struct symbol *sym = NULL;\n+\n+      /* The address might point to a function descriptor;\n+\t resolve it to the actual code address instead.  */\n+      addr = gdbarch_convert_from_func_ptr_addr (exp->gdbarch, addr,\n+\t\t\t\t\t\t current_top_target ());\n+\n+      /* Is it a high_level symbol?  */\n+      sym = find_pc_function (addr);\n+      if (sym != NULL)\n+\tmethod = value_of_variable (sym, 0);\n+    }\n+\n+  /* If we found a method with symbol information, check to see\n+     if it returns a struct.  Otherwise assume it doesn't.  */\n+\n+  if (method)\n+    {\n+      CORE_ADDR funaddr;\n+      struct type *val_type;\n+\n+      funaddr = find_function_addr (method, &val_type);\n+\n+      block_for_pc (funaddr);\n+\n+      val_type = check_typedef (val_type);\n+\n+      if ((val_type == NULL)\n+\t  || (val_type->code () == TYPE_CODE_ERROR))\n+\t{\n+\t  if (expect_type != NULL)\n+\t    val_type = expect_type;\n+\t}\n+\n+      struct_return = using_struct_return (exp->gdbarch, method,\n+\t\t\t\t\t   val_type);\n+    }\n+  else if (expect_type != NULL)\n+    {\n+      struct_return = using_struct_return (exp->gdbarch, NULL,\n+\t\t\t\t\t   check_typedef (expect_type));\n+    }\n+\n+  /* Found a function symbol.  Now we will substitute its\n+     value in place of the message dispatcher (obj_msgSend),\n+     so that we call the method directly instead of thru\n+     the dispatcher.  The main reason for doing this is that\n+     we can now evaluate the return value and parameter values\n+     according to their known data types, in case we need to\n+     do things like promotion, dereferencing, special handling\n+     of structs and doubles, etc.\n+\n+     We want to use the type signature of 'method', but still\n+     jump to objc_msgSend() or objc_msgSend_stret() to better\n+     mimic the behavior of the runtime.  */\n+\n+  if (method)\n+    {\n+      if (value_type (method)->code () != TYPE_CODE_FUNC)\n+\terror (_(\"method address has symbol information \"\n+\t\t \"with non-function type; skipping\"));\n+\n+      /* Create a function pointer of the appropriate type, and\n+\t replace its value with the value of msg_send or\n+\t msg_send_stret.  We must use a pointer here, as\n+\t msg_send and msg_send_stret are of pointer type, and\n+\t the representation may be different on systems that use\n+\t function descriptors.  */\n+      if (struct_return)\n+\tcalled_method\n+\t  = value_from_pointer (lookup_pointer_type (value_type (method)),\n+\t\t\t\tvalue_as_address (msg_send_stret));\n+      else\n+\tcalled_method\n+\t  = value_from_pointer (lookup_pointer_type (value_type (method)),\n+\t\t\t\tvalue_as_address (msg_send));\n+    }\n+  else\n+    {\n+      if (struct_return)\n+\tcalled_method = msg_send_stret;\n+      else\n+\tcalled_method = msg_send;\n+    }\n+\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    {\n+      /* If the return type doesn't look like a function type,\n+\t call an error.  This can happen if somebody tries to\n+\t turn a variable into a function call.  This is here\n+\t because people often want to call, eg, strcmp, which\n+\t gdb doesn't know is a function.  If gdb isn't asked for\n+\t it's opinion (ie. through \"whatis\"), it won't offer\n+\t it.  */\n+\n+      struct type *callee_type = value_type (called_method);\n+\n+      if (callee_type && callee_type->code () == TYPE_CODE_PTR)\n+\tcallee_type = TYPE_TARGET_TYPE (callee_type);\n+      callee_type = TYPE_TARGET_TYPE (callee_type);\n+\n+      if (callee_type)\n+\t{\n+\t  if ((callee_type->code () == TYPE_CODE_ERROR) && expect_type)\n+\t    return allocate_value (expect_type);\n+\t  else\n+\t    return allocate_value (callee_type);\n+\t}\n+      else\n+\terror (_(\"Expression of type other than \"\n+\t\t \"\\\"method returning ...\\\" used as a method\"));\n+    }\n+\n+  /* Now depending on whether we found a symbol for the method,\n+     we will either call the runtime dispatcher or the method\n+     directly.  */\n+\n+  args[0] = target;\n+  args[1] = value_from_longest (long_type, selector);\n+\n+  if (gnu_runtime && (method != NULL))\n+    {\n+      /* Function objc_msg_lookup returns a pointer.  */\n+      struct type *tem_type = value_type (called_method);\n+      tem_type = lookup_pointer_type (lookup_function_type (tem_type));\n+      deprecated_set_value_type (called_method, tem_type);\n+      called_method = call_function_by_hand (called_method, NULL, args);\n+    }\n+\n+  return call_function_by_hand (called_method, NULL, args);\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -2376,36 +2647,20 @@ evaluate_subexp_standard (struct type *expect_type,\n \n     case OP_OBJC_MSGCALL:\n       {\t\t\t\t/* Objective C message (method) call.  */\n-\n-\tCORE_ADDR responds_selector = 0;\n-\tCORE_ADDR method_selector = 0;\n-\n \tCORE_ADDR selector = 0;\n \n-\tint struct_return = 0;\n \tenum noside sub_no_side = EVAL_NORMAL;\n \n-\tstruct value *msg_send = NULL;\n-\tstruct value *msg_send_stret = NULL;\n-\tint gnu_runtime = 0;\n-\n \tstruct value *target = NULL;\n-\tstruct value *method = NULL;\n-\tstruct value *called_method = NULL; \n \n \tstruct type *selector_type = NULL;\n-\tstruct type *long_type;\n-\n-\tstruct value *ret = NULL;\n-\tCORE_ADDR addr = 0;\n \n \tselector = exp->elts[pc + 1].longconst;\n \tnargs = exp->elts[pc + 2].longconst;\n-\targvec = XALLOCAVEC (struct value *, nargs + 5);\n+\targvec = XALLOCAVEC (struct value *, nargs + 3);\n \n \t(*pos) += 3;\n \n-\tlong_type = builtin_type (exp->gdbarch)->builtin_long;\n \tselector_type = builtin_type (exp->gdbarch)->builtin_data_ptr;\n \n \tif (noside == EVAL_AVOID_SIDE_EFFECTS)\n@@ -2416,249 +2671,26 @@ evaluate_subexp_standard (struct type *expect_type,\n \ttarget = evaluate_subexp (selector_type, exp, pos, sub_no_side);\n \n \tif (value_as_long (target) == 0)\n- \t  return value_from_longest (long_type, 0);\n-\t\n-\tif (lookup_minimal_symbol (\"objc_msg_lookup\", 0, 0).minsym)\n-\t  gnu_runtime = 1;\n-\t\n-\t/* Find the method dispatch (Apple runtime) or method lookup\n-\t   (GNU runtime) function for Objective-C.  These will be used\n-\t   to lookup the symbol information for the method.  If we\n-\t   can't find any symbol information, then we'll use these to\n-\t   call the method, otherwise we can call the method\n-\t   directly.  The msg_send_stret function is used in the special\n-\t   case of a method that returns a structure (Apple runtime \n-\t   only).  */\n-\tif (gnu_runtime)\n-\t  {\n-\t    type = selector_type;\n-\n-\t    type = lookup_function_type (type);\n-\t    type = lookup_pointer_type (type);\n-\t    type = lookup_function_type (type);\n-\t    type = lookup_pointer_type (type);\n-\n-\t    msg_send = find_function_in_inferior (\"objc_msg_lookup\", NULL);\n-\t    msg_send_stret\n-\t      = find_function_in_inferior (\"objc_msg_lookup\", NULL);\n-\n-\t    msg_send = value_from_pointer (type, value_as_address (msg_send));\n-\t    msg_send_stret = value_from_pointer (type, \n-\t\t\t\t\tvalue_as_address (msg_send_stret));\n-\t  }\n+\t  sub_no_side = EVAL_SKIP;\n \telse\n-\t  {\n-\t    msg_send = find_function_in_inferior (\"objc_msgSend\", NULL);\n-\t    /* Special dispatcher for methods returning structs.  */\n-\t    msg_send_stret\n-\t      = find_function_in_inferior (\"objc_msgSend_stret\", NULL);\n-\t  }\n-\n-\t/* Verify the target object responds to this method.  The\n-\t   standard top-level 'Object' class uses a different name for\n-\t   the verification method than the non-standard, but more\n-\t   often used, 'NSObject' class.  Make sure we check for both.  */\n-\n-\tresponds_selector\n-\t  = lookup_child_selector (exp->gdbarch, \"respondsToSelector:\");\n-\tif (responds_selector == 0)\n-\t  responds_selector\n-\t    = lookup_child_selector (exp->gdbarch, \"respondsTo:\");\n-\t\n-\tif (responds_selector == 0)\n-\t  error (_(\"no 'respondsTo:' or 'respondsToSelector:' method\"));\n-\t\n-\tmethod_selector\n-\t  = lookup_child_selector (exp->gdbarch, \"methodForSelector:\");\n-\tif (method_selector == 0)\n-\t  method_selector\n-\t    = lookup_child_selector (exp->gdbarch, \"methodFor:\");\n-\t\n-\tif (method_selector == 0)\n-\t  error (_(\"no 'methodFor:' or 'methodForSelector:' method\"));\n-\n-\t/* Call the verification method, to make sure that the target\n-\t class implements the desired method.  */\n-\n-\targvec[0] = msg_send;\n-\targvec[1] = target;\n-\targvec[2] = value_from_longest (long_type, responds_selector);\n-\targvec[3] = value_from_longest (long_type, selector);\n-\targvec[4] = 0;\n-\n-\tret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n-\tif (gnu_runtime)\n-\t  {\n-\t    /* Function objc_msg_lookup returns a pointer.  */\n-\t    argvec[0] = ret;\n-\t    ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n-\t  }\n-\tif (value_as_long (ret) == 0)\n-\t  error (_(\"Target does not respond to this message selector.\"));\n-\n-\t/* Call \"methodForSelector:\" method, to get the address of a\n-\t   function method that implements this selector for this\n-\t   class.  If we can find a symbol at that address, then we\n-\t   know the return type, parameter types etc.  (that's a good\n-\t   thing).  */\n-\n-\targvec[0] = msg_send;\n-\targvec[1] = target;\n-\targvec[2] = value_from_longest (long_type, method_selector);\n-\targvec[3] = value_from_longest (long_type, selector);\n-\targvec[4] = 0;\n-\n-\tret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n-\tif (gnu_runtime)\n-\t  {\n-\t    argvec[0] = ret;\n-\t    ret = call_function_by_hand (argvec[0], NULL, {argvec + 1, 3});\n-\t  }\n-\n-\t/* ret should now be the selector.  */\n-\n-\taddr = value_as_long (ret);\n-\tif (addr)\n-\t  {\n-\t    struct symbol *sym = NULL;\n-\n-\t    /* The address might point to a function descriptor;\n-\t       resolve it to the actual code address instead.  */\n-\t    addr = gdbarch_convert_from_func_ptr_addr (exp->gdbarch, addr,\n-\t\t\t\t\t\t       current_top_target ());\n-\n-\t    /* Is it a high_level symbol?  */\n-\t    sym = find_pc_function (addr);\n-\t    if (sym != NULL) \n-\t      method = value_of_variable (sym, 0);\n-\t  }\n-\n-\t/* If we found a method with symbol information, check to see\n-\t   if it returns a struct.  Otherwise assume it doesn't.  */\n-\n-\tif (method)\n-\t  {\n-\t    CORE_ADDR funaddr;\n-\t    struct type *val_type;\n-\n-\t    funaddr = find_function_addr (method, &val_type);\n-\n-\t    block_for_pc (funaddr);\n-\n-\t    val_type = check_typedef (val_type);\n-\n-\t    if ((val_type == NULL)\n-\t\t|| (val_type->code () == TYPE_CODE_ERROR))\n-\t      {\n-\t\tif (expect_type != NULL)\n-\t\t  val_type = expect_type;\n-\t      }\n-\n-\t    struct_return = using_struct_return (exp->gdbarch, method,\n-\t\t\t\t\t\t val_type);\n-\t  }\n-\telse if (expect_type != NULL)\n-\t  {\n-\t    struct_return = using_struct_return (exp->gdbarch, NULL,\n-\t\t\t\t\t\t check_typedef (expect_type));\n-\t  }\n-\n-\t/* Found a function symbol.  Now we will substitute its\n-\t   value in place of the message dispatcher (obj_msgSend),\n-\t   so that we call the method directly instead of thru\n-\t   the dispatcher.  The main reason for doing this is that\n-\t   we can now evaluate the return value and parameter values\n-\t   according to their known data types, in case we need to\n-\t   do things like promotion, dereferencing, special handling\n-\t   of structs and doubles, etc.\n-\t  \n-\t   We want to use the type signature of 'method', but still\n-\t   jump to objc_msgSend() or objc_msgSend_stret() to better\n-\t   mimic the behavior of the runtime.  */\n-\t\n-\tif (method)\n-\t  {\n-\t    if (value_type (method)->code () != TYPE_CODE_FUNC)\n-\t      error (_(\"method address has symbol information \"\n-\t\t       \"with non-function type; skipping\"));\n-\n-\t    /* Create a function pointer of the appropriate type, and\n-\t       replace its value with the value of msg_send or\n-\t       msg_send_stret.  We must use a pointer here, as\n-\t       msg_send and msg_send_stret are of pointer type, and\n-\t       the representation may be different on systems that use\n-\t       function descriptors.  */\n-\t    if (struct_return)\n-\t      called_method\n-\t\t= value_from_pointer (lookup_pointer_type (value_type (method)),\n-\t\t\t\t      value_as_address (msg_send_stret));\n-\t    else\n-\t      called_method\n-\t\t= value_from_pointer (lookup_pointer_type (value_type (method)),\n-\t\t\t\t      value_as_address (msg_send));\n-\t  }\n-\telse\n-\t  {\n-\t    if (struct_return)\n-\t      called_method = msg_send_stret;\n-\t    else\n-\t      called_method = msg_send;\n-\t  }\n-\n-\tif (noside == EVAL_SKIP)\n-\t  return eval_skip_value (exp);\n-\n-\tif (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t  {\n-\t    /* If the return type doesn't look like a function type,\n-\t       call an error.  This can happen if somebody tries to\n-\t       turn a variable into a function call.  This is here\n-\t       because people often want to call, eg, strcmp, which\n-\t       gdb doesn't know is a function.  If gdb isn't asked for\n-\t       it's opinion (ie. through \"whatis\"), it won't offer\n-\t       it.  */\n-\n-\t    struct type *callee_type = value_type (called_method);\n-\n-\t    if (callee_type && callee_type->code () == TYPE_CODE_PTR)\n-\t      callee_type = TYPE_TARGET_TYPE (callee_type);\n-\t    callee_type = TYPE_TARGET_TYPE (callee_type);\n-\n-\t    if (callee_type)\n-\t    {\n-\t      if ((callee_type->code () == TYPE_CODE_ERROR) && expect_type)\n-\t\treturn allocate_value (expect_type);\n-\t      else\n-\t\treturn allocate_value (callee_type);\n-\t    }\n-\t    else\n-\t      error (_(\"Expression of type other than \"\n-\t\t       \"\\\"method returning ...\\\" used as a method\"));\n-\t  }\n+\t  sub_no_side = noside;\n \n \t/* Now depending on whether we found a symbol for the method,\n \t   we will either call the runtime dispatcher or the method\n \t   directly.  */\n \n-\targvec[0] = called_method;\n-\targvec[1] = target;\n-\targvec[2] = value_from_longest (long_type, selector);\n+\targvec[0] = nullptr;\n+\targvec[1] = nullptr;\n \t/* User-supplied arguments.  */\n \tfor (tem = 0; tem < nargs; tem++)\n-\t  argvec[tem + 3] = evaluate_subexp_with_coercion (exp, pos, noside);\n+\t  argvec[tem + 2] = evaluate_subexp_with_coercion (exp, pos,\n+\t\t\t\t\t\t\t   sub_no_side);\n \targvec[tem + 3] = 0;\n \n-\tauto call_args = gdb::make_array_view (argvec + 1, nargs + 2);\n-\n-\tif (gnu_runtime && (method != NULL))\n-\t  {\n-\t    /* Function objc_msg_lookup returns a pointer.  */\n-\t    deprecated_set_value_type (argvec[0],\n-\t\t\t\t       lookup_pointer_type (lookup_function_type (value_type (argvec[0]))));\n-\t    argvec[0] = call_function_by_hand (argvec[0], NULL, call_args);\n-\t  }\n+\tauto call_args = gdb::make_array_view (argvec, nargs + 3);\n \n-\treturn call_function_by_hand (argvec[0], NULL, call_args);\n+\treturn eval_op_objc_msgcall (expect_type, exp, noside, selector,\n+\t\t\t\t     target, call_args);\n       }\n       break;\n "
    }
  ]
}