{
  "sha": "a8bfaadbb40406dc795d410d198a4be9d452c177",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YThiZmFhZGJiNDA0MDZkYzc5NWQ0MTBkMTk4YTRiZTlkNDUyYzE3Nw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:34:50Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:57:21Z"
    },
    "message": "aarch64 bfd.h tidy\n\nbfd/\n\t* bfd-in.h: Move aarch64 declarations and defines..\n\t* cpu-aarch64.h: ..to here, new file..\n\t* elfxx-aarch64.h: ..and here.\n\t* cpu-aarch64.c: Include cpu-aarch64.h.\n\t* elfnn-aarch64.c: Likewise.\n\t* bfd-in2.h: Regenerate.\nld/\n\t* emultempl/aarch64elf.em: Include elfxx-aarch64.h.",
    "tree": {
      "sha": "593ae42df1de54a4ae6470a5a48f3b9f32d0ebdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/593ae42df1de54a4ae6470a5a48f3b9f32d0ebdf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8bfaadbb40406dc795d410d198a4be9d452c177",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8bfaadbb40406dc795d410d198a4be9d452c177",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8bfaadbb40406dc795d410d198a4be9d452c177",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8bfaadbb40406dc795d410d198a4be9d452c177/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c348479ddd10079b8b8714598d8e1458d25e095d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c348479ddd10079b8b8714598d8e1458d25e095d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c348479ddd10079b8b8714598d8e1458d25e095d"
    }
  ],
  "stats": {
    "total": 291,
    "additions": 119,
    "deletions": 172
  },
  "files": [
    {
      "sha": "a72a63dbb519ca42e7332ccc8b78d6367b81bf14",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -1,3 +1,12 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h: Move aarch64 declarations and defines..\n+\t* cpu-aarch64.h: ..to here, new file..\n+\t* elfxx-aarch64.h: ..and here.\n+\t* cpu-aarch64.c: Include cpu-aarch64.h.\n+\t* elfnn-aarch64.c: Likewise.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* bfd-in.h: Delete ticoff function declarations."
    },
    {
      "sha": "ed8e47f8a46a5a52ba3d7caca7a95da94cd60b55",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 86,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -907,89 +907,3 @@ extern bfd_boolean elf32_arm_fix_exidx_coverage\n /* C6x unwind section editing support.  */\n extern bfd_boolean elf32_tic6x_fix_exidx_coverage\n (struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);\n-\n-extern void bfd_elf64_aarch64_init_maps\n-  (bfd *);\n-\n-extern void bfd_elf32_aarch64_init_maps\n-  (bfd *);\n-\n-/* Types of PLTs based on the level of security.  This would be a\n-   bit-mask to denote which of the combinations of security features\n-   are enabled:\n-   - No security feature PLTs\n-   - PLTs with BTI instruction\n-   - PLTs with PAC instruction\n-*/\n-typedef enum\n-{\n-  PLT_NORMAL\t= 0x0,  /* Normal plts.  */\n-  PLT_BTI\t= 0x1,  /* plts with bti.  */\n-  PLT_PAC\t= 0x2,  /* plts with pointer authentication.  */\n-  PLT_BTI_PAC\t= PLT_BTI | PLT_PAC\n-} aarch64_plt_type;\n-\n-/* To indicate if BTI is enabled with/without warning.  */\n-typedef enum\n-{\n-  BTI_NONE\t= 0,  /* BTI is not enabled.  */\n-  BTI_WARN\t= 1,  /* BTI is enabled with -z force-bti.  */\n-} aarch64_enable_bti_type;\n-\n-/* A structure to encompass all information coming from BTI or PAC\n-   related command line options.  This involves the \"PLT_TYPE\" to determine\n-   which version of PLTs to pick and \"BTI_TYPE\" to determine if\n-   BTI should be turned on with any warnings.   */\n-typedef struct\n-{\n-  aarch64_plt_type plt_type;\n-  aarch64_enable_bti_type bti_type;\n-} aarch64_bti_pac_info;\n-\n-/* An enum to define what kind of erratum fixes we should apply.  This gives the\n-   user a bit more control over the sequences we generate.  */\n-typedef enum\n-{\n-  ERRAT_NONE  = (1 << 0),  /* No erratum workarounds allowed.  */\n-  ERRAT_ADR   = (1 << 1),  /* Erratum workarounds using ADR allowed.  */\n-  ERRAT_ADRP  = (1 << 2),  /* Erratum workarounds using ADRP are allowed.  */\n-} erratum_84319_opts;\n-\n-extern void bfd_elf64_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n-   aarch64_bti_pac_info);\n-\n-extern void bfd_elf32_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n-   aarch64_bti_pac_info);\n-\n-/* ELF AArch64 mapping symbol support.  */\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_ANY\t(~0)\n-extern bfd_boolean bfd_is_aarch64_special_symbol_name\n-  (const char * name, int type);\n-\n-/* AArch64 stub generation support for ELF64.  Called from the linker.  */\n-extern int elf64_aarch64_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf64_aarch64_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf64_aarch64_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *),\n-   void (*) (void));\n-extern bfd_boolean elf64_aarch64_build_stubs\n-  (struct bfd_link_info *);\n-/* AArch64 stub generation support for ELF32.  Called from the linker.  */\n-extern int elf32_aarch64_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf32_aarch64_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf32_aarch64_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *),\n-   void (*) (void));\n-extern bfd_boolean elf32_aarch64_build_stubs\n-  (struct bfd_link_info *);"
    },
    {
      "sha": "8cc6201644e9b5f6db990a441efe0b2a0fa00514",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 86,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -914,92 +914,6 @@ extern bfd_boolean elf32_arm_fix_exidx_coverage\n /* C6x unwind section editing support.  */\n extern bfd_boolean elf32_tic6x_fix_exidx_coverage\n (struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);\n-\n-extern void bfd_elf64_aarch64_init_maps\n-  (bfd *);\n-\n-extern void bfd_elf32_aarch64_init_maps\n-  (bfd *);\n-\n-/* Types of PLTs based on the level of security.  This would be a\n-   bit-mask to denote which of the combinations of security features\n-   are enabled:\n-   - No security feature PLTs\n-   - PLTs with BTI instruction\n-   - PLTs with PAC instruction\n-*/\n-typedef enum\n-{\n-  PLT_NORMAL\t= 0x0,  /* Normal plts.  */\n-  PLT_BTI\t= 0x1,  /* plts with bti.  */\n-  PLT_PAC\t= 0x2,  /* plts with pointer authentication.  */\n-  PLT_BTI_PAC\t= PLT_BTI | PLT_PAC\n-} aarch64_plt_type;\n-\n-/* To indicate if BTI is enabled with/without warning.  */\n-typedef enum\n-{\n-  BTI_NONE\t= 0,  /* BTI is not enabled.  */\n-  BTI_WARN\t= 1,  /* BTI is enabled with -z force-bti.  */\n-} aarch64_enable_bti_type;\n-\n-/* A structure to encompass all information coming from BTI or PAC\n-   related command line options.  This involves the \"PLT_TYPE\" to determine\n-   which version of PLTs to pick and \"BTI_TYPE\" to determine if\n-   BTI should be turned on with any warnings.   */\n-typedef struct\n-{\n-  aarch64_plt_type plt_type;\n-  aarch64_enable_bti_type bti_type;\n-} aarch64_bti_pac_info;\n-\n-/* An enum to define what kind of erratum fixes we should apply.  This gives the\n-   user a bit more control over the sequences we generate.  */\n-typedef enum\n-{\n-  ERRAT_NONE  = (1 << 0),  /* No erratum workarounds allowed.  */\n-  ERRAT_ADR   = (1 << 1),  /* Erratum workarounds using ADR allowed.  */\n-  ERRAT_ADRP  = (1 << 2),  /* Erratum workarounds using ADRP are allowed.  */\n-} erratum_84319_opts;\n-\n-extern void bfd_elf64_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n-   aarch64_bti_pac_info);\n-\n-extern void bfd_elf32_aarch64_set_options\n-  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n-   aarch64_bti_pac_info);\n-\n-/* ELF AArch64 mapping symbol support.  */\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n-#define BFD_AARCH64_SPECIAL_SYM_TYPE_ANY\t(~0)\n-extern bfd_boolean bfd_is_aarch64_special_symbol_name\n-  (const char * name, int type);\n-\n-/* AArch64 stub generation support for ELF64.  Called from the linker.  */\n-extern int elf64_aarch64_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf64_aarch64_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf64_aarch64_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *),\n-   void (*) (void));\n-extern bfd_boolean elf64_aarch64_build_stubs\n-  (struct bfd_link_info *);\n-/* AArch64 stub generation support for ELF32.  Called from the linker.  */\n-extern int elf32_aarch64_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf32_aarch64_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf32_aarch64_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *),\n-   void (*) (void));\n-extern bfd_boolean elf32_aarch64_build_stubs\n-  (struct bfd_link_info *);\n /* Extracted from init.c.  */\n unsigned int bfd_init (void);\n "
    },
    {
      "sha": "617b7e66c933dccb8237595cbe563ca46985a261",
      "filename": "bfd/cpu-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/cpu-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/cpu-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-aarch64.c?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -22,6 +22,7 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n #include \"libiberty.h\"\n+#include \"cpu-aarch64.h\"\n \n /* This routine is provided two arch_infos and works out which Aarch64\n    machine which would be compatible with both and returns a pointer"
    },
    {
      "sha": "01acb1ffe20b5cc3a87a823e97be8bd342696d6b",
      "filename": "bfd/cpu-aarch64.h",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/cpu-aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/cpu-aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-aarch64.h?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -0,0 +1,25 @@\n+/* ELF AArch64 mapping symbol support\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3. If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#define BFD_AARCH64_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n+#define BFD_AARCH64_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n+#define BFD_AARCH64_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n+#define BFD_AARCH64_SPECIAL_SYM_TYPE_ANY\t(~0)\n+extern bfd_boolean bfd_is_aarch64_special_symbol_name\n+  (const char * name, int type);"
    },
    {
      "sha": "666f6a75f6e198f079a8499cde7637f2e6a4d9fd",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -144,6 +144,7 @@\n #include \"objalloc.h\"\n #include \"elf/aarch64.h\"\n #include \"elfxx-aarch64.h\"\n+#include \"cpu-aarch64.h\"\n \n #define ARCH_SIZE\tNN\n "
    },
    {
      "sha": "0d91dae261f187400d0be93fd08b4ddf2ccdf91e",
      "filename": "bfd/elfxx-aarch64.h",
      "status": "modified",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/elfxx-aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/bfd/elfxx-aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-aarch64.h?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -18,6 +18,84 @@\n    along with this program; see the file COPYING3. If not,\n    see <http://www.gnu.org/licenses/>.  */\n \n+extern void bfd_elf64_aarch64_init_maps\n+  (bfd *);\n+\n+extern void bfd_elf32_aarch64_init_maps\n+  (bfd *);\n+\n+/* Types of PLTs based on the level of security.  This would be a\n+   bit-mask to denote which of the combinations of security features\n+   are enabled:\n+   - No security feature PLTs\n+   - PLTs with BTI instruction\n+   - PLTs with PAC instruction\n+*/\n+typedef enum\n+{\n+  PLT_NORMAL\t= 0x0,  /* Normal plts.  */\n+  PLT_BTI\t= 0x1,  /* plts with bti.  */\n+  PLT_PAC\t= 0x2,  /* plts with pointer authentication.  */\n+  PLT_BTI_PAC\t= PLT_BTI | PLT_PAC\n+} aarch64_plt_type;\n+\n+/* To indicate if BTI is enabled with/without warning.  */\n+typedef enum\n+{\n+  BTI_NONE\t= 0,  /* BTI is not enabled.  */\n+  BTI_WARN\t= 1,  /* BTI is enabled with -z force-bti.  */\n+} aarch64_enable_bti_type;\n+\n+/* A structure to encompass all information coming from BTI or PAC\n+   related command line options.  This involves the \"PLT_TYPE\" to determine\n+   which version of PLTs to pick and \"BTI_TYPE\" to determine if\n+   BTI should be turned on with any warnings.   */\n+typedef struct\n+{\n+  aarch64_plt_type plt_type;\n+  aarch64_enable_bti_type bti_type;\n+} aarch64_bti_pac_info;\n+\n+/* An enum to define what kind of erratum fixes we should apply.  This gives the\n+   user a bit more control over the sequences we generate.  */\n+typedef enum\n+{\n+  ERRAT_NONE  = (1 << 0),  /* No erratum workarounds allowed.  */\n+  ERRAT_ADR   = (1 << 1),  /* Erratum workarounds using ADR allowed.  */\n+  ERRAT_ADRP  = (1 << 2),  /* Erratum workarounds using ADRP are allowed.  */\n+} erratum_84319_opts;\n+\n+extern void bfd_elf64_aarch64_set_options\n+  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n+   aarch64_bti_pac_info);\n+\n+extern void bfd_elf32_aarch64_set_options\n+  (bfd *, struct bfd_link_info *, int, int, int, int, erratum_84319_opts, int,\n+   aarch64_bti_pac_info);\n+\n+/* AArch64 stub generation support for ELF64.  Called from the linker.  */\n+extern int elf64_aarch64_setup_section_lists\n+  (bfd *, struct bfd_link_info *);\n+extern void elf64_aarch64_next_input_section\n+  (struct bfd_link_info *, struct bfd_section *);\n+extern bfd_boolean elf64_aarch64_size_stubs\n+  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n+   struct bfd_section * (*) (const char *, struct bfd_section *),\n+   void (*) (void));\n+extern bfd_boolean elf64_aarch64_build_stubs\n+  (struct bfd_link_info *);\n+/* AArch64 stub generation support for ELF32.  Called from the linker.  */\n+extern int elf32_aarch64_setup_section_lists\n+  (bfd *, struct bfd_link_info *);\n+extern void elf32_aarch64_next_input_section\n+  (struct bfd_link_info *, struct bfd_section *);\n+extern bfd_boolean elf32_aarch64_size_stubs\n+  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n+   struct bfd_section * (*) (const char *, struct bfd_section *),\n+   void (*) (void));\n+extern bfd_boolean elf32_aarch64_build_stubs\n+  (struct bfd_link_info *);\n+\n /* Take the PAGE component of an address or offset.  */\n #define PG(x)\t     ((x) & ~ (bfd_vma) 0xfff)\n #define PG_OFFSET(x) ((x) &   (bfd_vma) 0xfff)"
    },
    {
      "sha": "378fcea06486a221a43d07ef6698b6edc6c87a20",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -1,3 +1,7 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/aarch64elf.em: Include elfxx-aarch64.h.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* emultempl/ia64elf.em: Include elfxx-ia64.h."
    },
    {
      "sha": "f4baf508958714c824b8670ee4a01dfe9a7d254f",
      "filename": "ld/emultempl/aarch64elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8bfaadbb40406dc795d410d198a4be9d452c177/ld/emultempl/aarch64elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8bfaadbb40406dc795d410d198a4be9d452c177/ld/emultempl/aarch64elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aarch64elf.em?ref=a8bfaadbb40406dc795d410d198a4be9d452c177",
      "patch": "@@ -26,6 +26,7 @@ fragment <<EOF\n \n #include \"ldctor.h\"\n #include \"elf/aarch64.h\"\n+#include \"elfxx-aarch64.h\"\n \n static int no_enum_size_warning = 0;\n static int no_wchar_size_warning = 0;"
    }
  ]
}