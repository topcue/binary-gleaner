{
  "sha": "1ef8573cc77c91feeef3edab74d383d20809eb33",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWVmODU3M2NjNzdjOTFmZWVlZjNlZGFiNzRkMzgzZDIwODA5ZWIzMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-09T14:02:39Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T16:15:30Z"
    },
    "message": "gdb: Improve scoped_switch_fork_info class\n\nAfter committing this patch I got this feedback:\n\n   https://sourceware.org/ml/gdb-patches/2019-01/msg00181.html\n\nThis patch makes the constructor of scoped_switch_fork_info explicit,\nand wraps the core of the destructor in a TRY/CATCH block.\n\nI've run this through the testsuite on X86-64/GNU Linux, however, this\ncode is not exercised, so this patch is untested.\n\ngdb/ChangeLog:\n\n\t* linux-fork.c (scoped_switch_fork_info)\n\t<scoped_switch_fork_info>: Make explicit.\n\t<~scoped_switch_fork_info>: Wrap core in TRY/CATCH.",
    "tree": {
      "sha": "f2f67317d9c4cf33fe9130f622f2759ac1511e68",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2f67317d9c4cf33fe9130f622f2759ac1511e68"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ef8573cc77c91feeef3edab74d383d20809eb33",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef8573cc77c91feeef3edab74d383d20809eb33",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ef8573cc77c91feeef3edab74d383d20809eb33",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef8573cc77c91feeef3edab74d383d20809eb33/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "59aa9b0be159002e2eb971176921dc1e9c8045cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/59aa9b0be159002e2eb971176921dc1e9c8045cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/59aa9b0be159002e2eb971176921dc1e9c8045cf"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 19,
    "deletions": 4
  },
  "files": [
    {
      "sha": "f449d6836ed96fb14bbd5ba589a1a6eba2cf7915",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ef8573cc77c91feeef3edab74d383d20809eb33/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ef8573cc77c91feeef3edab74d383d20809eb33/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1ef8573cc77c91feeef3edab74d383d20809eb33",
      "patch": "@@ -1,3 +1,9 @@\n+2019-01-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-fork.c (scoped_switch_fork_info)\n+\t<scoped_switch_fork_info>: Make explicit.\n+\t<~scoped_switch_fork_info>: Wrap core in TRY/CATCH.\n+\n 2019-01-10  Tom Tromey  <tom@tromey.com>\n \n \t* objfiles.h (objfile::reset_psymtabs): Update."
    },
    {
      "sha": "9bbf9c4a141074ed032281081df4173a3431bac7",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ef8573cc77c91feeef3edab74d383d20809eb33/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ef8573cc77c91feeef3edab74d383d20809eb33/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=1ef8573cc77c91feeef3edab74d383d20809eb33",
      "patch": "@@ -446,7 +446,7 @@ class scoped_switch_fork_info\n public:\n   /* Switch to the infrun state held on the fork_info identified by\n      PPTID.  If PPTID is the current inferior then no switch is done.  */\n-  scoped_switch_fork_info (ptid_t pptid)\n+  explicit scoped_switch_fork_info (ptid_t pptid)\n     : m_oldfp (nullptr)\n   {\n     if (pptid != inferior_ptid)\n@@ -472,9 +472,18 @@ class scoped_switch_fork_info\n     if (m_oldfp != nullptr)\n       {\n \t/* Switch back to inferior_ptid.  */\n-\tremove_breakpoints ();\n-\tfork_load_infrun_state (m_oldfp);\n-\tinsert_breakpoints ();\n+\tTRY\n+\t  {\n+\t    remove_breakpoints ();\n+\t    fork_load_infrun_state (m_oldfp);\n+\t    insert_breakpoints ();\n+\t  }\n+\tCATCH (ex, RETURN_MASK_ALL)\n+\t  {\n+\t    warning (_(\"Couldn't restore checkpoint state in %s: %s\"),\n+\t\t     target_pid_to_str (fp->ptid), ex.message);\n+\t  }\n+\tEND_CATCH\n       }\n   }\n "
    }
  ]
}