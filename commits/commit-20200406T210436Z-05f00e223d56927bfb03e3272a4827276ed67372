{
  "sha": "05f00e223d56927bfb03e3272a4827276ed67372",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDVmMDBlMjIzZDU2OTI3YmZiMDNlMzI3MmE0ODI3Mjc2ZWQ2NzM3Mg==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-25T19:29:44Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-06T21:04:36Z"
    },
    "message": "Implement basic threading support in the NetBSD target\n\nUse sysctl(3) as the portable interface to prompt NetBSD threads on\nall supported NetBSD versions. In future newer versions could switch\nto PT_LWPSTATUS ptrace(2) API that will be supported on NetBSD 10.0\nand newer.\n\nImplement as part of nbsd_nat_target:\n - thread_name()         - read descriptive thread name\n - thread_alive()        - check whether a thread is alive\n - post_attach()         - updates the list of threads after attach\n - update_thread_list()  - updates the list of threads\n - pid_to_str()          - translates ptid to a descriptive string\n\nThere are two local static functions:\n - nbsd_thread_lister()  - generic LWP lister for a specified pid\n - nbsd_add_threads()    - utility to update the list of threads\n\nNow, GDB on NetBSD can attach to a multithreaded process, spawn\na multithreaded process, list threads, print their LWP+PID numbers\nand descriptive thread names.\n\ngdb/ChangeLog:\n\n       * nbsd-nat.h (struct thread_info): Add forward declaration.\n       (nbsd_nat_target::thread_alive): Add.\n       (nbsd_nat_target::thread_name): Likewise.\n       (nbsd_nat_target::update_thread_list): Likewise.\n       (update_thread_list::post_attach): Likewise.\n       (post_attach::pid_to_str): Likewise.\n       * nbsd-nat.c: Include \"gdbthread.h\" and \"inferior.h\".\n       (nbsd_thread_lister): Add.\n       (nbsd_nat_target::thread_alive): Likewise.\n       (nbsd_nat_target::thread_name): Likewise.\n       (nbsd_add_threads): Likewise.\n       (update_thread_list::post_attach): Likewise.\n       (nbsd_nat_target::update_thread_list): Likewise.\n       (post_attach::pid_to_str): Likewise.",
    "tree": {
      "sha": "c01229abb010a78b721e0b69578eaf5985b17caa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c01229abb010a78b721e0b69578eaf5985b17caa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/05f00e223d56927bfb03e3272a4827276ed67372",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05f00e223d56927bfb03e3272a4827276ed67372",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/05f00e223d56927bfb03e3272a4827276ed67372",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05f00e223d56927bfb03e3272a4827276ed67372/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6ee448cc2d0b9337713ecb6bb2e6305b4f504cbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ee448cc2d0b9337713ecb6bb2e6305b4f504cbc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6ee448cc2d0b9337713ecb6bb2e6305b4f504cbc"
    }
  ],
  "stats": {
    "total": 185,
    "additions": 185,
    "deletions": 0
  },
  "files": [
    {
      "sha": "bd1a0f4df18e8ea8e424efc33790ee3dfbb76ee6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05f00e223d56927bfb03e3272a4827276ed67372/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05f00e223d56927bfb03e3272a4827276ed67372/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=05f00e223d56927bfb03e3272a4827276ed67372",
      "patch": "@@ -1,3 +1,20 @@\n+2020-04-06  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.h (struct thread_info): Add forward declaration.\n+\t(nbsd_nat_target::thread_alive): Add.\n+\t(nbsd_nat_target::thread_name): Likewise.\n+\t(nbsd_nat_target::update_thread_list): Likewise.\n+\t(update_thread_list::post_attach): Likewise.\n+\t(post_attach::pid_to_str): Likewise.\n+\t* nbsd-nat.c: Include \"gdbthread.h\" and \"inferior.h\".\n+\t(nbsd_thread_lister): Add.\n+\t(nbsd_nat_target::thread_alive): Likewise.\n+\t(nbsd_nat_target::thread_name): Likewise.\n+\t(nbsd_add_threads): Likewise.\n+\t(update_thread_list::post_attach): Likewise.\n+\t(nbsd_nat_target::update_thread_list): Likewise.\n+\t(post_attach::pid_to_str): Likewise.\n+\n 2020-04-06  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-valprint.c (print_variant_part): Extract the variant field."
    },
    {
      "sha": "4423e19428d3405e5f3c8ed537f1cde7e6c843d6",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 160,
      "deletions": 0,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05f00e223d56927bfb03e3272a4827276ed67372/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05f00e223d56927bfb03e3272a4827276ed67372/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=05f00e223d56927bfb03e3272a4827276ed67372",
      "patch": "@@ -20,6 +20,8 @@\n #include \"defs.h\"\n \n #include \"nbsd-nat.h\"\n+#include \"gdbthread.h\"\n+#include \"inferior.h\"\n \n #include <sys/types.h>\n #include <sys/ptrace.h>\n@@ -39,3 +41,161 @@ nbsd_nat_target::pid_to_exec_file (int pid)\n     return NULL;\n   return buf;\n }\n+\n+/* Generic thread (LWP) lister within a specified process.  The callback\n+   parameters is a C++ function that is called for each detected thread.  */\n+\n+static bool\n+nbsd_thread_lister (const pid_t pid,\n+\t\t    gdb::function_view<bool (const struct kinfo_lwp *)>\n+\t\t    callback)\n+{\n+  int mib[5] = {CTL_KERN, KERN_LWP, pid, sizeof (struct kinfo_lwp), 0};\n+  size_t size;\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n+    perror_with_name ((\"sysctl\"));\n+\n+  mib[4] = size / sizeof (size_t);\n+\n+  gdb::unique_xmalloc_ptr<struct kinfo_lwp[]> kl\n+    ((struct kinfo_lwp *) xcalloc (size, 1));\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), kl.get (), &size, NULL, 0) == -1\n+      || size == 0)\n+    perror_with_name ((\"sysctl\"));\n+\n+  for (size_t i = 0; i < size / sizeof (struct kinfo_lwp); i++)\n+    {\n+      struct kinfo_lwp *l = &kl[i];\n+\n+      /* Return true if the specified thread is alive.  */\n+      auto lwp_alive\n+\t= [] (struct kinfo_lwp *lwp)\n+\t  {\n+\t    switch (lwp->l_stat)\n+\t      {\n+\t      case LSSLEEP:\n+\t      case LSRUN:\n+\t      case LSONPROC:\n+\t      case LSSTOP:\n+\t      case LSSUSPENDED:\n+\t\treturn true;\n+\t      default:\n+\t\treturn false;\n+\t      }\n+\t  };\n+\n+      /* Ignore embryonic or demised threads.  */\n+      if (!lwp_alive (l))\n+\tcontinue;\n+\n+      if (callback (l))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if PTID is still active in the inferior.  */\n+\n+bool\n+nbsd_nat_target::thread_alive (ptid_t ptid)\n+{\n+  pid_t pid = ptid.pid ();\n+  int lwp = ptid.lwp ();\n+\n+  auto fn\n+    = [&lwp] (const struct kinfo_lwp *kl)\n+      {\n+        return kl->l_lid == lwp;\n+      };\n+\n+  return nbsd_thread_lister (pid, fn);\n+}\n+\n+/* Return the name assigned to a thread by an application.  Returns\n+   the string in a static buffer.  */\n+\n+const char *\n+nbsd_nat_target::thread_name (struct thread_info *thr)\n+{\n+  ptid_t ptid = thr->ptid;\n+  pid_t pid = ptid.pid ();\n+  int lwp = ptid.lwp ();\n+\n+  static char buf[KI_LNAMELEN] = {};\n+\n+  auto fn\n+    = [&lwp] (const struct kinfo_lwp *kl)\n+      {\n+\tif (kl->l_lid == lwp)\n+\t  {\n+\t    xsnprintf (buf, sizeof buf, \"%s\", kl->l_name);\n+\t    return true;\n+\t  }\n+\treturn false;\n+      };\n+\n+  if (nbsd_thread_lister (pid, fn))\n+    return buf;\n+  else\n+    return NULL;\n+}\n+\n+/* Implement the \"post_attach\" target_ops method.  */\n+\n+static void\n+nbsd_add_threads (nbsd_nat_target *target, pid_t pid)\n+{\n+  auto fn\n+    = [&target, &pid] (const struct kinfo_lwp *kl)\n+      {\n+\tptid_t ptid = ptid_t (pid, kl->l_lid, 0);\n+\tif (!in_thread_list (target, ptid))\n+\t  {\n+\t    if (inferior_ptid.lwp () == 0)\n+\t      thread_change_ptid (target, inferior_ptid, ptid);\n+\t    else\n+\t      add_thread (target, ptid);\n+\t  }\n+\treturn false;\n+      };\n+\n+  nbsd_thread_lister (pid, fn);\n+}\n+\n+/* Implement the \"post_attach\" target_ops method.  */\n+\n+void\n+nbsd_nat_target::post_attach (int pid)\n+{\n+  nbsd_add_threads (this, pid);\n+}\n+\n+/* Implement the \"update_thread_list\" target_ops method.  */\n+\n+void\n+nbsd_nat_target::update_thread_list ()\n+{\n+  prune_threads ();\n+\n+  nbsd_add_threads (this, inferior_ptid.pid ());\n+}\n+\n+/* Convert PTID to a string.  */\n+\n+std::string\n+nbsd_nat_target::pid_to_str (ptid_t ptid)\n+{\n+  int lwp = ptid.lwp ();\n+\n+  if (lwp != 0)\n+    {\n+      pid_t pid = ptid.pid ();\n+\n+      return string_printf (\"LWP %d of process %d\", lwp, pid);\n+    }\n+\n+  return normal_pid_to_str (ptid);\n+}"
    },
    {
      "sha": "3606048cd07041d635e874ac36b055cdcd3398e1",
      "filename": "gdb/nbsd-nat.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05f00e223d56927bfb03e3272a4827276ed67372/gdb/nbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05f00e223d56927bfb03e3272a4827276ed67372/gdb/nbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.h?ref=05f00e223d56927bfb03e3272a4827276ed67372",
      "patch": "@@ -22,11 +22,19 @@\n \n #include \"inf-ptrace.h\"\n \n+struct thread_info;\n+\n /* A prototype NetBSD target.  */\n \n struct nbsd_nat_target : public inf_ptrace_target\n {\n   char *pid_to_exec_file (int pid) override;\n+\n+  bool thread_alive (ptid_t ptid) override;\n+  const char *thread_name (struct thread_info *thr) override;\n+  void post_attach (int pid) override;\n+  void update_thread_list () override;\n+  std::string pid_to_str (ptid_t ptid) override;\n };\n \n #endif /* nbsd-nat.h */"
    }
  ]
}