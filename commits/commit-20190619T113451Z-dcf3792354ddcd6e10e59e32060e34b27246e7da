{
  "sha": "dcf3792354ddcd6e10e59e32060e34b27246e7da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGNmMzc5MjM1NGRkY2Q2ZTEwZTU5ZTMyMDYwZTM0YjI3MjQ2ZTdkYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-18T18:18:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-19T11:34:51Z"
    },
    "message": "Instantiate a single source highlighter\n\nIt occurred to me that there's no reason to make a new source\nhighlighter each time gdb needs to highlight some source code.\nInstead, a single one can be created and then simply reused each time.\n\nThis patch implements this idea.  Tested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-06-19  Tom Tromey  <tromey@adacore.com>\n\n\t* source-cache.c (highlighter): New global.\n\t(source_cache::get_source_lines): Create a highlighter on demand.",
    "tree": {
      "sha": "4f448b277584ac9c09a49cfd242dffcf2e39ae65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4f448b277584ac9c09a49cfd242dffcf2e39ae65"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dcf3792354ddcd6e10e59e32060e34b27246e7da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcf3792354ddcd6e10e59e32060e34b27246e7da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dcf3792354ddcd6e10e59e32060e34b27246e7da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcf3792354ddcd6e10e59e32060e34b27246e7da/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f5601c4d0ad43254244f1b624900cdd5afd02ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f5601c4d0ad43254244f1b624900cdd5afd02ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f5601c4d0ad43254244f1b624900cdd5afd02ba"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 19,
    "deletions": 3
  },
  "files": [
    {
      "sha": "55650974cd951009fa46976caa575da83c8aceb2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dcf3792354ddcd6e10e59e32060e34b27246e7da/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dcf3792354ddcd6e10e59e32060e34b27246e7da/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dcf3792354ddcd6e10e59e32060e34b27246e7da",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-19  Tom Tromey  <tromey@adacore.com>\n+\n+\t* source-cache.c (highlighter): New global.\n+\t(source_cache::get_source_lines): Create a highlighter on demand.\n+\n 2019-06-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* defs.h (deprecated_interactive_hook): Delete declaration."
    },
    {
      "sha": "86efe83bf9a5679de9a58e2ff0ebe9a3dc37c11e",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dcf3792354ddcd6e10e59e32060e34b27246e7da/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dcf3792354ddcd6e10e59e32060e34b27246e7da/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=dcf3792354ddcd6e10e59e32060e34b27246e7da",
      "patch": "@@ -197,6 +197,13 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \t  std::ifstream input (fullname);\n \t  if (input.is_open ())\n \t    {\n+\t      /* The global source highlight object, or null if one\n+\t\t was never constructed.  This is stored here rather\n+\t\t than in the class so that we don't need to include\n+\t\t anything or do conditional compilation in\n+\t\t source-cache.h.  */\n+\t      static srchilite::SourceHighlight *highlighter;\n+\n \t      if (s->line_charpos == 0)\n \t\t{\n \t\t  scoped_fd desc (open_source_file_with_line_charpos (s));\n@@ -209,11 +216,15 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \t\t     use-after-free.  */\n \t\t  fullname = symtab_to_fullname (s);\n \t\t}\n-\t      srchilite::SourceHighlight highlighter (\"esc.outlang\");\n-\t      highlighter.setStyleFile(\"esc.style\");\n+\n+\t      if (highlighter == nullptr)\n+\t\t{\n+\t\t  highlighter = new srchilite::SourceHighlight (\"esc.outlang\");\n+\t\t  highlighter->setStyleFile (\"esc.style\");\n+\t\t}\n \n \t      std::ostringstream output;\n-\t      highlighter.highlight (input, output, lang_name, fullname);\n+\t      highlighter->highlight (input, output, lang_name, fullname);\n \n \t      source_text result = { fullname, output.str () };\n \t      m_source_map.push_back (std::move (result));"
    }
  ]
}