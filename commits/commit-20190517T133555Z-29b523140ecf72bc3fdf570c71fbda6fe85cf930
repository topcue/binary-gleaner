{
  "sha": "29b523140ecf72bc3fdf570c71fbda6fe85cf930",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjliNTIzMTQwZWNmNzJiYzNmZGY1NzBjNzFmYmRhNmZlODVjZjkzMA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-17T13:35:23Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-17T13:35:55Z"
    },
    "message": "testsuite: Add option to capture GDB debug\n\nAdd both board option and environment variable which enables gdb\ndebug via a comma separated list and sends it to the file gdb.debug,\nlocated in the output directory for the current test.  Document this.\n\nAdd support for the environment variable in the Makefile.\n\nThe testsuite can be run with gdb debug enabled in the following way:\n\n\tmake check GDB_DEBUG=\"infrun,target,remote\"\n\nA Test with multiple invocations of GDB will all append debug to the\nsame log file.\n\ngdb/testsuite/ChangeLog:\n\n\t* Makefile.in: Pass through GDB_DEBUG.\n\t* README (Testsuite Parameters): Add GDB_DEBUG.\n        (gdb,debug): Add board setting.\n \t* lib/gdb.exp (default_gdb_start): Start debugging.\n \t(gdb_debug_enabled): New procedure.\n \t(gdb_debug_init): Likewise.",
    "tree": {
      "sha": "e646b922006aac57b873ce1099beef6b45d4e46a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e646b922006aac57b873ce1099beef6b45d4e46a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/29b523140ecf72bc3fdf570c71fbda6fe85cf930",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29b523140ecf72bc3fdf570c71fbda6fe85cf930",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/29b523140ecf72bc3fdf570c71fbda6fe85cf930",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29b523140ecf72bc3fdf570c71fbda6fe85cf930/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca1285d17534cff3041c07ac7841288e1b3ba19c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca1285d17534cff3041c07ac7841288e1b3ba19c"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 92,
    "deletions": 1
  },
  "files": [
    {
      "sha": "e76a1017c8fd8d0a5eb2f430f1bc2f2a48e2f0c2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=29b523140ecf72bc3fdf570c71fbda6fe85cf930",
      "patch": "@@ -1,3 +1,21 @@\n+2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* Makefile.in: Pass through GDB_DEBUG.\n+\t* README (Testsuite Parameters): Add GDB_DEBUG.\n+        (gdb,debug): Add board setting.\n+ \t* lib/gdb.exp (default_gdb_start): Start debugging.\n+ \t(gdb_debug_enabled): New procedure.\n+ \t(gdb_debug_init): Likewise.\n+\n+2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* Makefile.in: Pass through GDB_DEBUG.\n+\t* README (Testsuite Parameters): Add GDB_DEBUG.\n+        (gdb,debug): Add board setting.\n+ \t* lib/gdb.exp (default_gdb_start): Start debugging.\n+ \t(gdb_debug_enabled): New procedure.\n+ \t(gdb_debug_init): Likewise.\n+\n 2019-05-17  Alan Hayward  <alan.hayward@arm.com>\n \n \t* gdb.base/ui-redirect.exp: Add debug redirect tests."
    },
    {
      "sha": "2beba053ee65a6642e5908ebadd63b78fd54c3c9",
      "filename": "gdb/testsuite/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/Makefile.in?ref=29b523140ecf72bc3fdf570c71fbda6fe85cf930",
      "patch": "@@ -52,6 +52,7 @@ RUNTESTFLAGS =\n \n FORCE_PARALLEL =\n \n+GDB_DEBUG =\n GDBSERVER_DEBUG =\n \n # Default number of iterations that we will use to run the testsuite\n@@ -164,15 +165,17 @@ check-read1:\n # status.\n TIMESTAMP = $(if $(TS),| $(srcdir)/print-ts.py $(if $(TS_FORMAT),$(TS_FORMAT),),)\n \n+gdb_debug = $(if $(GDB_DEBUG),GDB_DEBUG=$(GDB_DEBUG) ; export GDB_DEBUG ;,)\n gdbserver_debug = $(if $(GDBSERVER_DEBUG),GDBSERVER_DEBUG=$(GDBSERVER_DEBUG) ; export GDBSERVER_DEBUG ;,)\n \n+\n # All the hair to invoke dejagnu.  A given invocation can just append\n # $(RUNTESTFLAGS)\n DO_RUNTEST = \\\n \trootme=`pwd`; export rootme; \\\n \tsrcdir=${srcdir} ; export srcdir ; \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n-\tEXEEXT=${EXEEXT} ; export EXEEXT ; $(gdbserver_debug) \\\n+\tEXEEXT=${EXEEXT} ; export EXEEXT ;  $(gdb_debug) $(gdbserver_debug) \\\n         $(RPATH_ENVVAR)=$$rootme/../../expect:$$rootme/../../libstdc++:$$rootme/../../tk/unix:$$rootme/../../tcl/unix:$$rootme/../../bfd:$$rootme/../../opcodes:$$$(RPATH_ENVVAR); \\\n \texport $(RPATH_ENVVAR); \\\n \tif [ -f $${rootme}/../../expect/expect ] ; then  \\"
    },
    {
      "sha": "43f35a9d4bda256c576704ea92443f7f02ef59e6",
      "filename": "gdb/testsuite/README",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/README",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/README",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/README?ref=29b523140ecf72bc3fdf570c71fbda6fe85cf930",
      "patch": "@@ -293,6 +293,15 @@ can do:\n \n \tmake check TS=1 TS_FORMAT='[%b %H:%S]'\n \n+GDB_DEBUG\n+\n+When set gdb debug is sent to the file gdb.debug in the test output\n+directory.  It should be set to a comma separated list of gdb debug\n+components.\n+For example, to turn on debugging for infrun and target, you can do:\n+\n+\tmake check GDB_DEBUG=\"infrun,target\"\n+\n GDBSERVER_DEBUG\n \n When set gdbserver debug is sent to the file gdbserver.debug in the test\n@@ -508,6 +517,13 @@ gdb,nopie_flag\n   The flag required to force the compiler to produce non-position-independent\n   executables.\n \n+gdb,debug\n+\n+  When set gdb debug is sent to the file gdb.debug in the test output\n+  directory.  It should be set to a comma separated list of gdb debug\n+  components. For example, to turn on debugging for infrun and target, set to\n+  \"infrun,target\".\n+\n gdbserver,debug\n \n   When set gdbserver debug is sent to the file gdbserver.debug in the test"
    },
    {
      "sha": "ba276ac9297d34dd5da0f436f30e3c1ad63cebf3",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29b523140ecf72bc3fdf570c71fbda6fe85cf930/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=29b523140ecf72bc3fdf570c71fbda6fe85cf930",
      "patch": "@@ -1746,6 +1746,8 @@ proc default_gdb_start { } {\n \t    warning \"Couldn't set the width to 0.\"\n \t}\n     }\n+\n+    gdb_debug_init\n     return 0\n }\n \n@@ -6409,6 +6411,58 @@ proc gdb_supported_languages {} {\n \t\topencl rust minimal ada]\n }\n \n+# Check if debugging is enabled for gdb.\n+\n+proc gdb_debug_enabled { } {\n+    global gdbdebug\n+\n+    # If not already read, get the debug setting from environment or board setting.\n+    if {![info exists gdbdebug]} {\n+\tglobal env\n+\tif [info exists env(GDB_DEBUG)] {\n+\t    set gdbdebug $env(GDB_DEBUG)\n+\t} elseif [target_info exists gdb,debug] {\n+\t    set gdbdebug [target_info gdb,debug]\n+\t} else {\n+\t    return 0\n+\t}\n+    }\n+\n+    # Ensure it not empty.\n+    return [expr { $gdbdebug != \"\" }]\n+}\n+\n+# Turn on debugging if enabled, or reset if already on.\n+\n+proc gdb_debug_init { } {\n+\n+    global gdb_prompt\n+\n+    if ![gdb_debug_enabled] {\n+      return;\n+    }\n+\n+    # First ensure logging is off.\n+    send_gdb \"set logging off\\n\"\n+\n+    set debugfile [standard_output_file gdb.debug]\n+    send_gdb \"set logging file $debugfile\\n\"\n+\n+    send_gdb \"set logging debugredirect\\n\"\n+\n+    global gdbdebug\n+    foreach entry [split $gdbdebug ,] {\n+      send_gdb \"set debug $entry 1\\n\"\n+    }\n+\n+    # Now that everything is set, enable logging.\n+    send_gdb \"set logging on\\n\"\n+    gdb_expect 10 {\n+\t-re \"Copying output to $debugfile.*Redirecting debug output to $debugfile.*$gdb_prompt $\" {}\n+\ttimeout { warning \"Couldn't set logging file\" }\n+    }\n+}\n+\n # Check if debugging is enabled for gdbserver.\n \n proc gdbserver_debug_enabled { } {"
    }
  ]
}