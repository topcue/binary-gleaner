{
  "sha": "89055eaa122ceb99ae20bfe10d028da2ca7fee83",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODkwNTVlYWExMjJjZWI5OWFlMjBiZmUxMGQwMjhkYTJjYTdmZWU4Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-07-24T01:51:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-04T20:40:55Z"
    },
    "message": "Remove a VEC from aarch64-tdep.c\n\nThis removes a VEC from aarch64-tdep.c, replacing it with a\nstd::vector.\n\ngdb/ChangeLog\n2019-05-04  Tom Tromey  <tom@tromey.com>\n\n\t* aarch64-tdep.c (stack_item_t): Remove typedef and DEF_VEC.\n\t(struct aarch64_call_info): Add initializers.\n\t<si>: Now a std::vector.\n\t(pass_on_stack, aarch64_push_dummy_call): Update.",
    "tree": {
      "sha": "3035b6dffdee69c10863df8ee719374064cb0150",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3035b6dffdee69c10863df8ee719374064cb0150"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89055eaa122ceb99ae20bfe10d028da2ca7fee83",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89055eaa122ceb99ae20bfe10d028da2ca7fee83",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89055eaa122ceb99ae20bfe10d028da2ca7fee83",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89055eaa122ceb99ae20bfe10d028da2ca7fee83/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5da01df5b5601cae695cee588547fb9ef0967081",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5da01df5b5601cae695cee588547fb9ef0967081",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5da01df5b5601cae695cee588547fb9ef0967081"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 22,
    "deletions": 21
  },
  "files": [
    {
      "sha": "51aac88e8dc0c41a6650f3b543cf844f5a3e2d5e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89055eaa122ceb99ae20bfe10d028da2ca7fee83/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89055eaa122ceb99ae20bfe10d028da2ca7fee83/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=89055eaa122ceb99ae20bfe10d028da2ca7fee83",
      "patch": "@@ -1,3 +1,10 @@\n+2019-05-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* aarch64-tdep.c (stack_item_t): Remove typedef and DEF_VEC.\n+\t(struct aarch64_call_info): Add initializers.\n+\t<si>: Now a std::vector.\n+\t(pass_on_stack, aarch64_push_dummy_call): Update.\n+\n 2019-05-04  Simon Marchi  <simon.marchi@efficios.com>\n \t    Tom Tromey  <tom@tromey.com>\n "
    },
    {
      "sha": "2c8c6a1bdc32bb01894cc66efc0d8374d1245726",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 15,
      "deletions": 21,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89055eaa122ceb99ae20bfe10d028da2ca7fee83/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89055eaa122ceb99ae20bfe10d028da2ca7fee83/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=89055eaa122ceb99ae20bfe10d028da2ca7fee83",
      "patch": "@@ -1206,17 +1206,15 @@ aarch64_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,\n /* When arguments must be pushed onto the stack, they go on in reverse\n    order.  The code below implements a FILO (stack) to do this.  */\n \n-typedef struct\n+struct stack_item_t\n {\n   /* Value to pass on stack.  It can be NULL if this item is for stack\n      padding.  */\n   const gdb_byte *data;\n \n   /* Size in bytes of value to pass on stack.  */\n   int len;\n-} stack_item_t;\n-\n-DEF_VEC_O (stack_item_t);\n+};\n \n /* Implement the gdbarch type alignment method, overrides the generic\n    alignment algorithm for anything that is aarch64 specific.  */\n@@ -1392,22 +1390,22 @@ aapcs_is_vfp_call_or_return_candidate (struct type *type, int *count,\n struct aarch64_call_info\n {\n   /* the current argument number.  */\n-  unsigned argnum;\n+  unsigned argnum = 0;\n \n   /* The next general purpose register number, equivalent to NGRN as\n      described in the AArch64 Procedure Call Standard.  */\n-  unsigned ngrn;\n+  unsigned ngrn = 0;\n \n   /* The next SIMD and floating point register number, equivalent to\n      NSRN as described in the AArch64 Procedure Call Standard.  */\n-  unsigned nsrn;\n+  unsigned nsrn = 0;\n \n   /* The next stacked argument address, equivalent to NSAA as\n      described in the AArch64 Procedure Call Standard.  */\n-  unsigned nsaa;\n+  unsigned nsaa = 0;\n \n   /* Stack item vector.  */\n-  VEC(stack_item_t) *si;\n+  std::vector<stack_item_t> si;\n };\n \n /* Pass a value in a sequence of consecutive X registers.  The caller\n@@ -1521,7 +1519,7 @@ pass_on_stack (struct aarch64_call_info *info, struct type *type,\n \n   item.len = len;\n   item.data = buf;\n-  VEC_safe_push (stack_item_t, info->si, &item);\n+  info->si.push_back (item);\n \n   info->nsaa += len;\n   if (info->nsaa & (align - 1))\n@@ -1532,7 +1530,7 @@ pass_on_stack (struct aarch64_call_info *info, struct type *type,\n       item.len = pad;\n       item.data = NULL;\n \n-      VEC_safe_push (stack_item_t, info->si, &item);\n+      info->si.push_back (item);\n       info->nsaa += pad;\n     }\n }\n@@ -1632,8 +1630,6 @@ aarch64_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   int argnum;\n   struct aarch64_call_info info;\n \n-  memset (&info, 0, sizeof (info));\n-\n   /* We need to know what the type of the called function is in order\n      to determine the number of named/anonymous arguments for the\n      actual argument placement, and the return type in order to handle\n@@ -1762,18 +1758,16 @@ aarch64_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   if (info.nsaa & 15)\n     sp -= 16 - (info.nsaa & 15);\n \n-  while (!VEC_empty (stack_item_t, info.si))\n+  while (!info.si.empty ())\n     {\n-      stack_item_t *si = VEC_last (stack_item_t, info.si);\n+      const stack_item_t &si = info.si.back ();\n \n-      sp -= si->len;\n-      if (si->data != NULL)\n-\twrite_memory (sp, si->data, si->len);\n-      VEC_pop (stack_item_t, info.si);\n+      sp -= si.len;\n+      if (si.data != NULL)\n+\twrite_memory (sp, si.data, si.len);\n+      info.si.pop_back ();\n     }\n \n-  VEC_free (stack_item_t, info.si);\n-\n   /* Finally, update the SP register.  */\n   regcache_cooked_write_unsigned (regcache, AARCH64_SP_REGNUM, sp);\n "
    }
  ]
}