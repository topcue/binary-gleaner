{
  "sha": "3315614d19a7fb409227298ead9b356bdbcca3bc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzMxNTYxNGQxOWE3ZmI0MDkyMjcyOThlYWQ5YjM1NmJkYmNjYTNiYw==",
  "commit": {
    "author": {
      "name": "Matthew Fortune",
      "email": "matthew.fortune@mips.com",
      "date": "2019-04-09T17:34:48Z"
    },
    "committer": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2019-04-13T17:07:31Z"
    },
    "message": "[MIPS] Apply ASE information for the selected processor\n\nGAS does not enable implicit ASEs for most MIPS processors.\nThe rework of option handling done as part of .module implementation\nleft the implicit ASE logic broken and default enabled ASEs for\nmost processors did not get applied.  This patch ensures the ASE\ninformation is carried forward to the point where it is required.\n\ngas/\n\t* config/tc-mips.c (mips_set_options) <init_ase>: New field.\n\t(file_mips_opts, mips_opts) <init_ase>: Initialize new field.\n\t(file_mips_check_options): Propagate initial ASE settings.\n\t(mips_after_parse_args, parse_code_option): Track the initial\n\tASE settings for a CPU.\n\t(s_mipsset): Restore the initial ASE settings when reverting\n\tto the default arch.\n\t* testsuite/gas/mips/elf_mach_p6600.d: New test.\n\t* testsuite/gas/mips/mips.exp: Run the new test.",
    "tree": {
      "sha": "7a59bc98fb55415abb9c059e24f3766a1bfa6aeb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a59bc98fb55415abb9c059e24f3766a1bfa6aeb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3315614d19a7fb409227298ead9b356bdbcca3bc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3315614d19a7fb409227298ead9b356bdbcca3bc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3315614d19a7fb409227298ead9b356bdbcca3bc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3315614d19a7fb409227298ead9b356bdbcca3bc/comments",
  "author": null,
  "committer": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c40e31a1217f6ec9dd47e2e6806c2562096e31fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c40e31a1217f6ec9dd47e2e6806c2562096e31fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c40e31a1217f6ec9dd47e2e6806c2562096e31fe"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 51,
    "deletions": 7
  },
  "files": [
    {
      "sha": "b193e44a800752ad1caf5a12d0240d90a57d72fd",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3315614d19a7fb409227298ead9b356bdbcca3bc",
      "patch": "@@ -1,3 +1,15 @@\n+2019-04-09  Matthew Fortune  <matthew.fortune@mips.com>\n+\n+\t* config/tc-mips.c (mips_set_options) <init_ase>: New field.\n+\t(file_mips_opts, mips_opts) <init_ase>: Initialize new field.\n+\t(file_mips_check_options): Propagate initial ASE settings.\n+\t(mips_after_parse_args, parse_code_option): Track the initial\n+\tASE settings for a CPU.\n+\t(s_mipsset): Restore the initial ASE settings when reverting\n+\tto the default arch.\n+\t* testsuite/gas/mips/elf_mach_p6600.d: New test.\n+\t* testsuite/gas/mips/mips.exp: Run the new test.\n+\n 2019-04-12  John Darrington <john@darrington.wattle.id.au>\n \t\n \tconfig/tc-s12z.h: Remove definition of macro TC_M68K"
    },
    {
      "sha": "45e8f38ef5eebcfae8639cf669aa716f2d78fab3",
      "filename": "gas/config/tc-mips.c",
      "status": "modified",
      "additions": 15,
      "deletions": 7,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/config/tc-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/config/tc-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mips.c?ref=3315614d19a7fb409227298ead9b356bdbcca3bc",
      "patch": "@@ -268,6 +268,12 @@ struct mips_set_options\n   /* 1 if single-precision operations on odd-numbered registers are\n      allowed.  */\n   int oddspreg;\n+\n+  /* The set of ASEs that should be enabled for the user specified\n+     architecture.  This cannot be inferred from 'arch' for all cores\n+     as processors only have a unique 'arch' if they add architecture\n+     specific instructions (UDI).  */\n+  int init_ase;\n };\n \n /* Specifies whether module level options have been checked yet.  */\n@@ -289,7 +295,8 @@ static struct mips_set_options file_mips_opts =\n   /* noreorder */ 0,  /* at */ ATREG, /* warn_about_macros */ 0,\n   /* nomove */ 0, /* nobopt */ 0, /* noautoextend */ 0, /* insn32 */ FALSE,\n   /* gp */ -1, /* fp */ -1, /* arch */ CPU_UNKNOWN, /* sym32 */ FALSE,\n-  /* soft_float */ FALSE, /* single_float */ FALSE, /* oddspreg */ -1\n+  /* soft_float */ FALSE, /* single_float */ FALSE, /* oddspreg */ -1,\n+  /* init_ase */ 0\n };\n \n /* This is similar to file_mips_opts, but for the current set of options.  */\n@@ -300,7 +307,8 @@ static struct mips_set_options mips_opts =\n   /* noreorder */ 0,  /* at */ ATREG, /* warn_about_macros */ 0,\n   /* nomove */ 0, /* nobopt */ 0, /* noautoextend */ 0, /* insn32 */ FALSE,\n   /* gp */ -1, /* fp */ -1, /* arch */ CPU_UNKNOWN, /* sym32 */ FALSE,\n-  /* soft_float */ FALSE, /* single_float */ FALSE, /* oddspreg */ -1\n+  /* soft_float */ FALSE, /* single_float */ FALSE, /* oddspreg */ -1,\n+  /* init_ase */ 0\n };\n \n /* Which bits of file_ase were explicitly set or cleared by ASE options.  */\n@@ -4086,8 +4094,6 @@ mips_check_options (struct mips_set_options *opts, bfd_boolean abi_checks)\n static void\n file_mips_check_options (void)\n {\n-  const struct mips_cpu_info *arch_info = 0;\n-\n   if (file_mips_opts_checked)\n     return;\n \n@@ -4130,8 +4136,6 @@ file_mips_check_options (void)\n \tfile_mips_opts.fp = 32;\n     }\n \n-  arch_info = mips_cpu_info_from_arch (file_mips_opts.arch);\n-\n   /* Disable operations on odd-numbered floating-point registers by default\n      when using the FPXX ABI.  */\n   if (file_mips_opts.oddspreg < 0)\n@@ -4175,7 +4179,7 @@ file_mips_check_options (void)\n \n   /* If the user didn't explicitly select or deselect a particular ASE,\n      use the default setting for the CPU.  */\n-  file_mips_opts.ase |= (arch_info->ase & ~file_ase_explicit);\n+  file_mips_opts.ase |= (file_mips_opts.init_ase & ~file_ase_explicit);\n \n   /* Set up the current options.  These may change throughout assembly.  */\n   mips_opts = file_mips_opts;\n@@ -15189,6 +15193,7 @@ mips_after_parse_args (void)\n \n   file_mips_opts.arch = arch_info->cpu;\n   file_mips_opts.isa = arch_info->isa;\n+  file_mips_opts.init_ase = arch_info->ase;\n \n   /* Set up initial mips_opts state.  */\n   mips_opts = file_mips_opts;\n@@ -16559,6 +16564,7 @@ parse_code_option (char * name)\n \t      mips_opts.arch = p->cpu;\n \t      mips_opts.isa = p->isa;\n \t      isa_set = TRUE;\n+\t      mips_opts.init_ase = p->ase;\n \t    }\n \t}\n       else if (strncmp (name, \"mips\", 4) == 0)\n@@ -16573,6 +16579,7 @@ parse_code_option (char * name)\n \t      mips_opts.arch = p->cpu;\n \t      mips_opts.isa = p->isa;\n \t      isa_set = TRUE;\n+\t      mips_opts.init_ase = p->ase;\n \t    }\n \t}\n       else\n@@ -16646,6 +16653,7 @@ s_mipsset (int x ATTRIBUTE_UNUSED)\n     {\n       mips_opts.isa = file_mips_opts.isa;\n       mips_opts.arch = file_mips_opts.arch;\n+      mips_opts.init_ase = file_mips_opts.init_ase;\n       mips_opts.gp = file_mips_opts.gp;\n       mips_opts.fp = file_mips_opts.fp;\n     }"
    },
    {
      "sha": "a977d3b694628db9fc828aa23425ebeea5ce48ce",
      "filename": "gas/testsuite/gas/mips/elf_mach_p6600.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/testsuite/gas/mips/elf_mach_p6600.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/testsuite/gas/mips/elf_mach_p6600.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/mips/elf_mach_p6600.d?ref=3315614d19a7fb409227298ead9b356bdbcca3bc",
      "patch": "@@ -0,0 +1,23 @@\n+#readelf: -Ah\n+#name: ELF p6600 markings\n+#as: -64 -march=p6600\n+#source: empty.s\n+\n+ELF Header:\n+#...\n+  Flags: +0xa......., .*mips64r6.*\n+#...\n+\n+MIPS ABI Flags Version: 0\n+\n+ISA: MIPS64r6\n+GPR size: 64\n+CPR1 size: 128\n+CPR2 size: 0\n+FP ABI: .*\n+ISA Extension: None\n+ASEs:\n+\tVZ ASE\n+\tMSA ASE\n+FLAGS 1: .*\n+FLAGS 2: .*"
    },
    {
      "sha": "5969c59c4bc319fc48f5b765de453c87673c3a75",
      "filename": "gas/testsuite/gas/mips/mips.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/testsuite/gas/mips/mips.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3315614d19a7fb409227298ead9b356bdbcca3bc/gas/testsuite/gas/mips/mips.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/mips/mips.exp?ref=3315614d19a7fb409227298ead9b356bdbcca3bc",
      "patch": "@@ -1151,6 +1151,7 @@ if { [istarget mips*-*-vxworks*] } {\n     # Verify that machine markings are handled properly.\n     run_dump_test \"elf_mach_5900\"\n     run_dump_test \"elf_mach_interaptiv-mr2\"\n+    run_dump_test \"elf_mach_p6600\"\n \n     run_dump_test \"mips-gp32-fp32-pic\"\n     run_dump_test \"mips-gp32-fp64-pic\""
    }
  ]
}