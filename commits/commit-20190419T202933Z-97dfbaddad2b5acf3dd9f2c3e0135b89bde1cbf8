{
  "sha": "97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTdkZmJhZGRhZDJiNWFjZjNkZDlmMmMzZTAxMzViODliZGUxY2JmOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-07T22:31:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-19T20:29:33Z"
    },
    "message": "Use std::list for remote_notif_state::notif_queue\n\nThis changes remote_notif_state::notif_queue to be a std::list and\nupdates all the uses.\n\ngdb/ChangeLog\n2019-04-19  Tom Tromey  <tom@tromey.com>\n\n\t* remote.c (remote_target): Use delete.\n\t* remote-notif.h: Include <list>, not \"common/queue.h\".\n\t(notif_client_p): Remove typedef.\n\t(remote_notif_state): Add constructor, destructor, initializer.\n\t<notif_queue>: Now a std::list.\n\t(remote_notif_state_xfree): Don't declare.\n\t* remote-notif.c (remote_notif_process, handle_notification)\n\t(remote_notif_state_allocate): Update.\n\t(~remote_notif_state): Rename from remote_notif_state_xfree.",
    "tree": {
      "sha": "a41bf581ac78fbae6542524a3a7e3b2543081d64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a41bf581ac78fbae6542524a3a7e3b2543081d64"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b494cdff6922944383ef4dc20fcc90c4d823d315",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b494cdff6922944383ef4dc20fcc90c4d823d315",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b494cdff6922944383ef4dc20fcc90c4d823d315"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 38,
    "deletions": 33
  },
  "files": [
    {
      "sha": "ac16a7bc7be5beae080ff47b7a995211a7f63225",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
      "patch": "@@ -1,3 +1,15 @@\n+2019-04-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* remote.c (remote_target): Use delete.\n+\t* remote-notif.h: Include <list>, not \"common/queue.h\".\n+\t(notif_client_p): Remove typedef.\n+\t(remote_notif_state): Add constructor, destructor, initializer.\n+\t<notif_queue>: Now a std::list.\n+\t(remote_notif_state_xfree): Don't declare.\n+\t* remote-notif.c (remote_notif_process, handle_notification)\n+\t(remote_notif_state_allocate): Update.\n+\t(~remote_notif_state): Rename from remote_notif_state_xfree.\n+\n 2019-04-19  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (reread_symbols): Update."
    },
    {
      "sha": "2680618b3fa7a7a615eba4e9f58ae7597caa32e3",
      "filename": "gdb/remote-notif.c",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote-notif.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote-notif.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-notif.c?ref=97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
      "patch": "@@ -85,19 +85,17 @@ remote_notif_parse (remote_target *remote,\n   return event.release ();\n }\n \n-DEFINE_QUEUE_P (notif_client_p);\n-\n /* Process notifications in STATE's notification queue one by one.\n    EXCEPT is not expected in the queue.  */\n \n void\n remote_notif_process (struct remote_notif_state *state,\n \t\t      struct notif_client *except)\n {\n-  while (!QUEUE_is_empty (notif_client_p, state->notif_queue))\n+  while (!state->notif_queue.empty ())\n     {\n-      struct notif_client *nc = QUEUE_deque (notif_client_p,\n-\t\t\t\t\t     state->notif_queue);\n+      struct notif_client *nc = state->notif_queue.front ();\n+      state->notif_queue.pop_front ();\n \n       gdb_assert (nc != except);\n \n@@ -158,7 +156,7 @@ handle_notification (struct remote_notif_state *state, const char *buf)\n \n       /* Notify the event loop there's a stop reply to acknowledge\n \t and that there may be more events to fetch.  */\n-      QUEUE_enque (notif_client_p, state->notif_queue, nc);\n+      state->notif_queue.push_back (nc);\n       if (target_is_non_stop_p ())\n \t{\n \t  /* In non-stop, We mark REMOTE_ASYNC_GET_PENDING_EVENTS_TOKEN\n@@ -212,12 +210,10 @@ handle_notification (struct remote_notif_state *state, const char *buf)\n struct remote_notif_state *\n remote_notif_state_allocate (remote_target *remote)\n {\n-  struct remote_notif_state *notif_state = XCNEW (struct remote_notif_state);\n+  struct remote_notif_state *notif_state = new struct remote_notif_state;\n \n   notif_state->remote = remote;\n \n-  notif_state->notif_queue = QUEUE_alloc (notif_client_p, NULL);\n-\n   /* Register async_event_handler for notification.  */\n \n   notif_state->get_pending_events_token\n@@ -229,21 +225,16 @@ remote_notif_state_allocate (remote_target *remote)\n \n /* Free STATE and its fields.  */\n \n-void\n-remote_notif_state_xfree (struct remote_notif_state *state)\n+remote_notif_state::~remote_notif_state ()\n {\n   int i;\n \n-  QUEUE_free (notif_client_p, state->notif_queue);\n-\n   /* Unregister async_event_handler for notification.  */\n-  if (state->get_pending_events_token != NULL)\n-    delete_async_event_handler (&state->get_pending_events_token);\n+  if (get_pending_events_token != NULL)\n+    delete_async_event_handler (&get_pending_events_token);\n \n   for (i = 0; i < REMOTE_NOTIF_LAST; i++)\n-    delete state->pending_event[i];\n-\n-  xfree (state);\n+    delete pending_event[i];\n }\n \n void"
    },
    {
      "sha": "f9b0b2c61805636a6eec1491e7cd547eac4a430f",
      "filename": "gdb/remote-notif.h",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote-notif.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote-notif.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-notif.h?ref=97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
      "patch": "@@ -20,8 +20,8 @@\n #ifndef REMOTE_NOTIF_H\n #define REMOTE_NOTIF_H\n \n+#include <list>\n #include <memory>\n-#include \"common/queue.h\"\n \n /* An event of a type of async remote notification.  */\n \n@@ -48,7 +48,7 @@ struct remote_target;\n \n /* A client to a sort of async remote notification.  */\n \n-typedef struct notif_client\n+struct notif_client\n {\n   /* The name of notification packet.  */\n   const char *name;\n@@ -79,20 +79,23 @@ typedef struct notif_client\n \n   /* Id of this notif_client.  */\n   const enum REMOTE_NOTIF_ID id;\n-} *notif_client_p;\n-\n-DECLARE_QUEUE_P (notif_client_p);\n+};\n \n /* State on remote async notification.  */\n \n struct remote_notif_state\n {\n+  remote_notif_state () = default;\n+  ~remote_notif_state ();\n+\n+  DISABLE_COPY_AND_ASSIGN (remote_notif_state);\n+\n   /* The remote target.  */\n   remote_target *remote;\n \n   /* Notification queue.  */\n \n-  QUEUE(notif_client_p) *notif_queue;\n+  std::list<notif_client *> notif_queue;\n \n   /* Asynchronous signal handle registered as event loop source for when\n      the remote sent us a notification.  The registered callback\n@@ -101,14 +104,14 @@ struct remote_notif_state\n \n   struct async_event_handler *get_pending_events_token;\n \n-/* One pending event for each notification client.  This is where we\n-   keep it until it is acknowledged.  When there is a notification\n-   packet, parse it, and create an object of 'struct notif_event' to\n-   assign to it.  This field is unchanged until GDB starts to ack\n-   this notification (which is done by\n-   remote.c:remote_notif_pending_replies).  */\n+  /* One pending event for each notification client.  This is where we\n+     keep it until it is acknowledged.  When there is a notification\n+     packet, parse it, and create an object of 'struct notif_event' to\n+     assign to it.  This field is unchanged until GDB starts to ack\n+     this notification (which is done by\n+     remote.c:remote_notif_pending_replies).  */\n \n-  struct notif_event *pending_event[REMOTE_NOTIF_LAST];\n+  struct notif_event *pending_event[REMOTE_NOTIF_LAST] {};\n };\n \n void remote_notif_ack (remote_target *remote, notif_client *nc,\n@@ -123,7 +126,6 @@ void handle_notification (struct remote_notif_state *notif_state,\n void remote_notif_process (struct remote_notif_state *state,\n \t\t\t   struct notif_client *except);\n remote_notif_state *remote_notif_state_allocate (remote_target *remote);\n-void remote_notif_state_xfree (struct remote_notif_state *state);\n \n extern struct notif_client notif_client_stop;\n "
    },
    {
      "sha": "5e5fbbf8c34d09fe2de06eb6ff7b348a6d0aaf7b",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=97dfbaddad2b5acf3dd9f2c3e0135b89bde1cbf8",
      "patch": "@@ -4052,7 +4052,7 @@ remote_target::~remote_target ()\n   if (rs->remote_async_inferior_event_token)\n     delete_async_event_handler (&rs->remote_async_inferior_event_token);\n \n-  remote_notif_state_xfree (rs->notif_state);\n+  delete rs->notif_state;\n }\n \n /* Query the remote side for the text, data and bss offsets.  */"
    }
  ]
}