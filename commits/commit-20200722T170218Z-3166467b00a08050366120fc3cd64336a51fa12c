{
  "sha": "3166467b00a08050366120fc3cd64336a51fa12c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzE2NjQ2N2IwMGEwODA1MDM2NjEyMGZjM2NkNjQzMzZhNTFmYTEyYw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-04T16:21:10Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf: rename the type_mapping_key to type_key\n\nThe name was just annoyingly long and I kept misspelling it.\nIt's also a bad name: it's not a mapping the type might be *used* in a\ntype mapping, but it is itself a representation of a type (a ctf_file_t\n/ ctf_id_t pair), not of a mapping at all.\n\nlibctf/\n\t* ctf-impl.h (ctf_link_type_mapping_key): Rename to...\n\t(ctf_link_type_key): ... this, adjusting member prefixes to\n\tmatch.\n\t(ctf_hash_type_mapping_key): Rename to...\n\t(ctf_hash_type_key): ... this.\n\t(ctf_hash_eq_type_mapping_key): Rename to...\n\t(ctf_hash_eq_type_key): ... this.\n\t* ctf-hash.c (ctf_hash_type_mapping_key): Rename to...\n\t(ctf_hash_type_key): ... this, and adjust for member name\n\tchanges.\n\t(ctf_hash_eq_type_mapping_key): Rename to...\n\t(ctf_hash_eq_type_key): ... this, and adjust for member name\n\tchanges.\n\t* ctf-link.c (ctf_add_type_mapping): Adjust.  Note the lack of\n\tneed for out-of-memory checking in this code.\n\t(ctf_type_mapping): Adjust.",
    "tree": {
      "sha": "1ff98117b986c2a6ef0960e9fb75da4d737cfa79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1ff98117b986c2a6ef0960e9fb75da4d737cfa79"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3166467b00a08050366120fc3cd64336a51fa12c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3166467b00a08050366120fc3cd64336a51fa12c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3166467b00a08050366120fc3cd64336a51fa12c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3166467b00a08050366120fc3cd64336a51fa12c/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "43a61d7d3e619385b98c03d43733572b5b1dc015",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43a61d7d3e619385b98c03d43733572b5b1dc015",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/43a61d7d3e619385b98c03d43733572b5b1dc015"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 50,
    "deletions": 28
  },
  "files": [
    {
      "sha": "f756fc4eeb71a9235b174a703e42406b09946059",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=3166467b00a08050366120fc3cd64336a51fa12c",
      "patch": "@@ -1,3 +1,22 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_link_type_mapping_key): Rename to...\n+\t(ctf_link_type_key): ... this, adjusting member prefixes to\n+\tmatch.\n+\t(ctf_hash_type_mapping_key): Rename to...\n+\t(ctf_hash_type_key): ... this.\n+\t(ctf_hash_eq_type_mapping_key): Rename to...\n+\t(ctf_hash_eq_type_key): ... this.\n+\t* ctf-hash.c (ctf_hash_type_mapping_key): Rename to...\n+\t(ctf_hash_type_key): ... this, and adjust for member name\n+\tchanges.\n+\t(ctf_hash_eq_type_mapping_key): Rename to...\n+\t(ctf_hash_eq_type_key): ... this, and adjust for member name\n+\tchanges.\n+\t* ctf-link.c (ctf_add_type_mapping): Adjust.  Note the lack of\n+\tneed for out-of-memory checking in this code.\n+\t(ctf_type_mapping): Adjust.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \tconfigure.ac: Check for vasprintf."
    },
    {
      "sha": "ed06f1f86a76f16e3a898510241d4b000f5ef72e",
      "filename": "libctf/ctf-hash.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-hash.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-hash.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-hash.c?ref=3166467b00a08050366120fc3cd64336a51fa12c",
      "patch": "@@ -94,26 +94,27 @@ ctf_hash_eq_string (const void *a, const void *b)\n   return !strcmp((const char *) hep_a->key, (const char *) hep_b->key);\n }\n \n-/* Hash a type_mapping_key.  */\n+/* Hash a type_key.  */\n unsigned int\n-ctf_hash_type_mapping_key (const void *ptr)\n+ctf_hash_type_key (const void *ptr)\n {\n   ctf_helem_t *hep = (ctf_helem_t *) ptr;\n-  ctf_link_type_mapping_key_t *k = (ctf_link_type_mapping_key_t *) hep->key;\n+  ctf_link_type_key_t *k = (ctf_link_type_key_t *) hep->key;\n \n-  return htab_hash_pointer (k->cltm_fp) + 59 * htab_hash_pointer ((void *) k->cltm_idx);\n+  return htab_hash_pointer (k->cltk_fp) + 59\n+    * htab_hash_pointer ((void *) (uintptr_t) k->cltk_idx);\n }\n \n int\n-ctf_hash_eq_type_mapping_key (const void *a, const void *b)\n+ctf_hash_eq_type_key (const void *a, const void *b)\n {\n   ctf_helem_t *hep_a = (ctf_helem_t *) a;\n   ctf_helem_t *hep_b = (ctf_helem_t *) b;\n-  ctf_link_type_mapping_key_t *key_a = (ctf_link_type_mapping_key_t *) hep_a->key;\n-  ctf_link_type_mapping_key_t *key_b = (ctf_link_type_mapping_key_t *) hep_b->key;\n+  ctf_link_type_key_t *key_a = (ctf_link_type_key_t *) hep_a->key;\n+  ctf_link_type_key_t *key_b = (ctf_link_type_key_t *) hep_b->key;\n \n-  return (key_a->cltm_fp == key_b->cltm_fp)\n-    && (key_a->cltm_idx == key_b->cltm_idx);\n+  return (key_a->cltk_fp == key_b->cltk_fp)\n+    && (key_a->cltk_idx == key_b->cltk_idx);\n }\n \n "
    },
    {
      "sha": "b9d52af9d0e5c1cab5ff6777092a0e4634bad9d2",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=3166467b00a08050366120fc3cd64336a51fa12c",
      "patch": "@@ -232,16 +232,15 @@ typedef struct ctf_str_atom_ref\n   uint32_t *caf_ref;\t\t/* A single ref to this string.  */\n } ctf_str_atom_ref_t;\n \n-/* The structure used as the key in a ctf_link_type_mapping, which lets the\n-   linker machinery determine which type IDs on the input side of a link map to\n-   which types on the output side.  (The value is a ctf_id_t: another\n-   index, not a type.)  */\n+/* The structure used as the key in a ctf_link_type_mapping.  The value is a\n+   type index, not a type ID.  */\n \n-typedef struct ctf_link_type_mapping_key\n+typedef struct ctf_link_type_key\n {\n-  ctf_file_t *cltm_fp;\n-  ctf_id_t cltm_idx;\n-} ctf_link_type_mapping_key_t;\n+  ctf_file_t *cltk_fp;\n+  ctf_id_t cltk_idx;\n+} ctf_link_type_key_t;\n+\n \n /* The ctf_file is the structure used to represent a CTF container to library\n    clients, who see it only as an opaque pointer.  Modifications can therefore\n@@ -421,12 +420,12 @@ extern ctf_file_t *ctf_get_dict (ctf_file_t *fp, ctf_id_t type);\n typedef unsigned int (*ctf_hash_fun) (const void *ptr);\n extern unsigned int ctf_hash_integer (const void *ptr);\n extern unsigned int ctf_hash_string (const void *ptr);\n-extern unsigned int ctf_hash_type_mapping_key (const void *ptr);\n+extern unsigned int ctf_hash_type_key (const void *ptr);\n \n typedef int (*ctf_hash_eq_fun) (const void *, const void *);\n extern int ctf_hash_eq_integer (const void *, const void *);\n extern int ctf_hash_eq_string (const void *, const void *);\n-extern int ctf_hash_eq_type_mapping_key (const void *, const void *);\n+extern int ctf_hash_eq_type_key (const void *, const void *);\n \n extern int ctf_dynset_eq_string (const void *, const void *);\n "
    },
    {
      "sha": "c331fde35dc0492a78163a86c5c6d4142b31eed1",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3166467b00a08050366120fc3cd64336a51fa12c/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=3166467b00a08050366120fc3cd64336a51fa12c",
      "patch": "@@ -53,22 +53,25 @@ ctf_add_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type,\n \n   if (dst_fp->ctf_link_type_mapping == NULL)\n     {\n-      ctf_hash_fun f = ctf_hash_type_mapping_key;\n-      ctf_hash_eq_fun e = ctf_hash_eq_type_mapping_key;\n+      ctf_hash_fun f = ctf_hash_type_key;\n+      ctf_hash_eq_fun e = ctf_hash_eq_type_key;\n \n       if ((dst_fp->ctf_link_type_mapping = ctf_dynhash_create (f, e, free,\n \t\t\t\t\t\t\t       NULL)) == NULL)\n \treturn;\n     }\n \n-  ctf_link_type_mapping_key_t *key;\n-  key = calloc (1, sizeof (struct ctf_link_type_mapping_key));\n+  ctf_link_type_key_t *key;\n+  key = calloc (1, sizeof (struct ctf_link_type_key));\n   if (!key)\n     return;\n \n-  key->cltm_fp = src_fp;\n-  key->cltm_idx = src_type;\n+  key->cltk_fp = src_fp;\n+  key->cltk_idx = src_type;\n \n+  /* No OOM checking needed, because if this doesn't work the worst we'll do is\n+     add a few more duplicate types (which will probably run out of memory\n+     anyway).  */\n   ctf_dynhash_insert (dst_fp->ctf_link_type_mapping, key,\n \t\t      (void *) (uintptr_t) dst_type);\n }\n@@ -78,16 +81,16 @@ ctf_add_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type,\n ctf_id_t\n ctf_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type, ctf_file_t **dst_fp)\n {\n-  ctf_link_type_mapping_key_t key;\n+  ctf_link_type_key_t key;\n   ctf_file_t *target_fp = *dst_fp;\n   ctf_id_t dst_type = 0;\n \n   if (LCTF_TYPE_ISPARENT (src_fp, src_type) && src_fp->ctf_parent)\n     src_fp = src_fp->ctf_parent;\n \n   src_type = LCTF_TYPE_TO_INDEX(src_fp, src_type);\n-  key.cltm_fp = src_fp;\n-  key.cltm_idx = src_type;\n+  key.cltk_fp = src_fp;\n+  key.cltk_idx = src_type;\n \n   if (target_fp->ctf_link_type_mapping)\n     dst_type = (uintptr_t) ctf_dynhash_lookup (target_fp->ctf_link_type_mapping,"
    }
  ]
}