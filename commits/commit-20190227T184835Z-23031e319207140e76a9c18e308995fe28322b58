{
  "sha": "23031e319207140e76a9c18e308995fe28322b58",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjMwMzFlMzE5MjA3MTQwZTc2YTljMThlMzA4OTk1ZmUyODMyMmI1OA==",
  "commit": {
    "author": {
      "name": "Saagar Jha",
      "email": "saagar@saagarjha.com",
      "date": "2019-02-27T18:48:35Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-02-27T18:48:35Z"
    },
    "message": "Prevent overflow in rl_set_screen_size\n\nGDB calls rl_set_screen_size in readline with the current screen size,\nmeasured in rows and columns.  To represent \"infinite\" sizes, GDB\npasses in INT_MAX; however, since rl_set_screen_size internally\nmultiplies the number of rows and columns, this causes a signed\ninteger overflow.  To prevent this we can instead pass in the\napproximate square root of INT_MAX (which is still reasonably large),\nso that even when the number of rows and columns is \"infinite\" we\ndon't overflow.\n\ngdb/ChangeLog:\n2019-02-27  Saagar Jha  <saagar@saagarjha.com>\n\t    Pedro Alves  <palves@redhat.com>\n\n\t* utils.c (set_screen_size): Reduce \"infinite\" rows and columns\n\tbefore calling rl_set_screen_size.",
    "tree": {
      "sha": "e182f185d020c2572216a1b916ad8f647aeaa78d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e182f185d020c2572216a1b916ad8f647aeaa78d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/23031e319207140e76a9c18e308995fe28322b58",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23031e319207140e76a9c18e308995fe28322b58",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/23031e319207140e76a9c18e308995fe28322b58",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23031e319207140e76a9c18e308995fe28322b58/comments",
  "author": {
    "login": "saagarjha",
    "id": 13786931,
    "node_id": "MDQ6VXNlcjEzNzg2OTMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/13786931?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/saagarjha",
    "html_url": "https://github.com/saagarjha",
    "followers_url": "https://api.github.com/users/saagarjha/followers",
    "following_url": "https://api.github.com/users/saagarjha/following{/other_user}",
    "gists_url": "https://api.github.com/users/saagarjha/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/saagarjha/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/saagarjha/subscriptions",
    "organizations_url": "https://api.github.com/users/saagarjha/orgs",
    "repos_url": "https://api.github.com/users/saagarjha/repos",
    "events_url": "https://api.github.com/users/saagarjha/events{/privacy}",
    "received_events_url": "https://api.github.com/users/saagarjha/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6c28e44a359e9f6cf455ddff0009ca99406f7224"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 23,
    "deletions": 4
  },
  "files": [
    {
      "sha": "02602b2320abfed3a1876ce89310dd1d2cdbfa56",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23031e319207140e76a9c18e308995fe28322b58/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23031e319207140e76a9c18e308995fe28322b58/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=23031e319207140e76a9c18e308995fe28322b58",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-27  Saagar Jha  <saagar@saagarjha.com>\n+\t    Pedro Alves  <palves@redhat.com>\n+\n+\t* utils.c (set_screen_size): Reduce \"infinite\" rows and columns\n+\tbefore calling rl_set_screen_size.\n+\n 2019-02-27  Tom Tromey  <tromey@adacore.com>\n \n \t* configure.ac (HAVE_LIBPYTHON2_4, HAVE_LIBPYTHON2_5): Never"
    },
    {
      "sha": "069da23542edb7b7608ae635e7b6e591684efc25",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23031e319207140e76a9c18e308995fe28322b58/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23031e319207140e76a9c18e308995fe28322b58/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=23031e319207140e76a9c18e308995fe28322b58",
      "patch": "@@ -1380,11 +1380,24 @@ set_screen_size (void)\n   int rows = lines_per_page;\n   int cols = chars_per_line;\n \n-  if (rows <= 0)\n-    rows = INT_MAX;\n+  /* If we get 0 or negative ROWS or COLS, treat as \"infinite\" size.\n+     A negative number can be seen here with the \"set width/height\"\n+     commands and either:\n \n-  if (cols <= 0)\n-    cols = INT_MAX;\n+     - the user specified \"unlimited\", which maps to UINT_MAX, or\n+     - the user spedified some number between INT_MAX and UINT_MAX.\n+\n+     Cap \"infinity\" to approximately sqrt(INT_MAX) so that we don't\n+     overflow in rl_set_screen_size, which multiplies rows and columns\n+     to compute the number of characters on the screen.  */\n+\n+  const int sqrt_int_max = INT_MAX >> (sizeof (int) * 8 / 2);\n+\n+  if (rows <= 0 || rows > sqrt_int_max)\n+    rows = sqrt_int_max;\n+\n+  if (cols <= 0 || cols > sqrt_int_max)\n+    cols = sqrt_int_max;\n \n   /* Update Readline's idea of the terminal size.  */\n   rl_set_screen_size (rows, cols);"
    }
  ]
}