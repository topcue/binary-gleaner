{
  "sha": "a52b41bf2f08f6c106983f1acca2c8a2f69279b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUyYjQxYmYyZjA4ZjZjMTA2OTgzZjFhY2NhMmM4YTJmNjkyNzliMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-18T02:00:15Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:53Z"
    },
    "message": "gdb/testsuite: split gdb.python/py-parameter.exp in procs\n\nSplit the file into multiple independent test procs, where each proc\nstarts with a fresh GDB.  I find it easier to understand what a test is\ndoing when each part of the test is isolated and self-contained.  It\nmakes it easier to comment out some parts of the test while working /\ndebugging a specific part.  It also makes it easier to add new things\n(which a subsequent patch will do) without fear of impacting another part\nof the test.\n\nChange-Id: I8b4d52ac82b1492d79b679e13914ed177d8a836d",
    "tree": {
      "sha": "e594f8a7090ae2c4e5d7e9071f2e830470dff9e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e594f8a7090ae2c4e5d7e9071f2e830470dff9e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a52b41bf2f08f6c106983f1acca2c8a2f69279b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a52b41bf2f08f6c106983f1acca2c8a2f69279b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a52b41bf2f08f6c106983f1acca2c8a2f69279b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a52b41bf2f08f6c106983f1acca2c8a2f69279b0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "27df69020ad14b8d8d710aaf635bbea467f5b4f0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27df69020ad14b8d8d710aaf635bbea467f5b4f0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/27df69020ad14b8d8d710aaf635bbea467f5b4f0"
    }
  ],
  "stats": {
    "total": 237,
    "additions": 137,
    "deletions": 100
  },
  "files": [
    {
      "sha": "7a51eeb640fcb4f5fa7180be21167437bf8abdf2",
      "filename": "gdb/testsuite/gdb.python/py-parameter.exp",
      "status": "modified",
      "additions": 137,
      "deletions": 100,
      "changes": 237,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52b41bf2f08f6c106983f1acca2c8a2f69279b0/gdb/testsuite/gdb.python/py-parameter.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52b41bf2f08f6c106983f1acca2c8a2f69279b0/gdb/testsuite/gdb.python/py-parameter.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-parameter.exp?ref=a52b41bf2f08f6c106983f1acca2c8a2f69279b0",
      "patch": "@@ -19,78 +19,84 @@\n load_lib gdb-python.exp\n \n # Start with a fresh gdb.\n-gdb_exit\n-gdb_start\n-gdb_reinitialize_dir $srcdir/$subdir\n+clean_restart\n \n # Skip all tests if Python scripting is not enabled.\n if { [skip_python_tests] } { continue }\n \n-# We use \".\" here instead of \":\" so that this works on win32 too.\n-if { [is_remote host] } {\n-    # Don't match $srcdir/$subdir because proc gdb_reinitialize_dir\n-    # doesn't set search directories on remote host.\n-    set directories \".*\\\\\\$cdir.\\\\\\$cwd\"\n-} else {\n-    set escaped_directory [string_to_regexp \"$srcdir/$subdir\"]\n-    set directories \"$escaped_directory.\\\\\\$cdir.\\\\\\$cwd\"\n-}\n-gdb_test \"python print (gdb.parameter ('directories'))\" $directories\n-\n-# Check we can correctly read the data-directory parameter.  First,\n-# grab the value as read directly from the GDB CLI.\n-set dd \"\"\n-gdb_test_multiple \"show data-directory\" \\\n-    \"find the initial data-directory value\" {\n-\t-re -wrap \"GDB's data directory is \\\"(\\[^\\r\\n\\]+)\\\"\\\\.\" {\n-\t    set dd $expect_out(1,string)\n-\t    pass $gdb_test_name\n-\t}\n+proc_with_prefix test_directories { } {\n+    # We use \".\" here instead of \":\" so that this works on win32 too.\n+    if { [is_remote host] } {\n+\t# Don't match $srcdir/$subdir because proc gdb_reinitialize_dir\n+\t# doesn't set search directories on remote host.\n+\tset directories \".*\\\\\\$cdir.\\\\\\$cwd\"\n+    } else {\n+\tset escaped_directory [string_to_regexp \"$::srcdir/$::subdir\"]\n+\tset directories \"$escaped_directory.\\\\\\$cdir.\\\\\\$cwd\"\n     }\n+    gdb_test \"python print (gdb.parameter ('directories'))\" $directories\n+}\n \n-# Now print the data-directory from Python.\n-gdb_test \"python print (gdb.parameter ('data-directory'))\" $dd\n-\n-# Next change the data-directory to a relative path.  Internally GDB\n-# will resolve this to an absolute path, which Python should then see.\n-#\n-# GDB is currently running in '...../build/gdb/testsuite/' and the\n-# test output is being written to:\n-#   ...../build/gdb/testsuite/outputs/gdb.python/py-parameter/\n-#\n-# So create the relative path './outputs/gdb.python/py-parameter/' and\n-# set the data-directory to that, we should then see the absolute path.\n-\n-set abs_path_to_output_dir [standard_output_file \"\"]\n-set abs_path_to_cwd $objdir\n-set rel_path_to_output_dir \\\n-    [file join \".\" [string replace ${abs_path_to_output_dir} 0 \\\n-\t\t\t[string length ${abs_path_to_cwd}] \"\"]]\n-gdb_test_no_output \"set data-directory ${rel_path_to_output_dir}\"\n-\n-gdb_test \"python print (gdb.parameter ('data-directory'))\" \\\n-    ${abs_path_to_output_dir} \\\n-    \"python sees absolute version of data-directory path\"\n-\n-# While we're here, check we see the correct path at GDB's CLI.\n-gdb_test \"show data-directory\" \\\n-    \"GDB's data directory is \\\"${abs_path_to_output_dir}\\\"\\\\.\" \\\n-    \"check modified data-directory at the CLI\"\n-\n-# Now lets set the data-directory back to what it was initially.\n-gdb_test_no_output \"set data-directory ${dd}\" \\\n-    \"set data-directory back to its original value\"\n-\n-# And check we see the restored value at CLI and from Python.\n-gdb_test \"show data-directory\" \\\n-    \"GDB's data directory is \\\"${dd}\\\"\\\\.\" \\\n-    \"check original data-directory was restored at the CLI\"\n+proc_with_prefix test_data_directory { } {\n+    clean_restart\n+\n+    # Check we can correctly read the data-directory parameter.  First,\n+    # grab the value as read directly from the GDB CLI.\n+    set dd \"\"\n+    gdb_test_multiple \"show data-directory\" \\\n+\t\"find the initial data-directory value\" {\n+\t    -re -wrap \"GDB's data directory is \\\"(\\[^\\r\\n\\]+)\\\"\\\\.\" {\n+\t\tset dd $expect_out(1,string)\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}\n \n-gdb_test \"python print (gdb.parameter ('data-directory'))\" ${dd} \\\n-    \"python sees restored data-directory value\"\n+    # Now print the data-directory from Python.\n+    gdb_test \"python print (gdb.parameter ('data-directory'))\" $dd\n+\n+    # Next change the data-directory to a relative path.  Internally GDB\n+    # will resolve this to an absolute path, which Python should then see.\n+    #\n+    # GDB is currently running in '...../build/gdb/testsuite/' and the\n+    # test output is being written to:\n+    #   ...../build/gdb/testsuite/outputs/gdb.python/py-parameter/\n+    #\n+    # So create the relative path './outputs/gdb.python/py-parameter/' and\n+    # set the data-directory to that, we should then see the absolute path.\n+\n+    set abs_path_to_output_dir [standard_output_file \"\"]\n+    set abs_path_to_cwd $::objdir\n+    set rel_path_to_output_dir \\\n+\t[file join \".\" [string replace ${abs_path_to_output_dir} 0 \\\n+\t\t\t    [string length ${abs_path_to_cwd}] \"\"]]\n+    gdb_test_no_output \"set data-directory ${rel_path_to_output_dir}\"\n+\n+    gdb_test \"python print (gdb.parameter ('data-directory'))\" \\\n+\t${abs_path_to_output_dir} \\\n+\t\"python sees absolute version of data-directory path\"\n+\n+    # While we're here, check we see the correct path at GDB's CLI.\n+    gdb_test \"show data-directory\" \\\n+\t\"GDB's data directory is \\\"${abs_path_to_output_dir}\\\"\\\\.\" \\\n+\t\"check modified data-directory at the CLI\"\n+\n+    # Now lets set the data-directory back to what it was initially.\n+    gdb_test_no_output \"set data-directory ${dd}\" \\\n+\t\"set data-directory back to its original value\"\n+\n+    # And check we see the restored value at CLI and from Python.\n+    gdb_test \"show data-directory\" \\\n+\t\"GDB's data directory is \\\"${dd}\\\"\\\\.\" \\\n+\t\"check original data-directory was restored at the CLI\"\n+\n+    gdb_test \"python print (gdb.parameter ('data-directory'))\" ${dd} \\\n+\t\"python sees restored data-directory value\"\n+}\n \n # Test a simple boolean parameter.\n-with_test_prefix \"boolean parameter\" {\n+proc_with_prefix test_boolean_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"Simple gdb booleanparameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestParam (gdb.Parameter):\" \"\" \\\n@@ -130,7 +136,9 @@ with_test_prefix \"boolean parameter\" {\n }\n \n # Test an enum parameter.\n-with_test_prefix \"enum parameter\" {\n+proc_with_prefix test_enum_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"enum gdb parameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestEnumParam (gdb.Parameter):\" \"\" \\\n@@ -163,7 +171,9 @@ with_test_prefix \"enum parameter\" {\n }\n \n # Test a file parameter.\n-with_test_prefix \"file parameter\" {\n+proc_with_prefix test_file_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"file gdb parameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestFileParam (gdb.Parameter):\" \"\" \\\n@@ -195,7 +205,9 @@ with_test_prefix \"file parameter\" {\n }\n \n # Test a parameter that is not documented.\n-with_test_prefix \"undocumented parameter\" {\n+proc_with_prefix test_undocumented_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"Simple gdb booleanparameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestUndocParam (gdb.Parameter):\" \"\" \\\n@@ -230,7 +242,9 @@ with_test_prefix \"undocumented parameter\" {\n }\n \n # Test a parameter that is not documented in any way..\n-with_test_prefix \"really undocumented parameter\" {\n+proc_with_prefix test_really_undocumented_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"Simple gdb booleanparameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestNodocParam (gdb.Parameter):\" \"\" \\\n@@ -258,7 +272,9 @@ with_test_prefix \"really undocumented parameter\" {\n }\n \n # Test deprecated API. Do not use in your own implementations.\n-with_test_prefix \"deprecated API parameter\" {\n+proc_with_prefix test_deprecated_api_parameter { } {\n+    clean_restart\n+\n     gdb_test_multiline \"Simple gdb booleanparameter\" \\\n \t\"python\" \"\" \\\n \t\"class TestParam (gdb.Parameter):\" \"\" \\\n@@ -289,41 +305,62 @@ with_test_prefix \"deprecated API parameter\" {\n \t\"test general help\"\n }\n \n-foreach kind {PARAM_ZUINTEGER PARAM_ZUINTEGER_UNLIMITED} {\n-    gdb_test_multiline \"Simple gdb $kind\" \\\n+proc_with_prefix test_integer_parameter { } {\n+    foreach_with_prefix kind {PARAM_ZUINTEGER PARAM_ZUINTEGER_UNLIMITED} {\n+\tclean_restart\n+\n+\tgdb_test_multiline \"create parameter\" \\\n+\t    \"python\" \"\" \\\n+\t    \"class TestNodocParam (gdb.Parameter):\" \"\" \\\n+\t    \"   def __init__ (self, name):\" \"\" \\\n+\t    \"      super (TestNodocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.$kind)\" \"\" \\\n+\t    \"      self.value = 0\" \"\" \\\n+\t    \"test_param_$kind = TestNodocParam ('test-$kind')\" \"\" \\\n+\t    \"end\"\n+\n+\tgdb_test \"python print(gdb.parameter('test-$kind'))\" \"0\"\n+\n+\tgdb_test \"python test_param_$kind.value = -5\" \"RuntimeError: Range exceeded.*\"\n+\n+\tif {$kind == \"PARAM_ZUINTEGER\"} {\n+\t    gdb_test \"python test_param_$kind.value = -1\" \"RuntimeError: Range exceeded.*\"\n+\t} elseif {$kind == \"PARAM_ZUINTEGER_UNLIMITED\"} {\n+\t    gdb_test_no_output \"python test_param_$kind.value = -1\" \\\n+\t\t\"check that PARAM_ZUINTEGER value can be set to -1\"\n+\t    gdb_test \"python print(gdb.parameter('test-$kind'))\" \"-1\" \\\n+\t\t\"check that PARAM_ZUINTEGER value is -1 after setting\"\n+\t} else {\n+\t    error \"invalid kind: $kind\"\n+\t}\n+    }\n+}\n+\n+proc_with_prefix test_throwing_parameter { } {\n+    clean_restart\n+\n+    gdb_test_multiline \"Throwing gdb parameter\" \\\n \t\"python\" \"\" \\\n-\t\"class TestNodocParam (gdb.Parameter):\" \"\" \\\n+\t\"class TestThrowParam (gdb.Parameter):\" \"\" \\\n \t\"   def __init__ (self, name):\" \"\" \\\n-\t\"      super (TestNodocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.$kind)\" \"\" \\\n-\t\"      self.value = 0\" \"\" \\\n-\t\"test_param_$kind = TestNodocParam ('test-$kind')\" \"\" \\\n+\t\"      super (TestThrowParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_STRING)\" \"\" \\\n+\t\"      self.value = True\" \"\" \\\n+\t\"   def get_set_string (self):\" \"\" \\\n+\t\"      raise gdb.GdbError('Ordinary gdb error')\" \"\" \\\n+\t\"test_throw_param = TestThrowParam ('print test-throw-param')\" \"\"\\\n \t\"end\"\n \n-    gdb_test \"python print(gdb.parameter('test-$kind'))\" \"0\"\n-\n-    gdb_test \"python test_param_$kind.value = -5\" \"RuntimeError: Range exceeded.*\"\n-\n-    if {$kind == \"PARAM_ZUINTEGER\"} {\n-\tgdb_test \"python test_param_$kind.value = -1\" \"RuntimeError: Range exceeded.*\"\n-    } else {\n-\tgdb_test_no_output \"python test_param_$kind.value = -1\" \\\n-\t    \"check that PARAM_ZUINTEGER value can be set to -1\"\n-\tgdb_test \"python print(gdb.parameter('test-$kind'))\" \"-1\" \\\n-\t    \"check that PARAM_ZUINTEGER value is -1 after setting\"\n-    }\n+    gdb_test \"set print test-throw-param whoops\" \\\n+\t\"Ordinary gdb error\" \\\n+\t\"gdb.GdbError does not show Python stack\"\n }\n \n-gdb_test_multiline \"Throwing gdb parameter\" \\\n-    \"python\" \"\" \\\n-    \"class TestThrowParam (gdb.Parameter):\" \"\" \\\n-    \"   def __init__ (self, name):\" \"\" \\\n-    \"      super (TestThrowParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_STRING)\" \"\" \\\n-    \"      self.value = True\" \"\" \\\n-    \"   def get_set_string (self):\" \"\" \\\n-    \"      raise gdb.GdbError('Ordinary gdb error')\" \"\" \\\n-    \"test_throw_param = TestThrowParam ('print test-throw-param')\" \"\"\\\n-    \"end\"\n-\n-gdb_test \"set print test-throw-param whoops\" \\\n-    \"Ordinary gdb error\" \\\n-    \"gdb.GdbError does not show Python stack\"\n+test_directories\n+test_data_directory\n+test_boolean_parameter\n+test_enum_parameter\n+test_file_parameter\n+test_undocumented_parameter\n+test_really_undocumented_parameter\n+test_deprecated_api_parameter\n+test_integer_parameter\n+test_throwing_parameter"
    }
  ]
}