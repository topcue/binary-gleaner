{
  "sha": "d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDcxMWVlNjdhY2EwNmM5NzUzZjA5ZGMxNTRlYjhjNzVjYjRmNThlZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-03T15:44:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-23T12:34:11Z"
    },
    "message": "gdb: Convert language la_printstr field to a method\n\nThis commit changes the language_data::la_printstr function pointer\nmember variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Delete la_printstr initializer.\n\t(ada_language::printstr): New member function.\n\t* c-lang.c (c_language_data): Delete la_printstr initializer.\n\t(cplus_language_data): Likewise.\n\t(asm_language_data): Likewise.\n\t(minimal_language_data): Likewise.\n\t* d-lang.c (d_language_data): Likewise.\n\t* f-lang.c (f_printstr): Rename to f_language::printstr.\n\t(f_language_data): Delete la_printstr initializer.\n\t(f_language::printstr): New member function, implementation from\n\tf_printstr.\n\t* go-lang.c (go_language_data): Delete la_printstr initializer.\n\t* language.c (language_defn::printstr): Define new member\n\tfunction.\n\t(unk_lang_printstr): Delete.\n\t(unknown_language_data): Delete la_printstr initializer.\n\t(unknown_language::printstr): New member function.\n\t(auto_language_data): Delete la_printstr initializer.\n\t(auto_language::printstr): New member function.\n\t* language.h (language_data): Delete la_printstr field.\n\t(language_defn::printstr): Declare new member function.\n\t(LA_PRINT_STRING): Update call to printstr.\n\t* m2-lang.c (m2_printstr): Rename to m2_language::printstr.\n\t(m2_language_data): Delete la_printstr initializer.\n\t(m2_language::printstr): New member function, implementation from\n\tm2_printstr.\n\t* objc-lang.c (objc_language_data): Delete la_printstr\n\tinitializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_printstr): Rename to pascal_language::printstr.\n\t(pascal_language_data): Delete la_printstr initializer.\n\t(pascal_language::printstr): New member function, implementation\n\tfrom pascal_printstr.\n\t* p-lang.h (pascal_printstr): Delete declaration.\n\t* rust-lang.c (rust_printstr): Update header comment.\n\t(rust_language_data): Delete la_printstr initializer.\n\t(rust_language::printstr): New member function.",
    "tree": {
      "sha": "3eb445d93e521604f3e07adadf2eba3ceac068f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3eb445d93e521604f3e07adadf2eba3ceac068f6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52b50f2c1b1eaf6fd6e685e2c9575f92c581a6dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52b50f2c1b1eaf6fd6e685e2c9575f92c581a6dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52b50f2c1b1eaf6fd6e685e2c9575f92c581a6dc"
    }
  ],
  "stats": {
    "total": 537,
    "additions": 297,
    "deletions": 240
  },
  "files": [
    {
      "sha": "e768e447f42d51c1d4b59d66469b844b711030be",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -1,3 +1,43 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Delete la_printstr initializer.\n+\t(ada_language::printstr): New member function.\n+\t* c-lang.c (c_language_data): Delete la_printstr initializer.\n+\t(cplus_language_data): Likewise.\n+\t(asm_language_data): Likewise.\n+\t(minimal_language_data): Likewise.\n+\t* d-lang.c (d_language_data): Likewise.\n+\t* f-lang.c (f_printstr): Rename to f_language::printstr.\n+\t(f_language_data): Delete la_printstr initializer.\n+\t(f_language::printstr): New member function, implementation from\n+\tf_printstr.\n+\t* go-lang.c (go_language_data): Delete la_printstr initializer.\n+\t* language.c (language_defn::printstr): Define new member\n+\tfunction.\n+\t(unk_lang_printstr): Delete.\n+\t(unknown_language_data): Delete la_printstr initializer.\n+\t(unknown_language::printstr): New member function.\n+\t(auto_language_data): Delete la_printstr initializer.\n+\t(auto_language::printstr): New member function.\n+\t* language.h (language_data): Delete la_printstr field.\n+\t(language_defn::printstr): Declare new member function.\n+\t(LA_PRINT_STRING): Update call to printstr.\n+\t* m2-lang.c (m2_printstr): Rename to m2_language::printstr.\n+\t(m2_language_data): Delete la_printstr initializer.\n+\t(m2_language::printstr): New member function, implementation from\n+\tm2_printstr.\n+\t* objc-lang.c (objc_language_data): Delete la_printstr\n+\tinitializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_printstr): Rename to pascal_language::printstr.\n+\t(pascal_language_data): Delete la_printstr initializer.\n+\t(pascal_language::printstr): New member function, implementation\n+\tfrom pascal_printstr.\n+\t* p-lang.h (pascal_printstr): Delete declaration.\n+\t* rust-lang.c (rust_printstr): Update header comment.\n+\t(rust_language_data): Delete la_printstr initializer.\n+\t(rust_language::printstr): New member function.\n+\n 2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_printchar initializer."
    },
    {
      "sha": "62ea21a3857ef883048f23d098b52819b904fe37",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -13681,7 +13681,6 @@ extern const struct language_data ada_language_data =\n   macro_expansion_no,\n   ada_extensions,\n   &ada_exp_descriptor,\n-  ada_printstr,                 /* Function to print string constant */\n   ada_print_typedef,            /* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n@@ -14122,6 +14121,17 @@ class ada_language : public language_defn\n     ada_printchar (ch, chtype, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    ada_printstr (stream, elttype, string, length, encoding,\n+\t\t  force_ellipses, options);\n+  }\n+\n protected:\n   /* See language.h.  */\n "
    },
    {
      "sha": "d6bbc025bc7bc93c595923f29bc77f515df46200",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -889,7 +889,6 @@ extern const struct language_data c_language_data =\n   macro_expansion_c,\n   c_extensions,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -993,7 +992,6 @@ extern const struct language_data cplus_language_data =\n   macro_expansion_c,\n   cplus_extensions,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",                       /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -1194,7 +1192,6 @@ extern const struct language_data asm_language_data =\n   macro_expansion_c,\n   asm_extensions,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -1253,7 +1250,6 @@ extern const struct language_data minimal_language_data =\n   macro_expansion_c,\n   NULL,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "17ab38ee5116a1b57ab126d833a2b45c17cafb4c",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -142,7 +142,6 @@ extern const struct language_data d_language_data =\n   macro_expansion_no,\n   d_extensions,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   \"this\","
    },
    {
      "sha": "67c2ea34b64570a27f7c728fff4216d3fa13c5aa",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 19,
      "deletions": 24,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -68,29 +68,6 @@ f_get_encoding (struct type *type)\n   return encoding;\n }\n \n-/* Print the character string STRING, printing at most LENGTH characters.\n-   Printing stops early if the number hits print_max; repeat counts\n-   are printed as appropriate.  Print ellipses at the end if we\n-   had to stop before printing LENGTH characters, or if FORCE_ELLIPSES.\n-   FIXME:  This is a copy of the same function from c-exp.y.  It should\n-   be replaced with a true F77 version.  */\n-\n-static void\n-f_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,\n-\t    unsigned int length, const char *encoding, int force_ellipses,\n-\t    const struct value_print_options *options)\n-{\n-  const char *type_encoding = f_get_encoding (type);\n-\n-  if (TYPE_LENGTH (type) == 4)\n-    fputs_filtered (\"4_\", stream);\n-\n-  if (!encoding || !*encoding)\n-    encoding = type_encoding;\n-\n-  generic_printstr (stream, type, string, length, encoding,\n-\t\t    force_ellipses, '\\'', 0, options);\n-}\n \f\n \n /* Table of operators and their precedences for printing expressions.  */\n@@ -536,7 +513,6 @@ extern const struct language_data f_language_data =\n   macro_expansion_no,\n   f_extensions,\n   &exp_descriptor_f,\n-  f_printstr,\t\t\t/* function to print string constant */\n   f_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                    \t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -707,6 +683,25 @@ class f_language : public language_defn\n     fputs_filtered (\"'\", stream);\n   }\n \n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    const char *type_encoding = f_get_encoding (elttype);\n+\n+    if (TYPE_LENGTH (elttype) == 4)\n+      fputs_filtered (\"4_\", stream);\n+\n+    if (!encoding || !*encoding)\n+      encoding = type_encoding;\n+\n+    generic_printstr (stream, elttype, string, length, encoding,\n+\t\t      force_ellipses, '\\'', 0, options);\n+  }\n+\n protected:\n \n   /* See language.h.  */"
    },
    {
      "sha": "69f14b8c56c85cab2b38e762a40d00673ebeac02",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -527,7 +527,6 @@ extern const struct language_data go_language_data =\n   macro_expansion_no,\n   NULL,\n   &exp_descriptor_c,\n-  c_printstr,\t\t\t/* Function to print string constant.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   NULL,\t\t\t\t/* name_of_this */"
    },
    {
      "sha": "9867ac4b4b58b8d97575c3171f353f8502180ae3",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 32,
      "deletions": 12,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -669,6 +669,18 @@ language_defn::printchar (int ch, struct type *chtype,\n   c_printchar (ch, chtype, stream);\n }\n \n+/* See language.h.  */\n+\n+void\n+language_defn::printstr (struct ui_file *stream, struct type *elttype,\n+\t\t\t const gdb_byte *string, unsigned int length,\n+\t\t\t const char *encoding, int force_ellipses,\n+\t\t\t const struct value_print_options *options) const\n+{\n+  c_printstr (stream, elttype, string, length, encoding, force_ellipses,\n+\t      options);\n+}\n+\n /* The default implementation of the get_symbol_name_matcher_inner method\n    from the language_defn class.  Matches with strncmp_iw.  */\n \n@@ -734,16 +746,6 @@ default_is_string_type_p (struct type *type)\n   return (type->code ()  == TYPE_CODE_STRING);\n }\n \n-static void\n-unk_lang_printstr (struct ui_file *stream, struct type *type,\n-\t\t   const gdb_byte *string, unsigned int length,\n-\t\t   const char *encoding, int force_ellipses,\n-\t\t   const struct value_print_options *options)\n-{\n-  error (_(\"internal error - unimplemented \"\n-\t   \"function unk_lang_printstr called.\"));\n-}\n-\n static const struct op_print unk_op_print_tab[] =\n {\n   {NULL, OP_NULL, PREC_NULL, 0}\n@@ -772,7 +774,6 @@ extern const struct language_data unknown_language_data =\n   macro_expansion_no,\n   NULL,\n   &exp_descriptor_standard,\n-  unk_lang_printstr,\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",        \t    \t/* name_of_this */\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n@@ -857,6 +858,16 @@ class unknown_language : public language_defn\n   {\n     error (_(\"unimplemented unknown_language::printchar called\"));\n   }\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    error (_(\"unimplemented unknown_language::printstr called\"));\n+  }\n };\n \n /* Single instance of the unknown language class.  */\n@@ -876,7 +887,6 @@ extern const struct language_data auto_language_data =\n   macro_expansion_no,\n   NULL,\n   &exp_descriptor_standard,\n-  unk_lang_printstr,\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n@@ -961,6 +971,16 @@ class auto_language : public language_defn\n   {\n     error (_(\"unimplemented auto_language::printchar called\"));\n   }\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    error (_(\"unimplemented auto_language::printstr called\"));\n+  }\n };\n \n /* Single instance of the fake \"auto\" language.  */"
    },
    {
      "sha": "a68b6dfdcae8af6dfcb003177dc84fc511095f91",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -225,11 +225,6 @@ struct language_data\n \n     const struct exp_descriptor *la_exp_desc;\n \n-    void (*la_printstr) (struct ui_file * stream, struct type *elttype,\n-\t\t\t const gdb_byte *string, unsigned int length,\n-\t\t\t const char *encoding, int force_ellipses,\n-\t\t\t const struct value_print_options *);\n-\n     /* Print a typedef using syntax appropriate for this language.\n        TYPE is the underlying type.  NEW_SYMBOL is the symbol naming\n        the type.  STREAM is the output stream on which to print.  */\n@@ -547,6 +542,16 @@ struct language_defn : language_data\n   virtual void printchar (int ch, struct type *chtype,\n \t\t\t  struct ui_file * stream) const;\n \n+/* Print the character string STRING, printing at most LENGTH characters.\n+   Printing stops early if the number hits print_max; repeat counts\n+   are printed as appropriate.  Print ellipses at the end if we\n+   had to stop before printing LENGTH characters, or if FORCE_ELLIPSES.  */\n+\n+  virtual void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t\t const gdb_byte *string, unsigned int length,\n+\t\t\t const char *encoding, int force_ellipses,\n+\t\t\t const struct value_print_options *options) const;\n+\n protected:\n \n   /* This is the overridable part of the GET_SYMBOL_NAME_MATCHER method.\n@@ -651,8 +656,8 @@ extern enum language set_language (enum language);\n #define LA_PRINT_CHAR(ch, type, stream) \\\n   (current_language->printchar (ch, type, stream))\n #define LA_PRINT_STRING(stream, elttype, string, length, encoding, force_ellipses, options) \\\n-  (current_language->la_printstr(stream, elttype, string, length, \\\n-\t\t\t\t encoding, force_ellipses,options))\n+  (current_language->printstr (stream, elttype, string, length, \\\n+\t\t\t       encoding, force_ellipses,options))\n #define LA_EMIT_CHAR(ch, type, stream, quoter) \\\n   (current_language->emitchar (ch, type, stream, quoter))\n "
    },
    {
      "sha": "b84a9a49f8426c226e4d449e3c5e3602a740ad8d",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 75,
      "deletions": 81,
      "changes": 156,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -42,86 +42,6 @@ m2_printchar (int c, struct type *type, struct ui_file *stream)\n   fputs_filtered (\"'\", stream);\n }\n \n-/* Print the character string STRING, printing at most LENGTH characters.\n-   Printing stops early if the number hits print_max; repeat counts\n-   are printed as appropriate.  Print ellipses at the end if we\n-   had to stop before printing LENGTH characters, or if FORCE_ELLIPSES.\n-   FIXME:  This is a copy of the same function from c-exp.y.  It should\n-   be replaced with a true Modula version.  */\n-\n-static void\n-m2_printstr (struct ui_file *stream, struct type *type, const gdb_byte *string,\n-\t     unsigned int length, const char *encoding, int force_ellipses,\n-\t     const struct value_print_options *options)\n-{\n-  unsigned int i;\n-  unsigned int things_printed = 0;\n-  int in_quotes = 0;\n-  int need_comma = 0;\n-\n-  if (length == 0)\n-    {\n-      fputs_filtered (\"\\\"\\\"\", gdb_stdout);\n-      return;\n-    }\n-\n-  for (i = 0; i < length && things_printed < options->print_max; ++i)\n-    {\n-      /* Position of the character we are examining\n-         to see whether it is repeated.  */\n-      unsigned int rep1;\n-      /* Number of repetitions we have detected so far.  */\n-      unsigned int reps;\n-\n-      QUIT;\n-\n-      if (need_comma)\n-\t{\n-\t  fputs_filtered (\", \", stream);\n-\t  need_comma = 0;\n-\t}\n-\n-      rep1 = i + 1;\n-      reps = 1;\n-      while (rep1 < length && string[rep1] == string[i])\n-\t{\n-\t  ++rep1;\n-\t  ++reps;\n-\t}\n-\n-      if (reps > options->repeat_count_threshold)\n-\t{\n-\t  if (in_quotes)\n-\t    {\n-\t      fputs_filtered (\"\\\", \", stream);\n-\t      in_quotes = 0;\n-\t    }\n-\t  m2_printchar (string[i], type, stream);\n-\t  fprintf_filtered (stream, \" <repeats %u times>\", reps);\n-\t  i = rep1 - 1;\n-\t  things_printed += options->repeat_count_threshold;\n-\t  need_comma = 1;\n-\t}\n-      else\n-\t{\n-\t  if (!in_quotes)\n-\t    {\n-\t      fputs_filtered (\"\\\"\", stream);\n-\t      in_quotes = 1;\n-\t    }\n-\t  LA_EMIT_CHAR (string[i], type, stream, '\"');\n-\t  ++things_printed;\n-\t}\n-    }\n-\n-  /* Terminate the quotes if necessary.  */\n-  if (in_quotes)\n-    fputs_filtered (\"\\\"\", stream);\n-\n-  if (force_ellipses || i < length)\n-    fputs_filtered (\"...\", stream);\n-}\n-\n /* Return true if TYPE is a string.  */\n \n static bool\n@@ -309,7 +229,6 @@ extern const struct language_data m2_language_data =\n   macro_expansion_no,\n   NULL,\n   &exp_descriptor_modula2,\n-  m2_printstr,\t\t\t/* function to print string constant */\n   m2_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t                /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -433,6 +352,81 @@ class m2_language : public language_defn\n   {\n     m2_printchar (ch, chtype, stream);\n   }\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    unsigned int i;\n+    unsigned int things_printed = 0;\n+    int in_quotes = 0;\n+    int need_comma = 0;\n+\n+    if (length == 0)\n+      {\n+\tfputs_filtered (\"\\\"\\\"\", gdb_stdout);\n+\treturn;\n+      }\n+\n+    for (i = 0; i < length && things_printed < options->print_max; ++i)\n+      {\n+\t/* Position of the character we are examining\n+\t   to see whether it is repeated.  */\n+\tunsigned int rep1;\n+\t/* Number of repetitions we have detected so far.  */\n+\tunsigned int reps;\n+\n+\tQUIT;\n+\n+\tif (need_comma)\n+\t  {\n+\t    fputs_filtered (\", \", stream);\n+\t    need_comma = 0;\n+\t  }\n+\n+\trep1 = i + 1;\n+\treps = 1;\n+\twhile (rep1 < length && string[rep1] == string[i])\n+\t  {\n+\t    ++rep1;\n+\t    ++reps;\n+\t  }\n+\n+\tif (reps > options->repeat_count_threshold)\n+\t  {\n+\t    if (in_quotes)\n+\t      {\n+\t\tfputs_filtered (\"\\\", \", stream);\n+\t\tin_quotes = 0;\n+\t      }\n+\t    m2_printchar (string[i], elttype, stream);\n+\t    fprintf_filtered (stream, \" <repeats %u times>\", reps);\n+\t    i = rep1 - 1;\n+\t    things_printed += options->repeat_count_threshold;\n+\t    need_comma = 1;\n+\t  }\n+\telse\n+\t  {\n+\t    if (!in_quotes)\n+\t      {\n+\t\tfputs_filtered (\"\\\"\", stream);\n+\t\tin_quotes = 1;\n+\t      }\n+\t    LA_EMIT_CHAR (string[i], elttype, stream, '\"');\n+\t    ++things_printed;\n+\t  }\n+      }\n+\n+    /* Terminate the quotes if necessary.  */\n+    if (in_quotes)\n+      fputs_filtered (\"\\\"\", stream);\n+\n+    if (force_ellipses || i < length)\n+      fputs_filtered (\"...\", stream);\n+  }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "95c6c0a1fc53ac200b3bb90a7f23e46d3762aa7b",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -337,7 +337,6 @@ extern const struct language_data objc_language_data =\n   macro_expansion_c,\n   objc_extensions,\n   &exp_descriptor_standard,\n-  c_printstr,\t\t       /* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"self\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "765202aac0a1d98646a44dfe548ad93502d5eccc",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -1016,7 +1016,6 @@ extern const struct language_data opencl_language_data =\n   macro_expansion_c,\n   NULL,\n   &exp_descriptor_opencl,\n-  c_printstr,\t\t\t/* Function to print string constant */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */"
    },
    {
      "sha": "1c6aea90b6c7214e92a4da76a448babed4d4e35a",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 96,
      "deletions": 101,
      "changes": 197,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -202,106 +202,6 @@ pascal_printchar (int c, struct type *type, struct ui_file *stream)\n     fputs_filtered (\"'\", stream);\n }\n \n-/* Print the character string STRING, printing at most LENGTH characters.\n-   Printing stops early if the number hits print_max; repeat counts\n-   are printed as appropriate.  Print ellipses at the end if we\n-   had to stop before printing LENGTH characters, or if FORCE_ELLIPSES.  */\n-\n-void\n-pascal_printstr (struct ui_file *stream, struct type *type,\n-\t\t const gdb_byte *string, unsigned int length,\n-\t\t const char *encoding, int force_ellipses,\n-\t\t const struct value_print_options *options)\n-{\n-  enum bfd_endian byte_order = type_byte_order (type);\n-  unsigned int i;\n-  unsigned int things_printed = 0;\n-  int in_quotes = 0;\n-  int need_comma = 0;\n-  int width;\n-\n-  /* Preserve TYPE's original type, just set its LENGTH.  */\n-  check_typedef (type);\n-  width = TYPE_LENGTH (type);\n-\n-  /* If the string was not truncated due to `set print elements', and\n-     the last byte of it is a null, we don't print that, in traditional C\n-     style.  */\n-  if ((!force_ellipses) && length > 0\n-\t&& extract_unsigned_integer (string + (length - 1) * width, width,\n-\t\t\t\t     byte_order) == 0)\n-    length--;\n-\n-  if (length == 0)\n-    {\n-      fputs_filtered (\"''\", stream);\n-      return;\n-    }\n-\n-  for (i = 0; i < length && things_printed < options->print_max; ++i)\n-    {\n-      /* Position of the character we are examining\n-         to see whether it is repeated.  */\n-      unsigned int rep1;\n-      /* Number of repetitions we have detected so far.  */\n-      unsigned int reps;\n-      unsigned long int current_char;\n-\n-      QUIT;\n-\n-      if (need_comma)\n-\t{\n-\t  fputs_filtered (\", \", stream);\n-\t  need_comma = 0;\n-\t}\n-\n-      current_char = extract_unsigned_integer (string + i * width, width,\n-\t\t\t\t\t       byte_order);\n-\n-      rep1 = i + 1;\n-      reps = 1;\n-      while (rep1 < length\n-\t     && extract_unsigned_integer (string + rep1 * width, width,\n-\t\t\t\t\t  byte_order) == current_char)\n-\t{\n-\t  ++rep1;\n-\t  ++reps;\n-\t}\n-\n-      if (reps > options->repeat_count_threshold)\n-\t{\n-\t  if (in_quotes)\n-\t    {\n-\t      fputs_filtered (\"', \", stream);\n-\t      in_quotes = 0;\n-\t    }\n-\t  pascal_printchar (current_char, type, stream);\n-\t  fprintf_filtered (stream, \" %p[<repeats %u times>%p]\",\n-\t\t\t    metadata_style.style ().ptr (),\n-\t\t\t    reps, nullptr);\n-\t  i = rep1 - 1;\n-\t  things_printed += options->repeat_count_threshold;\n-\t  need_comma = 1;\n-\t}\n-      else\n-\t{\n-\t  if ((!in_quotes) && (PRINT_LITERAL_FORM (current_char)))\n-\t    {\n-\t      fputs_filtered (\"'\", stream);\n-\t      in_quotes = 1;\n-\t    }\n-\t  pascal_one_char (current_char, stream, &in_quotes);\n-\t  ++things_printed;\n-\t}\n-    }\n-\n-  /* Terminate the quotes if necessary.  */\n-  if (in_quotes)\n-    fputs_filtered (\"'\", stream);\n-\n-  if (force_ellipses || i < length)\n-    fputs_filtered (\"...\", stream);\n-}\n \f\n \n /* Table mapping opcodes into strings for printing operators\n@@ -376,7 +276,6 @@ extern const struct language_data pascal_language_data =\n   macro_expansion_no,\n   p_extensions,\n   &exp_descriptor_standard,\n-  pascal_printstr,\t\t/* Function to print string constant */\n   pascal_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -499,6 +398,102 @@ class pascal_language : public language_defn\n     pascal_printchar (ch, chtype, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    enum bfd_endian byte_order = type_byte_order (elttype);\n+    unsigned int i;\n+    unsigned int things_printed = 0;\n+    int in_quotes = 0;\n+    int need_comma = 0;\n+    int width;\n+\n+    /* Preserve ELTTYPE's original type, just set its LENGTH.  */\n+    check_typedef (elttype);\n+    width = TYPE_LENGTH (elttype);\n+\n+    /* If the string was not truncated due to `set print elements', and\n+       the last byte of it is a null, we don't print that, in traditional C\n+       style.  */\n+    if ((!force_ellipses) && length > 0\n+\t&& extract_unsigned_integer (string + (length - 1) * width, width,\n+\t\t\t\t     byte_order) == 0)\n+      length--;\n+\n+    if (length == 0)\n+      {\n+\tfputs_filtered (\"''\", stream);\n+\treturn;\n+      }\n+\n+    for (i = 0; i < length && things_printed < options->print_max; ++i)\n+      {\n+\t/* Position of the character we are examining\n+\t   to see whether it is repeated.  */\n+\tunsigned int rep1;\n+\t/* Number of repetitions we have detected so far.  */\n+\tunsigned int reps;\n+\tunsigned long int current_char;\n+\n+\tQUIT;\n+\n+\tif (need_comma)\n+\t  {\n+\t    fputs_filtered (\", \", stream);\n+\t    need_comma = 0;\n+\t  }\n+\n+\tcurrent_char = extract_unsigned_integer (string + i * width, width,\n+\t\t\t\t\t\t byte_order);\n+\n+\trep1 = i + 1;\n+\treps = 1;\n+\twhile (rep1 < length\n+\t       && extract_unsigned_integer (string + rep1 * width, width,\n+\t\t\t\t\t    byte_order) == current_char)\n+\t  {\n+\t    ++rep1;\n+\t    ++reps;\n+\t  }\n+\n+\tif (reps > options->repeat_count_threshold)\n+\t  {\n+\t    if (in_quotes)\n+\t      {\n+\t\tfputs_filtered (\"', \", stream);\n+\t\tin_quotes = 0;\n+\t      }\n+\t    pascal_printchar (current_char, elttype, stream);\n+\t    fprintf_filtered (stream, \" %p[<repeats %u times>%p]\",\n+\t\t\t      metadata_style.style ().ptr (),\n+\t\t\t      reps, nullptr);\n+\t    i = rep1 - 1;\n+\t    things_printed += options->repeat_count_threshold;\n+\t    need_comma = 1;\n+\t  }\n+\telse\n+\t  {\n+\t    if ((!in_quotes) && (PRINT_LITERAL_FORM (current_char)))\n+\t      {\n+\t\tfputs_filtered (\"'\", stream);\n+\t\tin_quotes = 1;\n+\t      }\n+\t    pascal_one_char (current_char, stream, &in_quotes);\n+\t    ++things_printed;\n+\t  }\n+      }\n+\n+    /* Terminate the quotes if necessary.  */\n+    if (in_quotes)\n+      fputs_filtered (\"'\", stream);\n+\n+    if (force_ellipses || i < length)\n+      fputs_filtered (\"...\", stream);\n+  }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "3eaad015a6e88ed1915fd64252852150e0239338",
      "filename": "gdb/p-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/p-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/p-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.h?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -56,10 +56,6 @@ extern int\n \n extern void pascal_printchar (int, struct type *, struct ui_file *);\n \n-extern void pascal_printstr (struct ui_file *, struct type *, const gdb_byte *,\n-\t\t\t     unsigned int, const char *, int,\n-\t\t\t     const struct value_print_options *);\n-\n extern struct type **const pascal_builtin_types[];\n \n /* These are in p-typeprint.c: */"
    },
    {
      "sha": "b13623fe6195b01e58bce549b1f9fa405440d63a",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d711ee67aca06c9753f09dc154eb8c75cb4f58ef/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=d711ee67aca06c9753f09dc154eb8c75cb4f58ef",
      "patch": "@@ -281,7 +281,7 @@ rust_get_trait_object_pointer (struct value *value)\n \n \f\n \n-/* la_printstr implementation for Rust.  */\n+/* language_defn::printstr implementation for Rust.  */\n \n static void\n rust_printstr (struct ui_file *stream, struct type *type,\n@@ -1953,7 +1953,6 @@ extern const struct language_data rust_language_data =\n   macro_expansion_no,\n   rust_extensions,\n   &exp_descriptor_rust,\n-  rust_printstr,\t\t/* Function to print string constant */\n   rust_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n@@ -2145,6 +2144,17 @@ class rust_language : public language_defn\n     LA_EMIT_CHAR (ch, chtype, stream, '\\'');\n     fputs_filtered (\"'\", stream);\n   }\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override\n+  {\n+    rust_printstr (stream, elttype, string, length, encoding,\n+\t\t   force_ellipses, options);\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}