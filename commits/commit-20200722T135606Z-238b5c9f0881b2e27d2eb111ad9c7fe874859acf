{
  "sha": "238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjM4YjVjOWYwODgxYjJlMjdkMmViMTExYWQ5YzdmZTg3NDg1OWFjZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-22T13:56:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:06Z"
    },
    "message": "gdb/jit: link to jit_objfile_data directly from the objfile struct\n\nRemove the use of objfile_data to associate a jit_objfile_data with an\nobjfile.  Instead, directly link to a jit_objfile_data from an objfile\nstruct.  The goal is to eliminate unnecessary abstraction.\n\nThe free_objfile_data function naturally becomes the destructor of\njit_objfile_data.  However, free_objfile_data accesses the objfile to\nwhich the data is attached, which the destructor of jit_objfile_data\ndoesn't have access to.  To work around this, add a backlink to the\nowning objfile in jit_objfile_data.  This is however temporary, it goes\naway in a subsequent patch.\n\ngdb/ChangeLog:\n2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n\n\t* jit.h: Forward-declare `struct minimal_symbol`.\n\t(struct jit_objfile_data): Migrate to here from jit.c; also add a\n\tconstructor, destructor, and an objfile* field.\n\t* jit.c (jit_objfile_data): Remove.\n\t(struct jit_objfile_data): Migrate from here to jit.h.\n\t(jit_objfile_data::~jit_objfile_data): New destructor\n\timplementation with code moved from free_objfile_data.\n\t(free_objfile_data): Delete.\n\t(get_jit_objfile_data): Update to use the jit_data field of objfile.\n\t(jit_find_objf_with_entry_addr): Ditto.\n\t(jit_inferior_exit_hook): Ditto.\n\t(_initialize_jit): Remove the call to\n\tregister_objfile_data_with_cleanup.\n\t* objfiles.h (struct objfile) <jit_data>: New field.",
    "tree": {
      "sha": "4a6c48835685490c23f61d568798cf575ed39acc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a6c48835685490c23f61d568798cf575ed39acc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe053b9e85378b4df1397684266b2cddcce8123b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe053b9e85378b4df1397684266b2cddcce8123b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe053b9e85378b4df1397684266b2cddcce8123b"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 72,
    "deletions": 61
  },
  "files": [
    {
      "sha": "ed90071d2b58f43d7904d1d48e11e5b6a24d4d1c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "patch": "@@ -1,3 +1,20 @@\n+2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.h: Forward-declare `struct minimal_symbol`.\n+\t(struct jit_objfile_data): Migrate to here from jit.c; also add a\n+\tconstructor, destructor, and an objfile* field.\n+\t* jit.c (jit_objfile_data): Remove.\n+\t(struct jit_objfile_data): Migrate from here to jit.h.\n+\t(jit_objfile_data::~jit_objfile_data): New destructor\n+\timplementation with code moved from free_objfile_data.\n+\t(free_objfile_data): Delete.\n+\t(get_jit_objfile_data): Update to use the jit_data field of objfile.\n+\t(jit_find_objf_with_entry_addr): Ditto.\n+\t(jit_inferior_exit_hook): Ditto.\n+\t(_initialize_jit): Remove the call to\n+\tregister_objfile_data_with_cleanup.\n+\t* objfiles.h (struct objfile) <jit_data>: New field.\n+\n 2020-07-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* jit.h: Forward-declare `struct objfile`."
    },
    {
      "sha": "39e364101e71a1a527e99420c545b7bffefad971",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 22,
      "deletions": 61,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "patch": "@@ -45,8 +45,6 @@\n \n static std::string jit_reader_dir;\n \n-static const struct objfile_data *jit_objfile_data;\n-\n static const char *const jit_break_name = \"__jit_debug_register_code\";\n \n static const char *const jit_descriptor_name = \"__jit_debug_descriptor\";\n@@ -265,41 +263,36 @@ struct jit_program_space_data\n \n static program_space_key<jit_program_space_data> jit_program_space_key;\n \n-/* Per-objfile structure recording the addresses in the program space.\n-   This object serves two purposes: for ordinary objfiles, it may\n-   cache some symbols related to the JIT interface; and for\n-   JIT-created objfiles, it holds some information about the\n-   jit_code_entry.  */\n+/* Destructor for jit_objfile_data.  */\n \n-struct jit_objfile_data\n+jit_objfile_data::~jit_objfile_data ()\n {\n-  /* Symbol for __jit_debug_register_code.  */\n-  struct minimal_symbol *register_code;\n-\n-  /* Symbol for __jit_debug_descriptor.  */\n-  struct minimal_symbol *descriptor;\n+  /* Free the data allocated in the jit_program_space_data slot.  */\n+  if (this->register_code != NULL)\n+    {\n+      struct jit_program_space_data *ps_data;\n \n-  /* Address of struct jit_code_entry in this objfile.  This is only\n-     non-zero for objfiles that represent code created by the JIT.  */\n-  CORE_ADDR addr;\n-};\n+      ps_data = jit_program_space_key.get (this->objfile->pspace);\n+      if (ps_data != NULL && ps_data->objfile == this->objfile)\n+\t{\n+\t  ps_data->objfile = NULL;\n+\t  if (ps_data->jit_breakpoint != NULL)\n+\t    delete_breakpoint (ps_data->jit_breakpoint);\n+\t  ps_data->cached_code_address = 0;\n+\t}\n+    }\n+}\n \n /* Fetch the jit_objfile_data associated with OBJF.  If no data exists\n    yet, make a new structure and attach it.  */\n \n static struct jit_objfile_data *\n get_jit_objfile_data (struct objfile *objf)\n {\n-  struct jit_objfile_data *objf_data;\n+  if (objf->jit_data == nullptr)\n+    objf->jit_data.reset (new jit_objfile_data (objf));\n \n-  objf_data = (struct jit_objfile_data *) objfile_data (objf, jit_objfile_data);\n-  if (objf_data == NULL)\n-    {\n-      objf_data = XCNEW (struct jit_objfile_data);\n-      set_objfile_data (objf, jit_objfile_data, objf_data);\n-    }\n-\n-  return objf_data;\n+  return objf->jit_data.get ();\n }\n \n /* Remember OBJFILE has been created for struct jit_code_entry located\n@@ -915,13 +908,10 @@ jit_find_objf_with_entry_addr (CORE_ADDR entry_addr)\n {\n   for (objfile *objf : current_program_space->objfiles ())\n     {\n-      struct jit_objfile_data *objf_data;\n-\n-      objf_data\n-\t= (struct jit_objfile_data *) objfile_data (objf, jit_objfile_data);\n-      if (objf_data != NULL && objf_data->addr == entry_addr)\n+      if (objf->jit_data != nullptr && objf->jit_data->addr == entry_addr)\n \treturn objf;\n     }\n+\n   return NULL;\n }\n \n@@ -1325,10 +1315,7 @@ jit_inferior_exit_hook (struct inferior *inf)\n {\n   for (objfile *objf : current_program_space->objfiles_safe ())\n     {\n-      struct jit_objfile_data *objf_data\n-\t= (struct jit_objfile_data *) objfile_data (objf, jit_objfile_data);\n-\n-      if (objf_data != NULL && objf_data->addr != 0)\n+      if (objf->jit_data != nullptr && objf->jit_data->addr != 0)\n \tobjf->unlink ();\n     }\n }\n@@ -1371,30 +1358,6 @@ jit_event_handler (gdbarch *gdbarch, objfile *jiter)\n     }\n }\n \n-/* Called to free the data allocated to the jit_program_space_data slot.  */\n-\n-static void\n-free_objfile_data (struct objfile *objfile, void *data)\n-{\n-  struct jit_objfile_data *objf_data = (struct jit_objfile_data *) data;\n-\n-  if (objf_data->register_code != NULL)\n-    {\n-      struct jit_program_space_data *ps_data;\n-\n-      ps_data = jit_program_space_key.get (objfile->pspace);\n-      if (ps_data != NULL && ps_data->objfile == objfile)\n-\t{\n-\t  ps_data->objfile = NULL;\n-\t  if (ps_data->jit_breakpoint != NULL)\n-\t    delete_breakpoint (ps_data->jit_breakpoint);\n-\t  ps_data->cached_code_address = 0;\n-\t}\n-    }\n-\n-  xfree (data);\n-}\n-\n /* Initialize the jit_gdbarch_data slot with an instance of struct\n    jit_gdbarch_data_type */\n \n@@ -1427,8 +1390,6 @@ _initialize_jit ()\n   gdb::observers::inferior_exit.attach (jit_inferior_exit_hook);\n   gdb::observers::breakpoint_deleted.attach (jit_breakpoint_deleted);\n \n-  jit_objfile_data =\n-    register_objfile_data_with_cleanup (NULL, free_objfile_data);\n   jit_gdbarch_data = gdbarch_data_register_pre_init (jit_gdbarch_data_init);\n   if (is_dl_available ())\n     {"
    },
    {
      "sha": "6109216639142cc5e6ba4ac8feacd8c30f85abd5",
      "filename": "gdb/jit.h",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/jit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/jit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.h?ref=238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "patch": "@@ -21,6 +21,7 @@\n #define JIT_H\n \n struct objfile;\n+struct minimal_symbol;\n \n /* When the JIT breakpoint fires, the inferior wants us to take one of\n    these actions.  These values are used by the inferior, so the\n@@ -66,6 +67,34 @@ struct jit_descriptor\n   CORE_ADDR first_entry;\n };\n \n+/* Per-objfile structure recording the addresses in the program space.\n+   This object serves two purposes: for ordinary objfiles, it may\n+   cache some symbols related to the JIT interface; and for\n+   JIT-created objfiles, it holds some information about the\n+   jit_code_entry.  */\n+\n+struct jit_objfile_data\n+{\n+  jit_objfile_data (struct objfile *objfile)\n+    : objfile (objfile)\n+  {}\n+\n+  ~jit_objfile_data ();\n+\n+  /* Back-link to the objfile. */\n+  struct objfile *objfile;\n+\n+  /* Symbol for __jit_debug_register_code.  */\n+  minimal_symbol *register_code = nullptr;\n+\n+  /* Symbol for __jit_debug_descriptor.  */\n+  minimal_symbol *descriptor = nullptr;\n+\n+  /* Address of struct jit_code_entry in this objfile.  This is only\n+     non-zero for objfiles that represent code created by the JIT.  */\n+  CORE_ADDR addr = 0;\n+};\n+\n /* Looks for the descriptor and registration symbols and breakpoints\n    the registration function.  If it finds both, it registers all the\n    already JITed code.  If it has already found the symbols, then it"
    },
    {
      "sha": "b21b42663607bb46bdd073831ee8ac205d085f06",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/238b5c9f0881b2e27d2eb111ad9c7fe874859acf/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=238b5c9f0881b2e27d2eb111ad9c7fe874859acf",
      "patch": "@@ -36,6 +36,7 @@\n #include \"bcache.h\"\n #include \"gdbarch.h\"\n #include \"gdbsupport/refcounted-object.h\"\n+#include \"jit.h\"\n \n struct htab;\n struct objfile_data;\n@@ -697,6 +698,9 @@ struct objfile\n      store these here rather than in struct block.  Static links must be\n      allocated on the objfile's obstack.  */\n   htab_up static_links;\n+\n+  /* JIT-related data for this objfile.  */\n+  std::unique_ptr<jit_objfile_data> jit_data = nullptr;\n };\n \n /* A deleter for objfile.  */"
    }
  ]
}