{
  "sha": "1ab8280d7dbe01f51929d221621d38450f31895d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWFiODI4MGQ3ZGJlMDFmNTE5MjlkMjIxNjIxZDM4NDUwZjMxODk1ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T00:53:34Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T00:53:34Z"
    },
    "message": "Clean up arguments to evaluate_subexp_do_call\n\nI noticed hat evaluate_subexp_do_call takes an array of arguments and\na count -- but, unlike the usual convention, the count does not\ninclude the first element.\n\nThis patch changes this function to match call_function_by_hand --\npassing the callee separately, and using an array_view for the\narguments.  This makes it simpler to understand.\n\nRegression tested on x86-64 Fedora 28.\n\ngdb/ChangeLog\n2020-12-15  Tom Tromey  <tom@tromey.com>\n\n\t* f-lang.c (evaluate_subexp_f): Update.\n\t* expression.h (evaluate_subexp_do_call): Update.\n\t* eval.c (evaluate_subexp_do_call): Add callee parameter.  Replace\n\tnargs, argvec with array_view.\n\t(evaluate_funcall): Update.",
    "tree": {
      "sha": "6ae791784db83a48b4cf9877e4f2a1ee481d3c92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ae791784db83a48b4cf9877e4f2a1ee481d3c92"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ab8280d7dbe01f51929d221621d38450f31895d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ab8280d7dbe01f51929d221621d38450f31895d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ab8280d7dbe01f51929d221621d38450f31895d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ab8280d7dbe01f51929d221621d38450f31895d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf608cc40c523537046efde52e9d68303e8bde00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf608cc40c523537046efde52e9d68303e8bde00",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf608cc40c523537046efde52e9d68303e8bde00"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 28,
    "deletions": 19
  },
  "files": [
    {
      "sha": "464054c83cff7ff82bd0faf76dfc79f418d7e1b3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1ab8280d7dbe01f51929d221621d38450f31895d",
      "patch": "@@ -1,3 +1,11 @@\n+2020-12-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* f-lang.c (evaluate_subexp_f): Update.\n+\t* expression.h (evaluate_subexp_do_call): Update.\n+\t* eval.c (evaluate_subexp_do_call): Add callee parameter.  Replace\n+\tnargs, argvec with array_view.\n+\t(evaluate_funcall): Update.\n+\n 2020-12-15  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (num_component_specs): Remove."
    },
    {
      "sha": "6066a3204142ae0d42c5ba4515664cc74d7481c6",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=1ab8280d7dbe01f51929d221621d38450f31895d",
      "patch": "@@ -692,19 +692,20 @@ eval_skip_value (expression *exp)\n \n value *\n evaluate_subexp_do_call (expression *exp, enum noside noside,\n-\t\t\t int nargs, value **argvec,\n+\t\t\t value *callee,\n+\t\t\t gdb::array_view<value *> argvec,\n \t\t\t const char *function_name,\n \t\t\t type *default_return_type)\n {\n-  if (argvec[0] == NULL)\n+  if (callee == NULL)\n     error (_(\"Cannot evaluate function -- may be inlined\"));\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     {\n       /* If the return type doesn't look like a function type,\n \t call an error.  This can happen if somebody tries to turn\n \t a variable into a function call.  */\n \n-      type *ftype = value_type (argvec[0]);\n+      type *ftype = value_type (callee);\n \n       if (ftype->code () == TYPE_CODE_INTERNAL_FUNCTION)\n \t{\n@@ -716,10 +717,7 @@ evaluate_subexp_do_call (expression *exp, enum noside noside,\n \t}\n       else if (ftype->code () == TYPE_CODE_XMETHOD)\n \t{\n-\t  type *return_type\n-\t    = result_type_of_xmethod (argvec[0],\n-\t\t\t\t      gdb::make_array_view (argvec + 1,\n-\t\t\t\t\t\t\t    nargs));\n+\t  type *return_type = result_type_of_xmethod (callee, argvec);\n \n \t  if (return_type == NULL)\n \t    error (_(\"Xmethod is missing return type.\"));\n@@ -730,7 +728,7 @@ evaluate_subexp_do_call (expression *exp, enum noside noside,\n \t{\n \t  if (ftype->is_gnu_ifunc ())\n \t    {\n-\t      CORE_ADDR address = value_address (argvec[0]);\n+\t      CORE_ADDR address = value_address (callee);\n \t      type *resolved_type = find_gnu_ifunc_target_type (address);\n \n \t      if (resolved_type != NULL)\n@@ -751,16 +749,15 @@ evaluate_subexp_do_call (expression *exp, enum noside noside,\n \terror (_(\"Expression of type other than \"\n \t\t \"\\\"Function returning ...\\\" used as function\"));\n     }\n-  switch (value_type (argvec[0])->code ())\n+  switch (value_type (callee)->code ())\n     {\n     case TYPE_CODE_INTERNAL_FUNCTION:\n       return call_internal_function (exp->gdbarch, exp->language_defn,\n-\t\t\t\t     argvec[0], nargs, argvec + 1);\n+\t\t\t\t     callee, argvec.size (), argvec.data ());\n     case TYPE_CODE_XMETHOD:\n-      return call_xmethod (argvec[0], gdb::make_array_view (argvec + 1, nargs));\n+      return call_xmethod (callee, argvec);\n     default:\n-      return call_function_by_hand (argvec[0], default_return_type,\n-\t\t\t\t    gdb::make_array_view (argvec + 1, nargs));\n+      return call_function_by_hand (callee, default_return_type, argvec);\n     }\n }\n \n@@ -1165,7 +1162,8 @@ evaluate_funcall (type *expect_type, expression *exp, int *pos,\n       /* Nothing to be done; argvec already correctly set up.  */\n     }\n \n-  return evaluate_subexp_do_call (exp, noside, nargs, argvec,\n+  return evaluate_subexp_do_call (exp, noside, argvec[0],\n+\t\t\t\t  gdb::make_array_view (argvec + 1, nargs),\n \t\t\t\t  var_func_name, expect_type);\n }\n "
    },
    {
      "sha": "0c4dc7bae1750471475c6942ef920faedc2c970d",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=1ab8280d7dbe01f51929d221621d38450f31895d",
      "patch": "@@ -153,15 +153,16 @@ enum noside\n extern struct value *evaluate_subexp_standard\n   (struct type *, struct expression *, int *, enum noside);\n \n-/* Evaluate a function call.  The function to be called is in ARGVEC[0] and\n-   the arguments passed to the function are in ARGVEC[1..NARGS].\n+/* Evaluate a function call.  The function to be called is in CALLEE and\n+   the arguments passed to the function are in ARGVEC.\n    FUNCTION_NAME is the name of the function, if known.\n    DEFAULT_RETURN_TYPE is used as the function's return type if the return\n    type is unknown.  */\n \n extern struct value *evaluate_subexp_do_call (expression *exp,\n \t\t\t\t\t      enum noside noside,\n-\t\t\t\t\t      int nargs, value **argvec,\n+\t\t\t\t\t      value *callee,\n+\t\t\t\t\t      gdb::array_view<value *> argvec,\n \t\t\t\t\t      const char *function_name,\n \t\t\t\t\t      type *default_return_type);\n "
    },
    {
      "sha": "28a66fdde94fe4bef8638da14db4e50234fe459f",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ab8280d7dbe01f51929d221621d38450f31895d/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=1ab8280d7dbe01f51929d221621d38450f31895d",
      "patch": "@@ -947,8 +947,10 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \t    argvec[tem] = 0;\t/* signal end of arglist */\n \t    if (noside == EVAL_SKIP)\n \t      return eval_skip_value (exp);\n-\t    return evaluate_subexp_do_call (exp, noside, nargs, argvec, NULL,\n-\t\t\t\t\t    expect_type);\n+\t    return evaluate_subexp_do_call (exp, noside, argvec[0],\n+\t\t\t\t\t    gdb::make_array_view (argvec + 1,\n+\t\t\t\t\t\t\t\t  nargs),\n+\t\t\t\t\t    NULL, expect_type);\n \t  }\n \n \tdefault:"
    }
  ]
}