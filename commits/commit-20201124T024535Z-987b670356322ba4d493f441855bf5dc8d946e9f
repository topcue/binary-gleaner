{
  "sha": "987b670356322ba4d493f441855bf5dc8d946e9f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTg3YjY3MDM1NjMyMmJhNGQ0OTNmNDQxODU1YmY1ZGM4ZDk0NmU5Zg==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:45:35Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:45:35Z"
    },
    "message": "change and rename gmp_string_asprintf to return an std::string\n\nThis was suggested by Simon during a code review of this package upstream.\nThe upside is that this makes the function's API more natural and C++.\nThe downside is an extra malloc, which might be the reason why we went\nfor using a unique_xmalloc_ptr in the first place. Since this function\nis not expected to be called frequently, the API improvement might be\nworth the performance impact.\n\ngdb/ChangeLog:\n\n        * gmp-utils.h (gmp_string_printf): Rename from gmp_string_asprintf.\n        Change return type to std::string. Update all callers.\n        * gmp-utils.c (gmp_string_printf): Likewise.",
    "tree": {
      "sha": "50b180ece0ac5d200979b6edefa31fff29cb8adb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/50b180ece0ac5d200979b6edefa31fff29cb8adb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/987b670356322ba4d493f441855bf5dc8d946e9f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/987b670356322ba4d493f441855bf5dc8d946e9f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/987b670356322ba4d493f441855bf5dc8d946e9f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/987b670356322ba4d493f441855bf5dc8d946e9f/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4fbb7ccebe1fdcbae762e8fed6af7a810c81f85c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4fbb7ccebe1fdcbae762e8fed6af7a810c81f85c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4fbb7ccebe1fdcbae762e8fed6af7a810c81f85c"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 27,
    "deletions": 17
  },
  "files": [
    {
      "sha": "2cb64da1fdd335505a5006313dea177f2aea800e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gmp-utils.h (gmp_string_printf): Rename from gmp_string_asprintf.\n+\tChange return type to std::string. Update all callers.\n+\t* gmp-utils.c (gmp_string_printf): Likewise.\n+\n 2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n \n \t* unittests/gmp-utils-selftests.c (write_fp_test): Use mpq_set_si"
    },
    {
      "sha": "3879eebd894f909815a0807dcb5c462ceb55b067",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -4927,7 +4927,7 @@ static void\n print_fixed_point_type_info (struct type *type, int spaces)\n {\n   printfi_filtered (spaces + 2, \"scaling factor: %s\\n\",\n-\t\t    fixed_point_scaling_factor (type).str ().get ());\n+\t\t    fixed_point_scaling_factor (type).str ().c_str ());\n }\n \n static struct obstack dont_print_type_obstack;"
    },
    {
      "sha": "44fe156d32dcfdafd5c1494b9cd80622c7e120fd",
      "filename": "gdb/gmp-utils.c",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gmp-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gmp-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gmp-utils.c?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -19,17 +19,24 @@\n \n /* See gmp-utils.h.  */\n \n-gdb::unique_xmalloc_ptr<char>\n-gmp_string_asprintf (const char *fmt, ...)\n+std::string\n+gmp_string_printf (const char *fmt, ...)\n {\n   va_list vp;\n-  char *buf;\n \n   va_start (vp, fmt);\n-  gmp_vasprintf (&buf, fmt, vp);\n+  int size = gmp_vsnprintf (NULL, 0, fmt, vp);\n   va_end (vp);\n \n-  return gdb::unique_xmalloc_ptr<char> (buf);\n+  std::string str (size, '\\0');\n+\n+  /* C++11 and later guarantee std::string uses contiguous memory and\n+     always includes the terminating '\\0'.  */\n+  va_start (vp, fmt);\n+  gmp_vsprintf (&str[0], fmt, vp);\n+  va_end (vp);\n+\n+  return str;\n }\n \n /* See gmp-utils.h.  */"
    },
    {
      "sha": "59965e504c54cc5c6aad529450c206006eea2770",
      "filename": "gdb/gmp-utils.h",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gmp-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/gmp-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gmp-utils.h?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -29,9 +29,9 @@\n #include <gmp.h>\n #include \"gdbsupport/traits.h\"\n \n-/* Same as gmp_asprintf, but returning a convenient wrapper type.  */\n+/* Same as gmp_asprintf, but returning an std::string.  */\n \n-gdb::unique_xmalloc_ptr<char> gmp_string_asprintf (const char *fmt, ...);\n+std::string gmp_string_printf (const char *fmt, ...);\n \n /* A class to make it easier to use GMP's mpz_t values within GDB.  */\n \n@@ -110,8 +110,7 @@ struct gdb_mpz\n \t      bool unsigned_p) const;\n \n   /* Return a string containing VAL.  */\n-  gdb::unique_xmalloc_ptr<char> str () const\n-  { return gmp_string_asprintf (\"%Zd\", val); }\n+  std::string str () const { return gmp_string_printf (\"%Zd\", val); }\n \n   /* The destructor.  */\n   ~gdb_mpz () { mpz_clear (val); }\n@@ -163,8 +162,7 @@ struct gdb_mpq\n   }\n \n   /* Return a string representing VAL as \"<numerator> / <denominator>\".  */\n-  gdb::unique_xmalloc_ptr<char> str () const\n-  { return gmp_string_asprintf (\"%Qd\", val); }\n+  std::string str () const { return gmp_string_printf (\"%Qd\", val); }\n \n   /* Return VAL rounded to the nearest integer.  */\n   gdb_mpz get_rounded () const;"
    },
    {
      "sha": "0dd3b1c482143a49c8a54c788049d4892b7487c3",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -667,11 +667,10 @@ print_type_scalar (struct type *type, LONGEST val, struct ui_file *stream)\n void\n print_type_fixed_point (struct type *type, struct ui_file *stream)\n {\n-  gdb::unique_xmalloc_ptr<char> small_img\n-    = fixed_point_scaling_factor (type).str ();\n+  std::string small_img = fixed_point_scaling_factor (type).str ();\n \n   fprintf_filtered (stream, \"%s-byte fixed point (small = %s)\",\n-\t\t    pulongest (TYPE_LENGTH (type)), small_img.get ());\n+\t\t    pulongest (TYPE_LENGTH (type)), small_img.c_str ());\n }\n \n /* Dump details of a type specified either directly or indirectly."
    },
    {
      "sha": "b102ff4b5717b28dea65971c1f66e629374ba827",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/987b670356322ba4d493f441855bf5dc8d946e9f/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=987b670356322ba4d493f441855bf5dc8d946e9f",
      "patch": "@@ -814,8 +814,8 @@ generic_val_print_fixed_point (struct value *val, struct ui_file *stream,\n \t\t\t  fixed_point_scaling_factor (type));\n \n       const char *fmt = TYPE_LENGTH (type) < 4 ? \"%.11Fg\" : \"%.17Fg\";\n-      gdb::unique_xmalloc_ptr<char> str = gmp_string_asprintf (fmt, f.val);\n-      fprintf_filtered (stream, \"%s\", str.get ());\n+      std::string str = gmp_string_printf (fmt, f.val);\n+      fprintf_filtered (stream, \"%s\", str.c_str ());\n     }\n }\n "
    }
  ]
}