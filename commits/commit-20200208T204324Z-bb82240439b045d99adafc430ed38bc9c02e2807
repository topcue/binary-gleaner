{
  "sha": "bb82240439b045d99adafc430ed38bc9c02e2807",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmI4MjI0MDQzOWIwNDVkOTlhZGFmYzQzMGVkMzhiYzljMDJlMjgwNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Change file_full_name and file_file_name methods\n\nThis changes file_full_name and file_file_name methods to be methods\non line_header.  This seems more clear to me.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (struct line_header) <file_full_name,\n\tfile_file_name>: Declare methods.\n\t(dw2_get_file_names_reader): Update.\n\t(file_file_name): Now a method.\n\t(file_full_name): Likewise.\n\t(macro_start_file): Update.\n\nChange-Id: I50d3e91665a9637c732e1e8d8e4263764c766d9c",
    "tree": {
      "sha": "de05d0767f60dc8e25b078156c5425801c291655",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/de05d0767f60dc8e25b078156c5425801c291655"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb82240439b045d99adafc430ed38bc9c02e2807",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb82240439b045d99adafc430ed38bc9c02e2807",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb82240439b045d99adafc430ed38bc9c02e2807",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb82240439b045d99adafc430ed38bc9c02e2807/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "009b64fc98a3bad39d19bbdca83a223dce3d87d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/009b64fc98a3bad39d19bbdca83a223dce3d87d4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/009b64fc98a3bad39d19bbdca83a223dce3d87d4"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 33,
    "deletions": 23
  },
  "files": [
    {
      "sha": "a25a6719dffaaf88dc29b9dca3c3a98bbbfa28ec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb82240439b045d99adafc430ed38bc9c02e2807/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb82240439b045d99adafc430ed38bc9c02e2807/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bb82240439b045d99adafc430ed38bc9c02e2807",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (struct line_header) <file_full_name,\n+\tfile_file_name>: Declare methods.\n+\t(dw2_get_file_names_reader): Update.\n+\t(file_file_name): Now a method.\n+\t(file_full_name): Likewise.\n+\t(macro_start_file): Update.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf_always_disassemble)"
    },
    {
      "sha": "b0d10d0bf524ea16e01d989c8ae64e148ee314ff",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 23,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb82240439b045d99adafc430ed38bc9c02e2807/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb82240439b045d99adafc430ed38bc9c02e2807/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=bb82240439b045d99adafc430ed38bc9c02e2807",
      "patch": "@@ -1074,6 +1074,18 @@ struct line_header\n      header.  These point into dwarf2_per_objfile->line_buffer.  */\n   const gdb_byte *statement_program_start {}, *statement_program_end {};\n \n+  /* Return the full name of file number I in this object's file name\n+     table.  Use COMP_DIR as the name of the current directory of the\n+     compilation.  The result is allocated using xmalloc; the caller\n+     is responsible for freeing it.  */\n+  char *file_full_name (int file, const char *comp_dir);\n+\n+  /* Return file name relative to the compilation directory of file\n+     number I in this object's file name table.  The result is\n+     allocated using xmalloc; the caller is responsible for freeing\n+     it.  */\n+  char *file_file_name (int file);\n+\n  private:\n   /* The include_directories table.  Note these are observing\n      pointers.  The memory is owned by debug_line_buffer.  */\n@@ -1855,9 +1867,6 @@ struct file_and_directory\n static file_and_directory find_file_and_directory (struct die_info *die,\n \t\t\t\t\t\t   struct dwarf2_cu *cu);\n \n-static char *file_full_name (int file, struct line_header *lh,\n-\t\t\t     const char *comp_dir);\n-\n /* Expected enum dwarf_unit_type for read_comp_unit_head.  */\n enum class rcuh_kind { COMPILE, TYPE };\n \n@@ -3396,7 +3405,7 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n   if (offset != 0)\n     qfn->file_names[0] = xstrdup (fnd.name);\n   for (int i = 0; i < lh->file_names_size (); ++i)\n-    qfn->file_names[i + offset] = file_full_name (i + 1, lh.get (), fnd.comp_dir);\n+    qfn->file_names[i + offset] = lh->file_full_name (i + 1, fnd.comp_dir);\n   qfn->real_names = NULL;\n \n   lh_cu->v.quick->file_names = qfn;\n@@ -23745,22 +23754,18 @@ dwarf_alloc_die (struct dwarf2_cu *cu, int num_attrs)\n \f\n /* Macro support.  */\n \n-/* Return file name relative to the compilation directory of file number I in\n-   *LH's file name table.  The result is allocated using xmalloc; the caller is\n-   responsible for freeing it.  */\n-\n-static char *\n-file_file_name (int file, struct line_header *lh)\n+char *\n+line_header::file_file_name (int file)\n {\n   /* Is the file number a valid index into the line header's file name\n      table?  Remember that file numbers start with one, not zero.  */\n-  if (lh->is_valid_file_index (file))\n+  if (is_valid_file_index (file))\n     {\n-      const file_entry *fe = lh->file_name_at (file);\n+      const file_entry *fe = file_name_at (file);\n \n       if (!IS_ABSOLUTE_PATH (fe->name))\n \t{\n-\t  const char *dir = fe->include_dir (lh);\n+\t  const char *dir = fe->include_dir (this);\n \t  if (dir != NULL)\n \t    return concat (dir, SLASH_STRING, fe->name, (char *) NULL);\n \t}\n@@ -23783,26 +23788,22 @@ file_file_name (int file, struct line_header *lh)\n     }\n }\n \n-/* Return the full name of file number I in *LH's file name table.\n-   Use COMP_DIR as the name of the current directory of the\n-   compilation.  The result is allocated using xmalloc; the caller is\n-   responsible for freeing it.  */\n-static char *\n-file_full_name (int file, struct line_header *lh, const char *comp_dir)\n+char *\n+line_header::file_full_name (int file, const char *comp_dir)\n {\n   /* Is the file number a valid index into the line header's file name\n      table?  Remember that file numbers start with one, not zero.  */\n-  if (lh->is_valid_file_index (file))\n+  if (is_valid_file_index (file))\n     {\n-      char *relative = file_file_name (file, lh);\n+      char *relative = file_file_name (file);\n \n       if (IS_ABSOLUTE_PATH (relative) || comp_dir == NULL)\n \treturn relative;\n       return reconcat (relative, comp_dir, SLASH_STRING,\n \t\t       relative, (char *) NULL);\n     }\n   else\n-    return file_file_name (file, lh);\n+    return file_file_name (file);\n }\n \n \n@@ -23813,7 +23814,7 @@ macro_start_file (struct dwarf2_cu *cu,\n                   struct line_header *lh)\n {\n   /* File name relative to the compilation directory of this source file.  */\n-  char *file_name = file_file_name (file, lh);\n+  char *file_name = lh->file_file_name (file);\n \n   if (! current_file)\n     {"
    }
  ]
}