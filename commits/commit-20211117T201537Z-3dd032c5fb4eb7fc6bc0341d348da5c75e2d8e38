{
  "sha": "3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
  "node_id": "C_kwDOANOeidoAKDNkZDAzMmM1ZmI0ZWI3ZmM2YmMwMzQxZDM0OGRhNWM3NWUyZDhlMzg",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:15:13Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:15:37Z"
    },
    "message": "aarch64: [SME] Add SME mode selection and state access instructions\n\nThis patch is adding new SME mode selection and state access instructions:\n* Add SMSTART and SMSTOP instructions.\n* Add SVCR system register.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sme_sm_za): New parser.\n\t(parse_operands): New parser.\n\t* testsuite/gas/aarch64/sme-8-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-8-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-8-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-8.d: New test.\n\t* testsuite/gas/aarch64/sme-8.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operand\n\tAARCH64_OPND_SME_SM_ZA.\n\t(enum aarch64_insn_class): New instruction classes\n\tsme_start and sme_stop.\n\nopcodes/ChangeLog:\n\n\t* aarch64-asm.c (aarch64_ins_pstatefield): New inserter.\n\t(aarch64_ins_sme_sm_za): New inserter.\n\t* aarch64-dis.c (aarch64_ext_imm): New extractor.\n\t(aarch64_ext_pstatefield): New extractor.\n\t(aarch64_ext_sme_sm_za): New extractor.\n\t* aarch64-opc.c (operand_general_constraint_met_p):\n\tNew pstatefield value for SME instructions.\n\t(aarch64_print_operand): Printout for OPND_SME_SM_ZA.\n\t(SR_SME): New register SVCR.\n\t* aarch64-opc.h (F_REG_IN_CRM): New register endcoding.\n\t* aarch64-opc.h (F_IMM_IN_CRM): New immediate endcoding.\n\t(PSTATE_ENCODE_CRM): Encode CRm field.\n\t(PSTATE_DECODE_CRM): Decode CRm field.\n\t(PSTATE_ENCODE_CRM_IMM): Encode CRm immediate field.\n\t(PSTATE_DECODE_CRM_IMM): Decode CRm immediate field.\n\t(PSTATE_ENCODE_CRM_AND_IMM): Encode CRm and immediate\n\tfield.\n\t* aarch64-tbl.h (struct aarch64_opcode): New SMSTART\n\tand SMSTOP instructions.\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "f8ceee98b93206d0fc7b4180e361dbfa461800b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8ceee98b93206d0fc7b4180e361dbfa461800b7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01a4d0822025084609380fb989d43bda0667db72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01a4d0822025084609380fb989d43bda0667db72",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01a4d0822025084609380fb989d43bda0667db72"
    }
  ],
  "stats": {
    "total": 3288,
    "additions": 1766,
    "deletions": 1522
  },
  "files": [
    {
      "sha": "24cfabfd326d3860a48b687bced02b9ccb7bd7da",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 48,
      "deletions": 8,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -4629,6 +4629,32 @@ parse_sme_za_array (char **str, int *imm)\n   return regno;\n }\n \n+/* Parse streaming mode operand for SMSTART and SMSTOP.\n+\n+   {SM | ZA}\n+\n+   Function returns 's' if SM or 'z' if ZM is parsed. Otherwise PARSE_FAIL.\n+*/\n+static int\n+parse_sme_sm_za (char **str)\n+{\n+  char *p, *q;\n+\n+  p = q = *str;\n+  while (ISALPHA (*q))\n+    q++;\n+\n+  if ((q - p != 2)\n+      || (strncasecmp (\"sm\", p, 2) != 0 && strncasecmp (\"za\", p, 2) != 0))\n+    {\n+      set_syntax_error (_(\"expected SM or ZA operand\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  *str = q;\n+  return TOLOWER (p[0]);\n+}\n+\n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n \n@@ -7032,6 +7058,16 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  /* No qualifier.  */\n \t  break;\n \n+\tcase AARCH64_OPND_SME_SM_ZA:\n+\t  /* { SM | ZA }  */\n+\t  if ((val = parse_sme_sm_za (&str)) == PARSE_FAIL)\n+\t    {\n+\t      set_syntax_error (_(\"unknown or missing PSTATE field name\"));\n+\t      goto failure;\n+\t    }\n+\t  info->reg.regno = val;\n+\t  break;\n+\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x16:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x32:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4xVL:\n@@ -7221,14 +7257,18 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  }\n \n \tcase AARCH64_OPND_PSTATEFIELD:\n-\t  if ((val = parse_sys_reg (&str, aarch64_pstatefield_hsh, 0, 1, NULL))\n-\t      == PARSE_FAIL)\n-\t    {\n-\t      set_syntax_error (_(\"unknown or missing PSTATE field name\"));\n-\t      goto failure;\n-\t    }\n-\t  inst.base.operands[i].pstatefield = val;\n-\t  break;\n+\t  {\n+\t    uint32_t sysreg_flags;\n+\t    if ((val = parse_sys_reg (&str, aarch64_pstatefield_hsh, 0, 1,\n+\t\t\t\t      &sysreg_flags)) == PARSE_FAIL)\n+\t      {\n+\t        set_syntax_error (_(\"unknown or missing PSTATE field name\"));\n+\t        goto failure;\n+\t      }\n+\t    inst.base.operands[i].pstatefield = val;\n+\t    inst.base.operands[i].sysreg.flags = sysreg_flags;\n+\t    break;\n+\t  }\n \n \tcase AARCH64_OPND_SYSREG_IC:\n \t  inst.base.operands[i].sysins_op ="
    },
    {
      "sha": "1b3c3bc4731c476a4d841d3c508802768f782542",
      "filename": "gas/testsuite/gas/aarch64/sme-8-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-8-illegal.d?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-8-illegal.s\n+#error_output: sme-8-illegal.l"
    },
    {
      "sha": "ee9f76f3b9c2784d4a645d14c1ceb17fa7aef3da",
      "filename": "gas/testsuite/gas/aarch64/sme-8-illegal.l",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-8-illegal.l?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -0,0 +1,7 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstart x0'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstart sa'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstart zm'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstop x0'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstop sa'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction -- `smstop zm'"
    },
    {
      "sha": "a0e2022352b31cd5cb4fd793708afa3d4ac90e2c",
      "filename": "gas/testsuite/gas/aarch64/sme-8-illegal.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-8-illegal.s?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -0,0 +1,9 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+smstart x0\n+smstart sa\n+smstart zm\n+\n+smstop x0\n+smstop sa\n+smstop zm"
    },
    {
      "sha": "c956baa66e5dd21b3ab6b1a83303c78636a615ee",
      "filename": "gas/testsuite/gas/aarch64/sme-8.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-8.d?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -0,0 +1,27 @@\n+#name: SME mode selection and state access instructions\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\td53b4240 \tmrs\tx0, svcr\n+   4:\td51b4240 \tmsr\tsvcr, x0\n+   8:\td503427f \tsmstop\tsm\n+   c:\td503447f \tsmstop\tza\n+  10:\td503467f \tsmstop\n+  14:\td503437f \tsmstart\tsm\n+  18:\td503457f \tsmstart\tza\n+  1c:\td503477f \tsmstart\n+  20:\td503477f \tsmstart\n+  24:\td503437f \tsmstart\tsm\n+  28:\td503457f \tsmstart\tza\n+  2c:\td503437f \tsmstart\tsm\n+  30:\td503457f \tsmstart\tza\n+  34:\td503467f \tsmstop\n+  38:\td503427f \tsmstop\tsm\n+  3c:\td503447f \tsmstop\tza\n+  40:\td503427f \tsmstop\tsm\n+  44:\td503447f \tsmstop\tza"
    },
    {
      "sha": "d4a07530df6e64811b0f0829aca9a82f74bb7527",
      "filename": "gas/testsuite/gas/aarch64/sme-8.s",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/gas/testsuite/gas/aarch64/sme-8.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-8.s?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -0,0 +1,28 @@\n+/* SME mode selection and state access instructions.  */\n+\n+/* SVCR system register access.  */\n+mrs x0, svcr\n+msr svcr, x0\n+\n+/* MSR SVCR Immediate access.  */\n+msr svcrsm, #0\n+msr svcrza, #0\n+msr svcrsmza, #0\n+\n+msr svcrsm, #1\n+msr svcrza, #1\n+msr svcrsmza, #1\n+\n+/* SMSTART.  */\n+smstart\n+smstart sm\n+smstart za\n+smstart SM\n+smstart ZA\n+\n+/* SMSTOP.  */\n+smstop\n+smstop sm\n+smstop za\n+smstop SM\n+smstop ZA"
    },
    {
      "sha": "d111bb986960a92feaf8d9c907c024c57cb41cd0",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -454,6 +454,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SME_ZA_HV_idx_ldstr,\t/* SME destination ZA tile vector.  */\n   AARCH64_OPND_SME_ZA_array,        /* SME ZA[<Wv>{, #<imm>}].  */\n   AARCH64_OPND_SME_ADDR_RI_U4xVL,   /* SME [<Xn|SP>{, #<imm>, MUL VL}].  */\n+  AARCH64_OPND_SME_SM_ZA,           /* SME {SM | ZA}.  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };\n@@ -621,6 +622,8 @@ enum aarch64_insn_class\n   sme_misc,\n   sme_ldr,\n   sme_str,\n+  sme_start,\n+  sme_stop,\n   sve_cpy,\n   sve_index,\n   sve_limm,"
    },
    {
      "sha": "8b226b10f63b56d7496af58b28ad732553032d42",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 151,
      "deletions": 149,
      "changes": 300,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -426,176 +426,176 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)\n     case 1188:\t/* movz */\n       value = 1188;\t/* --> movz.  */\n       break;\n-    case 1246:\t/* autibsp */\n-    case 1245:\t/* autibz */\n-    case 1244:\t/* autiasp */\n-    case 1243:\t/* autiaz */\n-    case 1242:\t/* pacibsp */\n-    case 1241:\t/* pacibz */\n-    case 1240:\t/* paciasp */\n-    case 1239:\t/* paciaz */\n-    case 1215:\t/* tsb */\n-    case 1214:\t/* psb */\n-    case 1213:\t/* esb */\n-    case 1212:\t/* autib1716 */\n-    case 1211:\t/* autia1716 */\n-    case 1210:\t/* pacib1716 */\n-    case 1209:\t/* pacia1716 */\n-    case 1208:\t/* xpaclri */\n-    case 1206:\t/* sevl */\n-    case 1205:\t/* sev */\n-    case 1204:\t/* wfi */\n-    case 1203:\t/* wfe */\n-    case 1202:\t/* yield */\n-    case 1201:\t/* bti */\n-    case 1200:\t/* csdb */\n-    case 1199:\t/* nop */\n-    case 1198:\t/* hint */\n-      value = 1198;\t/* --> hint.  */\n-      break;\n-    case 1221:\t/* pssbb */\n-    case 1220:\t/* ssbb */\n-    case 1219:\t/* dfb */\n-    case 1217:\t/* dsb */\n-      value = 1217;\t/* --> dsb.  */\n-      break;\n-    case 1218:\t/* dsb */\n-      value = 1218;\t/* --> dsb.  */\n-      break;\n-    case 1234:\t/* cpp */\n-    case 1233:\t/* dvp */\n-    case 1232:\t/* cfp */\n-    case 1229:\t/* tlbi */\n-    case 1228:\t/* ic */\n-    case 1227:\t/* dc */\n-    case 1226:\t/* at */\n-    case 1225:\t/* sys */\n-      value = 1225;\t/* --> sys.  */\n-      break;\n-    case 1230:\t/* wfet */\n-      value = 1230;\t/* --> wfet.  */\n-      break;\n-    case 1231:\t/* wfit */\n-      value = 1231;\t/* --> wfit.  */\n-      break;\n-    case 2044:\t/* bic */\n-    case 1294:\t/* and */\n-      value = 1294;\t/* --> and.  */\n+    case 1250:\t/* autibsp */\n+    case 1249:\t/* autibz */\n+    case 1248:\t/* autiasp */\n+    case 1247:\t/* autiaz */\n+    case 1246:\t/* pacibsp */\n+    case 1245:\t/* pacibz */\n+    case 1244:\t/* paciasp */\n+    case 1243:\t/* paciaz */\n+    case 1219:\t/* tsb */\n+    case 1218:\t/* psb */\n+    case 1217:\t/* esb */\n+    case 1216:\t/* autib1716 */\n+    case 1215:\t/* autia1716 */\n+    case 1214:\t/* pacib1716 */\n+    case 1213:\t/* pacia1716 */\n+    case 1212:\t/* xpaclri */\n+    case 1210:\t/* sevl */\n+    case 1209:\t/* sev */\n+    case 1208:\t/* wfi */\n+    case 1207:\t/* wfe */\n+    case 1206:\t/* yield */\n+    case 1205:\t/* bti */\n+    case 1204:\t/* csdb */\n+    case 1203:\t/* nop */\n+    case 1202:\t/* hint */\n+      value = 1202;\t/* --> hint.  */\n+      break;\n+    case 1225:\t/* pssbb */\n+    case 1224:\t/* ssbb */\n+    case 1223:\t/* dfb */\n+    case 1221:\t/* dsb */\n+      value = 1221;\t/* --> dsb.  */\n+      break;\n+    case 1222:\t/* dsb */\n+      value = 1222;\t/* --> dsb.  */\n+      break;\n+    case 1238:\t/* cpp */\n+    case 1237:\t/* dvp */\n+    case 1236:\t/* cfp */\n+    case 1233:\t/* tlbi */\n+    case 1232:\t/* ic */\n+    case 1231:\t/* dc */\n+    case 1230:\t/* at */\n+    case 1229:\t/* sys */\n+      value = 1229;\t/* --> sys.  */\n+      break;\n+    case 1234:\t/* wfet */\n+      value = 1234;\t/* --> wfet.  */\n+      break;\n+    case 1235:\t/* wfit */\n+      value = 1235;\t/* --> wfit.  */\n+      break;\n+    case 2048:\t/* bic */\n+    case 1298:\t/* and */\n+      value = 1298;\t/* --> and.  */\n+      break;\n+    case 1281:\t/* mov */\n+    case 1300:\t/* and */\n+      value = 1300;\t/* --> and.  */\n+      break;\n+    case 1285:\t/* movs */\n+    case 1301:\t/* ands */\n+      value = 1301;\t/* --> ands.  */\n+      break;\n+    case 2049:\t/* cmple */\n+    case 1336:\t/* cmpge */\n+      value = 1336;\t/* --> cmpge.  */\n+      break;\n+    case 2052:\t/* cmplt */\n+    case 1339:\t/* cmpgt */\n+      value = 1339;\t/* --> cmpgt.  */\n+      break;\n+    case 2050:\t/* cmplo */\n+    case 1341:\t/* cmphi */\n+      value = 1341;\t/* --> cmphi.  */\n+      break;\n+    case 2051:\t/* cmpls */\n+    case 1344:\t/* cmphs */\n+      value = 1344;\t/* --> cmphs.  */\n       break;\n-    case 1277:\t/* mov */\n-    case 1296:\t/* and */\n-      value = 1296;\t/* --> and.  */\n-      break;\n-    case 1281:\t/* movs */\n-    case 1297:\t/* ands */\n-      value = 1297;\t/* --> ands.  */\n+    case 1278:\t/* mov */\n+    case 1366:\t/* cpy */\n+      value = 1366;\t/* --> cpy.  */\n       break;\n-    case 2045:\t/* cmple */\n-    case 1332:\t/* cmpge */\n-      value = 1332;\t/* --> cmpge.  */\n+    case 1280:\t/* mov */\n+    case 1367:\t/* cpy */\n+      value = 1367;\t/* --> cpy.  */\n       break;\n-    case 2048:\t/* cmplt */\n-    case 1335:\t/* cmpgt */\n-      value = 1335;\t/* --> cmpgt.  */\n+    case 2059:\t/* fmov */\n+    case 1283:\t/* mov */\n+    case 1368:\t/* cpy */\n+      value = 1368;\t/* --> cpy.  */\n       break;\n-    case 2046:\t/* cmplo */\n-    case 1337:\t/* cmphi */\n-      value = 1337;\t/* --> cmphi.  */\n+    case 1273:\t/* mov */\n+    case 1380:\t/* dup */\n+      value = 1380;\t/* --> dup.  */\n       break;\n-    case 2047:\t/* cmpls */\n-    case 1340:\t/* cmphs */\n-      value = 1340;\t/* --> cmphs.  */\n+    case 1275:\t/* mov */\n+    case 1272:\t/* mov */\n+    case 1381:\t/* dup */\n+      value = 1381;\t/* --> dup.  */\n       break;\n-    case 1274:\t/* mov */\n-    case 1362:\t/* cpy */\n-      value = 1362;\t/* --> cpy.  */\n+    case 2058:\t/* fmov */\n+    case 1277:\t/* mov */\n+    case 1382:\t/* dup */\n+      value = 1382;\t/* --> dup.  */\n       break;\n     case 1276:\t/* mov */\n-    case 1363:\t/* cpy */\n-      value = 1363;\t/* --> cpy.  */\n-      break;\n-    case 2055:\t/* fmov */\n-    case 1279:\t/* mov */\n-    case 1364:\t/* cpy */\n-      value = 1364;\t/* --> cpy.  */\n-      break;\n-    case 1269:\t/* mov */\n-    case 1376:\t/* dup */\n-      value = 1376;\t/* --> dup.  */\n-      break;\n-    case 1271:\t/* mov */\n-    case 1268:\t/* mov */\n-    case 1377:\t/* dup */\n-      value = 1377;\t/* --> dup.  */\n+    case 1383:\t/* dupm */\n+      value = 1383;\t/* --> dupm.  */\n       break;\n-    case 2054:\t/* fmov */\n-    case 1273:\t/* mov */\n-    case 1378:\t/* dup */\n-      value = 1378;\t/* --> dup.  */\n-      break;\n-    case 1272:\t/* mov */\n-    case 1379:\t/* dupm */\n-      value = 1379;\t/* --> dupm.  */\n-      break;\n-    case 2049:\t/* eon */\n-    case 1381:\t/* eor */\n-      value = 1381;\t/* --> eor.  */\n+    case 2053:\t/* eon */\n+    case 1385:\t/* eor */\n+      value = 1385;\t/* --> eor.  */\n       break;\n-    case 1282:\t/* not */\n-    case 1383:\t/* eor */\n-      value = 1383;\t/* --> eor.  */\n+    case 1286:\t/* not */\n+    case 1387:\t/* eor */\n+      value = 1387;\t/* --> eor.  */\n       break;\n-    case 1283:\t/* nots */\n-    case 1384:\t/* eors */\n-      value = 1384;\t/* --> eors.  */\n+    case 1287:\t/* nots */\n+    case 1388:\t/* eors */\n+      value = 1388;\t/* --> eors.  */\n       break;\n-    case 2050:\t/* facle */\n-    case 1389:\t/* facge */\n-      value = 1389;\t/* --> facge.  */\n+    case 2054:\t/* facle */\n+    case 1393:\t/* facge */\n+      value = 1393;\t/* --> facge.  */\n       break;\n-    case 2051:\t/* faclt */\n-    case 1390:\t/* facgt */\n-      value = 1390;\t/* --> facgt.  */\n+    case 2055:\t/* faclt */\n+    case 1394:\t/* facgt */\n+      value = 1394;\t/* --> facgt.  */\n       break;\n-    case 2052:\t/* fcmle */\n-    case 1403:\t/* fcmge */\n-      value = 1403;\t/* --> fcmge.  */\n+    case 2056:\t/* fcmle */\n+    case 1407:\t/* fcmge */\n+      value = 1407;\t/* --> fcmge.  */\n       break;\n-    case 2053:\t/* fcmlt */\n-    case 1405:\t/* fcmgt */\n-      value = 1405;\t/* --> fcmgt.  */\n+    case 2057:\t/* fcmlt */\n+    case 1409:\t/* fcmgt */\n+      value = 1409;\t/* --> fcmgt.  */\n       break;\n-    case 1266:\t/* fmov */\n-    case 1411:\t/* fcpy */\n-      value = 1411;\t/* --> fcpy.  */\n+    case 1270:\t/* fmov */\n+    case 1415:\t/* fcpy */\n+      value = 1415;\t/* --> fcpy.  */\n       break;\n-    case 1265:\t/* fmov */\n-    case 1434:\t/* fdup */\n-      value = 1434;\t/* --> fdup.  */\n+    case 1269:\t/* fmov */\n+    case 1438:\t/* fdup */\n+      value = 1438;\t/* --> fdup.  */\n       break;\n-    case 1267:\t/* mov */\n-    case 1765:\t/* orr */\n-      value = 1765;\t/* --> orr.  */\n+    case 1271:\t/* mov */\n+    case 1769:\t/* orr */\n+      value = 1769;\t/* --> orr.  */\n       break;\n-    case 2056:\t/* orn */\n-    case 1766:\t/* orr */\n-      value = 1766;\t/* --> orr.  */\n+    case 2060:\t/* orn */\n+    case 1770:\t/* orr */\n+      value = 1770;\t/* --> orr.  */\n       break;\n-    case 1270:\t/* mov */\n-    case 1768:\t/* orr */\n-      value = 1768;\t/* --> orr.  */\n+    case 1274:\t/* mov */\n+    case 1772:\t/* orr */\n+      value = 1772;\t/* --> orr.  */\n       break;\n-    case 1280:\t/* movs */\n-    case 1769:\t/* orrs */\n-      value = 1769;\t/* --> orrs.  */\n+    case 1284:\t/* movs */\n+    case 1773:\t/* orrs */\n+      value = 1773;\t/* --> orrs.  */\n       break;\n-    case 1275:\t/* mov */\n-    case 1831:\t/* sel */\n-      value = 1831;\t/* --> sel.  */\n+    case 1279:\t/* mov */\n+    case 1835:\t/* sel */\n+      value = 1835;\t/* --> sel.  */\n       break;\n-    case 1278:\t/* mov */\n-    case 1832:\t/* sel */\n-      value = 1832;\t/* --> sel.  */\n+    case 1282:\t/* mov */\n+    case 1836:\t/* sel */\n+      value = 1836;\t/* --> sel.  */\n       break;\n     default: return NULL;\n     }\n@@ -675,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 220:\n+    case 221:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -721,7 +721,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 189:\n     case 190:\n     case 215:\n-    case 219:\n+    case 220:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -889,6 +889,8 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_sme_za_array (self, info, code, inst, errors);\n     case 218:\n       return aarch64_ins_sme_addr_ri_u4xvl (self, info, code, inst, errors);\n+    case 219:\n+      return aarch64_ins_sme_sm_za (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "b9aff950a03fd9849b58758c3f6022ba057de02a",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -848,6 +848,10 @@ aarch64_ins_pstatefield (const aarch64_operand *self ATTRIBUTE_UNUSED,\n   /* op1:op2 */\n   insert_fields (code, info->pstatefield, inst->opcode->mask, 2,\n \t\t FLD_op2, FLD_op1);\n+\n+  /* Extra CRm mask.  */\n+  if (info->sysreg.flags | F_REG_IN_CRM)\n+    insert_field (FLD_CRm, code, PSTATE_DECODE_CRM (info->sysreg.flags), 0);\n   return true;\n }\n \n@@ -1427,6 +1431,27 @@ aarch64_ins_sme_addr_ri_u4xvl (const aarch64_operand *self,\n   return true;\n }\n \n+/* Encode in SMSTART and SMSTOP {SM | ZA } mode.  */\n+bool\n+aarch64_ins_sme_sm_za (const aarch64_operand *self,\n+                       const aarch64_opnd_info *info,\n+                       aarch64_insn *code,\n+                       const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                       aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  aarch64_insn fld_crm;\n+  /* Set CRm[3:1] bits.  */\n+  if (info->reg.regno == 's')\n+    fld_crm = 0x02 ; /* SVCRSM.  */\n+  else if (info->reg.regno == 'z')\n+    fld_crm = 0x04; /* SVCRZA.  */\n+  else\n+    assert (0);\n+\n+  insert_field (self->fields[0], code, fld_crm, 0);\n+  return true;\n+}\n+\n /* Miscellaneous encoding functions.  */\n \n /* Encode size[0], i.e. bit 22, for"
    },
    {
      "sha": "cb224f6883fcd713fa2768f87366fb8d1262aaac",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -102,6 +102,7 @@ AARCH64_DECL_OPD_INSERTER (ins_sme_za_hv_tiles);\n AARCH64_DECL_OPD_INSERTER (ins_sme_za_list);\n AARCH64_DECL_OPD_INSERTER (ins_sme_za_array);\n AARCH64_DECL_OPD_INSERTER (ins_sme_addr_ri_u4xvl);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_sm_za);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate1);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate2);\n "
    },
    {
      "sha": "8d759bc3ed1d4f07a4b82f3cb4ac3c9efd7bb239",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 1356,
      "deletions": 1350,
      "changes": 2706,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38"
    },
    {
      "sha": "c2b365ab1296c631cd5811e756ea74cc37a7cdff",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -664,7 +664,7 @@ aarch64_ext_shll_imm (const aarch64_operand *self ATTRIBUTE_UNUSED,\n bool\n aarch64_ext_imm (const aarch64_operand *self, aarch64_opnd_info *info,\n \t\t const aarch64_insn code,\n-\t\t const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+\t\t const aarch64_inst *inst,\n \t\t aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n {\n   uint64_t imm;\n@@ -682,6 +682,10 @@ aarch64_ext_imm (const aarch64_operand *self, aarch64_opnd_info *info,\n   if (info->type == AARCH64_OPND_ADDR_ADRP)\n     imm <<= 12;\n \n+  if (inst->operands[0].type == AARCH64_OPND_PSTATEFIELD\n+      && inst->operands[0].sysreg.flags & F_IMM_IN_CRM)\n+    imm &= PSTATE_DECODE_CRM_IMM (inst->operands[0].sysreg.flags);\n+\n   info->imm.value = imm;\n   return true;\n }\n@@ -1226,11 +1230,20 @@ aarch64_ext_pstatefield (const aarch64_operand *self ATTRIBUTE_UNUSED,\n \t\t\t aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n {\n   int i;\n+  aarch64_insn fld_crm = extract_field (FLD_CRm, code, 0);\n   /* op1:op2 */\n   info->pstatefield = extract_fields (code, 0, 2, FLD_op1, FLD_op2);\n   for (i = 0; aarch64_pstatefields[i].name != NULL; ++i)\n     if (aarch64_pstatefields[i].value == (aarch64_insn)info->pstatefield)\n-      return true;\n+      {\n+        /* PSTATEFIELD name can be encoded partially in CRm[3:1].  */\n+        uint32_t flags = aarch64_pstatefields[i].flags;\n+        if ((flags & F_REG_IN_CRM)\n+            && ((fld_crm & 0xe) != PSTATE_DECODE_CRM (flags)))\n+          continue;\n+        info->sysreg.flags = flags;\n+        return true;\n+      }\n   /* Reserved value in <pstatefield>.  */\n   return false;\n }\n@@ -1856,6 +1869,27 @@ aarch64_ext_sme_addr_ri_u4xvl (const aarch64_operand *self,\n   return true;\n }\n \n+/* Decode {SM|ZA} filed for SMSTART and SMSTOP instructions.  */\n+bool\n+aarch64_ext_sme_sm_za (const aarch64_operand *self,\n+                       aarch64_opnd_info *info, aarch64_insn code,\n+                       const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                       aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  info->pstatefield = 0x1b;\n+  aarch64_insn fld_crm = extract_field (self->fields[0], code, 0);\n+  fld_crm >>= 1;    /* CRm[3:1].  */\n+\n+  if (fld_crm == 0x1)\n+    info->reg.regno = 's';\n+  else if (fld_crm == 0x2)\n+    info->reg.regno = 'z';\n+  else\n+    assert (0);\n+\n+  return true;\n+}\n+\n /* Decode Zn[MM], where MM has a 7-bit triangular encoding.  The fields\n    array specifies which field to use for Zn.  MM is encoded in the\n    concatenation of imm5 and SVE_tszh, with imm5 being the less"
    },
    {
      "sha": "3366dfbcc8e773943237dc4a8a5dbfd2acd476b7",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -126,6 +126,7 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_hv_tiles);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_list);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_array);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_addr_ri_u4xvl);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_sm_za);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate1);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate2);\n "
    },
    {
      "sha": "75b7f86d1775c58defb64e95cf4565eacef1bede",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -243,6 +243,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_ldstr\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_index2,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2}, \"an SME horizontal or vertical vector access register\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_array\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Rv,FLD_imm4_2}, \"ZA array\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SME_ADDR_RI_U4xVL\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_imm4_2}, \"memory offset\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"SME_SM_ZA\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_CRm}, \"streaming mode\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},\n@@ -322,17 +323,17 @@ static const unsigned op_enum_table [] =\n   391,\n   413,\n   415,\n-  1270,\n-  1275,\n-  1268,\n-  1267,\n+  1274,\n+  1279,\n+  1272,\n   1271,\n-  1278,\n-  1280,\n-  1281,\n-  1277,\n-  1283,\n+  1275,\n   1282,\n+  1284,\n+  1285,\n+  1281,\n+  1287,\n+  1286,\n   131,\n };\n "
    },
    {
      "sha": "dba8bcba1a8b057597fd64b0b8cf907117656a40",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -1520,7 +1520,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  if (!aarch64_stack_pointer_p (opnd))\n \t    {\n \t      set_other_error (mismatch_detail, idx,\n-\t\t\t       _(\"stack pointer register expected\"));\n+\t\t       _(\"stack pointer register expected\"));\n \t      return 0;\n \t    }\n \t  break;\n@@ -2592,11 +2592,15 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  /* MSR UAO, #uimm4\n \t     MSR PAN, #uimm4\n \t     MSR SSBS,#uimm4\n+\t     MSR SVCRSM, #uimm4\n+\t     MSR SVCRZA, #uimm4\n+\t     MSR SVCRSMZA, #uimm4\n \t     The immediate must be #0 or #1.  */\n \t  if ((opnd->pstatefield == 0x03\t/* UAO.  */\n \t       || opnd->pstatefield == 0x04\t/* PAN.  */\n \t       || opnd->pstatefield == 0x19     /* SSBS.  */\n-\t       || opnd->pstatefield == 0x1a)\t/* DIT.  */\n+\t       || opnd->pstatefield == 0x1a\t/* DIT.  */\n+\t       || opnd->pstatefield == 0x1b)\t/* SVCRSM, SVCRZA or SVCRSMZA.  */\n \t      && opnds[1].imm.value > 1)\n \t    {\n \t      set_imm_out_of_range_error (mismatch_detail, idx, 0, 1);\n@@ -3465,6 +3469,10 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n                 opnd->za_tile_vector.index.imm);\n       break;\n \n+    case AARCH64_OPND_SME_SM_ZA:\n+      snprintf (buf, size, \"%s\", opnd->reg.regno == 's' ? \"sm\" : \"za\");\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);\n@@ -3861,8 +3869,17 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \n     case AARCH64_OPND_PSTATEFIELD:\n       for (i = 0; aarch64_pstatefields[i].name; ++i)\n-\tif (aarch64_pstatefields[i].value == opnd->pstatefield)\n-\t  break;\n+        if (aarch64_pstatefields[i].value == opnd->pstatefield)\n+          {\n+            /* PSTATEFIELD name is encoded partially in CRm[3:1] for SVCRSM,\n+               SVCRZA and SVCRSMZA.  */\n+            uint32_t flags = aarch64_pstatefields[i].flags;\n+            if (flags & F_REG_IN_CRM\n+                && (PSTATE_DECODE_CRM (opnd->sysreg.flags)\n+                    != PSTATE_DECODE_CRM (flags)))\n+              continue;\n+            break;\n+          }\n       assert (aarch64_pstatefields[i].name);\n       snprintf (buf, size, \"%s\", aarch64_pstatefields[i].name);\n       break;\n@@ -3958,6 +3975,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n #define SR_V8_4(n,e,f)\t  SR_FEAT (n,e,f,V8_4)\n #define SR_PAN(n,e,f)\t  SR_FEAT (n,e,f,PAN)\n #define SR_RAS(n,e,f)\t  SR_FEAT (n,e,f,RAS)\n+#define SR_SME(n,e,f)\t  SR_FEAT (n,e,f,SME)\n #define SR_SSBS(n,e,f)\t  SR_FEAT (n,e,f,SSBS)\n #define SR_SVE(n,e,f)\t  SR_FEAT (n,e,f,SVE)\n #define SR_ID_PFR2(n,e,f) SR_FEAT (n,e,f,ID_PFR2)\n@@ -4808,6 +4826,8 @@ const aarch64_sys_reg aarch64_sys_regs [] =\n   SR_CORE (\"gpccr_el3\",     CPENC (3,6,C2,C1,6), 0),\n   SR_CORE (\"gptbr_el3\",     CPENC (3,6,C2,C1,4), 0),\n \n+  SR_SME (\"svcr\",           CPENC (3,3,C4,C2,2), 0),\n+\n   { 0, CPENC (0,0,0,0,0), 0, 0 }\n };\n \n@@ -4834,6 +4854,9 @@ const aarch64_sys_reg aarch64_pstatefields [] =\n   SR_SSBS (\"ssbs\",\t  0x19, 0),\n   SR_V8_4 (\"dit\",\t  0x1a,\t0),\n   SR_MEMTAG (\"tco\",\t  0x1c,\t0),\n+  SR_SME  (\"svcrsm\",\t  0x1b, PSTATE_ENCODE_CRM_AND_IMM(0x2,0x1)),\n+  SR_SME  (\"svcrza\",\t  0x1b, PSTATE_ENCODE_CRM_AND_IMM(0x4,0x1)),\n+  SR_SME  (\"svcrsmza\",\t  0x1b, PSTATE_ENCODE_CRM_AND_IMM(0x6,0x1)),\n   { 0,\t  CPENC (0,0,0,0,0), 0, 0 },\n };\n "
    },
    {
      "sha": "f3000fca4cef7a81bd182c3ebff058b37f8a5105",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -243,6 +243,32 @@ verify_constraints (const struct aarch64_inst *, const aarch64_insn, bfd_vma,\n #define F_REG_WRITE\t(1 << 4)  /* Register can only be written to but not\n \t\t\t\t     read from.  */\n \n+#undef F_REG_IN_CRM\n+#define F_REG_IN_CRM\t(1 << 5)  /* Register extra encoding in CRm.  */\n+\n+/* PSTATE field name for the MSR instruction this is encoded in \"op1:op2:CRm\".\n+   Part of CRm can be used to encode <pstatefield>. E.g. CRm[3:1] for SME.\n+   In order to set/get full PSTATE field name use flag F_REG_IN_CRM and below\n+   macros to encode and decode CRm encoding.\n+*/\n+#define PSTATE_ENCODE_CRM(val) (val << 6)\n+#define PSTATE_DECODE_CRM(flags) ((flags >> 6) & 0x0f)\n+\n+#undef F_IMM_IN_CRM\n+#define F_IMM_IN_CRM\t(1 << 10)  /* Immediate extra encoding in CRm.  */\n+\n+/* Also CRm may contain, in addition to <pstatefield> immediate.\n+   E.g. CRm[0] <imm1> at bit 0 for SME. Use below macros to encode and decode\n+   immediate mask.\n+*/\n+#define PSTATE_ENCODE_CRM_IMM(mask) (mask << 11)\n+#define PSTATE_DECODE_CRM_IMM(mask) ((mask >> 11) & 0x0f)\n+\n+/* Helper macro to ENCODE CRm and its immediate.  */\n+#define PSTATE_ENCODE_CRM_AND_IMM(CVAL,IMASK) \\\n+        (F_REG_IN_CRM | PSTATE_ENCODE_CRM(CVAL) \\\n+         | F_IMM_IN_CRM | PSTATE_ENCODE_CRM_IMM(IMASK))\n+\n /* HINT operand flags.  */\n #define HINT_OPD_F_NOPRINT\t(1 << 0)  /* Should not be printed.  */\n "
    },
    {
      "sha": "820b082040c22766ced5afa836d1d4763b005d2f",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=3dd032c5fb4eb7fc6bc0341d348da5c75e2d8e38",
      "patch": "@@ -3933,6 +3933,11 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n   _TME_INSN (\"tcommit\", 0xd503307f, 0xffffffff, 0, 0, OP0 (), {}, 0),\n   _TME_INSN (\"ttest\", 0xd5233160, 0xffffffe0, 0, 0, OP1 (Rd), QL_I1X, 0),\n   _TME_INSN (\"tcancel\", 0xd4600000, 0xffe0001f, 0, 0, OP1 (TME_UIMM16), QL_IMM_NIL, 0),\n+  /* SME instructions (aliases for MSR <sysreg> operations.  */\n+  SME_INSN (\"smstart\", 0xd503477f, 0xffffffff, sme_start, 0, OP0 (), {}, F_SYS_WRITE, 0),\n+  SME_INSN (\"smstop\",  0xd503467f, 0xffffffff, sme_stop,  0, OP0 (), {}, F_SYS_WRITE, 0),\n+  SME_INSN (\"smstart\", 0xd503417f, 0xfffff1ff, sme_start, 0, OP1 (SME_SM_ZA), {}, F_SYS_WRITE, 0),\n+  SME_INSN (\"smstop\",  0xd503407f, 0xfffff1ff, sme_stop,  0, OP1 (SME_SM_ZA), {}, F_SYS_WRITE, 0),\n   /* System.  */\n   CORE_INSN (\"msr\", 0xd500401f, 0xfff8f01f, ic_system, 0, OP2 (PSTATEFIELD, UIMM4), {}, F_SYS_WRITE),\n   CORE_INSN (\"hint\",0xd503201f, 0xfffff01f, ic_system, 0, OP1 (UIMM7), {}, F_HAS_ALIAS),\n@@ -5765,6 +5770,9 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n     Y(ADDRESS, sme_addr_ri_u4xvl, \"SME_ADDR_RI_U4xVL\", 0 << OPD_F_OD_LSB, \\\n       F(FLD_Rn,FLD_imm4_2),\t\t\t\t\t\\\n       \"memory offset\")\t\\\n+    Y(ADDRESS, sme_sm_za, \"SME_SM_ZA\", 0, \\\n+      F(FLD_CRm),\t\t\t\t\t\\\n+      \"streaming mode\")\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n       \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\"
    }
  ]
}