{
  "sha": "8566b89b737eef50f67bf23329b4606cf7973de1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODU2NmI4OWI3MzdlZWY1MGY2N2JmMjMzMjliNDYwNmNmNzk3M2RlMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-23T15:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-01-26T23:40:21Z"
    },
    "message": "Introduce partial_symtab::expand_psymtab method\n\nThe symbol readers generally used two functions to expand a partial\nsymtab: an outer function (now the \"read_symtab\" method), and an inner\nfunction, typically named something like \"psymtab_to_symtab\".\n\nThis patch changes this second step to be a method on partial_symtab,\nand updates all the callers.  For legacy_psymtab, a new function\npointer member is introduced.\n\nThis patch enables a subsequent cleanup.\n\ngdb/ChangeLog\n2020-01-26  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_psymtab_to_symtab_1): Change argument order.\n\tCall expand_psymtab.\n\t(xcoff_read_symtab): Call expand_psymtab.\n\t(xcoff_start_psymtab, xcoff_end_psymtab): Set\n\tlegacy_expand_psymtab.\n\t* psympriv.h (struct partial_symtab) <expand_psymtab>: New\n\tmethod.\n\t(struct legacy_psymtab) <expand_psymtab>: Implement.\n\t<legacy_expand_psymtab>: New member.\n\t* mdebugread.c (mdebug_read_symtab): Call expand_psymtab.\n\t(parse_partial_symbols): Set legacy_expand_psymtab.\n\t(psymtab_to_symtab_1): Change argument order.  Call\n\texpand_psymtab.\n\t(new_psymtab): Set legacy_expand_psymtab.\n\t* dwarf2read.h (struct dwarf2_psymtab) <expand_psymtab>: Declare.\n\t* dwarf2read.c (dwarf2_psymtab::read_symtab): Call\n\texpand_psymtab.\n\t(dwarf2_psymtab::expand_psymtab): Rename from\n\tpsymtab_to_symtab_1.  Call expand_psymtab.\n\t* dbxread.c (start_psymtab): Set legacy_expand_psymtab.\n\t(dbx_end_psymtab): Likewise.\n\t(dbx_psymtab_to_symtab_1): Change argument order. Call\n\texpand_psymtab.\n\t(dbx_read_symtab): Call expand_psymtab.\n\t* ctfread.c (struct ctf_psymtab) <expand_psymtab>: Declare.\n\t(ctf_psymtab::expand_psymtab): Rename from psymtab_to_symtab.\n\t(ctf_psymtab::read_symtab): Call expand_psymtab.\n\nChange-Id: Ic39a2d7aa7b424088d910b59dbd21271fa1c3430",
    "tree": {
      "sha": "022486e22ca850c04d2488ec9913114191a69f91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/022486e22ca850c04d2488ec9913114191a69f91"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8566b89b737eef50f67bf23329b4606cf7973de1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8566b89b737eef50f67bf23329b4606cf7973de1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8566b89b737eef50f67bf23329b4606cf7973de1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8566b89b737eef50f67bf23329b4606cf7973de1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "077cbab270376098e90c841690f9e4439b63d3d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/077cbab270376098e90c841690f9e4439b63d3d4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/077cbab270376098e90c841690f9e4439b63d3d4"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 82,
    "deletions": 38
  },
  "files": [
    {
      "sha": "c6a0251e8dbbbf456eeb848f4c154ad57c8e6b66",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -1,3 +1,33 @@\n+2020-01-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_psymtab_to_symtab_1): Change argument order.\n+\tCall expand_psymtab.\n+\t(xcoff_read_symtab): Call expand_psymtab.\n+\t(xcoff_start_psymtab, xcoff_end_psymtab): Set\n+\tlegacy_expand_psymtab.\n+\t* psympriv.h (struct partial_symtab) <expand_psymtab>: New\n+\tmethod.\n+\t(struct legacy_psymtab) <expand_psymtab>: Implement.\n+\t<legacy_expand_psymtab>: New member.\n+\t* mdebugread.c (mdebug_read_symtab): Call expand_psymtab.\n+\t(parse_partial_symbols): Set legacy_expand_psymtab.\n+\t(psymtab_to_symtab_1): Change argument order.  Call\n+\texpand_psymtab.\n+\t(new_psymtab): Set legacy_expand_psymtab.\n+\t* dwarf2read.h (struct dwarf2_psymtab) <expand_psymtab>: Declare.\n+\t* dwarf2read.c (dwarf2_psymtab::read_symtab): Call\n+\texpand_psymtab.\n+\t(dwarf2_psymtab::expand_psymtab): Rename from\n+\tpsymtab_to_symtab_1.  Call expand_psymtab.\n+\t* dbxread.c (start_psymtab): Set legacy_expand_psymtab.\n+\t(dbx_end_psymtab): Likewise.\n+\t(dbx_psymtab_to_symtab_1): Change argument order. Call\n+\texpand_psymtab.\n+\t(dbx_read_symtab): Call expand_psymtab.\n+\t* ctfread.c (struct ctf_psymtab) <expand_psymtab>: Declare.\n+\t(ctf_psymtab::expand_psymtab): Rename from psymtab_to_symtab.\n+\t(ctf_psymtab::read_symtab): Call expand_psymtab.\n+\n 2020-01-26  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (xcoff_read_symtab): Remove prints.  Add assert."
    },
    {
      "sha": "77cdcd4241ea9b536ecea56fc0bc8d90973ad9d1",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -124,6 +124,7 @@ struct ctf_psymtab : public partial_symtab\n   }\n \n   void read_symtab (struct objfile *) override;\n+  void expand_psymtab (struct objfile *) override;\n \n   struct ctf_context *context;\n };\n@@ -160,8 +161,6 @@ struct ctf_field_info\n \n /* Local function prototypes */\n \n-static void psymtab_to_symtab (ctf_psymtab *);\n-\n static int ctf_add_type_cb (ctf_id_t tid, void *arg);\n \n static struct type *read_array_type (struct ctf_context *cp, ctf_id_t tid);\n@@ -1216,15 +1215,15 @@ ctf_end_symtab (ctf_psymtab *pst,\n \n /* Read in full symbols for PST, and anything it depends on.  */\n \n-static void\n-psymtab_to_symtab (ctf_psymtab *pst)\n+void\n+ctf_psymtab::expand_psymtab (struct objfile *objfile)\n {\n   struct symbol *sym;\n   struct ctf_context *ccp;\n \n-  gdb_assert (!pst->readin);\n+  gdb_assert (!readin);\n \n-  ccp = pst->context;\n+  ccp = context;\n \n   /* Iterate over entries in data types section.  */\n   if (ctf_type_iter (ccp->fp, ctf_add_type_cb, ccp) == CTF_ERR)\n@@ -1254,7 +1253,7 @@ psymtab_to_symtab (ctf_psymtab *pst)\n       set_symbol_address (ccp->of, sym, sym->linkage_name ());\n     }\n \n-  pst->readin = true;\n+  readin = true;\n }\n \n /* Expand partial symbol table PST into a full symbol table.\n@@ -1279,7 +1278,7 @@ ctf_psymtab::read_symtab (struct objfile *objfile)\n \n       offset = get_objfile_text_range (objfile, &tsize);\n       ctf_start_symtab (this, objfile, offset);\n-      psymtab_to_symtab (this);\n+      expand_psymtab (objfile);\n \n       set_text_low (offset);\n       set_text_high (offset + tsize);"
    },
    {
      "sha": "2711ea86b851018b15f7c3c43b6b1b68a733cc0a",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -268,7 +268,7 @@ static void read_ofile_symtab (struct objfile *, legacy_psymtab *);\n static void dbx_read_symtab (legacy_psymtab *self,\n \t\t\t     struct objfile *objfile);\n \n-static void dbx_psymtab_to_symtab_1 (struct objfile *, legacy_psymtab *);\n+static void dbx_psymtab_to_symtab_1 (legacy_psymtab *, struct objfile *);\n \n static void read_dbx_symtab (minimal_symbol_reader &, struct objfile *);\n \n@@ -1909,6 +1909,7 @@ start_psymtab (struct objfile *objfile, const char *filename, CORE_ADDR textlow,\n     XOBNEW (&objfile->objfile_obstack, struct symloc);\n   LDSYMOFF (result) = ldsymoff;\n   result->legacy_read_symtab = dbx_read_symtab;\n+  result->legacy_expand_psymtab = dbx_psymtab_to_symtab_1;\n   SYMBOL_SIZE (result) = symbol_size;\n   SYMBOL_OFFSET (result) = symbol_table_offset;\n   STRING_OFFSET (result) = string_table_offset;\n@@ -2039,6 +2040,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n       subpst->number_of_dependencies = 1;\n \n       subpst->legacy_read_symtab = pst->legacy_read_symtab;\n+      subpst->legacy_expand_psymtab = pst->legacy_expand_psymtab;\n     }\n \n   if (num_includes == 0\n@@ -2064,7 +2066,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n }\n \f\n static void\n-dbx_psymtab_to_symtab_1 (struct objfile *objfile, legacy_psymtab *pst)\n+dbx_psymtab_to_symtab_1 (legacy_psymtab *pst, struct objfile *objfile)\n {\n   int i;\n \n@@ -2091,8 +2093,7 @@ dbx_psymtab_to_symtab_1 (struct objfile *objfile, legacy_psymtab *pst)\n \t    wrap_here (\"\");\t/* Flush output.  */\n \t    gdb_flush (gdb_stdout);\n \t  }\n-\tdbx_psymtab_to_symtab_1 (objfile,\n-\t\t\t\t (legacy_psymtab *) pst->dependencies[i]);\n+\tpst->dependencies[i]->expand_psymtab (objfile);\n       }\n \n   if (LDSYMLEN (pst))\t\t/* Otherwise it's a dummy.  */\n@@ -2135,7 +2136,7 @@ dbx_read_symtab (legacy_psymtab *self, struct objfile *objfile)\n \t    data_holder.reset (stabs_data);\n \t  }\n \n-\tdbx_psymtab_to_symtab_1 (objfile, self);\n+\tself->expand_psymtab (objfile);\n       }\n \n       /* Match with global symbols.  This only needs to be done once,"
    },
    {
      "sha": "c3e0866f37d4ea7f7db6eab5814f65cb42898b10",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 13,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -1513,8 +1513,6 @@ static void add_partial_subprogram (struct partial_die_info *pdi,\n \t\t\t\t    CORE_ADDR *lowpc, CORE_ADDR *highpc,\n \t\t\t\t    int need_pc, struct dwarf2_cu *cu);\n \n-static void psymtab_to_symtab_1 (dwarf2_psymtab *);\n-\n static abbrev_table_up abbrev_table_read_table\n   (struct dwarf2_per_objfile *dwarf2_per_objfile, struct dwarf2_section_info *,\n    sect_offset);\n@@ -9510,7 +9508,7 @@ dwarf2_psymtab::read_symtab (struct objfile *objfile)\n \n   dwarf2_per_objfile->reading_partial_symbols = 0;\n \n-  psymtab_to_symtab_1 (this);\n+  expand_psymtab (objfile);\n \n   process_cu_includes (dwarf2_per_objfile);\n }\n@@ -9661,18 +9659,18 @@ process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n /* Read in full symbols for PST, and anything it depends on.  */\n \n-static void\n-psymtab_to_symtab_1 (dwarf2_psymtab *pst)\n+void\n+dwarf2_psymtab::expand_psymtab (struct objfile *objfile)\n {\n   struct dwarf2_per_cu_data *per_cu;\n   int i;\n \n-  if (pst->readin)\n+  if (readin)\n     return;\n \n-  for (i = 0; i < pst->number_of_dependencies; i++)\n-    if (!pst->dependencies[i]->readin\n-\t&& pst->dependencies[i]->user == NULL)\n+  for (i = 0; i < number_of_dependencies; i++)\n+    if (!dependencies[i]->readin\n+\t&& dependencies[i]->user == NULL)\n       {\n         /* Inform about additional files that need to be read in.  */\n         if (info_verbose)\n@@ -9682,20 +9680,20 @@ psymtab_to_symtab_1 (dwarf2_psymtab *pst)\n             wrap_here (\"\");\n             fputs_filtered (\"and \", gdb_stdout);\n             wrap_here (\"\");\n-            printf_filtered (\"%s...\", pst->dependencies[i]->filename);\n+            printf_filtered (\"%s...\", dependencies[i]->filename);\n             wrap_here (\"\");     /* Flush output.  */\n             gdb_flush (gdb_stdout);\n           }\n-        psymtab_to_symtab_1 ((dwarf2_psymtab *) pst->dependencies[i]);\n+\tdependencies[i]->expand_psymtab (objfile);\n       }\n \n-  per_cu = pst->per_cu_data;\n+  per_cu = per_cu_data;\n \n   if (per_cu == NULL)\n     {\n       /* It's an include file, no symbols to read for it.\n          Everything is in the parent symtab.  */\n-      pst->readin = true;\n+      readin = true;\n       return;\n     }\n "
    },
    {
      "sha": "c5b69020d5778ee1847567a3b111df2a0902ee6a",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -285,6 +285,7 @@ struct dwarf2_psymtab : public partial_symtab\n   }\n \n   void read_symtab (struct objfile *) override;\n+  void expand_psymtab (struct objfile *) override;\n \n   struct dwarf2_per_cu_data *per_cu_data;\n };"
    },
    {
      "sha": "1d0a0fcdf8f777db26b751936fc07e923a0900c0",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -253,8 +253,8 @@ static void sort_blocks (struct symtab *);\n \n static legacy_psymtab *new_psymtab (const char *, struct objfile *);\n \n-static void psymtab_to_symtab_1 (struct objfile *objfile,\n-\t\t\t\t legacy_psymtab *, const char *);\n+static void psymtab_to_symtab_1 (legacy_psymtab *pst,\n+\t\t\t\t struct objfile *objfile);\n \n static void add_block (struct block *, struct symtab *);\n \n@@ -279,7 +279,7 @@ mdebug_read_symtab (legacy_psymtab *self, struct objfile *objfile)\n {\n   next_symbol_text_func = mdebug_next_symbol_text;\n \n-  psymtab_to_symtab_1 (objfile, self, self->filename);\n+  self->expand_psymtab (objfile);\n \n   /* Match with global symbols.  This only needs to be done once,\n      after all of the symtabs and dependencies have been read in.  */\n@@ -2613,6 +2613,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \n       /* The way to turn this into a symtab is to call...  */\n       pst->legacy_read_symtab = mdebug_read_symtab;\n+      pst->legacy_expand_psymtab = psymtab_to_symtab_1;\n \n       /* Set up language for the pst.\n          The language from the FDR is used if it is unambigious (e.g. cfront\n@@ -3834,8 +3835,7 @@ mdebug_next_symbol_text (struct objfile *objfile)\n    The flow of control and even the memory allocation differs.  FIXME.  */\n \n static void\n-psymtab_to_symtab_1 (struct objfile *objfile,\n-\t\t     legacy_psymtab *pst, const char *filename)\n+psymtab_to_symtab_1 (legacy_psymtab *pst, struct objfile *objfile)\n {\n   bfd_size_type external_sym_size;\n   bfd_size_type external_pdr_size;\n@@ -3872,9 +3872,7 @@ psymtab_to_symtab_1 (struct objfile *objfile,\n \t    wrap_here (\"\");\t/* Flush output */\n \t    gdb_flush (gdb_stdout);\n \t  }\n-\t/* We only pass the filename for debug purposes.  */\n-\tpsymtab_to_symtab_1 (objfile, (legacy_psymtab *) pst->dependencies[i],\n-\t\t\t     pst->dependencies[i]->filename);\n+\tpst->dependencies[i]->expand_psymtab (objfile);\n       }\n \n   /* Do nothing if this is a dummy psymtab.  */\n@@ -4664,6 +4662,7 @@ new_psymtab (const char *name, struct objfile *objfile)\n \n   /* The way to turn this into a symtab is to call...  */\n   psymtab->legacy_read_symtab = mdebug_read_symtab;\n+  psymtab->legacy_expand_psymtab = psymtab_to_symtab_1;\n   return (psymtab);\n }\n "
    },
    {
      "sha": "ae98a69bcc678306e4b0800e5917d7e21f17c3d9",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -129,6 +129,11 @@ struct partial_symtab\n      table.  */\n   virtual void read_symtab (struct objfile *) = 0;\n \n+  /* Psymtab expansion is done in two steps.  The first step is a call\n+     to read_symtab; but while that is in progress, calls to\n+     expand_psymtab can be made.  */\n+  virtual void expand_psymtab (struct objfile *) = 0;\n+\n   /* Return the raw low text address of this partial_symtab.  */\n   CORE_ADDR raw_text_low () const\n   {\n@@ -311,11 +316,21 @@ struct legacy_psymtab : public partial_symtab\n       (*legacy_read_symtab) (this, objf);\n   }\n \n+  void expand_psymtab (struct objfile *objf) override\n+  {\n+    (*legacy_expand_psymtab) (this, objf);\n+  }\n+\n   /* Pointer to function which will read in the symtab corresponding to\n      this psymtab.  */\n \n   void (*legacy_read_symtab) (legacy_psymtab *, struct objfile *) = nullptr;\n \n+  /* Pointer to function which will actually expand this psymtab into\n+     a full symtab.  */\n+\n+  void (*legacy_expand_psymtab) (legacy_psymtab *, struct objfile *) = nullptr;\n+\n   /* Information that lets read_symtab() locate the part of the symbol table\n      that this psymtab corresponds to.  This information is private to the\n      format-dependent symbol reading routines.  For further detail examine"
    },
    {
      "sha": "1c0db67f05b5d5aed1cc0e4c31771342585500f5",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8566b89b737eef50f67bf23329b4606cf7973de1/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=8566b89b737eef50f67bf23329b4606cf7973de1",
      "patch": "@@ -1817,7 +1817,7 @@ find_linenos (struct bfd *abfd, struct bfd_section *asect, void *vpinfo)\n }\n \f\n static void\n-xcoff_psymtab_to_symtab_1 (struct objfile *objfile, legacy_psymtab *pst)\n+xcoff_psymtab_to_symtab_1 (legacy_psymtab *pst, struct objfile *objfile)\n {\n   int i;\n \n@@ -1847,8 +1847,7 @@ xcoff_psymtab_to_symtab_1 (struct objfile *objfile, legacy_psymtab *pst)\n \t    wrap_here (\"\");\t/* Flush output */\n \t    gdb_flush (gdb_stdout);\n \t  }\n-\txcoff_psymtab_to_symtab_1 (objfile,\n-\t\t\t\t   (legacy_psymtab *) pst->dependencies[i]);\n+\tpst->dependencies[i]->expand_psymtab (objfile);\n       }\n \n   if (((struct symloc *) pst->read_symtab_private)->numsyms != 0)\n@@ -1876,7 +1875,7 @@ xcoff_read_symtab (legacy_psymtab *self, struct objfile *objfile)\n     {\n       next_symbol_text_func = xcoff_next_symbol_text;\n \n-      xcoff_psymtab_to_symtab_1 (objfile, self);\n+      self->expand_psymtab (objfile);\n \n       /* Match with global symbols.  This only needs to be done once,\n          after all of the symtabs and dependencies have been read in.   */\n@@ -1997,6 +1996,7 @@ xcoff_start_psymtab (struct objfile *objfile,\n     XOBNEW (&objfile->objfile_obstack, struct symloc);\n   ((struct symloc *) result->read_symtab_private)->first_symnum = first_symnum;\n   result->legacy_read_symtab = xcoff_read_symtab;\n+  result->legacy_expand_psymtab = xcoff_psymtab_to_symtab_1;\n \n   /* Deduce the source language from the filename for this psymtab.  */\n   psymtab_language = deduce_language_from_filename (filename);\n@@ -2059,6 +2059,7 @@ xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n       subpst->number_of_dependencies = 1;\n \n       subpst->legacy_read_symtab = pst->legacy_read_symtab;\n+      subpst->legacy_expand_psymtab = pst->legacy_expand_psymtab;\n     }\n \n   if (num_includes == 0"
    }
  ]
}