{
  "sha": "9307efbe9eb58fb041d09b1e35cffd377d20e708",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTMwN2VmYmU5ZWI1OGZiMDQxZDA5YjFlMzVjZmZkMzc3ZDIwZTcwOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-02T15:40:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-02T15:42:12Z"
    },
    "message": "gdb/testsuite: add test for .debug_{rng,loc}lists section without offset array\n\nIt is possible for the tables in the .debug_{rng,loc}lists sections to\nnot have an array of offsets.  In that case, the offset_entry_count\nfield of the header is 0.  The forms DW_FORM_{rng,loc}listx (reference\nby index) can't be used with that table.  Instead, the\nDW_FORM_sec_offset form, which references a {rng,loc}list by direct\noffset in the section, must be used.  From what I saw, this is what GCC\ncurrently produces.\n\nAdd tests for this case.  I didn't see any bug related to this, I just\nthink that it would be nice to have coverage for this. A new\n`-with-offset-array` option is added to the `table` procs, used when\ngenerating {rng,loc}lists, to decide whether to generate the offset\narray.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/dwarf.exp (rnglists): Add -no-offset-array option to\n\ttable proc.\n\t* gdb.dwarf2/rnglists-sec-offset.exp: Add test for\n\t.debug_rnglists table without offset array.\n\t* gdb.dwarf2/loclists-sec-offset.exp: Add test for\n\t.debug_loclists table without offset array.\n\nChange-Id: I8e34a7bf68c9682215ffbbf66600da5b7db91ef7",
    "tree": {
      "sha": "4d059caa8700fb10faf6b8703d5c99a544b871b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d059caa8700fb10faf6b8703d5c99a544b871b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9307efbe9eb58fb041d09b1e35cffd377d20e708",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9307efbe9eb58fb041d09b1e35cffd377d20e708",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9307efbe9eb58fb041d09b1e35cffd377d20e708",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9307efbe9eb58fb041d09b1e35cffd377d20e708/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e57933dc9cda3292f0baadbf80ff07d398566abb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e57933dc9cda3292f0baadbf80ff07d398566abb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e57933dc9cda3292f0baadbf80ff07d398566abb"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 164,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f980bac89aacc9639ec4090ffef236028fd4a42a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9307efbe9eb58fb041d09b1e35cffd377d20e708",
      "patch": "@@ -1,3 +1,12 @@\n+2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* lib/dwarf.exp (rnglists): Add -no-offset-array option to\n+\ttable proc.\n+\t* gdb.dwarf2/rnglists-sec-offset.exp: Add test for\n+\t.debug_rnglists table without offset array.\n+\t* gdb.dwarf2/loclists-sec-offset.exp: Add test for\n+\t.debug_loclists table without offset array.\n+\n 2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.dwarf2/rnglists-sec-offset.exp: Add test for DW_AT_ranges"
    },
    {
      "sha": "f8076406463f16d47548c8bfd8cf1955f80821ae",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c?ref=9307efbe9eb58fb041d09b1e35cffd377d20e708",
      "patch": "@@ -43,11 +43,27 @@ func4 (void)\n   return 4;\n }\n \n+static int\n+func5 (void)\n+{\n+  asm (\"func5_label: .global func5_label\\n\");\n+  return 5;\n+}\n+\n+static int\n+func6 (void)\n+{\n+  asm (\"func6_label: .global func6_label\\n\");\n+  return 6;\n+}\n+\n int\n main (void)\n {\n   func1 ();\n   func2 ();\n   func3 ();\n   func4 ();\n+  func5 ();\n+  func6 ();\n }"
    },
    {
      "sha": "573324af3d17ea2e84330c54ed77710feb6cf5a0",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "status": "modified",
      "additions": 69,
      "deletions": 1,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp?ref=9307efbe9eb58fb041d09b1e35cffd377d20e708",
      "patch": "@@ -37,13 +37,17 @@ foreach_with_prefix is_64 {false true} {\n     lassign [function_range func2 $srcdir/$subdir/$srcfile] func2_addr func2_len\n     lassign [function_range func3 $srcdir/$subdir/$srcfile] func3_addr func3_len\n     lassign [function_range func4 $srcdir/$subdir/$srcfile] func4_addr func4_len\n+    lassign [function_range func5 $srcdir/$subdir/$srcfile] func5_addr func5_len\n+    lassign [function_range func6 $srcdir/$subdir/$srcfile] func6_addr func6_len\n \n     set asm_file [standard_output_file $srcfile2]\n     Dwarf::assemble $asm_file {\n \tglobal func1_addr func1_len\n \tglobal func2_addr func2_len\n \tglobal func3_addr func3_len\n \tglobal func4_addr func4_len\n+\tglobal func5_addr func5_len\n+\tglobal func6_addr func6_len\n \tglobal is_64\n \n \tdeclare_labels cu_range_list foo_range_list\n@@ -56,7 +60,10 @@ foreach_with_prefix is_64 {false true} {\n \t} {\n \t    declare_labels int_type1\n \t    declare_labels int_type2\n-\t    declare_labels foo_location_list bar_location_list\n+\t    declare_labels int_type3\n+\t    declare_labels foo_location_list\n+\t    declare_labels bar_location_list\n+\t    declare_labels baz_location_list\n \n \t    DW_TAG_compile_unit {\n \t    } {\n@@ -123,6 +130,41 @@ foreach_with_prefix is_64 {false true} {\n \t    }\n \t}\n \n+\t# This CU uses the DW_FORM_sec_offset form to refer to the\n+\t# .debug_loclists section.  The corresponding contribution in the\n+\t# .debug_loclists section has no offset array.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    DW_TAG_compile_unit {\n+\t    } {\n+\t\tint_type3: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n+\t\t}\n+\n+\t\tDW_TAG_variable {\n+\t\t    {DW_AT_name \"baz\"}\n+\t\t    {DW_AT_location $baz_location_list DW_FORM_sec_offset}\n+\t\t    {DW_AT_type :$int_type3}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func5\"}\n+\t\t    {DW_AT_low_pc $func5_addr}\n+\t\t    {DW_AT_high_pc $func5_len DW_FORM_udata}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func6\"}\n+\t\t    {DW_AT_low_pc $func6_addr}\n+\t\t    {DW_AT_high_pc $func6_len DW_FORM_udata}\n+\t\t}\n+\t    }\n+\t}\n+\n \tloclists -is-64 $is_64 {\n \t    # The lists in this table are accessed by direct offset\n \t    # (DW_FORM_sec_offset).\n@@ -153,6 +195,20 @@ foreach_with_prefix is_64 {false true} {\n \t\t    }\n \t\t}\n \t    }\n+\n+\t    table -with-offset-array false {\n+\t\tbaz_location_list: list_ {\n+\t\t    start_length $func5_addr $func5_len {\n+\t\t\tDW_OP_constu 0x567890\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\n+\t\t    start_length $func6_addr $func6_len {\n+\t\t\tDW_OP_constu 0x678901\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n     }\n \n@@ -170,6 +226,8 @@ foreach_with_prefix is_64 {false true} {\n     gdb_breakpoint \"func2\"\n     gdb_breakpoint \"func3\"\n     gdb_breakpoint \"func4\"\n+    gdb_breakpoint \"func5\"\n+    gdb_breakpoint \"func6\"\n \n     gdb_continue_to_breakpoint \"func1\"\n     with_test_prefix \"at func1\" {\n@@ -190,4 +248,14 @@ foreach_with_prefix is_64 {false true} {\n     with_test_prefix \"at func4\" {\n \tgdb_test \"print /x bar\" \" = 0x456789\"\n     }\n+\n+    gdb_continue_to_breakpoint \"func5\"\n+    with_test_prefix \"at func5\" {\n+\tgdb_test \"print /x baz\" \" = 0x567890\"\n+    }\n+\n+    gdb_continue_to_breakpoint \"func6\"\n+    with_test_prefix \"at func6\" {\n+\tgdb_test \"print /x baz\" \" = 0x678901\"\n+    }\n }"
    },
    {
      "sha": "0733e90abc74f05b65d12c4184b75032fb552029",
      "filename": "gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "status": "modified",
      "additions": 32,
      "deletions": 2,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/rnglists-sec-offset.exp?ref=9307efbe9eb58fb041d09b1e35cffd377d20e708",
      "patch": "@@ -35,8 +35,8 @@ foreach_with_prefix is_64 {false true} {\n     Dwarf::assemble $asm_file {\n \tglobal is_64\n \n-\tdeclare_labels cu1_range_list cu2_range_list\n-\tdeclare_labels foo_range_list bar_range_list\n+\tdeclare_labels cu1_range_list cu2_range_list cu3_range_list\n+\tdeclare_labels foo_range_list bar_range_list baz_range_list\n \n \t# This CU uses the DW_FORM_sec_offset form to refer to the .debug_rnglists\n \t# section.\n@@ -73,6 +73,23 @@ foreach_with_prefix is_64 {false true} {\n \t    }\n \t}\n \n+\t# This CU uses the DW_FORM_sec_offset form to refer to the .debug_rnglists\n+\t# section.  The corresponding contribution in the .debug_rnglists has no\n+\t# offset array.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_ranges $cu3_range_list DW_FORM_sec_offset}\n+\t    } {\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"baz\"}\n+\t\t    {DW_AT_ranges $baz_range_list DW_FORM_sec_offset}\n+\t\t}\n+\t    }\n+\t}\n+\n \trnglists -is-64 $is_64 {\n \t    # The lists in this table are accessed by direct offset\n \t    # (DW_FORM_sec_offset).\n@@ -99,6 +116,18 @@ foreach_with_prefix is_64 {false true} {\n \t\t    start_end 0x5000 0x5010\n \t\t}\n \t    }\n+\n+\t    table -with-offset-array false {\n+\t\t# For the third CU.\n+\t\tcu3_range_list: list_ {\n+\t\t    start_end 0x6000 0x7000\n+\t\t}\n+\n+\t\t# For the baz function.\n+\t\tbaz_range_list: list_ {\n+\t\t    start_end 0x6000 0x6010\n+\t\t}\n+\t    }\n \t}\n     }\n \n@@ -110,4 +139,5 @@ foreach_with_prefix is_64 {false true} {\n     # Sanity checks to make sure GDB slurped the symbols correctly.\n     gdb_test \"p/x &foo\" \" = 0x4000\"\n     gdb_test \"p/x &bar\" \" = 0x5000\"\n+    gdb_test \"p/x &baz\" \" = 0x6000\"\n }"
    },
    {
      "sha": "10fd88f6e0fac919c31d0d9d23050320a41e6903",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 38,
      "deletions": 10,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9307efbe9eb58fb041d09b1e35cffd377d20e708/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=9307efbe9eb58fb041d09b1e35cffd377d20e708",
      "patch": "@@ -1392,14 +1392,21 @@ namespace eval Dwarf {\n \t# The -post-header-label option can be used to define a label just after\n \t# the header of the table.  This is the label that a DW_AT_rnglists_base\n \t# attribute will usually refer to.\n+\t#\n+\t# The `-with-offset-array true|false` option can be used to control\n+\t# whether the headers of the location list tables have an array of\n+\t# offset.  The default is true.\n \n \tproc table { args } {\n \t    variable _debug_rnglists_table_count\n \t    variable _debug_rnglists_addr_size\n \t    variable _debug_rnglists_offset_size\n \t    variable _debug_rnglists_is_64_dwarf\n \n-\t    parse_args {{post-header-label \"\"}}\n+\t    parse_args {\n+\t\t{post-header-label \"\"}\n+\t\t{with-offset-array true}\n+\t    }\n \n \t    if { [llength $args] != 1 } {\n \t\terror \"table proc expects one positional argument (body)\"\n@@ -1477,7 +1484,12 @@ namespace eval Dwarf {\n \t    _op .2byte 5 \"dwarf version\"\n \t    _op .byte $_debug_rnglists_addr_size \"address size\"\n \t    _op .byte 0 \"segment selector size\"\n-\t    _op .4byte \"$_debug_rnglists_list_count\" \"offset entry count\"\n+\n+\t    if { ${with-offset-array} } {\n+\t      _op .4byte \"$_debug_rnglists_list_count\" \"offset entry count\"\n+\t    } else {\n+\t      _op .4byte 0 \"offset entry count\"\n+\t    }\n \n \t    define_label $post_header_label\n \n@@ -1487,9 +1499,11 @@ namespace eval Dwarf {\n \t    }\n \n \t    # Emit the offset array.\n-\t    for {set list_idx 0} {$list_idx < $_debug_rnglists_list_count} {incr list_idx} {\n-\t\tset list_label [_compute_list_label $list_idx]\n-\t\t_op .${_debug_rnglists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t    if { ${with-offset-array} } {\n+\t\tfor {set list_idx 0} {$list_idx < $_debug_rnglists_list_count} {incr list_idx} {\n+\t\t    set list_label [_compute_list_label $list_idx]\n+\t\t    _op .${_debug_rnglists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t\t}\n \t    }\n \n \t    # Emit the actual list data.\n@@ -1565,14 +1579,21 @@ namespace eval Dwarf {\n \t# The -post-header-label option can be used to define a label just after the\n \t# header of the table.  This is the label that a DW_AT_loclists_base\n \t# attribute will usually refer to.\n+\t#\n+\t# The `-with-offset-array true|false` option can be used to control\n+\t# whether the headers of the location list tables have an array of\n+\t# offset.  The default is true.\n \n \tproc table { args } {\n \t    variable _debug_loclists_table_count\n \t    variable _debug_loclists_addr_size\n \t    variable _debug_loclists_offset_size\n \t    variable _debug_loclists_is_64_dwarf\n \n-\t    parse_args {{post-header-label \"\"}}\n+\t    parse_args {\n+\t\t{post-header-label \"\"}\n+\t\t{with-offset-array true}\n+\t    }\n \n \t    if { [llength $args] != 1 } {\n \t\terror \"table proc expects one positional argument (body)\"\n@@ -1672,7 +1693,12 @@ namespace eval Dwarf {\n \t    _op .2byte 5 \"DWARF version\"\n \t    _op .byte $_debug_loclists_addr_size \"address size\"\n \t    _op .byte 0 \"segment selector size\"\n-\t    _op .4byte $_debug_loclists_list_count \"offset entry count\"\n+\n+\t    if { ${with-offset-array} } {\n+\t      _op .4byte \"$_debug_loclists_list_count\" \"offset entry count\"\n+\t    } else {\n+\t      _op .4byte 0 \"offset entry count\"\n+\t    }\n \n \t    define_label $post_header_label\n \n@@ -1682,9 +1708,11 @@ namespace eval Dwarf {\n \t    }\n \n \t    # Emit the offset array.\n-\t    for {set list_idx 0} {$list_idx < $_debug_loclists_list_count} {incr list_idx} {\n-\t\tset list_label [_compute_list_label $list_idx]\n-\t\t_op .${_debug_loclists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t    if { ${with-offset-array} } {\n+\t\tfor {set list_idx 0} {$list_idx < $_debug_loclists_list_count} {incr list_idx} {\n+\t\t    set list_label [_compute_list_label $list_idx]\n+\t\t    _op .${_debug_loclists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t\t}\n \t    }\n \n \t    # Emit the actual list data."
    }
  ]
}