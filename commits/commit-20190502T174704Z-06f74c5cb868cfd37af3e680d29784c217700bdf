{
  "sha": "06f74c5cb868cfd37af3e680d29784c217700bdf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDZmNzRjNWNiODY4Y2ZkMzdhZjNlNjgwZDI5Nzg0YzIxNzcwMGJkZg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-05-02T17:46:55Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-05-02T17:47:04Z"
    },
    "message": "i386: Issue a warning to IRET without suffix for .code16gcc\n\nThe .code16gcc directive to support 16-bit mode with 32-bit address.\nFor IRET without a suffix, generate 16-bit IRET with a warning to\nreturn from an interrupt handler in 16-bit mode.\n\n\tPR gas/24485\n\t* config/tc-i386.c (process_suffix): Issue a warning to IRET\n\twithout a suffix for .code16gcc.\n\t* testsuite/gas/i386/jump16.s: Add tests for iretX.\n\t* testsuite/gas/i386/jump16.d: Updated.\n\t* testsuite/gas/i386/jump16.e: New file.",
    "tree": {
      "sha": "cb19afcc9839414386df4b0e684604ea6d2a17ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb19afcc9839414386df4b0e684604ea6d2a17ae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06f74c5cb868cfd37af3e680d29784c217700bdf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06f74c5cb868cfd37af3e680d29784c217700bdf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06f74c5cb868cfd37af3e680d29784c217700bdf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06f74c5cb868cfd37af3e680d29784c217700bdf/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b8c05e85ef4ce9610a3a43198180cf24aea327cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8c05e85ef4ce9610a3a43198180cf24aea327cb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b8c05e85ef4ce9610a3a43198180cf24aea327cb"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 46,
    "deletions": 7
  },
  "files": [
    {
      "sha": "8a82fdecbe66ed885fc2767b0d1eab29bfa42319",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=06f74c5cb868cfd37af3e680d29784c217700bdf",
      "patch": "@@ -1,3 +1,12 @@\n+2019-05-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR gas/24485\n+\t* config/tc-i386.c (process_suffix): Issue a warning to IRET\n+\twithout a suffix for .code16gcc.\n+\t* testsuite/gas/i386/jump16.s: Add tests for iretX.\n+\t* testsuite/gas/i386/jump16.d: Updated.\n+\t* testsuite/gas/i386/jump16.e: New file.\n+\n 2019-05-01  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/tc-aarch64.c (parse_operands): Add case for"
    },
    {
      "sha": "7159432f1330512b5a8f839e6fc05ed35ae89bf3",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=06f74c5cb868cfd37af3e680d29784c217700bdf",
      "patch": "@@ -6242,7 +6242,19 @@ process_suffix (void)\n \t   /* exclude fldenv/frstor/fsave/fstenv */\n \t   && i.tm.opcode_modifier.no_ssuf)\n     {\n-      i.suffix = stackop_size;\n+      if (stackop_size == LONG_MNEM_SUFFIX\n+\t  && i.tm.base_opcode == 0xcf)\n+\t{\n+\t  /* stackop_size is set to LONG_MNEM_SUFFIX for the\n+\t     .code16gcc directive to support 16-bit mode with\n+\t     32-bit address.  For IRET without a suffix, generate\n+\t     16-bit IRET (opcode 0xcf) to return from an interrupt\n+\t     handler.  */\n+\t  i.suffix = WORD_MNEM_SUFFIX;\n+\t  as_warn (_(\"generating 16-bit `iret' for .code16gcc directive\"));\n+\t}\n+      else\n+\ti.suffix = stackop_size;\n     }\n   else if (intel_syntax\n \t   && !i.suffix\n@@ -6352,13 +6364,7 @@ process_suffix (void)\n \t    if (!add_prefix (ADDR_PREFIX_OPCODE))\n \t      return 0;\n \t}\n-      /* stackop_size is set to LONG_MNEM_SUFFIX for the .code16gcc\n-\t directive to support 16bit mode with 32-bit address.  Since\n-\t IRET (opcode 0xcf) in 16bit mode returns from an interrupt\n-\t in 16bit mode, we shouldn't add DATA_PREFIX_OPCODE here.  */\n       else if (i.suffix != QWORD_MNEM_SUFFIX\n-\t       && (stackop_size != LONG_MNEM_SUFFIX\n-\t\t   || i.tm.base_opcode != 0xcf)\n \t       && !i.tm.opcode_modifier.ignoresize\n \t       && !i.tm.opcode_modifier.floatmf\n \t       && !i.tm.opcode_modifier.vex"
    },
    {
      "sha": "c883eba0e85088ef6574f53c7dc25afd9f8297b9",
      "filename": "gas/testsuite/gas/i386/jump16.d",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/jump16.d?ref=06f74c5cb868cfd37af3e680d29784c217700bdf",
      "patch": "@@ -1,5 +1,6 @@\n #name: i386 jump16\n #objdump: -drw -mi8086\n+#warning_output: jump16.e\n \n .*:     file format .*i386.*\n \n@@ -69,4 +70,8 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\tea 00 00 90 90       \tljmp   \\$0x9090,\\$0x0\tf2: (R_386_)?16\txxx\n [ \t]*[a-f0-9]+:\tcf                   \tiret   \n [ \t]*[a-f0-9]+:\tcf                   \tiret   \n+[ \t]*[a-f0-9]+:\t66 cf                \tiretl  \n+[ \t]*[a-f0-9]+:\tcf                   \tiret   \n+[ \t]*[a-f0-9]+:\tcf                   \tiret   \n+[ \t]*[a-f0-9]+:\t66 cf                \tiretl  \n #pass"
    },
    {
      "sha": "2ad7ea056b61ae59a843f845323f637c4840b26e",
      "filename": "gas/testsuite/gas/i386/jump16.e",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.e",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.e",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/jump16.e?ref=06f74c5cb868cfd37af3e680d29784c217700bdf",
      "patch": "@@ -0,0 +1,3 @@\n+.*: Assembler messages:\n+.*:77: Warning: generating 16-bit `iret' for .code16gcc directive\n+.*:88: Warning: generating 16-bit `iret' for .code16gcc directive"
    },
    {
      "sha": "fb9e830c52b532fed1fe5ae46d70c8049bad63ac",
      "filename": "gas/testsuite/gas/i386/jump16.s",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06f74c5cb868cfd37af3e680d29784c217700bdf/gas/testsuite/gas/i386/jump16.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/jump16.s?ref=06f74c5cb868cfd37af3e680d29784c217700bdf",
      "patch": "@@ -72,8 +72,24 @@\n \tjmp\t0x9090,xxx\n \tjmp\t0x9090:xxx\n \n+\t.att_syntax\n .code16gcc\n \tiret\n+\tiretw\n+\tiretl\n \n .code16\n \tiret\n+\tiretw\n+\tiretl\n+\n+\t.intel_syntax noprefix\n+.code16gcc\n+\tiret\n+\tiretw\n+\tiretd\n+\n+.code16\n+\tiret\n+\tiretw\n+\tiretd"
    }
  ]
}