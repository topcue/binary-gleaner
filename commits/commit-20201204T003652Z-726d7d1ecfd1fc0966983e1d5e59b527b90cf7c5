{
  "sha": "726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzI2ZDdkMWVjZmQxZmMwOTY2OTgzZTFkNWU1OWI1MjdiOTBjZjdjNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-02T02:33:23Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-04T00:36:52Z"
    },
    "message": "PR26978, Inconsistency for strong foo@v1 and weak foo@@v1\n\nPrior to this patch\n  ld -shared --version-script=pr26979.ver pr26978a.o pr26978b.o\nresults in\n  ld: pr26978b.o: in function `foo_v1':\n  (.text+0x0): multiple definition of `foo@v1'\n  ld: pr26978b.o:(*IND*+0x0): multiple definition of `foo'\nwhile\n  ld -shared --version-script=pr26979.ver pr26978b.o pr26978a.o\nresults in no error, but some odd dynamic symbols.\n  ... 0 NOTYPE  GLOBAL DEFAULT    7 foo@v1\n  ... 0 NOTYPE  WEAK   DEFAULT    7 foo@@v1\n\nWhen linking an undecorated reference to foo against such a shared\nlibrary, ld complains about multiple definitions of foo@v1 while gold\ncreates a dynamic reference to foo@v1.  That results in foo@v1 being\nused at runtime.\n\nWhile we could error in both cases, it is reasonable to say foo@v1 and\nfoo@@v1 are in fact the same symbol.  (Same name, same version.  The\nonly real difference is that foo@@v1 satisfies a reference to plain\nfoo, while foo@v1 does not.)  Just as merging a weak undecorated sym\nwith a strong sym results in the strong sym prevailing, so should the\nstrong foo@v1 prevail.  And since there is a definition that satisfies\nplain foo, the foo@@v1 variety of dynamic symbol should be emitted at\nthe foo@v1 value.  That makes the testcase that currently links\ncontinue to produce a shared library, and that shared library can now\nbe used by both ld and gold with the same runtime behaviour as when\nusing gold with the odd dynamic symbol library.\n\nbfd/\n\tPR 26978\n\t* elflink.c (_bfd_elf_add_default_symbol): Handle the case where\n\ta new weak sym@@ver should be overridden by an existing sym@ver.\n\t(elf_link_add_object_symbols): Don't _bfd_elf_add_default_symbol\n\tfor a new weak sym@ver when sym@@ver already exists.\n\t* linker.c (link_action): Choose MIND for previous indirect,\n\tcurrent def, rather than MDEF.\n\t(_bfd_generic_link_add_one_symbol <MIND>): Handle redefinition of\n\tweak indirect symbol.\nld/\n\t* testsuite/ld-elf/pr26978a.d,\n\t* testsuite/ld-elf/pr26978a.s,\n\t* testsuite/ld-elf/pr26978b.d,\n\t* testsuite/ld-elf/pr26978b.s: New tests.",
    "tree": {
      "sha": "5731f99318bf1845bb2b7db1b6ed1fa1faedfcc9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5731f99318bf1845bb2b7db1b6ed1fa1faedfcc9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "099ee20ac320addfdf4ce5bf0522e15f86d590f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/099ee20ac320addfdf4ce5bf0522e15f86d590f3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/099ee20ac320addfdf4ce5bf0522e15f86d590f3"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 112,
    "deletions": 33
  },
  "files": [
    {
      "sha": "fa29df22676b81fde81c191c4cb940308dea9bab",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -1,3 +1,15 @@\n+2020-12-04  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26978\n+\t* elflink.c (_bfd_elf_add_default_symbol): Handle the case where\n+\ta new weak sym@@ver should be overridden by an existing sym@ver.\n+\t(elf_link_add_object_symbols): Don't _bfd_elf_add_default_symbol\n+\tfor a new weak sym@ver when sym@@ver already exists.\n+\t* linker.c (link_action): Choose MIND for previous indirect,\n+\tcurrent def, rather than MDEF.\n+\t(_bfd_generic_link_add_one_symbol <MIND>): Handle redefinition of\n+\tweak indirect symbol.\n+\n 2020-12-01  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.c (riscv_parse_prefixed_ext): Use riscv_compare_subsets"
    },
    {
      "sha": "29b46f1568db10cda14dff9175c18a5bbade3f49",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 51,
      "deletions": 32,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -2078,9 +2078,26 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n     return FALSE;\n \n   if (skip)\n-    return TRUE;\n-\n-  if (override)\n+    {\n+      if (!dynamic\n+\t  && h->root.type == bfd_link_hash_defweak\n+\t  && hi->root.type == bfd_link_hash_defined)\n+\t{\n+\t  /* We are handling a weak sym@@ver and attempting to define\n+\t     a weak sym@ver, but _bfd_elf_merge_symbol said to skip the\n+\t     new weak sym@ver because there is already a strong sym@ver.\n+\t     However, sym@ver and sym@@ver are really the same symbol.\n+\t     The existing strong sym@ver ought to override sym@@ver.  */\n+\t  h->root.type = bfd_link_hash_defined;\n+\t  h->root.u.def.section = hi->root.u.def.section;\n+\t  h->root.u.def.value = hi->root.u.def.value;\n+\t  hi->root.type = bfd_link_hash_indirect;\n+\t  hi->root.u.i.link = &h->root;\n+\t}\n+      else\n+\treturn TRUE;\n+    }\n+  else if (override)\n     {\n       /* Here SHORTNAME is a versioned name, so we don't expect to see\n \t the type of override we do in the case above unless it is\n@@ -2091,6 +2108,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n \t  /* xgettext:c-format */\n \t  (_(\"%pB: unexpected redefinition of indirect versioned symbol `%s'\"),\n \t   abfd, shortname);\n+      return TRUE;\n     }\n   else\n     {\n@@ -2100,37 +2118,36 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n \t      bfd_ind_section_ptr, 0, name, FALSE, collect, &bh)))\n \treturn FALSE;\n       hi = (struct elf_link_hash_entry *) bh;\n+    }\n \n-      /* If there is a duplicate definition somewhere, then HI may not\n-\t point to an indirect symbol.  We will have reported an error\n-\t to the user in that case.  */\n-\n-      if (hi->root.type == bfd_link_hash_indirect)\n-\t{\n-\t  (*bed->elf_backend_copy_indirect_symbol) (info, h, hi);\n-\t  h->ref_dynamic_nonweak |= hi->ref_dynamic_nonweak;\n-\t  hi->dynamic_def |= h->dynamic_def;\n+  /* If there is a duplicate definition somewhere, then HI may not\n+     point to an indirect symbol.  We will have reported an error\n+     to the user in that case.  */\n+  if (hi->root.type == bfd_link_hash_indirect)\n+    {\n+      (*bed->elf_backend_copy_indirect_symbol) (info, h, hi);\n+      h->ref_dynamic_nonweak |= hi->ref_dynamic_nonweak;\n+      hi->dynamic_def |= h->dynamic_def;\n \n-\t  /* If we first saw a reference to @VER symbol with\n-\t     non-default visibility, merge that visibility to the\n-\t     @@VER symbol.  */\n-\t  elf_merge_st_other (abfd, h, hi->other, sec, TRUE, dynamic);\n+      /* If we first saw a reference to @VER symbol with\n+\t non-default visibility, merge that visibility to the\n+\t @@VER symbol.  */\n+      elf_merge_st_other (abfd, h, hi->other, sec, TRUE, dynamic);\n \n-\t  /* See if the new flags lead us to realize that the symbol\n-\t     must be dynamic.  */\n-\t  if (! *dynsym)\n+      /* See if the new flags lead us to realize that the symbol\n+\t must be dynamic.  */\n+      if (! *dynsym)\n+\t{\n+\t  if (! dynamic)\n \t    {\n-\t      if (! dynamic)\n-\t\t{\n-\t\t  if (! bfd_link_executable (info)\n-\t\t      || hi->ref_dynamic)\n-\t\t    *dynsym = TRUE;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (hi->ref_regular)\n-\t\t    *dynsym = TRUE;\n-\t\t}\n+\t      if (! bfd_link_executable (info)\n+\t\t  || hi->ref_dynamic)\n+\t\t*dynsym = TRUE;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (hi->ref_regular)\n+\t\t*dynsym = TRUE;\n \t    }\n \t}\n     }\n@@ -5060,8 +5077,10 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n \t  /* Check to see if we need to add an indirect symbol for\n \t     the default name.  */\n-\t  if (definition\n-\t      || (!override && h->root.type == bfd_link_hash_common))\n+\t  if ((definition\n+\t       || (!override && h->root.type == bfd_link_hash_common))\n+\t      && !(hi != h\n+\t\t   && hi->versioned == versioned_hidden))\n \t    if (!_bfd_elf_add_default_symbol (abfd, info, h, name, isym,\n \t\t\t\t\t      sec, value, &old_bfd, &dynsym))\n \t      goto error_free_vers;"
    },
    {
      "sha": "6008a4452ea0c0a31a9f00f4ef33584023312f5e",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -1301,7 +1301,7 @@ static const enum link_action link_action[8][8] =\n   /* current\\prev    new    undef  undefw def    defw   com    indr   warn  */\n   /* UNDEF_ROW\t*/  {UND,   NOACT, UND,   REF,   REF,   NOACT, REFC,  WARNC },\n   /* UNDEFW_ROW\t*/  {WEAK,  NOACT, NOACT, REF,   REF,   NOACT, REFC,  WARNC },\n-  /* DEF_ROW\t*/  {DEF,   DEF,   DEF,   MDEF,  DEF,   CDEF,  MDEF,  CYCLE },\n+  /* DEF_ROW\t*/  {DEF,   DEF,   DEF,   MDEF,  DEF,   CDEF,  MIND,  CYCLE },\n   /* DEFW_ROW\t*/  {DEFW,  DEFW,  DEFW,  NOACT, NOACT, NOACT, NOACT, CYCLE },\n   /* COMMON_ROW\t*/  {COM,   COM,   COM,   CREF,  COM,   BIG,   REFC,  WARNC },\n   /* INDR_ROW\t*/  {IND,   IND,   IND,   MDEF,  IND,   CIND,  MIND,  CYCLE },\n@@ -1672,6 +1672,17 @@ _bfd_generic_link_add_one_symbol (struct bfd_link_info *info,\n \tcase MIND:\n \t  /* Multiple indirect symbols.  This is OK if they both point\n \t     to the same symbol.  */\n+\t  if (h->u.i.link->type == bfd_link_hash_defweak)\n+\t    {\n+\t      /* It is also OK to redefine a symbol that indirects to\n+\t\t a weak definition.  So for sym@ver -> sym@@ver where\n+\t\t sym@@ver is weak and we have a new strong sym@ver,\n+\t\t redefine sym@@ver.  Of course if there exists\n+\t\t sym -> sym@@ver then this also redefines sym.  */\n+\t      h = h->u.i.link;\n+\t      cycle = TRUE;\n+\t      break;\n+\t    }\n \t  if (strcmp (h->u.i.link->root.string, string) == 0)\n \t    break;\n \t  /* Fall through.  */"
    },
    {
      "sha": "0bbb576c56286698c2e30d0cd28ac399a8655abf",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-04  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/ld-elf/pr26978a.d,\n+\t* testsuite/ld-elf/pr26978a.s,\n+\t* testsuite/ld-elf/pr26978b.d,\n+\t* testsuite/ld-elf/pr26978b.s: New tests.\n+\n 2020-12-03  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* testsuite/ld-s390/tlsbin_64.dd: The newly added jgnop mnemonic"
    },
    {
      "sha": "969f34bee627a6acf03619f2170b109b9662b0eb",
      "filename": "ld/testsuite/ld-elf/pr26978a.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26978a.d?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -0,0 +1,11 @@\n+#source: pr26978a.s\n+#source: pr26978b.s\n+#target: [check_shared_lib_support]\n+#as:\n+#ld: -shared --version-script=pr26979.ver\n+#readelf: -sW\n+\n+#failif\n+#...\n+.*foo@v1\n+#pass"
    },
    {
      "sha": "abb035d1d052bf64c0fb4d387f96760b9fc20099",
      "filename": "ld/testsuite/ld-elf/pr26978a.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26978a.s?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -0,0 +1,4 @@\n+ .weak foo\n+ .symver foo, foo@@@v1\n+foo:\n+ .octa 0"
    },
    {
      "sha": "fa290860cbb655d3ab9fa315811a879d1b37033e",
      "filename": "ld/testsuite/ld-elf/pr26978b.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26978b.d?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -0,0 +1,11 @@\n+#source: pr26978b.s\n+#source: pr26978a.s\n+#target: [check_shared_lib_support]\n+#as:\n+#ld: -shared --version-script=pr26979.ver\n+#readelf: -sW\n+\n+#failif\n+#...\n+.*foo@v1\n+#pass"
    },
    {
      "sha": "59b6ac207655755416ec746d462665f85037d9eb",
      "filename": "ld/testsuite/ld-elf/pr26978b.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5/ld/testsuite/ld-elf/pr26978b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26978b.s?ref=726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "patch": "@@ -0,0 +1,4 @@\n+ .globl foo_v1\n+ .symver foo_v1, foo@v1\n+foo_v1:\n+ .octa 0"
    }
  ]
}