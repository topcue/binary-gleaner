{
  "sha": "dc1e8a474f904419abaa27da4be5b0f735a87255",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGMxZThhNDc0ZjkwNDQxOWFiYWEyN2RhNGJlNWIwZjczNWE4NzI1NQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-25T05:04:46Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-26T00:07:25Z"
    },
    "message": "Indent labels\n\nLabels don't go in the first column according to standard emacs C\nindent rules, and I got annoyed enough at seeing diff -p show a label\nrather than the function name to fix this.\n\nbfd/\n\t* aoutx.h: Indent labels correctly.  Format error strings.\n\t* archive.c: Likewise.\n\t* archive64.c: Likewise.\n\t* coff-arm.c: Likewise.\n\t* coff-rs6000.c: Likewise.\n\t* coff-stgo32.c: Likewise.\n\t* cpu-arm.c: Likewise.\n\t* dwarf2.c: Likewise.\n\t* elf-ifunc.c: Likewise.\n\t* elf-properties.c: Likewise.\n\t* elf-s390-common.c: Likewise.\n\t* elf-strtab.c: Likewise.\n\t* elf.c: Likewise.\n\t* elf32-arm.c: Likewise.\n\t* elf32-bfin.c: Likewise.\n\t* elf32-cr16.c: Likewise.\n\t* elf32-csky.c: Likewise.\n\t* elf32-i386.c: Likewise.\n\t* elf32-m68k.c: Likewise.\n\t* elf32-msp430.c: Likewise.\n\t* elf32-nds32.c: Likewise.\n\t* elf32-nios2.c: Likewise.\n\t* elf32-pru.c: Likewise.\n\t* elf32-xtensa.c: Likewise.\n\t* elf64-ia64-vms.c: Likewise.\n\t* elf64-x86-64.c: Likewise.\n\t* elfcode.h: Likewise.\n\t* elfcore.h: Likewise.\n\t* elflink.c: Likewise.\n\t* elfnn-aarch64.c: Likewise.\n\t* elfnn-ia64.c: Likewise.\n\t* elfnn-riscv.c: Likewise.\n\t* elfxx-mips.c: Likewise.\n\t* elfxx-sparc.c: Likewise.\n\t* elfxx-x86.c: Likewise.\n\t* i386lynx.c: Likewise.\n\t* merge.c: Likewise.\n\t* pdp11.c: Likewise.\n\t* plugin.c: Likewise.\n\t* reloc.c: Likewise.\nbinutils/\n\t* elfedit.c: Indent labels correctly.\n\t* readelf.c: Likewise.\n\t* resres.c: Likewise.\ngas/\n\t* config/obj-elf.c: Indent labels correctly.\n\t* config/obj-macho.c: Likewise.\n\t* config/tc-aarch64.c: Likewise.\n\t* config/tc-alpha.c: Likewise.\n\t* config/tc-arm.c: Likewise.\n\t* config/tc-cr16.c: Likewise.\n\t* config/tc-crx.c: Likewise.\n\t* config/tc-frv.c: Likewise.\n\t* config/tc-i386-intel.c: Likewise.\n\t* config/tc-i386.c: Likewise.\n\t* config/tc-ia64.c: Likewise.\n\t* config/tc-mn10200.c: Likewise.\n\t* config/tc-mn10300.c: Likewise.\n\t* config/tc-nds32.c: Likewise.\n\t* config/tc-riscv.c: Likewise.\n\t* config/tc-s12z.c: Likewise.\n\t* config/tc-xtensa.c: Likewise.\n\t* config/tc-z80.c: Likewise.\n\t* read.c: Likewise.\n\t* symbols.c: Likewise.\n\t* write.c: Likewise.\nld/\n\t* emultempl/cskyelf.em: Indent labels correctly.\n\t* ldfile.c: Likewise.\n\t* ldlang.c: Likewise.\n\t* plugin.c: Likewise.\nopcodes/\n\t* aarch64-asm.c: Indent labels correctly.\n\t* aarch64-dis.c: Likewise.\n\t* aarch64-gen.c: Likewise.\n\t* aarch64-opc.c: Likewise.\n\t* alpha-dis.c: Likewise.\n\t* i386-dis.c: Likewise.\n\t* nds32-asm.c: Likewise.\n\t* nfp-dis.c: Likewise.\n\t* visium-dis.c: Likewise.",
    "tree": {
      "sha": "d2aa1dc799d96141fa2151d83b95a86d5343a0a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2aa1dc799d96141fa2151d83b95a86d5343a0a8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dc1e8a474f904419abaa27da4be5b0f735a87255",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dc1e8a474f904419abaa27da4be5b0f735a87255",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dc1e8a474f904419abaa27da4be5b0f735a87255",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dc1e8a474f904419abaa27da4be5b0f735a87255/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e310298cf3fc02112ac0018260748828affa4061",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e310298cf3fc02112ac0018260748828affa4061",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e310298cf3fc02112ac0018260748828affa4061"
    }
  ],
  "stats": {
    "total": 546,
    "additions": 323,
    "deletions": 223
  },
  "files": [
    {
      "sha": "ea4808d71ccd369feffe26ca2ad9f4f04063d297",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1,3 +1,46 @@\n+2020-02-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* aoutx.h: Indent labels correctly.  Format error strings.\n+\t* archive.c: Likewise.\n+\t* archive64.c: Likewise.\n+\t* coff-arm.c: Likewise.\n+\t* coff-rs6000.c: Likewise.\n+\t* coff-stgo32.c: Likewise.\n+\t* cpu-arm.c: Likewise.\n+\t* dwarf2.c: Likewise.\n+\t* elf-ifunc.c: Likewise.\n+\t* elf-properties.c: Likewise.\n+\t* elf-s390-common.c: Likewise.\n+\t* elf-strtab.c: Likewise.\n+\t* elf.c: Likewise.\n+\t* elf32-arm.c: Likewise.\n+\t* elf32-bfin.c: Likewise.\n+\t* elf32-cr16.c: Likewise.\n+\t* elf32-csky.c: Likewise.\n+\t* elf32-i386.c: Likewise.\n+\t* elf32-m68k.c: Likewise.\n+\t* elf32-msp430.c: Likewise.\n+\t* elf32-nds32.c: Likewise.\n+\t* elf32-nios2.c: Likewise.\n+\t* elf32-pru.c: Likewise.\n+\t* elf32-xtensa.c: Likewise.\n+\t* elf64-ia64-vms.c: Likewise.\n+\t* elf64-x86-64.c: Likewise.\n+\t* elfcode.h: Likewise.\n+\t* elfcore.h: Likewise.\n+\t* elflink.c: Likewise.\n+\t* elfnn-aarch64.c: Likewise.\n+\t* elfnn-ia64.c: Likewise.\n+\t* elfnn-riscv.c: Likewise.\n+\t* elfxx-mips.c: Likewise.\n+\t* elfxx-sparc.c: Likewise.\n+\t* elfxx-x86.c: Likewise.\n+\t* i386lynx.c: Likewise.\n+\t* merge.c: Likewise.\n+\t* pdp11.c: Likewise.\n+\t* plugin.c: Likewise.\n+\t* reloc.c: Likewise.\n+\n 2020-02-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 25593"
    },
    {
      "sha": "4fb1282fb6e7c294475a502002993d45c7adc1e4",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1901,7 +1901,7 @@ NAME (aout, write_syms) (bfd *abfd)\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   _bfd_stringtab_free (strtab);\n   return FALSE;\n }\n@@ -2381,8 +2381,8 @@ NAME (aout, squirt_out_relocs) (bfd *abfd, asection *section)\n \t      || (*generic)->sym_ptr_ptr == NULL)\n \t    {\n \t      bfd_set_error (bfd_error_invalid_operation);\n-\t      _bfd_error_handler (_(\"\\\n-%pB: attempt to write out unknown reloc type\"), abfd);\n+\t      _bfd_error_handler (_(\"%pB: attempt to write out \"\n+\t\t\t\t    \"unknown reloc type\"), abfd);\n \t      return FALSE;\n \t    }\n \t  MY_swap_ext_reloc_out (abfd, *generic,\n@@ -2399,8 +2399,8 @@ NAME (aout, squirt_out_relocs) (bfd *abfd, asection *section)\n \t      || (*generic)->sym_ptr_ptr == NULL)\n \t    {\n \t      bfd_set_error (bfd_error_invalid_operation);\n-\t      _bfd_error_handler (_(\"\\\n-%pB: attempt to write out unknown reloc type\"), abfd);\n+\t      _bfd_error_handler (_(\"%pB: attempt to write out \"\n+\t\t\t\t    \"unknown reloc type\"), abfd);\n \t      return FALSE;\n \t    }\n \t  MY_swap_std_reloc_out (abfd, *generic,"
    },
    {
      "sha": "1b783c411ace45a3ac99746390a493023704bb1b",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1131,7 +1131,7 @@ do_slurp_coff_armap (bfd *abfd)\n \n   return TRUE;\n \n-release_symdefs:\n+ release_symdefs:\n   bfd_release (abfd, (ardata)->symdefs);\n   return FALSE;\n }"
    },
    {
      "sha": "d4b0c3cf0cf659992196f934d57d09e716587ec1",
      "filename": "bfd/archive64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/archive64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/archive64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -139,7 +139,7 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n \n   return TRUE;\n \n-release_symdefs:\n+ release_symdefs:\n   bfd_release (abfd, ardata->symdefs);\n   return FALSE;\n }"
    },
    {
      "sha": "53e4d3c8ffa45e9bca6a35a20fa0206d053a40f0",
      "filename": "bfd/coff-arm.c",
      "status": "modified",
      "additions": 29,
      "deletions": 21,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2210,7 +2210,8 @@ coff_arm_merge_private_bfd_data (bfd * ibfd, struct bfd_link_info *info)\n \t    {\n \t      _bfd_error_handler\n \t\t/* xgettext: c-format */\n-\t\t(_(\"error: %pB is compiled for APCS-%d, whereas %pB is compiled for APCS-%d\"),\n+\t\t(_(\"error: %pB is compiled for APCS-%d, \"\n+\t\t   \"whereas %pB is compiled for APCS-%d\"),\n \t\t ibfd, APCS_26_FLAG (ibfd) ? 26 : 32,\n \t\t obfd, APCS_26_FLAG (obfd) ? 26 : 32\n \t\t );\n@@ -2223,14 +2224,16 @@ coff_arm_merge_private_bfd_data (bfd * ibfd, struct bfd_link_info *info)\n \t    {\n \t      if (APCS_FLOAT_FLAG (ibfd))\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-error: %pB passes floats in float registers, whereas %pB passes them in integer registers\"),\n-\t\t\t\t    ibfd, obfd);\n+\t\t_bfd_error_handler\n+\t\t  (_(\"error: %pB passes floats in float registers, \"\n+\t\t     \"whereas %pB passes them in integer registers\"),\n+\t\t   ibfd, obfd);\n \t      else\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-error: %pB passes floats in integer registers, whereas %pB passes them in float registers\"),\n-\t\t\t\t    ibfd, obfd);\n+\t\t_bfd_error_handler\n+\t\t  (_(\"error: %pB passes floats in integer registers, \"\n+\t\t     \"whereas %pB passes them in float registers\"),\n+\t\t   ibfd, obfd);\n \n \t      bfd_set_error (bfd_error_wrong_format);\n \t      return FALSE;\n@@ -2240,14 +2243,16 @@ error: %pB passes floats in integer registers, whereas %pB passes them in float\n \t    {\n \t      if (PIC_FLAG (ibfd))\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-error: %pB is compiled as position independent code, whereas target %pB is absolute position\"),\n-\t\t\t\t    ibfd, obfd);\n+\t\t_bfd_error_handler\n+\t\t  (_(\"error: %pB is compiled as position independent code, \"\n+\t\t     \"whereas target %pB is absolute position\"),\n+\t\t   ibfd, obfd);\n \t      else\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-error: %pB is compiled as absolute position code, whereas target %pB is position independent\"),\n-\t\t\t\t    ibfd, obfd);\n+\t\t_bfd_error_handler\n+\t\t  (_(\"error: %pB is compiled as absolute position code, \"\n+\t\t     \"whereas target %pB is position independent\"),\n+\t\t   ibfd, obfd);\n \n \t      bfd_set_error (bfd_error_wrong_format);\n \t      return FALSE;\n@@ -2272,14 +2277,15 @@ error: %pB is compiled as absolute position code, whereas target %pB is position\n \t    {\n \t      if (INTERWORK_FLAG (ibfd))\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-warning: %pB supports interworking, whereas %pB does not\"),\n+\t\t_bfd_error_handler (_(\"warning: %pB supports interworking, \"\n+\t\t\t\t      \"whereas %pB does not\"),\n \t\t\t\t    ibfd, obfd);\n \t      else\n \t\t/* xgettext: c-format */\n-\t\t_bfd_error_handler (_(\"\\\n-warning: %pB does not support interworking, whereas %pB does\"),\n-\t\t\t\t    ibfd, obfd);\n+\t\t_bfd_error_handler\n+\t\t  (_(\"warning: %pB does not support interworking, \"\n+\t\t     \"whereas %pB does\"),\n+\t\t   ibfd, obfd);\n \t    }\n \t}\n       else\n@@ -2428,9 +2434,11 @@ coff_arm_copy_private_bfd_data (bfd * src, bfd * dest)\n \t      if (INTERWORK_FLAG (dest))\n \t\t{\n \t\t  /* xgettext:c-format */\n-\t\t  _bfd_error_handler (_(\"\\\n-warning: clearing the interworking flag of %pB because non-interworking code in %pB has been linked with it\"),\n-\t\t\t\t      dest, src);\n+\t\t  _bfd_error_handler\n+\t\t    (_(\"warning: clearing the interworking flag of %pB \"\n+\t\t       \"because non-interworking code in %pB has been \"\n+\t\t       \"linked with it\"),\n+\t\t     dest, src);\n \t\t}\n \n \t      SET_INTERWORK_FLAG (dest, 0);"
    },
    {
      "sha": "8b8f4725041aa633b99aebebe9e52f0d04b9890b",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -652,7 +652,7 @@ _bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type, int in_class,\n \t\text->x_sym.x_misc.x_lnsz.x_size);\n     }\n \n-end:\n+ end:\n   return bfd_coff_auxesz (abfd);\n }\n \f"
    },
    {
      "sha": "6984b4219ee8197f86e451626d036703bb49a56a",
      "filename": "bfd/coff-stgo32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-stgo32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/coff-stgo32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-stgo32.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -362,7 +362,7 @@ create_go32_stub (bfd *abfd)\n \t}\n       close (f);\n     }\n-stub_end:\n+ stub_end:\n   /* There was something wrong above, so use now the standard builtin\n      stub.  */\n   if (coff_data (abfd)->go32stub == NULL)"
    },
    {
      "sha": "903ad847b872d25b2e5d5c6d296c38f278a63662",
      "filename": "bfd/cpu-arm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/cpu-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/cpu-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -300,8 +300,8 @@ bfd_arm_merge_machines (bfd *ibfd, bfd *obfd)\n \t       || out == bfd_mach_arm_iWMMXt2))\n     {\n       /* xgettext: c-format */\n-      _bfd_error_handler (_(\"\\\n-error: %pB is compiled for the EP9312, whereas %pB is compiled for XScale\"),\n+      _bfd_error_handler (_(\"error: %pB is compiled for the EP9312, \"\n+\t\t\t    \"whereas %pB is compiled for XScale\"),\n \t\t\t  ibfd, obfd);\n       bfd_set_error (bfd_error_wrong_format);\n       return FALSE;\n@@ -312,8 +312,8 @@ error: %pB is compiled for the EP9312, whereas %pB is compiled for XScale\"),\n \t       || in == bfd_mach_arm_iWMMXt2))\n     {\n       /* xgettext: c-format */\n-      _bfd_error_handler (_(\"\\\n-error: %pB is compiled for the EP9312, whereas %pB is compiled for XScale\"),\n+      _bfd_error_handler (_(\"error: %pB is compiled for the EP9312, \"\n+\t\t\t    \"whereas %pB is compiled for XScale\"),\n \t\t\t  obfd, ibfd);\n       bfd_set_error (bfd_error_wrong_format);\n       return FALSE;"
    },
    {
      "sha": "f7fb00244a16036dd089702969ac638802cd96ae",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2599,7 +2599,7 @@ lookup_address_in_line_info_table (struct line_info_table *table,\n       return seq->last_line->address - seq->low_pc;\n     }\n \n-fail:\n+ fail:\n   *filename_ptr = NULL;\n   return 0;\n }"
    },
    {
      "sha": "b044164216becedc957da2c348852bbd4386fafb",
      "filename": "bfd/elf-ifunc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-ifunc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-ifunc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-ifunc.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -201,7 +201,7 @@ _bfd_elf_allocate_ifunc_dyn_relocs (struct bfd_link_info *info,\n       return TRUE;\n     }\n \n-keep:\n+ keep:\n   bed = get_elf_backend_data (info->output_bfd);\n   if (bed->rela_plts_and_copies_p)\n     sizeof_reloc = bed->s->sizeof_rela;"
    },
    {
      "sha": "21bb0716e78f3fc1a96788e8f57670824ed3aa1e",
      "filename": "bfd/elf-properties.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-properties.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-properties.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-properties.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -86,7 +86,7 @@ _bfd_elf_parse_gnu_properties (bfd *abfd, Elf_Internal_Note *note)\n \n   if (note->descsz < 8 || (note->descsz % align_size) != 0)\n     {\n-bad_size:\n+    bad_size:\n       _bfd_error_handler\n \t(_(\"warning: %pB: corrupt GNU_PROPERTY_TYPE (%ld) size: %#lx\"),\n \t abfd, note->type, note->descsz);\n@@ -186,7 +186,7 @@ _bfd_elf_parse_gnu_properties (bfd *abfd, Elf_Internal_Note *note)\n \t(_(\"warning: %pB: unsupported GNU_PROPERTY_TYPE (%ld) type: 0x%x\"),\n \t abfd, note->type, type);\n \n-next:\n+    next:\n       ptr += (datasz + (align_size - 1)) & ~ (align_size - 1);\n     }\n "
    },
    {
      "sha": "dd318b0235f5bcc67d53d45ffa4642c347597a05",
      "filename": "bfd/elf-s390-common.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-s390-common.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-s390-common.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-s390-common.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -212,7 +212,7 @@ s390_elf_allocate_ifunc_dyn_relocs (struct bfd_link_info *info,\n       return TRUE;\n     }\n \n-keep:\n+ keep:\n   /* Without checking h->plt.refcount here we allocate a PLT slot.\n      When setting plt.refcount in check_relocs it might not have been\n      known that this will be an IFUNC symol.  */"
    },
    {
      "sha": "35b821953df67cc503ccb349c054be1afecf6095",
      "filename": "bfd/elf-strtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-strtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf-strtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-strtab.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -442,7 +442,7 @@ _bfd_elf_strtab_finalize (struct elf_strtab_hash *tab)\n \t}\n     }\n \n-alloc_failure:\n+ alloc_failure:\n   if (array)\n     free (array);\n "
    },
    {
      "sha": "265fc87ad5c2a066ce1172ac3764684aa95fcf24",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -7704,7 +7704,7 @@ copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n       return copy_elf_program_header (ibfd, obfd);\n     }\n \n-rewrite:\n+ rewrite:\n   if (ibfd->xvec == obfd->xvec)\n     {\n       /* When rewriting program header, set the output maxpagesize to\n@@ -8596,11 +8596,11 @@ _bfd_elf_slurp_version_tables (bfd *abfd, bfd_boolean default_imported_symver)\n       if (hdr->sh_info == 0\n \t  || hdr->sh_info > hdr->sh_size / sizeof (Elf_External_Verneed))\n \t{\n-error_return_bad_verref:\n+\terror_return_bad_verref:\n \t  _bfd_error_handler\n \t    (_(\"%pB: .gnu.version_r invalid entry\"), abfd);\n \t  bfd_set_error (bfd_error_bad_value);\n-error_return_verref:\n+\terror_return_verref:\n \t  elf_tdata (abfd)->verref = NULL;\n \t  elf_tdata (abfd)->cverrefs = 0;\n \t  goto error_return;"
    },
    {
      "sha": "e9d93cc3b860b43919a1ca8236f4721bf60fad66",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -6415,7 +6415,7 @@ set_cmse_veneer_addr_from_implib (struct bfd_link_info *info,\n       ret = FALSE;\n     }\n \n-free_sym_buf:\n+ free_sym_buf:\n   free (sympp);\n   return ret;\n }\n@@ -7991,7 +7991,7 @@ bfd_elf32_arm_process_before_allocation (bfd *abfd,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (contents != NULL\n       && elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n@@ -8607,7 +8607,7 @@ bfd_elf32_arm_vfp11_erratum_scan (bfd *abfd, struct bfd_link_info *link_info)\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (contents != NULL\n       && elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n@@ -9044,7 +9044,7 @@ bfd_elf32_arm_stm32l4xx_erratum_scan (bfd *abfd,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (contents != NULL\n       && elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);"
    },
    {
      "sha": "e5a83ba49a13ff8eacd49671cd868ff85b62c96c",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -5398,7 +5398,7 @@ bfd_bfin_elf32_create_embedded_relocs (bfd *abfd,\n     free (internal_relocs);\n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   if (internal_relocs != NULL"
    },
    {
      "sha": "c74cb22618fb01e950aef847e32c2f963d1c2ce3",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2854,7 +2854,7 @@ bfd_cr16_elf32_create_embedded_relocs (bfd *abfd,\n     free (internal_relocs);\n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   if (internal_relocs != NULL"
    },
    {
      "sha": "6cf63f5e91f65e4e08eaa12e8ddacf63d50ceb04",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -3413,7 +3413,7 @@ elf32_csky_size_stubs (bfd *output_bfd,\n \t\t  if (r_type >= (unsigned int) R_CKCORE_MAX)\n \t\t    {\n \t\t      bfd_set_error (bfd_error_bad_value);\n-error_ret_free_internal:\n+\t\t    error_ret_free_internal:\n \t\t      if (elf_section_data (section)->relocs == NULL)\n \t\t\tfree (internal_relocs);\n \t\t      goto error_ret_free_local;\n@@ -3592,7 +3592,7 @@ elf32_csky_size_stubs (bfd *output_bfd,\n     }\n \n   return TRUE;\n-error_ret_free_local:\n+ error_ret_free_local:\n   return FALSE;\n }\n "
    },
    {
      "sha": "eb7e1f8b34e2f64706d1764a91159590c03f928f",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1327,7 +1327,7 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n \t  && local_ref)\n \t{\n \t  /* The function is locally defined.   */\n-convert_branch:\n+\tconvert_branch:\n \t  /* Convert R_386_GOT32X to R_386_PC32.  */\n \t  if (modrm == 0x15 || (modrm & 0xf8) == 0x90)\n \t    {\n@@ -1393,7 +1393,7 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n \t       || h->root.type == bfd_link_hash_defweak)\n \t      && local_ref))\n \t{\n-convert_load:\n+\tconvert_load:\n \t  if (opcode == 0x8b)\n \t    {\n \t      if (to_reloc_32)\n@@ -1739,7 +1739,7 @@ elf_i386_check_relocs (bfd *abfd,\n \n \tcase R_386_GOTOFF:\n \tcase R_386_GOTPC:\n-create_got:\n+\tcreate_got:\n \t  if (r_type != R_386_TLS_IE)\n \t    {\n \t      if (eh != NULL)\n@@ -1769,7 +1769,7 @@ elf_i386_check_relocs (bfd *abfd,\n \tcase R_386_PC32:\n \t  if (eh != NULL && (sec->flags & SEC_CODE) != 0)\n \t    eh->zero_undefweak |= 0x2;\n-do_relocation:\n+\tdo_relocation:\n \t  /* We are called after all symbols have been resolved.  Only\n \t     relocation against STT_GNU_IFUNC symbol must go through\n \t     PLT.  */\n@@ -1826,7 +1826,7 @@ elf_i386_check_relocs (bfd *abfd,\n \t    }\n \n \t  size_reloc = FALSE;\n-do_size:\n+\tdo_size:\n \t  if (NEED_DYNAMIC_RELOCATION_P (info, FALSE, h, sec, r_type,\n \t\t\t\t\t R_386_32))\n \t    {\n@@ -1931,7 +1931,7 @@ elf_i386_check_relocs (bfd *abfd,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n   sec->check_relocs_failed = 1;\n@@ -2362,7 +2362,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t  switch (r_type)\n \t    {\n \t    default:\n-bad_ifunc_reloc:\n+\t    bad_ifunc_reloc:\n \t      if (h->root.root.string)\n \t\tname = h->root.root.string;\n \t      else\n@@ -2386,7 +2386,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t\t  asection *sreloc;\n \t\t  bfd_vma offset;\n \n-do_ifunc_pointer:\n+\t\tdo_ifunc_pointer:\n \t\t  /* Need a dynamic relocation to get the real function\n \t\t     adddress.  */\n \t\t  offset = _bfd_elf_section_offset (output_bfd,\n@@ -2449,7 +2449,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t    }\n \t}\n \n-skip_ifunc:\n+    skip_ifunc:\n       resolved_to_zero = (eh != NULL\n \t\t\t  && UNDEFINED_WEAK_RESOLVED_TO_ZERO (info, eh));\n \n@@ -2551,7 +2551,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t\t     we don't know what the GOT base is.  */\n \t\t  const char *name;\n \n-disallow_got32:\n+\t\tdisallow_got32:\n \t\t  if (h == NULL || h->root.root.string == NULL)\n \t\t    name = bfd_elf_sym_name (input_bfd, symtab_hdr, sym,\n \t\t\t\t\t     NULL);\n@@ -3409,12 +3409,12 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t  return FALSE;\n \t}\n \n-do_relocation:\n+    do_relocation:\n       r = _bfd_final_link_relocate (howto, input_bfd, input_section,\n \t\t\t\t    contents, rel->r_offset,\n \t\t\t\t    relocation, 0);\n \n-check_relocation_error:\n+    check_relocation_error:\n       if (r != bfd_reloc_ok)\n \t{\n \t  const char *name;\n@@ -3848,7 +3848,7 @@ elf_i386_finish_dynamic_symbol (bfd *output_bfd,\n       else\n \t{\n \t  BFD_ASSERT((h->got.offset & 1) == 0);\n-do_glob_dat:\n+\tdo_glob_dat:\n \t  bfd_put_32 (output_bfd, (bfd_vma) 0,\n \t\t      htab->elf.sgot->contents + h->got.offset);\n \t  rel.r_info = ELF32_R_INFO (h->dynindx, R_386_GLOB_DAT);"
    },
    {
      "sha": "5b9d420ded80fd8f044bb0fc53414b34ad40b2a7",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -4455,7 +4455,7 @@ bfd_m68k_elf32_create_embedded_relocs (bfd *abfd, struct bfd_link_info *info,\n     free (internal_relocs);\n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   if (internal_relocs != NULL"
    },
    {
      "sha": "9670213b2659e32be713a79483753f74a18ba25a",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2493,7 +2493,7 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   if (contents != NULL"
    },
    {
      "sha": "6d3c1c360f2022155d9de9db7643a2b35902bc25",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -4281,7 +4281,7 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \n       eh->dyn_relocs = NULL;\n \n-keep:;\n+    keep:;\n     }\n \n   /* Finally, allocate space.  */\n@@ -5827,7 +5827,7 @@ nds32_elf_relocate_section (bfd *\t\t   output_bfd ATTRIBUTE_UNUSED,\n \tcase R_NDS32_SDA15S0_RELA:\n \tcase R_NDS32_SDA15S0:\n \t  align = 0x0;\n-handle_sda:\n+\thandle_sda:\n \t  BFD_ASSERT (sec != NULL);\n \n \t  /* If the symbol is in the abs section, the out_bfd will be null.\n@@ -6155,7 +6155,7 @@ nds32_elf_relocate_section (bfd *\t\t   output_bfd ATTRIBUTE_UNUSED,\n \t  break;\n \t}\n \n-check_reloc:\n+    check_reloc:\n \n       if (r != bfd_reloc_ok)\n \t{\n@@ -6204,7 +6204,7 @@ nds32_elf_relocate_section (bfd *\t\t   output_bfd ATTRIBUTE_UNUSED,\n \t      errmsg = _(\"internal error: unknown error\");\n \t      /* Fall through.  */\n \n-common_error:\n+\t    common_error:\n \t      (*info->callbacks->warning) (info, errmsg, name, input_bfd,\n \t\t\t\t\t   input_section, offset);\n \t      break;\n@@ -6488,7 +6488,7 @@ nds32_elf_finish_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t      goto get_vma;\n \t    case DT_JMPREL:\n \t      s = ehtab->srelplt->output_section;\n-get_vma:\n+\t    get_vma:\n \t      BFD_ASSERT (s != NULL);\n \t      dyn.d_un.d_ptr = s->vma;\n \t      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n@@ -8281,7 +8281,7 @@ nds32_convert_32_to_16 (bfd *abfd, uint32_t insn, uint16_t *pinsn16,\n       goto done;\n     }\n \n-done:\n+ done:\n   /* Bit-15 of insn16 should be set for a valid instruction.  */\n   if ((insn16 & 0x8000) == 0)\n     return 0;\n@@ -8603,7 +8603,7 @@ nds32_convert_16_to_32 (bfd *abfd, uint16_t insn16, uint32_t *pinsn)\n       goto done;\n     }\n \n-done:\n+ done:\n   if (insn & 0x80000000)\n     return 0;\n \n@@ -9448,7 +9448,7 @@ nds32_elf_relax_delete_blanks (bfd *abfd, asection *sec,\n \t      if (p < endp)\n \t\t*p |= 0x80;\n \t    }\n-done_adjust_diff:\n+\tdone_adjust_diff:\n \n \t  if (sec == sect)\n \t    {\n@@ -12567,7 +12567,7 @@ nds32_elf_relax_section (bfd *abfd, asection *sec,\n       clean_nds32_elf_blank ();\n     }\n \n-finish:\n+ finish:\n   if (internal_relocs != NULL\n       && elf_section_data (sec)->relocs != internal_relocs)\n     free (internal_relocs);\n@@ -12581,7 +12581,7 @@ nds32_elf_relax_section (bfd *abfd, asection *sec,\n \n   return result;\n \n-error_return:\n+ error_return:\n   result = FALSE;\n   goto finish;\n }\n@@ -13152,15 +13152,15 @@ nds32_fag_remove_unused_fpbase (bfd *abfd, asection *sec,\n \tgoto error_return;\n     }\n \n-finish:\n+ finish:\n   if (relax_blank_list)\n     {\n       nds32_elf_relax_delete_blanks (abfd, sec, relax_blank_list);\n       relax_blank_list = NULL;\n     }\n   return result;\n \n-error_return:\n+ error_return:\n   result = FALSE;\n   goto finish;\n }\n@@ -13291,7 +13291,7 @@ nds32_elf_get_relocated_section_contents (bfd *abfd,\n   free (reloc_vector);\n   return data;\n \n-error_return:\n+ error_return:\n   free (reloc_vector);\n   return NULL;\n }\n@@ -14018,7 +14018,7 @@ nds32_elf_unify_tls_model (bfd *inbfd, asection *insec, bfd_byte *incontents,\n #endif\n     }\n \n-finish:\n+ finish:\n   if (incontents)\n     contents = NULL;\n \n@@ -14047,7 +14047,7 @@ nds32_elf_unify_tls_model (bfd *inbfd, asection *insec, bfd_byte *incontents,\n \n   return result;\n \n-error_return:\n+ error_return:\n   result = FALSE;\n   goto finish;\n }"
    },
    {
      "sha": "17e97bca5a8ff3ff834c9e813eaa28f79cceb8ab",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -3062,7 +3062,7 @@ nios2_elf_assign_gp (bfd *output_bfd, bfd_vma *pgp, struct bfd_link_info *info)\n \n   h = bfd_hash_lookup (&info->hash->table, \"_gp\", FALSE, FALSE);\n   lh = (struct bfd_link_hash_entry *) h;\n-lookup:\n+ lookup:\n   if (lh)\n     {\n       switch (lh->type)"
    },
    {
      "sha": "e9063f60fe5e6ff210bdca29b70cdba89cb3e0b3",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1529,7 +1529,7 @@ pru_elf32_relax_section (bfd * abfd, asection * sec,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (isymbuf != NULL && symtab_hdr->contents != (unsigned char *) isymbuf)\n     free (isymbuf);\n   if (contents != NULL"
    },
    {
      "sha": "5e31e73a6fcccb32487a4ec02821b2e6d4eadf1b",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -7839,7 +7839,7 @@ compute_text_actions (bfd *abfd,\n     print_action_list (stderr, &relax_info->action_list);\n #endif\n \n-error_return:\n+ error_return:\n   release_contents (sec, contents);\n   release_internal_relocs (sec, internal_relocs);\n   if (prop_table)\n@@ -8844,7 +8844,7 @@ compute_removed_literals (bfd *abfd,\n   print_action_list (stderr, &relax_info->action_list);\n #endif /* DEBUG */\n \n-error_return:\n+ error_return:\n   if (prop_table)\n     free (prop_table);\n   free_section_cache (&target_sec_cache);"
    },
    {
      "sha": "636d7897ee6ffb8c2ddd01a8033654412ea62bf3",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1674,7 +1674,7 @@ get_dyn_sym_info (struct elf64_ia64_link_hash_table *ia64_info,\n       *size_p = size;\n       *info_p = info;\n \n-has_space:\n+    has_space:\n       /* Append the new one to the array.  */\n       dyn_i = info + count;\n       memset (dyn_i, 0, sizeof (*dyn_i));\n@@ -3284,7 +3284,7 @@ elf64_ia64_choose_gp (bfd *abfd, struct bfd_link_info *info, bfd_boolean final)\n     {\n       if (max_short_vma - min_short_vma >= 0x400000)\n \t{\n-overflow:\n+\toverflow:\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB: short data segment overflowed (%#\" PRIx64 \" >= 0x400000)\"),\n@@ -4848,7 +4848,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       /* Extract IDENT.  */\n       if (!bfd_malloc_and_get_section (abfd, s, &dynbuf))\n \t{\n-error_free_dyn:\n+\terror_free_dyn:\n \t  free (dynbuf);\n \t  goto error_return;\n \t}"
    },
    {
      "sha": "90e27023343a7140c88959d899a2ccaa73789239",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1662,7 +1662,7 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n   if (no_overflow)\n     return TRUE;\n \n-convert:\n+ convert:\n   if (opcode == 0xff)\n     {\n       /* We have \"call/jmp *foo@GOTPCREL(%rip)\".  */\n@@ -1787,7 +1787,7 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n \t     overflow when sign-extending imm32 to imm64.  */\n \t  r_type = (rex & REX_W) != 0 ? R_X86_64_32S : R_X86_64_32;\n \n-rewrite_modrm_rex:\n+\trewrite_modrm_rex:\n \t  bfd_put_8 (abfd, modrm, contents + roff - 1);\n \n \t  if (rex)\n@@ -2179,7 +2179,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_X86_64_PC32_BND:\n \tcase R_X86_64_PC64:\n \tcase R_X86_64_64:\n-pointer:\n+\tpointer:\n \t  if (eh != NULL && (sec->flags & SEC_CODE) != 0)\n \t    eh->zero_undefweak |= 0x2;\n \t  /* We are called after all symbols have been resolved.  Only\n@@ -2244,7 +2244,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \n \t  size_reloc = FALSE;\n-do_size:\n+\tdo_size:\n \t  if (NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,\n \t\t\t\t\t htab->pointer_r_type))\n \t    {\n@@ -2351,7 +2351,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   if (elf_section_data (sec)->this_hdr.contents != contents)\n     free (contents);\n   sec->check_relocs_failed = 1;\n@@ -2678,7 +2678,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t  switch (r_type)\n \t    {\n \t    default:\n-bad_ifunc_reloc:\n+\t    bad_ifunc_reloc:\n \t      if (h->root.root.string)\n \t\tname = h->root.root.string;\n \t      else\n@@ -2702,7 +2702,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\tgoto do_relocation;\n \t      /* FALLTHROUGH */\n \t    case R_X86_64_64:\n-do_ifunc_pointer:\n+\t    do_ifunc_pointer:\n \t      if (rel->r_addend != 0)\n \t\t{\n \t\t  if (h->root.root.string)\n@@ -2788,7 +2788,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t    }\n \t}\n \n-skip_ifunc:\n+    skip_ifunc:\n       resolved_to_zero = (eh != NULL\n \t\t\t  && UNDEFINED_WEAK_RESOLVED_TO_ZERO (info, eh));\n \n@@ -3047,7 +3047,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t      break;\n \t    }\n \n-use_plt:\n+\tuse_plt:\n \t  if (h->plt.offset != (bfd_vma) -1)\n \t    {\n \t      if (htab->plt_second != NULL)\n@@ -3162,7 +3162,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t  /* FIXME: The ABI says the linker should make sure the value is\n \t     the same when it's zeroextended to 64 bit.\t */\n \n-direct:\n+\tdirect:\n \t  if ((input_section->flags & SEC_ALLOC) == 0)\n \t    break;\n \n@@ -3373,7 +3373,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t\t  if (roff < 3\n \t\t\t      || (roff - 3 + 22) > input_section->size)\n \t\t\t    {\n-corrupt_input:\n+\t\t\t    corrupt_input:\n \t\t\t      info->callbacks->einfo\n \t\t\t\t(_(\"%F%P: corrupt input: %pB\\n\"),\n \t\t\t\t input_bfd);\n@@ -4031,12 +4031,12 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t    }\n \t}\n \n-do_relocation:\n+    do_relocation:\n       r = _bfd_final_link_relocate (howto, input_bfd, input_section,\n \t\t\t\t    contents, rel->r_offset,\n \t\t\t\t    relocation, rel->r_addend);\n \n-check_relocation_error:\n+    check_relocation_error:\n       if (r != bfd_reloc_ok)\n \t{\n \t  const char *name;\n@@ -4459,7 +4459,7 @@ elf_x86_64_finish_dynamic_symbol (bfd *output_bfd,\n       else\n \t{\n \t  BFD_ASSERT((h->got.offset & 1) == 0);\n-do_glob_dat:\n+\tdo_glob_dat:\n \t  bfd_put_64 (output_bfd, (bfd_vma) 0,\n \t\t      htab->elf.sgot->contents + h->got.offset);\n \t  rela.r_info = htab->r_info (h->dynindx, R_X86_64_GLOB_DAT);"
    },
    {
      "sha": "b67ea8c7d2e88dd644d2da4b0ed53f4203ddfb32",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1398,7 +1398,7 @@ elf_slurp_symbol_table (bfd *abfd, asymbol **symptrs, bfd_boolean dynamic)\n     free (isymbuf);\n   return symcount;\n \n-error_return:\n+ error_return:\n   if (xverbuf != NULL)\n     free (xverbuf);\n   if (isymbuf != NULL && hdr->contents != (unsigned char *) isymbuf)"
    },
    {
      "sha": "591ca531a6325d44f59059232adb0df1db393b71",
      "filename": "bfd/elfcore.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcore.h?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -316,9 +316,9 @@ elf_core_file_p (bfd *abfd)\n   abfd->start_address = i_ehdrp->e_entry;\n   return abfd->xvec;\n \n-wrong:\n+ wrong:\n   bfd_set_error (bfd_error_wrong_format);\n-fail:\n+ fail:\n   return NULL;\n }\n \n@@ -419,8 +419,8 @@ NAME(_bfd_elf, core_find_build_id)\n      build-id was found.  */\n   goto fail;\n \n-wrong:\n+ wrong:\n   bfd_set_error (bfd_error_wrong_format);\n-fail:\n+ fail:\n   return FALSE;\n }"
    },
    {
      "sha": "c04712a10f6a6b188882380709bc04f40a5a7fd2",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2039,7 +2039,7 @@ _bfd_elf_add_default_symbol (bfd *abfd,\n   /* We also need to define an indirection from the nondefault version\n      of the symbol.  */\n \n-nondefault:\n+ nondefault:\n   len = strlen (name);\n   shortname = (char *) bfd_hash_allocate (&info->hash->table, len);\n   if (shortname == NULL)\n@@ -4089,7 +4089,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n \t  if (!bfd_malloc_and_get_section (abfd, s, &dynbuf))\n \t    {\n-error_free_dyn:\n+\t    error_free_dyn:\n \t      free (dynbuf);\n \t      goto error_return;\n \t    }\n@@ -8209,7 +8209,7 @@ bfd_elf_match_symbols_in_sections (asection *sec1, asection *sec2,\n \n   result = TRUE;\n \n-done:\n+ done:\n   if (symtable1)\n     free (symtable1);\n   if (symtable2)\n@@ -11745,7 +11745,7 @@ elf_output_implib (bfd *abfd, struct bfd_link_info *info)\n \n   ret = TRUE;\n \n-free_sym_buf:\n+ free_sym_buf:\n   free (sympp);\n   return ret;\n }"
    },
    {
      "sha": "35dd8ab16714b9d8001c79fa955e989f7471fc0b",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -4615,7 +4615,7 @@ elfNN_aarch64_size_stubs (bfd *output_bfd,\n \n   return TRUE;\n \n-error_ret_free_local:\n+ error_ret_free_local:\n   return FALSE;\n }\n \n@@ -5507,7 +5507,7 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n       switch (bfd_r_type)\n \t{\n \tdefault:\n-bad_ifunc_reloc:\n+\tbad_ifunc_reloc:\n \t  if (h->root.root.string)\n \t    name = h->root.root.string;\n \t  else\n@@ -9482,7 +9482,7 @@ elfNN_aarch64_finish_dynamic_symbol (bfd *output_bfd,\n \t}\n       else\n \t{\n-do_glob_dat:\n+\tdo_glob_dat:\n \t  BFD_ASSERT ((h->got.offset & 1) == 0);\n \t  bfd_put_NN (output_bfd, (bfd_vma) 0,\n \t\t      htab->root.sgot->contents + h->got.offset);"
    },
    {
      "sha": "1df2aa842c8a6dc10008b9247c73be2787fb4e17",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1914,7 +1914,7 @@ get_dyn_sym_info (struct elfNN_ia64_link_hash_table *ia64_info,\n       *size_p = size;\n       *info_p = info;\n \n-has_space:\n+    has_space:\n       /* Append the new one to the array.  */\n       dyn_i = info + count;\n       memset (dyn_i, 0, sizeof (*dyn_i));\n@@ -3706,7 +3706,7 @@ elfNN_ia64_choose_gp (bfd *abfd, struct bfd_link_info *info, bfd_boolean final)\n     {\n       if (max_short_vma - min_short_vma >= 0x400000)\n \t{\n-overflow:\n+\toverflow:\n \t  _bfd_error_handler\n \t    /* xgettext:c-format */\n \t    (_(\"%pB: short data segment overflowed (%#\" PRIx64 \" >= 0x400000)\"),\n@@ -4476,7 +4476,7 @@ elfNN_ia64_relocate_section (bfd *output_bfd,\n \tcase bfd_reloc_outofrange:\n \tcase bfd_reloc_overflow:\n \tdefault:\n-missing_tls_sec:\n+\tmissing_tls_sec:\n \t  {\n \t    const char *name;\n "
    },
    {
      "sha": "8fcb1067fd6b5332adc53c02928db7f5b6c154f4",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2396,7 +2396,7 @@ riscv_elf_relocate_section (bfd *output_bfd,\n     }\n \n   ret = riscv_resolve_pcrel_lo_relocs (&pcrel_relocs);\n-out:\n+ out:\n   riscv_free_pcrel_relocs (&pcrel_relocs);\n   return ret;\n }\n@@ -3245,7 +3245,7 @@ _bfd_riscv_elf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n \n   return TRUE;\n \n-fail:\n+ fail:\n   bfd_set_error (bfd_error_bad_value);\n   return FALSE;\n }\n@@ -4219,7 +4219,7 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \n   ret = TRUE;\n \n-fail:\n+ fail:\n   if (relocs != data->relocs)\n     free (relocs);\n   riscv_free_pcgp_relocs(&pcgp_relocs, abfd, sec);"
    },
    {
      "sha": "ae33acb8d5caa71ec560bf042810f3f45d4dc31c",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -13385,7 +13385,7 @@ _bfd_elf_mips_get_relocated_section_contents\n     free (reloc_vector);\n   return data;\n \n-error_return:\n+ error_return:\n   if (reloc_vector != NULL)\n     free (reloc_vector);\n   return NULL;"
    },
    {
      "sha": "d2bb36648c6aedc475c2bc2a7df57a38d16f36cb",
      "filename": "bfd/elfxx-sparc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-sparc.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -4139,7 +4139,7 @@ _bfd_sparc_elf_relocate_section (bfd *output_bfd,\n \n       if (r == bfd_reloc_continue)\n \t{\n-do_relocation:\n+\tdo_relocation:\n \t  r = _bfd_final_link_relocate (howto, input_bfd, input_section,\n \t\t\t\t\tcontents, rel->r_offset,\n \t\t\t\t\trelocation, rel->r_addend);"
    },
    {
      "sha": "2e0e01e31d0d81bf9b6da15c2e06cdb3418e3cf1",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2347,7 +2347,7 @@ _bfd_x86_elf_get_synthetic_symtab (bfd *abfd,\n   /* PLT entries with R_386_TLS_DESC relocations are skipped.  */\n   if (n == 0)\n     {\n-bad_return:\n+    bad_return:\n       count = -1;\n     }\n   else\n@@ -2626,7 +2626,7 @@ _bfd_x86_elf_link_setup_gnu_properties\n \n \t  if (!bfd_set_section_alignment (sec, class_align))\n \t    {\n-error_alignment:\n+\t    error_alignment:\n \t      info->callbacks->einfo (_(\"%F%pA: failed to align section\\n\"),\n \t\t\t\t      sec);\n \t    }"
    },
    {
      "sha": "8cffd24235b70388d1690830a7cd3978fa004caa",
      "filename": "bfd/i386lynx.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/i386lynx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/i386lynx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/i386lynx.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -399,7 +399,7 @@ NAME(lynx,slurp_reloc_table) (bfd *abfd,\n   bfd_set_error (bfd_error_invalid_operation);\n   return FALSE;\n \n-doit:\n+ doit:\n   if (bfd_seek (abfd, asect->rel_filepos, SEEK_SET) != 0)\n     return FALSE;\n   each_size = obj_reloc_entry_size (abfd);"
    },
    {
      "sha": "5a4e709ef388b1ebdabb72ecd45c4f020d3619f7",
      "filename": "bfd/merge.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/merge.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/merge.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/merge.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -549,7 +549,7 @@ record_section (struct sec_merge_info *sinfo,\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   for (secinfo = sinfo->chain; secinfo; secinfo = secinfo->next)\n     *secinfo->psecinfo = NULL;\n   return FALSE;"
    },
    {
      "sha": "35d45e64806ffae87b7b7121e1090bec5fe4e2d7",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1632,7 +1632,7 @@ NAME (aout, write_syms) (bfd *abfd)\n \n   return TRUE;\n \n-error_return:\n+ error_return:\n   _bfd_stringtab_free (strtab);\n   return FALSE;\n }"
    },
    {
      "sha": "72e55a0f60731302216455ddfc30d135ee53cb88",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -725,7 +725,7 @@ try_load_plugin (const char *pname,\n   abfd->plugin_format = bfd_plugin_yes;\n   result = 1;\n \n-short_circuit:\n+ short_circuit:\n   dlclose (plugin_handle);\n   return result;\n }"
    },
    {
      "sha": "c4dec86d1d4607a13ac668fa73f56aca629e997b",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -8474,7 +8474,7 @@ bfd_generic_get_relocated_section_contents (bfd *abfd,\n   free (reloc_vector);\n   return data;\n \n-error_return:\n+ error_return:\n   free (reloc_vector);\n   return NULL;\n }"
    },
    {
      "sha": "b15238a0bf3d705c294c65f378c5bae16590048b",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfedit.c: Indent labels correctly.\n+\t* readelf.c: Likewise.\n+\t* resres.c: Likewise.\n+\n 2020-02-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/25584"
    },
    {
      "sha": "e94b677ed2a753a8f19c1e3fc934c8a72c02dac2",
      "filename": "binutils/elfedit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/elfedit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/elfedit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfedit.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -238,7 +238,7 @@ update_gnu_property (const char *file_name, FILE *file)\n \t  }\n       }\n \n-out:\n+ out:\n   if (ret != 0)\n     error (_(\"%s: Invalid PT_NOTE segment\\n\"), file_name);\n "
    },
    {
      "sha": "ee34bd6f1bcc51b2e2701e8913de97012e3b8549",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -18061,7 +18061,7 @@ print_gnu_property_note (Filedata * filedata, Elf_Internal_Note * pnote)\n \tprintf (\"%02x \", ptr[j] & 0xff);\n       printf (\">\");\n \n-next:\n+    next:\n       ptr += ((datasz + (size - 1)) & ~ (size - 1));\n       if (ptr == ptr_end)\n \tbreak;"
    },
    {
      "sha": "c6004ddf653c68b0435d629b51432787e9161cf5",
      "filename": "binutils/resres.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/resres.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/binutils/resres.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/resres.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -619,7 +619,7 @@ skip_null_resource (windres_bfd *wrbfd, rc_uint_type *off, rc_uint_type omax)\n \n   return;\n \n-skip_err:\n+ skip_err:\n   fprintf (stderr, \"%s: %s: Not a valid WIN32 resource file\\n\", program_name,\n \t   filename);\n   xexit (1);"
    },
    {
      "sha": "d00fb87653607c64f7238e4ec93adc70d78f67c0",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1,3 +1,27 @@\n+2020-02-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/obj-elf.c: Indent labels correctly.\n+\t* config/obj-macho.c: Likewise.\n+\t* config/tc-aarch64.c: Likewise.\n+\t* config/tc-alpha.c: Likewise.\n+\t* config/tc-arm.c: Likewise.\n+\t* config/tc-cr16.c: Likewise.\n+\t* config/tc-crx.c: Likewise.\n+\t* config/tc-frv.c: Likewise.\n+\t* config/tc-i386-intel.c: Likewise.\n+\t* config/tc-i386.c: Likewise.\n+\t* config/tc-ia64.c: Likewise.\n+\t* config/tc-mn10200.c: Likewise.\n+\t* config/tc-mn10300.c: Likewise.\n+\t* config/tc-nds32.c: Likewise.\n+\t* config/tc-riscv.c: Likewise.\n+\t* config/tc-s12z.c: Likewise.\n+\t* config/tc-xtensa.c: Likewise.\n+\t* config/tc-z80.c: Likewise.\n+\t* read.c: Likewise.\n+\t* symbols.c: Likewise.\n+\t* write.c: Likewise.\n+\n 2020-02-20  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/tc-riscv.c (riscv_ip): New boolean insn_with_csr to indicate"
    },
    {
      "sha": "a6dcdaf4a7e4c21f73ec659f72a3bffccf53e90a",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1340,7 +1340,7 @@ obj_elf_section (int push)\n \t}\n     }\n \n-done:\n+ done:\n   demand_empty_rest_of_line ();\n \n   obj_elf_change_section (name, type, attr, entsize, &match, linkonce,\n@@ -1879,11 +1879,11 @@ obj_elf_vendor_attribute (int vendor)\n \n   demand_empty_rest_of_line ();\n   return tag;\n-bad_string:\n+ bad_string:\n   as_bad (_(\"bad string constant\"));\n   ignore_rest_of_line ();\n   return 0;\n-bad:\n+ bad:\n   as_bad (_(\"expected <tag> , <value>\"));\n   ignore_rest_of_line ();\n   return 0;"
    },
    {
      "sha": "3788f82f5f0dde1fcd9d9e733f1ffd3addd24ceb",
      "filename": "gas/config/obj-macho.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/obj-macho.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/obj-macho.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-macho.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -587,7 +587,7 @@ obj_mach_o_zerofill (int ignore ATTRIBUTE_UNUSED)\n \tS_CLEAR_EXTERNAL (sym);\n     }\n \n-done:\n+ done:\n   /* switch back to the section that was current before the .zerofill.  */\n   subseg_set (old_seg, 0);\n }"
    },
    {
      "sha": "7af56babe4466d0eedd7f2c41e07572bfe083f9c",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -883,7 +883,7 @@ parse_vector_type_for_operand (aarch64_reg_type reg_type,\n       return FALSE;\n     }\n \n-elt_size:\n+ elt_size:\n   switch (TOLOWER (*ptr))\n     {\n     case 'b':\n@@ -2424,7 +2424,7 @@ parse_aarch64_imm_float (char **ccp, int *immed, bfd_boolean dp_p,\n   *ccp = str;\n   return TRUE;\n \n-invalid_fp:\n+ invalid_fp:\n   set_fatal_syntax_error (_(\"invalid floating-point constant\"));\n   return FALSE;\n }\n@@ -5216,7 +5216,7 @@ vectype_to_qualifier (const struct vector_type_el *vectype)\n       return offset;\n     }\n \n-vectype_conversion_fail:\n+ vectype_conversion_fail:\n   first_error (_(\"bad vector arrangement type\"));\n   return AARCH64_OPND_QLF_NIL;\n }\n@@ -6652,7 +6652,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_SYSREG_TLBI:\n \t  inst.base.operands[i].sysins_op =\n \t    parse_sys_ins_reg (&str, aarch64_sys_regs_tlbi_hsh);\n-sys_reg_ins:\n+\tsys_reg_ins:\n \t  if (inst.base.operands[i].sysins_op == NULL)\n \t    {\n \t      set_fatal_syntax_error ( _(\"unknown or missing operation name\"));\n@@ -6707,7 +6707,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n       inst.base.operands[i].present = 1;\n       continue;\n \n-failure:\n+    failure:\n       /* The parse routine should already have set the error, but in case\n \t not, set a default one here.  */\n       if (! error_p ())\n@@ -6773,7 +6773,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t(_(\"unexpected characters following instruction\"));\n     }\n \n-parse_operands_return:\n+ parse_operands_return:\n \n   if (error_p ())\n     {\n@@ -8263,7 +8263,7 @@ md_apply_fix (fixS * fixP, valueT * valP, segT seg)\n       break;\n     }\n \n-apply_fix_return:\n+ apply_fix_return:\n   /* Free the allocated the struct aarch64_inst.\n      N.B. currently there are very limited number of fix-up types actually use\n      this field, so the impact on the performance should be minimal .  */"
    },
    {
      "sha": "ef0f817d554870a62836c65ef0d1ad793a2dca73",
      "filename": "gas/config/tc-alpha.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-alpha.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1021,7 +1021,7 @@ tokenize_arguments (char *str,\n \t}\n     }\n \n-fini:\n+ fini:\n   if (saw_comma)\n     goto err;\n   input_line_pointer = old_input_line_pointer;\n@@ -1035,15 +1035,15 @@ tokenize_arguments (char *str,\n \n   return ntok - (end_tok - tok);\n \n-err:\n+ err:\n #ifdef RELOC_OP_P\n   is_end_of_line[(unsigned char) '!'] = 0;\n #endif\n   input_line_pointer = old_input_line_pointer;\n   return TOKENIZE_ERROR;\n \n #ifdef RELOC_OP_P\n-err_report:\n+ err_report:\n   is_end_of_line[(unsigned char) '!'] = 0;\n #endif\n   input_line_pointer = old_input_line_pointer;\n@@ -5136,7 +5136,7 @@ s_alpha_arch (int ignored ATTRIBUTE_UNUSED)\n       }\n   as_warn (_(\"Unknown CPU identifier `%s'\"), name);\n \n-found:\n+ found:\n   (void) restore_line_pointer (ch);\n   demand_empty_rest_of_line ();\n }\n@@ -5976,10 +5976,10 @@ md_apply_fix (fixS *fixP, valueT * valP, segT seg)\n       goto done;\n     }\n \n-write_done:\n+ write_done:\n   md_number_to_chars (fixpos, image, 4);\n \n-done:\n+ done:\n   fixP->fx_done = 1;\n }\n \n@@ -6343,7 +6343,7 @@ tc_get_register (int frame ATTRIBUTE_UNUSED)\n     }\n   as_warn (_(\"frame reg expected, using $%d.\"), framereg);\n \n-found:\n+ found:\n   note_gpreg (framereg);\n   return framereg;\n }"
    },
    {
      "sha": "cfbee7e59dad0feb6116718c5471e9421143d674",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -4648,7 +4648,7 @@ s_arm_unwind_save_mmxwr (void)\n     }\n \n   return;\n-error:\n+ error:\n   ignore_rest_of_line ();\n }\n \n@@ -4716,7 +4716,7 @@ s_arm_unwind_save_mmxwcg (void)\n   op = 0xc700 | mask;\n   add_unwind_opcode (op, 2);\n   return;\n-error:\n+ error:\n   ignore_rest_of_line ();\n }\n \n@@ -5091,7 +5091,7 @@ set_fp16_format (int dummy ATTRIBUTE_UNUSED)\n \tas_warn (_(\"float16 format cannot be set more than once, ignoring.\"));\n     }\n \n-cleanup:\n+ cleanup:\n   *input_line_pointer = saved_char;\n   ignore_rest_of_line ();\n }\n@@ -6368,7 +6368,7 @@ parse_psr (char **str, bfd_boolean lhs)\n     goto unsupported_psr;\n \n   p += 4;\n-check_suffix:\n+ check_suffix:\n   if (*p == '_')\n     {\n       /* A suffix follows.  */\n@@ -18307,7 +18307,7 @@ do_mve_vmull (void)\n \n   return;\n \n-neon_vmul:\n+ neon_vmul:\n   inst.instruction = N_MNEM_vmul;\n   inst.cond = 0xb;\n   if (thumb_mode)\n@@ -19707,7 +19707,7 @@ neon_scalar_for_fmac_fp16_long (unsigned scalar, unsigned quad_p)\n \t      | ((elno & 0x1) << 3));\n     }\n \n-bad_scalar:\n+ bad_scalar:\n   first_error (_(\"scalar out of range for multiply instruction\"));\n   return 0;\n }\n@@ -32888,7 +32888,7 @@ get_aeabi_cpu_arch_from_fset (const arm_feature_set *arch_ext_fset,\n   if (p_ver_ret == NULL)\n     return -1;\n \n-found:\n+ found:\n   /* Tag_CPU_arch_profile.  */\n   if (ARM_CPU_HAS_FEATURE (p_ver_ret->flags, arm_ext_v7a)\n       || ARM_CPU_HAS_FEATURE (p_ver_ret->flags, arm_ext_v8)"
    },
    {
      "sha": "7a8f33b889756a160a5ff9b7f20ea3adc7714c91",
      "filename": "gas/config/tc-cr16.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cr16.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2329,8 +2329,8 @@ assemble_insn (const char *mnemonic, ins *insn)\n       match = 1;\n       break;\n \n-/* Try again with next instruction.  */\n-next_insn:\n+      /* Try again with next instruction.  */\n+    next_insn:\n       instruction++;\n     }\n "
    },
    {
      "sha": "09efa095fdf1d4ebb57fcafb967e4bf4707c0ef7",
      "filename": "gas/config/tc-crx.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-crx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-crx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-crx.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -900,8 +900,8 @@ parse_operand (char *operand, ins * crx_ins)\n     cur_arg->type = arg_c;\n   goto set_params;\n \n-/* Parse an operand according to its type.  */\n-set_params:\n+  /* Parse an operand according to its type.  */\n+ set_params:\n   cur_arg->constant = 0;\n   set_operand (operand, crx_ins);\n }\n@@ -1570,8 +1570,8 @@ assemble_insn (char *mnemonic, ins *insn)\n       match = 1;\n       break;\n \n-/* Try again with next instruction.  */\n-next_insn:\n+      /* Try again with next instruction.  */\n+    next_insn:\n       instruction++;\n     }\n \n@@ -1845,7 +1845,7 @@ preprocess_reglist (char *param, int *allocated)\n \tas_bad (_(\"Maximum %d bits may be set in `mask16' operand\"),\n \t\tMAX_REGS_IN_MASK16);\n \n-next_inst:\n+    next_inst:\n       while (!ISALNUM (*paramP) && *paramP != '}')\n \t  paramP++;\n     }"
    },
    {
      "sha": "48bbe595e27e57599fab8ecafd00000444f0e671",
      "filename": "gas/config/tc-frv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-frv.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -858,7 +858,7 @@ frv_tomcat_analyze_vliw_chains (void)\n \n   vliw1 = vliw_chain_top;\n \n-workaround_top:\n+ workaround_top:\n \n   FRV_SET_VLIW_WINDOW (vliw1, vliw2, vliw3);\n "
    },
    {
      "sha": "b326d30fff7d3f71df78f7147383c3161fb64565",
      "filename": "gas/config/tc-i386-intel.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-i386-intel.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-i386-intel.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386-intel.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -509,7 +509,7 @@ static int i386_intel_simplify (expressionS *e)\n \n       /* FALLTHROUGH */\n     default:\n-fallthrough:\n+    fallthrough:\n       if (e->X_add_symbol\n \t  && !i386_intel_simplify_symbol (e->X_add_symbol))\n \treturn 0;"
    },
    {
      "sha": "62b7cfbe6c7556f1a2d66d546893309a94726adf",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2189,7 +2189,7 @@ operand_size_match (const insn_template *t)\n \n   if (!t->opcode_modifier.d)\n     {\n-mismatch:\n+    mismatch:\n       if (!match)\n \ti.error = operand_size_mismatch;\n       return match;\n@@ -2244,7 +2244,7 @@ operand_type_match (i386_operand_type overlap,\n   if (given.bitfield.baseindex == overlap.bitfield.baseindex)\n     return 1;\n \n-mismatch:\n+ mismatch:\n   i.error = operand_type_mismatch;\n   return 0;\n }\n@@ -4792,7 +4792,7 @@ parse_insn (char *line, char *mnemonic)\n \n   if (!current_templates)\n     {\n-check_suffix:\n+    check_suffix:\n       if (mnem_p > mnemonic)\n \t{\n \t  /* See if we can get a match by trimming off a suffix.  */\n@@ -6030,7 +6030,7 @@ match_template (char mnem_suffix)\n \t      if (!t->opcode_modifier.d)\n \t\tcontinue;\n \n-check_reverse:\n+\t    check_reverse:\n \t      if (!(size_match & MATCH_REVERSE))\n \t\tcontinue;\n \t      /* Try reversing direction of operands.  */\n@@ -7075,7 +7075,7 @@ process_operands (void)\n \t}\n       else\n \t{\n-duplicate:\n+\tduplicate:\n \t  i.operands++;\n \t  i.reg_operands++;\n \t  i.tm.operands++;\n@@ -10404,7 +10404,7 @@ i386_index_check (const char *operand_string)\n       else\n \treturn 1;\n \n-bad_address:\n+    bad_address:\n       as_bad (_(\"`%s' is not a valid %s expression\"),\n \t      operand_string, kind);\n       return 0;"
    },
    {
      "sha": "a9126ab74d917534a6ff42bdd53a93281b7c8605",
      "filename": "gas/config/tc-ia64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ia64.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -11845,7 +11845,7 @@ dot_alias (int section)\n     {\n       as_fatal (_(\"inserting \\\"%s\\\" into %s name hash table failed: %s\"),\n \t\talias, kind, error_string);\n-out:\n+    out:\n       obstack_free (&notes, name);\n       obstack_free (&notes, alias);\n     }"
    },
    {
      "sha": "0558a3751d9bcce7ca0f7d27f0d8107eb61adc73",
      "filename": "gas/config/tc-mn10200.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-mn10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-mn10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10200.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1103,7 +1103,7 @@ md_assemble (char *str)\n \t      break;\n \t    }\n \n-keep_going:\n+\tkeep_going:\n \t  str = input_line_pointer;\n \t  input_line_pointer = hold;\n "
    },
    {
      "sha": "c704d34cc5f699f14f175d580cc7345cb03c35b6",
      "filename": "gas/config/tc-mn10300.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-mn10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-mn10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10300.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1759,7 +1759,7 @@ md_assemble (char *str)\n \t      break;\n \t    }\n \n-keep_going:\n+\tkeep_going:\n \t  str = input_line_pointer;\n \t  input_line_pointer = hold;\n "
    },
    {
      "sha": "0f5973d41be2ea5e21dc0efa808bf7ef81b66893",
      "filename": "gas/config/tc-nds32.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -3501,7 +3501,7 @@ nds32_pseudo_opcode_wrapper (char *line, struct nds32_pseudo_opcode *opcode)\n \t}\n       ++s;\n     } while (s[0] != '\\0');\n-end:\n+ end:\n   /* Put the origin line for debugging.  */\n   argv[argc] = line;\n   opcode->proc (argc, argv, opcode->pseudo_val);\n@@ -4287,7 +4287,7 @@ nds32_relax_hint (int mode ATTRIBUTE_UNUSED)\n     relax_hint_begin = 0;\n   name = nds_itoa (relax_hint_id_current);\n \n-reordered_id:\n+ reordered_id:\n \n   /* Find relax hint entry for next instruction, and all member will be\n      initialized at that time.  */\n@@ -6267,7 +6267,7 @@ nds32_elf_append_relax_relocs (const char *key, void *value)\n       pattern_now = pattern_now->next;\n     }\n \n-restore:\n+ restore:\n   now_seg = seg_bak;\n   frchain_now = frchain_bak;\n }"
    },
    {
      "sha": "ddd4d1457f5d324b4f8f274baa3f6e99183ae9b6",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1676,7 +1676,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      || imm_expr->X_add_number >= 64)\n \t\t    break;\n \t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n-rvc_imm_done:\n+\t\trvc_imm_done:\n \t\t  s = expr_end;\n \t\t  imm_expr->X_op = O_absent;\n \t\t  continue;\n@@ -1804,7 +1804,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t  p = percent_op_utype;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p))\n \t\t    break;\n-rvc_lui:\n+\t\trvc_lui:\n \t\t  if (imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number <= 0\n \t\t      || imm_expr->X_add_number >= RISCV_BIGIMM_REACH\n@@ -2114,10 +2114,10 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t      goto alu_op;\n \t    case '0': /* AMO \"displacement,\" which must be zero.  */\n \t      p = percent_op_null;\n-load_store:\n+\t    load_store:\n \t      if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\tcontinue;\n-alu_op:\n+\t    alu_op:\n \t      /* If this value won't fit into a 16 bit offset, then go\n \t\t find a macro that will generate the 32 bit offset\n \t\t code pattern.  */\n@@ -2136,7 +2136,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t      continue;\n \n \t    case 'p':\t\t/* PC-relative offset.  */\n-branch:\n+\t    branch:\n \t      *imm_reloc = BFD_RELOC_12_PCREL;\n \t      my_getExpression (imm_expr, s);\n \t      s = expr_end;\n@@ -2160,7 +2160,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t      continue;\n \n \t    case 'a':\t\t/* 20-bit PC-relative offset.  */\n-jump:\n+\t    jump:\n \t      my_getExpression (imm_expr, s);\n \t      s = expr_end;\n \t      *imm_reloc = BFD_RELOC_RISCV_JMP;\n@@ -2290,7 +2290,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n       insn_with_csr = FALSE;\n     }\n \n-out:\n+ out:\n   /* Restore the character we might have clobbered above.  */\n   if (save_c)\n     *(argsStart - 1) = save_c;\n@@ -3142,7 +3142,7 @@ md_convert_frag_branch (fragS *fragp)\n       md_number_to_chars ((char *) buf, insn, 4);\n       buf += 4;\n \n-jump:\n+    jump:\n       /* Jump to the target.  */\n       fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,\n \t\t\t  4, &exp, FALSE, BFD_RELOC_RISCV_JMP);\n@@ -3162,7 +3162,7 @@ md_convert_frag_branch (fragS *fragp)\n       abort ();\n     }\n \n-done:\n+ done:\n   fixp->fx_file = fragp->fr_file;\n   fixp->fx_line = fragp->fr_line;\n "
    },
    {
      "sha": "91480de405884ae6e7dffd965a1df99c56c13ce9",
      "filename": "gas/config/tc-s12z.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-s12z.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -322,7 +322,7 @@ lex_imm (long *v, expressionS *exp_o)\n   *v = exp.X_add_number;\n   return true;\n \n-fail:\n+ fail:\n   fail_line_pointer = input_line_pointer;\n   input_line_pointer = ilp;\n   return false;"
    },
    {
      "sha": "71d4d94a8d7d707e8c02ad13e8889540b1616e9c",
      "filename": "gas/config/tc-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-xtensa.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2047,13 +2047,13 @@ tokenize_arguments (char **args, char *str)\n \t}\n     }\n \n-fini:\n+ fini:\n   if (saw_comma || saw_colon)\n     goto err;\n   input_line_pointer = old_input_line_pointer;\n   return num_args;\n \n-err:\n+ err:\n   if (saw_comma)\n     as_bad (_(\"extra comma\"));\n   else if (saw_colon)"
    },
    {
      "sha": "8f92d9f306264566f1d634441c8cadc892ef98b2",
      "filename": "gas/config/tc-z80.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-z80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/config/tc-z80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z80.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -3622,7 +3622,7 @@ md_assemble (char *str)\n \t\t      \"first unrecognized character is `%c'\"), *p);\n \t}\n     }\n-end:\n+ end:\n   input_line_pointer = old_ptr;\n }\n "
    },
    {
      "sha": "e603099e940fcdf712fe8d6b357b5c4d4680c4ab",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -5810,7 +5810,7 @@ s_incbin (int x ATTRIBUTE_UNUSED)\n \tas_warn (_(\"truncated file `%s', %ld of %ld bytes read\"),\n \t\t path, bytes, count);\n     }\n-done:\n+ done:\n   if (binfile != NULL)\n     fclose (binfile);\n   if (path)\n@@ -5874,7 +5874,7 @@ s_include (int arg ATTRIBUTE_UNUSED)\n \n   free (path);\n   path = filename;\n-gotit:\n+ gotit:\n   /* malloc Storage leak when file is found on path.  FIXME-SOMEDAY.  */\n   register_dependency (path);\n   input_scrub_insert_file (path);"
    },
    {
      "sha": "160b0f74021e92e8858d331a1988b9927a34a0b2",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1638,7 +1638,7 @@ resolve_symbol_value (symbolS *symp)\n   if (finalize_syms)\n     S_SET_VALUE (symp, final_val);\n \n-exit_dont_set_value:\n+ exit_dont_set_value:\n   /* Always set the segment, even if not finalizing the value.\n      The segment is used to determine whether a symbol is defined.  */\n     S_SET_SEGMENT (symp, final_seg);"
    },
    {
      "sha": "0a6f07aa07795df47f8c7e0aced35c1683a60664",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -443,7 +443,7 @@ cvt_frag_to_fill (segT sec ATTRIBUTE_UNUSED, fragS *fragP)\n #ifdef HANDLE_ALIGN\n       HANDLE_ALIGN (fragP);\n #endif\n-skip_align:\n+    skip_align:\n       know (fragP->fr_next != NULL);\n       fragP->fr_offset = (fragP->fr_next->fr_address\n \t\t\t  - fragP->fr_address"
    },
    {
      "sha": "9333dffbdf6d77383dd872f735fe58974d3f3e6e",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/cskyelf.em: Indent labels correctly.\n+\t* ldfile.c: Likewise.\n+\t* ldlang.c: Likewise.\n+\t* plugin.c: Likewise.\n+\n 2020-02-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 25593"
    },
    {
      "sha": "e84ddb68dbdc1fbd7861ba44125050a8a4367420",
      "filename": "ld/emultempl/cskyelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/emultempl/cskyelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/emultempl/cskyelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/cskyelf.em?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -197,7 +197,7 @@ elf32_csky_add_stub_section (const char *stub_sec_name,\n   if (hook_in_stub (&info, &os->children.head))\n     return stub_sec;\n \n-err_ret:\n+ err_ret:\n   einfo (_(\"%X%P: can not make stub section: %E\\n\"));\n   return NULL;\n }"
    },
    {
      "sha": "aa84906992bbc75cdf338776e2ec092719269ea6",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -302,7 +302,7 @@ ldfile_try_open_bfd (const char *attempt,\n \t    }\n \t}\n     }\n-success:\n+ success:\n #ifdef ENABLE_PLUGINS\n   /* If plugins are active, they get first chance to claim\n      any successfully-opened input file.  We skip archives"
    },
    {
      "sha": "be9ac36ede430456456d14e97afcb0356cfb515c",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -489,7 +489,7 @@ compare_section (sort_type sort, asection *asec, asection *bsec)\n       /* Fall through.  */\n \n     case by_name:\n-sort_by_name:\n+    sort_by_name:\n       ret = strcmp (bfd_section_name (asec), bfd_section_name (bsec));\n       break;\n "
    },
    {
      "sha": "23a314543b91204f08e22e7a784f2822583c9733",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -336,7 +336,7 @@ plugin_get_ir_dummy_bfd (const char *name, bfd *srctemplate)\n \t    return abfd;\n \t}\n     }\n-report_error:\n+ report_error:\n   einfo (_(\"%F%P: could not create dummy IR bfd: %E\\n\"));\n   return NULL;\n }"
    },
    {
      "sha": "236e2d727cddbe5a6339008a2e40aff09709ecbb",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1,3 +1,15 @@\n+2020-02-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* aarch64-asm.c: Indent labels correctly.\n+\t* aarch64-dis.c: Likewise.\n+\t* aarch64-gen.c: Likewise.\n+\t* aarch64-opc.c: Likewise.\n+\t* alpha-dis.c: Likewise.\n+\t* i386-dis.c: Likewise.\n+\t* nds32-asm.c: Likewise.\n+\t* nfp-dis.c: Likewise.\n+\t* visium-dis.c: Likewise.\n+\n 2020-02-25  Claudiu Zissulescu <claziss@gmail.com>\n \n \t* arc-regs.h (int_vector_base): Make it available for all ARC"
    },
    {
      "sha": "fc70ffcc7b6324fe8a174b0fd9ba9709a3fd2284",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -1967,7 +1967,7 @@ convert_to_real (aarch64_inst *inst, const aarch64_opcode *real)\n       break;\n     }\n \n-convert_to_real_return:\n+ convert_to_real_return:\n   aarch64_replace_opcode (inst, real);\n }\n \n@@ -2099,7 +2099,7 @@ aarch64_opcode_encode (const aarch64_opcode *opcode,\n     }\n \n \n-encoding_exit:\n+ encoding_exit:\n   DEBUG_TRACE (\"exit with %s\", opcode->name);\n \n   *code = inst->value;"
    },
    {
      "sha": "8b213078e401a44a7c19f09be7b731e8abd73b3e",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2972,7 +2972,7 @@ aarch64_opcode_decode (const aarch64_opcode *opcode, const aarch64_insn code,\n       DEBUG_TRACE (\"constraint matching FAIL\");\n     }\n \n-decode_fail:\n+ decode_fail:\n   return FALSE;\n }\n \f"
    },
    {
      "sha": "7cfa5d301dd7ab12221ef2857133f33e62869566",
      "filename": "opcodes/aarch64-gen.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-gen.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -249,7 +249,7 @@ divide_table_1 (struct bittree *bittree, opcode_node *opcode)\n       goto divide_table_1_finish;\n     }\n \n-divide_table_1_try_again:\n+ divide_table_1_try_again:\n   mask_and = -1;\n   ent = opcode;\n   while (ent)\n@@ -339,7 +339,7 @@ divide_table_1 (struct bittree *bittree, opcode_node *opcode)\n   divide_table_1 (bittree->bits[0], list0.next);\n   divide_table_1 (bittree->bits[1], list1.next);\n \n-divide_table_1_finish:\n+ divide_table_1_finish:\n   if (debug)\n     printf (\"Leave from depth %d\\n\", depth);\n   --depth;"
    },
    {
      "sha": "9080716ca9f63e993fc7d9a3de7b11106c183874",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -5109,7 +5109,7 @@ verify_constraints (const struct aarch64_inst *inst,\n \t    }\n \t}\n \n-done:\n+    done:\n       /* Add the new instruction to the sequence.  */\n       memcpy (insn_sequence->current_insns + insn_sequence->next_insn++,\n \t      inst, sizeof (aarch64_inst));"
    },
    {
      "sha": "c3489004f38c48a8ae27b30596fe648b4bdec568",
      "filename": "opcodes/alpha-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/alpha-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/alpha-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/alpha-dis.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -146,7 +146,7 @@ print_insn_alpha (bfd_vma memaddr, struct disassemble_info *info)\n \n   return 4;\n \n-found:\n+ found:\n   (*info->fprintf_func) (info->stream, \"%s\", opcode->name);\n   if (opcode->operands[0] != 0)\n     (*info->fprintf_func) (info->stream, \"\\t\");"
    },
    {
      "sha": "77813e131e620bb5ce38ff334abb7fbfa5cb6549",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -12791,7 +12791,7 @@ putop (const char *in_template, int sizeflag)\n \tcase 'B':\n \t  if (l == 0 && len == 1)\n \t    {\n-case_B:\n+\t    case_B:\n \t      if (intel_syntax)\n \t\tbreak;\n \t      if (sizeflag & SUFFIX_ALWAYS)\n@@ -12956,7 +12956,7 @@ putop (const char *in_template, int sizeflag)\n \t      SAVE_LAST (*p);\n \t      break;\n \t    }\n-case_L:\n+\tcase_L:\n \t  if (intel_syntax)\n \t    break;\n \t  if (sizeflag & SUFFIX_ALWAYS)\n@@ -13005,7 +13005,7 @@ putop (const char *in_template, int sizeflag)\n \tcase 'P':\n \t  if (l == 0 && len == 1)\n \t    {\n-case_P:\n+\t    case_P:\n \t      if (intel_syntax)\n \t\t{\n \t\t  if ((rex & REX_W) == 0\n@@ -13075,7 +13075,7 @@ putop (const char *in_template, int sizeflag)\n \tcase 'Q':\n \t  if (l == 0 && len == 1)\n \t    {\n-case_Q:\n+\t    case_Q:\n \t      if (intel_syntax && !alt)\n \t\tbreak;\n \t      USED_REX (REX_W);\n@@ -13166,7 +13166,7 @@ putop (const char *in_template, int sizeflag)\n \tcase 'S':\n \t  if (l == 0 && len == 1)\n \t    {\n-case_S:\n+\t    case_S:\n \t      if (intel_syntax)\n \t\tbreak;\n \t      if (sizeflag & SUFFIX_ALWAYS)\n@@ -15864,7 +15864,7 @@ CRC32_Fixup (int bytemode, int sizeflag)\n   mnemonicendp = p;\n   *p = '\\0';\n \n-skip:\n+ skip:\n   if (modrm.mod == 3)\n     {\n       int add;\n@@ -16587,7 +16587,7 @@ MOVBE_Fixup (int bytemode, int sizeflag)\n   mnemonicendp = p;\n   *p = '\\0';\n \n-skip:\n+ skip:\n   OP_M (bytemode, sizeflag);\n }\n \n@@ -16624,7 +16624,7 @@ MOVSXD_Fixup (int bytemode, int sizeflag)\n       break;\n     }\n \n-skip:\n+ skip:\n   mnemonicendp = p;\n   *p = '\\0';\n   OP_E (bytemode, sizeflag);"
    },
    {
      "sha": "1eadefbbfc359265a7fa6860c3dad3d763fe8196",
      "filename": "opcodes/nds32-asm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/nds32-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/nds32-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/nds32-asm.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2405,7 +2405,7 @@ parse_operand (nds32_asm_desc_t *pdesc, nds32_asm_insn_t *pinsn,\n       abort ();\n     }\n \n-done:\n+ done:\n   /* Don't silently discarding bits.  */\n   if (value & __MASK (fld->shift))\n     {\n@@ -2533,7 +2533,7 @@ parse_insn (nds32_asm_desc_t *pdesc, nds32_asm_insn_t *pinsn,\n       if (*plex == 0 && (*p == '\\0' || *p == '!' || *p == '#'))\n \treturn 1;\n \n-reject:\n+    reject:\n       /* If not accepted, try another combination.  */\n       variant++;\n     }\n@@ -2564,7 +2564,7 @@ nds32_assemble (nds32_asm_desc_t *pdesc, nds32_asm_insn_t *pinsn,\n     *s++ = '\\0';\n   dot = strchr (mnemoic, '.');\n \n-retry_dot:\n+ retry_dot:\n   /* Lookup the opcode syntax.  */\n   hash = htab_hash_string (mnemoic);\n   opc = (struct nds32_opcode *)\n@@ -2615,6 +2615,6 @@ nds32_assemble (nds32_asm_desc_t *pdesc, nds32_asm_insn_t *pinsn,\n   /* A matched opcode is found.  Write the result to instruction buffer.  */\n   pdesc->result = NASM_OK;\n \n-out:\n+ out:\n   free (str);\n }"
    },
    {
      "sha": "aac3903899cb0585eaeb5aa727b13df79742e6e8",
      "filename": "opcodes/nfp-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/nfp-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/nfp-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/nfp-dis.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -2958,7 +2958,7 @@ print_insn_nfp (bfd_vma addr, struct disassemble_info *dinfo)\n \n   err = _print_instrs (addr, dinfo, &opts);\n \n-end:\n+ end:\n   if (err != 8)\n     dinfo->fprintf_func (dinfo->stream, \"\\t # ERROR\");\n   if (err == _NFP_ERR_CONT)"
    },
    {
      "sha": "851c5460c97eca10f5df9ccf41dace96884388b5",
      "filename": "opcodes/visium-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/visium-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dc1e8a474f904419abaa27da4be5b0f735a87255/opcodes/visium-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/visium-dis.c?ref=dc1e8a474f904419abaa27da4be5b0f735a87255",
      "patch": "@@ -166,7 +166,7 @@ disassem_class0 (disassemble_info *info, unsigned int ins)\n     }\n   return 0;\n \n-illegal_opcode:\n+ illegal_opcode:\n   return -1;\n }\n \n@@ -421,7 +421,7 @@ disassem_class1 (disassemble_info *info, unsigned int ins)\n \n   return 0;\n \n-illegal_opcode:\n+ illegal_opcode:\n   return -1;\n }\n \n@@ -518,7 +518,7 @@ disassem_class2 (disassemble_info *info, unsigned int ins)\n \n   return 0;\n \n-illegal_opcode:\n+ illegal_opcode:\n   return -1;\n }\n \n@@ -747,7 +747,7 @@ disassem_class3 (disassemble_info *info, unsigned int ins)\n \n   return 0;\n \n-illegal_opcode:\n+ illegal_opcode:\n   return -1;\n \n }"
    }
  ]
}