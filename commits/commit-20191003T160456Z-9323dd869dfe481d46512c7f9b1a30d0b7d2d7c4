{
  "sha": "9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTMyM2RkODY5ZGZlNDgxZDQ2NTEyYzdmOWIxYTMwZDBiN2QyZDdjNA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-09-17T05:57:00Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:56Z"
    },
    "message": "libctf: make ctf_dump not crash on OOM\n\nctf_dump calls ctf_str_append extensively but never checks to see if it\nreturns NULL (on OOM).  If it ever does, we truncate the string we are\nappending to and leak it!\n\nInstead, create a variant of ctf_str_append that returns the *original\nstring* on OOM, and use it in ctf-dump.  It is far better to omit a tiny\npiece of a dump on OOM than to omit a bigger piece, and it is also\nbetter to do this in what is after all purely debugging code than it is\nto uglify ctf-dump.c with huge numbers of checks for the out-of-memory\ncase.  Slightly truncated debugging output is better than no debugging\noutput at all and an out-of-memory message.\n\nNew in v4.\n\nlibctf/\n\t* ctf-impl.h (ctf_str_append_noerr): Declare.\n\t* ctf-util.c (ctf_str_append_noerr): Define in terms of\n\tctf_str_append.\n\t* ctf-dump.c (str_append): New, call it.\n\t(ctf_dump_format_type): Use str_append, not ctf_str_append.\n\t(ctf_dump_label): Likewise.\n\t(ctf_dump_objts): Likewise.\n\t(ctf_dump_funcs): Likewise.\n\t(ctf_dump_var): Likewise.\n\t(ctf_dump_member): Likewise.\n\t(ctf_dump_type): Likewise.\n\t(ctf_dump): Likewise.",
    "tree": {
      "sha": "572351e13f69fc0b3cd6ce7292ffde488d302905",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/572351e13f69fc0b3cd6ce7292ffde488d302905"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de07e349bea156484fae1dbec974fdbbf207d57d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de07e349bea156484fae1dbec974fdbbf207d57d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de07e349bea156484fae1dbec974fdbbf207d57d"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 61,
    "deletions": 23
  },
  "files": [
    {
      "sha": "b7f12d8e092494c6cd2cf1242a5d9af497fe5e10",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
      "patch": "@@ -1,3 +1,18 @@\n+2019-09-23  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_str_append_noerr): Declare.\n+\t* ctf-util.c (ctf_str_append_noerr): Define in terms of\n+\tctf_str_append.\n+\t* ctf-dump.c (str_append): New, call it.\n+\t(ctf_dump_format_type): Use str_append, not ctf_str_append.\n+\t(ctf_dump_label): Likewise.\n+\t(ctf_dump_objts): Likewise.\n+\t(ctf_dump_funcs): Likewise.\n+\t(ctf_dump_var): Likewise.\n+\t(ctf_dump_member): Likewise.\n+\t(ctf_dump_type): Likewise.\n+\t(ctf_dump): Likewise.\n+\n 2019-09-23  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_alloc): Remove."
    },
    {
      "sha": "88e81a574f44c67d1395732cd994c5eb96f320ff",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 31,
      "deletions": 22,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
      "patch": "@@ -20,6 +20,8 @@\n #include <ctf-impl.h>\n #include <string.h>\n \n+#define str_append(s, a) ctf_str_append_noerr (s, a)\n+\n /* One item to be dumped, in string form.  */\n \n typedef struct ctf_dump_item\n@@ -119,7 +121,7 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id, int flag)\n \t{\n \t  if (id == 0 || ctf_errno (fp) == ECTF_NONREPRESENTABLE)\n \t    {\n-\t      str = ctf_str_append (str, \" (type not represented in CTF)\");\n+\t      str = str_append (str, \" (type not represented in CTF)\");\n \t      ctf_set_errno (fp, ECTF_NOTREF);\n \t      break;\n \t    }\n@@ -147,13 +149,13 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id, int flag)\n \t}\n       free (buf);\n       buf = NULL;\n-      str = ctf_str_append (str, bit);\n+      str = str_append (str, bit);\n       free (bit);\n       bit = NULL;\n \n       new_id = ctf_type_reference (fp, id);\n       if (new_id != CTF_ERR)\n-\tstr = ctf_str_append (str, \" ->\");\n+\tstr = str_append (str, \" ->\");\n     } while (new_id != CTF_ERR);\n \n   if (ctf_errno (fp) != ECTF_NOTREF)\n@@ -319,7 +321,7 @@ ctf_dump_label (const char *name, const ctf_lblinfo_t *info,\n       return -1;\t\t\t/* errno is set for us.  */\n     }\n \n-  str = ctf_str_append (str, typestr);\n+  str = str_append (str, typestr);\n   free (typestr);\n \n   ctf_dump_append (state, str);\n@@ -376,7 +378,7 @@ ctf_dump_objts (ctf_file_t *fp, ctf_dump_state_t *state)\n \t  return -1;\t\t\t/* errno is set for us.  */\n \t}\n \n-      str = ctf_str_append (str, typestr);\n+      str = str_append (str, typestr);\n       free (typestr);\n \n       ctf_dump_append (state, str);\n@@ -426,7 +428,7 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n \t  goto err;\n \t}\n \n-      str = ctf_str_append (str, \" \");\n+      str = str_append (str, \" \");\n \n       /* Function name.  */\n \n@@ -441,8 +443,8 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n \t  if (asprintf (&bit, \"%s (0x%lx) \", sym_name, (unsigned long) i) < 0)\n \t    goto oom;\n \t}\n-      str = ctf_str_append (str, bit);\n-      str = ctf_str_append (str, \" (\");\n+      str = str_append (str, bit);\n+      str = str_append (str, \" (\");\n       free (bit);\n \n       /* Function arguments.  */\n@@ -460,15 +462,15 @@ ctf_dump_funcs (ctf_file_t *fp, ctf_dump_state_t *state)\n \t      err = \"look up argument type name\";\n \t      goto err;\n \t    }\n-\t  str = ctf_str_append (str, bit);\n+\t  str = str_append (str, bit);\n \t  if ((j < fi.ctc_argc - 1) || (fi.ctc_flags & CTF_FUNC_VARARG))\n-\t    str = ctf_str_append (str, \", \");\n+\t    str = str_append (str, \", \");\n \t  free (bit);\n \t}\n \n       if (fi.ctc_flags & CTF_FUNC_VARARG)\n-\tstr = ctf_str_append (str, \"...\");\n-      str = ctf_str_append (str, \")\");\n+\tstr = str_append (str, \"...\");\n+      str = str_append (str, \")\");\n \n       free (args);\n       ctf_dump_append (state, str);\n@@ -507,7 +509,7 @@ ctf_dump_var (const char *name, ctf_id_t type, void *arg)\n       return -1;\t\t\t/* errno is set for us.  */\n     }\n \n-  str = ctf_str_append (str, typestr);\n+  str = str_append (str, typestr);\n   free (typestr);\n \n   ctf_dump_append (state, str);\n@@ -526,7 +528,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n   ssize_t i;\n \n   for (i = 0; i < depth; i++)\n-    *state->cdm_str = ctf_str_append (*state->cdm_str, \"    \");\n+    *state->cdm_str = str_append (*state->cdm_str, \"    \");\n \n   if ((typestr = ctf_type_aname (state->cdm_fp, id)) == NULL)\n     {\n@@ -536,7 +538,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \t\t\toffset) < 0)\n \t    goto oom;\n \n-\t  *state->cdm_str = ctf_str_append (*state->cdm_str, bit);\n+\t  *state->cdm_str = str_append (*state->cdm_str, bit);\n \t  free (typestr);\n \t  free (bit);\n \t  return 0;\n@@ -549,7 +551,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \t\toffset, id, ctf_type_kind (state->cdm_fp, id), typestr, name,\n \t\t(unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n     goto oom;\n-  *state->cdm_str = ctf_str_append (*state->cdm_str, bit);\n+  *state->cdm_str = str_append (*state->cdm_str, bit);\n   free (typestr);\n   free (bit);\n   typestr = NULL;\n@@ -563,12 +565,12 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n       if (asprintf (&bit, \", format 0x%x, offset:bits 0x%x:0x%x\", ep.cte_format,\n \t\t    ep.cte_offset, ep.cte_bits) < 0)\n \tgoto oom;\n-      *state->cdm_str = ctf_str_append (*state->cdm_str, bit);\n+      *state->cdm_str = str_append (*state->cdm_str, bit);\n       free (bit);\n       bit = NULL;\n     }\n \n-  *state->cdm_str = ctf_str_append (*state->cdm_str, \")\\n\");\n+  *state->cdm_str = str_append (*state->cdm_str, \")\\n\");\n   return 0;\n \n  oom:\n@@ -593,7 +595,7 @@ ctf_dump_type (ctf_id_t id, int flag, void *arg)\n       goto err;\n     }\n \n-  str = ctf_str_append (str, \"\\n\");\n+  str = str_append (str, \"\\n\");\n   if ((ctf_type_visit (state->cds_fp, id, ctf_dump_member, &membstate)) < 0)\n     {\n       if (id == 0 || ctf_errno (state->cds_fp) == ECTF_NONREPRESENTABLE)\n@@ -752,8 +754,8 @@ ctf_dump (ctf_file_t *fp, ctf_dump_state_t **statep, ctf_sect_names_t sect,\n \t    nline[0] = '\\0';\n \n \t  ret = func (sect, line, arg);\n-\t  str = ctf_str_append (str, ret);\n-\t  str = ctf_str_append (str, \"\\n\");\n+\t  str = str_append (str, ret);\n+\t  str = str_append (str, \"\\n\");\n \t  if (ret != line)\n \t    free (ret);\n \n@@ -772,7 +774,14 @@ ctf_dump (ctf_file_t *fp, ctf_dump_state_t **statep, ctf_sect_names_t sect,\n \tstr[len-1] = '\\0';\n     }\n   else\n-    str = strdup (state->cds_current->cdi_item);\n+    {\n+      str = strdup (state->cds_current->cdi_item);\n+      if (!str)\n+\t{\n+\t  ctf_set_errno (fp, ENOMEM);\n+\t  return str;\n+\t}\n+    }\n \n   ctf_set_errno (fp, 0);\n   return str;"
    },
    {
      "sha": "6040457e36ec2d8176250eb4f1f007315deb1dd5",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
      "patch": "@@ -457,6 +457,7 @@ extern ssize_t ctf_pread (int fd, void *buf, ssize_t count, off_t offset);\n \n extern void *ctf_realloc (ctf_file_t *, void *, size_t);\n extern char *ctf_str_append (char *, const char *);\n+extern char *ctf_str_append_noerr (char *, const char *);\n extern const char *ctf_strerror (int);\n \n extern ctf_id_t ctf_type_resolve_unsliced (ctf_file_t *, ctf_id_t);"
    },
    {
      "sha": "d4a1c5aaeaceef564982062536ef600deb2d7f19",
      "filename": "libctf/ctf-util.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-util.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4/libctf/ctf-util.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-util.c?ref=9323dd869dfe481d46512c7f9b1a30d0b7d2d7c4",
      "patch": "@@ -103,7 +103,7 @@ ctf_sym_to_elf64 (const Elf32_Sym *src, Elf64_Sym *dst)\n   return dst;\n }\n \n-/* A string appender working on dynamic strings.  */\n+/* A string appender working on dynamic strings.  Returns NULL on OOM.  */\n \n char *\n ctf_str_append (char *s, const char *append)\n@@ -127,6 +127,19 @@ ctf_str_append (char *s, const char *append)\n   return s;\n }\n \n+/* A version of ctf_str_append that returns the old string on OOM.  */\n+\n+char *\n+ctf_str_append_noerr (char *s, const char *append)\n+{\n+  char *new_s;\n+\n+  new_s = ctf_str_append (s, append);\n+  if (!new_s)\n+    return s;\n+  return new_s;\n+}\n+\n /* A realloc() that fails noisily if called with any ctf_str_num_users.  */\n void *\n ctf_realloc (ctf_file_t *fp, void *ptr, size_t size)"
    }
  ]
}