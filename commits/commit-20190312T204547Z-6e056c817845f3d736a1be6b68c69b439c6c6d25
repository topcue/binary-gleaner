{
  "sha": "6e056c817845f3d736a1be6b68c69b439c6c6d25",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmUwNTZjODE3ODQ1ZjNkNzM2YTFiZTZiNjhjNjliNDM5YzZjNmQyNQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:39:02Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:45:47Z"
    },
    "message": "Add a new gdbarch method to resolve the address of TLS variables.\n\nPermit TLS variable addresses to be resolved purely by an ABI rather\nthan requiring a target method.  This doesn't try the target method if\nthe ABI function is present (even if the ABI function fails) to\nsimplify error handling.\n\ngdb/ChangeLog:\n\n\t* gdbarch.sh (get_thread_local_address): New method.\n\t* gdbarch.h, gdbarch.c: Regenerate.\n\t* target.c (target_translate_tls_address): Use\n\tgdbarch_get_thread_local_address if present instead of\n\ttarget::get_thread_local_address.",
    "tree": {
      "sha": "c5757ebd000ccd8a2d63440d6ef19db9e8c89d8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5757ebd000ccd8a2d63440d6ef19db9e8c89d8d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6e056c817845f3d736a1be6b68c69b439c6c6d25",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e056c817845f3d736a1be6b68c69b439c6c6d25",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6e056c817845f3d736a1be6b68c69b439c6c6d25",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e056c817845f3d736a1be6b68c69b439c6c6d25/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd250a1898bb6fdb41f4a1063dbcfac04affcd11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd250a1898bb6fdb41f4a1063dbcfac04affcd11",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd250a1898bb6fdb41f4a1063dbcfac04affcd11"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 68,
    "deletions": 5
  },
  "files": [
    {
      "sha": "f6447231e1e7c4bc19f2e4a3d3a38cb10b7cffd0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6e056c817845f3d736a1be6b68c69b439c6c6d25",
      "patch": "@@ -1,3 +1,11 @@\n+2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* gdbarch.sh (get_thread_local_address): New method.\n+\t* gdbarch.h, gdbarch.c: Regenerate.\n+\t* target.c (target_translate_tls_address): Use\n+\tgdbarch_get_thread_local_address if present instead of\n+\ttarget::get_thread_local_address.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* target.h (target::get_thread_local_address): Update comment."
    },
    {
      "sha": "2b3fcef004febe84097dc65e13eb69017728ff90",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=6e056c817845f3d736a1be6b68c69b439c6c6d25",
      "patch": "@@ -251,6 +251,7 @@ struct gdbarch\n   CORE_ADDR deprecated_function_start_offset;\n   gdbarch_remote_register_number_ftype *remote_register_number;\n   gdbarch_fetch_tls_load_module_address_ftype *fetch_tls_load_module_address;\n+  gdbarch_get_thread_local_address_ftype *get_thread_local_address;\n   CORE_ADDR frame_args_skip;\n   gdbarch_unwind_pc_ftype *unwind_pc;\n   gdbarch_unwind_sp_ftype *unwind_sp;\n@@ -613,6 +614,7 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of deprecated_function_start_offset, invalid_p == 0 */\n   /* Skip verify of remote_register_number, invalid_p == 0 */\n   /* Skip verify of fetch_tls_load_module_address, has predicate.  */\n+  /* Skip verify of get_thread_local_address, has predicate.  */\n   /* Skip verify of frame_args_skip, invalid_p == 0 */\n   /* Skip verify of unwind_pc, invalid_p == 0 */\n   /* Skip verify of unwind_sp, invalid_p == 0 */\n@@ -1073,6 +1075,12 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: get_syscall_number = <%s>\\n\",\n                       host_address_to_string (gdbarch->get_syscall_number));\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: gdbarch_get_thread_local_address_p() = %d\\n\",\n+                      gdbarch_get_thread_local_address_p (gdbarch));\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: get_thread_local_address = <%s>\\n\",\n+                      host_address_to_string (gdbarch->get_thread_local_address));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: gnu_triplet_regexp = <%s>\\n\",\n                       host_address_to_string (gdbarch->gnu_triplet_regexp));\n@@ -3018,6 +3026,30 @@ set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch,\n   gdbarch->fetch_tls_load_module_address = fetch_tls_load_module_address;\n }\n \n+int\n+gdbarch_get_thread_local_address_p (struct gdbarch *gdbarch)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  return gdbarch->get_thread_local_address != NULL;\n+}\n+\n+CORE_ADDR\n+gdbarch_get_thread_local_address (struct gdbarch *gdbarch, ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  gdb_assert (gdbarch->get_thread_local_address != NULL);\n+  if (gdbarch_debug >= 2)\n+    fprintf_unfiltered (gdb_stdlog, \"gdbarch_get_thread_local_address called\\n\");\n+  return gdbarch->get_thread_local_address (gdbarch, ptid, lm_addr, offset);\n+}\n+\n+void\n+set_gdbarch_get_thread_local_address (struct gdbarch *gdbarch,\n+                                      gdbarch_get_thread_local_address_ftype get_thread_local_address)\n+{\n+  gdbarch->get_thread_local_address = get_thread_local_address;\n+}\n+\n CORE_ADDR\n gdbarch_frame_args_skip (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "abb72e752b1f290b297376e2e3297d3513eb760e",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=6e056c817845f3d736a1be6b68c69b439c6c6d25",
      "patch": "@@ -649,6 +649,18 @@ typedef CORE_ADDR (gdbarch_fetch_tls_load_module_address_ftype) (struct objfile\n extern CORE_ADDR gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, struct objfile *objfile);\n extern void set_gdbarch_fetch_tls_load_module_address (struct gdbarch *gdbarch, gdbarch_fetch_tls_load_module_address_ftype *fetch_tls_load_module_address);\n \n+/* Return the thread-local address at OFFSET in the thread-local\n+   storage for the thread PTID and the shared library or executable\n+   file given by LM_ADDR.  If that block of thread-local storage hasn't\n+   been allocated yet, this function may throw an error.  LM_ADDR may\n+   be zero for statically linked multithreaded inferiors. */\n+\n+extern int gdbarch_get_thread_local_address_p (struct gdbarch *gdbarch);\n+\n+typedef CORE_ADDR (gdbarch_get_thread_local_address_ftype) (struct gdbarch *gdbarch, ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset);\n+extern CORE_ADDR gdbarch_get_thread_local_address (struct gdbarch *gdbarch, ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset);\n+extern void set_gdbarch_get_thread_local_address (struct gdbarch *gdbarch, gdbarch_get_thread_local_address_ftype *get_thread_local_address);\n+\n extern CORE_ADDR gdbarch_frame_args_skip (struct gdbarch *gdbarch);\n extern void set_gdbarch_frame_args_skip (struct gdbarch *gdbarch, CORE_ADDR frame_args_skip);\n "
    },
    {
      "sha": "63bfbad7d9e7dc2f019100e95040c909ff5b0d18",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=6e056c817845f3d736a1be6b68c69b439c6c6d25",
      "patch": "@@ -602,6 +602,14 @@ m;int;remote_register_number;int regno;regno;;default_remote_register_number;;0\n \n # Fetch the target specific address used to represent a load module.\n F;CORE_ADDR;fetch_tls_load_module_address;struct objfile *objfile;objfile\n+\n+# Return the thread-local address at OFFSET in the thread-local\n+# storage for the thread PTID and the shared library or executable\n+# file given by LM_ADDR.  If that block of thread-local storage hasn't\n+# been allocated yet, this function may throw an error.  LM_ADDR may\n+# be zero for statically linked multithreaded inferiors.\n+\n+M;CORE_ADDR;get_thread_local_address;ptid_t ptid, CORE_ADDR lm_addr, CORE_ADDR offset;ptid, lm_addr, offset\n #\n v;CORE_ADDR;frame_args_skip;;;0;;;0\n m;CORE_ADDR;unwind_pc;struct frame_info *next_frame;next_frame;;default_unwind_pc;;0"
    },
    {
      "sha": "c27157d209f9bd75c1fe3bad919f6bd7209a8d25",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e056c817845f3d736a1be6b68c69b439c6c6d25/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=6e056c817845f3d736a1be6b68c69b439c6c6d25",
      "patch": "@@ -698,8 +698,9 @@ target_translate_tls_address (struct objfile *objfile, CORE_ADDR offset)\n {\n   volatile CORE_ADDR addr = 0;\n   struct target_ops *target = current_top_target ();\n+  struct gdbarch *gdbarch = target_gdbarch ();\n \n-  if (gdbarch_fetch_tls_load_module_address_p (target_gdbarch ()))\n+  if (gdbarch_fetch_tls_load_module_address_p (gdbarch))\n     {\n       ptid_t ptid = inferior_ptid;\n \n@@ -708,10 +709,14 @@ target_translate_tls_address (struct objfile *objfile, CORE_ADDR offset)\n \t  CORE_ADDR lm_addr;\n \t  \n \t  /* Fetch the load module address for this objfile.  */\n-\t  lm_addr = gdbarch_fetch_tls_load_module_address (target_gdbarch (),\n+\t  lm_addr = gdbarch_fetch_tls_load_module_address (gdbarch,\n \t                                                   objfile);\n \n-\t  addr = target->get_thread_local_address (ptid, lm_addr, offset);\n+\t  if (gdbarch_get_thread_local_address_p (gdbarch))\n+\t    addr = gdbarch_get_thread_local_address (gdbarch, ptid, lm_addr,\n+\t\t\t\t\t\t     offset);\n+\t  else\n+\t    addr = target->get_thread_local_address (ptid, lm_addr, offset);\n \t}\n       /* If an error occurred, print TLS related messages here.  Otherwise,\n          throw the error to some higher catcher.  */\n@@ -766,8 +771,6 @@ target_translate_tls_address (struct objfile *objfile, CORE_ADDR offset)\n \t}\n       END_CATCH\n     }\n-  /* It wouldn't be wrong here to try a gdbarch method, too; finding\n-     TLS is an ABI-specific thing.  But we don't do that yet.  */\n   else\n     error (_(\"Cannot find thread-local variables on this target\"));\n "
    }
  ]
}