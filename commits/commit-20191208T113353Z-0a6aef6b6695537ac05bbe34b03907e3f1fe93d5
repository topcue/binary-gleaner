{
  "sha": "0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGE2YWVmNmI2Njk1NTM3YWMwNWJiZTM0YjAzOTA3ZTNmMWZlOTNkNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-07T00:55:52Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-08T11:33:53Z"
    },
    "message": "S12Z disassembler memory leak\n\n\t* s12z-opc.c (exg_sex_discrim): Don't leak memory on invalid\n\tregisters.",
    "tree": {
      "sha": "e293478d4c021fb414a90944c2232df5faec041f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e293478d4c021fb414a90944c2232df5faec041f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f765336bb07db50669efc2b8009f193c9c46ae7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f765336bb07db50669efc2b8009f193c9c46ae7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f765336bb07db50669efc2b8009f193c9c46ae7"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 17,
    "deletions": 12
  },
  "files": [
    {
      "sha": "2183b2383fa3691c421fcfb5d4702d84f9b5eea3",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-08  Alan Modra  <amodra@gmail.com>\n+\n+\t* s12z-opc.c (exg_sex_discrim): Don't leak memory on invalid\n+\tregisters.\n+\n 2019-12-05  Jan Beulich  <jbeulich@suse.com>\n \n \t* aarch64-tbl.h (aarch64_feature_crypto,"
    },
    {
      "sha": "475c9eb5f1e79af0e61f992872cc8e292de1ce67",
      "filename": "opcodes/s12z-opc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5/opcodes/s12z-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a6aef6b6695537ac05bbe34b03907e3f1fe93d5/opcodes/s12z-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-opc.c?ref=0a6aef6b6695537ac05bbe34b03907e3f1fe93d5",
      "patch": "@@ -2195,32 +2195,32 @@ loop_prim_n_bytes (struct mem_read_abstraction_base *mra)\n \f\n \n static enum optr\n-exg_sex_discrim (struct mem_read_abstraction_base *mra, enum optr hint ATTRIBUTE_UNUSED)\n+exg_sex_discrim (struct mem_read_abstraction_base *mra,\n+\t\t enum optr hint ATTRIBUTE_UNUSED)\n {\n   uint8_t eb;\n   int status = mra->read (mra, 0, 1, &eb);\n+  enum optr operator = OP_INVALID;\n   if (status < 0)\n-    return OP_INVALID;\n+    return operator;\n \n   struct operand *op0 = create_register_operand ((eb & 0xf0) >> 4);\n   struct operand *op1 = create_register_operand (eb & 0xf);\n \n   int reg0 = ((struct register_operand *) op0)->reg;\n-  if (reg0 < 0 || reg0 >= S12Z_N_REGISTERS)\n-    return OP_INVALID;\n-\n   int reg1 = ((struct register_operand *) op1)->reg;\n-  if (reg1 < 0 || reg1 >= S12Z_N_REGISTERS)\n-    return OP_INVALID;\n-\n-  const struct reg *r0 = registers + reg0;\n-  const struct reg *r1 = registers + reg1;\n+  if (reg0 >= 0 && reg0 < S12Z_N_REGISTERS\n+      && reg1 >= 0 && reg1 < S12Z_N_REGISTERS)\n+    {\n+      const struct reg *r0 = registers + reg0;\n+      const struct reg *r1 = registers + reg1;\n \n-  enum optr operator = (r0->bytes < r1->bytes) ? OP_sex : OP_exg;\n+      operator = r0->bytes < r1->bytes ? OP_sex : OP_exg;\n+    }\n \n   free (op0);\n   free (op1);\n-  \n+\n   return operator;\n }\n "
    }
  ]
}