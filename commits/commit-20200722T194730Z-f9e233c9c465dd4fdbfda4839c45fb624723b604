{
  "sha": "f9e233c9c465dd4fdbfda4839c45fb624723b604",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjllMjMzYzljNDY1ZGQ0ZmRiZmRhNDgzOWM0NWZiNjI0NzIzYjYwNA==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-06-16T18:39:22Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:47:30Z"
    },
    "message": "Add test for accessing read-only mmapped data in a core file\n\nThis test passes when run using a GDB with my corefile patches.  When\nrun against a GDB without my patches, I see the following failures,\nthe first of which is due to the test added by this commit:\n\nFAIL: gdb.base/corefile.exp: accessing read-only mmapped data in core file (mapping address not found in core file)\nFAIL: gdb.base/corefile.exp: accessing anonymous, unwritten-to mmap data\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/corefile.exp: Add test \"accessing read-only mmapped\n\tdata in core file\".\n\t* gdb.base/coremaker.c (buf2ro): New global.\n\t(mmapdata): Add a read-only mmap mapping.",
    "tree": {
      "sha": "ce95570278281575074683e5df03a8e05a01818c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce95570278281575074683e5df03a8e05a01818c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f9e233c9c465dd4fdbfda4839c45fb624723b604",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e233c9c465dd4fdbfda4839c45fb624723b604",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f9e233c9c465dd4fdbfda4839c45fb624723b604",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e233c9c465dd4fdbfda4839c45fb624723b604/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "db082f5979ff95409b7de7a2a96d083f2642c8c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db082f5979ff95409b7de7a2a96d083f2642c8c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/db082f5979ff95409b7de7a2a96d083f2642c8c3"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 36,
    "deletions": 3
  },
  "files": [
    {
      "sha": "5ed9969d187347fe7bce270b02ed10bc668abf62",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f9e233c9c465dd4fdbfda4839c45fb624723b604",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.base/corefile.exp: Add test \"accessing read-only mmapped\n+\tdata in core file\".\n+\t* gdb.base/coremaker.c (buf2ro): New global.\n+\t(mmapdata): Add a read-only mmap mapping.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n \n \tPR corefiles/25631"
    },
    {
      "sha": "8abf62b51f1bcac129f5958cc48ec7a406aab7c7",
      "filename": "gdb/testsuite/gdb.base/corefile.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/gdb.base/corefile.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/gdb.base/corefile.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/corefile.exp?ref=f9e233c9c465dd4fdbfda4839c45fb624723b604",
      "patch": "@@ -34,7 +34,10 @@ if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {\n     return -1\n }\n \n-set corefile [core_find $binfile {coremmap.data}]\n+# Do not delete coremap.data when calling core_find.  This file is\n+# required for GDB to find mmap'd data in the \"accessing read-only\n+# mmapped data in core file\" test.\n+set corefile [core_find $binfile {}]\n if {$corefile == \"\"} {\n     return 0\n }\n@@ -175,6 +178,19 @@ gdb_test_multiple \"x/8bd buf2\" \"$test\" {\n     }\n }\n \n+set test \"accessing read-only mmapped data in core file\"\n+gdb_test_multiple \"x/8bd buf2ro\" \"$test\" {\n+    -re \".*:.*0.*1.*2.*3.*4.*5.*6.*7.*$gdb_prompt $\" {\n+\tpass \"$test\"\n+    }\n+    -re \"0x\\[f\\]*:.*Cannot access memory at address 0x\\[f\\]*.*$gdb_prompt $\" {\n+\tfail \"$test (mapping failed at runtime)\"\n+    }\n+    -re \"0x.*:.*Cannot access memory at address 0x.*$gdb_prompt $\" {\n+\tfail \"$test (mapping address not found in core file)\"\n+    }\n+}\n+\n # Test ability to read anonymous and, more importantly, unwritten-to\n # mmap'd data.\n "
    },
    {
      "sha": "3fc13e92875e7a636c479e33641e667156c501c8",
      "filename": "gdb/testsuite/gdb.base/coremaker.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/gdb.base/coremaker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e233c9c465dd4fdbfda4839c45fb624723b604/gdb/testsuite/gdb.base/coremaker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/coremaker.c?ref=f9e233c9c465dd4fdbfda4839c45fb624723b604",
      "patch": "@@ -38,6 +38,7 @@\n \n char *buf1;\n char *buf2;\n+char *buf2ro;\n char *buf3;\n \n int coremaker_data = 1;\t/* In Data section */\n@@ -90,16 +91,25 @@ mmapdata ()\n       return;\n     }\n \n+  /* Map in another copy, read-only.  We won't write to this copy so it\n+     will likely not end up in the core file.  */\n+  buf2ro = (char *) mmap (0, MAPSIZE, PROT_READ, MAP_PRIVATE, fd, 0);\n+  if (buf2ro == (char *) -1)\n+    {\n+      perror (\"mmap failed\");\n+      return;\n+    }\n+\n   /* Verify that the original data and the mapped data are identical.\n      If not, we'd rather fail now than when trying to access the mapped\n      data from the core file. */\n \n   for (j = 0; j < MAPSIZE; ++j)\n     {\n-      if (buf1[j] != buf2[j])\n+      if (buf1[j] != buf2[j] || buf1[j] != buf2ro[j])\n \t{\n \t  fprintf (stderr, \"mapped data is incorrect\");\n-\t  buf2 = (char *) -1;\n+\t  buf2 = buf2ro = (char *) -1;\n \t  return;\n \t}\n     }"
    }
  ]
}