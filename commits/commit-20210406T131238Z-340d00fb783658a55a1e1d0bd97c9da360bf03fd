{
  "sha": "340d00fb783658a55a1e1d0bd97c9da360bf03fd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzQwZDAwZmI3ODM2NThhNTVhMWUxZDBiZDk3YzlkYTM2MGJmMDNmZA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-04-06T13:12:38Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-04-06T13:12:38Z"
    },
    "message": "[gdb/breakpoints] Workaround missing line-table entry\n\nWhen running test-case gdb.opt/inline-cmds.exp, we run into this KFAIL with\ngcc:\n...\nBreakpoint 7, main () at gdb.opt/inline-cmds.c:71^M\n71        result = 0; /* set breakpoint 3 here */^M\n(gdb) PASS: gdb.opt/inline-cmds.exp: continue to breakpoint: consecutive func1\nnext^M\n73        func1 (); /* first call */^M\n(gdb) PASS: gdb.opt/inline-cmds.exp: next to first func1\nnext^M\n75        marker ();^M\n(gdb) KFAIL: gdb.opt/inline-cmds.exp: next to second func1 (PRMS: gdb/25884)\n...\nwhile with clang we have instead:\n...\nnext^M\n74        func1 (); /* second call */^M\n(gdb) PASS: gdb.opt/inline-cmds.exp: next to second func1\n...\n\nThe relevant bit of the test source is here in inline-cmds.c:\n...\n    71    result = 0; /* set breakpoint 3 here */\n    72\n    73    func1 (); /* first call */\n    74    func1 (); /* second call */\n    75    marker ();\n...\nwith func1 defined as:\n...\n    33  inline __attribute__((always_inline)) int func1(void)\n    34  {\n    35    bar ();\n    36    return x * y;\n    37  }\n...\n\nThe corresponding insns are:\n...\n  40050b:       movl   $0x0,0x200b1f(%rip)        # 601034 <result>\n  400515:       callq  40057b <bar>\n  40051a:       callq  40057b <bar>\n  40051f:       callq  400596 <marker>\n...\nand the line number info is:\n...\nLine number    Starting address    View    Stmt\n         71            0x40050b               x\n         35            0x400515               x\n         75            0x40051f               x\n...\n\nThe line number info is missing an entry for the insn at 40051a, and that is\ncausing the FAIL.  This is a gcc issue, filed as PR gcc/98780 -\" Missing line\ntable entry for inlined stmt at -g -O0\".\n\n[ For contrast, with clang we have an extra entry:\n...\nLine number    Starting address    View    Stmt\n         71            0x40050b               x\n         35            0x400515               x\n         35            0x40051a\n         75            0x40051f               x\n...\nthough it appears to be missing the start-of-statement marker. ]\n\nHowever, there is debug info that indicates that the insn at 40051a is not\npart of the line table entry for the insn at 400515:\n...\n<2><1c4>: Abbrev Number: 8 (DW_TAG_inlined_subroutine)\n    <1c5>   DW_AT_abstract_origin: <0x2a2>\n    <1c9>   DW_AT_low_pc      : 0x400515\n    <1d1>   DW_AT_high_pc     : 0x5\n    <1d9>   DW_AT_call_file   : 1\n    <1da>   DW_AT_call_line   : 73\n <2><1db>: Abbrev Number: 8 (DW_TAG_inlined_subroutine)\n    <1dc>   DW_AT_abstract_origin: <0x2a2>\n    <1e0>   DW_AT_low_pc      : 0x40051a\n    <1e8>   DW_AT_high_pc     : 0x5\n    <1f0>   DW_AT_call_file   : 1\n    <1f1>   DW_AT_call_line   : 74\n...\nand indeed lldb manages to \"next\" from line 73 to line 74.\n\nWork around the missing line table entry, by using the inline frame info to\nnarrow the stepping range in prepare_one_step.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2021-04-06  Tom de Vries  <tdevries@suse.de>\n\n\tPR breakpoints/25884\n\t* infcmd.c (prepare_one_step): Using inline frame info to narrow\n\tstepping range.\n\ngdb/testsuite/ChangeLog:\n\n2021-04-06  Tom de Vries  <tdevries@suse.de>\n\n\tPR breakpoints/25884\n\t* gdb.opt/inline-cmds.exp: Remove kfail.",
    "tree": {
      "sha": "2a81d6e6766238775a5bb48455a10de8e5f32dcc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a81d6e6766238775a5bb48455a10de8e5f32dcc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/340d00fb783658a55a1e1d0bd97c9da360bf03fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/340d00fb783658a55a1e1d0bd97c9da360bf03fd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/340d00fb783658a55a1e1d0bd97c9da360bf03fd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/340d00fb783658a55a1e1d0bd97c9da360bf03fd/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eac4eb8ecb2626ef7711d8f6bee9e870ae435604",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eac4eb8ecb2626ef7711d8f6bee9e870ae435604"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 26,
    "deletions": 16
  },
  "files": [
    {
      "sha": "bcd3786598f0c58d472f07042fe455e135f2e5ae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=340d00fb783658a55a1e1d0bd97c9da360bf03fd",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-06  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR breakpoints/25884\n+\t* infcmd.c (prepare_one_step): Using inline frame info to narrow\n+\tstepping range.\n+\n 2021-04-06  Tom de Vries  <tdevries@suse.de>\n \n \tPR tui/27680"
    },
    {
      "sha": "60f25d2468612770205705faede730772e39bc2b",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=340d00fb783658a55a1e1d0bd97c9da360bf03fd",
      "patch": "@@ -1013,6 +1013,20 @@ prepare_one_step (thread_info *tp, struct step_command_fsm *sm)\n \t\t\t\t &tp->control.step_range_start,\n \t\t\t\t &tp->control.step_range_end);\n \n+\t  /* There's a problem in gcc (PR gcc/98780) that causes missing line\n+\t     table entries, which results in a too large stepping range.\n+\t     Use inlined_subroutine info to make the range more narrow.  */\n+\t  if (inline_skipped_frames (tp) > 0)\n+\t    {\n+\t      symbol *sym = inline_skipped_symbol (tp);\n+\t      if (SYMBOL_CLASS (sym) == LOC_BLOCK)\n+\t\t{\n+\t\t  const block *block = SYMBOL_BLOCK_VALUE (sym);\n+\t\t  if (BLOCK_END (block) < tp->control.step_range_end)\n+\t\t    tp->control.step_range_end = BLOCK_END (block);\n+\t\t}\n+\t    }\n+\n \t  tp->control.may_range_step = 1;\n \n \t  /* If we have no line info, switch to stepi mode.  */"
    },
    {
      "sha": "c6063be383289abe22a67f4e813f056bddfb409f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=340d00fb783658a55a1e1d0bd97c9da360bf03fd",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-06  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR breakpoints/25884\n+\t* gdb.opt/inline-cmds.exp: Remove kfail.\n+\n 2021-04-06  Tom de Vries  <tdevries@suse.de>\n \n \tPR testsuite/27691"
    },
    {
      "sha": "981dcbb4a29e9abc567d38b85ce5ff78ef6cb240",
      "filename": "gdb/testsuite/gdb.opt/inline-cmds.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 16,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/testsuite/gdb.opt/inline-cmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/340d00fb783658a55a1e1d0bd97c9da360bf03fd/gdb/testsuite/gdb.opt/inline-cmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.opt/inline-cmds.exp?ref=340d00fb783658a55a1e1d0bd97c9da360bf03fd",
      "patch": "@@ -222,22 +222,7 @@ gdb_breakpoint $line3\n gdb_continue_to_breakpoint \"consecutive func1\"\n \n gdb_test \"next\" \".*func1 .*first call.*\" \"next to first func1\"\n-set msg \"next to second func1\"\n-gdb_test_multiple \"next\" $msg {\n-    -re \".*func1 .*second call.*$gdb_prompt $\" {\n-\tpass $msg\n-    }\n-    -re \".*marker .*$gdb_prompt $\" {\n-\t# This assembles to two consecutive call instructions.\n-\t# Both appear to be at the same line, because they're\n-\t# in the body of the same inlined function.  This is\n-\t# reasonable for the line table.  GDB should take the\n-\t# containing block and/or function into account when\n-\t# deciding how far to step.  The single line table entry\n-\t# is actually two consecutive instances of the same line.\n-\tkfail gdb/25884 $msg\n-    }\n-}\n+gdb_test \"next\" \".*func1 .*second call.*\" \"next to second func1\"\n \n # It is easier when the two inlined functions are not on the same line.\n set line4 [gdb_get_line_number \"set breakpoint 4 here\"]"
    }
  ]
}