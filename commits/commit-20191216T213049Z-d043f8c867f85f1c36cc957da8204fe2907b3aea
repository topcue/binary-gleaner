{
  "sha": "d043f8c867f85f1c36cc957da8204fe2907b3aea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA0M2Y4Yzg2N2Y4NWYxYzM2Y2M5NTdkYTgyMDRmZTI5MDdiM2FlYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-16T21:30:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-16T21:30:49Z"
    },
    "message": "Fix double-free when creating more than one block in JIT debug info reader\n\nA double-free happens when using a JIT debug info reader that creates\nmore than one block.  In the loop that frees blocks in finalize_symtab,\nat the very end, the gdb_block_iter_tmp variable is set initially, but\nnot changed as the loop advances.  If we have two blocks, the first\niteration frees the first block, the second iteration frees the second\nblock, but the third iteration tries to free the second block again, as\ngdb_block_iter_tmp keeps pointing on the second block.\n\nFix it by assigning the gdb_block_iter_tmp variable in the loop.\n\nI have improved the jit-reader.exp test to cover this case, by adding a\nsecond \"JIT-ed\" function and creating a block for it.  I have renamed\nthe existing function to something I find a bit more descriptive.  There\nare no significant changes to jit-reader.exp itself, only updates\nfollowing the renaming.  The important changes are in jithost.c\n(generate a new function) and in jitreader.c (create a gdb_block for\nthat function).\n\nThis was found because of an ASan report:\n\n$ ./gdb testsuite/outputs/gdb.base/jit-reader/jit-reader -ex \"jit-reader-load /home/simark/build/binutils-gdb/gdb/testsuite/outputs/gdb.base/jit-reader/jitreader.so\" -ex r\nReading symbols from testsuite/outputs/gdb.base/jit-reader/jit-reader...\nStarting program: /home/simark/build/binutils-gdb/gdb/testsuite/outputs/gdb.base/jit-reader/jit-reader\n=================================================================\n==1751048==ERROR: AddressSanitizer: heap-use-after-free on address 0x604000042eb8 at pc 0x5650ef8eec88 bp 0x7ffe52767290 sp 0x7ffe52767280\nREAD of size 8 at 0x604000042eb8 thread T0\n    #0 0x5650ef8eec87 in finalize_symtab /home/simark/src/binutils-gdb/gdb/jit.c:768\n    #1 0x5650ef8eef88 in jit_object_close_impl /home/simark/src/binutils-gdb/gdb/jit.c:797\n    #2 0x7fbbda986278 in read_debug_info /home/simark/src/binutils-gdb/gdb/testsuite/gdb.base/jitreader.c:71\n    #3 0x5650ef8ef56b in jit_reader_try_read_symtab /home/simark/src/binutils-gdb/gdb/jit.c:850\n    #4 0x5650ef8effe3 in jit_register_code /home/simark/src/binutils-gdb/gdb/jit.c:948\n    #5 0x5650ef8f2c92 in jit_event_handler(gdbarch*) /home/simark/src/binutils-gdb/gdb/jit.c:1396\n    #6 0x5650ef0d137e in handle_jit_event /home/simark/src/binutils-gdb/gdb/breakpoint.c:5470\n    [snip]\n\n0x604000042eb8 is located 40 bytes inside of 48-byte region [0x604000042e90,0x604000042ec0)\nfreed by thread T0 here:\n    #0 0x7fbbe57376b0 in __interceptor_free /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:122\n    #1 0x5650ef8f350b in xfree<gdb_block> /home/simark/src/binutils-gdb/gdb/gdbsupport/common-utils.h:62\n    #2 0x5650ef8eeca9 in finalize_symtab /home/simark/src/binutils-gdb/gdb/jit.c:769\n    #3 0x5650ef8eef88 in jit_object_close_impl /home/simark/src/binutils-gdb/gdb/jit.c:797\n    #4 0x7fbbda986278 in read_debug_info /home/simark/src/binutils-gdb/gdb/testsuite/gdb.base/jitreader.c:71\n    #5 0x5650ef8ef56b in jit_reader_try_read_symtab /home/simark/src/binutils-gdb/gdb/jit.c:850\n    #6 0x5650ef8effe3 in jit_register_code /home/simark/src/binutils-gdb/gdb/jit.c:948\n    #7 0x5650ef8f2c92 in jit_event_handler(gdbarch*) /home/simark/src/binutils-gdb/gdb/jit.c:1396\n    #8 0x5650ef0d137e in handle_jit_event /home/simark/src/binutils-gdb/gdb/breakpoint.c:5470\n    [snip]\n\npreviously allocated by thread T0 here:\n    #0 0x7fbbe5737cd8 in __interceptor_calloc /build/gcc/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:153\n    #1 0x5650eef662f3 in xcalloc /home/simark/src/binutils-gdb/gdb/alloc.c:100\n    #2 0x5650ef8f34ea in xcnew<gdb_block> /home/simark/src/binutils-gdb/gdb/gdbsupport/poison.h:122\n    #3 0x5650ef8ed467 in jit_block_open_impl /home/simark/src/binutils-gdb/gdb/jit.c:557\n    #4 0x7fbbda98620a in read_debug_info /home/simark/src/binutils-gdb/gdb/testsuite/gdb.base/jitreader.c:60\n    #5 0x5650ef8ef56b in jit_reader_try_read_symtab /home/simark/src/binutils-gdb/gdb/jit.c:850\n    #6 0x5650ef8effe3 in jit_register_code /home/simark/src/binutils-gdb/gdb/jit.c:948\n    #7 0x5650ef8f2c92 in jit_event_handler(gdbarch*) /home/simark/src/binutils-gdb/gdb/jit.c:1396\n    #8 0x5650ef0d137e in handle_jit_event /home/simark/src/binutils-gdb/gdb/breakpoint.c:5470\n    [snip]\n\ngdb/ChangeLog:\n\n\t* jit.c (finalize_symtab): Set gdb_block_iter_tmp in loop.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/jit-reader.exp (jit_reader_test): Rename\n\tjit_function_00 to jit_function_stack_mangle.\n\t* gdb.base/jithost.c (jit_function_t): Rename to...\n\t(jit_function_stack_mangle_t): ... this.\n\t(jit_function_add_t): New typedef.\n\t(jit_function_00_code): Rename to...\n\t(jit_function_stack_mangle_code): ... this, make static.\n\t(jit_function_add_code): New.\n\t(main): Generate \"add\" function and call it.  Adjust to changes\n\tin jithost_abi.\n\t* gdb.base/jithost.h (struct jithost_abi_bounds): New.\n\t(struct jithost_abi) <begin, end>: Remove fields.\n\t<object, function_stack_mangle, function_add>: New fields.\n\t* gdb.base/jitreader.c (struct reader_state) <code_begin,\n\tcode_end>: Remove fields.\n\t<func_stack_mangle>: New field.\n\t(read_debug_info): Adjust to renaming, create block for \"add\"\n\tfunction.\n\t(read_sp, unwind_frame, get_frame_id): Adjust to other changes.",
    "tree": {
      "sha": "93631f6506ec32b03286584fb1a8423e12617e43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93631f6506ec32b03286584fb1a8423e12617e43"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d043f8c867f85f1c36cc957da8204fe2907b3aea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d043f8c867f85f1c36cc957da8204fe2907b3aea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d043f8c867f85f1c36cc957da8204fe2907b3aea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d043f8c867f85f1c36cc957da8204fe2907b3aea/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9fa87f4f6e732f5feb41f2fa7dc6faddb1fb627",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9fa87f4f6e732f5feb41f2fa7dc6faddb1fb627",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9fa87f4f6e732f5feb41f2fa7dc6faddb1fb627"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 104,
    "deletions": 31
  },
  "files": [
    {
      "sha": "c30b60efbfd29577448c8bf8a4e5a2173addca6e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c (finalize_symtab): Set gdb_block_iter_tmp in loop.\n+\n 2019-12-16  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (windows_nat_target::attach): Update."
    },
    {
      "sha": "1cd487502c5e5ff900d980fc3dfd6e2bccacced4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -765,6 +765,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n        gdb_block_iter;\n        gdb_block_iter = gdb_block_iter_tmp)\n     {\n+      gdb_block_iter_tmp = gdb_block_iter->next;\n       xfree ((void *) gdb_block_iter->name);\n       xfree (gdb_block_iter);\n     }"
    },
    {
      "sha": "4fd959171cdc13aee68b7f046e6c0d9bd0111932",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -1,3 +1,25 @@\n+2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb.base/jit-reader.exp (jit_reader_test): Rename\n+\tjit_function_00 to jit_function_stack_mangle.\n+\t* gdb.base/jithost.c (jit_function_t): Rename to...\n+\t(jit_function_stack_mangle_t): ... this.\n+\t(jit_function_add_t): New typedef.\n+\t(jit_function_00_code): Rename to...\n+\t(jit_function_stack_mangle_code): ... this, make static.\n+\t(jit_function_add_code): New.\n+\t(main): Generate \"add\" function and call it.  Adjust to changes\n+\tin jithost_abi.\n+\t* gdb.base/jithost.h (struct jithost_abi_bounds): New.\n+\t(struct jithost_abi) <begin, end>: Remove fields.\n+\t<object, function_stack_mangle, function_add>: New fields.\n+\t* gdb.base/jitreader.c (struct reader_state) <code_begin,\n+\tcode_end>: Remove fields.\n+\t<func_stack_mangle>: New field.\n+\t(read_debug_info): Adjust to renaming, create block for \"add\"\n+\tfunction.\n+\t(read_sp, unwind_frame, get_frame_id): Adjust to other changes.\n+\n 2019-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.tui/resize.exp: Fix regexp."
    },
    {
      "sha": "639c95f7402fa2a9caf975fd66182272a94910ab",
      "filename": "gdb/testsuite/gdb.base/jit-reader.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jit-reader.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jit-reader.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-reader.exp?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -120,15 +120,15 @@ proc jit_reader_test {} {\n \twith_test_prefix \"before mangling\" {\n \t    gdb_test \"bt\" \\\n \t\t[multi_line \\\n-\t\t     \"#0 ${any} in jit_function_00 ${any}\" \\\n+\t\t     \"#0 ${any} in jit_function_stack_mangle ${any}\" \\\n \t\t     \"#1 ${any} in main ${any}\" \\\n \t\t    ] \\\n \t\t\"bt works\"\n \n \t    set sp_before_mangling \\\n \t\t[get_hexadecimal_valueof \"\\$sp\" 0 \"get sp\"]\n \n-\t    gdb_test \"up\" \"#1  $any in main $any\\r\\n$any  function $any\" \\\n+\t    gdb_test \"up\" \"#1  $any in main $any\\r\\n$any  function_stack_mangle $any\" \\\n \t\t\"move up to caller\"\n \n \t    set caller_sp \\\n@@ -140,7 +140,7 @@ proc jit_reader_test {} {\n \t# reader's unwinder understands the mangling and should thus\n \t# be able to unwind at that location.\n \twith_test_prefix \"after mangling\" {\n-\t    gdb_test \"si\" \"in jit_function_00 .*\" \"step over stack mangling\"\n+\t    gdb_test \"si\" \"in jit_function_stack_mangle .*\" \"step over stack mangling\"\n \n \t    set sp_after_mangling \\\n \t\t[get_hexadecimal_valueof \"\\$sp\" 0 \"get sp\"]\n@@ -152,7 +152,7 @@ proc jit_reader_test {} {\n \t    # the mangled stack pointer.\n \t    gdb_test \"bt\" \\\n \t\t[multi_line \\\n-\t\t     \"#0 ${any} in jit_function_00 ${any}\" \\\n+\t\t     \"#0 ${any} in jit_function_stack_mangle ${any}\" \\\n \t\t     \"#1 ${any} in main ${any}\" \\\n \t\t    ] \\\n \t\t\"bt works\"\n@@ -161,11 +161,11 @@ proc jit_reader_test {} {\n \t\tinfo_registers_current_frame $sp_after_mangling\n \n \t\tgdb_test \"info frame\" \\\n-\t\t    \"Stack level 0, frame at $sp_before_mangling.*in jit_function_00.*\"\n+\t\t    \"Stack level 0, frame at $sp_before_mangling.*in jit_function_stack_mangle.*\"\n \t    }\n \n \t    with_test_prefix \"caller frame\" {\n-\t\tgdb_test \"up\" \"#1  $any in main $any\\r\\n$any  function $any\" \\\n+\t\tgdb_test \"up\" \"#1  $any in main $any\\r\\n$any  function_stack_mangle $any\" \\\n \t\t    \"up to caller\"\n \n \t\t# Since the JIT unwinder only provides RIP/RSP/RBP,\n@@ -243,7 +243,7 @@ proc jit_reader_test {} {\n \t# the mangled stack pointer.\n \tgdb_test \"bt\" \\\n \t    [multi_line \\\n-\t\t \"#0 ${any} in jit_function_00 ${any}\" \\\n+\t\t \"#0 ${any} in jit_function_stack_mangle ${any}\" \\\n \t\t \"#1 ${any} in main ${any}\" \\\n \t\t]\n     }"
    },
    {
      "sha": "5b9834ab53597c2fada920a871baec5ad93b1d0d",
      "filename": "gdb/testsuite/gdb.base/jithost.c",
      "status": "modified",
      "additions": 34,
      "deletions": 11,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jithost.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jithost.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jithost.c?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -31,34 +31,56 @@ void __attribute__((noinline)) __jit_debug_register_code () { }\n struct jit_descriptor __jit_debug_descriptor = { 1, 0, 0, 0 };\n struct jit_code_entry only_entry;\n \n-typedef void (jit_function_t) ();\n+typedef void (jit_function_stack_mangle_t) (void);\n+typedef long (jit_function_add_t) (long a, long b);\n \n /* The code of the jit_function_00 function that is copied into an\n    mmapped buffer in the inferior at run time.\n \n    The second instruction mangles the stack pointer, meaning that when\n    stopped at the third instruction, GDB needs assistance from the JIT\n    unwinder in order to be able to unwind successfully.  */\n-const unsigned char jit_function_00_code[] = {\n+static const unsigned char jit_function_stack_mangle_code[] = {\n   0xcc,\t\t\t\t/* int3 */\n   0x48, 0x83, 0xf4, 0xff,\t/* xor $0xffffffffffffffff, %rsp */\n   0x48, 0x83, 0xf4, 0xff,\t/* xor $0xffffffffffffffff, %rsp */\n   0xc3\t\t\t\t/* ret */\n };\n \n+/* And another \"JIT-ed\" function, with the prototype `jit_function_add_t`.  */\n+static const unsigned char jit_function_add_code[] = {\n+  0x48, 0x01, 0xfe,\t\t/* add %rdi,%rsi */\n+  0x48, 0x89, 0xf0,\t\t/* mov %rsi,%rax */\n+  0xc3,\t\t\t\t/* retq */\n+};\n+\n int\n main (int argc, char **argv)\n {\n-  struct jithost_abi *symfile;\n+  struct jithost_abi *symfile = malloc (sizeof (struct jithost_abi));\n   char *code = mmap (NULL, getpagesize (), PROT_WRITE | PROT_EXEC,\n \t\t     MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n-  jit_function_t *function = (jit_function_t *) code;\n-\n-  memcpy (code, jit_function_00_code, sizeof (jit_function_00_code));\n-\n-  symfile = malloc (sizeof (struct jithost_abi));\n-  symfile->begin = code;\n-  symfile->end = code + sizeof (jit_function_00_code);\n+  char *code_end = code;\n+\n+  /* \"JIT\" function_stack_mangle.  */\n+  memcpy (code_end, jit_function_stack_mangle_code,\n+\t  sizeof (jit_function_stack_mangle_code));\n+  jit_function_stack_mangle_t *function_stack_mangle\n+    = (jit_function_stack_mangle_t *) code_end;\n+  symfile->function_stack_mangle.begin = code_end;\n+  code_end += sizeof (jit_function_stack_mangle_code);\n+  symfile->function_stack_mangle.end = code_end;\n+\n+  /* \"JIT\" function_add.  */\n+  memcpy (code_end, jit_function_add_code, sizeof (jit_function_add_code));\n+  jit_function_add_t *function_add = (jit_function_add_t *) code_end;\n+  symfile->function_add.begin = code_end;\n+  code_end += sizeof (jit_function_add_code);\n+  symfile->function_add.end = code_end;\n+\n+  /* Bounds of the whole object.  */\n+  symfile->object.begin = code;\n+  symfile->object.end = code_end;\n \n   only_entry.symfile_addr = symfile;\n   only_entry.symfile_size = sizeof (struct jithost_abi);\n@@ -69,7 +91,8 @@ main (int argc, char **argv)\n   __jit_debug_descriptor.version = 1;\n   __jit_debug_register_code ();\n \n-  function ();\n+  function_stack_mangle ();\n+  function_add (5, 6);\n \n   return 0;\n }"
    },
    {
      "sha": "a01d84605db8980b2e90854515ffc8b75a940648",
      "filename": "gdb/testsuite/gdb.base/jithost.h",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jithost.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jithost.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jithost.h?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -18,10 +18,21 @@\n #ifndef JITHOST_H\n #define JITHOST_H\n \n+struct jithost_abi_bounds\n+{\n+  const char *begin, *end;\n+};\n+\n struct jithost_abi\n {\n-  const char *begin;\n-  const char *end;\n+  /* Beginning and past-the-end for the whole object. */\n+  struct jithost_abi_bounds object;\n+\n+  /* Beginning and past-the-end for function_stack_mangle.  */\n+  struct jithost_abi_bounds function_stack_mangle;\n+\n+  /* Beginning and past-the-end for function_add.  */\n+  struct jithost_abi_bounds function_add;\n };\n \n #endif /* JITHOST_H */"
    },
    {
      "sha": "6716c5b0f70e181f93a488477e214eb431993635",
      "filename": "gdb/testsuite/gdb.base/jitreader.c",
      "status": "modified",
      "additions": 23,
      "deletions": 11,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jitreader.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d043f8c867f85f1c36cc957da8204fe2907b3aea/gdb/testsuite/gdb.base/jitreader.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jitreader.c?ref=d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "patch": "@@ -34,8 +34,10 @@ enum register_mapping\n \n struct reader_state\n {\n-  uintptr_t code_begin;\n-  uintptr_t code_end;\n+  struct {\n+    uintptr_t begin;\n+    uintptr_t end;\n+  } func_stack_mangle;\n };\n \n static enum gdb_status\n@@ -46,15 +48,24 @@ read_debug_info (struct gdb_reader_funcs *self,\n   struct jithost_abi *symfile = memory;\n   struct gdb_object *object = cbs->object_open (cbs);\n   struct gdb_symtab *symtab = cbs->symtab_open (cbs, object, \"\");\n-  GDB_CORE_ADDR begin = (GDB_CORE_ADDR) symfile->begin;\n-  GDB_CORE_ADDR end = (GDB_CORE_ADDR) symfile->end;\n+\n   struct reader_state *state = (struct reader_state *) self->priv_data;\n \n-  /* Record the function's range, for the unwinder.  */\n-  state->code_begin = begin;\n-  state->code_end = end;\n+  /* Record the stack mangle function's range, for the unwinder.  */\n+  state->func_stack_mangle.begin\n+    = (uintptr_t) symfile->function_stack_mangle.begin;\n+  state->func_stack_mangle.end\n+    = (uintptr_t) symfile->function_stack_mangle.end;\n+\n+  cbs->block_open (cbs, symtab, NULL,\n+\t\t   (GDB_CORE_ADDR) symfile->function_stack_mangle.begin,\n+\t\t   (GDB_CORE_ADDR) symfile->function_stack_mangle.end,\n+\t\t   \"jit_function_stack_mangle\");\n \n-  cbs->block_open (cbs, symtab, NULL, begin, end, \"jit_function_00\");\n+  cbs->block_open (cbs, symtab, NULL,\n+\t\t   (GDB_CORE_ADDR) symfile->function_add.begin,\n+\t\t   (GDB_CORE_ADDR) symfile->function_add.end,\n+\t\t   \"jit_function_add\");\n \n   cbs->symtab_close (cbs, symtab);\n   cbs->object_close (cbs, object);\n@@ -113,7 +124,7 @@ read_sp (struct gdb_reader_funcs *self, struct gdb_unwind_callbacks *cbs,\n \n   /* If stopped at the instruction after the \"xor $-1, %rsp\", demangle\n      the stack pointer back.  */\n-  if (ip == state->code_begin + 5)\n+  if (ip == state->func_stack_mangle.begin + 5)\n     sp ^= (uintptr_t) -1;\n \n   *value = sp;\n@@ -132,7 +143,8 @@ unwind_frame (struct gdb_reader_funcs *self, struct gdb_unwind_callbacks *cbs)\n   if (!read_register (cbs, AMD64_RA, &this_ip))\n     return GDB_FAIL;\n \n-  if (this_ip >= state->code_end || this_ip < state->code_begin)\n+  if (this_ip >= state->func_stack_mangle.end\n+      || this_ip < state->func_stack_mangle.begin)\n     return GDB_FAIL;\n \n   /* Unwind RBP in order to make the unwinder that tries to unwind\n@@ -168,7 +180,7 @@ get_frame_id (struct gdb_reader_funcs *self, struct gdb_unwind_callbacks *cbs)\n   read_register (cbs, AMD64_RA, &ip);\n   read_sp (self, cbs, ip, &sp);\n \n-  frame_id.code_address = (GDB_CORE_ADDR) state->code_begin;\n+  frame_id.code_address = (GDB_CORE_ADDR) state->func_stack_mangle.begin;\n   frame_id.stack_address = (GDB_CORE_ADDR) sp;\n \n   return frame_id;"
    }
  ]
}