{
  "sha": "09e2fb720b860cfc08f9310cc387ad07e16a3b9b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDllMmZiNzIwYjg2MGNmYzA4ZjkzMTBjYzM4N2FkMDdlMTZhM2I5Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-29T13:25:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-05T18:24:00Z"
    },
    "message": "Simplify debug_names index writing\n\nThis changes the .debug_names writer to find the TU indices in the\nmain loop over all CUs and TUs.  (An earlier patch applied this same\ntreatment to the .gdb_index writer.)",
    "tree": {
      "sha": "2cf4595af1ba159c604309c8b7484bd8816017a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2cf4595af1ba159c604309c8b7484bd8816017a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/09e2fb720b860cfc08f9310cc387ad07e16a3b9b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09e2fb720b860cfc08f9310cc387ad07e16a3b9b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/09e2fb720b860cfc08f9310cc387ad07e16a3b9b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09e2fb720b860cfc08f9310cc387ad07e16a3b9b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "844a72efbced876d079b7a152fcab05f3ad72c5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/844a72efbced876d079b7a152fcab05f3ad72c5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/844a72efbced876d079b7a152fcab05f3ad72c5a"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 10,
    "deletions": 83
  },
  "files": [
    {
      "sha": "4e00c716d910a5e501aac78c86ce66b2bfa23f43",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 10,
      "deletions": 83,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09e2fb720b860cfc08f9310cc387ad07e16a3b9b/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09e2fb720b860cfc08f9310cc387ad07e16a3b9b/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=09e2fb720b860cfc08f9310cc387ad07e16a3b9b",
      "patch": "@@ -586,21 +586,6 @@ write_psymbols (struct mapped_symtab *symtab,\n     }\n }\n \n-/* A helper struct used when iterating over debug_types.  */\n-struct signatured_type_index_data\n-{\n-  signatured_type_index_data (data_buf &types_list_,\n-\t\t\t      std::unordered_set<partial_symbol *> &psyms_seen_)\n-    : types_list (types_list_), psyms_seen (psyms_seen_)\n-  {}\n-\n-  struct objfile *objfile;\n-  struct mapped_symtab *symtab;\n-  data_buf &types_list;\n-  std::unordered_set<partial_symbol *> &psyms_seen;\n-  int cu_index;\n-};\n-\n /* Recurse into all \"included\" dependencies and count their symbols as\n    if they appeared in this psymtab.  */\n \n@@ -903,32 +888,6 @@ class debug_names\n     m_debugstrlookup.file_write (file_str);\n   }\n \n-  /* A helper user data for write_one_signatured_type.  */\n-  class write_one_signatured_type_data\n-  {\n-  public:\n-    write_one_signatured_type_data (debug_names &nametable_,\n-\t\t\t\t    signatured_type_index_data &&info_)\n-    : nametable (nametable_), info (std::move (info_))\n-    {}\n-    debug_names &nametable;\n-    struct signatured_type_index_data info;\n-  };\n-\n-  /* A helper function to pass write_one_signatured_type to\n-     htab_traverse_noresize.  */\n-  static int\n-  write_one_signatured_type (void **slot, void *d)\n-  {\n-    write_one_signatured_type_data *data = (write_one_signatured_type_data *) d;\n-    struct signatured_type_index_data *info = &data->info;\n-    struct signatured_type *entry = (struct signatured_type *) *slot;\n-\n-    data->nametable.write_one_signatured_type (entry, info);\n-\n-    return 1;\n-  }\n-\n private:\n \n   /* Storage for symbol names mapping them to their .debug_str section\n@@ -1211,25 +1170,6 @@ class debug_names\n       }\n   }\n \n-  /* A helper function that writes a single signatured_type\n-     to a debug_names.  */\n-  void\n-  write_one_signatured_type (struct signatured_type *entry,\n-\t\t\t     struct signatured_type_index_data *info)\n-  {\n-    partial_symtab *psymtab = entry->v.psymtab;\n-\n-    write_psymbols (info->psyms_seen, psymtab->global_psymbols,\n-\t\t    info->cu_index, false, unit_kind::tu);\n-    write_psymbols (info->psyms_seen, psymtab->static_psymbols,\n-\t\t    info->cu_index, true, unit_kind::tu);\n-\n-    info->types_list.append_uint (dwarf5_offset_size (), m_dwarf5_byte_order,\n-\t\t\t\t  to_underlying (entry->sect_off));\n-\n-    ++info->cu_index;\n-  }\n-\n   /* Store value of each symbol.  */\n   std::unordered_map<c_str_view, std::set<symbol_value>, c_str_view_hasher>\n     m_name_to_value_set;\n@@ -1476,17 +1416,16 @@ write_debug_names (dwarf2_per_objfile *per_objfile,\n      work here.  Also, the debug_types entries do not appear in\n      all_comp_units, but only in their own hash table.  */\n   data_buf cu_list;\n+  data_buf types_cu_list;\n   debug_names nametable (per_objfile, dwarf5_is_dwarf64, dwarf5_byte_order);\n   std::unordered_set<partial_symbol *>\n     psyms_seen (psyms_seen_size (per_objfile));\n   int counter = 0;\n+  int types_counter = 0;\n   for (int i = 0; i < per_objfile->per_bfd->all_comp_units.size (); ++i)\n     {\n       const dwarf2_per_cu_data *per_cu\n \t= per_objfile->per_bfd->all_comp_units[i].get ();\n-      if (per_cu->is_debug_types)\n-\tcontinue;\n-\n       partial_symtab *psymtab = per_cu->v.psymtab;\n \n       /* CU of a shared file from 'dwz -m' may be unused by this main\n@@ -1495,29 +1434,17 @@ write_debug_names (dwarf2_per_objfile *per_objfile,\n       if (psymtab == NULL)\n \tcontinue;\n \n+      int &this_counter = per_cu->is_debug_types ? types_counter : counter;\n+      data_buf &this_list = per_cu->is_debug_types ? types_cu_list : cu_list;\n+\n       if (psymtab->user == NULL)\n \tnametable.recursively_write_psymbols (objfile, psymtab, psyms_seen,\n-\t\t\t\t\t      counter);\n-\n-      cu_list.append_uint (nametable.dwarf5_offset_size (), dwarf5_byte_order,\n-\t\t\t   to_underlying (per_cu->sect_off));\n-      ++counter;\n-    }\n+\t\t\t\t\t      this_counter);\n \n-  /* Write out the .debug_type entries, if any.  */\n-  data_buf types_cu_list;\n-  if (per_objfile->per_bfd->signatured_types)\n-    {\n-      debug_names::write_one_signatured_type_data sig_data (nametable,\n-\t\t\tsignatured_type_index_data (types_cu_list, psyms_seen));\n-\n-      sig_data.info.objfile = objfile;\n-      /* It is used only for gdb_index.  */\n-      sig_data.info.symtab = nullptr;\n-      sig_data.info.cu_index = 0;\n-      htab_traverse_noresize (per_objfile->per_bfd->signatured_types.get (),\n-\t\t\t      debug_names::write_one_signatured_type,\n-\t\t\t      &sig_data);\n+      this_list.append_uint (nametable.dwarf5_offset_size (),\n+\t\t\t     dwarf5_byte_order,\n+\t\t\t     to_underlying (per_cu->sect_off));\n+      ++this_counter;\n     }\n \n   nametable.build ();"
    }
  ]
}