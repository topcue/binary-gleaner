{
  "sha": "8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
  "node_id": "C_kwDOANOeidoAKDhjZmM5YTE4OTVkOWY3MjBlMmNjMzhmZDU3Yjk0Y2E1ZWZiYTA3YjE",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T04:04:10Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-16T06:13:39Z"
    },
    "message": "sim: callback: expose argv & environ\n\nPass the existing strings data to the callbacks so that common\nlibgloss syscalls can be implemented (which we'll do shortly).",
    "tree": {
      "sha": "ebec67af6051c58a695f48b6f69d6bf005fd3116",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ebec67af6051c58a695f48b6f69d6bf005fd3116"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54f7a83a62c27d6da9ee66da1022572d6ea45d84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54f7a83a62c27d6da9ee66da1022572d6ea45d84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54f7a83a62c27d6da9ee66da1022572d6ea45d84"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 79,
    "deletions": 10
  },
  "files": [
    {
      "sha": "a51c4de9c3aafb6cfe0ee21b4d524d09e70dcbae",
      "filename": "include/sim/callback.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/include/sim/callback.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/include/sim/callback.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/sim/callback.h?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -178,6 +178,12 @@ struct host_callback_struct\n \n   enum bfd_endian target_endian;\n \n+  /* Program command line options.  */\n+  char **argv;\n+\n+  /* Program environment.  */\n+  char **envp;\n+\n   /* Size of an \"int\" on the target (for syscalls whose ABI uses \"int\").\n      This must include padding, and only padding-at-higher-address is\n      supported.  For example, a 64-bit target with 32-bit int:s which"
    },
    {
      "sha": "328995358b0d0e2eef590ddaf4dab9e8ae91340d",
      "filename": "sim/aarch64/interp.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/aarch64/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/aarch64/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/aarch64/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -126,6 +126,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char * const *argv, char * const *env)\n {\n   sim_cpu *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   bfd_vma addr = 0;\n \n   if (abfd != NULL)\n@@ -150,6 +151,9 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   if (trace_load_symbols (sd))\n     {\n       STATE_PROG_SYMS_COUNT (sd) ="
    },
    {
      "sha": "88ddbd071b3d42c295bbbdbb5c7fdb56e79c097f",
      "filename": "sim/bfin/interp.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/bfin/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/bfin/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bfin/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -1151,6 +1151,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char * const *argv, char * const *env)\n {\n   SIM_CPU *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   /* Set the PC.  */\n@@ -1176,6 +1177,9 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   switch (STATE_ENVIRONMENT (sd))\n     {\n     case USER_ENVIRONMENT:"
    },
    {
      "sha": "6d2f67295a1ef90c8e6e693831684ece3de46480",
      "filename": "sim/bpf/sim-if.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/bpf/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/bpf/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -21,6 +21,7 @@\n \n #include <stdlib.h>\n \n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n #include \"libiberty.h\"\n@@ -193,6 +194,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char *const *argv, char *const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   /* Determine the start address.\n@@ -219,5 +221,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "a5f0fbe435589297845a8f254a4faf706ac689e5",
      "filename": "sim/common/callback.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/common/callback.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/common/callback.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/callback.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -770,6 +770,8 @@ host_callback default_callback =\n \n   /* Defaults expected to be overridden at initialization, where needed.  */\n   BFD_ENDIAN_UNKNOWN, /* target_endian */\n+  NULL, /* argv */\n+  NULL, /* envp */\n   4, /* target_sizeof_int */\n \n   HOST_CALLBACK_MAGIC,"
    },
    {
      "sha": "8bfb624b7866a634f4b52e737daa20e929dd73dd",
      "filename": "sim/cris/sim-if.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/cris/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/cris/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -23,14 +23,16 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include <stdlib.h>\n+#include <errno.h>\n+#include <unistd.h>\n+\n #include \"libiberty.h\"\n #include \"bfd.h\"\n #include \"elf-bfd.h\"\n \n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n-#include <stdlib.h>\n-#include <errno.h>\n-#include <unistd.h>\n #include \"sim-options.h\"\n #include \"sim-hw.h\"\n #include \"dis-asm.h\"\n@@ -741,7 +743,9 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n \n   /* Find out how much room is needed for the environment and argv, create\n      that memory and fill it.  Only do this when there's a program\n-     specified.  */\n+     specified.\n+\n+     TODO: Move this to sim_create_inferior and use STATE_PROG_ENVP.  */\n   if (abfd != NULL && !cris_bare_iron)\n     {\n       const char *name = bfd_get_filename (abfd);\n@@ -955,6 +959,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char * const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   if (sd != NULL)\n@@ -983,6 +988,9 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }\n \f"
    },
    {
      "sha": "6b6999465e37f3594732d49022365dc9ddf5e2d2",
      "filename": "sim/example-synacor/interp.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/example-synacor/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/example-synacor/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -28,6 +28,7 @@\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n \f\n@@ -155,6 +156,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char * const *argv, char * const *env)\n {\n   SIM_CPU *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   sim_cia addr;\n \n   /* Set the PC.  */\n@@ -180,5 +182,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "c6340770f8ee220a014873a81e001fa48abeffb9",
      "filename": "sim/frv/sim-if.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/frv/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/frv/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/frv/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -20,10 +20,13 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include <stdlib.h>\n+\n+#include \"sim/callback.h\"\n+\n #define WANT_CPU\n #define WANT_CPU_FRVBF\n #include \"sim-main.h\"\n-#include <stdlib.h>\n #include \"sim-options.h\"\n #include \"libiberty.h\"\n #include \"bfd.h\"\n@@ -178,6 +181,7 @@ sim_create_inferior (SIM_DESC sd, bfd *abfd, char * const *argv,\n \t\t     char * const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   if (abfd != NULL)\n@@ -202,5 +206,8 @@ sim_create_inferior (SIM_DESC sd, bfd *abfd, char * const *argv,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "3514f75b6a57e0af0b4cad76d42b304ae9412040",
      "filename": "sim/ft32/interp.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/ft32/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/ft32/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ft32/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -884,6 +884,7 @@ sim_create_inferior (SIM_DESC sd,\n {\n   uint32_t addr;\n   sim_cpu *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n \n   /* Set the PC.  */\n   if (abfd != NULL)\n@@ -907,6 +908,9 @@ sim_create_inferior (SIM_DESC sd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   cpu->state.regs[FT32_HARD_SP] = addr;\n   cpu->state.num_i = 0;\n   cpu->state.cycles = 0;"
    },
    {
      "sha": "6c75b0ef5518552ca65f947940f8573784bbd9f1",
      "filename": "sim/iq2000/sim-if.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/iq2000/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/iq2000/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/iq2000/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -24,6 +24,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include <stdlib.h>\n \n+#include \"sim/callback.h\"\n #include \"sim-options.h\"\n #include \"libiberty.h\"\n #include \"bfd.h\"\n@@ -134,6 +135,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n \t\t     char * const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   if (abfd != NULL)\n@@ -158,5 +160,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "8bbd83d6dcd2a15caa2dd8bcbd67eca198b0c672",
      "filename": "sim/lm32/sim-if.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/lm32/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/lm32/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/lm32/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -21,12 +21,13 @@\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include <stdlib.h>\n+\n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n #include \"libiberty.h\"\n #include \"bfd.h\"\n-\n-#include <stdlib.h>\n \f\n /* Cover function of sim_state_free to free the cpu buffers as well.  */\n \n@@ -195,6 +196,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n \t\t     char * const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   if (abfd != NULL)\n@@ -219,5 +221,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "084ed5a0d4b22fe8e75b93b88042a49fb4ed4b91",
      "filename": "sim/m32r/sim-if.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/m32r/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/m32r/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/m32r/sim-if.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -20,14 +20,15 @@\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include <string.h>\n+#include <stdlib.h>\n+\n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n #include \"libiberty.h\"\n #include \"bfd.h\"\n \n-#include <string.h>\n-#include <stdlib.h>\n-\n #include \"dv-m32r_uart.h\"\n \n #define M32R_DEFAULT_MEM_SIZE 0x2000000 /* 32M */\n@@ -148,6 +149,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n \t\t     char * const *env)\n {\n   SIM_CPU *current_cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   if (abfd != NULL)\n@@ -180,6 +182,9 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd, char * const *argv,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }\n "
    },
    {
      "sha": "af72a21d74280a7e3dc78227b41def2a571525c3",
      "filename": "sim/pru/interp.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/pru/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/pru/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/pru/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -831,6 +831,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *prog_bfd,\n \t\t     char * const *argv, char * const *env)\n {\n   SIM_CPU *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   addr = bfd_get_start_address (prog_bfd);\n@@ -854,5 +855,8 @@ sim_create_inferior (SIM_DESC sd, struct bfd *prog_bfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   return SIM_RC_OK;\n }"
    },
    {
      "sha": "efa4b5669cb3fc82dd7a9bd922cfd497f8517bef",
      "filename": "sim/riscv/interp.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/riscv/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1/sim/riscv/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/riscv/interp.c?ref=8cfc9a1895d9f720e2cc38fd57b94ca5efba07b1",
      "patch": "@@ -21,6 +21,7 @@\n /* This must come before any other includes.  */\n #include \"defs.h\"\n \n+#include \"sim/callback.h\"\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n \f\n@@ -134,6 +135,7 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t\t     char * const *argv, char * const *env)\n {\n   SIM_CPU *cpu = STATE_CPU (sd, 0);\n+  host_callback *cb = STATE_CALLBACK (sd);\n   SIM_ADDR addr;\n \n   /* Set the PC.  */\n@@ -159,6 +161,9 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n       STATE_PROG_ENVP (sd) = dupargv (env);\n     }\n \n+  cb->argv = STATE_PROG_ARGV (sd);\n+  cb->envp = STATE_PROG_ENVP (sd);\n+\n   initialize_env (sd, (void *)argv, (void *)env);\n \n   return SIM_RC_OK;"
    }
  ]
}