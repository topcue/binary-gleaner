{
  "sha": "bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmRmZWExN2VhOWJiZDlmOTJhZDE5YTcwZDc3MGFmNDI0NzNkOWMwNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-05T14:17:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-05T14:17:12Z"
    },
    "message": "Return unique_ptr from language_defn::get_compile_context\n\nThis changes language_defn::get_compile_context to return a\nunique_ptr.  This makes the ownership transfer clear.\n\ngdb/ChangeLog\n2021-02-05  Tom Tromey  <tom@tromey.com>\n\n\t* compile/compile-c-support.c (get_compile_context)\n\t(c_get_compile_context, cplus_get_compile_context): Change return\n\ttype.\n\t* language.c (language_defn::get_compile_instance): New method.\n\t* language.h (language_defn::get_compile_instance): Change return\n\ttype.  No longer inline.\n\t* c-lang.c (c_language::get_compile_instance): Change return type.\n\t(cplus_language::get_compile_instance): Change return type.\n\t* c-lang.h (c_get_compile_context, cplus_get_compile_context):\n\tChange return type.\n\t* compile/compile.c (compile_to_object): Update.",
    "tree": {
      "sha": "cd14e3cb96c9123721ac6416a4b94d7682c65c93",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd14e3cb96c9123721ac6416a4b94d7682c65c93"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 48,
    "deletions": 32
  },
  "files": [
    {
      "sha": "c6ad0bb8a5353ec271fa3c3b95cc24be8cddf965",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -1,3 +1,17 @@\n+2021-02-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* compile/compile-c-support.c (get_compile_context)\n+\t(c_get_compile_context, cplus_get_compile_context): Change return\n+\ttype.\n+\t* language.c (language_defn::get_compile_instance): New method.\n+\t* language.h (language_defn::get_compile_instance): Change return\n+\ttype.  No longer inline.\n+\t* c-lang.c (c_language::get_compile_instance): Change return type.\n+\t(cplus_language::get_compile_instance): Change return type.\n+\t* c-lang.h (c_get_compile_context, cplus_get_compile_context):\n+\tChange return type.\n+\t* compile/compile.c (compile_to_object): Update.\n+\n 2021-02-05  Tom Tromey  <tom@tromey.com>\n \n \t* parser-defs.h (write_exp_symbol_reference): Declare."
    },
    {
      "sha": "16ff3c7378a91461ebae259a6049855d9a61c37e",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -36,8 +36,7 @@\n #include <ctype.h>\n #include \"gdbcore.h\"\n #include \"gdbarch.h\"\n-\n-class compile_instance;\n+#include \"compile/compile-internal.h\"\n \n /* Given a C string type, STR_TYPE, return the corresponding target\n    character set name.  */\n@@ -888,7 +887,7 @@ class c_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  compile_instance *get_compile_instance () const override\n+  std::unique_ptr<compile_instance> get_compile_instance () const override\n   {\n     return c_get_compile_context ();\n   }\n@@ -1021,7 +1020,7 @@ class cplus_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  compile_instance *get_compile_instance () const override\n+  std::unique_ptr<compile_instance> get_compile_instance () const override\n   {\n     return cplus_get_compile_context ();\n   }"
    },
    {
      "sha": "a488c04c5695d916a1eeda0f9a1f5c9106bbfee6",
      "filename": "gdb/c-lang.h",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/c-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/c-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.h?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -147,21 +147,19 @@ extern bool c_is_string_type_p (struct type *type);\n \n extern int c_textual_element_type (struct type *, char);\n \n-/* Create a new instance of the C compiler and return it.  The new\n-   compiler is owned by the caller and must be freed using the destroy\n-   method.  This function never returns NULL, but rather throws an\n-   exception on failure.  This is suitable for use as the\n+/* Create a new instance of the C compiler and return it.  This\n+   function never returns NULL, but rather throws an exception on\n+   failure.  This is suitable for use as the\n    language_defn::get_compile_instance method.  */\n \n-extern compile_instance *c_get_compile_context (void);\n+extern std::unique_ptr<compile_instance> c_get_compile_context ();\n \n-/* Create a new instance of the C++ compiler and return it.  The new\n-   compiler is owned by the caller and must be freed using the destroy\n-   method.  This function never returns NULL, but rather throws an\n-   exception on failure.  This is suitable for use as the\n+/* Create a new instance of the C++ compiler and return it.  This\n+   function never returns NULL, but rather throws an exception on\n+   failure.  This is suitable for use as the\n    language_defn::get_compile_instance method.  */\n \n-extern compile_instance *cplus_get_compile_context ();\n+extern std::unique_ptr<compile_instance> cplus_get_compile_context ();\n \n /* This takes the user-supplied text and returns a new bit of code to\n    compile."
    },
    {
      "sha": "65f186763f7d4975e462c30139a0f8edf20e2eb0",
      "filename": "gdb/compile/compile-c-support.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/compile/compile-c-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/compile/compile-c-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-support.c?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -99,7 +99,7 @@ load_libcompile (const char *fe_libcc, const char *fe_context)\n \n template <typename INSTTYPE, typename FUNCTYPE, typename CTXTYPE,\n \t  typename BASE_VERSION_TYPE, typename API_VERSION_TYPE>\n-compile_instance *\n+std::unique_ptr<compile_instance>\n get_compile_context (const char *fe_libcc, const char *fe_context,\n \t\t     BASE_VERSION_TYPE base_version,\n \t\t     API_VERSION_TYPE api_version)\n@@ -118,12 +118,12 @@ get_compile_context (const char *fe_libcc, const char *fe_context,\n     error (_(\"The loaded version of GCC does not support the required version \"\n \t     \"of the API.\"));\n \n-  return new INSTTYPE (context);\n+  return std::unique_ptr<compile_instance> (new INSTTYPE (context));\n }\n \n /* A C-language implementation of get_compile_context.  */\n \n-compile_instance *\n+std::unique_ptr<compile_instance>\n c_get_compile_context ()\n {\n   return get_compile_context\n@@ -135,7 +135,7 @@ c_get_compile_context ()\n \n /* A C++-language implementation of get_compile_context.  */\n \n-compile_instance *\n+std::unique_ptr<compile_instance>\n cplus_get_compile_context ()\n {\n   return get_compile_context"
    },
    {
      "sha": "d9c99bf432830b646a4d96cb7ce628fb3b511a75",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -649,8 +649,8 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n   expr_pc = get_frame_address_in_block (get_selected_frame (NULL));\n \n   /* Set up instance and context for the compiler.  */\n-  std::unique_ptr <compile_instance> compiler\n-\t\t\t(current_language->get_compile_instance ());\n+  std::unique_ptr<compile_instance> compiler\n+    = current_language->get_compile_instance ();\n   if (compiler == nullptr)\n     error (_(\"No compiler support for language %s.\"),\n \t   current_language->name ());"
    },
    {
      "sha": "c23f29169aeb608ec25e3e7190eefb87894bf8ad",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -46,6 +46,7 @@\n #include \"c-lang.h\"\n #include <algorithm>\n #include \"gdbarch.h\"\n+#include \"compile/compile-internal.h\"\n \n static void set_range_case (void);\n \n@@ -704,6 +705,14 @@ language_defn::is_string_type_p (struct type *type) const\n   return c_is_string_type_p (type);\n }\n \n+/* See language.h.  */\n+\n+std::unique_ptr<compile_instance>\n+language_defn::get_compile_instance () const\n+{\n+  return {};\n+}\n+\n /* The default implementation of the get_symbol_name_matcher_inner method\n    from the language_defn class.  Matches with strncmp_iw.  */\n "
    },
    {
      "sha": "4df09d8aa85dab474bb26ee76b2f372e6f93b055",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 8,
      "deletions": 12,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdfea17ea9bbd9f92ad19a70d770af42473d9c07/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=bdfea17ea9bbd9f92ad19a70d770af42473d9c07",
      "patch": "@@ -374,18 +374,14 @@ struct language_defn\n   symbol_name_matcher_ftype *get_symbol_name_matcher\n \t(const lookup_name_info &lookup_name) const;\n \n-  /* If this language allows compilation from the gdb command line, then\n-     this method will return an instance of struct gcc_context appropriate\n-     to the language.  If compilation for this language is generally\n-     supported, but something goes wrong then an exception is thrown.  The\n-     returned compiler instance is owned by its caller and must be\n-     deallocated by the caller.  If compilation is not supported for this\n-     language then this method returns NULL.  */\n-\n-  virtual compile_instance *get_compile_instance () const\n-  {\n-    return nullptr;\n-  }\n+  /* If this language allows compilation from the gdb command line,\n+     then this method will return an instance of struct gcc_context\n+     appropriate to the language.  If compilation for this language is\n+     generally supported, but something goes wrong then an exception\n+     is thrown.  If compilation is not supported for this language\n+     then this method returns NULL.  */\n+\n+  virtual std::unique_ptr<compile_instance> get_compile_instance () const;\n \n   /* This method must be overridden if 'get_compile_instance' is\n      overridden."
    }
  ]
}