{
  "sha": "776ab89fe3cdce91cd644058c9fcda0c506f995b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzc2YWI4OWZlM2NkY2U5MWNkNjQ0MDU4YzlmY2RhMGM1MDZmOTk1Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-31T13:40:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-01T05:08:57Z"
    },
    "message": "PR24806, Linking with -T inside --start-group/--end-group\n\nThis patch processes INSERT AFTER and INSERT BEFORE in a user -T\nscript when such a script is invoked on the command line inside\n--start-group/--end-group.  Also, ld now warns when the user simply\nforgot --end-group.\n\n\tPR 24806\n\t* ldlang.c (process_insert_statements): Add start of list\n\tparameter.  Use rather than lang_os_list.head.  Process insert\n\tstatements inside group statements with a recursive call.\n\t(lang_process): Adjust process_insert_statements call.\n\t* lexsup.c (parse_args): Warn when adding missing --end-group.",
    "tree": {
      "sha": "c9b51eed5f4873eb3ccdf0b144318e4beb722ebb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c9b51eed5f4873eb3ccdf0b144318e4beb722ebb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/776ab89fe3cdce91cd644058c9fcda0c506f995b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/776ab89fe3cdce91cd644058c9fcda0c506f995b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/776ab89fe3cdce91cd644058c9fcda0c506f995b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/776ab89fe3cdce91cd644058c9fcda0c506f995b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c1e6d53a518442741f05175dbded0d1880f4759",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c1e6d53a518442741f05175dbded0d1880f4759",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c1e6d53a518442741f05175dbded0d1880f4759"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 45,
    "deletions": 15
  },
  "files": [
    {
      "sha": "a93d367a544e088ed52a53f89ebde4bce6932169",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=776ab89fe3cdce91cd644058c9fcda0c506f995b",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-01  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24806\n+\t* ldlang.c (process_insert_statements): Add start of list\n+\tparameter.  Use rather than lang_os_list.head.  Process insert\n+\tstatements inside group statements with a recursive call.\n+\t(lang_process): Adjust process_insert_statements call.\n+\t* lexsup.c (parse_args): Warn when adding missing --end-group.\n+\n 2019-08-01  Alan Modra  <amodra@gmail.com>\n \n \t* ldlang.h (lang_os_list): Rename from lang_output_section_statement."
    },
    {
      "sha": "96daf0ef11d0fd6ca40f6be95e26bab44a77277b",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 35,
      "deletions": 15,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=776ab89fe3cdce91cd644058c9fcda0c506f995b",
      "patch": "@@ -3916,21 +3916,26 @@ map_input_to_output_sections\n    start of the list and places them after the output section\n    statement specified by the insert.  This operation is complicated\n    by the fact that we keep a doubly linked list of output section\n-   statements as well as the singly linked list of all statements.  */\n+   statements as well as the singly linked list of all statements.\n+   FIXME someday: Twiddling with the list not only moves statements\n+   from the user's script but also input and group statements that are\n+   built from command line object files and --start-group.  We only\n+   get away with this because the list pointers used by file_chain\n+   and input_file_chain are not reordered, and processing via\n+   statement_list after this point mostly ignores input statements.\n+   One exception is the map file, where LOAD and START GROUP/END GROUP\n+   can end up looking odd.  */\n \n static void\n-process_insert_statements (void)\n+process_insert_statements (lang_statement_union_type **start)\n {\n   lang_statement_union_type **s;\n   lang_output_section_statement_type *first_os = NULL;\n   lang_output_section_statement_type *last_os = NULL;\n   lang_output_section_statement_type *os;\n \n-  /* \"start of list\" is actually the statement immediately after\n-     the special abs_section output statement, so that it isn't\n-     reordered.  */\n-  s = &lang_os_list.head;\n-  while (*(s = &(*s)->header.next) != NULL)\n+  s = start;\n+  while (*s != NULL)\n     {\n       if ((*s)->header.type == lang_output_section_statement_enum)\n \t{\n@@ -3949,6 +3954,18 @@ process_insert_statements (void)\n \t  if (first_os == NULL)\n \t    first_os = last_os;\n \t}\n+      else if ((*s)->header.type == lang_group_statement_enum)\n+\t{\n+\t  /* A user might put -T between --start-group and\n+\t     --end-group.  One way this odd construct might arise is\n+\t     from a wrapper around ld to change library search\n+\t     behaviour.  For example:\n+\t     #! /bin/sh\n+\t     exec real_ld --start-group \"$@\" --end-group\n+\t     This isn't completely unreasonable so go looking inside a\n+\t     group statement for insert statements.  */\n+\t  process_insert_statements (&(*s)->group_statement.children.head);\n+\t}\n       else if ((*s)->header.type == lang_insert_statement_enum)\n \t{\n \t  lang_insert_statement_type *i = &(*s)->insert_statement;\n@@ -4049,18 +4066,19 @@ process_insert_statements (void)\n \t    }\n \n \t  ptr = insert_os_after (where);\n-\t  /* Snip everything after the abs_section output statement we\n-\t     know is at the start of the list, up to and including\n-\t     the insert statement we are currently processing.  */\n-\t  first = lang_os_list.head->header.next;\n-\t  lang_os_list.head->header.next = (*s)->header.next;\n-\t  /* Add them back where they belong.  */\n+\t  /* Snip everything from the start of the list, up to and\n+\t     including the insert statement we are currently processing.  */\n+\t  first = *start;\n+\t  *start = (*s)->header.next;\n+\t  /* Add them back where they belong, minus the insert.  */\n \t  *s = *ptr;\n \t  if (*s == NULL)\n \t    statement_list.tail = s;\n \t  *ptr = first;\n-\t  s = &lang_os_list.head;\n+\t  s = start;\n+\t  continue;\n \t}\n+      s = &(*s)->header.next;\n     }\n \n   /* Undo constraint twiddling.  */\n@@ -7544,7 +7562,9 @@ lang_process (void)\n   lang_statement_iteration++;\n   map_input_to_output_sections (statement_list.head, NULL, NULL);\n \n-  process_insert_statements ();\n+  /* Start at the statement immediately after the special abs_section\n+     output statement, so that it isn't reordered.  */\n+  process_insert_statements (&lang_os_list.head->header.next);\n \n   /* Find any sections not attached explicitly and handle them.  */\n   lang_place_orphans ();"
    },
    {
      "sha": "d4f198125c142ab8b680c15ed19ae71866880419",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/776ab89fe3cdce91cd644058c9fcda0c506f995b/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=776ab89fe3cdce91cd644058c9fcda0c506f995b",
      "patch": "@@ -1602,6 +1602,7 @@ parse_args (unsigned argc, char **argv)\n \n   while (ingroup)\n     {\n+      einfo (_(\"%P: missing --end-group; added as last command line option\\n\"));\n       lang_leave_group ();\n       ingroup--;\n     }"
    }
  ]
}