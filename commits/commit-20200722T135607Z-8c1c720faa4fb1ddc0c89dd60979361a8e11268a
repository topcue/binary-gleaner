{
  "sha": "8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGMxYzcyMGZhYTRmYjFkZGMwYzg5ZGQ2MDk3OTM2MWE4ZTExMjY4YQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-22T13:56:07Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-07-22T13:56:07Z"
    },
    "message": "gdb/jit: apply some simplifications and assertions\n\nFollowing patch \"gdb/jit: split jit_objfile_data in two\", there are some\nsimplifications we can make.  The invariants described there mean that\nwe can assume / assert some things instead of checking them using\nconditionals.\n\nIf an instance of jiter_objfile_data exists for a given objfile, it's\nbecause the required JIT interface symbols were found.  Therefore, in\n~jiter_objfile_data, the `register_code` field can't be NULL.  It was\npreviously used to differentiate a jit_objfile_data object used for a\nJITer vs a JITed.  We can remove that check.\n\nIf an instance of jiter_objfile_data exists for a given objfile, it's\nbecause it's the sole JITer objfile in the scope of its program space\n(jit_program_space_data::objfile points to it).  At the moment,\njit_breakpoint_re_set_internal won't create a second instance of\njiter_objfile_data for a given program space.  Therefore, it's not\nnecessary to check for `ps_data != NULL` in ~jiter_objfile_data: we know\na jit_program_space_data for that program space exists.  We also don't\nneed to check for `ps_data->objfile == this->objfile`, because we know\nthe objfile is the sole JITer in this program space.  Replace these two\nconditions with assertions.\n\nA pre-condition for calling the jit_read_descriptor function (which is\nrespected in the two call sites) is that the objfile `jiter` _is_ a\nJITer - it already has a jiter_objfile_data attached to it.  When a\njiter_objfile_data exists, its `descriptor` field is necessarily set:\nhad the descriptor symbol not been found, jit_breakpoint_re_set_internal\nwould not have created the jiter_objfile_data.  Remove the check and\nearly return in jit_read_descriptor.  Access objfile's `jiter_data` field\ndirectly instead of calling `get_jiter_objfile_data` (which creates the\njiter_objfile_data if it doesn't exist yet) and assert that the result\nis not nullptr.\n\nFinally, `jit_event_handler` is always passed a JITer objfile.  So, add\nan assertion to ensure that.\n\ngdb/ChangeLog:\n2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n\n\t* jit.c (jiter_objfile_data::~jiter_objfile_data): Remove some\n\tchecks.\n\t(jit_read_descriptor): Remove NULL check.\n\t(jit_event_handler): Add an assertion.",
    "tree": {
      "sha": "f67177bf44c8f244f7194fc1fed3f85943e3d13d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f67177bf44c8f244f7194fc1fed3f85943e3d13d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c1c720faa4fb1ddc0c89dd60979361a8e11268a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e74a041c0e7bdbc403b05967cdf57ecd23a8ecc"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 23,
    "deletions": 17
  },
  "files": [
    {
      "sha": "5d1a843d2b38432e4fa642571bcc1db2caf3e438",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c1c720faa4fb1ddc0c89dd60979361a8e11268a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c1c720faa4fb1ddc0c89dd60979361a8e11268a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c (jiter_objfile_data::~jiter_objfile_data): Remove some\n+\tchecks.\n+\t(jit_read_descriptor): Remove NULL check.\n+\t(jit_event_handler): Add an assertion.\n+\n 2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.h (struct jit_objfile_data):  Split into..."
    },
    {
      "sha": "9ac282ae534084d61879767331e3e803560c83ce",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c1c720faa4fb1ddc0c89dd60979361a8e11268a/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c1c720faa4fb1ddc0c89dd60979361a8e11268a/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=8c1c720faa4fb1ddc0c89dd60979361a8e11268a",
      "patch": "@@ -267,20 +267,17 @@ static program_space_key<jit_program_space_data> jit_program_space_key;\n \n jiter_objfile_data::~jiter_objfile_data ()\n {\n-  /* Free the data allocated in the jit_program_space_data slot.  */\n-  if (this->register_code != NULL)\n-    {\n-      struct jit_program_space_data *ps_data;\n+  jit_program_space_data *ps_data\n+    = jit_program_space_key.get (this->objfile->pspace);\n \n-      ps_data = jit_program_space_key.get (this->objfile->pspace);\n-      if (ps_data != NULL && ps_data->objfile == this->objfile)\n-\t{\n-\t  ps_data->objfile = NULL;\n-\t  if (ps_data->jit_breakpoint != NULL)\n-\t    delete_breakpoint (ps_data->jit_breakpoint);\n-\t  ps_data->cached_code_address = 0;\n-\t}\n-    }\n+  gdb_assert (ps_data != nullptr);\n+  gdb_assert (ps_data->objfile == this->objfile);\n+\n+  ps_data->objfile = NULL;\n+  if (ps_data->jit_breakpoint != NULL)\n+    delete_breakpoint (ps_data->jit_breakpoint);\n+\n+  ps_data->cached_code_address = 0;\n }\n \n /* Fetch the jiter_objfile_data associated with OBJF.  If no data exists\n@@ -336,10 +333,8 @@ jit_read_descriptor (gdbarch *gdbarch,\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n \n   gdb_assert (jiter != nullptr);\n-  jiter_objfile_data *objf_data = get_jiter_objfile_data (jiter);\n-\n-  if (objf_data->descriptor == NULL)\n-    return false;\n+  jiter_objfile_data *objf_data = jiter->jiter_data.get ();\n+  gdb_assert (objf_data != nullptr);\n \n   if (jit_debug)\n     fprintf_unfiltered (gdb_stdlog,\n@@ -1326,6 +1321,10 @@ jit_event_handler (gdbarch *gdbarch, objfile *jiter)\n   CORE_ADDR entry_addr;\n   struct objfile *objf;\n \n+  /* If we get a JIT breakpoint event for this objfile, it is necessarily a\n+     JITer.  */\n+  gdb_assert (jiter->jiter_data != nullptr);\n+\n   /* Read the descriptor from remote memory.  */\n   if (!jit_read_descriptor (gdbarch, &descriptor, jiter))\n     return;"
    }
  ]
}