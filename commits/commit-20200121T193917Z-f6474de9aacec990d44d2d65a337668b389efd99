{
  "sha": "f6474de9aacec990d44d2d65a337668b389efd99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjY0NzRkZTlhYWNlYzk5MGQ0NGQyZDY1YTMzNzY2OGIzODllZmQ5OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-01-03T20:59:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-01-21T19:39:17Z"
    },
    "message": "Allow use of Pygments to colorize source code\n\nWhile GNU Source Highlight is good, it's also difficult to build and\ndistribute.  For one thing, it needs Boost.  For another, it has an\nunusual configuration and installation setup.\n\nPygments, a Python library, doesn't suffer from these issues, and so I\nthought it would be a reasonable fallback.\n\nThis patch implements this idea.  GNU Source Highlight is preferred,\nbut if it is unavailable (or fails), the extension languages are\ntried.  This patch also implements support for Pygments.\n\nSomething similar could be done for Guile, using:\n\n    https://dthompson.us/projects/guile-syntax-highlight.html\n\nHowever, I don't know enough about Guile internals to make this\nhappen, so I have not done it here.\n\ngdb/ChangeLog\n2020-01-21  Tom Tromey  <tromey@adacore.com>\n\n\t* source-cache.c (source_cache::ensure): Call ext_lang_colorize.\n\t* python/python.c (python_extension_ops): Update.\n\t(gdbpy_colorize): New function.\n\t* python/lib/gdb/__init__.py (colorize): New function.\n\t* extension.h (ext_lang_colorize): Declare.\n\t* extension.c (ext_lang_colorize): New function.\n\t* extension-priv.h (struct extension_language_ops) <colorize>: New\n\tmember.\n\t* cli/cli-style.c (_initialize_cli_style): Update help text.\n\nChange-Id: I5e21623ee05f1f66baaa6deaeca78b578c031bf4",
    "tree": {
      "sha": "4d70c7c91fba9b49b5b0c62baa7759b6e1d5b13e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d70c7c91fba9b49b5b0c62baa7759b6e1d5b13e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f6474de9aacec990d44d2d65a337668b389efd99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6474de9aacec990d44d2d65a337668b389efd99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f6474de9aacec990d44d2d65a337668b389efd99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6474de9aacec990d44d2d65a337668b389efd99/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4654b109bd023d0a22f445db7d4e27f769593f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4654b109bd023d0a22f445db7d4e27f769593f4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4654b109bd023d0a22f445db7d4e27f769593f4"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 150,
    "deletions": 4
  },
  "files": [
    {
      "sha": "798fe5b7c4942661ae17ac492e7acb9dd5e0c234",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -1,3 +1,15 @@\n+2020-01-21  Tom Tromey  <tromey@adacore.com>\n+\n+\t* source-cache.c (source_cache::ensure): Call ext_lang_colorize.\n+\t* python/python.c (python_extension_ops): Update.\n+\t(gdbpy_colorize): New function.\n+\t* python/lib/gdb/__init__.py (colorize): New function.\n+\t* extension.h (ext_lang_colorize): Declare.\n+\t* extension.c (ext_lang_colorize): New function.\n+\t* extension-priv.h (struct extension_language_ops) <colorize>: New\n+\tmember.\n+\t* cli/cli-style.c (_initialize_cli_style): Update help text.\n+\n 2020-01-21  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-tdep.c (struct aarch64_displaced_step_closure)"
    },
    {
      "sha": "d2d9928acd5c1f01744f404e067fd282806f4c6b",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -341,8 +341,9 @@ If enabled, source code is styled.\\n\"\n \"Note that source styling only works if styling in general is enabled,\\n\\\n see \\\"show style enabled\\\".\"\n #else\n-\"Source highlighting is disabled in this installation of gdb, because\\n\\\n-it was not linked against GNU Source Highlight.\"\n+\"Source highlighting may be disabled in this installation of gdb, because\\n\\\n+it was not linked against GNU Source Highlight.  However, it might still be\\n\\\n+available if the appropriate extension is available at runtime.\"\n #endif\n \t\t\t   ), set_style_enabled, show_style_sources,\n \t\t\t   &style_set_list, &style_show_list);"
    },
    {
      "sha": "c35671013d9ca146b3f24660baf06bf91f626111",
      "filename": "gdb/extension-priv.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension-priv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension-priv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension-priv.h?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -254,6 +254,13 @@ struct extension_language_ops\n      struct type *obj_type,\n      const char *method_name,\n      std::vector<xmethod_worker_up> *dm_vec);\n+\n+  /* Colorize a source file.  NAME is the source file's name, and\n+     CONTENTS is the contents of the file.  This should either return\n+     colorized (using ANSI terminal escapes) version of the contents,\n+     or an empty option.  */\n+  gdb::optional<std::string> (*colorize) (const std::string &name,\n+\t\t\t\t\t  const std::string &contents);\n };\n \n /* State necessary to restore a signal handler to its previous value.  */"
    },
    {
      "sha": "e2efe0b0d836fe12aeb7aa115110d9a33930ba02",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -903,6 +903,27 @@ xmethod_worker::get_result_type (value *object, gdb::array_view<value *> args)\n   return result_type;\n }\n \n+/* See extension.h.  */\n+\n+gdb::optional<std::string>\n+ext_lang_colorize (const std::string &filename, const std::string &contents)\n+{\n+  int i;\n+  const struct extension_language_defn *extlang;\n+  gdb::optional<std::string> result;\n+\n+  ALL_ENABLED_EXTENSION_LANGUAGES (i, extlang)\n+    {\n+      if (extlang->ops->colorize == nullptr)\n+\tcontinue;\n+      result = extlang->ops->colorize (filename, contents);\n+      if (result.has_value ())\n+\treturn result;\n+    }\n+\n+  return result;\n+}\n+\n /* Called via an observer before gdb prints its prompt.\n    Iterate over the extension languages giving them a chance to\n    change the prompt.  The first one to change the prompt wins,"
    },
    {
      "sha": "ca3fc14bd0fb3a3a89b4fea2e6385a374f93d497",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -22,6 +22,7 @@\n \n #include \"mi/mi-cmds.h\" /* For PRINT_NO_VALUES, etc.  */\n #include \"gdbsupport/array-view.h\"\n+#include \"gdbsupport/gdb_optional.h\"\n \n struct breakpoint;\n struct command_line;\n@@ -309,4 +310,12 @@ extern void get_matching_xmethod_workers\n   (struct type *type, const char *method_name,\n    std::vector<xmethod_worker_up> *workers);\n \n+/* Try to colorize some source code.  FILENAME is the name of the file\n+   holding the code.  CONTENTS is the source code itself.  This will\n+   either a colorized (using ANSI terminal escapes) version of the\n+   source code, or an empty value if colorizing could not be done.  */\n+\n+extern gdb::optional<std::string> ext_lang_colorize\n+  (const std::string &filename, const std::string &contents);\n+\n #endif /* EXTENSION_H */"
    },
    {
      "sha": "a1aac0079238949cd0470212b210747cb1115158",
      "filename": "gdb/python/lib/gdb/__init__.py",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/python/lib/gdb/__init__.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/python/lib/gdb/__init__.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/__init__.py?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -210,3 +210,17 @@ def find_pc_line(pc):\n     \"\"\"find_pc_line (pc) -> Symtab_and_line.\n Return the gdb.Symtab_and_line object corresponding to the pc value.\"\"\"\n     return current_progspace().find_pc_line(pc)\n+\n+try:\n+    from pygments import formatters, lexers, highlight\n+    def colorize(filename, contents):\n+        # Don't want any errors.\n+        try:\n+            lexer = lexers.get_lexer_for_filename(filename)\n+            formatter = formatters.TerminalFormatter()\n+            return highlight(contents, lexer, formatter)\n+        except:\n+            return None\n+except:\n+    def colorize(filename, contents):\n+        return None"
    },
    {
      "sha": "f75c7b170630e58063f7956ad08bae584a0f039b",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -149,6 +149,8 @@ static void gdbpy_set_quit_flag (const struct extension_language_defn *);\n static int gdbpy_check_quit_flag (const struct extension_language_defn *);\n static enum ext_lang_rc gdbpy_before_prompt_hook\n   (const struct extension_language_defn *, const char *current_gdb_prompt);\n+static gdb::optional<std::string> gdbpy_colorize\n+  (const std::string &filename, const std::string &contents);\n \n /* The interface between gdb proper and loading of python scripts.  */\n \n@@ -188,6 +190,8 @@ const struct extension_language_ops python_extension_ops =\n   gdbpy_before_prompt_hook,\n \n   gdbpy_get_matching_xmethod_workers,\n+\n+  gdbpy_colorize,\n };\n \n /* Architecture and language to be used in callbacks from\n@@ -1104,6 +1108,74 @@ gdbpy_before_prompt_hook (const struct extension_language_defn *extlang,\n   return EXT_LANG_RC_NOP;\n }\n \n+/* This is the extension_language_ops.colorize \"method\".  */\n+\n+static gdb::optional<std::string>\n+gdbpy_colorize (const std::string &filename, const std::string &contents)\n+{\n+  if (!gdb_python_initialized)\n+    return {};\n+\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (gdb_python_module == nullptr\n+      || !PyObject_HasAttrString (gdb_python_module, \"colorize\"))\n+    return {};\n+\n+  gdbpy_ref<> hook (PyObject_GetAttrString (gdb_python_module, \"colorize\"));\n+  if (hook == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  if (!PyCallable_Check (hook.get ()))\n+    return {};\n+\n+  gdbpy_ref<> fname_arg (PyString_FromString (filename.c_str ()));\n+  if (fname_arg == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+  gdbpy_ref<> contents_arg (PyString_FromString (contents.c_str ()));\n+  if (contents_arg == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  gdbpy_ref<> result (PyObject_CallFunctionObjArgs (hook.get (),\n+\t\t\t\t\t\t    fname_arg.get (),\n+\t\t\t\t\t\t    contents_arg.get (),\n+\t\t\t\t\t\t    nullptr));\n+  if (result == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  if (!gdbpy_is_string (result.get ()))\n+    return {};\n+\n+  gdbpy_ref<> unic = python_string_to_unicode (result.get ());\n+  if (unic == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+  gdbpy_ref<> host_str (PyUnicode_AsEncodedString (unic.get (),\n+\t\t\t\t\t\t   host_charset (),\n+\t\t\t\t\t\t   nullptr));\n+  if (host_str == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return {};\n+    }\n+\n+  return std::string (PyBytes_AsString (host_str.get ()));\n+}\n+\n \f\n \n /* Printing.  */"
    },
    {
      "sha": "71277ecc9b3c658d494ac8d0693e2c2a34c0a007",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6474de9aacec990d44d2d65a337668b389efd99/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6474de9aacec990d44d2d65a337668b389efd99/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=f6474de9aacec990d44d2d65a337668b389efd99",
      "patch": "@@ -178,9 +178,10 @@ source_cache::ensure (struct symtab *s)\n \n   std::string contents = get_plain_source_lines (s, fullname);\n \n-#ifdef HAVE_SOURCE_HIGHLIGHT\n   if (source_styling && gdb_stdout->can_emit_style_escape ())\n     {\n+#ifdef HAVE_SOURCE_HIGHLIGHT\n+      bool already_styled = false;\n       const char *lang_name = get_language_name (SYMTAB_LANGUAGE (s));\n       if (lang_name != nullptr)\n \t{\n@@ -202,6 +203,7 @@ source_cache::ensure (struct symtab *s)\n \t      std::ostringstream output;\n \t      highlighter->highlight (input, output, lang_name, fullname);\n \t      contents = output.str ();\n+\t      already_styled = true;\n \t    }\n \t  catch (...)\n \t    {\n@@ -213,8 +215,16 @@ source_cache::ensure (struct symtab *s)\n \t\t un-highlighted text. */\n \t    }\n \t}\n-    }\n+\n+      if (!already_styled)\n #endif /* HAVE_SOURCE_HIGHLIGHT */\n+\t{\n+\t  gdb::optional<std::string> ext_contents;\n+\t  ext_contents = ext_lang_colorize (fullname, contents);\n+\t  if (ext_contents.has_value ())\n+\t    contents = std::move (*ext_contents);\n+\t}\n+    }\n \n   source_text result = { std::move (fullname), std::move (contents) };\n   m_source_map.push_back (std::move (result));"
    }
  ]
}