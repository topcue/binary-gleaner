{
  "sha": "03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDNhOGVhNTFjMzFkOGYyN2VjNzE3ZGRiMWZmNjhmNWY1ZDA3MzJhYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:05Z"
    },
    "message": "Add search_flags to expand_symtabs_matching\n\nThis adds a block search flags parameter to expand_symtabs_matching.\nAll callers are updated to search both the static and global blocks,\nas that was the implied behavior before this patch.\n\nThis is a step toward replacing lookup_symbol with\nexpand_symtabs_matching.\n\ngdb/ChangeLog\n2021-04-17  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (global_symbol_searcher::expand_symtabs)\n\t(default_collect_symbol_completion_matches_break_on): Update.\n\t* symmisc.c (maintenance_expand_symtabs): Update.\n\t* symfile.h (expand_symtabs_matching): Add search_flags\n\tparameter.\n\t* symfile.c (expand_symtabs_matching): Add search_flags\n\tparameter.\n\t* symfile-debug.c (objfile::expand_symtabs_matching): Add\n\tsearch_flags parameter.\n\t* quick-symbol.h (struct quick_symbol_functions)\n\t<expand_symtabs_matching>: Add search_flags parameter.\n\t* python/py-symbol.c (gdbpy_lookup_static_symbols): Update.\n\t* psymtab.c (recursively_search_psymtabs)\n\t(psymbol_functions::expand_symtabs_matching): Add search_flags\n\tparameter.\n\t* psympriv.h (struct psymbol_functions) <expand_symtabs_matching>:\n\tAdd search_flags parameter.\n\t* objfiles.h (struct objfile) <expand_symtabs_matching>: Add\n\tsearch_flags parameter.\n\t* linespec.c (iterate_over_all_matching_symtabs): Update.\n\t* dwarf2/read.c (struct dwarf2_gdb_index)\n\t<expand_symtabs_matching>: Add search_flags parameter.\n\t(struct dwarf2_debug_names_index) <expand_symtabs_matching>: Add\n\tsearch_flags parameter.\n\t(dw2_map_matching_symbols): Update.\n\t(dw2_expand_marked_cus, dw2_expand_symtabs_matching)\n\t(dwarf2_gdb_index::expand_symtabs_matching): Add search_flags\n\tparameter.\n\t(dw2_debug_names_iterator): Change block_index to search flags.\n\t<m_block_index>: Likewise.\n\t(dw2_debug_names_iterator::next)\n\t(dwarf2_debug_names_index::lookup_symbol)\n\t(dwarf2_debug_names_index::expand_symtabs_for_function)\n\t(dwarf2_debug_names_index::map_matching_symbols)\n\t(dwarf2_debug_names_index::map_matching_symbols): Update.\n\t(dwarf2_debug_names_index::expand_symtabs_matching): Add\n\tsearch_flags parameter.\n\t* ada-lang.c (ada_add_global_exceptions)\n\t(collect_symbol_completion_matches): Update.",
    "tree": {
      "sha": "6ed01e407a3d78440abf03c9b37b40df98e3d24b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ed01e407a3d78440abf03c9b37b40df98e3d24b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df35e6262da99acc80bb88d669975f0b52e33876",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df35e6262da99acc80bb88d669975f0b52e33876",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df35e6262da99acc80bb88d669975f0b52e33876"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 128,
    "deletions": 23
  },
  "files": [
    {
      "sha": "3d27f68b93c1309b365c3cdad386b2f2deb7080e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -1,3 +1,45 @@\n+2021-04-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (global_symbol_searcher::expand_symtabs)\n+\t(default_collect_symbol_completion_matches_break_on): Update.\n+\t* symmisc.c (maintenance_expand_symtabs): Update.\n+\t* symfile.h (expand_symtabs_matching): Add search_flags\n+\tparameter.\n+\t* symfile.c (expand_symtabs_matching): Add search_flags\n+\tparameter.\n+\t* symfile-debug.c (objfile::expand_symtabs_matching): Add\n+\tsearch_flags parameter.\n+\t* quick-symbol.h (struct quick_symbol_functions)\n+\t<expand_symtabs_matching>: Add search_flags parameter.\n+\t* python/py-symbol.c (gdbpy_lookup_static_symbols): Update.\n+\t* psymtab.c (recursively_search_psymtabs)\n+\t(psymbol_functions::expand_symtabs_matching): Add search_flags\n+\tparameter.\n+\t* psympriv.h (struct psymbol_functions) <expand_symtabs_matching>:\n+\tAdd search_flags parameter.\n+\t* objfiles.h (struct objfile) <expand_symtabs_matching>: Add\n+\tsearch_flags parameter.\n+\t* linespec.c (iterate_over_all_matching_symtabs): Update.\n+\t* dwarf2/read.c (struct dwarf2_gdb_index)\n+\t<expand_symtabs_matching>: Add search_flags parameter.\n+\t(struct dwarf2_debug_names_index) <expand_symtabs_matching>: Add\n+\tsearch_flags parameter.\n+\t(dw2_map_matching_symbols): Update.\n+\t(dw2_expand_marked_cus, dw2_expand_symtabs_matching)\n+\t(dwarf2_gdb_index::expand_symtabs_matching): Add search_flags\n+\tparameter.\n+\t(dw2_debug_names_iterator): Change block_index to search flags.\n+\t<m_block_index>: Likewise.\n+\t(dw2_debug_names_iterator::next)\n+\t(dwarf2_debug_names_index::lookup_symbol)\n+\t(dwarf2_debug_names_index::expand_symtabs_for_function)\n+\t(dwarf2_debug_names_index::map_matching_symbols)\n+\t(dwarf2_debug_names_index::map_matching_symbols): Update.\n+\t(dwarf2_debug_names_index::expand_symtabs_matching): Add\n+\tsearch_flags parameter.\n+\t* ada-lang.c (ada_add_global_exceptions)\n+\t(collect_symbol_completion_matches): Update.\n+\n 2021-04-17  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (default_collect_symbol_completion_matches_break_on):"
    },
    {
      "sha": "589fbf1a0c49f3dac17b5956c69177d0374d66dd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -12516,6 +12516,7 @@ ada_add_global_exceptions (compiled_regex *preg,\n \t\t\t     return name_matches_regex (decoded.c_str (), preg);\n \t\t\t   },\n \t\t\t   NULL,\n+\t\t\t   SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n \t\t\t   VARIABLES_DOMAIN);\n \n   for (objfile *objfile : current_program_space->objfiles ())\n@@ -13032,6 +13033,7 @@ class ada_language : public language_defn\n \t\t\t     lookup_name,\n \t\t\t     NULL,\n \t\t\t     NULL,\n+\t\t\t     SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n \t\t\t     ALL_DOMAIN);\n \n     /* At this point scan through the misc symbol vectors and add each"
    },
    {
      "sha": "824945a95bcd79a80765b15a1639bcece68df21a",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 47,
      "deletions": 16,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -2289,6 +2289,7 @@ struct dwarf2_gdb_index : public dwarf2_base_index_functions\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind) override;\n };\n \n@@ -2318,6 +2319,7 @@ struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind) override;\n };\n \n@@ -4699,6 +4701,7 @@ dw2_expand_marked_cus\n   (dwarf2_per_objfile *per_objfile, offset_type idx,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    search_domain kind)\n {\n   offset_type *vec, vec_len, vec_idx;\n@@ -4738,6 +4741,17 @@ dw2_expand_marked_cus\n       /* Only check the symbol's kind if it has one.  */\n       if (attrs_valid)\n \t{\n+\t  if (is_static)\n+\t    {\n+\t      if ((search_flags & SEARCH_STATIC_BLOCK) == 0)\n+\t\tcontinue;\n+\t    }\n+\t  else\n+\t    {\n+\t      if ((search_flags & SEARCH_GLOBAL_BLOCK) == 0)\n+\t\tcontinue;\n+\t    }\n+\n \t  switch (kind)\n \t    {\n \t    case VARIABLES_DOMAIN:\n@@ -4863,6 +4877,7 @@ dwarf2_gdb_index::expand_symtabs_matching\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n@@ -4895,7 +4910,7 @@ dwarf2_gdb_index::expand_symtabs_matching\n \t\t\t\t\t  [&] (offset_type idx)\n     {\n       if (!dw2_expand_marked_cus (per_objfile, idx, file_matcher,\n-\t\t\t\t  expansion_notify, kind))\n+\t\t\t\t  expansion_notify, search_flags, kind))\n \treturn false;\n       return true;\n     }, per_objfile);\n@@ -5373,7 +5388,7 @@ class dw2_debug_names_iterator\n {\n public:\n   dw2_debug_names_iterator (const mapped_debug_names &map,\n-\t\t\t    gdb::optional<block_enum> block_index,\n+\t\t\t    block_search_flags block_index,\n \t\t\t    domain_enum domain,\n \t\t\t    const char *name, dwarf2_per_objfile *per_objfile)\n     : m_map (map), m_block_index (block_index), m_domain (domain),\n@@ -5382,15 +5397,16 @@ class dw2_debug_names_iterator\n   {}\n \n   dw2_debug_names_iterator (const mapped_debug_names &map,\n-\t\t\t    search_domain search, uint32_t namei, dwarf2_per_objfile *per_objfile)\n+\t\t\t    search_domain search, uint32_t namei,\n+\t\t\t    dwarf2_per_objfile *per_objfile)\n     : m_map (map),\n       m_search (search),\n       m_addr (find_vec_in_debug_names (map, namei, per_objfile)),\n       m_per_objfile (per_objfile)\n   {}\n \n   dw2_debug_names_iterator (const mapped_debug_names &map,\n-\t\t\t    block_enum block_index, domain_enum domain,\n+\t\t\t    block_search_flags block_index, domain_enum domain,\n \t\t\t    uint32_t namei, dwarf2_per_objfile *per_objfile)\n     : m_map (map), m_block_index (block_index), m_domain (domain),\n       m_addr (find_vec_in_debug_names (map, namei, per_objfile)),\n@@ -5411,9 +5427,9 @@ class dw2_debug_names_iterator\n   /* The internalized form of .debug_names.  */\n   const mapped_debug_names &m_map;\n \n-  /* If set, only look for symbols that match that block.  Valid values are\n-     GLOBAL_BLOCK and STATIC_BLOCK.  */\n-  const gdb::optional<block_enum> m_block_index;\n+  /* Restrict the search to these blocks.  */\n+  block_search_flags m_block_index = (SEARCH_GLOBAL_BLOCK\n+\t\t\t\t      | SEARCH_STATIC_BLOCK);\n \n   /* The kind of symbol we're looking for.  */\n   const domain_enum m_domain = UNDEF_DOMAIN;\n@@ -5662,13 +5678,18 @@ dw2_debug_names_iterator::next ()\n     goto again;\n \n   /* Check static vs global.  */\n-  if (symbol_linkage_ != symbol_linkage::unknown && m_block_index.has_value ())\n+  if (symbol_linkage_ != symbol_linkage::unknown)\n     {\n-\tconst bool want_static = *m_block_index == STATIC_BLOCK;\n-\tconst bool symbol_is_static =\n-\t  symbol_linkage_ == symbol_linkage::static_;\n-\tif (want_static != symbol_is_static)\n-\t  goto again;\n+      if (symbol_linkage_ == symbol_linkage::static_)\n+\t{\n+\t  if ((m_block_index & SEARCH_STATIC_BLOCK) == 0)\n+\t    goto again;\n+\t}\n+      else\n+\t{\n+\t  if ((m_block_index & SEARCH_GLOBAL_BLOCK) == 0)\n+\t    goto again;\n+\t}\n     }\n \n   /* Match dw2_symtab_iter_next, symbol_kind\n@@ -5783,7 +5804,11 @@ dwarf2_debug_names_index::lookup_symbol\n     }\n   const auto &map = *mapp;\n \n-  dw2_debug_names_iterator iter (map, block_index, domain, name, per_objfile);\n+  dw2_debug_names_iterator iter (map,\n+\t\t\t\t block_index == GLOBAL_BLOCK\n+\t\t\t\t ? SEARCH_GLOBAL_BLOCK\n+\t\t\t\t : SEARCH_STATIC_BLOCK,\n+\t\t\t\t domain, name, per_objfile);\n \n   struct compunit_symtab *stab_best = NULL;\n   struct dwarf2_per_cu_data *per_cu;\n@@ -5845,7 +5870,10 @@ dwarf2_debug_names_index::expand_symtabs_for_function\n     {\n       const mapped_debug_names &map = *per_objfile->per_bfd->debug_names_table;\n \n-      dw2_debug_names_iterator iter (map, {}, VAR_DOMAIN, func_name,\n+      dw2_debug_names_iterator iter (map,\n+\t\t\t\t     (SEARCH_GLOBAL_BLOCK\n+\t\t\t\t      | SEARCH_STATIC_BLOCK),\n+\t\t\t\t     VAR_DOMAIN, func_name,\n \t\t\t\t     per_objfile);\n \n       struct dwarf2_per_cu_data *per_cu;\n@@ -5870,6 +5898,8 @@ dwarf2_debug_names_index::map_matching_symbols\n \n   mapped_debug_names &map = *per_objfile->per_bfd->debug_names_table;\n   const block_enum block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n+  const block_search_flags block_flags\n+    = global ? SEARCH_GLOBAL_BLOCK : SEARCH_STATIC_BLOCK;\n \n   const char *match_name = name.ada ().lookup_name ().c_str ();\n   auto matcher = [&] (const char *symname)\n@@ -5884,7 +5914,7 @@ dwarf2_debug_names_index::map_matching_symbols\n     {\n       /* The name was matched, now expand corresponding CUs that were\n \t marked.  */\n-      dw2_debug_names_iterator iter (map, block_kind, domain, namei,\n+      dw2_debug_names_iterator iter (map, block_flags, domain, namei,\n \t\t\t\t     per_objfile);\n \n       struct dwarf2_per_cu_data *per_cu;\n@@ -5919,6 +5949,7 @@ dwarf2_debug_names_index::expand_symtabs_matching\n    const lookup_name_info *lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    enum search_domain kind)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);"
    },
    {
      "sha": "f37861b343ae8ff4742584a2b3e43ff9742a2779",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -1170,6 +1170,8 @@ iterate_over_all_matching_symtabs\n       for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  objfile->expand_symtabs_matching (NULL, &lookup_name, NULL, NULL,\n+\t\t\t\t\t    (SEARCH_GLOBAL_BLOCK\n+\t\t\t\t\t     | SEARCH_STATIC_BLOCK),\n \t\t\t\t\t    search_domain);\n \n \t  for (compunit_symtab *cu : objfile->compunits ())"
    },
    {
      "sha": "9a194c1d8d47e7b08a7da618bf098e674bc714e9",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -608,6 +608,7 @@ struct objfile\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind);\n \n   /* See quick_symbol_functions.  */"
    },
    {
      "sha": "70a397f8167b0b31c159a75e6bfe9b03df7ebb04",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -547,6 +547,7 @@ struct psymbol_functions : public quick_symbol_functions\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind) override;\n \n   struct compunit_symtab *find_pc_sect_compunit_symtab"
    },
    {
      "sha": "c346116829432879f8478a046d78b846d3a6a89f",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -1207,6 +1207,7 @@ static bool\n recursively_search_psymtabs\n   (struct partial_symtab *ps,\n    struct objfile *objfile,\n+   block_search_flags search_flags,\n    enum search_domain domain,\n    const lookup_name_info &lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> sym_matcher)\n@@ -1229,8 +1230,8 @@ recursively_search_psymtabs\n \tcontinue;\n \n       r = recursively_search_psymtabs (ps->dependencies[i],\n-\t\t\t\t       objfile, domain, lookup_name,\n-\t\t\t\t       sym_matcher);\n+\t\t\t\t       objfile, search_flags, domain,\n+\t\t\t\t       lookup_name, sym_matcher);\n       if (r != 0)\n \t{\n \t  ps->searched_flag = PST_SEARCHED_AND_FOUND;\n@@ -1247,11 +1248,24 @@ recursively_search_psymtabs\n   /* Go through all of the symbols stored in a partial\n      symtab in one loop.  */\n   partial_symbol **psym = ps->global_psymbols.data ();\n+\n+  if ((search_flags & SEARCH_GLOBAL_BLOCK) == 0)\n+    {\n+      if (ps->static_psymbols.empty ())\n+\tkeep_going = 0;\n+      else\n+\t{\n+\t  psym = ps->static_psymbols.data ();\n+\t  bound = sbound;\n+\t}\n+    }\n+\n   while (keep_going)\n     {\n       if (psym >= bound)\n \t{\n-\t  if (bound == gbound && !ps->static_psymbols.empty ())\n+\t  if (bound == gbound && !ps->static_psymbols.empty ()\n+\t      && (search_flags & SEARCH_STATIC_BLOCK) != 0)\n \t    {\n \t      psym = ps->static_psymbols.data ();\n \t      bound = sbound;\n@@ -1300,6 +1314,7 @@ psymbol_functions::expand_symtabs_matching\n    const lookup_name_info *lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    enum search_domain domain)\n {\n   /* Clear the search flags.  */\n@@ -1338,7 +1353,7 @@ psymbol_functions::expand_symtabs_matching\n \t}\n \n       if ((symbol_matcher == NULL && lookup_name == NULL)\n-\t  || recursively_search_psymtabs (ps, objfile, domain,\n+\t  || recursively_search_psymtabs (ps, objfile, search_flags, domain,\n \t\t\t\t\t  *psym_lookup_name,\n \t\t\t\t\t  symbol_matcher))\n \t{"
    },
    {
      "sha": "ead26d5d441a18ad5aa7f8d8d41427b70b198c5d",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -560,7 +560,9 @@ gdbpy_lookup_static_symbols (PyObject *self, PyObject *args, PyObject *kw)\n     {\n       /* Expand any symtabs that contain potentially matching symbols.  */\n       lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n-      expand_symtabs_matching (NULL, lookup_name, NULL, NULL, ALL_DOMAIN);\n+      expand_symtabs_matching (NULL, lookup_name, NULL, NULL,\n+\t\t\t       SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n+\t\t\t       ALL_DOMAIN);\n \n       for (objfile *objfile : current_program_space->objfiles ())\n \t{"
    },
    {
      "sha": "3332d329e0230cd81ee9a9c3a71d436819a1ca0f",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -219,6 +219,7 @@ struct quick_symbol_functions\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     block_search_flags search_flags,\n      enum search_domain kind) = 0;\n \n   /* Return the comp unit from OBJFILE that contains PC and"
    },
    {
      "sha": "b1763243534f3c0eba7ee3c6011999ee5b62c33e",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -271,6 +271,7 @@ objfile::expand_symtabs_matching\n    const lookup_name_info *lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    enum search_domain kind)\n {\n   if (debug_symfile)\n@@ -285,7 +286,7 @@ objfile::expand_symtabs_matching\n   for (const auto &iter : qf)\n     if (!iter->expand_symtabs_matching (this, file_matcher, lookup_name,\n \t\t\t\t\tsymbol_matcher, expansion_notify,\n-\t\t\t\t\tkind))\n+\t\t\t\t\tsearch_flags, kind))\n       return false;\n   return true;\n }"
    },
    {
      "sha": "5f83cbf67c8ff0dbf22429eb1cf4ccad3612b537",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -3722,13 +3722,16 @@ expand_symtabs_matching\n    const lookup_name_info &lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    enum search_domain kind)\n {\n   for (objfile *objfile : current_program_space->objfiles ())\n     if (!objfile->expand_symtabs_matching (file_matcher,\n \t\t\t\t\t   &lookup_name,\n \t\t\t\t\t   symbol_matcher,\n-\t\t\t\t\t   expansion_notify, kind))\n+\t\t\t\t\t   expansion_notify,\n+\t\t\t\t\t   search_flags,\n+\t\t\t\t\t   kind))\n       return false;\n   return true;\n }"
    },
    {
      "sha": "22b091182aaabb17d9deb2ca7eda3babf9d67be2",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -326,6 +326,7 @@ bool expand_symtabs_matching\n    const lookup_name_info &lookup_name,\n    gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+   block_search_flags search_flags,\n    enum search_domain kind);\n \n void map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,"
    },
    {
      "sha": "33657f88fa9e0dddcd6f42a295326425fec453e3",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -938,6 +938,7 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n \t NULL,\n \t NULL,\n \t NULL,\n+\t SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n \t ALL_DOMAIN);\n }\n \f"
    },
    {
      "sha": "a34207fc74bb1ef8821901d1e95ba0a56d9339d4",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=03a8ea51c31d8f27ec717ddb1ff68f5f5d0732ab",
      "patch": "@@ -4547,6 +4547,7 @@ global_symbol_searcher::expand_symtabs\n \t       || preg->exec (symname, 0, NULL, 0) == 0);\n      },\n      NULL,\n+     SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n      kind);\n \n   /* Here, we search through the minimal symbol tables for functions and\n@@ -5732,6 +5733,7 @@ default_collect_symbol_completion_matches_break_on\n \t\t\t\t\t\t       sym_text, word, code);\n \t\t\t       return true;\n \t\t\t     },\n+\t\t\t   SEARCH_GLOBAL_BLOCK | SEARCH_STATIC_BLOCK,\n \t\t\t   ALL_DOMAIN);\n \n   /* Search upwards from currently selected frame (so that we can"
    }
  ]
}