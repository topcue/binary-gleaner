{
  "sha": "32c1e2100975c073b3c1d9e2041de9f74b6e2049",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzJjMWUyMTAwOTc1YzA3M2IzYzFkOWUyMDQxZGU5Zjc0YjZlMjA0OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:17Z"
    },
    "message": "Remove tui_gen_win_info\n\nThis merges the tui_gen_win_info base class with tui_win_info;\nrenaming the resulting class to tui_win_info.\n\ngdb/ChangeLog\n2020-07-01  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-wingeneral.c (tui_win_info::refresh_window): Move from\n\ttui_gen_win_info.\n\t(tui_win_info::make_window): Merge with\n\ttui_gen_win_info::make_window.\n\t(tui_win_info::make_visible): Move from tui_gen_win_info.\n\t* tui/tui-win.c (tui_win_info::max_width): Move from\n\ttui_gen_win_info.\n\t* tui/tui-layout.h (class tui_layout_window) <m_window>: Change\n\ttype.\n\t<window_factory>: Likewise.\n\t* tui/tui-layout.c (tui_win_info::resize): Move from\n\ttui_gen_win_info.\n\t(make_standard_window): Change return type.\n\t(get_locator_window, tui_get_window_by_name): Likewise.\n\t(tui_layout_window::apply): Remove a cast.\n\t* tui/tui-data.h (MIN_WIN_HEIGHT): Move earlier.\n\t(struct tui_win_info): Merge with tui_gen_win_info.\n\t(struct tui_gen_win_info): Remove.",
    "tree": {
      "sha": "6a8287214e60beafd26e079057083fa2b61d6d93",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a8287214e60beafd26e079057083fa2b61d6d93"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32c1e2100975c073b3c1d9e2041de9f74b6e2049",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32c1e2100975c073b3c1d9e2041de9f74b6e2049",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32c1e2100975c073b3c1d9e2041de9f74b6e2049",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32c1e2100975c073b3c1d9e2041de9f74b6e2049/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a30cb6dabb20e26dc80b0952ae709613372359f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a30cb6dabb20e26dc80b0952ae709613372359f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a30cb6dabb20e26dc80b0952ae709613372359f8"
    }
  ],
  "stats": {
    "total": 169,
    "additions": 76,
    "deletions": 93
  },
  "files": [
    {
      "sha": "ec87edf13fc5db5a6d5d1f20c216ea6072378f65",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -1,3 +1,24 @@\n+2020-07-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-wingeneral.c (tui_win_info::refresh_window): Move from\n+\ttui_gen_win_info.\n+\t(tui_win_info::make_window): Merge with\n+\ttui_gen_win_info::make_window.\n+\t(tui_win_info::make_visible): Move from tui_gen_win_info.\n+\t* tui/tui-win.c (tui_win_info::max_width): Move from\n+\ttui_gen_win_info.\n+\t* tui/tui-layout.h (class tui_layout_window) <m_window>: Change\n+\ttype.\n+\t<window_factory>: Likewise.\n+\t* tui/tui-layout.c (tui_win_info::resize): Move from\n+\ttui_gen_win_info.\n+\t(make_standard_window): Change return type.\n+\t(get_locator_window, tui_get_window_by_name): Likewise.\n+\t(tui_layout_window::apply): Remove a cast.\n+\t* tui/tui-data.h (MIN_WIN_HEIGHT): Move earlier.\n+\t(struct tui_win_info): Merge with tui_gen_win_info.\n+\t(struct tui_gen_win_info): Remove.\n+\n 2020-07-01  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-stack.h (struct tui_locator_window): Derive from"
    },
    {
      "sha": "3c14b2654eef34c4d83ad296a5cf7ce3d3e9bbe7",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 40,
      "deletions": 70,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -35,27 +35,25 @@ struct curses_deleter\n   }\n };\n \n+#define MIN_WIN_HEIGHT          3\n+\n /* Generic window information.  */\n-struct tui_gen_win_info\n+struct tui_win_info\n {\n protected:\n \n-  tui_gen_win_info () = default;\n+  tui_win_info () = default;\n+  DISABLE_COPY_AND_ASSIGN (tui_win_info);\n \n   /* This is called after the window is resized, and should update the\n      window's contents.  */\n-  virtual void rerender ()\n-  {\n-  }\n+  virtual void rerender ();\n \n   virtual void make_window ();\n \n public:\n-  tui_gen_win_info (tui_gen_win_info &&) = default;\n-\n-  virtual ~tui_gen_win_info ()\n-  {\n-  }\n+  tui_win_info (tui_win_info &&) = default;\n+  virtual ~tui_win_info () = default;\n \n   /* Call to refresh this window.  */\n   virtual void refresh_window ();\n@@ -70,10 +68,13 @@ struct tui_gen_win_info\n   }\n \n   /* Compute the maximum height of this window.  */\n-  virtual int max_height () const = 0;\n+  virtual int max_height () const;\n \n   /* Compute the minimum height of this window.  */\n-  virtual int min_height () const = 0;\n+  virtual int min_height () const\n+  {\n+    return MIN_WIN_HEIGHT;\n+  }\n \n   /* Compute the maximum width of this window.  */\n   int max_width () const;\n@@ -87,7 +88,7 @@ struct tui_gen_win_info\n   /* Return true if this window can be boxed.  */\n   virtual bool can_box () const\n   {\n-    return false;\n+    return true;\n   }\n \n   /* Resize this window.  The parameters are used to set the window's\n@@ -108,58 +109,6 @@ struct tui_gen_win_info\n       wnoutrefresh (handle.get ());\n   }\n \n-  /* Window handle.  */\n-  std::unique_ptr<WINDOW, curses_deleter> handle;\n-  /* Window width.  */\n-  int width = 0;\n-  /* Window height.  */\n-  int height = 0;\n-  /* Origin of window.  */\n-  int x = 0;\n-  int y = 0;\n-};\n-\n-/* Constant definitions.  */\n-#define SRC_NAME                \"src\"\n-#define CMD_NAME                \"cmd\"\n-#define DATA_NAME               \"regs\"\n-#define DISASSEM_NAME           \"asm\"\n-#define STATUS_NAME\t\t\"status\"\n-#define MIN_WIN_HEIGHT          3\n-\n-/* This defines information about each logical window.  */\n-struct tui_win_info : public tui_gen_win_info\n-{\n-protected:\n-\n-  tui_win_info () = default;\n-  DISABLE_COPY_AND_ASSIGN (tui_win_info);\n-\n-  /* Scroll the contents vertically.  This is only called via\n-     forward_scroll and backward_scroll.  */\n-  virtual void do_scroll_vertical (int num_to_scroll) = 0;\n-\n-  /* Scroll the contents horizontally.  This is only called via\n-     left_scroll and right_scroll.  */\n-  virtual void do_scroll_horizontal (int num_to_scroll) = 0;\n-\n-  void rerender () override;\n-\n-  void make_window () override;\n-\n-public:\n-\n-  ~tui_win_info () override\n-  {\n-  }\n-\n-  int max_height () const override;\n-\n-  int min_height () const override\n-  {\n-    return MIN_WIN_HEIGHT;\n-  }\n-\n   /* Called after the tab width has been changed.  */\n   virtual void update_tab_width ()\n   {\n@@ -185,20 +134,41 @@ struct tui_win_info : public tui_gen_win_info\n     return true;\n   }\n \n-  bool can_box () const override\n-  {\n-    return true;\n-  }\n-\n   void check_and_display_highlight_if_needed ();\n \n+  /* Window handle.  */\n+  std::unique_ptr<WINDOW, curses_deleter> handle;\n+  /* Window width.  */\n+  int width = 0;\n+  /* Window height.  */\n+  int height = 0;\n+  /* Origin of window.  */\n+  int x = 0;\n+  int y = 0;\n+\n   /* Window title to display.  */\n   std::string title;\n \n   /* Is this window highlighted?  */\n   bool is_highlighted = false;\n+\n+protected:\n+\n+  /* Scroll the contents vertically.  This is only called via\n+     forward_scroll and backward_scroll.  */\n+  virtual void do_scroll_vertical (int num_to_scroll) = 0;\n+\n+  /* Scroll the contents horizontally.  This is only called via\n+     left_scroll and right_scroll.  */\n+  virtual void do_scroll_horizontal (int num_to_scroll) = 0;\n };\n \n+/* Constant definitions.  */\n+#define SRC_NAME                \"src\"\n+#define CMD_NAME                \"cmd\"\n+#define DATA_NAME               \"regs\"\n+#define DISASSEM_NAME           \"asm\"\n+#define STATUS_NAME\t\t\"status\"\n \n /* Global Data.  */\n extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];"
    },
    {
      "sha": "a568fa6c1165e3e03e16c14b969c05f1383a6388",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -285,8 +285,8 @@ extract_display_start_addr (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n }\n \n void\n-tui_gen_win_info::resize (int height_, int width_,\n-\t\t\t  int origin_x_, int origin_y_)\n+tui_win_info::resize (int height_, int width_,\n+\t\t      int origin_x_, int origin_y_)\n {\n   if (width == width_ && height == height_\n       && x == origin_x_ && y == origin_y_\n@@ -321,7 +321,7 @@ tui_gen_win_info::resize (int height_, int width_,\n    windows.  */\n \n template<enum tui_win_type V, class T>\n-static tui_gen_win_info *\n+static tui_win_info *\n make_standard_window (const char *)\n {\n   if (tui_win_list[V] == nullptr)\n@@ -332,7 +332,7 @@ make_standard_window (const char *)\n /* Helper function to wrap tui_locator_win_info_ptr for\n    tui_get_window_by_name.  */\n \n-static tui_gen_win_info *\n+static tui_win_info *\n get_locator_window (const char *)\n {\n   return tui_locator_win_info_ptr ();\n@@ -349,7 +349,7 @@ static std::unordered_map<std::string, window_factory> *known_window_types;\n \n /* Helper function that returns a TUI window, given its name.  */\n \n-static tui_gen_win_info *\n+static tui_win_info *\n tui_get_window_by_name (const std::string &name)\n {\n   for (tui_win_info *window : saved_tui_windows)\n@@ -360,7 +360,7 @@ tui_get_window_by_name (const std::string &name)\n   if (iter == known_window_types->end ())\n     error (_(\"Unknown window type \\\"%s\\\"\"), name.c_str ());\n \n-  tui_gen_win_info *result = iter->second (name.c_str ());\n+  tui_win_info *result = iter->second (name.c_str ());\n   if (result == nullptr)\n     error (_(\"Could not create window \\\"%s\\\"\"), name.c_str ());\n   return result;\n@@ -422,8 +422,7 @@ tui_layout_window::apply (int x_, int y_, int width_, int height_)\n   height = height_;\n   gdb_assert (m_window != nullptr);\n   m_window->resize (height, width, x, y);\n-  if (dynamic_cast<tui_win_info *> (m_window) != nullptr)\n-    tui_windows.push_back ((tui_win_info *) m_window);\n+  tui_windows.push_back (m_window);\n }\n \n /* See tui-layout.h.  */"
    },
    {
      "sha": "ee4caf89cb45727f8bc996739d8e6f667aca2997",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -152,7 +152,7 @@ class tui_layout_window : public tui_layout_base\n \n   /* When a layout is applied, this is updated to point to the window\n      object.  */\n-  tui_gen_win_info *m_window = nullptr;\n+  tui_win_info *m_window = nullptr;\n };\n \n /* A TUI layout that holds other layouts.  */\n@@ -251,7 +251,7 @@ extern void tui_adjust_window_height (struct tui_win_info *win,\n \n /* The type of a function that is used to create a TUI window.  */\n \n-typedef std::function<tui_gen_win_info * (const char *name)> window_factory;\n+typedef std::function<tui_win_info * (const char *name)> window_factory;\n \n /* Register a new TUI window type.  NAME is the name of the window\n    type.  FACTORY is a function that can be called to instantiate the"
    },
    {
      "sha": "336571f158e30d1c7184dbafdd22d30c6acf10bf",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -921,7 +921,7 @@ tui_win_info::max_height () const\n /* See tui-data.h.  */\n \n int\n-tui_gen_win_info::max_width () const\n+tui_win_info::max_width () const\n {\n   return tui_term_width () - 2;\n }"
    },
    {
      "sha": "504f9159abb3135ccd20b2bb312d05ca24fcf85d",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 5,
      "deletions": 12,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32c1e2100975c073b3c1d9e2041de9f74b6e2049/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=32c1e2100975c073b3c1d9e2041de9f74b6e2049",
      "patch": "@@ -71,7 +71,7 @@ tui_wrefresh (WINDOW *win)\n /* See tui-data.h.  */\n \n void\n-tui_gen_win_info::refresh_window ()\n+tui_win_info::refresh_window ()\n {\n   if (handle != NULL)\n     tui_wrefresh (handle.get ());\n@@ -166,32 +166,25 @@ tui_win_info::check_and_display_highlight_if_needed ()\n     }\n }\n \n-\n void\n-tui_gen_win_info::make_window ()\n+tui_win_info::make_window ()\n {\n   handle.reset (newwin (height, width, y, x));\n   if (handle != NULL)\n     {\n       if (suppress_output)\n \twnoutrefresh (handle.get ());\n       scrollok (handle.get (), TRUE);\n+      if (can_box ())\n+\tbox_win (this, false);\n     }\n }\n \n-void\n-tui_win_info::make_window ()\n-{\n-  tui_gen_win_info::make_window ();\n-  if (handle != NULL && can_box ())\n-    box_win (this, false);\n-}\n-\n /* We can't really make windows visible, or invisible.  So we have to\n    delete the entire window when making it visible, and create it\n    again when making it visible.  */\n void\n-tui_gen_win_info::make_visible (bool visible)\n+tui_win_info::make_visible (bool visible)\n {\n   if (is_visible () == visible)\n     return;"
    }
  ]
}