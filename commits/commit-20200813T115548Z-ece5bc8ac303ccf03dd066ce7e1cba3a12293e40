{
  "sha": "ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWNlNWJjOGFjMzAzY2NmMDNkZDA2NmNlN2UxY2JhM2ExMjI5M2U0MA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-13T11:55:48Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-13T11:55:48Z"
    },
    "message": "gdb: allow specifying multiple filters when running selftests\n\nI found myself wanting to run a few specific selftests while developing.\nI thought it would be nice to be able to provide multiple test names\nwhen running `maintenant selftests`.  The arguments to that command is\ncurrently interpreted as a single filter (not split by spaces), it now\nbecomes a list a filters, split by spaces.  A test is executed when it\nmatches at least one filter.\n\nHere's an example of the result in GDB:\n\n    (gdb) maintenance selftest xml\n    Running selftest xml_escape_text.\n    Running selftest xml_escape_text_append.\n    Ran 2 unit tests, 0 failed\n    (gdb) maintenance selftest xml unord\n    Running selftest unordered_remove.\n    Running selftest xml_escape_text.\n    Running selftest xml_escape_text_append.\n    Ran 3 unit tests, 0 failed\n    (gdb) maintenance selftest xml unord foobar\n    Running selftest unordered_remove.\n    Running selftest xml_escape_text.\n    Running selftest xml_escape_text_append.\n    Ran 3 unit tests, 0 failed\n\nSince the selftest machinery is also shared with gdbserver, I also\nadapted gdbserver.  It accepts a `--selftest` switch, which accepts an\noptional filter argument.  I made it so you can now pass `--selftest`\nmultiple time to add filters.\n\nIt's not so useful right now though: there's only a single selftest\nright now in GDB and it's for an architecture I can't compile.  So I\ntested by adding dummy tests, here's an example of the result:\n\n    $ ./gdbserver --selftest=foo\n    Running selftest foo.\n    foo\n    Running selftest foobar.\n    foobar\n    Ran 2 unit tests, 0 failed\n    $ ./gdbserver --selftest=foo --selftest=bar\n    Running selftest bar.\n    bar\n    Running selftest foo.\n    foo\n    Running selftest foobar.\n    foobar\n    Ran 3 unit tests, 0 failed\n\ngdbsupport/ChangeLog:\n\n\t* selftest.h (run_tests): Change parameter to array_view.\n\t* selftest.c (run_tests): Change parameter to array_view and use\n\tit.\n\ngdb/ChangeLog:\n\n\t* maint.c (maintenance_selftest): Split args and pass array_view\n\tto run_tests.\n\ngdbserver/ChangeLog:\n\n\t* server.cc (captured_main): Accept multiple `--selftest=`\n\toptions.  Pass all `--selftest=` arguments to run_tests.\n\nChange-Id: I422bd49f08ea8095ae174c5d66a2dd502a59613a",
    "tree": {
      "sha": "c65c56a0b7502de832cb2e6824eb21a70858123d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c65c56a0b7502de832cb2e6824eb21a70858123d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8118fd4346e353323cda683c5158f90efedf1002",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8118fd4346e353323cda683c5158f90efedf1002",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8118fd4346e353323cda683c5158f90efedf1002"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 48,
    "deletions": 10
  },
  "files": [
    {
      "sha": "c1dc0ec01010ed1774fc02d81ff80a233b04f3d7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* maint.c (maintenance_selftest): Split args and pass array_view\n+\tto run_tests.\n+\n 2020-08-12  Luis Machado  <luis.machado@linaro.org>\n \n \t* value.c (check_type_length_before_alloc): Use ULONGEST to store a"
    },
    {
      "sha": "fd37acce5226c18b0875930d56671df71b671987",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -1041,7 +1041,8 @@ static void\n maintenance_selftest (const char *args, int from_tty)\n {\n #if GDB_SELF_TEST\n-  selftests::run_tests (args);\n+  gdb_argv argv (args);\n+  selftests::run_tests (gdb::array_view<char *> (argv.get (), argv.count ()));\n #else\n   printf_filtered (_(\"\\\n Selftests have been disabled for this build.\\n\"));"
    },
    {
      "sha": "e437493b56df38453ae46768406d71635c5cc662",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* server.cc (captured_main): Accept multiple `--selftest=`\n+\toptions.  Pass all `--selftest=` arguments to run_tests.\n+\n 2020-07-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure, config.in: Regenerate."
    },
    {
      "sha": "d45154d1f54777d25b4f53a2f09e35ef1329dc51",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -3610,7 +3610,7 @@ captured_main (int argc, char *argv[])\n   int was_running;\n   bool selftest = false;\n #if GDB_SELF_TEST\n-  const char *selftest_filter = NULL;\n+  std::vector<const char *> selftest_filters;\n #endif\n \n   current_directory = getcwd (NULL, 0);\n@@ -3747,8 +3747,16 @@ captured_main (int argc, char *argv[])\n       else if (startswith (*next_arg, \"--selftest=\"))\n \t{\n \t  selftest = true;\n+\n #if GDB_SELF_TEST\n-\t  selftest_filter = *next_arg + strlen (\"--selftest=\");\n+\t  const char *filter = *next_arg + strlen (\"--selftest=\");\n+\t  if (*filter == '\\0')\n+\t    {\n+\t      fprintf (stderr, _(\"Error: selftest filter is empty.\\n\"));\n+\t      exit (1);\n+\t    }\n+\n+\t  selftest_filters.push_back (filter);\n #endif\n \t}\n       else\n@@ -3825,7 +3833,7 @@ captured_main (int argc, char *argv[])\n   if (selftest)\n     {\n #if GDB_SELF_TEST\n-      selftests::run_tests (selftest_filter);\n+      selftests::run_tests (selftest_filters);\n #else\n       printf (_(\"Selftests have been disabled for this build.\\n\"));\n #endif"
    },
    {
      "sha": "a19605373842999e98242d5534589d0ff8ad2d56",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* selftest.h (run_tests): Change parameter to array_view.\n+\t* selftest.c (run_tests): Change parameter to array_view and use\n+\tit.\n+\n 2020-07-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.am (AM_CPPFLAGS): Add LARGEFILE_CPPFLAGS."
    },
    {
      "sha": "2adb7245571c5897beaf8aeee9e142b0f6660ac9",
      "filename": "gdbsupport/selftest.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/selftest.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/selftest.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.cc?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -68,17 +68,28 @@ register_test (const std::string &name, self_test_function *function)\n /* See selftest.h.  */\n \n void\n-run_tests (const char *filter)\n+run_tests (gdb::array_view<const char *const> filters)\n {\n   int ran = 0, failed = 0;\n \n   for (const auto &pair : tests)\n     {\n       const std::string &name = pair.first;\n       const std::unique_ptr<selftest> &test = pair.second;\n+      bool run = false;\n \n-      if (filter != NULL && *filter != '\\0'\n-\t  && name.find (filter) == std::string::npos)\n+      if (filters.empty ())\n+\trun = true;\n+      else\n+\t{\n+\t  for (const char *filter : filters)\n+\t    {\n+\t      if (name.find (filter) != std::string::npos)\n+\t\trun = true;\n+\t    }\n+\t}\n+\n+      if (!run)\n \tcontinue;\n \n       try"
    },
    {
      "sha": "e0086132f7b97b29814892159fdc7a8551d61678",
      "filename": "gdbsupport/selftest.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/selftest.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ece5bc8ac303ccf03dd066ce7e1cba3a12293e40/gdbsupport/selftest.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.h?ref=ece5bc8ac303ccf03dd066ce7e1cba3a12293e40",
      "patch": "@@ -19,6 +19,8 @@\n #ifndef COMMON_SELFTEST_H\n #define COMMON_SELFTEST_H\n \n+#include \"gdbsupport/array-view.h\"\n+\n /* A test is just a function that does some checks and throws an\n    exception if something has gone wrong.  */\n \n@@ -47,10 +49,10 @@ extern void register_test (const std::string &name,\n /* Run all the self tests.  This print a message describing the number\n    of test and the number of failures.\n \n-   If FILTER is not NULL and not empty, only tests with names containing FILTER\n-   will be ran.  */\n+   If FILTERS is not empty, only run tests with names containing one of the\n+   element of FILTERS.  */\n \n-extern void run_tests (const char *filter);\n+extern void run_tests (gdb::array_view<const char *const> filters);\n \n /* Reset GDB or GDBserver's internal state.  */\n extern void reset ();"
    }
  ]
}