{
  "sha": "bf23a26804608145c316c7516b1aceecc055a888",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmYyM2EyNjgwNDYwODE0NWMzMTZjNzUxNmIxYWNlZWNjMDU1YTg4OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:07Z"
    },
    "message": "Change how accessibility is handled in dwarf2/read.c\n\ndwarf2/read.c uses dwarf2_default_access_attribute to check for the\ndefault access attribute.  This patch simplifies the code by moving\nmore of the access processing into this function, changing its name to\nreflect the difference.  This also ensures that the attribute's form\nis respected, by changing to code to use the constant_value method.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_access_attribute): Rename from\n\tdwarf2_default_access_attribute.  Look up attribute.\n\t(dwarf2_add_field, dwarf2_add_type_defn, dwarf2_add_member_fn):\n\tUpdate.",
    "tree": {
      "sha": "be20da9ed4760c0ba74a3da2a6a32a5bd1d3be39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be20da9ed4760c0ba74a3da2a6a32a5bd1d3be39"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf23a26804608145c316c7516b1aceecc055a888",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf23a26804608145c316c7516b1aceecc055a888",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf23a26804608145c316c7516b1aceecc055a888",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf23a26804608145c316c7516b1aceecc055a888/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a5f294dbd11a64f5231f0fecdb163e3c7ecfaf8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a5f294dbd11a64f5231f0fecdb163e3c7ecfaf8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a5f294dbd11a64f5231f0fecdb163e3c7ecfaf8"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 26,
    "deletions": 22
  },
  "files": [
    {
      "sha": "6fa5fffb1cc2dba64ac046a6b6914c361e00e8ad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf23a26804608145c316c7516b1aceecc055a888/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf23a26804608145c316c7516b1aceecc055a888/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf23a26804608145c316c7516b1aceecc055a888",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_access_attribute): Rename from\n+\tdwarf2_default_access_attribute.  Look up attribute.\n+\t(dwarf2_add_field, dwarf2_add_type_defn, dwarf2_add_member_fn):\n+\tUpdate.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (skip_one_die): Update."
    },
    {
      "sha": "fe9522c87e0857f1169ac878bf9204856b954bc9",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 19,
      "deletions": 22,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf23a26804608145c316c7516b1aceecc055a888/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf23a26804608145c316c7516b1aceecc055a888/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=bf23a26804608145c316c7516b1aceecc055a888",
      "patch": "@@ -14864,12 +14864,25 @@ producer_is_codewarrior (struct dwarf2_cu *cu)\n   return cu->producer_is_codewarrior;\n }\n \n-/* Return the default accessibility type if it is not overridden by\n-   DW_AT_accessibility.  */\n+/* Return the accessibility of DIE, as given by DW_AT_accessibility.\n+   If that attribute is not available, return the appropriate\n+   default.  */\n \n static enum dwarf_access_attribute\n-dwarf2_default_access_attribute (struct die_info *die, struct dwarf2_cu *cu)\n+dwarf2_access_attribute (struct die_info *die, struct dwarf2_cu *cu)\n {\n+  attribute *attr = dwarf2_attr (die, DW_AT_accessibility, cu);\n+  if (attr != nullptr)\n+    {\n+      LONGEST value = attr->constant_value (-1);\n+      if (value == DW_ACCESS_public\n+\t  || value == DW_ACCESS_protected\n+\t  || value == DW_ACCESS_private)\n+\treturn (dwarf_access_attribute) value;\n+      complaint (_(\"Unhandled DW_AT_accessibility value (%s)\"),\n+\t\t plongest (value));\n+    }\n+\n   if (cu->header.version < 3 || producer_is_gxx_lt_4_6 (cu))\n     {\n       /* The default DWARF 2 accessibility for members is public, the default\n@@ -15002,11 +15015,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \n   new_field->offset = die->sect_off;\n \n-  attr = dwarf2_attr (die, DW_AT_accessibility, cu);\n-  if (attr != nullptr)\n-    new_field->accessibility = DW_UNSND (attr);\n-  else\n-    new_field->accessibility = dwarf2_default_access_attribute (die, cu);\n+  new_field->accessibility = dwarf2_access_attribute (die, cu);\n   if (new_field->accessibility != DW_ACCESS_public)\n     fip->non_public_fields = true;\n \n@@ -15193,12 +15202,7 @@ dwarf2_add_type_defn (struct field_info *fip, struct die_info *die,\n   fp.type = read_type_die (die, cu);\n \n   /* Save accessibility.  */\n-  enum dwarf_access_attribute accessibility;\n-  struct attribute *attr = dwarf2_attr (die, DW_AT_accessibility, cu);\n-  if (attr != NULL)\n-    accessibility = (enum dwarf_access_attribute) DW_UNSND (attr);\n-  else\n-    accessibility = dwarf2_default_access_attribute (die, cu);\n+  dwarf_access_attribute accessibility = dwarf2_access_attribute (die, cu);\n   switch (accessibility)\n     {\n     case DW_ACCESS_public:\n@@ -15210,8 +15214,6 @@ dwarf2_add_type_defn (struct field_info *fip, struct die_info *die,\n     case DW_ACCESS_protected:\n       fp.is_protected = 1;\n       break;\n-    default:\n-      complaint (_(\"Unhandled DW_AT_accessibility value (%x)\"), accessibility);\n     }\n \n   if (die->tag == DW_TAG_typedef)\n@@ -15568,7 +15570,6 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n   struct fn_field *fnp;\n   const char *fieldname;\n   struct type *this_type;\n-  enum dwarf_access_attribute accessibility;\n \n   if (cu->language == language_ada)\n     error (_(\"unexpected member function in Ada type\"));\n@@ -15647,11 +15648,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n      is_volatile is irrelevant, as it is needed by gdb_mangle_name only.  */\n \n   /* Get accessibility.  */\n-  attr = dwarf2_attr (die, DW_AT_accessibility, cu);\n-  if (attr != nullptr)\n-    accessibility = (enum dwarf_access_attribute) DW_UNSND (attr);\n-  else\n-    accessibility = dwarf2_default_access_attribute (die, cu);\n+  dwarf_access_attribute accessibility = dwarf2_access_attribute (die, cu);\n   switch (accessibility)\n     {\n     case DW_ACCESS_private:"
    }
  ]
}