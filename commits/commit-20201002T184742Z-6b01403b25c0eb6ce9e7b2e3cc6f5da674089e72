{
  "sha": "6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmIwMTQwM2IyNWMwZWI2Y2U5ZTdiMmUzY2M2ZjVkYTY3NDA4OWU3Mg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-02T18:44:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-02T18:47:42Z"
    },
    "message": "gdb: add debug prints in event loop\n\nAdd debug printouts about event loop-related events:\n\n - When a file descriptor handler gets invoked\n - When an async event/signal handler gets invoked\n\ngdb/ChangeLog:\n\n\t* async-event.c (invoke_async_signal_handlers): Add debug\n\tprint.\n\t(check_async_event_handlers): Likewise.\n\t* event-top.c (show_debug_event_loop): New function.\n\t(_initialize_event_top): Register \"set debug event-loop\"\n\tsetting.\n\ngdbserver/ChangeLog:\n\n\t* server.cc (handle_monitor_command): Handle \"set\n\tdebug-event-loop\".\n\t(captured_main): Handle \"--debug-event-loop\".\n\t(monitor_show_help): Mention new setting.\n\t(gdbserver_usage): Mention new flag.\n\ngdbsupport/ChangeLog:\n\n\t* event-loop.h (debug_event_loop): New variable declaration.\n\t(event_loop_debug_printf_1): New function declaration.\n\t(event_loop_debug_printf): New macro.\n\t* event-loop.cc (debug_event_loop): New variable.\n\t(handle_file_event): Add debug print.\n\t(event_loop_debug_printf_1): New function.\n\nChange-Id: If78ed3a69179881368e7895b42940ce13b6a1a05",
    "tree": {
      "sha": "bb4c228df496538c86485682474aee12791491c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bb4c228df496538c86485682474aee12791491c4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ba98841943b085891eb4bf4debc3981ac95bb7fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba98841943b085891eb4bf4debc3981ac95bb7fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ba98841943b085891eb4bf4debc3981ac95bb7fb"
    }
  ],
  "stats": {
    "total": 202,
    "additions": 192,
    "deletions": 10
  },
  "files": [
    {
      "sha": "737091e390b9d5623884e75843966f44bb56aea0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* async-event.c (invoke_async_signal_handlers): Add debug\n+\tprint.\n+\t(check_async_event_handlers): Likewise.\n+\t* event-top.c (show_debug_event_loop): New function.\n+\t(_initialize_event_top): Register \"set debug event-loop\"\n+\tsetting.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* debug.c (debug_prefixed_vprintf): Move to gdbsupport."
    },
    {
      "sha": "4228dfb09e68b33ab42b62e12637eff60d3a6003",
      "filename": "gdb/async-event.c",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/async-event.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/async-event.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/async-event.c?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -157,8 +157,23 @@ create_async_signal_handler (sig_handler_func * proc,\n    for some event.  The caller of this function is the interrupt\n    handler associated with a signal.  */\n void\n-mark_async_signal_handler (async_signal_handler * async_handler_ptr)\n+mark_async_signal_handler (async_signal_handler *async_handler_ptr)\n {\n+  if (debug_event_loop != debug_event_loop_kind::OFF)\n+    {\n+      /* This is called by signal handlers, so we print it \"by hand\" using\n+\t the async-signal-safe methods.  */\n+      const char head[] = (\"[event-loop] mark_async_signal_handler: marking\"\n+\t\t\t   \"async signal handler `\");\n+      gdb_stdlog->write_async_safe (head, strlen (head));\n+\n+      gdb_stdlog->write_async_safe (async_handler_ptr->name,\n+\t\t\t\t    strlen (async_handler_ptr->name));\n+\n+      const char tail[] = \"`\\n\";\n+      gdb_stdlog->write_async_safe (tail, strlen (tail));\n+    }\n+\n   async_handler_ptr->ready = 1;\n   serial_event_set (async_signal_handlers_serial_event);\n }\n@@ -168,6 +183,8 @@ mark_async_signal_handler (async_signal_handler * async_handler_ptr)\n void\n clear_async_signal_handler (async_signal_handler *async_handler_ptr)\n {\n+  event_loop_debug_printf (\"clearing async signal handler `%s`\",\n+\t\t\t   async_handler_ptr->name);\n   async_handler_ptr->ready = 0;\n }\n \n@@ -211,6 +228,8 @@ invoke_async_signal_handlers (void)\n       /* Async signal handlers have no connection to whichever was the\n \t current UI, and thus always run on the main one.  */\n       current_ui = main_ui;\n+      event_loop_debug_printf (\"invoking async signal handler `%s`\",\n+\t\t\t       async_handler_ptr->name);\n       (*async_handler_ptr->proc) (async_handler_ptr->client_data);\n     }\n \n@@ -274,6 +293,8 @@ create_async_event_handler (async_event_handler_func *proc,\n void\n mark_async_event_handler (async_event_handler *async_handler_ptr)\n {\n+  event_loop_debug_printf (\"marking async event handler `%s`\",\n+\t\t\t   async_handler_ptr->name);\n   async_handler_ptr->ready = 1;\n }\n \n@@ -282,6 +303,8 @@ mark_async_event_handler (async_event_handler *async_handler_ptr)\n void\n clear_async_event_handler (async_event_handler *async_handler_ptr)\n {\n+  event_loop_debug_printf (\"clearing async event handler `%s`\",\n+\t\t\t   async_handler_ptr->name);\n   async_handler_ptr->ready = 0;\n }\n \n@@ -300,6 +323,8 @@ check_async_event_handlers ()\n       if (async_handler_ptr->ready)\n \t{\n \t  async_handler_ptr->ready = 0;\n+\t  event_loop_debug_printf (\"invoking async event handler `%s`\",\n+\t\t\t\t   async_handler_ptr->name);\n \t  (*async_handler_ptr->proc) (async_handler_ptr->client_data);\n \t  return 1;\n \t}"
    },
    {
      "sha": "63d2295782aeff985dd8a54841a077dd8b6cccc9",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 51,
      "deletions": 1,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -525,7 +525,7 @@ void\n ui_register_input_event_handler (struct ui *ui)\n {\n   add_file_handler (ui->input_fd, stdin_event_handler, ui,\n-\t\t    string_printf (\"ui-%d\", ui->num));\n+\t\t    string_printf (\"ui-%d\", ui->num), true);\n }\n \n /* See top.h.  */\n@@ -1287,3 +1287,53 @@ gdb_disable_readline (void)\n     gdb_rl_callback_handler_remove ();\n   delete_file_handler (ui->input_fd);\n }\n+\n+static const char debug_event_loop_off[] = \"off\";\n+static const char debug_event_loop_all_except_ui[] = \"all-except-ui\";\n+static const char debug_event_loop_all[] = \"all\";\n+\n+static const char *debug_event_loop_enum[] = {\n+  debug_event_loop_off,\n+  debug_event_loop_all_except_ui,\n+  debug_event_loop_all,\n+  nullptr\n+};\n+\n+static const char *debug_event_loop_value = debug_event_loop_off;\n+\n+static void\n+set_debug_event_loop_command (const char *args, int from_tty,\n+\t\t\t      cmd_list_element *c)\n+{\n+  if (debug_event_loop_value == debug_event_loop_off)\n+    debug_event_loop = debug_event_loop_kind::OFF;\n+  else if (debug_event_loop_value == debug_event_loop_all_except_ui)\n+    debug_event_loop = debug_event_loop_kind::ALL_EXCEPT_UI;\n+  else if (debug_event_loop_value == debug_event_loop_all)\n+    debug_event_loop = debug_event_loop_kind::ALL;\n+  else\n+    gdb_assert_not_reached (\"Invalid debug event look kind value.\");\n+}\n+\n+static void\n+show_debug_event_loop_command (struct ui_file *file, int from_tty,\n+\t\t\t       struct cmd_list_element *cmd, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Event loop debugging is %s.\\n\"), value);\n+}\n+\n+void _initialize_event_top ();\n+void\n+_initialize_event_top ()\n+{\n+  add_setshow_enum_cmd (\"event-loop\", class_maintenance,\n+\t\t\tdebug_event_loop_enum,\n+\t\t\t&debug_event_loop_value,\n+\t\t\t_(\"Set event-loop debugging.\"),\n+\t\t\t_(\"Show event-loop debugging.\"),\n+\t\t\t_(\"\\\n+Control whether to show event loop-related debug messages.\"),\n+\t\t\tset_debug_event_loop_command,\n+\t\t\tshow_debug_event_loop_command,\n+\t\t\t&setdebuglist, &showdebuglist);\n+}"
    },
    {
      "sha": "1f3652b6d5d64dea366be98465525e74123c083a",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -1,3 +1,11 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* server.cc (handle_monitor_command): Handle \"set\n+\tdebug-event-loop\".\n+\t(captured_main): Handle \"--debug-event-loop\".\n+\t(monitor_show_help): Mention new setting.\n+\t(gdbserver_usage): Mention new flag.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* linux-low.cc (linux_process_target::async): Pass name to"
    },
    {
      "sha": "e6314e56506bf507f9adcdf4006d17fca902bd92",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -955,6 +955,8 @@ monitor_show_help (void)\n   monitor_output (\"    Enable h/w breakpoint/watchpoint debugging messages\\n\");\n   monitor_output (\"  set remote-debug <0|1>\\n\");\n   monitor_output (\"    Enable remote protocol debugging messages\\n\");\n+  monitor_output (\"  set event-loop-debug <0|1>\\n\");\n+  monitor_output (\"    Enable event loop debugging messages\\n\");\n   monitor_output (\"  set debug-format option1[,option2,...]\\n\");\n   monitor_output (\"    Add additional information to debugging messages\\n\");\n   monitor_output (\"    Options: all, none\");\n@@ -1389,6 +1391,16 @@ handle_monitor_command (char *mon, char *own_buf)\n       remote_debug = 0;\n       monitor_output (\"Protocol debug output disabled.\\n\");\n     }\n+  else if (strcmp (mon, \"set event-loop-debug 1\") == 0)\n+    {\n+      debug_event_loop = debug_event_loop_kind::ALL;\n+      monitor_output (\"Event loop debug output enabled.\\n\");\n+    }\n+  else if (strcmp (mon, \"set event-loop-debug 0\") == 0)\n+    {\n+      debug_event_loop = debug_event_loop_kind::OFF;\n+      monitor_output (\"Event loop debug output disabled.\\n\");\n+    }\n   else if (startswith (mon, \"set debug-format \"))\n     {\n       std::string error_msg\n@@ -3468,6 +3480,7 @@ gdbserver_usage (FILE *stream)\n \t   \"                            none\\n\"\n \t   \"                            timestamp\\n\"\n \t   \"  --remote-debug        Enable remote protocol debugging output.\\n\"\n+\t   \"  --event-loop-debug    Enable event loop debugging output.\\n\"\n \t   \"  --disable-packet=OPT1[,OPT2,...]\\n\"\n \t   \"                        Disable support for RSP packets or features.\\n\"\n \t   \"                          Options:\\n\"\n@@ -3683,6 +3696,8 @@ captured_main (int argc, char *argv[])\n \t}\n       else if (strcmp (*next_arg, \"--remote-debug\") == 0)\n \tremote_debug = 1;\n+      else if (strcmp (*next_arg, \"--event-loop-debug\") == 0)\n+\tdebug_event_loop = debug_event_loop_kind::ALL;\n       else if (startswith (*next_arg, \"--debug-file=\"))\n \tdebug_set_output ((*next_arg) + sizeof (\"--debug-file=\") -1);\n       else if (strcmp (*next_arg, \"--disable-packet\") == 0)"
    },
    {
      "sha": "05462e67d7ee45734d297733389c9115c734d5dc",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* event-loop.h (debug_event_loop): New variable declaration.\n+\t(event_loop_debug_printf_1): New function declaration.\n+\t(event_loop_debug_printf): New macro.\n+\t* event-loop.cc (debug_event_loop): New variable.\n+\t(handle_file_event): Add debug print.\n+\t(event_loop_debug_printf_1): New function.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* common-debug.cc (debug_prefixed_vprintf): Move here."
    },
    {
      "sha": "94941580d6ab4c743cf1eb68bc42b95fc38570b5",
      "filename": "gdbsupport/event-loop.cc",
      "status": "modified",
      "additions": 32,
      "deletions": 6,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/event-loop.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/event-loop.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.cc?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -34,6 +34,10 @@\n #include \"gdbsupport/gdb_sys_time.h\"\n #include \"gdbsupport/gdb_select.h\"\n \n+/* See event-loop.h.  */\n+\n+debug_event_loop_kind debug_event_loop;\n+\n /* Tell create_file_handler what events we are interested in.\n    This is used by the select version of the event loop.  */\n \n@@ -64,6 +68,9 @@ struct file_handler\n   /* User-friendly name of this handler.  Heap-allocated, owned by this.*/\n   std::string *name;\n \n+  /* If set, this file descriptor is used for a user interface.  */\n+  bool is_ui;\n+\n   /* Was an error detected on this fd?  */\n   int error;\n \n@@ -164,7 +171,7 @@ timer_list;\n \n static void create_file_handler (int fd, int mask, handler_func *proc,\n \t\t\t\t gdb_client_data client_data,\n-\t\t\t\t std::string &&name);\n+\t\t\t\t std::string &&name, bool is_ui);\n static int gdb_wait_for_event (int);\n static int update_wait_timeout (void);\n static int poll_timers (void);\n@@ -239,7 +246,7 @@ gdb_do_one_event (void)\n \n void\n add_file_handler (int fd, handler_func *proc, gdb_client_data client_data,\n-\t\t  std::string &&name)\n+\t\t  std::string &&name, bool is_ui)\n {\n #ifdef HAVE_POLL\n   struct pollfd fds;\n@@ -265,15 +272,16 @@ add_file_handler (int fd, handler_func *proc, gdb_client_data client_data,\n   if (use_poll)\n     {\n #ifdef HAVE_POLL\n-      create_file_handler (fd, POLLIN, proc, client_data, std::move (name));\n+      create_file_handler (fd, POLLIN, proc, client_data, std::move (name),\n+\t\t\t   is_ui);\n #else\n       internal_error (__FILE__, __LINE__,\n \t\t      _(\"use_poll without HAVE_POLL\"));\n #endif\n     }\n   else\n     create_file_handler (fd, GDB_READABLE | GDB_EXCEPTION,\n-\t\t\t proc, client_data, std::move (name));\n+\t\t\t proc, client_data, std::move (name), is_ui);\n }\n \n /* Helper for add_file_handler.\n@@ -289,7 +297,8 @@ add_file_handler (int fd, handler_func *proc, gdb_client_data client_data,\n \n static void\n create_file_handler (int fd, int mask, handler_func * proc,\n-\t\t     gdb_client_data client_data, std::string &&name)\n+\t\t     gdb_client_data client_data, std::string &&name,\n+\t\t     bool is_ui)\n {\n   file_handler *file_ptr;\n \n@@ -358,6 +367,7 @@ create_file_handler (int fd, int mask, handler_func * proc,\n   file_ptr->client_data = client_data;\n   file_ptr->mask = mask;\n   file_ptr->name = new std::string (std::move (name));\n+  file_ptr->is_ui = is_ui;\n }\n \n /* Return the next file handler to handle, and advance to the next\n@@ -558,7 +568,12 @@ handle_file_event (file_handler *file_ptr, int ready_mask)\n \n \t  /* If there was a match, then call the handler.  */\n \t  if (mask != 0)\n-\t    (*file_ptr->proc) (file_ptr->error, file_ptr->client_data);\n+\t    {\n+\t      event_loop_ui_debug_printf (file_ptr->is_ui,\n+\t\t\t\t\t  \"invoking fd file handler `%s`\",\n+\t\t\t\t\t  file_ptr->name->c_str ());\n+\t      file_ptr->proc (file_ptr->error, file_ptr->client_data);\n+\t    }\n \t}\n     }\n }\n@@ -897,3 +912,14 @@ poll_timers (void)\n \n   return 0;\n }\n+\n+/* See event-loop.h.  */\n+\n+void\n+event_loop_debug_printf_1 (const char *func_name, const char *fmt, ...)\n+{\n+  va_list args;\n+  va_start (args, fmt);\n+  debug_prefixed_vprintf (\"event-loop\", func_name, fmt, args);\n+  va_end (args);\n+}"
    },
    {
      "sha": "c29d6a8612366cf9098918706a1349ed602f710a",
      "filename": "gdbsupport/event-loop.h",
      "status": "modified",
      "additions": 42,
      "deletions": 2,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/event-loop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72/gdbsupport/event-loop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.h?ref=6b01403b25c0eb6ce9e7b2e3cc6f5da674089e72",
      "patch": "@@ -84,11 +84,13 @@ extern void delete_file_handler (int fd);\n \n    FD is the file descriptor for the file/stream to be listened to.\n \n-   NAME is a user-friendly name for the handler.  */\n+   NAME is a user-friendly name for the handler.\n+\n+   If IS_UI is set, this file descriptor is used for a user interface.  */\n \n extern void add_file_handler (int fd, handler_func *proc,\n \t\t\t      gdb_client_data client_data,\n-\t\t\t      std::string &&name);\n+\t\t\t      std::string &&name, bool is_ui = false);\n \n extern int create_timer (int milliseconds, \n \t\t\t timer_handler_func *proc, \n@@ -109,4 +111,42 @@ extern int invoke_async_signal_handlers ();\n \n extern int check_async_event_handlers ();\n \n+enum class debug_event_loop_kind\n+{\n+  OFF,\n+\n+  /* Print all event-loop related messages, except events from user-interface\n+     event sources.  */\n+  ALL_EXCEPT_UI,\n+\n+  /* Print all event-loop related messages.  */\n+  ALL,\n+};\n+\n+/* True if we are printing event loop debug statements.  */\n+extern debug_event_loop_kind debug_event_loop;\n+\n+/* Print an \"event loop\" debug statement.  Should be used through\n+   event_loop_debug_printf.  */\n+void ATTRIBUTE_PRINTF (2, 3) event_loop_debug_printf_1\n+  (const char *func_name, const char *fmt, ...);\n+\n+#define event_loop_debug_printf(fmt, ...) \\\n+  do \\\n+    { \\\n+      if (debug_event_loop != debug_event_loop_kind::OFF) \\\n+\tevent_loop_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n+#define event_loop_ui_debug_printf(is_ui, fmt, ...) \\\n+  do \\\n+    { \\\n+      if (debug_event_loop == debug_event_loop_kind::ALL \\\n+\t  || (debug_event_loop == debug_event_loop_kind::ALL_EXCEPT_UI \\\n+\t      && !is_ui)) \\\n+\tevent_loop_debug_printf_1 (__func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n #endif /* EVENT_LOOP_H */"
    }
  ]
}