{
  "sha": "479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
  "node_id": "C_kwDOANOeidoAKDQ3OTIwOWRkNGZmOTBjMGJjNjZkODBlYmRjYjFmMjFlYThmYmI2MmQ",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-22T09:47:50Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-22T09:47:50Z"
    },
    "message": "[gdb] Add maint selftest -verbose option\n\nThe print_one_insn selftest in gdb/disasm-selftests.c contains:\n...\n  /* If you want to see the disassembled instruction printed to gdb_stdout,\n     set verbose to true.  */\n  static const bool verbose = false;\n...\n\nMake this parameter available in the maint selftest command using a new option\n-verbose, such that we can do:\n...\n(gdb) maint selftest -verbose print_one_insn\n...\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "a691e68cad6f280d8898557a6b6cea72cda0c9af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a691e68cad6f280d8898557a6b6cea72cda0c9af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf11ebea1206a7c459a94fef8e0880087dd9f38f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf11ebea1206a7c459a94fef8e0880087dd9f38f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf11ebea1206a7c459a94fef8e0880087dd9f38f"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 29,
    "deletions": 10
  },
  "files": [
    {
      "sha": "0a383d6b79590522514700e32430e9e7392107a3",
      "filename": "gdb/disasm-selftests.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/disasm-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/disasm-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm-selftests.c?ref=479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
      "patch": "@@ -103,8 +103,7 @@ print_one_insn_test (struct gdbarch *gdbarch)\n \n   /* Test gdb_disassembler for a given gdbarch by reading data from a\n      pre-allocated buffer.  If you want to see the disassembled\n-     instruction printed to gdb_stdout, set verbose to true.  */\n-  static const bool verbose = false;\n+     instruction printed to gdb_stdout, use maint selftest -verbose.  */\n \n   class gdb_disassembler_test : public gdb_disassembler\n   {\n@@ -114,7 +113,7 @@ print_one_insn_test (struct gdbarch *gdbarch)\n \t\t\t\t    const gdb_byte *insn,\n \t\t\t\t    size_t len)\n       : gdb_disassembler (gdbarch,\n-\t\t\t  (verbose ? gdb_stdout : &null_stream),\n+\t\t\t  (run_verbose () ? gdb_stdout : &null_stream),\n \t\t\t  gdb_disassembler_test::read_memory),\n \tm_insn (insn), m_len (len)\n     {\n@@ -123,15 +122,15 @@ print_one_insn_test (struct gdbarch *gdbarch)\n     int\n     print_insn (CORE_ADDR memaddr)\n     {\n-      if (verbose)\n+      if (run_verbose ())\n \t{\n \t  fprintf_unfiltered (stream (), \"%s \",\n \t\t\t      gdbarch_bfd_arch_info (arch ())->arch_name);\n \t}\n \n       int len = gdb_disassembler::print_insn (memaddr);\n \n-      if (verbose)\n+      if (run_verbose ())\n \tfprintf_unfiltered (stream (), \"\\n\");\n \n       return len;"
    },
    {
      "sha": "bf731a1feb5f47ffef97789891e9bfcb67e93bb8",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
      "patch": "@@ -39433,11 +39433,12 @@ data structures, including its flags and contained types.\n \n @kindex maint selftest\n @cindex self tests\n-@item maint selftest @r{[}@var{filter}@r{]}\n+@item maint selftest @r{[}-verbose@r{]} @r{[}@var{filter}@r{]}\n Run any self tests that were compiled in to @value{GDBN}.  This will\n print a message showing how many tests were run, and how many failed.\n If a @var{filter} is passed, only the tests with @var{filter} in their\n-name will be ran.\n+name will be ran.  If @code{-verbose} is passed, the self tests can be\n+more verbose.\n \n @kindex maint info selftests\n @cindex self tests"
    },
    {
      "sha": "c6d13a3a732ccd0c2fadcf7502990e19d4459461",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
      "patch": "@@ -1127,8 +1127,9 @@ static void\n maintenance_selftest (const char *args, int from_tty)\n {\n #if GDB_SELF_TEST\n+  bool verbose = args != nullptr && check_for_argument (&args, \"-verbose\");\n   gdb_argv argv (args);\n-  selftests::run_tests (argv.as_array_view ());\n+  selftests::run_tests (argv.as_array_view (), verbose);\n #else\n   printf_filtered (_(\"\\\n Selftests have been disabled for this build.\\n\"));"
    },
    {
      "sha": "589ef1e6797659401836d044ce3186f1e9a758ad",
      "filename": "gdbsupport/selftest.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdbsupport/selftest.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdbsupport/selftest.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.cc?ref=479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
      "patch": "@@ -70,10 +70,23 @@ register_test (const std::string &name,\n \n /* See selftest.h.  */\n \n+static bool run_verbose_ = false;\n+\n+/* See selftest.h.  */\n+\n+bool\n+run_verbose ()\n+{\n+  return run_verbose_;\n+}\n+\n+/* See selftest.h.  */\n+\n void\n-run_tests (gdb::array_view<const char *const> filters)\n+run_tests (gdb::array_view<const char *const> filters, bool verbose)\n {\n   int ran = 0, failed = 0;\n+  run_verbose_ = verbose;\n \n   for (const auto &pair : tests)\n     {"
    },
    {
      "sha": "d76fc4b37d368c7516ae1417df551c8102c55a31",
      "filename": "gdbsupport/selftest.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdbsupport/selftest.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d/gdbsupport/selftest.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.h?ref=479209dd4ff90c0bc66d80ebdcb1f21ea8fbb62d",
      "patch": "@@ -37,6 +37,10 @@ struct selftest\n   virtual void operator() () const = 0;\n };\n \n+/* True if selftest should run verbosely.  */\n+\n+extern bool run_verbose ();\n+\n /* Register a new self-test.  */\n \n extern void register_test (const std::string &name, selftest *test);\n@@ -52,7 +56,8 @@ extern void register_test (const std::string &name,\n    If FILTERS is not empty, only run tests with names containing one of the\n    element of FILTERS.  */\n \n-extern void run_tests (gdb::array_view<const char *const> filters);\n+extern void run_tests (gdb::array_view<const char *const> filters,\n+\t\t       bool verbose = false);\n \n /* Reset GDB or GDBserver's internal state.  */\n extern void reset ();"
    }
  ]
}