{
  "sha": "dccc31dee37b559219708c8d0accc7d512d51c1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGNjYzMxZGVlMzdiNTU5MjE5NzA4YzhkMGFjY2M3ZDUxMmQ1MWMxZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-24T05:41:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-24T12:28:14Z"
    },
    "message": "asan: print_vms_time signed integer overflow\n\nI really don't think anyone cares about underflow of vms time values,\nbut the potential segfault on a gmtime failure is worth fixing.\n\n\t* readelf.c (INT64_MIN): Define if not already defined.\n\t(print_vms_time): Catch 64-bit overflow when converting from\n\tvms time to posix time.  Don't segfault if gmtime returns NULL.",
    "tree": {
      "sha": "d8a715ea7756951b41d671733c521e668622e51f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8a715ea7756951b41d671733c521e668622e51f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dccc31dee37b559219708c8d0accc7d512d51c1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dccc31dee37b559219708c8d0accc7d512d51c1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dccc31dee37b559219708c8d0accc7d512d51c1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dccc31dee37b559219708c8d0accc7d512d51c1f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de34d42812a0b978b278cd344abeaee7c71fa55c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de34d42812a0b978b278cd344abeaee7c71fa55c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de34d42812a0b978b278cd344abeaee7c71fa55c"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 21,
    "deletions": 6
  },
  "files": [
    {
      "sha": "3626fd83972ba134a0a0731aedb024c3ac87bae3",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dccc31dee37b559219708c8d0accc7d512d51c1f/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dccc31dee37b559219708c8d0accc7d512d51c1f/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=dccc31dee37b559219708c8d0accc7d512d51c1f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (INT64_MIN): Define if not already defined.\n+\t(print_vms_time): Catch 64-bit overflow when converting from\n+\tvms time to posix time.  Don't segfault if gmtime returns NULL.\n+\n 2020-12-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* NEWS: Mention LAM_U48 and LAM_U57 support."
    },
    {
      "sha": "3e3ac2f71d4f52e737949c620d9e38386bc83627",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dccc31dee37b559219708c8d0accc7d512d51c1f/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dccc31dee37b559219708c8d0accc7d512d51c1f/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=dccc31dee37b559219708c8d0accc7d512d51c1f",
      "patch": "@@ -9886,20 +9886,29 @@ dynamic_section_parisc_val (Elf_Internal_Dyn * entry)\n \n #define VMS_EPOCH_OFFSET 35067168000000000LL\n #define VMS_GRANULARITY_FACTOR 10000000\n+#ifndef INT64_MIN\n+#define INT64_MIN (-9223372036854775807LL - 1)\n+#endif\n \n /* Display a VMS time in a human readable format.  */\n \n static void\n print_vms_time (bfd_int64_t vmstime)\n {\n-  struct tm *tm;\n+  struct tm *tm = NULL;\n   time_t unxtime;\n \n-  unxtime = (vmstime - VMS_EPOCH_OFFSET) / VMS_GRANULARITY_FACTOR;\n-  tm = gmtime (&unxtime);\n-  printf (\"%04u-%02u-%02uT%02u:%02u:%02u\",\n-          tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n-          tm->tm_hour, tm->tm_min, tm->tm_sec);\n+  if (vmstime >= INT64_MIN + VMS_EPOCH_OFFSET)\n+    {\n+      vmstime = (vmstime - VMS_EPOCH_OFFSET) / VMS_GRANULARITY_FACTOR;\n+      unxtime = vmstime;\n+      if (unxtime == vmstime)\n+\ttm = gmtime (&unxtime);\n+    }\n+  if (tm != NULL)\n+    printf (\"%04u-%02u-%02uT%02u:%02u:%02u\",\n+\t    tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n+\t    tm->tm_hour, tm->tm_min, tm->tm_sec);\n }\n #endif /* BFD64 */\n "
    }
  ]
}