{
  "sha": "22216541c1796e9e1331d6f4e16b03a6f02e7381",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjIyMTY1NDFjMTc5NmU5ZTEzMzFkNmY0ZTE2YjAzYTZmMDJlNzM4MQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-16T10:53:29Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-16T12:37:27Z"
    },
    "message": "PR13616, linker should pad executable sections with nops, not zeros\n\nThis implements padding of orphan executable sections for PowerPC.\nOf course, the simple implementation of bfd_arch_ppc_nop_fill and\nremoving the NOP definition didn't work, with powerpc64 hitting a\ntestsuite failure linking to S-records.  That's because the srec\ntarget is BFD_ENDIAN_UNKNOWN so the test of bfd_big_endian (abfd) in\ndefault_data_link_order therefore returned false, resulting in a\nlittle-endian nop pattern.  The rest of the patch fixes that problem\nby adding a new field to bfd_link_info that can be used to determine\nactual endianness on targets like srec.\n\n\tPR 13616\ninclude/\n\t* bfdlink.h (struct bfd_link_info <big_endian>): New field.\nbfd/\n\t* cpu-powerpc.c (bfd_arch_ppc_nop_fill): New function, use it\n\tfor all ppc arch info.\n\t* linker.c (default_data_link_order): Pass info->big_endian to\n\tarch_info->fill function.\nld/\n\t* emulparams/elf64lppc.sh (NOP): Don't define.\n\t* emulparams/elf64ppc.sh (NOP): Don't define.\n\t* ldwrite.c (build_link_order): Use link_info.big_endian.  Move\n\tcode determining endian to use for data_statement to..\n\t* ldemul.c (after_open_default): ..here.  Set link_info.big_endian.",
    "tree": {
      "sha": "4591c034f7c483dc18ff09eb257d19d99e916f30",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4591c034f7c483dc18ff09eb257d19d99e916f30"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22216541c1796e9e1331d6f4e16b03a6f02e7381",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22216541c1796e9e1331d6f4e16b03a6f02e7381",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22216541c1796e9e1331d6f4e16b03a6f02e7381",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22216541c1796e9e1331d6f4e16b03a6f02e7381/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/12234dfd5f70086fde87e1f6d56cf2aa2ce5ec4c"
    }
  ],
  "stats": {
    "total": 185,
    "additions": 116,
    "deletions": 69
  },
  "files": [
    {
      "sha": "74cdda4ffaaba8cf8ff172ac9b2e7860bb1d0fd7",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -1,3 +1,11 @@\n+2019-10-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 13616\n+\t* cpu-powerpc.c (bfd_arch_ppc_nop_fill): New function, use it\n+\tfor all ppc arch info.\n+\t* linker.c (default_data_link_order): Pass info->big_endian to\n+\tarch_info->fill function.\n+\n 2019-10-15  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-m68hc1x.c (reloc_warning): Add printf attribute."
    },
    {
      "sha": "6c54388a82be20837a0fb98ca125613212192263",
      "filename": "bfd/cpu-powerpc.c",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/cpu-powerpc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/cpu-powerpc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-powerpc.c?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -48,6 +48,43 @@ powerpc_compatible (const bfd_arch_info_type *a,\n   /*NOTREACHED*/\n }\n \n+/* Return a COUNT sized buffer filled with nops (if CODE is TRUE) or\n+   zeros (if CODE is FALSE).  This is the fill used between input\n+   sections for alignment.  It won't normally be executed.   */\n+\n+static void *\n+bfd_arch_ppc_nop_fill (bfd_size_type count,\n+\t\t       bfd_boolean is_bigendian,\n+\t\t       bfd_boolean code)\n+{\n+  bfd_byte *fill;\n+\n+  if (count == 0)\n+    return NULL;\n+  fill = bfd_malloc (count);\n+  if (fill == NULL)\n+    return fill;\n+\n+  if (code && (count & 3) == 0)\n+    {\n+      static const char nop_be[4] = {0x60, 0, 0, 0};\n+      static const char nop_le[4] = {0, 0, 0, 0x60};\n+      const char *nop = is_bigendian ? nop_be : nop_le;\n+      bfd_byte *p = fill;\n+\n+      while (count != 0)\n+\t{\n+\t  memcpy (p, nop, 4);\n+\t  p += 4;\n+\t  count -= 4;\n+\t}\n+    }\n+  else\n+    memset (fill, 0, count);\n+\n+  return fill;\n+}\n+\n #define N(BITS, NUMBER, PRINT, DEFAULT, NEXT)\t\t\\\n   {\t\t\t\t\t\t\t\\\n     BITS,      /* Bits in a word.  */\t\t\t\\\n@@ -61,7 +98,7 @@ powerpc_compatible (const bfd_arch_info_type *a,\n     DEFAULT,\t\t\t\t\t\t\\\n     powerpc_compatible,\t\t\t\t\t\\\n     bfd_default_scan,\t\t\t\t\t\\\n-    bfd_arch_default_fill,\t\t\t\t\\\n+    bfd_arch_ppc_nop_fill,\t\t\t\t\\\n     NEXT,\t\t\t\t\t\t\\\n     0 /* Maximum offset of a reloc from the start of an insn.  */ \\\n   }"
    },
    {
      "sha": "382b69d8c3d62079fbd6ffd8392acf2fbb6064ae",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -2469,7 +2469,7 @@ _bfd_default_link_order (bfd *abfd,\n \n static bfd_boolean\n default_data_link_order (bfd *abfd,\n-\t\t\t struct bfd_link_info *info ATTRIBUTE_UNUSED,\n+\t\t\t struct bfd_link_info *info,\n \t\t\t asection *sec,\n \t\t\t struct bfd_link_order *link_order)\n {\n@@ -2489,7 +2489,7 @@ default_data_link_order (bfd *abfd,\n   fill_size = link_order->u.data.size;\n   if (fill_size == 0)\n     {\n-      fill = abfd->arch_info->fill (size, bfd_big_endian (abfd),\n+      fill = abfd->arch_info->fill (size, info->big_endian,\n \t\t\t\t    (sec->flags & SEC_CODE) != 0);\n       if (fill == NULL)\n \treturn FALSE;"
    },
    {
      "sha": "412d71459e077001a2d21320e7905160c5fa4b7c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 13616\n+\t* bfdlink.h (struct bfd_link_info <big_endian>): New field.\n+\n 2019-10-07  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* elf/msp430.h: Add enums for MSPABI and GNU object attribute tag"
    },
    {
      "sha": "32d15129ab5ceeae17bfd1929a39106301bf9739",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -359,6 +359,10 @@ struct bfd_link_info\n   /* TRUE if section groups should be resolved.  */\n   unsigned int resolve_section_groups: 1;\n \n+  /* Set if output file is big-endian, or if that is unknown, from\n+     the command line or first input file endianness.  */\n+  unsigned int big_endian : 1;\n+\n   /* Which symbols to strip.  */\n   ENUM_BITFIELD (bfd_link_strip) strip : 2;\n "
    },
    {
      "sha": "f51e6466e68e4604a14a5898da1ed4534d8f9cda",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 13616\n+\t* emulparams/elf64lppc.sh (NOP): Don't define.\n+\t* emulparams/elf64ppc.sh (NOP): Don't define.\n+\t* ldwrite.c (build_link_order): Use link_info.big_endian.  Move\n+\tcode determining endian to use for data_statement to..\n+\t* ldemul.c (after_open_default): ..here.  Set link_info.big_endian.\n+\n 2019-10-16  Alan Modra  <amodra@gmail.com>\n \n \t* genscripts.sh: Correct comments.  Remove outdated comment block"
    },
    {
      "sha": "341629184bcbabf1446280a8c0a40fffcaac3ad5",
      "filename": "ld/emulparams/elf64lppc.sh",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/emulparams/elf64lppc.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/emulparams/elf64lppc.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64lppc.sh?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -1,3 +1,2 @@\n source_sh ${srcdir}/emulparams/elf64ppc.sh\n OUTPUT_FORMAT=\"elf64-powerpcle\"\n-NOP=0x00000060"
    },
    {
      "sha": "15221b82220ead59b35fe2d1733971a954744608",
      "filename": "ld/emulparams/elf64ppc.sh",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/emulparams/elf64ppc.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/emulparams/elf64ppc.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64ppc.sh?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -6,7 +6,6 @@ OUTPUT_FORMAT=\"elf64-powerpc\"\n TEXT_START_ADDR=0x10000000\n #SEGMENT_SIZE=0x10000000\n ARCH=powerpc:common64\n-NOP=0x60000000\n unset EXECUTABLE_SYMBOLS\n unset SDATA_START_SYMBOLS\n unset SDATA2_START_SYMBOLS"
    },
    {
      "sha": "090f1ebfa759fc3fd03842206d6aabcfba0a9e39",
      "filename": "ld/ldemul.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ldemul.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ldemul.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.c?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -236,6 +236,29 @@ after_parse_default (void)\n void\n after_open_default (void)\n {\n+  link_info.big_endian = TRUE;\n+\n+  if (bfd_big_endian (link_info.output_bfd))\n+    ;\n+  else if (bfd_little_endian (link_info.output_bfd))\n+    link_info.big_endian = FALSE;\n+  else\n+    {\n+      if (command_line.endian == ENDIAN_BIG)\n+\t;\n+      else if (command_line.endian == ENDIAN_LITTLE)\n+\tlink_info.big_endian = FALSE;\n+      else if (command_line.endian == ENDIAN_UNSET)\n+\t{\n+\t  LANG_FOR_EACH_INPUT_STATEMENT (s)\n+\t    if (s->the_bfd != NULL)\n+\t      {\n+\t\tif (bfd_little_endian (s->the_bfd))\n+\t\t  link_info.big_endian = FALSE;\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n }\n \n void"
    },
    {
      "sha": "491a4e9d7f692401923791683d8af616293083b5",
      "filename": "ld/ldwrite.c",
      "status": "modified",
      "additions": 27,
      "deletions": 64,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ldwrite.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22216541c1796e9e1331d6f4e16b03a6f02e7381/ld/ldwrite.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldwrite.c?ref=22216541c1796e9e1331d6f4e16b03a6f02e7381",
      "patch": "@@ -46,7 +46,6 @@ build_link_order (lang_statement_union_type *statement)\n \tasection *output_section;\n \tstruct bfd_link_order *link_order;\n \tbfd_vma value;\n-\tbfd_boolean big_endian = FALSE;\n \n \toutput_section = statement->data_statement.output_section;\n \tASSERT (output_section->owner == link_info.output_bfd);\n@@ -66,74 +65,38 @@ build_link_order (lang_statement_union_type *statement)\n \n \tvalue = statement->data_statement.value;\n \n-\t/* If the endianness of the output BFD is not known, then we\n-\t   base the endianness of the data on the first input file.\n-\t   By convention, the bfd_put routines for an unknown\n+\t/* By convention, the bfd_put routines for an unknown\n \t   endianness are big endian, so we must swap here if the\n-\t   input file is little endian.  */\n-\tif (bfd_big_endian (link_info.output_bfd))\n-\t  big_endian = TRUE;\n-\telse if (bfd_little_endian (link_info.output_bfd))\n-\t  big_endian = FALSE;\n-\telse\n+\t   input is little endian.  */\n+\tif (!bfd_big_endian (link_info.output_bfd)\n+\t    && !bfd_little_endian (link_info.output_bfd)\n+\t    && !link_info.big_endian)\n \t  {\n-\t    bfd_boolean swap;\n+\t    bfd_byte buffer[8];\n \n-\t    swap = FALSE;\n-\t    if (command_line.endian == ENDIAN_BIG)\n-\t      big_endian = TRUE;\n-\t    else if (command_line.endian == ENDIAN_LITTLE)\n-\t      {\n-\t\tbig_endian = FALSE;\n-\t\tswap = TRUE;\n-\t      }\n-\t    else if (command_line.endian == ENDIAN_UNSET)\n+\t    switch (statement->data_statement.type)\n \t      {\n-\t\tbig_endian = TRUE;\n-\t\t{\n-\t\t  LANG_FOR_EACH_INPUT_STATEMENT (s)\n+\t      case QUAD:\n+\t      case SQUAD:\n+\t\tif (sizeof (bfd_vma) >= QUAD_SIZE)\n \t\t  {\n-\t\t    if (s->the_bfd != NULL)\n-\t\t      {\n-\t\t\tif (bfd_little_endian (s->the_bfd))\n-\t\t\t  {\n-\t\t\t    big_endian = FALSE;\n-\t\t\t    swap = TRUE;\n-\t\t\t  }\n-\t\t\tbreak;\n-\t\t      }\n-\t\t  }\n-\t\t}\n-\t      }\n-\n-\t    if (swap)\n-\t      {\n-\t\tbfd_byte buffer[8];\n-\n-\t\tswitch (statement->data_statement.type)\n-\t\t  {\n-\t\t  case QUAD:\n-\t\t  case SQUAD:\n-\t\t    if (sizeof (bfd_vma) >= QUAD_SIZE)\n-\t\t      {\n-\t\t\tbfd_putl64 (value, buffer);\n-\t\t\tvalue = bfd_getb64 (buffer);\n-\t\t\tbreak;\n-\t\t      }\n-\t\t    /* Fall through.  */\n-\t\t  case LONG:\n-\t\t    bfd_putl32 (value, buffer);\n-\t\t    value = bfd_getb32 (buffer);\n-\t\t    break;\n-\t\t  case SHORT:\n-\t\t    bfd_putl16 (value, buffer);\n-\t\t    value = bfd_getb16 (buffer);\n-\t\t    break;\n-\t\t  case BYTE:\n+\t\t    bfd_putl64 (value, buffer);\n+\t\t    value = bfd_getb64 (buffer);\n \t\t    break;\n-\t\t  default:\n-\t\t    abort ();\n \t\t  }\n+\t\t/* Fall through.  */\n+\t      case LONG:\n+\t\tbfd_putl32 (value, buffer);\n+\t\tvalue = bfd_getb32 (buffer);\n+\t\tbreak;\n+\t      case SHORT:\n+\t\tbfd_putl16 (value, buffer);\n+\t\tvalue = bfd_getb16 (buffer);\n+\t\tbreak;\n+\t      case BYTE:\n+\t\tbreak;\n+\t      default:\n+\t\tabort ();\n \t      }\n \t  }\n \n@@ -157,10 +120,10 @@ build_link_order (lang_statement_union_type *statement)\n \t\t  high = (bfd_vma) -1;\n \t\tbfd_put_32 (link_info.output_bfd, high,\n \t\t\t    (link_order->u.data.contents\n-\t\t\t     + (big_endian ? 0 : 4)));\n+\t\t\t     + (link_info.big_endian ? 0 : 4)));\n \t\tbfd_put_32 (link_info.output_bfd, value,\n \t\t\t    (link_order->u.data.contents\n-\t\t\t     + (big_endian ? 4 : 0)));\n+\t\t\t     + (link_info.big_endian ? 4 : 0)));\n \t      }\n \t    link_order->size = QUAD_SIZE;\n \t    break;"
    }
  ]
}