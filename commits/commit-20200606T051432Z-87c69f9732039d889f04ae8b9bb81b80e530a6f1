{
  "sha": "87c69f9732039d889f04ae8b9bb81b80e530a6f1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODdjNjlmOTczMjAzOWQ4ODlmMDRhZThiOWJiODFiODBlNTMwYTZmMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-06T02:26:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-06T05:14:32Z"
    },
    "message": "Rename PowerPC64 pcrel GOT TLS relocations\n\nThese relocations should have had REL in their names, to reflect the\nfact that they are pc-relative.  Fix that now by adding _PCREL.\nI've added some back-compatibility code to support anyone using\n.reloc with the old relocations.\n\ninclude/\n\t* elf/ppc64.h (elf_ppc64_reloc_type): Rename\n\tR_PPC64_GOT_TLSGD34 to R_PPC64_GOT_TLSGD_PCREL34,\n\tR_PPC64_GOT_TLSLD34 to R_PPC64_GOT_TLSLD_PCREL34,\n\tR_PPC64_GOT_TPREL34 to R_PPC64_GOT_TPREL_PCREL34, and\n\tR_PPC64_GOT_DTPREL34 to R_PPC64_GOT_DTPREL_PCREL34.\nbfd/\n\t* reloc.c: Rename\n\tBFD_RELOC_PPC64_GOT_TLSGD34 to BFD_RELOC_PPC64_GOT_TLSGD_PCREL34,\n\tBFD_RELOC_PPC64_GOT_TLSLD34 to BFD_RELOC_PPC64_GOT_TLSLD_PCREL34,\n\tBFD_RELOC_PPC64_GOT_TPREL34 to BFD_RELOC_PPC64_GOT_TPREL_PCREL34,\n\tBFD_RELOC_PPC64_GOT_DTPREL34 to BFD_RELOC_PPC64_GOT_DTPREL_PCREL34.\n\t* elf64-ppc.c: Update throughout for reloc renaming.\n\t(ppc64_elf_reloc_name_lookup): Handle old reloc names.\n\t* libbfd.h: Regenerate.\n\t* bfd-in2.h: Regenerate.\ngas/\n\t* config/tc-ppc.c: Update throughout for reloc renaming.\nelfcpp/\n\t* powerpc.h: Rename\n\tR_PPC64_GOT_TLSGD34 to R_PPC64_GOT_TLSGD_PCREL34,\n\tR_PPC64_GOT_TLSLD34 to R_PPC64_GOT_TLSLD_PCREL34,\n\tR_PPC64_GOT_TPREL34 to R_PPC64_GOT_TPREL_PCREL34, and\n\tR_PPC64_GOT_DTPREL34 to R_PPC64_GOT_DTPREL_PCREL34.\ngold/\n\t* powerpc.cc: Update throughout for reloc renaming.",
    "tree": {
      "sha": "f6cb53fcadadba05fd6654aaa41e9417cd3db8ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f6cb53fcadadba05fd6654aaa41e9417cd3db8ea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/87c69f9732039d889f04ae8b9bb81b80e530a6f1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87c69f9732039d889f04ae8b9bb81b80e530a6f1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/87c69f9732039d889f04ae8b9bb81b80e530a6f1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87c69f9732039d889f04ae8b9bb81b80e530a6f1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1fc47f80893f810915a167ed554497f820cb2220",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fc47f80893f810915a167ed554497f820cb2220",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1fc47f80893f810915a167ed554497f820cb2220"
    }
  ],
  "stats": {
    "total": 294,
    "additions": 173,
    "deletions": 121
  },
  "files": [
    {
      "sha": "949bcec74c435ee79ef71d30b5c4f7f6aa07568f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1,3 +1,15 @@\n+2020-06-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* reloc.c: Rename\n+\tBFD_RELOC_PPC64_GOT_TLSGD34 to BFD_RELOC_PPC64_GOT_TLSGD_PCREL34,\n+\tBFD_RELOC_PPC64_GOT_TLSLD34 to BFD_RELOC_PPC64_GOT_TLSLD_PCREL34,\n+\tBFD_RELOC_PPC64_GOT_TPREL34 to BFD_RELOC_PPC64_GOT_TPREL_PCREL34,\n+\tBFD_RELOC_PPC64_GOT_DTPREL34 to BFD_RELOC_PPC64_GOT_DTPREL_PCREL34.\n+\t* elf64-ppc.c: Update throughout for reloc renaming.\n+\t(ppc64_elf_reloc_name_lookup): Handle old reloc names.\n+\t* libbfd.h: Regenerate.\n+\t* bfd-in2.h: Regenerate.\n+\n 2020-06-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/26080"
    },
    {
      "sha": "fc3ed0c748db860ca927467a69a47bc68aa15850",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -3045,10 +3045,10 @@ instruction.  */\n   BFD_RELOC_PPC64_DTPREL16_HIGHESTA,\n   BFD_RELOC_PPC64_TPREL34,\n   BFD_RELOC_PPC64_DTPREL34,\n-  BFD_RELOC_PPC64_GOT_TLSGD34,\n-  BFD_RELOC_PPC64_GOT_TLSLD34,\n-  BFD_RELOC_PPC64_GOT_TPREL34,\n-  BFD_RELOC_PPC64_GOT_DTPREL34,\n+  BFD_RELOC_PPC64_GOT_TLSGD_PCREL34,\n+  BFD_RELOC_PPC64_GOT_TLSLD_PCREL34,\n+  BFD_RELOC_PPC64_GOT_TPREL_PCREL34,\n+  BFD_RELOC_PPC64_GOT_DTPREL_PCREL34,\n   BFD_RELOC_PPC64_TLS_PCREL,\n \n /* IBM 370/390 relocations  */"
    },
    {
      "sha": "e28546deb5421ed5ba6a44d2b980576f3e1b983b",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 55,
      "deletions": 39,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -930,16 +930,16 @@ static reloc_howto_type ppc64_elf_howto_raw[] =\n   HOW (R_PPC64_DTPREL34, 4, 34, 0x3ffff0000ffffULL, 0, FALSE, signed,\n        ppc64_elf_unhandled_reloc),\n \n-  HOW (R_PPC64_GOT_TLSGD34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+  HOW (R_PPC64_GOT_TLSGD_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n        ppc64_elf_unhandled_reloc),\n \n-  HOW (R_PPC64_GOT_TLSLD34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+  HOW (R_PPC64_GOT_TLSLD_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n        ppc64_elf_unhandled_reloc),\n \n-  HOW (R_PPC64_GOT_TPREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+  HOW (R_PPC64_GOT_TPREL_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n        ppc64_elf_unhandled_reloc),\n \n-  HOW (R_PPC64_GOT_DTPREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+  HOW (R_PPC64_GOT_DTPREL_PCREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n        ppc64_elf_unhandled_reloc),\n \n   HOW (R_PPC64_ADDR16_HIGHER34, 1, 16, 0xffff, 34, FALSE, dont,\n@@ -999,8 +999,7 @@ ppc_howto_init (void)\n }\n \n static reloc_howto_type *\n-ppc64_elf_reloc_type_lookup (bfd *abfd,\n-\t\t\t     bfd_reloc_code_real_type code)\n+ppc64_elf_reloc_type_lookup (bfd *abfd, bfd_reloc_code_real_type code)\n {\n   enum elf_ppc64_reloc_type r = R_PPC64_NONE;\n \n@@ -1280,13 +1279,13 @@ ppc64_elf_reloc_type_lookup (bfd *abfd,\n       break;\n     case BFD_RELOC_PPC64_DTPREL34:\t\tr = R_PPC64_DTPREL34;\n       break;\n-    case BFD_RELOC_PPC64_GOT_TLSGD34:\t\tr = R_PPC64_GOT_TLSGD34;\n+    case BFD_RELOC_PPC64_GOT_TLSGD_PCREL34:\tr = R_PPC64_GOT_TLSGD_PCREL34;\n       break;\n-    case BFD_RELOC_PPC64_GOT_TLSLD34:\t\tr = R_PPC64_GOT_TLSLD34;\n+    case BFD_RELOC_PPC64_GOT_TLSLD_PCREL34:\tr = R_PPC64_GOT_TLSLD_PCREL34;\n       break;\n-    case BFD_RELOC_PPC64_GOT_TPREL34:\t\tr = R_PPC64_GOT_TPREL34;\n+    case BFD_RELOC_PPC64_GOT_TPREL_PCREL34:\tr = R_PPC64_GOT_TPREL_PCREL34;\n       break;\n-    case BFD_RELOC_PPC64_GOT_DTPREL34:\t\tr = R_PPC64_GOT_DTPREL34;\n+    case BFD_RELOC_PPC64_GOT_DTPREL_PCREL34:\tr = R_PPC64_GOT_DTPREL_PCREL34;\n       break;\n     case BFD_RELOC_PPC64_ADDR16_HIGHER34:\tr = R_PPC64_ADDR16_HIGHER34;\n       break;\n@@ -1318,16 +1317,33 @@ ppc64_elf_reloc_type_lookup (bfd *abfd,\n };\n \n static reloc_howto_type *\n-ppc64_elf_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n-\t\t\t     const char *r_name)\n+ppc64_elf_reloc_name_lookup (bfd *abfd, const char *r_name)\n {\n   unsigned int i;\n+  static char *compat_map[][2] = {\n+    { \"R_PPC64_GOT_TLSGD34\", \"R_PPC64_GOT_TLSGD_PCREL34\" },\n+    { \"R_PPC64_GOT_TLSLD34\", \"R_PPC64_GOT_TLSLD_PCREL34\" },\n+    { \"R_PPC64_GOT_TPREL34\", \"R_PPC64_GOT_TPREL_PCREL34\" },\n+    { \"R_PPC64_GOT_DTPREL34\", \"R_PPC64_GOT_DTPREL_PCREL34\" }\n+  };\n \n   for (i = 0; i < ARRAY_SIZE (ppc64_elf_howto_raw); i++)\n     if (ppc64_elf_howto_raw[i].name != NULL\n \t&& strcasecmp (ppc64_elf_howto_raw[i].name, r_name) == 0)\n       return &ppc64_elf_howto_raw[i];\n \n+  /* Handle old names of relocations in case they were used by\n+     .reloc directives.\n+     FIXME: Remove this soon.  Mapping the reloc names is very likely\n+     completely unnecessary.  */\n+  for (i = 0; i < ARRAY_SIZE (compat_map); i++)\n+    if (strcasecmp (compat_map[i][0], r_name) == 0)\n+      {\n+\t_bfd_error_handler (_(\"warning: %s should be used rather than %s\"),\n+\t\t\t    compat_map[i][1], compat_map[i][0]);\n+\treturn ppc64_elf_reloc_name_lookup (abfd, compat_map[i][1]);\n+      }\n+\n   return NULL;\n }\n \n@@ -4584,10 +4600,10 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_DTPREL34:\n \tcase R_PPC64_PCREL34:\n \tcase R_PPC64_GOT_PCREL34:\n-\tcase R_PPC64_GOT_TLSGD34:\n-\tcase R_PPC64_GOT_TLSLD34:\n-\tcase R_PPC64_GOT_TPREL34:\n-\tcase R_PPC64_GOT_DTPREL34:\n+\tcase R_PPC64_GOT_TLSGD_PCREL34:\n+\tcase R_PPC64_GOT_TLSLD_PCREL34:\n+\tcase R_PPC64_GOT_TPREL_PCREL34:\n+\tcase R_PPC64_GOT_DTPREL_PCREL34:\n \tcase R_PPC64_PLT_PCREL34:\n \tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_PCREL28:\n@@ -4671,23 +4687,23 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT_TLSLD16_LO:\n \tcase R_PPC64_GOT_TLSLD16_HI:\n \tcase R_PPC64_GOT_TLSLD16_HA:\n-\tcase R_PPC64_GOT_TLSLD34:\n+\tcase R_PPC64_GOT_TLSLD_PCREL34:\n \t  tls_type = TLS_TLS | TLS_LD;\n \t  goto dogottls;\n \n \tcase R_PPC64_GOT_TLSGD16:\n \tcase R_PPC64_GOT_TLSGD16_LO:\n \tcase R_PPC64_GOT_TLSGD16_HI:\n \tcase R_PPC64_GOT_TLSGD16_HA:\n-\tcase R_PPC64_GOT_TLSGD34:\n+\tcase R_PPC64_GOT_TLSGD_PCREL34:\n \t  tls_type = TLS_TLS | TLS_GD;\n \t  goto dogottls;\n \n \tcase R_PPC64_GOT_TPREL16_DS:\n \tcase R_PPC64_GOT_TPREL16_LO_DS:\n \tcase R_PPC64_GOT_TPREL16_HI:\n \tcase R_PPC64_GOT_TPREL16_HA:\n-\tcase R_PPC64_GOT_TPREL34:\n+\tcase R_PPC64_GOT_TPREL_PCREL34:\n \t  if (bfd_link_dll (info))\n \t    info->flags |= DF_STATIC_TLS;\n \t  tls_type = TLS_TLS | TLS_TPREL;\n@@ -4697,7 +4713,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT_DTPREL16_LO_DS:\n \tcase R_PPC64_GOT_DTPREL16_HI:\n \tcase R_PPC64_GOT_DTPREL16_HA:\n-\tcase R_PPC64_GOT_DTPREL34:\n+\tcase R_PPC64_GOT_DTPREL_PCREL34:\n \t  tls_type = TLS_TLS | TLS_DTPREL;\n \tdogottls:\n \t  sec->has_tls_reloc = 1;\n@@ -8015,7 +8031,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t    {\n \t\t    case R_PPC64_GOT_TLSLD16:\n \t\t    case R_PPC64_GOT_TLSLD16_LO:\n-\t\t    case R_PPC64_GOT_TLSLD34:\n+\t\t    case R_PPC64_GOT_TLSLD_PCREL34:\n \t\t      expecting_tls_get_addr = 1;\n \t\t      found_tls_get_addr_arg = 1;\n \t\t      /* Fall through.  */\n@@ -8036,7 +8052,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \n \t\t    case R_PPC64_GOT_TLSGD16:\n \t\t    case R_PPC64_GOT_TLSGD16_LO:\n-\t\t    case R_PPC64_GOT_TLSGD34:\n+\t\t    case R_PPC64_GOT_TLSGD_PCREL34:\n \t\t      expecting_tls_get_addr = 1;\n \t\t      found_tls_get_addr_arg = 1;\n \t\t      /* Fall through. */\n@@ -8053,7 +8069,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t      tls_type = TLS_TLS | TLS_GD;\n \t\t      break;\n \n-\t\t    case R_PPC64_GOT_TPREL34:\n+\t\t    case R_PPC64_GOT_TPREL_PCREL34:\n \t\t    case R_PPC64_GOT_TPREL16_DS:\n \t\t    case R_PPC64_GOT_TPREL16_LO_DS:\n \t\t    case R_PPC64_GOT_TPREL16_HI:\n@@ -15019,7 +15035,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n-\tcase R_PPC64_GOT_TPREL34:\n+\tcase R_PPC64_GOT_TPREL_PCREL34:\n \t  if ((tls_mask & TLS_TLS) != 0\n \t      && (tls_mask & TLS_TPREL) == 0)\n \t    {\n@@ -15212,7 +15228,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n-\tcase R_PPC64_GOT_TLSGD34:\n+\tcase R_PPC64_GOT_TLSGD_PCREL34:\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n \t    {\n \t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n@@ -15222,7 +15238,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t{\n \t\t  /* IE, pla -> pld  */\n \t\t  pinsn += (-2ULL << 56) + (57ULL << 26) - (14ULL << 26);\n-\t\t  r_type = R_PPC64_GOT_TPREL34;\n+\t\t  r_type = R_PPC64_GOT_TPREL_PCREL34;\n \t\t}\n \t      else\n \t\t{\n@@ -15238,7 +15254,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n-\tcase R_PPC64_GOT_TLSLD34:\n+\tcase R_PPC64_GOT_TLSLD_PCREL34:\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_LD) == 0)\n \t    {\n \t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n@@ -15974,31 +15990,31 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_GOT_TLSGD16_LO:\n \tcase R_PPC64_GOT_TLSGD16_HI:\n \tcase R_PPC64_GOT_TLSGD16_HA:\n-\tcase R_PPC64_GOT_TLSGD34:\n+\tcase R_PPC64_GOT_TLSGD_PCREL34:\n \t  tls_type = TLS_TLS | TLS_GD;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_TLSLD16:\n \tcase R_PPC64_GOT_TLSLD16_LO:\n \tcase R_PPC64_GOT_TLSLD16_HI:\n \tcase R_PPC64_GOT_TLSLD16_HA:\n-\tcase R_PPC64_GOT_TLSLD34:\n+\tcase R_PPC64_GOT_TLSLD_PCREL34:\n \t  tls_type = TLS_TLS | TLS_LD;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_TPREL16_DS:\n \tcase R_PPC64_GOT_TPREL16_LO_DS:\n \tcase R_PPC64_GOT_TPREL16_HI:\n \tcase R_PPC64_GOT_TPREL16_HA:\n-\tcase R_PPC64_GOT_TPREL34:\n+\tcase R_PPC64_GOT_TPREL_PCREL34:\n \t  tls_type = TLS_TLS | TLS_TPREL;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_DTPREL16_DS:\n \tcase R_PPC64_GOT_DTPREL16_LO_DS:\n \tcase R_PPC64_GOT_DTPREL16_HI:\n \tcase R_PPC64_GOT_DTPREL16_HA:\n-\tcase R_PPC64_GOT_DTPREL34:\n+\tcase R_PPC64_GOT_DTPREL_PCREL34:\n \t  tls_type = TLS_TLS | TLS_DTPREL;\n \t  goto dogot;\n \n@@ -16197,10 +16213,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    relocation = got->output_section->vma + got->output_offset + off;\n \t    addend = 0;\n \t    if (!(r_type == R_PPC64_GOT_PCREL34\n-\t\t  || r_type == R_PPC64_GOT_TLSGD34\n-\t\t  || r_type == R_PPC64_GOT_TLSLD34\n-\t\t  || r_type == R_PPC64_GOT_TPREL34\n-\t\t  || r_type == R_PPC64_GOT_DTPREL34))\n+\t\t  || r_type == R_PPC64_GOT_TLSGD_PCREL34\n+\t\t  || r_type == R_PPC64_GOT_TLSLD_PCREL34\n+\t\t  || r_type == R_PPC64_GOT_TPREL_PCREL34\n+\t\t  || r_type == R_PPC64_GOT_DTPREL_PCREL34))\n \t      addend = -(TOCstart + htab->sec_info[input_section->id].toc_off);\n \t  }\n \t  break;\n@@ -17022,10 +17038,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_GOT_PCREL34:\n \tcase R_PPC64_TPREL34:\n \tcase R_PPC64_DTPREL34:\n-\tcase R_PPC64_GOT_TLSGD34:\n-\tcase R_PPC64_GOT_TLSLD34:\n-\tcase R_PPC64_GOT_TPREL34:\n-\tcase R_PPC64_GOT_DTPREL34:\n+\tcase R_PPC64_GOT_TLSGD_PCREL34:\n+\tcase R_PPC64_GOT_TLSLD_PCREL34:\n+\tcase R_PPC64_GOT_TPREL_PCREL34:\n+\tcase R_PPC64_GOT_DTPREL_PCREL34:\n \tcase R_PPC64_PLT_PCREL34:\n \tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_D28:"
    },
    {
      "sha": "b97534fc9fed2c850f400dead5d085dd19f70bf1",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1603,10 +1603,10 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_PPC64_DTPREL16_HIGHESTA\",\n   \"BFD_RELOC_PPC64_TPREL34\",\n   \"BFD_RELOC_PPC64_DTPREL34\",\n-  \"BFD_RELOC_PPC64_GOT_TLSGD34\",\n-  \"BFD_RELOC_PPC64_GOT_TLSLD34\",\n-  \"BFD_RELOC_PPC64_GOT_TPREL34\",\n-  \"BFD_RELOC_PPC64_GOT_DTPREL34\",\n+  \"BFD_RELOC_PPC64_GOT_TLSGD_PCREL34\",\n+  \"BFD_RELOC_PPC64_GOT_TLSLD_PCREL34\",\n+  \"BFD_RELOC_PPC64_GOT_TPREL_PCREL34\",\n+  \"BFD_RELOC_PPC64_GOT_DTPREL_PCREL34\",\n   \"BFD_RELOC_PPC64_TLS_PCREL\",\n   \"BFD_RELOC_I370_D12\",\n   \"BFD_RELOC_CTOR\","
    },
    {
      "sha": "9aba84ca81e829b3386942bbae8c04b5b7daa544",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -3025,13 +3025,13 @@ ENUMX\n ENUMX\n   BFD_RELOC_PPC64_DTPREL34\n ENUMX\n-  BFD_RELOC_PPC64_GOT_TLSGD34\n+  BFD_RELOC_PPC64_GOT_TLSGD_PCREL34\n ENUMX\n-  BFD_RELOC_PPC64_GOT_TLSLD34\n+  BFD_RELOC_PPC64_GOT_TLSLD_PCREL34\n ENUMX\n-  BFD_RELOC_PPC64_GOT_TPREL34\n+  BFD_RELOC_PPC64_GOT_TPREL_PCREL34\n ENUMX\n-  BFD_RELOC_PPC64_GOT_DTPREL34\n+  BFD_RELOC_PPC64_GOT_DTPREL_PCREL34\n ENUMX\n   BFD_RELOC_PPC64_TLS_PCREL\n ENUMDOC"
    },
    {
      "sha": "a0d1e0061ebf8a5b137bbf1351b9784064833c57",
      "filename": "elfcpp/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/elfcpp/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/elfcpp/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/ChangeLog?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.h: Rename\n+\tR_PPC64_GOT_TLSGD34 to R_PPC64_GOT_TLSGD_PCREL34,\n+\tR_PPC64_GOT_TLSLD34 to R_PPC64_GOT_TLSLD_PCREL34,\n+\tR_PPC64_GOT_TPREL34 to R_PPC64_GOT_TPREL_PCREL34, and\n+\tR_PPC64_GOT_DTPREL34 to R_PPC64_GOT_DTPREL_PCREL34.\n+\n 2020-01-18  Nick Clifton  <nickc@redhat.com>\n \n \tBinutils 2.34 branch created."
    },
    {
      "sha": "2ab73625f9b519239a1a74243e8307e88c05fc91",
      "filename": "elfcpp/powerpc.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/elfcpp/powerpc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/elfcpp/powerpc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/powerpc.h?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -205,10 +205,10 @@ enum\n   R_PPC64_PCREL28 = 145,\n   R_PPC64_TPREL34 = 146,\n   R_PPC64_DTPREL34 = 147,\n-  R_PPC64_GOT_TLSGD34 = 148,\n-  R_PPC64_GOT_TLSLD34 = 149,\n-  R_PPC64_GOT_TPREL34 = 150,\n-  R_PPC64_GOT_DTPREL34 = 151,\n+  R_PPC64_GOT_TLSGD_PCREL34 = 148,\n+  R_PPC64_GOT_TLSLD_PCREL34 = 149,\n+  R_PPC64_GOT_TPREL_PCREL34 = 150,\n+  R_PPC64_GOT_DTPREL_PCREL34 = 151,\n \n   R_PPC_VLE_REL8 = 216,\n   R_PPC_VLE_REL15 = 217,"
    },
    {
      "sha": "56c2ff3f506247acee2c12a7bd02ead64a577ded",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1,3 +1,7 @@\n+2020-06-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c: Update throughout for reloc renaming.\n+\n 2020-06-05  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config/tc-bpf.c (md_apply_fix): Avoid GCC 10 warning"
    },
    {
      "sha": "5f9d44d928f1e9c14ca1706dac5e633ce82ecf3d",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -2233,10 +2233,10 @@ ppc_elf_suffix (char **str_p, expressionS *exp_p)\n     MAP64 (\"got@pcrel\",\t\tBFD_RELOC_PPC64_GOT_PCREL34),\n     MAP64 (\"plt@pcrel\",\t\tBFD_RELOC_PPC64_PLT_PCREL34),\n     MAP64 (\"tls@pcrel\",\t\tBFD_RELOC_PPC64_TLS_PCREL),\n-    MAP64 (\"got@tlsgd@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSGD34),\n-    MAP64 (\"got@tlsld@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSLD34),\n-    MAP64 (\"got@tprel@pcrel\",\tBFD_RELOC_PPC64_GOT_TPREL34),\n-    MAP64 (\"got@dtprel@pcrel\",\tBFD_RELOC_PPC64_GOT_DTPREL34),\n+    MAP64 (\"got@tlsgd@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSGD_PCREL34),\n+    MAP64 (\"got@tlsld@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSLD_PCREL34),\n+    MAP64 (\"got@tprel@pcrel\",\tBFD_RELOC_PPC64_GOT_TPREL_PCREL34),\n+    MAP64 (\"got@dtprel@pcrel\",\tBFD_RELOC_PPC64_GOT_DTPREL_PCREL34),\n     MAP64 (\"higher34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHER34),\n     MAP64 (\"highera34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHERA34),\n     MAP64 (\"highest34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHEST34),\n@@ -3219,10 +3219,10 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_64_PCREL:\n     case BFD_RELOC_64_PLT_PCREL:\n     case BFD_RELOC_PPC64_GOT_PCREL34:\n-    case BFD_RELOC_PPC64_GOT_TLSGD34:\n-    case BFD_RELOC_PPC64_GOT_TLSLD34:\n-    case BFD_RELOC_PPC64_GOT_TPREL34:\n-    case BFD_RELOC_PPC64_GOT_DTPREL34:\n+    case BFD_RELOC_PPC64_GOT_TLSGD_PCREL34:\n+    case BFD_RELOC_PPC64_GOT_TLSLD_PCREL34:\n+    case BFD_RELOC_PPC64_GOT_TPREL_PCREL34:\n+    case BFD_RELOC_PPC64_GOT_DTPREL_PCREL34:\n     case BFD_RELOC_PPC64_PCREL28:\n     case BFD_RELOC_PPC64_PCREL34:\n     case BFD_RELOC_PPC64_PLT_PCREL34:\n@@ -3804,10 +3804,10 @@ md_assemble (char *str)\n \t\t  /* Fall through.  */\n \t\tcase BFD_RELOC_PPC64_GOT_PCREL34:\n \t\tcase BFD_RELOC_PPC64_PLT_PCREL34:\n-\t\tcase BFD_RELOC_PPC64_GOT_TLSGD34:\n-\t\tcase BFD_RELOC_PPC64_GOT_TLSLD34:\n-\t\tcase BFD_RELOC_PPC64_GOT_TPREL34:\n-\t\tcase BFD_RELOC_PPC64_GOT_DTPREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TLSGD_PCREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TLSLD_PCREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TPREL_PCREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_DTPREL_PCREL34:\n \t\t  if (operand->bitm != 0x3ffffffffULL\n \t\t      || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n \t\t    as_warn (_(\"%s unsupported on this instruction\"), \"@pcrel\");\n@@ -7532,10 +7532,10 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \tcase BFD_RELOC_PPC64_DTPREL16_HIGHESTA:\n \tcase BFD_RELOC_PPC64_TPREL34:\n \tcase BFD_RELOC_PPC64_DTPREL34:\n-\tcase BFD_RELOC_PPC64_GOT_TLSGD34:\n-\tcase BFD_RELOC_PPC64_GOT_TLSLD34:\n-\tcase BFD_RELOC_PPC64_GOT_TPREL34:\n-\tcase BFD_RELOC_PPC64_GOT_DTPREL34:\n+\tcase BFD_RELOC_PPC64_GOT_TLSGD_PCREL34:\n+\tcase BFD_RELOC_PPC64_GOT_TLSLD_PCREL34:\n+\tcase BFD_RELOC_PPC64_GOT_TPREL_PCREL34:\n+\tcase BFD_RELOC_PPC64_GOT_DTPREL_PCREL34:\n \t  gas_assert (fixP->fx_addsy != NULL);\n \t  S_SET_THREAD_LOCAL (fixP->fx_addsy);\n \t  fieldval = 0;"
    },
    {
      "sha": "f3d3715936278bbffde883a4dfacdbda2968708c",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1,3 +1,7 @@\n+2020-06-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc: Update throughout for reloc renaming.\n+\n 2020-05-22  Alan Modra  <amodra@gmail.com>\n \n \tPR 25882"
    },
    {
      "sha": "80f222db19be0fe02e8a27786c154cb6c6647ead",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 45,
      "deletions": 45,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -7286,10 +7286,10 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n     case elfcpp::R_PPC64_TLSLD:\n     case elfcpp::R_PPC64_TPREL34:\n     case elfcpp::R_PPC64_DTPREL34:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n       ref = Symbol::TLS_REF;\n       break;\n \n@@ -7883,7 +7883,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       target->got_section(symtab, layout);\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TLSGD16:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_HI:\n@@ -7908,7 +7908,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TLSLD16:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_HI:\n@@ -7932,7 +7932,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n     case elfcpp::R_POWERPC_GOT_DTPREL16:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_HI:\n@@ -7945,7 +7945,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TPREL16:\n     case elfcpp::R_POWERPC_GOT_TPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_TPREL16_HI:\n@@ -8177,10 +8177,10 @@ Target_powerpc<size, big_endian>::Scan::local(\n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_GOT_PCREL34:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n       target->set_power10_stubs();\n       break;\n     default:\n@@ -8616,7 +8616,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       target->got_section(symtab, layout);\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TLSGD16:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_HI:\n@@ -8665,7 +8665,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TLSLD16:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_HI:\n@@ -8689,7 +8689,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n     case elfcpp::R_POWERPC_GOT_DTPREL16:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_HI:\n@@ -8709,7 +8709,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n-    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n     case elfcpp::R_POWERPC_GOT_TPREL16:\n     case elfcpp::R_POWERPC_GOT_TPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_TPREL16_HI:\n@@ -8935,10 +8935,10 @@ Target_powerpc<size, big_endian>::Scan::global(\n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_GOT_PCREL34:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n       target->set_power10_stubs();\n       break;\n     default:\n@@ -10263,7 +10263,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_HI\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_HA\n-\t   || r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n+\t   || r_type == elfcpp::R_PPC64_GOT_TLSGD_PCREL34)\n     {\n       // First instruction of a global dynamic sequence, arg setup insn.\n       const bool final = gsym == NULL || gsym->final_value_is_known();\n@@ -10285,14 +10285,14 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      gold_assert(object->local_has_got_offset(r_sym, got_type));\n \t      value = object->local_got_offset(r_sym, got_type);\n \t    }\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD_PCREL34)\n \t    value += target->got_section()->address();\n \t  else\n \t    value -= target->got_section()->got_base_offset(object);\n \t}\n       if (tls_type == tls::TLSOPT_TO_IE)\n \t{\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD_PCREL34)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view);\n \t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10303,7 +10303,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      elfcpp::Swap<32, big_endian>::writeval(iview, pinsn >> 32);\n \t      elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n \t\t\t\t\t\t     pinsn & 0xffffffff);\n-\t      r_type = elfcpp::R_PPC64_GOT_TPREL34;\n+\t      r_type = elfcpp::R_PPC64_GOT_TPREL_PCREL34;\n \t    }\n \t  else\n \t    {\n@@ -10325,7 +10325,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t}\n       else if (tls_type == tls::TLSOPT_TO_LE)\n \t{\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD_PCREL34)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view);\n \t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10369,22 +10369,22 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_HI\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_HA\n-\t   || r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n+\t   || r_type == elfcpp::R_PPC64_GOT_TLSLD_PCREL34)\n     {\n       // First instruction of a local dynamic sequence, arg setup insn.\n       const tls::Tls_optimization tls_type = target->optimize_tls_ld();\n       if (tls_type == tls::TLSOPT_NONE)\n \t{\n \t  value = target->tlsld_got_offset();\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD_PCREL34)\n \t    value += target->got_section()->address();\n \t  else\n \t    value -= target->got_section()->got_base_offset(object);\n \t}\n       else\n \t{\n \t  gold_assert(tls_type == tls::TLSOPT_TO_LE);\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD_PCREL34)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view);\n \t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10425,7 +10425,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_HI\n \t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_HA\n-\t   || r_type == elfcpp::R_PPC64_GOT_DTPREL34)\n+\t   || r_type == elfcpp::R_PPC64_GOT_DTPREL_PCREL34)\n     {\n       // Accesses relative to a local dynamic sequence address,\n       // no optimisation here.\n@@ -10439,7 +10439,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t  gold_assert(object->local_has_got_offset(r_sym, GOT_TYPE_DTPREL));\n \t  value = object->local_got_offset(r_sym, GOT_TYPE_DTPREL);\n \t}\n-      if (r_type == elfcpp::R_PPC64_GOT_DTPREL34)\n+      if (r_type == elfcpp::R_PPC64_GOT_DTPREL_PCREL34)\n \tvalue += target->got_section()->address();\n       else\n \tvalue -= target->got_section()->got_base_offset(object);\n@@ -10448,7 +10448,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_HI\n \t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_HA\n-\t   || r_type == elfcpp::R_PPC64_GOT_TPREL34)\n+\t   || r_type == elfcpp::R_PPC64_GOT_TPREL_PCREL34)\n     {\n       // First instruction of initial exec sequence.\n       const bool final = gsym == NULL || gsym->final_value_is_known();\n@@ -10465,15 +10465,15 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      gold_assert(object->local_has_got_offset(r_sym, GOT_TYPE_TPREL));\n \t      value = object->local_got_offset(r_sym, GOT_TYPE_TPREL);\n \t    }\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL_PCREL34)\n \t    value += target->got_section()->address();\n \t  else\n \t    value -= target->got_section()->got_base_offset(object);\n \t}\n       else\n \t{\n \t  gold_assert(tls_type == tls::TLSOPT_TO_LE);\n-\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL34)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL_PCREL34)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view);\n \t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10745,10 +10745,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_PCREL28:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n     case elfcpp::R_PPC64_REL16_HIGHER34:\n     case elfcpp::R_PPC64_REL16_HIGHERA34:\n     case elfcpp::R_PPC64_REL16_HIGHEST34:\n@@ -11285,10 +11285,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_PCREL28:\n     case elfcpp::R_PPC64_TPREL34:\n     case elfcpp::R_PPC64_DTPREL34:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n       overflow = Reloc::CHECK_SIGNED;\n       break;\n     }\n@@ -11587,10 +11587,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_TPREL34:\n     case elfcpp::R_PPC64_DTPREL34:\n-    case elfcpp::R_PPC64_GOT_TLSGD34:\n-    case elfcpp::R_PPC64_GOT_TLSLD34:\n-    case elfcpp::R_PPC64_GOT_TPREL34:\n-    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSLD_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL_PCREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL_PCREL34:\n       if (size == 32)\n \tgoto unsupp;\n       status = Reloc::addr34(view, value, overflow);"
    },
    {
      "sha": "f6200db75c1ccb67fcb59fa8f70c99f2d97cfe12",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf/ppc64.h (elf_ppc64_reloc_type): Rename\n+\tR_PPC64_GOT_TLSGD34 to R_PPC64_GOT_TLSGD_PCREL34,\n+\tR_PPC64_GOT_TLSLD34 to R_PPC64_GOT_TLSLD_PCREL34,\n+\tR_PPC64_GOT_TPREL34 to R_PPC64_GOT_TPREL_PCREL34, and\n+\tR_PPC64_GOT_DTPREL34 to R_PPC64_GOT_DTPREL_PCREL34.\n+\n 2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* opcode/cgen.h: Get an `endian' argument in both"
    },
    {
      "sha": "f7034ec24b1d2617bd31dfbf17ec36ff4e50fa8f",
      "filename": "include/elf/ppc64.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c69f9732039d889f04ae8b9bb81b80e530a6f1/include/elf/ppc64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c69f9732039d889f04ae8b9bb81b80e530a6f1/include/elf/ppc64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/ppc64.h?ref=87c69f9732039d889f04ae8b9bb81b80e530a6f1",
      "patch": "@@ -183,10 +183,10 @@ START_RELOC_NUMBERS (elf_ppc64_reloc_type)\n   RELOC_NUMBER (R_PPC64_PCREL28,\t   145)\n   RELOC_NUMBER (R_PPC64_TPREL34,\t   146)\n   RELOC_NUMBER (R_PPC64_DTPREL34,\t   147)\n-  RELOC_NUMBER (R_PPC64_GOT_TLSGD34,\t   148)\n-  RELOC_NUMBER (R_PPC64_GOT_TLSLD34,\t   149)\n-  RELOC_NUMBER (R_PPC64_GOT_TPREL34,\t   150)\n-  RELOC_NUMBER (R_PPC64_GOT_DTPREL34,\t   151)\n+  RELOC_NUMBER (R_PPC64_GOT_TLSGD_PCREL34, 148)\n+  RELOC_NUMBER (R_PPC64_GOT_TLSLD_PCREL34, 149)\n+  RELOC_NUMBER (R_PPC64_GOT_TPREL_PCREL34, 150)\n+  RELOC_NUMBER (R_PPC64_GOT_DTPREL_PCREL34, 151)\n \n #ifndef RELOC_MACROS_GEN_FUNC\n /* Relocation only used internally by gas or ld.  If you need to use\n@@ -225,7 +225,7 @@ END_RELOC_NUMBERS (R_PPC64_max)\n #define IS_PPC64_TLS_RELOC(R)\t\t\t\t\t\t\\\n   (((R) >= R_PPC64_TLS && (R) <= R_PPC64_DTPREL16_HIGHESTA)\t\t\\\n    || ((R) >= R_PPC64_TPREL16_HIGH && (R) <= R_PPC64_DTPREL16_HIGHA)\t\\\n-   || ((R) >= R_PPC64_TPREL34 && (R) <= R_PPC64_GOT_DTPREL34))\n+   || ((R) >= R_PPC64_TPREL34 && (R) <= R_PPC64_GOT_DTPREL_PCREL34))\n \n /* e_flags bits specifying ABI.\n    1 for original function descriptor using ABI,"
    }
  ]
}