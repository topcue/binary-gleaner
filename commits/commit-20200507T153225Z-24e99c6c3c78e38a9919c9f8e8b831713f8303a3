{
  "sha": "24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRlOTljNmMzYzc4ZTM4YTk5MTljOWY4ZThiODMxNzEzZjgzMDNhMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:32:25Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:32:25Z"
    },
    "message": "gdb: make get_dyn_prop a method of struct type\n\nMove get_dyn_prop, currently a free function, to be a method on struct\ntype.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <get_dyn_prop>: New method.\n\t(get_dyn_prop): Remove.  Update all users to use\n\ttype::dyn_prop.\n\t* gdbtypes.c (get_dyn_prop): Rename to...\n\t(type::dyn_prop): ... this.",
    "tree": {
      "sha": "60b31873f58a3656645f3005f06be2a008dc02c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/60b31873f58a3656645f3005f06be2a008dc02c4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d11a9fabab657e592df9167535bc46804937cf18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d11a9fabab657e592df9167535bc46804937cf18",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d11a9fabab657e592df9167535bc46804937cf18"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 32,
    "deletions": 27
  },
  "files": [
    {
      "sha": "e295fd1d65abd0b84b81f52801aa12c2ea3ea6ef",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-07  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <get_dyn_prop>: New method.\n+\t(get_dyn_prop): Remove.  Update all users to use\n+\ttype::dyn_prop.\n+\t* gdbtypes.c (get_dyn_prop): Rename to...\n+\t(type::dyn_prop): ... this.\n+\n 2020-05-06  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct main_type) <flag_static>: Remove."
    },
    {
      "sha": "be26231524d241246c048f7a4f7c35170b03ec3e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -2812,7 +2812,7 @@ ada_value_slice_from_ptr (struct value *array_ptr, struct type *type,\n     = create_static_range_type (NULL, base_index_type, low, high);\n   struct type *slice_type = create_array_type_with_stride\n \t\t\t      (NULL, TYPE_TARGET_TYPE (type0), index_type,\n-\t\t\t       get_dyn_prop (DYN_PROP_BYTE_STRIDE, type0),\n+\t\t\t       type0->dyn_prop (DYN_PROP_BYTE_STRIDE),\n \t\t\t       TYPE_FIELD_BITSIZE (type0, 0));\n   int base_low =  ada_discrete_type_low_bound (TYPE_INDEX_TYPE (type0));\n   LONGEST base_low_pos, low_pos;\n@@ -2842,7 +2842,7 @@ ada_value_slice (struct value *array, int low, int high)\n     = create_static_range_type (NULL, TYPE_INDEX_TYPE (type), low, high);\n   struct type *slice_type = create_array_type_with_stride\n \t\t\t      (NULL, TYPE_TARGET_TYPE (type), index_type,\n-\t\t\t       get_dyn_prop (DYN_PROP_BYTE_STRIDE, type),\n+\t\t\t       type->dyn_prop (DYN_PROP_BYTE_STRIDE),\n \t\t\t       TYPE_FIELD_BITSIZE (type, 0));\n   LONGEST low_pos, high_pos;\n "
    },
    {
      "sha": "7ef8bd5ef9e154bf08fd64ab070f16fd6eee6472",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -776,13 +776,13 @@ print_record_field_types (struct type *type, struct type *outer_type,\n \t\t\t  struct ui_file *stream, int show, int level,\n \t\t\t  const struct type_print_options *flags)\n {\n-  struct dynamic_prop *prop = get_dyn_prop (DYN_PROP_VARIANT_PARTS, type);\n+  struct dynamic_prop *prop = type->dyn_prop (DYN_PROP_VARIANT_PARTS);\n   if (prop != nullptr)\n     {\n       if (prop->kind == PROP_TYPE)\n \t{\n \t  type = prop->data.original_type;\n-\t  prop = get_dyn_prop (DYN_PROP_VARIANT_PARTS, type);\n+\t  prop = type->dyn_prop (DYN_PROP_VARIANT_PARTS);\n \t}\n       gdb_assert (prop->kind == PROP_VARIANT_PARTS);\n       print_record_field_types_dynamic (*prop->data.variant_parts,"
    },
    {
      "sha": "715db0772b7c32feab8f222d3e07f12cb77664d6",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -1188,7 +1188,7 @@ update_static_array_size (struct type *type)\n \n   struct type *range_type = TYPE_INDEX_TYPE (type);\n \n-  if (get_dyn_prop (DYN_PROP_BYTE_STRIDE, type) == nullptr\n+  if (type->dyn_prop (DYN_PROP_BYTE_STRIDE) == nullptr\n       && has_static_range (TYPE_RANGE_DATA (range_type))\n       && (!type_not_associated (type)\n \t  && !type_not_allocated (type)))\n@@ -1957,7 +1957,7 @@ stub_noname_complaint (void)\n static int\n array_type_has_dynamic_stride (struct type *type)\n {\n-  struct dynamic_prop *prop = get_dyn_prop (DYN_PROP_BYTE_STRIDE, type);\n+  struct dynamic_prop *prop = type->dyn_prop (DYN_PROP_BYTE_STRIDE);\n \n   return (prop != NULL && prop->kind != PROP_CONST);\n }\n@@ -1990,7 +1990,7 @@ is_dynamic_type_internal (struct type *type, int top_level)\n   if (TYPE_ALLOCATED_PROP (type))\n     return 1;\n \n-  struct dynamic_prop *prop = get_dyn_prop (DYN_PROP_VARIANT_PARTS, type);\n+  struct dynamic_prop *prop = type->dyn_prop (DYN_PROP_VARIANT_PARTS);\n   if (prop != nullptr && prop->kind != PROP_TYPE)\n     return 1;\n \n@@ -2199,7 +2199,7 @@ resolve_dynamic_array_or_string (struct type *type,\n   else\n     elt_type = TYPE_TARGET_TYPE (type);\n \n-  prop = get_dyn_prop (DYN_PROP_BYTE_STRIDE, type);\n+  prop = type->dyn_prop (DYN_PROP_BYTE_STRIDE);\n   if (prop != NULL)\n     {\n       if (dwarf2_evaluate_property (prop, NULL, addr_stack, &value))\n@@ -2436,8 +2436,7 @@ resolve_dynamic_struct (struct type *type,\n \n   resolved_type = copy_type (type);\n \n-  struct dynamic_prop *variant_prop = get_dyn_prop (DYN_PROP_VARIANT_PARTS,\n-\t\t\t\t\t\t    resolved_type);\n+  dynamic_prop *variant_prop = resolved_type->dyn_prop (DYN_PROP_VARIANT_PARTS);\n   if (variant_prop != nullptr && variant_prop->kind == PROP_VARIANT_PARTS)\n     {\n       compute_variant_fields (type, resolved_type, addr_stack,\n@@ -2652,10 +2651,10 @@ resolve_dynamic_type (struct type *type,\n \n /* See gdbtypes.h  */\n \n-struct dynamic_prop *\n-get_dyn_prop (enum dynamic_prop_node_kind prop_kind, const struct type *type)\n+dynamic_prop *\n+type::dyn_prop (dynamic_prop_node_kind prop_kind) const\n {\n-  struct dynamic_prop_list *node = TYPE_DYN_PROP_LIST (type);\n+  dynamic_prop_list *node = TYPE_DYN_PROP_LIST (this);\n \n   while (node != NULL)\n     {"
    },
    {
      "sha": "2845b71906a8d30f21d9e9bb65c4778b11c499fc",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -339,15 +339,15 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n /* * True if this type is allocatable.  */\n #define TYPE_IS_ALLOCATABLE(t) \\\n-  (get_dyn_prop (DYN_PROP_ALLOCATED, t) != NULL)\n+  ((t)->dyn_prop (DYN_PROP_ALLOCATED) != NULL)\n \n /* * True if this type has variant parts.  */\n #define TYPE_HAS_VARIANT_PARTS(t) \\\n-  (get_dyn_prop (DYN_PROP_VARIANT_PARTS, t) != nullptr)\n+  ((t)->dyn_prop (DYN_PROP_VARIANT_PARTS) != nullptr)\n \n /* * True if this type has a dynamic length.  */\n #define TYPE_HAS_DYNAMIC_LENGTH(t) \\\n-  (get_dyn_prop (DYN_PROP_BYTE_SIZE, t) != nullptr)\n+  ((t)->dyn_prop (DYN_PROP_BYTE_SIZE) != nullptr)\n \n /* * Instruction-space delimited type.  This is for Harvard architectures\n    which have separate instruction and data address spaces (and perhaps\n@@ -874,6 +874,10 @@ struct main_type\n \n struct type\n {\n+  /* * Return the dynamic property of the requested KIND from this type's\n+     list of dynamic properties.  */\n+  dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n+\n   /* * Type that is a pointer to this type.\n      NULL if no such pointer-to type is known yet.\n      The debugger may add the address of such a type\n@@ -1433,21 +1437,21 @@ extern bool set_type_align (struct type *, ULONGEST);\n \n /* Property accessors for the type data location.  */\n #define TYPE_DATA_LOCATION(thistype) \\\n-  get_dyn_prop (DYN_PROP_DATA_LOCATION, thistype)\n+  ((thistype)->dyn_prop (DYN_PROP_DATA_LOCATION))\n #define TYPE_DATA_LOCATION_BATON(thistype) \\\n   TYPE_DATA_LOCATION (thistype)->data.baton\n #define TYPE_DATA_LOCATION_ADDR(thistype) \\\n   TYPE_DATA_LOCATION (thistype)->data.const_val\n #define TYPE_DATA_LOCATION_KIND(thistype) \\\n   TYPE_DATA_LOCATION (thistype)->kind\n #define TYPE_DYNAMIC_LENGTH(thistype) \\\n-  get_dyn_prop (DYN_PROP_BYTE_SIZE, thistype)\n+  ((thistype)->dyn_prop (DYN_PROP_BYTE_SIZE))\n \n /* Property accessors for the type allocated/associated.  */\n #define TYPE_ALLOCATED_PROP(thistype) \\\n-  get_dyn_prop (DYN_PROP_ALLOCATED, thistype)\n+  ((thistype)->dyn_prop (DYN_PROP_ALLOCATED))\n #define TYPE_ASSOCIATED_PROP(thistype) \\\n-  get_dyn_prop (DYN_PROP_ASSOCIATED, thistype)\n+  ((thistype)->dyn_prop (DYN_PROP_ASSOCIATED))\n \n /* Attribute accessors for dynamic properties.  */\n #define TYPE_DYN_PROP_LIST(thistype) \\\n@@ -2093,11 +2097,6 @@ extern struct type *resolve_dynamic_type\n /* * Predicate if the type has dynamic values, which are not resolved yet.  */\n extern int is_dynamic_type (struct type *type);\n \n-/* * Return the dynamic property of the requested KIND from TYPE's\n-   list of dynamic properties.  */\n-extern struct dynamic_prop *get_dyn_prop\n-  (enum dynamic_prop_node_kind kind, const struct type *type);\n-\n /* * Given a dynamic property PROP of a given KIND, add this dynamic\n    property to the given TYPE.\n "
    },
    {
      "sha": "f2fb0119b00c7a35f1034dfe65efc3b1d32470b8",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24e99c6c3c78e38a9919c9f8e8b831713f8303a3/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "patch": "@@ -708,8 +708,7 @@ rust_print_struct_def (struct type *type, const char *varstring,\n       if (is_enum)\n \t{\n \t  fputs_filtered (\"enum \", stream);\n-\t  struct dynamic_prop *prop = get_dyn_prop (DYN_PROP_VARIANT_PARTS,\n-\t\t\t\t\t\t    type);\n+\t  dynamic_prop *prop = type->dyn_prop (DYN_PROP_VARIANT_PARTS);\n \t  if (prop != nullptr && prop->kind == PROP_TYPE)\n \t    type = prop->data.original_type;\n \t}"
    }
  ]
}