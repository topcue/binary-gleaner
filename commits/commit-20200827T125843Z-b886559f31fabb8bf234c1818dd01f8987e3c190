{
  "sha": "b886559f31fabb8bf234c1818dd01f8987e3c190",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Yjg4NjU1OWYzMWZhYmI4YmYyMzRjMTgxOGRkMDFmODk4N2UzYzE5MA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-27T12:58:43Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-27T12:58:43Z"
    },
    "message": "gdb: add gdb_bfd_sections for range-based iteration\n\nI wanted to make a nicer / type-safe interface for\nbfd_map_over_sections, avoiding the `void *` data parameter.\n\nMy first shot was to make a wrapper for bfd_map_over_sections,\ngdb_bfd_map_over_sections that took a gdb::function_view.\n\nHowever, I think that a range adapter gives nicer and simpler code, as a\nsimple for loop is easier to read than a callback / lambda function.  So\nhere it is, it uses next_iterator and next_adapter, so it's not much\ncode.\n\nAs an example, I ported maintenance_info_sections and friends to use it.\nThe maint_print_section_data type could probably be removed now, but I\ndidn't want to do too much in one patch.\n\ngdb/ChangeLog:\n\n\t* gdb_bfd.h (gdb_bfd_section_iterator, gdb_bfd_section_range,\n\tgdb_bfd_sections): New.\n\t* maint.c (print_bfd_section_info): Change param type to\n\tmaint_print_section_data.\n\t(print_objfile_section_info): Likewise.\n\t(print_bfd_section_info_maybe_relocated): Likewise.\n\t(maintenance_info_sections): Use gdb_bfd_sections.\n\nChange-Id: Ib496f6b0a0eb7aadb10da1dd381304014d934ea0",
    "tree": {
      "sha": "3bb438a20bff2ea6e7d2835642fb5b9613dabbab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3bb438a20bff2ea6e7d2835642fb5b9613dabbab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b886559f31fabb8bf234c1818dd01f8987e3c190",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b886559f31fabb8bf234c1818dd01f8987e3c190",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b886559f31fabb8bf234c1818dd01f8987e3c190",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b886559f31fabb8bf234c1818dd01f8987e3c190/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec10b3bb916cde1203912847e3f5844ab5ab24bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec10b3bb916cde1203912847e3f5844ab5ab24bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec10b3bb916cde1203912847e3f5844ab5ab24bd"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 50,
    "deletions": 26
  },
  "files": [
    {
      "sha": "4fd89745713dc94972bda49bcf0f6a4442e943b5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b886559f31fabb8bf234c1818dd01f8987e3c190",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb_bfd.h (gdb_bfd_section_iterator, gdb_bfd_section_range,\n+\tgdb_bfd_sections): New.\n+\t* maint.c (print_bfd_section_info): Change param type to\n+\tmaint_print_section_data.\n+\t(print_objfile_section_info): Likewise.\n+\t(print_bfd_section_info_maybe_relocated): Likewise.\n+\t(maintenance_info_sections): Use gdb_bfd_sections.\n+\n 2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* MAINTAINERS: Add ARC target and maintainer."
    },
    {
      "sha": "0f450567d50eb1dbd97c021ddec7f4a0d945a735",
      "filename": "gdb/gdb_bfd.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/gdb_bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/gdb_bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.h?ref=b886559f31fabb8bf234c1818dd01f8987e3c190",
      "patch": "@@ -23,6 +23,7 @@\n #include \"registry.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include \"gdbsupport/gdb_ref_ptr.h\"\n+#include \"gdbsupport/next-iterator.h\"\n \n DECLARE_REGISTRY (bfd);\n \n@@ -193,4 +194,21 @@ int gdb_bfd_requires_relocations (bfd *abfd);\n bool gdb_bfd_get_full_section_contents (bfd *abfd, asection *section,\n \t\t\t\t\tgdb::byte_vector *contents);\n \n+/* Range adapter for a BFD's sections.\n+\n+   To be used as:\n+\n+     for (asection *sect : gdb_bfd_all_sections (bfd))\n+       ... use SECT ...\n+ */\n+\n+using gdb_bfd_section_iterator = next_iterator<asection>;\n+using gdb_bfd_section_range = next_adapter<asection, gdb_bfd_section_iterator>;\n+\n+static inline\n+gdb_bfd_section_range gdb_bfd_sections (bfd *abfd)\n+{\n+  return gdb_bfd_section_range (abfd->sections);\n+}\n+\n #endif /* GDB_BFD_H */"
    },
    {
      "sha": "be0b1605159a8a10cd86ba2a235f1273ff24482c",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 22,
      "deletions": 26,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b886559f31fabb8bf234c1818dd01f8987e3c190/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=b886559f31fabb8bf234c1818dd01f8987e3c190",
      "patch": "@@ -266,7 +266,7 @@ struct maint_print_section_data\n   maint_print_section_data (struct objfile *objfile, const char *arg,\n \t\t\t    bfd *abfd)\n     : objfile (objfile),\n-      arg(arg)\n+      arg (arg)\n   {\n     int section_count = gdb_bfd_count_sections (abfd);\n     index_digits = ((int) log10 ((float) section_count)) + 1;\n@@ -292,21 +292,19 @@ print_section_index (bfd *abfd,\n   printf_filtered (\"%-*s\", (index_digits + 4), result.c_str ());\n }\n \n-/* Print information about ASECT from ABFD.  DATUM holds a pointer to a\n-   maint_print_section_data object.  The section will be printed using the\n-   VMA's from the bfd, which will not be the relocated addresses for bfds\n-   that should be relocated.  The information must be printed with the\n-   same layout as PRINT_OBJFILE_SECTION_INFO below.  */\n+/* Print information about ASECT from ABFD.  The section will be printed using\n+   the VMA's from the bfd, which will not be the relocated addresses for bfds\n+   that should be relocated.  The information must be printed with the same\n+   layout as PRINT_OBJFILE_SECTION_INFO below.  */\n \n static void\n print_bfd_section_info (bfd *abfd,\n \t\t\tasection *asect,\n-\t\t\tvoid *datum)\n+\t\t\tconst maint_print_section_data &print_data)\n {\n   flagword flags = bfd_section_flags (asect);\n   const char *name = bfd_section_name (asect);\n-  maint_print_section_data *print_data = (maint_print_section_data *) datum;\n-  const char *arg = print_data->arg;\n+  const char *arg = print_data.arg;\n \n   if (arg == NULL || *arg == '\\0'\n       || match_substring (arg, name)\n@@ -318,7 +316,7 @@ print_bfd_section_info (bfd *abfd,\n \n       addr = bfd_section_vma (asect);\n       endaddr = addr + bfd_section_size (asect);\n-      print_section_index (abfd, asect, print_data->index_digits);\n+      print_section_index (abfd, asect, print_data.index_digits);\n       maint_print_section_info (name, flags, addr, endaddr,\n \t\t\t\tasect->filepos, addr_size);\n     }\n@@ -332,11 +330,11 @@ print_bfd_section_info (bfd *abfd,\n static void\n print_objfile_section_info (bfd *abfd,\n \t\t\t    struct obj_section *asect,\n-\t\t\t    maint_print_section_data *print_data)\n+\t\t\t    const maint_print_section_data &print_data)\n {\n   flagword flags = bfd_section_flags (asect->the_bfd_section);\n   const char *name = bfd_section_name (asect->the_bfd_section);\n-  const char *string = print_data->arg;\n+  const char *string = print_data.arg;\n \n   if (string == NULL || *string == '\\0'\n       || match_substring (string, name)\n@@ -346,7 +344,7 @@ print_objfile_section_info (bfd *abfd,\n       int addr_size = gdbarch_addr_bit (gdbarch) / 8;\n \n       print_section_index (abfd, asect->the_bfd_section,\n-\t\t\t   print_data->index_digits);\n+\t\t\t   print_data.index_digits);\n       maint_print_section_info (name, flags,\n \t\t\t\tobj_section_addr (asect),\n \t\t\t\tobj_section_endaddr (asect),\n@@ -376,24 +374,21 @@ maint_obj_section_from_bfd_section (bfd *abfd,\n   return osect;\n }\n \n-/* Print information about ASECT from ABFD.  DATUM holds a pointer to a\n-   maint_print_section_data object.  Where possible the information for\n+/* Print information about ASECT from ABFD.  Where possible the information for\n    ASECT will print the relocated addresses of the section.  */\n \n static void\n-print_bfd_section_info_maybe_relocated (bfd *abfd,\n-\t\t\t\t\tasection *asect,\n-\t\t\t\t\tvoid *datum)\n+print_bfd_section_info_maybe_relocated\n+  (bfd *abfd, asection *asect, const maint_print_section_data &print_data)\n {\n-  maint_print_section_data *print_data = (maint_print_section_data *) datum;\n-  objfile *objfile = print_data->objfile;\n+  objfile *objfile = print_data.objfile;\n \n   gdb_assert (objfile->sections != NULL);\n   obj_section *osect\n     = maint_obj_section_from_bfd_section (abfd, asect, objfile);\n \n   if (osect->the_bfd_section == NULL)\n-    print_bfd_section_info (abfd, asect, datum);\n+    print_bfd_section_info (abfd, asect, print_data);\n   else\n     print_objfile_section_info (abfd, osect, print_data);\n }\n@@ -432,9 +427,9 @@ maintenance_info_sections (const char *arg, int from_tty)\n \n \t  maint_print_section_data print_data (ofile, arg, ofile->obfd);\n \n-\t  bfd_map_over_sections (ofile->obfd,\n-\t\t\t\t print_bfd_section_info_maybe_relocated,\n-\t\t\t\t (void *) &print_data);\n+\t  for (asection *sect : gdb_bfd_sections (ofile->obfd))\n+\t    print_bfd_section_info_maybe_relocated (ofile->obfd, sect,\n+\t\t\t\t\t\t    print_data);\n \t}\n     }\n \n@@ -446,8 +441,9 @@ maintenance_info_sections (const char *arg, int from_tty)\n       printf_filtered (\"    `%s', \", bfd_get_filename (core_bfd));\n       wrap_here (\"        \");\n       printf_filtered (_(\"file type %s.\\n\"), bfd_get_target (core_bfd));\n-      bfd_map_over_sections (core_bfd, print_bfd_section_info,\n-\t\t\t     (void *) &print_data);\n+\n+      for (asection *sect : gdb_bfd_sections (core_bfd))\n+\tprint_bfd_section_info (core_bfd, sect, print_data);\n     }\n }\n "
    }
  ]
}