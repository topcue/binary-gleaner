{
  "sha": "13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTNhY2I1OGQ0MmU3YzY2ZDBkNjkyNDBjYzZiN2EwZmJmODI5MGRhNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-14T03:12:27Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-14T05:36:11Z"
    },
    "message": "PR27716, build failure for msdosdjgpp: PATH_MAX undeclared\n\nWe shouldn't be using arbitrary limits like PATH_MAX in GNU programs.\nThis patch also fixes some memory leaks in readelf when processing\nseparate debug info.\n\n\tPR 27716\nbinutils/\n\t* objdump.c (show_line): Don't limit paths to PATH_MAX.\n\t* readelf.c (struct filedata): Change program_interpreter from\n\ta char array to a char pointer.\n\t(process_program_headers): Sanity check PT_INTERP p_filesz.\n\tMalloc program_interpreter using p_filesz and read directly from\n\tfile.\n\t(process_dynamic_section): Check program_interpreter is non-NULL.\n\t(free_filedata): New function, split out from..\n\t(process_object): ..here.\n\t(close_debug_file): Call free_filedata.\n\t* sysdep.h: Don't include sys/param.h.\n\t(PATH_MAX): Don't define.\n\t* configure.ac: Don't check for sys/param.h.\n\t* configure: Regenerate.\ngprof/\n\t* gprof.h (PATH_MAX): Don't define.\n\t* corefile.c (core_create_line_syms): Don't use PATH_MAX for initial\n\tfile name size.\n\t* source.c (annotate_source): Malloc file name buffer.  Always\n\ttrim off \"-ann\" when dos 8.3 annotate file matches original.\n\t* utils.c (print_name_only): Malloc file name buffer.",
    "tree": {
      "sha": "d604a4a4ff4ed2999618405c5635f106e4b99e26",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d604a4a4ff4ed2999618405c5635f106e4b99e26"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d20eb46617fc6170e144f80dcbaffbc3f4ff6090"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 132,
    "deletions": 104
  },
  "files": [
    {
      "sha": "5148da4a2197185c5a4df88451d18cbb0825ebb3",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -1,3 +1,21 @@\n+2021-04-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27716\n+\t* objdump.c (show_line): Don't limit paths to PATH_MAX.\n+\t* readelf.c (struct filedata): Change program_interpreter from\n+\ta char array to a char pointer.\n+\t(process_program_headers): Sanity check PT_INTERP p_filesz.\n+\tMalloc program_interpreter using p_filesz and read directly from\n+\tfile.\n+\t(process_dynamic_section): Check program_interpreter is non-NULL.\n+\t(free_filedata): New function, split out from..\n+\t(process_object): ..here.\n+\t(close_debug_file): Call free_filedata.\n+\t* sysdep.h: Don't include sys/param.h.\n+\t(PATH_MAX): Don't define.\n+\t* configure.ac: Don't check for sys/param.h.\n+\t* configure: Regenerate.\n+\n 2021-04-13  Frederic Cambus  <fred@statdns.com>\n \n \t* readelf.c (process_netbsd_elf_note): Remove now unneeded #ifdef"
    },
    {
      "sha": "82720324e0db12679178e5d627171ef2bcb59f0d",
      "filename": "binutils/configure",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -12983,7 +12983,7 @@ _ACEOF\n # guarantees they are available.\n # plugin-api.h tests HAVE_STDINT_H and HAVE_INTTYPES_H\n # Besides those, we need to check anything used in binutils/ not in C99.\n-for ac_header in fcntl.h inttypes.h stdint.h sys/file.h sys/param.h \\\n+for ac_header in fcntl.h inttypes.h stdint.h sys/file.h \\\n \t\t sys/stat.h sys/types.h unistd.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`"
    },
    {
      "sha": "3c5a8e13da3ca88474050dd66f4c20540e2fd494",
      "filename": "binutils/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/configure.ac?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -181,7 +181,7 @@ AC_CHECK_SIZEOF([long long])\n # guarantees they are available.\n # plugin-api.h tests HAVE_STDINT_H and HAVE_INTTYPES_H\n # Besides those, we need to check anything used in binutils/ not in C99.\n-AC_CHECK_HEADERS(fcntl.h inttypes.h stdint.h sys/file.h sys/param.h \\\n+AC_CHECK_HEADERS(fcntl.h inttypes.h stdint.h sys/file.h \\\n \t\t sys/stat.h sys/types.h unistd.h)\n AC_HEADER_SYS_WAIT\n AC_FUNC_MMAP"
    },
    {
      "sha": "39b5793bc2e13c11fc345d1db42fb738c11582b9",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -1739,7 +1739,7 @@ show_line (bfd *abfd, asection *section, bfd_vma addr_offset)\n       char *path_up;\n       const char *fname = filename;\n \n-      path = xmalloc (prefix_length + PATH_MAX + 1);\n+      path = xmalloc (prefix_length + 1 + strlen (filename));\n \n       if (prefix_length)\n \tmemcpy (path, prefix, prefix_length);\n@@ -1762,8 +1762,7 @@ show_line (bfd *abfd, asection *section, bfd_vma addr_offset)\n \t}\n \n       /* Update complete filename.  */\n-      strncpy (path_up, fname, PATH_MAX);\n-      path_up[PATH_MAX] = '\\0';\n+      strcpy (path_up, fname);\n \n       filename = path;\n       reloc = true;"
    },
    {
      "sha": "dc7764a9bb9fbeca7dee70ecad19141a35553f90",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 81,
      "deletions": 70,
      "changes": 151,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -292,7 +292,7 @@ typedef struct filedata\n   bfd_vma *            gnuchains;\n   bfd_vma *            mipsxlat;\n   bfd_vma              gnusymidx;\n-  char                 program_interpreter[PATH_MAX];\n+  char *               program_interpreter;\n   bfd_vma              dynamic_info[DT_ENCODING];\n   bfd_vma              dynamic_info_DT_GNU_HASH;\n   bfd_vma              dynamic_info_DT_MIPS_XHASH;\n@@ -5538,22 +5538,21 @@ the .dynamic section is not the same as the dynamic segment\\n\"));\n \t  break;\n \n \tcase PT_INTERP:\n-\t  if (fseek (filedata->handle,\n-\t\t     filedata->archive_file_offset + (long) segment->p_offset,\n-\t\t     SEEK_SET))\n+\t  if (segment->p_offset >= filedata->file_size\n+\t      || segment->p_filesz > filedata->file_size - segment->p_offset\n+\t      || segment->p_filesz - 1 >= (size_t) -2\n+\t      || fseek (filedata->handle,\n+\t\t\tfiledata->archive_file_offset + (long) segment->p_offset,\n+\t\t\tSEEK_SET))\n \t    error (_(\"Unable to find program interpreter name\\n\"));\n \t  else\n \t    {\n-\t      char fmt [32];\n-\t      int ret = snprintf (fmt, sizeof (fmt), \"%%%ds\", PATH_MAX - 1);\n-\n-\t      if (ret >= (int) sizeof (fmt) || ret < 0)\n-\t\terror (_(\"Internal error: failed to create format string to display program interpreter\\n\"));\n-\n-\t      filedata->program_interpreter[0] = 0;\n-\t      if (fscanf (filedata->handle, fmt,\n-\t\t\t  filedata->program_interpreter) <= 0)\n-\t\terror (_(\"Unable to read program interpreter name\\n\"));\n+\t      size_t len = segment->p_filesz;\n+\t      free (filedata->program_interpreter);\n+\t      filedata->program_interpreter = xmalloc (len + 1);\n+\t      len = fread (filedata->program_interpreter, 1, len,\n+\t\t\t   filedata->handle);\n+\t      filedata->program_interpreter[len] = 0;\n \n \t      if (do_segments)\n \t\tprintf (_(\"      [Requesting program interpreter: %s]\\n\"),\n@@ -11094,7 +11093,8 @@ the .dynstr section doesn't match the DT_STRTAB and DT_STRSZ tags\\n\"));\n \t\t    case DT_NEEDED:\n \t\t      printf (_(\"Shared library: [%s]\"), name);\n \n-\t\t      if (streq (name, filedata->program_interpreter))\n+\t\t      if (filedata->program_interpreter\n+\t\t\t  && streq (name, filedata->program_interpreter))\n \t\t\tprintf (_(\" program interpreter\"));\n \t\t      break;\n \n@@ -21050,6 +21050,70 @@ get_file_header (Filedata * filedata)\n   return true;\n }\n \n+static void\n+free_filedata (Filedata *filedata)\n+{\n+  free (filedata->program_interpreter);\n+  filedata->program_interpreter = NULL;\n+\n+  free (filedata->program_headers);\n+  filedata->program_headers = NULL;\n+\n+  free (filedata->section_headers);\n+  filedata->section_headers = NULL;\n+\n+  free (filedata->string_table);\n+  filedata->string_table = NULL;\n+  filedata->string_table_length = 0;\n+\n+  free (filedata->dump.dump_sects);\n+  filedata->dump.dump_sects = NULL;\n+  filedata->dump.num_dump_sects = 0;\n+\n+  free (filedata->dynamic_strings);\n+  filedata->dynamic_strings = NULL;\n+  filedata->dynamic_strings_length = 0;\n+\n+  free (filedata->dynamic_symbols);\n+  filedata->dynamic_symbols = NULL;\n+  filedata->num_dynamic_syms = 0;\n+\n+  free (filedata->dynamic_syminfo);\n+  filedata->dynamic_syminfo = NULL;\n+\n+  free (filedata->dynamic_section);\n+  filedata->dynamic_section = NULL;\n+\n+  while (filedata->symtab_shndx_list != NULL)\n+    {\n+      elf_section_list *next = filedata->symtab_shndx_list->next;\n+      free (filedata->symtab_shndx_list);\n+      filedata->symtab_shndx_list = next;\n+    }\n+\n+  free (filedata->section_headers_groups);\n+  filedata->section_headers_groups = NULL;\n+\n+  if (filedata->section_groups)\n+    {\n+      size_t i;\n+      struct group_list * g;\n+      struct group_list * next;\n+\n+      for (i = 0; i < filedata->group_count; i++)\n+\t{\n+\t  for (g = filedata->section_groups [i].root; g != NULL; g = next)\n+\t    {\n+\t      next = g->next;\n+\t      free (g);\n+\t    }\n+\t}\n+\n+      free (filedata->section_groups);\n+      filedata->section_groups = NULL;\n+    }\n+}\n+\n static void\n close_file (Filedata * filedata)\n {\n@@ -21064,6 +21128,7 @@ close_file (Filedata * filedata)\n void\n close_debug_file (void * data)\n {\n+  free_filedata ((Filedata *) data);\n   close_file ((Filedata *) data);\n }\n \n@@ -21277,61 +21342,7 @@ process_object (Filedata * filedata)\n   if (! process_arch_specific (filedata))\n     res = false;\n \n-  free (filedata->program_headers);\n-  filedata->program_headers = NULL;\n-\n-  free (filedata->section_headers);\n-  filedata->section_headers = NULL;\n-\n-  free (filedata->string_table);\n-  filedata->string_table = NULL;\n-  filedata->string_table_length = 0;\n-\n-  free (filedata->dump.dump_sects);\n-  filedata->dump.dump_sects = NULL;\n-  filedata->dump.num_dump_sects = 0;\n-\n-  free (filedata->dynamic_strings);\n-  filedata->dynamic_strings = NULL;\n-  filedata->dynamic_strings_length = 0;\n-\n-  free (filedata->dynamic_symbols);\n-  filedata->dynamic_symbols = NULL;\n-  filedata->num_dynamic_syms = 0;\n-\n-  free (filedata->dynamic_syminfo);\n-  filedata->dynamic_syminfo = NULL;\n-\n-  free (filedata->dynamic_section);\n-  filedata->dynamic_section = NULL;\n-\n-  while (filedata->symtab_shndx_list != NULL)\n-    {\n-      elf_section_list *next = filedata->symtab_shndx_list->next;\n-      free (filedata->symtab_shndx_list);\n-      filedata->symtab_shndx_list = next;\n-    }\n-\n-  free (filedata->section_headers_groups);\n-  filedata->section_headers_groups = NULL;\n-\n-  if (filedata->section_groups)\n-    {\n-      struct group_list * g;\n-      struct group_list * next;\n-\n-      for (i = 0; i < filedata->group_count; i++)\n-\t{\n-\t  for (g = filedata->section_groups [i].root; g != NULL; g = next)\n-\t    {\n-\t      next = g->next;\n-\t      free (g);\n-\t    }\n-\t}\n-\n-      free (filedata->section_groups);\n-      filedata->section_groups = NULL;\n-    }\n+  free_filedata (filedata);\n \n   free_debug_memory ();\n "
    },
    {
      "sha": "16601e5d22e5333e012f04e7f376fe67c74acaab",
      "filename": "binutils/sysdep.h",
      "status": "modified",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/sysdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/binutils/sysdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/sysdep.h?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -124,23 +124,8 @@ extern char **environ;\n /* Used by ar.c and objcopy.c.  */\n #define BUFSIZE 8192\n \n-/* For PATH_MAX.  */\n #include <limits.h>\n \n-#ifndef PATH_MAX\n-/* For MAXPATHLEN.  */\n-# ifdef HAVE_SYS_PARAM_H\n-#  include <sys/param.h>\n-# endif\n-# ifndef PATH_MAX\n-#  ifdef MAXPATHLEN\n-#   define PATH_MAX MAXPATHLEN\n-#  else\n-#   define PATH_MAX 1024\n-#  endif\n-# endif\n-#endif\n-\n #if SIZEOF_LONG_LONG > SIZEOF_LONG\n /* We can't use any bfd types here since readelf may define BFD64 and\n    objdump may not.  */"
    },
    {
      "sha": "6e97b43b20f6e105e859eb3c086c370d9aba557b",
      "filename": "gprof/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/ChangeLog?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -1,3 +1,13 @@\n+2021-04-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27716\n+\t* gprof.h (PATH_MAX): Don't define.\n+\t* corefile.c (core_create_line_syms): Don't use PATH_MAX for initial\n+\tfile name size.\n+\t* source.c (annotate_source): Malloc file name buffer.  Always\n+\ttrim off \"-ann\" when dos 8.3 annotate file matches original.\n+\t* utils.c (print_name_only): Malloc file name buffer.\n+\n 2021-04-05  Alan Modra  <amodra@gmail.com>\n \n \t* configure.ac: Check for sys/time.h and setitimer.  Don't invoke"
    },
    {
      "sha": "b5e716dcbf427e244162b06c0374d1e39c9b8333",
      "filename": "gprof/corefile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/corefile.c?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -781,8 +781,8 @@ core_create_line_syms (void)\n \n      Of course, this is rather slow and it would be better if\n      BFD would provide an iterator for enumerating all line infos.  */\n-  prev_name_len = PATH_MAX;\n-  prev_filename_len = PATH_MAX;\n+  prev_name_len = 1024;\n+  prev_filename_len = 1024;\n   prev_name = (char *) xmalloc (prev_name_len);\n   prev_filename = (char *) xmalloc (prev_filename_len);\n   ltab.len = 0;"
    },
    {
      "sha": "1d8d89647727c07584a5e9cd5b9c724ab9ce1c73",
      "filename": "gprof/gprof.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/gprof.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/gprof.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/gprof.h?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -54,10 +54,6 @@\n /* AIX defines hz as a macro.  */\n #undef hz\n \n-#ifndef PATH_MAX\n-#define PATH_MAX\t1024\n-#endif\n-\n #define\tA_OUTNAME\t\"a.out\"\t\t/* default core filename */\n #define\tGMONNAME\t\"gmon.out\"\t/* default profile filename */\n #define\tGMONSUM\t\t\"gmon.sum\"\t/* profile summary filename */"
    },
    {
      "sha": "648276bf37677f2dce1147d6e70323ea64dda400",
      "filename": "gprof/source.c",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/source.c?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -97,14 +97,14 @@ annotate_source (Source_File *sf, unsigned int max_width,\n   int i, line_num, nread;\n   bool new_line;\n   char buf[8192];\n-  char fname[PATH_MAX];\n+  char *fname;\n   char *annotation, *name_only;\n   FILE *ifp, *ofp;\n   Search_List_Elem *sle = src_search_list.head;\n \n   /* Open input file.  If open fails, walk along search-list until\n      open succeeds or reaching end of list.  */\n-  strcpy (fname, sf->name);\n+  fname = (char *) sf->name;\n \n   if (IS_ABSOLUTE_PATH (sf->name))\n     sle = 0;\t\t\t/* Don't use search list for absolute paths.  */\n@@ -116,6 +116,8 @@ annotate_source (Source_File *sf, unsigned int max_width,\n \t\t\t     sf->name, fname));\n \n       ifp = fopen (fname, FOPEN_RB);\n+      if (fname != sf->name)\n+\tfree (fname);\n       if (ifp)\n \tbreak;\n \n@@ -141,6 +143,8 @@ annotate_source (Source_File *sf, unsigned int max_width,\n \n       if (sle)\n \t{\n+\t  fname = xmalloc (strlen (sle->path) + 3\n+\t\t\t   + strlen (name_only ? name_only : sf->name));\n \t  strcpy (fname, sle->path);\n #ifdef HAVE_DOS_BASED_FILE_SYSTEM\n \t  /* d:foo is not the same thing as d:/foo!  */\n@@ -191,6 +195,7 @@ annotate_source (Source_File *sf, unsigned int max_width,\n       else\n \tfilename = sf->name;\n \n+      fname = xmalloc (strlen (filename) + strlen (EXT_ANNO) + 1);\n       strcpy (fname, filename);\n       strcat (fname, EXT_ANNO);\n #ifdef __MSDOS__\n@@ -205,9 +210,9 @@ annotate_source (Source_File *sf, unsigned int max_width,\n \t  {\n \t    char *dot = strrchr (fname, '.');\n \n-\t    if (dot)\n-\t      *dot = '\\0';\n-\t    strcat (fname, \".ann\");\n+\t    if (!dot)\n+\t      dot = fname + strlen (filename);\n+\t    strcpy (dot, \".ann\");\n \t  }\n       }\n #endif\n@@ -216,8 +221,10 @@ annotate_source (Source_File *sf, unsigned int max_width,\n       if (!ofp)\n \t{\n \t  perror (fname);\n+\t  free (fname);\n \t  return 0;\n \t}\n+      free (fname);\n     }\n \n   /* Print file names if output goes to stdout"
    },
    {
      "sha": "2c0489540dc16c0461f04543e977dead3a31ed83",
      "filename": "gprof/utils.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13acb58d42e7c66d0d69240cc6b7a0fbf8290da4/gprof/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gprof/utils.c?ref=13acb58d42e7c66d0d69240cc6b7a0fbf8290da4",
      "patch": "@@ -43,9 +43,7 @@ int\n print_name_only (Sym *self)\n {\n   const char *name = self->name;\n-  const char *filename;\n   char *demangled = 0;\n-  char buf[PATH_MAX];\n   int size = 0;\n \n   if (name)\n@@ -60,7 +58,9 @@ print_name_only (Sym *self)\n       size = strlen (name);\n       if ((line_granularity || inline_file_names) && self->file)\n \t{\n-\t  filename = self->file->name;\n+\t  const char *filename = self->file->name;\n+\t  char *buf;\n+\n \t  if (!print_path)\n \t    {\n \t      filename = strrchr (filename, '/');\n@@ -73,6 +73,7 @@ print_name_only (Sym *self)\n \t\t  filename = self->file->name;\n \t\t}\n \t    }\n+\t  buf = xmalloc (strlen (filename) + 8 + 20 + 16);\n \t  if (line_granularity)\n \t    {\n \t      sprintf (buf, \" (%s:%d @ %lx)\", filename, self->line_num,\n@@ -84,6 +85,7 @@ print_name_only (Sym *self)\n \t    }\n \t  printf (\"%s\", buf);\n \t  size += strlen (buf);\n+\t  free (buf);\n \t}\n       free (demangled);\n       DBG (DFNDEBUG, printf (\"{%d} \", self->cg.top_order));"
    }
  ]
}