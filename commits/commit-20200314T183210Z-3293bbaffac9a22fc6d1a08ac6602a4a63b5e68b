{
  "sha": "3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzI5M2JiYWZmYWM5YTIyZmM2ZDFhMDhhYzY2MDJhNGE2M2I1ZTY4Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T18:11:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T18:32:10Z"
    },
    "message": "Add C parser support for \"restrict\" and \"_Atomic\"\n\nA user noticed that \"watch -location\" would fail with a \"restrict\"\npointer.  The issue here is that if the DWARF mentions \"restrict\", gdb\nwill put this into the type name -- but then the C parser will not be\nable to parse this type.\n\nThis patch adds support for \"restrict\" and \"_Atomic\" to the C parser.\nC++ doesn't have \"restrict\", but does have some GCC extensions.  The\ntype printer is changed to handle this difference as well, so that\nwatch expressions will work properly.\n\ngdb/ChangeLog\n2020-03-14  Tom Tromey  <tom@tromey.com>\n\n\t* c-typeprint.c (cp_type_print_method_args): Print \"__restrict__\"\n\tfor C++.\n\t(c_type_print_modifier): Likewise.  Add \"language\" parameter.\n\t(c_type_print_varspec_prefix, c_type_print_base_struct_union)\n\t(c_type_print_base_1): Update.\n\t* type-stack.h (enum type_pieces) <tp_atomic, tp_restrict>: New\n\tconstants.\n\t* type-stack.c (type_stack::insert): Handle tp_atomic and\n\ttp_restrict.\n\t(type_stack::follow_type_instance_flags): Likewise.\n\t(type_stack::follow_types): Likewise.  Merge type-following code.\n\t* c-exp.y (RESTRICT, ATOMIC): New tokens.\n\t(space_identifier, cv_with_space_id)\n\t(const_or_volatile_or_space_identifier_noopt)\n\t(const_or_volatile_or_space_identifier): Remove.\n\t(single_qualifier, qualifier_seq_noopt, qualifier_seq): New\n\trules.\n\t(ptr_operator, typebase): Update.\n\t(enum token_flag) <FLAG_C>: New constant.\n\t(ident_tokens): Add \"restrict\", \"__restrict__\", \"__restrict\", and\n\t\"_Atomic\".\n\t(lex_one_token): Handle FLAG_C.\n\ngdb/testsuite/ChangeLog\n2020-03-14  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/cvexpr.exp: Add test for _Atomic and restrict.",
    "tree": {
      "sha": "8d10f688849be05aea48fbc1a03ba602211f7133",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8d10f688849be05aea48fbc1a03ba602211f7133"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ab44624cea74dca3e6d19c3275d9d5a8d381c084",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab44624cea74dca3e6d19c3275d9d5a8d381c084",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ab44624cea74dca3e6d19c3275d9d5a8d381c084"
    }
  ],
  "stats": {
    "total": 201,
    "additions": 133,
    "deletions": 68
  },
  "files": [
    {
      "sha": "a0d9758418978981967f5c418ce3291007d396e6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -1,3 +1,28 @@\n+2020-03-14  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-typeprint.c (cp_type_print_method_args): Print \"__restrict__\"\n+\tfor C++.\n+\t(c_type_print_modifier): Likewise.  Add \"language\" parameter.\n+\t(c_type_print_varspec_prefix, c_type_print_base_struct_union)\n+\t(c_type_print_base_1): Update.\n+\t* type-stack.h (enum type_pieces) <tp_atomic, tp_restrict>: New\n+\tconstants.\n+\t* type-stack.c (type_stack::insert): Handle tp_atomic and\n+\ttp_restrict.\n+\t(type_stack::follow_type_instance_flags): Likewise.\n+\t(type_stack::follow_types): Likewise.  Merge type-following code.\n+\t* c-exp.y (RESTRICT, ATOMIC): New tokens.\n+\t(space_identifier, cv_with_space_id)\n+\t(const_or_volatile_or_space_identifier_noopt)\n+\t(const_or_volatile_or_space_identifier): Remove.\n+\t(single_qualifier, qualifier_seq_noopt, qualifier_seq): New\n+\trules.\n+\t(ptr_operator, typebase): Update.\n+\t(enum token_flag) <FLAG_C>: New constant.\n+\t(ident_tokens): Add \"restrict\", \"__restrict__\", \"__restrict\", and\n+\t\"_Atomic\".\n+\t(lex_one_token): Handle FLAG_C.\n+\n 2020-03-14  Kamil Rytarowski  <n54@gmx.com>\n \n \t* m68k-bsd-nat.c (fetch_registers): New variable lwp and pass"
    },
    {
      "sha": "50a2eef98b58614bf41cafada3359167e92bae8f",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 39,
      "deletions": 17,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -237,6 +237,7 @@ static void c_print_token (FILE *file, int type, YYSTYPE value);\n /* Special type cases, put in to allow the parser to distinguish different\n    legal basetypes.  */\n %token SIGNED_KEYWORD LONG SHORT INT_KEYWORD CONST_KEYWORD VOLATILE_KEYWORD DOUBLE_KEYWORD\n+%token RESTRICT ATOMIC\n \n %token <sval> DOLLAR_VARIABLE\n \n@@ -1169,36 +1170,43 @@ variable:\tname_not_typename\n \t\t\t}\n \t;\n \n-space_identifier : '@' NAME\n-\t\t{\n-\t\t  cpstate->type_stack.insert (pstate,\n-\t\t\t\t\t      copy_name ($2.stoken).c_str ());\n-\t\t}\n-\t;\n-\n const_or_volatile: const_or_volatile_noopt\n \t|\n \t;\n \n-cv_with_space_id : const_or_volatile space_identifier const_or_volatile\n+single_qualifier:\n+\t\tCONST_KEYWORD\n+\t\t\t{ cpstate->type_stack.insert (tp_const); }\n+\t| \tVOLATILE_KEYWORD\n+\t\t\t{ cpstate->type_stack.insert (tp_volatile); }\n+\t| \tATOMIC\n+\t\t\t{ cpstate->type_stack.insert (tp_atomic); }\n+\t| \tRESTRICT\n+\t\t\t{ cpstate->type_stack.insert (tp_restrict); }\n+\t|\t'@' NAME\n+\t\t{\n+\t\t  cpstate->type_stack.insert (pstate,\n+\t\t\t\t\t      copy_name ($2.stoken).c_str ());\n+\t\t}\n \t;\n \n-const_or_volatile_or_space_identifier_noopt: cv_with_space_id\n-\t| const_or_volatile_noopt\n+qualifier_seq_noopt:\n+\t\tsingle_qualifier\n+\t| \tqualifier_seq single_qualifier\n \t;\n \n-const_or_volatile_or_space_identifier:\n-\t\tconst_or_volatile_or_space_identifier_noopt\n+qualifier_seq:\n+\t\tqualifier_seq_noopt\n \t|\n \t;\n \n ptr_operator:\n \t\tptr_operator '*'\n \t\t\t{ cpstate->type_stack.insert (tp_pointer); }\n-\t\tconst_or_volatile_or_space_identifier\n+\t\tqualifier_seq\n \t|\t'*'\n \t\t\t{ cpstate->type_stack.insert (tp_pointer); }\n-\t\tconst_or_volatile_or_space_identifier\n+\t\tqualifier_seq\n \t|\t'&'\n \t\t\t{ cpstate->type_stack.insert (tp_reference); }\n \t|\t'&' ptr_operator\n@@ -1472,9 +1480,9 @@ typebase\n \t\t\t    (copy_name($2).c_str (), $4,\n \t\t\t     pstate->expression_context_block);\n \t\t\t}\n-\t| const_or_volatile_or_space_identifier_noopt typebase\n+\t|\tqualifier_seq_noopt typebase\n \t\t\t{ $$ = cpstate->type_stack.follow_types ($2); }\n-\t| typebase const_or_volatile_or_space_identifier_noopt\n+\t|\ttypebase qualifier_seq_noopt\n \t\t\t{ $$ = cpstate->type_stack.follow_types ($1); }\n \t;\n \n@@ -2345,11 +2353,15 @@ enum token_flag\n \n   FLAG_CXX = 1,\n \n+  /* If this bit is set, the token is C-only.  */\n+\n+  FLAG_C = 2,\n+\n   /* If this bit is set, the token is conditional: if there is a\n      symbol of the same name, then the token is a symbol; otherwise,\n      the token is a keyword.  */\n \n-  FLAG_SHADOW = 2\n+  FLAG_SHADOW = 4\n };\n DEF_ENUM_FLAGS_TYPE (enum token_flag, token_flags);\n \n@@ -2416,6 +2428,10 @@ static const struct token ident_tokens[] =\n     {\"union\", UNION, OP_NULL, 0},\n     {\"short\", SHORT, OP_NULL, 0},\n     {\"const\", CONST_KEYWORD, OP_NULL, 0},\n+    {\"restrict\", RESTRICT, OP_NULL, FLAG_C | FLAG_SHADOW},\n+    {\"__restrict__\", RESTRICT, OP_NULL, 0},\n+    {\"__restrict\", RESTRICT, OP_NULL, 0},\n+    {\"_Atomic\", ATOMIC, OP_NULL, 0},\n     {\"enum\", ENUM, OP_NULL, 0},\n     {\"long\", LONG, OP_NULL, 0},\n     {\"true\", TRUEKEYWORD, OP_NULL, FLAG_CXX},\n@@ -2550,6 +2566,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n \tif ((tokentab3[i].flags & FLAG_CXX) != 0\n \t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n+\tgdb_assert ((tokentab3[i].flags & FLAG_C) == 0);\n \n \tpstate->lexptr += 3;\n \tyylval.opcode = tokentab3[i].opcode;\n@@ -2563,6 +2580,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n \tif ((tokentab2[i].flags & FLAG_CXX) != 0\n \t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n+\tgdb_assert ((tokentab3[i].flags & FLAG_C) == 0);\n \n \tpstate->lexptr += 2;\n \tyylval.opcode = tokentab2[i].opcode;\n@@ -2857,6 +2875,10 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n \tif ((ident_tokens[i].flags & FLAG_CXX) != 0\n \t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n+\tif ((ident_tokens[i].flags & FLAG_C) != 0\n+\t    && par_state->language ()->la_language != language_c\n+\t    && par_state->language ()->la_language != language_objc)\n+\t  break;\n \n \tif ((ident_tokens[i].flags & FLAG_SHADOW) != 0)\n \t  {"
    },
    {
      "sha": "50d0eaa2ddedb8c863f51cf0a703aef35e996576",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -58,7 +58,7 @@ static void c_type_print_varspec_prefix (struct type *,\n /* Print \"const\", \"volatile\", or address space modifiers.  */\n static void c_type_print_modifier (struct type *,\n \t\t\t\t   struct ui_file *,\n-\t\t\t\t   int, int);\n+\t\t\t\t   int, int, enum language);\n \n static void c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t\t\t\t int show, int level, enum language language,\n@@ -337,7 +337,9 @@ cp_type_print_method_args (struct type *mtype, const char *prefix,\n \tfprintf_filtered (stream, \" volatile\");\n \n       if (TYPE_RESTRICT (domain))\n-\tfprintf_filtered (stream, \" restrict\");\n+\tfprintf_filtered (stream, (language == language_cplus\n+\t\t\t\t   ? \" __restrict__\"\n+\t\t\t\t   : \" restrict\"));\n \n       if (TYPE_ATOMIC (domain))\n \tfprintf_filtered (stream, \" _Atomic\");\n@@ -383,7 +385,7 @@ c_type_print_varspec_prefix (struct type *type,\n \t\t\t\t   stream, show, 1, 1, language, flags,\n \t\t\t\t   podata);\n       fprintf_filtered (stream, \"*\");\n-      c_type_print_modifier (type, stream, 1, need_post_space);\n+      c_type_print_modifier (type, stream, 1, need_post_space, language);\n       break;\n \n     case TYPE_CODE_MEMBERPTR:\n@@ -420,7 +422,7 @@ c_type_print_varspec_prefix (struct type *type,\n \t\t\t\t   stream, show, 1, 0, language, flags,\n \t\t\t\t   podata);\n       fprintf_filtered (stream, TYPE_CODE(type) == TYPE_CODE_REF ? \"&\" : \"&&\");\n-      c_type_print_modifier (type, stream, 1, need_post_space);\n+      c_type_print_modifier (type, stream, 1, need_post_space, language);\n       break;\n \n     case TYPE_CODE_METHOD:\n@@ -481,7 +483,8 @@ c_type_print_varspec_prefix (struct type *type,\n \n static void\n c_type_print_modifier (struct type *type, struct ui_file *stream,\n-\t\t       int need_pre_space, int need_post_space)\n+\t\t       int need_pre_space, int need_post_space,\n+\t\t       enum language language)\n {\n   int did_print_modifier = 0;\n   const char *address_space_id;\n@@ -509,7 +512,9 @@ c_type_print_modifier (struct type *type, struct ui_file *stream,\n     {\n       if (did_print_modifier || need_pre_space)\n \tfprintf_filtered (stream, \" \");\n-      fprintf_filtered (stream, \"restrict\");\n+      fprintf_filtered (stream, (language == language_cplus\n+\t\t\t\t ? \"__restrict__\"\n+\t\t\t\t : \"restrict\"));\n       did_print_modifier = 1;\n     }\n \n@@ -1050,7 +1055,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n       hash_holder.reset (local_flags.local_typedefs);\n     }\n \n-  c_type_print_modifier (type, stream, 0, 1);\n+  c_type_print_modifier (type, stream, 0, 1, language);\n   if (TYPE_CODE (type) == TYPE_CODE_UNION)\n     fprintf_filtered (stream, \"union \");\n   else if (TYPE_DECLARED_CLASS (type))\n@@ -1477,7 +1482,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n   if (show <= 0\n       && TYPE_NAME (type) != NULL)\n     {\n-      c_type_print_modifier (type, stream, 0, 1);\n+      c_type_print_modifier (type, stream, 0, 1, language);\n \n       /* If we have \"typedef struct foo {. . .} bar;\" do we want to\n \t print it as \"struct foo\" or as \"bar\"?  Pick the latter for\n@@ -1542,7 +1547,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n       break;\n \n     case TYPE_CODE_ENUM:\n-      c_type_print_modifier (type, stream, 0, 1);\n+      c_type_print_modifier (type, stream, 0, 1, language);\n       fprintf_filtered (stream, \"enum \");\n       if (TYPE_DECLARED_CLASS (type))\n \tfprintf_filtered (stream, \"class \");\n@@ -1615,7 +1620,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \n \tlocal_flags.local_typedefs = NULL;\n \n-\tc_type_print_modifier (type, stream, 0, 1);\n+\tc_type_print_modifier (type, stream, 0, 1, language);\n \tfprintf_filtered (stream, \"flag \");\n \tprint_name_maybe_canonical (TYPE_NAME (type), flags, stream);\n \tif (show > 0)\n@@ -1689,7 +1694,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n          type name, then complain.  */\n       if (TYPE_NAME (type) != NULL)\n \t{\n-\t  c_type_print_modifier (type, stream, 0, 1);\n+\t  c_type_print_modifier (type, stream, 0, 1, language);\n \t  print_name_maybe_canonical (TYPE_NAME (type), flags, stream);\n \t}\n       else"
    },
    {
      "sha": "a3114d3f574614e85442d381be88b98a47146c72",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-14  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/cvexpr.exp: Add test for _Atomic and restrict.\n+\n 2020-03-14  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.mi/mi-fortran-modules.exp: Use exp_continue."
    },
    {
      "sha": "d905198a72c3e5abd5398dad4d31d9ad091731be",
      "filename": "gdb/testsuite/gdb.base/cvexpr.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/testsuite/gdb.base/cvexpr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/testsuite/gdb.base/cvexpr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/cvexpr.exp?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -509,3 +509,14 @@ foreach testspec $specs {\n \tdo_test $prefix $opts\n     }\n }\n+\n+# These tests don't rely on the debug format.\n+gdb_test \"ptype _Atomic int\" \"type = _Atomic int\"\n+gdb_test \"ptype int * restrict\" \"type = int \\\\* restrict\"\n+\n+# C++ does not have \"restrict\".\n+gdb_test_no_output \"set lang c++\"\n+gdb_test \"ptype int * restrict\" \"A syntax error in expression.*\"\n+\n+# There is a GCC extension for __restrict__, though.\n+gdb_test \"ptype int * __restrict__\" \"type = int \\\\* __restrict__\""
    },
    {
      "sha": "73b7d5a8dfc0a6dd32d1ab356dad1c280e797232",
      "filename": "gdb/type-stack.c",
      "status": "modified",
      "additions": 36,
      "deletions": 40,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/type-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/type-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/type-stack.c?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -33,12 +33,14 @@ type_stack::insert (enum type_pieces tp)\n \n   gdb_assert (tp == tp_pointer || tp == tp_reference\n \t      || tp == tp_rvalue_reference || tp == tp_const\n-\t      || tp == tp_volatile);\n+\t      || tp == tp_volatile || tp == tp_restrict\n+\t      || tp == tp_atomic);\n \n   /* If there is anything on the stack (we know it will be a\n      tp_pointer), insert the qualifier above it.  Otherwise, simply\n      push this on the top of the stack.  */\n-  if (!m_elements.empty () && (tp == tp_const || tp == tp_volatile))\n+  if (!m_elements.empty () && (tp == tp_const || tp == tp_volatile\n+\t\t\t       || tp == tp_restrict))\n     slot = 1;\n   else\n     slot = 0;\n@@ -88,6 +90,12 @@ type_stack::follow_type_instance_flags ()\n       case tp_volatile:\n \tflags |= TYPE_INSTANCE_FLAG_VOLATILE;\n \tbreak;\n+      case tp_atomic:\n+\tflags |= TYPE_INSTANCE_FLAG_ATOMIC;\n+\tbreak;\n+      case tp_restrict:\n+\tflags |= TYPE_INSTANCE_FLAG_RESTRICT;\n+\tbreak;\n       default:\n \tgdb_assert_not_reached (\"unrecognized tp_ value in follow_types\");\n       }\n@@ -102,26 +110,16 @@ type_stack::follow_types (struct type *follow_type)\n   int make_const = 0;\n   int make_volatile = 0;\n   int make_addr_space = 0;\n+  bool make_restrict = false;\n+  bool make_atomic = false;\n   int array_size;\n \n   while (!done)\n     switch (pop ())\n       {\n       case tp_end:\n \tdone = 1;\n-\tif (make_const)\n-\t  follow_type = make_cv_type (make_const, \n-\t\t\t\t      TYPE_VOLATILE (follow_type), \n-\t\t\t\t      follow_type, 0);\n-\tif (make_volatile)\n-\t  follow_type = make_cv_type (TYPE_CONST (follow_type), \n-\t\t\t\t      make_volatile, \n-\t\t\t\t      follow_type, 0);\n-\tif (make_addr_space)\n-\t  follow_type = make_type_with_address_space (follow_type, \n-\t\t\t\t\t\t      make_addr_space);\n-\tmake_const = make_volatile = 0;\n-\tmake_addr_space = 0;\n+\tgoto process_qualifiers;\n \tbreak;\n       case tp_const:\n \tmake_const = 1;\n@@ -132,41 +130,39 @@ type_stack::follow_types (struct type *follow_type)\n       case tp_space_identifier:\n \tmake_addr_space = pop_int ();\n \tbreak;\n+      case tp_atomic:\n+\tmake_atomic = true;\n+\tbreak;\n+      case tp_restrict:\n+\tmake_restrict = true;\n+\tbreak;\n       case tp_pointer:\n \tfollow_type = lookup_pointer_type (follow_type);\n+\tgoto process_qualifiers;\n+      case tp_reference:\n+\tfollow_type = lookup_lvalue_reference_type (follow_type);\n+\tgoto process_qualifiers;\n+      case tp_rvalue_reference:\n+\tfollow_type = lookup_rvalue_reference_type (follow_type);\n+      process_qualifiers:\n \tif (make_const)\n-\t  follow_type = make_cv_type (make_const, \n-\t\t\t\t      TYPE_VOLATILE (follow_type), \n+\t  follow_type = make_cv_type (make_const,\n+\t\t\t\t      TYPE_VOLATILE (follow_type),\n \t\t\t\t      follow_type, 0);\n \tif (make_volatile)\n-\t  follow_type = make_cv_type (TYPE_CONST (follow_type), \n-\t\t\t\t      make_volatile, \n+\t  follow_type = make_cv_type (TYPE_CONST (follow_type),\n+\t\t\t\t      make_volatile,\n \t\t\t\t      follow_type, 0);\n \tif (make_addr_space)\n-\t  follow_type = make_type_with_address_space (follow_type, \n+\t  follow_type = make_type_with_address_space (follow_type,\n \t\t\t\t\t\t      make_addr_space);\n+\tif (make_restrict)\n+\t  follow_type = make_restrict_type (follow_type);\n+\tif (make_atomic)\n+\t  follow_type = make_atomic_type (follow_type);\n \tmake_const = make_volatile = 0;\n \tmake_addr_space = 0;\n-\tbreak;\n-      case tp_reference:\n-\t follow_type = lookup_lvalue_reference_type (follow_type);\n-\t goto process_reference;\n-\tcase tp_rvalue_reference:\n-\t follow_type = lookup_rvalue_reference_type (follow_type);\n-\tprocess_reference:\n-\t if (make_const)\n-\t   follow_type = make_cv_type (make_const,\n-\t\t\t\t       TYPE_VOLATILE (follow_type),\n-\t\t\t\t       follow_type, 0);\n-\t if (make_volatile)\n-\t   follow_type = make_cv_type (TYPE_CONST (follow_type),\n-\t\t\t\t       make_volatile,\n-\t\t\t\t       follow_type, 0);\n-\t if (make_addr_space)\n-\t   follow_type = make_type_with_address_space (follow_type,\n-\t\t\t\t\t\t       make_addr_space);\n-\tmake_const = make_volatile = 0;\n-\tmake_addr_space = 0;\n+\tmake_restrict = make_atomic = false;\n \tbreak;\n       case tp_array:\n \tarray_size = pop_int ();"
    },
    {
      "sha": "8060f2fea7827e4b839b439e23f62ebf332ef4d6",
      "filename": "gdb/type-stack.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/type-stack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b/gdb/type-stack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/type-stack.h?ref=3293bbaffac9a22fc6d1a08ac6602a4a63b5e68b",
      "patch": "@@ -40,6 +40,8 @@ enum type_pieces\n     tp_const, \n     tp_volatile, \n     tp_space_identifier,\n+    tp_atomic,\n+    tp_restrict,\n     tp_type_stack,\n     tp_kind\n   };"
    }
  ]
}