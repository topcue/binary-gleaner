{
  "sha": "168c9250f292bf8d2db6dba374232e3655c10d94",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTY4YzkyNTBmMjkyYmY4ZDJkYjZkYmEzNzQyMzJlMzY1NWMxMGQ5NA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:14:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:40Z"
    },
    "message": "Pass dwarf2_per_bfd instead of dwarf2_per_objfile to some index-related functions\n\nAll these functions actually only need to receive a dwarf2_per_bfd, pass\nthat instead of dwarf2_per_objfile.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (create_cu_from_index_list): Replace\n\tdwarf2_per_objfile parameter with dwarf2_per_bfd.\n\t(create_cus_from_index_list): Likewise.\n\t(create_cus_from_index): Likewise.\n\t(create_signatured_type_table_from_index): Likewise.\n\t(create_cus_from_debug_names_list): Likewise.\n\t(create_cus_from_debug_names): Likewise.\n\t(dwarf2_read_gdb_index): Update.\n\t(dwarf2_read_debug_names): Update.\n\nChange-Id: I8cd7dc04bf815723a48745e7e9b283663dccc1ac",
    "tree": {
      "sha": "6cc5d53868dec66df0783f06a82f9ca01e35136d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6cc5d53868dec66df0783f06a82f9ca01e35136d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/168c9250f292bf8d2db6dba374232e3655c10d94",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/168c9250f292bf8d2db6dba374232e3655c10d94",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/168c9250f292bf8d2db6dba374232e3655c10d94",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/168c9250f292bf8d2db6dba374232e3655c10d94/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e286671bf99ab870d67431068e863c1c57631b1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e286671bf99ab870d67431068e863c1c57631b1f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e286671bf99ab870d67431068e863c1c57631b1f"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 55,
    "deletions": 47
  },
  "files": [
    {
      "sha": "191fb83cb4f975c40d65b85978964b0dd3621a29",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/168c9250f292bf8d2db6dba374232e3655c10d94/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/168c9250f292bf8d2db6dba374232e3655c10d94/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=168c9250f292bf8d2db6dba374232e3655c10d94",
      "patch": "@@ -1,3 +1,15 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.c (create_cu_from_index_list): Replace\n+\tdwarf2_per_objfile parameter with dwarf2_per_bfd.\n+\t(create_cus_from_index_list): Likewise.\n+\t(create_cus_from_index): Likewise.\n+\t(create_signatured_type_table_from_index): Likewise.\n+\t(create_cus_from_debug_names_list): Likewise.\n+\t(create_cus_from_debug_names): Likewise.\n+\t(dwarf2_read_gdb_index): Update.\n+\t(dwarf2_read_debug_names): Update.\n+\n 2020-05-27  Tom Tromey  <tom@tromey.com>\n \t    Simon Marchi  <simon.marchi@efficios.com>\n "
    },
    {
      "sha": "0678c8edce84c4921adece3b0b8c65f098808608",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 43,
      "deletions": 47,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/168c9250f292bf8d2db6dba374232e3655c10d94/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/168c9250f292bf8d2db6dba374232e3655c10d94/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=168c9250f292bf8d2db6dba374232e3655c10d94",
      "patch": "@@ -2474,20 +2474,20 @@ dwarf2_per_bfd::allocate_signatured_type ()\n   return result;\n }\n \n-/* Return a new dwarf2_per_cu_data allocated on the dwarf2_per_objfile\n+/* Return a new dwarf2_per_cu_data allocated on the per-bfd\n    obstack, and constructed with the specified field values.  */\n \n static dwarf2_per_cu_data *\n-create_cu_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-                          struct dwarf2_section_info *section,\n-                          int is_dwz,\n-                          sect_offset sect_off, ULONGEST length)\n+create_cu_from_index_list (dwarf2_per_bfd *per_bfd,\n+\t\t\t   struct dwarf2_section_info *section,\n+\t\t\t   int is_dwz,\n+\t\t\t   sect_offset sect_off, ULONGEST length)\n {\n-  dwarf2_per_cu_data *the_cu = dwarf2_per_objfile->per_bfd->allocate_per_cu ();\n+  dwarf2_per_cu_data *the_cu = per_bfd->allocate_per_cu ();\n   the_cu->sect_off = sect_off;\n   the_cu->length = length;\n   the_cu->section = section;\n-  the_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n+  the_cu->v.quick = OBSTACK_ZALLOC (&per_bfd->obstack,\n \t\t\t\t    struct dwarf2_per_cu_quick_data);\n   the_cu->is_dwz = is_dwz;\n   return the_cu;\n@@ -2497,7 +2497,7 @@ create_cu_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n    CUs.  */\n \n static void\n-create_cus_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+create_cus_from_index_list (dwarf2_per_bfd *per_bfd,\n \t\t\t    const gdb_byte *cu_list, offset_type n_elements,\n \t\t\t    struct dwarf2_section_info *section,\n \t\t\t    int is_dwz)\n@@ -2512,46 +2512,43 @@ create_cus_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       cu_list += 2 * 8;\n \n       dwarf2_per_cu_data *per_cu\n-\t= create_cu_from_index_list (dwarf2_per_objfile, section, is_dwz,\n-\t\t\t\t     sect_off, length);\n-      dwarf2_per_objfile->per_bfd->all_comp_units.push_back (per_cu);\n+\t= create_cu_from_index_list (per_bfd, section, is_dwz, sect_off,\n+\t\t\t\t     length);\n+      per_bfd->all_comp_units.push_back (per_cu);\n     }\n }\n \n /* Read the CU list from the mapped index, and use it to create all\n-   the CU objects for this objfile.  */\n+   the CU objects for PER_BFD.  */\n \n static void\n-create_cus_from_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+create_cus_from_index (dwarf2_per_bfd *per_bfd,\n \t\t       const gdb_byte *cu_list, offset_type cu_list_elements,\n \t\t       const gdb_byte *dwz_list, offset_type dwz_elements)\n {\n-  gdb_assert (dwarf2_per_objfile->per_bfd->all_comp_units.empty ());\n-  dwarf2_per_objfile->per_bfd->all_comp_units.reserve\n-    ((cu_list_elements + dwz_elements) / 2);\n+  gdb_assert (per_bfd->all_comp_units.empty ());\n+  per_bfd->all_comp_units.reserve ((cu_list_elements + dwz_elements) / 2);\n \n-  create_cus_from_index_list (dwarf2_per_objfile, cu_list, cu_list_elements,\n-\t\t\t      &dwarf2_per_objfile->per_bfd->info, 0);\n+  create_cus_from_index_list (per_bfd, cu_list, cu_list_elements,\n+\t\t\t      &per_bfd->info, 0);\n \n   if (dwz_elements == 0)\n     return;\n \n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n-  create_cus_from_index_list (dwarf2_per_objfile, dwz_list, dwz_elements,\n+  dwz_file *dwz = dwarf2_get_dwz_file (per_bfd);\n+  create_cus_from_index_list (per_bfd, dwz_list, dwz_elements,\n \t\t\t      &dwz->info, 1);\n }\n \n /* Create the signatured type hash table from the index.  */\n \n static void\n create_signatured_type_table_from_index\n-  (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-   struct dwarf2_section_info *section,\n-   const gdb_byte *bytes,\n-   offset_type elements)\n+  (dwarf2_per_bfd *per_bfd, struct dwarf2_section_info *section,\n+   const gdb_byte *bytes, offset_type elements)\n {\n-  gdb_assert (dwarf2_per_objfile->per_bfd->all_type_units.empty ());\n-  dwarf2_per_objfile->per_bfd->all_type_units.reserve (elements / 3);\n+  gdb_assert (per_bfd->all_type_units.empty ());\n+  per_bfd->all_type_units.reserve (elements / 3);\n \n   htab_up sig_types_hash = allocate_signatured_type_table ();\n \n@@ -2571,23 +2568,23 @@ create_signatured_type_table_from_index\n       signature = extract_unsigned_integer (bytes + 16, 8, BFD_ENDIAN_LITTLE);\n       bytes += 3 * 8;\n \n-      sig_type = dwarf2_per_objfile->per_bfd->allocate_signatured_type ();\n+      sig_type = per_bfd->allocate_signatured_type ();\n       sig_type->signature = signature;\n       sig_type->type_offset_in_tu = type_offset_in_tu;\n       sig_type->per_cu.is_debug_types = 1;\n       sig_type->per_cu.section = section;\n       sig_type->per_cu.sect_off = sect_off;\n       sig_type->per_cu.v.quick\n-\t= OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n+\t= OBSTACK_ZALLOC (&per_bfd->obstack,\n \t\t\t  struct dwarf2_per_cu_quick_data);\n \n       slot = htab_find_slot (sig_types_hash.get (), sig_type, INSERT);\n       *slot = sig_type;\n \n-      dwarf2_per_objfile->per_bfd->all_type_units.push_back (sig_type);\n+      per_bfd->all_type_units.push_back (sig_type);\n     }\n \n-  dwarf2_per_objfile->per_bfd->signatured_types = std::move (sig_types_hash);\n+  per_bfd->signatured_types = std::move (sig_types_hash);\n }\n \n /* Create the signatured type hash table from .debug_names.  */\n@@ -3106,7 +3103,7 @@ dwarf2_read_gdb_index\n \t}\n     }\n \n-  create_cus_from_index (dwarf2_per_objfile, cu_list, cu_list_elements,\n+  create_cus_from_index (dwarf2_per_objfile->per_bfd, cu_list, cu_list_elements,\n \t\t\t dwz_list, dwz_list_elements);\n \n   if (types_list_elements)\n@@ -3118,8 +3115,9 @@ dwarf2_read_gdb_index\n \n       dwarf2_section_info *section = &dwarf2_per_objfile->per_bfd->types[0];\n \n-      create_signatured_type_table_from_index (dwarf2_per_objfile, section,\n-\t\t\t\t\t       types_list, types_list_elements);\n+      create_signatured_type_table_from_index (dwarf2_per_objfile->per_bfd,\n+\t\t\t\t\t       section, types_list,\n+\t\t\t\t\t       types_list_elements);\n     }\n \n   create_addrmap_from_index (dwarf2_per_objfile, map.get ());\n@@ -5117,7 +5115,7 @@ read_debug_names_from_section (struct objfile *objfile,\n    list.  */\n \n static void\n-create_cus_from_debug_names_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+create_cus_from_debug_names_list (dwarf2_per_bfd *per_bfd,\n \t\t\t\t  const mapped_debug_names &map,\n \t\t\t\t  dwarf2_section_info &section,\n \t\t\t\t  bool is_dwz)\n@@ -5136,9 +5134,8 @@ create_cus_from_debug_names_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t   the next CU as end of this CU.  We create the CUs here with length 0,\n \t   and in cutu_reader::cutu_reader we'll fill in the actual length.  */\n \tdwarf2_per_cu_data *per_cu\n-\t  = create_cu_from_index_list (dwarf2_per_objfile, &section, is_dwz,\n-\t\t\t\t       sect_off, 0);\n-\tdwarf2_per_objfile->per_bfd->all_comp_units.push_back (per_cu);\n+\t  = create_cu_from_index_list (per_bfd, &section, is_dwz, sect_off, 0);\n+\tper_bfd->all_comp_units.push_back (per_cu);\n       }\n     }\n \n@@ -5160,9 +5157,9 @@ create_cus_from_debug_names_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t{\n \t  const ULONGEST length = sect_off_next - sect_off_prev;\n \t  dwarf2_per_cu_data *per_cu\n-\t    = create_cu_from_index_list (dwarf2_per_objfile, &section, is_dwz,\n+\t    = create_cu_from_index_list (per_bfd, &section, is_dwz,\n \t\t\t\t\t sect_off_prev, length);\n-\t  dwarf2_per_objfile->per_bfd->all_comp_units.push_back (per_cu);\n+\t  per_bfd->all_comp_units.push_back (per_cu);\n \t}\n       sect_off_prev = sect_off_next;\n     }\n@@ -5172,22 +5169,21 @@ create_cus_from_debug_names_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n    the CU objects for this dwarf2_per_objfile.  */\n \n static void\n-create_cus_from_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+create_cus_from_debug_names (dwarf2_per_bfd *per_bfd,\n \t\t\t     const mapped_debug_names &map,\n \t\t\t     const mapped_debug_names &dwz_map)\n {\n-  gdb_assert (dwarf2_per_objfile->per_bfd->all_comp_units.empty ());\n-  dwarf2_per_objfile->per_bfd->all_comp_units.reserve (map.cu_count + dwz_map.cu_count);\n+  gdb_assert (per_bfd->all_comp_units.empty ());\n+  per_bfd->all_comp_units.reserve (map.cu_count + dwz_map.cu_count);\n \n-  create_cus_from_debug_names_list (dwarf2_per_objfile, map,\n-\t\t\t\t    dwarf2_per_objfile->per_bfd->info,\n+  create_cus_from_debug_names_list (per_bfd, map, per_bfd->info,\n \t\t\t\t    false /* is_dwz */);\n \n   if (dwz_map.cu_count == 0)\n     return;\n \n-  dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n-  create_cus_from_debug_names_list (dwarf2_per_objfile, dwz_map, dwz->info,\n+  dwz_file *dwz = dwarf2_get_dwz_file (per_bfd);\n+  create_cus_from_debug_names_list (per_bfd, dwz_map, dwz->info,\n \t\t\t\t    true /* is_dwz */);\n }\n \n@@ -5226,7 +5222,7 @@ dwarf2_read_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t}\n     }\n \n-  create_cus_from_debug_names (dwarf2_per_objfile, *map, dwz_map);\n+  create_cus_from_debug_names (dwarf2_per_objfile->per_bfd, *map, dwz_map);\n \n   if (map->tu_count != 0)\n     {"
    }
  ]
}