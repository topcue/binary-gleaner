{
  "sha": "36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzZmNjFiZjJhZDkzNmVkZmI3NmVkYTcwNmViM2IwODFhNjFkNWE1YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-01T23:34:52Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-02T04:18:21Z"
    },
    "message": "PTR_ADD and NPTR_ADD for bfd.h\n\nThis defines a couple of macros used to avoid ubsan complaints about\ncalculations involving NULL pointers.  PTR_ADD should be used in the\ncase where it is known that the offset is always zero with a NULL\npointer, and you'd like to know if a non-zero offset is ever used.\nNPTR_ADD should be rarely used, but is defined for cases where a\nnon-zero offset is expected and should be ignored if the pointer is\nNULL.\n\nbfd/\n\t* bfd-in.h (PTR_ADD, NPTR_ADD): Define.\n\t* bfd-in2.h: Regenerate.\n\t* elf-eh-frame.c (adjust_eh_frame_local_symbols): Avoid NULL\n\tpointer calculations.\n\t* elflink.c (_bfd_elf_strip_zero_sized_dynamic_sections): Likewise.\n\t(bfd_elf_add_dt_needed_tag, elf_finalize_dynstr): Likewise.\n\t(elf_link_add_object_symbols, elf_link_input_bfd): Likewise.\n\t(bfd_elf_final_link, bfd_elf_gc_record_vtinherit): Likewise.\nbinutils/\n\t* objdump.c (disassemble_section): Use PTR_ADD for rel_ppend.",
    "tree": {
      "sha": "e8eac96abd2209a4b3e23dae781487f53352f056",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8eac96abd2209a4b3e23dae781487f53352f056"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "76aa354424729aafdabdf4929aa9751c6fdee081",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76aa354424729aafdabdf4929aa9751c6fdee081",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/76aa354424729aafdabdf4929aa9751c6fdee081"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 39,
    "deletions": 26
  },
  "files": [
    {
      "sha": "12176433045662686b26d0c26d4048638ce55f9d",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "patch": "@@ -113,6 +113,11 @@ typedef struct bfd bfd;\n # define TRUE 1\n #endif\n \n+/* Silence \"applying zero offset to null pointer\" UBSAN warnings.  */\n+#define PTR_ADD(P,A) ((A) ? (P) + (A) : (P))\n+/* Also prevent non-zero offsets from being applied to a null pointer.  */\n+#define NPTR_ADD(P,A) ((P) ? (P) + (A) : (P))\n+\n #ifdef BFD64\n \n #ifndef BFD_HOST_64_BIT"
    },
    {
      "sha": "a0faeafc3dc9f6a645f373b5dcf1b84a6160c0c6",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "patch": "@@ -120,6 +120,11 @@ typedef struct bfd bfd;\n # define TRUE 1\n #endif\n \n+/* Silence \"applying zero offset to null pointer\" UBSAN warnings.  */\n+#define PTR_ADD(P,A) ((A) ? (P) + (A) : (P))\n+/* Also prevent non-zero offsets from being applied to a null pointer.  */\n+#define NPTR_ADD(P,A) ((P) ? (P) + (A) : (P))\n+\n #ifdef BFD64\n \n #ifndef BFD_HOST_64_BIT"
    },
    {
      "sha": "b5ec81436c5e9a23ff1996715fc383339053abda",
      "filename": "bfd/elf-eh-frame.c",
      "status": "modified",
      "additions": 16,
      "deletions": 14,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/elf-eh-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/elf-eh-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-eh-frame.c?ref=36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "patch": "@@ -1440,25 +1440,27 @@ static int\n adjust_eh_frame_local_symbols (const asection *sec,\n \t\t\t       struct elf_reloc_cookie *cookie)\n {\n-  unsigned int shndx;\n-  Elf_Internal_Sym *sym;\n-  Elf_Internal_Sym *end_sym;\n   int adjusted = 0;\n \n-  shndx = elf_section_data (sec)->this_idx;\n-  end_sym = cookie->locsyms + cookie->locsymcount;\n-  for (sym = cookie->locsyms + 1; sym < end_sym; ++sym)\n-    if (sym->st_info <= ELF_ST_INFO (STB_LOCAL, STT_OBJECT)\n-\t&& sym->st_shndx == shndx)\n-      {\n-\tbfd_signed_vma delta = offset_adjust (sym->st_value, sec);\n+  if (cookie->locsymcount > 1)\n+    {\n+      unsigned int shndx = elf_section_data (sec)->this_idx;\n+      Elf_Internal_Sym *end_sym = cookie->locsyms + cookie->locsymcount;\n+      Elf_Internal_Sym *sym;\n \n-\tif (delta != 0)\n+      for (sym = cookie->locsyms + 1; sym < end_sym; ++sym)\n+\tif (sym->st_info <= ELF_ST_INFO (STB_LOCAL, STT_OBJECT)\n+\t    && sym->st_shndx == shndx)\n \t  {\n-\t    adjusted = 1;\n-\t    sym->st_value += delta;\n+\t    bfd_signed_vma delta = offset_adjust (sym->st_value, sec);\n+\n+\t    if (delta != 0)\n+\t      {\n+\t\tadjusted = 1;\n+\t\tsym->st_value += delta;\n+\t      }\n \t  }\n-      }\n+    }\n   return adjusted;\n }\n "
    },
    {
      "sha": "354cebbe76655f025b28781e161de2fab15e0b67",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 12,
      "deletions": 11,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "patch": "@@ -3649,7 +3649,7 @@ _bfd_elf_strip_zero_sized_dynamic_sections (struct bfd_link_info *info)\n     else\n       pp = &s->next;\n \n-  if (strip_zero_sized_plt)\n+  if (strip_zero_sized_plt && sdynamic->size != 0)\n     for (extdyn = sdynamic->contents;\n \t extdyn < sdynamic->contents + sdynamic->size;\n \t extdyn = next)\n@@ -3709,7 +3709,7 @@ bfd_elf_add_dt_needed_tag (bfd *abfd, struct bfd_link_info *info)\n \n       bed = get_elf_backend_data (hash_table->dynobj);\n       sdyn = bfd_get_linker_section (hash_table->dynobj, \".dynamic\");\n-      if (sdyn != NULL)\n+      if (sdyn != NULL && sdyn->size != 0)\n \tfor (extdyn = sdyn->contents;\n \t     extdyn < sdyn->contents + sdyn->size;\n \t     extdyn += bed->s->sizeof_dyn)\n@@ -3858,7 +3858,7 @@ elf_finalize_dynstr (bfd *output_bfd, struct bfd_link_info *info)\n \n   /* Update all .dynamic entries referencing .dynstr strings.  */\n   for (extdyn = sdyn->contents;\n-       extdyn < sdyn->contents + sdyn->size;\n+       extdyn < PTR_ADD (sdyn->contents, sdyn->size);\n        extdyn += bed->s->sizeof_dyn)\n     {\n       Elf_Internal_Dyn dyn;\n@@ -4276,7 +4276,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t       | DYN_NO_NEEDED)) == 0;\n \n       s = bfd_get_section_by_name (abfd, \".dynamic\");\n-      if (s != NULL)\n+      if (s != NULL && s->size != 0)\n \t{\n \t  bfd_byte *dynbuf;\n \t  bfd_byte *extdyn;\n@@ -4650,7 +4650,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t(_(\"%pB: plugin needed to handle lto object\"), abfd);\n     }\n \n-  for (isym = isymbuf, isymend = isymbuf + extsymcount;\n+  for (isym = isymbuf, isymend = PTR_ADD (isymbuf, extsymcount);\n        isym < isymend;\n        isym++, sym_hash++, ever = (ever != NULL ? ever + 1 : NULL))\n     {\n@@ -10913,7 +10913,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n   /* Find local symbol sections and adjust values of symbols in\n      SEC_MERGE sections.  Write out those local symbols we know are\n      going into the output file.  */\n-  isymend = isymbuf + locsymcount;\n+  isymend = PTR_ADD (isymbuf, locsymcount);\n   for (isym = isymbuf, pindex = flinfo->indices, ppsection = flinfo->sections;\n        isym < isymend;\n        isym++, pindex++, ppsection++)\n@@ -11457,7 +11457,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \n \t      irela = internal_relocs;\n \t      irelaend = irela + o->reloc_count;\n-\t      rel_hash = esdo->rel.hashes + esdo->rel.count;\n+\t      rel_hash = PTR_ADD (esdo->rel.hashes, esdo->rel.count);\n \t      /* We start processing the REL relocs, if any.  When we reach\n \t\t IRELAMID in the loop, we switch to the RELA relocs.  */\n \t      irelamid = irela;\n@@ -11483,7 +11483,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \n \t\t  if (irela == irelamid)\n \t\t    {\n-\t\t      rel_hash = esdo->rela.hashes + esdo->rela.count;\n+\t\t      rel_hash = PTR_ADD (esdo->rela.hashes, esdo->rela.count);\n \t\t      rela_hash_list = rel_hash;\n \t\t      rela_normal = bed->rela_normal;\n \t\t    }\n@@ -12957,7 +12957,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       BFD_ASSERT (o != NULL);\n \n       dyncon = o->contents;\n-      dynconend = o->contents + o->size;\n+      dynconend = PTR_ADD (o->contents, o->size);\n       for (; dyncon < dynconend; dyncon += bed->s->sizeof_dyn)\n \t{\n \t  Elf_Internal_Dyn dyn;\n@@ -13160,7 +13160,8 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       /* Check for DT_TEXTREL (late, in case the backend removes it).  */\n       if (bfd_link_textrel_check (info)\n-\t  && (o = bfd_get_linker_section (dynobj, \".dynamic\")) != NULL)\n+\t  && (o = bfd_get_linker_section (dynobj, \".dynamic\")) != NULL\n+\t  && o->size != 0)\n \t{\n \t  bfd_byte *dyncon, *dynconend;\n \n@@ -14206,7 +14207,7 @@ bfd_elf_gc_record_vtinherit (bfd *abfd,\n     extsymcount -= elf_tdata (abfd)->symtab_hdr.sh_info;\n \n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = sym_hashes + extsymcount;\n+  sym_hashes_end = PTR_ADD (sym_hashes, extsymcount);\n \n   /* Hunt down the child symbol, which is in this section at the same\n      offset as the relocation.  */"
    },
    {
      "sha": "27bfb4203997869b294e4dbc4c55709f5f57f269",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36f61bf2ad936edfb76eda706eb3b081a61d5a5a/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=36f61bf2ad936edfb76eda706eb3b081a61d5a5a",
      "patch": "@@ -3208,7 +3208,7 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n \t    }\n \t}\n     }\n-  rel_ppend = rel_pp + rel_count;\n+  rel_ppend = PTR_ADD (rel_pp, rel_count);\n \n   if (!bfd_malloc_and_get_section (abfd, section, &data))\n     {"
    }
  ]
}