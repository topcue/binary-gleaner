{
  "sha": "876469ffa1f52b15dfbc8336b31b908edf95fba6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODc2NDY5ZmZhMWY1MmIxNWRmYmM4MzM2YjMxYjkwOGVkZjk1ZmJhNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:21Z"
    },
    "message": "Introduce unop_ind_operation\n\nThis adds class unop_ind_operation, which implements UNOP_IND.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class unop_ind_base_operation)\n\t(class unop_ind_operation): New.\n\t* eval.c (eval_op_ind): No longer static.  Remove \"op\" parameter.\n\t(unop_ind_base_operation::evaluate_for_address)\n\t(unop_ind_base_operation::evaluate_for_sizeof): New method.\n\t* ax-gdb.c (gen_expr_unop) <case UNOP_IND>: New.",
    "tree": {
      "sha": "529d3b4adac4c544c72ca41c199415aa543bb943",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/529d3b4adac4c544c72ca41c199415aa543bb943"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/876469ffa1f52b15dfbc8336b31b908edf95fba6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/876469ffa1f52b15dfbc8336b31b908edf95fba6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/876469ffa1f52b15dfbc8336b31b908edf95fba6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/876469ffa1f52b15dfbc8336b31b908edf95fba6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d89e2962a8cc245b8364e1968396873bd0bb9b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d89e2962a8cc245b8364e1968396873bd0bb9b1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d89e2962a8cc245b8364e1968396873bd0bb9b1"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 111,
    "deletions": 5
  },
  "files": [
    {
      "sha": "da7cd6916f8d60073e67281685ff8726d67607e2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=876469ffa1f52b15dfbc8336b31b908edf95fba6",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class unop_ind_base_operation)\n+\t(class unop_ind_operation): New.\n+\t* eval.c (eval_op_ind): No longer static.  Remove \"op\" parameter.\n+\t(unop_ind_base_operation::evaluate_for_address)\n+\t(unop_ind_base_operation::evaluate_for_sizeof): New method.\n+\t* ax-gdb.c (gen_expr_unop) <case UNOP_IND>: New.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (unop_incr_operation): New template."
    },
    {
      "sha": "f7ab50f8cde11e639c7be69c326523b33be4fa7b",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=876469ffa1f52b15dfbc8336b31b908edf95fba6",
      "patch": "@@ -2736,6 +2736,14 @@ gen_expr_unop (struct expression *exp,\n       gen_complement (ax, value);\n       break;\n \n+    case UNOP_IND:\n+      lhs->generate_ax (exp, ax, value);\n+      gen_usual_unary (ax, value);\n+      if (!pointer_type (value->type))\n+\terror (_(\"Argument of unary `*' is not a pointer.\"));\n+      gen_deref (value);\n+      break;\n+\n     default:\n       gdb_assert_not_reached (\"invalid case in gen_expr_unop\");\n     }"
    },
    {
      "sha": "1995d39e1892fbfe7c710bbef916029460f9b98f",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 40,
      "deletions": 5,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=876469ffa1f52b15dfbc8336b31b908edf95fba6",
      "patch": "@@ -1827,9 +1827,9 @@ eval_op_lognot (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_IND.  */\n \n-static struct value *\n+struct value *\n eval_op_ind (struct type *expect_type, struct expression *exp,\n-\t     enum noside noside, enum exp_opcode op,\n+\t     enum noside noside,\n \t     struct value *arg1)\n {\n   struct type *type = check_typedef (value_type (arg1));\n@@ -1839,8 +1839,8 @@ eval_op_ind (struct type *expect_type, struct expression *exp,\n \t     \"to member without an object\"));\n   if (noside == EVAL_SKIP)\n     return eval_skip_value (exp);\n-  if (unop_user_defined_p (op, arg1))\n-    return value_x_unop (arg1, op, noside);\n+  if (unop_user_defined_p (UNOP_IND, arg1))\n+    return value_x_unop (arg1, UNOP_IND, noside);\n   else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     {\n       type = check_typedef (value_type (arg1));\n@@ -2974,7 +2974,7 @@ evaluate_subexp_standard (struct type *expect_type,\n       if (expect_type && expect_type->code () == TYPE_CODE_PTR)\n \texpect_type = TYPE_TARGET_TYPE (check_typedef (expect_type));\n       arg1 = evaluate_subexp (expect_type, exp, pos, noside);\n-      return eval_op_ind (expect_type, exp, noside, op, arg1);\n+      return eval_op_ind (expect_type, exp, noside, arg1);\n \n     case UNOP_ADDR:\n       /* C++: check for and handle pointer to members.  */\n@@ -3301,6 +3301,22 @@ scope_operation::evaluate_for_address (struct expression *exp,\n   return x;\n }\n \n+value *\n+unop_ind_base_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t\t       enum noside noside)\n+{\n+  value *x = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+\n+  /* We can't optimize out \"&*\" if there's a user-defined operator*.  */\n+  if (unop_user_defined_p (UNOP_IND, x))\n+    {\n+      x = value_x_unop (x, UNOP_IND, noside);\n+      return evaluate_subexp_for_address_base (exp, noside, x);\n+    }\n+\n+  return coerce_array (x);\n+}\n+\n value *\n var_msym_value_operation::evaluate_for_address (struct expression *exp,\n \t\t\t\t\t\tenum noside noside)\n@@ -3569,6 +3585,25 @@ subscript_operation::evaluate_for_sizeof (struct expression *exp,\n   return operation::evaluate_for_sizeof (exp, noside);\n }\n \n+value *\n+unop_ind_base_operation::evaluate_for_sizeof (struct expression *exp,\n+\t\t\t\t\t      enum noside noside)\n+{\n+  value *val = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t  EVAL_AVOID_SIDE_EFFECTS);\n+  struct type *type = check_typedef (value_type (val));\n+  if (type->code () != TYPE_CODE_PTR\n+      && !TYPE_IS_REFERENCE (type)\n+      && type->code () != TYPE_CODE_ARRAY)\n+    error (_(\"Attempt to take contents of a non-pointer value.\"));\n+  type = TYPE_TARGET_TYPE (type);\n+  if (is_dynamic_type (type))\n+    type = value_type (value_ind (val));\n+  /* FIXME: This should be size_t.  */\n+  struct type *size_type = builtin_type (exp->gdbarch)->builtin_int;\n+  return value_from_longest (size_type, (LONGEST) TYPE_LENGTH (type));\n+}\n+\n }\n \n /* Evaluate a subexpression of EXP, at index *POS, and return a value"
    },
    {
      "sha": "4b1d65a1be859ee901a57cc570d694dc4f0bd8e3",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/876469ffa1f52b15dfbc8336b31b908edf95fba6/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=876469ffa1f52b15dfbc8336b31b908edf95fba6",
      "patch": "@@ -182,6 +182,10 @@ extern struct value *eval_op_postdec (struct type *expect_type,\n \t\t\t\t      enum noside noside,\n \t\t\t\t      enum exp_opcode op,\n \t\t\t\t      struct value *arg1);\n+extern struct value *eval_op_ind (struct type *expect_type,\n+\t\t\t\t  struct expression *exp,\n+\t\t\t\t  enum noside noside,\n+\t\t\t\t  struct value *arg1);\n \n namespace expr\n {\n@@ -1366,6 +1370,56 @@ using postinc_operation\n using postdec_operation\n      = unop_incr_operation<UNOP_POSTDECREMENT, eval_op_postdec>;\n \n+/* Base class for implementations of UNOP_IND.  */\n+class unop_ind_base_operation\n+  : public tuple_holding_operation<operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    if (expect_type != nullptr && expect_type->code () == TYPE_CODE_PTR)\n+      expect_type = TYPE_TARGET_TYPE (check_typedef (expect_type));\n+    value *val = std::get<0> (m_storage)->evaluate (expect_type, exp, noside);\n+    return eval_op_ind (expect_type, exp, noside, val);\n+  }\n+\n+  value *evaluate_for_address (struct expression *exp,\n+\t\t\t       enum noside noside) override;\n+\n+  value *evaluate_for_sizeof (struct expression *exp,\n+\t\t\t      enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return UNOP_IND; }\n+};\n+\n+/* Ordinary UNOP_IND implementation.  */\n+class unop_ind_operation\n+  : public unop_ind_base_operation\n+{\n+public:\n+\n+  using unop_ind_base_operation::unop_ind_base_operation;\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override\n+  {\n+    gen_expr_unop (exp, UNOP_IND,\n+\t\t   std::get<0> (this->m_storage).get (),\n+\t\t   ax, value);\n+  }\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}