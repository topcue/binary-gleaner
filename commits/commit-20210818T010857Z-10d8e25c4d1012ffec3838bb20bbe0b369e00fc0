{
  "sha": "10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTBkOGUyNWM0ZDEwMTJmZmVjMzgzOGJiMjBiYmUwYjM2OWUwMGZjMA==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-07-07T02:23:02Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-08-18T01:08:57Z"
    },
    "message": "sim: nltvals: localize TARGET_<ERRNO> defines\n\nCode should not be using these directly, instead they should be\nresolving these dynamically via cb_host_to_target_errno maps.\nFix the Blackfin code and remove the defines out of the header\nso no new code can rely on them.",
    "tree": {
      "sha": "6c6103d7e324ad834959363079c9d592184023d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6c6103d7e324ad834959363079c9d592184023d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9335d9f8235a13777ae058b1ad59f124b678f4fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9335d9f8235a13777ae058b1ad59f124b678f4fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9335d9f8235a13777ae058b1ad59f124b678f4fc"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 11,
    "deletions": 17
  },
  "files": [
    {
      "sha": "fab4df7aaf8b9c05f8c2504f2ef8e118f48e376d",
      "filename": "sim/bfin/interp.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0/sim/bfin/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0/sim/bfin/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bfin/interp.c?ref=10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
      "patch": "@@ -37,8 +37,6 @@\n #include \"sim-syscall.h\"\n #include \"sim-hw.h\"\n \n-#include \"targ-vals.h\"\n-\n /* The numbers here do not matter.  They just need to be unique.  They also\n    need not be static across releases -- they're used internally only.  The\n    mapping from the Linux ABI to the CB values is in linux-targ-map.h.  */\n@@ -228,7 +226,7 @@ bfin_syscall (SIM_CPU *cpu)\n       else\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EINVAL;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \t}\n       break;\n \n@@ -245,7 +243,7 @@ bfin_syscall (SIM_CPU *cpu)\n \tif (sc.arg4 & 0x20 /*MAP_ANONYMOUS*/)\n \t  /* XXX: We don't handle zeroing, but default is all zeros.  */;\n \telse if (args[4] >= MAX_CALLBACK_FDS)\n-\t  sc.errcode = TARGET_ENOSYS;\n+\t  sc.errcode = cb_host_to_target_errno (cb, ENOSYS);\n \telse\n \t  {\n #ifdef HAVE_PREAD\n@@ -255,11 +253,11 @@ bfin_syscall (SIM_CPU *cpu)\n \t    if (pread (cb->fdmap[args[4]], data, sc.arg2, args[5] << 12) == sc.arg2)\n \t      sc.write_mem (cb, &sc, heap, data, sc.arg2);\n \t    else\n-\t      sc.errcode = TARGET_EINVAL;\n+\t      sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \n \t    free (data);\n #else\n-\t    sc.errcode = TARGET_ENOSYS;\n+\t    sc.errcode = cb_host_to_target_errno (cb, ENOSYS);\n #endif\n \t  }\n \n@@ -288,7 +286,7 @@ bfin_syscall (SIM_CPU *cpu)\n       if (sc.arg1 >= MAX_CALLBACK_FDS || sc.arg2 >= MAX_CALLBACK_FDS)\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EINVAL;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \t}\n       else\n \t{\n@@ -304,7 +302,7 @@ bfin_syscall (SIM_CPU *cpu)\n       if (sc.arg2)\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EINVAL;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \t}\n       else\n \t{\n@@ -327,7 +325,7 @@ bfin_syscall (SIM_CPU *cpu)\n       if (sc.arg1 >= MAX_CALLBACK_FDS)\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EINVAL;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \t}\n       else\n \t{\n@@ -376,7 +374,7 @@ bfin_syscall (SIM_CPU *cpu)\n       if (getcwd (p, sc.arg2) == NULL)\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EINVAL;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EINVAL);\n \t}\n       else\n \t{\n@@ -446,7 +444,7 @@ bfin_syscall (SIM_CPU *cpu)\n       if (sc.arg1 != getpid ())\n \t{\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_EPERM;\n+\t  sc.errcode = cb_host_to_target_errno (cb, EPERM);\n \t}\n       else\n \t{\n@@ -455,7 +453,7 @@ bfin_syscall (SIM_CPU *cpu)\n \t  goto sys_finish;\n #else\n \t  sc.result = -1;\n-\t  sc.errcode = TARGET_ENOSYS;\n+\t  sc.errcode = cb_host_to_target_errno (cb, ENOSYS);\n #endif\n \t}\n       break;"
    },
    {
      "sha": "9f30e66e378bb39caa11cfde9d3698ed0093c67a",
      "filename": "sim/common/gentmap.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0/sim/common/gentmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10d8e25c4d1012ffec3838bb20bbe0b369e00fc0/sim/common/gentmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gentmap.c?ref=10d8e25c4d1012ffec3838bb20bbe0b369e00fc0",
      "patch": "@@ -53,11 +53,6 @@ gen_targ_vals_h (void)\n     printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n   printf (\"\\n\");\n \n-  printf (\"/* errno values */\\n\");\n-  for (t = &errno_tdefs[0]; t->symbol; ++t)\n-    printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n-  printf (\"\\n\");\n-\n   printf (\"/* signal values */\\n\");\n   for (t = &signal_tdefs[0]; t->symbol; ++t)\n     printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n@@ -104,6 +99,7 @@ gen_targ_map_c (void)\n   printf (\"CB_TARGET_DEFS_MAP cb_init_errno_map[] = {\\n\");\n   for (t = &errno_tdefs[0]; t->symbol; ++t)\n     {\n+      printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n       printf (\"#ifdef %s\\n\", t->symbol);\n       printf (\"  { \\\"%s\\\", %s, TARGET_%s },\\n\", t->symbol, t->symbol, t->symbol);\n       printf (\"#endif\\n\");"
    }
  ]
}