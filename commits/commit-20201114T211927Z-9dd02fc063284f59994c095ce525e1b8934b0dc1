{
  "sha": "9dd02fc063284f59994c095ce525e1b8934b0dc1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWRkMDJmYzA2MzI4NGY1OTk5NGMwOTVjZTUyNWUxYjg5MzRiMGRjMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-13T18:27:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-14T21:19:27Z"
    },
    "message": "gdb: add tab completion of type field names for Fortran\n\nAdd support for tab-completion on Fortran field names.  Consider this\ntest case:\n\n program test\n   type my_type\n      integer :: field_a\n      integer :: other_field\n      integer :: last_field\n   end type my_type\n\n   type(my_type) :: var\n\n   print *, var\n end program test\n\nAnd the GDB session before this patch:\n\n (gdb) start\n ...\n (gdb) p var%                   <- Trigger TAB completion here.\n Display all 200 possibilities? (y or n) n\n (gdb) p var%\n\nAnd the GDB session with this patch:\n\n (gdb) start\n ...\n (gdb) p var%                   <- Trigger TAB completion here.\n field_a      last_field   other_field\n (gdb) p var%\n\nThe implementation for this is basically copied from c-exp.y, I\ntweaked the parser patterns to be appropriate for Fortran, and it\n\"just worked\".\n\ngdb/ChangeLog:\n\n\tPR cli/26879\n\t* f-exp.y (COMPLETE): New token.\n\t(exp): Two new rules for tab-completion.\n\t(saw_name_at_eof): New static global.\n\t(last_was_structop): Likewise.\n\t(yylex): Set new variables, and return COMPLETE token at the end\n\tof the input stream in some cases.\n\ngdb/testsuite/ChangeLog:\n\n\tPR cli/26879\n\t* gdb.fortran/completion.exp: New file.\n\t* gdb.fortran/completion.f90: New file.",
    "tree": {
      "sha": "54b999286c860db72841595efeeb35f80dd85724",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54b999286c860db72841595efeeb35f80dd85724"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9dd02fc063284f59994c095ce525e1b8934b0dc1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dd02fc063284f59994c095ce525e1b8934b0dc1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9dd02fc063284f59994c095ce525e1b8934b0dc1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dd02fc063284f59994c095ce525e1b8934b0dc1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "758cb81029440efad398f1aba4789a18e59daee2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/758cb81029440efad398f1aba4789a18e59daee2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/758cb81029440efad398f1aba4789a18e59daee2"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 135,
    "deletions": 4
  },
  "files": [
    {
      "sha": "a70c5feaff1dd7411b8b3d898112fbc43d027767",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9dd02fc063284f59994c095ce525e1b8934b0dc1",
      "patch": "@@ -1,3 +1,13 @@\n+2020-11-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR cli/26879\n+\t* f-exp.y (COMPLETE): New token.\n+\t(exp): Two new rules for tab-completion.\n+\t(saw_name_at_eof): New static global.\n+\t(last_was_structop): Likewise.\n+\t(yylex): Set new variables, and return COMPLETE token at the end\n+\tof the input stream in some cases.\n+\n 2020-11-14  Tom Tromey  <tom@tromey.com>\n \n \t* infrun.c (fetch_inferior_event): Use \"bool\" for should_stop."
    },
    {
      "sha": "edfbe0cd220279ec5bff53c6a2c071327daf0bb3",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 47,
      "deletions": 4,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=9dd02fc063284f59994c095ce525e1b8934b0dc1",
      "patch": "@@ -149,6 +149,7 @@ static int parse_number (struct parser_state *, const char *, int,\n %token <lval> BOOLEAN_LITERAL\n %token <ssym> NAME \n %token <tsym> TYPENAME\n+%token <voidval> COMPLETE\n %type <sval> name\n %type <ssym> name_not_typename\n \n@@ -374,6 +375,22 @@ exp     :       exp '%' name\n \t\t\t  write_exp_elt_opcode (pstate, STRUCTOP_STRUCT); }\n \t;\n \n+exp     :       exp '%' name COMPLETE\n+\t\t\t{ pstate->mark_struct_expression ();\n+\t\t\t  write_exp_elt_opcode (pstate, STRUCTOP_STRUCT);\n+\t\t\t  write_exp_string (pstate, $3);\n+\t\t\t  write_exp_elt_opcode (pstate, STRUCTOP_STRUCT); }\n+\t;\n+\n+exp     :       exp '%' COMPLETE\n+\t\t\t{ struct stoken s;\n+\t\t\t  pstate->mark_struct_expression ();\n+\t\t\t  write_exp_elt_opcode (pstate, STRUCTOP_PTR);\n+\t\t\t  s.ptr = \"\";\n+\t\t\t  s.length = 0;\n+\t\t\t  write_exp_string (pstate, s);\n+\t\t\t  write_exp_elt_opcode (pstate, STRUCTOP_PTR); }\n+\n /* Binary operators in order of decreasing precedence.  */\n \n exp\t:\texp '@' exp\n@@ -1100,6 +1117,15 @@ match_string_literal (void)\n     }\n }\n \n+/* This is set if a NAME token appeared at the very end of the input\n+   string, with no whitespace separating the name from the EOF.  This\n+   is used only when parsing to do field name completion.  */\n+static bool saw_name_at_eof;\n+\n+/* This is set if the previously-returned token was a structure\n+   operator '%'.  */\n+static bool last_was_structop;\n+\n /* Read one token, getting characters through lexptr.  */\n \n static int\n@@ -1109,7 +1135,10 @@ yylex (void)\n   int namelen;\n   unsigned int token;\n   const char *tokstart;\n-  \n+  bool saw_structop = last_was_structop;\n+\n+  last_was_structop = false;\n+\n  retry:\n  \n   pstate->prev_lexptr = pstate->lexptr;\n@@ -1156,6 +1185,13 @@ yylex (void)\n   switch (c = *tokstart)\n     {\n     case 0:\n+      if (saw_name_at_eof)\n+\t{\n+\t  saw_name_at_eof = false;\n+\t  return COMPLETE;\n+\t}\n+      else if (pstate->parse_completion && saw_structop)\n+\treturn COMPLETE;\n       return 0;\n       \n     case ' ':\n@@ -1257,12 +1293,14 @@ yylex (void)\n \tpstate->lexptr = p;\n \treturn toktype;\n       }\n-      \n+\n+    case '%':\n+      last_was_structop = true;\n+      /* Fall through.  */\n     case '+':\n     case '-':\n     case '*':\n     case '/':\n-    case '%':\n     case '|':\n     case '&':\n     case '^':\n@@ -1374,7 +1412,10 @@ yylex (void)\n \t    return NAME_OR_INT;\n \t  }\n       }\n-    \n+\n+    if (pstate->parse_completion && *pstate->lexptr == '\\0')\n+      saw_name_at_eof = true;\n+\n     /* Any other kind of symbol */\n     yylval.ssym.sym = result;\n     yylval.ssym.is_a_field_of_this = false;\n@@ -1391,6 +1432,8 @@ f_language::parser (struct parser_state *par_state) const\n \t\t\t\t\t\t\tparser_debug);\n   gdb_assert (par_state != NULL);\n   pstate = par_state;\n+  last_was_structop = false;\n+  saw_name_at_eof = false;\n   paren_depth = 0;\n \n   struct type_stack stack;"
    },
    {
      "sha": "b1a8f8f4f0b8e827fbffcc44318059deebbe5594",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9dd02fc063284f59994c095ce525e1b8934b0dc1",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR cli/26879\n+\t* gdb.fortran/completion.exp: New file.\n+\t* gdb.fortran/completion.f90: New file.\n+\n 2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lib/gdb.exp (gdb_file_cmd): Check for case where $arg.exe exists"
    },
    {
      "sha": "1458799bf642bd1f8adeb2c7d8e4fc23fd7843d8",
      "filename": "gdb/testsuite/gdb.fortran/completion.exp",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/gdb.fortran/completion.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/gdb.fortran/completion.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/completion.exp?ref=9dd02fc063284f59994c095ce525e1b8934b0dc1",
      "patch": "@@ -0,0 +1,46 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Test tab completion of Fortran type field names.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+load_lib completion-support.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+test_gdb_complete_none \"p var%x\"\n+test_gdb_complete_multiple \"p var%\" \"\" \"\" {\n+    \"aa_field_1\"\n+    \"aa_field_2\"\n+    \"bb_field_3\"\n+}\n+\n+test_gdb_complete_multiple \"p var%\" \"aa\" \"_field_\" {\n+    \"aa_field_1\"\n+    \"aa_field_2\"\n+}\n+\n+test_gdb_complete_unique \"p var%b\" \"p var%bb_field_3\""
    },
    {
      "sha": "605f783e494a837e12de97734d6e8e6f3f36b3b6",
      "filename": "gdb/testsuite/gdb.fortran/completion.f90",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/gdb.fortran/completion.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dd02fc063284f59994c095ce525e1b8934b0dc1/gdb/testsuite/gdb.fortran/completion.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/completion.f90?ref=9dd02fc063284f59994c095ce525e1b8934b0dc1",
      "patch": "@@ -0,0 +1,26 @@\n+! Copyright 2020 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+program test\n+  type some_type\n+     integer :: aa_field_1\n+     integer :: aa_field_2\n+     integer :: bb_field_3\n+  end type some_type\n+\n+  type(some_type) :: var\n+\n+  print *, var\n+end program test"
    }
  ]
}