{
  "sha": "6420dd27cb8ee2c89c379255ba4c438d22376bc4",
  "node_id": "C_kwDOANOeidoAKDY0MjBkZDI3Y2I4ZWUyYzg5YzM3OTI1NWJhNGM0MzhkMjIzNzZiYzQ",
  "commit": {
    "author": {
      "name": "Libor Bukata",
      "email": "libor.bukata@oracle.com",
      "date": "2021-07-14T09:53:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-30T06:58:14Z"
    },
    "message": "Add Solaris specific ELF note processing\n\nAdd elfcore_grok_solaris_note function that enables to\nobtain process status, register values, and program info\nfrom Solaris's core files.\n\nbfd/\n\t* elf.c (elfcore_grok_solaris_note): Solaris specific ELF\n\tnote parser. Better GDB's coredump analysis on Solaris...\n\t(elfcore_grok_solaris_note_impl): New function.\n\t(elfcore_grok_solaris_prstatus): New function.\n\t(elfcore_grok_solaris_info): New function.\n\t(elfcore_grok_solaris_lwpstatus): New function.\n\t(elf_parse_notes): Added \"CORE\" groker element.\ninclude/\n\t* elf/common.h: Add note segment constants for core files on\n\tSolaris systems.",
    "tree": {
      "sha": "a915c2a37fe84fd381c99f852a423267a910709e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a915c2a37fe84fd381c99f852a423267a910709e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6420dd27cb8ee2c89c379255ba4c438d22376bc4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6420dd27cb8ee2c89c379255ba4c438d22376bc4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6420dd27cb8ee2c89c379255ba4c438d22376bc4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6420dd27cb8ee2c89c379255ba4c438d22376bc4/comments",
  "author": {
    "login": "bukatlib",
    "id": 12395618,
    "node_id": "MDQ6VXNlcjEyMzk1NjE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/12395618?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bukatlib",
    "html_url": "https://github.com/bukatlib",
    "followers_url": "https://api.github.com/users/bukatlib/followers",
    "following_url": "https://api.github.com/users/bukatlib/following{/other_user}",
    "gists_url": "https://api.github.com/users/bukatlib/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bukatlib/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bukatlib/subscriptions",
    "organizations_url": "https://api.github.com/users/bukatlib/orgs",
    "repos_url": "https://api.github.com/users/bukatlib/repos",
    "events_url": "https://api.github.com/users/bukatlib/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bukatlib/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98ca73afe51e1e921915c37f242c88d4d445841c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98ca73afe51e1e921915c37f242c88d4d445841c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/98ca73afe51e1e921915c37f242c88d4d445841c"
    }
  ],
  "stats": {
    "total": 217,
    "additions": 215,
    "deletions": 2
  },
  "files": [
    {
      "sha": "e8e37eaa95b792a5c060ff05a444cefaebf92535",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 192,
      "deletions": 2,
      "changes": 194,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6420dd27cb8ee2c89c379255ba4c438d22376bc4/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6420dd27cb8ee2c89c379255ba4c438d22376bc4/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=6420dd27cb8ee2c89c379255ba4c438d22376bc4",
      "patch": "@@ -11057,6 +11057,195 @@ elfcore_grok_openbsd_procinfo (bfd *abfd, Elf_Internal_Note *note)\n   return true;\n }\n \n+/* Processes Solaris's process status note.\n+   sig_off ~ offsetof(prstatus_t, pr_cursig)\n+   pid_off ~ offsetof(prstatus_t, pr_pid)\n+   lwpid_off ~ offsetof(prstatus_t, pr_who)\n+   gregset_size ~ sizeof(gregset_t)\n+   gregset_offset ~ offsetof(prstatus_t, pr_reg)  */\n+\n+static bool\n+elfcore_grok_solaris_prstatus (bfd *abfd, Elf_Internal_Note* note, int sig_off,\n+\t\t\t       int pid_off, int lwpid_off, size_t gregset_size,\n+\t\t\t       size_t gregset_offset)\n+{\n+  asection *sect = NULL;\n+  elf_tdata (abfd)->core->signal\n+    = bfd_get_16 (abfd, note->descdata + sig_off);\n+  elf_tdata (abfd)->core->pid\n+    = bfd_get_32 (abfd, note->descdata + pid_off);\n+  elf_tdata (abfd)->core->lwpid\n+    = bfd_get_32 (abfd, note->descdata + lwpid_off);\n+\n+  sect = bfd_get_section_by_name (abfd, \".reg\");\n+  if (sect != NULL)\n+    sect->size = gregset_size;\n+\n+  return _bfd_elfcore_make_pseudosection (abfd, \".reg\", gregset_size,\n+\t\t\t\t\t  note->descpos + gregset_offset);\n+}\n+\n+/* Gets program and arguments from a core.\n+   prog_off ~ offsetof(prpsinfo | psinfo_t, pr_fname)\n+   comm_off ~ offsetof(prpsinfo | psinfo_t, pr_psargs)  */\n+\n+static bool\n+elfcore_grok_solaris_info(bfd *abfd, Elf_Internal_Note* note,\n+\t\t\t  int prog_off, int comm_off)\n+{\n+  elf_tdata (abfd)->core->program\n+    = _bfd_elfcore_strndup (abfd, note->descdata + prog_off, 16);\n+  elf_tdata (abfd)->core->command\n+    = _bfd_elfcore_strndup (abfd, note->descdata + comm_off, 80);\n+\n+  return true;\n+}\n+\n+/* Processes Solaris's LWP status note.\n+   gregset_size ~ sizeof(gregset_t)\n+   gregset_off ~ offsetof(lwpstatus_t, pr_reg)\n+   fpregset_size ~ sizeof(fpregset_t)\n+   fpregset_off ~ offsetof(lwpstatus_t, pr_fpreg)  */\n+\n+static bool\n+elfcore_grok_solaris_lwpstatus (bfd *abfd, Elf_Internal_Note* note,\n+\t\t\t\tsize_t gregset_size, int gregset_off,\n+\t\t\t\tsize_t fpregset_size, int fpregset_off)\n+{\n+  asection *sect = NULL;\n+  char reg2_section_name[16] = { 0 };\n+\n+  (void) snprintf (reg2_section_name, 16, \"%s/%i\", \".reg2\",\n+\t\t   elf_tdata (abfd)->core->lwpid);\n+\n+  /* offsetof(lwpstatus_t, pr_lwpid) */\n+  elf_tdata (abfd)->core->lwpid\n+    = bfd_get_32 (abfd, note->descdata + 4);\n+  /* offsetof(lwpstatus_t, pr_cursig) */\n+  elf_tdata (abfd)->core->signal\n+    = bfd_get_16 (abfd, note->descdata + 12);\n+\n+  sect = bfd_get_section_by_name (abfd, \".reg\");\n+  if (sect != NULL)\n+    sect->size = gregset_size;\n+  else if (!_bfd_elfcore_make_pseudosection (abfd, \".reg\", gregset_size,\n+\t\t\t\t\t     note->descpos + gregset_off))\n+    return false;\n+\n+  sect = bfd_get_section_by_name (abfd, reg2_section_name);\n+  if (sect != NULL)\n+    {\n+      sect->size = fpregset_size;\n+      sect->filepos = note->descpos + fpregset_off;\n+      sect->alignment_power = 2;\n+    }\n+  else if (!_bfd_elfcore_make_pseudosection (abfd, \".reg2\", fpregset_size,\n+\t\t\t\t\t     note->descpos + fpregset_off))\n+    return false;\n+\n+  return true;\n+}\n+\n+static bool\n+elfcore_grok_solaris_note_impl (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  if (note == NULL)\n+    return false;\n+\n+  /* core files are identified as 32- or 64-bit, SPARC or x86,\n+     by the size of the descsz which matches the sizeof()\n+     the type appropriate for that note type (e.g., prstatus_t for\n+     SOLARIS_NT_PRSTATUS) for the corresponding architecture\n+     on Solaris. The core file bitness may differ from the bitness of\n+     gdb itself, so fixed values are used instead of sizeof().\n+     Appropriate fixed offsets are also used to obtain data from\n+     the note.  */\n+\n+  switch ((int) note->type)\n+    {\n+    case SOLARIS_NT_PRSTATUS:\n+      switch (note->descsz)\n+\t{\n+\tcase 508: /* sizeof(prstatus_t) SPARC 32-bit */\n+\t  return elfcore_grok_solaris_prstatus(abfd, note,\n+\t\t\t\t\t       136, 216, 308, 152, 356);\n+\tcase 904: /* sizeof(prstatus_t) SPARC 64-bit */\n+\t  return elfcore_grok_solaris_prstatus(abfd, note,\n+\t\t\t\t\t       264, 360, 520, 304, 600);\n+\tcase 432: /* sizeof(prstatus_t) Intel 32-bit */\n+\t  return elfcore_grok_solaris_prstatus(abfd, note,\n+\t\t\t\t\t       136, 216, 308, 76, 356);\n+\tcase 824: /* sizeof(prstatus_t) Intel 64-bit */\n+\t  return elfcore_grok_solaris_prstatus(abfd, note,\n+\t\t\t\t\t       264, 360, 520, 224, 600);\n+\tdefault:\n+\t  return true;\n+\t}\n+\n+    case SOLARIS_NT_PSINFO:\n+    case SOLARIS_NT_PRPSINFO:\n+      switch (note->descsz)\n+\t{\n+\tcase 260: /* sizeof(prpsinfo_t) SPARC and Intel 32-bit */\n+\t  return elfcore_grok_solaris_info(abfd, note, 84, 100);\n+\tcase 328: /* sizeof(prpsinfo_t) SPARC and Intel 64-bit */\n+\t  return elfcore_grok_solaris_info(abfd, note, 120, 136);\n+\tcase 360: /* sizeof(psinfo_t) SPARC and Intel 32-bit */\n+\t  return elfcore_grok_solaris_info(abfd, note, 88, 104);\n+\tcase 440: /* sizeof(psinfo_t) SPARC and Intel 64-bit */\n+\t  return elfcore_grok_solaris_info(abfd, note, 136, 152);\n+\tdefault:\n+\t  return true;\n+\t}\n+\n+    case SOLARIS_NT_LWPSTATUS:\n+      switch (note->descsz)\n+\t{\n+\tcase 896: /* sizeof(lwpstatus_t) SPARC 32-bit */\n+\t  return elfcore_grok_solaris_lwpstatus(abfd, note,\n+\t\t\t\t\t\t152, 344, 400, 496);\n+\tcase 1392: /* sizeof(lwpstatus_t) SPARC 64-bit */\n+\t  return elfcore_grok_solaris_lwpstatus(abfd, note,\n+\t\t\t\t\t\t304, 544, 544, 848);\n+\tcase 800: /* sizeof(lwpstatus_t) Intel 32-bit */\n+\t  return elfcore_grok_solaris_lwpstatus(abfd, note,\n+\t\t\t\t\t\t76, 344, 380, 420);\n+\tcase 1296: /* sizeof(lwpstatus_t) Intel 64-bit */\n+\t  return elfcore_grok_solaris_lwpstatus(abfd, note,\n+\t\t\t\t\t\t224, 544, 528, 768);\n+\tdefault:\n+\t  return true;\n+\t}\n+\n+    case SOLARIS_NT_LWPSINFO:\n+      /* sizeof(lwpsinfo_t) on 32- and 64-bit, respectively */\n+      if (note->descsz == 128 || note->descsz == 152)\n+\telf_tdata (abfd)->core->lwpid =\n+\t  bfd_get_32 (abfd, note->descdata + 4);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n+/* For name starting with \"CORE\" this may be either a Solaris\n+   core file or a gdb-generated core file.  Do Solaris-specific\n+   processing on selected note types first with\n+   elfcore_grok_solaris_note(), then process the note\n+   in elfcore_grok_note().  */\n+\n+static bool\n+elfcore_grok_solaris_note (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  if (!elfcore_grok_solaris_note_impl (abfd, note))\n+    return false;\n+\n+  return elfcore_grok_note (abfd, note);\n+}\n+\n static bool\n elfcore_grok_openbsd_note (bfd *abfd, Elf_Internal_Note *note)\n {\n@@ -12214,10 +12403,11 @@ elf_parse_notes (bfd *abfd, char *buf, size_t size, file_ptr offset,\n \t      GROKER_ELEMENT (\"\", elfcore_grok_note),\n \t      GROKER_ELEMENT (\"FreeBSD\", elfcore_grok_freebsd_note),\n \t      GROKER_ELEMENT (\"NetBSD-CORE\", elfcore_grok_netbsd_note),\n-\t      GROKER_ELEMENT ( \"OpenBSD\", elfcore_grok_openbsd_note),\n+\t      GROKER_ELEMENT (\"OpenBSD\", elfcore_grok_openbsd_note),\n \t      GROKER_ELEMENT (\"QNX\", elfcore_grok_nto_note),\n \t      GROKER_ELEMENT (\"SPU/\", elfcore_grok_spu_note),\n-\t      GROKER_ELEMENT (\"GNU\", elfobj_grok_gnu_note)\n+\t      GROKER_ELEMENT (\"GNU\", elfobj_grok_gnu_note),\n+\t      GROKER_ELEMENT (\"CORE\", elfcore_grok_solaris_note)\n \t    };\n #undef GROKER_ELEMENT\n \t    int i;"
    },
    {
      "sha": "efb7ff0de05155604c162e5af4e59222ab7f9061",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6420dd27cb8ee2c89c379255ba4c438d22376bc4/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6420dd27cb8ee2c89c379255ba4c438d22376bc4/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=6420dd27cb8ee2c89c379255ba4c438d22376bc4",
      "patch": "@@ -742,6 +742,29 @@\n #define NT_OPENBSD_WCOOKIE\t23\n \n \n+/* Note segments for core files on Solaris systems.  Note name\n+   must start with \"CORE\".  */\n+#define SOLARIS_NT_PRSTATUS    1\n+#define SOLARIS_NT_PRFPREG     2\n+#define SOLARIS_NT_PRPSINFO    3\n+#define SOLARIS_NT_PRXREG      4\n+#define SOLARIS_NT_PLATFORM    5\n+#define SOLARIS_NT_AUXV        6\n+#define SOLARIS_NT_GWINDOWS    7\n+#define SOLARIS_NT_ASRS        8\n+#define SOLARIS_NT_LDT         9\n+#define SOLARIS_NT_PSTATUS    10\n+#define SOLARIS_NT_PSINFO     13\n+#define SOLARIS_NT_PRCRED     14\n+#define SOLARIS_NT_UTSNAME    15\n+#define SOLARIS_NT_LWPSTATUS  16\n+#define SOLARIS_NT_LWPSINFO   17\n+#define SOLARIS_NT_PRPRIV     18\n+#define SOLARIS_NT_PRPRIVINFO 19\n+#define SOLARIS_NT_CONTENT    20\n+#define SOLARIS_NT_ZONENAME   21\n+#define SOLARIS_NT_PRCPUXREG  22\n+\n /* Note segments for core files on SPU systems.  Note name\n    must start with \"SPU/\".  */\n "
    }
  ]
}