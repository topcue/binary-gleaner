{
  "sha": "bdef5723041368f3e264ac641360950c936b7ce4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmRlZjU3MjMwNDEzNjhmM2UyNjRhYzY0MTM2MDk1MGM5MzZiN2NlNA==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-11-22T15:51:30Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2021-05-27T18:42:42Z"
    },
    "message": "Add optional full_window argument to TuiWindow.write\n\nTo prevent flickering when first calling erase, then write, this new\nargument indicates that the passed string contains the full contents of\nthe window.  This fills every unused cell of the window with a space, so\nit's not necessary to call erase beforehand.\n\ngdb/ChangeLog:\n\n2021-05-27  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* python/py-tui.c (tui_py_window::output): Add full_window\n\targument.\n\t(gdbpy_tui_write): Parse \"full_window\" argument.\n\ngdb/doc/ChangeLog:\n\n2021-05-27  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* python.texi (TUI Windows In Python): Document \"full_window\"\n\targument.",
    "tree": {
      "sha": "4fc4cc2d4b9acad73aed736b358a1c350b027fd4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4fc4cc2d4b9acad73aed736b358a1c350b027fd4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bdef5723041368f3e264ac641360950c936b7ce4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdef5723041368f3e264ac641360950c936b7ce4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bdef5723041368f3e264ac641360950c936b7ce4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdef5723041368f3e264ac641360950c936b7ce4/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d5a6313e1c4c748a7e744514dbabfa001636f09a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5a6313e1c4c748a7e744514dbabfa001636f09a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d5a6313e1c4c748a7e744514dbabfa001636f09a"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 30,
    "deletions": 7
  },
  "files": [
    {
      "sha": "739e7732b87e6e20173a6ae8b0f3b23a9ab57437",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdef5723041368f3e264ac641360950c936b7ce4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdef5723041368f3e264ac641360950c936b7ce4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bdef5723041368f3e264ac641360950c936b7ce4",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-27  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* python/py-tui.c (tui_py_window::output): Add full_window\n+\targument.\n+\t(gdbpy_tui_write): Parse \"full_window\" argument.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* make-init-c: Add option to reverse function calls."
    },
    {
      "sha": "2743079e93e66e4e2156491c68858ef085d8bb1f",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdef5723041368f3e264ac641360950c936b7ce4/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdef5723041368f3e264ac641360950c936b7ce4/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=bdef5723041368f3e264ac641360950c936b7ce4",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-27  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* python.texi (TUI Windows In Python): Document \"full_window\"\n+\targument.\n+\n 2021-05-27  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* python.texi (Symbols In Python): Document gdb.SYMBOL_LOC_LABEL."
    },
    {
      "sha": "23e6ac666ffcc966458e51fd465ea56fe0beef8d",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdef5723041368f3e264ac641360950c936b7ce4/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdef5723041368f3e264ac641360950c936b7ce4/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=bdef5723041368f3e264ac641360950c936b7ce4",
      "patch": "@@ -5959,10 +5959,14 @@ displayed above the window.  This attribute can be modified.\n Remove all the contents of the window.\n @end defun\n \n-@defun TuiWindow.write (@var{string})\n+@defun TuiWindow.write (@var{string} @r{[}, @var{full_window}@r{]})\n Write @var{string} to the window.  @var{string} can contain ANSI\n terminal escape styling sequences; @value{GDBN} will translate these\n as appropriate for the terminal.\n+\n+If the @var{full_window} parameter is @code{True}, then @var{string}\n+contains the full contents of the window.  This is similar to calling\n+@code{erase} before @code{write}, but avoids the flickering.\n @end defun\n \n The factory function that you supply should return an object"
    },
    {
      "sha": "97e9de7a00cb20830b910cf33c33ef8b48b6ef25",
      "filename": "gdb/python/py-tui.c",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdef5723041368f3e264ac641360950c936b7ce4/gdb/python/py-tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdef5723041368f3e264ac641360950c936b7ce4/gdb/python/py-tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-tui.c?ref=bdef5723041368f3e264ac641360950c936b7ce4",
      "patch": "@@ -111,8 +111,9 @@ class tui_py_window : public tui_win_info\n       }\n   }\n \n-  /* Write STR to the window.  */\n-  void output (const char *str);\n+  /* Write STR to the window.  FULL_WINDOW is true to erase the window\n+     contents beforehand.  */\n+  void output (const char *str, bool full_window);\n \n   /* A helper function to compute the viewport width.  */\n   int viewport_width () const\n@@ -229,12 +230,18 @@ tui_py_window::do_scroll_vertical (int num_to_scroll)\n }\n \n void\n-tui_py_window::output (const char *text)\n+tui_py_window::output (const char *text, bool full_window)\n {\n   if (m_inner_window != nullptr)\n     {\n+      if (full_window)\n+\twerase (m_inner_window.get ());\n+\n       tui_puts (text, m_inner_window.get ());\n-      tui_wrefresh (m_inner_window.get ());\n+      if (full_window)\n+\tcheck_and_display_highlight_if_needed ();\n+      else\n+\ttui_wrefresh (m_inner_window.get ());\n     }\n }\n \n@@ -405,13 +412,14 @@ gdbpy_tui_write (PyObject *self, PyObject *args)\n {\n   gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n   const char *text;\n+  int full_window = 0;\n \n-  if (!PyArg_ParseTuple (args, \"s\", &text))\n+  if (!PyArg_ParseTuple (args, \"s|i\", &text, &full_window))\n     return nullptr;\n \n   REQUIRE_WINDOW (win);\n \n-  win->window->output (text);\n+  win->window->output (text, full_window);\n \n   Py_RETURN_NONE;\n }"
    }
  ]
}