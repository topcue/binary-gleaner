{
  "sha": "1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWEyMTFmYzdkODdkYzkyYzJjOTFkMjRkMDQyNGQ4ZjA0ODU1ODdmOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-31T01:44:31Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-31T10:58:10Z"
    },
    "message": "PR26466 UBSAN: elf32-mep.c:300 left shift of negative value\n\n\tPR 26466\n\t* mep-relocs.pl (emit_apply): Handle HI16S adjustment.  Use \"u\"\n\tvariable and rewrite signed overflow check.\n\t* elf32-mep.c: Regenerate.\n\t(mep_final_link_relocate): Delete \"s\".",
    "tree": {
      "sha": "3d7ab2f48076d53b42d1b9ca2ea10f504bad9c86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d7ab2f48076d53b42d1b9ca2ea10f504bad9c86"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "108f6f97bd862e969f898c1347903ae1cf38ead4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/108f6f97bd862e969f898c1347903ae1cf38ead4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/108f6f97bd862e969f898c1347903ae1cf38ead4"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 57,
    "deletions": 50
  },
  "files": [
    {
      "sha": "f972a5adb4ffb2ed02b1660906adeef9ae54f013",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-31  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26466\n+\t* mep-relocs.pl (emit_apply): Handle HI16S adjustment.  Use \"u\"\n+\tvariable and rewrite signed overflow check.\n+\t* elf32-mep.c: Regenerate.\n+\t(mep_final_link_relocate): Delete \"s\".\n+\n 2020-08-31  Alan Modra  <amodra@gmail.com>\n \n \tPR 26461"
    },
    {
      "sha": "ef8c10049e3b41536c37a567201e5d2a7b3b1329",
      "filename": "bfd/elf32-mep.c",
      "status": "modified",
      "additions": 38,
      "deletions": 42,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/elf32-mep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/elf32-mep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-mep.c?ref=1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
      "patch": "@@ -43,26 +43,26 @@ static reloc_howto_type mep_elf_howto_table [] =\n   MEPREL (R_RELC,\t  0,  0, 0, 0, 0, N, 0),\n   /* MEPRELOC:HOWTO */\n     /* This section generated from bfd/mep-relocs.pl from include/elf/mep.h.  */\n-  MEPREL (R_MEP_8,\t  0,  8, 0, 0, 0, U, 0xff),\n-  MEPREL (R_MEP_16,\t  1, 16, 0, 0, 0, U, 0xffff),\n-  MEPREL (R_MEP_32,\t  2, 32, 0, 0, 0, U, 0xffffffff),\n+  MEPREL (R_MEP_8,        0,  8, 0, 0, 0, U, 0xff),\n+  MEPREL (R_MEP_16,       1, 16, 0, 0, 0, U, 0xffff),\n+  MEPREL (R_MEP_32,       2, 32, 0, 0, 0, U, 0xffffffff),\n   MEPREL (R_MEP_PCREL8A2, 1,  8, 1, 1, 1, S, 0x00fe),\n   MEPREL (R_MEP_PCREL12A2,1, 12, 1, 1, 1, S, 0x0ffe),\n   MEPREL (R_MEP_PCREL17A2,2, 17, 0, 1, 1, S, 0x0000ffff),\n   MEPREL (R_MEP_PCREL24A2,2, 24, 0, 1, 1, S, 0x07f0ffff),\n   MEPREL (R_MEP_PCABS24A2,2, 24, 0, 1, 0, U, 0x07f0ffff),\n-  MEPREL (R_MEP_LOW16,\t  2, 16, 0, 0, 0, N, 0x0000ffff),\n-  MEPREL (R_MEP_HI16U,\t  2, 32, 0,16, 0, N, 0x0000ffff),\n-  MEPREL (R_MEP_HI16S,\t  2, 32, 0,16, 0, N, 0x0000ffff),\n-  MEPREL (R_MEP_GPREL,\t  2, 16, 0, 0, 0, S, 0x0000ffff),\n-  MEPREL (R_MEP_TPREL,\t  2, 16, 0, 0, 0, S, 0x0000ffff),\n-  MEPREL (R_MEP_TPREL7,\t  1,  7, 0, 0, 0, U, 0x007f),\n+  MEPREL (R_MEP_LOW16,    2, 16, 0, 0, 0, N, 0x0000ffff),\n+  MEPREL (R_MEP_HI16U,    2, 32, 0,16, 0, N, 0x0000ffff),\n+  MEPREL (R_MEP_HI16S,    2, 32, 0,16, 0, N, 0x0000ffff),\n+  MEPREL (R_MEP_GPREL,    2, 16, 0, 0, 0, S, 0x0000ffff),\n+  MEPREL (R_MEP_TPREL,    2, 16, 0, 0, 0, S, 0x0000ffff),\n+  MEPREL (R_MEP_TPREL7,   1,  7, 0, 0, 0, U, 0x007f),\n   MEPREL (R_MEP_TPREL7A2, 1,  7, 1, 1, 0, U, 0x007e),\n   MEPREL (R_MEP_TPREL7A4, 1,  7, 2, 2, 0, U, 0x007c),\n-  MEPREL (R_MEP_UIMM24,\t  2, 24, 0, 0, 0, U, 0x00ffffff),\n+  MEPREL (R_MEP_UIMM24,   2, 24, 0, 0, 0, U, 0x00ffffff),\n   MEPREL (R_MEP_ADDR24A4, 2, 24, 0, 2, 0, U, 0x00fcffff),\n   MEPREL (R_MEP_GNU_VTINHERIT,1,  0,16,32, 0, N, 0x0000),\n-  MEPREL (R_MEP_GNU_VTENTRY,1,\t0,16,32, 0, N, 0x0000),\n+  MEPREL (R_MEP_GNU_VTENTRY,1,  0,16,32, 0, N, 0x0000),\n   /* MEPRELOC:END */\n };\n \n@@ -221,7 +221,6 @@ mep_final_link_relocate\n      bfd_vma\t\t relocation)\n {\n   unsigned long u;\n-  long s;\n   unsigned char *byte;\n   bfd_vma pc;\n   bfd_reloc_status_type r = bfd_reloc_ok;\n@@ -242,12 +241,12 @@ mep_final_link_relocate\n \t+ input_section->output_offset\n \t+ rel->r_offset);\n \n-  s = relocation + rel->r_addend;\n+  u = relocation + rel->r_addend;\n \n   byte = (unsigned char *)contents + rel->r_offset;\n \n   if (howto->type == R_MEP_PCREL24A2\n-      && s == 0\n+      && u == 0\n       && pc >= 0x800000)\n     {\n       /* This is an unreachable branch to an undefined weak function.\n@@ -257,9 +256,7 @@ mep_final_link_relocate\n     }\n \n   if (howto->pc_relative)\n-    s -= pc;\n-\n-  u = (unsigned long) s;\n+    u -= pc;\n \n   switch (howto->type)\n     {\n@@ -281,25 +278,25 @@ mep_final_link_relocate\n       byte[3^e4] = (u & 0xff);\n       break;\n     case R_MEP_PCREL8A2: /* --------7654321- */\n-      if (-128 > s || s > 127) r = bfd_reloc_overflow;\n-      byte[1^e2] = (byte[1^e2] & 0x01) | (s & 0xfe);\n+      if (u + 128 > 255) r = bfd_reloc_overflow;\n+      byte[1^e2] = (byte[1^e2] & 0x01) | (u & 0xfe);\n       break;\n     case R_MEP_PCREL12A2: /* ----ba987654321- */\n-      if (-2048 > s || s > 2047) r = bfd_reloc_overflow;\n-      byte[0^e2] = (byte[0^e2] & 0xf0) | ((s >> 8) & 0x0f);\n-      byte[1^e2] = (byte[1^e2] & 0x01) | (s & 0xfe);\n+      if (u + 2048 > 4095) r = bfd_reloc_overflow;\n+      byte[0^e2] = (byte[0^e2] & 0xf0) | ((u >> 8) & 0x0f);\n+      byte[1^e2] = (byte[1^e2] & 0x01) | (u & 0xfe);\n       break;\n     case R_MEP_PCREL17A2: /* ----------------gfedcba987654321 */\n-      if (-65536 > s || s > 65535) r = bfd_reloc_overflow;\n-      byte[2^e2] = ((s >> 9) & 0xff);\n-      byte[3^e2] = ((s >> 1) & 0xff);\n+      if (u + 65536 > 131071) r = bfd_reloc_overflow;\n+      byte[2^e2] = ((u >> 9) & 0xff);\n+      byte[3^e2] = ((u >> 1) & 0xff);\n       break;\n     case R_MEP_PCREL24A2: /* -----7654321----nmlkjihgfedcba98 */\n-      if (-8388608 > s || s > 8388607) r = bfd_reloc_overflow;\n-      byte[0^e2] = (byte[0^e2] & 0xf8) | ((s >> 5) & 0x07);\n-      byte[1^e2] = (byte[1^e2] & 0x0f) | ((s << 3) & 0xf0);\n-      byte[2^e2] = ((s >> 16) & 0xff);\n-      byte[3^e2] = ((s >> 8) & 0xff);\n+      if (u + 8388608 > 16777215) r = bfd_reloc_overflow;\n+      byte[0^e2] = (byte[0^e2] & 0xf8) | ((u >> 5) & 0x07);\n+      byte[1^e2] = (byte[1^e2] & 0x0f) | ((u << 3) & 0xf0);\n+      byte[2^e2] = ((u >> 16) & 0xff);\n+      byte[3^e2] = ((u >> 8) & 0xff);\n       break;\n     case R_MEP_PCABS24A2: /* -----7654321----nmlkjihgfedcba98 */\n       if (u > 16777215) r = bfd_reloc_overflow;\n@@ -317,22 +314,21 @@ mep_final_link_relocate\n       byte[3^e2] = ((u >> 16) & 0xff);\n       break;\n     case R_MEP_HI16S: /* ----------------vutsrqponmlkjihg */\n-      if (s & 0x8000)\n-\ts += 0x10000;\n-      byte[2^e2] = ((s >> 24) & 0xff);\n-      byte[3^e2] = ((s >> 16) & 0xff);\n+      u += 0x8000;\n+      byte[2^e2] = ((u >> 24) & 0xff);\n+      byte[3^e2] = ((u >> 16) & 0xff);\n       break;\n     case R_MEP_GPREL: /* ----------------fedcba9876543210 */\n-      s -= mep_sdaoff_base(rel->r_offset);\n-      if (-32768 > s || s > 32767) r = bfd_reloc_overflow;\n-      byte[2^e2] = ((s >> 8) & 0xff);\n-      byte[3^e2] = (s & 0xff);\n+      u -= mep_sdaoff_base(rel->r_offset);\n+      if (u + 32768 > 65535) r = bfd_reloc_overflow;\n+      byte[2^e2] = ((u >> 8) & 0xff);\n+      byte[3^e2] = (u & 0xff);\n       break;\n     case R_MEP_TPREL: /* ----------------fedcba9876543210 */\n-      s -= mep_tpoff_base(rel->r_offset);\n-      if (-32768 > s || s > 32767) r = bfd_reloc_overflow;\n-      byte[2^e2] = ((s >> 8) & 0xff);\n-      byte[3^e2] = (s & 0xff);\n+      u -= mep_tpoff_base(rel->r_offset);\n+      if (u + 32768 > 65535) r = bfd_reloc_overflow;\n+      byte[2^e2] = ((u >> 8) & 0xff);\n+      byte[3^e2] = (u & 0xff);\n       break;\n     case R_MEP_TPREL7: /* ---------6543210 */\n       u -= mep_tpoff_base(rel->r_offset);"
    },
    {
      "sha": "544ee012a771939cc9f4b9e59ffd61d67a1b689d",
      "filename": "bfd/mep-relocs.pl",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/mep-relocs.pl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a211fc7d87dc92c2c91d24d0424d8f0485587f9/bfd/mep-relocs.pl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mep-relocs.pl?ref=1a211fc7d87dc92c2c91d24d0424d8f0485587f9",
      "patch": "@@ -156,20 +156,23 @@ sub emit_apply {\n \t    $e = '^e4' # endian swap for data\n \t}\n \tprint NEW \"    case R_MEP_$relocs[$i]: /* $pattern[$i] */\\n\";\n+\tif ($relocs[$i] =~ /HI16S/) {\n+\t    print NEW \"      u += 0x8000;\\n\"\n+\t}\n \tif ($attrs[$i] =~ /tp-rel/i) {\n-\t    print NEW \"      $v -= mep_tpoff_base(rel->r_offset);\\n\";\n+\t    print NEW \"      u -= mep_tpoff_base(rel->r_offset);\\n\";\n \t}\n \tif ($attrs[$i] =~ /gp-rel/i) {\n-\t    print NEW \"      $v -= mep_sdaoff_base(rel->r_offset);\\n\";\n+\t    print NEW \"      u -= mep_sdaoff_base(rel->r_offset);\\n\";\n \t}\n \tif ($attrs[$i] !~ /no-overflow/ && $bits[$i] < 32) {\n \t    if ($v eq \"u\") {\n \t\t$max = (1 << $bits[$i]) - 1;\n \t\tprint NEW \"      if (u > $max) r = bfd_reloc_overflow;\\n\";\n \t    } else {\n-\t\t$min = -(1 << ($bits[$i]-1));\n-\t\t$max = (1 << ($bits[$i]-1)) - 1;\n-\t\tprint NEW \"      if ($min > s || s > $max) r = bfd_reloc_overflow;\\n\";\n+\t\t$min = (1 << ($bits[$i]-1));\n+\t\t$max = (1 << ($bits[$i])) - 1;\n+\t\tprint NEW \"      if (u + $min > $max) r = bfd_reloc_overflow;\\n\";\n \t    }\n \t}\n \tfor ($b=0; $b<length($pattern[$i]); $b += 8) {\n@@ -183,11 +186,11 @@ sub emit_apply {\n \t\tprint NEW \"      byte[$bb$e] = \";\n \t\tprint NEW \"(byte[$bb$e] & 0x$rmask) | \" if $rmask ne \"00\";\n \t\tif ($left) {\n-\t\t    print NEW \"(($v << $left) & 0x$mask)\";\n+\t\t    print NEW \"((u << $left) & 0x$mask)\";\n \t\t} elsif ($right) {\n-\t\t    print NEW \"(($v >> $right) & 0x$mask)\";\n+\t\t    print NEW \"((u >> $right) & 0x$mask)\";\n \t\t} else {\n-\t\t    print NEW \"($v & 0x$mask)\";\n+\t\t    print NEW \"(u & 0x$mask)\";\n \t\t}\n \t\tprint NEW \";\\n\";\n \t    }"
    }
  ]
}