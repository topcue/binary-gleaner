{
  "sha": "9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWY2NmZmMWM4Y2Q4ZjU1MTJkNDk4MTNhYmU0OGRkYjkxNDE0NzRiZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Move two more functions to dwarf2/leb.h\n\nThis moves read_n_bytes and read_direct_string to be with the the\nlow-level value-reading code.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_n_bytes, read_direct_string): Move to\n\tread.c.\n\t* dwarf2/leb.h (read_n_bytes, read_direct_string): Move from\n\tread.c.\n\nChange-Id: Id07bfa13d93c0ac1f47a385749a8f01f4755b818",
    "tree": {
      "sha": "ba72e2b7cce109f9ed5e601be0fe0fb49c476b9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ba72e2b7cce109f9ed5e601be0fe0fb49c476b9a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 34,
    "deletions": 31
  },
  "files": [
    {
      "sha": "3be17561f56418e5803b7032ace1529a7cf8289e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_n_bytes, read_direct_string): Move to\n+\tread.c.\n+\t* dwarf2/leb.h (read_n_bytes, read_direct_string): Move from\n+\tread.c.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_address): Move to comp-unit.c."
    },
    {
      "sha": "f312fc261ee8cc44c9ba138f85019ea7cb36177e",
      "filename": "gdb/dwarf2/leb.h",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/dwarf2/leb.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/dwarf2/leb.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/leb.h?ref=9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
      "patch": "@@ -134,4 +134,31 @@ extern LONGEST read_initial_length (bfd *abfd, const gdb_byte *buf,\n extern LONGEST read_offset (bfd *abfd, const gdb_byte *buf,\n \t\t\t    unsigned int offset_size);\n \n+static inline const gdb_byte *\n+read_n_bytes (bfd *abfd, const gdb_byte *buf, unsigned int size)\n+{\n+  /* If the size of a host char is 8 bits, we can return a pointer\n+     to the buffer, otherwise we have to copy the data to a buffer\n+     allocated on the temporary obstack.  */\n+  gdb_assert (HOST_CHAR_BIT == 8);\n+  return buf;\n+}\n+\n+static inline const char *\n+read_direct_string (bfd *abfd, const gdb_byte *buf,\n+\t\t    unsigned int *bytes_read_ptr)\n+{\n+  /* If the size of a host char is 8 bits, we can return a pointer\n+     to the string, otherwise we have to copy the string to a buffer\n+     allocated on the temporary obstack.  */\n+  gdb_assert (HOST_CHAR_BIT == 8);\n+  if (*buf == '\\0')\n+    {\n+      *bytes_read_ptr = 1;\n+      return NULL;\n+    }\n+  *bytes_read_ptr = strlen ((const char *) buf) + 1;\n+  return (const char *) buf;\n+}\n+\n #endif /* GDB_DWARF2_LEB_H */"
    },
    {
      "sha": "88be8d60cf54633168bcf954410051914c9ffcbc",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f66ff1c8cd8f5512d49813abe48ddb9141474bf/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9f66ff1c8cd8f5512d49813abe48ddb9141474bf",
      "patch": "@@ -1246,10 +1246,6 @@ static sect_offset read_abbrev_offset\n   (struct dwarf2_per_objfile *dwarf2_per_objfile,\n    struct dwarf2_section_info *, sect_offset);\n \n-static const gdb_byte *read_n_bytes (bfd *, const gdb_byte *, unsigned int);\n-\n-static const char *read_direct_string (bfd *, const gdb_byte *, unsigned int *);\n-\n static const char *read_indirect_string\n   (struct dwarf2_per_objfile *dwarf2_per_objfile, bfd *, const gdb_byte *,\n    const struct comp_unit_head *, unsigned int *);\n@@ -18731,33 +18727,6 @@ read_checked_initial_length_and_offset (bfd *abfd, const gdb_byte *buf,\n   return length;\n }\n \n-static const gdb_byte *\n-read_n_bytes (bfd *abfd, const gdb_byte *buf, unsigned int size)\n-{\n-  /* If the size of a host char is 8 bits, we can return a pointer\n-     to the buffer, otherwise we have to copy the data to a buffer\n-     allocated on the temporary obstack.  */\n-  gdb_assert (HOST_CHAR_BIT == 8);\n-  return buf;\n-}\n-\n-static const char *\n-read_direct_string (bfd *abfd, const gdb_byte *buf,\n-\t\t    unsigned int *bytes_read_ptr)\n-{\n-  /* If the size of a host char is 8 bits, we can return a pointer\n-     to the string, otherwise we have to copy the string to a buffer\n-     allocated on the temporary obstack.  */\n-  gdb_assert (HOST_CHAR_BIT == 8);\n-  if (*buf == '\\0')\n-    {\n-      *bytes_read_ptr = 1;\n-      return NULL;\n-    }\n-  *bytes_read_ptr = strlen ((const char *) buf) + 1;\n-  return (const char *) buf;\n-}\n-\n /* Return pointer to string at section SECT offset STR_OFFSET with error\n    reporting strings FORM_NAME and SECT_NAME.  */\n "
    }
  ]
}