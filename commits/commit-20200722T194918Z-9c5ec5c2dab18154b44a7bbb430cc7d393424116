{
  "sha": "9c5ec5c2dab18154b44a7bbb430cc7d393424116",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWM1ZWM1YzJkYWIxODE1NGI0NGE3YmJiNDMwY2M3ZDM5MzQyNDExNg==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-04T03:10:22Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:49:18Z"
    },
    "message": "Adjust coredump-filter.exp to account for NT_FILE note handling\n\nThis commit makes adjustments to coredump-filter.exp to account\nfor the fact that NT_FILE file-backed mappings are now available\nwhen a core file is loaded.  Thus, a test which was expected\nto PASS when a memory region was determined to be unavailable\n(due to no file-backed mappings being available) will now FAIL\ndue to those mappings being available from having loaded the\nNT_FILE note.\n\nI had originally marked the test as XFAIL, but Mihails Strasuns\nsuggested a much better approach:\n\n    1) First test that it still works if file is accessible in the\n       filesystem.\n    2) Temporarily move / rename the file and test that disassembly\n       doesn't work anymore.\n\nThat's what this commit implements.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/coredump-filter.exp: Add second\n\tnon-Private-Shared-Anon-File test.\n\t(test_disasm): Rename binfile for test which is expected\n\tto fail.",
    "tree": {
      "sha": "d2333e87fb35d8788a35b27a13b366071ea9a567",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2333e87fb35d8788a35b27a13b366071ea9a567"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c5ec5c2dab18154b44a7bbb430cc7d393424116",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c5ec5c2dab18154b44a7bbb430cc7d393424116",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c5ec5c2dab18154b44a7bbb430cc7d393424116",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c5ec5c2dab18154b44a7bbb430cc7d393424116/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 35,
    "deletions": 1
  },
  "files": [
    {
      "sha": "7dc6c4146ab59f7472b52c1fb43df8474d31af2a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9c5ec5c2dab18154b44a7bbb430cc7d393424116",
      "patch": "@@ -1,3 +1,14 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+    \n+\t* linux-tdep.c (dump_note_entry_p): New function.\n+\t(linux_dump_mapping_p_ftype): New typedef.\n+\t(linux_find_memory_regions_full): Add new parameter,\n+\tshould_dump_mapping_p.\n+\t(linux_find_memory_regions): Adjust call to\n+\tlinux_find_memory_regions_full.\n+\t(linux_make_mappings_core_file_notes): Use dump_note_entry_p in\n+\tcall to linux_find_memory_regions_full.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n \n \t* corelow.c (solist.h, unordered_map): Include."
    },
    {
      "sha": "b074741d88916c5c2d66c3b5dd7901e3d128ac0a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9c5ec5c2dab18154b44a7bbb430cc7d393424116",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdb.base/coredump-filter.exp: Add second\n+\tnon-Private-Shared-Anon-File test.\n+\t(test_disasm): Rename binfile for test which is expected\n+\tto fail.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n \n \t* gdb.base/corefile.exp: Add test \"accessing read-only mmapped"
    },
    {
      "sha": "5407d116325ae43026dc1dfa65abcdcc05e2f39e",
      "filename": "gdb/testsuite/gdb.base/coredump-filter.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/testsuite/gdb.base/coredump-filter.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c5ec5c2dab18154b44a7bbb430cc7d393424116/gdb/testsuite/gdb.base/coredump-filter.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/coredump-filter.exp?ref=9c5ec5c2dab18154b44a7bbb430cc7d393424116",
      "patch": "@@ -80,22 +80,34 @@ proc do_load_and_test_core { core var working_var working_value dump_excluded }\n # disassemble of a function (i.e., the binary's .text section).  GDB\n # should fail in this case.  However, it must succeed if the binary is\n # provided along with the corefile.  This is what we test here.\n+#\n+# A further complication is that Linux NT_FILE notes are now read from\n+# the corefile.  This note allows GDB to find the binary for file\n+# backed mappings even though the binary wasn't loaded by GDB in the\n+# conventional manner.  In order to see the expected failure for this\n+# case, we rename the binary in order to perform this test.\n \n proc test_disasm { core address should_fail } {\n-    global testfile hex\n+    global testfile hex binfile\n \n     # Restart GDB without loading the binary.\n     with_test_prefix \"no binary\" {\n \tgdb_exit\n \tgdb_start\n \n+\tset hide_binfile [standard_output_file \"${testfile}.hide\"]\n+\tif { $should_fail == 1 } {\n+\t    remote_exec host \"mv -f $binfile $hide_binfile\"\n+\t}\n+\n \tset core_loaded [gdb_core_cmd \"$core\" \"load core\"]\n \tif { $core_loaded == -1 } {\n \t    fail \"loading $core\"\n \t    return\n \t}\n \n \tif { $should_fail == 1 } {\n+\t    remote_exec host \"mv -f $hide_binfile $binfile\"\n \t    gdb_test \"x/i \\$pc\" \"=> $hex:\\tCannot access memory at address $hex\" \\\n \t\t\"disassemble function with corefile and without a binary\"\n \t} else {\n@@ -225,5 +237,9 @@ foreach item $all_anon_corefiles {\n }\n \n with_test_prefix \"loading and testing corefile for non-Private-Shared-Anon-File\" {\n+    test_disasm $non_private_shared_anon_file_core $main_addr 0\n+}\n+\n+with_test_prefix \"loading and testing corefile for non-Private-Shared-Anon-File with renamed binary\" {\n     test_disasm $non_private_shared_anon_file_core $main_addr 1\n }"
    }
  ]
}