{
  "sha": "1c0aa1fbb2fb1920c12400940704ee90491b7290",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWMwYWExZmJiMmZiMTkyMGMxMjQwMDk0MDcwNGVlOTA0OTFiNzI5MA==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-14T16:41:11Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-18T01:34:21Z"
    },
    "message": "Add support for NetBSD threads in amd64-bsd-nat.c\n\nNetBSD ptrace(2) accepts thread id (LWP) as the 4th argument for threads.\n\nDefine gdb_ptrace() a wrapper function for ptrace(2) that properly passes\nthe pid,lwp pair on NetBSD and the result of get_ptrace_pid() for others.\n\ngdb/ChangeLog:\n\n\t* amd64-bsd-nat.c (gdb_ptrace): New.\n\t* (amd64bsd_fetch_inferior_registers,\n\tamd64bsd_store_inferior_registers) Switch from pid_t to ptid_t.\n\t* (amd64bsd_fetch_inferior_registers,\n\tamd64bsd_store_inferior_registers) Use gdb_ptrace.",
    "tree": {
      "sha": "3d34f25a7bdc2fc738c10a73f57b5d8e3f732f29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d34f25a7bdc2fc738c10a73f57b5d8e3f732f29"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1c0aa1fbb2fb1920c12400940704ee90491b7290",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c0aa1fbb2fb1920c12400940704ee90491b7290",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1c0aa1fbb2fb1920c12400940704ee90491b7290",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c0aa1fbb2fb1920c12400940704ee90491b7290/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3e2a5e85df4c8454135503c1034b95fecd522ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3e2a5e85df4c8454135503c1034b95fecd522ab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3e2a5e85df4c8454135503c1034b95fecd522ab"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 39,
    "deletions": 16
  },
  "files": [
    {
      "sha": "f4f7b79660157195e1ff4bd7188821d423b9d460",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0aa1fbb2fb1920c12400940704ee90491b7290/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0aa1fbb2fb1920c12400940704ee90491b7290/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1c0aa1fbb2fb1920c12400940704ee90491b7290",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* amd64-bsd-nat.c (gdb_ptrace): New.\n+\t* (amd64bsd_fetch_inferior_registers,\n+\tamd64bsd_store_inferior_registers) Switch from pid_t to ptid_t.\n+\t* (amd64bsd_fetch_inferior_registers,\n+\tamd64bsd_store_inferior_registers) Use gdb_ptrace.\n+\n 2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n \n \t* user-regs.c (user_reg::read): Rename to..."
    },
    {
      "sha": "1ff044ff470bd59449b0ae46a951102c90492c89",
      "filename": "gdb/amd64-bsd-nat.c",
      "status": "modified",
      "additions": 31,
      "deletions": 16,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1c0aa1fbb2fb1920c12400940704ee90491b7290/gdb/amd64-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1c0aa1fbb2fb1920c12400940704ee90491b7290/gdb/amd64-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-bsd-nat.c?ref=1c0aa1fbb2fb1920c12400940704ee90491b7290",
      "patch": "@@ -36,14 +36,29 @@\n #include \"amd64-bsd-nat.h\"\n \f\n \n+static int\n+gdb_ptrace (PTRACE_TYPE_ARG1 request, ptid_t ptid, PTRACE_TYPE_ARG3 addr,\n+\t    PTRACE_TYPE_ARG4 data)\n+{\n+#ifdef __NetBSD__\n+  gdb_assert (data == 0);\n+  /* Support for NetBSD threads: unlike other ptrace implementations in this\n+     file, NetBSD requires that we pass both the pid and lwp.  */\n+  return ptrace (request, ptid.pid (), addr, ptid.lwp ());\n+#else\n+  pid_t pid = get_ptrace_pid (ptid);\n+  return ptrace (request, pid, addr, data);\n+#endif\n+}\n+\n /* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this\n    for all registers (including the floating-point registers).  */\n \n void\n amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n #if defined(PT_GETFSBASE) || defined(PT_GETGSBASE)\n   const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n #endif\n@@ -52,7 +67,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       struct reg regs;\n \n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n \tperror_with_name (_(\"Couldn't get registers\"));\n \n       amd64_supply_native_gregset (regcache, &regs, -1);\n@@ -65,7 +80,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       register_t base;\n \n-      if (ptrace (PT_GETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_GETFSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register fs_base\"));\n \n       regcache->raw_supply (tdep->fsbase_regnum, &base);\n@@ -78,7 +93,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       register_t base;\n \n-      if (ptrace (PT_GETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_GETGSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register gs_base\"));\n \n       regcache->raw_supply (tdep->fsbase_regnum + 1, &base);\n@@ -96,7 +111,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n       if (x86bsd_xsave_len != 0)\n \t{\n \t  xstateregs = alloca (x86bsd_xsave_len);\n-\t  if (ptrace (PT_GETXSTATE, pid, (PTRACE_TYPE_ARG3) xstateregs, 0)\n+\t  if (gdb_ptrace (PT_GETXSTATE, ptid, (PTRACE_TYPE_ARG3) xstateregs, 0)\n \t      == -1)\n \t    perror_with_name (_(\"Couldn't get extended state status\"));\n \n@@ -105,7 +120,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n \t}\n #endif\n \n-      if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+      if (gdb_ptrace (PT_GETFPREGS, ptid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \tperror_with_name (_(\"Couldn't get floating point status\"));\n \n       amd64_supply_fxsave (regcache, -1, &fpregs);\n@@ -119,7 +134,7 @@ void\n amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n #if defined(PT_SETFSBASE) || defined(PT_SETGSBASE)\n   const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n #endif\n@@ -128,12 +143,12 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       struct reg regs;\n \n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n         perror_with_name (_(\"Couldn't get registers\"));\n \n       amd64_collect_native_gregset (regcache, &regs, regnum);\n \n-      if (ptrace (PT_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_SETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n         perror_with_name (_(\"Couldn't write registers\"));\n \n       if (regnum != -1)\n@@ -149,7 +164,7 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n       base = 0;\n       regcache->raw_collect (tdep->fsbase_regnum, &base);\n \n-      if (ptrace (PT_SETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_SETFSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register fs_base\"));\n       if (regnum != -1)\n \treturn;\n@@ -164,7 +179,7 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n       base = 0;\n       regcache->raw_collect (tdep->fsbase_regnum + 1, &base);\n \n-      if (ptrace (PT_SETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_SETGSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register gs_base\"));\n       if (regnum != -1)\n \treturn;\n@@ -180,25 +195,25 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n       if (x86bsd_xsave_len != 0)\n \t{\n \t  xstateregs = alloca (x86bsd_xsave_len);\n-\t  if (ptrace (PT_GETXSTATE, pid, (PTRACE_TYPE_ARG3) xstateregs, 0)\n+\t  if (gdb_ptrace (PT_GETXSTATE, ptid, (PTRACE_TYPE_ARG3) xstateregs, 0)\n \t      == -1)\n \t    perror_with_name (_(\"Couldn't get extended state status\"));\n \n \t  amd64_collect_xsave (regcache, regnum, xstateregs, 0);\n \n-\t  if (ptrace (PT_SETXSTATE, pid, (PTRACE_TYPE_ARG3) xstateregs,\n-\t\t      x86bsd_xsave_len) == -1)\n+\t  if (gdb_ptrace (PT_SETXSTATE, ptid, (PTRACE_TYPE_ARG3) xstateregs,\n+\t\t\t  x86bsd_xsave_len) == -1)\n \t    perror_with_name (_(\"Couldn't write extended state status\"));\n \t  return;\n \t}\n #endif\n \n-      if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+      if (gdb_ptrace (PT_GETFPREGS, ptid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \tperror_with_name (_(\"Couldn't get floating point status\"));\n \n       amd64_collect_fxsave (regcache, regnum, &fpregs);\n \n-      if (ptrace (PT_SETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+      if (gdb_ptrace (PT_SETFPREGS, ptid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \tperror_with_name (_(\"Couldn't write floating point status\"));\n     }\n }"
    }
  ]
}