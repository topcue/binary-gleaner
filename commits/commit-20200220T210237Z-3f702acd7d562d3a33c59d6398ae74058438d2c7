{
  "sha": "3f702acd7d562d3a33c59d6398ae74058438d2c7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Y3MDJhY2Q3ZDU2MmQzYTMzYzU5ZDYzOThhZTc0MDU4NDM4ZDJjNw==",
  "commit": {
    "author": {
      "name": "Sergio Durigan Junior",
      "email": "sergiodj@redhat.com",
      "date": "2020-02-19T21:40:48Z"
    },
    "committer": {
      "name": "Sergio Durigan Junior",
      "email": "sergiodj@redhat.com",
      "date": "2020-02-20T21:02:37Z"
    },
    "message": "Make '{putchar,fputc}_unfiltered' use 'fputs_unfiltered'\n\nThere is currently a regression when using\n'{putchar,fputc}_unfiltered' with 'puts_unfiltered' which was\nintroduced by one of the commits that reworked the unfiltered print\ncode.\n\nThe regression makes it impossible to use '{putchar,fputc}_unfiltered'\nwith 'puts_unfiltered', because the former writes directly to the\nui_file stream using 'stream->write', while the latter uses a buffered\nmechanism (see 'wrap_buffer') and delays the printing.\n\nIf you do a quick & dirty hack on e.g. top.c:show_gdb_datadir:\n\n  @@ -2088,6 +2088,13 @@ static void\n   show_gdb_datadir (struct ui_file *file, int from_tty,\n\t\t    struct cmd_list_element *c, const char *value)\n   {\n  +  putchar_unfiltered ('\\n');\n  +  puts_unfiltered (\"TEST\");\n  +  putchar_unfiltered ('>');\n  +  puts_unfiltered (\"PUTS\");\n  +  putchar_unfiltered ('\\n');\n\nrebuild GDB and invoke the \"show data-directory\" command, you will\nsee:\n\n  (gdb) show data-directory\n\n  >\n  TESTPUTSGDB's data directory is \"/usr/local/share/gdb\".\n\nNote how the '>' was printed before the output, and \"TEST\" and \"PUTS\"\nwere printed together.\n\nMy first attempt to fix this was to always call 'flush_wrap_buffer' at\nthe end of 'fputs_maybe_filtered', since it seemed to me that the\nfunction should always print what was requested.  But I wasn't sure\nthis was the right thing to do, so I talked to Tom on IRC and he gave\nme another, simpler idea: make '{putchar,fputc}_unfiltered' call into\nthe already existing 'fputs_unfiltered' function.\n\nThis patch implements the idea.  I regtested it on the Buildbot, and\nno regressions were detected.\n\ngdb/ChangeLog:\n2020-02-20  Sergio Durigan Junior  <sergiodj@redhat.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* utils.c (fputs_maybe_filtered): Call 'stream->puts' instead\n\tof 'fputc_unfiltered'.\n\t(putchar_unfiltered): Call 'fputc_unfiltered'.\n\t(fputc_unfiltered): Call 'fputs_unfiltered'.",
    "tree": {
      "sha": "f0a09e5b9e6bbb156e6a07d15527089bd79127b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f0a09e5b9e6bbb156e6a07d15527089bd79127b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3f702acd7d562d3a33c59d6398ae74058438d2c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f702acd7d562d3a33c59d6398ae74058438d2c7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3f702acd7d562d3a33c59d6398ae74058438d2c7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f702acd7d562d3a33c59d6398ae74058438d2c7/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "a9c798035de33ccc3bc3e494449bbe931e900372",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9c798035de33ccc3bc3e494449bbe931e900372",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a9c798035de33ccc3bc3e494449bbe931e900372"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 25,
    "deletions": 8
  },
  "files": [
    {
      "sha": "40bee39c1eeb6af6306997326513ca6da64ee932",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f702acd7d562d3a33c59d6398ae74058438d2c7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f702acd7d562d3a33c59d6398ae74058438d2c7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3f702acd7d562d3a33c59d6398ae74058438d2c7",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-20  Sergio Durigan Junior  <sergiodj@redhat.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* utils.c (fputs_maybe_filtered): Call 'stream->puts' instead\n+\tof 'fputc_unfiltered'.\n+\t(putchar_unfiltered): Call 'fputc_unfiltered'.\n+\t(fputc_unfiltered): Call 'fputs_unfiltered'.\n+\n 2020-02-20  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* config.in: Regenerate."
    },
    {
      "sha": "0b470120a22f60b9309743d016e4f1df035c9128",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 17,
      "deletions": 8,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3f702acd7d562d3a33c59d6398ae74058438d2c7/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3f702acd7d562d3a33c59d6398ae74058438d2c7/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=3f702acd7d562d3a33c59d6398ae74058438d2c7",
      "patch": "@@ -1776,7 +1776,12 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t     newline -- if chars_per_line is right, we\n \t\t     probably just overflowed anyway; if it's wrong,\n \t\t     let us keep going.  */\n-\t\t  fputc_unfiltered ('\\n', stream);\n+\t\t  /* XXX: The ideal thing would be to call\n+\t\t     'stream->putc' here, but we can't because it\n+\t\t     currently calls 'fputc_unfiltered', which ends up\n+\t\t     calling us, which generates an infinite\n+\t\t     recursion.  */\n+\t\t  stream->puts (\"\\n\");\n \t\t}\n \t      else\n \t\t{\n@@ -1821,7 +1826,12 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t  wrap_here ((char *) 0);\t/* Spit out chars, cancel\n \t\t\t\t\t   further wraps.  */\n \t  lines_printed++;\n-\t  fputc_unfiltered ('\\n', stream);\n+\t  /* XXX: The ideal thing would be to call\n+\t     'stream->putc' here, but we can't because it\n+\t     currently calls 'fputc_unfiltered', which ends up\n+\t     calling us, which generates an infinite\n+\t     recursion.  */\n+\t  stream->puts (\"\\n\");\n \t  lineptr++;\n \t}\n     }\n@@ -1916,10 +1926,7 @@ fputs_highlighted (const char *str, const compiled_regex &highlight,\n int\n putchar_unfiltered (int c)\n {\n-  char buf = c;\n-\n-  gdb_stdout->write (&buf, 1);\n-  return c;\n+  return fputc_unfiltered (c, gdb_stdout);\n }\n \n /* Write character C to gdb_stdout using GDB's paging mechanism and return C.\n@@ -1934,9 +1941,11 @@ putchar_filtered (int c)\n int\n fputc_unfiltered (int c, struct ui_file *stream)\n {\n-  char buf = c;\n+  char buf[2];\n \n-  stream->write (&buf, 1);\n+  buf[0] = c;\n+  buf[1] = 0;\n+  fputs_unfiltered (buf, stream);\n   return c;\n }\n "
    }
  ]
}