{
  "sha": "ac03c8d8fd6cf7f9080068589683cb06531879c2",
  "node_id": "C_kwDOANOeidoAKGFjMDNjOGQ4ZmQ2Y2Y3ZjkwODAwNjg1ODk2ODNjYjA2NTMxODc5YzI",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-02-18T21:03:03Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-02-23T20:18:04Z"
    },
    "message": "Fix bug in C++ overload resolution\n\nPR c++/28901 points out a bug in C++ overload resolution.  When\ncomparing two overloads, one might be better than the other for\ncertain parameters -- but, if that one also has some invalid\nconversion, then it should never be considered the better choice.\nInstead, a valid-but-not-apparently-quite-as-good overload should be\npreferred.\n\nThis patch fixes this problem by changing how overload comparisons are\ndone.  I don't believe it should affect any currently valid overload\nresolution; nor should it affect resolutions where all the choices are\nequally invalid.",
    "tree": {
      "sha": "da33dc0c2f1158f9d28dacf2ffb8c6ba47624747",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/da33dc0c2f1158f9d28dacf2ffb8c6ba47624747"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ac03c8d8fd6cf7f9080068589683cb06531879c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac03c8d8fd6cf7f9080068589683cb06531879c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ac03c8d8fd6cf7f9080068589683cb06531879c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac03c8d8fd6cf7f9080068589683cb06531879c2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "29ef4c0699e1b46d41ade00ae07a54f979ea21cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29ef4c0699e1b46d41ade00ae07a54f979ea21cc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/29ef4c0699e1b46d41ade00ae07a54f979ea21cc"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 47,
    "deletions": 9
  },
  "files": [
    {
      "sha": "f41d6bd960e20305eac3970e7ca84972751bd761",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 34,
      "deletions": 9,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=ac03c8d8fd6cf7f9080068589683cb06531879c2",
      "patch": "@@ -44,12 +44,15 @@\n #include <algorithm>\n #include \"gmp-utils.h\"\n \n+/* The value of an invalid conversion badness.  */\n+#define INVALID_CONVERSION 100\n+\n /* Initialize BADNESS constants.  */\n \n-const struct rank LENGTH_MISMATCH_BADNESS = {100,0};\n+const struct rank LENGTH_MISMATCH_BADNESS = {INVALID_CONVERSION,0};\n \n-const struct rank TOO_FEW_PARAMS_BADNESS = {100,0};\n-const struct rank INCOMPATIBLE_TYPE_BADNESS = {100,0};\n+const struct rank TOO_FEW_PARAMS_BADNESS = {INVALID_CONVERSION,0};\n+const struct rank INCOMPATIBLE_TYPE_BADNESS = {INVALID_CONVERSION,0};\n \n const struct rank EXACT_MATCH_BADNESS = {0,0};\n \n@@ -3966,8 +3969,14 @@ compare_badness (const badness_vector &a, const badness_vector &b)\n {\n   int i;\n   int tmp;\n-  short found_pos = 0;\t\t/* any positives in c? */\n-  short found_neg = 0;\t\t/* any negatives in c? */\n+  /* Any positives in comparison? */\n+  bool found_pos = false;\n+  /* Any negatives in comparison? */\n+  bool found_neg = false;\n+  /* Did A have any INVALID_CONVERSION entries.  */\n+  bool a_invalid = false;\n+  /* Did B have any INVALID_CONVERSION entries.  */\n+  bool b_invalid = false;\n \n   /* differing sizes => incomparable */\n   if (a.size () != b.size ())\n@@ -3978,12 +3987,27 @@ compare_badness (const badness_vector &a, const badness_vector &b)\n     {\n       tmp = compare_ranks (b[i], a[i]);\n       if (tmp > 0)\n-\tfound_pos = 1;\n+\tfound_pos = true;\n       else if (tmp < 0)\n-\tfound_neg = 1;\n+\tfound_neg = true;\n+      if (a[i].rank >= INVALID_CONVERSION)\n+\ta_invalid = true;\n+      if (b[i].rank >= INVALID_CONVERSION)\n+\tb_invalid = true;\n     }\n \n-  if (found_pos)\n+  /* B will only be considered better than or incomparable to A if\n+     they both have invalid entries, or if neither does.  That is, if\n+     A has only valid entries, and B has an invalid entry, then A will\n+     be considered better than B, even if B happens to be better for\n+     some parameter.  */\n+  if (a_invalid != b_invalid)\n+    {\n+      if (a_invalid)\n+\treturn 3;\t\t/* A > B */\n+      return 2;\t\t\t/* A < B */\n+    }\n+  else if (found_pos)\n     {\n       if (found_neg)\n \treturn 1;\t\t/* incomparable */\n@@ -4742,7 +4766,8 @@ rank_one_type_parm_set (struct type *parm, struct type *arg, struct value *value\n  * Return 0 if they are identical types;\n  * Otherwise, return an integer which corresponds to how compatible\n  * PARM is to ARG.  The higher the return value, the worse the match.\n- * Generally the \"bad\" conversions are all uniformly assigned a 100.  */\n+ * Generally the \"bad\" conversions are all uniformly assigned\n+ * INVALID_CONVERSION.  */\n \n struct rank\n rank_one_type (struct type *parm, struct type *arg, struct value *value)"
    },
    {
      "sha": "ab015721b2bb53d22e6540a46ec7c64e33bbe851",
      "filename": "gdb/testsuite/gdb.cp/overload.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/testsuite/gdb.cp/overload.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/testsuite/gdb.cp/overload.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/overload.cc?ref=ac03c8d8fd6cf7f9080068589683cb06531879c2",
      "patch": "@@ -93,10 +93,15 @@ class A {};\n class B: public A {};\n class C: public B {};\n class D: C {};\n+class E {};\n+class F {};\n \n int bar (A) { return 11; }\n int bar (B) { return 22; }\n \n+int bar2 (E &, A &) { return 33; }\n+int bar2 (F &, B &) { return 44; }\n+\n int intintfunc (int x) { return x; }\n \n int main () \n@@ -119,11 +124,16 @@ int main ()\n     B b;\n     C c;\n     D d;\n+    E e;\n+    F f;\n \n     bar (a);\n     bar (b);\n     bar (c);\n \n+    bar2 (e, b);\n+    bar2 (f, b);\n+\n     char *str = (char *) \"A\";\n     foo foo_instance1(111);\n     foo foo_instance2(222, str);"
    },
    {
      "sha": "73ca0d2d55c416b0e64e84d31834fde8a5672fde",
      "filename": "gdb/testsuite/gdb.cp/overload.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/testsuite/gdb.cp/overload.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac03c8d8fd6cf7f9080068589683cb06531879c2/gdb/testsuite/gdb.cp/overload.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/overload.exp?ref=ac03c8d8fd6cf7f9080068589683cb06531879c2",
      "patch": "@@ -259,6 +259,9 @@ gdb_test \"print bar(b)\" \"= 22\"\n gdb_test \"print bar(c)\" \"= 22\"\n gdb_test \"print bar(d)\" \"= 22\"\n \n+# PR c++/28901 - gdb thought this was ambiguous.\n+gdb_test \"print bar2(e, b)\" \" = 33\"\n+\n # ---\n \n # List overloaded functions."
    }
  ]
}