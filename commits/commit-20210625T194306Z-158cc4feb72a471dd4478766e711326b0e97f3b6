{
  "sha": "158cc4feb72a471dd4478766e711326b0e97f3b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTU4Y2M0ZmViNzJhNDcxZGQ0NDc4NzY2ZTcxMTMyNmIwZTk3ZjNiNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-22T18:27:53Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-25T19:43:06Z"
    },
    "message": "gdb: use gdb::optional instead of passing a pointer to gdb::array_view\n\nFollowing on from the previous commit, this commit changes the API of\nvalue_struct_elt to take gdb::optional<gdb::array_view<value *>>\ninstead of a pointer to the gdb::array_view.\n\nThis makes the optional nature of the array_view parameter explicit.\n\nThis commit is purely a refactoring commit, there should be no user\nvisible change after this commit.\n\nI have deliberately kept this refactor separate from the previous two\ncommits as this is a more extensive change, and I'm not 100% sure that\nusing gdb::optional for the parameter type, instead of a pointer, is\ngoing to be to everyone's taste.  If there's push back on this patch\nthen this one can be dropped from the series.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (desc_bounds): Use '{}' instead of NULL to indicate\n\tan empty gdb::optional when calling value_struct_elt.\n\t(desc_data): Likewise.\n\t(desc_one_bound): Likewise.\n\t* eval.c (structop_base_operation::evaluate_funcall): Pass\n\tgdb::array_view, not a gdb::array_view* to value_struct_elt.\n\t(eval_op_structop_struct): Use '{}' instead of NULL to indicate\n\tan empty gdb::optional when calling value_struct_elt.\n\t(eval_op_structop_ptr): Likewise.\n\t* f-lang.c (fortran_structop_operation::evaluate): Likewise.\n\t* guile/scm-value.c (gdbscm_value_field): Likewise.\n\t* m2-lang.c (eval_op_m2_high): Likewise.\n\t(eval_op_m2_subscript): Likewise.\n\t* opencl-lang.c (opencl_structop_operation::evaluate): Likewise.\n\t* python/py-value.c (valpy_getitem): Likewise.\n\t* rust-lang.c (rust_val_print_str): Likewise.\n\t(rust_range): Likewise.\n\t(rust_subscript): Likewise.\n\t(eval_op_rust_structop): Likewise.\n\t(rust_aggregate_operation::evaluate): Likewise.\n\t* valarith.c (value_user_defined_op): Likewise.\n\t* valops.c (search_struct_method): Change parameter type, update\n\tfunction body accordingly, and update header comment.\n\t(value_struct_elt): Change parameter type, update function body\n\taccordingly.\n\t* value.h (value_struct_elt): Update declaration.",
    "tree": {
      "sha": "05613a2324b85ec6984848e6e9e372c653959e98",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05613a2324b85ec6984848e6e9e372c653959e98"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/158cc4feb72a471dd4478766e711326b0e97f3b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/158cc4feb72a471dd4478766e711326b0e97f3b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/158cc4feb72a471dd4478766e711326b0e97f3b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/158cc4feb72a471dd4478766e711326b0e97f3b6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "13221aec0d87c701c463d4fa54aa70096d0f43a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13221aec0d87c701c463d4fa54aa70096d0f43a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/13221aec0d87c701c463d4fa54aa70096d0f43a7"
    }
  ],
  "stats": {
    "total": 99,
    "additions": 65,
    "deletions": 34
  },
  "files": [
    {
      "sha": "1d10ae0f6c8b965639ef1f34768acd92d1fa7f2d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -1,3 +1,32 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (desc_bounds): Use '{}' instead of NULL to indicate\n+\tan empty gdb::optional when calling value_struct_elt.\n+\t(desc_data): Likewise.\n+\t(desc_one_bound): Likewise.\n+\t* eval.c (structop_base_operation::evaluate_funcall): Pass\n+\tgdb::array_view, not a gdb::array_view* to value_struct_elt.\n+\t(eval_op_structop_struct): Use '{}' instead of NULL to indicate\n+\tan empty gdb::optional when calling value_struct_elt.\n+\t(eval_op_structop_ptr): Likewise.\n+\t* f-lang.c (fortran_structop_operation::evaluate): Likewise.\n+\t* guile/scm-value.c (gdbscm_value_field): Likewise.\n+\t* m2-lang.c (eval_op_m2_high): Likewise.\n+\t(eval_op_m2_subscript): Likewise.\n+\t* opencl-lang.c (opencl_structop_operation::evaluate): Likewise.\n+\t* python/py-value.c (valpy_getitem): Likewise.\n+\t* rust-lang.c (rust_val_print_str): Likewise.\n+\t(rust_range): Likewise.\n+\t(rust_subscript): Likewise.\n+\t(eval_op_rust_structop): Likewise.\n+\t(rust_aggregate_operation::evaluate): Likewise.\n+\t* valarith.c (value_user_defined_op): Likewise.\n+\t* valops.c (search_struct_method): Change parameter type, update\n+\tfunction body accordingly, and update header comment.\n+\t(value_struct_elt): Change parameter type, update function body\n+\taccordingly.\n+\t* value.h (value_struct_elt): Update declaration.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR gdb/27994"
    },
    {
      "sha": "f2270c0f6afe65d2d1c997e13c6a9d3fe197b8a7",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -1484,7 +1484,7 @@ desc_bounds (struct value *arr)\n \n   else if (is_thick_pntr (type))\n     {\n-      struct value *p_bounds = value_struct_elt (&arr, NULL, \"P_BOUNDS\", NULL,\n+      struct value *p_bounds = value_struct_elt (&arr, {}, \"P_BOUNDS\", NULL,\n \t\t\t\t\t       _(\"Bad GNAT array descriptor\"));\n       struct type *p_bounds_type = value_type (p_bounds);\n \n@@ -1566,7 +1566,7 @@ desc_data (struct value *arr)\n   if (is_thin_pntr (type))\n     return thin_data_pntr (arr);\n   else if (is_thick_pntr (type))\n-    return value_struct_elt (&arr, NULL, \"P_ARRAY\", NULL,\n+    return value_struct_elt (&arr, {}, \"P_ARRAY\", NULL,\n \t\t\t     _(\"Bad GNAT array descriptor\"));\n   else\n     return NULL;\n@@ -1606,7 +1606,7 @@ desc_one_bound (struct value *bounds, int i, int which)\n   char bound_name[20];\n   xsnprintf (bound_name, sizeof (bound_name), \"%cB%d\",\n \t     which ? 'U' : 'L', i - 1);\n-  return value_struct_elt (&bounds, NULL, bound_name, NULL,\n+  return value_struct_elt (&bounds, {}, bound_name, NULL,\n \t\t\t   _(\"Bad GNAT array descriptor bounds\"));\n }\n "
    },
    {
      "sha": "5c348c34e6656870a1fa36d9863521df39423483",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -947,7 +947,7 @@ structop_base_operation::evaluate_funcall\n     {\n       struct value *temp = vals[0];\n \n-      callee = value_struct_elt (&temp, &arg_view, tstr,\n+      callee = value_struct_elt (&temp, arg_view, tstr,\n \t\t\t\t &static_memfuncp,\n \t\t\t\t op == STRUCTOP_STRUCT\n \t\t\t\t ? \"structure\" : \"structure pointer\");\n@@ -1132,7 +1132,7 @@ eval_op_structop_struct (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside,\n \t\t\t struct value *arg1, const char *string)\n {\n-  struct value *arg3 = value_struct_elt (&arg1, NULL, string,\n+  struct value *arg3 = value_struct_elt (&arg1, {}, string,\n \t\t\t\t\t NULL, \"structure\");\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     arg3 = value_zero (value_type (arg3), VALUE_LVAL (arg3));\n@@ -1188,7 +1188,7 @@ eval_op_structop_ptr (struct type *expect_type, struct expression *exp,\n       }\n   }\n \n-  struct value *arg3 = value_struct_elt (&arg1, NULL, string,\n+  struct value *arg3 = value_struct_elt (&arg1, {}, string,\n \t\t\t\t\t NULL, \"structure pointer\");\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     arg3 = value_zero (value_type (arg3), VALUE_LVAL (arg3));"
    },
    {
      "sha": "16ec9e04044b899b59560e9cdc72a15441f98372",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -1511,7 +1511,7 @@ fortran_structop_operation::evaluate (struct type *expect_type,\n \targ1 = std::get<0> (m_storage)->evaluate (nullptr, exp, EVAL_NORMAL);\n     }\n \n-  value *elt = value_struct_elt (&arg1, NULL, str, NULL, \"structure\");\n+  value *elt = value_struct_elt (&arg1, {}, str, NULL, \"structure\");\n \n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     {"
    },
    {
      "sha": "d4d76df0411d529b976eee927807a0c393ce4c68",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -694,7 +694,7 @@ gdbscm_value_field (SCM self, SCM field_scm)\n \n       struct value *tmp = v_smob->value;\n \n-      struct value *res_val = value_struct_elt (&tmp, NULL, field.get (), NULL,\n+      struct value *res_val = value_struct_elt (&tmp, {}, field.get (), NULL,\n \t\t\t\t\t\t\"struct/class/union\");\n \n       return vlscm_scm_from_value (res_val);"
    },
    {
      "sha": "911d67d86721d1d665087c789fa482177077e6e6",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -50,7 +50,7 @@ eval_op_m2_high (struct type *expect_type, struct expression *exp,\n \n \t  type = type->field (1).type ();\n \t  /* i18n: Do not translate the \"_m2_high\" part!  */\n-\t  arg1 = value_struct_elt (&temp, NULL, \"_m2_high\", NULL,\n+\t  arg1 = value_struct_elt (&temp, {}, \"_m2_high\", NULL,\n \t\t\t\t   _(\"unbounded structure \"\n \t\t\t\t     \"missing _m2_high field\"));\n \n@@ -83,7 +83,7 @@ eval_op_m2_subscript (struct type *expect_type, struct expression *exp,\n \terror (_(\"internal error: unbounded \"\n \t\t \"array structure is unknown\"));\n       /* i18n: Do not translate the \"_m2_contents\" part!  */\n-      arg1 = value_struct_elt (&temp, NULL, \"_m2_contents\", NULL,\n+      arg1 = value_struct_elt (&temp, {}, \"_m2_contents\", NULL,\n \t\t\t       _(\"unbounded structure \"\n \t\t\t\t \"missing _m2_contents field\"));\n \t  "
    },
    {
      "sha": "136969ead7664928efa72a7ec621a414b9fe09d3",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -708,7 +708,7 @@ opencl_structop_operation::evaluate (struct type *expect_type,\n \t\t\t\t noside);\n   else\n     {\n-      struct value *v = value_struct_elt (&arg1, NULL,\n+      struct value *v = value_struct_elt (&arg1, {},\n \t\t\t\t\t  std::get<1> (m_storage).c_str (),\n \t\t\t\t\t  NULL, \"structure\");\n "
    },
    {
      "sha": "8df8a15f8d6b2697118cadfd45d7aff55812dc0e",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -992,7 +992,7 @@ valpy_getitem (PyObject *self, PyObject *key)\n       scoped_value_mark free_values;\n \n       if (field)\n-\tres_val = value_struct_elt (&tmp, NULL, field.get (), NULL,\n+\tres_val = value_struct_elt (&tmp, {}, field.get (), NULL,\n \t\t\t\t    \"struct/class/union\");\n       else if (bitpos >= 0)\n \tres_val = value_struct_elt_bitpos (&tmp, bitpos, field_type,"
    },
    {
      "sha": "60ea89b139493947a5cda159f98dd6ae8decb7c9",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -302,9 +302,9 @@ static void\n rust_val_print_str (struct ui_file *stream, struct value *val,\n \t\t    const struct value_print_options *options)\n {\n-  struct value *base = value_struct_elt (&val, NULL, \"data_ptr\", NULL,\n+  struct value *base = value_struct_elt (&val, {}, \"data_ptr\", NULL,\n \t\t\t\t\t \"slice\");\n-  struct value *len = value_struct_elt (&val, NULL, \"length\", NULL, \"slice\");\n+  struct value *len = value_struct_elt (&val, {}, \"length\", NULL, \"slice\");\n \n   val_print_string (TYPE_TARGET_TYPE (value_type (base)), \"UTF-8\",\n \t\t    value_as_address (base), value_as_long (len), stream,\n@@ -1030,15 +1030,15 @@ rust_range (struct type *expect_type, struct expression *exp,\n \n   if (low != NULL)\n     {\n-      struct value *start = value_struct_elt (&result, NULL, \"start\", NULL,\n+      struct value *start = value_struct_elt (&result, {}, \"start\", NULL,\n \t\t\t\t\t      \"range\");\n \n       value_assign (start, low);\n     }\n \n   if (high != NULL)\n     {\n-      struct value *end = value_struct_elt (&result, NULL, \"end\", NULL,\n+      struct value *end = value_struct_elt (&result, {}, \"end\", NULL,\n \t\t\t\t\t    \"range\");\n \n       value_assign (end, high);\n@@ -1176,8 +1176,8 @@ rust_subscript (struct type *expect_type, struct expression *exp,\n \t{\n \t  struct value *len;\n \n-\t  base = value_struct_elt (&lhs, NULL, \"data_ptr\", NULL, \"slice\");\n-\t  len = value_struct_elt (&lhs, NULL, \"length\", NULL, \"slice\");\n+\t  base = value_struct_elt (&lhs, {}, \"data_ptr\", NULL, \"slice\");\n+\t  len = value_struct_elt (&lhs, {}, \"length\", NULL, \"slice\");\n \t  low_bound = 0;\n \t  high_bound = value_as_long (len);\n \t}\n@@ -1400,7 +1400,7 @@ eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n \n       try\n \t{\n-\t  result = value_struct_elt (&lhs, NULL, field_name,\n+\t  result = value_struct_elt (&lhs, {}, field_name,\n \t\t\t\t     NULL, \"structure\");\n \t}\n       catch (const gdb_exception_error &except)\n@@ -1411,7 +1411,7 @@ eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n \t}\n     }\n   else\n-    result = value_struct_elt (&lhs, NULL, field_name, NULL, \"structure\");\n+    result = value_struct_elt (&lhs, {}, field_name, NULL, \"structure\");\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     result = value_zero (value_type (result), VALUE_LVAL (result));\n   return result;\n@@ -1457,7 +1457,7 @@ rust_aggregate_operation::evaluate (struct type *expect_type,\n       if (noside == EVAL_NORMAL)\n \t{\n \t  const char *fieldname = item.first.c_str ();\n-\t  value *field = value_struct_elt (&result, nullptr, fieldname,\n+\t  value *field = value_struct_elt (&result, {}, fieldname,\n \t\t\t\t\t   nullptr, \"structure\");\n \t  value_assign (field, val);\n \t}"
    },
    {
      "sha": "9ebad648b27bd6f7a23973c26a53b829452d0877",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -344,7 +344,7 @@ value_user_defined_op (struct value **argp, gdb::array_view<value *> args,\n \t\t\t\t\t  noside);\n     }\n   else\n-    result = value_struct_elt (argp, &args, name, static_memfuncp,\n+    result = value_struct_elt (argp, args, name, static_memfuncp,\n \t\t\t       \"structure\");\n \n   return result;"
    },
    {
      "sha": "bd547923496f4b39a3651b47679771eaf3feb4fc",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -51,7 +51,7 @@ static struct value *search_struct_field (const char *, struct value *,\n \t\t\t\t\t  struct type *, int);\n \n static struct value *search_struct_method (const char *, struct value **,\n-\t\t\t\t\t   gdb::array_view<value *> *,\n+\t\t\t\t\t   gdb::optional<gdb::array_view<value *>>,\n \t\t\t\t\t   LONGEST, int *, struct type *);\n \n static int find_oload_champ_namespace (gdb::array_view<value *> args,\n@@ -2177,17 +2177,18 @@ search_struct_field (const char *name, struct value *arg1,\n    ARG1 by OFFSET bytes, and search in it assuming it has (class) type\n    TYPE.\n \n-   The ARGS array pointer is to a list of argument values used to help\n-   finding NAME, though ARGS can be nullptr.  The contents of ARGS can be\n-   adjusted if type coercion is required in order to find a matching NAME.\n+   ARGS is an optional array of argument values used to help finding NAME.\n+   The contents of ARGS can be adjusted if type coercion is required in\n+   order to find a matching NAME.\n \n    If found, return value, else if name matched and args not return\n    (value) -1, else return NULL.  */\n \n static struct value *\n search_struct_method (const char *name, struct value **arg1p,\n-\t\t      gdb::array_view<value *> *args, LONGEST offset,\n-\t\t      int *static_memfuncp, struct type *type)\n+\t\t      gdb::optional<gdb::array_view<value *>> args,\n+\t\t      LONGEST offset, int *static_memfuncp,\n+\t\t      struct type *type)\n {\n   int i;\n   struct value *v;\n@@ -2205,10 +2206,10 @@ search_struct_method (const char *name, struct value **arg1p,\n \n \t  name_matched = 1;\n \t  check_stub_method_group (type, i);\n-\t  if (j > 0 && args == nullptr)\n+\t  if (j > 0 && !args.has_value ())\n \t    error (_(\"cannot resolve overloaded method \"\n \t\t     \"`%s': no arguments supplied\"), name);\n-\t  else if (j == 0 && args == nullptr)\n+\t  else if (j == 0 && !args.has_value ())\n \t    {\n \t      v = value_fn_field (arg1p, f, j, type, offset);\n \t      if (v != NULL)\n@@ -2217,7 +2218,7 @@ search_struct_method (const char *name, struct value **arg1p,\n \t  else\n \t    while (j >= 0)\n \t      {\n-\t\tgdb_assert (args != nullptr);\n+\t\tgdb_assert (args.has_value ());\n \t\tif (!typecmp (TYPE_FN_FIELD_STATIC_P (f, j),\n \t\t\t      TYPE_FN_FIELD_TYPE (f, j)->has_varargs (),\n \t\t\t      TYPE_FN_FIELD_TYPE (f, j)->num_fields (),\n@@ -2320,7 +2321,8 @@ search_struct_method (const char *name, struct value **arg1p,\n    found.  */\n \n struct value *\n-value_struct_elt (struct value **argp, gdb::array_view<value *> *args,\n+value_struct_elt (struct value **argp,\n+\t\t  gdb::optional<gdb::array_view<value *>> args,\n \t\t  const char *name, int *static_memfuncp, const char *err)\n {\n   struct type *t;\n@@ -2350,7 +2352,7 @@ value_struct_elt (struct value **argp, gdb::array_view<value *> *args,\n   if (static_memfuncp)\n     *static_memfuncp = 0;\n \n-  if (args == nullptr)\n+  if (!args.has_value ())\n     {\n       /* if there are no arguments ...do this...  */\n "
    },
    {
      "sha": "379cddafbe7fa8064110d7595cf296ca0b3127e1",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/158cc4feb72a471dd4478766e711326b0e97f3b6/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=158cc4feb72a471dd4478766e711326b0e97f3b6",
      "patch": "@@ -826,7 +826,7 @@ extern struct value *value_neg (struct value *arg1);\n extern struct value *value_complement (struct value *arg1);\n \n extern struct value *value_struct_elt (struct value **argp,\n-\t\t\t\t       gdb::array_view <value *> *args,\n+\t\t\t\t       gdb::optional<gdb::array_view <value *>> args,\n \t\t\t\t       const char *name, int *static_memfuncp,\n \t\t\t\t       const char *err);\n "
    }
  ]
}